#NAME: other
#PARENT: Gio.FileInfo.dup.FileInfo
#COMMENT: a #GFileInfo.
#NAME: request_certificate_finish
#PARENT: Gio.TlsInteractionClass.request_certificate_finish.request_certificate_finish
#COMMENT: The status of the request certificate interaction.
#NAME: interface_name
#PARENT: Gio.DBusObjectIface.get_interface.get_interface.DBusInterface
#COMMENT: A D-Bus interface name.
#NAME: simple_async_report_error_in_idle
#PARENT: Gio
#COMMENT: Reports an error in an asynchronous function in an idle function by
directly setting the contents of the #GAsyncResult with the given error
information.
#NAME: connection
#PARENT: Gio.DBusConnection.send_message_with_reply_sync.DBusMessage
#COMMENT: a #GDBusConnection
#NAME: user_data
#PARENT: Gio.SocketAddressEnumerator.next_async.none
#COMMENT: the data to pass to callback function
#NAME: set_environ
#PARENT: Gio.SubprocessLauncher
#COMMENT: Replace the entire environment of processes launched from this
launcher with the given 'environ' variable.

Typically you will build this variable by using g_listenv() to copy
the process 'environ' and using the functions g_environ_setenv(),
g_environ_unsetenv(), etc.

As an alternative, you can use g_subprocess_launcher_setenv(),
g_subprocess_launcher_unsetenv(), etc.

All strings in this array are expected to be in the GLib file name
encoding.  On UNIX, this means that they can be arbitrary byte
strings.  On Windows, they should be in UTF-8.
#NAME: get_address_type
#PARENT: Gio.UnixSocketAddress
#COMMENT: Gets @address's type.
#NAME: info
#PARENT: Gio.AppLaunchContext.get_startup_notify_id.utf8
#COMMENT: a #GAppInfo
#NAME: object_path
#PARENT: Gio.DBusInterfaceMethodCallFunc.none
#COMMENT: The object path that the method was invoked on.
#NAME: query
#PARENT: Gio.IOModule
#COMMENT: Optional API for GIO modules to implement.

Should return a list of all the extension points that may be
implemented in this module.

This method will not be called in normal use, however it may be
called when probing existing modules and recording which extension
points that this model is used for. This means we won't have to
load and initialize this module unless its needed.

If this function is not implemented by the module the module will
always be loaded, initialized and then unloaded on application
startup so that it can register its extension points during init.

Note that a module need not actually implement all the extension
points that g_io_module_query() returns, since the exact list of
extension may depend on runtime issues. However all extension
points actually implemented must be returned by g_io_module_query()
(if defined).

When installing a module that implements g_io_module_query() you must
run gio-querymodules in order to build the cache files required for
lazy loading.
#NAME: buffer
#PARENT: Gio.OutputStreamClass.write_fn.write_fn.gssize
#COMMENT: the buffer containing the data to write.
#NAME: content_type_get_icon
#PARENT: Gio.content_type_get_icon
#COMMENT: #GIcon corresponding to the content type. Free the returned
    object with g_object_unref()
#NAME: eject_with_operation_finish
#PARENT: Gio.DriveIface.eject_with_operation_finish.eject_with_operation_finish
#COMMENT: %TRUE if the drive was successfully ejected. %FALSE otherwise.
#NAME: cancellable
#PARENT: Gio.File.make_symbolic_link.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: action_name
#PARENT: Gio.ActionGroup.query_action.gboolean
#COMMENT: the name of an action in the group
#NAME: get_uuid
#PARENT: Gio.VolumeIface.get_uuid.get_uuid
#COMMENT: the UUID for @volume or %NULL if no UUID can be computed.
    The returned string should be freed with g_free()
    when no longer needed.
#NAME: interface_
#PARENT: Gio.DBusInterface.get_object.DBusObject
#COMMENT: An exported D-Bus interface
#NAME: name
#PARENT: Gio.FileInfo.set_name.none
#COMMENT: a string containing a name.
#NAME: unix_mount_guess_symbolic_icon
#PARENT: Gio
#COMMENT: Guesses the symbolic icon of a Unix mount.
#NAME: set_attributes_from_info
#PARENT: Gio.FileIface.set_attributes_from_info.set_attributes_from_info
#COMMENT: %FALSE if there was any error, %TRUE otherwise.
#NAME: set_boolean
#PARENT: Gio.Settings.set_boolean
#COMMENT: %TRUE if setting the key succeeded,
    %FALSE if the key was not writable
#NAME: vfs
#PARENT: Gio.VfsClass.get_file_for_path.get_file_for_path.File
#COMMENT: a #GVfs.
#NAME: display_name
#PARENT: Gio.FileIface.set_display_name_async.set_display_name_async.none
#COMMENT: a string
#NAME: source_object
#PARENT: Gio.SimpleAsyncResult.new.SimpleAsyncResult
#COMMENT: a #GObject, or %NULL.
#NAME: new_from_file
#PARENT: Gio.TlsCertificate.new_from_file
#COMMENT: the new certificate, or %NULL on error
#NAME: fill
#PARENT: Gio.BufferedInputStream.fill
#COMMENT: the number of bytes read into @stream's buffer, up to @count,
    or -1 on error.
#NAME: stream
#PARENT: Gio.FilterInputStream.get_close_base_stream.gboolean
#COMMENT: a #GFilterInputStream.
#NAME: name
#PARENT: Gio.DBusMethodInfo
#COMMENT: The name of the D-Bus method, e.g. @RequestName.
#NAME: list_schemas
#PARENT: Gio.Settings
#COMMENT: <!-- -->
#NAME: info
#PARENT: Gio.FileInfo.set_attribute.none
#COMMENT: a #GFileInfo.
#NAME: stream
#PARENT: Gio.IOStream.set_pending.gboolean
#COMMENT: a #GIOStream
#NAME: user_data
#PARENT: Gio.Drive.start.none
#COMMENT: user data to pass to @callback
#NAME: message
#PARENT: Gio.DBusMessage.get_interface.utf8
#COMMENT: A #GDBusMessage.
#NAME: error
#PARENT: Gio.DBusError.get_remote_error.utf8
#COMMENT: a #GError
#NAME: interface_name
#PARENT: Gio.DBusInterfaceSetPropertyFunc.gboolean
#COMMENT: The D-Bus interface name for the property.
#NAME: set_error_va
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Sets an error within the asynchronous result without a #GError.
Unless writing a binding, see g_simple_async_result_set_error().
#NAME: flags
#PARENT: Gio.DBusConnection.register_subtree.guint
#COMMENT: flags used to fine tune the behavior of the subtree
#NAME: cancellable
#PARENT: Gio.Initable.new_valist.GObject.Object
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: symlink_value
#PARENT: Gio.FileIface.make_symbolic_link.make_symbolic_link.gboolean
#COMMENT: a string with the path for the target of the new symlink
#NAME: appinfo
#PARENT: Gio.AppInfo.do_delete.gboolean
#COMMENT: a #GAppInfo
#NAME: measure_disk_usage
#PARENT: Gio.FileIface.measure_disk_usage.measure_disk_usage
#COMMENT: %TRUE if successful, with the out parameters set.
         %FALSE otherwise, with @error set.
#NAME: cancellable
#PARENT: Gio.DataOutputStream.put_uint32.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: unload
#PARENT: Gio.IOModule
#COMMENT: Required API for GIO modules to implement.

This function is run when the module is being unloaded from GIO,
to finalize the module.
#NAME: stream
#PARENT: Gio.OutputStream.flush_finish.gboolean
#COMMENT: a #GOutputStream.
#NAME: cancellable
#PARENT: Gio.DBusConnection.call.none
#COMMENT: a #GCancellable or %NULL
#NAME: socket
#PARENT: Gio.Socket.set_multicast_ttl.none
#COMMENT: a #GSocket.
#NAME: client
#PARENT: Gio.SocketClient.get_proxy_resolver.ProxyResolver
#COMMENT: a #GSocketClient.
#NAME: position
#PARENT: Gio.ListModel.get_object.GObject.Object
#COMMENT: the position of the item to fetch
#NAME: new_from_string
#PARENT: Gio.InetAddressMask.new_from_string
#COMMENT: a new #GInetAddressMask corresponding to @string, or %NULL
on error.
#NAME: cancellable
#PARENT: Gio.File.set_attributes_from_info.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: message
#PARENT: Gio.UnixFDMessage.append_fd.gboolean
#COMMENT: a #GUnixFDMessage
#NAME: bus_get_finish
#PARENT: Gio
#COMMENT: Finishes an operation started with g_bus_get().

The returned object is a singleton, that is, shared with other
callers of g_bus_get() and g_bus_get_sync() for @bus_type. In the
event that you need a private message bus connection, use
g_dbus_address_get_for_bus_sync() and
g_dbus_connection_new_for_address().

Note that the returned #GDBusConnection object will (usually) have
the #GDBusConnection:exit-on-close property set to %TRUE.
#NAME: monitor
#PARENT: Gio.NetworkMonitor.get_connectivity.NetworkConnectivity
#COMMENT: the #GNetworkMonitor
#NAME: callback
#PARENT: Gio.InputStreamClass.read_async.read_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: get_key
#PARENT: Gio.SettingsSchema
#COMMENT: Gets the key named @name from @schema.

It is a programmer error to request a key that does not exist.  See
g_settings_schema_list_keys().
#NAME: get_ttl
#PARENT: Gio.Socket.get_ttl
#COMMENT: the time-to-live setting on @socket
#NAME: socket
#PARENT: Gio.Socket.get_listen_backlog.gint
#COMMENT: a #GSocket.
#NAME: added
#PARENT: Gio.MenuModel.items-changed.none
#COMMENT: the number of items added
#NAME: StaticResource
#PARENT: Gio
#COMMENT: #GStaticResource is an opaque data structure and can only be accessed
using the following functions.
#NAME: splice_finish
#PARENT: Gio.OutputStream
#COMMENT: Finishes an asynchronous stream splice operation.
#NAME: new_from_names
#PARENT: Gio.ThemedIcon
#COMMENT: Creates a new themed icon for @iconnames.
#NAME: is-loopback
#PARENT: Gio.InetAddress
#COMMENT: Whether this is the loopback address for its family.
See g_inet_address_get_is_loopback().
#NAME: monitor_dir
#PARENT: Gio.File
#COMMENT: Obtains a directory monitor for the given file.
This may fail if directory monitoring is not supported.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

It does not make sense for @flags to contain
%G_FILE_MONITOR_WATCH_HARD_LINKS, since hard links can not be made to
directories.  It is not possible to monitor all the files in a
directory for changes made via hard links; if you want to do this then
you must register individual watches with g_file_monitor().
#NAME: path
#PARENT: Gio.Settings.new_with_backend_and_path.Settings
#COMMENT: the path to use
#NAME: enumerate_children_async
#PARENT: Gio.File
#COMMENT: Asynchronously gets the requested information about the files
in a directory. The result is a #GFileEnumerator object that will
give out #GFileInfo objects for all the files in the directory.

For more details, see g_file_enumerate_children() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can
then call g_file_enumerate_children_finish() to get the result of
the operation.
#NAME: next
#PARENT: Gio.MenuAttributeIter
#COMMENT: Attempts to advance the iterator to the next (possibly first)
attribute.

%TRUE is returned on success, or %FALSE if there are no more
attributes.

You must call this function when you first acquire the iterator
to advance it to the first attribute (and determine if the first
attribute exists at all).
#NAME: connect_to_uri
#PARENT: Gio.SocketClient
#COMMENT: This is a helper function for g_socket_client_connect().

Attempts to create a TCP connection with a network URI.

@uri may be any valid URI containing an "authority" (hostname/port)
component. If a port is not specified in the URI, @default_port
will be used. TLS will be negotiated if #GSocketClient:tls is %TRUE.
(#GSocketClient does not know to automatically assume TLS for
certain URI schemes.)

Using this rather than g_socket_client_connect() or
g_socket_client_connect_to_host() allows #GSocketClient to
determine when to use application-specific proxy protocols.

Upon a successful connection, a new #GSocketConnection is constructed
and returned.  The caller owns this new object and must drop their
reference to it when finished with it.

In the event of any failure (DNS error, service not found, no hosts
connectable) %NULL is returned and @error (if non-%NULL) is set
accordingly.
#NAME: receive
#PARENT: Gio.Socket
#COMMENT: Receive data (up to @size bytes) from a socket. This is mainly used by
connection-oriented sockets; it is identical to g_socket_receive_from()
with @address set to %NULL.

For %G_SOCKET_TYPE_DATAGRAM and %G_SOCKET_TYPE_SEQPACKET sockets,
g_socket_receive() will always read either 0 or 1 complete messages from
the socket. If the received message is too large to fit in @buffer, then
the data beyond @size bytes will be discarded, without any explicit
indication that this has occurred.

For %G_SOCKET_TYPE_STREAM sockets, g_socket_receive() can return any
number of bytes, up to @size. If more than @size bytes have been
received, the additional data will be returned in future calls to
g_socket_receive().

If the socket is in blocking mode the call will block until there
is some data to receive, the connection is closed, or there is an
error. If there is no data available and the socket is in
non-blocking mode, a %G_IO_ERROR_WOULD_BLOCK error will be
returned. To be notified when data is available, wait for the
%G_IO_IN condition.

On error -1 is returned and @error is set accordingly.
#NAME: get_icon
#PARENT: Gio.DriveIface.get_icon.get_icon
#COMMENT: #GIcon for the @drive.
   Free the returned object with g_object_unref().
#NAME: none
#PARENT: Gio.FileCopyFlags
#COMMENT: No flags set.
#NAME: BusNameLostCallback
#PARENT: Gio
#COMMENT: Invoked when the name is lost or @connection has been closed.
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.print.none
#COMMENT: a #GApplicationCommandLine
#NAME: get_stdin
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Gets the stdin of the invoking process.

The #GInputStream can be used to read data passed to the standard
input of the invoking process.
This doesn't work on all platforms.  Presently, it is only available
on UNIX when using a DBus daemon capable of passing file descriptors.
If stdin is not available then %NULL will be returned.  In the
future, support may be expanded to other platforms.

You must only call this function once per commandline invocation.
#NAME: connection_refused
#PARENT: Gio.IOErrorEnum
#COMMENT: Connection refused. Since 2.26
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_as_string.utf8
#COMMENT: a file attribute key.
#NAME: stream
#PARENT: Gio.DataInputStream.read_uint32.guint32
#COMMENT: a given #GDataInputStream.
#NAME: FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for getting the unix device file.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: drive
#PARENT: Gio.DriveIface.is_media_check_automatic.is_media_check_automatic.gboolean
#COMMENT: a #GDrive.
#NAME: TlsClientConnectionInterface
#PARENT: Gio
#COMMENT: vtable for a #GTlsClientConnection implementation.
#NAME: read_until
#PARENT: Gio.DataInputStream.read_until
#COMMENT: a string with the data that was read
    before encountering any of the stop characters. Set @length to
    a #gsize to get the length of the string. This function will
    return %NULL on an error.
#NAME: bytes_written
#PARENT: Gio.OutputStream.write_all_finish.gboolean
#COMMENT: location to store the number of bytes that was written to the stream
#NAME: get
#PARENT: Gio.VolumeMonitor
#COMMENT: Gets the volume monitor used by gio.
#NAME: uri
#PARENT: Gio.ProxyResolver.lookup.utf8
#COMMENT: a URI representing the destination to connect to
#NAME: get_value
#PARENT: Gio.TlsPassword.get_value
#COMMENT: The password value (owned by the password object).
#NAME: close
#PARENT: Gio.FileEnumerator.close
#COMMENT: #TRUE on success or #FALSE on error.
#NAME: DBusNodeInfo
#PARENT: Gio
#COMMENT: Information about nodes in a remote object hierarchy.
#NAME: can_mount
#PARENT: Gio.VolumeIface.can_mount.can_mount
#COMMENT: %TRUE if the @volume can be mounted. %FALSE otherwise
#NAME: settings_schema_source_get_default
#PARENT: Gio
#COMMENT: Gets the default system schema source.

This function is not required for normal uses of #GSettings but it
may be useful to authors of plugin management systems or to those who
want to introspect the content of schemas.

If no schemas are installed, %NULL will be returned.

The returned source may actually consist of multiple schema sources
from different directories, depending on which directories were given
in `XDG_DATA_DIRS` and `GSETTINGS_SCHEMA_DIR`. For this reason, all
lookups performed against the default source should probably be done
recursively.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.can_delete.can_delete.gboolean
#COMMENT: a #GAppInfo
#NAME: user_data
#PARENT: Gio.BusNameAcquiredCallback.none
#COMMENT: User data passed to g_bus_own_name() or g_bus_own_name_on_connection().
#NAME: mount
#PARENT: Gio.Mount.unmount.none
#COMMENT: a #GMount.
#NAME: can_eject
#PARENT: Gio.Mount
#COMMENT: Checks if @mount can be eject.
#NAME: load_finish
#PARENT: Gio.LoadableIcon
#COMMENT: Finishes an asynchronous icon load started in g_loadable_icon_load_async().
#NAME: type
#PARENT: Gio.content_type_get_icon.Icon
#COMMENT: a content type string
#NAME: FILE_ATTRIBUTE_UNIX_GID
#PARENT: Gio
#COMMENT: A key in the "unix" namespace for getting the group ID for the file.
This attribute is only available for UNIX file systems.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: resolve_relative_path
#PARENT: Gio.File.resolve_relative_path
#COMMENT: #GFile to the resolved path.
    %NULL if @relative_path is %NULL or if @file is invalid.
    Free the returned object with g_object_unref().
#NAME: get_is_abstract
#PARENT: Gio.UnixSocketAddress
#COMMENT: Tests if @address is abstract.
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_int32.gint32
#COMMENT: a file attribute key.
#NAME: condition_timed_wait
#PARENT: Gio.Socket.condition_timed_wait
#COMMENT: %TRUE if the condition was met, %FALSE otherwise
#NAME: interaction
#PARENT: Gio.TlsInteractionClass.ask_password_finish.ask_password_finish.TlsInteractionResult
#COMMENT: a #GTlsInteraction object
#NAME: res
#PARENT: Gio.File.replace_finish.FileOutputStream
#COMMENT: a #GAsyncResult
#NAME: cancellable
#PARENT: Gio.DriveIface.eject.eject.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: read_nonblocking
#PARENT: Gio.PollableInputStreamInterface.read_nonblocking.read_nonblocking
#COMMENT: the number of bytes read, or -1 on error (including
  %G_IO_ERROR_WOULD_BLOCK).
#NAME: notification
#PARENT: Gio.Notification.set_default_action.none
#COMMENT: a #GNotification
#NAME: task_data_destroy
#PARENT: Gio.Task.set_task_data.none
#COMMENT: #GDestroyNotify for @task_data
#NAME: action_name
#PARENT: Gio.RemoteActionGroup.change_action_state_full.none
#COMMENT: the name of the action to change the state of
#NAME: info
#PARENT: Gio.FileInfo.set_attribute_boolean.none
#COMMENT: a #GFileInfo.
#NAME: get_cancellable
#PARENT: Gio.Task.get_cancellable
#COMMENT: @task's #GCancellable
#NAME: error
#PARENT: Gio.dbus_error_get_remote_error.utf8
#COMMENT: a #GError
#NAME: flags
#PARENT: Gio.DriveIface.start.start.none
#COMMENT: flags affecting the start operation.
#NAME: list
#PARENT: Gio.FileAttributeInfoList.dup.FileAttributeInfoList
#COMMENT: a #GFileAttributeInfoList to duplicate.
#NAME: cancellable
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: A #GCancellable or %NULL.
#NAME: DBusPropertyInfo
#PARENT: Gio
#COMMENT: Information about a D-Bus property on a D-Bus interface.
#NAME: g_iface
#PARENT: Gio.ProxyResolverInterface
#COMMENT: The parent interface.
#NAME: message
#PARENT: Gio.DBusMessage.set_num_unix_fds.none
#COMMENT: A #GDBusMessage.
#NAME: callback
#PARENT: Gio.InputStream.read_bytes_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: link
#PARENT: Gio.MenuItem.set_link.none
#COMMENT: type of link to establish or unset
#NAME: insert
#PARENT: Gio.Menu
#COMMENT: Convenience function for inserting a normal menu item into @menu.
Combine g_menu_item_new() and g_menu_insert_item() for a more flexible
alternative.
#NAME: resolver
#PARENT: Gio.ResolverClass.lookup_by_name_finish.lookup_by_name_finish.InetAddress
#COMMENT: a #GResolver
#NAME: unknown
#PARENT: Gio.SocketProtocol
#COMMENT: The protocol type is unknown
#NAME: drive
#PARENT: Gio.DriveIface.eject_with_operation_finish.eject_with_operation_finish.gboolean
#COMMENT: a #GDrive.
#NAME: annotations
#PARENT: Gio.DBusAnnotationInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
#NAME: flush_finish
#PARENT: Gio.OutputStream.flush_finish
#COMMENT: %TRUE if flush operation succeeded, %FALSE otherwise.
#NAME: delete_async
#PARENT: Gio.File
#COMMENT: Asynchronously delete a file. If the @file is a directory, it will
only be deleted if it is empty.  This has the same semantics as
g_unlink().
#NAME: flags
#PARENT: Gio.File.measure_disk_usage.gboolean
#COMMENT: #GFileMeasureFlags
#NAME: AsyncInitableIface
#PARENT: Gio
#COMMENT: Provides an interface for asynchronous initializing object such that
initialization may fail.
#NAME: stream
#PARENT: Gio.InputStream.read_all_async.none
#COMMENT: A #GInputStream
#NAME: range_check
#PARENT: Gio.SettingsSchemaKey
#COMMENT: Checks if the given @value is of the correct type and within the
permitted range for @key.

It is a programmer error if @value is not of the correct type -- you
must check for this first.
#NAME: g-name-owner
#PARENT: Gio.DBusProxy
#COMMENT: The unique name that owns #GDBusProxy:g-name or %NULL if no-one
currently owns that name. You may connect to #GObject::notify signal to
track changes to this property.
#NAME: resource
#PARENT: Gio.Resource.unref.none
#COMMENT: A #GResource
#NAME: res
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_finish.GLib.Variant
#COMMENT: a #GAsyncResult obtained from the #GAsyncReadyCallback passed to
    g_dbus_connection_call_with_unix_fd_list()
#NAME: query_info
#PARENT: Gio.FileInputStream
#COMMENT: Queries a file input stream the given @attributes. This function blocks
while querying the stream. For the asynchronous (non-blocking) version
of this function, see g_file_input_stream_query_info_async(). While the
stream is blocked, the stream will set the pending flag internally, and
any other operations on the stream will fail with %G_IO_ERROR_PENDING.
#NAME: model
#PARENT: Gio.MenuModel.is_mutable.gboolean
#COMMENT: a #GMenuModel
#NAME: parameter_type
#PARENT: Gio.ActionEntry
#COMMENT: the type of the parameter that must be passed to the
                 activate function for this action, given as a single
                 GVariant type string (or %NULL for no parameter)
#NAME: count
#PARENT: Gio.BufferedInputStreamClass.fill.fill.gssize
#COMMENT: the number of bytes that will be read from the stream
#NAME: is_readonly
#PARENT: Gio.UnixMountPoint.is_readonly
#COMMENT: %TRUE if a mount point is read only.
#NAME: new
#PARENT: Gio.DataOutputStream
#COMMENT: Creates a new data output stream for @base_stream.
#NAME: get_capabilities
#PARENT: Gio.DBusConnection
#COMMENT: Gets the capabilities negotiated with the remote peer
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.get_interface_name.utf8
#COMMENT: A #GDBusMethodInvocation.
#NAME: callback
#PARENT: Gio.FileIface.set_display_name_async.set_display_name_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: file
#PARENT: Gio.File.make_directory_finish.gboolean
#COMMENT: input #GFile
#NAME: abstract
#PARENT: Gio.UnixSocketAddressType
#COMMENT: an abstract name
#NAME: new
#PARENT: Gio.ConverterOutputStream.new
#COMMENT: a new #GOutputStream.
#NAME: source
#PARENT: Gio.Task.attach_source.none
#COMMENT: the source to attach
#NAME: connect_to_service
#PARENT: Gio.SocketClient
#COMMENT: Attempts to create a TCP connection to a service.

This call looks up the SRV record for @service at @domain for the
"tcp" protocol.  It then attempts to connect, in turn, to each of
the hosts providing the service until either a connection succeeds
or there are no hosts remaining.

Upon a successful connection, a new #GSocketConnection is constructed
and returned.  The caller owns this new object and must drop their
reference to it when finished with it.

In the event of any failure (DNS error, service not found, no hosts
connectable) %NULL is returned and @error (if non-%NULL) is set
accordingly.
#NAME: flags
#PARENT: Gio.FileIface.mount_mountable.mount_mountable.none
#COMMENT: flags affecting the operation
#NAME: annotations
#PARENT: Gio.DBusPropertyInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
#NAME: next_files_finish
#PARENT: Gio.FileEnumerator.next_files_finish
#COMMENT: a #GList of #GFileInfos. You must free the list with
    g_list_free() and unref the infos with g_object_unref() when you're
    done with them.
#NAME: return_error_if_cancelled
#PARENT: Gio.Task.return_error_if_cancelled
#COMMENT: %TRUE if @task has been cancelled, %FALSE if not
#NAME: connection
#PARENT: Gio.DBusConnection.flush.none
#COMMENT: a #GDBusConnection
#NAME: skip_finish
#PARENT: Gio.InputStream.skip_finish
#COMMENT: the size of the bytes skipped, or %-1 on error.
#NAME: get_child
#PARENT: Gio.Settings
#COMMENT: Creates a child settings object which has a base path of
`base-path/@name`, where `base-path` is the base path of
@settings.

The schema for the child settings object must have been declared
in the schema of @settings using a <child> element.
#NAME: mapping
#PARENT: Gio.Settings.get_mapped.gpointer
#COMMENT: the function to map the value in the
          settings database to the value used by the application
#NAME: cancellable
#PARENT: Gio.File.start_mountable.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: resource
#PARENT: Gio.Resource._unregister.none
#COMMENT: A #GResource
#NAME: bus_name
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: a unique or well-known bus name or %NULL
    if @connection is not a message bus connection
#NAME: get_supported_types
#PARENT: Gio.AppInfo.get_supported_types
#COMMENT: 
   a list of content types.
#NAME: create_readwrite_async
#PARENT: Gio.File
#COMMENT: Asynchronously creates a new file and returns a stream
for reading and writing to it. The file must not already exist.

For more details, see g_file_create_readwrite() which is
the synchronous version of this call.

When the operation is finished, @callback will be called.
You can then call g_file_create_readwrite_finish() to get
the result of the operation.
#NAME: writable-change-event
#PARENT: Gio.Settings
#COMMENT: The "writable-change-event" signal is emitted once per writability
change event that affects this settings object.  You should connect
to this signal if you are interested in viewing groups of changes
before they are split out into multiple emissions of the
"writable-changed" signal.  For most use cases it is more
appropriate to use the "writable-changed" signal.

In the event that the writability change applies only to a single
key, @key will be set to the #GQuark for that key.  In the event
that the writability change affects the entire settings object,
@key will be 0.

The default handler for this signal invokes the "writable-changed"
and "changed" signals for each affected key.  This is done because
changes in writability might also imply changes in value (if for
example, a new mandatory setting is introduced).  If any other
connected handler returns %TRUE then this default functionality
will be suppressed.
#NAME: cancellable
#PARENT: Gio.Subprocess.communicate_utf8.gboolean
#COMMENT: a #GCancellable
#NAME: interface_name
#PARENT: Gio.DBusProxy.new_for_bus_sync.DBusProxy
#COMMENT: A D-Bus interface name.
#NAME: file
#PARENT: Gio.File.poll_mountable.none
#COMMENT: input #GFile
#NAME: result
#PARENT: Gio.File.set_attributes_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: get_symbolic_icon
#PARENT: Gio.FileInfo.get_symbolic_icon
#COMMENT: #GIcon for the given @info.
#NAME: cancellable
#PARENT: Gio.FileIface.set_display_name.set_display_name.File
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: observer
#PARENT: Gio.DBusAuthObserver.allow_mechanism.gboolean
#COMMENT: A #GDBusAuthObserver.
#NAME: simple
#PARENT: Gio.SimpleActionGroup.insert.none
#COMMENT: a #GSimpleActionGroup
#NAME: action
#PARENT: Gio.Action.get_state.GLib.Variant
#COMMENT: a #GAction
#NAME: resolver
#PARENT: Gio.Resolver.lookup_records_finish.GLib.Variant
#COMMENT: a #GResolver
#NAME: cancellable
#PARENT: Gio.MountIface.unmount.unmount.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: domain
#PARENT: Gio.DBusMethodInvocation.return_error_literal.none
#COMMENT: A #GQuark for the #GError error domain.
#NAME: list_children
#PARENT: Gio.Settings.list_children
#COMMENT: a list of the children on @settings
#NAME: to_string
#PARENT: Gio.Icon
#COMMENT: Generates a textual representation of @icon that can be used for
serialization such as when passing @icon to a different process or
saving it to persistent storage. Use g_icon_new_for_string() to
get @icon back from the returned string.

The encoding of the returned string is proprietary to #GIcon except
in the following two cases

- If @icon is a #GFileIcon, the returned string is a native path
  (such as `/path/to/my icon.png`) without escaping
  if the #GFile for @icon is a native file.  If the file is not
  native, the returned string is the result of g_file_get_uri()
  (such as `sftp://path/to/my%20icon.png`).

- If @icon is a #GThemedIcon with exactly one name, the encoding is
   simply the name (such as `network-server`).
#NAME: file1
#PARENT: Gio.File.equal.gboolean
#COMMENT: the first #GFile
#NAME: cancellable
#PARENT: Gio.File.query_file_type.FileType
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: is_hidden
#PARENT: Gio.FileInfo.set_is_hidden.none
#COMMENT: a #gboolean.
#NAME: source_object
#PARENT: Gio.SocketListener.add_any_inet_port.guint16
#COMMENT: Optional #GObject identifying this source
#NAME: file2
#PARENT: Gio.File.equal.gboolean
#COMMENT: the second #GFile
#NAME: file
#PARENT: Gio.FileIface.enumerate_children_finish.enumerate_children_finish.FileEnumerator
#COMMENT: input #GFile
#NAME: file
#PARENT: Gio.File.query_exists.gboolean
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.File.create_readwrite.FileIOStream
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: enumerator
#PARENT: Gio.FileEnumerator.has_pending.gboolean
#COMMENT: a #GFileEnumerator.
#NAME: length
#PARENT: Gio.TlsCertificate.new_from_pem.TlsCertificate
#COMMENT: the length of @data, or -1 if it's 0-terminated.
#NAME: insecure
#PARENT: Gio.TlsCertificateFlags
#COMMENT: The certificate's algorithm is
  considered insecure.
#NAME: connection
#PARENT: Gio.DBusConnection.register_subtree.guint
#COMMENT: a #GDBusConnection
#NAME: new_for_bus
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Like g_dbus_object_manager_client_new() but takes a #GBusType instead of a
#GDBusConnection.

This is an asynchronous failable constructor. When the result is
ready, @callback will be invoked in the
[thread-default main loop][g-main-context-push-thread-default]
of the thread you are calling this method from. You can
then call g_dbus_object_manager_client_new_for_bus_finish() to get the result. See
g_dbus_object_manager_client_new_for_bus_sync() for the synchronous version.
#NAME: default_proxy
#PARENT: Gio.SimpleProxyResolver.new.ProxyResolver
#COMMENT: the default proxy to use, eg
    "socks://192.168.1.1"
#NAME: stream
#PARENT: Gio.DataOutputStream.put_int16.gboolean
#COMMENT: a #GDataOutputStream.
#NAME: NetworkConnectivity
#PARENT: Gio
#COMMENT: The host's network connectivity state, as reported by #GNetworkMonitor.
#NAME: invalid
#PARENT: Gio.CredentialsType
#COMMENT: Indicates an invalid native credential type.
#NAME: init
#PARENT: Gio.InitableIface.init.init
#COMMENT: %TRUE if successful. If an error has occurred, this function will
    return %FALSE and set @error appropriately if present.
#NAME: title
#PARENT: Gio.Notification.new.Notification
#COMMENT: the title of the notification
#NAME: parse_name
#PARENT: Gio.Vfs
#COMMENT: This operation never fails, but the returned object might
not support any I/O operations if the @parse_name cannot
be parsed by the #GVfs module.
#NAME: getenv
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Gets the value of a particular environment variable of the command
line invocation, as would be returned by g_getenv().  The strings may
contain non-utf8 data.

The remote application usually does not send an environment.  Use
%G_APPLICATION_SEND_ENVIRONMENT to affect that.  Even with this flag
set it is possible that the environment is still not available (due
to invocation messages from other applications).

The return value should not be modified or freed and is valid for as
long as @cmdline exists.
#NAME: application_id
#PARENT: Gio.Application.new.Application
#COMMENT: the application id
#NAME: get_attribute_byte_string
#PARENT: Gio.FileInfo.get_attribute_byte_string
#COMMENT: the contents of the @attribute value as a byte string, or
%NULL otherwise.
#NAME: user_data
#PARENT: Gio.bus_own_name.guint
#COMMENT: user data to pass to handlers
#NAME: ref
#PARENT: Gio.DBusMethodInfo.ref
#COMMENT: The same @info.
#NAME: DBusProxyTypeFunc
#PARENT: Gio
#COMMENT: Function signature for a function used to determine the #GType to
use for an interface proxy (if @interface_name is not %NULL) or
object proxy (if @interface_name is %NULL).

This function is called in the
[thread-default main loop][g-main-context-push-thread-default]
that @manager was constructed in.
#NAME: name_vanished_closure
#PARENT: Gio.bus_watch_name_on_connection_with_closures.guint
#COMMENT: #GClosure to invoke when @name is known
to not exist or %NULL.
#NAME: stream
#PARENT: Gio.PollableInputStream.read_nonblocking.gssize
#COMMENT: a #GPollableInputStream
#NAME: stream
#PARENT: Gio.UnixInputStream.set_close_fd.none
#COMMENT: a #GUnixInputStream
#NAME: get_id
#PARENT: Gio.SettingsSchema.get_id
#COMMENT: the ID
#NAME: string
#PARENT: Gio.dbus_is_guid.gboolean
#COMMENT: The string to check.
#NAME: expected_type
#PARENT: Gio.MenuItem.get_attribute_value.GLib.Variant
#COMMENT: the expected type of the attribute
#NAME: result
#PARENT: Gio.SocketClient.connect_to_uri_finish.SocketConnection
#COMMENT: a #GAsyncResult.
#NAME: flags
#PARENT: Gio.OutputStream.splice.gssize
#COMMENT: a set of #GOutputStreamSpliceFlags.
#NAME: pollable_stream_write
#PARENT: Gio.pollable_stream_write
#COMMENT: the number of bytes written, or -1 on error.
#NAME: unix_mount_at
#PARENT: Gio
#COMMENT: Gets a #GUnixMountEntry for a given mount path. If @time_read
is set, it will be filled with a unix timestamp for checking
if the mounts have changed since with g_unix_mounts_changed_since().
#NAME: message
#PARENT: Gio.DBusMessage.get_path.utf8
#COMMENT: A #GDBusMessage.
#NAME: new
#PARENT: Gio.SimpleIOStream.new
#COMMENT: a new #GSimpleIOStream instance.
#NAME: lookup
#PARENT: Gio.SimpleActionGroup.lookup
#COMMENT: a #GAction, or %NULL
#NAME: factory_lookup_type
#PARENT: Gio.SocketConnection.factory_lookup_type
#COMMENT: a #GType
#NAME: lookup_by_address
#PARENT: Gio.Resolver.lookup_by_address
#COMMENT: a hostname (either ASCII-only, or in ASCII-encoded
    form), or %NULL on error.
#NAME: lookup_flags
#PARENT: Gio.Resource.open_stream.InputStream
#COMMENT: A #GResourceLookupFlags
#NAME: seekable
#PARENT: Gio.Seekable.truncate.gboolean
#COMMENT: a #GSeekable.
#NAME: cancellable
#PARENT: Gio.dbus_address_get_for_bus_sync.utf8
#COMMENT: a #GCancellable or %NULL
#NAME: set_attribute_int64
#PARENT: Gio.File.set_attribute_int64
#COMMENT: %TRUE if the @attribute was successfully set, %FALSE otherwise.
#NAME: name
#PARENT: Gio.bus_own_name_on_connection_with_closures.guint
#COMMENT: the well-known name to own
#NAME: file_not_found
#PARENT: Gio.DBusError
#COMMENT: Missing file.
#NAME: action
#PARENT: Gio.Action.change_state.none
#COMMENT: a #GAction
#NAME: copy
#PARENT: Gio.SrvTarget
#COMMENT: Copies @target
#NAME: result
#PARENT: Gio.File.make_directory_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: dbus_address_get_for_bus_sync
#PARENT: Gio.dbus_address_get_for_bus_sync
#COMMENT: a valid D-Bus address string for @bus_type or %NULL if
    @error is set
#NAME: add_data
#PARENT: Gio.MemoryInputStream
#COMMENT: Appends @data to data that can be read from the input stream
#NAME: appinfo
#PARENT: Gio.AppInfoIface.launch.launch.gboolean
#COMMENT: a #GAppInfo
#NAME: set_default_timeout
#PARENT: Gio.DBusProxy
#COMMENT: Sets the timeout to use if -1 (specifying default timeout) is
passed as @timeout_msec in the g_dbus_proxy_call() and
g_dbus_proxy_call_sync() functions.

See the #GDBusProxy:g-default-timeout property for more details.
#NAME: code
#PARENT: Gio.SimpleAsyncResult.new_error.SimpleAsyncResult
#COMMENT: an error code.
#NAME: flags
#PARENT: Gio.File.replace_readwrite_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: new_method_error_literal
#PARENT: Gio.DBusMessage
#COMMENT: Creates a new #GDBusMessage that is an error reply to @method_call_message.
#NAME: callback
#PARENT: Gio.FileIface.measure_disk_usage_async.measure_disk_usage_async.none
#COMMENT: a #GAsyncReadyCallback to call when complete
#NAME: get_native_size
#PARENT: Gio.InetAddress.get_native_size
#COMMENT: the number of bytes used for the native version of @address.
#NAME: source_object
#PARENT: Gio.SocketListener.accept.SocketConnection
#COMMENT: location where #GObject pointer will be stored, or %NULL
#NAME: get_default
#PARENT: Gio.TlsBackend
#COMMENT: Gets the default #GTlsBackend for the system.
#NAME: cert
#PARENT: Gio.TlsCertificateClass.verify.verify.TlsCertificateFlags
#COMMENT: a #GTlsCertificate
#NAME: error
#PARENT: Gio.dbus_error_strip_remote_error.gboolean
#COMMENT: A #GError.
#NAME: get_default_for_type
#PARENT: Gio.AppInfo.get_default_for_type
#COMMENT: #GAppInfo for given @content_type or
    %NULL on error.
#NAME: new
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Creates a #GSimpleAsyncResult.

The common convention is to create the #GSimpleAsyncResult in the
function that starts the asynchronous operation and use that same
function as the @source_tag.

If your operation supports cancellation with #GCancellable (which it
probably should) then you should provide the user's cancellable to
g_simple_async_result_set_check_cancellable() immediately after
this function returns.
#NAME: cancellable
#PARENT: Gio.Drive.eject.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: need_username
#PARENT: Gio.AskPasswordFlags
#COMMENT: operation requires a username.
#NAME: res
#PARENT: Gio.FileIface.find_enclosing_mount_finish.find_enclosing_mount_finish.Mount
#COMMENT: a #GAsyncResult
#NAME: set_interface_info
#PARENT: Gio.DBusProxy
#COMMENT: Ensure that interactions with @proxy conform to the given
interface. See the #GDBusProxy:g-interface-info property for more
details.
#NAME: recursive
#PARENT: Gio.SettingsSchemaSource.lookup.SettingsSchema
#COMMENT: %TRUE if the lookup should be recursive
#NAME: is_valid
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Ensures that the data passed to the _finish function of an async
operation is consistent.  Three checks are performed.

First, @result is checked to ensure that it is really a
#GSimpleAsyncResult.  Second, @source is checked to ensure that it
matches the source object of @result.  Third, @source_tag is
checked to ensure that it is equal to the @source_tag argument given
to g_simple_async_result_new() (which, by convention, is a pointer
to the _async function corresponding to the _finish function from
which this function is called).  (Alternatively, if either
@source_tag or @result's source tag is %NULL, then the source tag
check is skipped.)
#NAME: unmark_busy
#PARENT: Gio.Application
#COMMENT: Decreases the busy count of @application.

When the busy count reaches zero, the new state will be propagated
to other processes.

This function must only be called to cancel the effect of a previous
call to g_application_mark_busy().
#NAME: user_data
#PARENT: Gio.DriveIface.eject_with_operation.eject_with_operation.none
#COMMENT: user data passed to @callback.
#NAME: interaction
#PARENT: Gio.TlsInteractionClass.request_certificate_async.request_certificate_async.none
#COMMENT: a #GTlsInteraction object
#NAME: file_contents
#PARENT: Gio.FileReadMoreCallback.gboolean
#COMMENT: the data as currently read.
#NAME: proxy_enumerate
#PARENT: Gio.SocketConnectable
#COMMENT: Creates a #GSocketAddressEnumerator for @connectable that will
return #GProxyAddresses for addresses that you must connect
to via a proxy.

If @connectable does not implement
g_socket_connectable_proxy_enumerate(), this will fall back to
calling g_socket_connectable_enumerate().
#NAME: equal
#PARENT: Gio.File
#COMMENT: Checks if the two given #GFiles refer to the same file.

Note that two #GFiles that differ can still refer to the same
file on the filesystem due to various forms of filename
aliasing.

This call does no blocking I/O.
#NAME: flags
#PARENT: Gio.File.copy_attributes.gboolean
#COMMENT: a set of #GFileCopyFlags
#NAME: get_protocol
#PARENT: Gio.ProxyAddress.get_protocol
#COMMENT: the @proxy's protocol
#NAME: cancellable
#PARENT: Gio.File.delete_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: user_data
#PARENT: Gio.SimpleAsyncResult.new_from_error.SimpleAsyncResult
#COMMENT: user data passed to @callback.
#NAME: connection
#PARENT: Gio.DBusConnection.export_action_group.guint
#COMMENT: a #GDBusConnection
#NAME: interface_
#PARENT: Gio.DBusInterfaceIface.dup_object.dup_object.DBusObject
#COMMENT: An exported D-Bus interface.
#NAME: set_default
#PARENT: Gio.Resolver
#COMMENT: Sets @resolver to be the application's default resolver (reffing
@resolver, and unreffing the previous default resolver, if any).
Future calls to g_resolver_get_default() will return this resolver.

This can be used if an application wants to perform any sort of DNS
caching or "pinning"; it can implement its own #GResolver that
calls the original default resolver for DNS operations, and
implements its own cache policies on top of that, and then set
itself as the default resolver for all later code to use.
#NAME: stream
#PARENT: Gio.InputStream.read_finish.gssize
#COMMENT: a #GInputStream.
#NAME: for_session
#PARENT: Gio.PasswordSave
#COMMENT: save a password for the session.
#NAME: should_automount
#PARENT: Gio.Volume
#COMMENT: Returns whether the volume should be automatically mounted.
#NAME: should_automount
#PARENT: Gio.Volume.should_automount
#COMMENT: %TRUE if the volume should be automatically mounted
#NAME: monitor
#PARENT: Gio.FileMonitor.set_rate_limit.none
#COMMENT: a #GFileMonitor.
#NAME: set_password_save
#PARENT: Gio.MountOperation
#COMMENT: Sets the state of saving passwords for the mount operation.
#NAME: mask
#PARENT: Gio.InetAddressMask.get_family.SocketFamily
#COMMENT: a #GInetAddressMask
#NAME: cancellable
#PARENT: Gio.FileIOStreamClass.query_info.query_info.FileInfo
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: connection
#PARENT: Gio.UnixConnection.send_fd.gboolean
#COMMENT: a #GUnixConnection
#NAME: file
#PARENT: Gio.File.monitor_dir.FileMonitor
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.SocketClient.connect_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: remount_finish
#PARENT: Gio.Mount
#COMMENT: Finishes remounting a mount. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.
#NAME: inverted
#PARENT: Gio.Settings.bind_writable.none
#COMMENT: whether to 'invert' the value
#NAME: tls_file_database_new
#PARENT: Gio.tls_file_database_new
#COMMENT: the new
#GTlsFileDatabase, or %NULL on error
#NAME: source_specific
#PARENT: Gio.Socket.leave_multicast_group.gboolean
#COMMENT: %TRUE if source-specific multicast was used
#NAME: resources_lookup_data
#PARENT: Gio
#COMMENT: Looks for a file at the specified @path in the set of
globally registered resources and returns a #GBytes that
lets you directly access the data in memory.

The data is always followed by a zero byte, so you
can safely use the data as a C string. However, that byte
is not included in the size of the GBytes.

For uncompressed resource files this is a pointer directly into
the resource bundle, which is typically in some readonly data section
in the program binary. For compressed files we allocate memory on
the heap and automatically uncompress the data.

@lookup_flags controls the behaviour of the lookup.
#NAME: get_object_path
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Gets the object path that @interface_ is exported on, if any.
#NAME: equal
#PARENT: Gio.Icon.equal
#COMMENT: %TRUE if @icon1 is equal to @icon2. %FALSE otherwise.
#NAME: quit
#PARENT: Gio.Application
#COMMENT: Immediately quits the application.

Upon return to the mainloop, g_application_run() will return,
calling only the 'shutdown' function before doing so.

The hold count is ignored.

The result of calling g_application_run() again after it returns is
unspecified.
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.printerr.none
#COMMENT: a #GApplicationCommandLine
#NAME: user_data
#PARENT: Gio.File.trash_async.none
#COMMENT: the data to pass to callback function
#NAME: object
#PARENT: Gio.DBusObject.get_interfaces.DBusInterface
#COMMENT: A #GDBusObject.
#NAME: mount
#PARENT: Gio.MountIface.can_eject.can_eject.gboolean
#COMMENT: a #GMount.
#NAME: info
#PARENT: Gio.DBusSignalInfo.unref.none
#COMMENT: A #GDBusSignalInfo.
#NAME: message
#PARENT: Gio.SocketControlMessageClass.get_size.get_size.gsize
#COMMENT: a #GSocketControlMessage
#NAME: user_data
#PARENT: Gio.FileIface.query_info_async.query_info_async.none
#COMMENT: the data to pass to callback function
#NAME: mount
#PARENT: Gio.Mount.eject_finish.gboolean
#COMMENT: a #GMount.
#NAME: authentication_client
#PARENT: Gio.DBusConnectionFlags
#COMMENT: Perform authentication against server.
#NAME: write_fn
#PARENT: Gio.OutputStream
#COMMENT: Tries to write @count bytes from @buffer into the stream. Will block
during the operation.

If count is 0, returns 0 and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes written to the stream is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. on a partial I/O error, or if there is not enough
storage in the stream. All writes block until at least one byte
is written or an error occurs; 0 is never returned (unless
@count is 0).

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.
#NAME: pollable_stream
#PARENT: Gio.PollableSourceFunc.gboolean
#COMMENT: the #GPollableInputStream or #GPollableOutputStream
#NAME: multicast-loopback
#PARENT: Gio.Socket
#COMMENT: Whether outgoing multicast packets loop back to the local host.
#NAME: action_name
#PARENT: Gio.action_print_detailed_name.utf8
#COMMENT: a valid action name
#NAME: result
#PARENT: Gio.ProxyResolverInterface.lookup_finish.lookup_finish.utf8
#COMMENT: the result passed to your #GAsyncReadyCallback
#NAME: get_mount
#PARENT: Gio.Volume.get_mount
#COMMENT: a #GMount or %NULL if @volume isn't mounted.
    The returned object should be unreffed with g_object_unref()
    when no longer needed.
#NAME: name_vanished_closure
#PARENT: Gio.bus_watch_name_with_closures.guint
#COMMENT: #GClosure to invoke when @name is known
to not exist or %NULL.
#NAME: file
#PARENT: Gio.FileIface.set_attributes_async.set_attributes_async.none
#COMMENT: input #GFile
#NAME: invalid
#PARENT: Gio.DBusMessageType
#COMMENT: Message is of invalid type.
#NAME: add_any_inet_port
#PARENT: Gio.SocketListener.add_any_inet_port
#COMMENT: the port number, or 0 in case of failure.
#NAME: read
#PARENT: Gio.InputStream
#COMMENT: Tries to read @count bytes from the stream into the buffer starting at
@buffer. Will block during this read.

If count is zero returns zero and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

The returned @buffer is not a nul-terminated string, it can contain nul bytes
at any position, and this function doesn't nul-terminate the @buffer.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.
#NAME: target_format
#PARENT: Gio.Notification.add_button_with_target.none
#COMMENT: a #GVariant format string, or %NULL
#NAME: base_stream
#PARENT: Gio.BufferedOutputStream.new.OutputStream
#COMMENT: a #GOutputStream.
#NAME: iter
#PARENT: Gio.MenuLinkIter.get_value.MenuModel
#COMMENT: a #GMenuLinkIter
#NAME: source
#PARENT: Gio.TlsClientConnection.copy_session_state.none
#COMMENT: a #GTlsClientConnection
#NAME: append_to_async
#PARENT: Gio.File
#COMMENT: Asynchronously opens @file for appending.

For more details, see g_file_append_to() which is
the synchronous version of this call.

When the operation is finished, @callback will be called.
You can then call g_file_append_to_finish() to get the result
of the operation.
#NAME: progress_callback_data
#PARENT: Gio.File.copy_async.none
#COMMENT: user data to pass to @progress_callback
#NAME: new
#PARENT: Gio.UnixMountMonitor.new
#COMMENT: a #GUnixMountMonitor.
#NAME: io_priority
#PARENT: Gio.File.set_display_name_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: permission
#PARENT: Gio.PermissionClass.release_finish.release_finish.gboolean
#COMMENT: a #GPermission instance
#NAME: list_schemas
#PARENT: Gio.Settings.list_schemas
#COMMENT: a list of #GSettings
  schemas that are available.  The list must not be modified or
  freed.
#NAME: cancellable
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer.lookup_certificate_issuer.TlsCertificate
#COMMENT: a #GCancellable, or %NULL
#NAME: flags
#PARENT: Gio.DBusConnection.send_message_with_reply_sync.DBusMessage
#COMMENT: flags affecting how the message is sent.
#NAME: client
#PARENT: Gio.SocketClient.connect_to_host_finish.SocketConnection
#COMMENT: a #GSocketClient.
#NAME: get_close_base_stream
#PARENT: Gio.FilterOutputStream
#COMMENT: Returns whether the base stream will be closed when @stream is
closed.
#NAME: get_scheme
#PARENT: Gio.NetworkService
#COMMENT: Get's the URI scheme used to resolve proxies. By default, the service name
is used as scheme.
#NAME: callback
#PARENT: Gio.File.start_mountable.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied, or %NULL
#NAME: name
#PARENT: Gio.bus_watch_name.guint
#COMMENT: The name (well-known or unique) to watch.
#NAME: manager
#PARENT: Gio.DBusObjectManagerIface.get_object.get_object.DBusObject
#COMMENT: A #GDBusObjectManager.
#NAME: dest_port
#PARENT: Gio.ProxyAddress.new.SocketAddress
#COMMENT: The destination port to tunnel to.
#NAME: FileMonitor
#PARENT: Gio
#COMMENT: Monitors a file or directory for changes.

To obtain a #GFileMonitor for a file or directory, use
g_file_monitor(), g_file_monitor_file(), or
g_file_monitor_directory().

To get informed about changes to the file or directory you are
monitoring, connect to the #GFileMonitor::changed signal. The
signal will be emitted in the
[thread-default main context][g-main-context-push-thread-default]
of the thread that the monitor was created in
(though if the global default main context is blocked, this may
cause notifications to be blocked even if the thread-default
context is still running).
#NAME: icon
#PARENT: Gio.IconIface.serialize.serialize.GLib.Variant
#COMMENT: a #GIcon
#NAME: get_is_mc_link_local
#PARENT: Gio.InetAddress
#COMMENT: Tests whether @address is a link-local multicast address.
#NAME: is_active
#PARENT: Gio.SocketService
#COMMENT: Check whether the service is active or not. An active
service will accept new clients that connect, while
a non-active service will let connecting clients queue
up until the service is started.
#NAME: address
#PARENT: Gio.UnixSocketAddress.get_path.utf8
#COMMENT: a #GInetSocketAddress
#NAME: flags
#PARENT: Gio.File.set_attribute_int32.gboolean
#COMMENT: a #GFileQueryInfoFlags
#NAME: user_data
#PARENT: Gio.FileInputStreamClass.query_info_async.query_info_async.none
#COMMENT: the data to pass to callback function
#NAME: none
#PARENT: Gio.DBusObjectManagerClientFlags
#COMMENT: No flags set.
#NAME: get_port
#PARENT: Gio.NetworkAddress
#COMMENT: Gets @addr's port number
#NAME: kind
#PARENT: Gio.Volume.get_identifier.utf8
#COMMENT: the kind of identifier to return
#NAME: DBusServer
#PARENT: Gio
#COMMENT: #GDBusServer is a helper for listening to and accepting D-Bus
connections. This can be used to create a new D-Bus server, allowing two
peers to use the D-Bus protocol for their own specialized communication.
A server instance provided in this way will not perform message routing or
implement the org.freedesktop.DBus interface.

To just export an object on a well-known name on a message bus, such as the
session or system bus, you should instead use g_bus_own_name().

An example of peer-to-peer communication with G-DBus can be found
in [gdbus-example-peer.c](https://git.gnome.org/browse/glib/tree/gio/tests/gdbus-example-peer.c).
#NAME: get_server_identity
#PARENT: Gio.TlsClientConnection.get_server_identity
#COMMENT: a #GSocketConnectable describing the
expected server identity, or %NULL if the expected identity is not
known.
#NAME: code
#PARENT: Gio.DBusMethodInvocation.return_error.none
#COMMENT: The error code.
#NAME: get_attribute_as_string
#PARENT: Gio.FileInfo
#COMMENT: Gets the value of a attribute, formated as a string.
This escapes things as needed to make the string valid
utf8.
#NAME: connection
#PARENT: Gio.Proxy.connect_async.none
#COMMENT: a #GIOStream
#NAME: list
#PARENT: Gio.UnixFDList.steal_fds.gint
#COMMENT: a #GUnixFDList
#NAME: get_attribute_object
#PARENT: Gio.FileInfo
#COMMENT: Gets the value of a #GObject attribute. If the attribute does
not contain a #GObject, %NULL will be returned.
#NAME: io_error_quark
#PARENT: Gio
#COMMENT: Gets the GIO Error Quark.
#NAME: read_uint32
#PARENT: Gio.DataInputStream.read_uint32
#COMMENT: an unsigned 32-bit/4-byte value read from the @stream or %0 if
an error occurred.
#NAME: ProxyAddressEnumerator
#PARENT: Gio
#COMMENT: A subclass of #GSocketAddressEnumerator that takes another address
enumerator and wraps its results in #GProxyAddress<!-- -->es as
directed by the default #GProxyResolver.
#NAME: error
#PARENT: Gio.DBusError.set_dbus_error_valist.none
#COMMENT: A pointer to a #GError or %NULL.
#NAME: handle-local-options
#PARENT: Gio.Application
#COMMENT: The ::handle-local-options signal is emitted on the local instance
after the parsing of the commandline options has occurred.

You can add options to be recognised during commandline option
parsing using g_application_add_main_option_entries() and
g_application_add_option_group().

Signal handlers can inspect @options (along with values pointed to
from the @arg_data of an installed #GOptionEntrys) in order to
decide to perform certain actions, including direct local handling
(which may be useful for options like --version).

In the event that the application is marked
%G_APPLICATION_HANDLES_COMMAND_LINE the "normal processing" will
send the @option dictionary to the primary instance where it can be
read with g_application_command_line_get_options().  The signal
handler can modify the dictionary before returning, and the
modified dictionary will be sent.

In the event that %G_APPLICATION_HANDLES_COMMAND_LINE is not set,
"normal processing" will treat the remaining uncollected command
line arguments as filenames or URIs.  If there are no arguments,
the application is activated by g_application_activate().  One or
more arguments results in a call to g_application_open().

If you want to handle the local commandline arguments for yourself
by converting them to calls to g_application_open() or
g_action_group_activate_action() then you must be sure to register
the application first.  You should probably not call
g_application_activate() for yourself, however: just return -1 and
allow the default handler to do it for you.  This will ensure that
the `--gapplication-service` switch works properly (i.e. no activation
in that case).

Note that this signal is emitted from the default implementation of
local_command_line().  If you override that function and don't
chain up then this signal will never be emitted.

You can override local_command_line() if you need more powerful
capabilities than what is provided here, but this should not
normally be required.
#NAME: withdraw_notification
#PARENT: Gio.Application
#COMMENT: Withdraws a notification that was sent with
g_application_send_notification().

This call does nothing if a notification with @id doesn't exist or
the notification was never sent.

This function works even for notifications sent in previous
executions of this application, as long @id is the same as it was for
the sent notification.

Note that notifications are dismissed when the user clicks on one
of the buttons in a notification or triggers its default action, so
there is no need to explicitly withdraw the notification in that case.
#NAME: res
#PARENT: Gio.File.create_finish.FileOutputStream
#COMMENT: a #GAsyncResult
#NAME: cancellable
#PARENT: Gio.SocketListener.accept_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: file
#PARENT: Gio.FileIface.eject_mountable.eject_mountable.none
#COMMENT: input #GFile
#NAME: file
#PARENT: Gio.FileIface.replace_async.replace_async.none
#COMMENT: input #GFile
#NAME: none
#PARENT: Gio.IOStreamSpliceFlags
#COMMENT: Do not close either stream.
#NAME: cancellable
#PARENT: Gio.FileIface.poll_mountable.poll_mountable.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: get_is_hidden
#PARENT: Gio.DesktopAppInfo
#COMMENT: A desktop file is hidden if the Hidden key in it is
set to True.
#NAME: loopback
#PARENT: Gio.Socket.set_multicast_loopback.none
#COMMENT: whether @socket should receive messages sent to its
  multicast groups from the local host
#NAME: IOSchedulerJobFunc
#PARENT: Gio.IOSchedulerJobFunc
#COMMENT: %TRUE if this function should be called again to
   complete the job, %FALSE if the job is complete (or cancelled)
#NAME: get_proxy_type_user_data
#PARENT: Gio.DBusObjectManagerClient.new.none
#COMMENT: User data to pass to @get_proxy_type_func.
#NAME: progress_callback_data
#PARENT: Gio.File.move.gboolean
#COMMENT: gpointer to user data for
    the callback function
#NAME: settings
#PARENT: Gio.Settings.get_double.gdouble
#COMMENT: a #GSettings object
#NAME: accept_socket
#PARENT: Gio.SocketListener.accept_socket
#COMMENT: a #GSocket on success, %NULL on error.
#NAME: set_broadcast
#PARENT: Gio.Socket
#COMMENT: Sets whether @socket should allow sending to broadcast addresses.
This is %FALSE by default.
#NAME: none
#PARENT: Gio.DBusSendMessageFlags
#COMMENT: No flags set.
#NAME: family
#PARENT: Gio.Socket.new.Socket
#COMMENT: the socket family to use, e.g. %G_SOCKET_FAMILY_IPV4.
#NAME: flags
#PARENT: Gio.DBusProxy.new.none
#COMMENT: Flags used when constructing the proxy.
#NAME: file
#PARENT: Gio.File.enumerate_children_async.none
#COMMENT: input #GFile
#NAME: section
#PARENT: Gio.Menu.prepend_section.none
#COMMENT: a #GMenuModel with the items of the section
#NAME: bus_type
#PARENT: Gio.DBusObjectManagerClient.new_for_bus_sync.DBusObjectManagerClient
#COMMENT: A #GBusType.
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.get_connection.DBusConnection
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: result
#PARENT: Gio.InputStreamClass.read_finish.read_finish.gssize
#COMMENT: a #GAsyncResult.
#NAME: accept_socket_finish
#PARENT: Gio.SocketListener
#COMMENT: Finishes an async accept operation. See g_socket_listener_accept_socket_async()
#NAME: connection
#PARENT: Gio.DBusConnection.get_exit_on_close.gboolean
#COMMENT: a #GDBusConnection
#NAME: enumerate_next
#PARENT: Gio.FileAttributeMatcher
#COMMENT: Gets the next matched attribute from a #GFileAttributeMatcher.
#NAME: is_loopback
#PARENT: Gio.UnixMountPoint.is_loopback
#COMMENT: %TRUE if the mount point is a loopback. %FALSE otherwise.
#NAME: is-any
#PARENT: Gio.InetAddress
#COMMENT: Whether this is the "any" address for its family.
See g_inet_address_get_is_any().
#NAME: not_initialized
#PARENT: Gio.IOErrorEnum
#COMMENT: The object has not been initialized. Since 2.22
#NAME: splice
#PARENT: Gio.ListStore
#COMMENT: Changes @store by removing @n_removals items and adding @n_additions
items to it. @additions must contain @n_additions items of type
#GListStore:item-type.  %NULL is not permitted.

This function is more efficient than g_list_store_insert() and
g_list_store_remove(), because it only emits
#GListModel::items-changed once for the change.

This function takes a ref on each item in @additions.

The parameters @position and @n_removals must be correct (ie:
@position + @n_removals must be less than or equal to the length of
the list at the time this function is called).
#NAME: local_command_line
#PARENT: Gio.Application.local_command_line
#COMMENT: %TRUE if the commandline has been completely handled
#NAME: create_readwrite
#PARENT: Gio.File.create_readwrite
#COMMENT: a #GFileIOStream for the newly created
    file, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: conn
#PARENT: Gio.TlsConnection.set_require_close_notify.none
#COMMENT: a #GTlsConnection
#NAME: info
#PARENT: Gio.DBusAnnotationInfo.ref.DBusAnnotationInfo
#COMMENT: A #GDBusNodeInfo
#NAME: uid
#PARENT: Gio.Credentials.set_unix_user.gboolean
#COMMENT: The UNIX user identifier to set.
#NAME: proxy
#PARENT: Gio.SimpleProxyResolver.set_uri_proxy.none
#COMMENT: the proxy to use for @uri_scheme
#NAME: cancellable
#PARENT: Gio.File.replace_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: set_attribute_string
#PARENT: Gio.File
#COMMENT: Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_STRING to @value.
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: set_section
#PARENT: Gio.MenuItem
#COMMENT: Sets or unsets the "section" link of @menu_item to @section.

The effect of having one menu appear as a section of another is
exactly as it sounds: the items from @section become a direct part of
the menu that @menu_item is added to.  See g_menu_item_new_section()
for more information about what it means for a menu item to be a
section.
#NAME: set_proxy_resolver
#PARENT: Gio.SocketClient
#COMMENT: Overrides the #GProxyResolver used by @client. You can call this if
you want to use specific proxies, rather than using the system
default proxy settings.

Note that whether or not the proxy resolver is actually used
depends on the setting of #GSocketClient:enable-proxy, which is not
changed by this function (but which is %TRUE by default)
#NAME: is_directory
#PARENT: Gio.IOErrorEnum
#COMMENT: File is a directory.
#NAME: mount
#PARENT: Gio.VolumeMonitor.mount-removed.none
#COMMENT: a #GMount that was removed.
#NAME: flush
#PARENT: Gio.ConverterFlags
#COMMENT: Flush data
#NAME: put_int16
#PARENT: Gio.DataOutputStream
#COMMENT: Puts a signed 16-bit integer into the output stream.
#NAME: entries
#PARENT: Gio.SimpleActionGroup.add_entries.none
#COMMENT: a pointer to the first item in
          an array of #GActionEntry structs
#NAME: self
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: new_abstract
#PARENT: Gio.UnixSocketAddress.new_abstract
#COMMENT: a new #GUnixSocketAddress
#NAME: parent_class
#PARENT: Gio.DBusObjectManagerServerClass
#COMMENT: The parent class.
#NAME: get_activation_root
#PARENT: Gio.Volume.get_activation_root
#COMMENT: the activation root of @volume
    or %NULL. Use g_object_unref() to free.
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.get_arguments.utf8
#COMMENT: a #GApplicationCommandLine
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_data.gboolean
#COMMENT: a file attribute key
#NAME: identity
#PARENT: Gio.TlsCertificateClass.verify.verify.TlsCertificateFlags
#COMMENT: the expected peer identity
#NAME: list
#PARENT: Gio.UnixFDList.peek_fds.gint
#COMMENT: a #GUnixFDList
#NAME: key
#PARENT: Gio.SettingsSchemaKey.get_name.utf8
#COMMENT: a #GSettingsSchemaKey
#NAME: mount_operation
#PARENT: Gio.VolumeIface.eject_with_operation.eject_with_operation.none
#COMMENT: a #GMountOperation or %NULL to
    avoid user interaction
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.get_properties.GLib.Variant
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: stdin_inherit
#PARENT: Gio.SubprocessFlags
#COMMENT: stdin is inherited from the
  calling process.
#NAME: file
#PARENT: Gio.File.get_uri.utf8
#COMMENT: input #GFile
#NAME: new_loopback
#PARENT: Gio.InetAddress
#COMMENT: Creates a #GInetAddress for the loopback address for @family.
#NAME: notification
#PARENT: Gio.Notification.set_title.none
#COMMENT: a #GNotification
#NAME: cancellable
#PARENT: Gio.FileIface.make_directory.make_directory.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_value
#PARENT: Gio.Settings.get_value
#COMMENT: a new #GVariant
#NAME: user_data
#PARENT: Gio.io_scheduler_push_job.none
#COMMENT: data to pass to @job_func
#NAME: writable
#PARENT: Gio.DBusPropertyInfoFlags
#COMMENT: Property is writable.
#NAME: bus_type
#PARENT: Gio.DBusProxy.new_for_bus_sync.DBusProxy
#COMMENT: A #GBusType.
#NAME: get_peer_credentials
#PARENT: Gio.DBusConnection.get_peer_credentials
#COMMENT: a #GCredentials or %NULL if not available.
    Do not free this object, it is owned by @connection.
#NAME: protocol
#PARENT: Gio.proxy_get_default_for_protocol.Proxy
#COMMENT: the proxy protocol name (e.g. http, socks, etc)
#NAME: action_group
#PARENT: Gio.ActionGroup.action_state_changed.none
#COMMENT: a #GActionGroup
#NAME: domain
#PARENT: Gio.MountOperation.set_domain.none
#COMMENT: the domain to set.
#NAME: set
#PARENT: Gio.Settings
#COMMENT: Sets @key in @settings to @value.

A convenience function that combines g_settings_set_value() with
g_variant_new().

It is a programmer error to give a @key that isn't contained in the
schema for @settings or for the #GVariantType of @format to mismatch
the type given in the schema.
#NAME: get
#PARENT: Gio.DBusMenuModel.get
#COMMENT: a #GDBusMenuModel object. Free with
    g_object_unref().
#NAME: cancellable
#PARENT: Gio.SocketAddressEnumeratorClass.next_async.next_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: menu_item
#PARENT: Gio.MenuItem.set_detailed_action.none
#COMMENT: a #GMenuItem
#NAME: attach_source
#PARENT: Gio.Task
#COMMENT: A utility function for dealing with async operations where you need
to wait for a #GSource to trigger. Attaches @source to @task's
#GMainContext with @task's [priority][io-priority], and sets @source's
callback to @callback, with @task as the callback's `user_data`.

This takes a reference on @task until @source is destroyed.
#NAME: info
#PARENT: Gio.FileInfo.get_is_symlink.gboolean
#COMMENT: a #GFileInfo.
#NAME: object_type
#PARENT: Gio.Initable.new_valist.GObject.Object
#COMMENT: a #GType supporting #GInitable.
#NAME: command-line
#PARENT: Gio.Application.command-line
#COMMENT: An integer that is set as the exit status for the calling
  process. See g_application_command_line_set_exit_status().
#NAME: set_stdin_file_path
#PARENT: Gio.SubprocessLauncher
#COMMENT: Sets the file path to use as the stdin for spawned processes.

If @path is %NULL then any previously given path is unset.

The file must exist or spawning the process will fail.

You may not set a stdin file path if a stdin fd is already set or if
the launcher flags contain any flags directing stdin elsewhere.

This feature is only available on UNIX.
#NAME: mount_operation
#PARENT: Gio.Drive.start.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: lookup_certificate_for_handle_finish
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle_finish.lookup_certificate_for_handle_finish
#COMMENT: a newly allocated #GTlsCertificate object.
Use g_object_unref() to release the certificate.
#NAME: relative_path
#PARENT: Gio.FileIface.resolve_relative_path.resolve_relative_path.File
#COMMENT: a given relative path string
#NAME: notification
#PARENT: Gio.Notification.set_icon.none
#COMMENT: a #GNotification
#NAME: remove
#PARENT: Gio.ListStore
#COMMENT: Removes the item from @store that is at @position. @position must be
smaller than the current length of the list.

Use g_list_store_splice() to remove multiple items at the same time
efficiently.
#NAME: subprocess
#PARENT: Gio.Subprocess.get_if_exited.gboolean
#COMMENT: a #GSubprocess
#NAME: get_protocol
#PARENT: Gio.ProxyAddress
#COMMENT: Gets @proxy's protocol. eg, "socks" or "http"
#NAME: stdout_buf
#PARENT: Gio.Subprocess.communicate.gboolean
#COMMENT: data read from the subprocess stdout
#NAME: state
#PARENT: Gio.ActionEntry
#COMMENT: the initial state for this action, given in
        [GVariant text format][gvariant-text].  The state is parsed
        with no extra type information, so type tags must be added to
        the string if they are necessary.  Stateless actions should
        give %NULL here.
#NAME: object_path
#PARENT: Gio.DBusObjectSkeleton.set_object_path.none
#COMMENT: A valid D-Bus object path.
#NAME: permission
#PARENT: Gio.Permission.get_can_release.gboolean
#COMMENT: a #GPermission instance
#NAME: mount-added
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when a mount is added.
#NAME: lookup_flags
#PARENT: Gio.resources_get_info.gboolean
#COMMENT: A #GResourceLookupFlags
#NAME: self
#PARENT: Gio.SubprocessLauncher.set_stderr_file_path.none
#COMMENT: a #GSubprocessLauncher
#NAME: menu_item
#PARENT: Gio.MenuItem.set_attribute_value.none
#COMMENT: a #GMenuItem
#NAME: broken_pipe
#PARENT: Gio.IOErrorEnum
#COMMENT: Broken pipe. Since 2.36
#NAME: drive
#PARENT: Gio.DriveIface.has_media.has_media.gboolean
#COMMENT: a #GDrive.
#NAME: guess_content_type_finish
#PARENT: Gio.Mount.guess_content_type_finish
#COMMENT: a %NULL-terminated array of content types or %NULL on error.
    Caller should free this array with g_strfreev() when done with it.
#NAME: send_fd
#PARENT: Gio.UnixConnection
#COMMENT: Passes a file descriptor to the receiving side of the
connection. The receiving end has to call g_unix_connection_receive_fd()
to accept the file descriptor.

As well as sending the fd this also writes a single byte to the
stream, as this is required for fd passing to work on some
implementations.
#NAME: fill
#PARENT: Gio.BufferedInputStreamClass.fill.fill
#COMMENT: the number of bytes read into @stream's buffer, up to @count,
    or -1 on error.
#NAME: file
#PARENT: Gio.FileIface.append_to.append_to.FileOutputStream
#COMMENT: input #GFile
#NAME: action_group
#PARENT: Gio.ActionGroup.get_action_enabled.gboolean
#COMMENT: a #GActionGroup
#NAME: close_finish
#PARENT: Gio.FileEnumerator.close_finish
#COMMENT: %TRUE if the close operation has finished successfully.
#NAME: matcher
#PARENT: Gio.FileAttributeMatcher.enumerate_next.utf8
#COMMENT: a #GFileAttributeMatcher.
#NAME: app_info_create_from_commandline
#PARENT: Gio.app_info_create_from_commandline
#COMMENT: new #GAppInfo for given command.
#NAME: new_method_reply
#PARENT: Gio.DBusMessage
#COMMENT: Creates a new #GDBusMessage that is a reply to @method_call_message.
#NAME: list_children
#PARENT: Gio.SettingsSchema
#COMMENT: Gets the list of children in @schema.

You should free the return value with g_strfreev() when you are done
with it.
#NAME: activate
#PARENT: Gio.SimpleAction
#COMMENT: Indicates that the action was just activated.

@parameter will always be of the expected type.  In the event that
an incorrect type was given, no signal will be emitted.

Since GLib 2.40, if no handler is connected to this signal then the
default behaviour for boolean-stated actions with a %NULL parameter
type is to toggle them via the #GSimpleAction::change-state signal.
For stateful actions where the state type is equal to the parameter
type, the default is to forward them directly to
#GSimpleAction::change-state.  This should allow almost all users
of #GSimpleAction to connect only one handler or the other.
#NAME: io_priority
#PARENT: Gio.OutputStream.write_async.none
#COMMENT: the io priority of the request.
#NAME: ref
#PARENT: Gio.Resource
#COMMENT: Atomically increments the reference count of @array by one. This
function is MT-safe and may be called from any thread.
#NAME: type
#PARENT: Gio.Seekable.seek.gboolean
#COMMENT: a #GSeekType.
#NAME: error
#PARENT: Gio.Task.return_error.none
#COMMENT: the #GError result of a task function.
#NAME: 
#PARENT: Gio.ApplicationCommandLine.print.none...
#COMMENT: arguments, as per @format
#NAME: append
#PARENT: Gio.Menu
#COMMENT: Convenience function for appending a normal menu item to the end of
@menu.  Combine g_menu_item_new() and g_menu_insert_item() for a more
flexible alternative.
#NAME: reply_type
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: the expected type of the reply, or %NULL
#NAME: user_data
#PARENT: Gio.Volume.mount.none
#COMMENT: user data that gets passed to @callback
#NAME: DBusSignalInfo
#PARENT: Gio
#COMMENT: Information about a signal on a D-Bus interface.
#NAME: get_action_state
#PARENT: Gio.ActionGroup
#COMMENT: Queries the current state of the named action within @action_group.

If the action is not stateful then %NULL will be returned.  If the
action is stateful then the type of the return value is the type
given by g_action_group_get_action_state_type().

The return value (if non-%NULL) should be freed with
g_variant_unref() when it is no longer required.
#NAME: callback
#PARENT: Gio.DataInputStream.read_upto_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: user_data
#PARENT: Gio.Mount.remount.none
#COMMENT: user data passed to @callback.
#NAME: io_priority
#PARENT: Gio.InputStreamClass.skip_async.skip_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: Permission
#PARENT: Gio
#COMMENT: A #GPermission represents the status of the caller's permission to
perform a certain action.

You can query if the action is currently allowed and if it is
possible to acquire the permission so that the action will be allowed
in the future.

There is also an API to actually acquire the permission and one to
release it.

As an example, a #GPermission might represent the ability for the
user to write to a #GSettings object.  This #GPermission object could
then be used to decide if it is appropriate to show a "Click here to
unlock" button in a dialog and to provide the mechanism to invoke
when that button is clicked.
#NAME: interface-added
#PARENT: Gio.DBusObjectManager
#COMMENT: Emitted when @interface is added to @object.

This signal exists purely as a convenience to avoid having to
connect signals to all objects managed by @manager.
#NAME: new_with_origin
#PARENT: Gio.Emblem.new_with_origin
#COMMENT: a new #GEmblem.
#NAME: read_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous file read operation started with
g_file_read_async().
#NAME: index_
#PARENT: Gio.UnixFDList.get.gint
#COMMENT: the index into the list
#NAME: proxy
#PARENT: Gio.DBusProxy.get_default_timeout.gint
#COMMENT: A #GDBusProxy.
#NAME: n_parameters
#PARENT: Gio.Initable.newv.GObject.Object
#COMMENT: the number of parameters in @parameters
#NAME: monitor
#PARENT: Gio.NetworkMonitor.can_reach_async.none
#COMMENT: a #GNetworkMonitor
#NAME: DBusSignalFlags
#PARENT: Gio
#COMMENT: Flags used when subscribing to signals via g_dbus_connection_signal_subscribe().
#NAME: put_int32
#PARENT: Gio.DataOutputStream
#COMMENT: Puts a signed 32-bit integer into the output stream.
#NAME: message
#PARENT: Gio.DBusMessage.get_flags.DBusMessageFlags
#COMMENT: A #GDBusMessage.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.add_supports_type.add_supports_type.gboolean
#COMMENT: a #GAppInfo.
#NAME: can_delete
#PARENT: Gio.AppInfo
#COMMENT: Obtains the information whether the #GAppInfo can be deleted.
See g_app_info_delete().
#NAME: drive
#PARENT: Gio.Drive.can_start_degraded.gboolean
#COMMENT: a #GDrive.
#NAME: trusted_ca
#PARENT: Gio.TlsCertificateClass.verify.verify.TlsCertificateFlags
#COMMENT: the certificate of a trusted authority
#NAME: action
#PARENT: Gio.ActionMapInterface.add_action.add_action.none
#COMMENT: a #GAction
#NAME: lookup_records
#PARENT: Gio.Resolver.lookup_records
#COMMENT: a non-empty #GList of
#GVariant, or %NULL on error. You must free each of the records and the list
when you are done with it. (You can use g_list_free_full() with
g_variant_unref() to do this.)
#NAME: callback
#PARENT: Gio.Resolver.lookup_records_async.none
#COMMENT: callback to call after resolution completes
#NAME: mask
#PARENT: Gio.InetAddressMask.equal.gboolean
#COMMENT: a #GInetAddressMask
#NAME: port
#PARENT: Gio.InetSocketAddress.new_from_string.SocketAddress
#COMMENT: a port number
#NAME: hint
#PARENT: Gio.Application.open.none
#COMMENT: a hint provided by the calling instance
#NAME: regular
#PARENT: Gio.FileType
#COMMENT: File handle represents a regular file.
#NAME: none
#PARENT: Gio.BusType
#COMMENT: Not a message bus.
#NAME: action
#PARENT: Gio.ActionInterface.get_state.get_state.GLib.Variant
#COMMENT: a #GAction
#NAME: addresses
#PARENT: Gio.Resolver.free_addresses.none
#COMMENT: a #GList of #GInetAddress
#NAME: new
#PARENT: Gio.MemoryInputStream.new
#COMMENT: a new #GInputStream
#NAME: parameters
#PARENT: Gio.DBusConnection.emit_signal.gboolean
#COMMENT: a #GVariant tuple with parameters for the signal
             or %NULL if not passing parameters
#NAME: content_type_get_mime_type
#PARENT: Gio.content_type_get_mime_type
#COMMENT: the registered mime type for the given @type,
    or %NULL if unknown.
#NAME: info
#PARENT: Gio.FileInfo.set_symbolic_icon.none
#COMMENT: a #GFileInfo.
#NAME: set_exit_on_close
#PARENT: Gio.DBusConnection
#COMMENT: Sets whether the process should be terminated when @connection is
closed by the remote peer. See #GDBusConnection:exit-on-close for
more details.

Note that this function should be used with care. Most modern UNIX
desktops tie the notion of a user session the session bus, and expect
all of a users applications to quit when their bus connection goes away.
If you are setting @exit_on_close to %FALSE for the shared session
bus connection, you should make sure that your application exits
when the user session ends.
#NAME: get_data
#PARENT: Gio.MemoryOutputStream.get_data
#COMMENT: pointer to the stream's data
#NAME: object
#PARENT: Gio.DBusObjectIface.get_interfaces.get_interfaces.DBusInterface
#COMMENT: A #GDBusObject.
#NAME: callback
#PARENT: Gio.FileInputStream.query_info_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: no_reply
#PARENT: Gio.DBusError
#COMMENT: No reply to a message expecting one, usually means a timeout occurred.
#NAME: adopt_orphan_mount
#PARENT: Gio.VolumeMonitor
#COMMENT: This function should be called by any #GVolumeMonitor
implementation when a new #GMount object is created that is not
associated with a #GVolume object. It must be called just before
emitting the @mount_added signal.

If the return value is not %NULL, the caller must associate the
returned #GVolume object with the #GMount. This involves returning
it in its g_mount_get_volume() implementation. The caller must
also listen for the "removed" signal on the returned object
and give up its reference when handling that signal

Similary, if implementing g_volume_monitor_adopt_orphan_mount(),
the implementor must take a reference to @mount and return it in
its g_volume_get_mount() implemented. Also, the implementor must
listen for the "unmounted" signal on @mount and give up its
reference upon handling that signal.

There are two main use cases for this function.

One is when implementing a user space file system driver that reads
blocks of a block device that is already represented by the native
volume monitor (for example a CD Audio file system driver). Such
a driver will generate its own #GMount object that needs to be
associated with the #GVolume object that represents the volume.

The other is for implementing a #GVolumeMonitor whose sole purpose
is to return #GVolume objects representing entries in the users
"favorite servers" list or similar.
#NAME: query_settable_attributes
#PARENT: Gio.File
#COMMENT: Obtain the list of settable attributes for the file.

Returns the type and full attribute name of all the attributes
that can be set on this file. This doesn't mean setting it will
always succeed though, you might get an access failure, or some
specific file may not support a specific attribute.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: source_object
#PARENT: Gio.SocketListener.accept_socket.Socket
#COMMENT: location where #GObject pointer will be stored, or %NULL.
#NAME: state_type
#PARENT: Gio.ActionGroupInterface.query_action.query_action.gboolean
#COMMENT: the state type, or %NULL if stateless
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeletonClass.get_vtable.get_vtable.DBusInterfaceVTable
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: user_data
#PARENT: Gio.MountIface.eject.eject.none
#COMMENT: user data passed to @callback.
#NAME: handled
#PARENT: Gio.MountOperationResult
#COMMENT: The request was fulfilled and the
    user specified data is now available
#NAME: get_source_object
#PARENT: Gio.Task
#COMMENT: Gets the source object from @task. Like
g_async_result_get_source_object(), but does not ref the object.
#NAME: set_auto_grow
#PARENT: Gio.BufferedOutputStream
#COMMENT: Sets whether or not the @stream's buffer should automatically grow.
If @auto_grow is true, then each write will just make the buffer
larger, and you must manually flush the buffer to actually write out
the data to the underlying stream.
#NAME: send_messages
#PARENT: Gio.Socket.send_messages
#COMMENT: number of messages sent, or -1 on error. Note that the number of
    messages sent may be smaller than @num_messages if the socket is
    non-blocking or if @num_messages was larger than UIO_MAXIOV (1024),
    in which case the caller may re-try to send the remaining messages.
#NAME: set_link
#PARENT: Gio.MenuItem
#COMMENT: Creates a link from @menu_item to @model if non-%NULL, or unsets it.

Links are used to establish a relationship between a particular menu
item and another menu.  For example, %G_MENU_LINK_SUBMENU is used to
associate a submenu with a particular menu item, and %G_MENU_LINK_SECTION
is used to create a section. Other types of link can be used, but there
is no guarantee that clients will be able to make sense of them.
Link types are restricted to lowercase characters, numbers
and '-'. Furthermore, the names must begin with a lowercase character,
must not end with a '-', and must not contain consecutive dashes.
#NAME: user_data
#PARENT: Gio.File.measure_disk_usage_async.none
#COMMENT: the data to pass to callback function
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.complete_in_idle.none
#COMMENT: a #GSimpleAsyncResult.
#NAME: menu
#PARENT: Gio.DBusConnection.export_menu_model.guint
#COMMENT: a #GMenuModel
#NAME: flags
#PARENT: Gio.FileIface.query_info_async.query_info_async.none
#COMMENT: a set of #GFileQueryInfoFlags
#NAME: get_name
#PARENT: Gio.Drive
#COMMENT: Gets the name of @drive.
#NAME: to_string
#PARENT: Gio.Credentials
#COMMENT: Creates a human-readable textual representation of @credentials
that can be used in logging and debug messages. The format of the
returned string may change in future GLib release.
#NAME: proxy_address
#PARENT: Gio.Proxy.connect_async.none
#COMMENT: a #GProxyAddress
#NAME: query_info_finish
#PARENT: Gio.FileOutputStream.query_info_finish
#COMMENT: A #GFileInfo for the finished query.
#NAME: op
#PARENT: Gio.MountOperation.get_password_save.PasswordSave
#COMMENT: a #GMountOperation.
#NAME: interface_name
#PARENT: Gio.DBusObjectSkeleton.remove_interface_by_name.none
#COMMENT: A D-Bus interface name.
#NAME: Subprocess
#PARENT: Gio
#COMMENT: #GSubprocess allows the creation of and interaction with child
processes.

Processes can be communicated with using standard GIO-style APIs (ie:
#GInputStream, #GOutputStream).  There are GIO-style APIs to wait for
process termination (ie: cancellable and with an asynchronous
variant).

There is an API to force a process to terminate, as well as a
race-free API for sending UNIX signals to a subprocess.

One major advantage that GIO brings over the core GLib library is
comprehensive API for asynchronous I/O, such
g_output_stream_splice_async().  This makes GSubprocess
significantly more powerful and flexible than equivalent APIs in
some other languages such as the `subprocess.py`
included with Python.  For example, using #GSubprocess one could
create two child processes, reading standard output from the first,
processing it, and writing to the input stream of the second, all
without blocking the main loop.

A powerful g_subprocess_communicate() API is provided similar to the
`communicate()` method of `subprocess.py`. This enables very easy
interaction with a subprocess that has been opened with pipes.

#GSubprocess defaults to tight control over the file descriptors open
in the child process, avoiding dangling-fd issues that are caused by
a simple fork()/exec().  The only open file descriptors in the
spawned process are ones that were explicitly specified by the
#GSubprocess API (unless %G_SUBPROCESS_FLAGS_INHERIT_FDS was
specified).

#GSubprocess will quickly reap all child processes as they exit,
avoiding "zombie processes" remaining around for long periods of
time.  g_subprocess_wait() can be used to wait for this to happen,
but it will happen even without the call being explicitly made.

As a matter of principle, #GSubprocess has no API that accepts
shell-style space-separated strings.  It will, however, match the
typical shell behaviour of searching the PATH for executables that do
not contain a directory separator in their name.

#GSubprocess attempts to have a very simple API for most uses (ie:
spawning a subprocess with arguments and support for most typical
kinds of input and output redirection).  See g_subprocess_new(). The
#GSubprocessLauncher API is provided for more complicated cases
(advanced types of redirection, environment variable manipulation,
change of working directory, child setup functions, etc).

A typical use of #GSubprocess will involve calling
g_subprocess_new(), followed by g_subprocess_wait_async() or
g_subprocess_wait().  After the process exits, the status can be
checked using functions such as g_subprocess_get_if_exited() (which
are similar to the familiar WIFEXITED-style POSIX macros).
#NAME: is-mc-site-local
#PARENT: Gio.InetAddress
#COMMENT: Whether this is a site-local multicast address.
See g_inet_address_get_is_mc_site_local().
#NAME: is_cancelled
#PARENT: Gio.FileMonitor
#COMMENT: Returns whether the monitor is canceled.
#NAME: arguments
#PARENT: Gio.Application.local_command_line.gboolean
#COMMENT: array of command line arguments
#NAME: name_acquired_handler
#PARENT: Gio.bus_own_name.guint
#COMMENT: handler to invoke when @name is acquired or %NULL
#NAME: trash_async
#PARENT: Gio.File
#COMMENT: Asynchronously sends @file to the Trash location, if possible.
#NAME: new
#PARENT: Gio.UnixFDList.new
#COMMENT: a new #GUnixFDList
#NAME: cancellable
#PARENT: Gio.bus_get.none
#COMMENT: a #GCancellable or %NULL
#NAME: 
#PARENT: Gio.MenuItem.set_attribute.none...
#COMMENT: positional parameters, as per @format_string
#NAME: error_name
#PARENT: Gio.DBusMessage.new_method_error.DBusMessage
#COMMENT: A valid D-Bus error name.
#NAME: mount
#PARENT: Gio.MountIface.get_uuid.get_uuid.utf8
#COMMENT: a #GMount.
#NAME: object_path
#PARENT: Gio.DBusInterfaceSetPropertyFunc.gboolean
#COMMENT: The object path that the method was invoked on.
#NAME: get_parent
#PARENT: Gio.FileIface.get_parent.get_parent
#COMMENT: a #GFile structure to the
    parent of the given #GFile or %NULL if there is no parent. Free
    the returned object with g_object_unref().
#NAME: client
#PARENT: Gio.SocketClient.connect_to_service_async.none
#COMMENT: a #GSocketClient
#NAME: volume
#PARENT: Gio.VolumeIface.can_mount.can_mount.gboolean
#COMMENT: a #GVolume
#NAME: source
#PARENT: Gio.OutputStreamClass.splice.splice.gssize
#COMMENT: a #GInputStream.
#NAME: insert_item
#PARENT: Gio.Menu
#COMMENT: Inserts @item into @menu.

The "insertion" is actually done by copying all of the attribute and
link values of @item and using them to form a new item within @menu.
As such, @item itself is not really inserted, but rather, a menu item
that is exactly the same as the one presently described by @item.

This means that @item is essentially useless after the insertion
occurs.  Any changes you make to it are ignored unless it is inserted
again (at which point its updated values will be copied).

You should probably just free @item once you're done.

There are many convenience functions to take care of common cases.
See g_menu_insert(), g_menu_insert_section() and
g_menu_insert_submenu() as well as "prepend" and "append" variants of
each of these functions.
#NAME: cancellable
#PARENT: Gio.ProxyInterface.connect_async.connect_async.none
#COMMENT: a #GCancellable
#NAME: result_uncertain
#PARENT: Gio.content_type_guess.utf8
#COMMENT: return location for the certainty
    of the result, or %NULL
#NAME: monitor
#PARENT: Gio.NetworkMonitorInterface.can_reach_async.can_reach_async.none
#COMMENT: a #GNetworkMonitor
#NAME: resource
#PARENT: Gio.Resource.open_stream.InputStream
#COMMENT: A #GResource
#NAME: fd
#PARENT: Gio.SubprocessLauncher.take_stderr_fd.none
#COMMENT: a file descriptor, or -1
#NAME: has_volumes
#PARENT: Gio.DriveIface.has_volumes.has_volumes
#COMMENT: %TRUE if the @drive contains volumes, %FALSE otherwise.
#NAME: get_address
#PARENT: Gio.InetAddressMask.get_address
#COMMENT: @mask's base address
#NAME: settings
#PARENT: Gio.Settings.get_has_unapplied.gboolean
#COMMENT: a #GSettings object
#NAME: connection
#PARENT: Gio.SocketConnection.get_local_address.SocketAddress
#COMMENT: a #GSocketConnection
#NAME: get_description
#PARENT: Gio.TlsPassword.get_description
#COMMENT: The description of the password.
#NAME: tls_backend_get_default
#PARENT: Gio
#COMMENT: Gets the default #GTlsBackend for the system.
#NAME: get_action_enabled
#PARENT: Gio.ActionGroupInterface.get_action_enabled.get_action_enabled
#COMMENT: whether or not the action is currently enabled
#NAME: io_priority
#PARENT: Gio.File.read_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: observer
#PARENT: Gio.DBusAuthObserver.authorize_authenticated_peer.gboolean
#COMMENT: A #GDBusAuthObserver.
#NAME: supports_tls
#PARENT: Gio.TlsBackendInterface.supports_tls.supports_tls
#COMMENT: whether or not TLS is supported
#NAME: file
#PARENT: Gio.TlsCertificate.list_new_from_file.TlsCertificate
#COMMENT: file containing PEM-encoded certificates to import
#NAME: quark_volatile
#PARENT: Gio.DBusError.register_error_domain.none
#COMMENT: A pointer where to store the #GQuark.
#NAME: user_data
#PARENT: Gio.SimpleAsyncResult.new_take_error.SimpleAsyncResult
#COMMENT: user data passed to @callback
#NAME: mount_entry
#PARENT: Gio.unix_mount_get_mount_path.utf8
#COMMENT: input #GUnixMountEntry to get the mount path for.
#NAME: new
#PARENT: Gio.SimpleAsyncResult.new
#COMMENT: a #GSimpleAsyncResult.
#NAME: vfs
#PARENT: Gio.Vfs.get_file_for_uri.File
#COMMENT: a#GVfs.
#NAME: FileAttributeType
#PARENT: Gio
#COMMENT: The data types for file attributes.
#NAME: position
#PARENT: Gio.ListModel.get_item.GObject.Object
#COMMENT: the position of the item to fetch
#NAME: get_guid
#PARENT: Gio.DBusConnection
#COMMENT: The GUID of the peer performing the role of server when
authenticating. See #GDBusConnection:guid for more details.
#NAME: cancellable
#PARENT: Gio.Cancellable.release_fd.none
#COMMENT: a #GCancellable
#NAME: get_identifier
#PARENT: Gio.DriveIface.get_identifier.get_identifier
#COMMENT: a newly allocated string containing the
    requested identfier, or %NULL if the #GDrive
    doesn't have this kind of identifier.
#NAME: callback
#PARENT: Gio.Drive.eject_with_operation.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: callback
#PARENT: Gio.File.eject_mountable_with_operation.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.get_op_res_gpointer.gpointer
#COMMENT: a #GSimpleAsyncResult.
#NAME: to_string
#PARENT: Gio.InetAddressMask.to_string
#COMMENT: a string corresponding to @mask.
#NAME: cancellable
#PARENT: Gio.OutputStream.vprintf.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_etag
#PARENT: Gio.FileInfo.get_etag
#COMMENT: a string containing the value of the "etag:value" attribute.
#NAME: get_attribute_as_string
#PARENT: Gio.FileInfo.get_attribute_as_string
#COMMENT: a UTF-8 string associated with the given @attribute.
   When you're done with the string it must be freed with g_free().
#NAME: cancellable
#PARENT: Gio.Mount.unmount_with_operation.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.flush.none
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: user_data
#PARENT: Gio.FileIface.set_attributes_async.set_attributes_async.none
#COMMENT: a #gpointer
#NAME: result
#PARENT: Gio.OutputStreamClass.splice_finish.splice_finish.gssize
#COMMENT: a #GAsyncResult.
#NAME: apparent_size
#PARENT: Gio.FileMeasureFlags
#COMMENT: Tally usage based on apparent file
  sizes.  Normally, the block-size is used, if available, as this is a
  more accurate representation of disk space used.
  Compare with `du --apparent-size`.
#NAME: callback
#PARENT: Gio.AsyncInitable.new_valist_async.none
#COMMENT: a #GAsyncReadyCallback to call when the initialization is
    finished
#NAME: callback
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle_async.none
#COMMENT: callback to call when the operation completes
#NAME: dbus_generate_guid
#PARENT: Gio.dbus_generate_guid
#COMMENT: A valid D-Bus GUID. Free with g_free().
#NAME: remove_filter
#PARENT: Gio.DBusConnection
#COMMENT: Removes a filter.
#NAME: settings
#PARENT: Gio.Settings.get_enum.gint
#COMMENT: a #GSettings object
#NAME: identity
#PARENT: Gio.TlsDatabase.verify_chain_async.none
#COMMENT: the expected peer identity
#NAME: set_reply_serial
#PARENT: Gio.DBusMessage
#COMMENT: Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL header field.
#NAME: io_priority
#PARENT: Gio.BufferedInputStream.fill_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: resolver
#PARENT: Gio.ResolverClass.lookup_by_address.lookup_by_address.utf8
#COMMENT: a #GResolver
#NAME: open_readwrite_finish
#PARENT: Gio.File.open_readwrite_finish
#COMMENT: a #GFileIOStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: get_connection
#PARENT: Gio.DBusProxy.get_connection
#COMMENT: A #GDBusConnection owned by @proxy. Do not free.
#NAME: item_index
#PARENT: Gio.MenuModelClass.iterate_item_attributes.iterate_item_attributes.MenuAttributeIter
#COMMENT: the index of the item
#NAME: user_data
#PARENT: Gio.FileOutputStreamClass.query_info_async.query_info_async.none
#COMMENT: the data to pass to callback function
#NAME: cancellable
#PARENT: Gio.LoadableIcon.load.InputStream
#COMMENT: optional #GCancellable object, %NULL to
ignore.
#NAME: put_byte
#PARENT: Gio.DataOutputStream
#COMMENT: Puts a byte into the output stream.
#NAME: interaction
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle_async.lookup_certificate_for_handle_async.none
#COMMENT: used to interact with the user if necessary
#NAME: object_path
#PARENT: Gio.DBusProxy.new.none
#COMMENT: An object path.
#NAME: indent
#PARENT: Gio.DBusNodeInfo.generate_xml.none
#COMMENT: Indentation level.
#NAME: set_warning
#PARENT: Gio.TlsPassword
#COMMENT: Set a user readable translated warning. Usually this warning is a
representation of the password flags returned from
g_tls_password_get_flags().
#NAME: FILE_ATTRIBUTE_ACCESS_CAN_RENAME
#PARENT: Gio
#COMMENT: A key in the "access" namespace for checking renaming privileges.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
This attribute will be %TRUE if the user is able to rename the file.
#NAME: get_parse_name
#PARENT: Gio.File
#COMMENT: Gets the parse name of the @file.
A parse name is a UTF-8 string that describes the
file such that one can get the #GFile back using
g_file_parse_name().

This is generally used to show the #GFile as a nice
full-pathname kind of string in a user interface,
like in a location entry.

For local files with names that can safely be converted
to UTF-8 the pathname is used, otherwise the IRI is used
(a form of URI that allows UTF-8 characters unescaped).

This call does no blocking I/O.
#NAME: platform_data
#PARENT: Gio.RemoteActionGroup.change_action_state_full.none
#COMMENT: the platform data to send
#NAME: DBusCapabilityFlags
#PARENT: Gio
#COMMENT: Capabilities negotiated with the remote peer.
#NAME: io_priority
#PARENT: Gio.File.append_to_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: accept_finish
#PARENT: Gio.SocketListener
#COMMENT: Finishes an async accept operation. See g_socket_listener_accept_async()
#NAME: connect_finish
#PARENT: Gio.ProxyInterface.connect_finish.connect_finish
#COMMENT: a #GIOStream.
#NAME: get_rehandshake_mode
#PARENT: Gio.TlsConnection
#COMMENT: Gets @conn rehandshaking mode. See
g_tls_connection_set_rehandshake_mode() for details.
#NAME: cancellable
#PARENT: Gio.FileIface.unmount_mountable_with_operation.unmount_mountable_with_operation.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: application
#PARENT: Gio.Application.bind_busy_property.none
#COMMENT: a #GApplication
#NAME: bus_type
#PARENT: Gio.bus_get.none
#COMMENT: a #GBusType
#NAME: res
#PARENT: Gio.FileIface.create_readwrite_finish.create_readwrite_finish.FileIOStream
#COMMENT: a #GAsyncResult
#NAME: get_description
#PARENT: Gio.SettingsSchemaKey
#COMMENT: Gets the description for @key.

If no description has been provided in the schema for @key, returns
%NULL.

The description can be one sentence to several paragraphs in length.
Paragraphs are delimited with a double newline.  Descriptions can be
translated and the value returned from this function is is the
current locale.

This function is slow.  The summary and description information for
the schemas is not stored in the compiled schema database so this
function has to parse all of the source XML files in the schema
directory.
#NAME: stream
#PARENT: Gio.InputStream.clear_pending.none
#COMMENT: input stream
#NAME: socket
#PARENT: Gio.Socket.check_connect_result.gboolean
#COMMENT: a #GSocket
#NAME: callback
#PARENT: Gio.SocketClient.connect_to_service_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: seekable
#PARENT: Gio.Seekable.truncate_fn.gboolean
#COMMENT: a #GSeekable.
#NAME: FILE_ATTRIBUTE_UNIX_DEVICE
#PARENT: Gio
#COMMENT: A key in the "unix" namespace for getting the device id of the device the
file is located on (see stat() documentation). This attribute is only
available for UNIX file systems. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: stream
#PARENT: Gio.FileOutputStream.query_info.FileInfo
#COMMENT: a #GFileOutputStream.
#NAME: stream
#PARENT: Gio.IOStreamClass.get_output_stream.get_output_stream.OutputStream
#COMMENT: a #GIOStream
#NAME: menu
#PARENT: Gio.Menu.append_section.none
#COMMENT: a #GMenu
#NAME: n_parameters
#PARENT: Gio.async_initable_newv_async.none
#COMMENT: the number of parameters in @parameters
#NAME: action
#PARENT: Gio.Notification.add_button_with_target_value.none
#COMMENT: an action name
#NAME: default
#PARENT: Gio.SocketProtocol
#COMMENT: The default protocol for the family/type
#NAME: flags
#PARENT: Gio.File.eject_mountable.none
#COMMENT: flags affecting the operation
#NAME: get_relative_path
#PARENT: Gio.File.get_relative_path
#COMMENT: string with the relative path from @descendant
    to @parent, or %NULL if @descendant doesn't have @parent as
    prefix. The returned string should be freed with g_free() when
    no longer needed.
#NAME: eject_with_operation_finish
#PARENT: Gio.MountIface.eject_with_operation_finish.eject_with_operation_finish
#COMMENT: %TRUE if the mount was successfully ejected. %FALSE otherwise.
#NAME: volume_monitor
#PARENT: Gio.VolumeMonitor.get_connected_drives.Drive
#COMMENT: a #GVolumeMonitor.
#NAME: icon_new_for_string
#PARENT: Gio
#COMMENT: Generate a #GIcon instance from @str. This function can fail if
@str is not valid - see g_icon_to_string() for discussion.

If your application or library provides one or more #GIcon
implementations you need to ensure that each #GType is registered
with the type system prior to calling g_icon_new_for_string().
#NAME: new_sync
#PARENT: Gio.DBusConnection.new_sync
#COMMENT: a #GDBusConnection or %NULL if @error is set. Free with g_object_unref().
#NAME: FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the amount of disk space
that is consumed by the file (in bytes).  This will generally be larger
than the file size (due to block size overhead) but can occasionally be
smaller (for example, for sparse files).
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
#NAME: parent_iface
#PARENT: Gio.DBusInterfaceIface
#COMMENT: The parent interface.
#NAME: g_iface
#PARENT: Gio.TlsClientConnectionInterface
#COMMENT: The parent interface.
#NAME: load_contents_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous load of the @file's contents.
The contents are placed in @contents, and @length is set to the
size of the @contents string. The @content should be freed with
g_free() when no longer needed. If @etag_out is present, it will be
set to the new entity tag for the @file.
#NAME: user_data
#PARENT: Gio.OutputStreamClass.write_async.write_async.none
#COMMENT: the data to pass to callback function
#NAME: put_int64
#PARENT: Gio.DataOutputStream
#COMMENT: Puts a signed 64-bit integer into the stream.
#NAME: file
#PARENT: Gio.FileIface.get_child_for_display_name.get_child_for_display_name.File
#COMMENT: input #GFile
#NAME: get_path
#PARENT: Gio.SettingsSchema.get_path
#COMMENT: the path of the schema, or %NULL
#NAME: find_enclosing_mount_async
#PARENT: Gio.File
#COMMENT: Asynchronously gets the mount for the file.

For more details, see g_file_find_enclosing_mount() which is
the synchronous version of this call.

When the operation is finished, @callback will be called.
You can then call g_file_find_enclosing_mount_finish() to
get the result of the operation.
#NAME: get_vtable
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Gets the interface vtable for the D-Bus interface implemented by
@interface_. The returned function pointers should expect @interface_
itself to be passed as @user_data.
#NAME: io_error_quark
#PARENT: Gio.io_error_quark
#COMMENT: a #GQuark.
#NAME: action_group
#PARENT: Gio.ActionGroup.list_actions.utf8
#COMMENT: a #GActionGroup
#NAME: cancellable
#PARENT: Gio.Drive.poll_for_media.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: flags
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer.lookup_certificate_issuer.TlsCertificate
#COMMENT: flags which affect the lookup operation
#NAME: model
#PARENT: Gio.MenuModelClass.iterate_item_links.iterate_item_links.MenuLinkIter
#COMMENT: a #GMenuModel
#NAME: submenu
#PARENT: Gio.Menu.insert_submenu.none
#COMMENT: a #GMenuModel with the items of the submenu
#NAME: stream
#PARENT: Gio.IOStream.clear_pending.none
#COMMENT: a #GIOStream
#NAME: cancellable
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: new
#PARENT: Gio.MemoryInputStream
#COMMENT: Creates a new empty #GMemoryInputStream.
#NAME: self
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by_async.lookup_certificates_issued_by_async.none
#COMMENT: a #GTlsDatabase
#NAME: flags
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: Flags from the #GDBusCallFlags enumeration.
#NAME: skip_finish
#PARENT: Gio.InputStreamClass.skip_finish.skip_finish
#COMMENT: the size of the bytes skipped, or %-1 on error.
#NAME: insert
#PARENT: Gio.SimpleActionGroup
#COMMENT: Adds an action to the action group.

If the action group already contains an action with the same name as
@action then the old action is dropped from the group.

The action group takes its own reference on @action.
#NAME: flags
#PARENT: Gio.FileIface.create_readwrite_async.create_readwrite_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: get_base_io_stream
#PARENT: Gio.TcpWrapperConnection.get_base_io_stream
#COMMENT: @conn's base #GIOStream
#NAME: eject
#PARENT: Gio.Drive
#COMMENT: Asynchronously ejects a drive.

When the operation is finished, @callback will be called.
You can then call g_drive_eject_finish() to obtain the
result of the operation.
#NAME: get_parse_name
#PARENT: Gio.File.get_parse_name
#COMMENT: a string containing the #GFile's parse name.
    The returned string should be freed with g_free()
    when no longer needed.
#NAME: cancellable
#PARENT: Gio.Drive.start.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: value
#PARENT: Gio.DBusInterfaceSetPropertyFunc.gboolean
#COMMENT: The value to set the property to.
#NAME: info
#PARENT: Gio.DBusProxy.new_for_bus_sync.DBusProxy
#COMMENT: A #GDBusInterfaceInfo specifying the minimal interface
       that @proxy conforms to or %NULL.
#NAME: new_for_bus_sync
#PARENT: Gio.DBusProxy.new_for_bus_sync
#COMMENT: A #GDBusProxy or %NULL if error is set. Free with g_object_unref().
#NAME: name
#PARENT: Gio.io_extension_point_register.IOExtensionPoint
#COMMENT: The name of the extension point
#NAME: DBusMessageByteOrder
#PARENT: Gio
#COMMENT: Enumeration used to describe the byte order of a D-Bus message.
#NAME: file
#PARENT: Gio.FileIface.get_uri_scheme.get_uri_scheme.utf8
#COMMENT: input #GFile
#NAME: res
#PARENT: Gio.DBusProxy.call_finish.GLib.Variant
#COMMENT: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_proxy_call().
#NAME: message
#PARENT: Gio.DBusMessage.get_unix_fd_list.UnixFDList
#COMMENT: A #GDBusMessage.
#NAME: connection
#PARENT: Gio.SocketConnection.connect_async.none
#COMMENT: a #GSocketConnection
#NAME: move
#PARENT: Gio.FileIface.move.move
#COMMENT: %TRUE on successful move, %FALSE otherwise.
#NAME: parameters
#PARENT: Gio.DBusProxy.call_sync.GLib.Variant
#COMMENT: A #GVariant tuple with parameters for the signal
             or %NULL if not passing parameters.
#NAME: socket
#PARENT: Gio.Socket.set_multicast_loopback.none
#COMMENT: a #GSocket.
#NAME: flags
#PARENT: Gio.FileIface.append_to_async.append_to_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: none
#PARENT: Gio.FileCreateFlags
#COMMENT: No flags set.
#NAME: changed
#PARENT: Gio.Drive
#COMMENT: Emitted when the drive's state has changed.
#NAME: mount
#PARENT: Gio.Mount.get_volume.Volume
#COMMENT: a #GMount.
#NAME: set_attributes_finish
#PARENT: Gio.File
#COMMENT: Finishes setting an attribute started in g_file_set_attributes_async().
#NAME: stream
#PARENT: Gio.BufferedInputStream.peek.gsize
#COMMENT: a #GBufferedInputStream
#NAME: set_check_cancellable
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Sets a #GCancellable to check before dispatching results.

This function has one very specific purpose: the provided cancellable
is checked at the time of g_simple_async_result_propagate_error() If
it is cancelled, these functions will return an "Operation was
cancelled" error (%G_IO_ERROR_CANCELLED).

Implementors of cancellable asynchronous functions should use this in
order to provide a guarantee to their callers that cancelling an
async operation will reliably result in an error being returned for
that operation (even if a positive result for the operation has
already been sent as an idle to the main context to be dispatched).

The checking described above is done regardless of any call to the
unrelated g_simple_async_result_set_handle_cancellation() function.
#NAME: join_multicast_group
#PARENT: Gio.Socket.join_multicast_group
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: callback
#PARENT: Gio.DBusConnection.signal_subscribe.guint
#COMMENT: callback to invoke when there is a signal matching the requested data
#NAME: 
#PARENT: Gio.AsyncInitable.new_async.none...
#COMMENT: the value of the first property, followed by other property
   value pairs, and ended by %NULL.
#NAME: content_type
#PARENT: Gio.AppInfo.remove_supports_type.gboolean
#COMMENT: a string.
#NAME: get_container
#PARENT: Gio.FileEnumerator.get_container
#COMMENT: the #GFile which is being enumerated.
#NAME: callback
#PARENT: Gio.FileIface.unmount_mountable_with_operation.unmount_mountable_with_operation.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: name_appeared_closure
#PARENT: Gio.bus_watch_name_with_closures.guint
#COMMENT: #GClosure to invoke when @name is known
to exist or %NULL.
#NAME: uri
#PARENT: Gio.VfsClass.get_file_for_uri.get_file_for_uri.File
#COMMENT: a string containing a URI
#NAME: apply
#PARENT: Gio.Settings
#COMMENT: Applies any changes that have been made to the settings.  This
function does nothing unless @settings is in 'delay-apply' mode;
see g_settings_delay().  In the normal case settings are always
applied immediately.
#NAME: socket
#PARENT: Gio.Socket.get_credentials.Credentials
#COMMENT: a #GSocket.
#NAME: target_value
#PARENT: Gio.action_parse_detailed_name.gboolean
#COMMENT: the target value, or %NULL for no target
#NAME: connection
#PARENT: Gio.bus_own_name_on_connection_with_closures.guint
#COMMENT: a #GDBusConnection
#NAME: ref
#PARENT: Gio.DBusArgInfo
#COMMENT: If @info is statically allocated does nothing. Otherwise increases
the reference count.
#NAME: add_filter
#PARENT: Gio.DBusConnection
#COMMENT: Adds a message filter. Filters are handlers that are run on all
incoming and outgoing messages, prior to standard dispatch. Filters
are run in the order that they were added.  The same handler can be
added as a filter more than once, in which case it will be run more
than once.  Filters added during a filter callback won't be run on
the message being processed. Filter functions are allowed to modify
and even drop messages.

Note that filters are run in a dedicated message handling thread so
they can't block and, generally, can't do anything but signal a
worker thread. Also note that filters are rarely needed - use API
such as g_dbus_connection_send_message_with_reply(),
g_dbus_connection_signal_subscribe() or g_dbus_connection_call() instead.

If a filter consumes an incoming message the message is not
dispatched anywhere else - not even the standard dispatch machinery
(that API such as g_dbus_connection_signal_subscribe() and
g_dbus_connection_send_message_with_reply() relies on) will see the
message. Similary, if a filter consumes an outgoing message, the
message will not be sent to the other peer.
#NAME: user_data
#PARENT: Gio.Resolver.lookup_by_name_async.none
#COMMENT: data for @callback
#NAME: n_keys
#PARENT: Gio.Settings.change-event.gboolean
#COMMENT: the length of the @keys array, or 0
#NAME: supports_thread_contexts
#PARENT: Gio.File.supports_thread_contexts
#COMMENT: Whether or not @file supports thread-default contexts.
#NAME: info
#PARENT: Gio.DBusNodeInfo.unref.none
#COMMENT: A #GDBusNodeInfo.
#NAME: mount
#PARENT: Gio.MountIface.eject_finish.eject_finish.gboolean
#COMMENT: a #GMount.
#NAME: get_listen_backlog
#PARENT: Gio.Socket
#COMMENT: Gets the listen backlog setting of the socket. For details on this,
see g_socket_set_listen_backlog().
#NAME: enumerate_children_finish
#PARENT: Gio.File
#COMMENT: Finishes an async enumerate children operation.
See g_file_enumerate_children_async().
#NAME: type
#PARENT: Gio.FileIface.set_attribute.set_attribute.gboolean
#COMMENT: The type of the attribute
#NAME: revert
#PARENT: Gio.Settings
#COMMENT: Reverts all non-applied changes to the settings.  This function
does nothing unless @settings is in 'delay-apply' mode; see
g_settings_delay().  In the normal case settings are always applied
immediately.

Change notifications will be emitted for affected keys.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.set_as_default_for_type.set_as_default_for_type.gboolean
#COMMENT: a #GAppInfo.
#NAME: get_fallback_for_type
#PARENT: Gio.AppInfo.get_fallback_for_type
#COMMENT: #GList of #GAppInfos
    for given @content_type or %NULL on error.
#NAME: user_data
#PARENT: Gio.DBusProxy.call_with_unix_fd_list.none
#COMMENT: The data to pass to @callback.
#NAME: io_priority
#PARENT: Gio.FileIface.copy_async.copy_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: call
#PARENT: Gio.DBusConnection
#COMMENT: Asynchronously invokes the @method_name method on the
@interface_name D-Bus interface on the remote object at
@object_path owned by @bus_name.

If @connection is closed then the operation will fail with
%G_IO_ERROR_CLOSED. If @cancellable is canceled, the operation will
fail with %G_IO_ERROR_CANCELLED. If @parameters contains a value
not compatible with the D-Bus protocol, the operation fails with
%G_IO_ERROR_INVALID_ARGUMENT.

If @reply_type is non-%NULL then the reply will be checked for having this type and an
error will be raised if it does not match.  Said another way, if you give a @reply_type
then any non-%NULL return value will be of this type.

If the @parameters #GVariant is floating, it is consumed. This allows
convenient 'inline' use of g_variant_new(), e.g.:
|[<!-- language="C" -->
 g_dbus_connection_call (connection,
                         "org.freedesktop.StringThings",
                         "/org/freedesktop/StringThings",
                         "org.freedesktop.StringThings",
                         "TwoStrings",
                         g_variant_new ("(ss)",
                                        "Thing One",
                                        "Thing Two"),
                         NULL,
                         G_DBUS_CALL_FLAGS_NONE,
                         -1,
                         NULL,
                         (GAsyncReadyCallback) two_strings_done,
                         NULL);
]|

This is an asynchronous method. When the operation is finished,
@callback will be invoked in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this method from. You can then call
g_dbus_connection_call_finish() to get the result of the operation.
See g_dbus_connection_call_sync() for the synchronous version of this
function.

If @callback is %NULL then the D-Bus method call message will be sent with
the %G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED flag set.
#NAME: num_files
#PARENT: Gio.FileMeasureProgressCallback.none
#COMMENT: the number of non-directory files encountered
#NAME: eject_finish
#PARENT: Gio.Volume.eject_finish
#COMMENT: %TRUE, %FALSE if operation failed
#NAME: action_map
#PARENT: Gio.ActionMapInterface.remove_action.remove_action.none
#COMMENT: a #GActionMap
#NAME: set_flags
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Sets flags describing what the behavior of @skeleton should be.
#NAME: unmounted
#PARENT: Gio.FileMonitorEvent
#COMMENT: the file location was unmounted.
#NAME: message
#PARENT: Gio.DBusMessage.get_arg0.utf8
#COMMENT: A #GDBusMessage.
#NAME: 
#PARENT: Gio.simple_async_report_error_in_idle.none...
#COMMENT: a list of variables to fill in @format.
#NAME: 
#PARENT: Gio.Task.return_new_error.none...
#COMMENT: a list of values to insert into @format.
#NAME: normal
#PARENT: Gio.NotificationPriority
#COMMENT: the default priority, to be used for the
  majority of notifications (for example email messages, software updates,
  completed download/sync operations)
#NAME: connect
#PARENT: Gio.SocketConnection
#COMMENT: Connect @connection to the specified remote address.
#NAME: size
#PARENT: Gio.SocketControlMessage.deserialize.SocketControlMessage
#COMMENT: the size of the data in bytes
#NAME: object
#PARENT: Gio.FileAttributeType
#COMMENT: a #GObject.
#NAME: query_writable_namespaces
#PARENT: Gio.FileIface.query_writable_namespaces.query_writable_namespaces
#COMMENT: a #GFileAttributeInfoList describing the writable namespaces.
    When you are done with it, release it with
    g_file_attribute_info_list_unref()
#NAME: force_rescan
#PARENT: Gio.MountIface.guess_content_type.guess_content_type.none
#COMMENT: Whether to force a rescan of the content.
    Otherwise a cached result will be used if available
#NAME: get_value
#PARENT: Gio.MenuLinkIter
#COMMENT: Gets the linked #GMenuModel at the current iterator position.

The iterator is not advanced.
#NAME: user_data
#PARENT: Gio.DBusConnection.new.none
#COMMENT: the data to pass to @callback
#NAME: count
#PARENT: Gio.InputStream.read_bytes.GLib.Bytes
#COMMENT: maximum number of bytes that will be read from the stream. Common
values include 4096 and 8192.
#NAME: str
#PARENT: Gio.Icon.new_for_string.Icon
#COMMENT: A string obtained via g_icon_to_string().
#NAME: is_native
#PARENT: Gio.FileIface.is_native.is_native
#COMMENT: %TRUE if @file is native
#NAME: printerr
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Formats a message and prints it using the stderr print handler in the
invoking process.

If @cmdline is a local invocation then this is exactly equivalent to
g_printerr().  If @cmdline is remote then this is equivalent to
calling g_printerr() in the invoking process.
#NAME: set_return_on_cancel
#PARENT: Gio.Task
#COMMENT: Sets or clears @task's return-on-cancel flag. This is only
meaningful for tasks run via g_task_run_in_thread() or
g_task_run_in_thread_sync().

If @return_on_cancel is %TRUE, then cancelling @task's
#GCancellable will immediately cause it to return, as though the
task's #GTaskThreadFunc had called
g_task_return_error_if_cancelled() and then returned.

This allows you to create a cancellable wrapper around an
uninterruptable function. The #GTaskThreadFunc just needs to be
careful that it does not modify any externally-visible state after
it has been cancelled. To do that, the thread should call
g_task_set_return_on_cancel() again to (atomically) set
return-on-cancel %FALSE before making externally-visible changes;
if the task gets cancelled before the return-on-cancel flag could
be changed, g_task_set_return_on_cancel() will indicate this by
returning %FALSE.

You can disable and re-enable this flag multiple times if you wish.
If the task's #GCancellable is cancelled while return-on-cancel is
%FALSE, then calling g_task_set_return_on_cancel() to set it %TRUE
again will cause the task to be cancelled at that point.

If the task's #GCancellable is already cancelled before you call
g_task_run_in_thread()/g_task_run_in_thread_sync(), then the
#GTaskThreadFunc will still be run (for consistency), but the task
will also be completed right away.
#NAME: name
#PARENT: Gio.DBusArgInfo
#COMMENT: Name of the argument, e.g. @unix_user_id.
#NAME: prepend_name
#PARENT: Gio.ThemedIcon
#COMMENT: Prepend a name to the list of icons from within @icon.

Note that doing so invalidates the hash computed by prior calls
to g_icon_hash().
#NAME: message
#PARENT: Gio.DBusMessage.to_gerror.gboolean
#COMMENT: A #GDBusMessage.
#NAME: length
#PARENT: Gio.DataInputStream.read_line_finish.guint8
#COMMENT: a #gsize to get the length of the data read in.
#NAME: annotations
#PARENT: Gio.DBusAnnotationInfo.lookup.utf8
#COMMENT: A %NULL-terminated array of annotations or %NULL.
#NAME: copy_finish
#PARENT: Gio.File.copy_finish
#COMMENT: a %TRUE on success, %FALSE on error.
#NAME: root
#PARENT: Gio.content_type_guess_for_tree.utf8
#COMMENT: the root of the tree to guess a type for
#NAME: action_name
#PARENT: Gio.RemoteActionGroupInterface.change_action_state_full.change_action_state_full.none
#COMMENT: the name of the action to change the state of
#NAME: callback
#PARENT: Gio.File.trash_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: iconname
#PARENT: Gio.ThemedIcon.prepend_name.none
#COMMENT: name of icon to prepend to list of icons from within @icon.
#NAME: bus_watch_name_with_closures
#PARENT: Gio.bus_watch_name_with_closures
#COMMENT: An identifier (never 0) that an be used with
g_bus_unwatch_name() to stop watching the name.
#NAME: credentials
#PARENT: Gio.Credentials.set_native.none
#COMMENT: A #GCredentials.
#NAME: cancellable
#PARENT: Gio.FileIface.create_async.create_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: TlsInteractionResult
#PARENT: Gio
#COMMENT: #GTlsInteractionResult is returned by various functions in #GTlsInteraction
when finishing an interaction request.
#NAME: data
#PARENT: Gio.DataOutputStream.put_int16.gboolean
#COMMENT: a #gint16.
#NAME: drive
#PARENT: Gio.Drive.get_volumes.Volume
#COMMENT: a #GDrive.
#NAME: take_error
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Like g_dbus_method_invocation_return_gerror() but takes ownership
of @error so the caller does not need to free it.

This method will free @invocation, you cannot use it afterwards.
#NAME: can_eject
#PARENT: Gio.Volume.can_eject
#COMMENT: %TRUE if the @volume can be ejected. %FALSE otherwise
#NAME: cancellable
#PARENT: Gio.Cancellable.cancel.none
#COMMENT: a #GCancellable object.
#NAME: callback
#PARENT: Gio.ResolverClass.lookup_by_address_async.lookup_by_address_async.none
#COMMENT: callback to call after resolution completes
#NAME: name-owner
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: The unique name that owns #GDBusObjectManagerClient:name or %NULL if
no-one is currently owning the name. Connect to the
#GObject::notify signal to track changes to this property.
#NAME: timeout_msec
#PARENT: Gio.DBusConnection.call_sync.GLib.Variant
#COMMENT: the timeout in milliseconds, -1 to use the default
    timeout or %G_MAXINT for no timeout
#NAME: io_modules_load_all_in_directory
#PARENT: Gio
#COMMENT: Loads all the modules in the specified directory.

If don't require all modules to be initialized (and thus registering
all gtypes) then you can use g_io_modules_scan_all_in_directory()
which allows delayed/lazy loading of modules.
#NAME: converter
#PARENT: Gio.ConverterIface.reset.reset.none
#COMMENT: a #GConverter.
#NAME: cancellable
#PARENT: Gio.Socket.receive_with_blocking.gssize
#COMMENT: a %GCancellable or %NULL
#NAME: FILE_ATTRIBUTE_ACCESS_CAN_READ
#PARENT: Gio
#COMMENT: A key in the "access" namespace for getting read privileges.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
This attribute will be %TRUE if the user is able to read the file.
#NAME: flags
#PARENT: Gio.FileIface.enumerate_children_async.enumerate_children_async.none
#COMMENT: a set of #GFileQueryInfoFlags
#NAME: get_resource
#PARENT: Gio.StaticResource.get_resource
#COMMENT: a #GResource
#NAME: close_finish
#PARENT: Gio.FileEnumeratorClass.close_finish.close_finish
#COMMENT: %TRUE if the close operation has finished successfully.
#NAME: user_data
#PARENT: Gio.SocketClient.connect_to_uri_async.none
#COMMENT: user data for the callback
#NAME: new_loopback
#PARENT: Gio.NetworkAddress
#COMMENT: Creates a new #GSocketConnectable for connecting to the local host
over a loopback connection to the given @port. This is intended for
use in connecting to local services which may be running on IPv4 or
IPv6.

The connectable will return IPv4 and IPv6 loopback addresses,
regardless of how the host resolves `localhost`. By contrast,
g_network_address_new() will often only return an IPv4 address when
resolving `localhost`, and an IPv6 address for `localhost6`.

g_network_address_get_hostname() will always return `localhost` for
#GNetworkAddresses created with this constructor.
#NAME: action_print_detailed_name
#PARENT: Gio.action_print_detailed_name
#COMMENT: a detailed format string
#NAME: unix_mount_get_mount_path
#PARENT: Gio
#COMMENT: Gets the mount path for a unix mount.
#NAME: already_mounted
#PARENT: Gio.IOErrorEnum
#COMMENT: File is already mounted.
#NAME: cancellable
#PARENT: Gio.File.poll_mountable.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: get_recommended_for_type
#PARENT: Gio.AppInfo
#COMMENT: Gets a list of recommended #GAppInfos for a given content type, i.e.
those applications which claim to support the given content type exactly,
and not by MIME type subclassing.
Note that the first application of the list is the last used one, i.e.
the last one for which g_app_info_set_as_last_used_for_type() has been
called.
#NAME: vfs
#PARENT: Gio.VfsClass.get_supported_uri_schemes.get_supported_uri_schemes.utf8
#COMMENT: a #GVfs.
#NAME: get_connection
#PARENT: Gio.DBusObjectManagerServer.get_connection
#COMMENT: A #GDBusConnection object or %NULL if
  @manager isn't exported on a connection. The returned object should
  be freed with g_object_unref().
#NAME: cancellable
#PARENT: Gio.Initable.init.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: origin
#PARENT: Gio.Emblem.new_with_origin.Emblem
#COMMENT: a GEmblemOrigin enum defining the emblem's origin
#NAME: result
#PARENT: Gio.SocketAddressEnumerator.next_finish.SocketAddress
#COMMENT: a #GAsyncResult
#NAME: new
#PARENT: Gio.FileAttributeMatcher.new
#COMMENT: a #GFileAttributeMatcher
#NAME: files
#PARENT: Gio.AppLaunchContext.get_startup_notify_id.utf8
#COMMENT: a #GList of of #GFile objects
#NAME: registration_id
#PARENT: Gio.DBusConnection.unregister_subtree.gboolean
#COMMENT: a subtree registration id obtained from
    g_dbus_connection_register_subtree()
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.action_added.action_added.none
#COMMENT: a #GActionGroup
#NAME: res
#PARENT: Gio.AsyncInitable.init_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: argv
#PARENT: Gio.Subprocess.newv.Subprocess
#COMMENT: commandline arguments for the subprocess
#NAME: new
#PARENT: Gio.TlsServerConnection.new
#COMMENT: the new
#GTlsServerConnection, or %NULL on error
#NAME: action_group
#PARENT: Gio.ActionGroup.query_action.gboolean
#COMMENT: a #GActionGroup
#NAME: remove_supports_type
#PARENT: Gio.AppInfo
#COMMENT: Removes a supported type from an application, if possible.
#NAME: file
#PARENT: Gio.File.replace_readwrite_finish.FileIOStream
#COMMENT: input #GFile
#NAME: io_priority
#PARENT: Gio.FileIface.measure_disk_usage_async.measure_disk_usage_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: menu
#PARENT: Gio.Menu.prepend_item.none
#COMMENT: a #GMenu
#NAME: get_stdin
#PARENT: Gio.ApplicationCommandLine.get_stdin
#COMMENT: a #GInputStream for stdin
#NAME: to_blob
#PARENT: Gio.DBusMessage
#COMMENT: Serializes @message to a blob. The byte order returned by
g_dbus_message_get_byte_order() will be used.
#NAME: error
#PARENT: Gio.DBusError.is_remote_error.gboolean
#COMMENT: A #GError.
#NAME: ref
#PARENT: Gio.SettingsSchemaSource
#COMMENT: Increase the reference count of @source, returning a new reference.
#NAME: send_signal
#PARENT: Gio.Subprocess
#COMMENT: Sends the UNIX signal @signal_num to the subprocess, if it is still
running.

This API is race-free.  If the subprocess has terminated, it will not
be signalled.

This API is not available on Windows.
#NAME: resolver
#PARENT: Gio.Resolver.lookup_by_address_async.none
#COMMENT: a #GResolver
#NAME: run_in_thread
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Runs the asynchronous job in a separate thread and then calls
g_simple_async_result_complete_in_idle() on @simple to return
the result to the appropriate main loop.

Calling this function takes a reference to @simple for as long as
is needed to run the job and report its completion.
#NAME: connection
#PARENT: Gio.DBusConnection.add_filter.guint
#COMMENT: a #GDBusConnection
#NAME: object
#PARENT: Gio.Settings.bind_with_mapping.none
#COMMENT: a #GObject
#NAME: connect
#PARENT: Gio.Cancellable
#COMMENT: Convenience function to connect to the #GCancellable::cancelled
signal. Also handles the race condition that may happen
if the cancellable is cancelled right before connecting.

@callback is called at most once, either directly at the
time of the connect if @cancellable is already cancelled,
or when @cancellable is cancelled in some thread.

@data_destroy_func will be called when the handler is
disconnected, or immediately if the cancellable is already
cancelled.

See #GCancellable::cancelled for details on how to use this.

Since GLib 2.40, the lock protecting @cancellable is not held when
@callback is invoked.  This lifts a restriction in place for
earlier GLib versions which now makes it easier to write cleanup
code that unconditionally invokes e.g. g_cancellable_cancel().
#NAME: query_info_finish
#PARENT: Gio.FileIOStreamClass.query_info_finish.query_info_finish
#COMMENT: A #GFileInfo for the finished query.
#NAME: unexport_from_connection
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Stops exporting @interface_ on @connection.

To stop exporting on all connections the interface is exported on,
use g_dbus_interface_skeleton_unexport().
#NAME: offset
#PARENT: Gio.BufferedInputStream.peek.gsize
#COMMENT: a #gsize
#NAME: stream
#PARENT: Gio.InputStream.skip_finish.gssize
#COMMENT: a #GInputStream.
#NAME: poll_mountable
#PARENT: Gio.File
#COMMENT: Polls a file of type #G_FILE_TYPE_MOUNTABLE.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called.
You can then call g_file_mount_mountable_finish() to get
the result of the operation.
#NAME: cancelled
#PARENT: Gio.Cancellable
#COMMENT: Emitted when the operation has been cancelled.

Can be used by implementations of cancellable operations. If the
operation is cancelled from another thread, the signal will be
emitted in the thread that cancelled the operation, not the
thread that is running the operation.

Note that disconnecting from this signal (or any signal) in a
multi-threaded program is prone to race conditions. For instance
it is possible that a signal handler may be invoked even after
a call to g_signal_handler_disconnect() for that handler has
already returned.

There is also a problem when cancellation happens right before
connecting to the signal. If this happens the signal will
unexpectedly not be emitted, and checking before connecting to
the signal leaves a race condition where this is still happening.

In order to make it safe and easy to connect handlers there
are two helper functions: g_cancellable_connect() and
g_cancellable_disconnect() which protect against problems
like this.

An example of how to us this:
|[<!-- language="C" -->
    // Make sure we don't do unnecessary work if already cancelled
    if (g_cancellable_set_error_if_cancelled (cancellable, error))
      return;

    // Set up all the data needed to be able to handle cancellation
    // of the operation
    my_data = my_data_new (...);

    id = 0;
    if (cancellable)
      id = g_cancellable_connect (cancellable,
    			      G_CALLBACK (cancelled_handler)
    			      data, NULL);

    // cancellable operation here...

    g_cancellable_disconnect (cancellable, id);

    // cancelled_handler is never called after this, it is now safe
    // to free the data
    my_data_free (my_data);
]|

Note that the cancelled signal is emitted in the thread that
the user cancelled from, which may be the main thread. So, the
cancellable signal should not do something that can block.
#NAME: level
#PARENT: Gio.Socket.set_option.gboolean
#COMMENT: the "API level" of the option (eg, `SOL_SOCKET`)
#NAME: is-multicast
#PARENT: Gio.InetAddress
#COMMENT: Whether this is a multicast address.
See g_inet_address_get_is_multicast().
#NAME: appinfo
#PARENT: Gio.AppInfoIface.get_commandline.get_commandline.utf8
#COMMENT: a #GAppInfo
#NAME: get_action_state
#PARENT: Gio.ActionGroupInterface.get_action_state.get_action_state
#COMMENT: the current state of the action
#NAME: context
#PARENT: Gio.AppLaunchContext.unsetenv.none
#COMMENT: a #GAppLaunchContext
#NAME: result
#PARENT: Gio.FileInputStreamClass.query_info_finish.query_info_finish.FileInfo
#COMMENT: a #GAsyncResult.
#NAME: res
#PARENT: Gio.File.create_readwrite_finish.FileIOStream
#COMMENT: a #GAsyncResult
#NAME: ref_count
#PARENT: Gio.DBusPropertyInfo
#COMMENT: The reference count or -1 if statically allocated.
#NAME: file
#PARENT: Gio.File.read_fn.FileInputStream
#COMMENT: #GFile to read
#NAME: create_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous file create operation started with
g_file_create_async().
#NAME: self
#PARENT: Gio.SubprocessLauncher.getenv.utf8
#COMMENT: a #GSubprocess
#NAME: FILE_ATTRIBUTE_STANDARD_NAME
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the name of the file.
The name is the on-disk filename which may not be in any known encoding,
and can thus not be generally displayed as is.
Use #G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME if you need to display the
name in a user interface.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
#NAME: flags
#PARENT: Gio.DBusObjectManagerClient.new_sync.DBusObjectManagerClient
#COMMENT: Zero or more flags from the #GDBusObjectManagerClientFlags enumeration.
#NAME: cancellable
#PARENT: Gio.SocketAddressEnumerator.next_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: new_with_backend_and_path
#PARENT: Gio.Settings
#COMMENT: Creates a new #GSettings object with the schema specified by
@schema_id and a given #GSettingsBackend and path.

This is a mix of g_settings_new_with_backend() and
g_settings_new_with_path().
#NAME: appinfo
#PARENT: Gio.DesktopAppInfo.launch_uris_as_manager.gboolean
#COMMENT: a #GDesktopAppInfo
#NAME: get_password
#PARENT: Gio.ProxyAddress
#COMMENT: Gets @proxy's password.
#NAME: interaction
#PARENT: Gio.TlsConnection.set_interaction.none
#COMMENT: an interaction object, or %NULL
#NAME: file_new_for_path
#PARENT: Gio
#COMMENT: Constructs a #GFile for a given path. This operation never
fails, but the returned object might not support any I/O
operation if @path is malformed.
#NAME: new
#PARENT: Gio.IOModuleScope.new
#COMMENT: the new module scope
#NAME: cancellable
#PARENT: Gio.Seekable.truncate.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: cancellable
#PARENT: Gio.InputStream.read_all_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: task
#PARENT: Gio.Task.get_cancellable.Cancellable
#COMMENT: a #GTask
#NAME: object_path
#PARENT: Gio.DBusProxy.new_for_bus.none
#COMMENT: An object path.
#NAME: guess_symbolic_icon
#PARENT: Gio.UnixMountPoint.guess_symbolic_icon
#COMMENT: a #GIcon
#NAME: has_connection
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Checks if @interface_ is exported on @connection.
#NAME: native_type
#PARENT: Gio.Credentials.get_native.gpointer
#COMMENT: The type of native credentials to get.
#NAME: iterate_item_links
#PARENT: Gio.MenuModel
#COMMENT: Creates a #GMenuLinkIter to iterate over the links of the item at
position @item_index in @model.

You must free the iterator with g_object_unref() when you are done.
#NAME: get_rehandshake_mode
#PARENT: Gio.TlsConnection.get_rehandshake_mode
#COMMENT: @conn's rehandshaking mode
#NAME: app_info_reset_type_associations
#PARENT: Gio
#COMMENT: Removes all changes to the type associations done by
g_app_info_set_as_default_for_type(),
g_app_info_set_as_default_for_extension(),
g_app_info_add_supports_type() or
g_app_info_remove_supports_type().
#NAME: attribute
#PARENT: Gio.FileAttributeMatcher.matches_only.gboolean
#COMMENT: a file attribute key.
#NAME: content_type
#PARENT: Gio.AppInfoIface.set_as_last_used_for_type.set_as_last_used_for_type.gboolean
#COMMENT: the content type.
#NAME: state
#PARENT: Gio.PropertyAction
#COMMENT: The state of the action, or %NULL if the action is stateless.
#NAME: set_byte_order
#PARENT: Gio.DBusMessage
#COMMENT: Sets the byte order of @message.
#NAME: cancellable
#PARENT: Gio.TlsConnectionClass.handshake.handshake.gboolean
#COMMENT: a #GCancellable, or %NULL
#NAME: next_finish
#PARENT: Gio.SocketAddressEnumerator.next_finish
#COMMENT: a #GSocketAddress (owned by the caller), or %NULL on
    error (in which case *@error will be set) or if there are no
    more addresses.
#NAME: call_with_unix_fd_list_finish
#PARENT: Gio.DBusConnection
#COMMENT: Finishes an operation started with g_dbus_connection_call_with_unix_fd_list().
#NAME: call_finish
#PARENT: Gio.DBusConnection
#COMMENT: Finishes an operation started with g_dbus_connection_call().
#NAME: proxy
#PARENT: Gio.ProxyAddress.get_uri.utf8
#COMMENT: a #GProxyAddress
#NAME: user_data
#PARENT: Gio.Subprocess.wait_check_async.none
#COMMENT: user_data for @callback
#NAME: cancellable
#PARENT: Gio.pollable_source_new_full.GLib.Source
#COMMENT: optional #GCancellable to attach
#NAME: unknown_object
#PARENT: Gio.DBusError
#COMMENT: Object you invoked a method on isn't known. Since 2.42
#NAME: args
#PARENT: Gio.DBusSignalInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusArgInfo structures or %NULL if there are no arguments.
#NAME: connection
#PARENT: Gio.DBusConnection.unregister_subtree.gboolean
#COMMENT: a #GDBusConnection
#NAME: info
#PARENT: Gio.DesktopAppInfo.get_string.utf8
#COMMENT: a #GDesktopAppInfo
#NAME: new_with_path
#PARENT: Gio.Settings.new_with_path
#COMMENT: a new #GSettings object
#NAME: connection
#PARENT: Gio.DBusConnection.is_closed.gboolean
#COMMENT: a #GDBusConnection
#NAME: connectable
#PARENT: Gio.NetworkMonitorInterface.can_reach.can_reach.gboolean
#COMMENT: a #GSocketConnectable
#NAME: new_sync
#PARENT: Gio.DBusConnection
#COMMENT: Synchronously sets up a D-Bus connection for exchanging D-Bus messages
with the end represented by @stream.

If @stream is a #GSocketConnection, then the corresponding #GSocket
will be put into non-blocking mode.

The D-Bus connection will interact with @stream from a worker thread.
As a result, the caller should not interact with @stream after this
method has been called, except by calling g_object_unref() on it.

If @observer is not %NULL it may be used to control the
authentication process.

This is a synchronous failable constructor. See
g_dbus_connection_new() for the asynchronous version.
#NAME: is_same
#PARENT: Gio.TlsCertificate.is_same
#COMMENT: whether the same or not
#NAME: PasswordSave
#PARENT: Gio
#COMMENT: #GPasswordSave is used to indicate the lifespan of a saved password.

#Gvfs stores passwords in the Gnome keyring when this flag allows it
to, and later retrieves it again from there.
#NAME: unhandled
#PARENT: Gio.MountOperationResult
#COMMENT: The request was unhandled (i.e. not
    implemented)
#NAME: change-event
#PARENT: Gio.Settings.change-event
#COMMENT: %TRUE to stop other handlers from being invoked for the
         event. FALSE to propagate the event further.
#NAME: cancellable
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: read_all_finish
#PARENT: Gio.InputStream
#COMMENT: Finishes an asynchronous stream read operation started with
g_input_stream_read_all_async().

As a special exception to the normal conventions for functions that
use #GError, if this function returns %FALSE (and sets @error) then
@bytes_read will be set to the number of bytes that were successfully
read before the error was encountered.  This functionality is only
available from C.  If you need it from another language then you must
write your own loop around g_input_stream_read_async().
#NAME: init
#PARENT: Gio.Initable
#COMMENT: Initializes the object implementing the interface.

The object must be initialized before any real use after initial
construction, either with this function or g_async_initable_init_async().

Implementations may also support cancellation. If @cancellable is not %NULL,
then initialization can be cancelled by triggering the cancellable object
from another thread. If the operation was cancelled, the error
%G_IO_ERROR_CANCELLED will be returned. If @cancellable is not %NULL and
the object doesn't support cancellable initialization the error
%G_IO_ERROR_NOT_SUPPORTED will be returned.

If the object is not initialized, or initialization returns with an
error, then all operations on the object except g_object_ref() and
g_object_unref() are considered to be invalid, and have undefined
behaviour. See the [introduction][ginitable] for more details.

Implementations of this method must be idempotent, i.e. multiple calls
to this function with the same argument should return the same results.
Only the first call initializes the object, further calls return the result
of the first call. This is so that it's safe to implement the singleton
pattern in the GObject constructor function.
#NAME: get_icon
#PARENT: Gio.MountIface.get_icon.get_icon
#COMMENT: a #GIcon.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: cancellable
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer.TlsCertificate
#COMMENT: a #GCancellable, or %NULL
#NAME: cancellable
#PARENT: Gio.DBusConnection.send_message_with_reply.none
#COMMENT: a #GCancellable or %NULL
#NAME: file
#PARENT: Gio.File.read.FileInputStream
#COMMENT: #GFile to read
#NAME: stop_chars
#PARENT: Gio.DataInputStream.read_upto.utf8
#COMMENT: characters to terminate the read
#NAME: enumerator
#PARENT: Gio.FileEnumerator.next_file.FileInfo
#COMMENT: a #GFileEnumerator.
#NAME: get_state_type
#PARENT: Gio.Action
#COMMENT: Queries the type of the state of @action.

If the action is stateful (e.g. created with
g_simple_action_new_stateful()) then this function returns the
#GVariantType of the state.  This is the type of the initial value
given as the state. All calls to g_action_change_state() must give a
#GVariant of this type and g_action_get_state() will return a
#GVariant of the same type.

If the action is not stateful (e.g. created with g_simple_action_new())
then this function will return %NULL. In that case, g_action_get_state()
will return %NULL and you must not call g_action_change_state().
#NAME: new_for_address_finish
#PARENT: Gio.DBusConnection.new_for_address_finish
#COMMENT: a #GDBusConnection or %NULL if @error is set. Free with
    g_object_unref().
#NAME: get_attribute_boolean
#PARENT: Gio.FileInfo.get_attribute_boolean
#COMMENT: the boolean value contained within the attribute.
#NAME: PollableOutputStream
#PARENT: Gio
#COMMENT: #GPollableOutputStream is implemented by #GOutputStreams that
can be polled for readiness to write. This can be used when
interfacing with a non-GIO API that expects
UNIX-file-descriptor-style asynchronous I/O rather than GIO-style.
#NAME: DBusProxyFlags
#PARENT: Gio
#COMMENT: Flags used when constructing an instance of a #GDBusProxy derived class.
#NAME: get_object
#PARENT: Gio.DBusObjectManager.get_object
#COMMENT: A #GDBusObject or %NULL. Free with
  g_object_unref().
#NAME: equal
#PARENT: Gio.AppInfoIface.equal.equal
#COMMENT: %TRUE if @appinfo1 is equal to @appinfo2. %FALSE otherwise.
#NAME: proxy
#PARENT: Gio.DBusProxy.call.none
#COMMENT: A #GDBusProxy.
#NAME: start
#PARENT: Gio.DBusServer
#COMMENT: Starts @server.
#NAME: cancellable
#PARENT: Gio.UnixConnection.send_credentials_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_object_path
#PARENT: Gio.DBusObject
#COMMENT: Gets the object path for @object.
#NAME: user_data
#PARENT: Gio.FileIface.unmount_mountable.unmount_mountable.none
#COMMENT: the data to pass to callback function
#NAME: filter_id
#PARENT: Gio.DBusConnection.remove_filter.none
#COMMENT: an identifier obtained from g_dbus_connection_add_filter()
#NAME: data
#PARENT: Gio.DataOutputStream.put_byte.gboolean
#COMMENT: a #guchar.
#NAME: backend
#PARENT: Gio.Settings.new_with_backend_and_path.Settings
#COMMENT: the #GSettingsBackend to use
#NAME: format
#PARENT: Gio.SimpleAsyncResult.set_error.none
#COMMENT: a formatted error reporting string.
#NAME: client
#PARENT: Gio.SocketClient.get_protocol.SocketProtocol
#COMMENT: a #GSocketClient
#NAME: get_size
#PARENT: Gio.SocketControlMessage.get_size
#COMMENT: The number of bytes required.
#NAME: FILE_ATTRIBUTE_FILESYSTEM_USED
#PARENT: Gio
#COMMENT: A key in the "filesystem" namespace for getting the number of bytes of used on the
file system. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_UINT64.
#NAME: remove_interface_by_name
#PARENT: Gio.DBusObjectSkeleton
#COMMENT: Removes the #GDBusInterface with @interface_name from @object.

If no D-Bus interface of the given interface exists, this function
does nothing.
#NAME: set_server_identity
#PARENT: Gio.TlsClientConnection
#COMMENT: Sets @conn's expected server identity, which is used both to tell
servers on virtual hosts which certificate to present, and also
to let @conn know what name to look for in the certificate when
performing %G_TLS_CERTIFICATE_BAD_IDENTITY validation, if enabled.
#NAME: launch
#PARENT: Gio.AppInfoIface.launch.launch
#COMMENT: %TRUE on successful launch, %FALSE otherwise.
#NAME: drive
#PARENT: Gio.DriveIface.poll_for_media.poll_for_media.none
#COMMENT: a #GDrive.
#NAME: get_resource_base_path
#PARENT: Gio.Application
#COMMENT: Gets the resource base path of @application.

See g_application_set_resource_base_path() for more information.
#NAME: info
#PARENT: Gio.FileInfo.set_modification_time.none
#COMMENT: a #GFileInfo.
#NAME: enumerator
#PARENT: Gio.FileEnumerator.get_container.File
#COMMENT: a #GFileEnumerator
#NAME: content_type
#PARENT: Gio.AppInfo.get_default_for_type.AppInfo
#COMMENT: the content type to find a #GAppInfo for
#NAME: get_input_stream
#PARENT: Gio.IOStream
#COMMENT: Gets the input stream for this object. This is used
for reading.
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_line.guint8
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: result
#PARENT: Gio.ProxyResolver.lookup_finish.utf8
#COMMENT: the result passed to your #GAsyncReadyCallback
#NAME: implement
#PARENT: Gio.IOExtensionPoint.implement
#COMMENT: a #GIOExtension object for #GType
#NAME: changed_properties
#PARENT: Gio.DBusObjectManagerClient.interface-proxy-properties-changed.none
#COMMENT: A #GVariant containing the properties that changed.
#NAME: get_is_registered
#PARENT: Gio.Application.get_is_registered
#COMMENT: %TRUE if @application is registered
#NAME: authentication-observer
#PARENT: Gio.DBusServer
#COMMENT: A #GDBusAuthObserver object to assist in the authentication process or %NULL.
#NAME: get_domain
#PARENT: Gio.NetworkService
#COMMENT: Gets the domain that @srv serves. This might be either UTF-8 or
ASCII-encoded, depending on what @srv was created with.
#NAME: flags
#PARENT: Gio.DBusConnection.call_sync.GLib.Variant
#COMMENT: flags from the #GDBusCallFlags enumeration
#NAME: get_cached_property_names
#PARENT: Gio.DBusProxy
#COMMENT: Gets the names of all cached properties on @proxy.
#NAME: attributes
#PARENT: Gio.FileIface.query_filesystem_info_async.query_filesystem_info_async.none
#COMMENT: an attribute query string
#NAME: path
#PARENT: Gio.Settings
#COMMENT: The path within the backend where the settings are stored.
#NAME: error
#PARENT: Gio.SimpleAsyncResult.set_from_error.none
#COMMENT: #GError.
#NAME: data-size
#PARENT: Gio.MemoryOutputStream
#COMMENT: Size of data written to the buffer.
#NAME: path
#PARENT: Gio.UnixSocketAddress.new.SocketAddress
#COMMENT: the socket path
#NAME: job_func
#PARENT: Gio.io_scheduler_push_job.none
#COMMENT: a #GIOSchedulerJobFunc.
#NAME: get_is_any
#PARENT: Gio.InetAddress.get_is_any
#COMMENT: %TRUE if @address is the "any" address for its family.
#NAME: chain
#PARENT: Gio.TlsDatabaseClass.verify_chain_async.verify_chain_async.none
#COMMENT: a #GTlsCertificate chain
#NAME: get_inactivity_timeout
#PARENT: Gio.Application
#COMMENT: Gets the current inactivity timeout for the application.

This is the amount of time (in milliseconds) after the last call to
g_application_release() before the application stops running.
#NAME: to_native
#PARENT: Gio.SocketAddressClass.to_native.to_native
#COMMENT: %TRUE if @dest was filled in, %FALSE on error
#NAME: flags
#PARENT: Gio.AppInfo.create_from_commandline.AppInfo
#COMMENT: flags that can specify details of the created #GAppInfo
#NAME: connect_to_uri_finish
#PARENT: Gio.SocketClient.connect_to_uri_finish
#COMMENT: a #GSocketConnection on success, %NULL on error.
#NAME: g-flags
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Flags from the #GDBusInterfaceSkeletonFlags enumeration.
#NAME: make_directory_finish
#PARENT: Gio.File.make_directory_finish
#COMMENT: %TRUE on successful directory creation, %FALSE otherwise.
#NAME: interaction
#PARENT: Gio.TlsInteraction.request_certificate.TlsInteractionResult
#COMMENT: a #GTlsInteraction object
#NAME: mount_entry
#PARENT: Gio.unix_mount_guess_symbolic_icon.Icon
#COMMENT: a #GUnixMountEntry
#NAME: connection
#PARENT: Gio.DBusConnection.emit_signal.gboolean
#COMMENT: a #GDBusConnection
#NAME: cancellable
#PARENT: Gio.OutputStreamClass.close_async.close_async.none
#COMMENT: optional cancellable object
#NAME: callback
#PARENT: Gio.File.mount_enclosing_volume.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: get_etag
#PARENT: Gio.FileIOStream
#COMMENT: Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.
#NAME: SettingsBindFlags
#PARENT: Gio
#COMMENT: Flags used when creating a binding. These flags determine in which
direction the binding works. The default is to synchronize in both
directions.
#NAME: flags
#PARENT: Gio.DBusProxy.call_with_unix_fd_list.none
#COMMENT: Flags from the #GDBusCallFlags enumeration.
#NAME: remote
#PARENT: Gio.RemoteActionGroupInterface.activate_action_full.activate_action_full.none
#COMMENT: a #GDBusActionGroup
#NAME: moved_in
#PARENT: Gio.FileMonitorEvent
#COMMENT: the file was moved into the
  monitored directory from another location -- only sent if the
  %G_FILE_MONITOR_WATCH_MOVES flag is set.  Since: 2.44.
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.export.gboolean
#COMMENT: The D-Bus interface to export.
#NAME: get_local
#PARENT: Gio.Vfs.get_local
#COMMENT: a #GVfs.
#NAME: read_until
#PARENT: Gio.DataInputStream
#COMMENT: Reads a string from the data input stream, up to the first
occurrence of any of the stop characters.

Note that, in contrast to g_data_input_stream_read_until_async(),
this function consumes the stop character that it finds.

Don't use this function in new code.  Its functionality is
inconsistent with g_data_input_stream_read_until_async().  Both
functions will be marked as deprecated in a future release.  Use
g_data_input_stream_read_upto() instead, but note that that function
does not consume the stop character.
#NAME: ref
#PARENT: Gio.DBusPropertyInfo.ref
#COMMENT: The same @info.
#NAME: drive
#PARENT: Gio.Drive.start.none
#COMMENT: a #GDrive.
#NAME: other_address
#PARENT: Gio.InetAddress.equal.gboolean
#COMMENT: Another #GInetAddress.
#NAME: flags
#PARENT: Gio.Socket.send_messages.gint
#COMMENT: an int containing #GSocketMsgFlags flags
#NAME: mount
#PARENT: Gio.MountIface.eject.eject.none
#COMMENT: a #GMount.
#NAME: value
#PARENT: Gio.Settings.range_check.gboolean
#COMMENT: the value to check
#NAME: file
#PARENT: Gio.FileIface.open_readwrite_async.open_readwrite_async.none
#COMMENT: input #GFile
#NAME: stream
#PARENT: Gio.OutputStream.write_async.none
#COMMENT: A #GOutputStream.
#NAME: size
#PARENT: Gio.InputVector
#COMMENT: the available size in @buffer.
#NAME: default_port
#PARENT: Gio.SocketClient.connect_to_host_async.none
#COMMENT: the default port to connect to
#NAME: open_readwrite_async
#PARENT: Gio.File
#COMMENT: Asynchronously opens @file for reading and writing.

For more details, see g_file_open_readwrite() which is
the synchronous version of this call.

When the operation is finished, @callback will be called.
You can then call g_file_open_readwrite_finish() to get
the result of the operation.
#NAME: id
#PARENT: Gio.Application.send_notification.none
#COMMENT: id of the notification, or %NULL
#NAME: error
#PARENT: Gio.SubprocessLauncher.spawn.Subprocess
#COMMENT: Error
#NAME: UnixMountMonitor
#PARENT: Gio
#COMMENT: Watches #GUnixMounts for changes.
#NAME: file
#PARENT: Gio.FileIface.query_info_async.query_info_async.none
#COMMENT: input #GFile
#NAME: read_finish
#PARENT: Gio.InputStream.read_finish
#COMMENT: number of bytes read in, or -1 on error, or 0 on end of file.
#NAME: error
#PARENT: Gio.dbus_error_encode_gerror.utf8
#COMMENT: A #GError.
#NAME: resolver
#PARENT: Gio.Resolver.lookup_by_name.InetAddress
#COMMENT: a #GResolver
#NAME: mask
#PARENT: Gio.InetAddressMask.get_length.guint
#COMMENT: a #GInetAddressMask
#NAME: SeekableIface
#PARENT: Gio
#COMMENT: Provides an interface for implementing seekable functionality on I/O Streams.
#NAME: cancellable
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: a #GCancellable or %NULL
#NAME: callback
#PARENT: Gio.FileIface.mount_mountable.mount_mountable.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: format
#PARENT: Gio.OutputStream.vprintf.gboolean
#COMMENT: the format string. See the printf() documentation
#NAME: password
#PARENT: Gio.TlsInteraction.ask_password.TlsInteractionResult
#COMMENT: a #GTlsPassword object
#NAME: get_activation_root
#PARENT: Gio.Volume
#COMMENT: Gets the activation root for a #GVolume if it is known ahead of
mount time. Returns %NULL otherwise. If not %NULL and if @volume
is mounted, then the result of g_mount_get_root() on the
#GMount object obtained from g_volume_get_mount() will always
either be equal or a prefix of what this function returns. In
other words, in code

|[<!-- language="C" -->
  GMount *mount;
  GFile *mount_root
  GFile *volume_activation_root;

  mount = g_volume_get_mount (volume); // mounted, so never NULL
  mount_root = g_mount_get_root (mount);
  volume_activation_root = g_volume_get_activation_root (volume); // assume not NULL
]|
then the expression
|[<!-- language="C" -->
  (g_file_has_prefix (volume_activation_root, mount_root) ||
      g_file_equal (volume_activation_root, mount_root))
]|
will always be %TRUE.

Activation roots are typically used in #GVolumeMonitor
implementations to find the underlying mount to shadow, see
g_mount_is_shadowed() for more details.
#NAME: can_remove_supports_type
#PARENT: Gio.AppInfo.can_remove_supports_type
#COMMENT: %TRUE if it is possible to remove supported
    content types from a given @appinfo, %FALSE if not.
#NAME: cancellable
#PARENT: Gio.FileIface.make_directory_async.make_directory_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: query_info_finish
#PARENT: Gio.FileIOStream
#COMMENT: Finalizes the asynchronous query started
by g_file_io_stream_query_info_async().
#NAME: connectable
#PARENT: Gio.NetworkMonitorInterface.can_reach_async.can_reach_async.none
#COMMENT: a #GSocketConnectable
#NAME: connect_finish
#PARENT: Gio.Proxy.connect_finish
#COMMENT: a #GIOStream.
#NAME: address
#PARENT: Gio.ResolverClass.lookup_by_address_async.lookup_by_address_async.none
#COMMENT: the address to reverse-resolve
#NAME: client
#PARENT: Gio.SocketClient.add_application_proxy.none
#COMMENT: a #GSocketClient
#NAME: create_from_commandline
#PARENT: Gio.AppInfo
#COMMENT: Creates a new #GAppInfo from the given information.

Note that for @commandline, the quoting rules of the Exec key of the
[freedesktop.org Desktop Entry Specification](http://freedesktop.org/Standards/desktop-entry-spec)
are applied. For example, if the @commandline contains
percent-encoded URIs, the percent-character must be doubled in order to prevent it from
being swallowed by Exec key unquoting. See the specification for exact quoting rules.
#NAME: launch_action
#PARENT: Gio.DesktopAppInfo
#COMMENT: Activates the named application action.

You may only call this function on action names that were
returned from g_desktop_app_info_list_actions().

Note that if the main entry of the desktop file indicates that the
application supports startup notification, and @launch_context is
non-%NULL, then startup notification will be used when activating the
action (and as such, invocation of the action on the receiving side
must signal the end of startup notification when it is completed).
This is the expected behaviour of applications declaring additional
actions, as per the desktop file specification.

As with g_app_info_launch() there is no way to detect failures that
occur while using this function.
#NAME: set_error_if_cancelled
#PARENT: Gio.Cancellable
#COMMENT: If the @cancellable is cancelled, sets the error to notify
that the operation was cancelled.
#NAME: file
#PARENT: Gio.FileIface.get_path.get_path.utf8
#COMMENT: input #GFile
#NAME: attribute
#PARENT: Gio.MenuItem.set_attribute.none
#COMMENT: the attribute to set
#NAME: get_interaction
#PARENT: Gio.TlsConnection.get_interaction
#COMMENT: The interaction object.
#NAME: target_value
#PARENT: Gio.MenuItem.set_action_and_target_value.none
#COMMENT: a #GVariant to use as the action target
#NAME: SettingsBindGetMapping
#PARENT: Gio.SettingsBindGetMapping
#COMMENT: %TRUE if the conversion succeeded, %FALSE in case of an error
#NAME: SettingsBindSetMapping
#PARENT: Gio.SettingsBindSetMapping
#COMMENT: a new #GVariant holding the data from @value,
    or %NULL in case of an error
#NAME: mount_finish
#PARENT: Gio.Volume.mount_finish
#COMMENT: %TRUE, %FALSE if operation failed
#NAME: cancellable
#PARENT: Gio.FileInputStream.query_info_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: drive
#PARENT: Gio.DriveIface.poll_for_media_finish.poll_for_media_finish.gboolean
#COMMENT: a #GDrive.
#NAME: object_path
#PARENT: Gio.DBusObjectManager.get_interface.DBusInterface
#COMMENT: Object path to lookup.
#NAME: interaction
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle.lookup_certificate_for_handle.TlsCertificate
#COMMENT: used to interact with the user if necessary
#NAME: force_rescan
#PARENT: Gio.MountIface.guess_content_type_sync.guess_content_type_sync.utf8
#COMMENT: Whether to force a rescan of the content.
    Otherwise a cached result will be used if available
#NAME: unhandled
#PARENT: Gio.TlsInteractionResult
#COMMENT: The interaction was unhandled (i.e. not
    implemented).
#NAME: count
#PARENT: Gio.pollable_stream_write.gssize
#COMMENT: the number of bytes to write
#NAME: cancellable
#PARENT: Gio.FileOutputStream.query_info.FileInfo
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: unix_mount_guess_can_eject
#PARENT: Gio
#COMMENT: Guesses whether a Unix mount can be ejected.
#NAME: cancellable
#PARENT: Gio.PermissionClass.release_async.release_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: model
#PARENT: Gio.MenuModel.iterate_item_links.MenuLinkIter
#COMMENT: a #GMenuModel
#NAME: lookup_flags
#PARENT: Gio.resources_enumerate_children.utf8
#COMMENT: A #GResourceLookupFlags
#NAME: would_merge
#PARENT: Gio.IOErrorEnum
#COMMENT: Operation would merge files.
#NAME: get_recommended_for_type
#PARENT: Gio.AppInfo.get_recommended_for_type
#COMMENT: #GList of #GAppInfos
    for given @content_type or %NULL on error.
#NAME: value
#PARENT: Gio.File.set_attribute_uint64.gboolean
#COMMENT: a #guint64 containing the attribute's new value
#NAME: num_files
#PARENT: Gio.FileIface.measure_disk_usage.measure_disk_usage.gboolean
#COMMENT: the number of non-directories encountered
#NAME: cancellable
#PARENT: Gio.File.measure_disk_usage.gboolean
#COMMENT: optional #GCancellable
#NAME: size
#PARENT: Gio.OutputVector
#COMMENT: the size of @buffer.
#NAME: none
#PARENT: Gio.TlsCertificateRequestFlags
#COMMENT: No flags
#NAME: cancellable
#PARENT: Gio.Mount.unmount.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: schema_id
#PARENT: Gio.Settings.new_with_path.Settings
#COMMENT: the id of the schema
#NAME: action_map
#PARENT: Gio.ActionMap.lookup_action.Action
#COMMENT: a #GActionMap
#NAME: cancellable
#PARENT: Gio.DBusObjectManagerClient.new_sync.DBusObjectManagerClient
#COMMENT: A #GCancellable or %NULL
#NAME: file
#PARENT: Gio.File.replace_contents_bytes_async.none
#COMMENT: input #GFile
#NAME: object_path
#PARENT: Gio.DBusObjectManagerIface.get_interface.get_interface.DBusInterface
#COMMENT: Object path to lookup.
#NAME: create_from_commandline
#PARENT: Gio.AppInfo.create_from_commandline
#COMMENT: new #GAppInfo for given command.
#NAME: get_byte_order
#PARENT: Gio.DataInputStream
#COMMENT: Gets the byte order for the data input stream.
#NAME: content_type
#PARENT: Gio.AppInfo.get_recommended_for_type.AppInfo
#COMMENT: the content type to find a #GAppInfo for
#NAME: connection
#PARENT: Gio.DBusConnection.register_object.guint
#COMMENT: a #GDBusConnection
#NAME: parent_iface
#PARENT: Gio.DBusObjectIface
#COMMENT: The parent interface.
#NAME: stream
#PARENT: Gio.InputStream.skip.gssize
#COMMENT: a #GInputStream.
#NAME: attribute
#PARENT: Gio.FileInfo.set_attribute_int32.none
#COMMENT: a file attribute key.
#NAME: remote_peer_vanished
#PARENT: Gio.DBusConnection.closed.none
#COMMENT: %TRUE if @connection is closed because the
    remote peer closed its end of the connection
#NAME: FileOutputStream
#PARENT: Gio
#COMMENT: GFileOutputStream provides output streams that write their
content to a file.

GFileOutputStream implements #GSeekable, which allows the output
stream to jump to arbitrary positions in the file and to truncate
the file, provided the filesystem of the file supports these
operations.

To find the position of a file output stream, use g_seekable_tell().
To find out if a file output stream supports seeking, use
g_seekable_can_seek().To position a file output stream, use
g_seekable_seek(). To find out if a file output stream supports
truncating, use g_seekable_can_truncate(). To truncate a file output
stream, use g_seekable_truncate().
#NAME: new
#PARENT: Gio.DBusConnection
#COMMENT: Asynchronously sets up a D-Bus connection for exchanging D-Bus messages
with the end represented by @stream.

If @stream is a #GSocketConnection, then the corresponding #GSocket
will be put into non-blocking mode.

The D-Bus connection will interact with @stream from a worker thread.
As a result, the caller should not interact with @stream after this
method has been called, except by calling g_object_unref() on it.

If @observer is not %NULL it may be used to control the
authentication process.

When the operation is finished, @callback will be invoked. You can
then call g_dbus_connection_new_finish() to get the result of the
operation.

This is a asynchronous failable constructor. See
g_dbus_connection_new_sync() for the synchronous
version.
#NAME: get_parameter_type
#PARENT: Gio.Action
#COMMENT: Queries the type of the parameter that must be given when activating
@action.

When activating the action using g_action_activate(), the #GVariant
given to that function must be of the type returned by this function.

In the case that this function returns %NULL, you must not give any
#GVariant, but %NULL instead.
#NAME: drive
#PARENT: Gio.DriveIface.get_start_stop_type.get_start_stop_type.DriveStartStopType
#COMMENT: a #GDrive.
#NAME: first_property_name
#PARENT: Gio.Initable.new.GObject.Object
#COMMENT: the name of the first property, or %NULL if no
    properties
#NAME: get
#PARENT: Gio.UnixMountMonitor.get
#COMMENT: the #GUnixMountMonitor.
#NAME: get_method_info
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Gets information about the method call, if any.

If this method invocation is a property Get, Set or GetAll call that
has been redirected to the method call handler then %NULL will be
returned.  See g_dbus_method_invocation_get_property_info() and
#GDBusInterfaceVTable for more information.
#NAME: file
#PARENT: Gio.FileIface.get_uri.get_uri.utf8
#COMMENT: input #GFile
#NAME: flags
#PARENT: Gio.FileIface.create.create.FileOutputStream
#COMMENT: a set of #GFileCreateFlags
#NAME: error
#PARENT: Gio.simple_async_report_take_gerror_in_idle.none
#COMMENT: the #GError to report
#NAME: sender
#PARENT: Gio.DBusInterfaceSetPropertyFunc.gboolean
#COMMENT: The unique bus name of the remote caller.
#NAME: fd_list
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: a #GUnixFDList or %NULL
#NAME: remount_finish
#PARENT: Gio.MountIface.remount_finish.remount_finish
#COMMENT: %TRUE if the mount was successfully remounted. %FALSE otherwise.
#NAME: new
#PARENT: Gio.ProxyAddress.new
#COMMENT: a new #GProxyAddress
#NAME: attributes
#PARENT: Gio.File.enumerate_children_async.none
#COMMENT: an attribute query string
#NAME: user_data
#PARENT: Gio.IOSchedulerJob.send_to_mainloop_async.none
#COMMENT: data to pass to @func
#NAME: subscription_id
#PARENT: Gio.DBusConnection.signal_unsubscribe.none
#COMMENT: a subscription id obtained from
    g_dbus_connection_signal_subscribe()
#NAME: service
#PARENT: Gio.NetworkService.new.NetworkService
#COMMENT: the service type to look up (eg, "ldap")
#NAME: get_vtable
#PARENT: Gio.DBusInterfaceSkeletonClass.get_vtable.get_vtable
#COMMENT: A #GDBusInterfaceVTable (never %NULL).
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.get_action_state.get_action_state.GLib.Variant
#COMMENT: a #GActionGroup
#NAME: destination
#PARENT: Gio.File.copy.gboolean
#COMMENT: destination #GFile
#NAME: get_default
#PARENT: Gio.SettingsSchemaSource.get_default
#COMMENT: the default schema source
#NAME: handshake
#PARENT: Gio.TlsError
#COMMENT: The TLS handshake failed because the
  peer's certificate was not acceptable.
#NAME: type
#PARENT: Gio.content_type_get_generic_icon_name.utf8
#COMMENT: a content type string
#NAME: model
#PARENT: Gio.MenuModel.iterate_item_attributes.MenuAttributeIter
#COMMENT: a #GMenuModel
#NAME: get_name
#PARENT: Gio.ActionInterface.get_name.get_name
#COMMENT: the name of the action
#NAME: stop
#PARENT: Gio.DBusServer
#COMMENT: Stops @server.
#NAME: get_proxy_type_destroy_notify
#PARENT: Gio.DBusObjectManagerClient.new_sync.DBusObjectManagerClient
#COMMENT: Free function for @get_proxy_type_user_data or %NULL.
#NAME: stream
#PARENT: Gio.OutputStream.close_finish.gboolean
#COMMENT: a #GOutputStream.
#NAME: file
#PARENT: Gio.FileIface.start_mountable_finish.start_mountable_finish.gboolean
#COMMENT: input #GFile
#NAME: get_close_base_stream
#PARENT: Gio.FilterOutputStream.get_close_base_stream
#COMMENT: %TRUE if the base stream will be closed.
#NAME: create_readwrite
#PARENT: Gio.FileIface.create_readwrite.create_readwrite
#COMMENT: a #GFileIOStream for the newly created
    file, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: mount_operation
#PARENT: Gio.Drive.eject_with_operation.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: compressor
#PARENT: Gio.ZlibCompressor.set_file_info.none
#COMMENT: a #GZlibCompressor
#NAME: dispatch
#PARENT: Gio.DBusSubtreeVTable
#COMMENT: Function for dispatching a remote call on a child node.
#NAME: settings
#PARENT: Gio.Settings.create_action.Action
#COMMENT: a #GSettings
#NAME: get_resource
#PARENT: Gio.StaticResource
#COMMENT: Gets the GResource that was registered by a call to g_static_resource_init().

This is normally used by code generated by
[glib-compile-resources][glib-compile-resources]
and is not typically used by other code.
#NAME: drive
#PARENT: Gio.Drive.can_eject.gboolean
#COMMENT: a #GDrive.
#NAME: get_flags
#PARENT: Gio.DBusObjectManagerClient.get_flags
#COMMENT: Zero of more flags from the #GDBusObjectManagerClientFlags
enumeration.
#NAME: key
#PARENT: Gio.Settings.get_default_value.GLib.Variant
#COMMENT: the key to get the default value for
#NAME: handshake
#PARENT: Gio.TlsConnection.handshake
#COMMENT: success or failure
#NAME: menu
#PARENT: Gio.Menu.insert_item.none
#COMMENT: a #GMenu
#NAME: set_property
#PARENT: Gio.DBusInterfaceVTable
#COMMENT: Function for setting a property.
#NAME: object_path
#PARENT: Gio.DBusConnection.export_action_group.guint
#COMMENT: a D-Bus object path
#NAME: self
#PARENT: Gio.TlsDatabaseClass.create_certificate_handle.create_certificate_handle.utf8
#COMMENT: a #GTlsDatabase
#NAME: output_stream
#PARENT: Gio.SimpleIOStream.new.IOStream
#COMMENT: a #GOutputStream.
#NAME: appinfo
#PARENT: Gio.AppInfo.get_description.utf8
#COMMENT: a #GAppInfo.
#NAME: socket
#PARENT: Gio.SocketSourceFunc.gboolean
#COMMENT: the #GSocket
#NAME: get_name
#PARENT: Gio.Drive.get_name
#COMMENT: a string containing @drive's name. The returned
    string should be freed when no longer needed.
#NAME: socket
#PARENT: Gio.Socket.send_to.gssize
#COMMENT: a #GSocket
#NAME: result
#PARENT: Gio.InputStream.read_bytes_finish.GLib.Bytes
#COMMENT: a #GAsyncResult.
#NAME: query_info
#PARENT: Gio.File
#COMMENT: Gets the requested information about specified @file.
The result is a #GFileInfo object that contains key-value
attributes (such as the type or size of the file).

The @attributes value is a string that specifies the file
attributes that should be gathered. It is not an error if
it's not possible to read a particular requested attribute
from a file - it just won't be set. @attributes should be a
comma-separated list of attributes or attribute wildcards.
The wildcard "*" means all attributes, and a wildcard like
"standard::*" means all attributes in the standard namespace.
An example attribute query be "standard::*,owner::user".
The standard attributes are available as defines, like
#G_FILE_ATTRIBUTE_STANDARD_NAME.

If @cancellable is not %NULL, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
returned.

For symlinks, normally the information about the target of the
symlink is returned, rather than information about the symlink
itself. However if you pass #G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS
in @flags the information about the symlink itself will be returned.
Also, for symlinks that point to non-existing files the information
about the symlink itself will be returned.

If the file does not exist, the %G_IO_ERROR_NOT_FOUND error will be
returned. Other errors are possible too, and depend on what kind of
filesystem the file is on.
#NAME: cancellable
#PARENT: Gio.SocketClient.connect_to_service_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: DBusObjectManagerClientFlags
#PARENT: Gio
#COMMENT: Flags used when constructing a #GDBusObjectManagerClient.
#NAME: CredentialsClass
#PARENT: Gio
#COMMENT: Class structure for #GCredentials.
#NAME: type
#PARENT: Gio.content_type_get_description.utf8
#COMMENT: a content type string
#NAME: attributes
#PARENT: Gio.FileIface.query_info_async.query_info_async.none
#COMMENT: an attribute query string
#NAME: error
#PARENT: Gio.SimpleAsyncResult.new_from_error.SimpleAsyncResult
#COMMENT: a #GError
#NAME: key
#PARENT: Gio.Settings.get_string.utf8
#COMMENT: the key to get the value for
#NAME: get_identifier
#PARENT: Gio.Volume
#COMMENT: Gets the identifier of the given kind for @volume.
See the [introduction][volume-identifier] for more
information about volume identifiers.
#NAME: bus_name
#PARENT: Gio.DBusMenuModel.get.DBusMenuModel
#COMMENT: the bus name which exports the menu model
#NAME: set_pending
#PARENT: Gio.IOStream
#COMMENT: Sets @stream to have actions pending. If the pending flag is
already set or @stream is closed, it will return %FALSE and set
@error.
#NAME: PollableSourceFunc
#PARENT: Gio.PollableSourceFunc
#COMMENT: it should return %FALSE if the source should be removed.
#NAME: wait_check_async
#PARENT: Gio.Subprocess
#COMMENT: Combines g_subprocess_wait_async() with g_spawn_check_exit_status().

This is the asynchronous version of g_subprocess_wait_check().
#NAME: replace_readwrite_finish
#PARENT: Gio.File.replace_readwrite_finish
#COMMENT: a #GFileIOStream, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: flags
#PARENT: Gio.FileAttributeInfo
#COMMENT: a set of #GFileAttributeInfoFlags.
#NAME: send_to_mainloop_async
#PARENT: Gio.IOSchedulerJob
#COMMENT: Used from an I/O job to send a callback to be run asynchronously in
the thread that the job was started from. The callback will be run
when the main loop is available, but at that time the I/O job might
have finished. The return value from the callback is ignored.

Note that if you are passing the @user_data from g_io_scheduler_push_job()
on to this function you have to ensure that it is not freed before
@func is called, either by passing %NULL as @notify to
g_io_scheduler_push_job() or by using refcounting for @user_data.
#NAME: manager
#PARENT: Gio.DBusObjectManager.get_interface.DBusInterface
#COMMENT: A #GDBusObjectManager.
#NAME: info
#PARENT: Gio.FileInfo.get_etag.utf8
#COMMENT: a #GFileInfo.
#NAME: flags
#PARENT: Gio.DBusServer
#COMMENT: Flags from the #GDBusServerFlags enumeration.
#NAME: action
#PARENT: Gio.Action.get_state_type.GLib.VariantType
#COMMENT: a #GAction
#NAME: drive
#PARENT: Gio.DriveIface.get_sort_key.get_sort_key.utf8
#COMMENT: A #GDrive.
#NAME: socket
#PARENT: Gio.Socket.speaks_ipv4.gboolean
#COMMENT: a #GSocket
#NAME: release
#PARENT: Gio.Permission
#COMMENT: Attempts to release the permission represented by @permission.

The precise method by which this happens depends on the permission
and the underlying authentication mechanism.  In most cases the
permission will be dropped immediately without further action.

You should check with g_permission_get_can_release() before calling
this function.

If the permission is released then %TRUE is returned.  Otherwise,
%FALSE is returned and @error is set appropriately.

This call is blocking, likely for a very long time (in the case that
user interaction is required).  See g_permission_release_async() for
the non-blocking version.
#NAME: get_file_for_path
#PARENT: Gio.Vfs
#COMMENT: Gets a #GFile for @path.
#NAME: arg
#PARENT: Gio.file_new_for_commandline_arg_and_cwd.File
#COMMENT: a command line string
#NAME: get_remote_address
#PARENT: Gio.Socket.get_remote_address
#COMMENT: a #GSocketAddress or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: AsyncReadyCallback
#PARENT: Gio
#COMMENT: Type definition for a function that will be called back when an asynchronous
operation within GIO has been completed.
#NAME: settings
#PARENT: Gio.Settings.range_check.gboolean
#COMMENT: a #GSettings
#NAME: send_credentials_finish
#PARENT: Gio.UnixConnection
#COMMENT: Finishes an asynchronous send credentials operation started with
g_unix_connection_send_credentials_async().
#NAME: user_data
#PARENT: Gio.bus_own_name_on_connection.guint
#COMMENT: user data to pass to handlers
#NAME: key
#PARENT: Gio.Settings.create_action.Action
#COMMENT: the name of a key in @settings
#NAME: get_use_system_certdb
#PARENT: Gio.TlsConnection
#COMMENT: Gets whether @conn uses the system certificate database to verify
peer certificates. See g_tls_connection_set_use_system_certdb().
#NAME: query_info
#PARENT: Gio.FileInputStreamClass.query_info.query_info
#COMMENT: a #GFileInfo, or %NULL on error.
#NAME: cancellable
#PARENT: Gio.bus_get_sync.DBusConnection
#COMMENT: a #GCancellable or %NULL
#NAME: interface_name
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: D-Bus interface to invoke method on
#NAME: replace_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous file replace operation started with
g_file_replace_async().
#NAME: file
#PARENT: Gio.File.measure_disk_usage.gboolean
#COMMENT: a #GFile
#NAME: new
#PARENT: Gio.IOModule.new
#COMMENT: a #GIOModule from given @filename,
or %NULL on error.
#NAME: schema
#PARENT: Gio.SettingsSchema.has_key.gboolean
#COMMENT: a #GSettingsSchema
#NAME: flags
#PARENT: Gio.MountIface.remount.remount.none
#COMMENT: flags affecting the operation
#NAME: object
#PARENT: Gio.Settings.bind.none
#COMMENT: a #GObject
#NAME: launch_context
#PARENT: Gio.AppInfo.launch_uris.gboolean
#COMMENT: a #GAppLaunchContext or %NULL
#NAME: address
#PARENT: Gio.InetAddress.get_is_any.gboolean
#COMMENT: a #GInetAddress
#NAME: appinfo
#PARENT: Gio.AppInfo.can_delete.gboolean
#COMMENT: a #GAppInfo
#NAME: get_proxy_type_func
#PARENT: Gio.DBusObjectManagerClient.new_sync.DBusObjectManagerClient
#COMMENT: A #GDBusProxyTypeFunc function or %NULL to always construct #GDBusProxy proxies.
#NAME: new_sync
#PARENT: Gio.DBusProxy
#COMMENT: Creates a proxy for accessing @interface_name on the remote object
at @object_path owned by @name at @connection and synchronously
loads D-Bus properties unless the
%G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES flag is used.

If the %G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS flag is not set, also sets up
match rules for signals. Connect to the #GDBusProxy::g-signal signal
to handle signals from the remote object.

If @name is a well-known name and the
%G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START and %G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION
flags aren't set and no name owner currently exists, the message bus
will be requested to launch a name owner for the name.

This is a synchronous failable constructor. See g_dbus_proxy_new()
and g_dbus_proxy_new_finish() for the asynchronous version.

#GDBusProxy is used in this [example][gdbus-wellknown-proxy].
#NAME: name_acquired_closure
#PARENT: Gio.bus_own_name_on_connection_with_closures.guint
#COMMENT: #GClosure to invoke when @name is
    acquired or %NULL
#NAME: should_show
#PARENT: Gio.AppInfoIface.should_show.should_show
#COMMENT: %TRUE if the @appinfo should be shown, %FALSE otherwise.
#NAME: enabled
#PARENT: Gio.ActionGroup.action-enabled-changed.none
#COMMENT: whether the action is enabled or not
#NAME: manager
#PARENT: Gio.DBusObjectManager.get_objects.DBusObject
#COMMENT: A #GDBusObjectManager.
#NAME: receive_with_blocking
#PARENT: Gio.Socket
#COMMENT: This behaves exactly the same as g_socket_receive(), except that
the choice of blocking or non-blocking behavior is determined by
the @blocking argument rather than by @socket's properties.
#NAME: srv
#PARENT: Gio.NetworkService.set_scheme.none
#COMMENT: a #GNetworkService
#NAME: file
#PARENT: Gio.File.get_parent.File
#COMMENT: input #GFile
#NAME: read_int32
#PARENT: Gio.DataInputStream.read_int32
#COMMENT: a signed 32-bit/4-byte value read from the @stream or %0 if
an error occurred.
#NAME: seekable
#PARENT: Gio.Seekable.can_seek.gboolean
#COMMENT: a #GSeekable.
#NAME: result
#PARENT: Gio.Mount.guess_content_type_finish.utf8
#COMMENT: a #GAsyncResult
#NAME: local
#PARENT: Gio.NetworkConnectivity
#COMMENT: The host is not configured with a
  route to the Internet; it may or may not be connected to a local
  network.
#NAME: task
#PARENT: Gio.Task.set_return_on_cancel.gboolean
#COMMENT: the #GTask
#NAME: volume_monitor
#PARENT: Gio.VolumeMonitorClass.get_connected_drives.get_connected_drives.Drive
#COMMENT: a #GVolumeMonitor.
#NAME: application
#PARENT: Gio.Application.send_notification.none
#COMMENT: a #GApplication
#NAME: store
#PARENT: Gio.ListStore.remove_all.none
#COMMENT: a #GListStore
#NAME: unix_mounts_get
#PARENT: Gio
#COMMENT: Gets a #GList of #GUnixMountEntry containing the unix mounts.
If @time_read is set, it will be filled with the mount
timestamp, allowing for checking if the mounts have changed
with g_unix_mounts_changed_since().
#NAME: get_child
#PARENT: Gio.FileEnumerator
#COMMENT: Return a new #GFile which refers to the file named by @info in the source
directory of @enumerator.  This function is primarily intended to be used
inside loops with g_file_enumerator_next_file().

This is a convenience method that's equivalent to:
|[<!-- language="C" -->
  gchar *name = g_file_info_get_name (info);
  GFile *child = g_file_get_child (g_file_enumerator_get_container (enumr),
                                   name);
]|
#NAME: new
#PARENT: Gio.NetworkService
#COMMENT: Creates a new #GNetworkService representing the given @service,
@protocol, and @domain. This will initially be unresolved; use the
#GSocketConnectable interface to resolve it.
#NAME: password
#PARENT: Gio.TlsPasswordClass.get_value.get_value.guint8
#COMMENT: a #GTlsPassword object
#NAME: append
#PARENT: Gio.UnixFDList.append
#COMMENT: the index of the appended fd in case of success, else -1
         (and @error is set)
#NAME: has_parent
#PARENT: Gio.File.has_parent
#COMMENT: %TRUE if @file is a child of @parent (or any parent in the
         case that @parent is %NULL).
#NAME: use_fallback
#PARENT: Gio.CharsetConverter.set_use_fallback.none
#COMMENT: %TRUE to use fallbacks
#NAME: equal
#PARENT: Gio.InetAddress
#COMMENT: Checks if two #GInetAddress instances are equal, e.g. the same address.
#NAME: flags
#PARENT: Gio.DBusPropertyInfo
#COMMENT: Access control flags for the property.
#NAME: callback
#PARENT: Gio.FileIface.replace_async.replace_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: cancellable
#PARENT: Gio.File.set_attributes_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: application
#PARENT: Gio.Application.get_application_id.utf8
#COMMENT: a #GApplication
#NAME: get_hostname
#PARENT: Gio.NetworkAddress.get_hostname
#COMMENT: @addr's hostname
#NAME: callback
#PARENT: Gio.DBusConnection.flush.none
#COMMENT: a #GAsyncReadyCallback to call when the
    request is satisfied or %NULL if you don't care about the result
#NAME: monitor
#PARENT: Gio.FileMonitor.cancel.gboolean
#COMMENT: a #GFileMonitor.
#NAME: encode_gerror
#PARENT: Gio.DBusError
#COMMENT: Creates a D-Bus error name to use for @error. If @error matches
a registered error (cf. g_dbus_error_register_error()), the corresponding
D-Bus error name will be returned.

Otherwise the a name of the form
`org.gtk.GDBus.UnmappedGError.Quark._ESCAPED_QUARK_NAME.Code_ERROR_CODE`
will be used. This allows other GDBus applications to map the error
on the wire back to a #GError using g_dbus_error_new_for_dbus_error().

This function is typically only used in object mappings to put a
#GError on the wire. Regular applications should not use it.
#NAME: accept
#PARENT: Gio.SocketListener.accept
#COMMENT: a #GSocketConnection on success, %NULL on error.
#NAME: file
#PARENT: Gio.FileIface.query_settable_attributes.query_settable_attributes.FileAttributeInfoList
#COMMENT: input #GFile
#NAME: drive
#PARENT: Gio.Drive.start_finish.gboolean
#COMMENT: a #GDrive.
#NAME: cancellable
#PARENT: Gio.FileIface.delete_file.delete_file.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: cancellable
#PARENT: Gio.Socket.send_message.gssize
#COMMENT: a %GCancellable or %NULL
#NAME: SocketType
#PARENT: Gio
#COMMENT: Flags used when creating a #GSocket. Some protocols may not implement
all the socket types.
#NAME: res
#PARENT: Gio.FileIface.set_display_name_finish.set_display_name_finish.File
#COMMENT: a #GAsyncResult
#NAME: new_for_bus_sync
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Like g_dbus_object_manager_client_new_sync() but takes a #GBusType instead
of a #GDBusConnection.

This is a synchronous failable constructor - the calling thread is
blocked until a reply is received. See g_dbus_object_manager_client_new_for_bus()
for the asynchronous version.
#NAME: get_options_dict
#PARENT: Gio.ApplicationCommandLine.get_options_dict
#COMMENT: a #GVariantDict with the options
#NAME: attribute
#PARENT: Gio.File.set_attribute_int64.gboolean
#COMMENT: a string containing the attribute's name
#NAME: stream
#PARENT: Gio.InputStream.read_bytes_async.none
#COMMENT: A #GInputStream.
#NAME: cancellable
#PARENT: Gio.DriveIface.poll_for_media.poll_for_media.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: file
#PARENT: Gio.File.read_async.none
#COMMENT: input #GFile
#NAME: get_identifier
#PARENT: Gio.Drive
#COMMENT: Gets the identifier of the given kind for @drive.
#NAME: replace
#PARENT: Gio.FileIface.replace.replace
#COMMENT: a #GFileOutputStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: stream
#PARENT: Gio.OutputStreamClass.flush_finish.flush_finish.gboolean
#COMMENT: a #GOutputStream.
#NAME: stderr_buf
#PARENT: Gio.Subprocess.communicate_utf8_finish.gboolean
#COMMENT: Return location for stderr data
#NAME: peer_cert
#PARENT: Gio.TlsConnection.accept-certificate.gboolean
#COMMENT: the peer's #GTlsCertificate
#NAME: additions
#PARENT: Gio.ListStore.splice.none
#COMMENT: the items to add
#NAME: get_output_stream
#PARENT: Gio.IOStream
#COMMENT: Gets the output stream for this object. This is used for
writing.
#NAME: release_finish
#PARENT: Gio.Permission
#COMMENT: Collects the result of attempting to release the permission
represented by @permission.

This is the second half of the asynchronous version of
g_permission_release().
#NAME: cancellable
#PARENT: Gio.File.unmount_mountable_with_operation.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_executable
#PARENT: Gio.AppInfo.get_executable
#COMMENT: a string containing the @appinfo's application
binaries name
#NAME: flags
#PARENT: Gio.Drive.eject_with_operation.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: user_data
#PARENT: Gio.PermissionClass.release_async.release_async.none
#COMMENT: the user data to pass to @callback
#NAME: service
#PARENT: Gio.SocketService.stop.none
#COMMENT: a #GSocketService
#NAME: get_item_type
#PARENT: Gio.ListModelInterface.get_item_type.get_item_type
#COMMENT: the #GType of the items contained in @list.
#NAME: flags
#PARENT: Gio.File.append_to.FileOutputStream
#COMMENT: a set of #GFileCreateFlags
#NAME: replace_contents
#PARENT: Gio.File.replace_contents
#COMMENT: %TRUE if successful. If an error has occurred, this function
    will return %FALSE and set @error appropriately if present.
#NAME: cancellable
#PARENT: Gio.FileIOStream.query_info_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: new_finish
#PARENT: Gio.DBusProxy.new_finish
#COMMENT: A #GDBusProxy or %NULL if @error is set. Free with g_object_unref().
#NAME: flags
#PARENT: Gio.File.monitor_directory.FileMonitor
#COMMENT: a set of #GFileMonitorFlags
#NAME: callback_data
#PARENT: Gio.Task.report_new_error.none
#COMMENT: user data passed to @callback.
#NAME: key
#PARENT: Gio.Settings.get_range.GLib.Variant
#COMMENT: the key to query the range of
#NAME: flags
#PARENT: Gio.TlsInteractionClass.request_certificate_async.request_certificate_async.none
#COMMENT: flags providing more information about the request
#NAME: is_readonly
#PARENT: Gio.UnixMountPoint
#COMMENT: Checks if a unix mount point is read only.
#NAME: return_error_literal
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Like g_dbus_method_invocation_return_error() but without printf()-style formatting.

This method will free @invocation, you cannot use it afterwards.
#NAME: get_path
#PARENT: Gio.DBusMessage.get_path
#COMMENT: The value.
#NAME: converter_stream
#PARENT: Gio.ConverterOutputStream.get_converter.Converter
#COMMENT: a #GConverterOutputStream
#NAME: stream
#PARENT: Gio.PollableInputStream.create_source.GLib.Source
#COMMENT: a #GPollableInputStream.
#NAME: get_child_for_display_name
#PARENT: Gio.File
#COMMENT: Gets the child of @file for a given @display_name (i.e. a UTF-8
version of the name). If this function fails, it returns %NULL
and @error will be set. This is very useful when constructing a
#GFile for a new file and the user entered the filename in the
user interface, for instance when you select a directory and
type a filename in the file selector.

This call does no blocking I/O.
#NAME: connect_async
#PARENT: Gio.SocketClient
#COMMENT: This is the asynchronous version of g_socket_client_connect().

When the operation is finished @callback will be
called. You can then call g_socket_client_connect_finish() to get
the result of the operation.
#NAME: file_new_for_commandline_arg_and_cwd
#PARENT: Gio
#COMMENT: Creates a #GFile with the given argument from the command line.

This function is similar to g_file_new_for_commandline_arg() except
that it allows for passing the current working directory as an
argument instead of using the current working directory of the
process.

This is useful if the commandline argument was given in a context
other than the invocation of the current process.

See also g_application_command_line_create_file_for_arg().
#NAME: FILE_ATTRIBUTE_TIME_ACCESS
#PARENT: Gio
#COMMENT: A key in the "time" namespace for getting the time the file was last
accessed. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_UINT64, and contains the UNIX time since the
file was last accessed.
#NAME: limits_exceeded
#PARENT: Gio.DBusError
#COMMENT: Some limited resource is exhausted.
#NAME: new
#PARENT: Gio.ThemedIcon.new
#COMMENT: a new #GThemedIcon.
#NAME: cancellable
#PARENT: Gio.File.query_info_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: 
#PARENT: Gio.DBusMessage.new_method_error.DBusMessage...
#COMMENT: Arguments for @error_message_format.
#NAME: cancellable
#PARENT: Gio.ResolverClass.lookup_records.lookup_records.GLib.Variant
#COMMENT: a #GCancellable, or %NULL
#NAME: none
#PARENT: Gio.ResourceFlags
#COMMENT: No flags set.
#NAME: propagate_boolean
#PARENT: Gio.Task.propagate_boolean
#COMMENT: the task result, or %FALSE on error
#NAME: revoked
#PARENT: Gio.TlsCertificateFlags
#COMMENT: The certificate has been revoked
  according to the #GTlsConnection's certificate revocation list.
#NAME: cancellable
#PARENT: Gio.FileIface.mount_mountable.mount_mountable.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: unregister_subtree
#PARENT: Gio.DBusConnection.unregister_subtree
#COMMENT: %TRUE if the subtree was unregistered, %FALSE otherwise
#NAME: io_scheduler_cancel_all_jobs
#PARENT: Gio
#COMMENT: Cancels all cancellable I/O jobs.

A job is cancellable if a #GCancellable was passed into
g_io_scheduler_push_job().
#NAME: detailed_action
#PARENT: Gio.MenuItem.new.MenuItem
#COMMENT: the detailed action string, or %NULL
#NAME: value
#PARENT: Gio.DBusMessage.set_interface.none
#COMMENT: The value to set.
#NAME: get_file_info
#PARENT: Gio.ZlibCompressor.get_file_info
#COMMENT: a #GFileInfo, or %NULL
#NAME: read_nonblocking
#PARENT: Gio.PollableInputStream.read_nonblocking
#COMMENT: the number of bytes read, or -1 on error (including
  %G_IO_ERROR_WOULD_BLOCK).
#NAME: get_sort_key
#PARENT: Gio.Mount
#COMMENT: Gets the sort key for @mount, if any.
#NAME: monitor
#PARENT: Gio.File.monitor
#COMMENT: a #GFileMonitor for the given @file,
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: query_filesystem_info
#PARENT: Gio.FileIface.query_filesystem_info.query_filesystem_info
#COMMENT: a #GFileInfo or %NULL if there was an error.
    Free the returned object with g_object_unref().
#NAME: mount
#PARENT: Gio.Mount.can_eject.gboolean
#COMMENT: a #GMount.
#NAME: user_data
#PARENT: Gio.Mount.unmount.none
#COMMENT: user data passed to @callback.
#NAME: value
#PARENT: Gio.MenuAttributeIter.get_next.gboolean
#COMMENT: the attribute value
#NAME: cancellable
#PARENT: Gio.DBusObjectManagerClient.new.none
#COMMENT: A #GCancellable or %NULL
#NAME: notification
#PARENT: Gio.Notification.add_button.none
#COMMENT: a #GNotification
#NAME: user_data
#PARENT: Gio.InputStream.skip_async.none
#COMMENT: the data to pass to callback function
#NAME: base_stream
#PARENT: Gio.DataOutputStream.new.DataOutputStream
#COMMENT: a #GOutputStream.
#NAME: new
#PARENT: Gio.IOModule
#COMMENT: Creates a new GIOModule that will load the specific
shared library when in use.
#NAME: lookup_by_address_finish
#PARENT: Gio.Resolver.lookup_by_address_finish
#COMMENT: a hostname (either ASCII-only, or in ASCII-encoded
form), or %NULL on error.
#NAME: get_flags
#PARENT: Gio.Settings
#COMMENT: Gets the value that is stored in @settings for @key and converts it
to the flags value that it represents.

In order to use this function the type of the value must be an array
of strings and it must be marked in the schema file as an flags type.

It is a programmer error to give a @key that isn't contained in the
schema for @settings or is not marked as a flags type.

If the value stored in the configuration database is not a valid
value for the flags type then this function will return the default
value.
#NAME: get_all_for_type
#PARENT: Gio.AppInfo.get_all_for_type
#COMMENT: #GList of #GAppInfos
    for given @content_type or %NULL on error.
#NAME: send_message_with_reply_finish
#PARENT: Gio.DBusConnection
#COMMENT: Finishes an operation started with g_dbus_connection_send_message_with_reply().

Note that @error is only set if a local in-process error
occurred. That is to say that the returned #GDBusMessage object may
be of type %G_DBUS_MESSAGE_TYPE_ERROR. Use
g_dbus_message_to_gerror() to transcode this to a #GError.

See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
for an example of how to use this low-level API to send and receive
UNIX file descriptors.
#NAME: user_data_free_func
#PARENT: Gio.DBusConnection.signal_subscribe.guint
#COMMENT: function to free @user_data with when
    subscription is removed or %NULL
#NAME: user_data
#PARENT: Gio.Mount.eject_with_operation.none
#COMMENT: user data passed to @callback.
#NAME: new_from_string
#PARENT: Gio.InetAddressMask
#COMMENT: Parses @mask_string as an IP address and (optional) length, and
creates a new #GInetAddressMask. The length, if present, is
delimited by a "/". If it is not present, then the length is
assumed to be the full length of the address.
#NAME: self
#PARENT: Gio.TlsDatabaseClass.verify_chain.verify_chain.TlsCertificateFlags
#COMMENT: a #GTlsDatabase
#NAME: self
#PARENT: Gio.TlsDatabaseClass.verify_chain_async.verify_chain_async.none
#COMMENT: a #GTlsDatabase
#NAME: object_path
#PARENT: Gio.DBusObjectManagerClient.new_for_bus_sync.DBusObjectManagerClient
#COMMENT: The object path of the control object.
#NAME: dbus_error_message
#PARENT: Gio.DBusError.new_for_dbus_error.GLib.Error
#COMMENT: D-Bus error message.
#NAME: get
#PARENT: Gio.UnixFDList.get
#COMMENT: the file descriptor, or -1 in case of error
#NAME: get_action_name
#PARENT: Gio.DesktopAppInfo.get_action_name
#COMMENT: the locale-specific action name
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.change_action_state.change_action_state.none
#COMMENT: the name of the action to request the change on
#NAME: FILE_ATTRIBUTE_OWNER_GROUP
#PARENT: Gio
#COMMENT: A key in the "owner" namespace for getting the file owner's group.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: new
#PARENT: Gio.MountOperation
#COMMENT: Creates a new mount operation.
#NAME: op
#PARENT: Gio.MountOperation.set_username.none
#COMMENT: a #GMountOperation.
#NAME: certificate
#PARENT: Gio.TlsDatabaseClass.create_certificate_handle.create_certificate_handle.utf8
#COMMENT: certificate for which to create a handle.
#NAME: drive
#PARENT: Gio.DriveIface.start_finish.start_finish.gboolean
#COMMENT: a #GDrive.
#NAME: io_priority
#PARENT: Gio.FileIface.append_to_async.append_to_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: commandline
#PARENT: Gio.app_info_create_from_commandline.AppInfo
#COMMENT: the commandline to use
#NAME: path
#PARENT: Gio.Resource.enumerate_children.utf8
#COMMENT: A pathname inside the resource
#NAME: g_iface
#PARENT: Gio.TlsFileDatabaseInterface
#COMMENT: The parent interface.
#NAME: dbus_error_name
#PARENT: Gio.dbus_error_new_for_dbus_error.GLib.Error
#COMMENT: D-Bus error name.
#NAME: callback
#PARENT: Gio.OutputStreamClass.flush_async.flush_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: set_string
#PARENT: Gio.Settings.set_string
#COMMENT: %TRUE if setting the key succeeded,
    %FALSE if the key was not writable
#NAME: propagate_error
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Propagates an error from within the simple asynchronous result to
a given destination.

If the #GCancellable given to a prior call to
g_simple_async_result_set_check_cancellable() is cancelled then this
function will return %TRUE with @dest set appropriately.
#NAME: flags
#PARENT: Gio.Converter.convert.ConverterResult
#COMMENT: a #GConverterFlags controlling the conversion details
#NAME: attribute
#PARENT: Gio.MenuItem.get_attribute_value.GLib.Variant
#COMMENT: the attribute name to query
#NAME: get_description
#PARENT: Gio.AppInfo.get_description
#COMMENT: a string containing a description of the
application @appinfo, or %NULL if none.
#NAME: interface_name
#PARENT: Gio.DBusProxy.new_sync.DBusProxy
#COMMENT: A D-Bus interface name.
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.get_flags.DBusInterfaceSkeletonFlags
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: object_path
#PARENT: Gio.DBusObjectManager.get_object.DBusObject
#COMMENT: Object path to lookup.
#NAME: state_hint
#PARENT: Gio.SimpleAction.set_state_hint.none
#COMMENT: a #GVariant representing the state hint
#NAME: callback
#PARENT: Gio.SimpleAsyncResult.new_from_error.SimpleAsyncResult
#COMMENT: a #GAsyncReadyCallback.
#NAME: get_task_data
#PARENT: Gio.Task.get_task_data
#COMMENT: @task's `task_data`.
#NAME: user_data
#PARENT: Gio.File.make_directory_async.none
#COMMENT: the data to pass to callback function
#NAME: set_multicast_loopback
#PARENT: Gio.Socket
#COMMENT: Sets whether outgoing multicast packets will be received by sockets
listening on that multicast address on the same host. This is %TRUE
by default.
#NAME: job
#PARENT: Gio.IOSchedulerJobFunc.gboolean
#COMMENT: a #GIOSchedulerJob.
#NAME: settings
#PARENT: Gio.Settings.get_user_value.GLib.Variant
#COMMENT: a #GSettings object
#NAME: cancellable
#PARENT: Gio.AsyncInitable.new_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: eject_with_operation_finish
#PARENT: Gio.Drive.eject_with_operation_finish
#COMMENT: %TRUE if the drive was successfully ejected. %FALSE otherwise.
#NAME: mount_mountable_finish
#PARENT: Gio.File.mount_mountable_finish
#COMMENT: a #GFile or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: connection
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: a #GDBusConnection
#NAME: get_path
#PARENT: Gio.File.get_path
#COMMENT: string containing the #GFile's path, or %NULL
    if no such path exists. The returned string should be freed
    with g_free() when no longer needed.
#NAME: lookup_interface
#PARENT: Gio.DBusNodeInfo
#COMMENT: Looks up information about an interface.

The cost of this function is O(n) in number of interfaces.
#NAME: cancellable
#PARENT: Gio.UnixConnection.send_credentials.gboolean
#COMMENT: A #GCancellable or %NULL.
#NAME: cancellable
#PARENT: Gio.FileEnumeratorClass.next_file.next_file.FileInfo
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: annotations
#PARENT: Gio.DBusArgInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
#NAME: base-io-stream
#PARENT: Gio.TlsConnection
#COMMENT: The #GIOStream that the connection wraps
#NAME: value
#PARENT: Gio.RemoteActionGroupInterface.change_action_state_full.change_action_state_full.none
#COMMENT: the new requested value for the state
#NAME: to_native
#PARENT: Gio.SocketAddress
#COMMENT: Converts a #GSocketAddress to a native struct sockaddr, which can
be passed to low-level functions like connect() or bind().

If not enough space is available, a %G_IO_ERROR_NO_SPACE error
is returned. If the address type is not known on the system
then a %G_IO_ERROR_NOT_SUPPORTED error is returned.
#NAME: flags
#PARENT: Gio.bus_own_name_with_closures.guint
#COMMENT: a set of flags from the #GBusNameOwnerFlags enumeration
#NAME: prefix_matches
#PARENT: Gio.File.prefix_matches
#COMMENT: %TRUE if the @files's parent, grandparent, etc is @prefix,
    %FALSE otherwise.
#NAME: get_fd
#PARENT: Gio.UnixInputStream.get_fd
#COMMENT: The file descriptor of @stream
#NAME: close_fd
#PARENT: Gio.UnixOutputStream.set_close_fd.none
#COMMENT: %TRUE to close the file descriptor when done
#NAME: format
#PARENT: Gio.DBusError.set_dbus_error.none
#COMMENT: printf()-style format to prepend to @dbus_error_message or %NULL.
#NAME: g_iface
#PARENT: Gio.SeekableIface
#COMMENT: The parent interface.
#NAME: dest_info
#PARENT: Gio.FileInfo.copy_into.none
#COMMENT: destination to copy attributes to.
#NAME: cancellable
#PARENT: Gio.DataOutputStream.put_uint64.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: address
#PARENT: Gio.InetAddressClass.to_string.to_string.utf8
#COMMENT: a #GInetAddress
#NAME: unref
#PARENT: Gio.Resource
#COMMENT: Atomically decrements the reference count of @resource by one. If the
reference count drops to 0, all memory allocated by the array is
released. This function is MT-safe and may be called from any
thread.
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_uint16.guint16
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: callback
#PARENT: Gio.SocketAddressEnumerator.next_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request
    is satisfied
#NAME: manager
#PARENT: Gio.DBusObjectManagerServer.get_connection.DBusConnection
#COMMENT: A #GDBusObjectManagerServer
#NAME: source_object
#PARENT: Gio.SimpleAsyncResult.new_error.SimpleAsyncResult
#COMMENT: a #GObject, or %NULL.
#NAME: cancellable
#PARENT: Gio.FileIface.set_attributes_from_info.set_attributes_from_info.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: self
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by_finish.lookup_certificates_issued_by_finish.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: menu_item
#PARENT: Gio.MenuItem.set_icon.none
#COMMENT: a #GMenuItem
#NAME: callback
#PARENT: Gio.File.create_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: callback
#PARENT: Gio.FileIface.create_readwrite_async.create_readwrite_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: result
#PARENT: Gio.MountOperationClass.reply.reply.none
#COMMENT: a #GMountOperationResult
#NAME: count
#PARENT: Gio.OutputStreamClass.write_async.write_async.none
#COMMENT: the number of bytes to write
#NAME: TlsInteraction
#PARENT: Gio
#COMMENT: #GTlsInteraction provides a mechanism for the TLS connection and database
code to interact with the user. It can be used to ask the user for passwords.

To use a #GTlsInteraction with a TLS connection use
g_tls_connection_set_interaction().

Callers should instantiate a derived class that implements the various
interaction methods to show the required dialogs.

Callers should use the 'invoke' functions like
g_tls_interaction_invoke_ask_password() to run interaction methods. These
functions make sure that the interaction is invoked in the main loop
and not in the current thread, if the current thread is not running the
main loop.

Derived classes can choose to implement whichever interactions methods they'd
like to support by overriding those virtual methods in their class
initialization function. Any interactions not implemented will return
%G_TLS_INTERACTION_UNHANDLED. If a derived class implements an async method,
it must also implement the corresponding finish method.
#NAME: volume
#PARENT: Gio.VolumeIface.get_mount.get_mount.Mount
#COMMENT: a #GVolume
#NAME: dirs_only
#PARENT: Gio.FilenameCompleter.set_dirs_only.none
#COMMENT: a #gboolean.
#NAME: client
#PARENT: Gio.SocketClient.set_proxy_resolver.none
#COMMENT: a #GSocketClient.
#NAME: cancellable
#PARENT: Gio.TlsInteraction.ask_password_async.none
#COMMENT: an optional #GCancellable cancellation object
#NAME: connection
#PARENT: Gio.DBusConnection.set_exit_on_close.none
#COMMENT: a #GDBusConnection
#NAME: info
#PARENT: Gio.FileIface.set_attributes_async.set_attributes_async.none
#COMMENT: a #GFileInfo
#NAME: supertype
#PARENT: Gio.content_type_is_a.gboolean
#COMMENT: a content type string
#NAME: action_name
#PARENT: Gio.ActionGroup.activate_action.none
#COMMENT: the name of the action to activate
#NAME: mount
#PARENT: Gio.MountIface.unmount_with_operation.unmount_with_operation.none
#COMMENT: a #GMount.
#NAME: newv
#PARENT: Gio.Initable.newv
#COMMENT: a newly allocated
     #GObject, or %NULL on error
#NAME: unix_mounts_changed_since
#PARENT: Gio.unix_mounts_changed_since
#COMMENT: %TRUE if the mounts have changed since @time.
#NAME: subprocess
#PARENT: Gio.Subprocess.communicate_utf8.gboolean
#COMMENT: a #GSubprocess
#NAME: handle
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle_async.none
#COMMENT: a certificate handle
#NAME: label
#PARENT: Gio.Menu.prepend_submenu.none
#COMMENT: the section label, or %NULL
#NAME: owner_id
#PARENT: Gio.bus_unown_name.none
#COMMENT: an identifier obtained from g_bus_own_name()
#NAME: permission
#PARENT: Gio.Permission.acquire_finish.gboolean
#COMMENT: a #GPermission instance
#NAME: file
#PARENT: Gio.File.replace_contents_finish.gboolean
#COMMENT: input #GFile
#NAME: destination
#PARENT: Gio.DBusMessageHeaderField
#COMMENT: The name the message is intended for.
#NAME: cancellable
#PARENT: Gio.FileIface.move.move.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: connect_finish
#PARENT: Gio.SocketConnection.connect_finish
#COMMENT: %TRUE if the connection succeeded, %FALSE on error
#NAME: path
#PARENT: Gio.VfsClass.get_file_for_path.get_file_for_path.File
#COMMENT: a string containing a VFS path.
#NAME: subprocess
#PARENT: Gio.Subprocess.wait_check_async.none
#COMMENT: a #GSubprocess
#NAME: callback
#PARENT: Gio.InputStream.skip_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: message
#PARENT: Gio.DBusMessage.set_interface.none
#COMMENT: A #GDBusMessage.
#NAME: udp
#PARENT: Gio.SocketProtocol
#COMMENT: UDP over IP
#NAME: none
#PARENT: Gio.OutputStreamSpliceFlags
#COMMENT: Do not close either stream.
#NAME: self
#PARENT: Gio.SubprocessLauncher.take_stdout_fd.none
#COMMENT: a #GSubprocessLauncher
#NAME: path
#PARENT: Gio.SubprocessLauncher.set_stderr_file_path.none
#COMMENT: a filename or %NULL
#NAME: BytesIcon
#PARENT: Gio
#COMMENT: #GBytesIcon specifies an image held in memory in a common format (usually
png) to be used as icon.
#NAME: is_supported
#PARENT: Gio.ProxyResolverInterface.is_supported.is_supported
#COMMENT: %TRUE if @resolver is supported.
#NAME: set_string
#PARENT: Gio.Settings
#COMMENT: Sets @key in @settings to @value.

A convenience variant of g_settings_set() for strings.

It is a programmer error to give a @key that isn't specified as
having a string type in the schema for @settings.
#NAME: cancel
#PARENT: Gio.Cancellable
#COMMENT: Will set @cancellable to cancelled, and will emit the
#GCancellable::cancelled signal. (However, see the warning about
race conditions in the documentation for that signal if you are
planning to connect to it.)

This function is thread-safe. In other words, you can safely call
it from a thread other than the one running the operation that was
passed the @cancellable.

If @cancellable is %NULL, this function returns immediately for convenience.

The convention within GIO is that cancelling an asynchronous
operation causes it to complete asynchronously. That is, if you
cancel the operation from the same thread in which it is running,
then the operation's #GAsyncReadyCallback will not be invoked until
the application returns to the main loop.
#NAME: get_sort_key
#PARENT: Gio.DriveIface.get_sort_key.get_sort_key
#COMMENT: Sorting key for @drive or %NULL if no such key is available.
#NAME: FILE_ATTRIBUTE_ID_FILESYSTEM
#PARENT: Gio
#COMMENT: A key in the "id" namespace for getting the file system identifier.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
An example use would be during drag and drop to see if the source
and target are on the same filesystem (default to move) or not (default
to copy).
#NAME: num_control_messages
#PARENT: Gio.OutputMessage
#COMMENT: number of elements in @control_messages.
#NAME: set_backlog
#PARENT: Gio.SocketListener
#COMMENT: Sets the listen backlog on the sockets in the listener.

See g_socket_set_listen_backlog() for details
#NAME: file
#PARENT: Gio.File.append_to_async.none
#COMMENT: input #GFile
#NAME: close
#PARENT: Gio.OutputStream.close
#COMMENT: %TRUE on success, %FALSE on failure
#NAME: info
#PARENT: Gio.FileInfo.list_attributes.utf8
#COMMENT: a #GFileInfo.
#NAME: set_attribute
#PARENT: Gio.File.set_attribute
#COMMENT: %TRUE if the attribute was set, %FALSE otherwise.
#NAME: get_bus_address
#PARENT: Gio.TestDBus
#COMMENT: Get the address on which dbus-daemon is running. If g_test_dbus_up() has not
been called yet, %NULL is returned. This can be used with
g_dbus_connection_new_for_address().
#NAME: iconname
#PARENT: Gio.ThemedIcon.new_with_default_fallbacks.ThemedIcon
#COMMENT: a string containing an icon name
#NAME: targets
#PARENT: Gio.Resolver.free_targets.none
#COMMENT: a #GList of #GSrvTarget
#NAME: cancellable
#PARENT: Gio.Resolver.lookup_by_name.InetAddress
#COMMENT: a #GCancellable, or %NULL
#NAME: resolver
#PARENT: Gio.SimpleProxyResolver.set_uri_proxy.none
#COMMENT: a #GSimpleProxyResolver
#NAME: get_default_database
#PARENT: Gio.TlsBackend.get_default_database
#COMMENT: the default database, which should be
              unreffed when done.
#NAME: create_source
#PARENT: Gio.PollableOutputStream.create_source
#COMMENT: a new #GSource
#NAME: socket
#PARENT: Gio.Socket.condition_wait.gboolean
#COMMENT: a #GSocket
#NAME: get_parameters
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Gets the parameters of the method invocation. If there are no input
parameters then this will return a GVariant with 0 children rather than NULL.
#NAME: cancellable
#PARENT: Gio.File.read.FileInputStream
#COMMENT: a #GCancellable
#NAME: detailed_action
#PARENT: Gio.MenuItem.set_detailed_action.none
#COMMENT: the "detailed" action string
#NAME: never
#PARENT: Gio.FilesystemPreviewType
#COMMENT: Never preview files.
#NAME: get_sort_key
#PARENT: Gio.Drive
#COMMENT: Gets the sort key for @drive, if any.
#NAME: requested
#PARENT: Gio.TlsAuthenticationMode
#COMMENT: client authentication is requested
#NAME: set_check_cancellable
#PARENT: Gio.Task
#COMMENT: Sets or clears @task's check-cancellable flag. If this is %TRUE
(the default), then g_task_propagate_pointer(), etc, and
g_task_had_error() will check the task's #GCancellable first, and
if it has been cancelled, then they will consider the task to have
returned an "Operation was cancelled" error
(%G_IO_ERROR_CANCELLED), regardless of any other error or return
value the task may have had.

If @check_cancellable is %FALSE, then the #GTask will not check the
cancellable itself, and it is up to @task's owner to do this (eg,
via g_task_return_error_if_cancelled()).

If you are using g_task_set_return_on_cancel() as well, then
you must leave check-cancellable set %TRUE.
#NAME: buffer
#PARENT: Gio.Socket.send_to.gssize
#COMMENT: the buffer
    containing the data to send.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.do_delete.do_delete.gboolean
#COMMENT: a #GAppInfo
#NAME: get_volume
#PARENT: Gio.MountIface.get_volume.get_volume
#COMMENT: a #GVolume or %NULL if @mount is not associated with a volume.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: mount
#PARENT: Gio.Mount.guess_content_type.none
#COMMENT: a #GMount
#NAME: domain
#PARENT: Gio.DBusMethodInvocation.return_error.none
#COMMENT: A #GQuark for the #GError error domain.
#NAME: dbus_is_supported_address
#PARENT: Gio.dbus_is_supported_address
#COMMENT: %TRUE if @string is a valid D-Bus address that is
supported by this library, %FALSE if @error is set.
#NAME: uri_scheme
#PARENT: Gio.File.has_uri_scheme.gboolean
#COMMENT: a string containing a URI scheme
#NAME: object_path
#PARENT: Gio.DBusConnection.emit_signal.gboolean
#COMMENT: path of remote object
#NAME: content_type_get_description
#PARENT: Gio
#COMMENT: Gets the human readable description of the content type.
#NAME: action_map
#PARENT: Gio.ActionMapInterface.add_action.add_action.none
#COMMENT: a #GActionMap
#NAME: new
#PARENT: Gio.Menu.new
#COMMENT: a new #GMenu
#NAME: uri_scheme
#PARENT: Gio.FileIface.has_uri_scheme.has_uri_scheme.gboolean
#COMMENT: a string containing a URI scheme
#NAME: FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for getting the HAL UDI for the mountable
file. Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: measure_disk_usage_finish
#PARENT: Gio.FileIface.measure_disk_usage_finish.measure_disk_usage_finish
#COMMENT: %TRUE if successful, with the out parameters set.
         %FALSE otherwise, with @error set.
#NAME: verify_chain
#PARENT: Gio.TlsDatabaseClass.verify_chain.verify_chain
#COMMENT: the appropriate #GTlsCertificateFlags which represents the
result of verification.
#NAME: IOModuleScope
#PARENT: Gio
#COMMENT: Represents a scope for loading IO modules. A scope can be used for blocking
duplicate modules, or blocking a module you don't want to load.

The scope can be used with g_io_modules_load_all_in_directory_with_scope()
or g_io_modules_scan_all_in_directory_with_scope().
#NAME: FILE_ATTRIBUTE_FILESYSTEM_READONLY
#PARENT: Gio
#COMMENT: A key in the "filesystem" namespace for checking if the file system
is read only. Is set to %TRUE if the file system is read only.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: info
#PARENT: Gio.DesktopAppInfo.get_nodisplay.gboolean
#COMMENT: a #GDesktopAppInfo
#NAME: flags
#PARENT: Gio.FileIface.move.move.gboolean
#COMMENT: set of #GFileCopyFlags
#NAME: file_new_tmp
#PARENT: Gio
#COMMENT: Opens a file in the preferred directory for temporary files (as
returned by g_get_tmp_dir()) and returns a #GFile and
#GFileIOStream pointing to it.

@tmpl should be a string in the GLib file name encoding
containing a sequence of six 'X' characters, and containing no
directory components. If it is %NULL, a default template is used.

Unlike the other #GFile constructors, this will return %NULL if
a temporary file could not be created.
#NAME: app_info_get_fallback_for_type
#PARENT: Gio
#COMMENT: Gets a list of fallback #GAppInfos for a given content type, i.e.
those applications which claim to support the given content type
by MIME type subclassing and not directly.
#NAME: res
#PARENT: Gio.File.enumerate_children_finish.FileEnumerator
#COMMENT: a #GAsyncResult
#NAME: cancellable
#PARENT: Gio.SocketListener.accept_socket_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: file
#PARENT: Gio.File.load_contents.gboolean
#COMMENT: input #GFile
#NAME: invalid_argument
#PARENT: Gio.IOErrorEnum
#COMMENT: Invalid argument.
#NAME: get_converter
#PARENT: Gio.ConverterOutputStream.get_converter
#COMMENT: the converter of the converter output stream
#NAME: load
#PARENT: Gio.LoadableIconIface.load.load
#COMMENT: a #GInputStream to read the icon from.
#NAME: condition
#PARENT: Gio.SocketSourceFunc.gboolean
#COMMENT: the current condition at the source fired.
#NAME: session
#PARENT: Gio.BusType
#COMMENT: The login session message bus.
#NAME: ref_count
#PARENT: Gio.DBusNodeInfo
#COMMENT: The reference count or -1 if statically allocated.
#NAME: fd_list
#PARENT: Gio.UnixFDMessage.new_with_fd_list.SocketControlMessage
#COMMENT: a #GUnixFDList
#NAME: enumerate_children
#PARENT: Gio.File.enumerate_children
#COMMENT: A #GFileEnumerator if successful,
    %NULL on error. Free the returned object with g_object_unref().
#NAME: close_fd
#PARENT: Gio.UnixOutputStream.new.OutputStream
#COMMENT: %TRUE to close the file descriptor when done
#NAME: free
#PARENT: Gio.IOModuleScope
#COMMENT: Free a module scope.
#NAME: application
#PARENT: Gio.Application.set_default.none
#COMMENT: the application to set as default, or %NULL
#NAME: get_item_attributes
#PARENT: Gio.MenuModel
#COMMENT: Gets all the attributes associated with the item in the menu model.
#NAME: DBusObjectManagerIface
#PARENT: Gio
#COMMENT: Base type for D-Bus object managers.
#NAME: cancellable
#PARENT: Gio.MountIface.remount.remount.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: bus_type
#PARENT: Gio.bus_own_name_with_closures.guint
#COMMENT: the type of bus to own a name on
#NAME: flags
#PARENT: Gio.File.start_mountable.none
#COMMENT: flags affecting the operation
#NAME: message
#PARENT: Gio.DBusMessage.get_locked.gboolean
#COMMENT: A #GDBusMessage.
#NAME: user_data
#PARENT: Gio.AsyncInitable.new_valist_async.none
#COMMENT: the data to pass to callback function
#NAME: count
#PARENT: Gio.OutputStream.write_async.none
#COMMENT: the number of bytes to write
#NAME: lookup
#PARENT: Gio.SettingsSchemaSource.lookup
#COMMENT: a new #GSettingsSchema
#NAME: get_flags
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Gets the flags that @manager was constructed with.
#NAME: record_type
#PARENT: Gio.Resolver.lookup_records_async.none
#COMMENT: the type of DNS record to lookup
#NAME: unref
#PARENT: Gio.SettingsSchemaKey
#COMMENT: Decrease the reference count of @key, possibly freeing it.
#NAME: permission
#PARENT: Gio.PermissionClass.release.release.gboolean
#COMMENT: a #GPermission instance
#NAME: resource
#PARENT: Gio.Resource._register.none
#COMMENT: A #GResource
#NAME: stream
#PARENT: Gio.BufferedInputStream.fill_async.none
#COMMENT: a #GBufferedInputStream
#NAME: ref
#PARENT: Gio.FileAttributeMatcher
#COMMENT: References a file attribute matcher.
#NAME: result
#PARENT: Gio.MountIface.remount_finish.remount_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: key
#PARENT: Gio.SettingsSchemaKey.get_value_type.GLib.VariantType
#COMMENT: a #GSettingsSchemaKey
#NAME: interface_proxy
#PARENT: Gio.DBusObjectManagerClient.interface-proxy-properties-changed.none
#COMMENT: The #GDBusProxy that has properties that are changing.
#NAME: lookup_records_finish
#PARENT: Gio.Resolver
#COMMENT: Retrieves the result of a previous call to
g_resolver_lookup_records_async(). Returns a non-empty list of records as
#GVariant tuples. See #GResolverRecordType for information on what the
records contain.

If the DNS resolution failed, @error (if non-%NULL) will be set to
a value from #GResolverError. If the operation was cancelled,
@error will be set to %G_IO_ERROR_CANCELLED.
#NAME: user_data
#PARENT: Gio.DBusInterfaceMethodCallFunc.none
#COMMENT: The @user_data #gpointer passed to g_dbus_connection_register_object().
#NAME: type
#PARENT: Gio.IOExtensionPoint.set_required_type.none
#COMMENT: the #GType to require
#NAME: mount
#PARENT: Gio.Mount.remount_finish.gboolean
#COMMENT: a #GMount.
#NAME: get_message_type
#PARENT: Gio.DBusMessage
#COMMENT: Gets the type of @message.
#NAME: must_support_uris
#PARENT: Gio.AppInfo.get_default_for_type.AppInfo
#COMMENT: if %TRUE, the #GAppInfo is expected to
    support URIs
#NAME: user_data
#PARENT: Gio.File.eject_mountable.none
#COMMENT: the data to pass to callback function
#NAME: get_converter
#PARENT: Gio.ConverterInputStream
#COMMENT: Gets the #GConverter that is used by @converter_stream.
#NAME: timeout_msec
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: The timeout in milliseconds (with %G_MAXINT meaning
               "infinite") or -1 to use the proxy default timeout.
#NAME: op
#PARENT: Gio.MountOperationClass.reply.reply.none
#COMMENT: a #GMountOperation
#NAME: get_sort_key
#PARENT: Gio.Volume
#COMMENT: Gets the sort key for @volume, if any.
#NAME: resolver_error_quark
#PARENT: Gio
#COMMENT: Gets the #GResolver Error Quark.
#NAME: get_use_fallback
#PARENT: Gio.CharsetConverter.get_use_fallback
#COMMENT: %TRUE if fallbacks are used by @converter
#NAME: set_tls
#PARENT: Gio.SocketClient
#COMMENT: Sets whether @client creates TLS (aka SSL) connections. If @tls is
%TRUE, @client will wrap its connections in a #GTlsClientConnection
and perform a TLS handshake when connecting.

Note that since #GSocketClient must return a #GSocketConnection,
but #GTlsClientConnection is not a #GSocketConnection, this
actually wraps the resulting #GTlsClientConnection in a
#GTcpWrapperConnection when returning it. You can use
g_tcp_wrapper_connection_get_base_io_stream() on the return value
to extract the #GTlsClientConnection.

If you need to modify the behavior of the TLS handshake (eg, by
setting a client-side certificate to use, or connecting to the
#GTlsConnection::accept-certificate signal), you can connect to
@client's #GSocketClient::event signal and wait for it to be
emitted with %G_SOCKET_CLIENT_TLS_HANDSHAKING, which will give you
a chance to see the #GTlsClientConnection before the handshake
starts.
#NAME: cancellable
#PARENT: Gio.VolumeIface.eject.eject.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: ProxyResolver
#PARENT: Gio
#COMMENT: #GProxyResolver provides synchronous and asynchronous network proxy
resolution. #GProxyResolver is used within #GSocketClient through
the method g_socket_connectable_proxy_enumerate().
#NAME: set_display_name_async
#PARENT: Gio.File
#COMMENT: Asynchronously sets the display name for a given #GFile.

For more details, see g_file_set_display_name() which is
the synchronous version of this call.

When the operation is finished, @callback will be called.
You can then call g_file_set_display_name_finish() to get
the result of the operation.
#NAME: capabilities
#PARENT: Gio.DBusMessage.new_from_blob.DBusMessage
#COMMENT: A #GDBusCapabilityFlags describing what protocol features are supported.
#NAME: generate_xml
#PARENT: Gio.DBusNodeInfo
#COMMENT: Appends an XML representation of @info (and its children) to @string_builder.

This function is typically used for generating introspection XML documents at run-time for
handling the `org.freedesktop.DBus.Introspectable.Introspect`  method.
#NAME: spawn_exec_failed
#PARENT: Gio.DBusError
#COMMENT: While starting a new process, the exec() call failed.
#NAME: get_flags
#PARENT: Gio.DBusProxy
#COMMENT: Gets the flags that @proxy was constructed with.
#NAME: etag
#PARENT: Gio.FileIface.replace_async.replace_async.none
#COMMENT: an [entity tag][gfile-etag] for the current #GFile,
    or %NULL to ignore
#NAME: AppLaunchContext
#PARENT: Gio
#COMMENT: Integrating the launch with the launching application. This is used to
handle for instance startup notification and launching the new application
on the same screen as the launching window.
#NAME: application
#PARENT: Gio.Application.mark_busy.none
#COMMENT: a #GApplication
#NAME: interface_
#PARENT: Gio.DBusInterface.get_info.DBusInterfaceInfo
#COMMENT: An exported D-Bus interface.
#NAME: io_priority
#PARENT: Gio.InputStream.read_async.none
#COMMENT: the [I/O priority][io-priority]
of the request.
#NAME: user_data
#PARENT: Gio.IOStreamClass.close_async.close_async.none
#COMMENT: the data to pass to callback function
#NAME: write_bytes
#PARENT: Gio.OutputStream.write_bytes
#COMMENT: Number of bytes written, or -1 on error
#NAME: MENU_LINK_SUBMENU
#PARENT: Gio
#COMMENT: The name of the link that associates a menu item with a submenu.

See also g_menu_item_set_link().
#NAME: result
#PARENT: Gio.DataInputStream.read_until_finish.utf8
#COMMENT: the #GAsyncResult that was provided to the callback.
#NAME: symlink_value
#PARENT: Gio.File.make_symbolic_link.gboolean
#COMMENT: a string with the path for the target of the new symlink
#NAME: close_async
#PARENT: Gio.FileEnumerator
#COMMENT: Asynchronously closes the file enumerator.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned in
g_file_enumerator_close_finish().
#NAME: user_data
#PARENT: Gio.FileIface.stop_mountable.stop_mountable.none
#COMMENT: the data to pass to callback function
#NAME: result
#PARENT: Gio.Mount.remount_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: addr
#PARENT: Gio.NetworkAddress.get_scheme.utf8
#COMMENT: a #GNetworkAddress
#NAME: message
#PARENT: Gio.DBusMessage.set_unix_fd_list.none
#COMMENT: A #GDBusMessage.
#NAME: authorize-authenticated-peer
#PARENT: Gio.DBusAuthObserver
#COMMENT: Emitted to check if a peer that is successfully authenticated
is authorized.
#NAME: query_info_finish
#PARENT: Gio.FileOutputStream
#COMMENT: Finalizes the asynchronous query started
by g_file_output_stream_query_info_async().
#NAME: get_is_link_local
#PARENT: Gio.InetAddress
#COMMENT: Tests whether @address is a link-local address (that is, if it
identifies a host on a local network that is not connected to the
Internet).
#NAME: password
#PARENT: Gio.TlsInteractionClass.ask_password_async.ask_password_async.none
#COMMENT: a #GTlsPassword object
#NAME: parent
#PARENT: Gio.FileIface.get_relative_path.get_relative_path.utf8
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.Cancellable.get_fd.gint
#COMMENT: a #GCancellable.
#NAME: match_rule_invalid
#PARENT: Gio.DBusError
#COMMENT: The match rule isn't syntactically valid.
#NAME: flush
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: If @interface_ has outstanding changes, request for these changes to be
emitted immediately.

For example, an exported D-Bus interface may queue up property
changes and emit the
`org.freedesktop.DBus.Properties::Propert``
signal later (e.g. in an idle handler). This technique is useful
for collapsing multiple property changes into one.
#NAME: err_no
#PARENT: Gio.io_error_from_errno.IOErrorEnum
#COMMENT: Error number as defined in errno.h.
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.get_options_dict.GLib.VariantDict
#COMMENT: a #GApplicationCommandLine
#NAME: user_data
#PARENT: Gio.TlsInteraction.request_certificate_async.none
#COMMENT: data to pass to the @callback
#NAME: proxy
#PARENT: Gio.DBusProxy.get_interface_info.DBusInterfaceInfo
#COMMENT: A #GDBusProxy
#NAME: stream
#PARENT: Gio.OutputStream.write_all_finish.gboolean
#COMMENT: a #GOutputStream
#NAME: file
#PARENT: Gio.FileIface.set_display_name_async.set_display_name_async.none
#COMMENT: input #GFile
#NAME: SettingsSchemaKey
#PARENT: Gio
#COMMENT: #GSettingsSchemaKey is an opaque data structure and can only be accessed
using the following functions.
#NAME: resource_load
#PARENT: Gio.resource_load
#COMMENT: a new #GResource, or %NULL on error
#NAME: value
#PARENT: Gio.dbus_gvariant_to_gvalue.none
#COMMENT: A #GVariant.
#NAME: out_link
#PARENT: Gio.MenuLinkIter.get_next.gboolean
#COMMENT: the name of the link
#NAME: result
#PARENT: Gio.MountOperation.reply.none
#COMMENT: a #GMountOperationResult indicating how the request was handled
#NAME: stop_finish
#PARENT: Gio.DriveIface.stop_finish.stop_finish
#COMMENT: %TRUE if the drive has been stopped successfully,
    %FALSE otherwise.
#NAME: set
#PARENT: Gio.FileAttributeStatus
#COMMENT: Attribute value is set.
#NAME: BusNameAcquiredCallback
#PARENT: Gio
#COMMENT: Invoked when the name is acquired.
#NAME: source_new
#PARENT: Gio.Cancellable
#COMMENT: Creates a source that triggers if @cancellable is cancelled and
calls its callback of type #GCancellableSourceFunc. This is
primarily useful for attaching to another (non-cancellable) source
with g_source_add_child_source() to add cancellability to it.

For convenience, you can call this with a %NULL #GCancellable,
in which case the source will never trigger.

The new #GSource will hold a reference to the #GCancellable.
#NAME: cancellable
#PARENT: Gio.File.set_attribute.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: port
#PARENT: Gio.SrvTarget.new.SrvTarget
#COMMENT: the port that the service is running on
#NAME: get_exit_status
#PARENT: Gio.Subprocess
#COMMENT: Check the exit status of the subprocess, given that it exited
normally.  This is the value passed to the exit() system call or the
return value from main.

This is equivalent to the system WEXITSTATUS macro.

It is an error to call this function before g_subprocess_wait() and
unless g_subprocess_get_if_exited() returned %TRUE.
#NAME: quark
#PARENT: Gio.TlsError
#COMMENT: Gets the TLS error quark.
#NAME: io_modules_load_all_in_directory_with_scope
#PARENT: Gio.io_modules_load_all_in_directory_with_scope
#COMMENT: a list of #GIOModules loaded
     from the directory,
     All the modules are loaded into memory, if you want to
     unload them (enabling on-demand loading) you must call
     g_type_module_unuse() on all the modules. Free the list
     with g_list_free().
#NAME: delete
#PARENT: Gio.File.delete
#COMMENT: %TRUE if the file was deleted. %FALSE otherwise.
#NAME: converter
#PARENT: Gio.ConverterOutputStream.new.OutputStream
#COMMENT: a #GConverter
#NAME: name
#PARENT: Gio.DBusNodeInfo.lookup_interface.DBusInterfaceInfo
#COMMENT: A D-Bus interface name.
#NAME: callback
#PARENT: Gio.MountIface.eject.eject.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: info
#PARENT: Gio.DesktopAppInfo.get_generic_name.utf8
#COMMENT: a #GDesktopAppInfo
#NAME: flags
#PARENT: Gio.File.enumerate_children.FileEnumerator
#COMMENT: a set of #GFileQueryInfoFlags
#NAME: rrname
#PARENT: Gio.ResolverClass.lookup_records.lookup_records.GLib.Variant
#COMMENT: the DNS name to lookup the record for
#NAME: object
#PARENT: Gio.SimpleAsyncThreadFunc.none
#COMMENT: a #GObject.
#NAME: low
#PARENT: Gio.NotificationPriority
#COMMENT: for notifications that do not require
  immediate attention - typically used for contextual background
  information, such as contact birthdays or local weather
#NAME: multicast-ttl
#PARENT: Gio.Socket
#COMMENT: Time-to-live out outgoing multicast packets
#NAME: volume
#PARENT: Gio.Volume.enumerate_identifiers.utf8
#COMMENT: a #GVolume
#NAME: stream
#PARENT: Gio.DataOutputStream.put_int64.gboolean
#COMMENT: a #GDataOutputStream.
#NAME: destroy
#PARENT: Gio.TlsPasswordClass.set_value.set_value.none
#COMMENT: a function to use to free the password.
#NAME: user_data
#PARENT: Gio.FileEnumerator.close_async.none
#COMMENT: the data to pass to callback function
#NAME: mount_operation
#PARENT: Gio.Mount.eject_with_operation.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: list
#PARENT: Gio.UnixFDList.get_length.gint
#COMMENT: a #GUnixFDList
#NAME: new
#PARENT: Gio.FileInfo
#COMMENT: Creates a new file info structure.
#NAME: bus_type
#PARENT: Gio.bus_own_name.guint
#COMMENT: the type of bus to own a name on
#NAME: unref
#PARENT: Gio.DBusPropertyInfo
#COMMENT: If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.
#NAME: get_path
#PARENT: Gio.FileIface.get_path.get_path
#COMMENT: string containing the #GFile's path, or %NULL
    if no such path exists. The returned string should be freed
    with g_free() when no longer needed.
#NAME: info
#PARENT: Gio.AppLaunchContext.launched.none
#COMMENT: the #GAppInfo that was just launched
#NAME: get_emblems
#PARENT: Gio.EmblemedIcon.get_emblems
#COMMENT: a #GList of
    #GEmblems that is owned by @emblemed
#NAME: FILE_ATTRIBUTE_THUMBNAILING_FAILED
#PARENT: Gio
#COMMENT: A key in the "thumbnail" namespace for checking if thumbnailing failed.
This attribute is %TRUE if thumbnailing failed. Corresponding
#GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.get_mount_path.utf8
#COMMENT: a #GUnixMountPoint.
#NAME: name_lost_closure
#PARENT: Gio.bus_own_name_with_closures.guint
#COMMENT: #GClosure to invoke when @name is lost or
    %NULL
#NAME: get_sort_key
#PARENT: Gio.Mount.get_sort_key
#COMMENT: Sorting key for @mount or %NULL if no such key is available.
#NAME: remount
#PARENT: Gio.Mount
#COMMENT: Remounts a mount. This is an asynchronous operation, and is
finished by calling g_mount_remount_finish() with the @mount
and #GAsyncResults data returned in the @callback.

Remounting is useful when some setting affecting the operation
of the volume has been changed, as these may need a remount to
take affect. While this is semantically equivalent with unmounting
and then remounting not all backends might need to actually be
unmounted.
#NAME: set_byte_order
#PARENT: Gio.DataOutputStream
#COMMENT: Sets the byte order of the data output stream to @order.
#NAME: error
#PARENT: Gio.DBusMethodInvocation.take_error.none
#COMMENT: A #GError.
#NAME: user_data
#PARENT: Gio.simple_async_report_gerror_in_idle.none
#COMMENT: user data passed to @callback.
#NAME: user_data
#PARENT: Gio.ListStore.insert_sorted.guint
#COMMENT: user data for @compare_func
#NAME: drive
#PARENT: Gio.VolumeMonitor.drive-changed.none
#COMMENT: the drive that changed
#NAME: context
#PARENT: Gio.AppLaunchContext.get_environment.utf8
#COMMENT: a #GAppLaunchContext
#NAME: none
#PARENT: Gio.TlsPasswordFlags
#COMMENT: No flags
#NAME: get_resource_base_path
#PARENT: Gio.Application.get_resource_base_path
#COMMENT: the base resource path, if one is set
#NAME: get_interface
#PARENT: Gio.DBusObjectManager
#COMMENT: Gets the interface proxy for @interface_name at @object_path, if
any.
#NAME: name_space
#PARENT: Gio.FileInfo.has_namespace.gboolean
#COMMENT: a file attribute namespace.
#NAME: unix_fd_passing
#PARENT: Gio.DBusCapabilityFlags
#COMMENT: The connection
supports exchanging UNIX file descriptors with the remote peer.
#NAME: get_interface
#PARENT: Gio.DBusObjectManager.get_interface
#COMMENT: A #GDBusInterface instance or %NULL. Free
  with g_object_unref().
#NAME: connection
#PARENT: Gio.DBusObjectManagerServer.set_connection.none
#COMMENT: A #GDBusConnection or %NULL.
#NAME: get_connectivity
#PARENT: Gio.NetworkMonitor.get_connectivity
#COMMENT: the network connectivity state
#NAME: callback
#PARENT: Gio.OutputStreamClass.write_async.write_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: set_attribute_status
#PARENT: Gio.FileInfo
#COMMENT: Sets the attribute status for an attribute key. This is only
needed by external code that implement g_file_set_attributes_from_info()
or similar functions.

The attribute must exist in @info for this to work. Otherwise %FALSE
is returned and @info is unchanged.
#NAME: get_parent
#PARENT: Gio.File
#COMMENT: Gets the parent directory for the @file.
If the @file represents the root directory of the
file system, then %NULL will be returned.

This call does no blocking I/O.
#NAME: truncate_fn
#PARENT: Gio.Seekable.truncate_fn
#COMMENT: %TRUE if successful. If an error
    has occurred, this function will return %FALSE and set @error
    appropriately if present.
#NAME: flags
#PARENT: Gio.OutputStreamClass.splice_async.splice_async.none
#COMMENT: a set of #GOutputStreamSpliceFlags.
#NAME: spawn_failed
#PARENT: Gio.DBusError
#COMMENT: While starting a new process, something went wrong.
#NAME: file
#PARENT: Gio.FileIface.set_attributes_finish.set_attributes_finish.gboolean
#COMMENT: input #GFile
#NAME: new_for_address
#PARENT: Gio.DBusConnection
#COMMENT: Asynchronously connects and sets up a D-Bus client connection for
exchanging D-Bus messages with an endpoint specified by @address
which must be in the D-Bus address format.

This constructor can only be used to initiate client-side
connections - use g_dbus_connection_new() if you need to act as the
server. In particular, @flags cannot contain the
%G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER or
%G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS flags.

When the operation is finished, @callback will be invoked. You can
then call g_dbus_connection_new_finish() to get the result of the
operation.

If @observer is not %NULL it may be used to control the
authentication process.

This is a asynchronous failable constructor. See
g_dbus_connection_new_for_address_sync() for the synchronous
version.
#NAME: must_support_uris
#PARENT: Gio.app_info_get_default_for_type.AppInfo
#COMMENT: if %TRUE, the #GAppInfo is expected to
    support URIs
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_byte_string.utf8
#COMMENT: a file attribute key.
#NAME: stream
#PARENT: Gio.DataInputStream.get_byte_order.DataStreamByteOrder
#COMMENT: a given #GDataInputStream.
#NAME: guess_content_type_sync
#PARENT: Gio.MountIface.guess_content_type_sync.guess_content_type_sync
#COMMENT: a %NULL-terminated array of content types or %NULL on error.
    Caller should free this array with g_strfreev() when done with it.
#NAME: socket
#PARENT: Gio.Socket.get_blocking.gboolean
#COMMENT: a #GSocket.
#NAME: iterate_item_attributes
#PARENT: Gio.MenuModelClass.iterate_item_attributes.iterate_item_attributes
#COMMENT: a new #GMenuAttributeIter
#NAME: result
#PARENT: Gio.Drive.stop_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: is_service
#PARENT: Gio.ApplicationFlags
#COMMENT: Run as a service. In this mode, registration
     fails if the service is already running, and the application
     will initially wait up to 10 seconds for an initial activation
     message to arrive.
#NAME: parameter
#PARENT: Gio.RemoteActionGroup.activate_action_full.none
#COMMENT: the optional parameter to the activation
#NAME: message
#PARENT: Gio.DBusMessage.print.utf8
#COMMENT: A #GDBusMessage.
#NAME: set_domain
#PARENT: Gio.MountOperation
#COMMENT: Sets the mount operation's domain.
#NAME: object_path
#PARENT: Gio.DBusSubtreeDispatchFunc.DBusInterfaceVTable
#COMMENT: The object path that was registered with g_dbus_connection_register_subtree().
#NAME: stream
#PARENT: Gio.PollableOutputStreamInterface.create_source.create_source.GLib.Source
#COMMENT: a #GPollableOutputStream.
#NAME: address
#PARENT: Gio.InetAddress.get_is_multicast.gboolean
#COMMENT: a #GInetAddress
#NAME: get_attribute_data
#PARENT: Gio.FileInfo.get_attribute_data
#COMMENT: %TRUE if @info has an attribute named @attribute,
     %FALSE otherwise.
#NAME: clear_pending
#PARENT: Gio.IOStream
#COMMENT: Clears the pending flag on @stream.
#NAME: files
#PARENT: Gio.ApplicationClass.open.open.none
#COMMENT: an array of #GFiles to open
#NAME: drive
#PARENT: Gio.Drive.stop.none
#COMMENT: a #GDrive.
#NAME: iterate_item_attributes
#PARENT: Gio.MenuModel.iterate_item_attributes
#COMMENT: a new #GMenuAttributeIter
#NAME: to_string
#PARENT: Gio.InetAddress
#COMMENT: Converts @address to string form.
#NAME: cancellable
#PARENT: Gio.FileIface.open_readwrite_async.open_readwrite_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: user_data
#PARENT: Gio.TlsInteractionClass.ask_password_async.ask_password_async.none
#COMMENT: data to pass to the @callback
#NAME: user_data
#PARENT: Gio.UnixConnection.receive_credentials_async.none
#COMMENT: the data to pass to callback function
#NAME: new_finish
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Finishes an operation started with g_dbus_object_manager_client_new().
#NAME: byte-order
#PARENT: Gio.DataOutputStream
#COMMENT: Determines the byte ordering that is used when writing
multi-byte entities (such as integers) to the stream.
#NAME: get_proxy_resolver
#PARENT: Gio.SocketClient.get_proxy_resolver
#COMMENT: The #GProxyResolver being used by
  @client.
#NAME: send_credentials
#PARENT: Gio.UnixConnection.send_credentials
#COMMENT: %TRUE on success, %FALSE if @error is set.
#NAME: IOExtensionPoint
#PARENT: Gio
#COMMENT: #GIOExtensionPoint is an opaque data structure and can only be accessed
using the following functions.
#NAME: filename
#PARENT: Gio.DesktopAppInfo.new_from_filename.DesktopAppInfo
#COMMENT: the path of a desktop file, in the GLib filename encoding
#NAME: interface_name
#PARENT: Gio.DBusProxy.new.none
#COMMENT: A D-Bus interface name.
#NAME: info
#PARENT: Gio.FileInfo.set_attribute_string.none
#COMMENT: a #GFileInfo.
#NAME: new
#PARENT: Gio.SocketService
#COMMENT: Creates a new #GSocketService with no sockets to listen for.
New listeners can be added with e.g. g_socket_listener_add_address()
or g_socket_listener_add_inet_port().
#NAME: TlsPasswordClass
#PARENT: Gio
#COMMENT: Class structure for #GTlsPassword.
#NAME: info
#PARENT: Gio.FileInfo.set_attribute_int64.none
#COMMENT: a #GFileInfo.
#NAME: get_edit_name
#PARENT: Gio.FileInfo
#COMMENT: Gets the edit name for a file.
#NAME: list_new_from_file
#PARENT: Gio.TlsCertificate
#COMMENT: Creates one or more #GTlsCertificates from the PEM-encoded
data in @file. If @file cannot be read or parsed, the function will
return %NULL and set @error. If @file does not contain any
PEM-encoded certificates, this will return an empty list and not
set @error.
#NAME: get_display_name
#PARENT: Gio.FileInfo
#COMMENT: Gets a display name for a file.
#NAME: protocol
#PARENT: Gio.SocketConnection.factory_register_type.none
#COMMENT: a protocol id
#NAME: unix_mount_get_mount_path
#PARENT: Gio.unix_mount_get_mount_path
#COMMENT: the mount path for @mount_entry.
#NAME: value
#PARENT: Gio.SettingsBindSetMapping.GLib.Variant
#COMMENT: a #GValue containing the property value to map
#NAME: stream
#PARENT: Gio.OutputStream.write_fn.gssize
#COMMENT: a #GOutputStream.
#NAME: cancellable
#PARENT: Gio.DBusConnection.close.none
#COMMENT: a #GCancellable or %NULL
#NAME: connection
#PARENT: Gio.DBusActionGroup.get.DBusActionGroup
#COMMENT: A #GDBusConnection
#NAME: get_n_items
#PARENT: Gio.MenuModel
#COMMENT: Query the number of items in @model.
#NAME: format
#PARENT: Gio.ZlibDecompressor.new.ZlibDecompressor
#COMMENT: The format to use for the compressed data
#NAME: file
#PARENT: Gio.File.replace_finish.FileOutputStream
#COMMENT: input #GFile
#NAME: stream
#PARENT: Gio.MemoryInputStream.add_bytes.none
#COMMENT: a #GMemoryInputStream
#NAME: stream
#PARENT: Gio.OutputStream.splice_finish.gssize
#COMMENT: a #GOutputStream.
#NAME: result
#PARENT: Gio.MountIface.eject_finish.eject_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: io_priority
#PARENT: Gio.File.trash_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: service
#PARENT: Gio.Resolver.lookup_service_async.none
#COMMENT: the service type to look up (eg, "ldap")
#NAME: settings
#PARENT: Gio.Settings.bind.none
#COMMENT: a #GSettings object
#NAME: destroy_notify
#PARENT: Gio.SubprocessLauncher.set_child_setup.none
#COMMENT: a #GDestroyNotify for @user_data
#NAME: annotations
#PARENT: Gio.DBusSignalInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
#NAME: get_fd_list
#PARENT: Gio.UnixFDMessage.get_fd_list
#COMMENT: the #GUnixFDList from @message
#NAME: get_sort_key
#PARENT: Gio.VolumeIface.get_sort_key.get_sort_key
#COMMENT: Sorting key for @volume or %NULL if no such key is available
#NAME: dbus_is_address
#PARENT: Gio
#COMMENT: Checks if @string is a D-Bus address.

This doesn't check if @string is actually supported by #GDBusServer
or #GDBusConnection - use g_dbus_is_supported_address() to do more
checks.
#NAME: get_enabled
#PARENT: Gio.ActionInterface.get_enabled.get_enabled
#COMMENT: whether the action is enabled
#NAME: get_can_acquire
#PARENT: Gio.Permission.get_can_acquire
#COMMENT: the value of the 'can-acquire' property
#NAME: allowed
#PARENT: Gio.Permission
#COMMENT: %TRUE if the caller currently has permission to perform the action that
@permission represents the permission to perform.
#NAME: get_platform_data
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Gets the platform data associated with the invocation of @cmdline.

This is a #GVariant dictionary containing information about the
context in which the invocation occurred.  It typically contains
information like the current working directory and the startup
notification ID.

For local invocation, it will be %NULL.
#NAME: items_changed
#PARENT: Gio.ListModel
#COMMENT: Emits the #GListModel::items-changed signal on @list.

This function should only be called by classes implementing
#GListModel. It has to be called after the internal representation
of @list has been updated, because handlers connected to this signal
might query the new state of the list.

Implementations must only make changes to the model (as visible to
its consumer) in places that will not cause problems for that
consumer.  For models that are driven directly by a write API (such
as #GListStore), changes can be reported in response to uses of that
API.  For models that represent remote data, changes should only be
made from a fresh mainloop dispatch.  It is particularly not
permitted to make changes in response to a call to the #GListModel
consumer API.

Stated another way: in general, it is assumed that code making a
series of accesses to the model via the API, without returning to the
mainloop, and without calling other code, will continue to view the
same contents of the model.
#NAME: chain
#PARENT: Gio.TlsDatabase.verify_chain_async.none
#COMMENT: a #GTlsCertificate chain
#NAME: delay-apply
#PARENT: Gio.Settings
#COMMENT: Whether the #GSettings object is in 'delay-apply' mode. See
g_settings_delay() for details.
#NAME: internal
#PARENT: Gio.ResourceError
#COMMENT: unknown error
#NAME: leave_multicast_group
#PARENT: Gio.Socket
#COMMENT: Removes @socket from the multicast group defined by @group, @iface,
and @source_specific (which must all have the same values they had
when you joined the group).

@socket remains bound to its address and port, and can still receive
unicast messages after calling this.
#NAME: write_all_async
#PARENT: Gio.OutputStream
#COMMENT: Request an asynchronous write of @count bytes from @buffer into
the stream. When the operation is finished @callback will be called.
You can then call g_output_stream_write_all_finish() to get the result of the
operation.

This is the asynchronous version of g_output_stream_write_all().

Call g_output_stream_write_all_finish() to collect the result.

Any outstanding I/O request with higher priority (lower numerical
value) will be executed before an outstanding request with lower
priority. Default priority is %G_PRIORITY_DEFAULT.

Note that no copy of @buffer will be made, so it must stay valid
until @callback is called.
#NAME: value
#PARENT: Gio.File.set_attribute_int32.gboolean
#COMMENT: a #gint32 containing the attribute's new value
#NAME: icon1
#PARENT: Gio.IconIface.equal.equal.gboolean
#COMMENT: pointer to the first #GIcon.
#NAME: AppInfoMonitor
#PARENT: Gio
#COMMENT: #GAppInfoMonitor is a very simple object used for monitoring the app
info database for changes (ie: newly installed or removed
applications).

Call g_app_info_monitor_get() to get a #GAppInfoMonitor and connect
to the "changed" signal.

In the usual case, applications should try to make note of the change
(doing things like invalidating caches) but not act on it.  In
particular, applications should avoid making calls to #GAppInfo APIs
in response to the change signal, deferring these until the time that
the data is actually required.  The exception to this case is when
application information is actually being displayed on the screen
(eg: during a search or when the list of all applications is shown).
The reason for this is that changes to the list of installed
applications often come in groups (like during system updates) and
rescanning the list on every change is pointless and expensive.
#NAME: icon2
#PARENT: Gio.IconIface.equal.equal.gboolean
#COMMENT: pointer to the second #GIcon.
#NAME: length
#PARENT: Gio.File.load_contents.gboolean
#COMMENT: a location to place the length of the contents of the file,
   or %NULL if the length is not needed
#NAME: connect_to_uri
#PARENT: Gio.SocketClient.connect_to_uri
#COMMENT: a #GSocketConnection on success, %NULL on error.
#NAME: scope
#PARENT: Gio.io_modules_load_all_in_directory_with_scope.IOModule
#COMMENT: a scope to use when scanning the modules.
#NAME: cancellable
#PARENT: Gio.FileInputStreamClass.query_info_async.query_info_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: model
#PARENT: Gio.MenuModelClass.is_mutable.is_mutable.gboolean
#COMMENT: a #GMenuModel
#NAME: error_domain_quark_name
#PARENT: Gio.dbus_error_register_error_domain.none
#COMMENT: The error domain name.
#NAME: connection
#PARENT: Gio.ProxyInterface.connect_async.connect_async.none
#COMMENT: a #GIOStream
#NAME: app_info_get_default_for_uri_scheme
#PARENT: Gio.app_info_get_default_for_uri_scheme
#COMMENT: #GAppInfo for given @uri_scheme or %NULL on error.
#NAME: bus_get_sync
#PARENT: Gio.bus_get_sync
#COMMENT: a #GDBusConnection or %NULL if @error is set.
    Free with g_object_unref().
#NAME: cancellable
#PARENT: Gio.DBusProxy.call.none
#COMMENT: A #GCancellable or %NULL.
#NAME: get_commandline
#PARENT: Gio.AppInfo.get_commandline
#COMMENT: a string containing the @appinfo's commandline,
    or %NULL if this information is not available
#NAME: send_credentials_async
#PARENT: Gio.UnixConnection
#COMMENT: Asynchronously send credentials.

For more details, see g_unix_connection_send_credentials() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_unix_connection_send_credentials_finish() to get the result of the operation.
#NAME: cancellable
#PARENT: Gio.Mount.remount.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: content_type
#PARENT: Gio.AppInfo.set_as_last_used_for_type.gboolean
#COMMENT: the content type.
#NAME: get_is_busy
#PARENT: Gio.Application
#COMMENT: Gets the application's current busy state, as set through
g_application_mark_busy() or g_application_bind_busy_property().
#NAME: menu
#PARENT: Gio.Menu.append_item.none
#COMMENT: a #GMenu
#NAME: get_is_loopback
#PARENT: Gio.InetAddress
#COMMENT: Tests whether @address is the loopback address for its family.
#NAME: handler_id
#PARENT: Gio.Cancellable.disconnect.none
#COMMENT: Handler id of the handler to be disconnected, or %0.
#NAME: dbus_error_get_remote_error
#PARENT: Gio.dbus_error_get_remote_error
#COMMENT: an allocated string or %NULL if the D-Bus error name
    could not be found. Free with g_free().
#NAME: activate_action_full
#PARENT: Gio.RemoteActionGroup
#COMMENT: Activates the remote action.

This is the same as g_action_group_activate_action() except that it
allows for provision of "platform data" to be sent along with the
activation request.  This typically contains details such as the user
interaction timestamp or startup notification information.

@platform_data must be non-%NULL and must have the type
%G_VARIANT_TYPE_VARDICT.  If it is floating, it will be consumed.
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.get_op_res_gboolean.gboolean
#COMMENT: a #GSimpleAsyncResult.
#NAME: sort_order
#PARENT: Gio.FileInfo.set_sort_order.none
#COMMENT: a sort order integer.
#NAME: supports_uris
#PARENT: Gio.AppInfoIface.supports_uris.supports_uris
#COMMENT: %TRUE if the @appinfo supports URIs.
#NAME: name_lost_closure
#PARENT: Gio.bus_own_name_on_connection_with_closures.guint
#COMMENT: #GClosure to invoke when @name is lost
    or %NULL
#NAME: flags
#PARENT: Gio.Resource.get_info.gboolean
#COMMENT: a location to place the flags about the file,
   or %NULL if the length is not needed
#NAME: is_closed
#PARENT: Gio.IOStream.is_closed
#COMMENT: %TRUE if the stream is closed.
#NAME: callback
#PARENT: Gio.Resolver.lookup_by_name_async.none
#COMMENT: callback to call after resolution completes
#NAME: get_file_type
#PARENT: Gio.FileInfo.get_file_type
#COMMENT: a #GFileType for the given file.
#NAME: progress_data
#PARENT: Gio.File.measure_disk_usage_async.none
#COMMENT: user_data for @progress_callback
#NAME: get_child_for_display_name
#PARENT: Gio.FileIface.get_child_for_display_name.get_child_for_display_name
#COMMENT: a #GFile to the specified child, or
    %NULL if the display name couldn't be converted.
    Free the returned object with g_object_unref().
#NAME: client
#PARENT: Gio.SocketClient.get_family.SocketFamily
#COMMENT: a #GSocketClient.
#NAME: appinfo
#PARENT: Gio.AppInfo.can_remove_supports_type.gboolean
#COMMENT: a #GAppInfo.
#NAME: get_action_state_hint
#PARENT: Gio.ActionGroup
#COMMENT: Requests a hint about the valid range of values for the state of the
named action within @action_group.

If %NULL is returned it either means that the action is not stateful
or that there is no hint about the valid range of values for the
state of the action.

If a #GVariant array is returned then each item in the array is a
possible value for the state.  If a #GVariant pair (ie: two-tuple) is
returned then the tuple specifies the inclusive lower and upper bound
of valid values for the state.

In any case, the information is merely a hint.  It may be possible to
have a state value outside of the hinted range and setting a value
within the range may fail.

The return value (if non-%NULL) should be freed with
g_variant_unref() when it is no longer required.
#NAME: close_source
#PARENT: Gio.OutputStreamSpliceFlags
#COMMENT: Close the source stream after
    the splice.
#NAME: get_name
#PARENT: Gio.SettingsSchemaKey
#COMMENT: Gets the name of @key.
#NAME: get_dbus_connection
#PARENT: Gio.Application.get_dbus_connection
#COMMENT: a #GDBusConnection, or %NULL
#NAME: access_denied
#PARENT: Gio.DBusError
#COMMENT: Security restrictions don't allow doing what you're trying to do.
#NAME: lookup
#PARENT: Gio.ProxyResolverInterface.lookup.lookup
#COMMENT: A
              NULL-terminated array of proxy URIs. Must be freed
              with g_strfreev().
#NAME: warning
#PARENT: Gio.TlsPassword.set_warning.none
#COMMENT: The user readable warning
#NAME: data
#PARENT: Gio.DataOutputStream.put_int32.gboolean
#COMMENT: a #gint32.
#NAME: launched
#PARENT: Gio.AppLaunchContext
#COMMENT: The ::launched signal is emitted when a #GAppInfo is successfully
launched. The @platform_data is an GVariant dictionary mapping
strings to variants (ie a{sv}), which contains additional,
platform-specific data about this launch. On UNIX, at least the
"pid" and "startup-notification-id" keys will be present.
#NAME: read_all
#PARENT: Gio.InputStream
#COMMENT: Tries to read @count bytes from the stream into the buffer starting at
@buffer. Will block during this read.

This function is similar to g_input_stream_read(), except it tries to
read as many bytes as requested, only stopping on an error or end of stream.

On a successful read of @count bytes, or if we reached the end of the
stream,  %TRUE is returned, and @bytes_read is set to the number of bytes
read into @buffer.

If there is an error during the operation %FALSE is returned and @error
is set to indicate the error status.

As a special exception to the normal conventions for functions that
use #GError, if this function returns %FALSE (and sets @error) then
@bytes_read will be set to the number of bytes that were successfully
read before the error was encountered.  This functionality is only
available from C.  If you need it from another language then you must
write your own loop around g_input_stream_read().
#NAME: local_command_line
#PARENT: Gio.Application
#COMMENT: This virtual function is always invoked in the local instance. It
gets passed a pointer to a %NULL-terminated copy of @argv and is
expected to remove arguments that it handled (shifting up remaining
arguments).

The last argument to local_command_line() is a pointer to the @status
variable which can used to set the exit status that is returned from
g_application_run().

See g_application_run() for more details on #GApplication startup.
#NAME: get_connected_drives
#PARENT: Gio.VolumeMonitor.get_connected_drives
#COMMENT: a #GList of connected #GDrive objects.
#NAME: file
#PARENT: Gio.FileIface.enumerate_children.enumerate_children.FileEnumerator
#COMMENT: input #GFile
#NAME: result
#PARENT: Gio.Mount.eject_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: callback
#PARENT: Gio.ProxyInterface.connect_async.connect_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: action_group
#PARENT: Gio.ActionGroup.get_action_state_hint.GLib.Variant
#COMMENT: a #GActionGroup
#NAME: to_string
#PARENT: Gio.Credentials.to_string
#COMMENT: A string that should be freed with g_free().
#NAME: certificate
#PARENT: Gio.TlsDatabase.create_certificate_handle.utf8
#COMMENT: certificate for which to create a handle.
#NAME: launch_default_for_uri
#PARENT: Gio.AppInfo.launch_default_for_uri
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: io_priority
#PARENT: Gio.AsyncInitable.newv_async.none
#COMMENT: the [I/O priority][io-priority] of the operation
#NAME: query_writable_namespaces
#PARENT: Gio.File.query_writable_namespaces
#COMMENT: a #GFileAttributeInfoList describing the writable namespaces.
    When you are done with it, release it with
    g_file_attribute_info_list_unref()
#NAME: flags
#PARENT: Gio.DBusConnection.signal_subscribe.guint
#COMMENT: flags describing how to subscribe to the signal (currently unused)
#NAME: arg
#PARENT: Gio.ApplicationCommandLine.create_file_for_arg.File
#COMMENT: an argument from @cmdline
#NAME: DataInputStream
#PARENT: Gio
#COMMENT: Data input stream implements #GInputStream and includes functions for
reading structured data directly from a binary input stream.
#NAME: name_owner
#PARENT: Gio.BusNameAppearedCallback.none
#COMMENT: Unique name of the owner of the name being watched.
#NAME: srv
#PARENT: Gio.NetworkService.get_protocol.utf8
#COMMENT: a #GNetworkService
#NAME: iterate
#PARENT: Gio.FileEnumerator
#COMMENT: This is a version of g_file_enumerator_next_file() that's easier to
use correctly from C programs.  With g_file_enumerator_next_file(),
the gboolean return value signifies "end of iteration or error", which
requires allocation of a temporary #GError.

In contrast, with this function, a %FALSE return from
gs_file_enumerator_iterate() *always* means
"error".  End of iteration is signaled by @out_info or @out_child being %NULL.

Another crucial difference is that the references for @out_info and
@out_child are owned by @direnum (they are cached as hidden
properties).  You must not unref them in your own code.  This makes
memory management significantly easier for C code in combination
with loops.

Finally, this function optionally allows retrieving a #GFile as
well.

You must specify at least one of @out_info or @out_child.

The code pattern for correctly using g_file_enumerator_iterate() from C
is:

|[
direnum = g_file_enumerate_children (file, ...);
while (TRUE)
  {
    GFileInfo *info;
    if (!g_file_enumerator_iterate (direnum, &info, NULL, cancellable, error))
      goto out;
    if (!info)
      break;
    ... do stuff with "info"; do not unref it! ...
  }

out:
  g_object_unref (direnum); // Note: frees the last @info
]|
#NAME: flags
#PARENT: Gio.MountIface.eject_with_operation.eject_with_operation.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: prefix
#PARENT: Gio.File.has_prefix.gboolean
#COMMENT: input #GFile
#NAME: target_fd
#PARENT: Gio.SubprocessLauncher.take_fd.none
#COMMENT: Target descriptor for child process
#NAME: put_uint16
#PARENT: Gio.DataOutputStream
#COMMENT: Puts an unsigned 16-bit integer into the output stream.
#NAME: resolver
#PARENT: Gio.Resolver.lookup_records_async.none
#COMMENT: a #GResolver
#NAME: proxy
#PARENT: Gio.DBusProxy.call_sync.GLib.Variant
#COMMENT: A #GDBusProxy.
#NAME: res
#PARENT: Gio.FileIface.replace_readwrite_finish.replace_readwrite_finish.FileIOStream
#COMMENT: a #GAsyncResult
#NAME: res
#PARENT: Gio.File.find_enclosing_mount_finish.Mount
#COMMENT: a #GAsyncResult
#NAME: object_path
#PARENT: Gio.DBusObjectManagerClient.new_for_bus.none
#COMMENT: The object path of the control object.
#NAME: mount
#PARENT: Gio.Mount.get_uuid.utf8
#COMMENT: a #GMount.
#NAME: converter
#PARENT: Gio.Converter.convert.ConverterResult
#COMMENT: a #GConverter.
#NAME: do_delete
#PARENT: Gio.AppInfo.do_delete
#COMMENT: %TRUE if @appinfo has been deleted
#NAME: cancellable
#PARENT: Gio.File.query_exists.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_action_parameter_type
#PARENT: Gio.ActionGroup
#COMMENT: Queries the type of the parameter that must be given when activating
the named action within @action_group.

When activating the action using g_action_group_activate_action(),
the #GVariant given to that function must be of the type returned
by this function.

In the case that this function returns %NULL, you must not give any
#GVariant, but %NULL instead.

The parameter type of a particular action will never change but it is
possible for an action to be removed and for a new action to be added
with the same name but a different parameter type.
#NAME: weight
#PARENT: Gio.SrvTarget.new.SrvTarget
#COMMENT: the target's weight
#NAME: type
#PARENT: Gio.Socket.new.Socket
#COMMENT: the socket type to use.
#NAME: new
#PARENT: Gio.UnixCredentialsMessage
#COMMENT: Creates a new #GUnixCredentialsMessage with credentials matching the current processes.
#NAME: path
#PARENT: Gio.resources_open_stream.InputStream
#COMMENT: A pathname inside the resource
#NAME: info
#PARENT: Gio.DBusProxy.set_interface_info.none
#COMMENT: Minimum interface this proxy conforms to or %NULL to unset.
#NAME: drive
#PARENT: Gio.Drive.can_poll_for_media.gboolean
#COMMENT: a #GDrive.
#NAME: broadcast
#PARENT: Gio.Socket
#COMMENT: Whether the socket should allow sending to broadcast addresses.
#NAME: settings
#PARENT: Gio.Settings.get_strv.utf8
#COMMENT: a #GSettings object
#NAME: communicate
#PARENT: Gio.Subprocess.communicate
#COMMENT: %TRUE if successful
#NAME: get_name_owner
#PARENT: Gio.DBusProxy.get_name_owner
#COMMENT: The name owner or %NULL if no name owner exists. Free with g_free().
#NAME: flags
#PARENT: Gio.bus_own_name_on_connection_with_closures.guint
#COMMENT: a set of flags from the #GBusNameOwnerFlags enumeration
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.return_dbus_error.none
#COMMENT: A #GDBusMethodInvocation.
#NAME: set_default_action_and_target_value
#PARENT: Gio.Notification
#COMMENT: Sets the default action of @notification to @action. This action is
activated when the notification is clicked on. It must be an
application-wide action (start with "app.").

If @target is non-%NULL, @action will be activated with @target as
its parameter.

When no default action is set, the application that the notification
was sent on is activated.
#NAME: tls_server_connection_new
#PARENT: Gio.tls_server_connection_new
#COMMENT: the new
#GTlsServerConnection, or %NULL on error
#NAME: stream
#PARENT: Gio.DataInputStream.read_until_async.none
#COMMENT: a given #GDataInputStream.
#NAME: get_child
#PARENT: Gio.File
#COMMENT: Gets a child of @file with basename equal to @name.

Note that the file with that specific name might not exist, but
you can still have a #GFile that points to it. You can use this
for instance to create that file.

This call does no blocking I/O.
#NAME: socket
#PARENT: Gio.Socket.receive_with_blocking.gssize
#COMMENT: a #GSocket
#NAME: SocketControlMessageClass
#PARENT: Gio
#COMMENT: Class structure for #GSocketControlMessage.
#NAME: TestDBus
#PARENT: Gio
#COMMENT: A helper class for testing code which uses D-Bus without touching the user's
session bus.

Note that #GTestDBus modifies the user’s environment, calling setenv().
This is not thread-safe, so all #GTestDBus calls should be completed before
threads are spawned, or should have appropriate locking to ensure no access
conflicts to environment variables shared between #GTestDBus and other
threads.

## Creating unit tests using GTestDBus

Testing of D-Bus services can be tricky because normally we only ever run
D-Bus services over an existing instance of the D-Bus daemon thus we
usually don't activate D-Bus services that are not yet installed into the
target system. The #GTestDBus object makes this easier for us by taking care
of the lower level tasks such as running a private D-Bus daemon and looking
up uninstalled services in customizable locations, typically in your source
code tree.

The first thing you will need is a separate service description file for the
D-Bus daemon. Typically a `services` subdirectory of your `tests` directory
is a good place to put this file.

The service file should list your service along with an absolute path to the
uninstalled service executable in your source tree. Using autotools we would
achieve this by adding a file such as `my-server.service.in` in the services
directory and have it processed by configure.
|[
    [D-BUS Service]
    Name=org.gtk.GDBus.Examples.ObjectManager
    Exec=@abs_top_builddir@/gio/tests/gdbus-example-objectmanager-server
]|
You will also need to indicate this service directory in your test
fixtures, so you will need to pass the path while compiling your
test cases. Typically this is done with autotools with an added
preprocessor flag specified to compile your tests such as:
|[
    -DTEST_SERVICES=\""$(abs_top_builddir)/tests/services"\"
]|
    Once you have a service definition file which is local to your source tree,
you can proceed to set up a GTest fixture using the #GTestDBus scaffolding.

An example of a test fixture for D-Bus services can be found
here:
[gdbus-test-fixture.c](https://git.gnome.org/browse/glib/tree/gio/tests/gdbus-test-fixture.c)

Note that these examples only deal with isolating the D-Bus aspect of your
service. To successfully run isolated unit tests on your service you may need
some additional modifications to your test case fixture. For example; if your
service uses GSettings and installs a schema then it is important that your test service
not load the schema in the ordinary installed location (chances are that your service
and schema files are not yet installed, or worse; there is an older version of the
schema file sitting in the install location).

Most of the time we can work around these obstacles using the
environment. Since the environment is inherited by the D-Bus daemon
created by #GTestDBus and then in turn inherited by any services the
D-Bus daemon activates, using the setup routine for your fixture is
a practical place to help sandbox your runtime environment. For the
rather typical GSettings case we can work around this by setting
`GSETTINGS_SCHEMA_DIR` to the in tree directory holding your schemas
in the above fixture_setup() routine.

The GSettings schemas need to be locally pre-compiled for this to work. This can be achieved
by compiling the schemas locally as a step before running test cases, an autotools setup might
do the following in the directory holding schemas:
|[
    all-am:
            $(GLIB_COMPILE_SCHEMAS) .

    CLEANFILES += gschemas.compiled
]|
#NAME: mountpoints-changed
#PARENT: Gio.UnixMountMonitor
#COMMENT: Emitted when the unix mount points have changed.
#NAME: action_group
#PARENT: Gio.ActionGroup.change_action_state.none
#COMMENT: a #GActionGroup
#NAME: user_data
#PARENT: Gio.FileIOStream.query_info_async.none
#COMMENT: the data to pass to callback function
#NAME: MemoryOutputStream
#PARENT: Gio
#COMMENT: #GMemoryOutputStream is a class for using arbitrary
memory chunks as output for GIO streaming output operations.

As of GLib 2.34, #GMemoryOutputStream trivially implements
#GPollableOutputStream: it always polls as ready.
#NAME: list
#PARENT: Gio.ListModel.get_item.GObject.Object
#COMMENT: a #GListModel
#NAME: conn
#PARENT: Gio.TlsConnection.set_rehandshake_mode.none
#COMMENT: a #GTlsConnection
#NAME: InitableIface
#PARENT: Gio
#COMMENT: Provides an interface for initializing object such that initialization
may fail.
#NAME: permission
#PARENT: Gio.PermissionClass.acquire.acquire.gboolean
#COMMENT: a #GPermission instance
#NAME: no_sensitivity
#PARENT: Gio.SettingsBindFlags
#COMMENT: Do not try to bind a "sensitivity" property to the writability of the setting
#NAME: get_identifier
#PARENT: Gio.VolumeIface.get_identifier.get_identifier
#COMMENT: a newly allocated string containing the
    requested identfier, or %NULL if the #GVolume
    doesn't have this kind of identifier
#NAME: get_range
#PARENT: Gio.Settings
#COMMENT: Queries the range of a key.
#NAME: blob
#PARENT: Gio.DBusMessage.new_from_blob.DBusMessage
#COMMENT: A blob represent a binary D-Bus message.
#NAME: get_mount_for_uuid
#PARENT: Gio.VolumeMonitor.get_mount_for_uuid
#COMMENT: a #GMount or %NULL if no such mount is available.
    Free the returned object with g_object_unref().
#NAME: condition
#PARENT: Gio.Socket.condition_check.GLib.IOCondition
#COMMENT: a #GIOCondition mask to check
#NAME: make_directory_async
#PARENT: Gio.File
#COMMENT: Asynchronously creates a directory.
#NAME: get_is_hidden
#PARENT: Gio.FileInfo.get_is_hidden
#COMMENT: %TRUE if the file is a hidden file, %FALSE otherwise.
#NAME: client-address
#PARENT: Gio.DBusServer
#COMMENT: The D-Bus address that clients can use.
#NAME: new
#PARENT: Gio.DBusObjectProxy.new
#COMMENT: a new #GDBusObjectProxy
#NAME: ref
#PARENT: Gio.FileAttributeMatcher.ref
#COMMENT: a #GFileAttributeMatcher.
#NAME: method_name
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: Name of method to invoke.
#NAME: TlsRehandshakeMode
#PARENT: Gio
#COMMENT: When to allow rehandshaking. See
g_tls_connection_set_rehandshake_mode().
#NAME: set_flags
#PARENT: Gio.Application
#COMMENT: Sets the flags for @application.

The flags can only be modified if @application has not yet been
registered.

See #GApplicationFlags.
#NAME: result
#PARENT: Gio.TlsDatabaseClass.verify_chain_finish.verify_chain_finish.TlsCertificateFlags
#COMMENT: a #GAsyncResult.
#NAME: emit_signal
#PARENT: Gio.DBusConnection
#COMMENT: Emits a signal.

If the parameters GVariant is floating, it is consumed.

This can only fail if @parameters is not compatible with the D-Bus protocol.
#NAME: search
#PARENT: Gio.DesktopAppInfo
#COMMENT: Searches desktop files for ones that match @search_string.

The return value is an array of strvs.  Each strv contains a list of
applications that matched @search_string with an equal score.  The
outer list is sorted by score so that the first strv contains the
best-matching applications, and so on.
The algorithm for determining matches is undefined and may change at
any time.
#NAME: callback
#PARENT: Gio.InputStreamClass.close_async.close_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: user_data
#PARENT: Gio.File.delete_async.none
#COMMENT: the data to pass to callback function
#NAME: in_args
#PARENT: Gio.DBusMethodInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusArgInfo structures or %NULL if there are no in arguments.
#NAME: application
#PARENT: Gio.ApplicationClass.activate.activate.none
#COMMENT: a #GApplication
#NAME: set_listen_backlog
#PARENT: Gio.Socket
#COMMENT: Sets the maximum number of outstanding connections allowed
when listening on this socket. If more clients than this are
connecting to the socket and the application is not handling them
on time then the new connections will be refused.

Note that this must be called before g_socket_listen() and has no
effect if called after that.
#NAME: callback
#PARENT: Gio.FileIface.unmount_mountable.unmount_mountable.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: error_name
#PARENT: Gio.DBusMethodInvocation.return_dbus_error.none
#COMMENT: A valid D-Bus error name.
#NAME: new
#PARENT: Gio.Settings
#COMMENT: Creates a new #GSettings object with the schema specified by
@schema_id.

Signals on the newly created #GSettings object will be dispatched
via the thread-default #GMainContext in effect at the time of the
call to g_settings_new().  The new #GSettings will hold a reference
on the context.  See g_main_context_push_thread_default().
#NAME: FILE_ATTRIBUTE_STANDARD_SORT_ORDER
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for setting the sort order of a file.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_INT32.
An example use would be in file managers, which would use this key
to set the order files are displayed. Files with smaller sort order
should be sorted first, and files without sort order as if sort order
was zero.
#NAME: resolver
#PARENT: Gio.ResolverClass.lookup_records_finish.lookup_records_finish.GLib.Variant
#COMMENT: a #GResolver
#NAME: self
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by_finish.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: has_media
#PARENT: Gio.DriveIface.has_media.has_media
#COMMENT: %TRUE if @drive has media, %FALSE otherwise.
#NAME: file
#PARENT: Gio.File.open_readwrite_finish.FileIOStream
#COMMENT: input #GFile
#NAME: socket
#PARENT: Gio.Socket.get_remote_address.SocketAddress
#COMMENT: a #GSocket.
#NAME: get_attribute_int64
#PARENT: Gio.FileInfo.get_attribute_int64
#COMMENT: a signed 64-bit integer from the attribute.
#NAME: none
#PARENT: Gio.DBusCallFlags
#COMMENT: No flags set.
#NAME: DBusAnnotationInfo
#PARENT: Gio
#COMMENT: Information about an annotation.
#NAME: stream
#PARENT: Gio.DataOutputStream.put_uint16.gboolean
#COMMENT: a #GDataOutputStream.
#NAME: backup
#PARENT: Gio.FileCopyFlags
#COMMENT: Make a backup of any existing files.
#NAME: lock
#PARENT: Gio.DBusMessage
#COMMENT: If @message is locked, does nothing. Otherwise locks the message.
#NAME: backend
#PARENT: Gio.TlsBackend.get_default_database.TlsDatabase
#COMMENT: the #GTlsBackend
#NAME: guess_name
#PARENT: Gio.UnixMountPoint.guess_name
#COMMENT: A newly allocated string that must
    be freed with g_free()
#NAME: flags
#PARENT: Gio.resources_get_info.gboolean
#COMMENT: a location to place the flags about the file,
   or %NULL if the length is not needed
#NAME: res
#PARENT: Gio.DBusConnection.flush_finish.gboolean
#COMMENT: a #GAsyncResult obtained from the #GAsyncReadyCallback passed
    to g_dbus_connection_flush()
#NAME: get_last_serial
#PARENT: Gio.DBusConnection
#COMMENT: Retrieves the last serial number assigned to a #GDBusMessage on
the current thread. This includes messages sent via both low-level
API such as g_dbus_connection_send_message() as well as
high-level API such as g_dbus_connection_emit_signal(),
g_dbus_connection_call() or g_dbus_proxy_call().
#NAME: new_loopback
#PARENT: Gio.InetAddress.new_loopback
#COMMENT: a new #GInetAddress corresponding to the loopback address
for @family.
#NAME: path
#PARENT: Gio.Resource.get_info.gboolean
#COMMENT: A pathname inside the resource
#NAME: flags
#PARENT: Gio.bus_watch_name_on_connection_with_closures.guint
#COMMENT: Flags from the #GBusNameWatcherFlags enumeration.
#NAME: can_unmount
#PARENT: Gio.Mount.can_unmount
#COMMENT: %TRUE if the @mount can be unmounted.
#NAME: flags
#PARENT: Gio.DBusConnection.new.none
#COMMENT: flags describing how to make the connection
#NAME: data
#PARENT: Gio.SocketControlMessage.serialize.none
#COMMENT: A buffer to write data to
#NAME: group
#PARENT: Gio.Socket.join_multicast_group.gboolean
#COMMENT: a #GInetAddress specifying the group address to join.
#NAME: backend
#PARENT: Gio.TlsBackend.get_server_connection_type.GType
#COMMENT: the #GTlsBackend
#NAME: new_for_xml
#PARENT: Gio.DBusNodeInfo
#COMMENT: Parses @xml_data and returns a #GDBusNodeInfo representing the data.

The introspection XML must contain exactly one top-level
<node> element.

Note that this routine is using a
[GMarkup][glib-Simple-XML-Subset-Parser.description]-based
parser that only accepts a subset of valid XML documents.
#NAME: read_line
#PARENT: Gio.DataInputStream.read_line
#COMMENT: 
 a NUL terminated byte array with the line that was read in
 (without the newlines).  Set @length to a #gsize to get the length
 of the read line.  On an error, it will return %NULL and @error
 will be set. If there's no content to read, it will still return
 %NULL, but @error won't be set.
#NAME: attributes
#PARENT: Gio.File.enumerate_children.FileEnumerator
#COMMENT: an attribute query string
#NAME: initial_text
#PARENT: Gio.FilenameCompleter.get_completion_suffix.utf8
#COMMENT: text to be completed.
#NAME: put_uint32
#PARENT: Gio.DataOutputStream
#COMMENT: Puts an unsigned 32-bit integer into the stream.
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.get_exit_status.gint
#COMMENT: a #GApplicationCommandLine
#NAME: SettingsBackend
#PARENT: Gio
#COMMENT: The #GSettingsBackend interface defines a generic interface for
non-strictly-typed data that is stored in a hierarchy. To implement
an alternative storage backend for #GSettings, you need to implement
the #GSettingsBackend interface and then make it implement the
extension point #G_SETTINGS_BACKEND_EXTENSION_POINT_NAME.

The interface defines methods for reading and writing values, a
method for determining if writing of certain values will fail
(lockdown) and a change notification mechanism.

The semantics of the interface are very precisely defined and
implementations must carefully adhere to the expectations of
callers that are documented on each of the interface methods.

Some of the GSettingsBackend functions accept or return a #GTree.
These trees always have strings as keys and #GVariant as values.
g_settings_backend_create_tree() is a convenience function to create
suitable trees.

The GSettingsBackend API is exported to allow third-party
implementations, but does not carry the same stability guarantees
as the public GIO API. For this reason, you have to define the
C preprocessor symbol %G_SETTINGS_ENABLE_BACKEND before including
`gio/gsettingsbackend.h`.
#NAME: action
#PARENT: Gio.Action.get_name.utf8
#COMMENT: a #GAction
#NAME: file
#PARENT: Gio.FileIface.unmount_mountable_with_operation_finish.unmount_mountable_with_operation_finish.gboolean
#COMMENT: input #GFile
#NAME: changed
#PARENT: Gio.FileMonitor
#COMMENT: Emitted when @file has been changed.

If using %G_FILE_MONITOR_WATCH_RENAMES on a directory monitor, and
the information is available (and if supported by the backend),
@event_type may be %G_FILE_MONITOR_EVENT_RENAMED,
%G_FILE_MONITOR_EVENT_MOVED_IN or %G_FILE_MONITOR_EVENT_MOVED_OUT.

In all cases @file will be a child of the monitored directory.  For
renames, @file will be the old name and @other_file is the new
name.  For "moved in" events, @file is the name of the file that
appeared and @other_file is the old name that it was moved from (in
another directory).  For "moved out" events, @file is the name of
the file that used to be in this directory and @other_file is the
name of the file at its new location.

It makes sense to treat %G_FILE_MONITOR_EVENT_MOVED_IN as
equivalent to %G_FILE_MONITOR_EVENT_CREATED and
%G_FILE_MONITOR_EVENT_MOVED_OUT as equivalent to
%G_FILE_MONITOR_EVENT_DELETED, with extra information.
%G_FILE_MONITOR_EVENT_RENAMED is equivalent to a delete/create
pair.  This is exactly how the events will be reported in the case
that the %G_FILE_MONITOR_WATCH_RENAMES flag is not in use.

If using the deprecated flag %G_FILE_MONITOR_SEND_MOVED flag and @event_type is
#G_FILE_MONITOR_EVENT_MOVED, @file will be set to a #GFile containing the
old path, and @other_file will be set to a #GFile containing the new path.

In all the other cases, @other_file will be set to #NULL.
#NAME: NetworkAddress
#PARENT: Gio
#COMMENT: #GNetworkAddress provides an easy way to resolve a hostname and
then attempt to connect to that host, handling the possibility of
multiple IP addresses and multiple address families.

See #GSocketConnectable for and example of using the connectable
interface.
#NAME: file
#PARENT: Gio.File.start_mountable.none
#COMMENT: input #GFile
#NAME: not_symbolic_link
#PARENT: Gio.IOErrorEnum
#COMMENT: File is not a symbolic link.
#NAME: module
#PARENT: Gio.IOModule.unload.none
#COMMENT: a #GIOModule.
#NAME: close_fd
#PARENT: Gio.UnixInputStream.new.InputStream
#COMMENT: %TRUE to close the file descriptor when done
#NAME: get_priority
#PARENT: Gio.IOExtension.get_priority
#COMMENT: the priority of @extension
#NAME: result
#PARENT: Gio.FileInfo.get_modification_time.none
#COMMENT: a #GTimeVal.
#NAME: _unregister
#PARENT: Gio.Resource
#COMMENT: Unregisters the resource from the process-global set of resources.
#NAME: remove_interface
#PARENT: Gio.DBusObjectSkeleton
#COMMENT: Removes @interface_ from @object.
#NAME: key_file
#PARENT: Gio.TlsCertificate.new_from_files.TlsCertificate
#COMMENT: file containing a PEM-encoded private key to import
#NAME: monitor_dir
#PARENT: Gio.File.monitor_dir
#COMMENT: a #GFileMonitor for the given @file,
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: invalid_file_content
#PARENT: Gio.DBusError
#COMMENT: A file contains invalid syntax or is otherwise broken.
#NAME: allow_reuse
#PARENT: Gio.Socket.bind.gboolean
#COMMENT: whether to allow reusing this address
#NAME: add_interface
#PARENT: Gio.DBusObjectSkeleton
#COMMENT: Adds @interface_ to @object.

If @object already contains a #GDBusInterfaceSkeleton with the same
interface name, it is removed before @interface_ is added.

Note that @object takes its own reference on @interface_ and holds
it until removed.
#NAME: drive-eject-button
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when the eject button is pressed on @drive.
#NAME: self
#PARENT: Gio.TestDBus.get_flags.TestDBusFlags
#COMMENT: a #GTestDBus
#NAME: set_sort_order
#PARENT: Gio.FileInfo
#COMMENT: Sets the sort order attribute in the file info structure. See
%G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.
#NAME: n_parameters
#PARENT: Gio.AsyncInitable.newv_async.none
#COMMENT: the number of parameters in @parameters
#NAME: set_cwd
#PARENT: Gio.SubprocessLauncher
#COMMENT: Sets the current working directory that processes will be launched
with.

By default processes are launched with the current working directory
of the launching process at the time of launch.
#NAME: stream
#PARENT: Gio.FileInputStream.query_info_finish.FileInfo
#COMMENT: a #GFileInputStream.
#NAME: new
#PARENT: Gio.Application
#COMMENT: Creates a new #GApplication instance.

If non-%NULL, the application id must be valid.  See
g_application_id_is_valid().

If no application ID is given then some features of #GApplication
(most notably application uniqueness) will be disabled.
#NAME: get_timeout
#PARENT: Gio.SocketClient
#COMMENT: Gets the I/O timeout time for sockets created by @client.

See g_socket_client_set_timeout() for details.
#NAME: new
#PARENT: Gio.ZlibCompressor
#COMMENT: Creates a new #GZlibCompressor.
#NAME: name
#PARENT: Gio.SettingsSchema.has_key.gboolean
#COMMENT: the name of a key
#NAME: accept_async
#PARENT: Gio.SocketListener
#COMMENT: This is the asynchronous version of g_socket_listener_accept().

When the operation is finished @callback will be
called. You can then call g_socket_listener_accept_socket()
to get the result of the operation.
#NAME: boolean
#PARENT: Gio.FileAttributeType
#COMMENT: a boolean value.
#NAME: result
#PARENT: Gio.SocketListener.accept_socket_finish.Socket
#COMMENT: a #GAsyncResult.
#NAME: proxy
#PARENT: Gio.DBusProxy.set_interface_info.none
#COMMENT: A #GDBusProxy
#NAME: get
#PARENT: Gio.DBusActionGroup
#COMMENT: Obtains a #GDBusActionGroup for the action group which is exported at
the given @bus_name and @object_path.

The thread default main context is taken at the time of this call.
All signals on the menu model (and any linked models) are reported
with respect to this context.  All calls on the returned menu model
(and linked models) must also originate from this same context, with
the thread default main context unchanged.

This call is non-blocking.  The returned action group may or may not
already be filled in.  The correct thing to do is connect the signals
for the action group to monitor for changes and then to call
g_action_group_list_actions() to get the initial list.
#NAME: socket
#PARENT: Gio.Socket.get_local_address.SocketAddress
#COMMENT: a #GSocket.
#NAME: get_required_type
#PARENT: Gio.IOExtensionPoint.get_required_type
#COMMENT: the #GType that all implementations must have,
    or #G_TYPE_INVALID if the extension point has no required type
#NAME: read_all_async
#PARENT: Gio.InputStream
#COMMENT: Request an asynchronous read of @count bytes from the stream into the
buffer starting at @buffer.

This is the asynchronous equivalent of g_input_stream_read_all().

Call g_input_stream_read_all_finish() to collect the result.

Any outstanding I/O request with higher priority (lower numerical
value) will be executed before an outstanding request with lower
priority. Default priority is %G_PRIORITY_DEFAULT.
#NAME: item_index
#PARENT: Gio.MenuModel.get_item_link.MenuModel
#COMMENT: the index of the item
#NAME: mount_operation
#PARENT: Gio.Mount.remount.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: detailed_action
#PARENT: Gio.Notification.set_default_action.none
#COMMENT: a detailed action name
#NAME: SocketConnectableIface
#PARENT: Gio
#COMMENT: Provides an interface for returning a #GSocketAddressEnumerator
and #GProxyAddressEnumerator
#NAME: 
#PARENT: Gio.OutputStream.printf.gboolean...
#COMMENT: the parameters to insert into the format string
#NAME: client
#PARENT: Gio.SocketClient.connect_finish.SocketConnection
#COMMENT: a #GSocketClient.
#NAME: flags
#PARENT: Gio.FileIface.copy.copy.gboolean
#COMMENT: set of #GFileCopyFlags
#NAME: method_return
#PARENT: Gio.DBusMessageType
#COMMENT: Method reply.
#NAME: result
#PARENT: Gio.Subprocess.wait_check_finish.gboolean
#COMMENT: the #GAsyncResult passed to your #GAsyncReadyCallback
#NAME: domain
#PARENT: Gio.DBusMethodInvocation.return_error_valist.none
#COMMENT: A #GQuark for the #GError error domain.
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.unexport.none
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: introspect
#PARENT: Gio.DBusSubtreeVTable
#COMMENT: Function for introspecting a child node.
#NAME: file
#PARENT: Gio.FileIface.eject_mountable_with_operation.eject_mountable_with_operation.none
#COMMENT: input #GFile
#NAME: capabilities
#PARENT: Gio.DBusConnection
#COMMENT: Flags from the #GDBusCapabilityFlags enumeration
representing connection features negotiated with the other peer.
#NAME: get_enable_proxy
#PARENT: Gio.SocketClient.get_enable_proxy
#COMMENT: whether proxying is enabled
#NAME: purpose
#PARENT: Gio.TlsDatabase.verify_chain.TlsCertificateFlags
#COMMENT: the purpose that this certificate chain will be used for.
#NAME: launch-failed
#PARENT: Gio.AppLaunchContext
#COMMENT: The ::launch-failed signal is emitted when a #GAppInfo launch
fails. The startup notification id is provided, so that the launcher
can cancel the startup notification.
#NAME: new
#PARENT: Gio.SimpleAction
#COMMENT: Creates a new action.

The created action is stateless.  See g_simple_action_new_stateful().
#NAME: new_for_string
#PARENT: Gio.Icon.new_for_string
#COMMENT: An object implementing the #GIcon
         interface or %NULL if @error is set.
#NAME: stderr_pipe
#PARENT: Gio.SubprocessFlags
#COMMENT: create a pipe for the stderr of the
  spawned process that can be accessed with
  g_subprocess_get_stderr_pipe().
#NAME: none
#PARENT: Gio.TestDBusFlags
#COMMENT: No flags.
#NAME: ActionGroup
#PARENT: Gio
#COMMENT: #GActionGroup represents a group of actions. Actions can be used to
expose functionality in a structured way, either from one part of a
program to another, or to the outside world. Action groups are often
used together with a #GMenuModel that provides additional
representation data for displaying the actions to the user, e.g. in
a menu.

The main way to interact with the actions in a GActionGroup is to
activate them with g_action_group_activate_action(). Activating an
action may require a #GVariant parameter. The required type of the
parameter can be inquired with g_action_group_get_action_parameter_type().
Actions may be disabled, see g_action_group_get_action_enabled().
Activating a disabled action has no effect.

Actions may optionally have a state in the form of a #GVariant. The
current state of an action can be inquired with
g_action_group_get_action_state(). Activating a stateful action may
change its state, but it is also possible to set the state by calling
g_action_group_change_action_state().

As typical example, consider a text editing application which has an
option to change the current font to 'bold'. A good way to represent
this would be a stateful action, with a boolean state. Activating the
action would toggle the state.

Each action in the group has a unique name (which is a string).  All
method calls, except g_action_group_list_actions() take the name of
an action as an argument.

The #GActionGroup API is meant to be the 'public' API to the action
group.  The calls here are exactly the interaction that 'external
forces' (eg: UI, incoming D-Bus messages, etc.) are supposed to have
with actions.  'Internal' APIs (ie: ones meant only to be accessed by
the action group implementation) are found on subclasses.  This is
why you will find - for example - g_action_group_get_action_enabled()
but not an equivalent set() call.

Signals are emitted on the action group in response to state changes
on individual actions.

Implementations of #GActionGroup should provide implementations for
the virtual functions g_action_group_list_actions() and
g_action_group_query_action().  The other virtual functions should
not be implemented - their "wrappers" are actually implemented with
calls to g_action_group_query_action().
#NAME: uri
#PARENT: Gio.File.new_for_uri.File
#COMMENT: a UTF-8 string containing a URI
#NAME: get_item_link
#PARENT: Gio.MenuModelClass.get_item_link.get_item_link
#COMMENT: the linked #GMenuModel, or %NULL
#NAME: lookup_records_async
#PARENT: Gio.Resolver
#COMMENT: Begins asynchronously performing a DNS lookup for the given
@rrname, and eventually calls @callback, which must call
g_resolver_lookup_records_finish() to get the final result. See
g_resolver_lookup_records() for more details.
#NAME: new
#PARENT: Gio.Cancellable.new
#COMMENT: a #GCancellable.
#NAME: VOLUME_IDENTIFIER_KIND_LABEL
#PARENT: Gio
#COMMENT: The string used to obtain a filesystem label with g_volume_get_identifier().
#NAME: filename
#PARENT: Gio.IOModule.new.IOModule
#COMMENT: filename of the shared library module.
#NAME: simple
#PARENT: Gio.SimpleActionGroup.lookup.Action
#COMMENT: a #GSimpleActionGroup
#NAME: replace_readwrite_async
#PARENT: Gio.File
#COMMENT: Asynchronously overwrites the file in read-write mode,
replacing the contents, possibly creating a backup copy
of the file first.

For more details, see g_file_replace_readwrite() which is
the synchronous version of this call.

When the operation is finished, @callback will be called.
You can then call g_file_replace_readwrite_finish() to get
the result of the operation.
#NAME: extension
#PARENT: Gio.IOExtension.ref_class.GObject.TypeClass
#COMMENT: a #GIOExtension
#NAME: stream
#PARENT: Gio.InputStreamClass.read_async.read_async.none
#COMMENT: A #GInputStream.
#NAME: Initable
#PARENT: Gio
#COMMENT: #GInitable is implemented by objects that can fail during
initialization. If an object implements this interface then
it must be initialized as the first thing after construction,
either via g_initable_init() or g_async_initable_init_async()
(the latter is only available if it also implements #GAsyncInitable).

If the object is not initialized, or initialization returns with an
error, then all operations on the object except g_object_ref() and
g_object_unref() are considered to be invalid, and have undefined
behaviour. They will often fail with g_critical() or g_warning(), but
this must not be relied on.

Users of objects implementing this are not intended to use
the interface method directly, instead it will be used automatically
in various ways. For C applications you generally just call
g_initable_new() directly, or indirectly via a foo_thing_new() wrapper.
This will call g_initable_init() under the cover, returning %NULL and
setting a #GError on failure (at which point the instance is
unreferenced).

For bindings in languages where the native constructor supports
exceptions the binding could check for objects implemention %GInitable
during normal construction and automatically initialize them, throwing
an exception on failure.
#NAME: result
#PARENT: Gio.ResolverClass.lookup_by_address_finish.lookup_by_address_finish.utf8
#COMMENT: the result passed to your #GAsyncReadyCallback
#NAME: connection
#PARENT: Gio.DBusMenuModel.get.DBusMenuModel
#COMMENT: a #GDBusConnection
#NAME: get_destination
#PARENT: Gio.DBusMessage
#COMMENT: Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION header field.
#NAME: init_finish
#PARENT: Gio.AsyncInitableIface.init_finish.init_finish
#COMMENT: %TRUE if successful. If an error has occurred, this function
will return %FALSE and set @error appropriately if present.
#NAME: icon
#PARENT: Gio.FileInfo.set_symbolic_icon.none
#COMMENT: a #GIcon.
#NAME: method_call
#PARENT: Gio.DBusInterfaceVTable
#COMMENT: Function for handling incoming method calls.
#NAME: cancellable
#PARENT: Gio.File.create_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: listener
#PARENT: Gio.SocketListener.accept.SocketConnection
#COMMENT: a #GSocketListener
#NAME: flags
#PARENT: Gio.DBusInterfaceSkeleton.set_flags.none
#COMMENT: Flags from the #GDBusInterfaceSkeletonFlags enumeration.
#NAME: splice_finish
#PARENT: Gio.IOStream.splice_finish
#COMMENT: %TRUE on success, %FALSE otherwise.
#NAME: user_data
#PARENT: Gio.BusNameAppearedCallback.none
#COMMENT: User data passed to g_bus_watch_name().
#NAME: vfs
#PARENT: Gio.VfsClass.get_file_for_uri.get_file_for_uri.File
#COMMENT: a#GVfs.
#NAME: had_error
#PARENT: Gio.Task.had_error
#COMMENT: %TRUE if the task resulted in an error, %FALSE otherwise.
#NAME: write_bytes_async
#PARENT: Gio.OutputStream
#COMMENT: This function is similar to g_output_stream_write_async(), but
takes a #GBytes as input.  Due to the refcounted nature of #GBytes,
this allows the stream to avoid taking a copy of the data.

However, note that this function may still perform partial writes,
just like g_output_stream_write_async(). If that occurs, to continue
writing, you will need to create a new #GBytes containing just the
remaining bytes, using g_bytes_new_from_bytes(). Passing the same
#GBytes instance multiple times potentially can result in duplicated
data in the output stream.

For the synchronous, blocking version of this function, see
g_output_stream_write_bytes().
#NAME: user_data
#PARENT: Gio.ResolverClass.lookup_by_address_async.lookup_by_address_async.none
#COMMENT: data for @callback
#NAME: new
#PARENT: Gio.SocketListener.new
#COMMENT: a new #GSocketListener.
#NAME: user_data
#PARENT: Gio.ActionMap.add_action_entries.none
#COMMENT: the user data for signal connections
#NAME: set_newline_type
#PARENT: Gio.DataInputStream
#COMMENT: Sets the newline type for the @stream.

Note that using G_DATA_STREAM_NEWLINE_TYPE_ANY is slightly unsafe. If a read
chunk ends in "CR" we must read an additional byte to know if this is "CR" or
"CR LF", and this might block if there is no more data available.
#NAME: set_num_unix_fds
#PARENT: Gio.DBusMessage
#COMMENT: Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header field.
#NAME: set_uri_proxy
#PARENT: Gio.SimpleProxyResolver
#COMMENT: Adds a URI-scheme-specific proxy to @resolver; URIs whose scheme
matches @uri_scheme (and which don't match
#GSimpleProxyResolver:ignore-hosts) will be proxied via @proxy.

As with #GSimpleProxyResolver:default-proxy, if @proxy starts with
"socks://", #GSimpleProxyResolver will treat it
as referring to all three of the socks5, socks4a, and socks4 proxy
types.
#NAME: get_interfaces
#PARENT: Gio.DBusObject
#COMMENT: Gets the D-Bus interfaces associated with @object.
#NAME: dbus_generate_guid
#PARENT: Gio
#COMMENT: Generate a D-Bus GUID that can be used with
e.g. g_dbus_connection_new().

See the D-Bus specification regarding what strings are valid D-Bus
GUID (for example, D-Bus GUIDs are not RFC-4122 compliant).
#NAME: flags
#PARENT: Gio.FileIface.create_async.create_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: static_resource
#PARENT: Gio.StaticResource.fini.none
#COMMENT: pointer to a static #GStaticResource
#NAME: info
#PARENT: Gio.DesktopAppInfo.get_startup_wm_class.utf8
#COMMENT: a #GDesktopAppInfo that supports startup notify
#NAME: string
#PARENT: Gio.dbus_address_escape_value.utf8
#COMMENT: an unescaped string to be included in a D-Bus address
    as the value in a key-value pair
#NAME: bus-type
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: If this property is not %G_BUS_TYPE_NONE, then
#GDBusObjectManagerClient:connection must be %NULL and will be set to the
#GDBusConnection obtained by calling g_bus_get() with the value
of this property.
#NAME: action_group
#PARENT: Gio.ActionGroup.action_removed.none
#COMMENT: a #GActionGroup
#NAME: file
#PARENT: Gio.File.query_info.FileInfo
#COMMENT: input #GFile
#NAME: get_next
#PARENT: Gio.MenuAttributeIter
#COMMENT: This function combines g_menu_attribute_iter_next() with
g_menu_attribute_iter_get_name() and g_menu_attribute_iter_get_value().

First the iterator is advanced to the next (possibly first) attribute.
If that fails, then %FALSE is returned and there are no other
effects.

If successful, @name and @value are set to the name and value of the
attribute that has just been advanced to.  At this point,
g_menu_attribute_iter_get_name() and g_menu_attribute_iter_get_value() will
return the same values again.

The value returned in @name remains valid for as long as the iterator
remains at the current position.  The value returned in @value must
be unreffed using g_variant_unref() when it is no longer in use.
#NAME: dbus_is_address
#PARENT: Gio.dbus_is_address
#COMMENT: %TRUE if @string is a valid D-Bus address, %FALSE otherwise.
#NAME: callback
#PARENT: Gio.DBusConnection.new_for_address.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: callback
#PARENT: Gio.OutputStream.write_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: schema-id
#PARENT: Gio.Settings
#COMMENT: The name of the schema that describes the types of keys
for this #GSettings object.
#NAME: volume_monitor
#PARENT: Gio.VolumeMonitor.get_mounts.Mount
#COMMENT: a #GVolumeMonitor.
#NAME: position
#PARENT: Gio.ListStore.splice.none
#COMMENT: the position at which to make the change
#NAME: retry
#PARENT: Gio.TlsPasswordFlags
#COMMENT: The password was wrong, and the user should retry.
#NAME: stream1
#PARENT: Gio.IOStream.splice_async.none
#COMMENT: a #GIOStream.
#NAME: stream2
#PARENT: Gio.IOStream.splice_async.none
#COMMENT: a #GIOStream.
#NAME: SubprocessFlags
#PARENT: Gio
#COMMENT: Flags to define the behaviour of a #GSubprocess.

Note that the default for stdin is to redirect from /dev/null.  For
stdout and stderr the default are for them to inherit the
corresponding descriptor from the calling process.

Note that it is a programmer error to mix 'incompatible' flags.  For
example, you may not request both %G_SUBPROCESS_FLAGS_STDOUT_PIPE and
%G_SUBPROCESS_FLAGS_STDOUT_SILENCE.
#NAME: lookup_method
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: Looks up information about a method.

The cost of this function is O(n) in number of methods unless
g_dbus_interface_info_cache_build() has been used on @info.
#NAME: callback
#PARENT: Gio.Task.new.Task
#COMMENT: a #GAsyncReadyCallback.
#NAME: uri
#PARENT: Gio.SocketClient.connect_to_uri_async.none
#COMMENT: a network uri
#NAME: file_parse_name
#PARENT: Gio
#COMMENT: Constructs a #GFile with the given @parse_name (i.e. something
given by g_file_get_parse_name()). This operation never fails,
but the returned object might not support any I/O operation if
the @parse_name cannot be parsed.
#NAME: context
#PARENT: Gio.AppLaunchContext.setenv.none
#COMMENT: a #GAppLaunchContext
#NAME: cache_release
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: Decrements the usage count for the cache for @info built by
g_dbus_interface_info_cache_build() (if any) and frees the
resources used by the cache if the usage count drops to zero.
#NAME: file
#PARENT: Gio.File.load_contents_async.none
#COMMENT: input #GFile
#NAME: new_from_file
#PARENT: Gio.TlsCertificate
#COMMENT: Creates a #GTlsCertificate from the PEM-encoded data in @file. The
returned certificate will be the first certificate found in @file. As
of GLib 2.44, if @file contains more certificates it will try to load
a certificate chain. All certificates will be verified in the order
found (top-level certificate should be the last one in the file) and
the #GTlsCertificate:issuer property of each certificate will be set
accordingly if the verification succeeds. If any certificate in the
chain cannot be verified, the first certificate in the file will
still be returned.

If @file cannot be read or parsed, the function will return %NULL and
set @error. Otherwise, this behaves like
g_tls_certificate_new_from_pem().
#NAME: priority
#PARENT: Gio.io_extension_point_implement.IOExtension
#COMMENT: the priority for the extension
#NAME: info
#PARENT: Gio.FileInfo.set_attribute_mask.none
#COMMENT: a #GFileInfo.
#NAME: error
#PARENT: Gio.OutputStream.vprintf.gboolean
#COMMENT: location to store the error occurring, or %NULL to ignore
#NAME: get_attribute_type
#PARENT: Gio.FileInfo
#COMMENT: Gets the attribute type for an attribute key.
#NAME: outbuf_size
#PARENT: Gio.Converter.convert.ConverterResult
#COMMENT: the number of bytes in @outbuf, must be at least one
#NAME: stream
#PARENT: Gio.InputStream.read_bytes.GLib.Bytes
#COMMENT: a #GInputStream.
#NAME: info
#PARENT: Gio.FileInfo.remove_attribute.none
#COMMENT: a #GFileInfo.
#NAME: application
#PARENT: Gio.Application.set_action_group.none
#COMMENT: a #GApplication
#NAME: callback
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle_async.lookup_certificate_for_handle_async.none
#COMMENT: callback to call when the operation completes
#NAME: get_item_link
#PARENT: Gio.MenuModel.get_item_link
#COMMENT: the linked #GMenuModel, or %NULL
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.get_message.DBusMessage
#COMMENT: A #GDBusMethodInvocation.
#NAME: new_finish
#PARENT: Gio.DBusProxy
#COMMENT: Finishes creating a #GDBusProxy.
#NAME: initable
#PARENT: Gio.Initable.init.gboolean
#COMMENT: a #GInitable.
#NAME: none
#PARENT: Gio.SubprocessFlags
#COMMENT: No flags.
#NAME: cancellable
#PARENT: Gio.MountIface.eject.eject.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: ostream
#PARENT: Gio.MemoryOutputStream.steal_as_bytes.GLib.Bytes
#COMMENT: a #GMemoryOutputStream
#NAME: model
#PARENT: Gio.MenuItem.new_from_model.MenuItem
#COMMENT: a #GMenuModel
#NAME: application
#PARENT: Gio.Application.set_application_id.none
#COMMENT: a #GApplication
#NAME: stream
#PARENT: Gio.OutputStream.write_bytes_async.none
#COMMENT: A #GOutputStream.
#NAME: use-default-fallbacks
#PARENT: Gio.ThemedIcon
#COMMENT: Whether to use the default fallbacks found by shortening the icon name
at '-' characters. If the "names" array has more than one element,
ignores any past the first.

For example, if the icon name was "gnome-dev-cdrom-audio", the array
would become
|[<!-- language="C" -->
{
  "gnome-dev-cdrom-audio",
  "gnome-dev-cdrom",
  "gnome-dev",
  "gnome",
  NULL
};
]|
#NAME: self
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle.lookup_certificate_for_handle.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: mount_path
#PARENT: Gio.unix_is_mount_path_system_internal.gboolean
#COMMENT: a mount path, e.g. `/media/disk` or `/usr`
#NAME: get_content_type
#PARENT: Gio.FileInfo.get_content_type
#COMMENT: a string containing the file's content type.
#NAME: user_data
#PARENT: Gio.FileIface.poll_mountable.poll_mountable.none
#COMMENT: the data to pass to callback function
#NAME: accept-certificate
#PARENT: Gio.TlsConnection
#COMMENT: Emitted during the TLS handshake after the peer certificate has
been received. You can examine @peer_cert's certification path by
calling g_tls_certificate_get_issuer() on it.

For a client-side connection, @peer_cert is the server's
certificate, and the signal will only be emitted if the
certificate was not acceptable according to @conn's
#GTlsClientConnection:validation_flags. If you would like the
certificate to be accepted despite @errors, return %TRUE from the
signal handler. Otherwise, if no handler accepts the certificate,
the handshake will fail with %G_TLS_ERROR_BAD_CERTIFICATE.

For a server-side connection, @peer_cert is the certificate
presented by the client, if this was requested via the server's
#GTlsServerConnection:authentication_mode. On the server side,
the signal is always emitted when the client presents a
certificate, and the certificate will only be accepted if a
handler returns %TRUE.

Note that if this signal is emitted as part of asynchronous I/O
in the main thread, then you should not attempt to interact with
the user before returning from the signal handler. If you want to
let the user decide whether or not to accept the certificate, you
would have to return %FALSE from the signal handler on the first
attempt, and then after the connection attempt returns a
%G_TLS_ERROR_HANDSHAKE, you can interact with the user, and if
the user decides to accept the certificate, remember that fact,
create a new connection, and return %TRUE from the signal handler
the next time.

If you are doing I/O in another thread, you do not
need to worry about this, and can simply block in the signal
handler until the UI thread returns an answer.
#NAME: cancellable
#PARENT: Gio.FileIface.query_settable_attributes.query_settable_attributes.FileAttributeInfoList
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: callback
#PARENT: Gio.FileIOStream.query_info_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: NotificationPriority
#PARENT: Gio
#COMMENT: Priority levels for #GNotifications.
#NAME: size
#PARENT: Gio.ReallocFunc.gpointer
#COMMENT: size to reallocate @data to
#NAME: pollable_stream_write_all
#PARENT: Gio
#COMMENT: Tries to write @count bytes to @stream, as with
g_output_stream_write_all(), but using g_pollable_stream_write()
rather than g_output_stream_write().

On a successful write of @count bytes, %TRUE is returned, and
@bytes_written is set to @count.

If there is an error during the operation (including
%G_IO_ERROR_WOULD_BLOCK in the non-blocking case), %FALSE is
returned and @error is set to indicate the error status,
@bytes_written is updated to contain the number of bytes written
into the stream before the error occurred.

As with g_pollable_stream_write(), if @blocking is %FALSE, then
@stream must be a #GPollableOutputStream for which
g_pollable_output_stream_can_poll() returns %TRUE or else the
behavior is undefined. If @blocking is %TRUE, then @stream does not
need to be a #GPollableOutputStream.
#NAME: user_data
#PARENT: Gio.InputStream.read_all_async.none
#COMMENT: the data to pass to callback function
#NAME: enumerate_next
#PARENT: Gio.FileAttributeMatcher.enumerate_next
#COMMENT: a string containing the next attribute or %NULL if
no more attribute exist.
#NAME: none
#PARENT: Gio.DBusConnectionFlags
#COMMENT: No flags set.
#NAME: new
#PARENT: Gio.FileInfo.new
#COMMENT: a #GFileInfo.
#NAME: path
#PARENT: Gio.UnixSocketAddress.new_with_type.SocketAddress
#COMMENT: the name
#NAME: object
#PARENT: Gio.DBusObjectManagerServer.export.none
#COMMENT: A #GDBusObjectSkeleton.
#NAME: resolver
#PARENT: Gio.ResolverClass.lookup_by_address_async.lookup_by_address_async.none
#COMMENT: a #GResolver
#NAME: parameters
#PARENT: Gio.DBusMethodInvocation.return_value.none
#COMMENT: A #GVariant tuple with out parameters for the method or %NULL if not passing any parameters.
#NAME: user_data
#PARENT: Gio.Resolver.lookup_service_async.none
#COMMENT: data for @callback
#NAME: object_path
#PARENT: Gio.DBusObjectManagerServer.new.DBusObjectManagerServer
#COMMENT: The object path to export the manager object at.
#NAME: put_uint64
#PARENT: Gio.DataOutputStream
#COMMENT: Puts an unsigned 64-bit integer into the stream.
#NAME: file
#PARENT: Gio.File.make_directory.gboolean
#COMMENT: input #GFile
#NAME: mount
#PARENT: Gio.Volume
#COMMENT: Mounts a volume. This is an asynchronous operation, and is
finished by calling g_volume_mount_finish() with the @volume
and #GAsyncResult returned in the @callback.
#NAME: can_poll_for_media
#PARENT: Gio.DriveIface.can_poll_for_media.can_poll_for_media
#COMMENT: %TRUE if the @drive can be polled for media changes,
    %FALSE otherwise.
#NAME: flush
#PARENT: Gio.DBusConnection
#COMMENT: Asynchronously flushes @connection, that is, writes all queued
outgoing message to the transport and then flushes the transport
(using g_output_stream_flush_async()). This is useful in programs
that wants to emit a D-Bus signal and then exit immediately. Without
flushing the connection, there is no guaranteed that the message has
been sent to the networking buffers in the OS kernel.

This is an asynchronous method. When the operation is finished,
@callback will be invoked in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this method from. You can
then call g_dbus_connection_flush_finish() to get the result of the
operation. See g_dbus_connection_flush_sync() for the synchronous
version.
#NAME: new_from_directory
#PARENT: Gio.SettingsSchemaSource
#COMMENT: Attempts to create a new schema source corresponding to the contents
of the given directory.

This function is not required for normal uses of #GSettings but it
may be useful to authors of plugin management systems.

The directory should contain a file called `gschemas.compiled` as
produced by the [glib-compile-schemas][glib-compile-schemas] tool.

If @trusted is %TRUE then `gschemas.compiled` is trusted not to be
corrupted. This assumption has a performance advantage, but can result
in crashes or inconsistent behaviour in the case of a corrupted file.
Generally, you should set @trusted to %TRUE for files installed by the
system and to %FALSE for files in the home directory.

If @parent is non-%NULL then there are two effects.

First, if g_settings_schema_source_lookup() is called with the
@recursive flag set to %TRUE and the schema can not be found in the
source, the lookup will recurse to the parent.

Second, any references to other schemas specified within this
source (ie: `child` or `extends`) references may be resolved
from the @parent.

For this second reason, except in very unusual situations, the
@parent should probably be given as the default schema source, as
returned by g_settings_schema_source_get_default().
#NAME: Vfs
#PARENT: Gio
#COMMENT: Entry point for using GIO functionality.
#NAME: bytes
#PARENT: Gio.OutputStream.write_bytes.gssize
#COMMENT: the #GBytes to write
#NAME: connection
#PARENT: Gio.BusNameAppearedCallback.none
#COMMENT: The #GDBusConnection the name is being watched on.
#NAME: get_close_base_stream
#PARENT: Gio.FilterInputStream
#COMMENT: Returns whether the base stream will be closed when @stream is
closed.
#NAME: flags
#PARENT: Gio.FileIface.copy_async.copy_async.none
#COMMENT: set of #GFileCopyFlags
#NAME: get_size
#PARENT: Gio.FileInfo
#COMMENT: Gets the file's size.
#NAME: info
#PARENT: Gio.AppLaunchContext.get_display.utf8
#COMMENT: a #GAppInfo
#NAME: default_user
#PARENT: Gio.MountOperation.ask-password.none
#COMMENT: string containing the default user name.
#NAME: get_strv
#PARENT: Gio.Settings
#COMMENT: A convenience variant of g_settings_get() for string arrays.

It is a programmer error to give a @key that isn't specified as
having an array of strings type in the schema for @settings.
#NAME: set_blocking
#PARENT: Gio.Socket
#COMMENT: Sets the blocking mode of the socket. In blocking mode
all operations block until they succeed or there is an error. In
non-blocking mode all functions return results immediately or
with a %G_IO_ERROR_WOULD_BLOCK error.

All sockets are created in blocking mode. However, note that the
platform level socket is always non-blocking, and blocking mode
is a GSocket level feature.
#NAME: steal_fds
#PARENT: Gio.UnixFDMessage.steal_fds
#COMMENT: an array of file
    descriptors
#NAME: tls
#PARENT: Gio.SocketClient.set_tls.none
#COMMENT: whether to use TLS
#NAME: settings
#PARENT: Gio.Settings.get_string.utf8
#COMMENT: a #GSettings object
#NAME: to_tokens
#PARENT: Gio.IconIface.to_tokens.to_tokens
#COMMENT: An allocated NUL-terminated UTF8 string or
%NULL if @icon can't be serialized. Use g_free() to free.
#NAME: socket
#PARENT: Gio.Socket.listen.gboolean
#COMMENT: a #GSocket.
#NAME: copy_finish
#PARENT: Gio.File
#COMMENT: Finishes copying the file started with g_file_copy_async().
#NAME: get_broadcast
#PARENT: Gio.Socket.get_broadcast
#COMMENT: the broadcast setting on @socket
#NAME: callback
#PARENT: Gio.Task.report_new_error.none
#COMMENT: a #GAsyncReadyCallback.
#NAME: state-type
#PARENT: Gio.Action
#COMMENT: The #GVariantType of the state that the action has, or %NULL if the
action is stateless. This is immutable.
#NAME: connection
#PARENT: Gio.DBusObjectManagerClient.new_sync.DBusObjectManagerClient
#COMMENT: A #GDBusConnection.
#NAME: buffer
#PARENT: Gio.OutputStream.write_all.gboolean
#COMMENT: the buffer containing the data to write.
#NAME: user_data
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer_async.lookup_certificate_issuer_async.none
#COMMENT: the data to pass to the callback function
#NAME: action_name
#PARENT: Gio.ActionGroup.has_action.gboolean
#COMMENT: the name of the action to check for
#NAME: FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE
#PARENT: Gio
#COMMENT: A key in the "access" namespace for getting execution privileges.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
This attribute will be %TRUE if the user is able to execute the file.
#NAME: result
#PARENT: Gio.Drive.eject_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: cancellable
#PARENT: Gio.DBusProxy.new.none
#COMMENT: A #GCancellable or %NULL.
#NAME: num_messages
#PARENT: Gio.Socket.send_messages.gint
#COMMENT: the number of elements in @messages
#NAME: list_sort
#PARENT: Gio.SrvTarget
#COMMENT: Sorts @targets in place according to the algorithm in RFC 2782.
#NAME: get_term_sig
#PARENT: Gio.Subprocess.get_term_sig
#COMMENT: the signal causing termination
#NAME: action_group
#PARENT: Gio.ActionGroup.action_added.none
#COMMENT: a #GActionGroup
#NAME: flags
#PARENT: Gio.TlsDatabaseClass.verify_chain.verify_chain.TlsCertificateFlags
#COMMENT: additional verify flags
#NAME: cancellable
#PARENT: Gio.FileEnumerator.close.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: cancellable
#PARENT: Gio.UnixConnection.receive_credentials_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: new_with_fd_list
#PARENT: Gio.UnixFDMessage
#COMMENT: Creates a new #GUnixFDMessage containing @list.
#NAME: query_action
#PARENT: Gio.ActionGroup.query_action
#COMMENT: %TRUE if the action exists, else %FALSE
#NAME: source_object
#PARENT: Gio.SocketListener.accept_finish.SocketConnection
#COMMENT: Optional #GObject identifying this source
#NAME: callback
#PARENT: Gio.FileIface.start_mountable.start_mountable.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied, or %NULL
#NAME: lookup_records_finish
#PARENT: Gio.Resolver.lookup_records_finish
#COMMENT: a non-empty #GList of
#GVariant, or %NULL on error. You must free each of the records and the list
when you are done with it. (You can use g_list_free_full() with
g_variant_unref() to do this.)
#NAME: FilesystemPreviewType
#PARENT: Gio
#COMMENT: Indicates a hint from the file system whether files should be
previewed in a file manager. Returned as the value of the key
#G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW.
#NAME: FILE_ATTRIBUTE_STANDARD_TARGET_URI
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the target URI for the file, in
the case of %G_FILE_TYPE_SHORTCUT or %G_FILE_TYPE_MOUNTABLE files.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: drive
#PARENT: Gio.DriveIface.get_icon.get_icon.Icon
#COMMENT: a #GDrive.
#NAME: address
#PARENT: Gio.InetAddressClass.to_bytes.to_bytes.guint8
#COMMENT: a #GInetAddress
#NAME: fill_async
#PARENT: Gio.BufferedInputStream
#COMMENT: Reads data into @stream's buffer asynchronously, up to @count size.
@io_priority can be used to prioritize reads. For the synchronous
version of this function, see g_buffered_input_stream_fill().

If @count is -1 then the attempted read size is equal to the number
of bytes that are required to fill the buffer.
#NAME: fill_finish
#PARENT: Gio.BufferedInputStream
#COMMENT: Finishes an asynchronous read.
#NAME: FILE_ATTRIBUTE_TIME_CHANGED
#PARENT: Gio
#COMMENT: A key in the "time" namespace for getting the time the file was last
changed. Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64,
and contains the UNIX time since the file was last changed.

This corresponds to the traditional UNIX ctime.
#NAME: interaction
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer.lookup_certificate_issuer.TlsCertificate
#COMMENT: used to interact with the user if necessary
#NAME: value
#PARENT: Gio.Action.change_state.none
#COMMENT: the new state
#NAME: header_field
#PARENT: Gio.DBusMessage.set_header.none
#COMMENT: A 8-bit unsigned integer (typically a value from the #GDBusMessageHeaderField enumeration)
#NAME: self
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by_async.none
#COMMENT: a #GTlsDatabase
#NAME: resource
#PARENT: Gio.resources_unregister.none
#COMMENT: A #GResource
#NAME: res
#PARENT: Gio.FileIface.query_filesystem_info_finish.query_filesystem_info_finish.FileInfo
#COMMENT: a #GAsyncResult
#NAME: get_proxy_type_destroy_notify
#PARENT: Gio.DBusObjectManagerClient.new_for_bus_sync.DBusObjectManagerClient
#COMMENT: Free function for @get_proxy_type_user_data or %NULL.
#NAME: get_level
#PARENT: Gio.SocketControlMessage.get_level
#COMMENT: an integer describing the level
#NAME: port
#PARENT: Gio.SocketListener.add_inet_port.gboolean
#COMMENT: an IP port number (non-zero)
#NAME: list_actions
#PARENT: Gio.ActionGroup.list_actions
#COMMENT: a %NULL-terminated array of the names of the
actions in the groupb
#NAME: append
#PARENT: Gio.UnixFDList
#COMMENT: Adds a file descriptor to @list.

The file descriptor is duplicated using dup(). You keep your copy
of the descriptor and the copy contained in @list will be closed
when @list is finalized.

A possible cause of failure is exceeding the per-process or
system-wide file descriptor limit.

The index of the file descriptor in the list is returned.  If you use
this index with g_unix_fd_list_get() then you will receive back a
duplicated copy of the same file descriptor.
#NAME: drive
#PARENT: Gio.DriveIface.can_poll_for_media.can_poll_for_media.gboolean
#COMMENT: a #GDrive.
#NAME: res
#PARENT: Gio.AsyncResult.get_user_data.gpointer
#COMMENT: a #GAsyncResult.
#NAME: can_reach
#PARENT: Gio.NetworkMonitor
#COMMENT: Attempts to determine whether or not the host pointed to by
@connectable can be reached, without actually trying to connect to
it.

This may return %TRUE even when #GNetworkMonitor:network-available
is %FALSE, if, for example, @monitor can determine that
@connectable refers to a host on a local network.

If @monitor believes that an attempt to connect to @connectable
will succeed, it will return %TRUE. Otherwise, it will return
%FALSE and set @error to an appropriate error (such as
%G_IO_ERROR_HOST_UNREACHABLE).

Note that although this does not attempt to connect to
@connectable, it may still block for a brief period of time (eg,
trying to do multicast DNS on the local network), so if you do not
want to block, you should use g_network_monitor_can_reach_async().
#NAME: get_hostname
#PARENT: Gio.SrvTarget
#COMMENT: Gets @target's hostname (in ASCII form; if you are going to present
this to the user, you should use g_hostname_is_ascii_encoded() to
check if it contains encoded Unicode segments, and use
g_hostname_to_unicode() to convert it if it does.)
#NAME: conn
#PARENT: Gio.TlsClientConnection.get_validation_flags.TlsCertificateFlags
#COMMENT: the #GTlsClientConnection
#NAME: set_display_name_finish
#PARENT: Gio.File
#COMMENT: Finishes setting a display name started with
g_file_set_display_name_async().
#NAME: callback
#PARENT: Gio.DBusProxy.new_for_bus.none
#COMMENT: Callback function to invoke when the proxy is ready.
#NAME: user_data
#PARENT: Gio.OutputStream.splice_async.none
#COMMENT: user data passed to @callback.
#NAME: socket
#PARENT: Gio.Socket.set_keepalive.none
#COMMENT: a #GSocket.
#NAME: user_data
#PARENT: Gio.MountIface.eject_with_operation.eject_with_operation.none
#COMMENT: user data passed to @callback.
#NAME: read_bytes_finish
#PARENT: Gio.InputStream
#COMMENT: Finishes an asynchronous stream read-into-#GBytes operation.
#NAME: get_scheme
#PARENT: Gio.NetworkService.get_scheme
#COMMENT: @srv's scheme name
#NAME: file
#PARENT: Gio.File.create_async.none
#COMMENT: input #GFile
#NAME: stream
#PARENT: Gio.FileIOStream.query_info_finish.FileInfo
#COMMENT: a #GFileIOStream.
#NAME: get_file
#PARENT: Gio.FileIcon.get_file
#COMMENT: a #GFile, or %NULL.
#NAME: flags
#PARENT: Gio.SocketClient.set_tls_validation_flags.none
#COMMENT: the validation flags
#NAME: file
#PARENT: Gio.File.resolve_relative_path.File
#COMMENT: input #GFile
#NAME: get_symbolic_icon
#PARENT: Gio.Drive.get_symbolic_icon
#COMMENT: symbolic #GIcon for the @drive.
   Free the returned object with g_object_unref().
#NAME: error
#PARENT: Gio.DBusMethodInvocation.return_gerror.none
#COMMENT: A #GError.
#NAME: file
#PARENT: Gio.File.load_partial_contents_async.none
#COMMENT: input #GFile
#NAME: hash
#PARENT: Gio.Icon
#COMMENT: Gets a hash for an icon.
#NAME: partial_input
#PARENT: Gio.IOErrorEnum
#COMMENT: Need more input to finish operation. Since 2.24
#NAME: get_family
#PARENT: Gio.InetAddress.get_family
#COMMENT: @address's family
#NAME: load_partial_contents_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous partial load operation that was started
with g_file_load_partial_contents_async(). The data is always
zero-terminated, but this is not included in the resultant @length.
The returned @content should be freed with g_free() when no longer
needed.
#NAME: cancellable
#PARENT: Gio.File.delete_file.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: flags
#PARENT: Gio.File.query_info_async.none
#COMMENT: a set of #GFileQueryInfoFlags
#NAME: connection_closed
#PARENT: Gio.IOErrorEnum
#COMMENT: Connection closed by peer. Note that this
    is the same code as %G_IO_ERROR_BROKEN_PIPE; before 2.44 some
    "connection closed" errors returned %G_IO_ERROR_BROKEN_PIPE, but others
    returned %G_IO_ERROR_FAILED. Now they should all return the same
    value, which has this more logical name. Since 2.44.
#NAME: extension_point
#PARENT: Gio.IOExtensionPoint.get_extension_by_name.IOExtension
#COMMENT: a #GIOExtensionPoint
#NAME: File
#PARENT: Gio
#COMMENT: #GFile is a high level abstraction for manipulating files on a
virtual file system. #GFiles are lightweight, immutable objects
that do no I/O upon creation. It is necessary to understand that
#GFile objects do not represent files, merely an identifier for a
file. All file content I/O is implemented as streaming operations
(see #GInputStream and #GOutputStream).

To construct a #GFile, you can use:
- g_file_new_for_path() if you have a path.
- g_file_new_for_uri() if you have a URI.
- g_file_new_for_commandline_arg() for a command line argument.
- g_file_new_tmp() to create a temporary file from a template.
- g_file_parse_name() from a UTF-8 string gotten from g_file_get_parse_name().

One way to think of a #GFile is as an abstraction of a pathname. For
normal files the system pathname is what is stored internally, but as
#GFiles are extensible it could also be something else that corresponds
to a pathname in a userspace implementation of a filesystem.

#GFiles make up hierarchies of directories and files that correspond to
the files on a filesystem. You can move through the file system with
#GFile using g_file_get_parent() to get an identifier for the parent
directory, g_file_get_child() to get a child within a directory,
g_file_resolve_relative_path() to resolve a relative path between two
#GFiles. There can be multiple hierarchies, so you may not end up at
the same root if you repeatedly call g_file_get_parent() on two different
files.

All #GFiles have a basename (get with g_file_get_basename()). These names
are byte strings that are used to identify the file on the filesystem
(relative to its parent directory) and there is no guarantees that they
have any particular charset encoding or even make any sense at all. If
you want to use filenames in a user interface you should use the display
name that you can get by requesting the
%G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME attribute with g_file_query_info().
This is guaranteed to be in UTF-8 and can be used in a user interface.
But always store the real basename or the #GFile to use to actually
access the file, because there is no way to go from a display name to
the actual name.

Using #GFile as an identifier has the same weaknesses as using a path
in that there may be multiple aliases for the same file. For instance,
hard or soft links may cause two different #GFiles to refer to the same
file. Other possible causes for aliases are: case insensitive filesystems,
short and long names on FAT/NTFS, or bind mounts in Linux. If you want to
check if two #GFiles point to the same file you can query for the
%G_FILE_ATTRIBUTE_ID_FILE attribute. Note that #GFile does some trivial
canonicalization of pathnames passed in, so that trivial differences in
the path string used at creation (duplicated slashes, slash at end of
path, "." or ".." path segments, etc) does not create different #GFiles.

Many #GFile operations have both synchronous and asynchronous versions
to suit your application. Asynchronous versions of synchronous functions
simply have _async() appended to their function names. The asynchronous
I/O functions call a #GAsyncReadyCallback which is then used to finalize
the operation, producing a GAsyncResult which is then passed to the
function's matching _finish() operation.

It is highly recommended to use asynchronous calls when running within a
shared main loop, such as in the main thread of an application. This avoids
I/O operations blocking other sources on the main loop from being dispatched.
Synchronous I/O operations should be performed from worker threads. See the
[introduction to asynchronous programming section][async-programming] for
more.

Some #GFile operations almost always take a noticeable amount of time, and
so do not have synchronous analogs. Notable cases include:
- g_file_mount_mountable() to mount a mountable file.
- g_file_unmount_mountable_with_operation() to unmount a mountable file.
- g_file_eject_mountable_with_operation() to eject a mountable file.

## Entity Tags # {#gfile-etag}

One notable feature of #GFiles are entity tags, or "etags" for
short. Entity tags are somewhat like a more abstract version of the
traditional mtime, and can be used to quickly determine if the file
has been modified from the version on the file system. See the
HTTP 1.1
[specification](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)
for HTTP Etag headers, which are a very similar concept.
#NAME: is_active
#PARENT: Gio.Vfs
#COMMENT: Checks if the VFS is active.
#NAME: trash_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous file trashing operation, started with
g_file_trash_async().
#NAME: callback
#PARENT: Gio.Mount.unmount_with_operation.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: get_arguments
#PARENT: Gio.ApplicationCommandLine.get_arguments
#COMMENT: the string array
containing the arguments (the argv)
#NAME: new_for_path
#PARENT: Gio.File.new_for_path
#COMMENT: a new #GFile for the given @path.
  Free the returned object with g_object_unref().
#NAME: get_object
#PARENT: Gio.DBusObjectManagerIface.get_object.get_object
#COMMENT: A #GDBusObject or %NULL. Free with
  g_object_unref().
#NAME: client
#PARENT: Gio.SocketClient.get_timeout.guint
#COMMENT: a #GSocketClient
#NAME: lookup_certificate_for_handle
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle
#COMMENT: a newly allocated
#GTlsCertificate, or %NULL. Use g_object_unref() to release the certificate.
#NAME: get_path
#PARENT: Gio.UnixSocketAddress
#COMMENT: Gets @address's path, or for abstract sockets the "name".

Guaranteed to be zero-terminated, but an abstract socket
may contain embedded zeros, and thus you should use
g_unix_socket_address_get_path_len() to get the true length
of this string.
#NAME: flags
#PARENT: Gio.FileAttributeInfoList.add.none
#COMMENT: #GFileAttributeInfoFlags for the attribute.
#NAME: disconnected
#PARENT: Gio.DBusError
#COMMENT: The connection is disconnected and you're trying to use it.
#NAME: get_info
#PARENT: Gio.Resource.get_info
#COMMENT: %TRUE if the file was found. %FALSE if there were errors
#NAME: get_type
#PARENT: Gio.IOExtension.get_type
#COMMENT: the type of @extension
#NAME: callback
#PARENT: Gio.ResolverClass.lookup_by_name_async.lookup_by_name_async.none
#COMMENT: callback to call after resolution completes
#NAME: time_read
#PARENT: Gio.unix_mount_at.UnixMountEntry
#COMMENT: guint64 to contain a timestamp.
#NAME: set_close_base_stream
#PARENT: Gio.FilterOutputStream
#COMMENT: Sets whether the base stream will be closed when @stream is closed.
#NAME: network_monitor_get_default
#PARENT: Gio
#COMMENT: Gets the default #GNetworkMonitor for the system.
#NAME: info
#PARENT: Gio.DBusProxy.new_for_bus.none
#COMMENT: A #GDBusInterfaceInfo specifying the minimal interface that @proxy conforms to or %NULL.
#NAME: callback
#PARENT: Gio.TlsDatabase.verify_chain_async.none
#COMMENT: callback to call when the operation completes
#NAME: send_message_with_reply_sync
#PARENT: Gio.DBusConnection
#COMMENT: Synchronously sends @message to the peer represented by @connection
and blocks the calling thread until a reply is received or the
timeout is reached. See g_dbus_connection_send_message_with_reply()
for the asynchronous version of this method.

Unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
will be assigned by @connection and set on @message via
g_dbus_message_set_serial(). If @out_serial is not %NULL, then the
serial number used will be written to this location prior to
submitting the message to the underlying transport.

If @connection is closed then the operation will fail with
%G_IO_ERROR_CLOSED. If @cancellable is canceled, the operation will
fail with %G_IO_ERROR_CANCELLED. If @message is not well-formed,
the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.

Note that @error is only set if a local in-process error
occurred. That is to say that the returned #GDBusMessage object may
be of type %G_DBUS_MESSAGE_TYPE_ERROR. Use
g_dbus_message_to_gerror() to transcode this to a #GError.

See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
for an example of how to use this low-level API to send and receive
UNIX file descriptors.

Note that @message must be unlocked, unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.
#NAME: uri
#PARENT: Gio.file_new_for_uri.File
#COMMENT: a UTF-8 string containing a URI
#NAME: context
#PARENT: Gio.AppLaunchContextClass.get_display.get_display.utf8
#COMMENT: a #GAppLaunchContext
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.get_action_state_type.get_action_state_type.GLib.VariantType
#COMMENT: a #GActionGroup
#NAME: stream
#PARENT: Gio.DataInputStream.set_newline_type.none
#COMMENT: a #GDataInputStream.
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_byte.guint8
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: processes
#PARENT: Gio.MountOperation.show-processes.none
#COMMENT: an array of #GPid for processes
  blocking the operation.
#NAME: io_priority
#PARENT: Gio.TlsConnectionClass.handshake_async.handshake_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: callback
#PARENT: Gio.DBusProxy.call_with_unix_fd_list.none
#COMMENT: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't
care about the result of the method invocation.
#NAME: has_volumes
#PARENT: Gio.Drive.has_volumes
#COMMENT: %TRUE if the @drive contains volumes, %FALSE otherwise.
#NAME: contents
#PARENT: Gio.File.load_contents_finish.gboolean
#COMMENT: a location to place the contents of the file
#NAME: lookup_by_name_finish
#PARENT: Gio.Resolver
#COMMENT: Retrieves the result of a call to
g_resolver_lookup_by_name_async().

If the DNS resolution failed, @error (if non-%NULL) will be set to
a value from #GResolverError. If the operation was cancelled,
@error will be set to %G_IO_ERROR_CANCELLED.
#NAME: cancellable
#PARENT: Gio.BufferedInputStreamClass.fill_async.fill_async.none
#COMMENT: optional #GCancellable object
#NAME: load_contents
#PARENT: Gio.File
#COMMENT: Loads the content of the file into memory. The data is always
zero-terminated, but this is not included in the resultant @length.
The returned @content should be freed with g_free() when no longer
needed.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: converter
#PARENT: Gio.ConverterInputStream.new.InputStream
#COMMENT: a #GConverter
#NAME: stdin_buf
#PARENT: Gio.Subprocess.communicate_utf8.gboolean
#COMMENT: data to send to the stdin of the subprocess, or %NULL
#NAME: got-completion-data
#PARENT: Gio.FilenameCompleter
#COMMENT: Emitted when the file name completion information comes available.
#NAME: result
#PARENT: Gio.InputStream.read_all_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: outbuf
#PARENT: Gio.ConverterIface.convert.convert.ConverterResult
#COMMENT: a buffer to write converted data in.
#NAME: io_priority
#PARENT: Gio.File.replace_readwrite_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: cancellable
#PARENT: Gio.TlsInteraction.invoke_ask_password.TlsInteractionResult
#COMMENT: an optional #GCancellable cancellation object
#NAME: bytes_read
#PARENT: Gio.ConverterIface.convert.convert.ConverterResult
#COMMENT: will be set to the number of bytes read from @inbuf on success
#NAME: self
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer_async.none
#COMMENT: a #GTlsDatabase
#NAME: action_name
#PARENT: Gio.ActionMapInterface.remove_action.remove_action.none
#COMMENT: the name of the action
#NAME: cancellable
#PARENT: Gio.Resolver.lookup_service_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: attributes
#PARENT: Gio.FileInputStream.query_info.FileInfo
#COMMENT: a file attribute query string.
#NAME: preserve_serial
#PARENT: Gio.DBusSendMessageFlags
#COMMENT: Do not automatically
assign a serial number from the #GDBusConnection object when
sending a message.
#NAME: sender
#PARENT: Gio.DBusConnection.signal_subscribe.guint
#COMMENT: sender name to match on (unique or well-known name)
    or %NULL to listen from all senders
#NAME: message
#PARENT: Gio.DBusMessage.set_serial.none
#COMMENT: A #GDBusMessage.
#NAME: is_closed
#PARENT: Gio.Socket
#COMMENT: Checks whether a socket is closed.
#NAME: base_io_stream
#PARENT: Gio.tls_server_connection_new.TlsServerConnection
#COMMENT: the #GIOStream to wrap
#NAME: read_line_utf8
#PARENT: Gio.DataInputStream.read_line_utf8
#COMMENT: a NUL terminated UTF-8 string
 with the line that was read in (without the newlines).  Set
 @length to a #gsize to get the length of the read line.  On an
 error, it will return %NULL and @error will be set.  For UTF-8
 conversion errors, the set error domain is %G_CONVERT_ERROR.  If
 there's no content to read, it will still return %NULL, but @error
 won't be set.
#NAME: user_setup_data
#PARENT: Gio.DesktopAppInfo.launch_uris_as_manager.gboolean
#COMMENT: User data for @user_setup
#NAME: path
#PARENT: Gio.file_new_for_path.File
#COMMENT: a string containing a relative or absolute path.
    The string must be encoded in the glib filename encoding.
#NAME: eof
#PARENT: Gio.TlsError
#COMMENT: The TLS connection was closed without proper
  notice, which may indicate an attack. See
  g_tls_connection_set_require_close_notify().
#NAME: srv
#PARENT: Gio.NetworkService.get_domain.utf8
#COMMENT: a #GNetworkService
#NAME: starter
#PARENT: Gio.BusType
#COMMENT: An alias for the message bus that activated the process, if any.
#NAME: model
#PARENT: Gio.MenuModelClass.get_item_links.get_item_links.none
#COMMENT: the #GMenuModel to query
#NAME: communicate_utf8
#PARENT: Gio.Subprocess
#COMMENT: Like g_subprocess_communicate(), but validates the output of the
process as UTF-8, and returns it as a regular NUL terminated string.
#NAME: new
#PARENT: Gio.SocketService.new
#COMMENT: a new #GSocketService.
#NAME: added
#PARENT: Gio.MenuModel.items_changed.none
#COMMENT: the number of items added
#NAME: size
#PARENT: Gio.BufferedInputStream.set_buffer_size.none
#COMMENT: a #gsize
#NAME: drive
#PARENT: Gio.DriveIface.can_start_degraded.can_start_degraded.gboolean
#COMMENT: a #GDrive.
#NAME: etag
#PARENT: Gio.File.replace_contents_bytes_async.none
#COMMENT: a new [entity tag][gfile-etag] for the @file, or %NULL
#NAME: mount_enclosing_volume_finish
#PARENT: Gio.File
#COMMENT: Finishes a mount operation started by g_file_mount_enclosing_volume().
#NAME: register_object
#PARENT: Gio.DBusConnection.register_object
#COMMENT: 0 if @error is set, otherwise a registration id (never 0)
    that can be used with g_dbus_connection_unregister_object()
#NAME: initable
#PARENT: Gio.AsyncInitableIface.init_finish.init_finish.gboolean
#COMMENT: a #GAsyncInitable.
#NAME: message
#PARENT: Gio.DBusMessage.get_reply_serial.guint32
#COMMENT: A #GDBusMessage.
#NAME: result
#PARENT: Gio.Proxy.connect_finish.IOStream
#COMMENT: a #GAsyncResult
#NAME: path
#PARENT: Gio.DBusMessage.new_method_call.DBusMessage
#COMMENT: A valid object path.
#NAME: guess_can_eject
#PARENT: Gio.UnixMountPoint.guess_can_eject
#COMMENT: %TRUE if @mount_point is deemed to be ejectable.
#NAME: gvalue
#PARENT: Gio.dbus_gvalue_to_gvariant.GLib.Variant
#COMMENT: A #GValue to convert to a #GVariant
#NAME: set_pending
#PARENT: Gio.InputStream
#COMMENT: Sets @stream to have actions pending. If the pending flag is
already set or @stream is closed, it will return %FALSE and set
@error.
#NAME: MountOperation
#PARENT: Gio
#COMMENT: #GMountOperation provides a mechanism for interacting with the user.
It can be used for authenticating mountable operations, such as loop
mounting files, hard drive partitions or server locations. It can
also be used to ask the user questions or show a list of applications
preventing unmount or eject operations from completing.

Note that #GMountOperation is used for more than just #GMount
objects – for example it is also used in g_drive_start() and
g_drive_stop().

Users should instantiate a subclass of this that implements all the
various callbacks to show the required dialogs, such as
#GtkMountOperation. If no user interaction is desired (for example
when automounting filesystems at login time), usually %NULL can be
passed, see each method taking a #GMountOperation for details.
#NAME: address
#PARENT: Gio.SocketListener.add_address.gboolean
#COMMENT: a #GSocketAddress
#NAME: dup_object
#PARENT: Gio.DBusInterface
#COMMENT: Gets the #GDBusObject that @interface_ belongs to, if any.
#NAME: appinfo
#PARENT: Gio.AppInfo.add_supports_type.gboolean
#COMMENT: a #GAppInfo.
#NAME: cancellable
#PARENT: Gio.FileIface.set_display_name_async.set_display_name_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: show-unmount-progress
#PARENT: Gio.MountOperation
#COMMENT: Emitted when an unmount operation has been busy for more than some time
(typically 1.5 seconds).

When unmounting or ejecting a volume, the kernel might need to flush
pending data in its buffers to the volume stable storage, and this operation
can take a considerable amount of time. This signal may be emitted several
times as long as the unmount operation is outstanding, and then one
last time when the operation is completed, with @bytes_left set to zero.

Implementations of GMountOperation should handle this signal by
showing an UI notification, and then dismiss it, or show another notification
of completion, when @bytes_left reaches zero.

If the message contains a line break, the first line should be
presented as a heading. For example, it may be used as the
primary text in a #GtkMessageDialog.
#NAME: conn
#PARENT: Gio.TlsClientConnection.copy_session_state.none
#COMMENT: a #GTlsClientConnection
#NAME: input_stream
#PARENT: Gio.SimpleIOStream.new.IOStream
#COMMENT: a #GInputStream.
#NAME: flags
#PARENT: Gio.TlsInteractionClass.request_certificate.request_certificate.TlsInteractionResult
#COMMENT: flags providing more information about the request
#NAME: reset_type_associations
#PARENT: Gio.AppInfo
#COMMENT: Removes all changes to the type associations done by
g_app_info_set_as_default_for_type(),
g_app_info_set_as_default_for_extension(),
g_app_info_add_supports_type() or
g_app_info_remove_supports_type().
#NAME: start_operation
#PARENT: Gio.File.start_mountable.none
#COMMENT: a #GMountOperation, or %NULL to avoid user interaction
#NAME: create_source
#PARENT: Gio.PollableInputStreamInterface.create_source.create_source
#COMMENT: a new #GSource
#NAME: user_data
#PARENT: Gio.Mount.guess_content_type.none
#COMMENT: user data passed to @callback
#NAME: make_pollfd
#PARENT: Gio.Cancellable.make_pollfd
#COMMENT: %TRUE if @pollfd was successfully initialized, %FALSE on
         failure to prepare the cancellable.
#NAME: get_accepted_cas
#PARENT: Gio.TlsClientConnection.get_accepted_cas
#COMMENT: the list of
CA DNs. You should unref each element with g_byte_array_unref() and then
the free the list with g_list_free().
#NAME: get_name
#PARENT: Gio.Volume.get_name
#COMMENT: the name for the given @volume. The returned string should
    be freed with g_free() when no longer needed.
#NAME: target
#PARENT: Gio.Notification.add_button_with_target_value.none
#COMMENT: a #GVariant to use as @action's parameter, or %NULL
#NAME: load_partial_contents_finish
#PARENT: Gio.File.load_partial_contents_finish
#COMMENT: %TRUE if the load was successful. If %FALSE and @error is
    present, it will be set appropriately.
#NAME: new_from_bytes
#PARENT: Gio.InetAddress.new_from_bytes
#COMMENT: a new #GInetAddress corresponding to @family and @bytes.
#NAME: certificate
#PARENT: Gio.TlsConnection
#COMMENT: The connection's certificate; see
g_tls_connection_set_certificate().
#NAME: export_menu_model
#PARENT: Gio.DBusConnection
#COMMENT: Exports @menu on @connection at @object_path.

The implemented D-Bus API should be considered private.
It is subject to change in the future.

An object path can only have one menu model exported on it. If this
constraint is violated, the export will fail and 0 will be
returned (with @error set accordingly).

You can unexport the menu model using
g_dbus_connection_unexport_menu_model() with the return value of
this function.
#NAME: stream
#PARENT: Gio.IOStreamClass.close_async.close_async.none
#COMMENT: a #GIOStream
#NAME: wait_check
#PARENT: Gio.Subprocess
#COMMENT: Combines g_subprocess_wait() with g_spawn_check_exit_status().
#NAME: mask_string
#PARENT: Gio.InetAddressMask.new_from_string.InetAddressMask
#COMMENT: an IP address or address/length string
#NAME: info
#PARENT: Gio.FileInfo.get_name.utf8
#COMMENT: a #GFileInfo.
#NAME: g_iface
#PARENT: Gio.SocketConnectableIface
#COMMENT: The parent interface.
#NAME: cancellable
#PARENT: Gio.File.query_default_handler.AppInfo
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: get_value
#PARENT: Gio.MenuAttributeIter
#COMMENT: Gets the value of the attribute at the current iterator position.

The iterator is not advanced.
#NAME: count
#PARENT: Gio.InputStream.read_all_async.none
#COMMENT: the number of bytes that will be read from the stream
#NAME: propagate_error
#PARENT: Gio.SimpleAsyncResult.propagate_error
#COMMENT: %TRUE if the error was propagated to @dest. %FALSE otherwise.
#NAME: drive-disconnected
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when a drive is disconnected from the system.
#NAME: get_properties
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Gets all D-Bus properties for @interface_.
#NAME: emblemed
#PARENT: Gio.EmblemedIcon.add_emblem.none
#COMMENT: a #GEmblemedIcon
#NAME: user_data
#PARENT: Gio.SimpleAsyncResult.new_error.SimpleAsyncResult
#COMMENT: user data passed to @callback.
#NAME: dbus_annotation_info_lookup
#PARENT: Gio
#COMMENT: Looks up the value of an annotation.

The cost of this function is O(n) in number of annotations.
#NAME: DBusObjectProxyClass
#PARENT: Gio
#COMMENT: Class structure for #GDBusObjectProxy.
#NAME: file
#PARENT: Gio.FileIface.is_native.is_native.gboolean
#COMMENT: input #GFile
#NAME: read_only
#PARENT: Gio.IOErrorEnum
#COMMENT: File is read only.
#NAME: value
#PARENT: Gio.MenuLinkIter.get_next.gboolean
#COMMENT: the linked #GMenuModel
#NAME: new
#PARENT: Gio.Credentials
#COMMENT: Creates a new #GCredentials object with credentials matching the
the current process.
#NAME: can_poll
#PARENT: Gio.PollableInputStreamInterface.can_poll.can_poll
#COMMENT: %TRUE if @stream is pollable, %FALSE if not.
#NAME: pending
#PARENT: Gio.FileEnumerator.set_pending.none
#COMMENT: a boolean value.
#NAME: get_interface
#PARENT: Gio.DBusObject
#COMMENT: Gets the D-Bus interface with name @interface_name associated with
@object, if any.
#NAME: get_proxy_type_func
#PARENT: Gio.DBusObjectManagerClient.new_for_bus.none
#COMMENT: A #GDBusProxyTypeFunc function or %NULL to always construct #GDBusProxy proxies.
#NAME: get_object_path
#PARENT: Gio.DBusProxy
#COMMENT: Gets the object path @proxy is for.
#NAME: result
#PARENT: Gio.UnixConnection.receive_credentials_finish.Credentials
#COMMENT: a #GAsyncResult.
#NAME: flags
#PARENT: Gio.DriveIface.stop.stop.none
#COMMENT: flags affecting the unmount if required for stopping.
#NAME: socket
#PARENT: Gio.Socket.set_listen_backlog.none
#COMMENT: a #GSocket.
#NAME: get_peer_credentials
#PARENT: Gio.DBusConnection
#COMMENT: Gets the credentials of the authenticated peer. This will always
return %NULL unless @connection acted as a server
(e.g. %G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER was passed)
when set up and the client passed credentials as part of the
authentication process.

In a message bus setup, the message bus is always the server and
each application is a client. So this method will always return
%NULL for message bus clients.
#NAME: data
#PARENT: Gio.MemoryOutputStream
#COMMENT: Pointer to buffer where data will be written.
#NAME: invocation
#PARENT: Gio.DBusInterfaceMethodCallFunc.none
#COMMENT: A #GDBusMethodInvocation object that must be used to return a value or error.
#NAME: length
#PARENT: Gio.TlsPasswordClass.set_value.set_value.none
#COMMENT: the length of the password, or -1
#NAME: get_connected_drives
#PARENT: Gio.VolumeMonitorClass.get_connected_drives.get_connected_drives
#COMMENT: a #GList of connected #GDrive objects.
#NAME: cancellable
#PARENT: Gio.Socket.send_with_blocking.gssize
#COMMENT: a %GCancellable or %NULL
#NAME: flush
#PARENT: Gio.DBusObjectSkeleton
#COMMENT: This method simply calls g_dbus_interface_skeleton_flush() on all
interfaces belonging to @object. See that method for when flushing
is useful.
#NAME: task
#PARENT: Gio.Task.return_new_error.none
#COMMENT: a #GTask.
#NAME: write_async
#PARENT: Gio.OutputStream
#COMMENT: Request an asynchronous write of @count bytes from @buffer into
the stream. When the operation is finished @callback will be called.
You can then call g_output_stream_write_finish() to get the result of the
operation.

During an async request no other sync and async calls are allowed,
and will result in %G_IO_ERROR_PENDING errors.

A value of @count larger than %G_MAXSSIZE will cause a
%G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes written will be passed to the
@callback. It is not an error if this is not the same as the
requested size, as it can happen e.g. on a partial I/O error,
but generally we try to write as many bytes as requested.

You are guaranteed that this method will never fail with
%G_IO_ERROR_WOULD_BLOCK - if @stream can't accept more data, the
method will just wait until this changes.

Any outstanding I/O request with higher priority (lower numerical
value) will be executed before an outstanding request with lower
priority. Default priority is %G_PRIORITY_DEFAULT.

The asyncronous methods have a default fallback that uses threads
to implement asynchronicity, so they are optional for inheriting
classes. However, if you override one you must override all.

For the synchronous, blocking version of this function, see
g_output_stream_write().

Note that no copy of @buffer will be made, so it must stay valid
until @callback is called. See g_output_stream_write_bytes_async()
for a #GBytes version that will automatically hold a reference to
the contents (without copying) for the duration of the call.
#NAME: guid
#PARENT: Gio.DBusServer
#COMMENT: The guid of the server.
#NAME: str
#PARENT: Gio.DataOutputStream.put_string.gboolean
#COMMENT: a string.
#NAME: IOExtension
#PARENT: Gio
#COMMENT: #GIOExtension is an opaque data structure and can only be accessed
using the following functions.
#NAME: proxy
#PARENT: Gio.ProxyInterface.supports_hostname.supports_hostname.gboolean
#COMMENT: a #GProxy
#NAME: user_data
#PARENT: Gio.ResolverClass.lookup_by_name_async.lookup_by_name_async.none
#COMMENT: data for @callback
#NAME: self
#PARENT: Gio.TlsDatabase.verify_chain_async.none
#COMMENT: a #GTlsDatabase
#NAME: get_mount_for_uuid
#PARENT: Gio.VolumeMonitor
#COMMENT: Finds a #GMount object by its UUID (see g_mount_get_uuid())
#NAME: mount
#PARENT: Gio.MountIface.guess_content_type_sync.guess_content_type_sync.utf8
#COMMENT: a #GMount
#NAME: insert_submenu
#PARENT: Gio.Menu
#COMMENT: Convenience function for inserting a submenu menu item into @menu.
Combine g_menu_item_new_submenu() and g_menu_insert_item() for a more
flexible alternative.
#NAME: bytes_read
#PARENT: Gio.Converter.convert.ConverterResult
#COMMENT: will be set to the number of bytes read from @inbuf on success
#NAME: interaction
#PARENT: Gio.TlsInteraction.ask_password.TlsInteractionResult
#COMMENT: a #GTlsInteraction object
#NAME: notify
#PARENT: Gio.io_scheduler_push_job.none
#COMMENT: a #GDestroyNotify for @user_data, or %NULL
#NAME: display_name
#PARENT: Gio.File.set_display_name.File
#COMMENT: a string
#NAME: socket
#PARENT: Gio.TcpWrapperConnection.new.SocketConnection
#COMMENT: the #GSocket associated with @base_io_stream
#NAME: mount_operation
#PARENT: Gio.FileIface.mount_enclosing_volume.mount_enclosing_volume.none
#COMMENT: a #GMountOperation
    or %NULL to avoid user interaction
#NAME: value
#PARENT: Gio.ActionInterface.change_state.change_state.none
#COMMENT: the new state
#NAME: get_n_items
#PARENT: Gio.ListModel.get_n_items
#COMMENT: the number of items in @list.
#NAME: use-ssl3
#PARENT: Gio.TlsClientConnection
#COMMENT: If %TRUE, tells the connection to use a fallback version of TLS
or SSL, rather than trying to negotiate the best version of TLS
to use. This can be used when talking to servers that don't
implement version negotiation correctly and therefore refuse to
handshake at all with a "modern" TLS handshake.

Despite the property name, the fallback version is not
necessarily SSL 3.0; if SSL 3.0 has been disabled, the
#GTlsClientConnection will use the next highest available version
(normally TLS 1.0) as the fallback version.
#NAME: close_fd
#PARENT: Gio.UnixInputStream.set_close_fd.none
#COMMENT: %TRUE to close the file descriptor when done
#NAME: get_cancellable
#PARENT: Gio.Task
#COMMENT: Gets @task's #GCancellable
#NAME: choices
#PARENT: Gio.MountOperation.ask-question.none
#COMMENT: an array of strings for each possible choice.
#NAME: client
#PARENT: Gio.SocketClient.connect.SocketConnection
#COMMENT: a #GSocketClient.
#NAME: get_priority
#PARENT: Gio.IOExtension
#COMMENT: Gets the priority with which @extension was registered.
#NAME: new
#PARENT: Gio.MenuItem.new
#COMMENT: a new #GMenuItem
#NAME: query_info_finish
#PARENT: Gio.FileInputStream.query_info_finish
#COMMENT: #GFileInfo.
#NAME: error_message_format
#PARENT: Gio.DBusMessage.new_method_error.DBusMessage
#COMMENT: The D-Bus error message in a printf() format.
#NAME: compressed
#PARENT: Gio.ResourceFlags
#COMMENT: The file is compressed.
#NAME: get_is_mc_org_local
#PARENT: Gio.InetAddress
#COMMENT: Tests whether @address is an organization-local multicast address.
#NAME: get_drive
#PARENT: Gio.MountIface.get_drive.get_drive
#COMMENT: a #GDrive or %NULL if @mount is not associated with a volume or a drive.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: cancellable
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: find_enclosing_mount_finish
#PARENT: Gio.File.find_enclosing_mount_finish
#COMMENT: #GMount for given @file or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: entries
#PARENT: Gio.ActionMap.add_action_entries.none
#COMMENT: a pointer to
          the first item in an array of #GActionEntry structs
#NAME: get_mount
#PARENT: Gio.VolumeIface.get_mount.get_mount
#COMMENT: a #GMount or %NULL if @volume isn't mounted.
    The returned object should be unreffed with g_object_unref()
    when no longer needed.
#NAME: call
#PARENT: Gio.DBusProxy
#COMMENT: Asynchronously invokes the @method_name method on @proxy.

If @method_name contains any dots, then @name is split into interface and
method name parts. This allows using @proxy for invoking methods on
other interfaces.

If the #GDBusConnection associated with @proxy is closed then
the operation will fail with %G_IO_ERROR_CLOSED. If
@cancellable is canceled, the operation will fail with
%G_IO_ERROR_CANCELLED. If @parameters contains a value not
compatible with the D-Bus protocol, the operation fails with
%G_IO_ERROR_INVALID_ARGUMENT.

If the @parameters #GVariant is floating, it is consumed. This allows
convenient 'inline' use of g_variant_new(), e.g.:
|[<!-- language="C" -->
 g_dbus_proxy_call (proxy,
                    "TwoStrings",
                    g_variant_new ("(ss)",
                                   "Thing One",
                                   "Thing Two"),
                    G_DBUS_CALL_FLAGS_NONE,
                    -1,
                    NULL,
                    (GAsyncReadyCallback) two_strings_done,
                    &data);
]|

If @proxy has an expected interface (see
#GDBusProxy:g-interface-info) and @method_name is referenced by it,
then the return value is checked against the return type.

This is an asynchronous method. When the operation is finished,
@callback will be invoked in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this method from.
You can then call g_dbus_proxy_call_finish() to get the result of
the operation. See g_dbus_proxy_call_sync() for the synchronous
version of this method.

If @callback is %NULL then the D-Bus method call message will be sent with
the %G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED flag set.
#NAME: send_message
#PARENT: Gio.DBusConnection.send_message
#COMMENT: %TRUE if the message was well-formed and queued for
    transmission, %FALSE if @error is set
#NAME: connection
#PARENT: Gio.DBusObjectProxy.new.DBusObjectProxy
#COMMENT: a #GDBusConnection
#NAME: attributes
#PARENT: Gio.FileInputStreamClass.query_info.query_info.FileInfo
#COMMENT: a file attribute query string.
#NAME: settings
#PARENT: Gio.Settings.set_strv.gboolean
#COMMENT: a #GSettings object
#NAME: src_info
#PARENT: Gio.FileInfo.copy_into.none
#COMMENT: source to copy attributes from.
#NAME: startup_notify_id
#PARENT: Gio.AppLaunchContextClass.launch_failed.launch_failed.none
#COMMENT: the startup notification id that was returned by g_app_launch_context_get_startup_notify_id().
#NAME: flags
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle_async.none
#COMMENT: Flags which affect the lookup.
#NAME: filter_function
#PARENT: Gio.DBusConnection.add_filter.guint
#COMMENT: a filter function
#NAME: new_from_array
#PARENT: Gio.UnixFDList.new_from_array
#COMMENT: a new #GUnixFDList
#NAME: name
#PARENT: Gio.bus_own_name.guint
#COMMENT: the well-known name to own
#NAME: can_start
#PARENT: Gio.Drive.can_start
#COMMENT: %TRUE if the @drive can be started, %FALSE otherwise.
#NAME: client
#PARENT: Gio.SocketClient.set_timeout.none
#COMMENT: a #GSocketClient.
#NAME: io_priority
#PARENT: Gio.File.create_readwrite_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: leave_multicast_group
#PARENT: Gio.Socket.leave_multicast_group
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: address
#PARENT: Gio.InetAddress.to_bytes.guint8
#COMMENT: a #GInetAddress
#NAME: cancellable
#PARENT: Gio.SocketClient.connect_to_host_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: res
#PARENT: Gio.FileIface.query_info_finish.query_info_finish.FileInfo
#COMMENT: a #GAsyncResult
#NAME: match_rule_not_found
#PARENT: Gio.DBusError
#COMMENT: Tried to remove or modify a match rule that didn't exist.
#NAME: parameter_type
#PARENT: Gio.SimpleAction.new.SimpleAction
#COMMENT: the type of parameter to the activate function
#NAME: interaction
#PARENT: Gio.TlsDatabase.verify_chain.TlsCertificateFlags
#COMMENT: used to interact with the user if necessary
#NAME: stream
#PARENT: Gio.FileIOStream.query_info_async.none
#COMMENT: a #GFileIOStream.
#NAME: enumerate_identifiers
#PARENT: Gio.Drive.enumerate_identifiers
#COMMENT: a %NULL-terminated
    array of strings containing kinds of identifiers. Use g_strfreev()
    to free.
#NAME: user_data
#PARENT: Gio.Mount.unmount_with_operation.none
#COMMENT: user data passed to @callback.
#NAME: code
#PARENT: Gio.DBusMethodInvocation.return_error_literal.none
#COMMENT: The error code.
#NAME: indent
#PARENT: Gio.DBusMessage.print.utf8
#COMMENT: Indentation level.
#NAME: self
#PARENT: Gio.TestDBus.add_service_dir.none
#COMMENT: a #GTestDBus
#NAME: count
#PARENT: Gio.BufferedInputStream.fill.gssize
#COMMENT: the number of bytes that will be read from the stream
#NAME: first_property_name
#PARENT: Gio.AsyncInitable.new_valist_async.none
#COMMENT: the name of the first property, followed by
the value, and other property value pairs, and ended by %NULL.
#NAME: cancellable
#PARENT: Gio.IOSchedulerJobFunc.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: stream
#PARENT: Gio.OutputStream.flush.gboolean
#COMMENT: a #GOutputStream.
#NAME: attributes
#PARENT: Gio.FileInputStreamClass.query_info_async.query_info_async.none
#COMMENT: a file attribute query string.
#NAME: object_path
#PARENT: Gio.DBusConnection.register_object.guint
#COMMENT: the object path to register at
#NAME: eject_finish
#PARENT: Gio.MountIface.eject_finish.eject_finish
#COMMENT: %TRUE if the mount was successfully ejected. %FALSE otherwise.
#NAME: close
#PARENT: Gio.IOStream
#COMMENT: Closes the stream, releasing resources related to it. This will also
closes the individual input and output streams, if they are not already
closed.

Once the stream is closed, all other operations will return
%G_IO_ERROR_CLOSED. Closing a stream multiple times will not
return an error.

Closing a stream will automatically flush any outstanding buffers
in the stream.

Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure
resources are released as early as possible.

Some streams might keep the backing store of the stream (e.g. a file
descriptor) open after the stream is closed. See the documentation for
the individual stream for details.

On failure the first error that happened will be reported, but the
close operation will finish as much as possible. A stream that failed
to close will still return %G_IO_ERROR_CLOSED for all operations.
Still, it is important to check and report the error to the user,
otherwise there might be a loss of data as all data might not be written.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
Cancelling a close will still leave the stream closed, but some streams
can use a faster close that doesn't block to e.g. check errors.

The default implementation of this method just calls close on the
individual input/output streams.
#NAME: count
#PARENT: Gio.InputStream.skip.gssize
#COMMENT: the number of bytes that will be skipped from the stream
#NAME: realloc-function
#PARENT: Gio.MemoryOutputStream
#COMMENT: Function with realloc semantics called to enlarge the buffer.
#NAME: stream
#PARENT: Gio.DataInputStream.read_upto_finish.utf8
#COMMENT: a #GDataInputStream
#NAME: accept
#PARENT: Gio.Socket.accept
#COMMENT: a new #GSocket, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: interface_name
#PARENT: Gio.DBusConnection.emit_signal.gboolean
#COMMENT: D-Bus interface to emit a signal on
#NAME: attributes
#PARENT: Gio.FileIOStream.query_info_async.none
#COMMENT: a file attribute query string.
#NAME: cancellable
#PARENT: Gio.File.set_attribute_byte_string.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: setenv
#PARENT: Gio.AppLaunchContext
#COMMENT: Arranges for @variable to be set to @value in the child's
environment when @context is used to launch an application.
#NAME: callback
#PARENT: Gio.FileOutputStreamClass.query_info_async.query_info_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: socket
#PARENT: Gio.Socket.is_closed.gboolean
#COMMENT: a #GSocket
#NAME: interaction
#PARENT: Gio.TlsInteraction.ask_password_finish.TlsInteractionResult
#COMMENT: a #GTlsInteraction object
#NAME: initable
#PARENT: Gio.AsyncInitable.init_async.none
#COMMENT: a #GAsyncInitable.
#NAME: cancellable
#PARENT: Gio.InputStreamClass.close_async.close_async.none
#COMMENT: optional cancellable object
#NAME: user_data
#PARENT: Gio.SimpleActionGroup.add_entries.none
#COMMENT: the user data for signal connections
#NAME: get_issuer
#PARENT: Gio.TlsCertificate
#COMMENT: Gets the #GTlsCertificate representing @cert's issuer, if known
#NAME: enumerator
#PARENT: Gio.SocketAddressEnumerator.next_async.none
#COMMENT: a #GSocketAddressEnumerator
#NAME: set_flags
#PARENT: Gio.TlsPassword
#COMMENT: Set flags about the password.
#NAME: resources_enumerate_children
#PARENT: Gio
#COMMENT: Returns all the names of children at the specified @path in the set of
globally registered resources.
The return result is a %NULL terminated list of strings which should
be released with g_strfreev().

@lookup_flags controls the behaviour of the lookup.
#NAME: allow-mechanism
#PARENT: Gio.DBusAuthObserver
#COMMENT: Emitted to check if @mechanism is allowed to be used.
#NAME: is_native
#PARENT: Gio.File.is_native
#COMMENT: %TRUE if @file is native
#NAME: file
#PARENT: Gio.File.query_default_handler.AppInfo
#COMMENT: a #GFile to open
#NAME: res
#PARENT: Gio.FileIface.open_readwrite_finish.open_readwrite_finish.FileIOStream
#COMMENT: a #GAsyncResult
#NAME: bus_watch_name
#PARENT: Gio
#COMMENT: Starts watching @name on the bus specified by @bus_type and calls
@name_appeared_handler and @name_vanished_handler when the name is
known to have a owner respectively known to lose its
owner. Callbacks will be invoked in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this function from.

You are guaranteed that one of the handlers will be invoked after
calling this function. When you are done watching the name, just
call g_bus_unwatch_name() with the watcher id this function
returns.

If the name vanishes or appears (for example the application owning
the name could restart), the handlers are also invoked. If the
#GDBusConnection that is used for watching the name disconnects, then
@name_vanished_handler is invoked since it is no longer
possible to access the name.

Another guarantee is that invocations of @name_appeared_handler
and @name_vanished_handler are guaranteed to alternate; that
is, if @name_appeared_handler is invoked then you are
guaranteed that the next time one of the handlers is invoked, it
will be @name_vanished_handler. The reverse is also true.

This behavior makes it very simple to write applications that want
to take action when a certain [name exists][gdbus-watching-names].
Basically, the application should create object proxies in
@name_appeared_handler and destroy them again (if any) in
@name_vanished_handler.
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.action_removed.action_removed.none
#COMMENT: the name of an action in the group
#NAME: can_unmount
#PARENT: Gio.Mount
#COMMENT: Checks if @mount can be mounted.
#NAME: get_connection
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Gets the first connection that @interface_ is exported on, if any.
#NAME: get_display_name
#PARENT: Gio.FileInfo.get_display_name
#COMMENT: a string containing the display name.
#NAME: name
#PARENT: Gio.Settings.get_child.Settings
#COMMENT: the name of the child schema
#NAME: callback
#PARENT: Gio.VolumeIface.eject.eject.none
#COMMENT: a #GAsyncReadyCallback, or %NULL
#NAME: hold
#PARENT: Gio.Application
#COMMENT: Increases the use count of @application.

Use this function to indicate that the application has a reason to
continue to run.  For example, g_application_hold() is called by GTK+
when a toplevel window is on the screen.

To cancel the hold, call g_application_release().
#NAME: object_path
#PARENT: Gio.DBusInterfaceGetPropertyFunc.GLib.Variant
#COMMENT: The object path that the method was invoked on.
#NAME: result
#PARENT: Gio.DriveIface.eject_with_operation_finish.eject_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: file
#PARENT: Gio.File.load_partial_contents_finish.gboolean
#COMMENT: input #GFile
#NAME: callback
#PARENT: Gio.OutputStreamClass.close_async.close_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: unmount_mountable_with_operation_finish
#PARENT: Gio.FileIface.unmount_mountable_with_operation_finish.unmount_mountable_with_operation_finish
#COMMENT: %TRUE if the operation finished successfully.
    %FALSE otherwise.
#NAME: cancellable
#PARENT: Gio.Socket.send.gssize
#COMMENT: a %GCancellable or %NULL
#NAME: mask
#PARENT: Gio.InetAddressMask.get_address.InetAddress
#COMMENT: a #GInetAddressMask
#NAME: state_hint
#PARENT: Gio.ActionGroupInterface.query_action.query_action.gboolean
#COMMENT: the state hint, or %NULL if none
#NAME: incoming
#PARENT: Gio.SocketService.incoming
#COMMENT: %TRUE to stop other handlers from being called
#NAME: info
#PARENT: Gio.FileInfo.set_is_hidden.none
#COMMENT: a #GFileInfo.
#NAME: guess_content_type_sync
#PARENT: Gio.Mount
#COMMENT: Tries to guess the type of content stored on @mount. Returns one or
more textual identifiers of well-known content types (typically
prefixed with "x-content/"), e.g. x-content/image-dcf for camera
memory cards. See the
[shared-mime-info](http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
specification for more on x-content types.

This is an synchronous operation and as such may block doing IO;
see g_mount_guess_content_type() for the asynchronous version.
#NAME: certificate
#PARENT: Gio.TlsCertificate
#COMMENT: The DER (binary) encoded representation of the certificate.
This property and the #GTlsCertificate:certificate-pem property
represent the same data, just in different forms.
#NAME: get_next
#PARENT: Gio.MenuLinkIter
#COMMENT: This function combines g_menu_link_iter_next() with
g_menu_link_iter_get_name() and g_menu_link_iter_get_value().

First the iterator is advanced to the next (possibly first) link.
If that fails, then %FALSE is returned and there are no other effects.

If successful, @out_link and @value are set to the name and #GMenuModel
of the link that has just been advanced to.  At this point,
g_menu_link_iter_get_name() and g_menu_link_iter_get_value() will return the
same values again.

The value returned in @out_link remains valid for as long as the iterator
remains at the current position.  The value returned in @value must
be unreffed using g_object_unref() when it is no longer in use.
#NAME: proxy
#PARENT: Gio.ProxyAddress.get_destination_protocol.utf8
#COMMENT: a #GProxyAddress
#NAME: sender_name
#PARENT: Gio.DBusSignalCallback.none
#COMMENT: The unique bus name of the sender of the signal.
#NAME: property_name
#PARENT: Gio.DBusProxy.set_cached_property.none
#COMMENT: Property name.
#NAME: icon
#PARENT: Gio.ThemedIcon.append_name.none
#COMMENT: a #GThemedIcon
#NAME: get_required_type
#PARENT: Gio.IOExtensionPoint
#COMMENT: Gets the required type for @extension_point.
#NAME: bind_with_mapping
#PARENT: Gio.Settings
#COMMENT: Create a binding between the @key in the @settings object
and the property @property of @object.

The binding uses the provided mapping functions to map between
settings and property values.

Note that the lifecycle of the binding is tied to the object,
and that you can have only one binding per object property.
If you bind the same property twice on the same object, the second
binding overrides the first one.
#NAME: lookup_certificates_issued_by
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by.lookup_certificates_issued_by
#COMMENT: a newly allocated list of #GTlsCertificate
objects. Use g_object_unref() on each certificate, and g_list_free() on the release the list.
#NAME: new_etag
#PARENT: Gio.File.replace_contents.gboolean
#COMMENT: a location to a new [entity tag][gfile-etag]
     for the document. This should be freed with g_free() when no longer
     needed, or %NULL
#NAME: get_serial
#PARENT: Gio.DBusMessage.get_serial
#COMMENT: A #guint32.
#NAME: set_double
#PARENT: Gio.Settings.set_double
#COMMENT: %TRUE if setting the key succeeded,
    %FALSE if the key was not writable
#NAME: io_priority
#PARENT: Gio.DataInputStream.read_upto_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: new_abstract
#PARENT: Gio.UnixSocketAddress
#COMMENT: Creates a new %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
#GUnixSocketAddress for @path.
#NAME: title
#PARENT: Gio.Notification.set_title.none
#COMMENT: the new title for @notification
#NAME: connection
#PARENT: Gio.DBusInterfaceGetPropertyFunc.GLib.Variant
#COMMENT: A #GDBusConnection.
#NAME: annotations
#PARENT: Gio.DBusNodeInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
#NAME: observer
#PARENT: Gio.DBusConnection.new_for_address_sync.DBusConnection
#COMMENT: a #GDBusAuthObserver or %NULL
#NAME: action_added
#PARENT: Gio.ActionGroup
#COMMENT: Emits the #GActionGroup::action-added signal on @action_group.

This function should only be called by #GActionGroup implementations.
#NAME: new_sync
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Creates a new #GDBusObjectManagerClient object.

This is a synchronous failable constructor - the calling thread is
blocked until a reply is received. See g_dbus_object_manager_client_new()
for the asynchronous version.
#NAME: destination_bus_name
#PARENT: Gio.DBusConnection.emit_signal.gboolean
#COMMENT: the unique bus name for the destination
    for the signal or %NULL to emit to all listeners
#NAME: user_data
#PARENT: Gio.FileIface.eject_mountable_with_operation.eject_mountable_with_operation.none
#COMMENT: the data to pass to callback function
#NAME: get_length
#PARENT: Gio.UnixFDList
#COMMENT: Gets the length of @list (ie: the number of file descriptors
contained within).
#NAME: callback
#PARENT: Gio.FileIface.copy_async.copy_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: readable
#PARENT: Gio.DBusPropertyInfoFlags
#COMMENT: Property is readable.
#NAME: socket
#PARENT: Gio.Socket.get_socket_type.SocketType
#COMMENT: a #GSocket.
#NAME: pollable_stream
#PARENT: Gio.pollable_source_new_full.GLib.Source
#COMMENT: the stream associated with the
  new source
#NAME: get_is_mc_org_local
#PARENT: Gio.InetAddress.get_is_mc_org_local
#COMMENT: %TRUE if @address is an organization-local multicast address.
#NAME: do_not_connect_signals
#PARENT: Gio.DBusProxyFlags
#COMMENT: Don't connect to signals on the remote object.
#NAME: get_all
#PARENT: Gio.AppInfo.get_all
#COMMENT: a newly allocated #GList of references to #GAppInfos.
#NAME: get_remote_error
#PARENT: Gio.DBusError.get_remote_error
#COMMENT: an allocated string or %NULL if the D-Bus error name
    could not be found. Free with g_free().
#NAME: result
#PARENT: Gio.File.mount_enclosing_volume_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: choices
#PARENT: Gio.MountOperation.show-processes.none
#COMMENT: an array of strings for each possible choice.
#NAME: get_application_id
#PARENT: Gio.Application.get_application_id
#COMMENT: the identifier for @application, owned by @application
#NAME: action_enabled_changed
#PARENT: Gio.ActionGroup
#COMMENT: Emits the #GActionGroup::action-enabled-changed signal on @action_group.

This function should only be called by #GActionGroup implementations.
#NAME: FILE_ATTRIBUTE_ID_FILE
#PARENT: Gio
#COMMENT: A key in the "id" namespace for getting a file identifier.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
An example use would be during listing files, to avoid recursive
directory scanning.
#NAME: replace_finish
#PARENT: Gio.FileIface.replace_finish.replace_finish
#COMMENT: a #GFileOutputStream, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: cancellable
#PARENT: Gio.File.monitor_directory.FileMonitor
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: name
#PARENT: Gio.PropertyAction.new.PropertyAction
#COMMENT: the name of the action to create
#NAME: g_iface
#PARENT: Gio.TlsServerConnectionInterface
#COMMENT: The parent interface.
#NAME: tls_error_quark
#PARENT: Gio.tls_error_quark
#COMMENT: a #GQuark.
#NAME: parse_name
#PARENT: Gio.VfsClass.parse_name.parse_name
#COMMENT: a #GFile for the given @parse_name.
    Free the returned object with g_object_unref().
#NAME: info
#PARENT: Gio.DBusNodeInfo.ref.DBusNodeInfo
#COMMENT: A #GDBusNodeInfo
#NAME: set_error
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Sets an error within the asynchronous result without a #GError.
#NAME: drive
#PARENT: Gio.DriveIface.can_stop.can_stop.gboolean
#COMMENT: a #GDrive.
#NAME: get_status
#PARENT: Gio.Subprocess.get_status
#COMMENT: the (meaningless) waitpid() exit status from the kernel
#NAME: exit_status
#PARENT: Gio.Application.local_command_line.gboolean
#COMMENT: exit status to fill after processing the command line.
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.get_user_data.gpointer
#COMMENT: A #GDBusMethodInvocation.
#NAME: get_name
#PARENT: Gio.DBusProxy.get_name
#COMMENT: A string owned by @proxy. Do not free.
#NAME: record_type
#PARENT: Gio.ResolverClass.lookup_records_async.lookup_records_async.none
#COMMENT: the type of DNS record to lookup
#NAME: property_name
#PARENT: Gio.DBusInterfaceGetPropertyFunc.GLib.Variant
#COMMENT: The name of the property to get the value of.
#NAME: new
#PARENT: Gio.SimpleProxyResolver.new
#COMMENT: a new #GSimpleProxyResolver
#NAME: splice_finish
#PARENT: Gio.OutputStreamClass.splice_finish.splice_finish
#COMMENT: a #gssize of the number of bytes spliced. Note that if the
    number of bytes spliced is greater than %G_MAXSSIZE, then that
    will be returned, and there is no way to determine the actual
    number of bytes spliced.
#NAME: enumerate
#PARENT: Gio.SocketConnectableIface.enumerate.enumerate
#COMMENT: a new #GSocketAddressEnumerator.
#NAME: set_flags
#PARENT: Gio.SubprocessLauncher
#COMMENT: Sets the flags on the launcher.

The default flags are %G_SUBPROCESS_FLAGS_NONE.

You may not set flags that specify conflicting options for how to
handle a particular stdio stream (eg: specifying both
%G_SUBPROCESS_FLAGS_STDIN_PIPE and
%G_SUBPROCESS_FLAGS_STDIN_INHERIT).

You may also not set a flag that conflicts with a previous call to a
function like g_subprocess_launcher_set_stdin_file_path() or
g_subprocess_launcher_take_stdout_fd().
#NAME: UnixMountEntry
#PARENT: Gio
#COMMENT: Defines a Unix mount entry (e.g. <filename>/media/cdrom</filename>).
This corresponds roughly to a mtab entry.
#NAME: init_finish
#PARENT: Gio.AsyncInitable
#COMMENT: Finishes asynchronous initialization and returns the result.
See g_async_initable_init_async().
#NAME: no_fallback_for_move
#PARENT: Gio.FileCopyFlags
#COMMENT: Don't use copy and delete fallback if native move not supported.
#NAME: get_is_remote
#PARENT: Gio.Application
#COMMENT: Checks if @application is remote.

If @application is remote then it means that another instance of
application already exists (the 'primary' instance).  Calls to
perform actions on @application will result in the actions being
performed by the primary instance.

The value of this property cannot be accessed before
g_application_register() has been called.  See
g_application_get_is_registered().
#NAME: info
#PARENT: Gio.FileInfo.set_icon.none
#COMMENT: a #GFileInfo.
#NAME: interaction
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle_async.none
#COMMENT: used to interact with the user if necessary
#NAME: equal
#PARENT: Gio.InetAddressMask.equal
#COMMENT: whether @mask and @mask2 are the same mask
#NAME: splice
#PARENT: Gio.OutputStreamClass.splice.splice
#COMMENT: a #gssize containing the size of the data spliced, or
    -1 if an error occurred. Note that if the number of bytes
    spliced is greater than %G_MAXSSIZE, then that will be
    returned, and there is no way to determine the actual number
    of bytes spliced.
#NAME: permission
#PARENT: Gio.Permission.get_can_acquire.gboolean
#COMMENT: a #GPermission instance
#NAME: info
#PARENT: Gio.FileInfo.set_attribute_object.none
#COMMENT: a #GFileInfo.
#NAME: error_name
#PARENT: Gio.DBusMessage.new_method_error_literal.DBusMessage
#COMMENT: A valid D-Bus error name.
#NAME: icon
#PARENT: Gio.Notification.set_icon.none
#COMMENT: the icon to be shown in @notification, as a #GIcon
#NAME: callback
#PARENT: Gio.Task.attach_source.none
#COMMENT: the callback to invoke when @source triggers
#NAME: get_path
#PARENT: Gio.File
#COMMENT: Gets the local pathname for #GFile, if one exists.

This call does no blocking I/O.
#NAME: file
#PARENT: Gio.FileMonitor.changed.none
#COMMENT: a #GFile.
#NAME: handle-local-options
#PARENT: Gio.Application.handle-local-options
#COMMENT: an exit code. If you have handled your options and want
to exit the process, return a non-negative option, 0 for success,
and a positive value for failure. To continue, return -1 to let
the default option processing continue.
#NAME: address
#PARENT: Gio.SocketAddress.get_family.SocketFamily
#COMMENT: a #GSocketAddress
#NAME: read_upto
#PARENT: Gio.DataInputStream.read_upto
#COMMENT: a string with the data that was read
    before encountering any of the stop characters. Set @length to
    a #gsize to get the length of the string. This function will
    return %NULL on an error
#NAME: blocking
#PARENT: Gio.Socket.receive_with_blocking.gssize
#COMMENT: whether to do blocking or non-blocking I/O
#NAME: hash
#PARENT: Gio.File
#COMMENT: Creates a hash value for a #GFile.

This call does no blocking I/O.
#NAME: close
#PARENT: Gio.FileEnumerator
#COMMENT: Releases all resources used by this enumerator, making the
enumerator return %G_IO_ERROR_CLOSED on all calls.

This will be automatically called when the last reference
is dropped, but you might want to call this function to make
sure resources are released as early as possible.
#NAME: new_from_blob
#PARENT: Gio.DBusMessage
#COMMENT: Creates a new #GDBusMessage from the data stored at @blob. The byte
order that the message was in can be retrieved using
g_dbus_message_get_byte_order().
#NAME: export
#PARENT: Gio.DBusObjectManagerServer
#COMMENT: Exports @object on @manager.

If there is already a #GDBusObject exported at the object path,
then the old object is removed.

The object path for @object must be in the hierarchy rooted by the
object path for @manager.

Note that @manager will take a reference on @object for as long as
it is exported.
#NAME: read_line_finish_utf8
#PARENT: Gio.DataInputStream.read_line_finish_utf8
#COMMENT: a string with the line that
 was read in (without the newlines).  Set @length to a #gsize to
 get the length of the read line.  On an error, it will return
 %NULL and @error will be set. For UTF-8 conversion errors, the set
 error domain is %G_CONVERT_ERROR.  If there's no content to read,
 it will still return %NULL, but @error won't be set.
#NAME: mount_entry
#PARENT: Gio.unix_mount_guess_icon.Icon
#COMMENT: a #GUnixMountEntry
#NAME: start_finish
#PARENT: Gio.Drive
#COMMENT: Finishes starting a drive.
#NAME: property
#PARENT: Gio.Settings.bind.none
#COMMENT: the name of the property to bind
#NAME: read_bytes_async
#PARENT: Gio.InputStream
#COMMENT: Request an asynchronous read of @count bytes from the stream into a
new #GBytes. When the operation is finished @callback will be
called. You can then call g_input_stream_read_bytes_finish() to get the
result of the operation.

During an async request no other sync and async calls are allowed
on @stream, and will result in %G_IO_ERROR_PENDING errors.

A value of @count larger than %G_MAXSSIZE will cause a
%G_IO_ERROR_INVALID_ARGUMENT error.

On success, the new #GBytes will be passed to the callback. It is
not an error if this is smaller than the requested size, as it can
happen e.g. near the end of a file, but generally we try to read as
many bytes as requested. Zero is returned on end of file (or if
@count is zero), but never otherwise.

Any outstanding I/O request with higher priority (lower numerical
value) will be executed before an outstanding request with lower
priority. Default priority is %G_PRIORITY_DEFAULT.
#NAME: MENU_LINK_SECTION
#PARENT: Gio
#COMMENT: The name of the link that associates a menu item with a section.  The linked
menu will usually be shown in place of the menu item, using the item's label
as a header.

See also g_menu_item_set_link().
#NAME: result
#PARENT: Gio.FileIface.mount_enclosing_volume_finish.mount_enclosing_volume_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: unmount_with_operation_finish
#PARENT: Gio.Mount
#COMMENT: Finishes unmounting a mount. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.
#NAME: pollable_stream
#PARENT: Gio.pollable_source_new.GLib.Source
#COMMENT: the stream associated with the new source
#NAME: protocol
#PARENT: Gio.SocketClient.set_protocol.none
#COMMENT: a #GSocketProtocol
#NAME: message
#PARENT: Gio.SocketControlMessage.get_level.gint
#COMMENT: a #GSocketControlMessage
#NAME: ask_password_async
#PARENT: Gio.TlsInteraction
#COMMENT: Run asynchronous interaction to ask the user for a password. In general,
g_tls_interaction_invoke_ask_password() should be used instead of this
function.

Derived subclasses usually implement a password prompt, although they may
also choose to provide a password from elsewhere. The @password value will
be filled in and then @callback will be called. Alternatively the user may
abort this password request, which will usually abort the TLS connection.

If the interaction is cancelled by the cancellation object, or by the
user then %G_TLS_INTERACTION_FAILED will be returned with an error that
contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
not support immediate cancellation.

Certain implementations may not support immediate cancellation.
#NAME: content_type_get_icon
#PARENT: Gio
#COMMENT: Gets the icon for a content type.
#NAME: subtract
#PARENT: Gio.FileAttributeMatcher
#COMMENT: Subtracts all attributes of @subtract from @matcher and returns
a matcher that supports those attributes.

Note that currently it is not possible to remove a single
attribute when the @matcher matches the whole namespace - or remove
a namespace or attribute when the matcher matches everything. This
is a limitation of the current implementation, but may be fixed
in the future.
#NAME: find_enclosing_mount
#PARENT: Gio.FileIface.find_enclosing_mount.find_enclosing_mount
#COMMENT: a #GMount where the @file is located
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: size
#PARENT: Gio.Socket.send.gssize
#COMMENT: the number of bytes to send
#NAME: file
#PARENT: Gio.File.has_parent.gboolean
#COMMENT: input #GFile
#NAME: guess_can_eject
#PARENT: Gio.UnixMountPoint
#COMMENT: Guesses whether a Unix mount point can be ejected.
#NAME: to_string
#PARENT: Gio.InetAddress.to_string
#COMMENT: a representation of @address as a string, which should be
freed after use.
#NAME: new
#PARENT: Gio.SimplePermission.new
#COMMENT: the #GSimplePermission, as a #GPermission
#NAME: user_data
#PARENT: Gio.File.open_readwrite_async.none
#COMMENT: the data to pass to callback function
#NAME: write
#PARENT: Gio.OutputStream
#COMMENT: Tries to write @count bytes from @buffer into the stream. Will block
during the operation.

If count is 0, returns 0 and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes written to the stream is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. on a partial I/O error, or if there is not enough
storage in the stream. All writes block until at least one byte
is written or an error occurs; 0 is never returned (unless
@count is 0).

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.
#NAME: AsyncResult
#PARENT: Gio
#COMMENT: Provides a base class for implementing asynchronous function results.

Asynchronous operations are broken up into two separate operations
which are chained together by a #GAsyncReadyCallback. To begin
an asynchronous operation, provide a #GAsyncReadyCallback to the
asynchronous function. This callback will be triggered when the
operation has completed, and will be passed a #GAsyncResult instance
filled with the details of the operation's success or failure, the
object the asynchronous function was started for and any error codes
returned. The asynchronous callback function is then expected to call
the corresponding "_finish()" function, passing the object the
function was called for, the #GAsyncResult instance, and (optionally)
an @error to grab any error conditions that may have occurred.

The "_finish()" function for an operation takes the generic result
(of type #GAsyncResult) and returns the specific result that the
operation in question yields (e.g. a #GFileEnumerator for a
"enumerate children" operation). If the result or error status of the
operation is not needed, there is no need to call the "_finish()"
function; GIO will take care of cleaning up the result and error
information after the #GAsyncReadyCallback returns. You can pass
%NULL for the #GAsyncReadyCallback if you don't need to take any
action at all after the operation completes. Applications may also
take a reference to the #GAsyncResult and call "_finish()" later;
however, the "_finish()" function may be called at most once.

Example of a typical asynchronous operation flow:
|[<!-- language="C" -->
void _theoretical_frobnitz_async (Theoretical         *t,
                                  GCancellable        *c,
                                  GAsyncReadyCallback  cb,
                                  gpointer             u);

gboolean _theoretical_frobnitz_finish (Theoretical   *t,
                                       GAsyncResult  *res,
                                       GError       **e);

static void
frobnitz_result_func (GObject      *source_object,
		 GAsyncResult *res,
		 gpointer      user_data)
{
  gboolean success = FALSE;

  success = _theoretical_frobnitz_finish (source_object, res, NULL);

  if (success)
    g_printf ("Hurray!\n");
  else
    g_printf ("Uh oh!\n");

  ...

}

int main (int argc, void *argv[])
{
   ...

   _theoretical_frobnitz_async (theoretical_data,
                                NULL,
                                frobnitz_result_func,
                                NULL);

   ...
}
]|

The callback for an asynchronous operation is called only once, and is
always called, even in the case of a cancelled operation. On cancellation
the result is a %G_IO_ERROR_CANCELLED error.

## I/O Priority # {#io-priority}

Many I/O-related asynchronous operations have a priority parameter,
which is used in certain cases to determine the order in which
operations are executed. They are not used to determine system-wide
I/O scheduling. Priorities are integers, with lower numbers indicating
higher priority. It is recommended to choose priorities between
%G_PRIORITY_LOW and %G_PRIORITY_HIGH, with %G_PRIORITY_DEFAULT
as a default.
#NAME: get_symbolic_icon
#PARENT: Gio.Drive
#COMMENT: Gets the icon for @drive.
#NAME: callback
#PARENT: Gio.MountIface.eject_with_operation.eject_with_operation.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: invert_boolean
#PARENT: Gio.SettingsBindFlags
#COMMENT: When passed to g_settings_bind(), uses a pair of mapping functions that invert
    the boolean value when mapping between the setting and the property.  The setting and property must both
    be booleans.  You cannot pass this flag to g_settings_bind_with_mapping().
#NAME: set_action_and_target_value
#PARENT: Gio.MenuItem
#COMMENT: Sets or unsets the "action" and "target" attributes of @menu_item.

If @action is %NULL then both the "action" and "target" attributes
are unset (and @target_value is ignored).

If @action is non-%NULL then the "action" attribute is set.  The
"target" attribute is then set to the value of @target_value if it is
non-%NULL or unset otherwise.

Normal menu items (ie: not submenu, section or other custom item
types) are expected to have the "action" attribute set to identify
the action that they are associated with.  The state type of the
action help to determine the disposition of the menu item.  See
#GAction and #GActionGroup for an overview of actions.

In general, clicking on the menu item will result in activation of
the named action with the "target" attribute given as the parameter
to the action invocation.  If the "target" attribute is not set then
the action is invoked with no parameter.

If the action has no state then the menu item is usually drawn as a
plain menu item (ie: with no additional decoration).

If the action has a boolean state then the menu item is usually drawn
as a toggle menu item (ie: with a checkmark or equivalent
indication).  The item should be marked as 'toggled' or 'checked'
when the boolean state is %TRUE.

If the action has a string state then the menu item is usually drawn
as a radio menu item (ie: with a radio bullet or equivalent
indication).  The item should be marked as 'selected' when the string
state is equal to the value of the @target property.

See g_menu_item_set_action_and_target() or
g_menu_item_set_detailed_action() for two equivalent calls that are
probably more convenient for most uses.
#NAME: filename
#PARENT: Gio.DesktopAppInfo
#COMMENT: The origin filename of this #GDesktopAppInfo
#NAME: truncate_fn
#PARENT: Gio.Seekable
#COMMENT: Truncates a stream with a given #offset.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.
#NAME: bus_watch_name_on_connection_with_closures
#PARENT: Gio
#COMMENT: Version of g_bus_watch_name_on_connection() using closures instead of callbacks for
easier binding in other languages.
#NAME: new_for_dbus_error
#PARENT: Gio.DBusError
#COMMENT: Creates a #GError based on the contents of @dbus_error_name and
@dbus_error_message.

Errors registered with g_dbus_error_register_error() will be looked
up using @dbus_error_name and if a match is found, the error domain
and code is used. Applications can use g_dbus_error_get_remote_error()
to recover @dbus_error_name.

If a match against a registered error is not found and the D-Bus
error name is in a form as returned by g_dbus_error_encode_gerror()
the error domain and code encoded in the name is used to
create the #GError. Also, @dbus_error_name is added to the error message
such that it can be recovered with g_dbus_error_get_remote_error().

Otherwise, a #GError with the error code %G_IO_ERROR_DBUS_ERROR
in the #G_IO_ERROR error domain is returned. Also, @dbus_error_name is
added to the error message such that it can be recovered with
g_dbus_error_get_remote_error().

In all three cases, @dbus_error_name can always be recovered from the
returned #GError using the g_dbus_error_get_remote_error() function
(unless g_dbus_error_strip_remote_error() hasn't been used on the returned error).

This function is typically only used in object mappings to prepare
#GError instances for applications. Regular applications should not use
it.
#NAME: state
#PARENT: Gio.SimpleAction
#COMMENT: The state of the action, or %NULL if the action is stateless.
#NAME: message
#PARENT: Gio.DBusMessage.get_sender.utf8
#COMMENT: A #GDBusMessage.
#NAME: get_interface_name
#PARENT: Gio.DBusProxy
#COMMENT: Gets the D-Bus interface name @proxy is for.
#NAME: get_header
#PARENT: Gio.DBusMessage
#COMMENT: Gets a header field on @message.
#NAME: source_object
#PARENT: Gio.Task.report_error.none
#COMMENT: the #GObject that owns
  this task, or %NULL.
#NAME: write_fn
#PARENT: Gio.OutputStream.write_fn
#COMMENT: Number of bytes written, or -1 on error
#NAME: lookup_service_async
#PARENT: Gio.Resolver
#COMMENT: Begins asynchronously performing a DNS SRV lookup for the given
@service and @protocol in the given @domain, and eventually calls
@callback, which must call g_resolver_lookup_service_finish() to
get the final result. See g_resolver_lookup_service() for more
details.
#NAME: drive-changed
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when a drive changes.
#NAME: io_extension_point_implement
#PARENT: Gio.io_extension_point_implement
#COMMENT: a #GIOExtension object for #GType
#NAME: iter
#PARENT: Gio.MenuAttributeIter.get_name.utf8
#COMMENT: a #GMenuAttributeIter
#NAME: type
#PARENT: Gio.FileAttributeInfoList.add.none
#COMMENT: the #GFileAttributeType for the attribute.
#NAME: value
#PARENT: Gio.RemoteActionGroup.change_action_state_full.none
#COMMENT: the new requested value for the state
#NAME: can_eject
#PARENT: Gio.DriveIface.can_eject.can_eject
#COMMENT: %TRUE if the @drive can be ejected, %FALSE otherwise.
#NAME: cancellable
#PARENT: Gio.OutputStream.flush_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_mapping
#PARENT: Gio.Settings.bind_with_mapping.none
#COMMENT: a function that gets called to convert values
    from @settings to @object, or %NULL to use the default GIO mapping
#NAME: ref
#PARENT: Gio.DBusInterfaceInfo.ref
#COMMENT: The same @info.
#NAME: next
#PARENT: Gio.SocketAddressEnumerator
#COMMENT: Retrieves the next #GSocketAddress from @enumerator. Note that this
may block for some amount of time. (Eg, a #GNetworkAddress may need
to do a DNS lookup before it can return an address.) Use
g_socket_address_enumerator_next_async() if you need to avoid
blocking.

If @enumerator is expected to yield addresses, but for some reason
is unable to (eg, because of a DNS error), then the first call to
g_socket_address_enumerator_next() will return an appropriate error
in *@error. However, if the first call to
g_socket_address_enumerator_next() succeeds, then any further
internal errors (other than @cancellable being triggered) will be
ignored.
#NAME: cancellable
#PARENT: Gio.FileIface.enumerate_children_async.enumerate_children_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: cancellable
#PARENT: Gio.InputStream.read_all.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: can_seek
#PARENT: Gio.Seekable
#COMMENT: Tests if the stream supports the #GSeekableIface.
#NAME: connection
#PARENT: Gio.bus_watch_name_on_connection_with_closures.guint
#COMMENT: A #GDBusConnection.
#NAME: info
#PARENT: Gio.DBusProxy.new_sync.DBusProxy
#COMMENT: A #GDBusInterfaceInfo specifying the minimal interface that @proxy conforms to or %NULL.
#NAME: cancel
#PARENT: Gio.FileMonitor
#COMMENT: Cancels a file monitor.
#NAME: get_display_name
#PARENT: Gio.AppInfo.get_display_name
#COMMENT: the display name of the application for @appinfo, or the name if
no display name is available.
#NAME: key
#PARENT: Gio.Settings.set_int.gboolean
#COMMENT: the name of the key to set
#NAME: callback
#PARENT: Gio.FileIface.mount_enclosing_volume.mount_enclosing_volume.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: get_is_multicast
#PARENT: Gio.InetAddress
#COMMENT: Tests whether @address is a multicast address.
#NAME: get
#PARENT: Gio.DBusMenuModel
#COMMENT: Obtains a #GDBusMenuModel for the menu model which is exported
at the given @bus_name and @object_path.

The thread default main context is taken at the time of this call.
All signals on the menu model (and any linked models) are reported
with respect to this context.  All calls on the returned menu model
(and linked models) must also originate from this same context, with
the thread default main context unchanged.
#NAME: stream
#PARENT: Gio.OutputStreamClass.flush.flush.gboolean
#COMMENT: a #GOutputStream.
#NAME: get_socket_type
#PARENT: Gio.SocketClient.get_socket_type
#COMMENT: a #GSocketFamily
#NAME: cancellable
#PARENT: Gio.File.append_to.FileOutputStream
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_deletion_date
#PARENT: Gio.FileInfo
#COMMENT: Returns the #GDateTime representing the deletion date of the file, as
available in G_FILE_ATTRIBUTE_TRASH_DELETION_DATE. If the
G_FILE_ATTRIBUTE_TRASH_DELETION_DATE attribute is unset, %NULL is returned.
#NAME: get_file_database_type
#PARENT: Gio.TlsBackend
#COMMENT: Gets the #GType of @backend's #GTlsFileDatabase implementation.
#NAME: conn
#PARENT: Gio.TlsConnection.set_use_system_certdb.none
#COMMENT: a #GTlsConnection
#NAME: method_name
#PARENT: Gio.DBusProxy.call_with_unix_fd_list.none
#COMMENT: Name of method to invoke.
#NAME: is_writable
#PARENT: Gio.Settings.is_writable
#COMMENT: %TRUE if the key @name is writable
#NAME: make_backup
#PARENT: Gio.FileIface.replace_readwrite_async.replace_readwrite_async.none
#COMMENT: %TRUE if a backup should be created
#NAME: VOLUME_IDENTIFIER_KIND_UUID
#PARENT: Gio
#COMMENT: The string used to obtain a UUID with g_volume_get_identifier().
#NAME: cancellable
#PARENT: Gio.File.unmount_mountable.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: buffer
#PARENT: Gio.pollable_stream_read.gssize
#COMMENT: a buffer to
  read data into
#NAME: entries
#PARENT: Gio.DBusError.register_error_domain.none
#COMMENT: A pointer to @num_entries #GDBusErrorEntry struct items.
#NAME: get_multicast_ttl
#PARENT: Gio.Socket.get_multicast_ttl
#COMMENT: the multicast time-to-live setting on @socket
#NAME: info
#PARENT: Gio.FileInfo.set_attribute_uint64.none
#COMMENT: a #GFileInfo.
#NAME: new_section
#PARENT: Gio.MenuItem.new_section
#COMMENT: a new #GMenuItem
#NAME: stream
#PARENT: Gio.DataOutputStream.put_string.gboolean
#COMMENT: a #GDataOutputStream.
#NAME: get_cached_property_names
#PARENT: Gio.DBusProxy.get_cached_property_names
#COMMENT: A %NULL-terminated array of strings or %NULL if
         @proxy has no cached properties. Free the returned array with
         g_strfreev().
#NAME: is_valid
#PARENT: Gio.SimpleAsyncResult.is_valid
#COMMENT: #TRUE if all checks passed or #FALSE if any failed.
#NAME: tls_client_connection_new
#PARENT: Gio
#COMMENT: Creates a new #GTlsClientConnection wrapping @base_io_stream (which
must have pollable input and output streams) which is assumed to
communicate with the server identified by @server_identity.
#NAME: disk_usage
#PARENT: Gio.FileIface.measure_disk_usage.measure_disk_usage.gboolean
#COMMENT: the number of bytes of disk space used
#NAME: invocation
#PARENT: Gio.DBusInterfaceSkeleton.g-authorize-method.gboolean
#COMMENT: A #GDBusMethodInvocation.
#NAME: get_default
#PARENT: Gio.NetworkMonitor.get_default
#COMMENT: a #GNetworkMonitor
#NAME: mount
#PARENT: Gio.Mount.shadow.none
#COMMENT: A #GMount.
#NAME: cancellable
#PARENT: Gio.File.enumerate_children_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_strv
#PARENT: Gio.Settings.get_strv
#COMMENT: a
newly-allocated, %NULL-terminated array of strings, the value that
is stored at @key in @settings.
#NAME: ref_count
#PARENT: Gio.DBusSignalInfo
#COMMENT: The reference count or -1 if statically allocated.
#NAME: cancellable
#PARENT: Gio.FileIface.monitor_file.monitor_file.FileMonitor
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: load_contents_async
#PARENT: Gio.File
#COMMENT: Starts an asynchronous load of the @file's contents.

For more details, see g_file_load_contents() which is
the synchronous version of this call.

When the load operation has completed, @callback will be called
with @user data. To finish the operation, call
g_file_load_contents_finish() with the #GAsyncResult returned by
the @callback.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: close-fd
#PARENT: Gio.UnixOutputStream
#COMMENT: Whether to close the file descriptor when the stream is closed.
#NAME: launch_uris_as_manager
#PARENT: Gio.DesktopAppInfo.launch_uris_as_manager
#COMMENT: %TRUE on successful launch, %FALSE otherwise.
#NAME: bind
#PARENT: Gio.Socket
#COMMENT: When a socket is created it is attached to an address family, but it
doesn't have an address in this family. g_socket_bind() assigns the
address (sometimes called name) of the socket.

It is generally required to bind to a local address before you can
receive connections. (See g_socket_listen() and g_socket_accept() ).
In certain situations, you may also want to bind a socket that will be
used to initiate connections, though this is not normally required.

If @socket is a TCP socket, then @allow_reuse controls the setting
of the `SO_REUSEADDR` socket option; normally it should be %TRUE for
server sockets (sockets that you will eventually call
g_socket_accept() on), and %FALSE for client sockets. (Failing to
set this flag on a server socket may cause g_socket_bind() to return
%G_IO_ERROR_ADDRESS_IN_USE if the server program is stopped and then
immediately restarted.)

If @socket is a UDP socket, then @allow_reuse determines whether or
not other UDP sockets can be bound to the same address at the same
time. In particular, you can have several UDP sockets bound to the
same address, and they will all receive all of the multicast and
broadcast packets sent to that address. (The behavior of unicast
UDP packets to an address with multiple listeners is not defined.)
#NAME: info
#PARENT: Gio.DBusInterfaceInfo.lookup_method.DBusMethodInfo
#COMMENT: A #GDBusInterfaceInfo.
#NAME: enumerate_identifiers
#PARENT: Gio.Volume.enumerate_identifiers
#COMMENT: a %NULL-terminated array
  of strings containing kinds of identifiers. Use g_strfreev() to free.
#NAME: action
#PARENT: Gio.ActionInterface.get_state_hint.get_state_hint.GLib.Variant
#COMMENT: a #GAction
#NAME: expired
#PARENT: Gio.TlsCertificateFlags
#COMMENT: The certificate has expired
#NAME: attribute
#PARENT: Gio.File.set_attribute.gboolean
#COMMENT: a string containing the attribute's name
#NAME: acquire_async
#PARENT: Gio.Permission
#COMMENT: Attempts to acquire the permission represented by @permission.

This is the first half of the asynchronous version of
g_permission_acquire().
#NAME: callback
#PARENT: Gio.File.delete_file_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: user_data
#PARENT: Gio.File.replace_contents_async.none
#COMMENT: the data to pass to callback function
#NAME: timeout_msec
#PARENT: Gio.DBusConnection.send_message_with_reply.none
#COMMENT: the timeout in milliseconds, -1 to use the default
    timeout or %G_MAXINT for no timeout
#NAME: append_name
#PARENT: Gio.ThemedIcon
#COMMENT: Append a name to the list of icons from within @icon.

Note that doing so invalidates the hash computed by prior calls
to g_icon_hash().
#NAME: list
#PARENT: Gio.FileAttributeInfoList.lookup.FileAttributeInfo
#COMMENT: a #GFileAttributeInfoList.
#NAME: unref
#PARENT: Gio.SettingsSchema
#COMMENT: Decrease the reference count of @schema, possibly freeing it.
#NAME: dbus_address_get_stream_sync
#PARENT: Gio
#COMMENT: Synchronously connects to an endpoint specified by @address and
sets up the connection so it is in a state to run the client-side
of the D-Bus authentication conversation.

This is a synchronous failable function. See
g_dbus_address_get_stream() for the asynchronous version.
#NAME: mount_path
#PARENT: Gio.unix_mount_at.UnixMountEntry
#COMMENT: path for a possible unix mount.
#NAME: source_object
#PARENT: Gio.Task.new.Task
#COMMENT: the #GObject that owns
  this task, or %NULL.
#NAME: drive
#PARENT: Gio.VolumeMonitor.drive-eject-button.none
#COMMENT: the drive where the eject button was pressed
#NAME: user_data
#PARENT: Gio.OutputStreamClass.flush_async.flush_async.none
#COMMENT: the data to pass to callback function
#NAME: SocketSourceFunc
#PARENT: Gio
#COMMENT: This is the function type of the callback used for the #GSource
returned by g_socket_create_source().
#NAME: measure_disk_usage
#PARENT: Gio.File
#COMMENT: Recursively measures the disk usage of @file.

This is essentially an analog of the 'du' command, but it also
reports the number of directories and non-directory files encountered
(including things like symbolic links).

By default, errors are only reported against the toplevel file
itself.  Errors found while recursing are silently ignored, unless
%G_FILE_DISK_USAGE_REPORT_ALL_ERRORS is given in @flags.

The returned size, @disk_usage, is in bytes and should be formatted
with g_format_size() in order to get something reasonable for showing
in a user interface.

@progress_callback and @progress_data can be given to request
periodic progress updates while scanning.  See the documentation for
#GFileMeasureProgressCallback for information about when and how the
callback will be invoked.
#NAME: new_any
#PARENT: Gio.InetAddress
#COMMENT: Creates a #GInetAddress for the "any" address (unassigned/"don't
care") for @family.
#NAME: acquire
#PARENT: Gio.Permission
#COMMENT: Attempts to acquire the permission represented by @permission.

The precise method by which this happens depends on the permission
and the underlying authentication mechanism.  A simple example is
that a dialog may appear asking the user to enter their password.

You should check with g_permission_get_can_acquire() before calling
this function.

If the permission is acquired then %TRUE is returned.  Otherwise,
%FALSE is returned and @error is set appropriately.

This call is blocking, likely for a very long time (in the case that
user interaction is required).  See g_permission_acquire_async() for
the non-blocking version.
#NAME: append_item
#PARENT: Gio.Menu
#COMMENT: Appends @item to the end of @menu.

See g_menu_insert_item() for more information.
#NAME: get_size
#PARENT: Gio.FileInfo.get_size
#COMMENT: a #goffset containing the file's size.
#NAME: add_inet_port
#PARENT: Gio.SocketListener
#COMMENT: Helper function for g_socket_listener_add_address() that
creates a TCP/IP socket listening on IPv4 and IPv6 (if
supported) on the specified port on all interfaces.

@source_object will be passed out in the various calls
to accept to identify this particular source, which is
useful if you're listening on multiple addresses and do
different things depending on what address is connected to.
#NAME: can_remove_supports_type
#PARENT: Gio.AppInfo
#COMMENT: Checks if a supported content type can be removed from an application.
#NAME: get_locked
#PARENT: Gio.DBusMessage
#COMMENT: Checks whether @message is locked. To monitor changes to this
value, conncet to the #GObject::notify signal to listen for changes
on the #GDBusMessage:locked property.
#NAME: new
#PARENT: Gio.SimpleIOStream
#COMMENT: Creates a new #GSimpleIOStream wrapping @input_stream and @output_stream.
See also #GIOStream.
#NAME: get_is_link_local
#PARENT: Gio.InetAddress.get_is_link_local
#COMMENT: %TRUE if @address is a link-local address.
#NAME: eject
#PARENT: Gio.Mount
#COMMENT: Ejects a mount. This is an asynchronous operation, and is
finished by calling g_mount_eject_finish() with the @mount
and #GAsyncResult data returned in the @callback.
#NAME: dbus_error_name
#PARENT: Gio.DBusError.register_error.gboolean
#COMMENT: A D-Bus error name.
#NAME: name_vanished_handler
#PARENT: Gio.bus_watch_name.guint
#COMMENT: Handler to invoke when @name is known to not exist or %NULL.
#NAME: result
#PARENT: Gio.FileEnumeratorClass.close_finish.close_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: get_scheme
#PARENT: Gio.NetworkAddress.get_scheme
#COMMENT: @addr's scheme (%NULL if not built from URI)
#NAME: set_body
#PARENT: Gio.Notification
#COMMENT: Sets the body of @notification to @body.
#NAME: enumerator
#PARENT: Gio.FileEnumeratorClass.next_files_finish.next_files_finish.FileInfo
#COMMENT: a #GFileEnumerator.
#NAME: supports_files
#PARENT: Gio.AppInfo
#COMMENT: Checks if the application accepts files as arguments.
#NAME: target_value
#PARENT: Gio.Action.print_detailed_name.utf8
#COMMENT: a #GVariant target value, or %NULL
#NAME: result
#PARENT: Gio.FileIface.set_attributes_finish.set_attributes_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: cancellable
#PARENT: Gio.FileIface.eject_mountable.eject_mountable.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: cancellable
#PARENT: Gio.ResolverClass.lookup_by_address.lookup_by_address.utf8
#COMMENT: a #GCancellable, or %NULL
#NAME: flags
#PARENT: Gio.Subprocess.newv.Subprocess
#COMMENT: flags that define the behaviour of the subprocess
#NAME: message
#PARENT: Gio.UnixCredentialsMessage.get_credentials.Credentials
#COMMENT: A #GUnixCredentialsMessage.
#NAME: get_domain
#PARENT: Gio.NetworkService.get_domain
#COMMENT: @srv's domain name
#NAME: set_default_action
#PARENT: Gio.Notification
#COMMENT: Sets the default action of @notification to @detailed_action. This
action is activated when the notification is clicked on.

The action in @detailed_action must be an application-wide action (it
must start with "app."). If @detailed_action contains a target, the
given action will be activated with that target as its parameter.
See g_action_parse_detailed_name() for a description of the format
for @detailed_action.

When no default action is set, the application that the notification
was sent on is activated.
#NAME: set_description
#PARENT: Gio.TlsPassword
#COMMENT: Set a description string about what the password will be used for.
#NAME: set_attribute_byte_string
#PARENT: Gio.File.set_attribute_byte_string
#COMMENT: %TRUE if the @attribute was successfully set to @value
    in the @file, %FALSE otherwise.
#NAME: get_arguments
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Gets the list of arguments that was passed on the command line.

The strings in the array may contain non-UTF-8 data on UNIX (such as
filenames or arguments given in the system locale) but are always in
UTF-8 on Windows.

If you wish to use the return value with #GOptionContext, you must
use g_option_context_parse_strv().

The return value is %NULL-terminated and should be freed using
g_strfreev().
#NAME: IconIface
#PARENT: Gio
#COMMENT: GIconIface is used to implement GIcon types for various
different systems. See #GThemedIcon and #GLoadableIcon for
examples of how to implement this interface.
#NAME: unbind
#PARENT: Gio.Settings
#COMMENT: Removes an existing binding for @property on @object.

Note that bindings are automatically removed when the
object is finalized, so it is rarely necessary to call this
function.
#NAME: format
#PARENT: Gio.ApplicationCommandLine.print.none
#COMMENT: a printf-style format string
#NAME: peer-certificate
#PARENT: Gio.TlsConnection
#COMMENT: The connection's peer's certificate, after the TLS handshake has
completed and the certificate has been accepted. Note in
particular that this is not yet set during the emission of
#GTlsConnection::accept-certificate.

(You can watch for a #GObject::notify signal on this property to
detect when a handshake has occurred.)
#NAME: delete
#PARENT: Gio.File
#COMMENT: Deletes a file. If the @file is a directory, it will only be
deleted if it is empty. This has the same semantics as g_unlink().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: out_serial
#PARENT: Gio.DBusConnection.send_message_with_reply_sync.DBusMessage
#COMMENT: return location for serial number
    assigned to @message when sending it or %NULL
#NAME: user_data
#PARENT: Gio.FileIface.delete_file_async.delete_file_async.none
#COMMENT: the data to pass to callback function
#NAME: read_uint64
#PARENT: Gio.DataInputStream.read_uint64
#COMMENT: an unsigned 64-bit/8-byte read from @stream or %0 if
an error occurred.
#NAME: get_value
#PARENT: Gio.Settings
#COMMENT: Gets the value that is stored in @settings for @key.

It is a programmer error to give a @key that isn't contained in the
schema for @settings.
#NAME: trusted_ca
#PARENT: Gio.TlsCertificate.verify.TlsCertificateFlags
#COMMENT: the certificate of a trusted authority
#NAME: active
#PARENT: Gio.DBusServer
#COMMENT: Whether the server is currently active.
#NAME: set_interface
#PARENT: Gio.DBusMessage
#COMMENT: Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE header field.
#NAME: do_not_auto_start_at_construction
#PARENT: Gio.DBusProxyFlags
#COMMENT: If the proxy is for a well-known name,
do not ask the bus to launch an owner during proxy initialization, but allow it to be
autostarted by a method call. This flag is only meaningful in proxies for well-known names,
and only if %G_DBUS_PROXY_FLAGS_DO_NOT_AUTOSTART is not also specified.
#NAME: MountMountFlags
#PARENT: Gio
#COMMENT: Flags used when mounting a mount.
#NAME: DBusMethodInvocation
#PARENT: Gio
#COMMENT: Instances of the #GDBusMethodInvocation class are used when
handling D-Bus method calls. It provides a way to asynchronously
return results and errors.

The normal way to obtain a #GDBusMethodInvocation object is to receive
it as an argument to the handle_method_call() function in a
#GDBusInterfaceVTable that was passed to g_dbus_connection_register_object().
#NAME: message
#PARENT: Gio.DBusMessage.get_error_name.utf8
#COMMENT: A #GDBusMessage.
#NAME: get_commandline
#PARENT: Gio.AppInfoIface.get_commandline.get_commandline
#COMMENT: a string containing the @appinfo's commandline,
    or %NULL if this information is not available
#NAME: manager
#PARENT: Gio.DBusObjectManagerServer.export.none
#COMMENT: A #GDBusObjectManagerServer.
#NAME: get_error_name
#PARENT: Gio.DBusMessage
#COMMENT: Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field.
#NAME: write_bytes_finish
#PARENT: Gio.OutputStream
#COMMENT: Finishes a stream write-from-#GBytes operation.
#NAME: get_value
#PARENT: Gio.MenuAttributeIter.get_value
#COMMENT: the value of the current attribute
#NAME: get_link
#PARENT: Gio.MenuItem
#COMMENT: Queries the named @link on @menu_item.
#NAME: drive
#PARENT: Gio.Drive.eject.none
#COMMENT: a #GDrive.
#NAME: set_rehandshake_mode
#PARENT: Gio.TlsConnection
#COMMENT: Sets how @conn behaves with respect to rehandshaking requests.

%G_TLS_REHANDSHAKE_NEVER means that it will never agree to
rehandshake after the initial handshake is complete. (For a client,
this means it will refuse rehandshake requests from the server, and
for a server, this means it will close the connection with an error
if the client attempts to rehandshake.)

%G_TLS_REHANDSHAKE_SAFELY means that the connection will allow a
rehandshake only if the other end of the connection supports the
TLS `renegotiation_info` extension. This is the default behavior,
but means that rehandshaking will not work against older
implementations that do not support that extension.

%G_TLS_REHANDSHAKE_UNSAFELY means that the connection will allow
rehandshaking even without the `renegotiation_info` extension. On
the server side in particular, this is not recommended, since it
leaves the server open to certain attacks. However, this mode is
necessary if you need to allow renegotiation with older client
software.
#NAME: trash
#PARENT: Gio.File.trash
#COMMENT: %TRUE on successful trash, %FALSE otherwise.
#NAME: new_submenu
#PARENT: Gio.MenuItem
#COMMENT: Creates a new #GMenuItem representing a submenu.

This is a convenience API around g_menu_item_new() and
g_menu_item_set_submenu().
#NAME: num_vectors
#PARENT: Gio.Socket.send_message.gssize
#COMMENT: the number of elements in @vectors, or -1
#NAME: mount
#PARENT: Gio.Mount.get_name.utf8
#COMMENT: a #GMount.
#NAME: menu
#PARENT: Gio.Menu.insert_section.none
#COMMENT: a #GMenu
#NAME: invalid_filename
#PARENT: Gio.IOErrorEnum
#COMMENT: Filename is invalid or contains invalid characters.
#NAME: info
#PARENT: Gio.FileIface.set_attributes_finish.set_attributes_finish.gboolean
#COMMENT: a #GFileInfo
#NAME: io_modules_load_all_in_directory_with_scope
#PARENT: Gio
#COMMENT: Loads all the modules in the specified directory.

If don't require all modules to be initialized (and thus registering
all gtypes) then you can use g_io_modules_scan_all_in_directory()
which allows delayed/lazy loading of modules.
#NAME: register_object
#PARENT: Gio.DBusConnection
#COMMENT: Registers callbacks for exported objects at @object_path with the
D-Bus interface that is described in @interface_info.

Calls to functions in @vtable (and @user_data_free_func) will happen
in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this method from.

Note that all #GVariant values passed to functions in @vtable will match
the signature given in @interface_info - if a remote caller passes
incorrect values, the `org.freedesktop.DBus.Error.InvalidArgs`
is returned to the remote caller.

Additionally, if the remote caller attempts to invoke methods or
access properties not mentioned in @interface_info the
`org.freedesktop.DBus.Error.UnknownMethod` resp.
`org.freedesktop.DBus.Error.InvalidArgs` errors
are returned to the caller.

It is considered a programming error if the
#GDBusInterfaceGetPropertyFunc function in @vtable returns a
#GVariant of incorrect type.

If an existing callback is already registered at @object_path and
@interface_name, then @error is set to #G_IO_ERROR_EXISTS.

GDBus automatically implements the standard D-Bus interfaces
org.freedesktop.DBus.Properties, org.freedesktop.DBus.Introspectable
and org.freedesktop.Peer, so you don't have to implement those for the
objects you export. You can implement org.freedesktop.DBus.Properties
yourself, e.g. to handle getting and setting of properties asynchronously.

Note that the reference count on @interface_info will be
incremented by 1 (unless allocated statically, e.g. if the
reference count is -1, see g_dbus_interface_info_ref()) for as long
as the object is exported. Also note that @vtable will be copied.

See this [server][gdbus-server] for an example of how to use this method.
#NAME: result
#PARENT: Gio.File.eject_mountable_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: port
#PARENT: Gio.NetworkAddress.new_loopback.NetworkAddress
#COMMENT: the port
#NAME: user_data
#PARENT: Gio.ResolverClass.lookup_records_async.lookup_records_async.none
#COMMENT: data for @callback
#NAME: type
#PARENT: Gio.FileInfo.set_attribute.none
#COMMENT: a #GFileAttributeType
#NAME: get_destination_hostname
#PARENT: Gio.ProxyAddress.get_destination_hostname
#COMMENT: the @proxy's destination hostname
#NAME: interaction
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer.TlsCertificate
#COMMENT: used to interact with the user if necessary
#NAME: callback
#PARENT: Gio.File.load_contents_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: add_supports_type
#PARENT: Gio.AppInfoIface.add_supports_type.add_supports_type
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: print
#PARENT: Gio.DBusMessage
#COMMENT: Produces a human-readable multi-line description of @message.

The contents of the description has no ABI guarantees, the contents
and formatting is subject to change at any time. Typical output
looks something like this:
|[
Flags:   none
Version: 0
Serial:  4
Headers:
  path -> objectpath '/org/gtk/GDBus/TestObject'
  interface -> 'org.gtk.GDBus.TestInterface'
  member -> 'GimmeStdout'
  destination -> ':1.146'
Body: ()
UNIX File Descriptors:
  (none)
]|
or
|[
Flags:   no-reply-expected
Version: 0
Serial:  477
Headers:
  reply-serial -> uint32 4
  destination -> ':1.159'
  sender -> ':1.146'
  num-unix-fds -> uint32 1
Body: ()
UNIX File Descriptors:
  fd 12: dev=0:10,mode=020620,ino=5,uid=500,gid=5,rdev=136:2,size=0,atime=1273085037,mtime=1273085851,ctime=1272982635
]|
#NAME: temporary_failure
#PARENT: Gio.ResolverError
#COMMENT: the requested information could not
    be looked up due to a network error or similar problem
#NAME: stream
#PARENT: Gio.PollableOutputStream.can_poll.gboolean
#COMMENT: a #GPollableOutputStream.
#NAME: content_type
#PARENT: Gio.app_info_get_recommended_for_type.AppInfo
#COMMENT: the content type to find a #GAppInfo for
#NAME: dup
#PARENT: Gio.AppInfo.dup
#COMMENT: a duplicate of @appinfo.
#NAME: flush_finish
#PARENT: Gio.OutputStream
#COMMENT: Finishes flushing an output stream.
#NAME: call_sync
#PARENT: Gio.DBusConnection
#COMMENT: Synchronously invokes the @method_name method on the
@interface_name D-Bus interface on the remote object at
@object_path owned by @bus_name.

If @connection is closed then the operation will fail with
%G_IO_ERROR_CLOSED. If @cancellable is canceled, the
operation will fail with %G_IO_ERROR_CANCELLED. If @parameters
contains a value not compatible with the D-Bus protocol, the operation
fails with %G_IO_ERROR_INVALID_ARGUMENT.

If @reply_type is non-%NULL then the reply will be checked for having
this type and an error will be raised if it does not match.  Said
another way, if you give a @reply_type then any non-%NULL return
value will be of this type.

If the @parameters #GVariant is floating, it is consumed.
This allows convenient 'inline' use of g_variant_new(), e.g.:
|[<!-- language="C" -->
 g_dbus_connection_call_sync (connection,
                              "org.freedesktop.StringThings",
                              "/org/freedesktop/StringThings",
                              "org.freedesktop.StringThings",
                              "TwoStrings",
                              g_variant_new ("(ss)",
                                             "Thing One",
                                             "Thing Two"),
                              NULL,
                              G_DBUS_CALL_FLAGS_NONE,
                              -1,
                              NULL,
                              &error);
]|

The calling thread is blocked until a reply is received. See
g_dbus_connection_call() for the asynchronous version of
this method.
#NAME: name
#PARENT: Gio.File.get_child.File
#COMMENT: string containing the child's basename
#NAME: file
#PARENT: Gio.File.unmount_mountable_finish.gboolean
#COMMENT: input #GFile
#NAME: subprocess
#PARENT: Gio.Subprocess.communicate_finish.gboolean
#COMMENT: Self
#NAME: cancellable
#PARENT: Gio.SocketClient.connect_to_uri_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: poll_for_media_finish
#PARENT: Gio.Drive.poll_for_media_finish
#COMMENT: %TRUE if the drive has been poll_for_mediaed successfully,
    %FALSE otherwise.
#NAME: position
#PARENT: Gio.Menu.insert_submenu.none
#COMMENT: the position at which to insert the item
#NAME: callback
#PARENT: Gio.Subprocess.wait_async.none
#COMMENT: a #GAsyncReadyCallback to call when the operation is complete
#NAME: func
#PARENT: Gio.IOSchedulerJob.send_to_mainloop.gboolean
#COMMENT: a #GSourceFunc callback that will be called in the original thread
#NAME: ttl
#PARENT: Gio.Socket.set_multicast_ttl.none
#COMMENT: the time-to-live value for all multicast datagrams on @socket
#NAME: progress_callback
#PARENT: Gio.FileIface.copy_async.copy_async.none
#COMMENT: function to callback with progress
    information, or %NULL if progress information is not needed
#NAME: get_interface_name
#PARENT: Gio.DBusProxy.get_interface_name
#COMMENT: A string owned by @proxy. Do not free.
#NAME: clear_emblems
#PARENT: Gio.EmblemedIcon
#COMMENT: Removes all the emblems from @icon.
#NAME: user_data
#PARENT: Gio.FileIOStreamClass.query_info_async.query_info_async.none
#COMMENT: the data to pass to callback function
#NAME: cancellable
#PARENT: Gio.OutputStream.splice.gssize
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: iter
#PARENT: Gio.MenuAttributeIterClass.get_next.get_next.gboolean
#COMMENT: a #GMenuAttributeIter
#NAME: file
#PARENT: Gio.File.set_attribute_int32.gboolean
#COMMENT: input #GFile
#NAME: get_can_release
#PARENT: Gio.Permission.get_can_release
#COMMENT: the value of the 'can-release' property
#NAME: drive
#PARENT: Gio.DriveIface.eject_with_operation.eject_with_operation.none
#COMMENT: a #GDrive.
#NAME: hash
#PARENT: Gio.IconIface.hash.hash
#COMMENT: a #guint containing a hash for the @icon, suitable for
use in a #GHashTable or similar data structure.
#NAME: user_setup
#PARENT: Gio.DesktopAppInfo.launch_uris_as_manager.gboolean
#COMMENT: a #GSpawnChildSetupFunc, used once
    for each process.
#NAME: action
#PARENT: Gio.Action.activate.none
#COMMENT: a #GAction
#NAME: credentials
#PARENT: Gio.Credentials.get_unix_pid.gint
#COMMENT: A #GCredentials
#NAME: new_take_error
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Creates a #GSimpleAsyncResult from an error condition, and takes over the
caller's ownership of @error, so the caller does not need to free it anymore.
#NAME: get_drive
#PARENT: Gio.Volume
#COMMENT: Gets the drive for the @volume.
#NAME: enumerator
#PARENT: Gio.FileEnumeratorClass.next_files_async.next_files_async.none
#COMMENT: a #GFileEnumerator.
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.get_action_state_type.get_action_state_type.GLib.VariantType
#COMMENT: the name of the action to query
#NAME: value
#PARENT: Gio.TlsPassword.set_value_full.none
#COMMENT: the value for the password
#NAME: password
#PARENT: Gio.TlsPassword.set_warning.none
#COMMENT: a #GTlsPassword object
#NAME: method_name
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: the name of the method to invoke
#NAME: arg
#PARENT: Gio.file_new_for_commandline_arg.File
#COMMENT: a command line string
#NAME: pollable_stream_read
#PARENT: Gio
#COMMENT: Tries to read from @stream, as with g_input_stream_read() (if
@blocking is %TRUE) or g_pollable_input_stream_read_nonblocking()
(if @blocking is %FALSE). This can be used to more easily share
code between blocking and non-blocking implementations of a method.

If @blocking is %FALSE, then @stream must be a
#GPollableInputStream for which g_pollable_input_stream_can_poll()
returns %TRUE, or else the behavior is undefined. If @blocking is
%TRUE, then @stream does not need to be a #GPollableInputStream.
#NAME: get_method_name
#PARENT: Gio.DBusMethodInvocation.get_method_name
#COMMENT: A string. Do not free, it is owned by @invocation.
#NAME: settings
#PARENT: Gio.Settings.get_range.GLib.Variant
#COMMENT: a #GSettings
#NAME: base_stream
#PARENT: Gio.ConverterOutputStream.new.OutputStream
#COMMENT: a #GOutputStream
#NAME: get_attribute_object
#PARENT: Gio.FileInfo.get_attribute_object
#COMMENT: a #GObject associated with the given @attribute, or
%NULL otherwise.
#NAME: manager
#PARENT: Gio.DBusProxyTypeFunc.GType
#COMMENT: A #GDBusObjectManagerClient.
#NAME: item-type
#PARENT: Gio.ListStore
#COMMENT: The type of items contained in this list store. Items must be
subclasses of #GObject.
#NAME: read_all_finish
#PARENT: Gio.InputStream.read_all_finish
#COMMENT: %TRUE on success, %FALSE if there was an error
#NAME: has_media
#PARENT: Gio.Drive
#COMMENT: Checks if the @drive has media. Note that the OS may not be polling
the drive for media changes; see g_drive_is_media_check_automatic()
for more details.
#NAME: get_flags
#PARENT: Gio.TlsPassword
#COMMENT: Get flags about the password.
#NAME: conn
#PARENT: Gio.TlsClientConnection.get_use_ssl3.gboolean
#COMMENT: the #GTlsClientConnection
#NAME: io_modules_scan_all_in_directory
#PARENT: Gio
#COMMENT: Scans all the modules in the specified directory, ensuring that
any extension point implemented by a module is registered.

This may not actually load and initialize all the types in each
module, some modules may be lazily loaded and initialized when
an extension point it implementes is used with e.g.
g_io_extension_point_get_extensions() or
g_io_extension_point_get_extension_by_name().

If you need to guarantee that all types are loaded in all the modules,
use g_io_modules_load_all_in_directory().
#NAME: new
#PARENT: Gio.DataOutputStream.new
#COMMENT: #GDataOutputStream.
#NAME: none
#PARENT: Gio.DBusProxyFlags
#COMMENT: No flags set.
#NAME: io_priority
#PARENT: Gio.OutputStream.splice_async.none
#COMMENT: the io priority of the request.
#NAME: callback
#PARENT: Gio.FileIOStreamClass.query_info_async.query_info_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: get_is_symlink
#PARENT: Gio.FileInfo
#COMMENT: Checks if a file is a symlink.
#NAME: add_supports_type
#PARENT: Gio.AppInfo
#COMMENT: Adds a content type to the application information to indicate the
application is capable of opening files with the given content type.
#NAME: object
#PARENT: Gio.Settings.bind_writable.none
#COMMENT: a #GObject
#NAME: connectable
#PARENT: Gio.SocketConnectable.enumerate.SocketAddressEnumerator
#COMMENT: a #GSocketConnectable
#NAME: propagate_boolean
#PARENT: Gio.Task
#COMMENT: Gets the result of @task as a #gboolean.

If the task resulted in an error, or was cancelled, then this will
instead return %FALSE and set @error.

Since this method transfers ownership of the return value (or
error) to the caller, you may only call it once.
#NAME: size
#PARENT: Gio.FileInfo.set_size.none
#COMMENT: a #goffset containing the file's size.
#NAME: path
#PARENT: Gio.Settings.new_with_path.Settings
#COMMENT: the path to use
#NAME: format
#PARENT: Gio.ApplicationCommandLine.printerr.none
#COMMENT: a printf-style format string
#NAME: result
#PARENT: Gio.DataInputStream.read_line_finish.guint8
#COMMENT: the #GAsyncResult that was provided to the callback.
#NAME: unknown
#PARENT: Gio.DriveStartStopType
#COMMENT: Unknown or drive doesn't support
   start/stop.
#NAME: SettingsSchemaSource
#PARENT: Gio
#COMMENT: This is an opaque structure type.  You may not access it directly.
#NAME: wait_check_finish
#PARENT: Gio.Subprocess
#COMMENT: Collects the result of a previous call to
g_subprocess_wait_check_async().
#NAME: get_content_type
#PARENT: Gio.FileInfo
#COMMENT: Gets the file's content type.
#NAME: stream
#PARENT: Gio.InputStream.close_finish.gboolean
#COMMENT: a #GInputStream.
#NAME: dbus_is_supported_address
#PARENT: Gio
#COMMENT: Like g_dbus_is_address() but also checks if the library suppors the
transports in @string and that key/value pairs for each transport
are valid.
#NAME: take_error
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Sets the result from @error, and takes over the caller's ownership
of @error, so the caller does not need to free it any more.
#NAME: get_object
#PARENT: Gio.DBusInterface
#COMMENT: Gets the #GDBusObject that @interface_ belongs to, if any.

It is not safe to use the returned object if @interface_ or
the returned object is being used from other threads. See
g_dbus_interface_dup_object() for a thread-safe alternative.
#NAME: offset
#PARENT: Gio.SeekableIface.seek.seek.gboolean
#COMMENT: a #goffset.
#NAME: set_option
#PARENT: Gio.Socket.set_option
#COMMENT: success or failure. On failure, @error will be set, and
  the system error value (`errno` or WSAGetLastError()) will still
  be set to the result of the setsockopt() call.
#NAME: release_finish
#PARENT: Gio.Permission.release_finish
#COMMENT: %TRUE if the permission was successfully released
#NAME: DBusActionGroup
#PARENT: Gio
#COMMENT: #GDBusActionGroup is an implementation of the #GActionGroup
interface that can be used as a proxy for an action group
that is exported over D-Bus with g_dbus_connection_export_action_group().
#NAME: socket
#PARENT: Gio.Socket.accept.Socket
#COMMENT: a #GSocket.
#NAME: parse_name
#PARENT: Gio.Vfs.parse_name
#COMMENT: a #GFile for the given @parse_name.
    Free the returned object with g_object_unref().
#NAME: get_state_hint
#PARENT: Gio.Action
#COMMENT: Requests a hint about the valid range of values for the state of
@action.

If %NULL is returned it either means that the action is not stateful
or that there is no hint about the valid range of values for the
state of the action.

If a #GVariant array is returned then each item in the array is a
possible value for the state.  If a #GVariant pair (ie: two-tuple) is
returned then the tuple specifies the inclusive lower and upper bound
of valid values for the state.

In any case, the information is merely a hint.  It may be possible to
have a state value outside of the hinted range and setting a value
within the range may fail.

The return value (if non-%NULL) should be freed with
g_variant_unref() when it is no longer required.
#NAME: hash
#PARENT: Gio.Icon.hash
#COMMENT: a #guint containing a hash for the @icon, suitable for
use in a #GHashTable or similar data structure.
#NAME: value
#PARENT: Gio.MenuItem.set_attribute_value.none
#COMMENT: a #GVariant to use as the value, or %NULL
#NAME: BusNameVanishedCallback
#PARENT: Gio
#COMMENT: Invoked when the name being watched is known not to have to have a owner.

This is also invoked when the #GDBusConection on which the watch was
established has been closed.  In that case, @connection will be
%NULL.
#NAME: destroy
#PARENT: Gio.TlsPassword.set_value.none
#COMMENT: a function to use to free the password.
#NAME: PollableInputStream
#PARENT: Gio
#COMMENT: #GPollableInputStream is implemented by #GInputStreams that
can be polled for readiness to read. This can be used when
interfacing with a non-GIO API that expects
UNIX-file-descriptor-style asynchronous I/O rather than GIO-style.
#NAME: int32
#PARENT: Gio.FileAttributeType
#COMMENT: a signed 4-byte/32-bit integer.
#NAME: rrname
#PARENT: Gio.ResolverClass.lookup_records_async.lookup_records_async.none
#COMMENT: the DNS name to lookup the record for
#NAME: bus_watch_name_on_connection
#PARENT: Gio.bus_watch_name_on_connection
#COMMENT: An identifier (never 0) that an be used with
g_bus_unwatch_name() to stop watching the name.
#NAME: message
#PARENT: Gio.DBusMessage.get_serial.guint32
#COMMENT: A #GDBusMessage.
#NAME: flags
#PARENT: Gio.bus_watch_name_with_closures.guint
#COMMENT: Flags from the #GBusNameWatcherFlags enumeration.
#NAME: to_string
#PARENT: Gio.InetAddressClass.to_string.to_string
#COMMENT: a representation of @address as a string, which should be
freed after use.
#NAME: subprocess
#PARENT: Gio.Subprocess.wait_check_finish.gboolean
#COMMENT: a #GSubprocess
#NAME: file
#PARENT: Gio.FileIface.eject_mountable_finish.eject_mountable_finish.gboolean
#COMMENT: input #GFile
#NAME: proxy
#PARENT: Gio.DBusProxy.get_object_path.utf8
#COMMENT: A #GDBusProxy.
#NAME: action_name
#PARENT: Gio.ActionGroup.get_action_state_type.GLib.VariantType
#COMMENT: the name of the action to query
#NAME: register
#PARENT: Gio.Application.register
#COMMENT: %TRUE if registration succeeded
#NAME: connectable
#PARENT: Gio.SocketClient.event.none
#COMMENT: the #GSocketConnectable that @event is occurring on
#NAME: copy
#PARENT: Gio.File.copy
#COMMENT: %TRUE on success, %FALSE otherwise.
#NAME: task
#PARENT: Gio.Task.set_priority.none
#COMMENT: the #GTask
#NAME: unmount_with_operation
#PARENT: Gio.Mount
#COMMENT: Unmounts a mount. This is an asynchronous operation, and is
finished by calling g_mount_unmount_with_operation_finish() with the @mount
and #GAsyncResult data returned in the @callback.
#NAME: converter_stream
#PARENT: Gio.ConverterInputStream.get_converter.Converter
#COMMENT: a #GConverterInputStream
#NAME: steal_fds
#PARENT: Gio.UnixFDList
#COMMENT: Returns the array of file descriptors that is contained in this
object.

After this call, the descriptors are no longer contained in
@list. Further calls will return an empty list (unless more
descriptors have been added).

The return result of this function must be freed with g_free().
The caller is also responsible for closing all of the file
descriptors.  The file descriptors in the array are set to
close-on-exec.

If @length is non-%NULL then it is set to the number of file
descriptors in the returned array. The returned array is also
terminated with -1.

This function never returns %NULL. In case there are no file
descriptors contained in @list, an empty array is returned.
#NAME: file
#PARENT: Gio.File.set_display_name.File
#COMMENT: input #GFile
#NAME: task
#PARENT: Gio.TaskThreadFunc.none
#COMMENT: the #GTask
#NAME: io_priority
#PARENT: Gio.FileOutputStreamClass.query_info_async.query_info_async.none
#COMMENT: the [I/O priority][gio-GIOScheduler] of the request
#NAME: address
#PARENT: Gio.UnixSocketAddress.get_address_type.UnixSocketAddressType
#COMMENT: a #GInetSocketAddress
#NAME: can_eject
#PARENT: Gio.Drive
#COMMENT: Checks if a drive can be ejected.
#NAME: authentication_allow_anonymous
#PARENT: Gio.DBusConnectionFlags
#COMMENT: When
authenticating as a server, allow the anonymous authentication
method.
#NAME: lookup
#PARENT: Gio.FileAttributeInfoList
#COMMENT: Gets the file attribute with the name @name from @list.
#NAME: internal
#PARENT: Gio.ResolverError
#COMMENT: unknown error
#NAME: stdout_silence
#PARENT: Gio.SubprocessFlags
#COMMENT: silence the stdout of the spawned
  process (ie: redirect to /dev/null).
#NAME: content_type
#PARENT: Gio.FileInfo.set_content_type.none
#COMMENT: a content type. See [GContentType][gio-GContentType]
#NAME: submenu
#PARENT: Gio.Menu.prepend_submenu.none
#COMMENT: a #GMenuModel with the items of the submenu
#NAME: source_fd
#PARENT: Gio.SubprocessLauncher.take_fd.none
#COMMENT: File descriptor in parent process
#NAME: is_connected
#PARENT: Gio.SocketConnection
#COMMENT: Checks if @connection is connected. This is equivalent to calling
g_socket_is_connected() on @connection's underlying #GSocket.
#NAME: callback
#PARENT: Gio.AsyncInitable.init_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: count
#PARENT: Gio.PollableOutputStream.write_nonblocking.gssize
#COMMENT: the number of bytes you want to write
#NAME: get_boolean
#PARENT: Gio.DesktopAppInfo
#COMMENT: Looks up a boolean value in the keyfile backing @info.

The @key is looked up in the "Desktop Entry" group.
#NAME: get_server_connection_type
#PARENT: Gio.TlsBackend.get_server_connection_type
#COMMENT: the #GType of @backend's #GTlsServerConnection
  implementation.
#NAME: unexport
#PARENT: Gio.DBusObjectManagerServer.unexport
#COMMENT: %TRUE if object at @object_path was removed, %FALSE otherwise.
#NAME: code
#PARENT: Gio.SimpleAsyncResult.set_error_va.none
#COMMENT: an error code.
#NAME: get_family
#PARENT: Gio.Socket.get_family
#COMMENT: a #GSocketFamily
#NAME: open_readwrite_finish
#PARENT: Gio.FileIface.open_readwrite_finish.open_readwrite_finish
#COMMENT: a #GFileIOStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: get_stdin_pipe
#PARENT: Gio.Subprocess
#COMMENT: Gets the #GOutputStream that you can write to in order to give data
to the stdin of @subprocess.

The process must have been created with
%G_SUBPROCESS_FLAGS_STDIN_PIPE.
#NAME: created
#PARENT: Gio.FileMonitorEvent
#COMMENT: a file was created.
#NAME: connection
#PARENT: Gio.UnixConnection.send_credentials_async.none
#COMMENT: A #GUnixConnection.
#NAME: progress_callback
#PARENT: Gio.File.copy.gboolean
#COMMENT: function to callback with
    progress information, or %NULL if progress information is not needed
#NAME: create_file_for_arg
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Creates a #GFile corresponding to a filename that was given as part
of the invocation of @cmdline.

This differs from g_file_new_for_commandline_arg() in that it
resolves relative pathnames using the current working directory of
the invoking process rather than the local process.
#NAME: action
#PARENT: Gio.Notification.set_default_action_and_target_value.none
#COMMENT: an action name
#NAME: code
#PARENT: Gio.SimpleAsyncResult.set_error.none
#COMMENT: an error code.
#NAME: key
#PARENT: Gio.DesktopAppInfo.get_boolean.gboolean
#COMMENT: the key to look up
#NAME: attributes
#PARENT: Gio.FileAttributeMatcher.new.FileAttributeMatcher
#COMMENT: an attribute string to match.
#NAME: key
#PARENT: Gio.Settings.set.gboolean
#COMMENT: the name of the key to set
#NAME: user_data
#PARENT: Gio.TlsInteractionClass.request_certificate_async.request_certificate_async.none
#COMMENT: data to pass to the @callback
#NAME: get_source_object
#PARENT: Gio.AsyncResultIface.get_source_object.get_source_object
#COMMENT: a new reference to the source object for the @res,
   or %NULL if there is none.
#NAME: monitor
#PARENT: Gio.FileMonitorClass.cancel.cancel.gboolean
#COMMENT: a #GFileMonitor.
#NAME: get_cached_property
#PARENT: Gio.DBusProxy.get_cached_property
#COMMENT: A reference to the #GVariant instance that holds the value
for @property_name or %NULL if the value is not in the cache. The
returned reference must be freed with g_variant_unref().
#NAME: fd_based
#PARENT: Gio.FileDescriptorBasedIface.get_fd.get_fd.gint
#COMMENT: a #GFileDescriptorBased.
#NAME: is_tagged
#PARENT: Gio.AsyncResult
#COMMENT: Checks if @res has the given @source_tag (generally a function
pointer indicating the function @res was created by).
#NAME: not_directory
#PARENT: Gio.IOErrorEnum
#COMMENT: File is not a directory.
#NAME: value
#PARENT: Gio.Settings.set_strv.gboolean
#COMMENT: the value to set it to, or %NULL
#NAME: is_shadowed
#PARENT: Gio.Mount.is_shadowed
#COMMENT: %TRUE if @mount is shadowed.
#NAME: flags
#PARENT: Gio.File.create_readwrite.FileIOStream
#COMMENT: a set of #GFileCreateFlags
#NAME: activate
#PARENT: Gio.Action
#COMMENT: Activates the action.

@parameter must be the correct type of parameter for the action (ie:
the parameter type given at construction time).  If the parameter
type was %NULL then @parameter must also be %NULL.

If the @parameter GVariant is floating, it is consumed.
#NAME: dbus_error_encode_gerror
#PARENT: Gio
#COMMENT: Creates a D-Bus error name to use for @error. If @error matches
a registered error (cf. g_dbus_error_register_error()), the corresponding
D-Bus error name will be returned.

Otherwise the a name of the form
`org.gtk.GDBus.UnmappedGError.Quark._ESCAPED_QUARK_NAME.Code_ERROR_CODE`
will be used. This allows other GDBus applications to map the error
on the wire back to a #GError using g_dbus_error_new_for_dbus_error().

This function is typically only used in object mappings to put a
#GError on the wire. Regular applications should not use it.
#NAME: io_extension_point_lookup
#PARENT: Gio.io_extension_point_lookup
#COMMENT: the #GIOExtensionPoint, or %NULL if there
   is no registered extension point with the given name.
#NAME: link
#PARENT: Gio.MenuModelClass.get_item_link.get_item_link.MenuModel
#COMMENT: the link to query
#NAME: poll_mountable_finish
#PARENT: Gio.FileIface.poll_mountable_finish.poll_mountable_finish
#COMMENT: %TRUE if the operation finished successfully. %FALSE
otherwise.
#NAME: item_index
#PARENT: Gio.MenuModel.get_item_attributes.none
#COMMENT: The #GMenuItem to query
#NAME: set_dirs_only
#PARENT: Gio.FilenameCompleter
#COMMENT: If @dirs_only is %TRUE, @completer will only
complete directory names, and not file names.
#NAME: app_info_get_recommended_for_type
#PARENT: Gio.app_info_get_recommended_for_type
#COMMENT: #GList of #GAppInfos
    for given @content_type or %NULL on error.
#NAME: UnixMountPoint
#PARENT: Gio
#COMMENT: Defines a Unix mount point (e.g. <filename>/dev</filename>).
This corresponds roughly to a fstab entry.
#NAME: new
#PARENT: Gio.DataInputStream.new
#COMMENT: a new #GDataInputStream.
#NAME: result
#PARENT: Gio.IOStream.close_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: new
#PARENT: Gio.InetSocketAddress
#COMMENT: Creates a new #GInetSocketAddress for @address and @port.
#NAME: file
#PARENT: Gio.File.enumerate_children.FileEnumerator
#COMMENT: input #GFile
#NAME: connect_to_service
#PARENT: Gio.SocketClient.connect_to_service
#COMMENT: a #GSocketConnection if successful, or %NULL on error
#NAME: delete_file_finish
#PARENT: Gio.FileIface.delete_file_finish.delete_file_finish
#COMMENT: %TRUE if the file was deleted. %FALSE otherwise.
#NAME: action
#PARENT: Gio.ActionMap.add_action.none
#COMMENT: a #GAction
#NAME: socket
#PARENT: Gio.Socket.get_multicast_ttl.guint
#COMMENT: a #GSocket.
#NAME: result
#PARENT: Gio.ResolverClass.lookup_records_finish.lookup_records_finish.GLib.Variant
#COMMENT: the result passed to your #GAsyncReadyCallback
#NAME: get_default_database
#PARENT: Gio.TlsBackend
#COMMENT: Gets the default #GTlsDatabase used to verify TLS connections.
#NAME: MENU_ATTRIBUTE_ACTION
#PARENT: Gio
#COMMENT: The menu item attribute which holds the action name of the item.  Action
names are namespaced with an identifier for the action group in which the
action resides. For example, "win." for window-specific actions and "app."
for application-wide actions.

See also g_menu_model_get_item_attribute() and g_menu_item_set_attribute().
#NAME: get_identifier
#PARENT: Gio.Subprocess
#COMMENT: On UNIX, returns the process ID as a decimal string.
On Windows, returns the result of GetProcessId() also as a string.
#NAME: lookup_certificate_for_handle_finish
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle_finish
#COMMENT: a newly allocated #GTlsCertificate object.
Use g_object_unref() to release the certificate.
#NAME: mount_operation
#PARENT: Gio.Mount.unmount_with_operation.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: set_int
#PARENT: Gio.Settings.set_int
#COMMENT: %TRUE if setting the key succeeded,
    %FALSE if the key was not writable
#NAME: appinfo
#PARENT: Gio.AppInfo.get_name.utf8
#COMMENT: a #GAppInfo.
#NAME: cert_two
#PARENT: Gio.TlsCertificate.is_same.gboolean
#COMMENT: second certificate to compare
#NAME: authorize_authenticated_peer
#PARENT: Gio.DBusAuthObserver
#COMMENT: Emits the #GDBusAuthObserver::authorize-authenticated-peer signal on @observer.
#NAME: result
#PARENT: Gio.File.eject_mountable_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: get_if_exited
#PARENT: Gio.Subprocess.get_if_exited
#COMMENT: %TRUE if the case of a normal exit
#NAME: FILE_ATTRIBUTE_STANDARD_EDIT_NAME
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for edit name of the file.
An edit name is similar to the display name, but it is meant to be
used when you want to rename the file in the UI. The display name
might contain information you don't want in the new filename (such as
"(invalid unicode)" if the filename was in an invalid encoding).

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: res
#PARENT: Gio.File.replace_contents_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: socket
#PARENT: Gio.SocketListener.add_socket.gboolean
#COMMENT: a listening #GSocket
#NAME: cancellable
#PARENT: Gio.FileIface.create.create.FileOutputStream
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: g_iface
#PARENT: Gio.InitableIface
#COMMENT: The parent interface.
#NAME: mount
#PARENT: Gio.Mount.get_root.File
#COMMENT: a #GMount.
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_status.FileAttributeStatus
#COMMENT: a file attribute key
#NAME: user_data
#PARENT: Gio.FileMeasureProgressCallback.none
#COMMENT: the data passed to the original request for this callback
#NAME: user_data
#PARENT: Gio.ProxyInterface.connect_async.connect_async.none
#COMMENT: callback data
#NAME: task
#PARENT: Gio.Task.run_in_thread_sync.none
#COMMENT: a #GTask
#NAME: get_device_path
#PARENT: Gio.UnixMountPoint.get_device_path
#COMMENT: a string containing the device path.
#NAME: new
#PARENT: Gio.Notification.new
#COMMENT: a new #GNotification instance
#NAME: resources_lookup_data
#PARENT: Gio.resources_lookup_data
#COMMENT: #GBytes or %NULL on error.
    Free the returned object with g_bytes_unref()
#NAME: parameters
#PARENT: Gio.Initable.newv.GObject.Object
#COMMENT: the parameters to use to construct the object
#NAME: user_data
#PARENT: Gio.SubprocessLauncher.set_child_setup.none
#COMMENT: user data for @child_setup
#NAME: user_data
#PARENT: Gio.Volume.mount_fn.none
#COMMENT: user data that gets passed to @callback
#NAME: menu
#PARENT: Gio.Menu.append_submenu.none
#COMMENT: a #GMenu
#NAME: new
#PARENT: Gio.CharsetConverter
#COMMENT: Creates a new #GCharsetConverter.
#NAME: flags
#PARENT: Gio.File.set_attribute_int64.gboolean
#COMMENT: a #GFileQueryInfoFlags
#NAME: properties
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusPropertyInfo structures or %NULL if there are no properties.
#NAME: stream
#PARENT: Gio.DBusConnection.new.none
#COMMENT: a #GIOStream
#NAME: enumerator
#PARENT: Gio.FileEnumerator.is_closed.gboolean
#COMMENT: a #GFileEnumerator.
#NAME: host_and_port
#PARENT: Gio.SocketClient.connect_to_host_async.none
#COMMENT: the name and optionally the port of the host to connect to
#NAME: new
#PARENT: Gio.ListStore.new
#COMMENT: a new #GListStore
#NAME: stream
#PARENT: Gio.FileOutputStreamClass.get_etag.get_etag.utf8
#COMMENT: a #GFileOutputStream.
#NAME: key
#PARENT: Gio.Settings.bind.none
#COMMENT: the key to bind
#NAME: variant
#PARENT: Gio.SettingsBindGetMapping.gboolean
#COMMENT: the #GVariant
#NAME: shutdown
#PARENT: Gio.Socket.shutdown
#COMMENT: %TRUE on success, %FALSE on error
#NAME: label
#PARENT: Gio.Menu.prepend_section.none
#COMMENT: the section label, or %NULL
#NAME: flags
#PARENT: Gio.File.replace_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: unmount_finish
#PARENT: Gio.MountIface.unmount_finish.unmount_finish
#COMMENT: %TRUE if the mount was successfully unmounted. %FALSE otherwise.
#NAME: set_enable_proxy
#PARENT: Gio.SocketClient
#COMMENT: Sets whether or not @client attempts to make connections via a
proxy server. When enabled (the default), #GSocketClient will use a
#GProxyResolver to determine if a proxy protocol such as SOCKS is
needed, and automatically do the necessary proxy negotiation.

See also g_socket_client_set_proxy_resolver().
#NAME: task
#PARENT: Gio.Task.propagate_boolean.gboolean
#COMMENT: a #GTask.
#NAME: get_service
#PARENT: Gio.NetworkService
#COMMENT: Gets @srv's service name (eg, "ldap").
#NAME: fini
#PARENT: Gio.StaticResource
#COMMENT: Finalized a GResource initialized by g_static_resource_init().

This is normally used by code generated by
[glib-compile-resources][glib-compile-resources]
and is not typically used by other code.
#NAME: file
#PARENT: Gio.FileIface.unmount_mountable.unmount_mountable.none
#COMMENT: input #GFile
#NAME: broadcast
#PARENT: Gio.Socket.set_broadcast.none
#COMMENT: whether @socket should allow sending to broadcast
    addresses
#NAME: callback
#PARENT: Gio.Volume.eject_with_operation.none
#COMMENT: a #GAsyncReadyCallback, or %NULL
#NAME: insert_sorted
#PARENT: Gio.ListStore.insert_sorted
#COMMENT: the position at which @item was inserted
#NAME: handle
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle.lookup_certificate_for_handle.TlsCertificate
#COMMENT: a certificate handle
#NAME: new
#PARENT: Gio.DBusMessage
#COMMENT: Creates a new empty #GDBusMessage.
#NAME: var_args
#PARENT: Gio.DBusMethodInvocation.return_error_valist.none
#COMMENT: #va_list of parameters for @format.
#NAME: password
#PARENT: Gio.MountOperation.set_password.none
#COMMENT: password to set.
#NAME: SimpleIOStream
#PARENT: Gio
#COMMENT: GSimpleIOStream creates a #GIOStream from an arbitrary #GInputStream and
#GOutputStream. This allows any pair of input and output streams to be used
with #GIOStream methods.

This is useful when you obtained a #GInputStream and a #GOutputStream
by other means, for instance creating them with platform specific methods as
g_unix_input_stream_new() or g_win32_input_stream_new(), and you want
to take advantage of the methods provided by #GIOStream.
#NAME: connection
#PARENT: Gio.DBusConnection.signal_unsubscribe.none
#COMMENT: a #GDBusConnection
#NAME: interface_name
#PARENT: Gio.DBusObjectManagerIface.get_interface.get_interface.DBusInterface
#COMMENT: D-Bus interface name to lookup.
#NAME: size
#PARENT: Gio.MemoryOutputStream.new.OutputStream
#COMMENT: the size of @data
#NAME: file
#PARENT: Gio.FileIface.unmount_mountable_finish.unmount_mountable_finish.gboolean
#COMMENT: input #GFile
#NAME: res
#PARENT: Gio.FileIface.replace_finish.replace_finish.FileOutputStream
#COMMENT: a #GAsyncResult
#NAME: is_same
#PARENT: Gio.TlsCertificate
#COMMENT: Check if two #GTlsCertificate objects represent the same certificate.
The raw DER byte data of the two certificates are checked for equality.
This has the effect that two certificates may compare equal even if
their #GTlsCertificate:issuer, #GTlsCertificate:private-key, or
#GTlsCertificate:private-key-pem properties differ.
#NAME: detailed_name
#PARENT: Gio.Action.parse_detailed_name.gboolean
#COMMENT: a detailed action name
#NAME: FILE_ATTRIBUTE_TIME_MODIFIED_USEC
#PARENT: Gio
#COMMENT: A key in the "time" namespace for getting the miliseconds of the time
the file was last modified. This should be used in conjunction with
#G_FILE_ATTRIBUTE_TIME_MODIFIED. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: connection
#PARENT: Gio.DBusConnection.close_sync.gboolean
#COMMENT: a #GDBusConnection
#NAME: cancellable
#PARENT: Gio.File.query_settable_attributes.FileAttributeInfoList
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: ReallocFunc
#PARENT: Gio
#COMMENT: Changes the size of the memory block pointed to by @data to
@size bytes.

The function should have the same semantics as realloc().
#NAME: new
#PARENT: Gio.FileIcon
#COMMENT: Creates a new icon for a file.
#NAME: flags
#PARENT: Gio.File.create_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: get_property_info
#PARENT: Gio.DBusMethodInvocation.get_property_info
#COMMENT: a #GDBusPropertyInfo or %NULL
#NAME: stream
#PARENT: Gio.DBusConnection.new_sync.DBusConnection
#COMMENT: a #GIOStream
#NAME: get_close_fd
#PARENT: Gio.UnixOutputStream
#COMMENT: Returns whether the file descriptor of @stream will be
closed when the stream is closed.
#NAME: volume
#PARENT: Gio.VolumeIface.eject_with_operation.eject_with_operation.none
#COMMENT: a #GVolume
#NAME: file
#PARENT: Gio.File.find_enclosing_mount_finish.Mount
#COMMENT: a #GFile
#NAME: resolver
#PARENT: Gio.Resolver.lookup_by_name_async.none
#COMMENT: a #GResolver
#NAME: action_name
#PARENT: Gio.SimpleActionGroup.lookup.Action
#COMMENT: the name of an action
#NAME: item_index
#PARENT: Gio.MenuModel.get_item_attribute.gboolean
#COMMENT: the index of the item
#NAME: replace_readwrite_finish
#PARENT: Gio.FileIface.replace_readwrite_finish.replace_readwrite_finish
#COMMENT: a #GFileIOStream, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: callback
#PARENT: Gio.File.replace_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: FileAttributeStatus
#PARENT: Gio
#COMMENT: Used by g_file_set_attributes_from_info() when setting file attributes.
#NAME: dbus_error_unregister_error
#PARENT: Gio
#COMMENT: Destroys an association previously set up with g_dbus_error_register_error().
#NAME: file_new_for_commandline_arg
#PARENT: Gio.file_new_for_commandline_arg
#COMMENT: a new #GFile.
   Free the returned object with g_object_unref().
#NAME: self
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by.lookup_certificates_issued_by.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: int64
#PARENT: Gio.FileAttributeType
#COMMENT: a signed 8-byte/64-bit integer.
#NAME: query_info
#PARENT: Gio.FileIface.query_info.query_info
#COMMENT: a #GFileInfo for the given @file, or %NULL
    on error. Free the returned object with g_object_unref().
#NAME: call_with_unix_fd_list_sync
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync
#COMMENT: %NULL if @error is set. Otherwise a #GVariant tuple with
    return values. Free with g_variant_unref().
#NAME: get_fallback_for_type
#PARENT: Gio.AppInfo
#COMMENT: Gets a list of fallback #GAppInfos for a given content type, i.e.
those applications which claim to support the given content type
by MIME type subclassing and not directly.
#NAME: enable
#PARENT: Gio.SocketClient.set_enable_proxy.none
#COMMENT: whether to enable proxies
#NAME: addr
#PARENT: Gio.InetAddressMask.new.InetAddressMask
#COMMENT: a #GInetAddress
#NAME: no_auto_start
#PARENT: Gio.DBusCallFlags
#COMMENT: The bus must not launch
an owner for the destination name in response to this method
invocation.
#NAME: get_path_len
#PARENT: Gio.UnixSocketAddress.get_path_len
#COMMENT: the length of the path
#NAME: object_path
#PARENT: Gio.DBusConnection.export_menu_model.guint
#COMMENT: a D-Bus object path
#NAME: io_priority
#PARENT: Gio.InputStream.close_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: dup
#PARENT: Gio.AppInfo
#COMMENT: Creates a duplicate of a #GAppInfo.
#NAME: unbind_busy_property
#PARENT: Gio.Application
#COMMENT: Destroys a binding between @property and the busy state of
@application that was previously created with
g_application_bind_busy_property().
#NAME: new_from_bytes
#PARENT: Gio.MemoryInputStream
#COMMENT: Creates a new #GMemoryInputStream with data from the given @bytes.
#NAME: op
#PARENT: Gio.MountOperation.reply.none
#COMMENT: a #GMountOperation
#NAME: set_rate_limit
#PARENT: Gio.UnixMountMonitor
#COMMENT: This function does nothing.

Before 2.44, this was a partially-effective way of controlling the
rate at which events would be reported under some uncommon
circumstances.  Since @mount_monitor is a singleton, it also meant
that calling this function would have side effects for other users of
the monitor.
#NAME: FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) is mountable.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.set_as_last_used_for_type.set_as_last_used_for_type.gboolean
#COMMENT: a #GAppInfo.
#NAME: replace_contents_async
#PARENT: Gio.File
#COMMENT: Starts an asynchronous replacement of @file with the given
@contents of @length bytes. @etag will replace the document's
current entity tag.

When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with
g_file_replace_contents_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

If @make_backup is %TRUE, this function will attempt to
make a backup of @file.

Note that no copy of @content will be made, so it must stay valid
until @callback is called. See g_file_replace_contents_bytes_async()
for a #GBytes version that will automatically hold a reference to the
contents (without copying) for the duration of the call.
#NAME: pid_callback
#PARENT: Gio.DesktopAppInfo.launch_uris_as_manager.gboolean
#COMMENT: Callback for child processes
#NAME: hostname
#PARENT: Gio.NetworkAddress.new.NetworkAddress
#COMMENT: the hostname
#NAME: VolumeIface
#PARENT: Gio
#COMMENT: Interface for implementing operations for mountable volumes.
#NAME: flags
#PARENT: Gio.VolumeIface.eject.eject.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: stream
#PARENT: Gio.FileOutputStreamClass.query_info_finish.query_info_finish.FileInfo
#COMMENT: a #GFileOutputStream.
#NAME: cancellable
#PARENT: Gio.Subprocess.wait_check_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: get_arg0
#PARENT: Gio.DBusMessage
#COMMENT: Convenience to get the first item in the body of @message.
#NAME: address
#PARENT: Gio.DBusConnection.new_for_address_sync.DBusConnection
#COMMENT: a D-Bus address
#NAME: TlsBackend
#PARENT: Gio
#COMMENT: TLS (Transport Layer Security, aka SSL) backend
#NAME: dbus_is_member_name
#PARENT: Gio
#COMMENT: Checks if @string is a valid D-Bus member (e.g. signal or method) name.
#NAME: address
#PARENT: Gio.InetSocketAddress.new_from_string.SocketAddress
#COMMENT: the string form of an IP address
#NAME: messages
#PARENT: Gio.Socket.receive_message.gssize
#COMMENT: a pointer which
   may be filled with an array of #GSocketControlMessages, or %NULL
#NAME: enumerate_children_finish
#PARENT: Gio.File.enumerate_children_finish
#COMMENT: a #GFileEnumerator or %NULL
    if an error occurred.
    Free the returned object with g_object_unref().
#NAME: variable
#PARENT: Gio.AppLaunchContext.unsetenv.none
#COMMENT: the environment variable to remove
#NAME: FILE_ATTRIBUTE_UNIX_BLOCK_SIZE
#PARENT: Gio
#COMMENT: A key in the "unix" namespace for getting the block size for the file
system. This attribute is only available for UNIX file systems.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: eject_mountable_with_operation
#PARENT: Gio.File
#COMMENT: Starts an asynchronous eject on a mountable.
When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with
g_file_eject_mountable_with_operation_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: get_file_type
#PARENT: Gio.FileInfo
#COMMENT: Gets a file's type (whether it is a regular file, symlink, etc).
This is different from the file's content type, see g_file_info_get_content_type().
#NAME: value_pp
#PARENT: Gio.FileInfo.get_attribute_data.gboolean
#COMMENT: return location for the attribute value, or %NULL
#NAME: volume
#PARENT: Gio.VolumeIface.eject.eject.none
#COMMENT: a #GVolume
#NAME: FileIface
#PARENT: Gio
#COMMENT: An interface for writing VFS file handles.
#NAME: result
#PARENT: Gio.PermissionClass.release_finish.release_finish.gboolean
#COMMENT: the #GAsyncResult given to the #GAsyncReadyCallback
#NAME: priority
#PARENT: Gio.Task.set_priority.none
#COMMENT: the [priority][io-priority] of the request
#NAME: mount_entry
#PARENT: Gio.unix_mount_free.none
#COMMENT: a #GUnixMountEntry.
#NAME: return_error
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Finishes handling a D-Bus method call by returning an error.

See g_dbus_error_encode_gerror() for details about what error name
will be returned on the wire. In a nutshell, if the given error is
registered using g_dbus_error_register_error() the name given
during registration is used. Otherwise, a name of the form
`org.gtk.GDBus.UnmappedGError.Quark...` is used. This provides
transparent mapping of #GError between applications using GDBus.

If you are writing an application intended to be portable,
always register errors with g_dbus_error_register_error()
or use g_dbus_method_invocation_return_dbus_error().

This method will free @invocation, you cannot use it afterwards.
#NAME: name_appeared_closure
#PARENT: Gio.bus_watch_name_on_connection_with_closures.guint
#COMMENT: #GClosure to invoke when @name is known
to exist or %NULL.
#NAME: connectable
#PARENT: Gio.NetworkMonitor.can_reach_async.none
#COMMENT: a #GSocketConnectable
#NAME: set_attributes_finish
#PARENT: Gio.File.set_attributes_finish
#COMMENT: %TRUE if the attributes were set correctly, %FALSE otherwise.
#NAME: bytes
#PARENT: Gio.MemoryInputStream.new_from_bytes.InputStream
#COMMENT: a #GBytes
#NAME: path
#PARENT: Gio.Settings.new_full.Settings
#COMMENT: the path to use
#NAME: time
#PARENT: Gio.unix_mounts_changed_since.gboolean
#COMMENT: guint64 to contain a timestamp.
#NAME: enumerator
#PARENT: Gio.SocketAddressEnumeratorClass.next_async.next_async.none
#COMMENT: a #GSocketAddressEnumerator
#NAME: communicate_finish
#PARENT: Gio.Subprocess
#COMMENT: Complete an invocation of g_subprocess_communicate_async().
#NAME: dbus_error_register_error_domain
#PARENT: Gio
#COMMENT: Helper function for associating a #GError error domain with D-Bus error names.
#NAME: start
#PARENT: Gio.SocketService
#COMMENT: Starts the service, i.e. start accepting connections
from the added sockets when the mainloop runs.

This call is thread-safe, so it may be called from a thread
handling an incoming client request.
#NAME: TestDBusFlags
#PARENT: Gio
#COMMENT: Flags to define future #GTestDBus behaviour.
#NAME: message
#PARENT: Gio.DBusMessage.get_destination.utf8
#COMMENT: A #GDBusMessage.
#NAME: address
#PARENT: Gio.InetAddress.get_is_mc_site_local.gboolean
#COMMENT: a #GInetAddress
#NAME: match_arg0_namespace
#PARENT: Gio.DBusSignalFlags
#COMMENT: Match first arguments that
contain a bus or interface name with the given namespace.
#NAME: stream
#PARENT: Gio.OutputStream.set_pending.gboolean
#COMMENT: a #GOutputStream.
#NAME: iface
#PARENT: Gio.Socket.join_multicast_group.gboolean
#COMMENT: Name of the interface to use, or %NULL
#NAME: dbus_error_name
#PARENT: Gio.DBusError.new_for_dbus_error.GLib.Error
#COMMENT: D-Bus error name.
#NAME: return_int
#PARENT: Gio.Task
#COMMENT: Sets @task's result to @result and completes the task (see
g_task_return_pointer() for more discussion of exactly what this
means).
#NAME: resources_get_info
#PARENT: Gio
#COMMENT: Looks for a file at the specified @path in the set of
globally registered resources and if found returns information about it.

@lookup_flags controls the behaviour of the lookup.
#NAME: cancellable
#PARENT: Gio.FileEnumeratorClass.next_files_async.next_files_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: mount_operation
#PARENT: Gio.Volume.mount.none
#COMMENT: a #GMountOperation or %NULL to avoid user interaction
#NAME: invoke_ask_password
#PARENT: Gio.TlsInteraction
#COMMENT: Invoke the interaction to ask the user for a password. It invokes this
interaction in the main loop, specifically the #GMainContext returned by
g_main_context_get_thread_default() when the interaction is created. This
is called by called by #GTlsConnection or #GTlsDatabase to ask the user
for a password.

Derived subclasses usually implement a password prompt, although they may
also choose to provide a password from elsewhere. The @password value will
be filled in and then @callback will be called. Alternatively the user may
abort this password request, which will usually abort the TLS connection.

The implementation can either be a synchronous (eg: modal dialog) or an
asynchronous one (eg: modeless dialog). This function will take care of
calling which ever one correctly.

If the interaction is cancelled by the cancellation object, or by the
user then %G_TLS_INTERACTION_FAILED will be returned with an error that
contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
not support immediate cancellation.
#NAME: direnum
#PARENT: Gio.FileEnumerator.iterate.gboolean
#COMMENT: an open #GFileEnumerator
#NAME: set_use_ssl3
#PARENT: Gio.TlsClientConnection
#COMMENT: If @use_ssl3 is %TRUE, this forces @conn to use SSL 3.0 rather than
trying to properly negotiate the right version of TLS or SSL to use.
This can be used when talking to servers that do not implement the
fallbacks correctly and which will therefore fail to handshake with
a "modern" TLS handshake attempt.
#NAME: moved
#PARENT: Gio.FileMonitorEvent
#COMMENT: the file was moved -- only sent if the
  (deprecated) %G_FILE_MONITOR_SEND_MOVED flag is set
#NAME: next_files_finish
#PARENT: Gio.FileEnumerator
#COMMENT: Finishes the asynchronous operation started with g_file_enumerator_next_files_async().
#NAME: printf
#PARENT: Gio.OutputStream
#COMMENT: This is a utility function around g_output_stream_write_all(). It
uses g_strdup_vprintf() to turn @format and @... into a string that
is then written to @stream.

See the documentation of g_output_stream_write_all() about the
behavior of the actual write operation.

Note that partial writes cannot be properly checked with this
function due to the variable length of the written string, if you
need precise control over partial write failures, you need to
create you own printf()-like wrapper around g_output_stream_write()
or g_output_stream_write_all().
#NAME: get
#PARENT: Gio.UnixMountMonitor
#COMMENT: Gets the #GUnixMountMonitor for the current thread-default main
context.

The mount monitor can be used to monitor for changes to the list of
mounted filesystems as well as the list of mount points (ie: fstab
entries).

You must only call g_object_unref() on the return value from under
the same main context as you called this function.
#NAME: cancellable
#PARENT: Gio.DBusConnection.flush_sync.gboolean
#COMMENT: a #GCancellable or %NULL
#NAME: Notification
#PARENT: Gio
#COMMENT: #GNotification is a mechanism for creating a notification to be shown
to the user -- typically as a pop-up notification presented by the
desktop environment shell.

The key difference between #GNotification and other similar APIs is
that, if supported by the desktop environment, notifications sent
with #GNotification will persist after the application has exited,
and even across system reboots.

Since the user may click on a notification while the application is
not running, applications using #GNotification should be able to be
started as a D-Bus service, using #GApplication.

User interaction with a notification (either the default action, or
buttons) must be associated with actions on the application (ie:
"app." actions).  It is not possible to route user interaction
through the notification itself, because the object will not exist if
the application is autostarted as a result of a notification being
clicked.

A notification can be sent with g_application_send_notification().
#NAME: is_supported
#PARENT: Gio.ProxyResolver.is_supported
#COMMENT: %TRUE if @resolver is supported.
#NAME: iostream
#PARENT: Gio.file_new_tmp.File
#COMMENT: on return, a #GFileIOStream for the created file
#NAME: FILE_ATTRIBUTE_ETAG_VALUE
#PARENT: Gio
#COMMENT: A key in the "etag" namespace for getting the value of the file's
entity tag. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: service
#PARENT: Gio.SocketService.is_active.gboolean
#COMMENT: a #GSocketService
#NAME: callback
#PARENT: Gio.DBusObjectManagerClient.new_for_bus.none
#COMMENT: A #GAsyncReadyCallback to call when the request is satisfied.
#NAME: init_finish
#PARENT: Gio.AsyncInitable.init_finish
#COMMENT: %TRUE if successful. If an error has occurred, this function
will return %FALSE and set @error appropriately if present.
#NAME: get_attribute_uint32
#PARENT: Gio.FileInfo
#COMMENT: Gets an unsigned 32-bit integer contained within the attribute. If the
attribute does not contain an unsigned 32-bit integer, or is invalid,
0 will be returned.
#NAME: user_data
#PARENT: Gio.InputStreamClass.read_async.read_async.none
#COMMENT: the data to pass to callback function
#NAME: progress_callback
#PARENT: Gio.File.copy_async.none
#COMMENT: function to callback with progress
    information, or %NULL if progress information is not needed
#NAME: eject_mountable_with_operation_finish
#PARENT: Gio.File.eject_mountable_with_operation_finish
#COMMENT: %TRUE if the @file was ejected successfully.
    %FALSE otherwise.
#NAME: callback
#PARENT: Gio.File.set_display_name_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: listener
#PARENT: Gio.SocketListener.accept_finish.SocketConnection
#COMMENT: a #GSocketListener
#NAME: get_database
#PARENT: Gio.TlsConnection.get_database
#COMMENT: the certificate database that @conn uses or %NULL
#NAME: set_as_default_for_extension
#PARENT: Gio.AppInfoIface.set_as_default_for_extension.set_as_default_for_extension
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: load_finish
#PARENT: Gio.LoadableIconIface.load_finish.load_finish
#COMMENT: a #GInputStream to read the icon from.
#NAME: cancellable
#PARENT: Gio.LoadableIconIface.load_async.load_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: result
#PARENT: Gio.FileIface.poll_mountable_finish.poll_mountable_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: cancellable
#PARENT: Gio.InputStream.read_bytes_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: server_identity
#PARENT: Gio.TlsClientConnection.new.TlsClientConnection
#COMMENT: the expected identity of the server
#NAME: address
#PARENT: Gio.SocketAddressClass.get_native_size.get_native_size.gssize
#COMMENT: a #GSocketAddress
#NAME: file
#PARENT: Gio.FileIface.make_directory_async.make_directory_async.none
#COMMENT: input #GFile
#NAME: buffer
#PARENT: Gio.OutputStreamClass.write_async.write_async.none
#COMMENT: the buffer containing the data to write.
#NAME: get_uri_scheme
#PARENT: Gio.File
#COMMENT: Gets the URI scheme for a #GFile.
RFC 3986 decodes the scheme as:
|[
URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
]|
Common schemes include "file", "http", "ftp", etc.

This call does no blocking I/O.
#NAME: application
#PARENT: Gio.Application.release.none
#COMMENT: a #GApplication
#NAME: send_moved
#PARENT: Gio.FileMonitorFlags
#COMMENT: Pair DELETED and CREATED events caused
  by file renames (moves) and send a single G_FILE_MONITOR_EVENT_MOVED
  event instead (NB: not supported on all backends; the default
  behaviour -without specifying this flag- is to send single DELETED
  and CREATED events).  Deprecated since 2.44: use
  %G_FILE_MONITOR_WATCH_MOVES instead.
#NAME: incoming
#PARENT: Gio.DBusMessageFilterFunction.DBusMessage
#COMMENT: %TRUE if it is a message received from the other peer, %FALSE if it is
a message to be sent to the other peer.
#NAME: get_flags
#PARENT: Gio.TestDBus
#COMMENT: Get the flags of the #GTestDBus object.
#NAME: bytes_needed
#PARENT: Gio.DBusMessage.bytes_needed
#COMMENT: Number of bytes needed or -1 if @error is set (e.g. if
@blob contains invalid data or not enough data is available to
determine the size).
#NAME: ZlibDecompressor
#PARENT: Gio
#COMMENT: Zlib decompression
#NAME: get_file_info
#PARENT: Gio.ZlibDecompressor
#COMMENT: Retrieves the #GFileInfo constructed from the GZIP header data
of compressed data processed by @compressor, or %NULL if @decompressor's
#GZlibDecompressor:format property is not %G_ZLIB_COMPRESSOR_FORMAT_GZIP,
or the header data was not fully processed yet, or it not present in the
data stream at all.
#NAME: progress_callback
#PARENT: Gio.FileIface.measure_disk_usage_async.measure_disk_usage_async.none
#COMMENT: a #GFileMeasureProgressCallback
#NAME: backend
#PARENT: Gio.TlsBackend.get_file_database_type.GType
#COMMENT: the #GTlsBackend
#NAME: action_name_is_valid
#PARENT: Gio.action_name_is_valid
#COMMENT: %TRUE if @action_name is valid
#NAME: key
#PARENT: Gio.Settings.changed.none
#COMMENT: the name of the key that changed
#NAME: connection
#PARENT: Gio.DBusObjectManagerServer
#COMMENT: The #GDBusConnection to export objects on.
#NAME: callback
#PARENT: Gio.SocketClient.connect_to_host_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: unix
#PARENT: Gio.SocketFamily
#COMMENT: the UNIX domain family
#NAME: has_action
#PARENT: Gio.ActionGroup
#COMMENT: Checks if the named action exists within @action_group.
#NAME: user_data
#PARENT: Gio.InputStream.read_async.none
#COMMENT: the data to pass to callback function
#NAME: directory
#PARENT: Gio.SettingsSchemaSource.new_from_directory.SettingsSchemaSource
#COMMENT: the filename of a directory
#NAME: get_uuid
#PARENT: Gio.MountIface.get_uuid.get_uuid
#COMMENT: the UUID for @mount or %NULL if no UUID can be computed.
    The returned string should be freed with g_free()
    when no longer needed.
#NAME: new
#PARENT: Gio.Subprocess
#COMMENT: Create a new process with the given flags and varargs argument
list.  By default, matching the g_spawn_async() defaults, the
child's stdin will be set to the system null device, and
stdout/stderr will be inherited from the parent.  You can use
@flags to control this behavior.

The argument list must be terminated with %NULL.
#NAME: is_user_mountable
#PARENT: Gio.UnixMountPoint.is_user_mountable
#COMMENT: %TRUE if the mount point is user mountable.
#NAME: cancellable
#PARENT: Gio.ProxyResolver.lookup_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: files
#PARENT: Gio.AppInfoIface.launch.launch.gboolean
#COMMENT: a #GList of #GFile objects
#NAME: format
#PARENT: Gio.DBusMethodInvocation.return_error.none
#COMMENT: printf()-style format.
#NAME: domain
#PARENT: Gio.MountOperation
#COMMENT: The domain to use for the mount operation.
#NAME: get_default_for_uri_scheme
#PARENT: Gio.AppInfo
#COMMENT: Gets the default application for handling URIs with
the given URI scheme. A URI scheme is the initial part
of the URI, up to but not including the ':', e.g. "http",
"ftp" or "sip".
#NAME: read_line_finish_utf8
#PARENT: Gio.DataInputStream
#COMMENT: Finish an asynchronous call started by
g_data_input_stream_read_line_async().
#NAME: set_attribute_int32
#PARENT: Gio.File
#COMMENT: Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_INT32 to @value.
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: can_reach_finish
#PARENT: Gio.NetworkMonitor.can_reach_finish
#COMMENT: %TRUE if network is reachable, %FALSE if not.
#NAME: attributes
#PARENT: Gio.FileOutputStreamClass.query_info.query_info.FileInfo
#COMMENT: a file attribute query string.
#NAME: store
#PARENT: Gio.ListStore.insert.none
#COMMENT: a #GListStore
#NAME: get_keywords
#PARENT: Gio.DesktopAppInfo.get_keywords
#COMMENT: The value of the Keywords key
#NAME: mechanism
#PARENT: Gio.DBusAuthObserver.allow_mechanism.gboolean
#COMMENT: The name of the mechanism, e.g. `DBUS_COOKIE_SHA1`.
#NAME: new_from_model
#PARENT: Gio.MenuItem
#COMMENT: Creates a #GMenuItem as an exact copy of an existing menu item in a
#GMenuModel.

@item_index must be valid (ie: be sure to call
g_menu_model_get_n_items() first).
#NAME: item_index
#PARENT: Gio.MenuModelClass.get_item_attributes.get_item_attributes.none
#COMMENT: The #GMenuItem to query
#NAME: backlog
#PARENT: Gio.Socket.set_listen_backlog.none
#COMMENT: the maximum number of pending connections.
#NAME: is_closed
#PARENT: Gio.IOStream
#COMMENT: Checks if a stream is closed.
#NAME: argc
#PARENT: Gio.Application.run.gint
#COMMENT: the argc from main() (or 0 if @argv is %NULL)
#NAME: get_symlink_target
#PARENT: Gio.FileInfo
#COMMENT: Gets the symlink target for a given #GFileInfo.
#NAME: new_tmp
#PARENT: Gio.File
#COMMENT: Opens a file in the preferred directory for temporary files (as
returned by g_get_tmp_dir()) and returns a #GFile and
#GFileIOStream pointing to it.

@tmpl should be a string in the GLib file name encoding
containing a sequence of six 'X' characters, and containing no
directory components. If it is %NULL, a default template is used.

Unlike the other #GFile constructors, this will return %NULL if
a temporary file could not be created.
#NAME: is_remote_error
#PARENT: Gio.DBusError
#COMMENT: Checks if @error represents an error received via D-Bus from a remote peer. If so,
use g_dbus_error_get_remote_error() to get the name of the error.
#NAME: create_source
#PARENT: Gio.PollableInputStream.create_source
#COMMENT: a new #GSource
#NAME: get_value_type
#PARENT: Gio.SettingsSchemaKey
#COMMENT: Gets the #GVariantType of @key.
#NAME: stream
#PARENT: Gio.IOStream.has_pending.gboolean
#COMMENT: a #GIOStream
#NAME: FileMonitorFlags
#PARENT: Gio
#COMMENT: Flags used to set what a #GFileMonitor will watch for.
#NAME: result
#PARENT: Gio.Task.return_int.none
#COMMENT: the integer (#gssize) result of a task function.
#NAME: steal_fds
#PARENT: Gio.UnixFDList.steal_fds
#COMMENT: an array of file
    descriptors
#NAME: stream
#PARENT: Gio.FilterOutputStream.get_close_base_stream.gboolean
#COMMENT: a #GFilterOutputStream.
#NAME: result
#PARENT: Gio.ResolverClass.lookup_service_finish.lookup_service_finish.SrvTarget
#COMMENT: the result passed to your #GAsyncReadyCallback
#NAME: new_finish
#PARENT: Gio.DBusObjectManagerClient.new_finish
#COMMENT: A
  #GDBusObjectManagerClient object or %NULL if @error is set. Free
  with g_object_unref().
#NAME: new_sized
#PARENT: Gio.BufferedInputStream
#COMMENT: Creates a new #GBufferedInputStream from the given @base_stream,
with a buffer set to @size.
#NAME: invalidated_properties
#PARENT: Gio.DBusProxy.g-properties-changed.none
#COMMENT: A %NULL terminated array of properties that was invalidated
#NAME: set_attributes_finish
#PARENT: Gio.FileIface.set_attributes_finish.set_attributes_finish
#COMMENT: %TRUE if the attributes were set correctly, %FALSE otherwise.
#NAME: has_pending
#PARENT: Gio.OutputStream
#COMMENT: Checks if an ouput stream has pending actions.
#NAME: callback
#PARENT: Gio.SimpleAsyncResult.new_error.SimpleAsyncResult
#COMMENT: a #GAsyncReadyCallback.
#NAME: FILE_ATTRIBUTE_STANDARD_DESCRIPTION
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the description of the file.
The description is a utf8 string that describes the file, generally containing
the filename, but can also contain furter information. Example descriptions
could be "filename (on hostname)" for a remote file or "filename (in trash)"
for a file in the trash. This is useful for instance as the window title
when displaying a directory or for a bookmarks menu.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: server
#PARENT: Gio.DBusServer.stop.none
#COMMENT: A #GDBusServer.
#NAME: content_type
#PARENT: Gio.AppInfoIface.set_as_default_for_type.set_as_default_for_type.gboolean
#COMMENT: the content type.
#NAME: get_attribute_int32
#PARENT: Gio.FileInfo
#COMMENT: Gets a signed 32-bit integer contained within the attribute. If the
attribute does not contain a signed 32-bit integer, or is invalid,
0 will be returned.
#NAME: callback
#PARENT: Gio.File.create_readwrite_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: get_symbolic_icon
#PARENT: Gio.VolumeIface.get_symbolic_icon.get_symbolic_icon
#COMMENT: a #GIcon.
    The returned object should be unreffed with g_object_unref()
    when no longer needed.
#NAME: string
#PARENT: Gio.dbus_is_unique_name.gboolean
#COMMENT: The string to check.
#NAME: volume
#PARENT: Gio.VolumeIface.can_eject.can_eject.gboolean
#COMMENT: a #GVolume
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_string.utf8
#COMMENT: a #GFileInfo.
#NAME: info
#PARENT: Gio.DBusInterfaceInfo.cache_build.none
#COMMENT: A #GDBusInterfaceInfo.
#NAME: reply_type
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: the expected type of the reply, or %NULL
#NAME: cancellable
#PARENT: Gio.Socket.receive_message.gssize
#COMMENT: a %GCancellable or %NULL
#NAME: dup
#PARENT: Gio.FileAttributeInfoList
#COMMENT: Makes a duplicate of a file attribute info list.
#NAME: method_name
#PARENT: Gio.DBusInterfaceMethodCallFunc.none
#COMMENT: The name of the method that was invoked.
#NAME: stream
#PARENT: Gio.OutputStreamClass.close_finish.close_finish.gboolean
#COMMENT: a #GOutputStream.
#NAME: callback
#PARENT: Gio.FileIface.delete_file_async.delete_file_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: drive
#PARENT: Gio.DriveIface.can_eject.can_eject.gboolean
#COMMENT: a #GDrive.
#NAME: launch_uris
#PARENT: Gio.AppInfo.launch_uris
#COMMENT: %TRUE on successful launch, %FALSE otherwise.
#NAME: argv
#PARENT: Gio.Application.run.gint
#COMMENT: the argv from main(), or %NULL
#NAME: 
#PARENT: Gio.Initable.new.GObject.Object...
#COMMENT: the value if the first property, followed by and other property
   value pairs, and ended by %NULL.
#NAME: info
#PARENT: Gio.DBusArgInfo.ref.DBusArgInfo
#COMMENT: A #GDBusArgInfo
#NAME: get_remote_address
#PARENT: Gio.SocketConnection
#COMMENT: Try to get the remote address of a socket connection.

Since GLib 2.40, when used with g_socket_client_connect() or
g_socket_client_connect_async(), during emission of
%G_SOCKET_CLIENT_CONNECTING, this function will return the remote
address that will be used for the connection.  This allows
applications to print e.g. "Connecting to example.com
(10.42.77.3)...".
#NAME: issuer_raw_dn
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by.lookup_certificates_issued_by.TlsCertificate
#COMMENT: a #GByteArray which holds the DER encoded issuer DN.
#NAME: none
#PARENT: Gio.DBusSubtreeFlags
#COMMENT: No flags set.
#NAME: flags
#PARENT: Gio.FileIface.monitor_dir.monitor_dir.FileMonitor
#COMMENT: a set of #GFileMonitorFlags
#NAME: get_family
#PARENT: Gio.SocketClient.get_family
#COMMENT: a #GSocketFamily
#NAME: get_action_state_type
#PARENT: Gio.ActionGroup.get_action_state_type
#COMMENT: the state type, if the action
is stateful
#NAME: result
#PARENT: Gio.FileIface.stop_mountable_finish.stop_mountable_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: cancellable
#PARENT: Gio.SocketClient.connect_to_service.SocketConnection
#COMMENT: a #GCancellable, or %NULL
#NAME: stream
#PARENT: Gio.DataInputStream.read_line_finish_utf8.utf8
#COMMENT: a given #GDataInputStream.
#NAME: application
#PARENT: Gio.Application.activate.none
#COMMENT: a #GApplication
#NAME: reset
#PARENT: Gio.Cancellable
#COMMENT: Resets @cancellable to its uncancelled state.

If cancellable is currently in use by any cancellable operation
then the behavior of this function is undefined.

Note that it is generally not a good idea to reuse an existing
cancellable for more operations after it has been cancelled once,
as this function might tempt you to do. The recommended practice
is to drop the reference to a cancellable after cancelling it,
and let it die with the outstanding async operations. You should
create a fresh cancellable for further async operations.
#NAME: new_method_error
#PARENT: Gio.DBusMessage
#COMMENT: Creates a new #GDBusMessage that is an error reply to @method_call_message.
#NAME: value
#PARENT: Gio.Icon.deserialize.Icon
#COMMENT: a #GVariant created with g_icon_serialize()
#NAME: result
#PARENT: Gio.File.delete_file_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: is_supported
#PARENT: Gio.ProxyResolver
#COMMENT: Checks if @resolver can be used on this system. (This is used
internally; g_proxy_resolver_get_default() will only return a proxy
resolver that returns %TRUE for this method.)
#NAME: signature
#PARENT: Gio.DBusMessageHeaderField
#COMMENT: The signature of the message body.
#NAME: callback
#PARENT: Gio.DataInputStream.read_until_async.none
#COMMENT: callback to call when the request is satisfied.
#NAME: dup
#PARENT: Gio.FileAttributeInfoList.dup
#COMMENT: a copy of the given @list.
#NAME: address
#PARENT: Gio.Socket.receive_from.gssize
#COMMENT: a pointer to a #GSocketAddress
    pointer, or %NULL
#NAME: info
#PARENT: Gio.DBusInterfaceInfo.ref.DBusInterfaceInfo
#COMMENT: A #GDBusInterfaceInfo
#NAME: enabled
#PARENT: Gio.ActionGroupInterface.action_enabled_changed.action_enabled_changed.none
#COMMENT: whether or not the action is now enabled
#NAME: extension
#PARENT: Gio.IOExtension.get_name.utf8
#COMMENT: a #GIOExtension
#NAME: resource
#PARENT: Gio.Resource.lookup_data.GLib.Bytes
#COMMENT: A #GResource
#NAME: user_data
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle_async.none
#COMMENT: the data to pass to the callback function
#NAME: observer
#PARENT: Gio.DBusConnection.new_sync.DBusConnection
#COMMENT: a #GDBusAuthObserver or %NULL
#NAME: CancellableSourceFunc
#PARENT: Gio.CancellableSourceFunc
#COMMENT: it should return %FALSE if the source should be removed.
#NAME: freebsd_cmsgcred
#PARENT: Gio.CredentialsType
#COMMENT: The native credentials type is a <type>struct cmsgcred</type>.
#NAME: file
#PARENT: Gio.File.create_finish.FileOutputStream
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.File.trash.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: address
#PARENT: Gio.UnixSocketAddress.get_path_len.gsize
#COMMENT: a #GInetSocketAddress
#NAME: get_object_path
#PARENT: Gio.DBusObjectManagerIface.get_object_path.get_object_path
#COMMENT: A string owned by @manager. Do not free.
#NAME: converter
#PARENT: Gio.CharsetConverter.get_use_fallback.gboolean
#COMMENT: a #GCharsetConverter
#NAME: task
#PARENT: Gio.Task.get_check_cancellable.gboolean
#COMMENT: the #GTask
#NAME: get_output_stream
#PARENT: Gio.IOStreamClass.get_output_stream.get_output_stream
#COMMENT: a #GOutputStream, owned by the #GIOStream.
Do not free.
#NAME: out_name
#PARENT: Gio.MenuAttributeIter.get_next.gboolean
#COMMENT: the type of the attribute
#NAME: get_drive
#PARENT: Gio.Mount.get_drive
#COMMENT: a #GDrive or %NULL if @mount is not associated with a volume or a drive.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.remove_supports_type.remove_supports_type.gboolean
#COMMENT: a #GAppInfo.
#NAME: connect_to_host
#PARENT: Gio.SocketClient.connect_to_host
#COMMENT: a #GSocketConnection on success, %NULL on error.
#NAME: get_is_remote
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Determines if @cmdline represents a remote invocation.
#NAME: result
#PARENT: Gio.SocketConnection.connect_finish.gboolean
#COMMENT: the #GAsyncResult
#NAME: variable
#PARENT: Gio.SubprocessLauncher.getenv.utf8
#COMMENT: the environment variable to get
#NAME: file-info
#PARENT: Gio.ZlibDecompressor
#COMMENT: A #GFileInfo containing the information found in the GZIP header
of the data stream processed, or %NULL if the header was not yet
fully processed, is not present at all, or the compressor's
#GZlibDecompressor:format property is not %G_ZLIB_COMPRESSOR_FORMAT_GZIP.
#NAME: query_info
#PARENT: Gio.FileIOStream.query_info
#COMMENT: a #GFileInfo for the @stream, or %NULL on error.
#NAME: get_name
#PARENT: Gio.IOExtension.get_name
#COMMENT: the name of @extension.
#NAME: result
#PARENT: Gio.SocketListener.accept_finish.SocketConnection
#COMMENT: a #GAsyncResult.
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_int32.gint32
#COMMENT: a #GFileInfo.
#NAME: state
#PARENT: Gio.ActionGroupInterface.query_action.query_action.gboolean
#COMMENT: the current state, or %NULL if stateless
#NAME: args
#PARENT: Gio.SimpleAsyncResult.set_error_va.none
#COMMENT: va_list of arguments.
#NAME: resolved
#PARENT: Gio.SocketClientEvent
#COMMENT: The client has completed a DNS lookup.
#NAME: wait_check_finish
#PARENT: Gio.Subprocess.wait_check_finish
#COMMENT: %TRUE if successful, or %FALSE with @error set
#NAME: none
#PARENT: Gio.MountUnmountFlags
#COMMENT: No flags set.
#NAME: g-connection
#PARENT: Gio.DBusObjectProxy
#COMMENT: The connection of the proxy.
#NAME: cancellable
#PARENT: Gio.DBusObjectManagerClient.new_for_bus.none
#COMMENT: A #GCancellable or %NULL
#NAME: unref
#PARENT: Gio.DBusSignalInfo
#COMMENT: If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.
#NAME: content_types_get_registered
#PARENT: Gio
#COMMENT: Gets a list of strings containing all the registered content types
known to the system. The list and its data should be freed using
g_list_free_full (list, g_free).
#NAME: BusNameAppearedCallback
#PARENT: Gio
#COMMENT: Invoked when the name being watched is known to have to have a owner.
#NAME: get_protocol
#PARENT: Gio.NetworkService.get_protocol
#COMMENT: @srv's protocol name
#NAME: user_data
#PARENT: Gio.Subprocess.communicate_async.none
#COMMENT: User data
#NAME: user_data
#PARENT: Gio.File.replace_async.none
#COMMENT: the data to pass to callback function
#NAME: aborted
#PARENT: Gio.MountOperationResult
#COMMENT: The user requested the mount operation
    to be aborted
#NAME: set_certificate
#PARENT: Gio.TlsConnection
#COMMENT: This sets the certificate that @conn will present to its peer
during the TLS handshake. For a #GTlsServerConnection, it is
mandatory to set this, and that will normally be done at construct
time.

For a #GTlsClientConnection, this is optional. If a handshake fails
with %G_TLS_ERROR_CERTIFICATE_REQUIRED, that means that the server
requires a certificate, and if you try connecting again, you should
call this method first. You can call
g_tls_client_connection_get_accepted_cas() on the failed connection
to get a list of Certificate Authorities that the server will
accept certificates from.

(It is also possible that a server will allow the connection with
or without a certificate; in that case, if you don't provide a
certificate, you can tell that the server requested one by the fact
that g_tls_client_connection_get_accepted_cas() will return
non-%NULL.)
#NAME: parse
#PARENT: Gio.NetworkAddress.parse
#COMMENT: the new #GNetworkAddress, or %NULL on error
#NAME: monitor_dir
#PARENT: Gio.FileIface.monitor_dir.monitor_dir
#COMMENT: a #GFileMonitor for the given @file,
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: cancellable
#PARENT: Gio.InputStream.skip.gssize
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: message
#PARENT: Gio.DBusMethodInvocation.return_error_literal.none
#COMMENT: The error message.
#NAME: get_id
#PARENT: Gio.AppInfo
#COMMENT: Gets the ID of an application. An id is a string that
identifies the application. The exact format of the id is
platform dependent. For instance, on Unix this is the
desktop file id from the xdg menu specification.

Note that the returned ID may be %NULL, depending on how
the @appinfo has been constructed.
#NAME: get_attribute_uint64
#PARENT: Gio.FileInfo
#COMMENT: Gets a unsigned 64-bit integer contained within the attribute. If the
attribute does not contain an unsigned 64-bit integer, or is invalid,
0 will be returned.
#NAME: get_object_path
#PARENT: Gio.DBusObjectManager
#COMMENT: Gets the object path that @manager is for.
#NAME: query_filesystem_info_async
#PARENT: Gio.File
#COMMENT: Asynchronously gets the requested information about the filesystem
that the specified @file is on. The result is a #GFileInfo object
that contains key-value attributes (such as type or size for the
file).

For more details, see g_file_query_filesystem_info() which is the
synchronous version of this call.

When the operation is finished, @callback will be called. You can
then call g_file_query_info_finish() to get the result of the
operation.
#NAME: handle_cancellation
#PARENT: Gio.SimpleAsyncResult.set_handle_cancellation.none
#COMMENT: a #gboolean.
#NAME: flags
#PARENT: Gio.DBusObjectManagerClient.new_for_bus_sync.DBusObjectManagerClient
#COMMENT: Zero or more flags from the #GDBusObjectManagerClientFlags enumeration.
#NAME: closed
#PARENT: Gio.DBusConnection
#COMMENT: Emitted when the connection is closed.

The cause of this event can be

- If g_dbus_connection_close() is called. In this case
  @remote_peer_vanished is set to %FALSE and @error is %NULL.

- If the remote peer closes the connection. In this case
  @remote_peer_vanished is set to %TRUE and @error is set.

- If the remote peer sends invalid or malformed data. In this
  case @remote_peer_vanished is set to %FALSE and @error is set.

Upon receiving this signal, you should give up your reference to
@connection. You are guaranteed that this signal is emitted only
once.
#NAME: label
#PARENT: Gio.Menu.insert.none
#COMMENT: the section label, or %NULL
#NAME: self
#PARENT: Gio.SubprocessLauncher.take_stderr_fd.none
#COMMENT: a #GSubprocessLauncher
#NAME: moved_out
#PARENT: Gio.FileMonitorEvent
#COMMENT: the file was moved out of the
  monitored directory to another location -- only sent if the
  %G_FILE_MONITOR_WATCH_MOVES flag is set.  Since: 2.44
#NAME: stream
#PARENT: Gio.DataOutputStream.put_uint64.gboolean
#COMMENT: a #GDataOutputStream.
#NAME: parameters
#PARENT: Gio.async_initable_newv_async.none
#COMMENT: the parameters to use to construct the object
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.complete.none
#COMMENT: a #GSimpleAsyncResult.
#NAME: content_type_get_generic_icon_name
#PARENT: Gio
#COMMENT: Gets the generic icon name for a content type.

See the
[shared-mime-info](http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
specification for more on the generic icon name.
#NAME: cancellable
#PARENT: Gio.DBusProxy.call_with_unix_fd_list.none
#COMMENT: A #GCancellable or %NULL.
#NAME: user_data
#PARENT: Gio.NetworkMonitor.can_reach_async.none
#COMMENT: the data to pass to callback function
#NAME: get_member
#PARENT: Gio.DBusMessage.get_member
#COMMENT: The value.
#NAME: cancellable
#PARENT: Gio.TlsInteraction.invoke_request_certificate.TlsInteractionResult
#COMMENT: an optional #GCancellable cancellation object
#NAME: launch_uris
#PARENT: Gio.AppInfoIface.launch_uris.launch_uris
#COMMENT: %TRUE on successful launch, %FALSE otherwise.
#NAME: supports_tls
#PARENT: Gio.TlsBackend
#COMMENT: Checks if TLS is supported; if this returns %FALSE for the default
#GTlsBackend, it means no "real" TLS backend is available.
#NAME: stream
#PARENT: Gio.IOStream.close.gboolean
#COMMENT: a #GIOStream
#NAME: user_data
#PARENT: Gio.File.replace_contents_bytes_async.none
#COMMENT: the data to pass to callback function
#NAME: settings
#PARENT: Gio.Settings.set.gboolean
#COMMENT: a #GSettings object
#NAME: stream
#PARENT: Gio.BufferedInputStream.set_buffer_size.none
#COMMENT: a #GBufferedInputStream
#NAME: lookup_service
#PARENT: Gio.Resolver.lookup_service
#COMMENT: a non-empty #GList of
#GSrvTarget, or %NULL on error. You must free each of the targets and the
list when you are done with it. (You can use g_resolver_free_targets() to do
this.)
#NAME: conn
#PARENT: Gio.TlsConnectionClass.handshake_finish.handshake_finish.gboolean
#COMMENT: a #GTlsConnection
#NAME: get_flags
#PARENT: Gio.DBusProxy.get_flags
#COMMENT: Flags from the #GDBusProxyFlags enumeration.
#NAME: new_stateful
#PARENT: Gio.SimpleAction.new_stateful
#COMMENT: a new #GSimpleAction
#NAME: get_fs_type
#PARENT: Gio.UnixMountPoint.get_fs_type
#COMMENT: a string containing the file system type.
#NAME: parse_name
#PARENT: Gio.VfsClass.parse_name.parse_name.File
#COMMENT: a string to be parsed by the VFS module.
#NAME: new_finish
#PARENT: Gio.AsyncInitable
#COMMENT: Finishes the async construction for the various g_async_initable_new
calls, returning the created object or %NULL on error.
#NAME: callback
#PARENT: Gio.Drive.start.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: info
#PARENT: Gio.DBusInterfaceInfo.lookup_signal.DBusSignalInfo
#COMMENT: A #GDBusInterfaceInfo.
#NAME: insert_section
#PARENT: Gio.Menu
#COMMENT: Convenience function for inserting a section menu item into @menu.
Combine g_menu_item_new_section() and g_menu_insert_item() for a more
flexible alternative.
#NAME: password
#PARENT: Gio.MountOperation
#COMMENT: The password that is used for authentication when carrying out
the mount operation.
#NAME: can_seek
#PARENT: Gio.SeekableIface.can_seek.can_seek
#COMMENT: %TRUE if @seekable can be seeked. %FALSE otherwise.
#NAME: raw
#PARENT: Gio.ZlibCompressorFormat
#COMMENT: deflate compression with no header
#NAME: get_action_state_hint
#PARENT: Gio.ActionGroup.get_action_state_hint
#COMMENT: the state range hint
#NAME: get_issuer
#PARENT: Gio.TlsCertificate.get_issuer
#COMMENT: The certificate of @cert's issuer,
or %NULL if @cert is self-signed or signed with an unknown
certificate.
#NAME: task
#PARENT: Gio.Task.propagate_pointer.gpointer
#COMMENT: a #GTask
#NAME: cancellable
#PARENT: Gio.DataOutputStream.put_int16.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_startup_notify_id
#PARENT: Gio.AppLaunchContext.get_startup_notify_id
#COMMENT: a startup notification ID for the application, or %NULL if
    not supported.
#NAME: get_successful
#PARENT: Gio.Subprocess
#COMMENT: Checks if the process was "successful".  A process is considered
successful if it exited cleanly with an exit status of 0, either by
way of the exit() system call or return from main().

It is an error to call this function before g_subprocess_wait() has
returned.
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.action_enabled_changed.action_enabled_changed.none
#COMMENT: a #GActionGroup
#NAME: parameters
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: a #GVariant tuple with parameters for
    the method or %NULL if not passing parameters
#NAME: matches
#PARENT: Gio.InetAddressMask
#COMMENT: Tests if @address falls within the range described by @mask.
#NAME: name_is_valid
#PARENT: Gio.Action.name_is_valid
#COMMENT: %TRUE if @action_name is valid
#NAME: 
#PARENT: Gio.Notification.add_button_with_target.none...
#COMMENT: positional parameters, as determined by @target_format
#NAME: cancellable
#PARENT: Gio.CancellableSourceFunc.gboolean
#COMMENT: the #GCancellable
#NAME: ignore-hosts
#PARENT: Gio.SimpleProxyResolver
#COMMENT: A list of hostnames and IP addresses that the resolver should
allow direct connections to.

Entries can be in one of 4 formats:

- A hostname, such as "example.com", ".example.com", or
  "*.example.com", any of which match "example.com" or
  any subdomain of it.

- An IPv4 or IPv6 address, such as "192.168.1.1",
  which matches only that address.

- A hostname or IP address followed by a port, such as
  "example.com:80", which matches whatever the hostname or IP
  address would match, but only for URLs with the (explicitly)
  indicated port. In the case of an IPv6 address, the address
  part must appear in brackets: "[::1]:443"

- An IP address range, given by a base address and prefix length,
  such as "fe80::/10", which matches any address in that range.

Note that when dealing with Unicode hostnames, the matching is
done against the ASCII form of the name.

Also note that hostname exclusions apply only to connections made
to hosts identified by name, and IP address exclusions apply only
to connections made to hosts identified by address. That is, if
example.com has an address of 192.168.1.1, and the :ignore-hosts list
contains only "192.168.1.1", then a connection to "example.com"
(eg, via a #GNetworkAddress) will use the proxy, and a connection to
"192.168.1.1" (eg, via a #GInetSocketAddress) will not.

These rules match the "ignore-hosts"/"noproxy" rules most
commonly used by other applications.
#NAME: appinfo
#PARENT: Gio.AppInfo.set_as_default_for_extension.gboolean
#COMMENT: a #GAppInfo.
#NAME: app_info_get_fallback_for_type
#PARENT: Gio.app_info_get_fallback_for_type
#COMMENT: #GList of #GAppInfos
    for given @content_type or %NULL on error.
#NAME: io_modules_scan_all_in_directory_with_scope
#PARENT: Gio
#COMMENT: Scans all the modules in the specified directory, ensuring that
any extension point implemented by a module is registered.

This may not actually load and initialize all the types in each
module, some modules may be lazily loaded and initialized when
an extension point it implementes is used with e.g.
g_io_extension_point_get_extensions() or
g_io_extension_point_get_extension_by_name().

If you need to guarantee that all types are loaded in all the modules,
use g_io_modules_load_all_in_directory().
#NAME: Emblem
#PARENT: Gio
#COMMENT: #GEmblem is an implementation of #GIcon that supports
having an emblem, which is an icon with additional properties.
It can than be added to a #GEmblemedIcon.

Currently, only metainformation about the emblem's origin is
supported. More may be added in the future.
#NAME: n_files
#PARENT: Gio.ApplicationClass.open.open.none
#COMMENT: the length of the @files array
#NAME: set_attribute_int64
#PARENT: Gio.File
#COMMENT: Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_INT64 to @value.
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: parameter
#PARENT: Gio.RemoteActionGroupInterface.activate_action_full.activate_action_full.none
#COMMENT: the optional parameter to the activation
#NAME: path
#PARENT: Gio.TestDBus.add_service_dir.none
#COMMENT: path to a directory containing .service files
#NAME: file
#PARENT: Gio.File.delete.gboolean
#COMMENT: input #GFile
#NAME: io_priority
#PARENT: Gio.InputStreamClass.read_async.read_async.none
#COMMENT: the [I/O priority][io-priority]
of the request.
#NAME: cancellable
#PARENT: Gio.Resolver.lookup_records.GLib.Variant
#COMMENT: a #GCancellable, or %NULL
#NAME: family
#PARENT: Gio.InetAddress.new_loopback.InetAddress
#COMMENT: the address family
#NAME: converter
#PARENT: Gio.ConverterIface.convert.convert.ConverterResult
#COMMENT: a #GConverter.
#NAME: not_found
#PARENT: Gio.ResourceError
#COMMENT: no file was found at the requested path
#NAME: progress_callback
#PARENT: Gio.FileIface.copy.copy.gboolean
#COMMENT: function to callback with
    progress information, or %NULL if progress information is not needed
#NAME: authentication_allow_anonymous
#PARENT: Gio.DBusServerFlags
#COMMENT: Allow the anonymous
authentication method.
#NAME: lookup_certificate_issuer_finish
#PARENT: Gio.TlsDatabase
#COMMENT: Finish an asynchronous lookup issuer operation. See
g_tls_database_lookup_certificate_issuer() for more information.
#NAME: parent
#PARENT: Gio.File.get_relative_path.utf8
#COMMENT: input #GFile
#NAME: name
#PARENT: Gio.BusNameAcquiredCallback.none
#COMMENT: The name being owned.
#NAME: source
#PARENT: Gio.SettingsSchemaSource.lookup.SettingsSchema
#COMMENT: a #GSettingsSchemaSource
#NAME: get_native
#PARENT: Gio.Credentials.get_native
#COMMENT: The pointer to native credentials or %NULL if the
operation there is no #GCredentials support for the OS or if
@native_type isn't supported by the OS. Do not free the returned
data, it is owned by @credentials.
#NAME: guess_icon
#PARENT: Gio.UnixMountPoint
#COMMENT: Guesses the icon of a Unix mount point.
#NAME: file
#PARENT: Gio.File.get_parse_name.utf8
#COMMENT: input #GFile
#NAME: stream
#PARENT: Gio.FileOutputStreamClass.query_info_async.query_info_async.none
#COMMENT: a #GFileOutputStream.
#NAME: set_body
#PARENT: Gio.DBusMessage
#COMMENT: Sets the body @message. As a side-effect the
%G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field is set to the
type string of @body (or cleared if @body is %NULL).

If @body is floating, @message assumes ownership of @body.
#NAME: callback
#PARENT: Gio.File.measure_disk_usage_async.none
#COMMENT: a #GAsyncReadyCallback to call when complete
#NAME: credentials
#PARENT: Gio.Credentials.is_same_user.gboolean
#COMMENT: A #GCredentials.
#NAME: copy
#PARENT: Gio.FileIface.copy.copy
#COMMENT: %TRUE on success, %FALSE otherwise.
#NAME: connect
#PARENT: Gio.Proxy
#COMMENT: Given @connection to communicate with a proxy (eg, a
#GSocketConnection that is connected to the proxy server), this
does the necessary handshake to connect to @proxy_address, and if
required, wraps the #GIOStream to handle proxy payload.
#NAME: set_flags
#PARENT: Gio.Settings
#COMMENT: Looks up the flags type nicks for the bits specified by @value, puts
them in an array of strings and writes the array to @key, within
@settings.

It is a programmer error to give a @key that isn't contained in the
schema for @settings or is not marked as a flags type, or for @value
to contain any bits that are not value for the named type.

After performing the write, accessing @key directly with
g_settings_get_strv() will return an array of 'nicks'; one for each
bit in @value.
#NAME: matcher
#PARENT: Gio.FileAttributeMatcher.enumerate_namespace.gboolean
#COMMENT: a #GFileAttributeMatcher.
#NAME: get_attribute_int64
#PARENT: Gio.FileInfo
#COMMENT: Gets a signed 64-bit integer contained within the attribute. If the
attribute does not contain an signed 64-bit integer, or is invalid,
0 will be returned.
#NAME: object_proxy
#PARENT: Gio.DBusObjectManagerClient.interface-proxy-properties-changed.none
#COMMENT: The #GDBusObjectProxy on which an interface has properties that are changing.
#NAME: DBusInterfaceInfo
#PARENT: Gio
#COMMENT: Information about a D-Bus interface.
#NAME: write_nonblocking
#PARENT: Gio.PollableOutputStream.write_nonblocking
#COMMENT: the number of bytes written, or -1 on error (including
  %G_IO_ERROR_WOULD_BLOCK).
#NAME: FilterOutputStream
#PARENT: Gio
#COMMENT: Base class for output stream implementations that perform some
kind of filtering operation on a base stream. Typical examples
of filtering operations are character set conversion, compression
and byte order flipping.
#NAME: length
#PARENT: Gio.InetAddressMask.new.InetAddressMask
#COMMENT: number of bits of @addr to use
#NAME: get_connection
#PARENT: Gio.DBusMethodInvocation.get_connection
#COMMENT: A #GDBusConnection. Do not free, it is owned by @invocation.
#NAME: flags
#PARENT: Gio.File.eject_mountable_with_operation.none
#COMMENT: flags affecting the operation
#NAME: user_data
#PARENT: Gio.FileOutputStream.query_info_async.none
#COMMENT: the data to pass to callback function
#NAME: key
#PARENT: Gio.Settings.writable-change-event.gboolean
#COMMENT: the quark of the key, or 0
#NAME: FILE_ATTRIBUTE_STANDARD_SIZE
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the file's size (in bytes).
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
#NAME: new
#PARENT: Gio.Notification
#COMMENT: Creates a new #GNotification with @title as its title.

After populating @notification with more details, it can be sent to
the desktop shell with g_application_send_notification(). Changing
any properties after this call will not have any effect until
resending @notification.
#NAME: io_priority
#PARENT: Gio.OutputStreamClass.flush_async.flush_async.none
#COMMENT: the io priority of the request.
#NAME: mount
#PARENT: Gio.Mount.get_drive.Drive
#COMMENT: a #GMount.
#NAME: reply
#PARENT: Gio.MountOperation
#COMMENT: Emitted when the user has replied to the mount operation.
#NAME: resolver
#PARENT: Gio.ResolverClass.lookup_records.lookup_records.GLib.Variant
#COMMENT: a #GResolver
#NAME: file
#PARENT: Gio.File.is_native.gboolean
#COMMENT: input #GFile
#NAME: get_priority
#PARENT: Gio.SrvTarget
#COMMENT: Gets @target's priority. You should not need to look at this;
#GResolver already sorts the targets according to the algorithm in
RFC 2782.
#NAME: read_line_finish
#PARENT: Gio.DataInputStream.read_line_finish
#COMMENT: 
 a NUL-terminated byte array with the line that was read in
 (without the newlines).  Set @length to a #gsize to get the length
 of the read line.  On an error, it will return %NULL and @error
 will be set. If there's no content to read, it will still return
 %NULL, but @error won't be set.
#NAME: content_type_is_unknown
#PARENT: Gio.content_type_is_unknown
#COMMENT: %TRUE if the type is the unknown type.
#NAME: get_default_for_uri_scheme
#PARENT: Gio.DesktopAppInfoLookup.get_default_for_uri_scheme
#COMMENT: #GAppInfo for given @uri_scheme or %NULL on error.
#NAME: get_file_for_uri
#PARENT: Gio.Vfs.get_file_for_uri
#COMMENT: a #GFile.
    Free the returned object with g_object_unref().
#NAME: volume
#PARENT: Gio.Volume.get_activation_root.File
#COMMENT: a #GVolume
#NAME: drive
#PARENT: Gio.DriveIface.stop_finish.stop_finish.gboolean
#COMMENT: a #GDrive.
#NAME: name
#PARENT: Gio.IOExtensionPoint.lookup.IOExtensionPoint
#COMMENT: the name of the extension point
#NAME: required
#PARENT: Gio.TlsAuthenticationMode
#COMMENT: client authentication is required
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_type.FileAttributeType
#COMMENT: a #GFileInfo.
#NAME: get_root
#PARENT: Gio.Mount.get_root
#COMMENT: a #GFile.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: flags
#PARENT: Gio.TestDBus
#COMMENT: #GTestDBusFlags specifying the behaviour of the D-Bus session.
#NAME: stream
#PARENT: Gio.DataInputStream.read_line_utf8.utf8
#COMMENT: a given #GDataInputStream.
#NAME: has_connection
#PARENT: Gio.DBusInterfaceSkeleton.has_connection
#COMMENT: %TRUE if @interface_ is exported on @connection, %FALSE otherwise.
#NAME: parent_class
#PARENT: Gio.DBusObjectManagerClientClass
#COMMENT: The parent class.
#NAME: domain
#PARENT: Gio.SocketClient.connect_to_service.SocketConnection
#COMMENT: a domain name
#NAME: username
#PARENT: Gio.MountOperation.set_username.none
#COMMENT: input username.
#NAME: mount_operation
#PARENT: Gio.File.eject_mountable_with_operation.none
#COMMENT: a #GMountOperation,
    or %NULL to avoid user interaction
#NAME: get_client_connection_type
#PARENT: Gio.TlsBackend.get_client_connection_type
#COMMENT: the #GType of @backend's #GTlsClientConnection
  implementation.
#NAME: flags
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle.TlsCertificate
#COMMENT: Flags which affect the lookup.
#NAME: name_is_valid
#PARENT: Gio.Action
#COMMENT: Checks if @action_name is valid.

@action_name is valid if it consists only of alphanumeric characters,
plus '-' and '.'.  The empty string is not a valid action name.

It is an error to call this function with a non-utf8 @action_name.
@action_name must not be %NULL.
#NAME: set_detailed_action
#PARENT: Gio.MenuItem
#COMMENT: Sets the "action" and possibly the "target" attribute of @menu_item.

The format of @detailed_action is the same format parsed by
g_action_parse_detailed_name().

See g_menu_item_set_action_and_target() or
g_menu_item_set_action_and_target_value() for more flexible (but
slightly less convenient) alternatives.

See also g_menu_item_set_action_and_target_value() for a description of
the semantics of the action and target attributes.
#NAME: op
#PARENT: Gio.MountOperation.set_password_save.none
#COMMENT: a #GMountOperation.
#NAME: user_data
#PARENT: Gio.FileIface.find_enclosing_mount_async.find_enclosing_mount_async.none
#COMMENT: the data to pass to callback function
#NAME: method_call_message
#PARENT: Gio.DBusMessage.new_method_error.DBusMessage
#COMMENT: A message of type %G_DBUS_MESSAGE_TYPE_METHOD_CALL to
create a reply message to.
#NAME: cancellable
#PARENT: Gio.MountIface.guess_content_type_sync.guess_content_type_sync.utf8
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: object
#PARENT: Gio.DBusObjectManagerServer.export_uniquely.none
#COMMENT: An object.
#NAME: export_action_group
#PARENT: Gio.DBusConnection.export_action_group
#COMMENT: the ID of the export (never zero), or 0 in case of failure
#NAME: has_namespace
#PARENT: Gio.FileInfo.has_namespace
#COMMENT: %TRUE if @Ginfo has an attribute in @name_space,
    %FALSE otherwise.
#NAME: display_name
#PARENT: Gio.FileIface.set_display_name.set_display_name.File
#COMMENT: a string
#NAME: size
#PARENT: Gio.resources_get_info.gboolean
#COMMENT: a location to place the length of the contents of the file,
   or %NULL if the length is not needed
#NAME: service_unknown
#PARENT: Gio.DBusError
#COMMENT: The bus doesn't know how to launch a service to supply the bus name
you wanted.
#NAME: mount
#PARENT: Gio.Mount.eject.none
#COMMENT: a #GMount.
#NAME: buffer
#PARENT: Gio.PollableOutputStreamInterface.write_nonblocking.write_nonblocking.gssize
#COMMENT: a buffer to write
    data from
#NAME: get_platform_data
#PARENT: Gio.ApplicationCommandLine.get_platform_data
#COMMENT: the platform data, or %NULL
#NAME: set_attribute
#PARENT: Gio.File
#COMMENT: Sets an attribute in the file with attribute name @attribute to @value.

Some attributes can be unset by setting @attribute to
%G_FILE_ATTRIBUTE_TYPE_INVALID and @value_p to %NULL.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: stream
#PARENT: Gio.OutputStream.write_all_async.none
#COMMENT: A #GOutputStream
#NAME: resolver
#PARENT: Gio.ProxyResolver.is_supported.gboolean
#COMMENT: a #GProxyResolver
#NAME: settings
#PARENT: Gio.Settings.delay.none
#COMMENT: a #GSettings object
#NAME: fd_list
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: a #GUnixFDList or %NULL
#NAME: lookup_finish
#PARENT: Gio.ProxyResolverInterface.lookup_finish.lookup_finish
#COMMENT: A
              NULL-terminated array of proxy URIs. Must be freed
              with g_strfreev().
#NAME: io_priority
#PARENT: Gio.TlsConnection.handshake_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: cancellable
#PARENT: Gio.FileIface.replace_readwrite_async.replace_readwrite_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: open_stream
#PARENT: Gio.Resource
#COMMENT: Looks for a file at the specified @path in the resource and
returns a #GInputStream that lets you read the data.

@lookup_flags controls the behaviour of the lookup.
#NAME: unsafely
#PARENT: Gio.TlsRehandshakeMode
#COMMENT: Allow unsafe rehandshaking
#NAME: info
#PARENT: Gio.AppLaunchContextClass.get_startup_notify_id.get_startup_notify_id.utf8
#COMMENT: a #GAppInfo
#NAME: get_description
#PARENT: Gio.AppInfoIface.get_description.get_description
#COMMENT: a string containing a description of the
application @appinfo, or %NULL if none.
#NAME: key
#PARENT: Gio.SettingsSchemaKey.ref.SettingsSchemaKey
#COMMENT: a #GSettingsSchemaKey
#NAME: client
#PARENT: Gio.SocketClient.get_enable_proxy.gboolean
#COMMENT: a #GSocketClient.
#NAME: TlsDatabaseVerifyFlags
#PARENT: Gio
#COMMENT: Flags for g_tls_database_verify_chain().
#NAME: choice
#PARENT: Gio.MountOperation.set_choice.none
#COMMENT: an integer.
#NAME: user_data
#PARENT: Gio.SocketClient.connect_async.none
#COMMENT: user data for the callback
#NAME: insert
#PARENT: Gio.ListStore
#COMMENT: Inserts @item into @store at @position. @item must be of type
#GListStore:item-type or derived from it. @position must be smaller
than the length of the list, or equal to it to append.

This function takes a ref on @item.

Use g_list_store_splice() to insert multiple items at the same time
efficiently.
#NAME: poll_mountable_finish
#PARENT: Gio.File
#COMMENT: Finishes a poll operation. See g_file_poll_mountable() for details.

Finish an asynchronous poll operation that was polled
with g_file_poll_mountable().
#NAME: event
#PARENT: Gio.SocketClient.event.none
#COMMENT: the event that is occurring
#NAME: listener
#PARENT: Gio.SocketListener.add_socket.gboolean
#COMMENT: a #GSocketListener
#NAME: identity
#PARENT: Gio.TlsClientConnection.set_server_identity.none
#COMMENT: a #GSocketConnectable describing the expected server identity
#NAME: res
#PARENT: Gio.AsyncResultIface.get_source_object.get_source_object.GObject.Object
#COMMENT: a #GAsyncResult
#NAME: extension_point
#PARENT: Gio.IOExtensionPoint.get_required_type.GType
#COMMENT: a #GIOExtensionPoint
#NAME: unexport_menu_model
#PARENT: Gio.DBusConnection
#COMMENT: Reverses the effect of a previous call to
g_dbus_connection_export_menu_model().

It is an error to call this function with an ID that wasn't returned
from g_dbus_connection_export_menu_model() or to call it with the
same ID more than once.
#NAME: stream
#PARENT: Gio.InputStream.is_closed.gboolean
#COMMENT: input stream.
#NAME: FileAttributeInfoFlags
#PARENT: Gio
#COMMENT: Flags specifying the behaviour of an attribute.
#NAME: changed_properties
#PARENT: Gio.DBusProxy.g-properties-changed.none
#COMMENT: A #GVariant containing the properties that changed
#NAME: permission
#PARENT: Gio.Permission.release_async.none
#COMMENT: a #GPermission instance
#NAME: error
#PARENT: Gio.SimpleAsyncResult.take_error.none
#COMMENT: a #GError
#NAME: get_protocol
#PARENT: Gio.Socket
#COMMENT: Gets the socket protocol id the socket was created with.
In case the protocol is unknown, -1 is returned.
#NAME: connection
#PARENT: Gio.DBusSignalCallback.none
#COMMENT: A #GDBusConnection.
#NAME: get_username
#PARENT: Gio.MountOperation
#COMMENT: Get the user name from the mount operation.
#NAME: resolver
#PARENT: Gio.ResolverClass.lookup_by_name_async.lookup_by_name_async.none
#COMMENT: a #GResolver
#NAME: key
#PARENT: Gio.Settings.writable-changed.none
#COMMENT: the key
#NAME: stringv
#PARENT: Gio.FileAttributeType
#COMMENT: a %NULL terminated char **. Since 2.22
#NAME: flags
#PARENT: Gio.File.measure_disk_usage_async.none
#COMMENT: #GFileMeasureFlags
#NAME: property-name
#PARENT: Gio.PropertyAction
#COMMENT: The name of the property to wrap on the object.

The property must exist on the passed-in object and it must be
readable and writable (and not construct-only).
#NAME: stream
#PARENT: Gio.pollable_stream_write.gssize
#COMMENT: a #GOutputStream.
#NAME: flags
#PARENT: Gio.FileIface.set_attributes_from_info.set_attributes_from_info.gboolean
#COMMENT: #GFileQueryInfoFlags
#NAME: method_name
#PARENT: Gio.DBusProxy.call.none
#COMMENT: Name of method to invoke.
#NAME: get_mount_path
#PARENT: Gio.UnixMountPoint.get_mount_path
#COMMENT: a string containing the mount path.
#NAME: mount_operation
#PARENT: Gio.Volume.mount_fn.none
#COMMENT: a #GMountOperation or %NULL to avoid user interaction
#NAME: iterate_item_links
#PARENT: Gio.MenuModelClass.iterate_item_links.iterate_item_links
#COMMENT: a new #GMenuLinkIter
#NAME: stream
#PARENT: Gio.FilterInputStream.set_close_base_stream.none
#COMMENT: a #GFilterInputStream.
#NAME: read_int16
#PARENT: Gio.DataInputStream.read_int16
#COMMENT: a signed 16-bit/2-byte value read from @stream or %0 if
an error occurred.
#NAME: position
#PARENT: Gio.ListStore.remove.none
#COMMENT: the position of the item that is to be removed
#NAME: outbuf
#PARENT: Gio.Converter.convert.ConverterResult
#COMMENT: a buffer to write converted data in.
#NAME: DataStreamNewlineType
#PARENT: Gio
#COMMENT: #GDataStreamNewlineType is used when checking for or setting the line endings for a given file.
#NAME: cancellable
#PARENT: Gio.File.mount_mountable.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: user_data
#PARENT: Gio.BusNameLostCallback.none
#COMMENT: User data passed to g_bus_own_name() or g_bus_own_name_on_connection().
#NAME: call_sync
#PARENT: Gio.DBusProxy
#COMMENT: Synchronously invokes the @method_name method on @proxy.

If @method_name contains any dots, then @name is split into interface and
method name parts. This allows using @proxy for invoking methods on
other interfaces.

If the #GDBusConnection associated with @proxy is disconnected then
the operation will fail with %G_IO_ERROR_CLOSED. If
@cancellable is canceled, the operation will fail with
%G_IO_ERROR_CANCELLED. If @parameters contains a value not
compatible with the D-Bus protocol, the operation fails with
%G_IO_ERROR_INVALID_ARGUMENT.

If the @parameters #GVariant is floating, it is consumed. This allows
convenient 'inline' use of g_variant_new(), e.g.:
|[<!-- language="C" -->
 g_dbus_proxy_call_sync (proxy,
                         "TwoStrings",
                         g_variant_new ("(ss)",
                                        "Thing One",
                                        "Thing Two"),
                         G_DBUS_CALL_FLAGS_NONE,
                         -1,
                         NULL,
                         &error);
]|

The calling thread is blocked until a reply is received. See
g_dbus_proxy_call() for the asynchronous version of this
method.

If @proxy has an expected interface (see
#GDBusProxy:g-interface-info) and @method_name is referenced by it,
then the return value is checked against the return type.
#NAME: action
#PARENT: Gio.ActionInterface.change_state.change_state.none
#COMMENT: a #GAction
#NAME: spawn_service_not_found
#PARENT: Gio.DBusError
#COMMENT: Service file not found in system-services directory.
#NAME: progress_data
#PARENT: Gio.File.measure_disk_usage.gboolean
#COMMENT: user_data for @progress_callback
#NAME: Action
#PARENT: Gio
#COMMENT: #GAction represents a single named action.

The main interface to an action is that it can be activated with
g_action_activate().  This results in the 'activate' signal being
emitted.  An activation has a #GVariant parameter (which may be
%NULL).  The correct type for the parameter is determined by a static
parameter type (which is given at construction time).

An action may optionally have a state, in which case the state may be
set with g_action_change_state().  This call takes a #GVariant.  The
correct type for the state is determined by a static state type
(which is given at construction time).

The state may have a hint associated with it, specifying its valid
range.

#GAction is merely the interface to the concept of an action, as
described above.  Various implementations of actions exist, including
#GSimpleAction.

In all cases, the implementing class is responsible for storing the
name of the action, the parameter type, the enabled state, the
optional state type and the state and emitting the appropriate
signals when these change.  The implementor responsible for filtering
calls to g_action_activate() and g_action_change_state() for type
safety and for the state being enabled.

Probably the only useful thing to do with a #GAction is to put it
inside of a #GSimpleActionGroup.
#NAME: peer-certificate-errors
#PARENT: Gio.TlsConnection
#COMMENT: The errors noticed-and-ignored while verifying
#GTlsConnection:peer-certificate. Normally this should be 0, but
it may not be if #GTlsClientConnection:validation-flags is not
%G_TLS_CERTIFICATE_VALIDATE_ALL, or if
#GTlsConnection::accept-certificate overrode the default
behavior.
#NAME: connectable
#PARENT: Gio.NetworkMonitor.can_reach.gboolean
#COMMENT: a #GSocketConnectable
#NAME: new_from_fd
#PARENT: Gio.Socket
#COMMENT: Creates a new #GSocket from a native file descriptor
or winsock SOCKET handle.

This reads all the settings from the file descriptor so that
all properties should work. Note that the file descriptor
will be set to non-blocking mode, independent on the blocking
mode of the #GSocket.

On success, the returned #GSocket takes ownership of @fd. On failure, the
caller must close @fd themselves.
#NAME: FilenameCompleter
#PARENT: Gio
#COMMENT: Completes partial file and directory names given a partial string by
looking in the file system for clues. Can return a list of possible
completion strings for widget implementations.
#NAME: drive
#PARENT: Gio.Drive.can_start.gboolean
#COMMENT: a #GDrive.
#NAME: size
#PARENT: Gio.BufferedOutputStream.set_buffer_size.none
#COMMENT: a #gsize.
#NAME: stream
#PARENT: Gio.IOStream.is_closed.gboolean
#COMMENT: a #GIOStream
#NAME: file
#PARENT: Gio.FileIface.resolve_relative_path.resolve_relative_path.File
#COMMENT: input #GFile
#NAME: name
#PARENT: Gio.FileAttributeInfoList.lookup.FileAttributeInfo
#COMMENT: the name of the attribute to lookup.
#NAME: cancellable
#PARENT: Gio.DriveIface.stop.stop.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: callback
#PARENT: Gio.File.query_filesystem_info_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: get_choice
#PARENT: Gio.MountOperation
#COMMENT: Gets a choice from the mount operation.
#NAME: get_child
#PARENT: Gio.Settings.get_child
#COMMENT: a 'child' settings object
#NAME: spawn_setup_failed
#PARENT: Gio.DBusError
#COMMENT: We failed to setup the environment correctly.
#NAME: op
#PARENT: Gio.MountOperation.get_domain.utf8
#COMMENT: a #GMountOperation.
#NAME: dbus_error_message
#PARENT: Gio.dbus_error_new_for_dbus_error.GLib.Error
#COMMENT: D-Bus error message.
#NAME: proxy
#PARENT: Gio.DBusProxy.get_cached_property_names.utf8
#COMMENT: A #GDBusProxy.
#NAME: vfs
#PARENT: Gio.Vfs.parse_name.File
#COMMENT: a #GVfs.
#NAME: unix_is_mount_path_system_internal
#PARENT: Gio
#COMMENT: Determines if @mount_path is considered an implementation of the
OS. This is primarily used for hiding mountable and mounted volumes
that only are used in the OS and has little to no relevance to the
casual user.
#NAME: drive
#PARENT: Gio.DriveIface.start.start.none
#COMMENT: a #GDrive.
#NAME: get_family
#PARENT: Gio.SocketClient
#COMMENT: Gets the socket family of the socket client.

See g_socket_client_set_family() for details.
#NAME: interaction
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer_async.lookup_certificate_issuer_async.none
#COMMENT: used to interact with the user if necessary
#NAME: new
#PARENT: Gio.UnixOutputStream
#COMMENT: Creates a new #GUnixOutputStream for the given @fd.

If @close_fd, is %TRUE, the file descriptor will be closed when
the output stream is destroyed.
#NAME: unix_mount_points_get
#PARENT: Gio.unix_mount_points_get
#COMMENT: 
    a #GList of the UNIX mountpoints.
#NAME: error_code
#PARENT: Gio.DBusError.register_error.gboolean
#COMMENT: An error code.
#NAME: get_completion_suffix
#PARENT: Gio.FilenameCompleter
#COMMENT: Obtains a completion for @initial_text from @completer.
#NAME: FILE_ATTRIBUTE_UNIX_BLOCKS
#PARENT: Gio
#COMMENT: A key in the "unix" namespace for getting the number of blocks allocated
for the file. This attribute is only available for UNIX file systems.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
#NAME: socket
#PARENT: Gio.Socket.leave_multicast_group.gboolean
#COMMENT: a #GSocket.
#NAME: res
#PARENT: Gio.File.set_display_name_finish.File
#COMMENT: a #GAsyncResult
#NAME: spawn_flags
#PARENT: Gio.DesktopAppInfo.launch_uris_as_manager.gboolean
#COMMENT: #GSpawnFlags, used for each process
#NAME: get_icon
#PARENT: Gio.AppInfo
#COMMENT: Gets the icon for the application.
#NAME: new_sized
#PARENT: Gio.BufferedOutputStream.new_sized
#COMMENT: a #GOutputStream with an internal buffer set to @size.
#NAME: iostream
#PARENT: Gio.File.new_tmp.File
#COMMENT: on return, a #GFileIOStream for the created file
#NAME: write
#PARENT: Gio.OutputStream.write
#COMMENT: Number of bytes written, or -1 on error
#NAME: invoke_request_certificate
#PARENT: Gio.TlsInteraction.invoke_request_certificate
#COMMENT: The status of the certificate request interaction.
#NAME: uint32
#PARENT: Gio.FileAttributeType
#COMMENT: an unsigned 4-byte/32-bit integer.
#NAME: error_message
#PARENT: Gio.DBusMessage.new_method_error_literal.DBusMessage
#COMMENT: The D-Bus error message.
#NAME: user_data
#PARENT: Gio.DBusConnection.call.none
#COMMENT: the data to pass to @callback
#NAME: flags
#PARENT: Gio.Settings.bind.none
#COMMENT: flags for the binding
#NAME: send_fd
#PARENT: Gio.UnixConnection.send_fd
#COMMENT: a %TRUE on success, %NULL on error.
#NAME: lookup_action
#PARENT: Gio.ActionMap
#COMMENT: Looks up the action with the name @action_name in @action_map.

If no such action exists, returns %NULL.
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_uint32.guint32
#COMMENT: a file attribute key.
#NAME: from_charset
#PARENT: Gio.CharsetConverter.new.CharsetConverter
#COMMENT: source charset
#NAME: cancelled
#PARENT: Gio.IOErrorEnum
#COMMENT: Operation was cancelled. See #GCancellable.
#NAME: get_level
#PARENT: Gio.SocketControlMessageClass.get_level.get_level
#COMMENT: an integer describing the level
#NAME: resolver
#PARENT: Gio.ProxyResolver.lookup.utf8
#COMMENT: a #GProxyResolver
#NAME: listener
#PARENT: Gio.SocketListener.add_address.gboolean
#COMMENT: a #GSocketListener
#NAME: ref
#PARENT: Gio.DBusMethodInfo
#COMMENT: If @info is statically allocated does nothing. Otherwise increases
the reference count.
#NAME: result
#PARENT: Gio.TlsInteraction.ask_password_finish.TlsInteractionResult
#COMMENT: the result passed to the callback
#NAME: enumerate_namespace
#PARENT: Gio.FileAttributeMatcher.enumerate_namespace
#COMMENT: %TRUE if the matcher matches all of the entries
in the given @ns, %FALSE otherwise.
#NAME: parse_uri
#PARENT: Gio.NetworkAddress.parse_uri
#COMMENT: the new #GNetworkAddress, or %NULL on error
#NAME: proxy
#PARENT: Gio.ProxyInterface.connect_finish.connect_finish.IOStream
#COMMENT: a #GProxy
#NAME: get_destination_protocol
#PARENT: Gio.ProxyAddress.get_destination_protocol
#COMMENT: the @proxy's destination protocol
#NAME: cancellable
#PARENT: Gio.pollable_stream_write_all.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_n_items
#PARENT: Gio.ListModel
#COMMENT: Gets the number of items in @list.

Depending on the model implementation, calling this function may be
less efficient than iterating the list with increasing values for
@position until g_list_model_get_item() returns %NULL.
#NAME: user_data
#PARENT: Gio.File.eject_mountable_with_operation.none
#COMMENT: the data to pass to callback function
#NAME: set_flags
#PARENT: Gio.Settings.set_flags
#COMMENT: %TRUE, if the set succeeds
#NAME: func
#PARENT: Gio.SimpleAsyncResult.run_in_thread.none
#COMMENT: a #GSimpleAsyncThreadFunc.
#NAME: bus_name
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: a unique or well-known bus name or %NULL if
    @connection is not a message bus connection
#NAME: length
#PARENT: Gio.File.replace_contents.gboolean
#COMMENT: the length of @contents in bytes
#NAME: g-object-path
#PARENT: Gio.DBusObjectSkeleton
#COMMENT: The object path where the object is exported.
#NAME: flags
#PARENT: Gio.File.set_attributes_from_info.gboolean
#COMMENT: #GFileQueryInfoFlags
#NAME: icon_hash
#PARENT: Gio.icon_hash
#COMMENT: a #guint containing a hash for the @icon, suitable for
use in a #GHashTable or similar data structure.
#NAME: initable_newv
#PARENT: Gio
#COMMENT: Helper function for constructing #GInitable object. This is
similar to g_object_newv() but also initializes the object
and returns %NULL, setting an error on failure.
#NAME: handshake_finish
#PARENT: Gio.TlsConnection
#COMMENT: Finish an asynchronous TLS handshake operation. See
g_tls_connection_handshake() for more information.
#NAME: private-key-pem
#PARENT: Gio.TlsCertificate
#COMMENT: The PEM (ASCII) encoded representation of the certificate's
private key in either PKCS#1 format ("`BEGIN RSA PRIVATE
KEY`") or unencrypted PKCS#8 format ("`BEGIN
PRIVATE KEY`"). This property (or the
#GTlsCertificate:private-key property) can be set when
constructing a key (eg, from a file), but cannot be read.

PKCS#8 format is supported since 2.32; earlier releases only
support PKCS#1. You can use the `openssl rsa`
tool to convert PKCS#8 keys to PKCS#1.
#NAME: info
#PARENT: Gio.DBusSignalInfo.ref.DBusSignalInfo
#COMMENT: A #GDBusSignalInfo
#NAME: shutdown
#PARENT: Gio.DriveStartStopType
#COMMENT: The stop method will physically
   shut down the drive and e.g. power down the port the drive is
   attached to.
#NAME: proxy
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_finish.GLib.Variant
#COMMENT: A #GDBusProxy.
#NAME: set_boolean
#PARENT: Gio.Settings
#COMMENT: Sets @key in @settings to @value.

A convenience variant of g_settings_set() for booleans.

It is a programmer error to give a @key that isn't specified as
having a boolean type in the schema for @settings.
#NAME: complete
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Completes an asynchronous I/O job immediately. Must be called in
the thread where the asynchronous result was to be delivered, as it
invokes the callback directly. If you are in a different thread use
g_simple_async_result_complete_in_idle().

Calling this function takes a reference to @simple for as long as
is needed to complete the call.
#NAME: newv
#PARENT: Gio.Subprocess.newv
#COMMENT: A newly created #GSubprocess, or %NULL on error (and @error
  will be set)
#NAME: wait_check
#PARENT: Gio.Subprocess.wait_check
#COMMENT: %TRUE on success, %FALSE if process exited abnormally, or
@cancellable was cancelled
#NAME: changes_done_hint
#PARENT: Gio.FileMonitorEvent
#COMMENT: a hint that this was probably the last change in a set of changes.
#NAME: credentials
#PARENT: Gio.DBusAuthObserver.authorize_authenticated_peer.gboolean
#COMMENT: Credentials received from the peer or %NULL.
#NAME: set_dbus_error
#PARENT: Gio.DBusError
#COMMENT: Does nothing if @error is %NULL. Otherwise sets *@error to
a new #GError created with g_dbus_error_new_for_dbus_error()
with @dbus_error_message prepend with @format (unless %NULL).
#NAME: source_specific
#PARENT: Gio.Socket.join_multicast_group.gboolean
#COMMENT: %TRUE if source-specific multicast should be used
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_upto.utf8
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: set_attribute_byte_string
#PARENT: Gio.FileInfo
#COMMENT: Sets the @attribute to contain the given @attr_value,
if possible.
#NAME: info
#PARENT: Gio.FileInfo.get_is_backup.gboolean
#COMMENT: a #GFileInfo.
#NAME: push_current
#PARENT: Gio.Cancellable
#COMMENT: Pushes @cancellable onto the cancellable stack. The current
cancellable can then be received using g_cancellable_get_current().

This is useful when implementing cancellable operations in
code that does not allow you to pass down the cancellable object.

This is typically called automatically by e.g. #GFile operations,
so you rarely have to call this yourself.
#NAME: 
#PARENT: Gio.Settings.set.gboolean...
#COMMENT: arguments as per @format
#NAME: conn
#PARENT: Gio.TlsConnection.set_interaction.none
#COMMENT: a connection
#NAME: network
#PARENT: Gio.DriveStartStopType
#COMMENT: The start/stop methods are used
   for connecting/disconnect to the drive over the network.
#NAME: parameters
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: a #GVariant tuple with parameters for the method
    or %NULL if not passing parameters
#NAME: get_validation_flags
#PARENT: Gio.TlsClientConnection.get_validation_flags
#COMMENT: the validation flags
#NAME: interface_name
#PARENT: Gio.DBusConnection.call.none
#COMMENT: D-Bus interface to invoke method on
#NAME: user_data
#PARENT: Gio.Proxy.connect_async.none
#COMMENT: callback data
#NAME: soa
#PARENT: Gio.ResolverRecordType
#COMMENT: lookup DNS SOA records for a zone
#NAME: resolve_relative_path
#PARENT: Gio.FileIface.resolve_relative_path.resolve_relative_path
#COMMENT: #GFile to the resolved path.
    %NULL if @relative_path is %NULL or if @file is invalid.
    Free the returned object with g_object_unref().
#NAME: get_child_for_display_name
#PARENT: Gio.File.get_child_for_display_name
#COMMENT: a #GFile to the specified child, or
    %NULL if the display name couldn't be converted.
    Free the returned object with g_object_unref().
#NAME: list_actions
#PARENT: Gio.ActionGroupInterface.list_actions.list_actions
#COMMENT: a %NULL-terminated array of the names of the
actions in the groupb
#NAME: file
#PARENT: Gio.FileIface.enumerate_children_async.enumerate_children_async.none
#COMMENT: input #GFile
#NAME: parameter
#PARENT: Gio.SimpleAction.activate.none
#COMMENT: the parameter to the activation
#NAME: new
#PARENT: Gio.Subprocess.new
#COMMENT: A newly created #GSubprocess, or %NULL on error (and @error
  will be set)
#NAME: message
#PARENT: Gio.DBusMessage.set_member.none
#COMMENT: A #GDBusMessage.
#NAME: socket
#PARENT: Gio.Socket.send_with_blocking.gssize
#COMMENT: a #GSocket
#NAME: value
#PARENT: Gio.Socket.get_option.gboolean
#COMMENT: return location for the option value
#NAME: signals
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusSignalInfo structures or %NULL if there are no signals.
#NAME: unix_mount_is_system_internal
#PARENT: Gio.unix_mount_is_system_internal
#COMMENT: %TRUE if the unix mount is for a system path.
#NAME: edit_name
#PARENT: Gio.FileInfo.set_edit_name.none
#COMMENT: a string containing an edit name.
#NAME: conn
#PARENT: Gio.TlsClientConnection.set_validation_flags.none
#COMMENT: the #GTlsClientConnection
#NAME: parameters
#PARENT: Gio.DBusObjectManagerClient.interface-proxy-signal.none
#COMMENT: A #GVariant tuple with parameters for the signal.
#NAME: connect
#PARENT: Gio.ProxyInterface.connect.connect
#COMMENT: a #GIOStream that will replace @connection. This might
              be the same as @connection, in which case a reference
              will be added.
#NAME: flags
#PARENT: Gio.Socket.send_message.gssize
#COMMENT: an int containing #GSocketMsgFlags flags
#NAME: domain
#PARENT: Gio.simple_async_report_error_in_idle.none
#COMMENT: a #GQuark containing the error domain (usually #G_IO_ERROR).
#NAME: node
#PARENT: Gio.DBusSubtreeIntrospectFunc.DBusInterfaceInfo
#COMMENT: A node that is a child of @object_path (relative to @object_path) or %NULL for the root of the subtree.
#NAME: lookup
#PARENT: Gio.DesktopAppInfoLookupIface.get_default_for_uri_scheme.get_default_for_uri_scheme.AppInfo
#COMMENT: a #GDesktopAppInfoLookup
#NAME: new
#PARENT: Gio.Settings.new
#COMMENT: a new #GSettings object
#NAME: volume
#PARENT: Gio.VolumeIface.get_uuid.get_uuid.utf8
#COMMENT: a #GVolume
#NAME: signal_subscribe
#PARENT: Gio.DBusConnection
#COMMENT: Subscribes to signals on @connection and invokes @callback with a whenever
the signal is received. Note that @callback will be invoked in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this method from.

If @connection is not a message bus connection, @sender must be
%NULL.

If @sender is a well-known name note that @callback is invoked with
the unique name for the owner of @sender, not the well-known name
as one would expect. This is because the message bus rewrites the
name. As such, to avoid certain race conditions, users should be
tracking the name owner of the well-known name and use that when
processing the received signal.

If one of %G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE or
%G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH are given, @arg0 is
interpreted as part of a namespace or path.  The first argument
of a signal is matched against that part as specified by D-Bus.
#NAME: callback
#PARENT: Gio.Permission.acquire_async.none
#COMMENT: the #GAsyncReadyCallback to call when done
#NAME: task
#PARENT: Gio.Task.return_error_if_cancelled.gboolean
#COMMENT: a #GTask
#NAME: cancellable
#PARENT: Gio.DataOutputStream.put_byte.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: change_action_state_full
#PARENT: Gio.RemoteActionGroup
#COMMENT: Changes the state of a remote action.

This is the same as g_action_group_change_action_state() except that
it allows for provision of "platform data" to be sent along with the
state change request.  This typically contains details such as the
user interaction timestamp or startup notification information.

@platform_data must be non-%NULL and must have the type
%G_VARIANT_TYPE_VARDICT.  If it is floating, it will be consumed.
#NAME: res
#PARENT: Gio.DBusProxy.new_finish.DBusProxy
#COMMENT: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to g_dbus_proxy_new().
#NAME: SocketClient
#PARENT: Gio
#COMMENT: #GSocketClient is a lightweight high-level utility class for connecting to
a network host using a connection oriented socket type.

You create a #GSocketClient object, set any options you want, and then
call a sync or async connect operation, which returns a #GSocketConnection
subclass on success.

The type of the #GSocketConnection object returned depends on the type of
the underlying socket that is in use. For instance, for a TCP/IP connection
it will be a #GTcpConnection.

As #GSocketClient is a lightweight object, you don't need to cache it. You
can just create a new one any time you need one.
#NAME: verify_chain_finish
#PARENT: Gio.TlsDatabase
#COMMENT: Finish an asynchronous verify chain operation. See
g_tls_database_verify_chain() for more information. *
#NAME: name
#PARENT: Gio.BusNameLostCallback.none
#COMMENT: The name being owned.
#NAME: dest_hostname
#PARENT: Gio.ProxyAddress.new.SocketAddress
#COMMENT: The destination hostname the proxy should tunnel to.
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.action_state_changed.action_state_changed.none
#COMMENT: the name of an action in the group
#NAME: dispatch_to_unenumerated_nodes
#PARENT: Gio.DBusSubtreeFlags
#COMMENT: Method calls to objects not in the enumerated range
                                                      will still be dispatched. This is useful if you want
                                                      to dynamically spawn objects in the subtree.
#NAME: make_backup
#PARENT: Gio.File.replace_contents_bytes_async.none
#COMMENT: %TRUE if a backup should be created
#NAME: monitor
#PARENT: Gio.NetworkMonitor.get_network_available.gboolean
#COMMENT: the #GNetworkMonitor
#NAME: user_data
#PARENT: Gio.File.enumerate_children_async.none
#COMMENT: the data to pass to callback function
#NAME: remote
#PARENT: Gio.RemoteActionGroup.change_action_state_full.none
#COMMENT: a #GRemoteActionGroup
#NAME: info
#PARENT: Gio.FileInfo.get_file_type.FileType
#COMMENT: a #GFileInfo.
#NAME: address_in_use
#PARENT: Gio.IOErrorEnum
#COMMENT: The requested address is already in use. Since 2.22
#NAME: format
#PARENT: Gio.DBusMethodInvocation.return_error_valist.none
#COMMENT: printf()-style format.
#NAME: appinfo
#PARENT: Gio.AppInfo.get_supported_types.utf8
#COMMENT: a #GAppInfo that can handle files
#NAME: stream
#PARENT: Gio.InputStreamClass.close_finish.close_finish.gboolean
#COMMENT: a #GInputStream.
#NAME: cancellable
#PARENT: Gio.SeekableIface.seek.seek.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: can_truncate
#PARENT: Gio.Seekable
#COMMENT: Tests if the stream can be truncated.
#NAME: get_start_stop_type
#PARENT: Gio.Drive.get_start_stop_type
#COMMENT: A value from the #GDriveStartStopType enumeration.
#NAME: iterate_item_attributes
#PARENT: Gio.MenuModel
#COMMENT: Creates a #GMenuAttributeIter to iterate over the attributes of
the item at position @item_index in @model.

You must free the iterator with g_object_unref() when you are done.
#NAME: new
#PARENT: Gio.NetworkService.new
#COMMENT: a new #GNetworkService
#NAME: label
#PARENT: Gio.Menu.insert_section.none
#COMMENT: the section label, or %NULL
#NAME: cancellable
#PARENT: Gio.FileIface.query_filesystem_info_async.query_filesystem_info_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: file
#PARENT: Gio.File.load_contents_finish.gboolean
#COMMENT: input #GFile
#NAME: new_error
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Creates a new #GSimpleAsyncResult with a set error.
#NAME: get_description
#PARENT: Gio.TlsPassword
#COMMENT: Get a description string about what the password will be used for.
#NAME: make_directory_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous directory creation, started with
g_file_make_directory_async().
#NAME: completer
#PARENT: Gio.FilenameCompleter.get_completions.utf8
#COMMENT: the filename completer.
#NAME: wait_finish
#PARENT: Gio.Subprocess.wait_finish
#COMMENT: %TRUE if successful, or %FALSE with @error set
#NAME: purpose
#PARENT: Gio.TlsDatabaseClass.verify_chain_async.verify_chain_async.none
#COMMENT: the purpose that this certificate chain will be used for.
#NAME: file
#PARENT: Gio.File.read_finish.FileInputStream
#COMMENT: input #GFile
#NAME: format
#PARENT: Gio.Settings.get.none
#COMMENT: a #GVariant format string
#NAME: socket
#PARENT: Gio.Socket.send_messages.gint
#COMMENT: a #GSocket
#NAME: set_value_full
#PARENT: Gio.TlsPassword
#COMMENT: Provide the value for this password.

The @value will be owned by the password object, and later freed using
the @destroy function callback.

Specify the @length, for a non-nul-terminated password. Pass -1 as
@length if using a nul-terminated password, and @length will be
calculated automatically. (Note that the terminating nul is not
considered part of the password in this case.)
#NAME: get_id
#PARENT: Gio.AppInfoIface.get_id.get_id
#COMMENT: a string containing the application's ID.
#NAME: errors
#PARENT: Gio.TlsConnection.accept-certificate.gboolean
#COMMENT: the problems with @peer_cert.
#NAME: equal
#PARENT: Gio.AppInfo
#COMMENT: Checks if two #GAppInfos are equal.
#NAME: DBusErrorEntry
#PARENT: Gio
#COMMENT: Struct used in g_dbus_error_register_error_domain().
#NAME: type
#PARENT: Gio.dbus_gvalue_to_gvariant.GLib.Variant
#COMMENT: A #GVariantType
#NAME: info
#PARENT: Gio.DesktopAppInfo.get_filename.utf8
#COMMENT: a #GDesktopAppInfo
#NAME: new
#PARENT: Gio.BytesIcon
#COMMENT: Creates a new icon for a bytes.
#NAME: object
#PARENT: Gio.Application.unbind_busy_property.none
#COMMENT: a #GObject
#NAME: ref_count
#PARENT: Gio.DBusArgInfo
#COMMENT: The reference count or -1 if statically allocated.
#NAME: get_description
#PARENT: Gio.AppInfo
#COMMENT: Gets a human-readable description of an installed application.
#NAME: truncate
#PARENT: Gio.Seekable
#COMMENT: Truncates a stream with a given #offset.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.
#NAME: enumerator
#PARENT: Gio.FileEnumerator.close_finish.gboolean
#COMMENT: a #GFileEnumerator.
#NAME: connection
#PARENT: Gio.DBusConnection.get_peer_credentials.Credentials
#COMMENT: a #GDBusConnection
#NAME: query_info_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous file info query.
See g_file_query_info_async().
#NAME: object
#PARENT: Gio.DBusObjectSkeleton.set_object_path.none
#COMMENT: A #GDBusObjectSkeleton.
#NAME: mtime
#PARENT: Gio.FileInfo.set_modification_time.none
#COMMENT: a #GTimeVal.
#NAME: stop_mountable_finish
#PARENT: Gio.File
#COMMENT: Finishes an stop operation, see g_file_stop_mountable() for details.

Finish an asynchronous stop operation that was started
with g_file_stop_mountable().
#NAME: cancellable
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by_async.lookup_certificates_issued_by_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: TcpWrapperConnection
#PARENT: Gio
#COMMENT: A #GTcpWrapperConnection can be used to wrap a #GIOStream that is
based on a #GSocket, but which is not actually a
#GSocketConnection. This is used by #GSocketClient so that it can
always return a #GSocketConnection, even when the connection it has
actually created is not directly a #GSocketConnection.
#NAME: stream
#PARENT: Gio.DataInputStream.read_byte.guint8
#COMMENT: a given #GDataInputStream.
#NAME: cancellable
#PARENT: Gio.NetworkMonitorInterface.can_reach.can_reach.gboolean
#COMMENT: a #GCancellable, or %NULL
#NAME: settings
#PARENT: Gio.Settings.reset.none
#COMMENT: a #GSettings object
#NAME: get_proxy_type_destroy_notify
#PARENT: Gio.DBusObjectManagerClient.new.none
#COMMENT: Free function for @get_proxy_type_user_data or %NULL.
#NAME: convert
#PARENT: Gio.Converter.convert
#COMMENT: a #GConverterResult, %G_CONVERTER_ERROR on error.
#NAME: res
#PARENT: Gio.File.open_readwrite_finish.FileIOStream
#COMMENT: a #GAsyncResult
#NAME: is_writable
#PARENT: Gio.PollableOutputStream
#COMMENT: Checks if @stream can be written.

Note that some stream types may not be able to implement this 100%
reliably, and it is possible that a call to g_output_stream_write()
after this returns %TRUE would still block. To guarantee
non-blocking behavior, you should always use
g_pollable_output_stream_write_nonblocking(), which will return a
%G_IO_ERROR_WOULD_BLOCK error rather than blocking.
#NAME: cancellable
#PARENT: Gio.OutputStream.close_async.none
#COMMENT: optional cancellable object
#NAME: stream
#PARENT: Gio.FileInputStreamClass.query_info_async.query_info_async.none
#COMMENT: a #GFileInputStream.
#NAME: get_property_info
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Gets information about the property that this method call is for, if
any.

This will only be set in the case of an invocation in response to a
property Get or Set call that has been directed to the method call
handler for an object on account of its property_get() or
property_set() vtable pointers being unset.

See #GDBusInterfaceVTable for more information.

If the call was GetAll, %NULL will be returned.
#NAME: result
#PARENT: Gio.Subprocess.wait_finish.gboolean
#COMMENT: the #GAsyncResult passed to your #GAsyncReadyCallback
#NAME: new
#PARENT: Gio.TlsServerConnection
#COMMENT: Creates a new #GTlsServerConnection wrapping @base_io_stream (which
must have pollable input and output streams).
#NAME: get_symbolic_icon
#PARENT: Gio.Volume
#COMMENT: Gets the symbolic icon for @volume.
#NAME: stream
#PARENT: Gio.DataInputStream.read_line_async.none
#COMMENT: a given #GDataInputStream.
#NAME: application
#PARENT: Gio.ApplicationClass.local_command_line.local_command_line.gboolean
#COMMENT: a #GApplication
#NAME: create_certificate_handle
#PARENT: Gio.TlsDatabase.create_certificate_handle
#COMMENT: a newly allocated string containing the
handle.
#NAME: flags
#PARENT: Gio.VolumeIface.mount_fn.mount_fn.none
#COMMENT: flags affecting the operation
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.get_method_info.DBusMethodInfo
#COMMENT: A #GDBusMethodInvocation.
#NAME: get_source_tag
#PARENT: Gio.Task
#COMMENT: Gets @task's source tag. See g_task_set_source_tag().
#NAME: read_upto_finish
#PARENT: Gio.DataInputStream
#COMMENT: Finish an asynchronous call started by
g_data_input_stream_read_upto_async().

Note that this function does not consume the stop character. You
have to use g_data_input_stream_read_byte() to get it before calling
g_data_input_stream_read_upto_async() again.
#NAME: action_name
#PARENT: Gio.ActionGroup.change_action_state.none
#COMMENT: the name of the action to request the change on
#NAME: stop-button
#PARENT: Gio.Drive
#COMMENT: Emitted when the physical stop button (if any) of a drive has
been pressed.
#NAME: icon_hash
#PARENT: Gio
#COMMENT: Gets a hash for an icon.
#NAME: set_attribute
#PARENT: Gio.FileIface.set_attribute.set_attribute
#COMMENT: %TRUE if the attribute was set, %FALSE otherwise.
#NAME: icon
#PARENT: Gio.Icon.hash.guint
#COMMENT: #gconstpointer to an icon object.
#NAME: resolver
#PARENT: Gio.ProxyResolverInterface.lookup.lookup.utf8
#COMMENT: a #GProxyResolver
#NAME: io_priority
#PARENT: Gio.AsyncInitable.new_valist_async.none
#COMMENT: the [I/O priority][io-priority] of the operation
#NAME: activate
#PARENT: Gio.Application
#COMMENT: The ::activate signal is emitted on the primary instance when an
activation occurs. See g_application_activate().
#NAME: attr_value
#PARENT: Gio.FileInfo.set_attribute_int32.none
#COMMENT: a signed 32-bit integer
#NAME: resolver
#PARENT: Gio.ProxyResolver.lookup_finish.utf8
#COMMENT: a #GProxyResolver
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_int32.gint32
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: attribute
#PARENT: Gio.FileInfo.set_attribute_int64.none
#COMMENT: attribute name to set.
#NAME: set_ignore_hosts
#PARENT: Gio.SimpleProxyResolver
#COMMENT: Sets the list of ignored hosts.

See #GSimpleProxyResolver:ignore-hosts for more details on how the
@ignore_hosts argument is interpreted.
#NAME: extension_name
#PARENT: Gio.io_extension_point_implement.IOExtension
#COMMENT: the name for the extension
#NAME: new_section
#PARENT: Gio.MenuItem
#COMMENT: Creates a new #GMenuItem representing a section.

This is a convenience API around g_menu_item_new() and
g_menu_item_set_section().

The effect of having one menu appear as a section of another is
exactly as it sounds: the items from @section become a direct part of
the menu that @menu_item is added to.

Visual separation is typically displayed between two non-empty
sections.  If @label is non-%NULL then it will be encorporated into
this visual indication.  This allows for labeled subsections of a
menu.

As a simple example, consider a typical "Edit" menu from a simple
program.  It probably contains an "Undo" and "Redo" item, followed by
a separator, followed by "Cut", "Copy" and "Paste".

This would be accomplished by creating three #GMenu instances.  The
first would be populated with the "Undo" and "Redo" items, and the
second with the "Cut", "Copy" and "Paste" items.  The first and
second menus would then be added as submenus of the third.  In XML
format, this would look something like the following:
|[
<menu id='edit-menu'>
  <section>
    <item label='Undo'/>
    <item label='Redo'/>
  </section>
  <section>
    <item label='Cut'/>
    <item label='Copy'/>
    <item label='Paste'/>
  </section>
</menu>
]|

The following example is exactly equivalent.  It is more illustrative
of the exact relationship between the menus and items (keeping in
mind that the 'link' element defines a new menu that is linked to the
containing one).  The style of the second example is more verbose and
difficult to read (and therefore not recommended except for the
purpose of understanding what is really going on).
|[
<menu id='edit-menu'>
  <item>
    <link name='section'>
      <item label='Undo'/>
      <item label='Redo'/>
    </link>
  </item>
  <item>
    <link name='section'>
      <item label='Cut'/>
      <item label='Copy'/>
      <item label='Paste'/>
    </link>
  </item>
</menu>
]|
#NAME: file
#PARENT: Gio.FileIface.replace_readwrite_async.replace_readwrite_async.none
#COMMENT: input #GFile
#NAME: new_take_error
#PARENT: Gio.SimpleAsyncResult.new_take_error
#COMMENT: a #GSimpleAsyncResult
#NAME: TaskThreadFunc
#PARENT: Gio
#COMMENT: The prototype for a task function to be run in a thread via
g_task_run_in_thread() or g_task_run_in_thread_sync().

If the return-on-cancel flag is set on @task, and @cancellable gets
cancelled, then the #GTask will be completed immediately (as though
g_task_return_error_if_cancelled() had been called), without
waiting for the task function to complete. However, the task
function will continue running in its thread in the background. The
function therefore needs to be careful about how it uses
externally-visible state in this case. See
g_task_set_return_on_cancel() for more details.

Other than in that case, @task will be completed when the
#GTaskThreadFunc returns, not when it calls a
`g_task_return_` function.
#NAME: can_reach_finish
#PARENT: Gio.NetworkMonitorInterface.can_reach_finish.can_reach_finish
#COMMENT: %TRUE if network is reachable, %FALSE if not.
#NAME: drive
#PARENT: Gio.VolumeMonitor.drive-stop-button.none
#COMMENT: the drive where the stop button was pressed
#NAME: uint64
#PARENT: Gio.FileAttributeType
#COMMENT: an unsigned 8-byte/64-bit integer.
#NAME: verify_chain
#PARENT: Gio.TlsDatabase.verify_chain
#COMMENT: the appropriate #GTlsCertificateFlags which represents the
result of verification.
#NAME: FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be started
degraded.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: info
#PARENT: Gio.DBusProxy.new.none
#COMMENT: A #GDBusInterfaceInfo specifying the minimal interface that @proxy conforms to or %NULL.
#NAME: prepend
#PARENT: Gio.Menu
#COMMENT: Convenience function for prepending a normal menu item to the start
of @menu.  Combine g_menu_item_new() and g_menu_insert_item() for a more
flexible alternative.
#NAME: default_domain
#PARENT: Gio.MountOperation.ask-password.none
#COMMENT: string containing the default domain.
#NAME: send
#PARENT: Gio.Socket
#COMMENT: Tries to send @size bytes from @buffer on the socket. This is
mainly used by connection-oriented sockets; it is identical to
g_socket_send_to() with @address set to %NULL.

If the socket is in blocking mode the call will block until there is
space for the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
will be returned. To be notified when space is available, wait for the
%G_IO_OUT condition. Note though that you may still receive
%G_IO_ERROR_WOULD_BLOCK from g_socket_send() even if you were previously
notified of a %G_IO_OUT condition. (On Windows in particular, this is
very common due to the way the underlying APIs work.)

On error -1 is returned and @error is set accordingly.
#NAME: shutdown_read
#PARENT: Gio.Socket.shutdown.gboolean
#COMMENT: whether to shut down the read side
#NAME: set_cached_property
#PARENT: Gio.DBusProxy
#COMMENT: If @value is not %NULL, sets the cached value for the property with
name @property_name to the value in @value.

If @value is %NULL, then the cached value is removed from the
property cache.

If @proxy has an expected interface (see
#GDBusProxy:g-interface-info) and @property_name is referenced by
it, then @value is checked against the type of the property.

If the @value #GVariant is floating, it is consumed. This allows
convenient 'inline' use of g_variant_new(), e.g.
|[<!-- language="C" -->
 g_dbus_proxy_set_cached_property (proxy,
                                   "SomeProperty",
                                   g_variant_new ("(si)",
                                                 "A String",
                                                 42));
]|

Normally you will not need to use this method since @proxy
is tracking changes using the
`org.freedesktop.DBus.Properties.PropertiesChanged`
D-Bus signal. However, for performance reasons an object may
decide to not use this signal for some properties and instead
use a proprietary out-of-band mechanism to transmit changes.

As a concrete example, consider an object with a property
`ChatroomParticipants` which is an array of strings. Instead of
transmitting the same (long) array every time the property changes,
it is more efficient to only transmit the delta using e.g. signals
`ChatroomParticipantJoined(String name)` and
`ChatroomParticipantParted(String name)`.
#NAME: new
#PARENT: Gio.DesktopAppInfo
#COMMENT: Creates a new #GDesktopAppInfo based on a desktop file id.

A desktop file id is the basename of the desktop file, including the
.desktop extension. GIO is looking for a desktop file with this name
in the `applications` subdirectories of the XDG
data directories (i.e. the directories specified in the `XDG_DATA_HOME`
and `XDG_DATA_DIRS` environment variables). GIO also supports the
prefix-to-subdirectory mapping that is described in the
[Menu Spec](http://standards.freedesktop.org/menu-spec/latest/)
(i.e. a desktop id of kde-foo.desktop will match
`/usr/share/applications/kde/foo.desktop`).
#NAME: can_eject
#PARENT: Gio.Volume
#COMMENT: Checks if a volume can be ejected.
#NAME: ResourceError
#PARENT: Gio
#COMMENT: An error code used with %G_RESOURCE_ERROR in a #GError returned
from a #GResource routine.
#NAME: list
#PARENT: Gio.UnixFDList.append.gint
#COMMENT: a #GUnixFDList
#NAME: appinfo
#PARENT: Gio.AppInfo.get_display_name.utf8
#COMMENT: a #GAppInfo.
#NAME: guess_icon
#PARENT: Gio.UnixMountPoint.guess_icon
#COMMENT: a #GIcon
#NAME: has_pending
#PARENT: Gio.InputStream.has_pending
#COMMENT: %TRUE if @stream has pending actions.
#NAME: op
#PARENT: Gio.MountOperation.get_anonymous.gboolean
#COMMENT: a #GMountOperation.
#NAME: io_priority
#PARENT: Gio.io_scheduler_push_job.none
#COMMENT: the [I/O priority][io-priority]
of the request.
#NAME: res
#PARENT: Gio.DBusObjectManagerClient.new_for_bus_finish.DBusObjectManagerClient
#COMMENT: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_object_manager_client_new_for_bus().
#NAME: source_tag
#PARENT: Gio.AsyncResult.is_tagged.gboolean
#COMMENT: an application-defined tag
#NAME: file
#PARENT: Gio.File.set_attribute_uint32.gboolean
#COMMENT: input #GFile
#NAME: volume
#PARENT: Gio.VolumeIface.should_automount.should_automount.gboolean
#COMMENT: a #GVolume
#NAME: network-available
#PARENT: Gio.NetworkMonitor
#COMMENT: Whether the network is considered available. That is, whether the
system has a default route for at least one of IPv4 or IPv6.

Real-world networks are of course much more complicated than
this; the machine may be connected to a wifi hotspot that
requires payment before allowing traffic through, or may be
connected to a functioning router that has lost its own upstream
connectivity. Some hosts might only be accessible when a VPN is
active. Other hosts might only be accessible when the VPN is
not active. Thus, it is best to use g_network_monitor_can_reach()
or g_network_monitor_can_reach_async() to test for reachability
on a host-by-host basis. (On the other hand, when the property is
%FALSE, the application can reasonably expect that no remote
hosts at all are reachable, and should indicate this to the user
in its UI.)

See also #GNetworkMonitor::network-changed.
#NAME: result
#PARENT: Gio.File.measure_disk_usage_finish.gboolean
#COMMENT: the #GAsyncResult passed to your #GAsyncReadyCallback
#NAME: extension_name
#PARENT: Gio.IOExtensionPoint.implement.IOExtension
#COMMENT: the name for the extension
#NAME: value_p
#PARENT: Gio.File.set_attribute.gboolean
#COMMENT: a pointer to the value (or the pointer
    itself if the type is a pointer type)
#NAME: get_term_sig
#PARENT: Gio.Subprocess
#COMMENT: Get the signal number that caused the subprocess to terminate, given
that it terminated due to a signal.

This is equivalent to the system WTERMSIG macro.

It is an error to call this function before g_subprocess_wait() and
unless g_subprocess_get_if_signaled() returned %TRUE.
#NAME: get_user_data
#PARENT: Gio.DBusMethodInvocation.get_user_data
#COMMENT: A #gpointer.
#NAME: content_type_equals
#PARENT: Gio
#COMMENT: Compares two content types for equality.
#NAME: lookup_flags
#PARENT: Gio.Resource.lookup_data.GLib.Bytes
#COMMENT: A #GResourceLookupFlags
#NAME: new_from_bytes
#PARENT: Gio.MemoryInputStream.new_from_bytes
#COMMENT: new #GInputStream read from @bytes
#NAME: attributes
#PARENT: Gio.FileIOStream.query_info.FileInfo
#COMMENT: a file attribute query string.
#NAME: parameters
#PARENT: Gio.DBusProxy.g-signal.none
#COMMENT: A #GVariant tuple with parameters for the signal.
#NAME: settings-schema
#PARENT: Gio.Settings
#COMMENT: The #GSettingsSchema describing the types of keys for this
#GSettings object.

Ideally, this property would be called 'schema'.  #GSettingsSchema
has only existed since version 2.32, however, and before then the
'schema' property was used to refer to the ID of the schema rather
than the schema itself.  Take care.
#NAME: info
#PARENT: Gio.FileInfo.get_size.gint64
#COMMENT: a #GFileInfo.
#NAME: get_remote_address
#PARENT: Gio.Socket
#COMMENT: Try to get the remove address of a connected socket. This is only
useful for connection oriented sockets that have been connected.
#NAME: self
#PARENT: Gio.SubprocessLauncher.set_child_setup.none
#COMMENT: a #GSubprocessLauncher
#NAME: connection
#PARENT: Gio.ProxyInterface.connect.connect.IOStream
#COMMENT: a #GIOStream
#NAME: length
#PARENT: Gio.TlsPasswordClass.get_value.get_value.guint8
#COMMENT: location to place the length of the password.
#NAME: flags
#PARENT: Gio.File.replace_readwrite.FileIOStream
#COMMENT: a set of #GFileCreateFlags
#NAME: user_data
#PARENT: Gio.FileIface.create_async.create_async.none
#COMMENT: the data to pass to callback function
#NAME: client
#PARENT: Gio.SocketClient.set_tls_validation_flags.none
#COMMENT: a #GSocketClient.
#NAME: flags
#PARENT: Gio.Mount.unmount_with_operation.none
#COMMENT: flags affecting the operation
#NAME: RemoteActionGroup
#PARENT: Gio
#COMMENT: The GRemoteActionGroup interface is implemented by #GActionGroup
instances that either transmit action invocations to other processes
or receive action invocations in the local process from other
processes.

The interface has `_full` variants of the two
methods on #GActionGroup used to activate actions:
g_action_group_activate_action() and
g_action_group_change_action_state(). These variants allow a
"platform data" #GVariant to be specified: a dictionary providing
context for the action invocation (for example: timestamps, startup
notification IDs, etc).

#GDBusActionGroup implements #GRemoteActionGroup.  This provides a
mechanism to send platform data for action invocations over D-Bus.

Additionally, g_dbus_connection_export_action_group() will check if
the exported #GActionGroup implements #GRemoteActionGroup and use the
`_full` variants of the calls if available.  This
provides a mechanism by which to receive platform data for action
invocations that arrive by way of D-Bus.
#NAME: is_same_user
#PARENT: Gio.Credentials.is_same_user
#COMMENT: %TRUE if @credentials and @other_credentials has the same
user, %FALSE otherwise or if @error is set.
#NAME: file
#PARENT: Gio.FileIface.monitor_dir.monitor_dir.FileMonitor
#COMMENT: input #GFile
#NAME: format_string
#PARENT: Gio.MenuItem.set_attribute.none
#COMMENT: a #GVariant format string, or %NULL
#NAME: is_closed
#PARENT: Gio.Socket.is_closed
#COMMENT: %TRUE if socket is closed, %FALSE otherwise
#NAME: TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT
#PARENT: Gio
#COMMENT: The purpose used to verify the client certificate in a TLS connection.
Used by TLS servers.
#NAME: ref_count
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: The reference count or -1 if statically allocated.
#NAME: subprocess
#PARENT: Gio.Subprocess.communicate.gboolean
#COMMENT: a #GSubprocess
#NAME: res
#PARENT: Gio.DBusConnection.close_finish.gboolean
#COMMENT: a #GAsyncResult obtained from the #GAsyncReadyCallback passed
    to g_dbus_connection_close()
#NAME: application
#PARENT: Gio.Application.run.gint
#COMMENT: a #GApplication
#NAME: get_fd
#PARENT: Gio.Socket
#COMMENT: Returns the underlying OS socket object. On unix this
is a socket file descriptor, and on Windows this is
a Winsock2 SOCKET handle. This may be useful for
doing platform specific or otherwise unusual operations
on the socket.
#NAME: dirname
#PARENT: Gio.io_modules_scan_all_in_directory.none
#COMMENT: pathname for a directory containing modules to scan.
#NAME: get_attribute_boolean
#PARENT: Gio.FileInfo
#COMMENT: Gets the value of a boolean attribute. If the attribute does not
contain a boolean value, %FALSE will be returned.
#NAME: child_setup
#PARENT: Gio.SubprocessLauncher.set_child_setup.none
#COMMENT: a #GSpawnChildSetupFunc to use as the child setup function
#NAME: set_value
#PARENT: Gio.TlsPassword
#COMMENT: Set the value for this password. The @value will be copied by the password
object.

Specify the @length, for a non-nul-terminated password. Pass -1 as
@length if using a nul-terminated password, and @length will be
calculated automatically. (Note that the terminating nul is not
considered part of the password in this case.)
#NAME: stream
#PARENT: Gio.InputStreamClass.skip_finish.skip_finish.gssize
#COMMENT: a #GInputStream.
#NAME: append_fd
#PARENT: Gio.UnixFDMessage
#COMMENT: Adds a file descriptor to @message.

The file descriptor is duplicated using dup(). You keep your copy
of the descriptor and the copy contained in @message will be closed
when @message is finalized.

A possible cause of failure is exceeding the per-process or
system-wide file descriptor limit.
#NAME: lookup_records
#PARENT: Gio.ResolverClass.lookup_records.lookup_records
#COMMENT: a non-empty #GList of
#GVariant, or %NULL on error. You must free each of the records and the list
when you are done with it. (You can use g_list_free_full() with
g_variant_unref() to do this.)
#NAME: new
#PARENT: Gio.TestDBus
#COMMENT: Create a new #GTestDBus object.
#NAME: item_index
#PARENT: Gio.MenuModel.get_item_attribute_value.GLib.Variant
#COMMENT: the index of the item
#NAME: unknown
#PARENT: Gio.FileType
#COMMENT: File's type is unknown.
#NAME: make_backup
#PARENT: Gio.FileIface.replace_async.replace_async.none
#COMMENT: %TRUE if a backup should be created
#NAME: cancellable
#PARENT: Gio.Seekable.truncate_fn.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: append_to_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous file append operation started with
g_file_append_to_async().
#NAME: methods
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusMethodInfo structures or %NULL if there are no methods.
#NAME: cancellable
#PARENT: Gio.NetworkMonitorInterface.can_reach_async.can_reach_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: stream
#PARENT: Gio.UnixOutputStream.set_close_fd.none
#COMMENT: a #GUnixOutputStream
#NAME: seek
#PARENT: Gio.SeekableIface.seek.seek
#COMMENT: %TRUE if successful. If an error
    has occurred, this function will return %FALSE and set @error
    appropriately if present.
#NAME: get_input_stream
#PARENT: Gio.IOStreamClass.get_input_stream.get_input_stream
#COMMENT: a #GInputStream, owned by the #GIOStream.
Do not free.
#NAME: destination
#PARENT: Gio.FileIface.move.move.gboolean
#COMMENT: #GFile pointing to the destination location
#NAME: get_message
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Gets the #GDBusMessage for the method invocation. This is useful if
you need to use low-level protocol features, such as UNIX file
descriptor passing, that cannot be properly expressed in the
#GVariant API.

See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
for an example of how to use this low-level API to send and receive
UNIX file descriptors.
#NAME: settings
#PARENT: Gio.Settings.get_mapped.gpointer
#COMMENT: a #GSettings object
#NAME: vectors
#PARENT: Gio.Socket.send_message.gssize
#COMMENT: an array of #GOutputVector structs
#NAME: self
#PARENT: Gio.SubprocessLauncher.set_cwd.none
#COMMENT: a #GSubprocess
#NAME: cert_one
#PARENT: Gio.TlsCertificate.is_same.gboolean
#COMMENT: first certificate to compare
#NAME: lookup_certificates_issued_by_finish
#PARENT: Gio.TlsDatabase
#COMMENT: Finish an asynchronous lookup of certificates. See
g_tls_database_lookup_certificates_issued_by() for more information.
#NAME: put_uint32
#PARENT: Gio.DataOutputStream.put_uint32
#COMMENT: %TRUE if @data was successfully added to the @stream.
#NAME: monitor
#PARENT: Gio.NetworkMonitorInterface.can_reach_finish.can_reach_finish.gboolean
#COMMENT: a #GNetworkMonitor
#NAME: srv
#PARENT: Gio.ResolverRecordType
#COMMENT: lookup DNS SRV records for a domain
#NAME: get_address_type
#PARENT: Gio.UnixSocketAddress.get_address_type
#COMMENT: a #GUnixSocketAddressType
#NAME: attr_value
#PARENT: Gio.FileInfo.set_attribute_string.none
#COMMENT: a UTF-8 string.
#NAME: keepalive
#PARENT: Gio.Socket.set_keepalive.none
#COMMENT: Value for the keepalive flag
#NAME: client
#PARENT: Gio.SocketClient.set_family.none
#COMMENT: a #GSocketClient.
#NAME: DriveStartFlags
#PARENT: Gio
#COMMENT: Flags used when starting a drive.
#NAME: set_object_path
#PARENT: Gio.DBusObjectSkeleton
#COMMENT: Sets the object path for @object.
#NAME: callback
#PARENT: Gio.MountIface.remount.remount.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: TlsCertificateRequestFlags
#PARENT: Gio
#COMMENT: Flags for g_tls_interaction_request_certificate(),
g_tls_interaction_request_certificate_async(), and
g_tls_interaction_invoke_request_certificate().
#NAME: send
#PARENT: Gio.Socket.send
#COMMENT: Number of bytes written (which may be less than @size), or -1
on error
#NAME: self
#PARENT: Gio.SubprocessLauncher.unsetenv.none
#COMMENT: a #GSubprocess
#NAME: get_message
#PARENT: Gio.DBusMethodInvocation.get_message
#COMMENT: #GDBusMessage. Do not free, it is owned by @invocation.
#NAME: certificate
#PARENT: Gio.TlsServerConnection.new.TlsServerConnection
#COMMENT: the default server certificate, or %NULL
#NAME: info
#PARENT: Gio.DBusInterfaceInfo.unref.none
#COMMENT: A #GDBusInterfaceInfo.
#NAME: action_map
#PARENT: Gio.ActionMap.add_action.none
#COMMENT: a #GActionMap
#NAME: ActionEntry
#PARENT: Gio
#COMMENT: This struct defines a single action.  It is for use with
g_action_map_add_action_entries().

The order of the items in the structure are intended to reflect
frequency of use.  It is permissible to use an incomplete initialiser
in order to leave some of the later values as %NULL.  All values
after @name are optional.  Additional optional fields may be added in
the future.

See g_action_map_add_action_entries() for an example.
#NAME: needs_terminal
#PARENT: Gio.AppInfoCreateFlags
#COMMENT: Application opens in a terminal window.
#NAME: lookup_records_finish
#PARENT: Gio.ResolverClass.lookup_records_finish.lookup_records_finish
#COMMENT: a non-empty #GList of
#GVariant, or %NULL on error. You must free each of the records and the list
when you are done with it. (You can use g_list_free_full() with
g_variant_unref() to do this.)
#NAME: SocketAddressEnumerator
#PARENT: Gio
#COMMENT: Enumerator type for objects that contain or generate
#GSocketAddress<!-- -->es.
#NAME: newv
#PARENT: Gio.Subprocess
#COMMENT: Create a new process with the given flags and argument list.

The argument list is expected to be %NULL-terminated.
#NAME: get_attribute_uint32
#PARENT: Gio.FileInfo.get_attribute_uint32
#COMMENT: an unsigned 32-bit integer from the attribute.
#NAME: iterate_item_links
#PARENT: Gio.MenuModel.iterate_item_links
#COMMENT: a new #GMenuLinkIter
#NAME: settings
#PARENT: Gio.Settings.bind_writable.none
#COMMENT: a #GSettings object
#NAME: scope
#PARENT: Gio.IOModuleScope.free.none
#COMMENT: a module loading scope
#NAME: unix_mount_guess_symbolic_icon
#PARENT: Gio.unix_mount_guess_symbolic_icon
#COMMENT: a #GIcon
#NAME: result
#PARENT: Gio.IOStreamClass.close_finish.close_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: attribute
#PARENT: Gio.MenuModel.get_item_attribute.gboolean
#COMMENT: the attribute to query
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.list_actions.list_actions.utf8
#COMMENT: a #GActionGroup
#NAME: accepted-cas
#PARENT: Gio.TlsClientConnection
#COMMENT: A list of the distinguished names of the Certificate Authorities
that the server will accept client certificates signed by. If the
server requests a client certificate during the handshake, then
this property will be set after the handshake completes.

Each item in the list is a #GByteArray which contains the complete
subject DN of the certificate authority.
#NAME: path
#PARENT: Gio.resources_lookup_data.GLib.Bytes
#COMMENT: A pathname inside the resource
#NAME: get_symbolic_icon
#PARENT: Gio.DriveIface.get_symbolic_icon.get_symbolic_icon
#COMMENT: symbolic #GIcon for the @drive.
   Free the returned object with g_object_unref().
#NAME: append
#PARENT: Gio.ListStore
#COMMENT: Appends @item to @store. @item must be of type #GListStore:item-type.

This function takes a ref on @item.

Use g_list_store_splice() to append multiple items at the same time
efficiently.
#NAME: new
#PARENT: Gio.TlsClientConnection.new
#COMMENT: the new
#GTlsClientConnection, or %NULL on error
#NAME: get_attribute
#PARENT: Gio.MenuItem.get_attribute
#COMMENT: %TRUE if the named attribute was found with the expected
    type
#NAME: info
#PARENT: Gio.FileInfo.get_display_name.utf8
#COMMENT: a #GFileInfo.
#NAME: callback
#PARENT: Gio.File.query_info_async.none
#COMMENT: a #GAsyncReadyCallback to call when the
    request is satisfied
#NAME: cancellable
#PARENT: Gio.FileIface.append_to.append_to.FileOutputStream
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: lookup_service
#PARENT: Gio.Resolver
#COMMENT: Synchronously performs a DNS SRV lookup for the given @service and
@protocol in the given @domain and returns an array of #GSrvTarget.
@domain may be an ASCII-only or UTF-8 hostname. Note also that the
@service and @protocol arguments do not include the leading underscore
that appears in the actual DNS entry.

On success, g_resolver_lookup_service() will return a non-empty #GList of
#GSrvTarget, sorted in order of preference. (That is, you should
attempt to connect to the first target first, then the second if
the first fails, etc.)

If the DNS resolution fails, @error (if non-%NULL) will be set to
a value from #GResolverError and %NULL will be returned.

If @cancellable is non-%NULL, it can be used to cancel the
operation, in which case @error (if non-%NULL) will be set to
%G_IO_ERROR_CANCELLED.

If you are planning to connect to the service, it is usually easier
to create a #GNetworkService and use its #GSocketConnectable
interface.
#NAME: can_poll
#PARENT: Gio.PollableInputStream.can_poll
#COMMENT: %TRUE if @stream is pollable, %FALSE if not.
#NAME: count
#PARENT: Gio.PollableInputStream.read_nonblocking.gssize
#COMMENT: the number of bytes you want to read
#NAME: fd
#PARENT: Gio.UnixInputStream.new.InputStream
#COMMENT: a UNIX file descriptor
#NAME: display_name
#PARENT: Gio.File.get_child_for_display_name.File
#COMMENT: string to a possible child
#NAME: cancellable
#PARENT: Gio.FileIface.set_attributes_async.set_attributes_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_attribute_status
#PARENT: Gio.FileInfo.get_attribute_status
#COMMENT: a #GFileAttributeStatus for the given @attribute, or
   %G_FILE_ATTRIBUTE_STATUS_UNSET if the key is invalid.
#NAME: name
#PARENT: Gio.PropertyAction
#COMMENT: The name of the action.  This is mostly meaningful for identifying
the action once it has been added to a #GActionMap.
#NAME: new
#PARENT: Gio.Credentials.new
#COMMENT: A #GCredentials. Free with g_object_unref().
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.set_error_va.none
#COMMENT: a #GSimpleAsyncResult.
#NAME: io_priority
#PARENT: Gio.File.query_filesystem_info_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: wait
#PARENT: Gio.Subprocess
#COMMENT: Synchronously wait for the subprocess to terminate.

After the process terminates you can query its exit status with
functions such as g_subprocess_get_if_exited() and
g_subprocess_get_exit_status().

This function does not fail in the case of the subprocess having
abnormal termination.  See g_subprocess_wait_check() for that.

Cancelling @cancellable doesn't kill the subprocess.  Call
g_subprocess_force_exit() if it is desirable.
#NAME: file
#PARENT: Gio.File.query_writable_namespaces.FileAttributeInfoList
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.FileIface.open_readwrite.open_readwrite.FileIOStream
#COMMENT: a #GCancellable
#NAME: iconnames
#PARENT: Gio.ThemedIcon.new_from_names.ThemedIcon
#COMMENT: an array of strings containing icon names.
#NAME: UnixConnection
#PARENT: Gio
#COMMENT: This is the subclass of #GSocketConnection that is created
for UNIX domain sockets.

It contains functions to do some of the UNIX socket specific
functionality like passing file descriptors.

Note that `<gio/gunixconnection.h>` belongs to the UNIX-specific
GIO interfaces, thus you have to use the `gio-unix-2.0.pc`
pkg-config file when using it.
#NAME: cancellable
#PARENT: Gio.Subprocess.wait_check.gboolean
#COMMENT: a #GCancellable
#NAME: monitor
#PARENT: Gio.FileMonitor.is_cancelled.gboolean
#COMMENT: a #GFileMonitor
#NAME: cancellable
#PARENT: Gio.File.query_filesystem_info.FileInfo
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: contents
#PARENT: Gio.File.load_partial_contents_finish.gboolean
#COMMENT: a location to place the contents of the file
#NAME: change-event
#PARENT: Gio.Settings
#COMMENT: The "change-event" signal is emitted once per change event that
affects this settings object.  You should connect to this signal
only if you are interested in viewing groups of changes before they
are split out into multiple emissions of the "changed" signal.
For most use cases it is more appropriate to use the "changed" signal.

In the event that the change event applies to one or more specified
keys, @keys will be an array of #GQuark of length @n_keys.  In the
event that the change event applies to the #GSettings object as a
whole (ie: potentially every key has been changed) then @keys will
be %NULL and @n_keys will be 0.

The default handler for this signal invokes the "changed" signal
for each affected key.  If any other connected handler returns
%TRUE then this default functionality will be suppressed.
#NAME: get_parameter_type
#PARENT: Gio.ActionInterface.get_parameter_type.get_parameter_type
#COMMENT: the parameter type
#NAME: ConverterInputStream
#PARENT: Gio
#COMMENT: Converter input stream implements #GInputStream and allows
conversion of data of various types during reading.

As of GLib 2.34, #GConverterInputStream implements
#GPollableInputStream.
#NAME: get_flags
#PARENT: Gio.DBusServer.get_flags
#COMMENT: A set of flags from the #GDBusServerFlags enumeration.
#NAME: resolver
#PARENT: Gio.SimpleProxyResolver.set_ignore_hosts.none
#COMMENT: a #GSimpleProxyResolver
#NAME: annotations
#PARENT: Gio.dbus_annotation_info_lookup.utf8
#COMMENT: A %NULL-terminated array of annotations or %NULL.
#NAME: native_type
#PARENT: Gio.Credentials.set_native.none
#COMMENT: The type of native credentials to set.
#NAME: has_attribute
#PARENT: Gio.FileInfo.has_attribute
#COMMENT: %TRUE if @Ginfo has an attribute named @attribute,
    %FALSE otherwise.
#NAME: io_priority
#PARENT: Gio.FileIface.delete_file_async.delete_file_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.set_exit_status.none
#COMMENT: a #GApplicationCommandLine
#NAME: file
#PARENT: Gio.File.make_symbolic_link.gboolean
#COMMENT: a #GFile with the name of the symlink to create
#NAME: cancellable
#PARENT: Gio.TlsInteractionClass.ask_password.ask_password.TlsInteractionResult
#COMMENT: an optional #GCancellable cancellation object
#NAME: vtable
#PARENT: Gio.DBusConnection.register_object.guint
#COMMENT: a #GDBusInterfaceVTable to call into or %NULL
#NAME: cancellable
#PARENT: Gio.UnixConnection.receive_fd.gint
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: path
#PARENT: Gio.DBusNodeInfo
#COMMENT: The path of the node or %NULL if omitted. Note that this may be a relative path. See the D-Bus specification for more details.
#NAME: id_is_valid
#PARENT: Gio.Application.id_is_valid
#COMMENT: %TRUE if @application_id is valid
#NAME: wait_async
#PARENT: Gio.Subprocess
#COMMENT: Wait for the subprocess to terminate.

This is the asynchronous version of g_subprocess_wait().
#NAME: get_info
#PARENT: Gio.Resource
#COMMENT: Looks for a file at the specified @path in the resource and
if found returns information about it.

@lookup_flags controls the behaviour of the lookup.
#NAME: non_relocatable
#PARENT: Gio.SettingsSchemaSource.list_schemas.none
#COMMENT: the
  list of non-relocatable schemas
#NAME: data
#PARENT: Gio.SocketControlMessage.deserialize.SocketControlMessage
#COMMENT: pointer to the message data
#NAME: cancellable
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by.TlsCertificate
#COMMENT: a #GCancellable, or %NULL
#NAME: newv
#PARENT: Gio.Initable
#COMMENT: Helper function for constructing #GInitable object. This is
similar to g_object_newv() but also initializes the object
and returns %NULL, setting an error on failure.
#NAME: timeout_msec
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: the timeout in milliseconds, -1 to use the default
    timeout or %G_MAXINT for no timeout
#NAME: is_active
#PARENT: Gio.VfsClass.is_active.is_active
#COMMENT: %TRUE if construction of the @vfs was successful
    and it is now active.
#NAME: DBusMessageFilterFunction
#PARENT: Gio
#COMMENT: Signature for function used in g_dbus_connection_add_filter().

A filter function is passed a #GDBusMessage and expected to return
a #GDBusMessage too. Passive filter functions that don't modify the
message can simply return the @message object:
|[
static GDBusMessage *
passive_filter (GDBusConnection *connection
                GDBusMessage    *message,
                gboolean         incoming,
                gpointer         user_data)
{
  /<!-- -->* inspect @message *<!-- -->/
  return message;
}
]|
Filter functions that wants to drop a message can simply return %NULL:
|[
static GDBusMessage *
drop_filter (GDBusConnection *connection
             GDBusMessage    *message,
             gboolean         incoming,
             gpointer         user_data)
{
  if (should_drop_message)
    {
      g_object_unref (message);
      message = NULL;
    }
  return message;
}
]|
Finally, a filter function may modify a message by copying it:
|[
static GDBusMessage *
modifying_filter (GDBusConnection *connection
                  GDBusMessage    *message,
                  gboolean         incoming,
                  gpointer         user_data)
{
  GDBusMessage *copy;
  GError *error;

  error = NULL;
  copy = g_dbus_message_copy (message, &error);
  /<!-- -->* handle @error being is set *<!-- -->/
  g_object_unref (message);

  /<!-- -->* modify @copy *<!-- -->/

  return copy;
}
]|
If the returned #GDBusMessage is different from @message and cannot
be sent on @connection (it could use features, such as file
descriptors, not compatible with @connection), then a warning is
logged to <emphasis>standard error</emphasis>. Applications can
check this ahead of time using g_dbus_message_to_blob() passing a
#GDBusCapabilityFlags value obtained from @connection.
#NAME: can_poll
#PARENT: Gio.PollableOutputStream.can_poll
#COMMENT: %TRUE if @stream is pollable, %FALSE if not.
#NAME: dbus_gvalue_to_gvariant
#PARENT: Gio
#COMMENT: Converts a #GValue to a #GVariant of the type indicated by the @type
parameter.

The conversion is using the following rules:

- #G_TYPE_STRING: 's', 'o', 'g' or 'ay'
- #G_TYPE_STRV: 'as', 'ao' or 'aay'
- #G_TYPE_BOOLEAN: 'b'
- #G_TYPE_UCHAR: 'y'
- #G_TYPE_INT: 'i', 'n'
- #G_TYPE_UINT: 'u', 'q'
- #G_TYPE_INT64 'x'
- #G_TYPE_UINT64: 't'
- #G_TYPE_DOUBLE: 'd'
- #G_TYPE_VARIANT: Any #GVariantType

This can fail if e.g. @gvalue is of type #G_TYPE_STRING and @type
is ['i'][G-VARIANT-TYPE-INT32:CAPS]. It will also fail for any #GType
(including e.g. #G_TYPE_OBJECT and #G_TYPE_BOXED derived-types) not
in the table above.

Note that if @gvalue is of type #G_TYPE_VARIANT and its value is
%NULL, the empty #GVariant instance (never %NULL) for @type is
returned (e.g. 0 for scalar types, the empty string for string types,
'/' for object path types, the empty array for any array type and so on).

See the g_dbus_gvariant_to_gvalue() function for how to convert a
#GVariant to a #GValue.
#NAME: result
#PARENT: Gio.Task.is_valid.gboolean
#COMMENT: A #GAsyncResult
#NAME: flags
#PARENT: Gio.Mount.unmount.none
#COMMENT: flags affecting the operation
#NAME: result
#PARENT: Gio.IOStream.splice_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: peek
#PARENT: Gio.BufferedInputStream.peek
#COMMENT: a #gsize of the number of bytes peeked, or -1 on error.
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.activate_action.activate_action.none
#COMMENT: the name of the action to activate
#NAME: result
#PARENT: Gio.OutputStream.flush_finish.gboolean
#COMMENT: a GAsyncResult.
#NAME: get_icon
#PARENT: Gio.AppInfo.get_icon
#COMMENT: the default #GIcon for @appinfo or %NULL
if there is no default icon.
#NAME: reset
#PARENT: Gio.Converter
#COMMENT: Resets all internal state in the converter, making it behave
as if it was just created. If the converter has any internal
state that would produce output then that output is lost.
#NAME: buffer
#PARENT: Gio.Socket.send_with_blocking.gssize
#COMMENT: the buffer
    containing the data to send.
#NAME: shadow
#PARENT: Gio.Mount
#COMMENT: Increments the shadow count on @mount. Usually used by
#GVolumeMonitor implementations when creating a shadow mount for
@mount, see g_mount_is_shadowed() for more information. The caller
will need to emit the #GMount::changed signal on @mount manually.
#NAME: cancellable
#PARENT: Gio.FileIface.enumerate_children.enumerate_children.FileEnumerator
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: matcher
#PARENT: Gio.FileAttributeMatcher.unref.none
#COMMENT: a #GFileAttributeMatcher.
#NAME: binding
#PARENT: Gio.SocketListenerEvent
#COMMENT: The listener is about to bind a socket.
#NAME: fd
#PARENT: Gio.UnixInputStream
#COMMENT: The file descriptor that the stream reads from.
#NAME: ref
#PARENT: Gio.DBusSignalInfo
#COMMENT: If @info is statically allocated does nothing. Otherwise increases
the reference count.
#NAME: file
#PARENT: Gio.FileIface.read_fn.read_fn.FileInputStream
#COMMENT: #GFile to read
#NAME: file
#PARENT: Gio.File.eject_mountable_with_operation.none
#COMMENT: input #GFile
#NAME: files
#PARENT: Gio.AppLaunchContext.get_display.utf8
#COMMENT: a #GList of #GFile objects
#NAME: changed
#PARENT: Gio.Mount
#COMMENT: Emitted when the mount has been changed.
#NAME: read
#PARENT: Gio.File
#COMMENT: Opens a file for reading. The result is a #GFileInputStream that
can be used to read the contents of the file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

If the file does not exist, the %G_IO_ERROR_NOT_FOUND error will be
returned. If the file is a directory, the %G_IO_ERROR_IS_DIRECTORY
error will be returned. Other errors are possible too, and depend
on what kind of filesystem the file is on.
#NAME: icon
#PARENT: Gio.FileInfo.set_icon.none
#COMMENT: a #GIcon.
#NAME: new_method_reply
#PARENT: Gio.DBusMessage.new_method_reply
#COMMENT: #GDBusMessage. Free with g_object_unref().
#NAME: ActionGroupInterface
#PARENT: Gio
#COMMENT: The virtual function table for #GActionGroup.
#NAME: drive
#PARENT: Gio.Drive.get_identifier.utf8
#COMMENT: a #GDrive
#NAME: length
#PARENT: Gio.File.load_contents_finish.gboolean
#COMMENT: a location to place the length of the contents of the file,
    or %NULL if the length is not needed
#NAME: set_rate_limit
#PARENT: Gio.FileMonitor
#COMMENT: Sets the rate limit to which the @monitor will report
consecutive change events to the same file.
#NAME: credentials
#PARENT: Gio.Credentials.to_string.utf8
#COMMENT: A #GCredentials object.
#NAME: new_with_origin
#PARENT: Gio.Emblem
#COMMENT: Creates a new emblem for @icon.
#NAME: receive_message
#PARENT: Gio.Socket
#COMMENT: Receive data from a socket.  This is the most complicated and
fully-featured version of this call. For easier use, see
g_socket_receive() and g_socket_receive_from().

If @address is non-%NULL then @address will be set equal to the
source address of the received packet.
@address is owned by the caller.

@vector must point to an array of #GInputVector structs and
@num_vectors must be the length of this array.  These structs
describe the buffers that received data will be scattered into.
If @num_vectors is -1, then @vectors is assumed to be terminated
by a #GInputVector with a %NULL buffer pointer.

As a special case, if @num_vectors is 0 (in which case, @vectors
may of course be %NULL), then a single byte is received and
discarded. This is to facilitate the common practice of sending a
single '\0' byte for the purposes of transferring ancillary data.

@messages, if non-%NULL, will be set to point to a newly-allocated
array of #GSocketControlMessage instances or %NULL if no such
messages was received. These correspond to the control messages
received from the kernel, one #GSocketControlMessage per message
from the kernel. This array is %NULL-terminated and must be freed
by the caller using g_free() after calling g_object_unref() on each
element. If @messages is %NULL, any control messages received will
be discarded.

@num_messages, if non-%NULL, will be set to the number of control
messages received.

If both @messages and @num_messages are non-%NULL, then
@num_messages gives the number of #GSocketControlMessage instances
in @messages (ie: not including the %NULL terminator).

@flags is an in/out parameter. The commonly available arguments
for this are available in the #GSocketMsgFlags enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too
(and g_socket_receive_message() may pass system-specific flags out).

As with g_socket_receive(), data may be discarded if @socket is
%G_SOCKET_TYPE_DATAGRAM or %G_SOCKET_TYPE_SEQPACKET and you do not
provide enough buffer space to read a complete message. You can pass
%G_SOCKET_MSG_PEEK in @flags to peek at the current message without
removing it from the receive queue, but there is no portable way to find
out the length of the message other than by reading it into a
sufficiently-large buffer.

If the socket is in blocking mode the call will block until there
is some data to receive, the connection is closed, or there is an
error. If there is no data available and the socket is in
non-blocking mode, a %G_IO_ERROR_WOULD_BLOCK error will be
returned. To be notified when data is available, wait for the
%G_IO_IN condition.

On error -1 is returned and @error is set accordingly.
#NAME: propagate_int
#PARENT: Gio.Task
#COMMENT: Gets the result of @task as an integer (#gssize).

If the task resulted in an error, or was cancelled, then this will
instead return -1 and set @error.

Since this method transfers ownership of the return value (or
error) to the caller, you may only call it once.
#NAME: out_name
#PARENT: Gio.MenuAttributeIterClass.get_next.get_next.gboolean
#COMMENT: the type of the attribute
#NAME: delete_file_finish
#PARENT: Gio.File
#COMMENT: Finishes deleting a file started with g_file_delete_async().
#NAME: parameters
#PARENT: Gio.DBusProxy.call_with_unix_fd_list.none
#COMMENT: A #GVariant tuple with parameters for the signal or %NULL if not passing parameters.
#NAME: user_data
#PARENT: Gio.File.replace_readwrite_async.none
#COMMENT: the data to pass to callback function
#NAME: proxy
#PARENT: Gio.Proxy.connect_finish.IOStream
#COMMENT: a #GProxy
#NAME: get_source_object
#PARENT: Gio.Task.get_source_object
#COMMENT: @task's source object, or %NULL
#NAME: get_guid
#PARENT: Gio.DBusConnection.get_guid
#COMMENT: The GUID. Do not free this string, it is owned by
    @connection.
#NAME: hostname
#PARENT: Gio.ResolverClass.lookup_by_name.lookup_by_name.InetAddress
#COMMENT: the hostname to look up
#NAME: identity
#PARENT: Gio.TlsCertificate.verify.TlsCertificateFlags
#COMMENT: the expected peer identity
#NAME: callback
#PARENT: Gio.TlsInteraction.ask_password_async.none
#COMMENT: will be called when the interaction completes
#NAME: get_default_location
#PARENT: Gio.MountIface.get_default_location.get_default_location
#COMMENT: a #GFile.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: stdout_pipe
#PARENT: Gio.SubprocessFlags
#COMMENT: create a pipe for the stdout of the
  spawned process that can be accessed with
  g_subprocess_get_stdout_pipe().
#NAME: get_name
#PARENT: Gio.FileInfo.get_name
#COMMENT: a string containing the file name.
#NAME: attr_value
#PARENT: Gio.FileInfo.set_attribute_boolean.none
#COMMENT: a boolean value.
#NAME: self
#PARENT: Gio.TlsDatabase.verify_chain_finish.TlsCertificateFlags
#COMMENT: a #GTlsDatabase
#NAME: read_line_utf8
#PARENT: Gio.DataInputStream
#COMMENT: Reads a UTF-8 encoded line from the data input stream.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: append_to
#PARENT: Gio.File.append_to
#COMMENT: a #GFileOutputStream, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: get_item_attribute_value
#PARENT: Gio.MenuModelClass.get_item_attribute_value.get_item_attribute_value
#COMMENT: the value of the attribute
#NAME: eject_mountable_finish
#PARENT: Gio.FileIface.eject_mountable_finish.eject_mountable_finish
#COMMENT: %TRUE if the @file was ejected successfully.
    %FALSE otherwise.
#NAME: poll_for_media
#PARENT: Gio.Drive
#COMMENT: Asynchronously polls @drive to see if media has been inserted or removed.

When the operation is finished, @callback will be called.
You can then call g_drive_poll_for_media_finish() to obtain the
result of the operation.
#NAME: message
#PARENT: Gio.DBusMessage.lock.none
#COMMENT: A #GDBusMessage.
#NAME: condition
#PARENT: Gio.Socket.condition_wait.gboolean
#COMMENT: a #GIOCondition mask to wait for
#NAME: flags
#PARENT: Gio.DBusConnection.new_for_address.none
#COMMENT: flags describing how to make the connection
#NAME: type
#PARENT: Gio.UnixSocketAddress.new_with_type.SocketAddress
#COMMENT: a #GUnixSocketAddressType
#NAME: file
#PARENT: Gio.FileIface.make_directory_finish.make_directory_finish.gboolean
#COMMENT: input #GFile
#NAME: address
#PARENT: Gio.SocketAddress.to_native.gboolean
#COMMENT: a #GSocketAddress
#NAME: new_for_bus
#PARENT: Gio.DBusProxy
#COMMENT: Like g_dbus_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

#GDBusProxy is used in this [example][gdbus-wellknown-proxy].
#NAME: get_user_data
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Gets the @user_data #gpointer passed to g_dbus_connection_register_object().
#NAME: position
#PARENT: Gio.Menu.remove.none
#COMMENT: the position of the item to remove
#NAME: content_type_get_mime_type
#PARENT: Gio
#COMMENT: Gets the mime type for the content type, if one is registered.
#NAME: job
#PARENT: Gio.IOSchedulerJob.send_to_mainloop_async.none
#COMMENT: a #GIOSchedulerJob
#NAME: message
#PARENT: Gio.SocketControlMessage.get_size.gsize
#COMMENT: a #GSocketControlMessage
#NAME: attribute
#PARENT: Gio.MenuItem.set_attribute_value.none
#COMMENT: the attribute to set
#NAME: callback
#PARENT: Gio.Volume.eject.none
#COMMENT: a #GAsyncReadyCallback, or %NULL
#NAME: name
#PARENT: Gio.DBusInterfaceInfo.lookup_property.DBusPropertyInfo
#COMMENT: A D-Bus property name (typically in CamelCase).
#NAME: get_flags
#PARENT: Gio.DBusInterfaceSkeleton.get_flags
#COMMENT: One or more flags from the #GDBusInterfaceSkeletonFlags enumeration.
#NAME: flags
#PARENT: Gio.TlsPassword.new.TlsPassword
#COMMENT: the password flags
#NAME: object
#PARENT: Gio.DBusInterfaceIface.set_object.set_object.none
#COMMENT: A #GDBusObject or %NULL.
#NAME: new
#PARENT: Gio.Initable
#COMMENT: Helper function for constructing #GInitable object. This is
similar to g_object_new() but also initializes the object
and returns %NULL, setting an error on failure.
#NAME: network-changed
#PARENT: Gio.NetworkMonitor
#COMMENT: Emitted when the network configuration changes. If @available is
%TRUE, then some hosts may be reachable that were not reachable
before, while others that were reachable before may no longer be
reachable. If @available is %FALSE, then no remote hosts are
reachable.
#NAME: get_info
#PARENT: Gio.DBusInterface
#COMMENT: Gets D-Bus introspection information for the D-Bus interface
implemented by @interface_.
#NAME: cancellable
#PARENT: Gio.OutputStreamClass.write_fn.write_fn.gssize
#COMMENT: optional cancellable object
#NAME: communicate
#PARENT: Gio.Subprocess
#COMMENT: Communicate with the subprocess until it terminates, and all input
and output has been completed.

If @stdin_buf is given, the subprocess must have been created with
%G_SUBPROCESS_FLAGS_STDIN_PIPE.  The given data is fed to the
stdin of the subprocess and the pipe is closed (ie: EOF).

At the same time (as not to cause blocking when dealing with large
amounts of data), if %G_SUBPROCESS_FLAGS_STDOUT_PIPE or
%G_SUBPROCESS_FLAGS_STDERR_PIPE were used, reads from those
streams.  The data that was read is returned in @stdout and/or
the @stderr.

If the subprocess was created with %G_SUBPROCESS_FLAGS_STDOUT_PIPE,
@stdout_buf will contain the data read from stdout.  Otherwise, for
subprocesses not created with %G_SUBPROCESS_FLAGS_STDOUT_PIPE,
@stdout_buf will be set to %NULL.  Similar provisions apply to
@stderr_buf and %G_SUBPROCESS_FLAGS_STDERR_PIPE.

As usual, any output variable may be given as %NULL to ignore it.

If you desire the stdout and stderr data to be interleaved, create
the subprocess with %G_SUBPROCESS_FLAGS_STDOUT_PIPE and
%G_SUBPROCESS_FLAGS_STDERR_MERGE.  The merged result will be returned
in @stdout_buf and @stderr_buf will be set to %NULL.

In case of any error (including cancellation), %FALSE will be
returned with @error set.  Some or all of the stdin data may have
been written.  Any stdout or stderr data that has been read will be
discarded. None of the out variables (aside from @error) will have
been set to anything in particular and should not be inspected.

In the case that %TRUE is returned, the subprocess has exited and the
exit status inspection APIs (eg: g_subprocess_get_if_exited(),
g_subprocess_get_exit_status()) may be used.

You should not attempt to use any of the subprocess pipes after
starting this function, since they may be left in strange states,
even if the operation was cancelled.  You should especially not
attempt to interact with the pipes while the operation is in progress
(either from another thread or if using the asynchronous version).
#NAME: get_object
#PARENT: Gio.DBusObjectManager
#COMMENT: Gets the #GDBusObjectProxy at @object_path, if any.
#NAME: cancellable
#PARENT: Gio.Socket.connect.gboolean
#COMMENT: a %GCancellable or %NULL
#NAME: item
#PARENT: Gio.ListStore.insert.none
#COMMENT: the new item
#NAME: DBusInterfaceSkeleton
#PARENT: Gio
#COMMENT: Abstract base class for D-Bus interfaces on the service side.
#NAME: value
#PARENT: Gio.ActionGroupInterface.change_action_state.change_action_state.none
#COMMENT: the new state
#NAME: callback
#PARENT: Gio.Permission.release_async.none
#COMMENT: the #GAsyncReadyCallback to call when done
#NAME: enumerate_identifiers
#PARENT: Gio.Volume
#COMMENT: Gets the kinds of [identifiers][volume-identifier] that @volume has.
Use g_volume_get_identifier() to obtain the identifiers themselves.
#NAME: cancellable
#PARENT: Gio.IOStream.close_async.none
#COMMENT: optional cancellable object
#NAME: bus_watch_name_with_closures
#PARENT: Gio
#COMMENT: Version of g_bus_watch_name() using closures instead of callbacks for
easier binding in other languages.
#NAME: none
#PARENT: Gio.DBusServerFlags
#COMMENT: No flags set.
#NAME: user_data
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by_async.none
#COMMENT: the data to pass to the callback function
#NAME: guess_symbolic_icon
#PARENT: Gio.UnixMountPoint
#COMMENT: Guesses the symbolic icon of a Unix mount point.
#NAME: mount-pre-unmount
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when a mount is about to be removed.
#NAME: set_icon
#PARENT: Gio.FileInfo
#COMMENT: Sets the icon for a given #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_ICON.
#NAME: cancellable
#PARENT: Gio.PollableOutputStream.create_source.GLib.Source
#COMMENT: a #GCancellable, or %NULL
#NAME: mount_operation
#PARENT: Gio.FileIface.eject_mountable_with_operation.eject_mountable_with_operation.none
#COMMENT: a #GMountOperation,
    or %NULL to avoid user interaction
#NAME: user_data
#PARENT: Gio.DataInputStream.read_line_async.none
#COMMENT: the data to pass to callback function.
#NAME: get_default
#PARENT: Gio.TlsBackend.get_default
#COMMENT: a #GTlsBackend
#NAME: application
#PARENT: Gio.Application.register.gboolean
#COMMENT: a #GApplication
#NAME: data
#PARENT: Gio.MemoryInputStream.add_data.none
#COMMENT: input data
#NAME: target_format
#PARENT: Gio.Notification.set_default_action_and_target.none
#COMMENT: a #GVariant format string, or %NULL
#NAME: dbus_error_new_for_dbus_error
#PARENT: Gio
#COMMENT: Creates a #GError based on the contents of @dbus_error_name and
@dbus_error_message.

Errors registered with g_dbus_error_register_error() will be looked
up using @dbus_error_name and if a match is found, the error domain
and code is used. Applications can use g_dbus_error_get_remote_error()
to recover @dbus_error_name.

If a match against a registered error is not found and the D-Bus
error name is in a form as returned by g_dbus_error_encode_gerror()
the error domain and code encoded in the name is used to
create the #GError. Also, @dbus_error_name is added to the error message
such that it can be recovered with g_dbus_error_get_remote_error().

Otherwise, a #GError with the error code %G_IO_ERROR_DBUS_ERROR
in the #G_IO_ERROR error domain is returned. Also, @dbus_error_name is
added to the error message such that it can be recovered with
g_dbus_error_get_remote_error().

In all three cases, @dbus_error_name can always be recovered from the
returned #GError using the g_dbus_error_get_remote_error() function
(unless g_dbus_error_strip_remote_error() hasn't been used on the returned error).

This function is typically only used in object mappings to prepare
#GError instances for applications. Regular applications should not use
it.
#NAME: bus_name
#PARENT: Gio.DBusActionGroup.get.DBusActionGroup
#COMMENT: the bus name which exports the action group
#NAME: issuer_raw_dn
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by_async.none
#COMMENT: a #GByteArray which holds the DER encoded issuer DN.
#NAME: state
#PARENT: Gio.ActionGroup.query_action.gboolean
#COMMENT: the current state, or %NULL if stateless
#NAME: action_name
#PARENT: Gio.ActionGroup.get_action_parameter_type.GLib.VariantType
#COMMENT: the name of the action to query
#NAME: flags
#PARENT: Gio.SubprocessLauncher.set_flags.none
#COMMENT: #GSubprocessFlags
#NAME: file
#PARENT: Gio.File.replace_readwrite_async.none
#COMMENT: input #GFile
#NAME: address
#PARENT: Gio.DBusServer.new_sync.DBusServer
#COMMENT: A D-Bus address.
#NAME: state
#PARENT: Gio.ActionGroup.action_state_changed.none
#COMMENT: the new state of the named action
#NAME: has_uri_scheme
#PARENT: Gio.File
#COMMENT: Checks to see if a #GFile has a given URI scheme.

This call does no blocking I/O.
#NAME: cancellable
#PARENT: Gio.ResolverClass.lookup_by_name.lookup_by_name.InetAddress
#COMMENT: a #GCancellable, or %NULL
#NAME: get_filename
#PARENT: Gio.DesktopAppInfo
#COMMENT: When @info was created from a known filename, return it.  In some
situations such as the #GDesktopAppInfo returned from
g_desktop_app_info_new_from_keyfile(), this function will return %NULL.
#NAME: MenuAttributeIter
#PARENT: Gio
#COMMENT: #GMenuAttributeIter is an opaque structure type.  You must access it
using the functions below.
#NAME: get_flowinfo
#PARENT: Gio.InetSocketAddress
#COMMENT: Gets the `sin6_flowinfo` field from @address,
which must be an IPv6 address.
#NAME: variable
#PARENT: Gio.AppLaunchContext.setenv.none
#COMMENT: the environment variable to set
#NAME: cancellable
#PARENT: Gio.FileIface.copy.copy.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: menu
#PARENT: Gio.Menu.remove_all.none
#COMMENT: a #GMenu
#NAME: io_priority
#PARENT: Gio.FileIface.find_enclosing_mount_async.find_enclosing_mount_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: error
#PARENT: Gio.SimpleAsyncResult.new_take_error.SimpleAsyncResult
#COMMENT: a #GError
#NAME: flags
#PARENT: Gio.Socket.receive_message.gssize
#COMMENT: a pointer to an int containing #GSocketMsgFlags flags
#NAME: new_for_uri
#PARENT: Gio.File.new_for_uri
#COMMENT: a new #GFile for the given @uri.
    Free the returned object with g_object_unref().
#NAME: order
#PARENT: Gio.DataOutputStream.set_byte_order.none
#COMMENT: a %GDataStreamByteOrder.
#NAME: vfs
#PARENT: Gio.Vfs.is_active.gboolean
#COMMENT: a #GVfs.
#NAME: get_default_location
#PARENT: Gio.Mount
#COMMENT: Gets the default location of @mount. The default location of the given
@mount is a path that reflects the main entry point for the user (e.g.
the home directory, or the root of the volume).
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_data.gboolean
#COMMENT: a #GFileInfo
#NAME: flags
#PARENT: Gio.FileIface.mount_enclosing_volume.mount_enclosing_volume.none
#COMMENT: flags affecting the operation
#NAME: validation-flags
#PARENT: Gio.TlsClientConnection
#COMMENT: What steps to perform when validating a certificate received from
a server. Server certificates that fail to validate in all of the
ways indicated here will be rejected unless the application
overrides the default via #GTlsConnection::accept-certificate.
#NAME: get_connected_drives
#PARENT: Gio.VolumeMonitor
#COMMENT: Gets a list of drives connected to the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().
#NAME: proxy_enumerate
#PARENT: Gio.SocketConnectableIface.proxy_enumerate.proxy_enumerate
#COMMENT: a new #GSocketAddressEnumerator.
#NAME: unix_mount_is_readonly
#PARENT: Gio
#COMMENT: Checks if a unix mount is mounted read only.
#NAME: num_dirs
#PARENT: Gio.File.measure_disk_usage_finish.gboolean
#COMMENT: the number of directories encountered
#NAME: connection
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: a #GDBusConnection
#NAME: get_parameter_type
#PARENT: Gio.Action.get_parameter_type
#COMMENT: the parameter type
#NAME: unknown_method
#PARENT: Gio.DBusError
#COMMENT: Method name you invoked isn't known by the object you invoked it on.
#NAME: query_info_finish
#PARENT: Gio.File.query_info_finish
#COMMENT: #GFileInfo for given @file
    or %NULL on error. Free the returned object with
    g_object_unref().
#NAME: put_uint64
#PARENT: Gio.DataOutputStream.put_uint64
#COMMENT: %TRUE if @data was successfully added to the @stream.
#NAME: get_volume
#PARENT: Gio.Mount.get_volume
#COMMENT: a #GVolume or %NULL if @mount is not associated with a volume.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: iter
#PARENT: Gio.MenuAttributeIter.next.gboolean
#COMMENT: a #GMenuAttributeIter
#NAME: cancellable
#PARENT: Gio.Proxy.connect.IOStream
#COMMENT: a #GCancellable
#NAME: volume_monitor
#PARENT: Gio.VolumeMonitorClass.get_volumes.get_volumes.Volume
#COMMENT: a #GVolumeMonitor.
#NAME: dbus_is_interface_name
#PARENT: Gio.dbus_is_interface_name
#COMMENT: %TRUE if valid, %FALSE otherwise.
#NAME: iter
#PARENT: Gio.MenuLinkIter.get_next.gboolean
#COMMENT: a #GMenuLinkIter
#NAME: local_command_line
#PARENT: Gio.ApplicationClass.local_command_line.local_command_line
#COMMENT: %TRUE if the commandline has been completely handled
#NAME: new_for_commandline_arg
#PARENT: Gio.File.new_for_commandline_arg
#COMMENT: a new #GFile.
   Free the returned object with g_object_unref().
#NAME: key
#PARENT: Gio.Settings.set_value.gboolean
#COMMENT: the name of the key to set
#NAME: FILE_ATTRIBUTE_STANDARD_IS_BACKUP
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for checking if a file is a backup file.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: read_until_async
#PARENT: Gio.DataInputStream
#COMMENT: The asynchronous version of g_data_input_stream_read_until().
It is an error to have two outstanding calls to this function.

Note that, in contrast to g_data_input_stream_read_until(),
this function does not consume the stop character that it finds.  You
must read it for yourself.

When the operation is finished, @callback will be called. You
can then call g_data_input_stream_read_until_finish() to get
the result of the operation.

Don't use this function in new code.  Its functionality is
inconsistent with g_data_input_stream_read_until().  Both functions
will be marked as deprecated in a future release.  Use
g_data_input_stream_read_upto_async() instead.
#NAME: delete
#PARENT: Gio.AppInfo
#COMMENT: Tries to delete a #GAppInfo.

On some platforms, there may be a difference between user-defined
#GAppInfos which can be deleted, and system-wide ones which cannot.
See g_app_info_can_delete().
#NAME: entries
#PARENT: Gio.dbus_error_register_error_domain.none
#COMMENT: A pointer to @num_entries #GDBusErrorEntry struct items.
#NAME: unmount_mountable
#PARENT: Gio.File
#COMMENT: Unmounts a file of type G_FILE_TYPE_MOUNTABLE.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called.
You can then call g_file_unmount_mountable_finish() to get
the result of the operation.
#NAME: new_method_call
#PARENT: Gio.DBusMessage
#COMMENT: Creates a new #GDBusMessage for a method call.
#NAME: exit_status
#PARENT: Gio.ApplicationCommandLine.set_exit_status.none
#COMMENT: the exit status
#NAME: load_finish
#PARENT: Gio.LoadableIcon.load_finish
#COMMENT: a #GInputStream to read the icon from.
#NAME: unknown
#PARENT: Gio.EmblemOrigin
#COMMENT: Emblem of unknown origin
#NAME: callback
#PARENT: Gio.FileIface.make_directory_async.make_directory_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: run
#PARENT: Gio.Application.run
#COMMENT: the exit status
#NAME: pollfd
#PARENT: Gio.Cancellable.make_pollfd.gboolean
#COMMENT: a pointer to a #GPollFD
#NAME: cancellable
#PARENT: Gio.ProxyResolverInterface.lookup_async.lookup_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: lookup
#PARENT: Gio.SettingsSchemaSource
#COMMENT: Looks up a schema with the identifier @schema_id in @source.

This function is not required for normal uses of #GSettings but it
may be useful to authors of plugin management systems or to those who
want to introspect the content of schemas.

If the schema isn't found directly in @source and @recursive is %TRUE
then the parent sources will also be checked.

If the schema isn't found, %NULL is returned.
#NAME: address
#PARENT: Gio.InetSocketAddress.get_address.InetAddress
#COMMENT: a #GInetSocketAddress
#NAME: connection
#PARENT: Gio.DBusSubtreeEnumerateFunc.utf8
#COMMENT: A #GDBusConnection.
#NAME: free_addresses
#PARENT: Gio.Resolver
#COMMENT: Frees @addresses (which should be the return value from
g_resolver_lookup_by_name() or g_resolver_lookup_by_name_finish()).
(This is a convenience method; you can also simply free the results
by hand.)
#NAME: use_ssl3
#PARENT: Gio.TlsClientConnection.set_use_ssl3.none
#COMMENT: whether to use SSL 3.0
#NAME: has_pending
#PARENT: Gio.IOStream.has_pending
#COMMENT: %TRUE if @stream has pending actions.
#NAME: mount
#PARENT: Gio.MountIface.guess_content_type_finish.guess_content_type_finish.utf8
#COMMENT: a #GMount
#NAME: vectors
#PARENT: Gio.Socket.receive_message.gssize
#COMMENT: an array of #GInputVector structs
#NAME: flags
#PARENT: Gio.SubprocessLauncher.new.SubprocessLauncher
#COMMENT: #GSubprocessFlags
#NAME: callback
#PARENT: Gio.LoadableIconIface.load_async.load_async.none
#COMMENT: a #GAsyncReadyCallback to call when the
           request is satisfied
#NAME: user_data
#PARENT: Gio.LoadableIcon.load_async.none
#COMMENT: the data to pass to callback function
#NAME: cancellable
#PARENT: Gio.VolumeIface.eject_with_operation.eject_with_operation.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: init
#PARENT: Gio.StaticResource
#COMMENT: Initializes a GResource from static data using a
GStaticResource.

This is normally used by code generated by
[glib-compile-resources][glib-compile-resources]
and is not typically used by other code.
#NAME: res
#PARENT: Gio.AsyncInitableIface.init_finish.init_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: handshake_finish
#PARENT: Gio.TlsConnection.handshake_finish
#COMMENT: %TRUE on success, %FALSE on failure, in which
case @error will be set.
#NAME: get_reply_serial
#PARENT: Gio.DBusMessage
#COMMENT: Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL header field.
#NAME: result
#PARENT: Gio.FileEnumerator.close_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: file
#PARENT: Gio.File.open_readwrite_async.none
#COMMENT: input #GFile
#NAME: address
#PARENT: Gio.InetAddress.get_is_loopback.gboolean
#COMMENT: a #GInetAddress
#NAME: get_inactivity_timeout
#PARENT: Gio.Application.get_inactivity_timeout
#COMMENT: the timeout, in milliseconds
#NAME: cancellable
#PARENT: Gio.FileInputStream.query_info.FileInfo
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: interaction
#PARENT: Gio.TlsInteractionClass.ask_password_async.ask_password_async.none
#COMMENT: a #GTlsInteraction object
#NAME: bus_own_name_on_connection_with_closures
#PARENT: Gio
#COMMENT: Version of g_bus_own_name_on_connection() using closures instead of
callbacks for easier binding in other languages.
#NAME: big_endian
#PARENT: Gio.DataStreamByteOrder
#COMMENT: Selects Big Endian byte order.
#NAME: info
#PARENT: Gio.FileInfo.set_attribute_int32.none
#COMMENT: a #GFileInfo.
#NAME: DBusObjectSkeleton
#PARENT: Gio
#COMMENT: A #GDBusObjectSkeleton instance is essentially a group of D-Bus
interfaces. The set of exported interfaces on the object may be
dynamic and change at runtime.

This type is intended to be used with #GDBusObjectManager.
#NAME: query_info
#PARENT: Gio.FileOutputStream.query_info
#COMMENT: a #GFileInfo for the @stream, or %NULL on error.
#NAME: cancellable
#PARENT: Gio.File.monitor_dir.FileMonitor
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: infos
#PARENT: Gio.FileAttributeInfoList
#COMMENT: an array of #GFileAttributeInfos.
#NAME: stream
#PARENT: Gio.DataInputStream.read_int16.gint16
#COMMENT: a given #GDataInputStream.
#NAME: message
#PARENT: Gio.DBusMessage.get_num_unix_fds.guint32
#COMMENT: A #GDBusMessage.
#NAME: measure_disk_usage_finish
#PARENT: Gio.File
#COMMENT: Collects the results from an earlier call to
g_file_measure_disk_usage_async().  See g_file_measure_disk_usage() for
more information.
#NAME: stdin_buf
#PARENT: Gio.Subprocess.communicate_async.none
#COMMENT: Input data, or %NULL
#NAME: messages
#PARENT: Gio.Socket.send_messages.gint
#COMMENT: an array of #GOutputMessage structs
#NAME: volume
#PARENT: Gio.Volume.get_mount.Mount
#COMMENT: a #GVolume
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_int64.gint64
#COMMENT: a #GFileInfo.
#NAME: fd_list
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: A #GUnixFDList or %NULL.
#NAME: stream
#PARENT: Gio.DataInputStream.set_byte_order.none
#COMMENT: a given #GDataInputStream.
#NAME: safely
#PARENT: Gio.TlsRehandshakeMode
#COMMENT: Allow safe rehandshaking only
#NAME: type
#PARENT: Gio.io_extension_point_implement.IOExtension
#COMMENT: the #GType to register as extension
#NAME: store
#PARENT: Gio.ListStore.remove.none
#COMMENT: a #GListStore
#NAME: launch_default_for_uri
#PARENT: Gio.AppInfo
#COMMENT: Utility function that launches the default application
registered to handle the specified uri. Synchronous I/O
is done on the uri to detect the type of the file if
required.
#NAME: buffer
#PARENT: Gio.OutputVector
#COMMENT: Pointer to a buffer of data to read.
#NAME: interaction
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by_async.none
#COMMENT: used to interact with the user if necessary
#NAME: mount
#PARENT: Gio.Mount.get_icon.Icon
#COMMENT: a #GMount.
#NAME: new
#PARENT: Gio.NetworkAddress
#COMMENT: Creates a new #GSocketConnectable for connecting to the given
@hostname and @port.

Note that depending on the configuration of the machine, a
@hostname of `localhost` may refer to the IPv4 loopback address
only, or to both IPv4 and IPv6; use
g_network_address_new_loopback() to create a #GNetworkAddress that
is guaranteed to resolve to both addresses.
#NAME: volume
#PARENT: Gio.Volume.eject_with_operation.none
#COMMENT: a #GVolume
#NAME: get_enabled
#PARENT: Gio.Action
#COMMENT: Checks if @action is currently enabled.

An action must be enabled in order to be activated or in order to
have its state changed from outside callers.
#NAME: string_builder
#PARENT: Gio.DBusInterfaceInfo.generate_xml.none
#COMMENT: A #GString to to append XML data to.
#NAME: user_data
#PARENT: Gio.Permission.acquire_async.none
#COMMENT: the user data to pass to @callback
#NAME: get_option
#PARENT: Gio.Socket
#COMMENT: Gets the value of an integer-valued option on @socket, as with
getsockopt(). (If you need to fetch a  non-integer-valued option,
you will need to call getsockopt() directly.)

The [<gio/gnetworking.h>][gio-gnetworking.h]
header pulls in system headers that will define most of the
standard/portable socket options. For unusual socket protocols or
platform-dependent options, you may need to include additional
headers.

Note that even for socket options that are a single byte in size,
@value is still a pointer to a #gint variable, not a #guchar;
g_socket_get_option() will handle the conversion internally.
#NAME: result
#PARENT: Gio.InputStream.read_finish.gssize
#COMMENT: a #GAsyncResult.
#NAME: create_readwrite_finish
#PARENT: Gio.File.create_readwrite_finish
#COMMENT: a #GFileIOStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: flags
#PARENT: Gio.FileIface.measure_disk_usage.measure_disk_usage.gboolean
#COMMENT: #GFileMeasureFlags
#NAME: unix_mount_is_readonly
#PARENT: Gio.unix_mount_is_readonly
#COMMENT: %TRUE if @mount_entry is read only.
#NAME: cancellable
#PARENT: Gio.TlsDatabaseClass.verify_chain.verify_chain.TlsCertificateFlags
#COMMENT: a #GCancellable, or %NULL
#NAME: parameters
#PARENT: Gio.DBusProxy.call.none
#COMMENT: A #GVariant tuple with parameters for the signal or %NULL if not passing parameters.
#NAME: value
#PARENT: Gio.TlsPassword.set_value.none
#COMMENT: the new password value
#NAME: callback
#PARENT: Gio.FileIface.create_async.create_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: not_empty
#PARENT: Gio.IOErrorEnum
#COMMENT: File is a directory that isn't empty.
#NAME: g-authorize-method
#PARENT: Gio.DBusInterfaceSkeleton.g-authorize-method
#COMMENT: %TRUE if the call is authorized, %FALSE otherwise.
#NAME: attributes
#PARENT: Gio.FileIface.query_filesystem_info.query_filesystem_info.FileInfo
#COMMENT: an attribute query string
#NAME: extension
#PARENT: Gio.AppInfoIface.set_as_default_for_extension.set_as_default_for_extension.gboolean
#COMMENT: a string containing the file extension (without the dot).
#NAME: get_value
#PARENT: Gio.TlsPassword
#COMMENT: Get the password value. If @length is not %NULL then it will be
filled in with the length of the password value. (Note that the
password value is not nul-terminated, so you can only pass %NULL
for @length in contexts where you know the password will have a
certain fixed length.)
#NAME: Task
#PARENT: Gio
#COMMENT: A #GTask represents and manages a cancellable "task".

## Asynchronous operations

The most common usage of #GTask is as a #GAsyncResult, to
manage data during an asynchronous operation. You call
g_task_new() in the "start" method, followed by
g_task_set_task_data() and the like if you need to keep some
additional data associated with the task, and then pass the
task object around through your asynchronous operation.
Eventually, you will call a method such as
g_task_return_pointer() or g_task_return_error(), which will
save the value you give it and then invoke the task's callback
function (waiting until the next iteration of the main
loop first, if necessary). The caller will pass the #GTask back
to the operation's finish function (as a #GAsyncResult), and
you can use g_task_propagate_pointer() or the like to extract
the return value.

Here is an example for using GTask as a GAsyncResult:
|[<!-- language="C" -->
    typedef struct {
      CakeFrostingType frosting;
      char *message;
    } DecorationData;

    static void
    decoration_data_free (DecorationData *decoration)
    {
      g_free (decoration->message);
      g_slice_free (DecorationData, decoration);
    }

    static void
    baked_cb (Cake     *cake,
              gpointer  user_data)
    {
      GTask *task = user_data;
      DecorationData *decoration = g_task_get_task_data (task);
      GError *error = NULL;

      if (cake == NULL)
        {
          g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_NO_FLOUR,
                                   "Go to the supermarket");
          g_object_unref (task);
          return;
        }

      if (!cake_decorate (cake, decoration->frosting, decoration->message, &error))
        {
          g_object_unref (cake);
          // g_task_return_error() takes ownership of error
          g_task_return_error (task, error);
          g_object_unref (task);
          return;
        }

      g_task_return_pointer (task, cake, g_object_unref);
      g_object_unref (task);
    }

    void
    baker_bake_cake_async (Baker               *self,
                           guint                radius,
                           CakeFlavor           flavor,
                           CakeFrostingType     frosting,
                           const char          *message,
                           GCancellable        *cancellable,
                           GAsyncReadyCallback  callback,
                           gpointer             user_data)
    {
      GTask *task;
      DecorationData *decoration;
      Cake  *cake;

      task = g_task_new (self, cancellable, callback, user_data);
      if (radius < 3)
        {
          g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_TOO_SMALL,
                                   "%ucm radius cakes are silly",
                                   radius);
          g_object_unref (task);
          return;
        }

      cake = _baker_get_cached_cake (self, radius, flavor, frosting, message);
      if (cake != NULL)
        {
          // _baker_get_cached_cake() returns a reffed cake
          g_task_return_pointer (task, cake, g_object_unref);
          g_object_unref (task);
          return;
        }

      decoration = g_slice_new (DecorationData);
      decoration->frosting = frosting;
      decoration->message = g_strdup (message);
      g_task_set_task_data (task, decoration, (GDestroyNotify) decoration_data_free);

      _baker_begin_cake (self, radius, flavor, cancellable, baked_cb, task);
    }

    Cake *
    baker_bake_cake_finish (Baker         *self,
                            GAsyncResult  *result,
                            GError       **error)
    {
      g_return_val_if_fail (g_task_is_valid (result, self), NULL);

      return g_task_propagate_pointer (G_TASK (result), error);
    }
]|

## Chained asynchronous operations

#GTask also tries to simplify asynchronous operations that
internally chain together several smaller asynchronous
operations. g_task_get_cancellable(), g_task_get_context(),
and g_task_get_priority() allow you to get back the task's
#GCancellable, #GMainContext, and [I/O priority][io-priority]
when starting a new subtask, so you don't have to keep track
of them yourself. g_task_attach_source() simplifies the case
of waiting for a source to fire (automatically using the correct
#GMainContext and priority).

Here is an example for chained asynchronous operations:
  |[<!-- language="C" -->
    typedef struct {
      Cake *cake;
      CakeFrostingType frosting;
      char *message;
    } BakingData;

    static void
    decoration_data_free (BakingData *bd)
    {
      if (bd->cake)
        g_object_unref (bd->cake);
      g_free (bd->message);
      g_slice_free (BakingData, bd);
    }

    static void
    decorated_cb (Cake         *cake,
                  GAsyncResult *result,
                  gpointer      user_data)
    {
      GTask *task = user_data;
      GError *error = NULL;

      if (!cake_decorate_finish (cake, result, &error))
        {
          g_object_unref (cake);
          g_task_return_error (task, error);
          g_object_unref (task);
          return;
        }

      // baking_data_free() will drop its ref on the cake, so we have to
      // take another here to give to the caller.
      g_task_return_pointer (result, g_object_ref (cake), g_object_unref);
      g_object_unref (task);
    }

    static void
    decorator_ready (gpointer user_data)
    {
      GTask *task = user_data;
      BakingData *bd = g_task_get_task_data (task);

      cake_decorate_async (bd->cake, bd->frosting, bd->message,
                           g_task_get_cancellable (task),
                           decorated_cb, task);
    }

    static void
    baked_cb (Cake     *cake,
              gpointer  user_data)
    {
      GTask *task = user_data;
      BakingData *bd = g_task_get_task_data (task);
      GError *error = NULL;

      if (cake == NULL)
        {
          g_task_return_new_error (task, BAKER_ERROR, BAKER_ERROR_NO_FLOUR,
                                   "Go to the supermarket");
          g_object_unref (task);
          return;
        }

      bd->cake = cake;

      // Bail out now if the user has already cancelled
      if (g_task_return_error_if_cancelled (task))
        {
          g_object_unref (task);
          return;
        }

      if (cake_decorator_available (cake))
        decorator_ready (task);
      else
        {
          GSource *source;

          source = cake_decorator_wait_source_new (cake);
          // Attach @source to @task's GMainContext and have it call
          // decorator_ready() when it is ready.
          g_task_attach_source (task, source,
                                G_CALLBACK (decorator_ready));
          g_source_unref (source);
        }
    }

    void
    baker_bake_cake_async (Baker               *self,
                           guint                radius,
                           CakeFlavor           flavor,
                           CakeFrostingType     frosting,
                           const char          *message,
                           gint                 priority,
                           GCancellable        *cancellable,
                           GAsyncReadyCallback  callback,
                           gpointer             user_data)
    {
      GTask *task;
      BakingData *bd;

      task = g_task_new (self, cancellable, callback, user_data);
      g_task_set_priority (task, priority);

      bd = g_slice_new0 (BakingData);
      bd->frosting = frosting;
      bd->message = g_strdup (message);
      g_task_set_task_data (task, bd, (GDestroyNotify) baking_data_free);

      _baker_begin_cake (self, radius, flavor, cancellable, baked_cb, task);
    }

    Cake *
    baker_bake_cake_finish (Baker         *self,
                            GAsyncResult  *result,
                            GError       **error)
    {
      g_return_val_if_fail (g_task_is_valid (result, self), NULL);

      return g_task_propagate_pointer (G_TASK (result), error);
    }
]|

## Asynchronous operations from synchronous ones

You can use g_task_run_in_thread() to turn a synchronous
operation into an asynchronous one, by running it in a thread
which will then dispatch the result back to the caller's
#GMainContext when it completes.

Running a task in a thread:
  |[<!-- language="C" -->
    typedef struct {
      guint radius;
      CakeFlavor flavor;
      CakeFrostingType frosting;
      char *message;
    } CakeData;

    static void
    cake_data_free (CakeData *cake_data)
    {
      g_free (cake_data->message);
      g_slice_free (CakeData, cake_data);
    }

    static void
    bake_cake_thread (GTask         *task,
                      gpointer       source_object,
                      gpointer       task_data,
                      GCancellable  *cancellable)
    {
      Baker *self = source_object;
      CakeData *cake_data = task_data;
      Cake *cake;
      GError *error = NULL;

      cake = bake_cake (baker, cake_data->radius, cake_data->flavor,
                        cake_data->frosting, cake_data->message,
                        cancellable, &error);
      if (cake)
        g_task_return_pointer (task, cake, g_object_unref);
      else
        g_task_return_error (task, error);
    }

    void
    baker_bake_cake_async (Baker               *self,
                           guint                radius,
                           CakeFlavor           flavor,
                           CakeFrostingType     frosting,
                           const char          *message,
                           GCancellable        *cancellable,
                           GAsyncReadyCallback  callback,
                           gpointer             user_data)
    {
      CakeData *cake_data;
      GTask *task;

      cake_data = g_slice_new (CakeData);
      cake_data->radius = radius;
      cake_data->flavor = flavor;
      cake_data->frosting = frosting;
      cake_data->message = g_strdup (message);
      task = g_task_new (self, cancellable, callback, user_data);
      g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
      g_task_run_in_thread (task, bake_cake_thread);
      g_object_unref (task);
    }

    Cake *
    baker_bake_cake_finish (Baker         *self,
                            GAsyncResult  *result,
                            GError       **error)
    {
      g_return_val_if_fail (g_task_is_valid (result, self), NULL);

      return g_task_propagate_pointer (G_TASK (result), error);
    }
]|

## Adding cancellability to uncancellable tasks

Finally, g_task_run_in_thread() and g_task_run_in_thread_sync()
can be used to turn an uncancellable operation into a
cancellable one. If you call g_task_set_return_on_cancel(),
passing %TRUE, then if the task's #GCancellable is cancelled,
it will return control back to the caller immediately, while
allowing the task thread to continue running in the background
(and simply discarding its result when it finally does finish).
Provided that the task thread is careful about how it uses
locks and other externally-visible resources, this allows you
to make "GLib-friendly" asynchronous and cancellable
synchronous variants of blocking APIs.

Cancelling a task:
  |[<!-- language="C" -->
    static void
    bake_cake_thread (GTask         *task,
                      gpointer       source_object,
                      gpointer       task_data,
                      GCancellable  *cancellable)
    {
      Baker *self = source_object;
      CakeData *cake_data = task_data;
      Cake *cake;
      GError *error = NULL;

      cake = bake_cake (baker, cake_data->radius, cake_data->flavor,
                        cake_data->frosting, cake_data->message,
                        &error);
      if (error)
        {
          g_task_return_error (task, error);
          return;
        }

      // If the task has already been cancelled, then we don't want to add
      // the cake to the cake cache. Likewise, we don't  want to have the
      // task get cancelled in the middle of updating the cache.
      // g_task_set_return_on_cancel() will return %TRUE here if it managed
      // to disable return-on-cancel, or %FALSE if the task was cancelled
      // before it could.
      if (g_task_set_return_on_cancel (task, FALSE))
        {
          // If the caller cancels at this point, their
          // GAsyncReadyCallback won't be invoked until we return,
          // so we don't have to worry that this code will run at
          // the same time as that code does. But if there were
          // other functions that might look at the cake cache,
          // then we'd probably need a GMutex here as well.
          baker_add_cake_to_cache (baker, cake);
          g_task_return_pointer (task, cake, g_object_unref);
        }
    }

    void
    baker_bake_cake_async (Baker               *self,
                           guint                radius,
                           CakeFlavor           flavor,
                           CakeFrostingType     frosting,
                           const char          *message,
                           GCancellable        *cancellable,
                           GAsyncReadyCallback  callback,
                           gpointer             user_data)
    {
      CakeData *cake_data;
      GTask *task;

      cake_data = g_slice_new (CakeData);

      ...

      task = g_task_new (self, cancellable, callback, user_data);
      g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
      g_task_set_return_on_cancel (task, TRUE);
      g_task_run_in_thread (task, bake_cake_thread);
    }

    Cake *
    baker_bake_cake_sync (Baker               *self,
                          guint                radius,
                          CakeFlavor           flavor,
                          CakeFrostingType     frosting,
                          const char          *message,
                          GCancellable        *cancellable,
                          GError             **error)
    {
      CakeData *cake_data;
      GTask *task;
      Cake *cake;

      cake_data = g_slice_new (CakeData);

      ...

      task = g_task_new (self, cancellable, NULL, NULL);
      g_task_set_task_data (task, cake_data, (GDestroyNotify) cake_data_free);
      g_task_set_return_on_cancel (task, TRUE);
      g_task_run_in_thread_sync (task, bake_cake_thread);

      cake = g_task_propagate_pointer (task, error);
      g_object_unref (task);
      return cake;
    }
]|

## Porting from GSimpleAsyncResult

#GTask's API attempts to be simpler than #GSimpleAsyncResult's
in several ways:
- You can save task-specific data with g_task_set_task_data(), and
  retrieve it later with g_task_get_task_data(). This replaces the
  abuse of g_simple_async_result_set_op_res_gpointer() for the same
  purpose with #GSimpleAsyncResult.
- In addition to the task data, #GTask also keeps track of the
  [priority][io-priority], #GCancellable, and
  #GMainContext associated with the task, so tasks that consist of
  a chain of simpler asynchronous operations will have easy access
  to those values when starting each sub-task.
- g_task_return_error_if_cancelled() provides simplified
  handling for cancellation. In addition, cancellation
  overrides any other #GTask return value by default, like
  #GSimpleAsyncResult does when
  g_simple_async_result_set_check_cancellable() is called.
  (You can use g_task_set_check_cancellable() to turn off that
  behavior.) On the other hand, g_task_run_in_thread()
  guarantees that it will always run your
  `task_func`, even if the task's #GCancellable
  is already cancelled before the task gets a chance to run;
  you can start your `task_func` with a
  g_task_return_error_if_cancelled() check if you need the
  old behavior.
- The "return" methods (eg, g_task_return_pointer())
  automatically cause the task to be "completed" as well, and
  there is no need to worry about the "complete" vs "complete
  in idle" distinction. (#GTask automatically figures out
  whether the task's callback can be invoked directly, or
  if it needs to be sent to another #GMainContext, or delayed
  until the next iteration of the current #GMainContext.)
- The "finish" functions for #GTask-based operations are generally
  much simpler than #GSimpleAsyncResult ones, normally consisting
  of only a single call to g_task_propagate_pointer() or the like.
  Since g_task_propagate_pointer() "steals" the return value from
  the #GTask, it is not necessary to juggle pointers around to
  prevent it from being freed twice.
- With #GSimpleAsyncResult, it was common to call
  g_simple_async_result_propagate_error() from the
  `_finish()` wrapper function, and have
  virtual method implementations only deal with successful
  returns. This behavior is deprecated, because it makes it
  difficult for a subclass to chain to a parent class's async
  methods. Instead, the wrapper function should just be a
  simple wrapper, and the virtual method should call an
  appropriate `g_task_propagate_` function.
  Note that wrapper methods can now use
  g_async_result_legacy_propagate_error() to do old-style
  #GSimpleAsyncResult error-returning behavior, and
  g_async_result_is_tagged() to check if a result is tagged as
  having come from the `_async()` wrapper
  function (for "short-circuit" results, such as when passing
  0 to g_input_stream_read_async()).
#NAME: get_if_signaled
#PARENT: Gio.Subprocess
#COMMENT: Check if the given subprocess terminated in response to a signal.

This is equivalent to the system WIFSIGNALED macro.

It is an error to call this function before g_subprocess_wait() has
returned.
#NAME: type1
#PARENT: Gio.content_type_equals.gboolean
#COMMENT: a content type string
#NAME: appinfo
#PARENT: Gio.AppInfoIface.get_description.get_description.utf8
#COMMENT: a #GAppInfo.
#NAME: IOStreamSpliceFlags
#PARENT: Gio
#COMMENT: GIOStreamSpliceFlags determine how streams should be spliced.
#NAME: schema_id
#PARENT: Gio.SettingsSchemaSource.lookup.SettingsSchema
#COMMENT: a schema ID
#NAME: take_stdout_fd
#PARENT: Gio.SubprocessLauncher
#COMMENT: Sets the file descriptor to use as the stdout for spawned processes.

If @fd is -1 then any previously given fd is unset.

Note that the default behaviour is to pass stdout through to the
stdout of the parent process.

The passed @fd is noted but will not be touched in the current
process.  It is therefore necessary that it be kept open by the
caller until the subprocess is spawned.  The file descriptor will
also not be explicitly closed on the child side, so it must be marked
O_CLOEXEC if that's what you want.

You may not set a stdout fd if a stdout file path is already set or
if the launcher flags contain any flags directing stdout elsewhere.

This feature is only available on UNIX.
#NAME: type2
#PARENT: Gio.content_type_equals.gboolean
#COMMENT: a content type string
#NAME: range_check
#PARENT: Gio.Settings
#COMMENT: Checks if the given @value is of the correct type and within the
permitted range for @key.
#NAME: flags
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by.TlsCertificate
#COMMENT: Flags which affect the lookup operation.
#NAME: simple_async_report_gerror_in_idle
#PARENT: Gio
#COMMENT: Reports an error in an idle function. Similar to
g_simple_async_report_error_in_idle(), but takes a #GError rather
than building a new one.
#NAME: anonymous
#PARENT: Gio.MountOperation.set_anonymous.none
#COMMENT: boolean value.
#NAME: guid
#PARENT: Gio.DBusConnection.new.none
#COMMENT: the GUID to use if a authenticating as a server or %NULL
#NAME: address
#PARENT: Gio.InetAddress.get_is_link_local.gboolean
#COMMENT: a #GInetAddress
#NAME: enabled
#PARENT: Gio.Action
#COMMENT: If @action is currently enabled.

If the action is disabled then calls to g_action_activate() and
g_action_change_state() have no effect.
#NAME: new_with_backend_and_path
#PARENT: Gio.Settings.new_with_backend_and_path
#COMMENT: a new #GSettings object
#NAME: connection
#PARENT: Gio.DBusConnection.send_message.gboolean
#COMMENT: a #GDBusConnection
#NAME: io_error_from_errno
#PARENT: Gio
#COMMENT: Converts errno.h error codes into GIO error codes. The fallback
value %G_IO_ERROR_FAILED is returned for error codes not currently
handled (but note that future GLib releases may return a more
specific value instead).
#NAME: get_range
#PARENT: Gio.SettingsSchemaKey
#COMMENT: Queries the range of a key.

This function will return a #GVariant that fully describes the range
of values that are valid for @key.

The type of #GVariant returned is `(sv)`. The string describes
the type of range restriction in effect. The type and meaning of
the value contained in the variant depends on the string.

If the string is `'type'` then the variant contains an empty array.
The element type of that empty array is the expected type of value
and all values of that type are valid.

If the string is `'enum'` then the variant contains an array
enumerating the possible values. Each item in the array is
a possible valid value and no other values are valid.

If the string is `'flags'` then the variant contains an array. Each
item in the array is a value that may appear zero or one times in an
array to be used as the value for this key. For example, if the
variant contained the array `['x', 'y']` then the valid values for
the key would be `[]`, `['x']`, `['y']`, `['x', 'y']` and
`['y', 'x']`.

Finally, if the string is `'range'` then the variant contains a pair
of like-typed values -- the minimum and maximum permissible values
for this key.

This information should not be used by normal programs.  It is
considered to be a hint for introspection purposes.  Normal programs
should already know what is permitted by their own schema.  The
format may change in any way in the future -- but particularly, new
forms may be added to the possibilities described above.

You should free the returned value with g_variant_unref() when it is
no longer needed.
#NAME: event
#PARENT: Gio.SocketListener
#COMMENT: Emitted when @listener's activity on @socket changes state.
Note that when @listener is used to listen on both IPv4 and
IPv6, a separate set of signals will be emitted for each, and
the order they happen in is undefined.
#NAME: data
#PARENT: Gio.content_type_guess.utf8
#COMMENT: a stream of data, or %NULL
#NAME: file_new_for_commandline_arg_and_cwd
#PARENT: Gio.file_new_for_commandline_arg_and_cwd
#COMMENT: a new #GFile
#NAME: address
#PARENT: Gio.InetAddressMask.matches.gboolean
#COMMENT: a #GInetAddress
#NAME: is_exported
#PARENT: Gio.DBusObjectManagerServer
#COMMENT: Returns whether @object is currently exported on @manager.
#NAME: flags
#PARENT: Gio.FileIface.replace_async.replace_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: connection
#PARENT: Gio.DBusConnection.get_last_serial.guint32
#COMMENT: a #GDBusConnection
#NAME: action_name_is_valid
#PARENT: Gio
#COMMENT: Checks if @action_name is valid.

@action_name is valid if it consists only of alphanumeric characters,
plus '-' and '.'.  The empty string is not a valid action name.

It is an error to call this function with a non-utf8 @action_name.
@action_name must not be %NULL.
#NAME: get_connection
#PARENT: Gio.DBusObjectManagerServer
#COMMENT: Gets the #GDBusConnection used by @manager.
#NAME: sender_name
#PARENT: Gio.DBusProxy.g-signal.none
#COMMENT: The sender of the signal or %NULL if the connection is not a bus connection.
#NAME: prefix
#PARENT: Gio.File.prefix_matches.gboolean
#COMMENT: input #GFile
#NAME: get_if_signaled
#PARENT: Gio.Subprocess.get_if_signaled
#COMMENT: %TRUE if the case of termination due to a signal
#NAME: result
#PARENT: Gio.File.unmount_mountable_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: io_priority
#PARENT: Gio.File.replace_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: mount_entry
#PARENT: Gio.unix_mount_get_fs_type.utf8
#COMMENT: a #GUnixMount.
#NAME: to_string
#PARENT: Gio.InetAddressMask
#COMMENT: Converts @mask back to its corresponding string form.
#NAME: release_async
#PARENT: Gio.Permission
#COMMENT: Attempts to release the permission represented by @permission.

This is the first half of the asynchronous version of
g_permission_release().
#NAME: new_for_address_finish
#PARENT: Gio.DBusConnection
#COMMENT: Finishes an operation started with g_dbus_connection_new_for_address().
#NAME: permission
#PARENT: Gio.PermissionClass.acquire_async.acquire_async.none
#COMMENT: a #GPermission instance
#NAME: set_handle_cancellation
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Sets whether to handle cancellation within the asynchronous operation.

This function has nothing to do with
g_simple_async_result_set_check_cancellable().  It only refers to the
#GCancellable passed to g_simple_async_result_run_in_thread().
#NAME: parse_name
#PARENT: Gio.File
#COMMENT: Constructs a #GFile with the given @parse_name (i.e. something
given by g_file_get_parse_name()). This operation never fails,
but the returned object might not support any I/O operation if
the @parse_name cannot be parsed.
#NAME: flags
#PARENT: Gio.DBusConnection.new_for_address_sync.DBusConnection
#COMMENT: flags describing how to make the connection
#NAME: callback
#PARENT: Gio.Subprocess.communicate_utf8_async.none
#COMMENT: Callback
#NAME: cancellable
#PARENT: Gio.VolumeIface.mount_fn.mount_fn.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: stream
#PARENT: Gio.OutputStream.printf.gboolean
#COMMENT: a #GOutputStream.
#NAME: user_data
#PARENT: Gio.InputStream.read_bytes_async.none
#COMMENT: the data to pass to callback function
#NAME: can_start
#PARENT: Gio.DriveIface.can_start.can_start
#COMMENT: %TRUE if the @drive can be started, %FALSE otherwise.
#NAME: g_iface
#PARENT: Gio.PollableOutputStreamInterface
#COMMENT: The parent interface.
#NAME: unmount_mountable_finish
#PARENT: Gio.File.unmount_mountable_finish
#COMMENT: %TRUE if the operation finished successfully.
    %FALSE otherwise.
#NAME: connection
#PARENT: Gio.TcpConnection.get_graceful_disconnect.gboolean
#COMMENT: a #GTcpConnection
#NAME: find_enclosing_mount_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous find mount request.
See g_file_find_enclosing_mount_async().
#NAME: user_data
#PARENT: Gio.NetworkMonitorInterface.can_reach_async.can_reach_async.none
#COMMENT: the data to pass to callback function
#NAME: uuid
#PARENT: Gio.VolumeMonitor.get_mount_for_uuid.Mount
#COMMENT: the UUID to look for
#NAME: matches
#PARENT: Gio.InetAddressMask.matches
#COMMENT: whether @address falls within the range described by
@mask.
#NAME: set_priority
#PARENT: Gio.Notification
#COMMENT: Sets the priority of @notification to @priority. See
#GNotificationPriority for possible values.
#NAME: get_certificate
#PARENT: Gio.TlsConnection
#COMMENT: Gets @conn's certificate, as set by
g_tls_connection_set_certificate().
#NAME: cancellable
#PARENT: Gio.Cancellable.is_cancelled.gboolean
#COMMENT: a #GCancellable or %NULL
#NAME: timeout_msec
#PARENT: Gio.DBusProxy.call_sync.GLib.Variant
#COMMENT: The timeout in milliseconds (with %G_MAXINT meaning
               "infinite") or -1 to use the proxy default timeout.
#NAME: stream
#PARENT: Gio.OutputStreamClass.write_fn.write_fn.gssize
#COMMENT: a #GOutputStream.
#NAME: proxy
#PARENT: Gio.DBusObjectProxy.get_connection.DBusConnection
#COMMENT: a #GDBusObjectProxy
#NAME: resolver
#PARENT: Gio.Resolver.lookup_by_address.utf8
#COMMENT: a #GResolver
#NAME: factory_lookup_type
#PARENT: Gio.SocketConnection
#COMMENT: Looks up the #GType to be used when creating socket connections on
sockets with the specified @family, @type and @protocol_id.

If no type is registered, the #GSocketConnection base type is returned.
#NAME: arguments
#PARENT: Gio.ApplicationClass.local_command_line.local_command_line.gboolean
#COMMENT: array of command line arguments
#NAME: IOStream
#PARENT: Gio
#COMMENT: GIOStream represents an object that has both read and write streams.
Generally the two streams acts as separate input and output streams,
but they share some common resources and state. For instance, for
seekable streams they may use the same position in both streams.

Examples of #GIOStream objects are #GSocketConnection which represents
a two-way network connection, and #GFileIOStream which represent a
file handle opened in read-write mode.

To do the actual reading and writing you need to get the substreams
with g_io_stream_get_input_stream() and g_io_stream_get_output_stream().

The #GIOStream object owns the input and the output streams, not the other
way around, so keeping the substreams alive will not keep the #GIOStream
object alive. If the #GIOStream object is freed it will be closed, thus
closing the substream, so even if the substreams stay alive they will
always just return a %G_IO_ERROR_CLOSED for all operations.

To close a stream use g_io_stream_close() which will close the common
stream object and also the individual substreams. You can also close
the substreams themselves. In most cases this only marks the
substream as closed, so further I/O on it fails but common state in the
#GIOStream may still be open. However, some streams may support
"half-closed" states where one direction of the stream is actually shut down.
#NAME: callback
#PARENT: Gio.DriveIface.eject_with_operation.eject_with_operation.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: list_attributes
#PARENT: Gio.FileInfo.list_attributes
#COMMENT: a
null-terminated array of strings of all of the possible attribute
types for the given @name_space, or %NULL on error.
#NAME: delete_file
#PARENT: Gio.FileIface.delete_file.delete_file
#COMMENT: %TRUE if the file was deleted. %FALSE otherwise.
#NAME: connect
#PARENT: Gio.Cancellable.connect
#COMMENT: The id of the signal handler or 0 if @cancellable has already
         been cancelled.
#NAME: user_data
#PARENT: Gio.TlsInteraction.ask_password_async.none
#COMMENT: data to pass to the @callback
#NAME: LoadableIconIface
#PARENT: Gio
#COMMENT: Interface for icons that can be loaded as a stream.
#NAME: length
#PARENT: Gio.File.replace_contents_async.none
#COMMENT: the length of @contents in bytes
#NAME: file
#PARENT: Gio.FileIface.query_writable_namespaces.query_writable_namespaces.FileAttributeInfoList
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.FileIface.unmount_mountable.unmount_mountable.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: make_backup
#PARENT: Gio.File.replace_contents_async.none
#COMMENT: %TRUE if a backup should be created
#NAME: name
#PARENT: Gio.DBusObjectManagerClient.new_for_bus_sync.DBusObjectManagerClient
#COMMENT: The owner of the control object (unique or well-known name).
#NAME: unix_mount_guess_icon
#PARENT: Gio
#COMMENT: Guesses the icon of a Unix mount.
#NAME: flags
#PARENT: Gio.File.replace_contents.gboolean
#COMMENT: a set of #GFileCreateFlags
#NAME: get_cwd
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Gets the working directory of the command line invocation.
The string may contain non-utf8 data.

It is possible that the remote application did not send a working
directory, so this may be %NULL.

The return value should not be modified or freed and is valid for as
long as @cmdline exists.
#NAME: invalid
#PARENT: Gio.UnixSocketAddressType
#COMMENT: invalid
#NAME: content_type
#PARENT: Gio.app_info_get_all_for_type.AppInfo
#COMMENT: the content type to find a #GAppInfo for
#NAME: length
#PARENT: Gio.DataInputStream.read_upto_finish.utf8
#COMMENT: a #gsize to get the length of the data read in
#NAME: supports_hostname
#PARENT: Gio.Proxy.supports_hostname
#COMMENT: %TRUE if hostname resolution is supported.
#NAME: op_res
#PARENT: Gio.SimpleAsyncResult.set_op_res_gssize.none
#COMMENT: a #gssize.
#NAME: close_finish
#PARENT: Gio.OutputStream.close_finish
#COMMENT: %TRUE if stream was successfully closed, %FALSE otherwise.
#NAME: ostream
#PARENT: Gio.MemoryOutputStream.get_size.gsize
#COMMENT: a #GMemoryOutputStream
#NAME: name
#PARENT: Gio.SimpleAction
#COMMENT: The name of the action. This is mostly meaningful for identifying
the action once it has been added to a #GSimpleActionGroup.
#NAME: get_uri
#PARENT: Gio.File.get_uri
#COMMENT: a string containing the #GFile's URI.
    The returned string should be freed with g_free()
    when no longer needed.
#NAME: application
#PARENT: Gio.Application.unmark_busy.none
#COMMENT: a #GApplication
#NAME: TLS_BACKEND_EXTENSION_POINT_NAME
#PARENT: Gio
#COMMENT: Extension point for TLS functionality via #GTlsBackend.
See [Extending GIO][extending-gio].
#NAME: proxy
#PARENT: Gio.ProxyAddress.get_protocol.utf8
#COMMENT: a #GProxyAddress
#NAME: drive-stop-button
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when the stop button is pressed on @drive.
#NAME: file
#PARENT: Gio.FileIface.query_filesystem_info.query_filesystem_info.FileInfo
#COMMENT: input #GFile
#NAME: delete_finish
#PARENT: Gio.File
#COMMENT: Finishes deleting a file started with g_file_delete_async().
#NAME: user_data
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle_async.lookup_certificate_for_handle_async.none
#COMMENT: the data to pass to the callback function
#NAME: file
#PARENT: Gio.FileIface.replace_readwrite_finish.replace_readwrite_finish.FileIOStream
#COMMENT: input #GFile
#NAME: inbuf
#PARENT: Gio.Converter.convert.ConverterResult
#COMMENT: the buffer
        containing the data to convert.
#NAME: address
#PARENT: Gio.InetAddress.get_is_mc_org_local.gboolean
#COMMENT: a #GInetAddress
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_stringv.utf8
#COMMENT: a #GFileInfo.
#NAME: key
#PARENT: Gio.Settings.get_value.GLib.Variant
#COMMENT: the key to get the value for
#NAME: volume_monitor
#PARENT: Gio.VolumeMonitor.get_volume_for_uuid.Volume
#COMMENT: a #GVolumeMonitor.
#NAME: UnixCredentialsMessageClass
#PARENT: Gio
#COMMENT: Class structure for #GUnixCredentialsMessage.
#NAME: cancellable
#PARENT: Gio.Socket.accept.Socket
#COMMENT: a %GCancellable or %NULL
#NAME: get_tls
#PARENT: Gio.SocketClient.get_tls
#COMMENT: whether @client uses TLS
#NAME: base_io_stream
#PARENT: Gio.TlsServerConnection.new.TlsServerConnection
#COMMENT: the #GIOStream to wrap
#NAME: count
#PARENT: Gio.InputStreamClass.skip_async.skip_async.none
#COMMENT: the number of bytes that will be skipped from the stream
#NAME: verify
#PARENT: Gio.TlsCertificate.verify
#COMMENT: the appropriate #GTlsCertificateFlags
#NAME: file
#PARENT: Gio.File.get_basename.utf8
#COMMENT: input #GFile
#NAME: FileQueryInfoFlags
#PARENT: Gio
#COMMENT: Flags used when querying a #GFileInfo.
#NAME: make_symbolic_link
#PARENT: Gio.FileIface.make_symbolic_link.make_symbolic_link
#COMMENT: %TRUE on the creation of a new symlink, %FALSE otherwise.
#NAME: get_address
#PARENT: Gio.InetSocketAddress.get_address
#COMMENT: the #GInetAddress for @address, which must be
g_object_ref()'d if it will be stored
#NAME: cancellable
#PARENT: Gio.File.make_directory.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_close_fd
#PARENT: Gio.UnixInputStream.get_close_fd
#COMMENT: %TRUE if the file descriptor is closed when done
#NAME: create_file_for_arg
#PARENT: Gio.ApplicationCommandLine.create_file_for_arg
#COMMENT: a new #GFile
#NAME: get_next
#PARENT: Gio.MenuAttributeIterClass.get_next.get_next
#COMMENT: %TRUE on success, or %FALSE if there is no additional
    attribute
#NAME: connect_to_host_async
#PARENT: Gio.SocketClient
#COMMENT: This is the asynchronous version of g_socket_client_connect_to_host().

When the operation is finished @callback will be
called. You can then call g_socket_client_connect_to_host_finish() to get
the result of the operation.
#NAME: is_media_removable
#PARENT: Gio.Drive
#COMMENT: Checks if the @drive supports removable media.
#NAME: volume_monitor
#PARENT: Gio.VolumeMonitorClass.get_mount_for_uuid.get_mount_for_uuid.Mount
#COMMENT: a #GVolumeMonitor.
#NAME: schema_id
#PARENT: Gio.Settings.new_with_backend_and_path.Settings
#COMMENT: the id of the schema
#NAME: cancellable
#PARENT: Gio.DataOutputStream.put_int32.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: query_info_async
#PARENT: Gio.File
#COMMENT: Asynchronously gets the requested information about specified @file.
The result is a #GFileInfo object that contains key-value attributes
(such as type or size for the file).

For more details, see g_file_query_info() which is the synchronous
version of this call.

When the operation is finished, @callback will be called. You can
then call g_file_query_info_finish() to get the result of the operation.
#NAME: impl_update
#PARENT: Gio.Permission
#COMMENT: This function is called by the #GPermission implementation to update
the properties of the permission.  You should never call this
function except from a #GPermission implementation.

GObject notify signals are generated, as appropriate.
#NAME: create_finish
#PARENT: Gio.FileIface.create_finish.create_finish
#COMMENT: a #GFileOutputStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: out_fd_list
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: Return location for a #GUnixFDList or %NULL.
#NAME: DBusMenuModel
#PARENT: Gio
#COMMENT: #GDBusMenuModel is an implementation of #GMenuModel that can be used
as a proxy for a menu model that is exported over D-Bus with
g_dbus_connection_export_menu_model().
#NAME: type
#PARENT: Gio.content_type_is_a.gboolean
#COMMENT: a content type string
#NAME: cancellable
#PARENT: Gio.File.delete_file_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: content_type_is_a
#PARENT: Gio
#COMMENT: Determines if @type is a subset of @supertype.
#NAME: name
#PARENT: Gio.SimpleAction.new.SimpleAction
#COMMENT: the name of the action
#NAME: address
#PARENT: Gio.Socket.connect.gboolean
#COMMENT: a #GSocketAddress specifying the remote address.
#NAME: self
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle_finish.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: connected
#PARENT: Gio.SocketClientEvent
#COMMENT: The client has connected to a remote
  host.
#NAME: res
#PARENT: Gio.FileIface.create_finish.create_finish.FileOutputStream
#COMMENT: a #GAsyncResult
#NAME: set_title
#PARENT: Gio.Notification
#COMMENT: Sets the title of @notification to @title.
#NAME: lookup_by_address_finish
#PARENT: Gio.ResolverClass.lookup_by_address_finish.lookup_by_address_finish
#COMMENT: a hostname (either ASCII-only, or in ASCII-encoded
form), or %NULL on error.
#NAME: value
#PARENT: Gio.File.set_attribute_int64.gboolean
#COMMENT: a #guint64 containing the attribute's new value
#NAME: flags
#PARENT: Gio.File.copy.gboolean
#COMMENT: set of #GFileCopyFlags
#NAME: stream
#PARENT: Gio.IOStreamClass.get_input_stream.get_input_stream.InputStream
#COMMENT: a #GIOStream
#NAME: message
#PARENT: Gio.UnixFDMessage.get_fd_list.UnixFDList
#COMMENT: a #GUnixFDMessage
#NAME: connect_finish
#PARENT: Gio.Proxy
#COMMENT: See g_proxy_connect().
#NAME: get_icon
#PARENT: Gio.Volume
#COMMENT: Gets the icon for @volume.
#NAME: network_monitor_get_default
#PARENT: Gio.network_monitor_get_default
#COMMENT: a #GNetworkMonitor
#NAME: notification
#PARENT: Gio.Notification.set_priority.none
#COMMENT: a #GNotification
#NAME: data
#PARENT: Gio.DataOutputStream.put_uint64.gboolean
#COMMENT: a #guint64.
#NAME: get_sender
#PARENT: Gio.DBusMethodInvocation.get_sender
#COMMENT: A string. Do not free, it is owned by @invocation.
#NAME: schema
#PARENT: Gio.SettingsSchema.get_id.utf8
#COMMENT: a #GSettingsSchema
#NAME: new_from_fd
#PARENT: Gio.Socket.new_from_fd
#COMMENT: a #GSocket or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: cancellable
#PARENT: Gio.SocketConnection.connect_async.none
#COMMENT: a %GCancellable or %NULL
#NAME: client
#PARENT: Gio.SocketClient.set_tls.none
#COMMENT: a #GSocketClient.
#NAME: force
#PARENT: Gio.MountUnmountFlags
#COMMENT: Unmount even if there are outstanding
 file operations on the mount.
#NAME: user_data_free_func
#PARENT: Gio.DBusConnection.register_object.guint
#COMMENT: function to call when the object path is unregistered
#NAME: resolver
#PARENT: Gio.Resolver.set_default.none
#COMMENT: the new default #GResolver
#NAME: byte_order
#PARENT: Gio.DBusMessage.set_byte_order.none
#COMMENT: The byte order.
#NAME: op_res
#PARENT: Gio.SimpleAsyncResult.set_op_res_gboolean.none
#COMMENT: a #gboolean.
#NAME: content_type
#PARENT: Gio.AppInfo.get_fallback_for_type.AppInfo
#COMMENT: the content type to find a #GAppInfo for
#NAME: print
#PARENT: Gio.DBusMessage.print
#COMMENT: A string that should be freed with g_free().
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_string.utf8
#COMMENT: a file attribute key.
#NAME: show-processes
#PARENT: Gio.MountOperation
#COMMENT: Emitted when one or more processes are blocking an operation
e.g. unmounting/ejecting a #GMount or stopping a #GDrive.

Note that this signal may be emitted several times to update the
list of blocking processes as processes close files. The
application should only respond with g_mount_operation_reply() to
the latest signal (setting #GMountOperation:choice to the choice
the user made).

If the message contains a line break, the first line should be
presented as a heading. For example, it may be used as the
primary text in a #GtkMessageDialog.
#NAME: capabilities
#PARENT: Gio.DBusMessage.to_blob.guint8
#COMMENT: A #GDBusCapabilityFlags describing what protocol features are supported.
#NAME: make_directory_with_parents
#PARENT: Gio.File
#COMMENT: Creates a directory and any parent directories that may not
exist similar to 'mkdir -p'. If the file system does not support
creating directories, this function will fail, setting @error to
%G_IO_ERROR_NOT_SUPPORTED. If the directory itself already exists,
this function will fail setting @error to %G_IO_ERROR_EXISTS, unlike
the similar g_mkdir_with_parents().

For a local #GFile the newly created directories will have the default
(current) ownership and permissions of the current process.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: register_error
#PARENT: Gio.DBusError
#COMMENT: Creates an association to map between @dbus_error_name and
#GErrors specified by @error_domain and @error_code.

This is typically done in the routine that returns the #GQuark for
an error domain.
#NAME: user_data
#PARENT: Gio.TlsConnectionClass.handshake_async.handshake_async.none
#COMMENT: the data to pass to the callback function
#NAME: stop_mountable_finish
#PARENT: Gio.FileIface.stop_mountable_finish.stop_mountable_finish
#COMMENT: %TRUE if the operation finished successfully.
    %FALSE otherwise.
#NAME: iter
#PARENT: Gio.MenuLinkIter.get_name.utf8
#COMMENT: a #GMenuLinkIter
#NAME: set_op_res_gboolean
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Sets the operation result to a boolean within the asynchronous result.
#NAME: activate_action
#PARENT: Gio.ActionGroup
#COMMENT: Activate the named action within @action_group.

If the action is expecting a parameter, then the correct type of
parameter must be given as @parameter.  If the action is expecting no
parameters then @parameter must be %NULL.  See
g_action_group_get_action_parameter_type().
#NAME: count
#PARENT: Gio.InputStream.skip_async.none
#COMMENT: the number of bytes that will be skipped from the stream
#NAME: display_name
#PARENT: Gio.FileIface.get_child_for_display_name.get_child_for_display_name.File
#COMMENT: string to a possible child
#NAME: load
#PARENT: Gio.Resource.load
#COMMENT: a new #GResource, or %NULL on error
#NAME: connectable
#PARENT: Gio.SocketConnectableIface.proxy_enumerate.proxy_enumerate.SocketAddressEnumerator
#COMMENT: a #GSocketConnectable
#NAME: file
#PARENT: Gio.FileIface.dup.dup.File
#COMMENT: input #GFile
#NAME: g-interface-info
#PARENT: Gio.DBusProxy
#COMMENT: Ensure that interactions with this proxy conform to the given
interface. This is mainly to ensure that malformed data received
from the other peer is ignored. The given #GDBusInterfaceInfo is
said to be the "expected interface".

The checks performed are:
- When completing a method call, if the type signature of
  the reply message isn't what's expected, the reply is
  discarded and the #GError is set to %G_IO_ERROR_INVALID_ARGUMENT.

- Received signals that have a type signature mismatch are dropped and
  a warning is logged via g_warning().

- Properties received via the initial `GetAll()` call or via the
  `::PropertiesChanged` signal (on the
  [org.freedesktop.DBus.Properties](http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-properties)
  interface) or set using g_dbus_proxy_set_cached_property()
  with a type signature mismatch are ignored and a warning is
  logged via g_warning().

Note that these checks are never done on methods, signals and
properties that are not referenced in the given
#GDBusInterfaceInfo, since extending a D-Bus interface on the
service-side is not considered an ABI break.
#NAME: socket
#PARENT: Gio.Socket.get_ttl.guint
#COMMENT: a #GSocket.
#NAME: enumerator
#PARENT: Gio.FileEnumeratorClass.next_file.next_file.FileInfo
#COMMENT: a #GFileEnumerator.
#NAME: result
#PARENT: Gio.File.unmount_mountable_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: get_peer_certificate
#PARENT: Gio.TlsConnection
#COMMENT: Gets @conn's peer's certificate after the handshake has completed.
(It is not set during the emission of
#GTlsConnection::accept-certificate.)
#NAME: get_file_for_path
#PARENT: Gio.VfsClass.get_file_for_path.get_file_for_path
#COMMENT: a #GFile.
    Free the returned object with g_object_unref().
#NAME: set_stderr_file_path
#PARENT: Gio.SubprocessLauncher
#COMMENT: Sets the file path to use as the stderr for spawned processes.

If @path is %NULL then any previously given path is unset.

The file will be created or truncated when the process is spawned, as
would be the case if using '2>' at the shell.

If you want to send both stdout and stderr to the same file then use
%G_SUBPROCESS_FLAGS_STDERR_MERGE.

You may not set a stderr file path if a stderr fd is already set or
if the launcher flags contain any flags directing stderr elsewhere.

This feature is only available on UNIX.
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.get_action_state_hint.get_action_state_hint.GLib.Variant
#COMMENT: a #GActionGroup
#NAME: release
#PARENT: Gio.Application
#COMMENT: Decrease the use count of @application.

When the use count reaches zero, the application will stop running.

Never call this function except to cancel the effect of a previous
call to g_application_hold().
#NAME: matches
#PARENT: Gio.FileAttributeMatcher
#COMMENT: Checks if an attribute will be matched by an attribute matcher. If
the matcher was created with the "*" matching string, this function
will always return %TRUE.
#NAME: name
#PARENT: Gio.ThemedIcon
#COMMENT: The icon name.
#NAME: disconnect
#PARENT: Gio.Cancellable
#COMMENT: Disconnects a handler from a cancellable instance similar to
g_signal_handler_disconnect().  Additionally, in the event that a
signal handler is currently running, this call will block until the
handler has finished.  Calling this function from a
#GCancellable::cancelled signal handler will therefore result in a
deadlock.

This avoids a race condition where a thread cancels at the
same time as the cancellable operation is finished and the
signal handler is removed. See #GCancellable::cancelled for
details on how to use this.

If @cancellable is %NULL or @handler_id is %0 this function does
nothing.
#NAME: name
#PARENT: Gio.ActionEntry
#COMMENT: the name of the action
#NAME: get_volumes
#PARENT: Gio.VolumeMonitorClass.get_volumes.get_volumes
#COMMENT: a #GList of #GVolume objects.
#NAME: mount
#PARENT: Gio.Mount.get_symbolic_icon.Icon
#COMMENT: a #GMount.
#NAME: uris
#PARENT: Gio.AppInfoIface.launch_uris.launch_uris.gboolean
#COMMENT: a #GList containing URIs to launch.
#NAME: object_path
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: path of remote object
#NAME: callback
#PARENT: Gio.File.replace_readwrite_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: get_supported_uri_schemes
#PARENT: Gio.Vfs
#COMMENT: Gets a list of URI schemes supported by @vfs.
#NAME: connection
#PARENT: Gio.DBusConnection.unregister_object.gboolean
#COMMENT: a #GDBusConnection
#NAME: deserialize
#PARENT: Gio.Icon.deserialize
#COMMENT: a #GIcon, or %NULL when deserialization fails.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.dup.dup.AppInfo
#COMMENT: a #GAppInfo.
#NAME: res
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_finish.GLib.Variant
#COMMENT: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_proxy_call_with_unix_fd_list().
#NAME: cancellable
#PARENT: Gio.File.set_display_name.File
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: file
#PARENT: Gio.FileIface.measure_disk_usage_finish.measure_disk_usage_finish.gboolean
#COMMENT: a #GFile
#NAME: parameter-type
#PARENT: Gio.SimpleAction
#COMMENT: The type of the parameter that must be given when activating the
action.
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.get_source_tag.gpointer
#COMMENT: a #GSimpleAsyncResult.
#NAME: manager
#PARENT: Gio.DBusObjectManagerIface.get_interface.get_interface.DBusInterface
#COMMENT: A #GDBusObjectManager.
#NAME: flags
#PARENT: Gio.FileIface.unmount_mountable.unmount_mountable.none
#COMMENT: flags affecting the operation
#NAME: get_default
#PARENT: Gio.Vfs.get_default
#COMMENT: a #GVfs.
#NAME: query_info_async
#PARENT: Gio.FileIOStream
#COMMENT: Asynchronously queries the @stream for a #GFileInfo. When completed,
@callback will be called with a #GAsyncResult which can be used to
finish the operation with g_file_io_stream_query_info_finish().

For the synchronous version of this function, see
g_file_io_stream_query_info().
#NAME: object_path
#PARENT: Gio.DBusProxy.new_for_bus_sync.DBusProxy
#COMMENT: An object path.
#NAME: anonymous
#PARENT: Gio.MountOperation
#COMMENT: Whether to use an anonymous user when authenticating.
#NAME: resources_enumerate_children
#PARENT: Gio.resources_enumerate_children
#COMMENT: an array of constant strings
#NAME: new_for_commandline_arg
#PARENT: Gio.File
#COMMENT: Creates a #GFile with the given argument from the command line.
The value of @arg can be either a URI, an absolute path or a
relative path resolved relative to the current working directory.
This operation never fails, but the returned object might not
support any I/O operation if @arg points to a malformed path.

Note that on Windows, this function expects its argument to be in
UTF-8 -- not the system code page.  This means that you
should not use this function with string from argv as it is passed
to main().  g_win32_get_command_line() will return a UTF-8 version of
the commandline.  #GApplication also uses UTF-8 but
g_application_command_line_create_file_for_arg() may be more useful
for you there.  It is also always possible to use this function with
#GOptionContext arguments of type %G_OPTION_ARG_FILENAME.
#NAME: get_etag
#PARENT: Gio.FileOutputStream
#COMMENT: Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.
#NAME: new
#PARENT: Gio.SimpleActionGroup
#COMMENT: Creates a new, empty, #GSimpleActionGroup.
#NAME: action
#PARENT: Gio.Notification.add_button_with_target.none
#COMMENT: an action name
#NAME: get_proxy_type_user_data
#PARENT: Gio.DBusObjectManagerClient.new_sync.DBusObjectManagerClient
#COMMENT: User data to pass to @get_proxy_type_func.
#NAME: lookup
#PARENT: Gio.ProxyResolver.lookup
#COMMENT: A
              NULL-terminated array of proxy URIs. Must be freed
              with g_strfreev().
#NAME: get_int
#PARENT: Gio.Settings.get_int
#COMMENT: an integer
#NAME: file
#PARENT: Gio.File.make_directory_with_parents.gboolean
#COMMENT: input #GFile
#NAME: get_boolean
#PARENT: Gio.Settings.get_boolean
#COMMENT: a boolean
#NAME: anchors
#PARENT: Gio.TlsFileDatabase
#COMMENT: The path to a file containing PEM encoded certificate authority
root anchors. The certificates in this file will be treated as
root authorities for the purpose of verifying other certificates
via the g_tls_database_verify_chain() operation.
#NAME: quark_volatile
#PARENT: Gio.dbus_error_register_error_domain.none
#COMMENT: A pointer where to store the #GQuark.
#NAME: cancellable
#PARENT: Gio.FileIface.stop_mountable.stop_mountable.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: return_pointer
#PARENT: Gio.Task
#COMMENT: Sets @task's result to @result and completes the task. If @result
is not %NULL, then @result_destroy will be used to free @result if
the caller does not take ownership of it with
g_task_propagate_pointer().

"Completes the task" means that for an ordinary asynchronous task
it will either invoke the task's callback, or else queue that
callback to be invoked in the proper #GMainContext, or in the next
iteration of the current #GMainContext. For a task run via
g_task_run_in_thread() or g_task_run_in_thread_sync(), calling this
method will save @result to be returned to the caller later, but
the task will not actually be completed until the #GTaskThreadFunc
exits.

Note that since the task may be completed before returning from
g_task_return_pointer(), you cannot assume that @result is still
valid after calling this, unless you are still holding another
reference on it.
#NAME: validate_all
#PARENT: Gio.TlsCertificateFlags
#COMMENT: the combination of all of the above
  flags
#NAME: client
#PARENT: Gio.SocketClient.connect_to_uri.SocketConnection
#COMMENT: a #GSocketClient
#NAME: stderr_buf
#PARENT: Gio.Subprocess.communicate_utf8.gboolean
#COMMENT: data read from the subprocess stderr
#NAME: prepend_item
#PARENT: Gio.Menu
#COMMENT: Prepends @item to the start of @menu.

See g_menu_insert_item() for more information.
#NAME: connect_to_host_finish
#PARENT: Gio.SocketClient
#COMMENT: Finishes an async connect operation. See g_socket_client_connect_to_host_async()
#NAME: get_uri_scheme
#PARENT: Gio.File.get_uri_scheme
#COMMENT: a string containing the URI scheme for the given
    #GFile. The returned string should be freed with g_free()
    when no longer needed.
#NAME: code
#PARENT: Gio.Task.report_new_error.none
#COMMENT: an error code.
#NAME: send_to_mainloop
#PARENT: Gio.IOSchedulerJob
#COMMENT: Used from an I/O job to send a callback to be run in the thread
that the job was started from, waiting for the result (and thus
blocking the I/O job).
#NAME: client
#PARENT: Gio.SocketClient.connect_to_service_finish.SocketConnection
#COMMENT: a #GSocketClient.
#NAME: read_upto_finish
#PARENT: Gio.DataInputStream.read_upto_finish
#COMMENT: a string with the data that was read
    before encountering any of the stop characters. Set @length to
    a #gsize to get the length of the string. This function will
    return %NULL on an error.
#NAME: args
#PARENT: Gio.OutputStream.vprintf.gboolean
#COMMENT: the parameters to insert into the format string
#NAME: address
#PARENT: Gio.SocketAddressClass.get_family.get_family.SocketFamily
#COMMENT: a #GSocketAddress
#NAME: spawn_permissions_invalid
#PARENT: Gio.DBusError
#COMMENT: Permissions are incorrect on the setuid helper.
#NAME: vtable
#PARENT: Gio.DBusConnection.register_subtree.guint
#COMMENT: a #GDBusSubtreeVTable to enumerate, introspect and
    dispatch nodes in the subtree
#NAME: cancellable
#PARENT: Gio.File.replace_contents_bytes_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.get_action_enabled.get_action_enabled.gboolean
#COMMENT: a #GActionGroup
#NAME: mask2
#PARENT: Gio.InetAddressMask.equal.gboolean
#COMMENT: another #GInetAddressMask
#NAME: schema_id
#PARENT: Gio.Settings.new.Settings
#COMMENT: the id of the schema
#NAME: relocatable
#PARENT: Gio.SettingsSchemaSource.list_schemas.none
#COMMENT: the list
  of relocatable schemas
#NAME: user_data
#PARENT: Gio.DataInputStream.read_until_async.none
#COMMENT: the data to pass to callback function.
#NAME: spawn_service_invalid
#PARENT: Gio.DBusError
#COMMENT: Bus name was not valid.
#NAME: content_type
#PARENT: Gio.app_info_get_fallback_for_type.AppInfo
#COMMENT: the content type to find a #GAppInfo for
#NAME: file
#PARENT: Gio.FileIface.delete_file.delete_file.gboolean
#COMMENT: input #GFile
#NAME: ThreadedSocketService
#PARENT: Gio
#COMMENT: A #GThreadedSocketService is a simple subclass of #GSocketService
that handles incoming connections by creating a worker thread and
dispatching the connection to it by emitting the
#GThreadedSocketService::run signal in the new thread.

The signal handler may perform blocking IO and need not return
until the connection is closed.

The service is implemented using a thread pool, so there is a
limited amount of threads available to serve incoming requests.
The service automatically stops the #GSocketService from accepting
new connections when all threads are busy.

As with #GSocketService, you may connect to #GThreadedSocketService::run,
or subclass and override the default handler.
#NAME: query_filesystem_info_finish
#PARENT: Gio.FileIface.query_filesystem_info_finish.query_filesystem_info_finish
#COMMENT: #GFileInfo for given @file
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: cancellable
#PARENT: Gio.FileEnumeratorClass.close_async.close_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: name
#PARENT: Gio.bus_watch_name_on_connection_with_closures.guint
#COMMENT: The name (well-known or unique) to watch.
#NAME: id_is_valid
#PARENT: Gio.Application
#COMMENT: Checks if @application_id is a valid application identifier.

A valid ID is required for calls to g_application_new() and
g_application_set_application_id().

For convenience, the restrictions on application identifiers are
reproduced here:

- Application identifiers must contain only the ASCII characters
  "[A-Z][a-z][0-9]_-." and must not begin with a digit.

- Application identifiers must contain at least one '.' (period)
  character (and thus at least three elements).

- Application identifiers must not begin or end with a '.' (period)
  character.

- Application identifiers must not contain consecutive '.' (period)
  characters.

- Application identifiers must not exceed 255 characters.
#NAME: uris
#PARENT: Gio.DesktopAppInfo.launch_uris_as_manager.gboolean
#COMMENT: List of URIs
#NAME: object_path
#PARENT: Gio.DBusProxy.new_sync.DBusProxy
#COMMENT: An object path.
#NAME: accept_socket_finish
#PARENT: Gio.SocketListener.accept_socket_finish
#COMMENT: a #GSocket on success, %NULL on error.
#NAME: flags
#PARENT: Gio.bus_own_name_on_connection.guint
#COMMENT: a set of flags from the #GBusNameOwnerFlags enumeration
#NAME: stream
#PARENT: Gio.UnixInputStream.get_close_fd.gboolean
#COMMENT: a #GUnixInputStream
#NAME: parameter
#PARENT: Gio.ActionInterface.activate.activate.none
#COMMENT: the parameter to the activation
#NAME: set_state_hint
#PARENT: Gio.SimpleAction
#COMMENT: Sets the state hint for the action.

See g_action_get_state_hint() for more information about
action state hints.
#NAME: out_serial
#PARENT: Gio.DBusConnection.send_message.gboolean
#COMMENT: return location for serial number assigned
    to @message when sending it or %NULL
#NAME: export
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Exports @interface_ at @object_path on @connection.

This can be called multiple times to export the same @interface_
onto multiple connections however the @object_path provided must be
the same for all connections.

Use g_dbus_interface_skeleton_unexport() to unexport the object.
#NAME: cancellable
#PARENT: Gio.Volume.mount.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: action_map
#PARENT: Gio.ActionMap.add_action_entries.none
#COMMENT: a #GActionMap
#NAME: interface_name
#PARENT: Gio.DBusProxyTypeFunc.GType
#COMMENT: The interface name of the remote object or %NULL if a #GDBusObjectProxy #GType is requested.
#NAME: read_bytes
#PARENT: Gio.InputStream.read_bytes
#COMMENT: a new #GBytes, or %NULL on error
#NAME: attr_value
#PARENT: Gio.FileInfo.set_attribute_uint64.none
#COMMENT: an unsigned 64-bit integer.
#NAME: EmblemOrigin
#PARENT: Gio
#COMMENT: GEmblemOrigin is used to add information about the origin of the emblem
to #GEmblem.
#NAME: parameters
#PARENT: Gio.initable_newv.GObject.Object
#COMMENT: the parameters to use to construct the object
#NAME: new_async
#PARENT: Gio.AsyncInitable
#COMMENT: Helper function for constructing #GAsyncInitable object. This is
similar to g_object_new() but also initializes the object asynchronously.

When the initialization is finished, @callback will be called. You can
then call g_async_initable_new_finish() to get the new object and check
for any errors.
#NAME: DesktopAppInfo
#PARENT: Gio
#COMMENT: #GDesktopAppInfo is an implementation of #GAppInfo based on
desktop files.

Note that `<gio/gdesktopappinfo.h>` belongs to the UNIX-specific
GIO interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
file when using it.
#NAME: get_if_exited
#PARENT: Gio.Subprocess
#COMMENT: Check if the given subprocess exited normally (ie: by way of exit()
or return from main()).

This is equivalent to the system WIFEXITED macro.

It is an error to call this function before g_subprocess_wait() has
returned.
#NAME: subtract
#PARENT: Gio.FileAttributeMatcher.subtract
#COMMENT: A file attribute matcher matching all attributes of
    @matcher that are not matched by @subtract
#NAME: cancellable
#PARENT: Gio.ResolverClass.lookup_by_name_async.lookup_by_name_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: spawn
#PARENT: Gio.SubprocessLauncher
#COMMENT: Creates a #GSubprocess given a provided varargs list of arguments.
#NAME: AskPasswordFlags
#PARENT: Gio
#COMMENT: #GAskPasswordFlags are used to request specific information from the
user, or to notify the user of their choices in an authentication
situation.
#NAME: user_data
#PARENT: Gio.Drive.poll_for_media.none
#COMMENT: user data to pass to @callback
#NAME: user_data
#PARENT: Gio.File.start_mountable.none
#COMMENT: the data to pass to callback function
#NAME: handshake
#PARENT: Gio.TlsConnectionClass.handshake.handshake
#COMMENT: success or failure
#NAME: get_close_fd
#PARENT: Gio.UnixOutputStream.get_close_fd
#COMMENT: %TRUE if the file descriptor is closed when done
#NAME: stream
#PARENT: Gio.BufferedInputStream.get_buffer_size.gsize
#COMMENT: a #GBufferedInputStream
#NAME: result
#PARENT: Gio.FileOutputStreamClass.query_info_finish.query_info_finish.FileInfo
#COMMENT: a #GAsyncResult.
#NAME: bus_own_name_with_closures
#PARENT: Gio.bus_own_name_with_closures
#COMMENT: an identifier (never 0) that an be used with
    g_bus_unown_name() to stop owning the name.
#NAME: count
#PARENT: Gio.pollable_stream_read.gssize
#COMMENT: the number of bytes to read
#NAME: error_setting
#PARENT: Gio.FileAttributeStatus
#COMMENT: Indicates an error in setting the value.
#NAME: flush_async
#PARENT: Gio.OutputStream
#COMMENT: Forces an asynchronous write of all user-space buffered data for
the given @stream.
For behaviour details see g_output_stream_flush().

When the operation is finished @callback will be
called. You can then call g_output_stream_flush_finish() to get the
result of the operation.
#NAME: vfs
#PARENT: Gio.Vfs.get_supported_uri_schemes.utf8
#COMMENT: a #GVfs.
#NAME: cancellable
#PARENT: Gio.FileEnumerator.iterate.gboolean
#COMMENT: a #GCancellable
#NAME: stream
#PARENT: Gio.InputStream.close.gboolean
#COMMENT: A #GInputStream.
#NAME: source
#PARENT: Gio.SimpleAsyncResult.is_valid.gboolean
#COMMENT: the #GObject passed to the _finish function.
#NAME: callback
#PARENT: Gio.DBusProxy.call.none
#COMMENT: A #GAsyncReadyCallback to call when the request is satisfied or %NULL if you don't
care about the result of the method invocation.
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_object.GObject.Object
#COMMENT: a file attribute key.
#NAME: set_scheme
#PARENT: Gio.NetworkService
#COMMENT: Set's the URI scheme used to resolve proxies. By default, the service name
is used as scheme.
#NAME: id
#PARENT: Gio.Application.withdraw_notification.none
#COMMENT: id of a previously sent notification
#NAME: object
#PARENT: Gio.DBusObjectIface.get_object_path.get_object_path.utf8
#COMMENT: A #GDBusObject.
#NAME: cancellable
#PARENT: Gio.FileEnumerator.next_files_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_uint
#PARENT: Gio.Settings.get_uint
#COMMENT: an unsigned integer
#NAME: buffer
#PARENT: Gio.PollableInputStream.read_nonblocking.gssize
#COMMENT: a buffer to
    read data into (which should be at least @count bytes long).
#NAME: eject_mountable_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous eject operation started by
g_file_eject_mountable().
#NAME: buffer
#PARENT: Gio.pollable_stream_write_all.gboolean
#COMMENT: the buffer
  containing the data to write.
#NAME: lookup_flags
#PARENT: Gio.Resource.enumerate_children.utf8
#COMMENT: A #GResourceLookupFlags
#NAME: connection
#PARENT: Gio.BusNameLostCallback.none
#COMMENT: The #GDBusConnection on which to acquire the name or %NULL if
the connection was disconnected.
#NAME: replace_finish
#PARENT: Gio.File.replace_finish
#COMMENT: a #GFileOutputStream, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: get_close_fd
#PARENT: Gio.UnixInputStream
#COMMENT: Returns whether the file descriptor of @stream will be
closed when the stream is closed.
#NAME: new
#PARENT: Gio.EmblemedIcon
#COMMENT: Creates a new emblemed icon for @icon with the emblem @emblem.
#NAME: user_data
#PARENT: Gio.bus_watch_name_on_connection.guint
#COMMENT: User data to pass to handlers.
#NAME: connect
#PARENT: Gio.Socket
#COMMENT: Connect the socket to the specified remote address.

For connection oriented socket this generally means we attempt to make
a connection to the @address. For a connection-less socket it sets
the default address for g_socket_send() and discards all incoming datagrams
from other sources.

Generally connection oriented sockets can only connect once, but
connection-less sockets can connect multiple times to change the
default address.

If the connect call needs to do network I/O it will block, unless
non-blocking I/O is enabled. Then %G_IO_ERROR_PENDING is returned
and the user can be notified of the connection finishing by waiting
for the G_IO_OUT condition. The result of the connection must then be
checked with g_socket_check_connect_result().
#NAME: file
#PARENT: Gio.FileIface.delete_file_async.delete_file_async.none
#COMMENT: input #GFile
#NAME: func
#PARENT: Gio.IOSchedulerJob.send_to_mainloop_async.none
#COMMENT: a #GSourceFunc callback that will be called in the original thread
#NAME: action
#PARENT: Gio.ActionInterface.get_enabled.get_enabled.gboolean
#COMMENT: a #GAction
#NAME: get_supported_types
#PARENT: Gio.AppInfoIface.get_supported_types.get_supported_types
#COMMENT: 
   a list of content types.
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.set_handle_cancellation.none
#COMMENT: a #GSimpleAsyncResult.
#NAME: user_data
#PARENT: Gio.BusNameVanishedCallback.none
#COMMENT: User data passed to g_bus_watch_name().
#NAME: order
#PARENT: Gio.DataInputStream.set_byte_order.none
#COMMENT: a #GDataStreamByteOrder to set.
#NAME: get_object
#PARENT: Gio.ListModel
#COMMENT: Get the item at @position. If @position is greater than the number of
items in @list, %NULL is returned.

%NULL is never returned for an index that is smaller than the length
of the list.  See g_list_model_get_n_items().
#NAME: unref
#PARENT: Gio.DBusNodeInfo
#COMMENT: If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.
#NAME: description
#PARENT: Gio.Application.add_main_option.none
#COMMENT: the description for the option in `--help` output
#NAME: file
#PARENT: Gio.File.stop_mountable_finish.gboolean
#COMMENT: input #GFile
#NAME: connection
#PARENT: Gio.DBusConnection.call_finish.GLib.Variant
#COMMENT: a #GDBusConnection
#NAME: to_bytes
#PARENT: Gio.InetAddress.to_bytes
#COMMENT: a pointer to an internal array of the bytes in @address,
which should not be modified, stored, or freed. The size of this
array can be gotten with g_inet_address_get_native_size().
#NAME: mount
#PARENT: Gio.Mount.remount.none
#COMMENT: a #GMount.
#NAME: target_default_perms
#PARENT: Gio.FileCopyFlags
#COMMENT: Leaves target file with default perms, instead of setting the source file perms.
#NAME: set_edit_name
#PARENT: Gio.FileInfo
#COMMENT: Sets the edit name for the current file.
See %G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME.
#NAME: subprocess
#PARENT: Gio.Subprocess.get_term_sig.gint
#COMMENT: a #GSubprocess
#NAME: ask_password
#PARENT: Gio.TlsInteraction
#COMMENT: Run synchronous interaction to ask the user for a password. In general,
g_tls_interaction_invoke_ask_password() should be used instead of this
function.

Derived subclasses usually implement a password prompt, although they may
also choose to provide a password from elsewhere. The @password value will
be filled in and then @callback will be called. Alternatively the user may
abort this password request, which will usually abort the TLS connection.

If the interaction is cancelled by the cancellation object, or by the
user then %G_TLS_INTERACTION_FAILED will be returned with an error that
contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
not support immediate cancellation.
#NAME: get_uuid
#PARENT: Gio.Volume.get_uuid
#COMMENT: the UUID for @volume or %NULL if no UUID can be computed.
    The returned string should be freed with g_free()
    when no longer needed.
#NAME: appinfo
#PARENT: Gio.AppInfo.get_id.utf8
#COMMENT: a #GAppInfo.
#NAME: read_finish
#PARENT: Gio.FileIface.read_finish.read_finish
#COMMENT: a #GFileInputStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: get_certificate
#PARENT: Gio.TlsConnection.get_certificate
#COMMENT: @conn's certificate, or %NULL
#NAME: new
#PARENT: Gio.UnixSocketAddress
#COMMENT: Creates a new #GUnixSocketAddress for @path.

To create abstract socket addresses, on systems that support that,
use g_unix_socket_address_new_abstract().
#NAME: unique-name
#PARENT: Gio.DBusConnection
#COMMENT: The unique name as assigned by the message bus or %NULL if the
connection is not open or not a message bus connection.
#NAME: cancellable
#PARENT: Gio.FileOutputStream.query_info_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: file
#PARENT: Gio.File.find_enclosing_mount.Mount
#COMMENT: input #GFile
#NAME: attributes
#PARENT: Gio.FileIface.query_info.query_info.FileInfo
#COMMENT: an attribute query string
#NAME: ref_class
#PARENT: Gio.IOExtension
#COMMENT: Gets a reference to the class for the type that is
associated with @extension.
#NAME: set_object
#PARENT: Gio.DBusInterface
#COMMENT: Sets the #GDBusObject for @interface_ to @object.

Note that @interface_ will hold a weak reference to @object.
#NAME: compare_func
#PARENT: Gio.ListStore.insert_sorted.guint
#COMMENT: pairwise comparison function for sorting
#NAME: get_signature
#PARENT: Gio.DBusMessage.get_signature
#COMMENT: The value.
#NAME: initable
#PARENT: Gio.AsyncInitableIface.init_async.init_async.none
#COMMENT: a #GAsyncInitable.
#NAME: mount_operation
#PARENT: Gio.FileIface.unmount_mountable_with_operation.unmount_mountable_with_operation.none
#COMMENT: a #GMountOperation,
    or %NULL to avoid user interaction
#NAME: set_buffer_size
#PARENT: Gio.BufferedInputStream
#COMMENT: Sets the size of the internal buffer of @stream to @size, or to the
size of the contents of the buffer. The buffer can never be resized
smaller than its current contents.
#NAME: get_is_symlink
#PARENT: Gio.FileInfo.get_is_symlink
#COMMENT: %TRUE if the given @info is a symlink.
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_boolean.gboolean
#COMMENT: a file attribute key.
#NAME: get_file
#PARENT: Gio.FileIcon
#COMMENT: Gets the #GFile associated with the given @icon.
#NAME: set_attribute_int32
#PARENT: Gio.File.set_attribute_int32
#COMMENT: %TRUE if the @attribute was successfully set to @value
    in the @file, %FALSE otherwise.
#NAME: new
#PARENT: Gio.Menu
#COMMENT: Creates a new #GMenu.

The new menu has no items.
#NAME: quark
#PARENT: Gio.ResolverError
#COMMENT: Gets the #GResolver Error Quark.
#NAME: item_type
#PARENT: Gio.ListStore.new.ListStore
#COMMENT: the #GType of items in the list
#NAME: value
#PARENT: Gio.DBusMessage.set_reply_serial.none
#COMMENT: The value to set.
#NAME: get_modification_time
#PARENT: Gio.FileInfo
#COMMENT: Gets the modification time of the current @info and sets it
in @result.
#NAME: key
#PARENT: Gio.Settings.reset.none
#COMMENT: the name of a key
#NAME: get_display_name
#PARENT: Gio.AppInfo
#COMMENT: Gets the display name of the application. The display name is often more
descriptive to the user than the name itself.
#NAME: splice
#PARENT: Gio.OutputStream.splice
#COMMENT: a #gssize containing the size of the data spliced, or
    -1 if an error occurred. Note that if the number of bytes
    spliced is greater than %G_MAXSSIZE, then that will be
    returned, and there is no way to determine the actual number
    of bytes spliced.
#NAME: copy_when_moved
#PARENT: Gio.FileAttributeInfoFlags
#COMMENT: copy the attribute values when the file is moved.
#NAME: count
#PARENT: Gio.BufferedInputStream.fill_async.none
#COMMENT: the number of bytes that will be read from the stream
#NAME: user_data
#PARENT: Gio.Permission.release_async.none
#COMMENT: the user data to pass to @callback
#NAME: complete_in_idle
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Completes an asynchronous function in an idle handler in the
[thread-default main context][g-main-context-push-thread-default]
of the thread that @simple was initially created in
(and re-pushes that context around the invocation of the callback).

Calling this function takes a reference to @simple for as long as
is needed to complete the call.
#NAME: list_actions
#PARENT: Gio.DesktopAppInfo
#COMMENT: Returns the list of "additional application actions" supported on the
desktop file, as per the desktop file specification.

As per the specification, this is the list of actions that are
explicitly listed in the "Actions" key of the [Desktop Entry] group.
#NAME: cancellable
#PARENT: Gio.OutputStream.printf.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: permanently
#PARENT: Gio.PasswordSave
#COMMENT: save a password permanently.
#NAME: extension_point
#PARENT: Gio.IOExtensionPoint.get_extensions.IOExtension
#COMMENT: a #GIOExtensionPoint
#NAME: num_files
#PARENT: Gio.File.measure_disk_usage.gboolean
#COMMENT: the number of non-directories encountered
#NAME: no_server
#PARENT: Gio.DBusError
#COMMENT: Unable to connect to server (probably caused by ECONNREFUSED on a
socket).
#NAME: get_length
#PARENT: Gio.InetAddressMask
#COMMENT: Gets @mask's length
#NAME: cancellable
#PARENT: Gio.FileIface.replace_async.replace_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: stream
#PARENT: Gio.BufferedInputStream.peek_buffer.guint8
#COMMENT: a #GBufferedInputStream
#NAME: set_use_fallback
#PARENT: Gio.CharsetConverter
#COMMENT: Sets the #GCharsetConverter:use-fallback property.
#NAME: identity
#PARENT: Gio.TlsDatabaseClass.verify_chain.verify_chain.TlsCertificateFlags
#COMMENT: the expected peer identity
#NAME: set_urgent
#PARENT: Gio.Notification
#COMMENT: Deprecated in favor of g_notification_set_priority().
#NAME: target
#PARENT: Gio.SrvTarget.get_hostname.utf8
#COMMENT: a #GSrvTarget
#NAME: request_certificate_finish
#PARENT: Gio.TlsInteraction.request_certificate_finish
#COMMENT: The status of the request certificate interaction.
#NAME: user_data_free_func
#PARENT: Gio.bus_own_name.guint
#COMMENT: function for freeing @user_data or %NULL
#NAME: register_error_domain
#PARENT: Gio.DBusError
#COMMENT: Helper function for associating a #GError error domain with D-Bus error names.
#NAME: eject_with_operation
#PARENT: Gio.Mount
#COMMENT: Ejects a mount. This is an asynchronous operation, and is
finished by calling g_mount_eject_with_operation_finish() with the @mount
and #GAsyncResult data returned in the @callback.
#NAME: get_username
#PARENT: Gio.ProxyAddress
#COMMENT: Gets @proxy's username.
#NAME: get_server_connection_type
#PARENT: Gio.TlsBackend
#COMMENT: Gets the #GType of @backend's #GTlsServerConnection implementation.
#NAME: self
#PARENT: Gio.SubprocessLauncher.set_flags.none
#COMMENT: a #GSubprocessLauncher
#NAME: is_connected
#PARENT: Gio.Socket.is_connected
#COMMENT: %TRUE if socket is connected, %FALSE otherwise.
#NAME: cancellable
#PARENT: Gio.File.load_contents_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: progress_callback_data
#PARENT: Gio.FileIface.copy.copy.gboolean
#COMMENT: user data to pass to @progress_callback
#NAME: icon1
#PARENT: Gio.Icon.equal.gboolean
#COMMENT: pointer to the first #GIcon.
#NAME: icon2
#PARENT: Gio.Icon.equal.gboolean
#COMMENT: pointer to the second #GIcon.
#NAME: file
#PARENT: Gio.TlsCertificate.new_from_file.TlsCertificate
#COMMENT: file containing a PEM-encoded certificate to import
#NAME: error_message_format
#PARENT: Gio.DBusMessage.new_method_error_valist.DBusMessage
#COMMENT: The D-Bus error message in a printf() format.
#NAME: ref
#PARENT: Gio.SettingsSchema
#COMMENT: Increase the reference count of @schema, returning a new reference.
#NAME: srv
#PARENT: Gio.NetworkService.get_scheme.utf8
#COMMENT: a #GNetworkService
#NAME: lookup_certificate_issuer
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer
#COMMENT: a newly allocated issuer #GTlsCertificate,
or %NULL. Use g_object_unref() to release the certificate.
#NAME: flags
#PARENT: Gio.TlsPassword.set_flags.none
#COMMENT: The flags about the password
#NAME: is_writable
#PARENT: Gio.PollableOutputStreamInterface.is_writable.is_writable
#COMMENT: %TRUE if @stream is writable, %FALSE if not. If an error
  has occurred on @stream, this will result in
  g_pollable_output_stream_is_writable() returning %TRUE, and the
  next attempt to write will return the error.
#NAME: connect
#PARENT: Gio.Proxy.connect
#COMMENT: a #GIOStream that will replace @connection. This might
              be the same as @connection, in which case a reference
              will be added.
#NAME: cancellable
#PARENT: Gio.dbus_address_get_stream_sync.IOStream
#COMMENT: A #GCancellable or %NULL.
#NAME: icon
#PARENT: Gio.Icon.serialize.GLib.Variant
#COMMENT: a #GIcon
#NAME: action-enabled-changed
#PARENT: Gio.ActionGroup
#COMMENT: Signals that the enabled status of the named action has changed.
#NAME: content_type
#PARENT: Gio.AppInfo.set_as_default_for_type.gboolean
#COMMENT: the content type.
#NAME: user_data
#PARENT: Gio.File.append_to_async.none
#COMMENT: the data to pass to callback function
#NAME: get_extension_by_name
#PARENT: Gio.IOExtensionPoint.get_extension_by_name
#COMMENT: the #GIOExtension for @extension_point that has the
   given name, or %NULL if there is no extension with that name
#NAME: type
#PARENT: Gio.content_type_is_unknown.gboolean
#COMMENT: a content type string
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.set_op_res_gssize.none
#COMMENT: a #GSimpleAsyncResult.
#NAME: user_data
#PARENT: Gio.SettingsBindSetMapping.GLib.Variant
#COMMENT: user data that was specified when the binding was created
#NAME: new_from_files
#PARENT: Gio.TlsCertificate.new_from_files
#COMMENT: the new certificate, or %NULL on error
#NAME: dbus_error_name
#PARENT: Gio.dbus_error_register_error.gboolean
#COMMENT: A D-Bus error name.
#NAME: result
#PARENT: Gio.Drive.start_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: result
#PARENT: Gio.SimpleAsyncResult.is_valid.gboolean
#COMMENT: the #GAsyncResult passed to the _finish function.
#NAME: flags
#PARENT: Gio.bus_watch_name.guint
#COMMENT: Flags from the #GBusNameWatcherFlags enumeration.
#NAME: proxy_not_allowed
#PARENT: Gio.IOErrorEnum
#COMMENT: Proxy connection is not allowed by ruleset.
    Since 2.26
#NAME: host_and_port
#PARENT: Gio.SocketClient.connect_to_host.SocketConnection
#COMMENT: the name and optionally port of the host to connect to
#NAME: result
#PARENT: Gio.Subprocess.communicate_utf8_finish.gboolean
#COMMENT: Result
#NAME: get_num_fallbacks
#PARENT: Gio.CharsetConverter
#COMMENT: Gets the number of fallbacks that @converter has applied so far.
#NAME: subprocess
#PARENT: Gio.Subprocess.get_stdout_pipe.InputStream
#COMMENT: a #GSubprocess
#NAME: splice_finish
#PARENT: Gio.IOStream
#COMMENT: Finishes an asynchronous io stream splice operation.
#NAME: get_guid
#PARENT: Gio.DBusServer
#COMMENT: Gets the GUID for @server.
#NAME: property
#PARENT: Gio.Settings.bind_writable.none
#COMMENT: the name of a boolean property to bind
#NAME: flags
#PARENT: Gio.DBusConnection.new_sync.DBusConnection
#COMMENT: flags describing how to make the connection
#NAME: callback
#PARENT: Gio.Resolver.lookup_service_async.none
#COMMENT: callback to call after resolution completes
#NAME: fd
#PARENT: Gio.UnixFDMessage.append_fd.gboolean
#COMMENT: a valid open file descriptor
#NAME: num_vectors
#PARENT: Gio.Socket.receive_message.gssize
#COMMENT: the number of elements in @vectors, or -1
#NAME: password
#PARENT: Gio.TlsPassword.get_description.utf8
#COMMENT: a #GTlsPassword object
#NAME: get_name
#PARENT: Gio.MenuAttributeIter
#COMMENT: Gets the name of the attribute at the current iterator position, as
a string.

The iterator is not advanced.
#NAME: get-proxy-type-func
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: The #GDBusProxyTypeFunc to use when determining what #GType to
use for interface proxies or %NULL.
#NAME: content_type_is_a
#PARENT: Gio.content_type_is_a
#COMMENT: %TRUE if @type is a kind of @supertype,
    %FALSE otherwise.
#NAME: get_user_value
#PARENT: Gio.Settings.get_user_value
#COMMENT: the user's value, if set
#NAME: res
#PARENT: Gio.DBusConnection.call_finish.GLib.Variant
#COMMENT: a #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_connection_call()
#NAME: cancellable
#PARENT: Gio.File.eject_mountable.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: set_enum
#PARENT: Gio.Settings
#COMMENT: Looks up the enumerated type nick for @value and writes it to @key,
within @settings.

It is a programmer error to give a @key that isn't contained in the
schema for @settings or is not marked as an enumerated type, or for
@value not to be a valid value for the named type.

After performing the write, accessing @key directly with
g_settings_get_string() will return the 'nick' associated with
@value.
#NAME: get_local_address
#PARENT: Gio.Socket
#COMMENT: Try to get the local address of a bound socket. This is only
useful if the socket has been bound to a local address,
either explicitly or implicitly when connecting.
#NAME: flags
#PARENT: Gio.File.set_attribute.gboolean
#COMMENT: a set of #GFileQueryInfoFlags
#NAME: cancellable
#PARENT: Gio.FileIface.trash_async.trash_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: out_user_data
#PARENT: Gio.DBusSubtreeDispatchFunc.DBusInterfaceVTable
#COMMENT: Return location for user data to pass to functions in the returned #GDBusInterfaceVTable (never %NULL).
#NAME: mount_fn
#PARENT: Gio.Volume
#COMMENT: Mounts a volume. This is an asynchronous operation, and is
finished by calling g_volume_mount_finish() with the @volume
and #GAsyncResult returned in the @callback.
#NAME: file
#PARENT: Gio.File.delete_file.gboolean
#COMMENT: input #GFile
#NAME: info
#PARENT: Gio.FileInfo.unset_attribute_mask.none
#COMMENT: #GFileInfo.
#NAME: save
#PARENT: Gio.MountOperation.set_password_save.none
#COMMENT: a set of #GPasswordSave flags.
#NAME: can_truncate
#PARENT: Gio.SeekableIface.can_truncate.can_truncate
#COMMENT: %TRUE if the stream can be truncated, %FALSE otherwise.
#NAME: argv0
#PARENT: Gio.Subprocess.new.Subprocess
#COMMENT: first commandline argument to pass to the subprocess
#NAME: get_categories
#PARENT: Gio.DesktopAppInfo
#COMMENT: Gets the categories from the desktop file.
#NAME: is_closed
#PARENT: Gio.DBusConnection
#COMMENT: Gets whether @connection is closed.
#NAME: RemoteActionGroupInterface
#PARENT: Gio
#COMMENT: The virtual function table for #GRemoteActionGroup.
#NAME: property_name
#PARENT: Gio.DBusInterfaceSetPropertyFunc.gboolean
#COMMENT: The name of the property to get the value of.
#NAME: can_eject
#PARENT: Gio.Drive.can_eject
#COMMENT: %TRUE if the @drive can be ejected, %FALSE otherwise.
#NAME: drive
#PARENT: Gio.Drive.eject_with_operation.none
#COMMENT: a #GDrive.
#NAME: res
#PARENT: Gio.DBusConnection.send_message_with_reply_finish.DBusMessage
#COMMENT: a #GAsyncResult obtained from the #GAsyncReadyCallback passed to
    g_dbus_connection_send_message_with_reply()
#NAME: lookup_data
#PARENT: Gio.Resource
#COMMENT: Looks for a file at the specified @path in the resource and
returns a #GBytes that lets you directly access the data in
memory.

The data is always followed by a zero byte, so you
can safely use the data as a C string. However, that byte
is not included in the size of the GBytes.

For uncompressed resource files this is a pointer directly into
the resource bundle, which is typically in some readonly data section
in the program binary. For compressed files we allocate memory on
the heap and automatically uncompress the data.

@lookup_flags controls the behaviour of the lookup.
#NAME: flags
#PARENT: Gio.DBusConnection.call.none
#COMMENT: flags from the #GDBusCallFlags enumeration
#NAME: get_symbolic_icon
#PARENT: Gio.Mount.get_symbolic_icon
#COMMENT: a #GIcon.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: permission
#PARENT: Gio.Permission.impl_update.none
#COMMENT: a #GPermission instance
#NAME: stop_chars
#PARENT: Gio.DataInputStream.read_until_async.none
#COMMENT: characters to terminate the read.
#NAME: status
#PARENT: Gio.FileInfo.set_attribute_status.gboolean
#COMMENT: a #GFileAttributeStatus
#NAME: trusted
#PARENT: Gio.SettingsSchemaSource.new_from_directory.SettingsSchemaSource
#COMMENT: %TRUE, if the directory is trusted
#NAME: callback
#PARENT: Gio.FileIface.trash_async.trash_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: object
#PARENT: Gio.simple_async_report_error_in_idle.none
#COMMENT: a #GObject, or %NULL.
#NAME: cancellable
#PARENT: Gio.FileIface.create_readwrite_async.create_readwrite_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: is_closing
#PARENT: Gio.OutputStream.is_closing
#COMMENT: %TRUE if @stream is being closed. %FALSE otherwise.
#NAME: close_finish
#PARENT: Gio.OutputStreamClass.close_finish.close_finish
#COMMENT: %TRUE if stream was successfully closed, %FALSE otherwise.
#NAME: io_priority
#PARENT: Gio.async_initable_newv_async.none
#COMMENT: the [I/O priority][io-priority] of the operation
#NAME: get_display_name
#PARENT: Gio.AppInfoIface.get_display_name.get_display_name
#COMMENT: the display name of the application for @appinfo, or the name if
no display name is available.
#NAME: callback
#PARENT: Gio.FileIface.find_enclosing_mount_async.find_enclosing_mount_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: add_option_group
#PARENT: Gio.Application
#COMMENT: Adds a #GOptionGroup to the commandline handling of @application.

This function is comparable to g_option_context_add_group().

Unlike g_application_add_main_option_entries(), this function does
not deal with %NULL @arg_data and never transmits options to the
primary instance.

The reason for that is because, by the time the options arrive at the
primary instance, it is typically too late to do anything with them.
Taking the GTK option group as an example: GTK will already have been
initialised by the time the #GApplication::command-line handler runs.
In the case that this is not the first-running instance of the
application, the existing instance may already have been running for
a very long time.

This means that the options from #GOptionGroup are only really usable
in the case that the instance of the application being run is the
first instance.  Passing options like `--display=` or `--gdk-debug=`
on future runs will have no effect on the existing primary instance.

Calling this function will cause the options in the supplied option
group to be parsed, but it does not cause you to be "opted in" to the
new functionality whereby unrecognised options are rejected even if
%G_APPLICATION_HANDLES_COMMAND_LINE was given.
#NAME: string
#PARENT: Gio.dbus_is_supported_address.gboolean
#COMMENT: A string.
#NAME: Icon
#PARENT: Gio
#COMMENT: #GIcon is a very minimal interface for icons. It provides functions
for checking the equality of two icons, hashing of icons and
serializing an icon to and from strings.

#GIcon does not provide the actual pixmap for the icon as this is out
of GIO's scope, however implementations of #GIcon may contain the name
of an icon (see #GThemedIcon), or the path to an icon (see #GLoadableIcon).

To obtain a hash of a #GIcon, see g_icon_hash().

To check if two #GIcons are equal, see g_icon_equal().

For serializing a #GIcon, use g_icon_serialize() and
g_icon_deserialize().

If you want to consume #GIcon (for example, in a toolkit) you must
be prepared to handle at least the three following cases:
#GLoadableIcon, #GThemedIcon and #GEmblemedIcon.  It may also make
sense to have fast-paths for other cases (like handling #GdkPixbuf
directly, for example) but all compliant #GIcon implementations
outside of GIO must implement #GLoadableIcon.

If your application or library provides one or more #GIcon
implementations you need to ensure that your new implementation also
implements #GLoadableIcon.  Additionally, you must provide an
implementation of g_icon_serialize() that gives a result that is
understood by g_icon_deserialize(), yielding one of the built-in icon
types.
#NAME: cancellable
#PARENT: Gio.LoadableIcon.load_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_default_for_uri_scheme
#PARENT: Gio.AppInfo.get_default_for_uri_scheme
#COMMENT: #GAppInfo for given @uri_scheme or %NULL on error.
#NAME: read_byte
#PARENT: Gio.BufferedInputStream.read_byte
#COMMENT: the byte read from the @stream, or -1 on end of stream or error.
#NAME: object
#PARENT: Gio.simple_async_report_take_gerror_in_idle.none
#COMMENT: a #GObject, or %NULL
#NAME: count
#PARENT: Gio.BufferedInputStreamClass.fill_async.fill_async.none
#COMMENT: the number of bytes that will be read from the stream
#NAME: interface_name
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: D-Bus interface to invoke method on
#NAME: manager
#PARENT: Gio.DBusObjectManagerClient.get_flags.DBusObjectManagerClientFlags
#COMMENT: A #GDBusObjectManagerClient
#NAME: info
#PARENT: Gio.FileInfo.set_content_type.none
#COMMENT: a #GFileInfo.
#NAME: get_name
#PARENT: Gio.Mount.get_name
#COMMENT: the name for the given @mount.
    The returned string should be freed with g_free()
    when no longer needed.
#NAME: fd
#PARENT: Gio.UnixConnection.send_fd.gboolean
#COMMENT: a file descriptor
#NAME: new
#PARENT: Gio.UnixFDMessage.new
#COMMENT: a new #GUnixFDMessage
#NAME: interface-proxy-signal
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Emitted when a D-Bus signal is received on @interface_proxy.

This signal exists purely as a convenience to avoid having to
connect signals to all interface proxies managed by @manager.

This signal is emitted in the
[thread-default main context][g-main-context-push-thread-default]
that @manager was constructed in.
#NAME: had_error
#PARENT: Gio.Task
#COMMENT: Tests if @task resulted in an error.
#NAME: FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be polled.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: free
#PARENT: Gio.UnixMountPoint
#COMMENT: Frees a unix mount point.
#NAME: get_unix_user
#PARENT: Gio.Credentials.get_unix_user
#COMMENT: The UNIX user identifier or -1 if @error is set.
#NAME: lookup
#PARENT: Gio.IOExtensionPoint
#COMMENT: Looks up an existing extension point.
#NAME: flags
#PARENT: Gio.OutputStream.splice_async.none
#COMMENT: a set of #GOutputStreamSpliceFlags.
#NAME: cancellable
#PARENT: Gio.FileIface.measure_disk_usage.measure_disk_usage.gboolean
#COMMENT: optional #GCancellable
#NAME: result
#PARENT: Gio.TlsInteractionClass.ask_password_finish.ask_password_finish.TlsInteractionResult
#COMMENT: the result passed to the callback
#NAME: get_icon
#PARENT: Gio.Emblem
#COMMENT: Gives back the icon from @emblem.
#NAME: result
#PARENT: Gio.NetworkMonitor.can_reach_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: proxy
#PARENT: Gio.ProxyInterface.connect.connect.IOStream
#COMMENT: a #GProxy
#NAME: get_successful
#PARENT: Gio.Subprocess.get_successful
#COMMENT: %TRUE if the process exited cleanly with a exit status of 0
#NAME: do_not_load_properties
#PARENT: Gio.DBusProxyFlags
#COMMENT: Don't load properties.
#NAME: new
#PARENT: Gio.TlsPassword.new
#COMMENT: The newly allocated password object
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.set_op_res_gboolean.none
#COMMENT: a #GSimpleAsyncResult.
#NAME: get_next
#PARENT: Gio.MenuLinkIter.get_next
#COMMENT: %TRUE on success, or %FALSE if there is no additional link
#NAME: progress_data
#PARENT: Gio.FileIface.measure_disk_usage.measure_disk_usage.gboolean
#COMMENT: user_data for @progress_callback
#NAME: source
#PARENT: Gio.FileIface.copy.copy.gboolean
#COMMENT: input #GFile
#NAME: mount
#PARENT: Gio.Mount.get_sort_key.utf8
#COMMENT: A #GMount.
#NAME: user_data
#PARENT: Gio.AsyncInitable.init_async.none
#COMMENT: the data to pass to callback function
#NAME: label
#PARENT: Gio.Menu.prepend.none
#COMMENT: the section label, or %NULL
#NAME: create_readwrite
#PARENT: Gio.File
#COMMENT: Creates a new file and returns a stream for reading and
writing to it. The file must not already exist.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level
that is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
returned.

If a file or directory with this name already exists, the
%G_IO_ERROR_EXISTS error will be returned. Some file systems don't
allow all file names, and may return an %G_IO_ERROR_INVALID_FILENAME
error, and if the name is too long, %G_IO_ERROR_FILENAME_TOO_LONG
will be returned. Other errors are possible too, and depend on what
kind of filesystem the file is on.

Note that in many non-local file cases read and write streams are
not supported, so make sure you really need to do read and write
streaming, rather than just opening for reading or writing.
#NAME: write_finish
#PARENT: Gio.OutputStream
#COMMENT: Finishes a stream write operation.
#NAME: get_connections
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Gets a list of the connections that @interface_ is exported on.
#NAME: set_value
#PARENT: Gio.Settings
#COMMENT: Sets @key in @settings to @value.

It is a programmer error to give a @key that isn't contained in the
schema for @settings or for @value to have the incorrect type, per
the schema.

If @value is floating then this function consumes the reference.
#NAME: flags
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer_async.none
#COMMENT: flags which affect the lookup operation
#NAME: result
#PARENT: Gio.DriveIface.poll_for_media_finish.poll_for_media_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: can_poll
#PARENT: Gio.PollableInputStream
#COMMENT: Checks if @stream is actually pollable. Some classes may implement
#GPollableInputStream but have only certain instances of that class
be pollable. If this method returns %FALSE, then the behavior of
other #GPollableInputStream methods is undefined.

For any given stream, the value returned by this method is constant;
a stream cannot switch from pollable to non-pollable or vice versa.
#NAME: connection
#PARENT: Gio.BusNameVanishedCallback.none
#COMMENT: The #GDBusConnection the name is being watched on, or
    %NULL.
#NAME: set_resource_base_path
#PARENT: Gio.Application
#COMMENT: Sets (or unsets) the base resource path of @application.

The path is used to automatically load various [application
resources][gresource] such as menu layouts and action descriptions.
The various types of resources will be found at fixed names relative
to the given base path.

By default, the resource base path is determined from the application
ID by prefixing '/' and replacing each '.' with '/'.  This is done at
the time that the #GApplication object is constructed.  Changes to
the application ID after that point will not have an impact on the
resource base path.

As an example, if the application has an ID of "org.example.app" then
the default resource base path will be "/org/example/app".  If this
is a #GtkApplication (and you have not manually changed the path)
then Gtk will then search for the menus of the application at
"/org/example/app/gtk/menus.ui".

See #GResource for more information about adding resources to your
application.

You can disable automatic resource loading functionality by setting
the path to %NULL.

Changing the resource base path once the application is running is
not recommended.  The point at which the resource path is consulted
for forming paths for various purposes is unspecified.
#NAME: get_byte_order
#PARENT: Gio.DBusMessage
#COMMENT: Gets the byte order of @message.
#NAME: key
#PARENT: Gio.Settings.get_double.gdouble
#COMMENT: the key to get the value for
#NAME: file
#PARENT: Gio.File.mount_mountable.none
#COMMENT: input #GFile
#NAME: get_root
#PARENT: Gio.Mount
#COMMENT: Gets the root directory on @mount.
#NAME: get_default
#PARENT: Gio.Resolver
#COMMENT: Gets the default #GResolver. You should unref it when you are done
with it. #GResolver may use its reference count as a hint about how
many threads it should allocate for concurrent DNS resolutions.
#NAME: bus_unown_name
#PARENT: Gio
#COMMENT: Stops owning a name.
#NAME: register_subtree
#PARENT: Gio.DBusConnection
#COMMENT: Registers a whole subtree of dynamic objects.

The @enumerate and @introspection functions in @vtable are used to
convey, to remote callers, what nodes exist in the subtree rooted
by @object_path.

When handling remote calls into any node in the subtree, first the
@enumerate function is used to check if the node exists. If the node exists
or the #G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES flag is set
the @introspection function is used to check if the node supports the
requested method. If so, the @dispatch function is used to determine
where to dispatch the call. The collected #GDBusInterfaceVTable and
#gpointer will be used to call into the interface vtable for processing
the request.

All calls into user-provided code will be invoked in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this method from.

If an existing subtree is already registered at @object_path or
then @error is set to #G_IO_ERROR_EXISTS.

Note that it is valid to register regular objects (using
g_dbus_connection_register_object()) in a subtree registered with
g_dbus_connection_register_subtree() - if so, the subtree handler
is tried as the last resort. One way to think about a subtree
handler is to consider it a fallback handler for object paths not
registered via g_dbus_connection_register_object() or other bindings.

Note that @vtable will be copied so you cannot change it after
registration.

See this [server][gdbus-subtree-server] for an example of how to use
this method.
#NAME: pollable_stream_write_all
#PARENT: Gio.pollable_stream_write_all
#COMMENT: %TRUE on success, %FALSE if there was an error
#NAME: destroy
#PARENT: Gio.MemoryInputStream.new_from_data.InputStream
#COMMENT: function that is called to free @data, or %NULL
#NAME: result
#PARENT: Gio.InputStream.skip_finish.gssize
#COMMENT: a #GAsyncResult.
#NAME: object_type
#PARENT: Gio.Initable.new.GObject.Object
#COMMENT: a #GType supporting #GInitable.
#NAME: file
#PARENT: Gio.FileIface.query_info_finish.query_info_finish.FileInfo
#COMMENT: input #GFile
#NAME: flags
#PARENT: Gio.File.mount_mountable.none
#COMMENT: flags affecting the operation
#NAME: receive_credentials_finish
#PARENT: Gio.UnixConnection
#COMMENT: Finishes an asynchronous receive credentials operation started with
g_unix_connection_receive_credentials_async().
#NAME: level
#PARENT: Gio.ZlibCompressor.new.ZlibCompressor
#COMMENT: compression level (0-9), -1 for default
#NAME: shutdown
#PARENT: Gio.Application
#COMMENT: The ::shutdown signal is emitted only on the registered primary instance
immediately after the main loop terminates.
#NAME: stream
#PARENT: Gio.DataInputStream.read_uint64.guint64
#COMMENT: a given #GDataInputStream.
#NAME: platform_data
#PARENT: Gio.RemoteActionGroupInterface.activate_action_full.activate_action_full.none
#COMMENT: the platform data to send
#NAME: make_backup
#PARENT: Gio.File.replace_contents.gboolean
#COMMENT: %TRUE if a backup should be created
#NAME: FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW
#PARENT: Gio
#COMMENT: A key in the "filesystem" namespace for hinting a file manager
application whether it should preview (e.g. thumbnail) files on the
file system. The value for this key contain a
#GFilesystemPreviewType.
#NAME: cancellable
#PARENT: Gio.Subprocess.wait_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: request_certificate
#PARENT: Gio.TlsInteraction
#COMMENT: Run synchronous interaction to ask the user to choose a certificate to use
with the connection. In general, g_tls_interaction_invoke_request_certificate()
should be used instead of this function.

Derived subclasses usually implement a certificate selector, although they may
also choose to provide a certificate from elsewhere. Alternatively the user may
abort this certificate request, which will usually abort the TLS connection.

If %G_TLS_INTERACTION_HANDLED is returned, then the #GTlsConnection
passed to g_tls_interaction_request_certificate() will have had its
#GTlsConnection:certificate filled in.

If the interaction is cancelled by the cancellation object, or by the
user then %G_TLS_INTERACTION_FAILED will be returned with an error that
contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
not support immediate cancellation.
#NAME: set_inactivity_timeout
#PARENT: Gio.Application
#COMMENT: Sets the current inactivity timeout for the application.

This is the amount of time (in milliseconds) after the last call to
g_application_release() before the application stops running.

This call has no side effects of its own.  The value set here is only
used for next time g_application_release() drops the use count to
zero.  Any timeouts currently in progress are not impacted.
#NAME: get_error_name
#PARENT: Gio.DBusMessage.get_error_name
#COMMENT: The value.
#NAME: get_environ
#PARENT: Gio.ApplicationCommandLine.get_environ
#COMMENT: the environment
strings, or %NULL if they were not sent
#NAME: none
#PARENT: Gio.DBusMessageFlags
#COMMENT: No flags set.
#NAME: little_endian
#PARENT: Gio.DataStreamByteOrder
#COMMENT: Selects Little Endian byte order.
#NAME: get_default_value
#PARENT: Gio.SettingsSchemaKey
#COMMENT: Gets the default value for @key.

Note that this is the default value according to the schema.  System
administrator defaults and lockdown are not visible via this API.
#NAME: get
#PARENT: Gio.UnixFDList
#COMMENT: Gets a file descriptor out of @list.

@index_ specifies the index of the file descriptor to get.  It is a
programmer error for @index_ to be out of range; see
g_unix_fd_list_get_length().

The file descriptor is duplicated using dup() and set as
close-on-exec before being returned.  You must call close() on it
when you are done.

A possible cause of failure is exceeding the per-process or
system-wide file descriptor limit.
#NAME: has_action
#PARENT: Gio.ActionGroupInterface.has_action.has_action
#COMMENT: whether the named action exists
#NAME: if_always
#PARENT: Gio.FilesystemPreviewType
#COMMENT: Only preview files if user has explicitly requested it.
#NAME: get_socket_type
#PARENT: Gio.Socket.get_socket_type
#COMMENT: a #GSocketType
#NAME: cancellable
#PARENT: Gio.DBusProxy.new_for_bus.none
#COMMENT: A #GCancellable or %NULL.
#NAME: cancellable
#PARENT: Gio.File.delete.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: value
#PARENT: Gio.ActionGroup.action-state-changed.none
#COMMENT: the new value of the state
#NAME: steal_as_bytes
#PARENT: Gio.MemoryOutputStream
#COMMENT: Returns data from the @ostream as a #GBytes. @ostream must be
closed before calling this function.
#NAME: connect_to_uri_async
#PARENT: Gio.SocketClient
#COMMENT: This is the asynchronous version of g_socket_client_connect_to_uri().

When the operation is finished @callback will be
called. You can then call g_socket_client_connect_to_uri_finish() to get
the result of the operation.
#NAME: items-changed
#PARENT: Gio.ListModel
#COMMENT: This signal is emitted whenever items were added or removed to
@list. At @position, @removed items were removed and @added items
were added in their place.
#NAME: action_name
#PARENT: Gio.RemoteActionGroupInterface.activate_action_full.activate_action_full.none
#COMMENT: the name of the action to activate
#NAME: io_priority
#PARENT: Gio.SimpleAsyncResult.run_in_thread.none
#COMMENT: the io priority of the request.
#NAME: get_family
#PARENT: Gio.InetAddress
#COMMENT: Gets @address's family
#NAME: lookup_by_name
#PARENT: Gio.ResolverClass.lookup_by_name.lookup_by_name
#COMMENT: a non-empty #GList
of #GInetAddress, or %NULL on error. You
must unref each of the addresses and free the list when you are
done with it. (You can use g_resolver_free_addresses() to do this.)
#NAME: conn
#PARENT: Gio.TlsConnection.get_interaction.TlsInteraction
#COMMENT: a connection
#NAME: io_priority
#PARENT: Gio.OutputStreamClass.close_async.close_async.none
#COMMENT: the io priority of the request.
#NAME: DriveStartStopType
#PARENT: Gio
#COMMENT: Enumeration describing how a drive can be started/stopped.
#NAME: is_mutable
#PARENT: Gio.MenuModel.is_mutable
#COMMENT: %TRUE if the model is mutable (ie: "items-changed" may be
    emitted).
#NAME: removed
#PARENT: Gio.Volume
#COMMENT: This signal is emitted when the #GVolume have been removed. If
the recipient is holding references to the object they should
release them so the object can be finalized.
#NAME: arg0
#PARENT: Gio.DBusConnection.signal_subscribe.guint
#COMMENT: contents of first string argument to match on or %NULL
    to match on all kinds of arguments
#NAME: verify_chain_finish
#PARENT: Gio.TlsDatabaseClass.verify_chain_finish.verify_chain_finish
#COMMENT: the appropriate #GTlsCertificateFlags which represents the
result of verification.
#NAME: message
#PARENT: Gio.DBusMessage.set_flags.none
#COMMENT: A #GDBusMessage.
#NAME: proxy
#PARENT: Gio.DBusProxy.get_name_owner.utf8
#COMMENT: A #GDBusProxy.
#NAME: callback
#PARENT: Gio.NetworkMonitorInterface.can_reach_async.can_reach_async.none
#COMMENT: a #GAsyncReadyCallback to call when the
    request is satisfied
#NAME: ConverterOutputStream
#PARENT: Gio
#COMMENT: Converter output stream implements #GOutputStream and allows
conversion of data of various types during reading.

As of GLib 2.34, #GConverterOutputStream implements
#GPollableOutputStream.
#NAME: get_interface_name
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Gets the name of the D-Bus interface the method was invoked on.

If this method call is a property Get, Set or GetAll call that has
been redirected to the method call handler then
"org.freedesktop.DBus.Properties" will be returned.  See
#GDBusInterfaceVTable for more information.
#NAME: action_removed
#PARENT: Gio.ActionGroup
#COMMENT: Emits the #GActionGroup::action-removed signal on @action_group.

This function should only be called by #GActionGroup implementations.
#NAME: file
#PARENT: Gio.File.append_to_finish.FileOutputStream
#COMMENT: input #GFile
#NAME: out_child
#PARENT: Gio.FileEnumerator.iterate.gboolean
#COMMENT: Output location for the next #GFile, or %NULL
#NAME: quark
#PARENT: Gio.ResolverError.quark
#COMMENT: a #GQuark.
#NAME: ApplicationClass
#PARENT: Gio
#COMMENT: Virtual function table for #GApplication.
#NAME: g_iface
#PARENT: Gio.TlsBackendInterface
#COMMENT: The parent interface.
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.get_vtable.DBusInterfaceVTable
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: tmpl
#PARENT: Gio.file_new_tmp.File
#COMMENT: Template for the file
  name, as in g_file_open_tmp(), or %NULL for a default template
#NAME: signal_subscribe
#PARENT: Gio.DBusConnection.signal_subscribe
#COMMENT: a subscription identifier that can be used with g_dbus_connection_signal_unsubscribe()
#NAME: get_etag
#PARENT: Gio.FileInfo
#COMMENT: Gets the [entity tag][gfile-etag] for a given
#GFileInfo. See %G_FILE_ATTRIBUTE_ETAG_VALUE.
#NAME: socket
#PARENT: Gio.Socket.get_protocol.SocketProtocol
#COMMENT: a #GSocket.
#NAME: take_stderr_fd
#PARENT: Gio.SubprocessLauncher
#COMMENT: Sets the file descriptor to use as the stderr for spawned processes.

If @fd is -1 then any previously given fd is unset.

Note that the default behaviour is to pass stderr through to the
stderr of the parent process.

The passed @fd belongs to the #GSubprocessLauncher.  It will be
automatically closed when the launcher is finalized.  The file
descriptor will also be closed on the child side when executing the
spawned process.

You may not set a stderr fd if a stderr file path is already set or
if the launcher flags contain any flags directing stderr elsewhere.

This feature is only available on UNIX.
#NAME: size
#PARENT: Gio.LoadableIconIface.load_async.load_async.none
#COMMENT: an integer.
#NAME: FILE_ATTRIBUTE_FILESYSTEM_TYPE
#PARENT: Gio
#COMMENT: A key in the "filesystem" namespace for getting the file system's type.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: flags
#PARENT: Gio.File.replace.FileOutputStream
#COMMENT: a set of #GFileCreateFlags
#NAME: display_name
#PARENT: Gio.File.set_display_name_async.none
#COMMENT: a string
#NAME: get_protocol
#PARENT: Gio.SocketClient
#COMMENT: Gets the protocol name type of the socket client.

See g_socket_client_set_protocol() for details.
#NAME: stream
#PARENT: Gio.FilterInputStream.get_base_stream.InputStream
#COMMENT: a #GFilterInputStream.
#NAME: bus_get_sync
#PARENT: Gio
#COMMENT: Synchronously connects to the message bus specified by @bus_type.
Note that the returned object may shared with other callers,
e.g. if two separate parts of a process calls this function with
the same @bus_type, they will share the same object.

This is a synchronous failable function. See g_bus_get() and
g_bus_get_finish() for the asynchronous version.

The returned object is a singleton, that is, shared with other
callers of g_bus_get() and g_bus_get_sync() for @bus_type. In the
event that you need a private message bus connection, use
g_dbus_address_get_for_bus_sync() and
g_dbus_connection_new_for_address().

Note that the returned #GDBusConnection object will (usually) have
the #GDBusConnection:exit-on-close property set to %TRUE.
#NAME: cancellable
#PARENT: Gio.File.measure_disk_usage_async.none
#COMMENT: optional #GCancellable
#NAME: cancellable
#PARENT: Gio.PollableOutputStreamInterface.create_source.create_source.GLib.Source
#COMMENT: a #GCancellable, or %NULL
#NAME: parameter_type
#PARENT: Gio.ActionGroup.query_action.gboolean
#COMMENT: the parameter type, or %NULL if none needed
#NAME: file
#PARENT: Gio.File.monitor_file.FileMonitor
#COMMENT: input #GFile
#NAME: set_attribute_object
#PARENT: Gio.FileInfo
#COMMENT: Sets the @attribute to contain the given @attr_value,
if possible.
#NAME: allow_replacement
#PARENT: Gio.BusNameOwnerFlags
#COMMENT: Allow another message bus connection to claim the name.
#NAME: file
#PARENT: Gio.FileIface.get_parse_name.get_parse_name.utf8
#COMMENT: input #GFile
#NAME: stream
#PARENT: Gio.BufferedOutputStream.get_auto_grow.gboolean
#COMMENT: a #GBufferedOutputStream.
#NAME: callback
#PARENT: Gio.DBusObjectManagerClient.new.none
#COMMENT: A #GAsyncReadyCallback to call when the request is satisfied.
#NAME: cancellable
#PARENT: Gio.File.read_fn.FileInputStream
#COMMENT: a #GCancellable
#NAME: type
#PARENT: Gio.FileAttributeInfo
#COMMENT: the #GFileAttributeType type of the attribute.
#NAME: items_changed
#PARENT: Gio.MenuModel
#COMMENT: Requests emission of the #GMenuModel::items-changed signal on @model.

This function should never be called except by #GMenuModel
subclasses.  Any other calls to this function will very likely lead
to a violation of the interface of the model.

The implementation should update its internal representation of the
menu before emitting the signal.  The implementation should further
expect to receive queries about the new state of the menu (and
particularly added menu items) while signal handlers are running.

The implementation must dispatch this call directly from a mainloop
entry and not in response to calls -- particularly those from the
#GMenuModel API.  Said another way: the menu must not change while
user code is running without returning to the mainloop.
#NAME: error
#PARENT: Gio.simple_async_report_gerror_in_idle.none
#COMMENT: the #GError to report
#NAME: startup
#PARENT: Gio.Application
#COMMENT: The ::startup signal is emitted on the primary instance immediately
after registration. See g_application_register().
#NAME: callback
#PARENT: Gio.BufferedInputStreamClass.fill_async.fill_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: matches_only
#PARENT: Gio.FileAttributeMatcher.matches_only
#COMMENT: %TRUE if the matcher only matches @attribute. %FALSE otherwise.
#NAME: bus_own_name
#PARENT: Gio.bus_own_name
#COMMENT: an identifier (never 0) that an be used with
    g_bus_unown_name() to stop owning the name.
#NAME: set_label
#PARENT: Gio.MenuItem
#COMMENT: Sets or unsets the "label" attribute of @menu_item.

If @label is non-%NULL it is used as the label for the menu item.  If
it is %NULL then the label attribute is unset.
#NAME: io_priority
#PARENT: Gio.FileInputStream.query_info_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: splice_async
#PARENT: Gio.IOStream
#COMMENT: Asyncronously splice the output stream of @stream1 to the input stream of
@stream2, and splice the output stream of @stream2 to the input stream of
@stream1.

When the operation is finished @callback will be called.
You can then call g_io_stream_splice_finish() to get the
result of the operation.
#NAME: get_environ
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Gets the contents of the 'environ' variable of the command line
invocation, as would be returned by g_get_environ(), ie as a
%NULL-terminated list of strings in the form 'NAME=VALUE'.
The strings may contain non-utf8 data.

The remote application usually does not send an environment.  Use
%G_APPLICATION_SEND_ENVIRONMENT to affect that.  Even with this flag
set it is possible that the environment is still not available (due
to invocation messages from other applications).

The return value should not be modified or freed and is valid for as
long as @cmdline exists.

See g_application_command_line_getenv() if you are only interested
in the value of a single environment variable.
#NAME: content_type_from_mime_type
#PARENT: Gio.content_type_from_mime_type
#COMMENT: Newly allocated string with content type or
    %NULL. Free with g_free()
#NAME: flags
#PARENT: Gio.MountIface.eject.eject.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: list
#PARENT: Gio.FileAttributeInfoList.add.none
#COMMENT: a #GFileAttributeInfoList.
#NAME: get_fd
#PARENT: Gio.UnixInputStream
#COMMENT: Return the UNIX file descriptor that the stream reads from.
#NAME: srv_target_list_sort
#PARENT: Gio
#COMMENT: Sorts @targets in place according to the algorithm in RFC 2782.
#NAME: notification
#PARENT: Gio.Application.send_notification.none
#COMMENT: the #GNotification to send
#NAME: resource
#PARENT: Gio.Resource.ref.Resource
#COMMENT: A #GResource
#NAME: get_flags
#PARENT: Gio.DBusMessage.get_flags
#COMMENT: Flags that are set (typically values from the #GDBusMessageFlags enumeration bitwise ORed together).
#NAME: key
#PARENT: Gio.Settings.get_uint.guint
#COMMENT: the key to get the value for
#NAME: copy_with_file
#PARENT: Gio.FileAttributeInfoFlags
#COMMENT: copy the attribute values when the file is copied.
#NAME: set_pending
#PARENT: Gio.FileEnumerator
#COMMENT: Sets the file enumerator as having pending operations.
#NAME: set
#PARENT: Gio.Settings.set
#COMMENT: %TRUE if setting the key succeeded,
    %FALSE if the key was not writable
#NAME: stop_finish
#PARENT: Gio.Drive
#COMMENT: Finishes stopping a drive.
#NAME: socket
#PARENT: Gio.Socket.connect.gboolean
#COMMENT: a #GSocket.
#NAME: new
#PARENT: Gio.FileAttributeMatcher
#COMMENT: Creates a new file attribute matcher, which matches attributes
against a given string. #GFileAttributeMatchers are reference
counted structures, and are created with a reference count of 1. If
the number of references falls to 0, the #GFileAttributeMatcher is
automatically destroyed.

The @attribute string should be formatted with specific keys separated
from namespaces with a double colon. Several "namespace::key" strings may be
concatenated with a single comma (e.g. "standard::type,standard::is-hidden").
The wildcard "*" may be used to match all keys and namespaces, or
"namespace::*" will match all keys in a given namespace.

## Examples of file attribute matcher strings and results

- `"*"`: matches all attributes.
- `"standard::is-hidden"`: matches only the key is-hidden in the
  standard namespace.
- `"standard::type,unix::*"`: matches the type key in the standard
  namespace and all keys in the unix namespace.
#NAME: export_uniquely
#PARENT: Gio.DBusObjectManagerServer
#COMMENT: Like g_dbus_object_manager_server_export() but appends a string of
the form _N (with N being a natural number) to @object's object path
if an object with the given path already exists. As such, the
#GDBusObjectProxy:g-object-path property of @object may be modified.
#NAME: mount_operation
#PARENT: Gio.Volume.eject_with_operation.none
#COMMENT: a #GMountOperation or %NULL to
    avoid user interaction
#NAME: mount
#PARENT: Gio.Mount.get_default_location.File
#COMMENT: a #GMount.
#NAME: get_startup_wm_class
#PARENT: Gio.DesktopAppInfo.get_startup_wm_class
#COMMENT: the startup WM class, or %NULL if none is set
in the desktop file.
#NAME: ref
#PARENT: Gio.SettingsSchema.ref
#COMMENT: a new reference to @schema
#NAME: socket
#PARENT: Gio.Socket.set_broadcast.none
#COMMENT: a #GSocket.
#NAME: cancellable
#PARENT: Gio.File.make_directory_with_parents.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: permission
#PARENT: Gio.PermissionClass.release_async.release_async.none
#COMMENT: a #GPermission instance
#NAME: monitor_file
#PARENT: Gio.File
#COMMENT: Obtains a file monitor for the given file. If no file notification
mechanism exists, then regular polling of the file is used.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

If @flags contains %G_FILE_MONITOR_WATCH_HARD_LINKS then the monitor
will also attempt to report changes made to the file via another
filename (ie, a hard link). Without this flag, you can only rely on
changes made through the filename contained in @file to be
reported. Using this flag may result in an increase in resource
usage, and may not have any effect depending on the #GFileMonitor
backend and/or filesystem type.
#NAME: etag
#PARENT: Gio.FileIface.replace_readwrite_async.replace_readwrite_async.none
#COMMENT: an [entity tag][gfile-etag] for the current #GFile,
    or %NULL to ignore
#NAME: user_data
#PARENT: Gio.TlsConnection.handshake_async.none
#COMMENT: the data to pass to the callback function
#NAME: new
#PARENT: Gio.UnixInputStream
#COMMENT: Creates a new #GUnixInputStream for the given @fd.

If @close_fd is %TRUE, the file descriptor will be closed
when the stream is closed.
#NAME: newv_async
#PARENT: Gio.AsyncInitable
#COMMENT: Helper function for constructing #GAsyncInitable object. This is
similar to g_object_newv() but also initializes the object asynchronously.

When the initialization is finished, @callback will be called. You can
then call g_async_initable_new_finish() to get the new object and check
for any errors.
#NAME: stream
#PARENT: Gio.OutputStream.splice.gssize
#COMMENT: a #GOutputStream.
#NAME: volume
#PARENT: Gio.Volume.get_icon.Icon
#COMMENT: a #GVolume
#NAME: reporting
#PARENT: Gio.FileMeasureProgressCallback.none
#COMMENT: %TRUE if more reports will come
#NAME: flags
#PARENT: Gio.DBusProxy.new_sync.DBusProxy
#COMMENT: Flags used when constructing the proxy.
#NAME: interface_proxy
#PARENT: Gio.DBusObjectManagerClient.interface-proxy-signal.none
#COMMENT: The #GDBusProxy that is emitting a D-Bus signal.
#NAME: new_from_data
#PARENT: Gio.MemoryInputStream
#COMMENT: Creates a new #GMemoryInputStream with data in memory of a given size.
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.change_action_state.change_action_state.none
#COMMENT: a #GActionGroup
#NAME: stderr_silence
#PARENT: Gio.SubprocessFlags
#COMMENT: silence the stderr of the spawned
  process (ie: redirect to /dev/null).
#NAME: query
#PARENT: Gio.IOModule.query
#COMMENT: A %NULL-terminated array of strings,
    listing the supported extension points of the module. The array
    must be suitable for freeing with g_strfreev().
#NAME: result
#PARENT: Gio.File.mount_mountable_finish.File
#COMMENT: a #GAsyncResult
#NAME: attributes
#PARENT: Gio.FileOutputStream.query_info_async.none
#COMMENT: a file attribute query string.
#NAME: arg
#PARENT: Gio.Application.add_main_option.none
#COMMENT: the type of the option, as a #GOptionArg
#NAME: handshake_async
#PARENT: Gio.TlsConnection
#COMMENT: Asynchronously performs a TLS handshake on @conn. See
g_tls_connection_handshake() for more information.
#NAME: connection
#PARENT: Gio.DBusConnection.start_message_processing.none
#COMMENT: a #GDBusConnection
#NAME: file
#PARENT: Gio.File.enumerate_children_finish.FileEnumerator
#COMMENT: input #GFile
#NAME: flags
#PARENT: Gio.DBusConnection.send_message_with_reply.none
#COMMENT: flags affecting how the message is sent
#NAME: overwrite
#PARENT: Gio.FileCopyFlags
#COMMENT: Overwrite any existing files
#NAME: model
#PARENT: Gio.MenuModel.get_item_attributes.none
#COMMENT: the #GMenuModel to query
#NAME: unregister_subtree
#PARENT: Gio.DBusConnection
#COMMENT: Unregisters a subtree.
#NAME: kind
#PARENT: Gio.DriveIface.get_identifier.get_identifier.utf8
#COMMENT: the kind of identifier to return
#NAME: buffer
#PARENT: Gio.PollableOutputStream.write_nonblocking.gssize
#COMMENT: a buffer to write
    data from
#NAME: user_data
#PARENT: Gio.InputStream.close_async.none
#COMMENT: the data to pass to callback function
#NAME: interface-removed
#PARENT: Gio.DBusObjectManager
#COMMENT: Emitted when @interface has been removed from @object.

This signal exists purely as a convenience to avoid having to
connect signals to all objects managed by @manager.
#NAME: FILE_ATTRIBUTE_UNIX_UID
#PARENT: Gio
#COMMENT: A key in the "unix" namespace for getting the user ID for the file.
This attribute is only available for UNIX file systems.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: get_username
#PARENT: Gio.ProxyAddress.get_username
#COMMENT: the @proxy's username
#NAME: MENU_ATTRIBUTE_ICON
#PARENT: Gio
#COMMENT: The menu item attribute which holds the icon of the item.

The icon is stored in the format returned by g_icon_serialize().

This attribute is intended only to represent 'noun' icons such as
favicons for a webpage, or application icons.  It should not be used
for 'verbs' (ie: stock icons).
#NAME: get_local
#PARENT: Gio.Vfs
#COMMENT: Gets the local #GVfs for the system.
#NAME: not_supported
#PARENT: Gio.IOErrorEnum
#COMMENT: Operation (or one of its parameters) not supported
#NAME: move
#PARENT: Gio.File
#COMMENT: Tries to move the file or directory @source to the location specified
by @destination. If native move operations are supported then this is
used, otherwise a copy + delete fallback is used. The native
implementation may support moving directories (for instance on moves
inside the same filesystem), but the fallback code does not.

If the flag #G_FILE_COPY_OVERWRITE is specified an already
existing @destination file is overwritten.

If the flag #G_FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks
will be copied as symlinks, otherwise the target of the
@source symlink will be copied.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

If @progress_callback is not %NULL, then the operation can be monitored
by setting this to a #GFileProgressCallback function.
@progress_callback_data will be passed to this function. It is
guaranteed that this callback will be called after all data has been
transferred with the total number of bytes copied during the operation.

If the @source file does not exist, then the %G_IO_ERROR_NOT_FOUND
error is returned, independent on the status of the @destination.

If #G_FILE_COPY_OVERWRITE is not specified and the target exists,
then the error %G_IO_ERROR_EXISTS is returned.

If trying to overwrite a file over a directory, the %G_IO_ERROR_IS_DIRECTORY
error is returned. If trying to overwrite a directory with a directory the
%G_IO_ERROR_WOULD_MERGE error is returned.

If the source is a directory and the target does not exist, or
#G_FILE_COPY_OVERWRITE is specified and the target is a file, then
the %G_IO_ERROR_WOULD_RECURSE error may be returned (if the native
move operation isn't available).
#NAME: set_state
#PARENT: Gio.SimpleAction
#COMMENT: Sets the state of the action.

This directly updates the 'state' property to the given value.

This should only be called by the implementor of the action.  Users
of the action should not attempt to directly modify the 'state'
property.  Instead, they should call g_action_change_state() to
request the change.

If the @value GVariant is floating, it is consumed.
#NAME: cancellable
#PARENT: Gio.File.find_enclosing_mount_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: method_call_message
#PARENT: Gio.DBusMessage.new_method_error_literal.DBusMessage
#COMMENT: A message of type %G_DBUS_MESSAGE_TYPE_METHOD_CALL to
create a reply message to.
#NAME: kind
#PARENT: Gio.Drive.get_identifier.utf8
#COMMENT: the kind of identifier to return
#NAME: bytes_written
#PARENT: Gio.OutputStream.vprintf.gboolean
#COMMENT: location to store the number of bytes that was
    written to the stream
#NAME: emit_signal
#PARENT: Gio.DBusConnection.emit_signal
#COMMENT: %TRUE unless @error is set
#NAME: info
#PARENT: Gio.DBusPropertyInfo.ref.DBusPropertyInfo
#COMMENT: A #GDBusPropertyInfo
#NAME: notification
#PARENT: Gio.Notification.add_button_with_target.none
#COMMENT: a #GNotification
#NAME: lookup_by_name_finish
#PARENT: Gio.Resolver.lookup_by_name_finish
#COMMENT: a #GList
of #GInetAddress, or %NULL on error. See g_resolver_lookup_by_name()
for more details.
#NAME: can-release
#PARENT: Gio.Permission
#COMMENT: %TRUE if it is generally possible to release the permission by calling
g_permission_release().
#NAME: recursive
#PARENT: Gio.SettingsSchemaSource.list_schemas.none
#COMMENT: if we should recurse
#NAME: file
#PARENT: Gio.FileIface.copy_finish.copy_finish.gboolean
#COMMENT: input #GFile
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.query_action.query_action.gboolean
#COMMENT: a #GActionGroup
#NAME: get_password
#PARENT: Gio.ProxyAddress.get_password
#COMMENT: the @proxy's password
#NAME: service
#PARENT: Gio.SocketClient.connect_to_service.SocketConnection
#COMMENT: the name of the service to connect to
#NAME: result
#PARENT: Gio.File.stop_mountable_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: new
#PARENT: Gio.ZlibDecompressor
#COMMENT: Creates a new #GZlibDecompressor.
#NAME: position
#PARENT: Gio.ListModel.items_changed.none
#COMMENT: the position at which @list changed
#NAME: to_native
#PARENT: Gio.SocketAddress.to_native
#COMMENT: %TRUE if @dest was filled in, %FALSE on error
#NAME: application
#PARENT: Gio.Application.get_is_remote.gboolean
#COMMENT: a #GApplication
#NAME: cancellable
#PARENT: Gio.Resolver.lookup_by_address_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: exit_on_close
#PARENT: Gio.DBusConnection.set_exit_on_close.none
#COMMENT: whether the process should be terminated
    when @connection is closed by the remote peer
#NAME: lookup_certificate_issuer_finish
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer_finish
#COMMENT: a newly allocated issuer #GTlsCertificate,
or %NULL. Use g_object_unref() to release the certificate.
#NAME: FILE_ATTRIBUTE_OWNER_USER_REAL
#PARENT: Gio
#COMMENT: A key in the "owner" namespace for getting the real name of the
user that owns the file. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: source_object
#PARENT: Gio.SocketListener.accept_socket_finish.Socket
#COMMENT: Optional #GObject identifying this source
#NAME: length
#PARENT: Gio.UnixFDMessage.steal_fds.gint
#COMMENT: pointer to the length of the returned
    array, or %NULL
#NAME: 
#PARENT: Gio.SimpleAsyncResult.new_error.SimpleAsyncResult...
#COMMENT: a list of values to insert into @format.
#NAME: get_connection
#PARENT: Gio.DBusInterfaceSkeleton.get_connection
#COMMENT: A #GDBusConnection or %NULL if @interface_ is
not exported anywhere. Do not free, the object belongs to @interface_.
#NAME: is_active
#PARENT: Gio.Vfs.is_active
#COMMENT: %TRUE if construction of the @vfs was successful
    and it is now active.
#NAME: chain
#PARENT: Gio.TlsDatabase.verify_chain.TlsCertificateFlags
#COMMENT: a #GTlsCertificate chain
#NAME: content_type_get_description
#PARENT: Gio.content_type_get_description
#COMMENT: a short description of the content type @type. Free the
    returned string with g_free()
#NAME: cancellable
#PARENT: Gio.OutputStreamClass.flush.flush.gboolean
#COMMENT: optional cancellable object
#NAME: address
#PARENT: Gio.InetAddress.equal.gboolean
#COMMENT: A #GInetAddress.
#NAME: matches
#PARENT: Gio.FileAttributeMatcher.matches
#COMMENT: %TRUE if @attribute matches @matcher. %FALSE otherwise.
#NAME: timed_out
#PARENT: Gio.DBusError
#COMMENT: Certain timeout errors, e.g. while starting a service. Warning: this is
confusingly-named given that %G_DBUS_ERROR_TIMEOUT also exists. We
can't fix it for compatibility reasons so just be careful.
#NAME: drive-connected
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when a drive is connected to the system.
#NAME: call_with_unix_fd_list_finish
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_finish
#COMMENT: %NULL if @error is set. Otherwise a #GVariant tuple with
    return values. Free with g_variant_unref().
#NAME: new_sync
#PARENT: Gio.DBusServer
#COMMENT: Creates a new D-Bus server that listens on the first address in
@address that works.

Once constructed, you can use g_dbus_server_get_client_address() to
get a D-Bus address string that clients can use to connect.

Connect to the #GDBusServer::new-connection signal to handle
incoming connections.

The returned #GDBusServer isn't active - you have to start it with
g_dbus_server_start().

#GDBusServer is used in this [example][gdbus-peer-to-peer].

This is a synchronous failable constructor. See
g_dbus_server_new() for the asynchronous version.
#NAME: description
#PARENT: Gio.TlsPassword.new.TlsPassword
#COMMENT: description of what the password is for
#NAME: error_code
#PARENT: Gio.dbus_error_register_error.gboolean
#COMMENT: An error code.
#NAME: get_names
#PARENT: Gio.ThemedIcon.get_names
#COMMENT: a list of icon names.
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.return_gerror.none
#COMMENT: A #GDBusMethodInvocation.
#NAME: can_reach_finish
#PARENT: Gio.NetworkMonitor
#COMMENT: Finishes an async network connectivity test.
See g_network_monitor_can_reach_async().
#NAME: name_lost_handler
#PARENT: Gio.bus_own_name_on_connection.guint
#COMMENT: handler to invoke when @name is lost or %NULL
#NAME: permission_denied
#PARENT: Gio.IOErrorEnum
#COMMENT: Permission denied.
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.get_action_enabled.get_action_enabled.gboolean
#COMMENT: the name of the action to query
#NAME: op
#PARENT: Gio.MountOperation.set_domain.none
#COMMENT: a #GMountOperation.
#NAME: cancellable
#PARENT: Gio.OutputStreamClass.write_async.write_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: user_data
#PARENT: Gio.simple_async_report_take_gerror_in_idle.none
#COMMENT: user data passed to @callback.
#NAME: name
#PARENT: Gio.BusNameAppearedCallback.none
#COMMENT: The name being watched.
#NAME: database
#PARENT: Gio.TlsConnection.set_database.none
#COMMENT: a #GTlsDatabase
#NAME: FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE)
is automatically polled for media.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: little_endian
#PARENT: Gio.DBusMessageByteOrder
#COMMENT: The byte order is little endian.
#NAME: cancellable
#PARENT: Gio.IOStream.splice_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: start_mountable_finish
#PARENT: Gio.File
#COMMENT: Finishes a start operation. See g_file_start_mountable() for details.

Finish an asynchronous start operation that was started
with g_file_start_mountable().
#NAME: get_bus_address
#PARENT: Gio.TestDBus.get_bus_address
#COMMENT: the address of the bus, or %NULL.
#NAME: menu
#PARENT: Gio.Menu.insert_submenu.none
#COMMENT: a #GMenu
#NAME: close_finish
#PARENT: Gio.OutputStream
#COMMENT: Closes an output stream.
#NAME: source
#PARENT: Gio.SettingsSchemaSource.unref.none
#COMMENT: a #GSettingsSchemaSource
#NAME: create_certificate_handle
#PARENT: Gio.TlsDatabaseClass.create_certificate_handle.create_certificate_handle
#COMMENT: a newly allocated string containing the
handle.
#NAME: file
#PARENT: Gio.File.stop_mountable.none
#COMMENT: input #GFile
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_type.FileAttributeType
#COMMENT: a file attribute key.
#NAME: result
#PARENT: Gio.OutputStream.close_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.get_options.utf8
#COMMENT: a #GUnixMountPoint.
#NAME: content_types_get_registered
#PARENT: Gio.content_types_get_registered
#COMMENT: list of the registered
    content types
#NAME: DBusSignalCallback
#PARENT: Gio
#COMMENT: Signature for callback function used in g_dbus_connection_signal_subscribe().
#NAME: new
#PARENT: Gio.NetworkAddress.new
#COMMENT: the new #GNetworkAddress
#NAME: appinfo
#PARENT: Gio.AppInfo.set_as_last_used_for_type.gboolean
#COMMENT: a #GAppInfo.
#NAME: client
#PARENT: Gio.SocketClient.set_protocol.none
#COMMENT: a #GSocketClient.
#NAME: get_is_multicast
#PARENT: Gio.InetAddress.get_is_multicast
#COMMENT: %TRUE if @address is a multicast address.
#NAME: get_attribute_value
#PARENT: Gio.MenuItem.get_attribute_value
#COMMENT: the attribute value, or %NULL
#NAME: delete_file_async
#PARENT: Gio.File
#COMMENT: Asynchronously delete a file. If the @file is a directory, it will
only be deleted if it is empty.  This has the same semantics as
g_unlink().
#NAME: item
#PARENT: Gio.ListStore.insert_sorted.guint
#COMMENT: the new item
#NAME: get_allowed
#PARENT: Gio.Permission.get_allowed
#COMMENT: the value of the 'allowed' property
#NAME: user_data
#PARENT: Gio.Resolver.lookup_records_async.none
#COMMENT: data for @callback
#NAME: lookup
#PARENT: Gio.DesktopAppInfoLookup.get_default_for_uri_scheme.AppInfo
#COMMENT: a #GDesktopAppInfoLookup
#NAME: interface_name
#PARENT: Gio.DBusSubtreeDispatchFunc.DBusInterfaceVTable
#COMMENT: The D-Bus interface name that the method call or property access is for.
#NAME: io_priority
#PARENT: Gio.File.set_attributes_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: connect_finish
#PARENT: Gio.SocketConnection
#COMMENT: Gets the result of a g_socket_connection_connect_async() call.
#NAME: steal_data
#PARENT: Gio.MemoryOutputStream.steal_data
#COMMENT: the stream's data
#NAME: control_messages
#PARENT: Gio.OutputMessage
#COMMENT: a pointer
  to an array of #GSocketControlMessages, or %NULL.
#NAME: DBusObjectManager
#PARENT: Gio
#COMMENT: The #GDBusObjectManager type is the base type for service- and
client-side implementations of the standardized
[org.freedesktop.DBus.ObjectManager](http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager)
interface.

See #GDBusObjectManagerClient for the client-side implementation
and #GDBusObjectManagerServer for the service-side implementation.
#NAME: not_connected
#PARENT: Gio.IOErrorEnum
#COMMENT: Transport endpoint is not connected. Since 2.44
#NAME: splice_finish
#PARENT: Gio.OutputStream.splice_finish
#COMMENT: a #gssize of the number of bytes spliced. Note that if the
    number of bytes spliced is greater than %G_MAXSSIZE, then that
    will be returned, and there is no way to determine the actual
    number of bytes spliced.
#NAME: get_available_bytes
#PARENT: Gio.Socket
#COMMENT: Get the amount of data pending in the OS input buffer.

If @socket is a UDP or SCTP socket, this will return the size of
just the next packet, even if additional packets are buffered after
that one.

Note that on Windows, this function is rather inefficient in the
UDP case, and so if you know any plausible upper bound on the size
of the incoming packet, it is better to just do a
g_socket_receive() with a buffer of that size, rather than calling
g_socket_get_available_bytes() first and then doing a receive of
exactly the right size.
#NAME: app_info_get_default_for_type
#PARENT: Gio.app_info_get_default_for_type
#COMMENT: #GAppInfo for given @content_type or
    %NULL on error.
#NAME: menu_item
#PARENT: Gio.MenuItem.set_action_and_target_value.none
#COMMENT: a #GMenuItem
#NAME: cancellable
#PARENT: Gio.BufferedInputStream.read_byte.gint
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: g-object-path
#PARENT: Gio.DBusProxy
#COMMENT: The object path the proxy is for.
#NAME: lookup_flags
#PARENT: Gio.resources_lookup_data.GLib.Bytes
#COMMENT: A #GResourceLookupFlags
#NAME: get_enum
#PARENT: Gio.Settings.get_enum
#COMMENT: the enum value
#NAME: interface_
#PARENT: Gio.DBusObjectSkeleton.add_interface.none
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: get_is_mc_global
#PARENT: Gio.InetAddress.get_is_mc_global
#COMMENT: %TRUE if @address is a global multicast address.
#NAME: password
#PARENT: Gio.TlsPassword.set_value.none
#COMMENT: a #GTlsPassword object
#NAME: receive_fd
#PARENT: Gio.UnixConnection.receive_fd
#COMMENT: a file descriptor on success, -1 on error.
#NAME: count
#PARENT: Gio.InputStreamClass.read_async.read_async.none
#COMMENT: the number of bytes that will be read from the stream
#NAME: callback
#PARENT: Gio.IOStreamClass.close_async.close_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: unset
#PARENT: Gio.FileAttributeStatus
#COMMENT: Attribute value is unset (empty).
#NAME: info
#PARENT: Gio.FileInfo.set_attribute_status.gboolean
#COMMENT: a #GFileInfo
#NAME: SocketSourceFunc
#PARENT: Gio.SocketSourceFunc
#COMMENT: it should return %FALSE if the source should be removed.
#NAME: initable
#PARENT: Gio.AsyncInitable.init_finish.gboolean
#COMMENT: a #GAsyncInitable.
#NAME: new_signal
#PARENT: Gio.DBusMessage
#COMMENT: Creates a new #GDBusMessage for a signal emission.
#NAME: get_volumes
#PARENT: Gio.VolumeMonitor.get_volumes
#COMMENT: a #GList of #GVolume objects.
#NAME: size
#PARENT: Gio.LoadableIcon.load_async.none
#COMMENT: an integer.
#NAME: UnixCredentialsMessage
#PARENT: Gio
#COMMENT: This #GSocketControlMessage contains a #GCredentials instance.  It
may be sent using g_socket_send_message() and received using
g_socket_receive_message() over UNIX sockets (ie: sockets in the
%G_SOCKET_FAMILY_UNIX family).

For an easier way to send and receive credentials over
stream-oriented UNIX sockets, see
g_unix_connection_send_credentials() and
g_unix_connection_receive_credentials(). To receive credentials of
a foreign process connected to a socket, use
g_socket_get_credentials().
#NAME: info
#PARENT: Gio.FileInfo.set_attribute_uint32.none
#COMMENT: a #GFileInfo.
#NAME: can_stop
#PARENT: Gio.Drive
#COMMENT: Checks if a drive can be stopped.
#NAME: action
#PARENT: Gio.MenuItem.set_action_and_target_value.none
#COMMENT: the name of the action for this item
#NAME: NetworkService
#PARENT: Gio
#COMMENT: Like #GNetworkAddress does with hostnames, #GNetworkService
provides an easy way to resolve a SRV record, and then attempt to
connect to one of the hosts that implements that service, handling
service priority/weighting, multiple IP addresses, and multiple
address families.

See #GSrvTarget for more information about SRV records, and see
#GSocketConnectable for and example of using the connectable
interface.
#NAME: count
#PARENT: Gio.OutputStream.write_all.gboolean
#COMMENT: the number of bytes to write
#NAME: server-identity
#PARENT: Gio.TlsClientConnection
#COMMENT: A #GSocketConnectable describing the identity of the server that
is expected on the other end of the connection.

If the %G_TLS_CERTIFICATE_BAD_IDENTITY flag is set in
#GTlsClientConnection:validation-flags, this object will be used
to determine the expected identify of the remote end of the
connection; if #GTlsClientConnection:server-identity is not set,
or does not match the identity presented by the server, then the
%G_TLS_CERTIFICATE_BAD_IDENTITY validation will fail.

In addition to its use in verifying the server certificate,
this is also used to give a hint to the server about what
certificate we expect, which is useful for servers that serve
virtual hosts.
#NAME: res
#PARENT: Gio.DBusConnection.new_for_address_finish.DBusConnection
#COMMENT: a #GAsyncResult obtained from the #GAsyncReadyCallback passed
    to g_dbus_connection_new()
#NAME: size
#PARENT: Gio.LoadableIcon.load.InputStream
#COMMENT: an integer.
#NAME: cancellable
#PARENT: Gio.File.replace_contents_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: signal_name
#PARENT: Gio.DBusObjectManagerClient.interface-proxy-signal.none
#COMMENT: The signal name.
#NAME: user_data
#PARENT: Gio.bus_watch_name.guint
#COMMENT: User data to pass to handlers.
#NAME: new_signal
#PARENT: Gio.DBusMessage.new_signal
#COMMENT: A #GDBusMessage. Free with g_object_unref().
#NAME: timeout
#PARENT: Gio.DBusError
#COMMENT: Certain timeout errors, possibly ETIMEDOUT on a socket.  Note that
%G_DBUS_ERROR_NO_REPLY is used for message reply timeouts. Warning:
this is confusingly-named given that %G_DBUS_ERROR_TIMED_OUT also
exists. We can't fix it for compatibility reasons so just be
careful.
#NAME: printf
#PARENT: Gio.OutputStream.printf
#COMMENT: %TRUE on success, %FALSE if there was an error
#NAME: socket
#PARENT: Gio.Socket.get_available_bytes.gssize
#COMMENT: a #GSocket
#NAME: bus_get_finish
#PARENT: Gio.bus_get_finish
#COMMENT: a #GDBusConnection or %NULL if @error is set.
    Free with g_object_unref().
#NAME: replace_readwrite
#PARENT: Gio.File
#COMMENT: Returns an output stream for overwriting the file in readwrite mode,
possibly creating a backup copy of the file first. If the file doesn't
exist, it will be created.

For details about the behaviour, see g_file_replace() which does the
same thing but returns an output stream only.

Note that in many non-local file cases read and write streams are not
supported, so make sure you really need to do read and write streaming,
rather than just opening for reading or writing.
#NAME: get_implementations
#PARENT: Gio.DesktopAppInfo
#COMMENT: Gets all applications that implement @interface.

An application implements an interface if that interface is listed in
the Implements= line of the desktop file of the application.
#NAME: length
#PARENT: Gio.DataInputStream.read_line_finish_utf8.utf8
#COMMENT: a #gsize to get the length of the data read in.
#NAME: lookup_certificate_for_handle
#PARENT: Gio.TlsDatabase
#COMMENT: Lookup a certificate by its handle.

The handle should have been created by calling
g_tls_database_create_certificate_handle() on a #GTlsDatabase object of
the same TLS backend. The handle is designed to remain valid across
instantiations of the database.

If the handle is no longer valid, or does not point to a certificate in
this database, then %NULL will be returned.

This function can block, use g_tls_database_lookup_certificate_for_handle_async() to perform
the lookup operation asynchronously.
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.query_action.query_action.gboolean
#COMMENT: the name of an action in the group
#NAME: drive
#PARENT: Gio.DriveIface.get_symbolic_icon.get_symbolic_icon.Icon
#COMMENT: a #GDrive.
#NAME: init
#PARENT: Gio.Initable.init
#COMMENT: %TRUE if successful. If an error has occurred, this function will
    return %FALSE and set @error appropriately if present.
#NAME: conn
#PARENT: Gio.TlsConnection.handshake_async.none
#COMMENT: a #GTlsConnection
#NAME: TlsDatabase
#PARENT: Gio
#COMMENT: #GTlsDatabase is used to lookup certificates and other information
from a certificate or key store. It is an abstract base class which
TLS library specific subtypes override.

Most common client applications will not directly interact with
#GTlsDatabase. It is used internally by #GTlsConnection.
#NAME: drive
#PARENT: Gio.Drive.get_name.utf8
#COMMENT: a #GDrive.
#NAME: info
#PARENT: Gio.DBusAnnotationInfo.unref.none
#COMMENT: A #GDBusAnnotationInfo.
#NAME: proxy_resolver_get_default
#PARENT: Gio
#COMMENT: Gets the default #GProxyResolver for the system.
#NAME: read_fn
#PARENT: Gio.File.read_fn
#COMMENT: #GFileInputStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: action_state_changed
#PARENT: Gio.ActionGroup
#COMMENT: Emits the #GActionGroup::action-state-changed signal on @action_group.

This function should only be called by #GActionGroup implementations.
#NAME: callback
#PARENT: Gio.LoadableIcon.load_async.none
#COMMENT: a #GAsyncReadyCallback to call when the
           request is satisfied
#NAME: get_name
#PARENT: Gio.MenuLinkIter
#COMMENT: Gets the name of the link at the current iterator position.

The iterator is not advanced.
#NAME: unix_mount_get_device_path
#PARENT: Gio
#COMMENT: Gets the device path for a unix mount.
#NAME: flags
#PARENT: Gio.FileIface.query_info.query_info.FileInfo
#COMMENT: a set of #GFileQueryInfoFlags
#NAME: replace_destination
#PARENT: Gio.FileCreateFlags
#COMMENT: Replace the destination
   as if it didn't exist before. Don't try to keep any old
   permissions, replace instead of following links. This
   is generally useful if you're doing a "copy over"
   rather than a "save new version of" replace operation.
   You can think of it as "unlink destination" before
   writing to it, although the implementation may not
   be exactly like that. Since 2.20
#NAME: command-line
#PARENT: Gio.Application
#COMMENT: The ::command-line signal is emitted on the primary instance when
a commandline is not handled locally. See g_application_run() and
the #GApplicationCommandLine documentation for more information.
#NAME: make_backup
#PARENT: Gio.File.replace_readwrite.FileIOStream
#COMMENT: %TRUE if a backup should be created
#NAME: connection
#PARENT: Gio.bus_watch_name_on_connection.guint
#COMMENT: A #GDBusConnection.
#NAME: is_tagged
#PARENT: Gio.AsyncResultIface.is_tagged.is_tagged
#COMMENT: %TRUE if @res has the indicated @source_tag, %FALSE if
  not.
#NAME: get_native
#PARENT: Gio.Credentials
#COMMENT: Gets a pointer to native credentials of type @native_type from
@credentials.

It is a programming error (which will cause an warning to be
logged) to use this method if there is no #GCredentials support for
the OS or if @native_type isn't supported by the OS.
#NAME: path_len
#PARENT: Gio.UnixSocketAddress.new_abstract.SocketAddress
#COMMENT: the length of @path, or -1
#NAME: io_priority
#PARENT: Gio.File.make_directory_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: cancellable
#PARENT: Gio.Permission.release.gboolean
#COMMENT: a #GCancellable, or %NULL
#NAME: name
#PARENT: Gio.SimpleAction.new_stateful.SimpleAction
#COMMENT: the name of the action
#NAME: cancellable
#PARENT: Gio.UnixConnection.receive_credentials.Credentials
#COMMENT: A #GCancellable or %NULL.
#NAME: credentials
#PARENT: Gio.UnixCredentialsMessage
#COMMENT: The credentials stored in the message.
#NAME: get_user_data
#PARENT: Gio.AsyncResult.get_user_data
#COMMENT: the user data for @res.
#NAME: remote
#PARENT: Gio.RemoteActionGroup.activate_action_full.none
#COMMENT: a #GDBusActionGroup
#NAME: method
#PARENT: Gio.DBusMessage.new_method_call.DBusMessage
#COMMENT: A valid method name.
#NAME: guid
#PARENT: Gio.DBusConnection.new_sync.DBusConnection
#COMMENT: the GUID to use if a authenticating as a server or %NULL
#NAME: would_recurse
#PARENT: Gio.IOErrorEnum
#COMMENT: Operation would be recursive.
#NAME: notification
#PARENT: Gio.Notification.set_default_action_and_target_value.none
#COMMENT: a #GNotification
#NAME: subprocess
#PARENT: Gio.Subprocess.force_exit.none
#COMMENT: a #GSubprocess
#NAME: info
#PARENT: Gio.FileInfo.get_edit_name.utf8
#COMMENT: a #GFileInfo.
#NAME: info
#PARENT: Gio.FileInfo.get_content_type.utf8
#COMMENT: a #GFileInfo.
#NAME: new_stateful
#PARENT: Gio.SimpleAction
#COMMENT: Creates a new stateful action.

@state is the initial state of the action.  All future state values
must have the same #GVariantType as the initial state.

If the @state GVariant is floating, it is consumed.
#NAME: new_from_model
#PARENT: Gio.MenuItem.new_from_model
#COMMENT: a new #GMenuItem.
#NAME: cancellable
#PARENT: Gio.BufferedInputStreamClass.fill.fill.gssize
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: get_is_mc_site_local
#PARENT: Gio.InetAddress
#COMMENT: Tests whether @address is a site-local multicast address.
#NAME: bytes_left
#PARENT: Gio.MountOperation.show-unmount-progress.none
#COMMENT: the amount of bytes to be written before the operation
    completes (or -1 if such amount is not known), or zero if the operation
    is completed
#NAME: set_strv
#PARENT: Gio.Settings.set_strv
#COMMENT: %TRUE if setting the key succeeded,
    %FALSE if the key was not writable
#NAME: is_shadowed
#PARENT: Gio.Mount
#COMMENT: Determines if @mount is shadowed. Applications or libraries should
avoid displaying @mount in the user interface if it is shadowed.

A mount is said to be shadowed if there exists one or more user
visible objects (currently #GMount objects) with a root that is
inside the root of @mount.

One application of shadow mounts is when exposing a single file
system that is used to address several logical volumes. In this
situation, a #GVolumeMonitor implementation would create two
#GVolume objects (for example, one for the camera functionality of
the device and one for a SD card reader on the device) with
activation URIs `gphoto2://[usb:001,002]/store1/`
and `gphoto2://[usb:001,002]/store2/`. When the
underlying mount (with root
`gphoto2://[usb:001,002]/`) is mounted, said
#GVolumeMonitor implementation would create two #GMount objects
(each with their root matching the corresponding volume activation
root) that would shadow the original mount.

The proxy monitor in GVfs 2.26 and later, automatically creates and
manage shadow mounts (and shadows the underlying mount) if the
activation root on a #GVolume is set.
#NAME: num_files
#PARENT: Gio.FileEnumerator.next_files_async.none
#COMMENT: the number of file info objects to request
#NAME: settings
#PARENT: Gio.Settings.get.none
#COMMENT: a #GSettings object
#NAME: get_warning
#PARENT: Gio.TlsPassword
#COMMENT: Get a user readable translated warning. Usually this warning is a
representation of the password flags returned from
g_tls_password_get_flags().
#NAME: callback
#PARENT: Gio.DriveIface.start.start.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: callback
#PARENT: Gio.BufferedInputStream.fill_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: get_server_identity
#PARENT: Gio.TlsClientConnection
#COMMENT: Gets @conn's expected server identity
#NAME: res
#PARENT: Gio.File.query_filesystem_info_finish.FileInfo
#COMMENT: a #GAsyncResult
#NAME: file
#PARENT: Gio.FileIface.set_display_name_finish.set_display_name_finish.File
#COMMENT: input #GFile
#NAME: attributes
#PARENT: Gio.File.query_info_async.none
#COMMENT: an attribute query string
#NAME: info
#PARENT: Gio.FileInfo.set_name.none
#COMMENT: a #GFileInfo.
#NAME: copy
#PARENT: Gio.DBusMessage
#COMMENT: Copies @message. The copy is a deep copy and the returned
#GDBusMessage is completely identical except that it is guaranteed
to not be locked.

This operation can fail if e.g. @message contains file descriptors
and the per-process or system-wide open files limit is reached.
#NAME: io_error_from_errno
#PARENT: Gio.io_error_from_errno
#COMMENT: #GIOErrorEnum value for the given errno.h error number.
#NAME: pollable_source_new_full
#PARENT: Gio.pollable_source_new_full
#COMMENT: the new #GSource.
#NAME: task_data
#PARENT: Gio.TaskThreadFunc.none
#COMMENT: @task's task data
#NAME: stop_mountable
#PARENT: Gio.File
#COMMENT: Stops a file of type #G_FILE_TYPE_MOUNTABLE.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called.
You can then call g_file_stop_mountable_finish() to get
the result of the operation.
#NAME: callback
#PARENT: Gio.DriveIface.poll_for_media.poll_for_media.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: get_size
#PARENT: Gio.MemoryOutputStream.get_size
#COMMENT: the number of bytes allocated for the data buffer
#NAME: get_implementations
#PARENT: Gio.DesktopAppInfo.get_implementations
#COMMENT: a list of #GDesktopAppInfo
objects.
#NAME: stream
#PARENT: Gio.FileOutputStreamClass.query_info.query_info.FileInfo
#COMMENT: a #GFileOutputStream.
#NAME: skip_async
#PARENT: Gio.InputStream
#COMMENT: Request an asynchronous skip of @count bytes from the stream.
When the operation is finished @callback will be called.
You can then call g_input_stream_skip_finish() to get the result
of the operation.

During an async request no other sync and async calls are allowed,
and will result in %G_IO_ERROR_PENDING errors.

A value of @count larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes skipped will be passed to the callback.
It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file, but generally we try to skip
as many bytes as requested. Zero is returned on end of file
(or if @count is zero), but never otherwise.

Any outstanding i/o request with higher priority (lower numerical value)
will be executed before an outstanding request with lower priority.
Default priority is %G_PRIORITY_DEFAULT.

The asynchronous methods have a default fallback that uses threads to
implement asynchronicity, so they are optional for inheriting classes.
However, if you override one, you must override all.
#NAME: SimpleProxyResolver
#PARENT: Gio
#COMMENT: #GSimpleProxyResolver is a simple #GProxyResolver implementation
that handles a single default proxy, multiple URI-scheme-specific
proxies, and a list of hosts that proxies should not be used for.

#GSimpleProxyResolver is never the default proxy resolver, but it
can be used as the base class for another proxy resolver
implementation, or it can be created and used manually, such as
with g_socket_client_set_proxy_resolver().
#NAME: cancellable
#PARENT: Gio.SocketListener.accept.SocketConnection
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_serial
#PARENT: Gio.DBusMessage
#COMMENT: Gets the serial for @message.
#NAME: flags
#PARENT: Gio.FileIface.enumerate_children.enumerate_children.FileEnumerator
#COMMENT: a set of #GFileQueryInfoFlags
#NAME: io_priority
#PARENT: Gio.AsyncInitable.new_async.none
#COMMENT: the [I/O priority][io-priority] of the operation
#NAME: submenu
#PARENT: Gio.MenuItem.new_submenu.MenuItem
#COMMENT: a #GMenuModel with the items of the submenu
#NAME: result
#PARENT: Gio.OutputStreamClass.flush_finish.flush_finish.gboolean
#COMMENT: a GAsyncResult.
#NAME: op_res
#PARENT: Gio.SimpleAsyncResult.set_op_res_gpointer.none
#COMMENT: a pointer result from an asynchronous function.
#NAME: mount_operation
#PARENT: Gio.FileIface.stop_mountable.stop_mountable.none
#COMMENT: a #GMountOperation,
    or %NULL to avoid user interaction.
#NAME: launch_context
#PARENT: Gio.AppInfo.launch.gboolean
#COMMENT: a #GAppLaunchContext or %NULL
#NAME: base_stream
#PARENT: Gio.BufferedInputStream.new.InputStream
#COMMENT: a #GInputStream
#NAME: extension
#PARENT: Gio.IOExtension.get_priority.gint
#COMMENT: a #GIOExtension
#NAME: put_string
#PARENT: Gio.DataOutputStream
#COMMENT: Puts a string into the output stream.
#NAME: proxy_negotiating
#PARENT: Gio.SocketClientEvent
#COMMENT: The client is negotiating
  with a proxy to connect to the destination server.
#NAME: interaction
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer_async.none
#COMMENT: used to interact with the user if necessary
#NAME: interface_name
#PARENT: Gio.DBusInterfaceMethodCallFunc.none
#COMMENT: The D-Bus interface name the method was invoked on.
#NAME: new
#PARENT: Gio.TestDBus.new
#COMMENT: a new #GTestDBus.
#NAME: file_info
#PARENT: Gio.ZlibCompressor.set_file_info.none
#COMMENT: a #GFileInfo
#NAME: set_default
#PARENT: Gio.Application
#COMMENT: Sets or unsets the default application for the process, as returned
by g_application_get_default().

This function does not take its own reference on @application.  If
@application is destroyed then the default application will revert
back to %NULL.
#NAME: add_filter
#PARENT: Gio.DBusConnection.add_filter
#COMMENT: a filter identifier that can be used with
    g_dbus_connection_remove_filter()
#NAME: info
#PARENT: Gio.DesktopAppInfo.has_key.gboolean
#COMMENT: a #GDesktopAppInfo
#NAME: set_password
#PARENT: Gio.MountOperation
#COMMENT: Sets the mount operation's password to @password.
#NAME: app_info_launch_default_for_uri
#PARENT: Gio
#COMMENT: Utility function that launches the default application
registered to handle the specified uri. Synchronous I/O
is done on the uri to detect the type of the file if
required.
#NAME: model
#PARENT: Gio.MenuModel.get_item_links.none
#COMMENT: the #GMenuModel to query
#NAME: data
#PARENT: Gio.ReallocFunc.gpointer
#COMMENT: memory block to reallocate
#NAME: get_flags
#PARENT: Gio.DBusServer
#COMMENT: Gets the flags for @server.
#NAME: authorize-method
#PARENT: Gio.DBusObjectSkeleton
#COMMENT: Emitted when a method is invoked by a remote caller and used to
determine if the method call is authorized.

This signal is like #GDBusInterfaceSkeleton's
#GDBusInterfaceSkeleton::g-authorize-method signal,
except that it is for the enclosing object.

The default class handler just returns %TRUE.
#NAME: seekable
#PARENT: Gio.Seekable.tell.gint64
#COMMENT: a #GSeekable.
#NAME: get_mounts
#PARENT: Gio.VolumeMonitor.get_mounts
#COMMENT: a #GList of #GMount objects.
#NAME: stop
#PARENT: Gio.Drive
#COMMENT: Asynchronously stops a drive.

When the operation is finished, @callback will be called.
You can then call g_drive_stop_finish() to obtain the
result of the operation.
#NAME: method_name
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: the name of the method to invoke
#NAME: self
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer.lookup_certificate_issuer.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: object_path
#PARENT: Gio.DBusInterfaceSkeleton.export.gboolean
#COMMENT: The path to export the interface at.
#NAME: message
#PARENT: Gio.DBusMessage.set_header.none
#COMMENT: A #GDBusMessage.
#NAME: user_data
#PARENT: Gio.SettingsGetMapping.gboolean
#COMMENT: the user data that was passed to
g_settings_get_mapped()
#NAME: sender
#PARENT: Gio.DBusInterfaceMethodCallFunc.none
#COMMENT: The unique bus name of the remote caller.
#NAME: new_from_files
#PARENT: Gio.TlsCertificate
#COMMENT: Creates a #GTlsCertificate from the PEM-encoded data in @cert_file
and @key_file. The returned certificate will be the first certificate
found in @cert_file. As of GLib 2.44, if @cert_file contains more
certificates it will try to load a certificate chain. All
certificates will be verified in the order found (top-level
certificate should be the last one in the file) and the
#GTlsCertificate:issuer property of each certificate will be set
accordingly if the verification succeeds. If any certificate in the
chain cannot be verified, the first certificate in the file will
still be returned.

If either file cannot be read or parsed, the function will return
%NULL and set @error. Otherwise, this behaves like
g_tls_certificate_new_from_pem().
#NAME: attributes
#PARENT: Gio.File.query_filesystem_info.FileInfo
#COMMENT: an attribute query string
#NAME: enumerator
#PARENT: Gio.FileEnumeratorClass.close_async.close_async.none
#COMMENT: a #GFileEnumerator.
#NAME: mount_finish
#PARENT: Gio.Volume
#COMMENT: Finishes mounting a volume. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.

If the mount operation succeeded, g_volume_get_mount() on @volume
is guaranteed to return the mount right after calling this
function; there's no need to listen for the 'mount-added' signal on
#GVolumeMonitor.
#NAME: settings
#PARENT: Gio.Settings.get_value.GLib.Variant
#COMMENT: a #GSettings object
#NAME: file_new_for_uri
#PARENT: Gio
#COMMENT: Constructs a #GFile for a given URI. This operation never
fails, but the returned object might not support any I/O
operation if @uri is malformed or if the uri type is
not supported.
#NAME: res
#PARENT: Gio.AsyncResultIface.get_user_data.get_user_data.gpointer
#COMMENT: a #GAsyncResult.
#NAME: file
#PARENT: Gio.FileIface.create.create.FileOutputStream
#COMMENT: input #GFile
#NAME: get_data_size
#PARENT: Gio.MemoryOutputStream
#COMMENT: Returns the number of bytes from the start up to including the last
byte written in the stream that has not been truncated away.
#NAME: get_generic_name
#PARENT: Gio.DesktopAppInfo.get_generic_name
#COMMENT: The value of the GenericName key
#NAME: user_data
#PARENT: Gio.FileIface.replace_async.replace_async.none
#COMMENT: the data to pass to callback function
#NAME: unix_mount_points_get
#PARENT: Gio
#COMMENT: Gets a #GList of #GUnixMountPoint containing the unix mount points.
If @time_read is set, it will be filled with the mount timestamp,
allowing for checking if the mounts have changed with
g_unix_mount_points_changed_since().
#NAME: SocketAddress
#PARENT: Gio
#COMMENT: #GSocketAddress is the equivalent of struct sockaddr in the BSD
sockets API. This is an abstract class; use #GInetSocketAddress
for internet sockets, or #GUnixSocketAddress for UNIX domain sockets.
#NAME: new
#PARENT: Gio.MountOperation.new
#COMMENT: a #GMountOperation.
#NAME: file
#PARENT: Gio.FileIface.read_finish.read_finish.FileInputStream
#COMMENT: input #GFile
#NAME: etag
#PARENT: Gio.File.replace_readwrite_async.none
#COMMENT: an [entity tag][gfile-etag] for the current #GFile,
    or %NULL to ignore
#NAME: get_attribute_value
#PARENT: Gio.MenuItem
#COMMENT: Queries the named @attribute on @menu_item.

If @expected_type is specified and the attribute does not have this
type, %NULL is returned.  %NULL is also returned if the attribute
simply does not exist.
#NAME: cancellable
#PARENT: Gio.Resolver.lookup_records_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: query_filesystem_info_finish
#PARENT: Gio.File.query_filesystem_info_finish
#COMMENT: #GFileInfo for given @file
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: io_priority
#PARENT: Gio.DataInputStream.read_line_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: cancellable
#PARENT: Gio.TlsInteractionClass.request_certificate.request_certificate.TlsInteractionResult
#COMMENT: an optional #GCancellable cancellation object
#NAME: volume
#PARENT: Gio.VolumeIface.eject_finish.eject_finish.gboolean
#COMMENT: pointer to a #GVolume
#NAME: new_sync
#PARENT: Gio.DBusServer.new_sync
#COMMENT: A #GDBusServer or %NULL if @error is set. Free with
g_object_unref().
#NAME: manager
#PARENT: Gio.DBusObjectManagerClient.get_connection.DBusConnection
#COMMENT: A #GDBusObjectManagerClient
#NAME: connection
#PARENT: Gio.DBusInterfaceSkeleton.has_connection.gboolean
#COMMENT: A #GDBusConnection.
#NAME: file
#PARENT: Gio.File.dup.File
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.FileEnumerator.close_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: source_tag
#PARENT: Gio.SimpleAsyncResult.new.SimpleAsyncResult
#COMMENT: the asynchronous function.
#NAME: DBusAuthObserver
#PARENT: Gio
#COMMENT: The #GDBusAuthObserver type provides a mechanism for participating
in how a #GDBusServer (or a #GDBusConnection) authenticates remote
peers. Simply instantiate a #GDBusAuthObserver and connect to the
signals you are interested in. Note that new signals may be added
in the future

## Controlling Authentication # {#auth-observer}

For example, if you only want to allow D-Bus connections from
processes owned by the same uid as the server, you would use a
signal handler like the following:

|[<!-- language="C" -->
static gboolean
on_authorize_authenticated_peer (GDBusAuthObserver *observer,
                                 GIOStream         *stream,
                                 GCredentials      *credentials,
                                 gpointer           user_data)
{
  gboolean authorized;

  authorized = FALSE;
  if (credentials != NULL)
    {
      GCredentials *own_credentials;
      own_credentials = g_credentials_new ();
      if (g_credentials_is_same_user (credentials, own_credentials, NULL))
        authorized = TRUE;
      g_object_unref (own_credentials);
    }

  return authorized;
}
]|
#NAME: unref
#PARENT: Gio.FileAttributeInfoList
#COMMENT: Removes a reference from the given @list. If the reference count
falls to zero, the @list is deleted.
#NAME: effective_address
#PARENT: Gio.SocketListener.add_address.gboolean
#COMMENT: location to store the address that was bound to, or %NULL.
#NAME: get_default_for_uri_scheme
#PARENT: Gio.DesktopAppInfoLookupIface.get_default_for_uri_scheme.get_default_for_uri_scheme
#COMMENT: #GAppInfo for given @uri_scheme or %NULL on error.
#NAME: user_data
#PARENT: Gio.FileIface.create_readwrite_async.create_readwrite_async.none
#COMMENT: the data to pass to callback function
#NAME: speaks_ipv4
#PARENT: Gio.Socket.speaks_ipv4
#COMMENT: %TRUE if this socket can be used with IPv4.
#NAME: inactivity_timeout
#PARENT: Gio.Application.set_inactivity_timeout.none
#COMMENT: the timeout, in milliseconds
#NAME: new
#PARENT: Gio.Emblem
#COMMENT: Creates a new emblem for @icon.
#NAME: check_cancellable
#PARENT: Gio.Task.set_check_cancellable.none
#COMMENT: whether #GTask will check the state of
  its #GCancellable for you.
#NAME: get_bytes
#PARENT: Gio.BytesIcon.get_bytes
#COMMENT: a #GBytes, or %NULL.
#NAME: get_proxy_type_user_data
#PARENT: Gio.DBusObjectManagerClient.new_for_bus_sync.DBusObjectManagerClient
#COMMENT: User data to pass to @get_proxy_type_func.
#NAME: result
#PARENT: Gio.Resolver.lookup_by_address_finish.utf8
#COMMENT: the result passed to your #GAsyncReadyCallback
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.get_parameters.GLib.Variant
#COMMENT: A #GDBusMethodInvocation.
#NAME: buffer
#PARENT: Gio.PollableInputStreamInterface.read_nonblocking.read_nonblocking.gssize
#COMMENT: a buffer to
    read data into (which should be at least @count bytes long).
#NAME: cancellable
#PARENT: Gio.FileIface.mount_enclosing_volume.mount_enclosing_volume.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: Drive
#PARENT: Gio
#COMMENT: #GDrive - this represent a piece of hardware connected to the machine.
It's generally only created for removable hardware or hardware with
removable media.

#GDrive is a container class for #GVolume objects that stem from
the same piece of media. As such, #GDrive abstracts a drive with
(or without) removable media and provides operations for querying
whether media is available, determining whether media change is
automatically detected and ejecting the media.

If the #GDrive reports that media isn't automatically detected, one
can poll for media; typically one should not do this periodically
as a poll for media operation is potententially expensive and may
spin up the drive creating noise.

#GDrive supports starting and stopping drives with authentication
support for the former. This can be used to support a diverse set
of use cases including connecting/disconnecting iSCSI devices,
powering down external disk enclosures and starting/stopping
multi-disk devices such as RAID devices. Note that the actual
semantics and side-effects of starting/stopping a #GDrive may vary
according to implementation. To choose the correct verbs in e.g. a
file manager, use g_drive_get_start_stop_type().

For porting from GnomeVFS note that there is no equivalent of
#GDrive in that API.
#NAME: family
#PARENT: Gio.SocketConnection.factory_lookup_type.GType
#COMMENT: a #GSocketFamily
#NAME: cancellable
#PARENT: Gio.FileIface.make_symbolic_link.make_symbolic_link.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: cancellable
#PARENT: Gio.DBusObjectManagerClient.new_for_bus_sync.DBusObjectManagerClient
#COMMENT: A #GCancellable or %NULL
#NAME: FILE_ATTRIBUTE_UNIX_RDEV
#PARENT: Gio
#COMMENT: A key in the "unix" namespace for getting the device ID for the file
(if it is a special file). See lstat() documentation. This attribute
is only available for UNIX file systems. Corresponding #GFileAttributeType
is %G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: set_icon
#PARENT: Gio.Notification
#COMMENT: Sets the icon of @notification to @icon.
#NAME: res
#PARENT: Gio.AsyncResultIface.is_tagged.is_tagged.gboolean
#COMMENT: a #GAsyncResult
#NAME: get_deletion_date
#PARENT: Gio.FileInfo.get_deletion_date
#COMMENT: a #GDateTime, or %NULL.
#NAME: flags
#PARENT: Gio.MountIface.unmount_with_operation.unmount_with_operation.none
#COMMENT: flags affecting the operation
#NAME: list_keys
#PARENT: Gio.Settings
#COMMENT: Introspects the list of keys on @settings.

You should probably not be calling this function from "normal" code
(since you should already know what keys are in your schema).  This
function is intended for introspection reasons.

You should free the return value with g_strfreev() when you are done
with it.
#NAME: var_args
#PARENT: Gio.AsyncInitable.new_valist_async.none
#COMMENT: The var args list generated from @first_property_name.
#NAME: DBusConnection
#PARENT: Gio
#COMMENT: The #GDBusConnection type is used for D-Bus connections to remote
peers such as a message buses. It is a low-level API that offers a
lot of flexibility. For instance, it lets you establish a connection
over any transport that can by represented as an #GIOStream.

This class is rarely used directly in D-Bus clients. If you are writing
a D-Bus client, it is often easier to use the g_bus_own_name(),
g_bus_watch_name() or g_dbus_proxy_new_for_bus() APIs.

As an exception to the usual GLib rule that a particular object must not
be used by two threads at the same time, #GDBusConnection's methods may be
called from any thread. This is so that g_bus_get() and g_bus_get_sync()
can safely return the same #GDBusConnection when called from any thread.

Most of the ways to obtain a #GDBusConnection automatically initialize it
(i.e. connect to D-Bus): for instance, g_dbus_connection_new() and
g_bus_get(), and the synchronous versions of those methods, give you an
initialized connection. Language bindings for GIO should use
g_initable_new() or g_async_initable_new_async(), which also initialize the
connection.

If you construct an uninitialized #GDBusConnection, such as via
g_object_new(), you must initialize it via g_initable_init() or
g_async_initable_init_async() before using its methods or properties.
Calling methods or accessing properties on a #GDBusConnection that has not
completed initialization successfully is considered to be invalid, and leads
to undefined behaviour. In particular, if initialization fails with a
#GError, the only valid thing you can do with that #GDBusConnection is to
free it with g_object_unref().

## An example D-Bus server # {#gdbus-server}

Here is an example for a D-Bus server:
[gdbus-example-server.c](https://git.gnome.org/browse/glib/tree/gio/tests/gdbus-example-server.c)

## An example for exporting a subtree # {#gdbus-subtree-server}

Here is an example for exporting a subtree:
[gdbus-example-subtree.c](https://git.gnome.org/browse/glib/tree/gio/tests/gdbus-example-subtree.c)

## An example for file descriptor passing # {#gdbus-unix-fd-client}

Here is an example for passing UNIX file descriptors:
[gdbus-unix-fd-client.c](https://git.gnome.org/browse/glib/tree/gio/tests/gdbus-unix-fd-client.c)

## An example for exporting a GObject # {#gdbus-export}

Here is an example for exporting a #GObject:
[gdbus-example-export.c](https://git.gnome.org/browse/glib/tree/gio/tests/gdbus-example-export.c)
#NAME: lookup_certificate_for_handle_async
#PARENT: Gio.TlsDatabase
#COMMENT: Asynchronously lookup a certificate by its handle in the database. See
g_tls_database_lookup_certificate_for_handle() for more information.
#NAME: manager
#PARENT: Gio.DBusObjectManagerClient.get_name.utf8
#COMMENT: A #GDBusObjectManagerClient
#NAME: cancellable
#PARENT: Gio.MountIface.guess_content_type.guess_content_type.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: get_signature
#PARENT: Gio.DBusMessage
#COMMENT: Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field.
#NAME: callback_data
#PARENT: Gio.FileReadMoreCallback.gboolean
#COMMENT: data passed to the callback.
#NAME: get_stdin
#PARENT: Gio.ApplicationCommandLineClass.get_stdin.get_stdin
#COMMENT: a #GInputStream for stdin
#NAME: set_choice
#PARENT: Gio.MountOperation
#COMMENT: Sets a default choice for the mount operation.
#NAME: parameter-type
#PARENT: Gio.PropertyAction
#COMMENT: The type of the parameter that must be given when activating the
action.
#NAME: lookup_certificate_issuer
#PARENT: Gio.TlsDatabase
#COMMENT: Lookup the issuer of @certificate in the database.

The %issuer property
of @certificate is not modified, and the two certificates are not hooked
into a chain.

This function can block, use g_tls_database_lookup_certificate_issuer_async() to perform
the lookup operation asynchronously.
#NAME: model
#PARENT: Gio.MenuModel.get_item_attribute_value.GLib.Variant
#COMMENT: a #GMenuModel
#NAME: message
#PARENT: Gio.DBusMessage.get_byte_order.DBusMessageByteOrder
#COMMENT: A #GDBusMessage.
#NAME: copy_finish
#PARENT: Gio.FileIface.copy_finish.copy_finish
#COMMENT: a %TRUE on success, %FALSE on error.
#NAME: read_async
#PARENT: Gio.InputStream
#COMMENT: Request an asynchronous read of @count bytes from the stream into the buffer
starting at @buffer. When the operation is finished @callback will be called.
You can then call g_input_stream_read_finish() to get the result of the
operation.

During an async request no other sync and async calls are allowed on @stream, and will
result in %G_IO_ERROR_PENDING errors.

A value of @count larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer will be passed to the
callback. It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file, but generally we try to read
as many bytes as requested. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is %G_PRIORITY_DEFAULT.

The asyncronous methods have a default fallback that uses threads to implement
asynchronicity, so they are optional for inheriting classes. However, if you
override one you must override all.
#NAME: user_data
#PARENT: Gio.SocketClient.connect_to_host_async.none
#COMMENT: user data for the callback
#NAME: should_automount
#PARENT: Gio.VolumeIface.should_automount.should_automount
#COMMENT: %TRUE if the volume should be automatically mounted
#NAME: get_reply_serial
#PARENT: Gio.DBusMessage.get_reply_serial
#COMMENT: The value.
#NAME: get_database
#PARENT: Gio.TlsConnection
#COMMENT: Gets the certificate database that @conn uses to verify
peer certificates. See g_tls_connection_set_database().
#NAME: cancellable
#PARENT: Gio.InputStreamClass.skip.skip.gssize
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: unmount_with_operation_finish
#PARENT: Gio.MountIface.unmount_with_operation_finish.unmount_with_operation_finish
#COMMENT: %TRUE if the mount was successfully unmounted. %FALSE otherwise.
#NAME: set_family
#PARENT: Gio.SocketClient
#COMMENT: Sets the socket family of the socket client.
If this is set to something other than %G_SOCKET_FAMILY_INVALID
then the sockets created by this object will be of the specified
family.

This might be useful for instance if you want to force the local
connection to be an ipv4 socket, even though the address might
be an ipv6 mapped to ipv4 address.
#NAME: user_data
#PARENT: Gio.DriveIface.start.start.none
#COMMENT: user data to pass to @callback
#NAME: user_data
#PARENT: Gio.AsyncInitable.newv_async.none
#COMMENT: the data to pass to callback function
#NAME: message
#PARENT: Gio.MountOperation.ask-question.none
#COMMENT: string containing a message to display to the user.
#NAME: callback
#PARENT: Gio.OutputStreamClass.splice_async.splice_async.none
#COMMENT: a #GAsyncReadyCallback.
#NAME: settings
#PARENT: Gio.Settings.get_int.gint
#COMMENT: a #GSettings object
#NAME: verify_chain_async
#PARENT: Gio.TlsDatabase
#COMMENT: Asynchronously verify's a certificate chain after looking up and adding
any missing certificates to the chain. See g_tls_database_verify_chain()
for more information.
#NAME: length
#PARENT: Gio.DataInputStream.read_line_utf8.utf8
#COMMENT: a #gsize to get the length of the data read in.
#NAME: level
#PARENT: Gio.SocketControlMessage.deserialize.SocketControlMessage
#COMMENT: a socket level
#NAME: schema_id
#PARENT: Gio.Settings.new_with_backend.Settings
#COMMENT: the id of the schema
#NAME: report_error
#PARENT: Gio.Task
#COMMENT: Creates a #GTask and then immediately calls g_task_return_error()
on it. Use this in the wrapper function of an asynchronous method
when you want to avoid even calling the virtual method. You can
then use g_async_result_is_tagged() in the finish method wrapper to
check if the result there is tagged as having been created by the
wrapper method, and deal with it appropriately if so.

See also g_task_report_new_error().
#NAME: res
#PARENT: Gio.bus_get_finish.DBusConnection
#COMMENT: a #GAsyncResult obtained from the #GAsyncReadyCallback passed
    to g_bus_get()
#NAME: call_with_unix_fd_list
#PARENT: Gio.DBusProxy
#COMMENT: Like g_dbus_proxy_call() but also takes a #GUnixFDList object.

This method is only available on UNIX.
#NAME: list
#PARENT: Gio.ListModelInterface.get_item_type.get_item_type.GType
#COMMENT: a #GListModel
#NAME: get_commandline
#PARENT: Gio.AppInfo
#COMMENT: Gets the commandline with which the application will be
started.
#NAME: num_files
#PARENT: Gio.File.measure_disk_usage_finish.gboolean
#COMMENT: the number of non-directories encountered
#NAME: tls_handshaking
#PARENT: Gio.SocketClientEvent
#COMMENT: The client is performing a
  TLS handshake.
#NAME: new
#PARENT: Gio.ThemedIcon
#COMMENT: Creates a new themed icon for @iconname.
#NAME: new_from_native
#PARENT: Gio.SocketAddress.new_from_native
#COMMENT: a new #GSocketAddress if @native could successfully
    be converted, otherwise %NULL
#NAME: has_uri_scheme
#PARENT: Gio.File.has_uri_scheme
#COMMENT: %TRUE if #GFile's backend supports the
    given URI scheme, %FALSE if URI scheme is %NULL,
    not supported, or #GFile is invalid.
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_uint32.guint32
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: register
#PARENT: Gio.IOExtensionPoint.register
#COMMENT: the new #GIOExtensionPoint. This object is
   owned by GIO and should not be freed.
#NAME: copy_async
#PARENT: Gio.File
#COMMENT: Copies the file @source to the location specified by @destination
asynchronously. For details of the behaviour, see g_file_copy().

If @progress_callback is not %NULL, then that function that will be called
just like in g_file_copy(). The callback will run in the default main context
of the thread calling g_file_copy_async() — the same context as @callback is
run in.

When the operation is finished, @callback will be called. You can then call
g_file_copy_finish() to get the result of the operation.
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_uint64.guint64
#COMMENT: a #GFileInfo.
#NAME: result
#PARENT: Gio.Subprocess.communicate_finish.gboolean
#COMMENT: Result
#NAME: append_fd
#PARENT: Gio.UnixFDMessage.append_fd
#COMMENT: %TRUE in case of success, else %FALSE (and @error is set)
#NAME: dup
#PARENT: Gio.FileIface.dup.dup
#COMMENT: a new #GFile that is a duplicate
    of the given #GFile.
#NAME: file
#PARENT: Gio.FileIface.poll_mountable.poll_mountable.none
#COMMENT: input #GFile
#NAME: OutputVector
#PARENT: Gio
#COMMENT: Structure used for scatter/gather data output.
You generally pass in an array of #GOutputVectors
and the operation will use all the buffers as if they were
one buffer.
#NAME: cwd
#PARENT: Gio.file_new_for_commandline_arg_and_cwd.File
#COMMENT: the current working directory of the commandline
#NAME: IOModule
#PARENT: Gio
#COMMENT: Provides an interface and default functions for loading and unloading
modules. This is used internally to make GIO extensible, but can also
be used by others to implement module loading.
#NAME: result
#PARENT: Gio.MountIface.unmount_with_operation_finish.unmount_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: write_nonblocking
#PARENT: Gio.PollableOutputStream
#COMMENT: Attempts to write up to @count bytes from @buffer to @stream, as
with g_output_stream_write(). If @stream is not currently writable,
this will immediately return %G_IO_ERROR_WOULD_BLOCK, and you can
use g_pollable_output_stream_create_source() to create a #GSource
that will be triggered when @stream is writable.

Note that since this method never blocks, you cannot actually
use @cancellable to cancel it. However, it will return an error
if @cancellable has already been cancelled when you call, which
may happen if you call this method after a source triggers due
to having been cancelled.
#NAME: emblemed
#PARENT: Gio.EmblemedIcon.get_emblems.Emblem
#COMMENT: a #GEmblemedIcon
#NAME: format
#PARENT: Gio.simple_async_report_error_in_idle.none
#COMMENT: a formatted error reporting string.
#NAME: get_attribute_stringv
#PARENT: Gio.FileInfo
#COMMENT: Gets the value of a stringv attribute. If the attribute does
not contain a stringv, %NULL will be returned.
#NAME: new
#PARENT: Gio.DBusAuthObserver.new
#COMMENT: A #GDBusAuthObserver. Free with g_object_unref().
#NAME: size
#PARENT: Gio.BufferedInputStream.new_sized.InputStream
#COMMENT: a #gsize
#NAME: unix_mount_guess_icon
#PARENT: Gio.unix_mount_guess_icon
#COMMENT: a #GIcon
#NAME: stream
#PARENT: Gio.FileIOStreamClass.query_info_finish.query_info_finish.FileInfo
#COMMENT: a #GFileIOStream.
#NAME: conn
#PARENT: Gio.TlsConnectionClass.handshake.handshake.gboolean
#COMMENT: a #GTlsConnection
#NAME: user_data
#PARENT: Gio.VolumeIface.eject_with_operation.eject_with_operation.none
#COMMENT: user data passed to @callback
#NAME: wait_for_both
#PARENT: Gio.IOStreamSpliceFlags
#COMMENT: Wait for both splice operations to finish
    before calling the callback.
#NAME: get_value_type
#PARENT: Gio.SettingsSchemaKey.get_value_type
#COMMENT: the type of @key
#NAME: position
#PARENT: Gio.MenuModel.items_changed.none
#COMMENT: the position of the change
#NAME: lookup_property
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: Looks up information about a property.

The cost of this function is O(n) in number of properties unless
g_dbus_interface_info_cache_build() has been used on @info.
#NAME: cancellable
#PARENT: Gio.Cancellable.reset.none
#COMMENT: a #GCancellable object.
#NAME: res
#PARENT: Gio.dbus_address_get_stream_finish.IOStream
#COMMENT: A #GAsyncResult obtained from the GAsyncReadyCallback passed to g_dbus_address_get_stream().
#NAME: lookup_flags
#PARENT: Gio.resources_open_stream.InputStream
#COMMENT: A #GResourceLookupFlags
#NAME: get_weight
#PARENT: Gio.SrvTarget.get_weight
#COMMENT: @target's weight
#NAME: set_path
#PARENT: Gio.DBusMessage
#COMMENT: Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_PATH header field.
#NAME: close_finish
#PARENT: Gio.InputStreamClass.close_finish.close_finish
#COMMENT: %TRUE if the stream was closed successfully.
#NAME: new
#PARENT: Gio.ProxyAddress
#COMMENT: Creates a new #GProxyAddress for @inetaddr with @protocol that should
tunnel through @dest_hostname and @dest_port.

(Note that this method doesn't set the #GProxyAddress:uri or
#GProxyAddress:destination-protocol fields; use g_object_new()
directly if you want to set those.)
#NAME: label
#PARENT: Gio.Notification.add_button_with_target_value.none
#COMMENT: label of the button
#NAME: new
#PARENT: Gio.BufferedInputStream
#COMMENT: Creates a new #GInputStream from the given @base_stream, with
a buffer set to the default size (4 kilobytes).
#NAME: get_file_info
#PARENT: Gio.ZlibCompressor
#COMMENT: Returns the #GZlibCompressor:file-info property.
#NAME: release
#PARENT: Gio.Permission.release
#COMMENT: %TRUE if the permission was successfully released
#NAME: no_memory
#PARENT: Gio.DBusError
#COMMENT: There was not enough memory to complete an operation.
#NAME: TlsServerConnectionInterface
#PARENT: Gio
#COMMENT: vtable for a #GTlsServerConnection implementation.
#NAME: make_symbolic_link
#PARENT: Gio.File.make_symbolic_link
#COMMENT: %TRUE on the creation of a new symlink, %FALSE otherwise.
#NAME: get_source_tag
#PARENT: Gio.SimpleAsyncResult.get_source_tag
#COMMENT: a #gpointer to the source object for the #GSimpleAsyncResult.
#NAME: cancellable
#PARENT: Gio.File.set_attribute_uint32.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_uint64.guint64
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: dup
#PARENT: Gio.FileInfo
#COMMENT: Duplicates a file info structure.
#NAME: close_async
#PARENT: Gio.OutputStream
#COMMENT: Requests an asynchronous close of the stream, releasing resources
related to it. When the operation is finished @callback will be
called. You can then call g_output_stream_close_finish() to get
the result of the operation.

For behaviour details see g_output_stream_close().

The asyncronous methods have a default fallback that uses threads
to implement asynchronicity, so they are optional for inheriting
classes. However, if you override one you must override all.
#NAME: domain
#PARENT: Gio.Resolver.lookup_service_async.none
#COMMENT: the DNS domain to look up the service in
#NAME: user_data
#PARENT: Gio.Drive.stop.none
#COMMENT: user data to pass to @callback
#NAME: socket
#PARENT: Gio.Socket.create_source.GLib.Source
#COMMENT: a #GSocket
#NAME: get_child
#PARENT: Gio.File.get_child
#COMMENT: a #GFile to a child specified by @name.
    Free the returned object with g_object_unref().
#NAME: not_mountable_file
#PARENT: Gio.IOErrorEnum
#COMMENT: File cannot be mounted.
#NAME: get_symlink_target
#PARENT: Gio.FileInfo.get_symlink_target
#COMMENT: a string containing the symlink target.
#NAME: get_source_object
#PARENT: Gio.AsyncResult.get_source_object
#COMMENT: a new reference to the source object for the @res,
   or %NULL if there is none.
#NAME: set_stdout_file_path
#PARENT: Gio.SubprocessLauncher
#COMMENT: Sets the file path to use as the stdout for spawned processes.

If @path is %NULL then any previously given path is unset.

The file will be created or truncated when the process is spawned, as
would be the case if using '>' at the shell.

You may not set a stdout file path if a stdout fd is already set or
if the launcher flags contain any flags directing stdout elsewhere.

This feature is only available on UNIX.
#NAME: mount_operation
#PARENT: Gio.DriveIface.stop.stop.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: result
#PARENT: Gio.Drive.eject_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: task
#PARENT: Gio.Task.get_context.GLib.MainContext
#COMMENT: a #GTask
#NAME: cancellable
#PARENT: Gio.File.read_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_member
#PARENT: Gio.DBusMessage
#COMMENT: Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_MEMBER header field.
#NAME: can_delete
#PARENT: Gio.AppInfoIface.can_delete.can_delete
#COMMENT: %TRUE if @appinfo can be deleted
#NAME: replace
#PARENT: Gio.File
#COMMENT: Returns an output stream for overwriting the file, possibly
creating a backup copy of the file first. If the file doesn't exist,
it will be created.

This will try to replace the file in the safest way possible so
that any errors during the writing will not affect an already
existing copy of the file. For instance, for local files it
may write to a temporary file and then atomically rename over
the destination when the stream is closed.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
returned.

If you pass in a non-%NULL @etag value and @file already exists, then
this value is compared to the current entity tag of the file, and if
they differ an %G_IO_ERROR_WRONG_ETAG error is returned. This
generally means that the file has been changed since you last read
it. You can get the new etag from g_file_output_stream_get_etag()
after you've finished writing and closed the #GFileOutputStream. When
you load a new file you can use g_file_input_stream_query_info() to
get the etag of the file.

If @make_backup is %TRUE, this function will attempt to make a
backup of the current file before overwriting it. If this fails
a %G_IO_ERROR_CANT_CREATE_BACKUP error will be returned. If you
want to replace anyway, try again with @make_backup set to %FALSE.

If the file is a directory the %G_IO_ERROR_IS_DIRECTORY error will
be returned, and if the file is some other form of non-regular file
then a %G_IO_ERROR_NOT_REGULAR_FILE error will be returned. Some
file systems don't allow all file names, and may return an
%G_IO_ERROR_INVALID_FILENAME error, and if the name is to long
%G_IO_ERROR_FILENAME_TOO_LONG will be returned. Other errors are
possible too, and depend on what kind of filesystem the file is on.
#NAME: cancellable
#PARENT: Gio.Socket.condition_wait.gboolean
#COMMENT: a #GCancellable, or %NULL
#NAME: get_attribute_uint64
#PARENT: Gio.FileInfo.get_attribute_uint64
#COMMENT: a unsigned 64-bit integer from the attribute.
#NAME: proxy_negotiated
#PARENT: Gio.SocketClientEvent
#COMMENT: The client has negotiated
  with the proxy server.
#NAME: error_name
#PARENT: Gio.DBusMessageHeaderField
#COMMENT: The name of the error that occurred.
#NAME: cancellable
#PARENT: Gio.Proxy.connect_async.none
#COMMENT: a #GCancellable
#NAME: is_supported
#PARENT: Gio.UnixCredentialsMessage
#COMMENT: Checks if passing #GCredentials on a #GSocket is supported on this platform.
#NAME: new
#PARENT: Gio.InetAddressMask
#COMMENT: Creates a new #GInetAddressMask representing all addresses whose
first @length bits match @addr.
#NAME: get_family
#PARENT: Gio.Socket
#COMMENT: Gets the socket family of the socket.
#NAME: get_symbolic_icon
#PARENT: Gio.FileInfo
#COMMENT: Gets the symbolic icon for a file.
#NAME: flags
#PARENT: Gio.TlsInteraction.invoke_request_certificate.TlsInteractionResult
#COMMENT: flags providing more information about the request
#NAME: offset
#PARENT: Gio.Seekable.truncate_fn.gboolean
#COMMENT: a #goffset.
#NAME: path
#PARENT: Gio.Vfs.get_file_for_path.File
#COMMENT: a string containing a VFS path.
#NAME: unregister_object
#PARENT: Gio.DBusConnection
#COMMENT: Unregisters an object.
#NAME: load_partial_contents_async
#PARENT: Gio.File
#COMMENT: Reads the partial contents of a file. A #GFileReadMoreCallback should
be used to stop reading from the file when appropriate, else this
function will behave exactly as g_file_load_contents_async(). This
operation can be finished by g_file_load_partial_contents_finish().

Users of this function should be aware that @user_data is passed to
both the @read_more_callback and the @callback.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: address
#PARENT: Gio.InetAddress.get_family.SocketFamily
#COMMENT: a #GInetAddress
#NAME: static_resource
#PARENT: Gio.StaticResource.get_resource.Resource
#COMMENT: pointer to a static #GStaticResource
#NAME: cancellable
#PARENT: Gio.DBusConnection.new_for_address_sync.DBusConnection
#COMMENT: a #GCancellable or %NULL
#NAME: value
#PARENT: Gio.SimpleAction.set_state.none
#COMMENT: the new #GVariant for the state
#NAME: info
#PARENT: Gio.FileInfo.get_sort_order.gint32
#COMMENT: a #GFileInfo.
#NAME: callback
#PARENT: Gio.InputStream.close_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: io_priority
#PARENT: Gio.OutputStreamClass.splice_async.splice_async.none
#COMMENT: the io priority of the request.
#NAME: propagate_pointer
#PARENT: Gio.Task.propagate_pointer
#COMMENT: the task result, or %NULL on error
#NAME: new_for_string
#PARENT: Gio.Icon
#COMMENT: Generate a #GIcon instance from @str. This function can fail if
@str is not valid - see g_icon_to_string() for discussion.

If your application or library provides one or more #GIcon
implementations you need to ensure that each #GType is registered
with the type system prior to calling g_icon_new_for_string().
#NAME: position
#PARENT: Gio.Menu.insert_section.none
#COMMENT: the position at which to insert the item
#NAME: enumerate_children_finish
#PARENT: Gio.FileIface.enumerate_children_finish.enumerate_children_finish
#COMMENT: a #GFileEnumerator or %NULL
    if an error occurred.
    Free the returned object with g_object_unref().
#NAME: is_exported
#PARENT: Gio.DBusObjectManagerServer.is_exported
#COMMENT: %TRUE if @object is exported
#NAME: mount
#PARENT: Gio.MountIface.get_sort_key.get_sort_key.utf8
#COMMENT: A #GMount.
#NAME: conn
#PARENT: Gio.TlsConnection.set_certificate.none
#COMMENT: a #GTlsConnection
#NAME: resolve_relative_path
#PARENT: Gio.File
#COMMENT: Resolves a relative path for @file to an absolute path.

This call does no blocking I/O.
#NAME: interface_info
#PARENT: Gio.DBusConnection.register_object.guint
#COMMENT: introspection data for the interface
#NAME: user_data
#PARENT: Gio.ProxyResolver.lookup_async.none
#COMMENT: data for @callback
#NAME: source_object
#PARENT: Gio.ThreadedSocketService.run.gboolean
#COMMENT: the source_object passed to g_socket_listener_add_address().
#NAME: cancellable
#PARENT: Gio.BufferedInputStream.fill_async.none
#COMMENT: optional #GCancellable object
#NAME: callback
#PARENT: Gio.Volume.mount.none
#COMMENT: a #GAsyncReadyCallback, or %NULL
#NAME: num_files
#PARENT: Gio.FileEnumeratorClass.next_files_async.next_files_async.none
#COMMENT: the number of file info objects to request
#NAME: adt_audit_data_unknown
#PARENT: Gio.DBusError
#COMMENT: Asked for ADT audit data and it wasn't available.
#NAME: user_data
#PARENT: Gio.FileIface.trash_async.trash_async.none
#COMMENT: the data to pass to callback function
#NAME: propagate_int
#PARENT: Gio.Task.propagate_int
#COMMENT: the task result, or -1 on error
#NAME: cancellable
#PARENT: Gio.TlsConnection.handshake.gboolean
#COMMENT: a #GCancellable, or %NULL
#NAME: get_info
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Gets D-Bus introspection information for the D-Bus interface
implemented by @interface_.
#NAME: add_button_with_target
#PARENT: Gio.Notification
#COMMENT: Adds a button to @notification that activates @action when clicked.
@action must be an application-wide action (it must start with "app.").

If @target_format is given, it is used to collect remaining
positional parameters into a #GVariant instance, similar to
g_variant_new(). @action will be activated with that #GVariant as its
parameter.
#NAME: parameters
#PARENT: Gio.DBusMethodInvocation.return_value_with_unix_fd_list.none
#COMMENT: A #GVariant tuple with out parameters for the method or %NULL if not passing any parameters.
#NAME: eject_mountable_with_operation_finish
#PARENT: Gio.FileIface.eject_mountable_with_operation_finish.eject_mountable_with_operation_finish
#COMMENT: %TRUE if the @file was ejected successfully.
    %FALSE otherwise.
#NAME: mount_operation
#PARENT: Gio.VolumeIface.mount_fn.mount_fn.none
#COMMENT: a #GMountOperation or %NULL to avoid user interaction
#NAME: supports_hostname
#PARENT: Gio.Proxy
#COMMENT: Some proxy protocols expect to be passed a hostname, which they
will resolve to an IP address themselves. Others, like SOCKS4, do
not allow this. This function will return %FALSE if @proxy is
implementing such a protocol. When %FALSE is returned, the caller
should resolve the destination hostname first, and then pass a
#GProxyAddress containing the stringified IP address to
g_proxy_connect() or g_proxy_connect_async().
#NAME: parameters
#PARENT: Gio.DBusSignalCallback.none
#COMMENT: A #GVariant tuple with parameters for the signal.
#NAME: proxy_resolver_get_default
#PARENT: Gio.proxy_resolver_get_default
#COMMENT: the default #GProxyResolver.
#NAME: action
#PARENT: Gio.Notification.set_default_action_and_target.none
#COMMENT: an action name
#NAME: path
#PARENT: Gio.UnixSocketAddress.new_abstract.SocketAddress
#COMMENT: the abstract name
#NAME: object_path_in_use
#PARENT: Gio.DBusError
#COMMENT: There's already an object with the requested object path.
#NAME: FILE_ATTRIBUTE_THUMBNAIL_IS_VALID
#PARENT: Gio
#COMMENT: A key in the "thumbnail" namespace for checking whether the thumbnail is outdated.
This attribute is %TRUE if the thumbnail is up-to-date with the file it represents,
and %FALSE if the file has been modified since the thumbnail was generated.

If %G_FILE_ATTRIBUTE_THUMBNAILING_FAILED is %TRUE and this attribute is %FALSE,
it indicates that thumbnailing may be attempted again and may succeed.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: source
#PARENT: Gio.File.copy.gboolean
#COMMENT: input #GFile
#NAME: get_last_serial
#PARENT: Gio.DBusConnection.get_last_serial
#COMMENT: the last used serial or zero when no message has been sent
    within the current thread
#NAME: reply_serial
#PARENT: Gio.DBusMessageHeaderField
#COMMENT: The serial number the message is a reply to.
#NAME: interface
#PARENT: Gio.DBusObjectManager.interface-added.none
#COMMENT: The #GDBusInterface that was added.
#NAME: message
#PARENT: Gio.MountOperation.show-processes.none
#COMMENT: string containing a message to display to the user.
#NAME: credentials
#PARENT: Gio.Credentials.set_unix_user.gboolean
#COMMENT: A #GCredentials.
#NAME: cancellable
#PARENT: Gio.FileIface.read_async.read_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: callback
#PARENT: Gio.FileEnumeratorClass.next_files_async.next_files_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: dbus_error_get_remote_error
#PARENT: Gio
#COMMENT: Gets the D-Bus error name used for @error, if any.

This function is guaranteed to return a D-Bus error name for all
#GErrors returned from functions handling remote method calls
(e.g. g_dbus_connection_call_finish()) unless
g_dbus_error_strip_remote_error() has been used on @error.
#NAME: string
#PARENT: Gio.dbus_is_name.gboolean
#COMMENT: The string to check.
#NAME: connection
#PARENT: Gio.DBusSubtreeDispatchFunc.DBusInterfaceVTable
#COMMENT: A #GDBusConnection.
#NAME: busy
#PARENT: Gio.IOErrorEnum
#COMMENT: File is busy.
#NAME: backend
#PARENT: Gio.Settings.new_full.Settings
#COMMENT: a #GSettingsBackend
#NAME: rehandshake-mode
#PARENT: Gio.TlsConnection
#COMMENT: The rehandshaking mode. See
g_tls_connection_set_rehandshake_mode().
#NAME: replace_contents_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous replace of the given @file. See
g_file_replace_contents_async(). Sets @new_etag to the new entity
tag for the document, if present.
#NAME: result
#PARENT: Gio.SettingsGetMapping.gboolean
#COMMENT: the result of the mapping
#NAME: host_endian
#PARENT: Gio.DataStreamByteOrder
#COMMENT: Selects endianness based on host machine's architecture.
#NAME: connection
#PARENT: Gio.DBusConnection.flush_sync.gboolean
#COMMENT: a #GDBusConnection
#NAME: FILE_ATTRIBUTE_TIME_CHANGED_USEC
#PARENT: Gio
#COMMENT: A key in the "time" namespace for getting the microseconds of the time
the file was last changed. This should be used in conjunction with
#G_FILE_ATTRIBUTE_TIME_CHANGED. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: keypair
#PARENT: Gio.TlsDatabaseLookupFlags
#COMMENT: Restrict lookup to certificates that have
    a private key.
#NAME: VOLUME_IDENTIFIER_KIND_NFS_MOUNT
#PARENT: Gio
#COMMENT: The string used to obtain a NFS mount with g_volume_get_identifier().
#NAME: cancellable
#PARENT: Gio.InputStream.close.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: files
#PARENT: Gio.AppLaunchContextClass.get_startup_notify_id.get_startup_notify_id.utf8
#COMMENT: a #GList of of #GFile objects
#NAME: stream
#PARENT: Gio.FileOutputStream.query_info_finish.FileInfo
#COMMENT: a #GFileOutputStream.
#NAME: MemoryInputStream
#PARENT: Gio
#COMMENT: #GMemoryInputStream is a class for using arbitrary
memory chunks as input for GIO streaming input operations.

As of GLib 2.34, #GMemoryInputStream implements
#GPollableInputStream.
#NAME: file
#PARENT: Gio.FileIface.query_filesystem_info_async.query_filesystem_info_async.none
#COMMENT: input #GFile
#NAME: schema
#PARENT: Gio.Settings
#COMMENT: The name of the schema that describes the types of keys
for this #GSettings object.

The type of this property is *not* #GSettingsSchema.
#GSettingsSchema has only existed since version 2.32 and
unfortunately this name was used in previous versions to refer to
the schema ID rather than the schema itself.  Take care to use the
'settings-schema' property if you wish to pass in a
#GSettingsSchema.
#NAME: get_op_res_gpointer
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Gets a pointer result as returned by the asynchronous function.
#NAME: new
#PARENT: Gio.DBusObjectManagerServer
#COMMENT: Creates a new #GDBusObjectManagerServer object.

The returned server isn't yet exported on any connection. To do so,
use g_dbus_object_manager_server_set_connection(). Normally you
want to export all of your objects before doing so to avoid <ulink
url="http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager">InterfacesAdded</ulink>
signals being emitted.
#NAME: user_data
#PARENT: Gio.DBusProxy.call.none
#COMMENT: The data to pass to @callback.
#NAME: run
#PARENT: Gio.ThreadedSocketService.run
#COMMENT: %TRUE to stop further signal handlers from being called
#NAME: enumerator
#PARENT: Gio.FileEnumerator.set_pending.none
#COMMENT: a #GFileEnumerator.
#NAME: new_for_uri
#PARENT: Gio.File
#COMMENT: Constructs a #GFile for a given URI. This operation never
fails, but the returned object might not support any I/O
operation if @uri is malformed or if the uri type is
not supported.
#NAME: set_attributes_from_info
#PARENT: Gio.File.set_attributes_from_info
#COMMENT: %FALSE if there was any error, %TRUE otherwise.
#NAME: get_invalidated_properties
#PARENT: Gio.DBusProxyFlags
#COMMENT: If set, the property value for any <emphasis>invalidated property</emphasis> will be (asynchronously) retrieved upon receiving the <ulink url="http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-properties">PropertiesChanged</ulink> D-Bus signal and the property will not cause emission of the #GDBusProxy::g-properties-changed signal. When the value is received the #GDBusProxy::g-properties-changed signal is emitted for the property along with the retrieved value. Since 2.32.
#NAME: info
#PARENT: Gio.FileInfo.set_size.none
#COMMENT: a #GFileInfo.
#NAME: write_all_finish
#PARENT: Gio.OutputStream.write_all_finish
#COMMENT: %TRUE on success, %FALSE if there was an error
#NAME: tls_handshaked
#PARENT: Gio.SocketClientEvent
#COMMENT: The client has performed a
  TLS handshake.
#NAME: send_message_with_reply_sync
#PARENT: Gio.DBusConnection.send_message_with_reply_sync
#COMMENT: a locked #GDBusMessage that is the reply
    to @message or %NULL if @error is set
#NAME: object
#PARENT: Gio.DBusObjectSkeleton.add_interface.none
#COMMENT: A #GDBusObjectSkeleton.
#NAME: supports_thread_contexts
#PARENT: Gio.FileIface
#COMMENT: a boolean that indicates whether the #GFile implementation supports thread-default contexts. Since 2.22.
#NAME: ConverterResult
#PARENT: Gio
#COMMENT: Results returned from g_converter_convert().
#NAME: buffer
#PARENT: Gio.InputStream.read_async.none
#COMMENT: a buffer to
    read data into (which should be at least count bytes long).
#NAME: get_objects
#PARENT: Gio.DBusObjectManager.get_objects
#COMMENT: A list of
  #GDBusObject objects. The returned list should be freed with
  g_list_free() after each element has been freed with
  g_object_unref().
#NAME: format
#PARENT: Gio.DBusError.set_dbus_error_valist.none
#COMMENT: printf()-style format to prepend to @dbus_error_message or %NULL.
#NAME: get_byte_order
#PARENT: Gio.DataOutputStream
#COMMENT: Gets the byte order for the stream.
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.run_in_thread.none
#COMMENT: a #GSimpleAsyncResult.
#NAME: result
#PARENT: Gio.OutputStream.write_all_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: info
#PARENT: Gio.DBusInterfaceInfo.cache_release.none
#COMMENT: A GDBusInterfaceInfo
#NAME: callback
#PARENT: Gio.FileInputStreamClass.query_info_async.query_info_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: proxy
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: A #GDBusProxy.
#NAME: none
#PARENT: Gio.ResourceLookupFlags
#COMMENT: No flags set.
#NAME: is-link-local
#PARENT: Gio.InetAddress
#COMMENT: Whether this is a link-local address.
See g_inet_address_get_is_link_local().
#NAME: listen_backlog
#PARENT: Gio.SocketListener.set_backlog.none
#COMMENT: an integer
#NAME: volume
#PARENT: Gio.VolumeIface.get_icon.get_icon.Icon
#COMMENT: a #GVolume
#NAME: lookup_by_name_finish
#PARENT: Gio.ResolverClass.lookup_by_name_finish.lookup_by_name_finish
#COMMENT: a #GList
of #GInetAddress, or %NULL on error. See g_resolver_lookup_by_name()
for more details.
#NAME: res
#PARENT: Gio.File.query_info_finish.FileInfo
#COMMENT: a #GAsyncResult
#NAME: parameter
#PARENT: Gio.Action.activate.none
#COMMENT: the parameter to the activation
#NAME: io_priority
#PARENT: Gio.File.open_readwrite_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: equal
#PARENT: Gio.IconIface.equal.equal
#COMMENT: %TRUE if @icon1 is equal to @icon2. %FALSE otherwise.
#NAME: issuer
#PARENT: Gio.TlsCertificate
#COMMENT: A #GTlsCertificate representing the entity that issued this
certificate. If %NULL, this means that the certificate is either
self-signed, or else the certificate of the issuer is not
available.
#NAME: method_call_message
#PARENT: Gio.DBusMessage.new_method_reply.DBusMessage
#COMMENT: A message of type %G_DBUS_MESSAGE_TYPE_METHOD_CALL to
create a reply message to.
#NAME: get_newline_type
#PARENT: Gio.DataInputStream
#COMMENT: Gets the current newline type for the @stream.
#NAME: cancellable
#PARENT: Gio.Application.register.gboolean
#COMMENT: a #GCancellable, or %NULL
#NAME: set_use_system_certdb
#PARENT: Gio.TlsConnection
#COMMENT: Sets whether @conn uses the system certificate database to verify
peer certificates. This is %TRUE by default. If set to %FALSE, then
peer certificate validation will always set the
%G_TLS_CERTIFICATE_UNKNOWN_CA error (meaning
#GTlsConnection::accept-certificate will always be emitted on
client-side connections, unless that bit is not set in
#GTlsClientConnection:validation-flags).
#NAME: sync
#PARENT: Gio.Settings
#COMMENT: Ensures that all pending operations for the given are complete for
the default backend.

Writes made to a #GSettings are handled asynchronously.  For this
reason, it is very unlikely that the changes have it to disk by the
time g_settings_set() returns.

This call will block until all of the writes have made it to the
backend.  Since the mainloop is not running, no change notifications
will be dispatched during this call (but some may be queued by the
time the call is done).
#NAME: value
#PARENT: Gio.MenuAttributeIterClass.get_next.get_next.gboolean
#COMMENT: the attribute value
#NAME: argv
#PARENT: Gio.SubprocessLauncher.spawnv.Subprocess
#COMMENT: Command line arguments
#NAME: FILE_ATTRIBUTE_TRASH_DELETION_DATE
#PARENT: Gio
#COMMENT: A key in the "trash" namespace.  When requested against
items in "trash:///", will return the date and time when the file
was trashed. The format of the returned string is YYYY-MM-DDThh:mm:ss.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: get_state_type
#PARENT: Gio.Action.get_state_type
#COMMENT: the state type, if the action is stateful
#NAME: size
#PARENT: Gio.LoadableIconIface.load.load.InputStream
#COMMENT: an integer.
#NAME: path
#PARENT: Gio.Resource.open_stream.InputStream
#COMMENT: A pathname inside the resource
#NAME: new
#PARENT: Gio.FileIcon.new
#COMMENT: a #GIcon for the given
  @file, or %NULL on error.
#NAME: flags
#PARENT: Gio.File.monitor.FileMonitor
#COMMENT: a set of #GFileMonitorFlags
#NAME: stream
#PARENT: Gio.FileIOStreamClass.query_info_async.query_info_async.none
#COMMENT: a #GFileIOStream.
#NAME: observer
#PARENT: Gio.DBusServer.new_sync.DBusServer
#COMMENT: A #GDBusAuthObserver or %NULL.
#NAME: user_data
#PARENT: Gio.BufferedInputStreamClass.fill_async.fill_async.none
#COMMENT: a #gpointer
#NAME: address
#PARENT: Gio.InetSocketAddress.get_flowinfo.guint32
#COMMENT: a %G_SOCKET_FAMILY_IPV6 #GInetSocketAddress
#NAME: io_priority
#PARENT: Gio.IOStreamClass.close_async.close_async.none
#COMMENT: the io priority of the request
#NAME: res
#PARENT: Gio.DBusConnection.new_finish.DBusConnection
#COMMENT: a #GAsyncResult obtained from the #GAsyncReadyCallback
    passed to g_dbus_connection_new().
#NAME: uri_scheme
#PARENT: Gio.DesktopAppInfoLookup.get_default_for_uri_scheme.AppInfo
#COMMENT: a string containing a URI scheme.
#NAME: user_data
#PARENT: Gio.Mount.eject.none
#COMMENT: user data passed to @callback.
#NAME: new
#PARENT: Gio.ListStore
#COMMENT: Creates a new #GListStore with items of type @item_type. @item_type
must be a subclass of #GObject.
#NAME: set_action_group
#PARENT: Gio.Application
#COMMENT: This used to be how actions were associated with a #GApplication.
Now there is #GActionMap for that.
#NAME: io_priority
#PARENT: Gio.FileInputStreamClass.query_info_async.query_info_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: set_buffer_size
#PARENT: Gio.BufferedOutputStream
#COMMENT: Sets the size of the internal buffer to @size.
#NAME: model
#PARENT: Gio.MenuModelClass.get_n_items.get_n_items.gint
#COMMENT: a #GMenuModel
#NAME: get_body
#PARENT: Gio.DBusMessage
#COMMENT: Gets the body of a message.
#NAME: new
#PARENT: Gio.UnixMountMonitor
#COMMENT: Deprecated alias for g_unix_mount_monitor_get().

This function was never a true constructor, which is why it was
renamed.
#NAME: simple
#PARENT: Gio.SimpleAction.set_state.none
#COMMENT: a #GSimpleAction
#NAME: attributes
#PARENT: Gio.File.query_info.FileInfo
#COMMENT: an attribute query string
#NAME: io_priority
#PARENT: Gio.AsyncInitable.init_async.none
#COMMENT: the [I/O priority][io-priority] of the operation
#NAME: dbus_error_name
#PARENT: Gio.DBusError.set_dbus_error.none
#COMMENT: D-Bus error name.
#NAME: get_edit_name
#PARENT: Gio.FileInfo.get_edit_name
#COMMENT: a string containing the edit name.
#NAME: base_io_stream
#PARENT: Gio.TlsClientConnection.new.TlsClientConnection
#COMMENT: the #GIOStream to wrap
#NAME: auto_grow
#PARENT: Gio.BufferedOutputStream.set_auto_grow.none
#COMMENT: a #gboolean.
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.set_op_res_gpointer.none
#COMMENT: a #GSimpleAsyncResult.
#NAME: get_current
#PARENT: Gio.Cancellable.get_current
#COMMENT: a #GCancellable from the top
of the stack, or %NULL if the stack is empty.
#NAME: stream
#PARENT: Gio.FileInputStream.query_info.FileInfo
#COMMENT: a #GFileInputStream.
#NAME: read_more_callback
#PARENT: Gio.File.load_partial_contents_async.none
#COMMENT: a #GFileReadMoreCallback to receive partial data
    and to specify whether further data should be read
#NAME: get_sender
#PARENT: Gio.DBusMessage.get_sender
#COMMENT: The value.
#NAME: basename
#PARENT: Gio.IOModuleScope.block.none
#COMMENT: the basename to block
#NAME: has_media
#PARENT: Gio.Drive.has_media
#COMMENT: %TRUE if @drive has media, %FALSE otherwise.
#NAME: cancellable
#PARENT: Gio.FileIface.copy_async.copy_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: query_info_async
#PARENT: Gio.FileInputStream
#COMMENT: Queries the stream information asynchronously.
When the operation is finished @callback will be called.
You can then call g_file_input_stream_query_info_finish()
to get the result of the operation.

For the synchronous version of this function,
see g_file_input_stream_query_info().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set
#NAME: g-properties-changed
#PARENT: Gio.DBusProxy
#COMMENT: Emitted when one or more D-Bus properties on @proxy changes. The
local cache has already been updated when this signal fires. Note
that both @changed_properties and @invalidated_properties are
guaranteed to never be %NULL (either may be empty though).

If the proxy has the flag
%G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES set, then
@invalidated_properties will always be empty.

This signal corresponds to the
`PropertiesChanged` D-Bus signal on the
`org.freedesktop.DBus.Properties` interface.
#NAME: volume
#PARENT: Gio.Volume.mount_fn.none
#COMMENT: a #GVolume
#NAME: get_buffer_size
#PARENT: Gio.BufferedInputStream
#COMMENT: Gets the size of the input buffer.
#NAME: name_appeared_handler
#PARENT: Gio.bus_watch_name.guint
#COMMENT: Handler to invoke when @name is known to exist or %NULL.
#NAME: buffer
#PARENT: Gio.InputVector
#COMMENT: Pointer to a buffer where data will be written.
#NAME: stdin_buf
#PARENT: Gio.Subprocess.communicate.gboolean
#COMMENT: data to send to the stdin of the subprocess, or %NULL
#NAME: bus_type
#PARENT: Gio.DBusProxy.new_for_bus.none
#COMMENT: A #GBusType.
#NAME: type
#PARENT: Gio.content_type_get_mime_type.utf8
#COMMENT: a content type string
#NAME: get_multicast_ttl
#PARENT: Gio.Socket
#COMMENT: Gets the multicast time-to-live setting on @socket; see
g_socket_set_multicast_ttl() for more details.
#NAME: proxy_resolver
#PARENT: Gio.SocketClient.set_proxy_resolver.none
#COMMENT: a #GProxyResolver, or %NULL for the
  default.
#NAME: action_group
#PARENT: Gio.ActionGroup.get_action_state_type.GLib.VariantType
#COMMENT: a #GActionGroup
#NAME: proxy_failed
#PARENT: Gio.IOErrorEnum
#COMMENT: Connection to proxy server failed. Since 2.26
#NAME: address
#PARENT: Gio.Resolver.lookup_by_address_async.none
#COMMENT: the address to reverse-resolve
#NAME: none
#PARENT: Gio.DBusPropertyInfoFlags
#COMMENT: No flags set.
#NAME: Volume
#PARENT: Gio
#COMMENT: The #GVolume interface represents user-visible objects that can be
mounted. Note, when porting from GnomeVFS, #GVolume is the moral
equivalent of #GnomeVFSDrive.

Mounting a #GVolume instance is an asynchronous operation. For more
information about asynchronous operations, see #GAsyncResult and
#GTask. To mount a #GVolume, first call g_volume_mount() with (at
least) the #GVolume instance, optionally a #GMountOperation object
and a #GAsyncReadyCallback.

Typically, one will only want to pass %NULL for the
#GMountOperation if automounting all volumes when a desktop session
starts since it's not desirable to put up a lot of dialogs asking
for credentials.

The callback will be fired when the operation has resolved (either
with success or failure), and a #GAsyncReady structure will be
passed to the callback.  That callback should then call
g_volume_mount_finish() with the #GVolume instance and the
#GAsyncReady data to see if the operation was completed
successfully.  If an @error is present when g_volume_mount_finish()
is called, then it will be filled with any error information.

## Volume Identifiers # {#volume-identifier}

It is sometimes necessary to directly access the underlying
operating system object behind a volume (e.g. for passing a volume
to an application via the commandline). For this purpose, GIO
allows to obtain an 'identifier' for the volume. There can be
different kinds of identifiers, such as Hal UDIs, filesystem labels,
traditional Unix devices (e.g. `/dev/sda2`), UUIDs. GIO uses predefined
strings as names for the different kinds of identifiers:
#G_VOLUME_IDENTIFIER_KIND_HAL_UDI, #G_VOLUME_IDENTIFIER_KIND_LABEL, etc.
Use g_volume_get_identifier() to obtain an identifier for a volume.


Note that #G_VOLUME_IDENTIFIER_KIND_HAL_UDI will only be available
when the gvfs hal volume monitor is in use. Other volume monitors
will generally be able to provide the #G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE
identifier, which can be used to obtain a hal device by means of
libhal_manager_find_device_string_match().
#NAME: kind
#PARENT: Gio.VolumeIface.get_identifier.get_identifier.utf8
#COMMENT: the kind of identifier to return
#NAME: flags
#PARENT: Gio.bus_own_name.guint
#COMMENT: a set of flags from the #GBusNameOwnerFlags enumeration
#NAME: content_type
#PARENT: Gio.AppInfo.add_supports_type.gboolean
#COMMENT: a string.
#NAME: FileProgressCallback
#PARENT: Gio
#COMMENT: When doing file operations that may take a while, such as moving
a file or copying a file, a progress callback is used to pass how
far along that operation is to the application.
#NAME: file
#PARENT: Gio.File.copy_finish.gboolean
#COMMENT: input #GFile
#NAME: data
#PARENT: Gio.Resource.new_from_data.Resource
#COMMENT: A #GBytes
#NAME: receive_credentials_finish
#PARENT: Gio.UnixConnection.receive_credentials_finish
#COMMENT: a #GCredentials, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: new_valist_async
#PARENT: Gio.AsyncInitable
#COMMENT: Helper function for constructing #GAsyncInitable object. This is
similar to g_object_new_valist() but also initializes the object
asynchronously.

When the initialization is finished, @callback will be called. You can
then call g_async_initable_new_finish() to get the new object and check
for any errors.
#NAME: list
#PARENT: Gio.ListModelInterface.get_n_items.get_n_items.guint
#COMMENT: a #GListModel
#NAME: stream
#PARENT: Gio.PollableInputStream.can_poll.gboolean
#COMMENT: a #GPollableInputStream.
#NAME: resolver
#PARENT: Gio.Resolver.lookup_by_address_finish.utf8
#COMMENT: a #GResolver
#NAME: simple_async_report_take_gerror_in_idle
#PARENT: Gio
#COMMENT: Reports an error in an idle function. Similar to
g_simple_async_report_gerror_in_idle(), but takes over the caller's
ownership of @error, so the caller does not have to free it any more.
#NAME: file
#PARENT: Gio.File.poll_mountable_finish.gboolean
#COMMENT: input #GFile
#NAME: task_func
#PARENT: Gio.Task.run_in_thread_sync.none
#COMMENT: a #GTaskThreadFunc
#NAME: action-added
#PARENT: Gio.ActionGroup
#COMMENT: Signals that a new action was just added to the group.
This signal is emitted after the action has been added
and is now visible.
#NAME: file
#PARENT: Gio.File.trash_async.none
#COMMENT: input #GFile
#NAME: load_async
#PARENT: Gio.LoadableIcon
#COMMENT: Loads an icon asynchronously. To finish this function, see
g_loadable_icon_load_finish(). For the synchronous, blocking
version of this function, see g_loadable_icon_load().
#NAME: result
#PARENT: Gio.OutputStream.splice_finish.gssize
#COMMENT: a #GAsyncResult.
#NAME: ref
#PARENT: Gio.DBusAnnotationInfo.ref
#COMMENT: The same @info.
#NAME: object
#PARENT: Gio.DBusInterface.set_object.none
#COMMENT: A #GDBusObject or %NULL.
#NAME: file
#PARENT: Gio.FileIface.monitor_file.monitor_file.FileMonitor
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.File.replace_contents.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: out_info
#PARENT: Gio.FileEnumerator.iterate.gboolean
#COMMENT: Output location for the next #GFileInfo, or %NULL
#NAME: misc
#PARENT: Gio.TlsError
#COMMENT: Miscellaneous TLS error
#NAME: receive_fd
#PARENT: Gio.UnixConnection
#COMMENT: Receives a file descriptor from the sending end of the connection.
The sending end has to call g_unix_connection_send_fd() for this
to work.

As well as reading the fd this also reads a single byte from the
stream, as this is required for fd passing to work on some
implementations.
#NAME: message
#PARENT: Gio.DBusMessageFilterFunction.DBusMessage
#COMMENT: A locked #GDBusMessage that the filter function takes ownership of.
#NAME: cancellable
#PARENT: Gio.FileIface.query_info_async.query_info_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: address
#PARENT: Gio.Socket.bind.gboolean
#COMMENT: a #GSocketAddress specifying the local address.
#NAME: steal_as_bytes
#PARENT: Gio.MemoryOutputStream.steal_as_bytes
#COMMENT: the stream's data
#NAME: user_data
#PARENT: Gio.DBusSubtreeEnumerateFunc.utf8
#COMMENT: The @user_data #gpointer passed to g_dbus_connection_register_subtree().
#NAME: lookup_certificates_issued_by_finish
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by_finish
#COMMENT: a newly allocated list of #GTlsCertificate
objects. Use g_object_unref() on each certificate, and g_list_free() on the release the list.
#NAME: seekable
#PARENT: Gio.SeekableIface.can_seek.can_seek.gboolean
#COMMENT: a #GSeekable.
#NAME: create
#PARENT: Gio.File
#COMMENT: Creates a new file and returns an output stream for writing to it.
The file must not already exist.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level
that is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
returned.

If a file or directory with this name already exists the
%G_IO_ERROR_EXISTS error will be returned. Some file systems don't
allow all file names, and may return an %G_IO_ERROR_INVALID_FILENAME
error, and if the name is to long %G_IO_ERROR_FILENAME_TOO_LONG will
be returned. Other errors are possible too, and depend on what kind
of filesystem the file is on.
#NAME: get_volumes
#PARENT: Gio.Drive
#COMMENT: Get a list of mountable volumes for @drive.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().
#NAME: res
#PARENT: Gio.FileIface.append_to_finish.append_to_finish.FileOutputStream
#COMMENT: #GAsyncResult
#NAME: app_info_get_all
#PARENT: Gio
#COMMENT: Gets a list of all of the applications currently registered
on this system.

For desktop files, this includes applications that have
`NoDisplay=true` set or are excluded from display by means
of `OnlyShowIn` or `NotShowIn`. See g_app_info_should_show().
The returned list does not include applications which have
the `Hidden` key set.
#NAME: file
#PARENT: Gio.FileIface.find_enclosing_mount_async.find_enclosing_mount_async.none
#COMMENT: a #GFile
#NAME: conn
#PARENT: Gio.TlsConnection.get_certificate.TlsCertificate
#COMMENT: a #GTlsConnection
#NAME: has_namespace
#PARENT: Gio.FileInfo
#COMMENT: Checks if a file info structure has an attribute in the
specified @name_space.
#NAME: get_volume_for_uuid
#PARENT: Gio.VolumeMonitor
#COMMENT: Finds a #GVolume object by its UUID (see g_volume_get_uuid())
#NAME: DBusSubtreeDispatchFunc
#PARENT: Gio
#COMMENT: The type of the @dispatch function in #GDBusSubtreeVTable.

Subtrees are flat.  @node, if non-%NULL, is always exactly one
segment of the object path (ie: it never contains a slash).
#NAME: mount1
#PARENT: Gio.unix_mount_compare.gint
#COMMENT: first #GUnixMountEntry to compare.
#NAME: mount2
#PARENT: Gio.unix_mount_compare.gint
#COMMENT: second #GUnixMountEntry to compare.
#NAME: 
#PARENT: Gio.MenuItem.get_attribute.gboolean...
#COMMENT: positional parameters, as per @format_string
#NAME: new
#PARENT: Gio.Socket.new
#COMMENT: a #GSocket or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: addr
#PARENT: Gio.NetworkAddress.get_port.guint16
#COMMENT: a #GNetworkAddress
#NAME: cancellable
#PARENT: Gio.FileIface.measure_disk_usage_async.measure_disk_usage_async.none
#COMMENT: optional #GCancellable
#NAME: get_converter
#PARENT: Gio.ConverterInputStream.get_converter
#COMMENT: the converter of the converter input stream
#NAME: interaction
#PARENT: Gio.TlsInteraction.ask_password_async.none
#COMMENT: a #GTlsInteraction object
#NAME: tls_error_quark
#PARENT: Gio
#COMMENT: Gets the TLS error quark.
#NAME: io_priority
#PARENT: Gio.AsyncInitableIface.init_async.init_async.none
#COMMENT: the [I/O priority][io-priority] of the operation
#NAME: read
#PARENT: Gio.File.read
#COMMENT: #GFileInputStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: mount
#PARENT: Gio.MountIface.remount_finish.remount_finish.gboolean
#COMMENT: a #GMount.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.supports_files.supports_files.gboolean
#COMMENT: a #GAppInfo.
#NAME: user_data
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: The data to pass to @callback.
#NAME: get_volume
#PARENT: Gio.Mount
#COMMENT: Gets the volume for the @mount.
#NAME: launch_uris
#PARENT: Gio.AppInfo
#COMMENT: Launches the application. This passes the @uris to the launched application
as arguments, using the optional @launch_context to get information
about the details of the launcher (like what screen it is on).
On error, @error will be set accordingly.

To launch the application without arguments pass a %NULL @uris list.

Note that even if the launch is successful the application launched
can fail to start if it runs into problems during startup. There is
no way to detect this.
#NAME: changed
#PARENT: Gio.AppInfoMonitor
#COMMENT: Signal emitted when the app info database for changes (ie: newly installed
or removed applications).
#NAME: timeout_msec
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: the timeout in milliseconds, -1 to use the default
    timeout or %G_MAXINT for no timeout
#NAME: mime_type
#PARENT: Gio.content_type_from_mime_type.utf8
#COMMENT: a mime type string
#NAME: subprocess
#PARENT: Gio.Subprocess.wait_check.gboolean
#COMMENT: a #GSubprocess
#NAME: read_until_finish
#PARENT: Gio.DataInputStream
#COMMENT: Finish an asynchronous call started by
g_data_input_stream_read_until_async().
#NAME: target
#PARENT: Gio.SrvTarget.free.none
#COMMENT: a #GSrvTarget
#NAME: get_require_close_notify
#PARENT: Gio.TlsConnection
#COMMENT: Tests whether or not @conn expects a proper TLS close notification
when the connection is closed. See
g_tls_connection_set_require_close_notify() for details.
#NAME: flags
#PARENT: Gio.FileIface.monitor_file.monitor_file.FileMonitor
#COMMENT: a set of #GFileMonitorFlags
#NAME: result
#PARENT: Gio.SocketClient.connect_to_host_finish.SocketConnection
#COMMENT: a #GAsyncResult.
#NAME: range_check
#PARENT: Gio.Settings.range_check
#COMMENT: %TRUE if @value is valid for @key
#NAME: clear_pending
#PARENT: Gio.InputStream
#COMMENT: Clears the pending flag on @stream.
#NAME: size
#PARENT: Gio.Socket.send_to.gssize
#COMMENT: the number of bytes to send
#NAME: removed
#PARENT: Gio.MenuModel.items-changed.none
#COMMENT: the number of items removed
#NAME: get_container
#PARENT: Gio.FileEnumerator
#COMMENT: Get the #GFile container which is being enumerated.
#NAME: parse_name
#PARENT: Gio.File.parse_name
#COMMENT: a new #GFile.
#NAME: user_data
#PARENT: Gio.File.unmount_mountable_with_operation.none
#COMMENT: the data to pass to callback function
#NAME: cancellable
#PARENT: Gio.DataOutputStream.put_int64.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: communicate_async
#PARENT: Gio.Subprocess
#COMMENT: Asynchronous version of g_subprocess_communicate().  Complete
invocation with g_subprocess_communicate_finish().
#NAME: interface_
#PARENT: Gio.DBusInterfaceIface.get_info.get_info.DBusInterfaceInfo
#COMMENT: An exported D-Bus interface.
#NAME: get_length
#PARENT: Gio.UnixFDList.get_length
#COMMENT: the length of @list
#NAME: file
#PARENT: Gio.File.set_attribute.gboolean
#COMMENT: input #GFile
#NAME: name_lost_handler
#PARENT: Gio.bus_own_name.guint
#COMMENT: handler to invoke when @name is lost or %NULL
#NAME: monitor
#PARENT: Gio.NetworkMonitor.can_reach_finish.gboolean
#COMMENT: a #GNetworkMonitor
#NAME: new_with_backend
#PARENT: Gio.Settings.new_with_backend
#COMMENT: a new #GSettings object
#NAME: uri_scheme
#PARENT: Gio.app_info_get_default_for_uri_scheme.AppInfo
#COMMENT: a string containing a URI scheme.
#NAME: file
#PARENT: Gio.File.set_attributes_from_info.gboolean
#COMMENT: input #GFile
#NAME: interaction
#PARENT: Gio.TlsInteractionClass.ask_password.ask_password.TlsInteractionResult
#COMMENT: a #GTlsInteraction object
#NAME: name
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: The well-known name or unique name that the manager is for.
#NAME: block
#PARENT: Gio.IOModuleScope
#COMMENT: Block modules with the given @basename from being loaded when
this scope is used with g_io_modules_scan_all_in_directory_with_scope()
or g_io_modules_load_all_in_directory_with_scope().
#NAME: fd
#PARENT: Gio.UnixFDList.append.gint
#COMMENT: a valid open file descriptor
#NAME: message
#PARENT: Gio.DBusMessage.set_destination.none
#COMMENT: A #GDBusMessage.
#NAME: get_startup_wm_class
#PARENT: Gio.DesktopAppInfo
#COMMENT: Retrieves the StartupWMClass field from @info. This represents the
WM_CLASS property of the main window of the application, if launched
through @info.
#NAME: overwrite
#PARENT: Gio.SubprocessLauncher.setenv.none
#COMMENT: whether to change the variable if it already exists
#NAME: callback
#PARENT: Gio.DBusConnection.new.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: etag_out
#PARENT: Gio.File.load_contents_finish.gboolean
#COMMENT: a location to place the current entity tag for the file,
    or %NULL if the entity tag is not needed
#NAME: put_int64
#PARENT: Gio.DataOutputStream.put_int64
#COMMENT: %TRUE if @data was successfully added to the @stream.
#NAME: enabled
#PARENT: Gio.PropertyAction
#COMMENT: If @action is currently enabled.

If the action is disabled then calls to g_action_activate() and
g_action_change_state() have no effect.
#NAME: address
#PARENT: Gio.ResolverClass.lookup_by_address.lookup_by_address.utf8
#COMMENT: the address to reverse-resolve
#NAME: shutdown_write
#PARENT: Gio.Socket.shutdown.gboolean
#COMMENT: whether to shut down the write side
#NAME: set_pending
#PARENT: Gio.InputStream.set_pending
#COMMENT: %TRUE if pending was previously unset and is now set.
#NAME: mount_operation
#PARENT: Gio.MountIface.unmount_with_operation.unmount_with_operation.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: content_type_guess
#PARENT: Gio
#COMMENT: Guesses the content type based on example data. If the function is
uncertain, @result_uncertain will be set to %TRUE. Either @filename
or @data may be %NULL, in which case the guess will be based solely
on the other argument.
#NAME: get_name
#PARENT: Gio.VolumeIface.get_name.get_name
#COMMENT: the name for the given @volume. The returned string should
    be freed with g_free() when no longer needed.
#NAME: new
#PARENT: Gio.ZlibDecompressor.new
#COMMENT: a new #GZlibDecompressor
#NAME: name
#PARENT: Gio.FileAttributeInfoList.add.none
#COMMENT: the name of the attribute to add.
#NAME: unset
#PARENT: Gio.TestDBus
#COMMENT: Unset DISPLAY and DBUS_SESSION_BUS_ADDRESS env variables to ensure the test
won't use user's session bus.

This is useful for unit tests that want to verify behaviour when no session
bus is running. It is not necessary to call this if unit test already calls
g_test_dbus_up() before acquiring the session bus.
#NAME: dbus_error_name
#PARENT: Gio.dbus_error_unregister_error.gboolean
#COMMENT: A D-Bus error name.
#NAME: get_sort_key
#PARENT: Gio.Drive.get_sort_key
#COMMENT: Sorting key for @drive or %NULL if no such key is available.
#NAME: drive
#PARENT: Gio.VolumeMonitor.drive-disconnected.none
#COMMENT: a #GDrive that was disconnected.
#NAME: flush_sync
#PARENT: Gio.DBusConnection
#COMMENT: Synchronously flushes @connection. The calling thread is blocked
until this is done. See g_dbus_connection_flush() for the
asynchronous version of this method and more details about what it
does.
#NAME: release
#PARENT: Gio.PermissionClass.release.release
#COMMENT: %TRUE if the permission was successfully released
#NAME: unmount_mountable_finish
#PARENT: Gio.FileIface.unmount_mountable_finish.unmount_mountable_finish
#COMMENT: %TRUE if the operation finished successfully.
    %FALSE otherwise.
#NAME: FILE_ATTRIBUTE_GVFS_BACKEND
#PARENT: Gio
#COMMENT: A key in the "gvfs" namespace that gets the name of the current
GVFS backend in use. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: user_data
#PARENT: Gio.FileIface.unmount_mountable_with_operation.unmount_mountable_with_operation.none
#COMMENT: the data to pass to callback function
#NAME: drive
#PARENT: Gio.DriveIface.stop.stop.none
#COMMENT: a #GDrive.
#NAME: value
#PARENT: Gio.DBusMessage.set_num_unix_fds.none
#COMMENT: The value to set.
#NAME: callback
#PARENT: Gio.FileIface.append_to_async.append_to_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: name
#PARENT: Gio.bus_own_name_on_connection.guint
#COMMENT: the well-known name to own
#NAME: none
#PARENT: Gio.AppInfoCreateFlags
#COMMENT: No flags.
#NAME: new_with_default_fallbacks
#PARENT: Gio.ThemedIcon
#COMMENT: Creates a new themed icon for @iconname, and all the names
that can be created by shortening @iconname at '-' characters.

In the following example, @icon1 and @icon2 are equivalent:
|[<!-- language="C" -->
const char *names[] = {
  "gnome-dev-cdrom-audio",
  "gnome-dev-cdrom",
  "gnome-dev",
  "gnome"
};

icon1 = g_themed_icon_new_from_names (names, 4);
icon2 = g_themed_icon_new_with_default_fallbacks ("gnome-dev-cdrom-audio");
]|
#NAME: condition
#PARENT: Gio.Socket.condition_timed_wait.gboolean
#COMMENT: a #GIOCondition mask to wait for
#NAME: bus_own_name
#PARENT: Gio
#COMMENT: Starts acquiring @name on the bus specified by @bus_type and calls
@name_acquired_handler and @name_lost_handler when the name is
acquired respectively lost. Callbacks will be invoked in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this function from.

You are guaranteed that one of the @name_acquired_handler and @name_lost_handler
callbacks will be invoked after calling this function - there are three
possible cases:

- @name_lost_handler with a %NULL connection (if a connection to the bus
  can't be made).

- @bus_acquired_handler then @name_lost_handler (if the name can't be
  obtained)

- @bus_acquired_handler then @name_acquired_handler (if the name was
  obtained).

When you are done owning the name, just call g_bus_unown_name()
with the owner id this function returns.

If the name is acquired or lost (for example another application
could acquire the name if you allow replacement or the application
currently owning the name exits), the handlers are also invoked.
If the #GDBusConnection that is used for attempting to own the name
closes, then @name_lost_handler is invoked since it is no longer
possible for other processes to access the process.

You cannot use g_bus_own_name() several times for the same name (unless
interleaved with calls to g_bus_unown_name()) - only the first call
will work.

Another guarantee is that invocations of @name_acquired_handler
and @name_lost_handler are guaranteed to alternate; that
is, if @name_acquired_handler is invoked then you are
guaranteed that the next time one of the handlers is invoked, it
will be @name_lost_handler. The reverse is also true.

If you plan on exporting objects (using e.g.
g_dbus_connection_register_object()), note that it is generally too late
to export the objects in @name_acquired_handler. Instead, you can do this
in @bus_acquired_handler since you are guaranteed that this will run
before @name is requested from the bus.

This behavior makes it very simple to write applications that wants
to [own names][gdbus-owning-names] and export objects.
Simply register objects to be exported in @bus_acquired_handler and
unregister the objects (if any) in @name_lost_handler.
#NAME: attributes
#PARENT: Gio.FileOutputStreamClass.query_info_async.query_info_async.none
#COMMENT: a file attribute query string.
#NAME: label
#PARENT: Gio.MenuItem.new_submenu.MenuItem
#COMMENT: the section label, or %NULL
#NAME: state-type
#PARENT: Gio.PropertyAction
#COMMENT: The #GVariantType of the state that the action has, or %NULL if the
action is stateless.
#NAME: stderr_merge
#PARENT: Gio.SubprocessFlags
#COMMENT: merge the stderr of the spawned
  process with whatever the stdout happens to be.  This is a good way
  of directing both streams to a common log file, for example.
#NAME: get_flags
#PARENT: Gio.TestDBus.get_flags
#COMMENT: the value of #GTestDBus:flags property
#NAME: user_data
#PARENT: Gio.File.find_enclosing_mount_async.none
#COMMENT: the data to pass to callback function
#NAME: launch_context
#PARENT: Gio.DesktopAppInfo.launch_uris_as_manager.gboolean
#COMMENT: a #GAppLaunchContext
#NAME: cancellable
#PARENT: Gio.Subprocess.communicate_utf8_async.none
#COMMENT: Cancellable
#NAME: DBusSubtreeIntrospectFunc
#PARENT: Gio.DBusSubtreeIntrospectFunc
#COMMENT: A %NULL-terminated array of pointers to #GDBusInterfaceInfo, or %NULL.
#NAME: proxy_get_default_for_protocol
#PARENT: Gio
#COMMENT: Lookup "gio-proxy" extension point for a proxy implementation that supports
specified protocol.
#NAME: blocking
#PARENT: Gio.Socket.send_with_blocking.gssize
#COMMENT: whether to do blocking or non-blocking I/O
#NAME: FileAttributeInfoList
#PARENT: Gio
#COMMENT: Acts as a lightweight registry for possible valid file attributes.
The registry stores Key-Value pair formats as #GFileAttributeInfos.
#NAME: send_notification
#PARENT: Gio.Application
#COMMENT: Sends a notification on behalf of @application to the desktop shell.
There is no guarantee that the notification is displayed immediately,
or even at all.

Notifications may persist after the application exits. It will be
D-Bus-activated when the notification or one of its actions is
activated.

Modifying @notification after this call has no effect. However, the
object can be reused for a later call to this function.

@id may be any string that uniquely identifies the event for the
application. It does not need to be in any special format. For
example, "new-message" might be appropriate for a notification about
new messages.

If a previous notification was sent with the same @id, it will be
replaced with @notification and shown again as if it was a new
notification. This works even for notifications sent from a previous
execution of the application, as long as @id is the same string.

@id may be %NULL, but it is impossible to replace or withdraw
notifications without an id.

If @notification is no longer relevant, it can be withdrawn with
g_application_withdraw_notification().
#NAME: stream
#PARENT: Gio.DBusConnection
#COMMENT: The underlying #GIOStream used for I/O.

If this is passed on construction and is a #GSocketConnection,
then the corresponding #GSocket will be put into non-blocking mode.

While the #GDBusConnection is active, it will interact with this
stream from a worker thread, so it is not safe to interact with
the stream directly.
#NAME: interface_name
#PARENT: Gio.DBusObject.get_interface.DBusInterface
#COMMENT: A D-Bus interface name.
#NAME: source_object
#PARENT: Gio.Task.report_new_error.none
#COMMENT: the #GObject that owns
  this task, or %NULL.
#NAME: lookup_by_name
#PARENT: Gio.Resolver
#COMMENT: Synchronously resolves @hostname to determine its associated IP
address(es). @hostname may be an ASCII-only or UTF-8 hostname, or
the textual form of an IP address (in which case this just becomes
a wrapper around g_inet_address_new_from_string()).

On success, g_resolver_lookup_by_name() will return a non-empty #GList of
#GInetAddress, sorted in order of preference and guaranteed to not
contain duplicates. That is, if using the result to connect to
@hostname, you should attempt to connect to the first address
first, then the second if the first fails, etc. If you are using
the result to listen on a socket, it is appropriate to add each
result using e.g. g_socket_listener_add_address().

If the DNS resolution fails, @error (if non-%NULL) will be set to a
value from #GResolverError and %NULL will be returned.

If @cancellable is non-%NULL, it can be used to cancel the
operation, in which case @error (if non-%NULL) will be set to
%G_IO_ERROR_CANCELLED.

If you are planning to connect to a socket on the resolved IP
address, it may be easier to create a #GNetworkAddress and use its
#GSocketConnectable interface.
#NAME: timeout
#PARENT: Gio.Socket.set_timeout.none
#COMMENT: the timeout for @socket, in seconds, or 0 for none
#NAME: callback
#PARENT: Gio.SocketAddressEnumeratorClass.next_async.next_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request
    is satisfied
#NAME: self
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle_async.none
#COMMENT: a #GTlsDatabase
#NAME: changed
#PARENT: Gio.Volume
#COMMENT: Emitted when the volume has been changed.
#NAME: address
#PARENT: Gio.dbus_address_get_stream.none
#COMMENT: A valid D-Bus address.
#NAME: generate_xml
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: Appends an XML representation of @info (and its children) to @string_builder.

This function is typically used for generating introspection XML
documents at run-time for handling the
`org.freedesktop.DBus.Introspectable.Introspect`
method.
#NAME: domain
#PARENT: Gio.SocketClient.connect_to_service_async.none
#COMMENT: a domain name
#NAME: icon
#PARENT: Gio.Icon.to_tokens.gboolean
#COMMENT: a #GIcon.
#NAME: MENU_ATTRIBUTE_ACTION_NAMESPACE
#PARENT: Gio
#COMMENT: The menu item attribute that holds the namespace for all action names in
menus that are linked from this item.
#NAME: print_detailed_name
#PARENT: Gio.Action.print_detailed_name
#COMMENT: a detailed format string
#NAME: cancellable
#PARENT: Gio.FileInputStreamClass.query_info.query_info.FileInfo
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: flush_finish
#PARENT: Gio.OutputStreamClass.flush_finish.flush_finish
#COMMENT: %TRUE if flush operation succeeded, %FALSE otherwise.
#NAME: volume
#PARENT: Gio.Volume.can_eject.gboolean
#COMMENT: a #GVolume
#NAME: proxy
#PARENT: Gio.DBusProxy.call_with_unix_fd_list.none
#COMMENT: A #GDBusProxy.
#NAME: application
#PARENT: Gio.Application.open.none
#COMMENT: a #GApplication
#NAME: arg
#PARENT: Gio.File.new_for_commandline_arg.File
#COMMENT: a command line string
#NAME: get_completions
#PARENT: Gio.FilenameCompleter.get_completions
#COMMENT: array of strings with possible completions for @initial_text.
This array must be freed by g_strfreev() when finished.
#NAME: DBusMessageHeaderField
#PARENT: Gio
#COMMENT: Header fields used in #GDBusMessage.
#NAME: callback
#PARENT: Gio.AsyncInitable.newv_async.none
#COMMENT: a #GAsyncReadyCallback to call when the initialization is
    finished
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.action_removed.action_removed.none
#COMMENT: a #GActionGroup
#NAME: get_task_data
#PARENT: Gio.Task
#COMMENT: Gets @task's `task_data`.
#NAME: new
#PARENT: Gio.TlsFileDatabase.new
#COMMENT: the new
#GTlsFileDatabase, or %NULL on error
#NAME: get_sort_order
#PARENT: Gio.FileInfo
#COMMENT: Gets the value of the sort_order attribute from the #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.
#NAME: io_priority
#PARENT: Gio.File.create_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: stderr_buf
#PARENT: Gio.Subprocess.communicate_finish.gboolean
#COMMENT: Return location for stderr data
#NAME: mount-changed
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when a mount changes.
#NAME: user_data
#PARENT: Gio.DBusObjectManagerClient.new.none
#COMMENT: The data to pass to @callback.
#NAME: stream
#PARENT: Gio.OutputStreamClass.write_finish.write_finish.gssize
#COMMENT: a #GOutputStream.
#NAME: bus_watch_name
#PARENT: Gio.bus_watch_name
#COMMENT: An identifier (never 0) that an be used with
g_bus_unwatch_name() to stop watching the name.
#NAME: flags
#PARENT: Gio.File.mount_enclosing_volume.none
#COMMENT: flags affecting the operation
#NAME: source_object
#PARENT: Gio.SocketService.incoming.gboolean
#COMMENT: the source_object passed to
    g_socket_listener_add_address()
#NAME: new
#PARENT: Gio.UnixCredentialsMessage.new
#COMMENT: a new #GUnixCredentialsMessage
#NAME: action
#PARENT: Gio.Action.get_parameter_type.GLib.VariantType
#COMMENT: a #GAction
#NAME: get_user_value
#PARENT: Gio.Settings
#COMMENT: Checks the "user value" of a key, if there is one.

The user value of a key is the last value that was set by the user.

After calling g_settings_reset() this function should always return
%NULL (assuming something is not wrong with the system
configuration).

It is possible that g_settings_get_value() will return a different
value than this function.  This can happen in the case that the user
set a value for a key that was subsequently locked down by the system
administrator -- this function will return the user's old value.

This function may be useful for adding a "reset" option to a UI or
for providing indication that a particular value has been changed.

It is a programmer error to give a @key that isn't contained in the
schema for @settings.
#NAME: eject_with_operation_finish
#PARENT: Gio.Volume
#COMMENT: Finishes ejecting a volume. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.
#NAME: key
#PARENT: Gio.DBusAnnotationInfo
#COMMENT: The name of the annotation, e.g. "org.freedesktop.DBus.Deprecated".
#NAME: get_certificate_type
#PARENT: Gio.TlsBackend
#COMMENT: Gets the #GType of @backend's #GTlsCertificate implementation.
#NAME: unix_mount_free
#PARENT: Gio
#COMMENT: Frees a unix mount.
#NAME: names
#PARENT: Gio.ThemedIcon
#COMMENT: A %NULL-terminated array of icon names.
#NAME: request_certificate_async
#PARENT: Gio.TlsInteraction
#COMMENT: Run asynchronous interaction to ask the user for a certificate to use with
the connection. In general, g_tls_interaction_invoke_request_certificate() should
be used instead of this function.

Derived subclasses usually implement a certificate selector, although they may
also choose to provide a certificate from elsewhere. @callback will be called
when the operation completes. Alternatively the user may abort this certificate
request, which will usually abort the TLS connection.
#NAME: callback
#PARENT: Gio.TlsConnection.handshake_async.none
#COMMENT: callback to call when the handshake is complete
#NAME: mount
#PARENT: Gio.VolumeMonitor.adopt_orphan_mount.Volume
#COMMENT: a #GMount object to find a parent for
#NAME: FILE_ATTRIBUTE_UNIX_NLINK
#PARENT: Gio
#COMMENT: A key in the "unix" namespace for getting the number of hard links
for a file. See lstat() documentation. This attribute is only available
for UNIX file systems. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: DBusObjectManagerServerClass
#PARENT: Gio
#COMMENT: Class structure for #GDBusObjectManagerServer.
#NAME: unix_mount_compare
#PARENT: Gio.unix_mount_compare
#COMMENT: 1, 0 or -1 if @mount1 is greater than, equal to,
or less than @mount2, respectively.
#NAME: bus_get
#PARENT: Gio
#COMMENT: Asynchronously connects to the message bus specified by @bus_type.

When the operation is finished, @callback will be invoked. You can
then call g_bus_get_finish() to get the result of the operation.

This is a asynchronous failable function. See g_bus_get_sync() for
the synchronous version.
#NAME: icon_new_for_string
#PARENT: Gio.icon_new_for_string
#COMMENT: An object implementing the #GIcon
         interface or %NULL if @error is set.
#NAME: copy
#PARENT: Gio.DBusMessage.copy
#COMMENT: A new #GDBusMessage or %NULL if @error is set.
    Free with g_object_unref().
#NAME: enumerator
#PARENT: Gio.FileEnumeratorClass.close_finish.close_finish.gboolean
#COMMENT: a #GFileEnumerator.
#NAME: count
#PARENT: Gio.InputStream.read_all.gboolean
#COMMENT: the number of bytes that will be read from the stream
#NAME: next_finish
#PARENT: Gio.SocketAddressEnumerator
#COMMENT: Retrieves the result of a completed call to
g_socket_address_enumerator_next_async(). See
g_socket_address_enumerator_next() for more information about
error handling.
#NAME: self
#PARENT: Gio.TlsDatabase.create_certificate_handle.utf8
#COMMENT: a #GTlsDatabase
#NAME: callback
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by_async.none
#COMMENT: callback to call when the operation completes
#NAME: application
#PARENT: Gio.ApplicationClass.open.open.none
#COMMENT: a #GApplication
#NAME: protocol
#PARENT: Gio.NetworkService.new.NetworkService
#COMMENT: the networking protocol to use for @service (eg, "tcp")
#NAME: send_messages
#PARENT: Gio.Socket
#COMMENT: Send multiple data messages from @socket in one go.  This is the most
complicated and fully-featured version of this call. For easier use, see
g_socket_send(), g_socket_send_to(), and g_socket_send_message().

@messages must point to an array of #GOutputMessage structs and
@num_messages must be the length of this array. Each #GOutputMessage
contains an address to send the data to, and a pointer to an array of
#GOutputVector structs to describe the buffers that the data to be sent
for each message will be gathered from. Using multiple #GOutputVectors is
more memory-efficient than manually copying data from multiple sources
into a single buffer, and more network-efficient than making multiple
calls to g_socket_send(). Sending multiple messages in one go avoids the
overhead of making a lot of syscalls in scenarios where a lot of data
packets need to be sent (e.g. high-bandwidth video streaming over RTP/UDP),
or where the same data needs to be sent to multiple recipients.

@flags modify how the message is sent. The commonly available arguments
for this are available in the #GSocketMsgFlags enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too.

If the socket is in blocking mode the call will block until there is
space for all the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
will be returned if no data was written at all, otherwise the number of
messages sent will be returned. To be notified when space is available,
wait for the %G_IO_OUT condition. Note though that you may still receive
%G_IO_ERROR_WOULD_BLOCK from g_socket_send() even if you were previously
notified of a %G_IO_OUT condition. (On Windows in particular, this is
very common due to the way the underlying APIs work.)

On error -1 is returned and @error is set accordingly.
#NAME: get_attribute_string
#PARENT: Gio.FileInfo.get_attribute_string
#COMMENT: the contents of the @attribute value as a UTF-8 string, or
%NULL otherwise.
#NAME: reset
#PARENT: Gio.Settings
#COMMENT: Resets @key to its default value.

This call resets the key, as much as possible, to its default value.
That might the value specified in the schema or the one set by the
administrator.
#NAME: res
#PARENT: Gio.AsyncInitable.new_finish.GObject.Object
#COMMENT: the #GAsyncResult from the callback
#NAME: to_tokens
#PARENT: Gio.Icon
#COMMENT: Generates a textual representation of @icon that can be used for
serialization such as when passing @icon to a different process or
saving it to persistent storage. Use g_icon_new_for_string() to
get @icon back from the returned string.

The encoding of the returned string is proprietary to #GIcon except
in the following two cases

- If @icon is a #GFileIcon, the returned string is a native path
  (such as `/path/to/my icon.png`) without escaping
  if the #GFile for @icon is a native file.  If the file is not
  native, the returned string is the result of g_file_get_uri()
  (such as `sftp://path/to/my%20icon.png`).

- If @icon is a #GThemedIcon with exactly one name, the encoding is
   simply the name (such as `network-server`).
#NAME: delete_file_finish
#PARENT: Gio.File.delete_file_finish
#COMMENT: %TRUE if the file was deleted. %FALSE otherwise.
#NAME: encode_gerror
#PARENT: Gio.DBusError.encode_gerror
#COMMENT: A D-Bus error name (never %NULL). Free with g_free().
#NAME: get_interface
#PARENT: Gio.DBusObject.get_interface
#COMMENT: %NULL if not found, otherwise a
  #GDBusInterface that must be freed with g_object_unref().
#NAME: cancellable
#PARENT: Gio.NetworkMonitor.can_reach_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: Settings
#PARENT: Gio
#COMMENT: The #GSettings class provides a convenient API for storing and retrieving
application settings.

Reads and writes can be considered to be non-blocking.  Reading
settings with #GSettings is typically extremely fast: on
approximately the same order of magnitude (but slower than) a
#GHashTable lookup.  Writing settings is also extremely fast in terms
of time to return to your application, but can be extremely expensive
for other threads and other processes.  Many settings backends
(including dconf) have lazy initialisation which means in the common
case of the user using their computer without modifying any settings
a lot of work can be avoided.  For dconf, the D-Bus service doesn't
even need to be started in this case.  For this reason, you should
only ever modify #GSettings keys in response to explicit user action.
Particular care should be paid to ensure that modifications are not
made during startup -- for example, when setting the initial value
of preferences widgets.  The built-in g_settings_bind() functionality
is careful not to write settings in response to notify signals as a
result of modifications that it makes to widgets.

When creating a GSettings instance, you have to specify a schema
that describes the keys in your settings and their types and default
values, as well as some other information.

Normally, a schema has as fixed path that determines where the settings
are stored in the conceptual global tree of settings. However, schemas
can also be 'relocatable', i.e. not equipped with a fixed path. This is
useful e.g. when the schema describes an 'account', and you want to be
able to store a arbitrary number of accounts.

Paths must start with and end with a forward slash character ('/')
and must not contain two sequential slash characters.  Paths should
be chosen based on a domain name associated with the program or
library to which the settings belong.  Examples of paths are
"/org/gtk/settings/file-chooser/" and "/ca/desrt/dconf-editor/".
Paths should not start with "/apps/", "/desktop/" or "/system/" as
they often did in GConf.

Unlike other configuration systems (like GConf), GSettings does not
restrict keys to basic types like strings and numbers. GSettings stores
values as #GVariant, and allows any #GVariantType for keys. Key names
are restricted to lowercase characters, numbers and '-'. Furthermore,
the names must begin with a lowercase character, must not end
with a '-', and must not contain consecutive dashes.

GSettings supports change notification.  The primary mechanism to
watch for changes is to connect to the "changed" signal.  You can
optionally watch for changes on only a single key by using a signal
detail.  Signals are only guaranteed to be emitted for a given key
after you have read the value of that key while a signal handler was
connected for that key.  Signals may or may not be emitted in the
case that the key "changed" to the value that you had previously
read.  Signals may be reported in additional cases as well and the
"changed" signal should really be treated as "may have changed".

Similar to GConf, the default values in GSettings schemas can be
localized, but the localized values are stored in gettext catalogs
and looked up with the domain that is specified in the
gettext-domain attribute of the <schemalist> or <schema>
elements and the category that is specified in the l10n attribute of
the <key> element.

GSettings uses schemas in a compact binary form that is created
by the [glib-compile-schemas][glib-compile-schemas]
utility. The input is a schema description in an XML format.

A DTD for the gschema XML format can be found here:
[gschema.dtd](https://git.gnome.org/browse/glib/tree/gio/gschema.dtd)

The [glib-compile-schemas][glib-compile-schemas] tool expects schema
files to have the extension `.gschema.xml`.

At runtime, schemas are identified by their id (as specified in the
id attribute of the <schema> element). The convention for schema
ids is to use a dotted name, similar in style to a D-Bus bus name,
e.g. "org.gnome.SessionManager". In particular, if the settings are
for a specific service that owns a D-Bus bus name, the D-Bus bus name
and schema id should match. For schemas which deal with settings not
associated with one named application, the id should not use
StudlyCaps, e.g. "org.gnome.font-rendering".

In addition to #GVariant types, keys can have types that have
enumerated types. These can be described by a <choice>,
<enum> or <flags> element, as seen in the
[example][schema-enumerated]. The underlying type of such a key
is string, but you can use g_settings_get_enum(), g_settings_set_enum(),
g_settings_get_flags(), g_settings_set_flags() access the numeric values
corresponding to the string value of enum and flags keys.

An example for default value:
|[
<schemalist>
  <schema id="org.gtk.Test" path="/org/gtk/Test/" gettext-domain="test">

    <key name="greeting" type="s">
      <default l10n="messages">"Hello, earthlings"</default>
      <summary>A greeting</summary>
      <description>
        Greeting of the invading martians
      </description>
    </key>

    <key name="box" type="(ii)">
      <default>(20,30)</default>
    </key>

  </schema>
</schemalist>
]|

An example for ranges, choices and enumerated types:
|[
<schemalist>

  <enum id="org.gtk.Test.myenum">
    <value nick="first" value="1"/>
    <value nick="second" value="2"/>
  </enum>

  <flags id="org.gtk.Test.myflags">
    <value nick="flag1" value="1"/>
    <value nick="flag2" value="2"/>
    <value nick="flag3" value="4"/>
  </flags>

  <schema id="org.gtk.Test">

    <key name="key-with-range" type="i">
      <range min="1" max="100"/>
      <default>10</default>
    </key>

    <key name="key-with-choices" type="s">
      <choices>
        <choice value='Elisabeth'/>
        <choice value='Annabeth'/>
        <choice value='Joe'/>
      </choices>
      <aliases>
        <alias value='Anna' target='Annabeth'/>
        <alias value='Beth' target='Elisabeth'/>
      </aliases>
      <default>'Joe'</default>
    </key>

    <key name='enumerated-key' enum='org.gtk.Test.myenum'>
      <default>'first'</default>
    </key>

    <key name='flags-key' flags='org.gtk.Test.myflags'>
      <default>["flag1","flag2"]</default>
    </key>
  </schema>
</schemalist>
]|

## Vendor overrides

Default values are defined in the schemas that get installed by
an application. Sometimes, it is necessary for a vendor or distributor
to adjust these defaults. Since patching the XML source for the schema
is inconvenient and error-prone,
[glib-compile-schemas][glib-compile-schemas] reads so-called vendor
override' files. These are keyfiles in the same directory as the XML
schema sources which can override default values. The schema id serves
as the group name in the key file, and the values are expected in
serialized GVariant form, as in the following example:
|[
    [org.gtk.Example]
    key1='string'
    key2=1.5
]|

glib-compile-schemas expects schema files to have the extension
`.gschema.override`.

## Binding

A very convenient feature of GSettings lets you bind #GObject properties
directly to settings, using g_settings_bind(). Once a GObject property
has been bound to a setting, changes on either side are automatically
propagated to the other side. GSettings handles details like mapping
between GObject and GVariant types, and preventing infinite cycles.

This makes it very easy to hook up a preferences dialog to the
underlying settings. To make this even more convenient, GSettings
looks for a boolean property with the name "sensitivity" and
automatically binds it to the writability of the bound setting.
If this 'magic' gets in the way, it can be suppressed with the
#G_SETTINGS_BIND_NO_SENSITIVITY flag.
#NAME: new_resizable
#PARENT: Gio.MemoryOutputStream
#COMMENT: Creates a new #GMemoryOutputStream, using g_realloc() and g_free()
for memory allocation.
#NAME: get_peer_certificate_errors
#PARENT: Gio.TlsConnection
#COMMENT: Gets the errors associated with validating @conn's peer's
certificate, after the handshake has completed. (It is not set
during the emission of #GTlsConnection::accept-certificate.)
#NAME: compare
#PARENT: Gio.UnixMountPoint.compare
#COMMENT: 1, 0 or -1 if @mount1 is greater than, equal to,
or less than @mount2, respectively.
#NAME: result
#PARENT: Gio.FileInputStream.query_info_finish.FileInfo
#COMMENT: a #GAsyncResult.
#NAME: call_with_unix_fd_list_sync
#PARENT: Gio.DBusProxy
#COMMENT: Like g_dbus_proxy_call_sync() but also takes and returns #GUnixFDList objects.

This method is only available on UNIX.
#NAME: DBusObjectIface
#PARENT: Gio
#COMMENT: Base object type for D-Bus objects.
#NAME: count
#PARENT: Gio.BufferedInputStream.peek.gsize
#COMMENT: a #gsize
#NAME: get_num_fallbacks
#PARENT: Gio.CharsetConverter.get_num_fallbacks
#COMMENT: the number of fallbacks that @converter has applied
#NAME: cancellable
#PARENT: Gio.FileIOStreamClass.query_info_async.query_info_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_is_mc_site_local
#PARENT: Gio.InetAddress.get_is_mc_site_local
#COMMENT: %TRUE if @address is a site-local multicast address.
#NAME: 
#PARENT: Gio.SubprocessLauncher.spawn.Subprocess...
#COMMENT: Continued arguments, %NULL terminated
#NAME: DBusInterfaceSetPropertyFunc
#PARENT: Gio
#COMMENT: The type of the @set_property function in #GDBusInterfaceVTable.
#NAME: not_mounted
#PARENT: Gio.IOErrorEnum
#COMMENT: File isn't mounted.
#NAME: get_stderr_pipe
#PARENT: Gio.Subprocess.get_stderr_pipe
#COMMENT: the stderr pipe
#NAME: password
#PARENT: Gio.TlsInteraction.invoke_ask_password.TlsInteractionResult
#COMMENT: a #GTlsPassword object
#NAME: interface_name
#PARENT: Gio.DBusConnection.signal_subscribe.guint
#COMMENT: D-Bus interface name to match on or %NULL to
    match on all interfaces
#NAME: emblem
#PARENT: Gio.Emblem.get_icon.Icon
#COMMENT: a #GEmblem from which the icon should be extracted.
#NAME: query_info
#PARENT: Gio.FileInputStream.query_info
#COMMENT: a #GFileInfo, or %NULL on error.
#NAME: file
#PARENT: Gio.File.append_to.FileOutputStream
#COMMENT: input #GFile
#NAME: action_name
#PARENT: Gio.Action.parse_detailed_name.gboolean
#COMMENT: the action name
#NAME: cancellable
#PARENT: Gio.Cancellable.set_error_if_cancelled.gboolean
#COMMENT: a #GCancellable or %NULL
#NAME: action_name
#PARENT: Gio.ActionGroup.action-enabled-changed.none
#COMMENT: the name of the action in @action_group
#NAME: dbus_error_name
#PARENT: Gio.DBusError.set_dbus_error_valist.none
#COMMENT: D-Bus error name.
#NAME: enumerate_children
#PARENT: Gio.Resource.enumerate_children
#COMMENT: an array of constant strings
#NAME: connection
#PARENT: Gio.DBusMessageFilterFunction.DBusMessage
#COMMENT: A #GDBusConnection.
#NAME: get-proxy-type-user-data
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: The #gpointer user_data to pass to #GDBusObjectManagerClient:get-proxy-type-func.
#NAME: listener
#PARENT: Gio.SocketListener.close.none
#COMMENT: a #GSocketListener
#NAME: get_basename
#PARENT: Gio.File.get_basename
#COMMENT: string containing the #GFile's base name, or
    %NULL if given #GFile is invalid. The returned string should be
    freed with g_free() when no longer needed.
#NAME: reply_type
#PARENT: Gio.DBusConnection.call.none
#COMMENT: the expected type of the reply, or %NULL
#NAME: permission
#PARENT: Gio.Permission.release_finish.gboolean
#COMMENT: a #GPermission instance
#NAME: SocketProtocol
#PARENT: Gio
#COMMENT: A protocol identifier is specified when creating a #GSocket, which is a
family/type specific identifier, where 0 means the default protocol for
the particular family/type.

This enum contains a set of commonly available and used protocols. You
can also pass any other identifiers handled by the platform in order to
use protocols not listed here.
#NAME: get_uuid
#PARENT: Gio.Volume
#COMMENT: Gets the UUID for the @volume. The reference is typically based on
the file system UUID for the volume in question and should be
considered an opaque string. Returns %NULL if there is no UUID
available.
#NAME: read_line
#PARENT: Gio.DataInputStream
#COMMENT: Reads a line from the data input stream.  Note that no encoding
checks or conversion is performed; the input is not guaranteed to
be UTF-8, and may in fact have embedded NUL characters.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: pre-unmount
#PARENT: Gio.Mount
#COMMENT: This signal is emitted when the #GMount is about to be
unmounted.
#NAME: targets
#PARENT: Gio.srv_target_list_sort.gpointer
#COMMENT: a #GList of #GSrvTarget
#NAME: info
#PARENT: Gio.FileInfo.set_display_name.none
#COMMENT: a #GFileInfo.
#NAME: spawnv
#PARENT: Gio.SubprocessLauncher.spawnv
#COMMENT: A new #GSubprocess, or %NULL on error (and @error will be set)
#NAME: group
#PARENT: Gio.Application.add_option_group.none
#COMMENT: a #GOptionGroup
#NAME: result
#PARENT: Gio.FileIface.start_mountable_finish.start_mountable_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: next_async
#PARENT: Gio.SocketAddressEnumerator
#COMMENT: Asynchronously retrieves the next #GSocketAddress from @enumerator
and then calls @callback, which must call
g_socket_address_enumerator_next_finish() to get the result.
#NAME: symlink_target
#PARENT: Gio.FileInfo.set_symlink_target.none
#COMMENT: a static string containing a path to a symlink target.
#NAME: info
#PARENT: Gio.DBusPropertyInfo.unref.none
#COMMENT: A #GDBusPropertyInfo.
#NAME: iter
#PARENT: Gio.MenuLinkIter.next.gboolean
#COMMENT: a #GMenuLinkIter
#NAME: type
#PARENT: Gio.IOExtensionPoint.implement.IOExtension
#COMMENT: the #GType to register as extension
#NAME: unshadow
#PARENT: Gio.Mount
#COMMENT: Decrements the shadow count on @mount. Usually used by
#GVolumeMonitor implementations when destroying a shadow mount for
@mount, see g_mount_is_shadowed() for more information. The caller
will need to emit the #GMount::changed signal on @mount manually.
#NAME: get_graceful_disconnect
#PARENT: Gio.TcpConnection
#COMMENT: Checks if graceful disconnects are used. See
g_tcp_connection_set_graceful_disconnect().
#NAME: progress_callback_data
#PARENT: Gio.FileIface.move.move.gboolean
#COMMENT: gpointer to user data for
    the callback function
#NAME: client
#PARENT: Gio.SocketClient.connect_to_uri_finish.SocketConnection
#COMMENT: a #GSocketClient.
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.return_error_literal.none
#COMMENT: A #GDBusMethodInvocation.
#NAME: cancellable
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: a #GCancellable or %NULL
#NAME: stream
#PARENT: Gio.DBusAuthObserver.authorize_authenticated_peer.gboolean
#COMMENT: A #GIOStream for the #GDBusConnection.
#NAME: object_path
#PARENT: Gio.DBusConnection.signal_subscribe.guint
#COMMENT: object path to match on or %NULL to match on
    all object paths
#NAME: new
#PARENT: Gio.BufferedInputStream.new
#COMMENT: a #GInputStream for the given @base_stream.
#NAME: cancellable
#PARENT: Gio.ProxyResolver.lookup.utf8
#COMMENT: a #GCancellable, or %NULL
#NAME: get_file_info
#PARENT: Gio.ZlibDecompressor.get_file_info
#COMMENT: a #GFileInfo, or %NULL
#NAME: content_type_guess
#PARENT: Gio.content_type_guess
#COMMENT: a string indicating a guessed content type for the
    given data. Free with g_free()
#NAME: get_item_link
#PARENT: Gio.MenuModel
#COMMENT: Queries the item at position @item_index in @model for the link
specified by @link.

If the link exists, the linked #GMenuModel is returned.  If the link
does not exist, %NULL is returned.
#NAME: connect_async
#PARENT: Gio.SocketConnection
#COMMENT: Asynchronously connect @connection to the specified remote address.

This clears the #GSocket:blocking flag on @connection's underlying
socket if it is currently set.

Use g_socket_connection_connect_finish() to retrieve the result.
#NAME: g-connection
#PARENT: Gio.DBusProxy
#COMMENT: The #GDBusConnection the proxy is for.
#NAME: num_dirs
#PARENT: Gio.FileIface.measure_disk_usage.measure_disk_usage.gboolean
#COMMENT: the number of directories encountered
#NAME: ttl
#PARENT: Gio.Socket.set_ttl.none
#COMMENT: the time-to-live value for all unicast packets on @socket
#NAME: InetAddress
#PARENT: Gio
#COMMENT: #GInetAddress represents an IPv4 or IPv6 internet address. Use
g_resolver_lookup_by_name() or g_resolver_lookup_by_name_async() to
look up the #GInetAddress for a hostname. Use
g_resolver_lookup_by_address() or
g_resolver_lookup_by_address_async() to look up the hostname for a
#GInetAddress.

To actually connect to a remote host, you will need a
#GInetSocketAddress (which includes a #GInetAddress as well as a
port number).
#NAME: bytes
#PARENT: Gio.MemoryInputStream.add_bytes.none
#COMMENT: input data
#NAME: user_data
#PARENT: Gio.DBusProxy.new.none
#COMMENT: User data to pass to @callback.
#NAME: release_fd
#PARENT: Gio.Cancellable
#COMMENT: Releases a resources previously allocated by g_cancellable_get_fd()
or g_cancellable_make_pollfd().

For compatibility reasons with older releases, calling this function
is not strictly required, the resources will be automatically freed
when the @cancellable is finalized. However, the @cancellable will
block scarce file descriptors until it is finalized if this function
is not called. This can cause the application to run out of file
descriptors when many #GCancellables are used at the same time.
#NAME: flags
#PARENT: Gio.File.query_file_type.FileType
#COMMENT: a set of #GFileQueryInfoFlags passed to g_file_query_info()
#NAME: failed_handled
#PARENT: Gio.IOErrorEnum
#COMMENT: Operation failed and a helper program has
    already interacted with the user. Do not display any error dialog.
#NAME: callback
#PARENT: Gio.DriveIface.stop.stop.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: get_info
#PARENT: Gio.DBusInterfaceSkeletonClass.get_info.get_info
#COMMENT: A #GDBusInterfaceInfo (never %NULL). Do not free.
#NAME: stream
#PARENT: Gio.FilterOutputStream.get_base_stream.OutputStream
#COMMENT: a #GFilterOutputStream.
#NAME: subprocess
#PARENT: Gio.Subprocess.get_stderr_pipe.InputStream
#COMMENT: a #GSubprocess
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.guess_can_eject.gboolean
#COMMENT: a #GUnixMountPoint
#NAME: error_domain_quark_name
#PARENT: Gio.DBusError.register_error_domain.none
#COMMENT: The error domain name.
#NAME: cancellable
#PARENT: Gio.DBusProxy.new_for_bus_sync.DBusProxy
#COMMENT: A #GCancellable or %NULL.
#NAME: is_closed
#PARENT: Gio.OutputStream
#COMMENT: Checks if an output stream has already been closed.
#NAME: eject_mountable
#PARENT: Gio.File
#COMMENT: Starts an asynchronous eject on a mountable.
When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with
g_file_eject_mountable_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: new
#PARENT: Gio.TcpWrapperConnection.new
#COMMENT: the new #GSocketConnection.
#NAME: code
#PARENT: Gio.simple_async_report_error_in_idle.none
#COMMENT: a specific error code.
#NAME: proxy_get_default_for_protocol
#PARENT: Gio.proxy_get_default_for_protocol
#COMMENT: return a #GProxy or NULL if protocol
              is not supported.
#NAME: string
#PARENT: Gio.dbus_is_member_name.gboolean
#COMMENT: The string to check.
#NAME: file
#PARENT: Gio.FileIface.stop_mountable.stop_mountable.none
#COMMENT: input #GFile
#NAME: VFS_EXTENSION_POINT_NAME
#PARENT: Gio
#COMMENT: Extension point for #GVfs functionality.
See [Extending GIO][extending-gio].
#NAME: set_return_on_cancel
#PARENT: Gio.Task.set_return_on_cancel
#COMMENT: %TRUE if @task's return-on-cancel flag was changed to
  match @return_on_cancel. %FALSE if @task has already been
  cancelled.
#NAME: bus_type
#PARENT: Gio.bus_watch_name.guint
#COMMENT: The type of bus to watch a name on.
#NAME: start_mountable_finish
#PARENT: Gio.FileIface.start_mountable_finish.start_mountable_finish
#COMMENT: %TRUE if the operation finished successfully. %FALSE
otherwise.
#NAME: close_stream1
#PARENT: Gio.IOStreamSpliceFlags
#COMMENT: Close the first stream after
    the splice.
#NAME: interface_
#PARENT: Gio.DBusMessage.new_method_call.DBusMessage
#COMMENT: A valid D-Bus interface name or %NULL.
#NAME: close_stream2
#PARENT: Gio.IOStreamSpliceFlags
#COMMENT: Close the second stream after
    the splice.
#NAME: appinfo
#PARENT: Gio.DesktopAppLaunchCallback.none
#COMMENT: a #GDesktopAppInfo
#NAME: set_option
#PARENT: Gio.Socket
#COMMENT: Sets the value of an integer-valued option on @socket, as with
setsockopt(). (If you need to set a non-integer-valued option,
you will need to call setsockopt() directly.)

The [<gio/gnetworking.h>][gio-gnetworking.h]
header pulls in system headers that will define most of the
standard/portable socket options. For unusual socket protocols or
platform-dependent options, you may need to include additional
headers.
#NAME: action_name
#PARENT: Gio.action_name_is_valid.gboolean
#COMMENT: an potential action name
#NAME: get_action_name
#PARENT: Gio.DesktopAppInfo
#COMMENT: Gets the user-visible display name of the "additional application
action" specified by @action_name.

This corresponds to the "Name" key within the keyfile group for the
action.
#NAME: eject_finish
#PARENT: Gio.Mount.eject_finish
#COMMENT: %TRUE if the mount was successfully ejected. %FALSE otherwise.
#NAME: return_error_if_cancelled
#PARENT: Gio.Task
#COMMENT: Checks if @task's #GCancellable has been cancelled, and if so, sets
@task's error accordingly and completes the task (see
g_task_return_pointer() for more discussion of exactly what this
means).
#NAME: io_error
#PARENT: Gio.DBusError
#COMMENT: Something went wrong reading or writing to a socket, for example.
#NAME: name_acquired_handler
#PARENT: Gio.bus_own_name_on_connection.guint
#COMMENT: handler to invoke when @name is acquired or %NULL
#NAME: has_key
#PARENT: Gio.SettingsSchema.has_key
#COMMENT: %TRUE if such a key exists
#NAME: stdout_buf
#PARENT: Gio.Subprocess.communicate_utf8_finish.gboolean
#COMMENT: Return location for stdout data
#NAME: cancellable
#PARENT: Gio.File.replace_readwrite.FileIOStream
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: resolver
#PARENT: Gio.Resolver.lookup_service_async.none
#COMMENT: a #GResolver
#NAME: socket
#PARENT: Gio.Socket.get_option.gboolean
#COMMENT: a #GSocket
#NAME: 
#PARENT: Gio.ApplicationCommandLine.printerr.none...
#COMMENT: arguments, as per @format
#NAME: file
#PARENT: Gio.FileIface.create_finish.create_finish.FileOutputStream
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.InputStream.read_bytes.GLib.Bytes
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: stream
#PARENT: Gio.OutputStreamClass.flush_async.flush_async.none
#COMMENT: a #GOutputStream.
#NAME: socket
#PARENT: Gio.Socket.get_keepalive.gboolean
#COMMENT: a #GSocket.
#NAME: object_proxy
#PARENT: Gio.DBusObjectManagerClient.interface-proxy-signal.none
#COMMENT: The #GDBusObjectProxy on which an interface is emitting a D-Bus signal.
#NAME: open_readwrite
#PARENT: Gio.File.open_readwrite
#COMMENT: #GFileIOStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: new
#PARENT: Gio.Socket
#COMMENT: Creates a new #GSocket with the defined family, type and protocol.
If @protocol is 0 (%G_SOCKET_PROTOCOL_DEFAULT) the default protocol type
for the family and type is used.

The @protocol is a family and type specific int that specifies what
kind of protocol to use. #GSocketProtocol lists several common ones.
Many families only support one protocol, and use 0 for this, others
support several and using 0 means to use the default protocol for
the family and type.

The protocol id is passed directly to the operating
system, so you can use protocols not listed in #GSocketProtocol if you
know the protocol number used for it.
#NAME: set_file_type
#PARENT: Gio.FileInfo
#COMMENT: Sets the file type in a #GFileInfo to @type.
See %G_FILE_ATTRIBUTE_STANDARD_TYPE.
#NAME: action_name
#PARENT: Gio.ActionGroup.action-added.none
#COMMENT: the name of the action in @action_group
#NAME: proxy_address
#PARENT: Gio.ProxyInterface.connect.connect.IOStream
#COMMENT: a #GProxyAddress
#NAME: env
#PARENT: Gio.SubprocessLauncher.set_environ.none
#COMMENT: the replacement environment
#NAME: set_graceful_disconnect
#PARENT: Gio.TcpConnection
#COMMENT: This enables graceful disconnects on close. A graceful disconnect
means that we signal the receiving end that the connection is terminated
and wait for it to close the connection before closing the connection.

A graceful disconnect means that we can be sure that we successfully sent
all the outstanding data to the other end, or get an error reported.
However, it also means we have to wait for all the data to reach the
other side and for it to acknowledge this by closing the socket, which may
take a while. For this reason it is disabled by default.
#NAME: name
#PARENT: Gio.bus_own_name_with_closures.guint
#COMMENT: the well-known name to own
#NAME: deleted
#PARENT: Gio.FileMonitorEvent
#COMMENT: a file was deleted.
#NAME: SocketService
#PARENT: Gio
#COMMENT: A #GSocketService is an object that represents a service that
is provided to the network or over local sockets.  When a new
connection is made to the service the #GSocketService::incoming
signal is emitted.

A #GSocketService is a subclass of #GSocketListener and you need
to add the addresses you want to accept connections on with the
#GSocketListener APIs.

There are two options for implementing a network service based on
#GSocketService. The first is to create the service using
g_socket_service_new() and to connect to the #GSocketService::incoming
signal. The second is to subclass #GSocketService and override the
default signal handler implementation.

In either case, the handler must immediately return, or else it
will block additional incoming connections from being serviced.
If you are interested in writing connection handlers that contain
blocking code then see #GThreadedSocketService.

The socket service runs on the main loop of the
[thread-default context][g-main-context-push-thread-default-context]
of the thread it is created in, and is not
threadsafe in general. However, the calls to start and stop the
service are thread-safe so these can be used from threads that
handle incoming clients.
#NAME: user_data
#PARENT: Gio.FileIface.mount_enclosing_volume.mount_enclosing_volume.none
#COMMENT: the data to pass to callback function
#NAME: cancellable
#PARENT: Gio.DBusProxy.new_sync.DBusProxy
#COMMENT: A #GCancellable or %NULL.
#NAME: is_supported
#PARENT: Gio.UnixCredentialsMessage.is_supported
#COMMENT: %TRUE if supported, %FALSE otherwise
#NAME: subprocess
#PARENT: Gio.Subprocess.communicate_async.none
#COMMENT: Self
#NAME: new
#PARENT: Gio.TlsClientConnection
#COMMENT: Creates a new #GTlsClientConnection wrapping @base_io_stream (which
must have pollable input and output streams) which is assumed to
communicate with the server identified by @server_identity.
#NAME: lookup_signal
#PARENT: Gio.DBusInterfaceInfo.lookup_signal
#COMMENT: A #GDBusSignalInfo or %NULL if not found. Do not free, it is owned by @info.
#NAME: bus_name
#PARENT: Gio.DBusConnection.call.none
#COMMENT: a unique or well-known bus name or %NULL if
    @connection is not a message bus connection
#NAME: get_next
#PARENT: Gio.MenuLinkIterClass.get_next.get_next
#COMMENT: %TRUE on success, or %FALSE if there is no additional link
#NAME: new_finish
#PARENT: Gio.DBusConnection
#COMMENT: Finishes an operation started with g_dbus_connection_new().
#NAME: mount
#PARENT: Gio.MountIface.guess_content_type.guess_content_type.none
#COMMENT: a #GMount
#NAME: get_flags
#PARENT: Gio.DBusMessage
#COMMENT: Gets the flags for @message.
#NAME: list_actions
#PARENT: Gio.DesktopAppInfo.list_actions
#COMMENT: a list of strings, always non-%NULL
#NAME: Converter
#PARENT: Gio
#COMMENT: #GConverter is implemented by objects that convert
binary data in various ways. The conversion can be
stateful and may fail at any place.

Some example conversions are: character set conversion,
compression, decompression and regular expression
replace.
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.return_value.none
#COMMENT: A #GDBusMethodInvocation.
#NAME: label
#PARENT: Gio.Menu.append_submenu.none
#COMMENT: the section label, or %NULL
#NAME: contents
#PARENT: Gio.File.replace_contents.gboolean
#COMMENT: a string containing the new contents for @file
#NAME: mount
#PARENT: Gio.MountIface.unmount.unmount.none
#COMMENT: a #GMount.
#NAME: cancellable
#PARENT: Gio.Seekable.seek.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: user_data
#PARENT: Gio.FileIface.open_readwrite_async.open_readwrite_async.none
#COMMENT: the data to pass to callback function
#NAME: action_name
#PARENT: Gio.Action.name_is_valid.gboolean
#COMMENT: an potential action name
#NAME: new
#PARENT: Gio.SocketListener
#COMMENT: Creates a new #GSocketListener with no sockets to listen for.
New listeners can be added with e.g. g_socket_listener_add_address()
or g_socket_listener_add_inet_port().
#NAME: set_desktop_env
#PARENT: Gio.DesktopAppInfo
#COMMENT: Sets the name of the desktop that the application is running in.
This is used by g_app_info_should_show() and
g_desktop_app_info_get_show_in() to evaluate the
`OnlyShowIn` and `NotShowIn`
desktop entry fields.

Should be called only once; subsequent calls are ignored.
#NAME: self
#PARENT: Gio.SubprocessLauncher.set_environ.none
#COMMENT: a #GSubprocess
#NAME: user_data
#PARENT: Gio.FileIface.set_display_name_async.set_display_name_async.none
#COMMENT: the data to pass to callback function
#NAME: new_from_data
#PARENT: Gio.Resource
#COMMENT: Creates a GResource from a reference to the binary resource bundle.
This will keep a reference to @data while the resource lives, so
the data should not be modified or freed.

If you want to use this resource in the global resource namespace you need
to register it with g_resources_register().
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.get_sender.utf8
#COMMENT: A #GDBusMethodInvocation.
#NAME: measure_disk_usage
#PARENT: Gio.File.measure_disk_usage
#COMMENT: %TRUE if successful, with the out parameters set.
         %FALSE otherwise, with @error set.
#NAME: DBusProxy
#PARENT: Gio
#COMMENT: #GDBusProxy is a base class used for proxies to access a D-Bus
interface on a remote object. A #GDBusProxy can be constructed for
both well-known and unique names.

By default, #GDBusProxy will cache all properties (and listen to
changes) of the remote object, and proxy all signals that gets
emitted. This behaviour can be changed by passing suitable
#GDBusProxyFlags when the proxy is created. If the proxy is for a
well-known name, the property cache is flushed when the name owner
vanishes and reloaded when a name owner appears.

If a #GDBusProxy is used for a well-known name, the owner of the
name is tracked and can be read from
#GDBusProxy:g-name-owner. Connect to the #GObject::notify signal to
get notified of changes. Additionally, only signals and property
changes emitted from the current name owner are considered and
calls are always sent to the current name owner. This avoids a
number of race conditions when the name is lost by one owner and
claimed by another. However, if no name owner currently exists,
then calls will be sent to the well-known name which may result in
the message bus launching an owner (unless
%G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START is set).

The generic #GDBusProxy::g-properties-changed and
#GDBusProxy::g-signal signals are not very convenient to work with.
Therefore, the recommended way of working with proxies is to subclass
#GDBusProxy, and have more natural properties and signals in your derived
class. This [example][gdbus-example-gdbus-codegen] shows how this can
easily be done using the [gdbus-codegen][gdbus-codegen] tool.

A #GDBusProxy instance can be used from multiple threads but note
that all signals (e.g. #GDBusProxy::g-signal, #GDBusProxy::g-properties-changed
and #GObject::notify) are emitted in the
[thread-default main context][g-main-context-push-thread-default]
of the thread where the instance was constructed.

An example using a proxy for a well-known name can be found in
[gdbus-example-watch-proxy.c](https://git.gnome.org/browse/glib/tree/gio/tests/gdbus-example-watch-proxy.c)
#NAME: new_from_data
#PARENT: Gio.MemoryInputStream.new_from_data
#COMMENT: new #GInputStream read from @data of @len bytes.
#NAME: user_data
#PARENT: Gio.VolumeIface.eject.eject.none
#COMMENT: user data that gets passed to @callback
#NAME: type
#PARENT: Gio.content_type_get_symbolic_icon.Icon
#COMMENT: a content type string
#NAME: set_attribute
#PARENT: Gio.FileInfo
#COMMENT: Sets the @attribute to contain the given value, if possible. To unset the
attribute, use %G_ATTRIBUTE_TYPE_INVALID for @type.
#NAME: none
#PARENT: Gio.FileQueryInfoFlags
#COMMENT: No flags set.
#NAME: deserialize
#PARENT: Gio.SocketControlMessage.deserialize
#COMMENT: the deserialized message or %NULL
#NAME: callback
#PARENT: Gio.ProxyResolver.lookup_async.none
#COMMENT: callback to call after resolution completes
#NAME: file
#PARENT: Gio.FileIface.query_filesystem_info_finish.query_filesystem_info_finish.FileInfo
#COMMENT: input #GFile
#NAME: key
#PARENT: Gio.Settings.bind_with_mapping.none
#COMMENT: the key to bind
#NAME: callback
#PARENT: Gio.File.append_to_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: count
#PARENT: Gio.pollable_stream_write_all.gboolean
#COMMENT: the number of bytes to write
#NAME: name
#PARENT: Gio.BusAcquiredCallback.none
#COMMENT: The name that is requested to be owned.
#NAME: new_from_string
#PARENT: Gio.InetSocketAddress.new_from_string
#COMMENT: a new #GInetSocketAddress, or %NULL if @address cannot be
parsed.
#NAME: mark_busy
#PARENT: Gio.Application
#COMMENT: Increases the busy count of @application.

Use this function to indicate that the application is busy, for instance
while a long running operation is pending.

The busy state will be exposed to other processes, so a session shell will
use that information to indicate the state to the user (e.g. with a
spinner).

To cancel the busy indication, use g_application_unmark_busy().
#NAME: return_error_valist
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Like g_dbus_method_invocation_return_error() but intended for
language bindings.

This method will free @invocation, you cannot use it afterwards.
#NAME: options
#PARENT: Gio.Application.handle-local-options.gint
#COMMENT: the options dictionary
#NAME: attribute
#PARENT: Gio.MenuModel.get_item_attribute_value.GLib.Variant
#COMMENT: the attribute to query
#NAME: ask-password
#PARENT: Gio.MountOperation
#COMMENT: Emitted when a mount operation asks the user for a password.

If the message contains a line break, the first line should be
presented as a heading. For example, it may be used as the
primary text in a #GtkMessageDialog.
#NAME: DBusInterfaceSkeletonClass
#PARENT: Gio
#COMMENT: Class structure for #GDBusInterfaceSkeleton.
#NAME: FILE_ATTRIBUTE_STANDARD_IS_HIDDEN
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for checking if a file is hidden.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: type
#PARENT: Gio.SocketConnection.factory_lookup_type.GType
#COMMENT: a #GSocketType
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.take_error.none
#COMMENT: A #GDBusMethodInvocation.
#NAME: get_client_address
#PARENT: Gio.DBusServer.get_client_address
#COMMENT: A D-Bus address string. Do not free, the string is owned
by @server.
#NAME: send_message_with_reply_finish
#PARENT: Gio.DBusConnection.send_message_with_reply_finish
#COMMENT: a locked #GDBusMessage or %NULL if @error is set
#NAME: io_priority
#PARENT: Gio.OutputStream.write_bytes_async.none
#COMMENT: the io priority of the request.
#NAME: get_default
#PARENT: Gio.ProxyResolver
#COMMENT: Gets the default #GProxyResolver for the system.
#NAME: buffer
#PARENT: Gio.OutputStream.write_fn.gssize
#COMMENT: the buffer containing the data to write.
#NAME: set_default_proxy
#PARENT: Gio.SimpleProxyResolver
#COMMENT: Sets the default proxy on @resolver, to be used for any URIs that
don't match #GSimpleProxyResolver:ignore-hosts or a proxy set
via g_simple_proxy_resolver_set_uri_proxy().

If @default_proxy starts with "socks://",
#GSimpleProxyResolver will treat it as referring to all three of
the socks5, socks4a, and socks4 proxy types.
#NAME: get_name
#PARENT: Gio.Action
#COMMENT: Queries the name of @action.
#NAME: app_info_get_all
#PARENT: Gio.app_info_get_all
#COMMENT: a newly allocated #GList of references to #GAppInfos.
#NAME: connect_to_host_finish
#PARENT: Gio.SocketClient.connect_to_host_finish
#COMMENT: a #GSocketConnection on success, %NULL on error.
#NAME: set_close_fd
#PARENT: Gio.UnixOutputStream
#COMMENT: Sets whether the file descriptor of @stream shall be closed
when the stream is closed.
#NAME: flags
#PARENT: Gio.FileIface.replace_readwrite.replace_readwrite.FileIOStream
#COMMENT: a set of #GFileCreateFlags
#NAME: interface_name
#PARENT: Gio.DBusObjectManager.get_interface.DBusInterface
#COMMENT: D-Bus interface name to lookup.
#NAME: flags
#PARENT: Gio.ConverterIface.convert.convert.ConverterResult
#COMMENT: a #GConverterFlags controlling the conversion details
#NAME: set_timeout
#PARENT: Gio.Socket
#COMMENT: Sets the time in seconds after which I/O operations on @socket will
time out if they have not yet completed.

On a blocking socket, this means that any blocking #GSocket
operation will time out after @timeout seconds of inactivity,
returning %G_IO_ERROR_TIMED_OUT.

On a non-blocking socket, calls to g_socket_condition_wait() will
also fail with %G_IO_ERROR_TIMED_OUT after the given time. Sources
created with g_socket_create_source() will trigger after
@timeout seconds of inactivity, with the requested condition
set, at which point calling g_socket_receive(), g_socket_send(),
g_socket_check_connect_result(), etc, will fail with
%G_IO_ERROR_TIMED_OUT.

If @timeout is 0 (the default), operations will never time out
on their own.

Note that if an I/O operation is interrupted by a signal, this may
cause the timeout to be reset.
#NAME: get_local_address
#PARENT: Gio.SocketClient
#COMMENT: Gets the local address of the socket client.

See g_socket_client_set_local_address() for details.
#NAME: io_priority
#PARENT: Gio.BufferedInputStreamClass.fill_async.fill_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: eject_with_operation_finish
#PARENT: Gio.VolumeIface.eject_with_operation_finish.eject_with_operation_finish
#COMMENT: %TRUE if the volume was successfully ejected. %FALSE otherwise
#NAME: info
#PARENT: Gio.FileInfo.clear_status.none
#COMMENT: a #GFileInfo.
#NAME: allow_mechanism
#PARENT: Gio.DBusAuthObserver.allow_mechanism
#COMMENT: %TRUE if @mechanism can be used to authenticate the other peer, %FALSE if not.
#NAME: model
#PARENT: Gio.MenuModel.items_changed.none
#COMMENT: a #GMenuModel
#NAME: next
#PARENT: Gio.MenuLinkIter
#COMMENT: Attempts to advance the iterator to the next (possibly first)
link.

%TRUE is returned on success, or %FALSE if there are no more links.

You must call this function when you first acquire the iterator to
advance it to the first link (and determine if the first link exists
at all).
#NAME: new-connection
#PARENT: Gio.DBusServer.new-connection
#COMMENT: %TRUE to claim @connection, %FALSE to let other handlers
run.
#NAME: get_key
#PARENT: Gio.SettingsSchema.get_key
#COMMENT: the #GSettingsSchemaKey for @name
#NAME: timeout
#PARENT: Gio.Socket
#COMMENT: The timeout in seconds on socket I/O
#NAME: lookup_certificates_issued_by_finish
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by_finish.lookup_certificates_issued_by_finish
#COMMENT: a newly allocated list of #GTlsCertificate
objects. Use g_object_unref() on each certificate, and g_list_free() on the release the list.
#NAME: never
#PARENT: Gio.TlsRehandshakeMode
#COMMENT: Never allow rehandshaking
#NAME: Credentials
#PARENT: Gio
#COMMENT: The #GCredentials type is a reference-counted wrapper for native
credentials. This information is typically used for identifying,
authenticating and authorizing other processes.

Some operating systems supports looking up the credentials of the
remote peer of a communication endpoint - see e.g.
g_socket_get_credentials().

Some operating systems supports securely sending and receiving
credentials over a Unix Domain Socket, see
#GUnixCredentialsMessage, g_unix_connection_send_credentials() and
g_unix_connection_receive_credentials() for details.

On Linux, the native credential type is a struct ucred - see the
unix(7) man page for details. This corresponds to
%G_CREDENTIALS_TYPE_LINUX_UCRED.

On FreeBSD, Debian GNU/kFreeBSD, and GNU/Hurd, the native
credential type is a struct cmsgcred. This corresponds
to %G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED.

On NetBSD, the native credential type is a struct unpcbid.
This corresponds to %G_CREDENTIALS_TYPE_NETBSD_UNPCBID.

On OpenBSD, the native credential type is a struct sockpeercred.
This corresponds to %G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED.

On Solaris (including OpenSolaris and its derivatives), the native
credential type is a ucred_t. This corresponds to
%G_CREDENTIALS_TYPE_SOLARIS_UCRED.
#NAME: file
#PARENT: Gio.File.prefix_matches.gboolean
#COMMENT: input #GFile
#NAME: dirname
#PARENT: Gio.io_modules_load_all_in_directory_with_scope.IOModule
#COMMENT: pathname for a directory containing modules to load.
#NAME: query_info
#PARENT: Gio.FileIOStreamClass.query_info.query_info
#COMMENT: a #GFileInfo for the @stream, or %NULL on error.
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.action_added.action_added.none
#COMMENT: the name of an action in the group
#NAME: flush
#PARENT: Gio.OutputStream
#COMMENT: Forces a write of all user-space buffered data for the given
@stream. Will block during the operation. Closing the stream will
implicitly cause a flush.

This function is optional for inherited classes.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: get_dbus_connection
#PARENT: Gio.Application
#COMMENT: Gets the #GDBusConnection being used by the application, or %NULL.

If #GApplication is using its D-Bus backend then this function will
return the #GDBusConnection being used for uniqueness and
communication with the desktop environment and other instances of the
application.

If #GApplication is not using D-Bus then this function will return
%NULL.  This includes the situation where the D-Bus backend would
normally be in use but we were unable to connect to the bus.

This function must not be called before the application has been
registered.  See g_application_get_is_registered().
#NAME: delay
#PARENT: Gio.Settings
#COMMENT: Changes the #GSettings object into 'delay-apply' mode. In this
mode, changes to @settings are not immediately propagated to the
backend, but kept locally until g_settings_apply() is called.
#NAME: message
#PARENT: Gio.SocketControlMessageClass.serialize.serialize.none
#COMMENT: a #GSocketControlMessage
#NAME: appinfo
#PARENT: Gio.AppInfo.supports_uris.gboolean
#COMMENT: a #GAppInfo.
#NAME: new
#PARENT: Gio.BufferedOutputStream.new
#COMMENT: a #GOutputStream for the given @base_stream.
#NAME: run_in_thread
#PARENT: Gio.Task
#COMMENT: Runs @task_func in another thread. When @task_func returns, @task's
#GAsyncReadyCallback will be invoked in @task's #GMainContext.

This takes a ref on @task until the task completes.

See #GTaskThreadFunc for more details about how @task_func is handled.

Although GLib currently rate-limits the tasks queued via
g_task_run_in_thread(), you should not assume that it will always
do this. If you have a very large number of tasks to run, but don't
want them to all run at once, you should only queue a limited
number of them at a time.
#NAME: new
#PARENT: Gio.DesktopAppInfo.new
#COMMENT: a new #GDesktopAppInfo, or %NULL if no desktop file with that id
#NAME: get_name
#PARENT: Gio.AppInfoIface.get_name.get_name
#COMMENT: the name of the application for @appinfo.
#NAME: connection_factory_create_connection
#PARENT: Gio.Socket.connection_factory_create_connection
#COMMENT: a #GSocketConnection
#NAME: action_name
#PARENT: Gio.action_parse_detailed_name.gboolean
#COMMENT: the action name
#NAME: guid
#PARENT: Gio.DBusConnection
#COMMENT: The GUID of the peer performing the role of server when
authenticating.

If you are constructing a #GDBusConnection and pass
%G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER in the
#GDBusConnection:flags property then you MUST also set this
property to a valid guid.

If you are constructing a #GDBusConnection and pass
%G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT in the
#GDBusConnection:flags property you will be able to read the GUID
of the other peer here after the connection has been successfully
initialized.
#NAME: result
#PARENT: Gio.FileIOStream.query_info_finish.FileInfo
#COMMENT: a #GAsyncResult.
#NAME: stream
#PARENT: Gio.OutputStream.clear_pending.none
#COMMENT: output stream
#NAME: new
#PARENT: Gio.SrvTarget.new
#COMMENT: a new #GSrvTarget.
#NAME: new_for_bus_sync
#PARENT: Gio.DBusObjectManagerClient.new_for_bus_sync
#COMMENT: A
  #GDBusObjectManagerClient object or %NULL if @error is set. Free
  with g_object_unref().
#NAME: invalid
#PARENT: Gio.FileAttributeType
#COMMENT: indicates an invalid or uninitalized type.
#NAME: file
#PARENT: Gio.File.query_filesystem_info_async.none
#COMMENT: input #GFile
#NAME: stream
#PARENT: Gio.DataInputStream.get_newline_type.DataStreamNewlineType
#COMMENT: a given #GDataInputStream.
#NAME: socket
#PARENT: Gio.Socket.connection_factory_create_connection.SocketConnection
#COMMENT: a #GSocket
#NAME: certificate
#PARENT: Gio.TlsConnection.set_certificate.none
#COMMENT: the certificate to use for @conn
#NAME: put_uint16
#PARENT: Gio.DataOutputStream.put_uint16
#COMMENT: %TRUE if @data was successfully added to the @stream.
#NAME: value
#PARENT: Gio.DBusMessage.set_member.none
#COMMENT: The value to set.
#NAME: set_as_last_used_for_type
#PARENT: Gio.AppInfo
#COMMENT: Sets the application as the last used application for a given type.
This will make the application appear as first in the list returned
by g_app_info_get_recommended_for_type(), regardless of the default
application for that content type.
#NAME: volume
#PARENT: Gio.VolumeMonitor.volume-added.none
#COMMENT: a #GVolume that was added.
#NAME: callback
#PARENT: Gio.DBusConnection.send_message_with_reply.none
#COMMENT: a #GAsyncReadyCallback to call when the request
    is satisfied or %NULL if you don't care about the result
#NAME: cancel
#PARENT: Gio.FileMonitor.cancel
#COMMENT: always %TRUE
#NAME: mount_operation
#PARENT: Gio.FileIface.mount_mountable.mount_mountable.none
#COMMENT: a #GMountOperation,
    or %NULL to avoid user interaction
#NAME: flags
#PARENT: Gio.FileIface.replace_readwrite_async.replace_readwrite_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: action_group
#PARENT: Gio.ActionGroup.get_action_state.GLib.Variant
#COMMENT: a #GActionGroup
#NAME: callback
#PARENT: Gio.Drive.stop.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: get_basename
#PARENT: Gio.FileIface.get_basename.get_basename
#COMMENT: string containing the #GFile's base name, or
    %NULL if given #GFile is invalid. The returned string should be
    freed with g_free() when no longer needed.
#NAME: task
#PARENT: Gio.Task.return_pointer.none
#COMMENT: a #GTask
#NAME: menu_item
#PARENT: Gio.MenuItem.set_action_and_target.none
#COMMENT: a #GMenuItem
#NAME: FILE_ATTRIBUTE_STANDARD_COPY_NAME
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the copy name of the file.
The copy name is an optional version of the name. If available it's always
in UTF8, and corresponds directly to the original filename (only transcoded to
UTF8). This is useful if you want to copy the file to another filesystem that
might have a different encoding. If the filename is not a valid string in the
encoding selected for the filesystem it is in then the copy name will not be set.

Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: monitor_directory
#PARENT: Gio.File.monitor_directory
#COMMENT: a #GFileMonitor for the given @file,
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: io_priority
#PARENT: Gio.FileIface.set_display_name_async.set_display_name_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: fd
#PARENT: Gio.SubprocessLauncher.take_stdin_fd.none
#COMMENT: a file descriptor, or -1
#NAME: new_from_data
#PARENT: Gio.Resource.new_from_data
#COMMENT: a new #GResource, or %NULL on error
#NAME: string_builder
#PARENT: Gio.DBusNodeInfo.generate_xml.none
#COMMENT: A #GString to to append XML data to.
#NAME: txt
#PARENT: Gio.ResolverRecordType
#COMMENT: lookup DNS TXT records for a name
#NAME: srv
#PARENT: Gio.NetworkService.get_service.utf8
#COMMENT: a #GNetworkService
#NAME: set_pending
#PARENT: Gio.IOStream.set_pending
#COMMENT: %TRUE if pending was previously unset and is now set.
#NAME: user_data_free_func
#PARENT: Gio.bus_watch_name.guint
#COMMENT: Function for freeing @user_data or %NULL.
#NAME: self
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer_finish.lookup_certificate_issuer_finish.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: result
#PARENT: Gio.MountIface.guess_content_type_finish.guess_content_type_finish.utf8
#COMMENT: a #GAsyncResult
#NAME: start_operation
#PARENT: Gio.FileIface.start_mountable.start_mountable.none
#COMMENT: a #GMountOperation, or %NULL to avoid user interaction
#NAME: attributes
#PARENT: Gio.MenuModelClass.get_item_attributes.get_item_attributes.none
#COMMENT: Attributes on the item
#NAME: user_data
#PARENT: Gio.File.load_partial_contents_async.none
#COMMENT: the data to pass to the callback functions
#NAME: io_extension_point_implement
#PARENT: Gio
#COMMENT: Registers @type as extension for the extension point with name
@extension_point_name.

If @type has already been registered as an extension for this
extension point, the existing #GIOExtension object is returned.
#NAME: self
#PARENT: Gio.TestDBus.down.none
#COMMENT: a #GTestDBus
#NAME: tls_client_connection_new
#PARENT: Gio.tls_client_connection_new
#COMMENT: the new
#GTlsClientConnection, or %NULL on error
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_until_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: parameter
#PARENT: Gio.ActionGroupInterface.activate_action.activate_action.none
#COMMENT: parameters to the activation
#NAME: change_action_state
#PARENT: Gio.ActionGroup
#COMMENT: Request for the state of the named action within @action_group to be
changed to @value.

The action must be stateful and @value must be of the correct type.
See g_action_group_get_action_state_type().

This call merely requests a change.  The action may refuse to change
its state or may change its state to something other than @value.
See g_action_group_get_action_state_hint().

If the @value GVariant is floating, it is consumed.
#NAME: data
#PARENT: Gio.MemoryOutputStream.new.OutputStream
#COMMENT: pointer to a chunk of memory to use, or %NULL
#NAME: connection
#PARENT: Gio.DBusConnection.close.none
#COMMENT: a #GDBusConnection
#NAME: drive
#PARENT: Gio.DriveIface.is_media_removable.is_media_removable.gboolean
#COMMENT: a #GDrive.
#NAME: get_interface_info
#PARENT: Gio.DBusProxy.get_interface_info
#COMMENT: A #GDBusInterfaceInfo or %NULL. Do not unref the returned
object, it is owned by @proxy.
#NAME: blob_len
#PARENT: Gio.DBusMessage.bytes_needed.gssize
#COMMENT: The length of @blob (must be at least 16).
#NAME: FileReadMoreCallback
#PARENT: Gio.FileReadMoreCallback
#COMMENT: %TRUE if more data should be read back. %FALSE otherwise.
#NAME: connection
#PARENT: Gio.TlsInteractionClass.request_certificate_async.request_certificate_async.none
#COMMENT: a #GTlsConnection object
#NAME: cancellable
#PARENT: Gio.FileIface.eject_mountable_with_operation.eject_mountable_with_operation.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: new_from_bytes
#PARENT: Gio.InetAddress
#COMMENT: Creates a new #GInetAddress from the given @family and @bytes.
@bytes should be 4 bytes for %G_SOCKET_FAMILY_IPV4 and 16 bytes for
%G_SOCKET_FAMILY_IPV6.
#NAME: drive
#PARENT: Gio.DriveIface.can_start.can_start.gboolean
#COMMENT: a #GDrive.
#NAME: address
#PARENT: Gio.dbus_address_get_stream_sync.IOStream
#COMMENT: A valid D-Bus address.
#NAME: ListStore
#PARENT: Gio
#COMMENT: #GListStore is a simple implementation of #GListModel that stores all
items in memory.

It provides insertions, deletions, and lookups in logarithmic time
with a fast path for the common case of iterating the list linearly.
#NAME: address
#PARENT: Gio.InetAddress.get_is_site_local.gboolean
#COMMENT: a #GInetAddress
#NAME: dup_object
#PARENT: Gio.DBusInterfaceIface.dup_object.dup_object
#COMMENT: A #GDBusObject or %NULL. The returned
reference should be freed with g_object_unref().
#NAME: monitor
#PARENT: Gio.NetworkMonitor.can_reach.gboolean
#COMMENT: a #GNetworkMonitor
#NAME: DBusInterfaceMethodCallFunc
#PARENT: Gio
#COMMENT: The type of the @method_call function in #GDBusInterfaceVTable.
#NAME: flags
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle_async.lookup_certificate_for_handle_async.none
#COMMENT: Flags which affect the lookup.
#NAME: store
#PARENT: Gio.ListStore.splice.none
#COMMENT: a #GListStore
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_byte_string.utf8
#COMMENT: a #GFileInfo.
#NAME: resolver
#PARENT: Gio.Resolver.lookup_service.SrvTarget
#COMMENT: a #GResolver
#NAME: timeout_msec
#PARENT: Gio.DBusProxy.set_default_timeout.none
#COMMENT: Timeout in milliseconds.
#NAME: DBusPropertyInfoFlags
#PARENT: Gio
#COMMENT: Flags describing the access control of a D-Bus property.
#NAME: is-busy
#PARENT: Gio.Application
#COMMENT: Whether the application is currently marked as busy through
g_application_mark_busy() or g_application_bind_busy_property().
#NAME: menu_item
#PARENT: Gio.MenuItem.set_attribute.none
#COMMENT: a #GMenuItem
#NAME: server
#PARENT: Gio.DBusServer.is_active.gboolean
#COMMENT: A #GDBusServer.
#NAME: source
#PARENT: Gio.File.copy_attributes.gboolean
#COMMENT: a #GFile with attributes
#NAME: cancellable
#PARENT: Gio.FileIface.append_to_async.append_to_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: Resolver
#PARENT: Gio
#COMMENT: #GResolver provides cancellable synchronous and asynchronous DNS
resolution, for hostnames (g_resolver_lookup_by_address(),
g_resolver_lookup_by_name() and their async variants) and SRV
(service) records (g_resolver_lookup_service()).

#GNetworkAddress and #GNetworkService provide wrappers around
#GResolver functionality that also implement #GSocketConnectable,
making it easy to connect to a remote host/service.
#NAME: get_options
#PARENT: Gio.UnixMountPoint.get_options
#COMMENT: a string containing the options.
#NAME: make_directory
#PARENT: Gio.FileIface.make_directory.make_directory
#COMMENT: %TRUE on successful creation, %FALSE otherwise.
#NAME: stream
#PARENT: Gio.DataOutputStream.put_byte.gboolean
#COMMENT: a #GDataOutputStream.
#NAME: dbus_error_strip_remote_error
#PARENT: Gio.dbus_error_strip_remote_error
#COMMENT: %TRUE if information was stripped, %FALSE otherwise.
#NAME: query_info_finish
#PARENT: Gio.FileIOStream.query_info_finish
#COMMENT: A #GFileInfo for the finished query.
#NAME: action_name
#PARENT: Gio.ActionGroup.get_action_state.GLib.Variant
#COMMENT: the name of the action to query
#NAME: create_source
#PARENT: Gio.PollableOutputStream
#COMMENT: Creates a #GSource that triggers when @stream can be written, or
@cancellable is triggered or an error occurs. The callback on the
source is of the #GPollableSourceFunc type.

As with g_pollable_output_stream_is_writable(), it is possible that
the stream may not actually be writable even after the source
triggers, so you should use g_pollable_output_stream_write_nonblocking()
rather than g_output_stream_write() from the callback.
#NAME: connection
#PARENT: Gio.DBusConnection.get_guid.utf8
#COMMENT: a #GDBusConnection
#NAME: get_is_mc_global
#PARENT: Gio.InetAddress
#COMMENT: Tests whether @address is a global multicast address.
#NAME: callback
#PARENT: Gio.PermissionClass.release_async.release_async.none
#COMMENT: the #GAsyncReadyCallback to call when done
#NAME: get_close_base_stream
#PARENT: Gio.FilterInputStream.get_close_base_stream
#COMMENT: %TRUE if the base stream will be closed.
#NAME: task
#PARENT: Gio.Task.had_error.gboolean
#COMMENT: a #GTask.
#NAME: read_fn
#PARENT: Gio.File
#COMMENT: Opens a file for reading. The result is a #GFileInputStream that
can be used to read the contents of the file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

If the file does not exist, the %G_IO_ERROR_NOT_FOUND error will be
returned. If the file is a directory, the %G_IO_ERROR_IS_DIRECTORY
error will be returned. Other errors are possible too, and depend
on what kind of filesystem the file is on.
#NAME: device
#PARENT: Gio.EmblemOrigin
#COMMENT: Emblem adds device-specific information
#NAME: source
#PARENT: Gio.FileIface.copy_async.copy_async.none
#COMMENT: input #GFile
#NAME: task
#PARENT: Gio.Task.get_source_tag.gpointer
#COMMENT: a #GTask
#NAME: io_modules_load_all_in_directory
#PARENT: Gio.io_modules_load_all_in_directory
#COMMENT: a list of #GIOModules loaded
     from the directory,
     All the modules are loaded into memory, if you want to
     unload them (enabling on-demand loading) you must call
     g_type_module_unuse() on all the modules. Free the list
     with g_list_free().
#NAME: info
#PARENT: Gio.FileInfo.set_attribute_byte_string.none
#COMMENT: a #GFileInfo.
#NAME: body
#PARENT: Gio.DBusMessage.set_body.none
#COMMENT: Either %NULL or a #GVariant that is a tuple.
#NAME: flush_finish
#PARENT: Gio.DBusConnection
#COMMENT: Finishes an operation started with g_dbus_connection_flush().
#NAME: write_all_finish
#PARENT: Gio.OutputStream
#COMMENT: Finishes an asynchronous stream write operation started with
g_output_stream_write_all_async().

As a special exception to the normal conventions for functions that
use #GError, if this function returns %FALSE (and sets @error) then
@bytes_written will be set to the number of bytes that were
successfully written before the error was encountered.  This
functionality is only available from C.  If you need it from another
language then you must write your own loop around
g_output_stream_write_async().
#NAME: bus_acquired_handler
#PARENT: Gio.bus_own_name.guint
#COMMENT: handler to invoke when connected to the bus of type @bus_type or %NULL
#NAME: position
#PARENT: Gio.Menu.insert_item.none
#COMMENT: the position at which to insert the item
#NAME: cancellable
#PARENT: Gio.File.copy_attributes.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: spawn_config_invalid
#PARENT: Gio.DBusError
#COMMENT: We failed to setup the config parser correctly.
#NAME: get_family
#PARENT: Gio.SocketAddressClass.get_family.get_family
#COMMENT: the socket family type of @address
#NAME: callback
#PARENT: Gio.FileIface.replace_readwrite_async.replace_readwrite_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: enabled
#PARENT: Gio.ActionGroupInterface.query_action.query_action.gboolean
#COMMENT: if the action is presently enabled
#NAME: type
#PARENT: Gio.SeekableIface.seek.seek.gboolean
#COMMENT: a #GSeekType.
#NAME: callback
#PARENT: Gio.SocketConnection.connect_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: not_found
#PARENT: Gio.IOErrorEnum
#COMMENT: File not found.
#NAME: annotations
#PARENT: Gio.DBusMethodInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
#NAME: read_upto
#PARENT: Gio.DataInputStream
#COMMENT: Reads a string from the data input stream, up to the first
occurrence of any of the stop characters.

In contrast to g_data_input_stream_read_until(), this function
does not consume the stop character. You have to use
g_data_input_stream_read_byte() to get it before calling
g_data_input_stream_read_upto() again.

Note that @stop_chars may contain '\0' if @stop_chars_len is
specified.
#NAME: get_uri
#PARENT: Gio.ProxyAddress
#COMMENT: Gets the proxy URI that @proxy was constructed from.
#NAME: client
#PARENT: Gio.SocketClient.set_local_address.none
#COMMENT: a #GSocketClient.
#NAME: address
#PARENT: Gio.DBusConnection
#COMMENT: A D-Bus address specifying potential endpoints that can be used
when establishing the connection.
#NAME: lookup
#PARENT: Gio.IOExtensionPoint.lookup
#COMMENT: the #GIOExtensionPoint, or %NULL if there
   is no registered extension point with the given name.
#NAME: stream
#PARENT: Gio.PollableInputStreamInterface.create_source.create_source.GLib.Source
#COMMENT: a #GPollableInputStream.
#NAME: type
#PARENT: Gio.SocketControlMessage.deserialize.SocketControlMessage
#COMMENT: a socket control message type for the given @level
#NAME: dbus_is_guid
#PARENT: Gio.dbus_is_guid
#COMMENT: %TRUE if @string is a guid, %FALSE otherwise.
#NAME: get_proxy_type_func
#PARENT: Gio.DBusObjectManagerClient.new.none
#COMMENT: A #GDBusProxyTypeFunc function or %NULL to always construct #GDBusProxy proxies.
#NAME: buffer
#PARENT: Gio.InputStream.read.gssize
#COMMENT: a buffer to
    read data into (which should be at least count bytes long).
#NAME: set_uint
#PARENT: Gio.Settings
#COMMENT: Sets @key in @settings to @value.

A convenience variant of g_settings_set() for 32-bit unsigned
integers.

It is a programmer error to give a @key that isn't specified as
having a uint32 type in the schema for @settings.
#NAME: connection
#PARENT: Gio.TlsInteractionClass.request_certificate.request_certificate.TlsInteractionResult
#COMMENT: a #GTlsConnection object
#NAME: dbus_error_register_error
#PARENT: Gio.dbus_error_register_error
#COMMENT: %TRUE if the association was created, %FALSE if it already
exists.
#NAME: get_icon
#PARENT: Gio.FileInfo
#COMMENT: Gets the icon for a file.
#NAME: new
#PARENT: Gio.DBusObjectSkeleton
#COMMENT: Creates a new #GDBusObjectSkeleton.
#NAME: key
#PARENT: Gio.Settings.get_flags.guint
#COMMENT: the key to get the value for
#NAME: get_object_path
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Gets the object path the method was invoked on.
#NAME: fd_list
#PARENT: Gio.DBusMethodInvocation.return_value_with_unix_fd_list.none
#COMMENT: A #GUnixFDList or %NULL.
#NAME: connection
#PARENT: Gio.SocketConnection.get_socket.Socket
#COMMENT: a #GSocketConnection
#NAME: user_data
#PARENT: Gio.File.query_filesystem_info_async.none
#COMMENT: the data to pass to callback function
#NAME: get_address
#PARENT: Gio.InetAddressMask
#COMMENT: Gets @mask's base address
#NAME: get_choice
#PARENT: Gio.MountOperation.get_choice
#COMMENT: an integer containing an index of the user's choice from
the choice's list, or %0.
#NAME: task
#PARENT: Gio.Task.set_check_cancellable.none
#COMMENT: the #GTask
#NAME: InetSocketAddress
#PARENT: Gio
#COMMENT: An IPv4 or IPv6 socket address; that is, the combination of a
#GInetAddress and a port number.
#NAME: time_left
#PARENT: Gio.MountOperation.show-unmount-progress.none
#COMMENT: the estimated time left before the operation completes,
    in microseconds, or -1
#NAME: inetaddr
#PARENT: Gio.ProxyAddress.new.SocketAddress
#COMMENT: The proxy server #GInetAddress.
#NAME: cancellable
#PARENT: Gio.FileIface.trash.trash.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_volumes
#PARENT: Gio.Drive.get_volumes
#COMMENT: #GList containing any #GVolume objects on the given @drive.
#NAME: skip
#PARENT: Gio.InputStreamClass.skip.skip
#COMMENT: Number of bytes skipped, or -1 on error
#NAME: get_action_state
#PARENT: Gio.ActionGroup.get_action_state
#COMMENT: the current state of the action
#NAME: OutputStreamSpliceFlags
#PARENT: Gio
#COMMENT: GOutputStreamSpliceFlags determine how streams should be spliced.
#NAME: socket
#PARENT: Gio.Socket.set_option.gboolean
#COMMENT: a #GSocket
#NAME: add_any_inet_port
#PARENT: Gio.SocketListener
#COMMENT: Listens for TCP connections on any available port number for both
IPv6 and IPv4 (if each is available).

This is useful if you need to have a socket for incoming connections
but don't care about the specific port number.

@source_object will be passed out in the various calls
to accept to identify this particular source, which is
useful if you're listening on multiple addresses and do
different things depending on what address is connected to.
#NAME: data_size
#PARENT: Gio.content_type_guess.utf8
#COMMENT: the size of @data
#NAME: read_finish
#PARENT: Gio.File.read_finish
#COMMENT: a #GFileInputStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: cancellable
#PARENT: Gio.ResolverClass.lookup_records_async.lookup_records_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: get_name
#PARENT: Gio.SettingsSchemaKey.get_name
#COMMENT: the name of @key.
#NAME: get_native_size
#PARENT: Gio.InetAddress
#COMMENT: Gets the size of the native raw binary address for @address. This
is the size of the data that you get from g_inet_address_to_bytes().
#NAME: num_dirs
#PARENT: Gio.FileMeasureProgressCallback.none
#COMMENT: the number of directories visited so far
#NAME: unref
#PARENT: Gio.DBusAnnotationInfo
#COMMENT: If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.
#NAME: private
#PARENT: Gio.FileCreateFlags
#COMMENT: Create a file that can only be
   accessed by the current user.
#NAME: supports_startup_notification
#PARENT: Gio.AppInfoCreateFlags
#COMMENT: Application supports startup notification. Since 2.26
#NAME: address
#PARENT: Gio.InetAddress.get_native_size.gsize
#COMMENT: a #GInetAddress
#NAME: get_op_res_gssize
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Gets a gssize from the asynchronous result.
#NAME: detailed_action
#PARENT: Gio.Menu.append.none
#COMMENT: the detailed action string, or %NULL
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.guess_name.utf8
#COMMENT: a #GUnixMountPoint
#NAME: fill_finish
#PARENT: Gio.BufferedInputStream.fill_finish
#COMMENT: a #gssize of the read stream, or %-1 on an error.
#NAME: get_has_unapplied
#PARENT: Gio.Settings.get_has_unapplied
#COMMENT: %TRUE if @settings has unapplied changes
#NAME: new
#PARENT: Gio.UnixFDMessage
#COMMENT: Creates a new #GUnixFDMessage containing an empty file descriptor
list.
#NAME: cancellable
#PARENT: Gio.Subprocess.communicate.gboolean
#COMMENT: a #GCancellable
#NAME: resources_open_stream
#PARENT: Gio.resources_open_stream
#COMMENT: #GInputStream or %NULL on error.
    Free the returned object with g_object_unref()
#NAME: get_item
#PARENT: Gio.ListModel.get_item
#COMMENT: the item at @position.
#NAME: message
#PARENT: Gio.DBusMessage.set_sender.none
#COMMENT: A #GDBusMessage.
#NAME: get_icon
#PARENT: Gio.Mount
#COMMENT: Gets the icon for @mount.
#NAME: disk_usage
#PARENT: Gio.File.measure_disk_usage_finish.gboolean
#COMMENT: the number of bytes of disk space used
#NAME: file
#PARENT: Gio.FileIface.set_attributes_from_info.set_attributes_from_info.gboolean
#COMMENT: input #GFile
#NAME: format_string
#PARENT: Gio.MenuModel.get_item_attribute.gboolean
#COMMENT: a #GVariant format string
#NAME: action_name
#PARENT: Gio.ActionGroup.action_removed.none
#COMMENT: the name of an action in the group
#NAME: get_timeout
#PARENT: Gio.SocketClient.get_timeout
#COMMENT: the timeout in seconds
#NAME: callback
#PARENT: Gio.dbus_address_get_stream.none
#COMMENT: A #GAsyncReadyCallback to call when the request is satisfied.
#NAME: connectable
#PARENT: Gio.SocketClient.connect.SocketConnection
#COMMENT: a #GSocketConnectable specifying the remote address.
#NAME: mount
#PARENT: Gio.Mount.unmount_finish.gboolean
#COMMENT: a #GMount.
#NAME: authentication_server
#PARENT: Gio.DBusConnectionFlags
#COMMENT: Perform authentication against client.
#NAME: added
#PARENT: Gio.ListModel.items_changed.none
#COMMENT: the number of items added
#NAME: write_finish
#PARENT: Gio.OutputStream.write_finish
#COMMENT: a #gssize containing the number of bytes written to the stream.
#NAME: acquire_finish
#PARENT: Gio.Permission.acquire_finish
#COMMENT: %TRUE if the permission was successfully acquired
#NAME: can_poll
#PARENT: Gio.PollableOutputStream
#COMMENT: Checks if @stream is actually pollable. Some classes may implement
#GPollableOutputStream but have only certain instances of that
class be pollable. If this method returns %FALSE, then the behavior
of other #GPollableOutputStream methods is undefined.

For any given stream, the value returned by this method is constant;
a stream cannot switch from pollable to non-pollable or vice versa.
#NAME: interface_
#PARENT: Gio.DBusInterfaceIface.get_object.get_object.DBusObject
#COMMENT: An exported D-Bus interface
#NAME: new
#PARENT: Gio.TlsFileDatabase
#COMMENT: Creates a new #GTlsFileDatabase which uses anchor certificate authorities
in @anchors to verify certificate chains.

The certificates in @anchors must be PEM encoded.
#NAME: get_validation_flags
#PARENT: Gio.TlsClientConnection
#COMMENT: Gets @conn's validation flags
#NAME: get_exit_on_close
#PARENT: Gio.DBusConnection.get_exit_on_close
#COMMENT: whether the process is terminated when @connection is
    closed by the remote peer
#NAME: set_pending
#PARENT: Gio.OutputStream
#COMMENT: Sets @stream to have actions pending. If the pending flag is
already set or @stream is closed, it will return %FALSE and set
@error.
#NAME: file
#PARENT: Gio.FileIface.stop_mountable_finish.stop_mountable_finish.gboolean
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.NetworkMonitor.can_reach.gboolean
#COMMENT: a #GCancellable, or %NULL
#NAME: get_attribute_int32
#PARENT: Gio.FileInfo.get_attribute_int32
#COMMENT: a signed 32-bit integer from the attribute.
#NAME: read_fn
#PARENT: Gio.FileIface.read_fn.read_fn
#COMMENT: #GFileInputStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: new_for_bus_finish
#PARENT: Gio.DBusObjectManagerClient.new_for_bus_finish
#COMMENT: A
  #GDBusObjectManagerClient object or %NULL if @error is set. Free
  with g_object_unref().
#NAME: key
#PARENT: Gio.Settings.set_double.gboolean
#COMMENT: the name of the key to set
#NAME: buffer
#PARENT: Gio.Socket.receive_from.gssize
#COMMENT: a buffer to
    read data into (which should be at least @size bytes long).
#NAME: dbus_error_name
#PARENT: Gio.DBusErrorEntry
#COMMENT: The D-Bus error name to associate with @error_code.
#NAME: stream
#PARENT: Gio.OutputStream.has_pending.gboolean
#COMMENT: a #GOutputStream.
#NAME: callback
#PARENT: Gio.TlsInteractionClass.request_certificate_async.request_certificate_async.none
#COMMENT: will be called when the interaction completes
#NAME: get_fs_type
#PARENT: Gio.UnixMountPoint
#COMMENT: Gets the file system type for the mount point.
#NAME: callback
#PARENT: Gio.IOStream.splice_async.none
#COMMENT: a #GAsyncReadyCallback.
#NAME: progress_callback
#PARENT: Gio.FileIface.measure_disk_usage.measure_disk_usage.gboolean
#COMMENT: a #GFileMeasureProgressCallback
#NAME: get_port
#PARENT: Gio.SrvTarget
#COMMENT: Gets @target's port
#NAME: callback
#PARENT: Gio.TlsInteraction.request_certificate_async.none
#COMMENT: will be called when the interaction completes
#NAME: file
#PARENT: Gio.File.get_uri_scheme.utf8
#COMMENT: input #GFile
#NAME: get_item_attribute_value
#PARENT: Gio.MenuModel.get_item_attribute_value
#COMMENT: the value of the attribute
#NAME: get_peer_certificate_errors
#PARENT: Gio.TlsConnection.get_peer_certificate_errors
#COMMENT: @conn's peer's certificate errors
#NAME: stream
#PARENT: Gio.BufferedInputStream.fill_finish.gssize
#COMMENT: a #GBufferedInputStream
#NAME: read_all
#PARENT: Gio.InputStream.read_all
#COMMENT: %TRUE on success, %FALSE if there was an error
#NAME: emblemed
#PARENT: Gio.EmblemedIcon.clear_emblems.none
#COMMENT: a #GEmblemedIcon
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.get_object_path.utf8
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: proxy_enumerate
#PARENT: Gio.SocketConnectable.proxy_enumerate
#COMMENT: a new #GSocketAddressEnumerator.
#NAME: adopt_orphan_mount
#PARENT: Gio.VolumeMonitor.adopt_orphan_mount
#COMMENT: the #GVolume object that is the parent for @mount or %NULL
if no wants to adopt the #GMount.
#NAME: converter
#PARENT: Gio.CharsetConverter.get_num_fallbacks.guint
#COMMENT: a #GCharsetConverter
#NAME: cancellable
#PARENT: Gio.TlsInteraction.request_certificate_async.none
#COMMENT: an optional #GCancellable cancellation object
#NAME: get_auto_grow
#PARENT: Gio.BufferedOutputStream.get_auto_grow
#COMMENT: %TRUE if the @stream's buffer automatically grows,
%FALSE otherwise.
#NAME: result
#PARENT: Gio.DataInputStream.read_upto_finish.utf8
#COMMENT: the #GAsyncResult that was provided to the callback
#NAME: action_name
#PARENT: Gio.ActionMap.remove_action.none
#COMMENT: the name of the action
#NAME: socket
#PARENT: Gio.Socket.send_message.gssize
#COMMENT: a #GSocket
#NAME: not_tls
#PARENT: Gio.TlsError
#COMMENT: The TLS handshake failed because the
  peer does not seem to be a TLS server.
#NAME: key
#PARENT: Gio.Settings.get_int.gint
#COMMENT: the key to get the value for
#NAME: family
#PARENT: Gio.InetAddress.new_any.InetAddress
#COMMENT: the address family
#NAME: is_closed
#PARENT: Gio.FileEnumerator
#COMMENT: Checks if the file enumerator has been closed.
#NAME: PollableInputStreamInterface
#PARENT: Gio
#COMMENT: The interface for pollable input streams.

The default implementation of @can_poll always returns %TRUE.

The default implementation of @read_nonblocking calls
g_pollable_input_stream_is_readable(), and then calls
g_input_stream_read() if it returns %TRUE. This means you only need
to override it if it is possible that your @is_readable
implementation may return %TRUE when the stream is not actually
readable.
#NAME: get_interfaces
#PARENT: Gio.DBusObjectIface.get_interfaces.get_interfaces
#COMMENT: A list of #GDBusInterface instances.
  The returned list must be freed by g_list_free() after each element has been freed
  with g_object_unref().
#NAME: is_valid
#PARENT: Gio.Task
#COMMENT: Checks that @result is a #GTask, and that @source_object is its
source object (or that @source_object is %NULL and @result has no
source object). This can be used in g_return_if_fail() checks.
#NAME: stream
#PARENT: Gio.InputStreamClass.skip_async.skip_async.none
#COMMENT: A #GInputStream.
#NAME: connection
#PARENT: Gio.DBusConnection.get_unique_name.utf8
#COMMENT: a #GDBusConnection
#NAME: need_domain
#PARENT: Gio.AskPasswordFlags
#COMMENT: operation requires a domain.
#NAME: get_string
#PARENT: Gio.Settings.get_string
#COMMENT: a newly-allocated string
#NAME: var_args
#PARENT: Gio.DBusError.set_dbus_error_valist.none
#COMMENT: Arguments for @format.
#NAME: file
#PARENT: Gio.File.supports_thread_contexts.gboolean
#COMMENT: a #GFile
#NAME: file
#PARENT: Gio.File.replace_contents_async.none
#COMMENT: input #GFile
#NAME: PropertyAction
#PARENT: Gio
#COMMENT: A #GPropertyAction is a way to get a #GAction with a state value
reflecting and controlling the value of a #GObject property.

The state of the action will correspond to the value of the property.
Changing it will change the property (assuming the requested value
matches the requirements as specified in the #GParamSpec).

Only the most common types are presently supported.  Booleans are
mapped to booleans, strings to strings, signed/unsigned integers to
int32/uint32 and floats and doubles to doubles.

If the property is an enum then the state will be string-typed and
conversion will automatically be performed between the enum value and
"nick" string as per the #GEnumValue table.

Flags types are not currently supported.

Properties of object types, boxed types and pointer types are not
supported and probably never will be.

Properties of #GVariant types are not currently supported.

If the property is boolean-valued then the action will have a NULL
parameter type, and activating the action (with no parameter) will
toggle the value of the property.

In all other cases, the parameter type will correspond to the type of
the property.

The general idea here is to reduce the number of locations where a
particular piece of state is kept (and therefore has to be synchronised
between). #GPropertyAction does not have a separate state that is kept
in sync with the property value -- its state is the property value.

For example, it might be useful to create a #GAction corresponding to
the "visible-child-name" property of a #GtkStack so that the current
page can be switched from a menu.  The active radio indication in the
menu is then directly determined from the active page of the
#GtkStack.

An anti-example would be binding the "active-id" property on a
#GtkComboBox.  This is because the state of the combobox itself is
probably uninteresting and is actually being used to control
something else.

Another anti-example would be to bind to the "visible-child-name"
property of a #GtkStack if this value is actually stored in
#GSettings.  In that case, the real source of the value is
#GSettings.  If you want a #GAction to control a setting stored in
#GSettings, see g_settings_create_action() instead, and possibly
combine its use with g_settings_bind().
#NAME: user_data
#PARENT: Gio.SocketAddressEnumeratorClass.next_async.next_async.none
#COMMENT: the data to pass to callback function
#NAME: key
#PARENT: Gio.Settings.set_strv.gboolean
#COMMENT: the name of the key to set
#NAME: get_client_connection_type
#PARENT: Gio.TlsBackend
#COMMENT: Gets the #GType of @backend's #GTlsClientConnection implementation.
#NAME: add_socket
#PARENT: Gio.SocketListener.add_socket
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: close-fd
#PARENT: Gio.UnixInputStream
#COMMENT: Whether to close the file descriptor when the stream is closed.
#NAME: content_type_get_symbolic_icon
#PARENT: Gio
#COMMENT: Gets the symbolic icon for a content type.
#NAME: converted
#PARENT: Gio.ConverterResult
#COMMENT: Some data was consumed or produced
#NAME: n_additions
#PARENT: Gio.ListStore.splice.none
#COMMENT: the number of items to add
#NAME: file
#PARENT: Gio.FileIface.eject_mountable_with_operation_finish.eject_mountable_with_operation_finish.gboolean
#COMMENT: input #GFile
#NAME: get_startup_notify_id
#PARENT: Gio.AppLaunchContextClass.get_startup_notify_id.get_startup_notify_id
#COMMENT: a startup notification ID for the application, or %NULL if
    not supported.
#NAME: get_sort_key
#PARENT: Gio.MountIface.get_sort_key.get_sort_key
#COMMENT: Sorting key for @mount or %NULL if no such key is available.
#NAME: user_data
#PARENT: Gio.VolumeIface.mount_fn.mount_fn.none
#COMMENT: user data that gets passed to @callback
#NAME: action_group
#PARENT: Gio.Application.set_action_group.none
#COMMENT: a #GActionGroup, or %NULL
#NAME: not_activated
#PARENT: Gio.TlsCertificateFlags
#COMMENT: The certificate's activation time
  is still in the future
#NAME: lookup_async
#PARENT: Gio.ProxyResolver
#COMMENT: Asynchronous lookup of proxy. See g_proxy_resolver_lookup() for more
details.
#NAME: FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be stopped.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: result
#PARENT: Gio.Resolver.lookup_by_name_finish.InetAddress
#COMMENT: the result passed to your #GAsyncReadyCallback
#NAME: state_type
#PARENT: Gio.ActionGroup.query_action.gboolean
#COMMENT: the state type, or %NULL if stateless
#NAME: new_from_error
#PARENT: Gio.SimpleAsyncResult.new_from_error
#COMMENT: a #GSimpleAsyncResult.
#NAME: subprocess
#PARENT: Gio.Subprocess.send_signal.none
#COMMENT: a #GSubprocess
#NAME: resources_register
#PARENT: Gio
#COMMENT: Registers the resource with the process-global set of resources.
Once a resource is registered the files in it can be accessed
with the global resource lookup functions like g_resources_lookup_data().
#NAME: AppInfo
#PARENT: Gio
#COMMENT: #GAppInfo and #GAppLaunchContext are used for describing and launching
applications installed on the system.

As of GLib 2.20, URIs will always be converted to POSIX paths
(using g_file_get_path()) when using g_app_info_launch() even if
the application requested an URI and not a POSIX path. For example
for an desktop-file based application with Exec key `totem
%U` and a single URI, `sftp://foo/file.avi`, then
`/home/user/.gvfs/sftp on foo/file.avi` will be passed. This will
only work if a set of suitable GIO extensions (such as gvfs 2.26
compiled with FUSE support), is available and operational; if this
is not the case, the URI will be passed unmodified to the application.
Some URIs, such as `mailto:`, of course cannot be mapped to a POSIX
path (in gvfs there's no FUSE mount for it); such URIs will be
passed unmodified to the application.

Specifically for gvfs 2.26 and later, the POSIX URI will be mapped
back to the GIO URI in the #GFile constructors (since gvfs
implements the #GVfs extension point). As such, if the application
needs to examine the URI, it needs to use g_file_get_uri() or
similar on #GFile. In other words, an application cannot assume
that the URI passed to e.g. g_file_new_for_commandline_arg() is
equal to the result of g_file_get_uri(). The following snippet
illustrates this:

|[
GFile *f;
char *uri;

file = g_file_new_for_commandline_arg (uri_from_commandline);

uri = g_file_get_uri (file);
strcmp (uri, uri_from_commandline) == 0;
g_free (uri);

if (g_file_has_uri_scheme (file, "cdda"))
  {
    // do something special with uri
  }
g_object_unref (file);
]|

This code will work when both `cdda://sr0/Track 1.wav` and
`/home/user/.gvfs/cdda on sr0/Track 1.wav` is passed to the
application. It should be noted that it's generally not safe
for applications to rely on the format of a particular URIs.
Different launcher applications (e.g. file managers) may have
different ideas of what a given URI means.
#NAME: context
#PARENT: Gio.AppLaunchContextClass.launch_failed.launch_failed.none
#COMMENT: a #GAppLaunchContext.
#NAME: new
#PARENT: Gio.DBusMessage.new
#COMMENT: A #GDBusMessage. Free with g_object_unref().
#NAME: stream
#PARENT: Gio.InputStreamClass.close_async.close_async.none
#COMMENT: A #GInputStream.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.get_executable.get_executable.utf8
#COMMENT: a #GAppInfo
#NAME: user_data
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by_async.lookup_certificates_issued_by_async.none
#COMMENT: the data to pass to the callback function
#NAME: TlsCertificate
#PARENT: Gio
#COMMENT: A certificate used for TLS authentication and encryption.
This can represent either a certificate only (eg, the certificate
received by a client from a server), or the combination of
a certificate and a private key (which is needed when acting as a
#GTlsServerConnection).
#NAME: send_message_with_reply
#PARENT: Gio.DBusConnection
#COMMENT: Asynchronously sends @message to the peer represented by @connection.

Unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
will be assigned by @connection and set on @message via
g_dbus_message_set_serial(). If @out_serial is not %NULL, then the
serial number used will be written to this location prior to
submitting the message to the underlying transport.

If @connection is closed then the operation will fail with
%G_IO_ERROR_CLOSED. If @cancellable is canceled, the operation will
fail with %G_IO_ERROR_CANCELLED. If @message is not well-formed,
the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.

This is an asynchronous method. When the operation is finished, @callback
will be invoked in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this method from. You can then call
g_dbus_connection_send_message_with_reply_finish() to get the result of the operation.
See g_dbus_connection_send_message_with_reply_sync() for the synchronous version.

Note that @message must be unlocked, unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.

See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
for an example of how to use this low-level API to send and receive
UNIX file descriptors.
#NAME: enumerator
#PARENT: Gio.FileEnumerator.next_files_finish.FileInfo
#COMMENT: a #GFileEnumerator.
#NAME: condition_check
#PARENT: Gio.Socket.condition_check
#COMMENT: the @GIOCondition mask of the current state
#NAME: info
#PARENT: Gio.FileInfo.get_is_hidden.gboolean
#COMMENT: a #GFileInfo.
#NAME: connection
#PARENT: Gio.DBusConnection.flush_finish.gboolean
#COMMENT: a #GDBusConnection
#NAME: cancellable
#PARENT: Gio.Socket.send_messages.gint
#COMMENT: a %GCancellable or %NULL
#NAME: get_is_site_local
#PARENT: Gio.InetAddress
#COMMENT: Tests whether @address is a site-local address such as 10.0.0.1
(that is, the address identifies a host on a local network that can
not be reached directly from the Internet, but which may have
outgoing Internet connectivity via a NAT or firewall).
#NAME: set_unix_fd_list
#PARENT: Gio.DBusMessage
#COMMENT: Sets the UNIX file descriptors associated with @message. As a
side-effect the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header
field is set to the number of fds in @fd_list (or cleared if
@fd_list is %NULL).

This method is only available on UNIX.
#NAME: user_data
#PARENT: Gio.DBusSubtreeDispatchFunc.DBusInterfaceVTable
#COMMENT: The @user_data #gpointer passed to g_dbus_connection_register_subtree().
#NAME: stream
#PARENT: Gio.OutputStream.write_all.gboolean
#COMMENT: a #GOutputStream.
#NAME: eject_finish
#PARENT: Gio.VolumeIface.eject_finish.eject_finish
#COMMENT: %TRUE, %FALSE if operation failed
#NAME: quark
#PARENT: Gio.ResourceError.quark
#COMMENT: a #GQuark
#NAME: cancellable
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle.TlsCertificate
#COMMENT: a #GCancellable, or %NULL
#NAME: get_state_hint
#PARENT: Gio.Action.get_state_hint
#COMMENT: the state range hint
#NAME: get_network_available
#PARENT: Gio.NetworkMonitor
#COMMENT: Checks if the network is available. "Available" here means that the
system has a default route available for at least one of IPv4 or
IPv6. It does not necessarily imply that the public Internet is
reachable. See #GNetworkMonitor:network-available for more details.
#NAME: cancellable
#PARENT: Gio.Socket.receive.gssize
#COMMENT: a %GCancellable or %NULL
#NAME: service
#PARENT: Gio.SocketService.start.none
#COMMENT: a #GSocketService
#NAME: attribute
#PARENT: Gio.FileInfo.remove_attribute.none
#COMMENT: a file attribute key.
#NAME: cancellable
#PARENT: Gio.DBusConnection.new_for_address.none
#COMMENT: a #GCancellable or %NULL
#NAME: get_display
#PARENT: Gio.AppLaunchContext.get_display
#COMMENT: a display string for the display.
#NAME: certificate
#PARENT: Gio.tls_server_connection_new.TlsServerConnection
#COMMENT: the default server certificate, or %NULL
#NAME: count
#PARENT: Gio.InputStream.read_bytes_async.none
#COMMENT: the number of bytes that will be read from the stream
#NAME: get_application_id
#PARENT: Gio.Application
#COMMENT: Gets the unique identifier for @application.
#NAME: get_start_stop_type
#PARENT: Gio.Drive
#COMMENT: Gets a hint about how a drive can be started/stopped.
#NAME: parameter_type
#PARENT: Gio.SimpleAction.new_stateful.SimpleAction
#COMMENT: the type of the parameter to the activate function
#NAME: cancellable
#PARENT: Gio.initable_newv.GObject.Object
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: info
#PARENT: Gio.DBusNodeInfo.generate_xml.none
#COMMENT: A #GDBusNodeInfo.
#NAME: get_attribute_string
#PARENT: Gio.FileInfo
#COMMENT: Gets the value of a string attribute. If the attribute does
not contain a string, %NULL will be returned.
#NAME: get_icon
#PARENT: Gio.VolumeIface.get_icon.get_icon
#COMMENT: a #GIcon.
    The returned object should be unreffed with g_object_unref()
    when no longer needed.
#NAME: get_file_database_type
#PARENT: Gio.TlsBackend.get_file_database_type
#COMMENT: the #GType of backend's #GTlsFileDatabase implementation.
#NAME: listener
#PARENT: Gio.SocketListener.accept_socket_async.none
#COMMENT: a #GSocketListener
#NAME: notify
#PARENT: Gio.IOSchedulerJob.send_to_mainloop.gboolean
#COMMENT: a #GDestroyNotify for @user_data, or %NULL
#NAME: io_priority
#PARENT: Gio.FileIface.enumerate_children_async.enumerate_children_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: unix_process_id_unknown
#PARENT: Gio.DBusError
#COMMENT: Tried to get a UNIX process ID and it wasn't available.
#NAME: callback
#PARENT: Gio.Mount.eject_with_operation.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: file
#PARENT: Gio.FileIface.start_mountable.start_mountable.none
#COMMENT: input #GFile
#NAME: set_close_base_stream
#PARENT: Gio.FilterInputStream
#COMMENT: Sets whether the base stream will be closed when @stream is closed.
#NAME: length
#PARENT: Gio.TlsPassword.set_value.none
#COMMENT: the length of the password, or -1
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.set_error.none
#COMMENT: a #GSimpleAsyncResult.
#NAME: mount
#PARENT: Gio.MountIface.get_symbolic_icon.get_symbolic_icon.Icon
#COMMENT: a #GMount.
#NAME: cancellable
#PARENT: Gio.Subprocess.communicate_async.none
#COMMENT: Cancellable
#NAME: FILE_ATTRIBUTE_TIME_MODIFIED
#PARENT: Gio
#COMMENT: A key in the "time" namespace for getting the time the file was last
modified. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_UINT64, and contains the UNIX time since the
file was modified.
#NAME: file
#PARENT: Gio.File.replace_async.none
#COMMENT: input #GFile
#NAME: port
#PARENT: Gio.NetworkAddress.new.NetworkAddress
#COMMENT: the port
#NAME: free_targets
#PARENT: Gio.Resolver
#COMMENT: Frees @targets (which should be the return value from
g_resolver_lookup_service() or g_resolver_lookup_service_finish()).
(This is a convenience method; you can also simply free the
results by hand.)
#NAME: get_info
#PARENT: Gio.DBusInterfaceSkeleton.get_info
#COMMENT: A #GDBusInterfaceInfo (never %NULL). Do not free.
#NAME: var_args
#PARENT: Gio.DBusMessage.new_method_error_valist.DBusMessage
#COMMENT: Arguments for @error_message_format.
#NAME: get_uri
#PARENT: Gio.FileIface.get_uri.get_uri
#COMMENT: a string containing the #GFile's URI.
    The returned string should be freed with g_free()
    when no longer needed.
#NAME: callback
#PARENT: Gio.File.delete_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: server_identity
#PARENT: Gio.tls_client_connection_new.TlsClientConnection
#COMMENT: the expected identity of the server
#NAME: flags
#PARENT: Gio.File.create.FileOutputStream
#COMMENT: a set of #GFileCreateFlags
#NAME: stream
#PARENT: Gio.OutputStream.is_closed.gboolean
#COMMENT: a #GOutputStream.
#NAME: new_from_keyfile
#PARENT: Gio.DesktopAppInfo
#COMMENT: Creates a new #GDesktopAppInfo.
#NAME: file
#PARENT: Gio.FileIface.append_to_async.append_to_async.none
#COMMENT: input #GFile
#NAME: equal
#PARENT: Gio.InetAddress.equal
#COMMENT: %TRUE if @address and @other_address are equal, %FALSE otherwise.
#NAME: disk_usage
#PARENT: Gio.File.measure_disk_usage.gboolean
#COMMENT: the number of bytes of disk space used
#NAME: UnixFDList
#PARENT: Gio
#COMMENT: A #GUnixFDList contains a list of file descriptors.  It owns the file
descriptors that it contains, closing them when finalized.

It may be wrapped in a #GUnixFDMessage and sent over a #GSocket in
the %G_SOCKET_ADDRESS_UNIX family by using g_socket_send_message()
and received using g_socket_receive_message().

Note that `<gio/gunixfdlist.h>` belongs to the UNIX-specific GIO
interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
file when using it.
#NAME: cancellable
#PARENT: Gio.DBusServer.new_sync.DBusServer
#COMMENT: A #GCancellable or %NULL.
#NAME: peek
#PARENT: Gio.BufferedInputStream
#COMMENT: Peeks in the buffer, copying data of size @count into @buffer,
offset @offset bytes.
#NAME: get_display
#PARENT: Gio.AppLaunchContext
#COMMENT: Gets the display string for the @context. This is used to ensure new
applications are started on the same display as the launching
application, by setting the `DISPLAY` environment variable.
#NAME: tls_backend_get_default
#PARENT: Gio.tls_backend_get_default
#COMMENT: a #GTlsBackend
#NAME: flags
#PARENT: Gio.File.monitor_file.FileMonitor
#COMMENT: a set of #GFileMonitorFlags
#NAME: menu_item
#PARENT: Gio.MenuItem.get_attribute_value.GLib.Variant
#COMMENT: a #GMenuItem
#NAME: cancellable
#PARENT: Gio.InputStream.skip_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: print_detailed_name
#PARENT: Gio.Action
#COMMENT: Formats a detailed action name from @action_name and @target_value.

It is an error to call this function with an invalid action name.

This function is the opposite of
g_action_parse_detailed_action_name().  It will produce a string that
can be parsed back to the @action_name and @target_value by that
function.

See that function for the types of strings that will be printed by
this function.
#NAME: get_fd
#PARENT: Gio.Socket.get_fd
#COMMENT: the file descriptor of the socket.
#NAME: native
#PARENT: Gio.Credentials.set_native.none
#COMMENT: A pointer to native credentials.
#NAME: mount_operation
#PARENT: Gio.MountIface.eject_with_operation.eject_with_operation.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: is_closing
#PARENT: Gio.OutputStream
#COMMENT: Checks if an output stream is being closed. This can be
used inside e.g. a flush implementation to see if the
flush (or other i/o operation) is called from within
the closing operation.
#NAME: client
#PARENT: Gio.SocketClient.get_tls.gboolean
#COMMENT: a #GSocketClient.
#NAME: receive_credentials_async
#PARENT: Gio.UnixConnection
#COMMENT: Asynchronously receive credentials.

For more details, see g_unix_connection_receive_credentials() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_unix_connection_receive_credentials_finish() to get the result of the operation.
#NAME: destination
#PARENT: Gio.FileIface.copy.copy.gboolean
#COMMENT: destination #GFile
#NAME: remove_all
#PARENT: Gio.ListStore
#COMMENT: Removes all items from @store.
#NAME: dbus_is_interface_name
#PARENT: Gio
#COMMENT: Checks if @string is a valid D-Bus interface name.
#NAME: address
#PARENT: Gio.SocketAddressClass.to_native.to_native.gboolean
#COMMENT: a #GSocketAddress
#NAME: compressor
#PARENT: Gio.ZlibCompressor.get_file_info.FileInfo
#COMMENT: a #GZlibCompressor
#NAME: num_entries
#PARENT: Gio.dbus_error_register_error_domain.none
#COMMENT: Number of items to register.
#NAME: io_priority
#PARENT: Gio.File.enumerate_children_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: conn
#PARENT: Gio.TlsConnection.get_rehandshake_mode.TlsRehandshakeMode
#COMMENT: a #GTlsConnection
#NAME: replace_async
#PARENT: Gio.File
#COMMENT: Asynchronously overwrites the file, replacing the contents,
possibly creating a backup copy of the file first.

For more details, see g_file_replace() which is
the synchronous version of this call.

When the operation is finished, @callback will be called.
You can then call g_file_replace_finish() to get the result
of the operation.
#NAME: condition_timed_wait
#PARENT: Gio.Socket
#COMMENT: Waits for up to @timeout microseconds for @condition to become true
on @socket. If the condition is met, %TRUE is returned.

If @cancellable is cancelled before the condition is met, or if
@timeout (or the socket's #GSocket:timeout) is reached before the
condition is met, then %FALSE is returned and @error, if non-%NULL,
is set to the appropriate value (%G_IO_ERROR_CANCELLED or
%G_IO_ERROR_TIMED_OUT).

If you don't want a timeout, use g_socket_condition_wait().
(Alternatively, you can pass -1 for @timeout.)

Note that although @timeout is in microseconds for consistency with
other GLib APIs, this function actually only has millisecond
resolution, and the behavior is undefined if @timeout is not an
exact number of milliseconds.
#NAME: enumerate
#PARENT: Gio.SocketConnectable
#COMMENT: Creates a #GSocketAddressEnumerator for @connectable.
#NAME: stream
#PARENT: Gio.BufferedInputStreamClass.fill_async.fill_async.none
#COMMENT: a #GBufferedInputStream
#NAME: get_user_data
#PARENT: Gio.AsyncResultIface.get_user_data.get_user_data
#COMMENT: the user data for @res.
#NAME: new_with_path
#PARENT: Gio.Settings
#COMMENT: Creates a new #GSettings object with the relocatable schema specified
by @schema_id and a given path.

You only need to do this if you want to directly create a settings
object with a schema that doesn't have a specified path of its own.
That's quite rare.

It is a programmer error to call this function for a schema that
has an explicitly specified path.

It is a programmer error if @path is not a valid path.  A valid path
begins and ends with '/' and does not contain two consecutive '/'
characters.
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_as_string.utf8
#COMMENT: a #GFileInfo.
#NAME: flags
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by_async.none
#COMMENT: Flags which affect the lookup operation.
#NAME: menu_item
#PARENT: Gio.MenuItem.get_attribute.gboolean
#COMMENT: a #GMenuItem
#NAME: user_data
#PARENT: Gio.FileInputStream.query_info_async.none
#COMMENT: the data to pass to callback function
#NAME: eject_mountable_with_operation_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous eject operation started by
g_file_eject_mountable_with_operation().
#NAME: uri_scheme
#PARENT: Gio.AppInfo.get_default_for_uri_scheme.AppInfo
#COMMENT: a string containing a URI scheme.
#NAME: unsetenv
#PARENT: Gio.SubprocessLauncher
#COMMENT: Removes the environment variable @variable from the environment of
processes launched from this launcher.

The variable name should be in the GLib file name encoding.  On UNIX,
this means that they can be arbitrary byte strings.  On Windows, they
should be in UTF-8.
#NAME: type
#PARENT: Gio.DataInputStream.set_newline_type.none
#COMMENT: the type of new line return as #GDataStreamNewlineType.
#NAME: connection
#PARENT: Gio.UnixConnection.receive_fd.gint
#COMMENT: a #GUnixConnection
#NAME: result
#PARENT: Gio.FileEnumeratorClass.next_files_finish.next_files_finish.FileInfo
#COMMENT: a #GAsyncResult.
#NAME: application
#PARENT: Gio.Application.get_resource_base_path.utf8
#COMMENT: a #GApplication
#NAME: added
#PARENT: Gio.ListModel.items-changed.none
#COMMENT: the number of items added
#NAME: query_filesystem_info
#PARENT: Gio.File
#COMMENT: Similar to g_file_query_info(), but obtains information
about the filesystem the @file is on, rather than the file itself.
For instance the amount of space available and the type of
the filesystem.

The @attributes value is a string that specifies the attributes
that should be gathered. It is not an error if it's not possible
to read a particular requested attribute from a file - it just
won't be set. @attributes should be a comma-separated list of
attributes or attribute wildcards. The wildcard "*" means all
attributes, and a wildcard like "filesystem::*" means all attributes
in the filesystem namespace. The standard namespace for filesystem
attributes is "filesystem". Common attributes of interest are
#G_FILE_ATTRIBUTE_FILESYSTEM_SIZE (the total size of the filesystem
in bytes), #G_FILE_ATTRIBUTE_FILESYSTEM_FREE (number of bytes available),
and #G_FILE_ATTRIBUTE_FILESYSTEM_TYPE (type of the filesystem).

If @cancellable is not %NULL, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
returned.

If the file does not exist, the %G_IO_ERROR_NOT_FOUND error will
be returned. Other errors are possible too, and depend on what
kind of filesystem the file is on.
#NAME: address
#PARENT: Gio.InetSocketAddress.get_port.guint16
#COMMENT: a #GInetSocketAddress
#NAME: listener
#PARENT: Gio.SocketListener.add_inet_port.gboolean
#COMMENT: a #GSocketListener
#NAME: item_index
#PARENT: Gio.MenuModelClass.get_item_links.get_item_links.none
#COMMENT: The #GMenuItem to query
#NAME: member
#PARENT: Gio.DBusMessageHeaderField
#COMMENT: The method or signal name.
#NAME: replace_contents_finish
#PARENT: Gio.File.replace_contents_finish
#COMMENT: %TRUE on success, %FALSE on failure.
#NAME: volume
#PARENT: Gio.Volume.get_symbolic_icon.Icon
#COMMENT: a #GVolume
#NAME: get_enable_proxy
#PARENT: Gio.SocketClient
#COMMENT: Gets the proxy enable state; see g_socket_client_set_enable_proxy()
#NAME: info
#PARENT: Gio.FileInfo.has_attribute.gboolean
#COMMENT: a #GFileInfo.
#NAME: settings
#PARENT: Gio.Settings.get_default_value.GLib.Variant
#COMMENT: a #GSettings object
#NAME: interaction
#PARENT: Gio.TlsInteraction.invoke_ask_password.TlsInteractionResult
#COMMENT: a #GTlsInteraction object
#NAME: get_volumes
#PARENT: Gio.DriveIface.get_volumes.get_volumes
#COMMENT: #GList containing any #GVolume objects on the given @drive.
#NAME: file
#PARENT: Gio.FileIface.set_display_name.set_display_name.File
#COMMENT: input #GFile
#NAME: get_is_mc_node_local
#PARENT: Gio.InetAddress.get_is_mc_node_local
#COMMENT: %TRUE if @address is a node-local multicast address.
#NAME: value
#PARENT: Gio.Settings.set_string.gboolean
#COMMENT: the value to set it to
#NAME: attr_value
#PARENT: Gio.FileInfo.set_attribute_byte_string.none
#COMMENT: a byte string.
#NAME: eject_with_operation_finish
#PARENT: Gio.Mount.eject_with_operation_finish
#COMMENT: %TRUE if the mount was successfully ejected. %FALSE otherwise.
#NAME: new
#PARENT: Gio.UnixOutputStream.new
#COMMENT: a new #GOutputStream
#NAME: buffer
#PARENT: Gio.OutputStream.write.gssize
#COMMENT: the buffer containing the data to write.
#NAME: volume
#PARENT: Gio.Volume.can_mount.gboolean
#COMMENT: a #GVolume
#NAME: mx
#PARENT: Gio.ResolverRecordType
#COMMENT: lookup DNS MX records for a domain
#NAME: stream
#PARENT: Gio.BufferedOutputStream.set_buffer_size.none
#COMMENT: a #GBufferedOutputStream.
#NAME: count
#PARENT: Gio.PollableOutputStreamInterface.write_nonblocking.write_nonblocking.gssize
#COMMENT: the number of bytes you want to write
#NAME: create_readwrite_finish
#PARENT: Gio.FileIface.create_readwrite_finish.create_readwrite_finish
#COMMENT: a #GFileIOStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: get_available
#PARENT: Gio.BufferedInputStream.get_available
#COMMENT: size of the available stream.
#NAME: io_priority
#PARENT: Gio.File.delete_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: cancellable
#PARENT: Gio.File.copy_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: protocol
#PARENT: Gio.Proxy.get_default_for_protocol.Proxy
#COMMENT: the proxy protocol name (e.g. http, socks, etc)
#NAME: connection
#PARENT: Gio.TlsInteraction.request_certificate_async.none
#COMMENT: a #GTlsConnection object
#NAME: file
#PARENT: Gio.File.measure_disk_usage_async.none
#COMMENT: a #GFile
#NAME: get_client_address
#PARENT: Gio.DBusServer
#COMMENT: Gets a D-Bus address string that can be used by clients to connect
to @server.
#NAME: cancellable
#PARENT: Gio.File.set_attribute_string.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_action_parameter_type
#PARENT: Gio.ActionGroup.get_action_parameter_type
#COMMENT: the parameter type
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.get_is_remote.gboolean
#COMMENT: a #GApplicationCommandLine
#NAME: volume
#PARENT: Gio.Volume.eject_finish.gboolean
#COMMENT: pointer to a #GVolume
#NAME: dirname
#PARENT: Gio.io_modules_load_all_in_directory.IOModule
#COMMENT: pathname for a directory containing modules to load.
#NAME: make_backup
#PARENT: Gio.FileIface.replace_readwrite.replace_readwrite.FileIOStream
#COMMENT: %TRUE if a backup should be created
#NAME: message
#PARENT: Gio.DBusMessage.set_byte_order.none
#COMMENT: A #GDBusMessage.
#NAME: query_writable_namespaces
#PARENT: Gio.File
#COMMENT: Obtain the list of attribute namespaces where new attributes
can be created by a user. An example of this is extended
attributes (in the "xattr" namespace).

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: stream
#PARENT: Gio.OutputStream.close_async.none
#COMMENT: A #GOutputStream.
#NAME: cancellable
#PARENT: Gio.BufferedInputStream.fill.gssize
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: user_data
#PARENT: Gio.PermissionClass.acquire_async.acquire_async.none
#COMMENT: the user data to pass to @callback
#NAME: settings
#PARENT: Gio.Settings.set_double.gboolean
#COMMENT: a #GSettings object
#NAME: get_state
#PARENT: Gio.Action.get_state
#COMMENT: the current state of the action
#NAME: subprocess
#PARENT: Gio.Subprocess.get_successful.gboolean
#COMMENT: a #GSubprocess
#NAME: connection
#PARENT: Gio.UnixConnection.receive_credentials_finish.Credentials
#COMMENT: A #GUnixConnection.
#NAME: return_dbus_error
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Finishes handling a D-Bus method call by returning an error.

This method will free @invocation, you cannot use it afterwards.
#NAME: cancellable
#PARENT: Gio.FileIface.query_writable_namespaces.query_writable_namespaces.FileAttributeInfoList
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: SimplePermission
#PARENT: Gio
#COMMENT: #GSimplePermission is a trivial implementation of #GPermission that
represents a permission that is either always or never allowed.  The
value is given at construction and doesn't change.

Calling request or release will result in errors.
#NAME: domain
#PARENT: Gio.NetworkService.new.NetworkService
#COMMENT: the DNS domain to look up the service in
#NAME: has_key
#PARENT: Gio.SettingsSchema
#COMMENT: Checks if @schema has a key named @name.
#NAME: menu_item
#PARENT: Gio.MenuItem.set_submenu.none
#COMMENT: a #GMenuItem
#NAME: new
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Asynchronously creates a new #GDBusObjectManagerClient object.

This is an asynchronous failable constructor. When the result is
ready, @callback will be invoked in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this method from. You can
then call g_dbus_object_manager_client_new_finish() to get the result. See
g_dbus_object_manager_client_new_sync() for the synchronous version.
#NAME: ReallocFunc
#PARENT: Gio.ReallocFunc
#COMMENT: a pointer to the reallocated memory
#NAME: list_new_from_file
#PARENT: Gio.TlsCertificate.list_new_from_file
#COMMENT: a
#GList containing #GTlsCertificate objects. You must free the list
and its contents when you are done with it.
#NAME: get_mount
#PARENT: Gio.Volume
#COMMENT: Gets the mount for the @volume.
#NAME: lookup_finish
#PARENT: Gio.ProxyResolver
#COMMENT: Call this function to obtain the array of proxy URIs when
g_proxy_resolver_lookup_async() is complete. See
g_proxy_resolver_lookup() for more details.
#NAME: call_with_unix_fd_list_finish
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_finish
#COMMENT: %NULL if @error is set. Otherwise a #GVariant tuple with
return values. Free with g_variant_unref().
#NAME: ns
#PARENT: Gio.ResolverRecordType
#COMMENT: lookup DNS NS records for a domain
#NAME: key
#PARENT: Gio.Settings.get_user_value.GLib.Variant
#COMMENT: the key to get the user value for
#NAME: connect_finish
#PARENT: Gio.SocketClient.connect_finish
#COMMENT: a #GSocketConnection on success, %NULL on error.
#NAME: listener
#PARENT: Gio.SocketListener.accept_async.none
#COMMENT: a #GSocketListener
#NAME: flags
#PARENT: Gio.File.copy_async.none
#COMMENT: set of #GFileCopyFlags
#NAME: new
#PARENT: Gio.MemoryOutputStream.new
#COMMENT: A newly created #GMemoryOutputStream object.
#NAME: InetAddressMask
#PARENT: Gio
#COMMENT: #GInetAddressMask represents a range of IPv4 or IPv6 addresses
described by a base address and a length indicating how many bits
of the base address are relevant for matching purposes. These are
often given in string form. Eg, "10.0.0.0/8", or "fe80::/10".
#NAME: renamed
#PARENT: Gio.FileMonitorEvent
#COMMENT: the file was renamed within the
  current directory -- only sent if the %G_FILE_MONITOR_WATCH_MOVES
  flag is set.  Since: 2.44.
#NAME: user_data
#PARENT: Gio.MountIface.guess_content_type.guess_content_type.none
#COMMENT: user data passed to @callback
#NAME: lookup
#PARENT: Gio.DBusAnnotationInfo.lookup
#COMMENT: The value or %NULL if not found. Do not free, it is owned by @annotations.
#NAME: matcher
#PARENT: Gio.FileAttributeMatcher.to_string.utf8
#COMMENT: a #GFileAttributeMatcher.
#NAME: get_nodisplay
#PARENT: Gio.DesktopAppInfo.get_nodisplay
#COMMENT: The value of the NoDisplay key
#NAME: SettingsSchema
#PARENT: Gio
#COMMENT: The #GSettingsSchemaSource and #GSettingsSchema APIs provide a
mechanism for advanced control over the loading of schemas and a
mechanism for introspecting their content.

Plugin loading systems that wish to provide plugins a way to access
settings face the problem of how to make the schemas for these
settings visible to GSettings.  Typically, a plugin will want to ship
the schema along with itself and it won't be installed into the
standard system directories for schemas.

#GSettingsSchemaSource provides a mechanism for dealing with this by
allowing the creation of a new 'schema source' from which schemas can
be acquired.  This schema source can then become part of the metadata
associated with the plugin and queried whenever the plugin requires
access to some settings.

Consider the following example:

|[<!-- language="C" -->
typedef struct
{
   ...
   GSettingsSchemaSource *schema_source;
   ...
} Plugin;

Plugin *
initialise_plugin (const gchar *dir)
{
  Plugin *plugin;

  ...

  plugin->schema_source =
    g_settings_new_schema_source_from_directory (dir,
      g_settings_schema_source_get_default (), FALSE, NULL);

  ...

  return plugin;
}

...

GSettings *
plugin_get_settings (Plugin      *plugin,
                     const gchar *schema_id)
{
  GSettingsSchema *schema;

  if (schema_id == NULL)
    schema_id = plugin->identifier;

  schema = g_settings_schema_source_lookup (plugin->schema_source,
                                            schema_id, FALSE);

  if (schema == NULL)
    {
      ... disable the plugin or abort, etc ...
    }

  return g_settings_new_full (schema, NULL, NULL);
}
]|

The code above shows how hooks should be added to the code that
initialises (or enables) the plugin to create the schema source and
how an API can be added to the plugin system to provide a convenient
way for the plugin to access its settings, using the schemas that it
ships.

From the standpoint of the plugin, it would need to ensure that it
ships a gschemas.compiled file as part of itself, and then simply do
the following:

|[<!-- language="C" -->
{
  GSettings *settings;
  gint some_value;

  settings = plugin_get_settings (self, NULL);
  some_value = g_settings_get_int (settings, "some-value");
  ...
}
]|

It's also possible that the plugin system expects the schema source
files (ie: .gschema.xml files) instead of a gschemas.compiled file.
In that case, the plugin loading system must compile the schemas for
itself before attempting to create the settings source.
#NAME: content_type
#PARENT: Gio.AppInfo.get_all_for_type.AppInfo
#COMMENT: the content type to find a #GAppInfo for
#NAME: uuid
#PARENT: Gio.VolumeMonitorClass.get_volume_for_uuid.get_volume_for_uuid.Volume
#COMMENT: the UUID to look for
#NAME: FileInfo
#PARENT: Gio
#COMMENT: Functionality for manipulating basic metadata for files. #GFileInfo
implements methods for getting information that all files should
contain, and allows for manipulation of extended attributes.

See [GFileAttribute][gio-GFileAttribute] for more information on how
GIO handles file attributes.

To obtain a #GFileInfo for a #GFile, use g_file_query_info() (or its
async variant). To obtain a #GFileInfo for a file input or output
stream, use g_file_input_stream_query_info() or
g_file_output_stream_query_info() (or their async variants).

To change the actual attributes of a file, you should then set the
attribute in the #GFileInfo and call g_file_set_attributes_from_info()
or g_file_set_attributes_async() on a GFile.

However, not all attributes can be changed in the file. For instance,
the actual size of a file cannot be changed via g_file_info_set_size().
You may call g_file_query_settable_attributes() and
g_file_query_writable_namespaces() to discover the settable attributes
of a particular file at runtime.

#GFileAttributeMatcher allows for searching through a #GFileInfo for
attributes.
#NAME: get_timeout
#PARENT: Gio.Socket.get_timeout
#COMMENT: the timeout in seconds
#NAME: object
#PARENT: Gio.DBusObjectManager.object-added.none
#COMMENT: The #GDBusObject that was added.
#NAME: set_require_close_notify
#PARENT: Gio.TlsConnection
#COMMENT: Sets whether or not @conn expects a proper TLS close notification
before the connection is closed. If this is %TRUE (the default),
then @conn will expect to receive a TLS close notification from its
peer before the connection is closed, and will return a
%G_TLS_ERROR_EOF error if the connection is closed without proper
notification (since this may indicate a network error, or
man-in-the-middle attack).

In some protocols, the application will know whether or not the
connection was closed cleanly based on application-level data
(because the application-level data includes a length field, or is
somehow self-delimiting); in this case, the close notify is
redundant and sometimes omitted. (TLS 1.1 explicitly allows this;
in TLS 1.0 it is technically an error, but often done anyway.) You
can use g_tls_connection_set_require_close_notify() to tell @conn
to allow an "unannounced" connection close, in which case the close
will show up as a 0-length read, as in a non-TLS
#GSocketConnection, and it is up to the application to check that
the data has been fully received.

Note that this only affects the behavior when the peer closes the
connection; when the application calls g_io_stream_close() itself
on @conn, this will send a close notification regardless of the
setting of this property. If you explicitly want to do an unclean
close, you can close @conn's #GTlsConnection:base-io-stream rather
than closing @conn itself.
#NAME: spawn_fork_failed
#PARENT: Gio.DBusError
#COMMENT: While starting a new process, the fork() call failed.
#NAME: BusNameOwnerFlags
#PARENT: Gio
#COMMENT: Flags used in g_bus_own_name().
#NAME: multidisk
#PARENT: Gio.DriveStartStopType
#COMMENT: The start/stop methods will
   assemble/disassemble a virtual drive from several physical
   drives.
#NAME: cancellable
#PARENT: Gio.AsyncInitable.newv_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: conn
#PARENT: Gio.TlsConnection.get_peer_certificate.TlsCertificate
#COMMENT: a #GTlsConnection
#NAME: mount_operation
#PARENT: Gio.DriveIface.eject_with_operation.eject_with_operation.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: cancellable
#PARENT: Gio.OutputStream.write_all_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: protocol
#PARENT: Gio.ProxyAddress.new.SocketAddress
#COMMENT: The proxy protocol to support, in lower case (e.g. socks, http).
#NAME: change-state
#PARENT: Gio.SimpleAction
#COMMENT: Indicates that the action just received a request to change its
state.

@value will always be of the correct state type.  In the event that
an incorrect type was given, no signal will be emitted.

If no handler is connected to this signal then the default
behaviour is to call g_simple_action_set_state() to set the state
to the requested value. If you connect a signal handler then no
default action is taken. If the state should change then you must
call g_simple_action_set_state() from the handler.

An example of a 'change-state' handler:
|[<!-- language="C" -->
static void
change_volume_state (GSimpleAction *action,
                     GVariant      *value,
                     gpointer       user_data)
{
  gint requested;

  requested = g_variant_get_int32 (value);

  // Volume only goes from 0 to 10
  if (0 <= requested && requested <= 10)
    g_simple_action_set_state (action, value);
}
]|

The handler need not set the state to the requested value.
It could set it to any value at all, or take some other action.
#NAME: get_icon
#PARENT: Gio.Drive.get_icon
#COMMENT: #GIcon for the @drive.
   Free the returned object with g_object_unref().
#NAME: stream
#PARENT: Gio.UnixOutputStream.get_close_fd.gboolean
#COMMENT: a #GUnixOutputStream
#NAME: file
#PARENT: Gio.File.delete_file_finish.gboolean
#COMMENT: input #GFile
#NAME: ref
#PARENT: Gio.DBusPropertyInfo
#COMMENT: If @info is statically allocated does nothing. Otherwise increases
the reference count.
#NAME: DataStreamByteOrder
#PARENT: Gio
#COMMENT: #GDataStreamByteOrder is used to ensure proper endianness of streaming data sources
across various machine architectures.
#NAME: remove_supports_type
#PARENT: Gio.AppInfo.remove_supports_type
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: Proxy
#PARENT: Gio
#COMMENT: A #GProxy handles connecting to a remote host via a given type of
proxy server. It is implemented by the 'gio-proxy' extension point.
The extensions are named after their proxy protocol name. As an
example, a SOCKS5 proxy implementation can be retrieved with the
name 'socks5' using the function
g_io_extension_point_get_extension_by_name().
#NAME: file
#PARENT: Gio.FileIface.append_to_finish.append_to_finish.FileOutputStream
#COMMENT: input #GFile
#NAME: file
#PARENT: Gio.FileIface.poll_mountable_finish.poll_mountable_finish.gboolean
#COMMENT: input #GFile
#NAME: connection
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: The #GDBusConnection to use.
#NAME: get_anonymous
#PARENT: Gio.MountOperation.get_anonymous
#COMMENT: %TRUE if mount operation is anonymous.
#NAME: action
#PARENT: Gio.ActionInterface.get_parameter_type.get_parameter_type.GLib.VariantType
#COMMENT: a #GAction
#NAME: name
#PARENT: Gio.DBusProxy.new_for_bus_sync.DBusProxy
#COMMENT: A bus name (well-known or unique).
#NAME: arg_description
#PARENT: Gio.Application.add_main_option.none
#COMMENT: the placeholder to use for the extra argument
   parsed by the option in `--help` output
#NAME: signal_num
#PARENT: Gio.Subprocess.send_signal.none
#COMMENT: the signal number to send
#NAME: time_read
#PARENT: Gio.unix_mounts_get.UnixMountEntry
#COMMENT: guint64 to contain a timestamp, or %NULL
#NAME: new
#PARENT: Gio.ConverterInputStream
#COMMENT: Creates a new converter input stream for the @base_stream.
#NAME: get_device_path
#PARENT: Gio.UnixMountPoint
#COMMENT: Gets the device path for a unix mount point.
#NAME: object_path
#PARENT: Gio.DBusObjectManagerServer.unexport.gboolean
#COMMENT: An object path.
#NAME: arg
#PARENT: Gio.File.new_for_commandline_arg_and_cwd.File
#COMMENT: a command line string
#NAME: destroy_op_res
#PARENT: Gio.SimpleAsyncResult.set_op_res_gpointer.none
#COMMENT: a #GDestroyNotify function.
#NAME: client
#PARENT: Gio.SocketClient.connect_to_uri_async.none
#COMMENT: a #GSocketClient
#NAME: get_stream
#PARENT: Gio.DBusConnection.get_stream
#COMMENT: the stream used for IO
#NAME: self
#PARENT: Gio.SubprocessLauncher.take_stdin_fd.none
#COMMENT: a #GSubprocessLauncher
#NAME: callback
#PARENT: Gio.Subprocess.communicate_async.none
#COMMENT: Callback
#NAME: cancellable
#PARENT: Gio.DBusConnection.send_message_with_reply_sync.DBusMessage
#COMMENT: a #GCancellable or %NULL
#NAME: object_path
#PARENT: Gio.DBusConnection.call_sync.GLib.Variant
#COMMENT: path of remote object
#NAME: would_block
#PARENT: Gio.IOErrorEnum
#COMMENT: Operation would block.
#NAME: supports_files
#PARENT: Gio.AppInfo.supports_files
#COMMENT: %TRUE if the @appinfo supports files.
#NAME: set_message_type
#PARENT: Gio.DBusMessage
#COMMENT: Sets @message to be of @type.
#NAME: BusAcquiredCallback
#PARENT: Gio
#COMMENT: Invoked when a connection to a message bus has been obtained.
#NAME: new_for_address_sync
#PARENT: Gio.DBusConnection
#COMMENT: Synchronously connects and sets up a D-Bus client connection for
exchanging D-Bus messages with an endpoint specified by @address
which must be in the D-Bus address format.

This constructor can only be used to initiate client-side
connections - use g_dbus_connection_new_sync() if you need to act
as the server. In particular, @flags cannot contain the
%G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER or
%G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS flags.

This is a synchronous failable constructor. See
g_dbus_connection_new_for_address() for the asynchronous version.

If @observer is not %NULL it may be used to control the
authentication process.
#NAME: file
#PARENT: Gio.FileIface.open_readwrite_finish.open_readwrite_finish.FileIOStream
#COMMENT: input #GFile
#NAME: res
#PARENT: Gio.FileIface.read_finish.read_finish.FileInputStream
#COMMENT: a #GAsyncResult
#NAME: call_with_unix_fd_list_sync
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_sync
#COMMENT: %NULL if @error is set. Otherwise a #GVariant tuple with
return values. Free with g_variant_unref().
#NAME: label
#PARENT: Gio.Notification.add_button_with_target.none
#COMMENT: label of the button
#NAME: connection
#PARENT: Gio.bus_own_name_on_connection.guint
#COMMENT: a #GDBusConnection
#NAME: stream
#PARENT: Gio.OutputStream.vprintf.gboolean
#COMMENT: a #GOutputStream.
#NAME: appinfo
#PARENT: Gio.AppInfo.remove_supports_type.gboolean
#COMMENT: a #GAppInfo.
#NAME: no_network
#PARENT: Gio.DBusError
#COMMENT: No network access (probably ENETUNREACH on a socket).
#NAME: proxy_need_auth
#PARENT: Gio.IOErrorEnum
#COMMENT: Proxy server needs authentication. Since 2.26
#NAME: file
#PARENT: Gio.FileIface.get_basename.get_basename.utf8
#COMMENT: input #GFile
#NAME: get_password_save
#PARENT: Gio.MountOperation
#COMMENT: Gets the state of saving passwords for the mount operation.
#NAME: item
#PARENT: Gio.ListStore.append.none
#COMMENT: the new item
#NAME: drive
#PARENT: Gio.Drive.enumerate_identifiers.utf8
#COMMENT: a #GDrive
#NAME: cancellable
#PARENT: Gio.DBusConnection.new.none
#COMMENT: a #GCancellable or %NULL
#NAME: stream
#PARENT: Gio.OutputStreamClass.splice_async.splice_async.none
#COMMENT: a #GOutputStream.
#NAME: cancellable
#PARENT: Gio.TlsDatabaseClass.verify_chain_async.verify_chain_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: set_display_name_finish
#PARENT: Gio.File.set_display_name_finish
#COMMENT: a #GFile or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: buffer
#PARENT: Gio.InputStream.read_all.gboolean
#COMMENT: a buffer to
    read data into (which should be at least count bytes long).
#NAME: op
#PARENT: Gio.MountOperation.get_password.utf8
#COMMENT: a #GMountOperation.
#NAME: new
#PARENT: Gio.PropertyAction
#COMMENT: Creates a #GAction corresponding to the value of property
@property_name on @object.

The property must be existent and readable and writable (and not
construct-only).

This function takes a reference on @object and doesn't release it
until the action is destroyed.
#NAME: get_family
#PARENT: Gio.InetAddressMask
#COMMENT: Gets the #GSocketFamily of @mask's address
#NAME: enumerator
#PARENT: Gio.SocketAddressEnumerator.next.SocketAddress
#COMMENT: a #GSocketAddressEnumerator
#NAME: g_iface
#PARENT: Gio.DriveIface
#COMMENT: The parent interface.
#NAME: callback
#PARENT: Gio.FileIface.query_filesystem_info_async.query_filesystem_info_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: none
#PARENT: Gio.BusNameOwnerFlags
#COMMENT: No flags set.
#NAME: match_arg0_path
#PARENT: Gio.DBusSignalFlags
#COMMENT: Match first arguments that
contain an object path that is either equivalent to the given path,
or one of the paths is a subpath of the other.
#NAME: object_path
#PARENT: Gio.DBusConnection.register_subtree.guint
#COMMENT: the object path to register the subtree at
#NAME: result
#PARENT: Gio.FileIface.make_directory_finish.make_directory_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: action_group
#PARENT: Gio.ActionGroup.has_action.gboolean
#COMMENT: a #GActionGroup
#NAME: DBusServerFlags
#PARENT: Gio
#COMMENT: Flags used when creating a #GDBusServer.
#NAME: connection
#PARENT: Gio.TcpConnection.set_graceful_disconnect.none
#COMMENT: a #GTcpConnection
#NAME: has_prefix
#PARENT: Gio.File
#COMMENT: Checks whether @file has the prefix specified by @prefix.

In other words, if the names of initial elements of @file's
pathname match @prefix. Only full pathname elements are matched,
so a path like /foo is not considered a prefix of /foobar, only
of /foo/bar.

A #GFile is not a prefix of itself. If you want to check for
equality, use g_file_equal().

This call does no I/O, as it works purely on names. As such it can
sometimes return %FALSE even if @file is inside a @prefix (from a
filesystem point of view), because the prefix of @file is an alias
of @prefix.
#NAME: file
#PARENT: Gio.FileIface.create_async.create_async.none
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.Mount.guess_content_type_sync.utf8
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: value
#PARENT: Gio.DBusProxy.set_cached_property.none
#COMMENT: Value for the property or %NULL to remove it from the cache.
#NAME: result
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer_finish.TlsCertificate
#COMMENT: a #GAsyncResult.
#NAME: io_extension_point_register
#PARENT: Gio.io_extension_point_register
#COMMENT: the new #GIOExtensionPoint. This object is
   owned by GIO and should not be freed.
#NAME: dbus_gvariant_to_gvalue
#PARENT: Gio
#COMMENT: Converts a #GVariant to a #GValue. If @value is floating, it is consumed.

The rules specified in the g_dbus_gvalue_to_gvariant() function are
used - this function is essentially its reverse form.

The conversion never fails - a valid #GValue is always returned in
@out_gvalue.
#NAME: attribute
#PARENT: Gio.FileInfo.set_attribute_byte_string.none
#COMMENT: a file attribute key.
#NAME: register
#PARENT: Gio.Application
#COMMENT: Attempts registration of the application.

This is the point at which the application discovers if it is the
primary instance or merely acting as a remote for an already-existing
primary instance.  This is implemented by attempting to acquire the
application identifier as a unique bus name on the session bus using
GDBus.

If there is no application ID or if %G_APPLICATION_NON_UNIQUE was
given, then this process will always become the primary instance.

Due to the internal architecture of GDBus, method calls can be
dispatched at any time (even if a main loop is not running).  For
this reason, you must ensure that any object paths that you wish to
register are registered before calling this function.

If the application has already been registered then %TRUE is
returned with no work performed.

The #GApplication::startup signal is emitted if registration succeeds
and @application is the primary instance (including the non-unique
case).

In the event of an error (such as @cancellable being cancelled, or a
failure to connect to the session bus), %FALSE is returned and @error
is set appropriately.

Note: the return value of this function is not an indicator that this
instance is or is not the primary instance of the application.  See
g_application_get_is_remote() for that.
#NAME: mount
#PARENT: Gio.MountIface.get_default_location.get_default_location.File
#COMMENT: a #GMount.
#NAME: file
#PARENT: Gio.FileIface.replace_finish.replace_finish.FileOutputStream
#COMMENT: input #GFile
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.has_connection.gboolean
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: FILE_ATTRIBUTE_MOUNTABLE_CAN_START
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be started.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: get_file_for_uri
#PARENT: Gio.VfsClass.get_file_for_uri.get_file_for_uri
#COMMENT: a #GFile.
    Free the returned object with g_object_unref().
#NAME: tls_server_connection_new
#PARENT: Gio
#COMMENT: Creates a new #GTlsServerConnection wrapping @base_io_stream (which
must have pollable input and output streams).
#NAME: cancellable
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by.lookup_certificates_issued_by.TlsCertificate
#COMMENT: a #GCancellable, or %NULL
#NAME: TlsPasswordFlags
#PARENT: Gio
#COMMENT: Various flags for the password.
#NAME: res
#PARENT: Gio.AsyncResult.get_source_object.GObject.Object
#COMMENT: a #GAsyncResult
#NAME: equal
#PARENT: Gio.Icon
#COMMENT: Checks if two icons are equal.
#NAME: unknown_ca
#PARENT: Gio.TlsCertificateFlags
#COMMENT: The signing certificate authority is
  not known.
#NAME: user_data
#PARENT: Gio.File.create_async.none
#COMMENT: the data to pass to callback function
#NAME: get_can_release
#PARENT: Gio.Permission
#COMMENT: Gets the value of the 'can-release' property.  This property is %TRUE
if it is generally possible to release the permission by calling
g_permission_release().
#NAME: application_name
#PARENT: Gio.app_info_create_from_commandline.AppInfo
#COMMENT: the application name, or %NULL to use @commandline
#NAME: eject_with_operation
#PARENT: Gio.Volume
#COMMENT: Ejects a volume. This is an asynchronous operation, and is
finished by calling g_volume_eject_with_operation_finish() with the @volume
and #GAsyncResult data returned in the @callback.
#NAME: source_tag
#PARENT: Gio.SimpleAsyncResult.is_valid.gboolean
#COMMENT: the asynchronous function.
#NAME: next_file
#PARENT: Gio.FileEnumerator.next_file
#COMMENT: A #GFileInfo or %NULL on error
   or end of enumerator.  Free the returned object with
   g_object_unref() when no longer needed.
#NAME: query_default_handler
#PARENT: Gio.File
#COMMENT: Returns the #GAppInfo that is registered as the default
application to handle the file specified by @file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: is_mutable
#PARENT: Gio.MenuModel
#COMMENT: Queries if @model is mutable.

An immutable #GMenuModel will never emit the #GMenuModel::items-changed
signal. Consumers of the model may make optimisations accordingly.
#NAME: file
#PARENT: Gio.FileIface.delete_file_finish.delete_file_finish.gboolean
#COMMENT: input #GFile
#NAME: enabled
#PARENT: Gio.ActionGroup.query_action.gboolean
#COMMENT: if the action is presently enabled
#NAME: callback
#PARENT: Gio.OutputStream.splice_async.none
#COMMENT: a #GAsyncReadyCallback.
#NAME: drive
#PARENT: Gio.Drive.get_symbolic_icon.Icon
#COMMENT: a #GDrive.
#NAME: drive
#PARENT: Gio.Drive.get_start_stop_type.DriveStartStopType
#COMMENT: a #GDrive.
#NAME: MountUnmountFlags
#PARENT: Gio
#COMMENT: Flags used when an unmounting a mount.
#NAME: vprintf
#PARENT: Gio.OutputStream.vprintf
#COMMENT: %TRUE on success, %FALSE if there was an error
#NAME: unix_mount_guess_name
#PARENT: Gio.unix_mount_guess_name
#COMMENT: A newly allocated string that must
    be freed with g_free()
#NAME: icon
#PARENT: Gio.MenuItem.set_icon.none
#COMMENT: a #GIcon, or %NULL
#NAME: callback
#PARENT: Gio.UnixConnection.send_credentials_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: AppInfoIface
#PARENT: Gio
#COMMENT: Application Information interface, for operating system portability.
#NAME: _register
#PARENT: Gio.Resource
#COMMENT: Registers the resource with the process-global set of resources.
Once a resource is registered the files in it can be accessed
with the global resource lookup functions like g_resources_lookup_data().
#NAME: cancellable
#PARENT: Gio.TlsDatabase.verify_chain_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: flags
#PARENT: Gio.TlsDatabaseClass.verify_chain_async.verify_chain_async.none
#COMMENT: additional verify flags
#NAME: realloc_function
#PARENT: Gio.MemoryOutputStream.new.OutputStream
#COMMENT: a function with realloc() semantics (like g_realloc())
    to be called when @data needs to be grown, or %NULL
#NAME: get_size
#PARENT: Gio.SocketControlMessage
#COMMENT: Returns the space required for the control message, not including
headers or alignment.
#NAME: resource_error_quark
#PARENT: Gio.resource_error_quark
#COMMENT: a #GQuark
#NAME: portal
#PARENT: Gio.NetworkConnectivity
#COMMENT: The host is behind a captive portal and
  cannot reach the full Internet.
#NAME: new_sync
#PARENT: Gio.DBusProxy.new_sync
#COMMENT: A #GDBusProxy or %NULL if error is set. Free with g_object_unref().
#NAME: stream
#PARENT: Gio.PollableOutputStream.create_source.GLib.Source
#COMMENT: a #GPollableOutputStream.
#NAME: hostname
#PARENT: Gio.Resolver.lookup_by_name.InetAddress
#COMMENT: the hostname to look up
#NAME: cancellable
#PARENT: Gio.File.enumerate_children.FileEnumerator
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: none
#PARENT: Gio.MountMountFlags
#COMMENT: No flags set.
#NAME: has_pending
#PARENT: Gio.IOStream
#COMMENT: Checks if a stream has pending actions.
#NAME: get_property
#PARENT: Gio.DBusInterfaceVTable
#COMMENT: Function for getting a property.
#NAME: name
#PARENT: Gio.ApplicationCommandLine.getenv.utf8
#COMMENT: the environment variable to get
#NAME: result
#PARENT: Gio.File.start_mountable_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: dup
#PARENT: Gio.File
#COMMENT: Duplicates a #GFile handle. This operation does not duplicate
the actual file or directory represented by the #GFile; see
g_file_copy() if attempting to copy a file.

This call does no blocking I/O.
#NAME: get_sender
#PARENT: Gio.DBusMessage
#COMMENT: Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_SENDER header field.
#NAME: get_user_data
#PARENT: Gio.AsyncResult
#COMMENT: Gets the user data from a #GAsyncResult.
#NAME: user_data
#PARENT: Gio.OutputStream.flush_async.none
#COMMENT: the data to pass to callback function
#NAME: set_symlink_target
#PARENT: Gio.FileInfo
#COMMENT: Sets the %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET attribute in the file info
to the given symlink target.
#NAME: result
#PARENT: Gio.DriveIface.start_finish.start_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: cancellable
#PARENT: Gio.FileIface.set_attribute.set_attribute.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_icon
#PARENT: Gio.AppInfoIface.get_icon.get_icon
#COMMENT: the default #GIcon for @appinfo or %NULL
if there is no default icon.
#NAME: legacy_propagate_error
#PARENT: Gio.AsyncResult.legacy_propagate_error
#COMMENT: %TRUE if @error is has been filled in with an error from
  @res, %FALSE if not.
#NAME: get_is_mc_link_local
#PARENT: Gio.InetAddress.get_is_mc_link_local
#COMMENT: %TRUE if @address is a link-local multicast address.
#NAME: user_data
#PARENT: Gio.BufferedInputStream.fill_async.none
#COMMENT: a #gpointer
#NAME: result
#PARENT: Gio.InputStream.close_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: replace
#PARENT: Gio.File.replace
#COMMENT: a #GFileOutputStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: cancellable
#PARENT: Gio.File.set_attribute_uint64.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_certificate_type
#PARENT: Gio.TlsBackend.get_certificate_type
#COMMENT: the #GType of @backend's #GTlsCertificate
  implementation.
#NAME: interface_name
#PARENT: Gio.DBusSignalCallback.none
#COMMENT: The name of the interface.
#NAME: get_extensions
#PARENT: Gio.IOExtensionPoint
#COMMENT: Gets a list of all extensions that implement this extension point.
The list is sorted by priority, beginning with the highest priority.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.launch_uris.launch_uris.gboolean
#COMMENT: a #GAppInfo
#NAME: is_cancelled
#PARENT: Gio.Cancellable
#COMMENT: Checks if a cancellable job has been cancelled.
#NAME: connection
#PARENT: Gio.DBusConnection.call.none
#COMMENT: a #GDBusConnection
#NAME: cancellable
#PARENT: Gio.FileIface.read_fn.read_fn.FileInputStream
#COMMENT: a #GCancellable
#NAME: key
#PARENT: Gio.Settings.get_strv.utf8
#COMMENT: the key to get the value for
#NAME: connection
#PARENT: Gio.BusAcquiredCallback.none
#COMMENT: The #GDBusConnection to a message bus.
#NAME: get_context
#PARENT: Gio.Task.get_context
#COMMENT: @task's #GMainContext
#NAME: length
#PARENT: Gio.File.load_partial_contents_finish.gboolean
#COMMENT: a location to place the length of the contents of the file,
    or %NULL if the length is not needed
#NAME: query_info_finish
#PARENT: Gio.FileOutputStreamClass.query_info_finish.query_info_finish
#COMMENT: A #GFileInfo for the finished query.
#NAME: truncate
#PARENT: Gio.Seekable.truncate
#COMMENT: %TRUE if successful. If an error
    has occurred, this function will return %FALSE and set @error
    appropriately if present.
#NAME: get_credentials
#PARENT: Gio.UnixCredentialsMessage.get_credentials
#COMMENT: A #GCredentials instance. Do not free, it is owned by @message.
#NAME: context
#PARENT: Gio.AppLaunchContext.launch_failed.none
#COMMENT: a #GAppLaunchContext.
#NAME: get_default
#PARENT: Gio.Application.get_default
#COMMENT: the default application for this process, or %NULL
#NAME: user_data
#PARENT: Gio.CancellableSourceFunc.gboolean
#COMMENT: data passed in by the user.
#NAME: address
#PARENT: Gio.InetAddress.get_is_mc_global.gboolean
#COMMENT: a #GInetAddress
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.is_loopback.gboolean
#COMMENT: a #GUnixMountPoint.
#NAME: key
#PARENT: Gio.Settings.set_flags.gboolean
#COMMENT: a key, within @settings
#NAME: num_messages
#PARENT: Gio.Socket.receive_message.gssize
#COMMENT: a pointer which will be filled with the number of
   elements in @messages, or %NULL
#NAME: default_port
#PARENT: Gio.SocketClient.connect_to_uri.SocketConnection
#COMMENT: the default port to connect to
#NAME: g_iface
#PARENT: Gio.FileIface
#COMMENT: The parent interface.
#NAME: info
#PARENT: Gio.DBusNodeInfo.lookup_interface.DBusInterfaceInfo
#COMMENT: A #GDBusNodeInfo.
#NAME: cancellable
#PARENT: Gio.FileIface.query_filesystem_info.query_filesystem_info.FileInfo
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_objects
#PARENT: Gio.DBusObjectManager
#COMMENT: Gets all #GDBusObject objects known to @manager.
#NAME: to_bytes
#PARENT: Gio.InetAddress
#COMMENT: Gets the raw binary address data from @address.
#NAME: code
#PARENT: Gio.DBusMethodInvocation.return_error_valist.none
#COMMENT: The error code.
#NAME: abstract_names_supported
#PARENT: Gio.UnixSocketAddress.abstract_names_supported
#COMMENT: %TRUE if supported, %FALSE otherwise
#NAME: property_read_only
#PARENT: Gio.DBusError
#COMMENT: Property you tried to set is read-only. Since 2.42
#NAME: stream
#PARENT: Gio.BufferedInputStream.read_byte.gint
#COMMENT: a #GBufferedInputStream
#NAME: ask_password_finish
#PARENT: Gio.TlsInteractionClass.ask_password_finish.ask_password_finish
#COMMENT: The status of the ask password interaction.
#NAME: file
#PARENT: Gio.File.get_child_for_display_name.File
#COMMENT: input #GFile
#NAME: append_to_finish
#PARENT: Gio.FileIface.append_to_finish.append_to_finish
#COMMENT: a valid #GFileOutputStream
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: get_cwd
#PARENT: Gio.ApplicationCommandLine.get_cwd
#COMMENT: the current directory, or %NULL
#NAME: lookup_by_name
#PARENT: Gio.Resolver.lookup_by_name
#COMMENT: a non-empty #GList
of #GInetAddress, or %NULL on error. You
must unref each of the addresses and free the list when you are
done with it. (You can use g_resolver_free_addresses() to do this.)
#NAME: cancellable
#PARENT: Gio.Volume.eject.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: connect
#PARENT: Gio.SocketClient
#COMMENT: Tries to resolve the @connectable and make a network connection to it.

Upon a successful connection, a new #GSocketConnection is constructed
and returned.  The caller owns this new object and must drop their
reference to it when finished with it.

The type of the #GSocketConnection object returned depends on the type of
the underlying socket that is used. For instance, for a TCP/IP connection
it will be a #GTcpConnection.

The socket created will be the same family as the address that the
@connectable resolves to, unless family is set with g_socket_client_set_family()
or indirectly via g_socket_client_set_local_address(). The socket type
defaults to %G_SOCKET_TYPE_STREAM but can be set with
g_socket_client_set_socket_type().

If a local address is specified with g_socket_client_set_local_address() the
socket will be bound to this address before connecting.
#NAME: query_file_type
#PARENT: Gio.File.query_file_type
#COMMENT: The #GFileType of the file and #G_FILE_TYPE_UNKNOWN
    if the file does not exist
#NAME: write_all
#PARENT: Gio.OutputStream
#COMMENT: Tries to write @count bytes from @buffer into the stream. Will block
during the operation.

This function is similar to g_output_stream_write(), except it tries to
write as many bytes as requested, only stopping on an error.

On a successful write of @count bytes, %TRUE is returned, and @bytes_written
is set to @count.

If there is an error during the operation %FALSE is returned and @error
is set to indicate the error status.

As a special exception to the normal conventions for functions that
use #GError, if this function returns %FALSE (and sets @error) then
@bytes_written will be set to the number of bytes that were
successfully written before the error was encountered.  This
functionality is only available from C.  If you need it from another
language then you must write your own loop around
g_output_stream_write().
#NAME: get_attribute_type
#PARENT: Gio.FileInfo.get_attribute_type
#COMMENT: a #GFileAttributeType for the given @attribute, or
%G_FILE_ATTRIBUTE_TYPE_INVALID if the key is not set.
#NAME: level
#PARENT: Gio.Socket.get_option.gboolean
#COMMENT: the "API level" of the option (eg, `SOL_SOCKET`)
#NAME: spawn_child_signaled
#PARENT: Gio.DBusError
#COMMENT: While starting a new process, the child exited on a signal.
#NAME: read_byte
#PARENT: Gio.DataInputStream.read_byte
#COMMENT: an unsigned 8-bit/1-byte value read from the @stream or %0
if an error occurred.
#NAME: set_header
#PARENT: Gio.DBusMessage
#COMMENT: Sets a header field on @message.

If @value is floating, @message assumes ownership of @value.
#NAME: set_display_name
#PARENT: Gio.FileInfo
#COMMENT: Sets the display name for the current #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME.
#NAME: choice
#PARENT: Gio.MountOperation
#COMMENT: The index of the user's choice when a question is asked during the
mount operation. See the #GMountOperation::ask-question signal.
#NAME: stream
#PARENT: Gio.DataOutputStream.put_int32.gboolean
#COMMENT: a #GDataOutputStream.
#NAME: user_data
#PARENT: Gio.DesktopAppLaunchCallback.none
#COMMENT: User data
#NAME: new_with_backend
#PARENT: Gio.Settings
#COMMENT: Creates a new #GSettings object with the schema specified by
@schema_id and a given #GSettingsBackend.

Creating a #GSettings object with a different backend allows accessing
settings from a database other than the usual one. For example, it may make
sense to pass a backend corresponding to the "defaults" settings database on
the system to get a settings object that modifies the system default
settings instead of the settings for this user.
#NAME: bytes_written
#PARENT: Gio.Converter.convert.ConverterResult
#COMMENT: will be set to the number of bytes written to @outbuf on success
#NAME: cancellable
#PARENT: Gio.Initable.new.GObject.Object
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: stream
#PARENT: Gio.OutputStream.write_finish.gssize
#COMMENT: a #GOutputStream.
#NAME: is-mc-link-local
#PARENT: Gio.InetAddress
#COMMENT: Whether this is a link-local multicast address.
See g_inet_address_get_is_mc_link_local().
#NAME: set_attribute_status
#PARENT: Gio.FileInfo.set_attribute_status
#COMMENT: %TRUE if the status was changed, %FALSE if the key was not set.
#NAME: default_port
#PARENT: Gio.NetworkAddress.parse.SocketConnectable
#COMMENT: the default port if not in @host_and_port
#NAME: cancellable
#PARENT: Gio.SocketAddressEnumerator.next.SocketAddress
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: dbus_is_unique_name
#PARENT: Gio.dbus_is_unique_name
#COMMENT: %TRUE if valid, %FALSE otherwise.
#NAME: uris
#PARENT: Gio.AppInfo.launch_uris.gboolean
#COMMENT: a #GList containing URIs to launch.
#NAME: user_data
#PARENT: Gio.DBusInterfaceGetPropertyFunc.GLib.Variant
#COMMENT: The @user_data #gpointer passed to g_dbus_connection_register_object().
#NAME: domain
#PARENT: Gio.Resolver.lookup_service.SrvTarget
#COMMENT: the DNS domain to look up the service in
#NAME: info
#PARENT: Gio.File.set_attributes_from_info.gboolean
#COMMENT: a #GFileInfo
#NAME: is_remote_error
#PARENT: Gio.DBusError.is_remote_error
#COMMENT: %TRUE if @error represents an error from a remote peer,
%FALSE otherwise.
#NAME: flush
#PARENT: Gio.OutputStream.flush
#COMMENT: %TRUE on success, %FALSE on error
#NAME: interface_
#PARENT: Gio.DBusObjectSkeleton.remove_interface.none
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: num_unix_fds
#PARENT: Gio.DBusMessageHeaderField
#COMMENT: The number of UNIX file descriptors that accompany the message.
#NAME: type
#PARENT: Gio.FileInfo.get_attribute_data.gboolean
#COMMENT: return location for the attribute type, or %NULL
#NAME: connect_to_host
#PARENT: Gio.SocketClient
#COMMENT: This is a helper function for g_socket_client_connect().

Attempts to create a TCP connection to the named host.

@host_and_port may be in any of a number of recognized formats; an IPv6
address, an IPv4 address, or a domain name (in which case a DNS
lookup is performed).  Quoting with [] is supported for all address
types.  A port override may be specified in the usual way with a
colon.  Ports may be given as decimal numbers or symbolic names (in
which case an /etc/services lookup is performed).

If no port override is given in @host_and_port then @default_port will be
used as the port number to connect to.

In general, @host_and_port is expected to be provided by the user (allowing
them to give the hostname, and a port override if necessary) and
@default_port is expected to be provided by the application.

In the case that an IP address is given, a single connection
attempt is made.  In the case that a name is given, multiple
connection attempts may be made, in turn and according to the
number of address records in DNS, until a connection succeeds.

Upon a successful connection, a new #GSocketConnection is constructed
and returned.  The caller owns this new object and must drop their
reference to it when finished with it.

In the event of any failure (DNS error, service not found, no hosts
connectable) %NULL is returned and @error (if non-%NULL) is set
accordingly.
#NAME: DBusInterfaceGetPropertyFunc
#PARENT: Gio
#COMMENT: The type of the @get_property function in #GDBusInterfaceVTable.
#NAME: make_backup
#PARENT: Gio.FileIface.replace.replace.FileOutputStream
#COMMENT: %TRUE if a backup should be created
#NAME: put_string
#PARENT: Gio.DataOutputStream.put_string
#COMMENT: %TRUE if @string was successfully added to the @stream.
#NAME: stream
#PARENT: Gio.BufferedInputStreamClass.fill_finish.fill_finish.gssize
#COMMENT: a #GBufferedInputStream
#NAME: get_is_any
#PARENT: Gio.InetAddress
#COMMENT: Tests whether @address is the "any" address for its family.
#NAME: object_type
#PARENT: Gio.initable_newv.GObject.Object
#COMMENT: a #GType supporting #GInitable.
#NAME: path
#PARENT: Gio.File.new_for_path.File
#COMMENT: a string containing a relative or absolute path.
    The string must be encoded in the glib filename encoding.
#NAME: action_name
#PARENT: Gio.DesktopAppInfo.get_action_name.utf8
#COMMENT: the name of the action as from
  g_desktop_app_info_list_actions()
#NAME: n_entries
#PARENT: Gio.ActionMap.add_action_entries.none
#COMMENT: the length of @entries, or -1 if @entries is %NULL-terminated
#NAME: priority
#PARENT: Gio.SrvTarget.new.SrvTarget
#COMMENT: the target's priority
#NAME: file
#PARENT: Gio.File.get_child.File
#COMMENT: input #GFile
#NAME: eject_finish
#PARENT: Gio.Drive
#COMMENT: Finishes ejecting a drive.
#NAME: string
#PARENT: Gio.FileAttributeType
#COMMENT: a null terminated UTF8 string.
#NAME: unref
#PARENT: Gio.SettingsSchemaSource
#COMMENT: Decrease the reference count of @source, possibly freeing it.
#NAME: unix_mount_guess_can_eject
#PARENT: Gio.unix_mount_guess_can_eject
#COMMENT: %TRUE if @mount_entry is deemed to be ejectable.
#NAME: stderr_buf
#PARENT: Gio.Subprocess.communicate.gboolean
#COMMENT: data read from the subprocess stderr
#NAME: sender
#PARENT: Gio.DBusInterfaceGetPropertyFunc.GLib.Variant
#COMMENT: The unique bus name of the remote caller.
#NAME: remote
#PARENT: Gio.RemoteActionGroupInterface.change_action_state_full.change_action_state_full.none
#COMMENT: a #GRemoteActionGroup
#NAME: callback
#PARENT: Gio.TlsConnectionClass.handshake_async.handshake_async.none
#COMMENT: callback to call when the handshake is complete
#NAME: steal_data
#PARENT: Gio.MemoryOutputStream
#COMMENT: Gets any loaded data from the @ostream. Ownership of the data
is transferred to the caller; when no longer needed it must be
freed using the free function set in @ostream's
#GMemoryOutputStream:destroy-function property.

@ostream must be closed before calling this function.
#NAME: search_string
#PARENT: Gio.DesktopAppInfo.search.utf8
#COMMENT: the search string to use
#NAME: message
#PARENT: Gio.DBusMessage.set_error_name.none
#COMMENT: A #GDBusMessage.
#NAME: new
#PARENT: Gio.FileAttributeInfoList.new
#COMMENT: a #GFileAttributeInfoList.
#NAME: cancellable
#PARENT: Gio.Cancellable.connect.gulong
#COMMENT: A #GCancellable.
#NAME: query_exists
#PARENT: Gio.File.query_exists
#COMMENT: %TRUE if the file exists (and can be detected without error),
    %FALSE otherwise (or if cancelled).
#NAME: uuid
#PARENT: Gio.VolumeMonitor.get_volume_for_uuid.Volume
#COMMENT: the UUID to look for
#NAME: new_for_dbus_error
#PARENT: Gio.DBusError.new_for_dbus_error
#COMMENT: An allocated #GError. Free with g_error_free().
#NAME: get_default_timeout
#PARENT: Gio.DBusProxy
#COMMENT: Gets the timeout to use if -1 (specifying default timeout) is
passed as @timeout_msec in the g_dbus_proxy_call() and
g_dbus_proxy_call_sync() functions.

See the #GDBusProxy:g-default-timeout property for more details.
#NAME: resource_error_quark
#PARENT: Gio
#COMMENT: Gets the #GResource Error Quark.
#NAME: Resource
#PARENT: Gio
#COMMENT: Applications and libraries often contain binary or textual data that is
really part of the application, rather than user data. For instance
#GtkBuilder .ui files, splashscreen images, GMenu markup xml, CSS files,
icons, etc. These are often shipped as files in `$datadir/appname`, or
manually included as literal strings in the code.

The #GResource API and the [glib-compile-resources][glib-compile-resources] program
provide a convenient and efficient alternative to this which has some nice properties. You
maintain the files as normal files, so its easy to edit them, but during the build the files
are combined into a binary bundle that is linked into the executable. This means that loading
the resource files are efficient (as they are already in memory, shared with other instances) and
simple (no need to check for things like I/O errors or locate the files in the filesystem). It
also makes it easier to create relocatable applications.

Resource files can also be marked as compressed. Such files will be included in the resource bundle
in a compressed form, but will be automatically uncompressed when the resource is used. This
is very useful e.g. for larger text files that are parsed once (or rarely) and then thrown away.

Resource files can also be marked to be preprocessed, by setting the value of the
`preprocess` attribute to a comma-separated list of preprocessing options.
The only options currently supported are:

`xml-stripblanks` which will use the xmllint command
to strip ignorable whitespace from the xml file. For this to work,
the `XMLLINT` environment variable must be set to the full path to
the xmllint executable, or xmllint must be in the `PATH`; otherwise
the preprocessing step is skipped.

`to-pixdata` which will use the gdk-pixbuf-pixdata command to convert
images to the GdkPixdata format, which allows you to create pixbufs directly using the data inside
the resource file, rather than an (uncompressed) copy if it. For this, the gdk-pixbuf-pixdata
program must be in the PATH, or the `GDK_PIXBUF_PIXDATA` environment variable must be
set to the full path to the gdk-pixbuf-pixdata executable; otherwise the resource compiler will
abort.

Resource bundles are created by the [glib-compile-resources][glib-compile-resources] program
which takes an xml file that describes the bundle, and a set of files that the xml references. These
are combined into a binary resource bundle.

An example resource description:
|[
<?xml version="1.0" encoding="UTF-8"?>
<gresources>
  <gresource prefix="/org/gtk/Example">
    <file>data/splashscreen.png</file>
    <file compressed="true">dialog.ui</file>
    <file preprocess="xml-stripblanks">menumarkup.xml</file>
  </gresource>
</gresources>
]|

This will create a resource bundle with the following files:
|[
/org/gtk/Example/data/splashscreen.png
/org/gtk/Example/dialog.ui
/org/gtk/Example/menumarkup.xml
]|

Note that all resources in the process share the same namespace, so use java-style
path prefixes (like in the above example) to avoid conflicts.

You can then use [glib-compile-resources][glib-compile-resources] to compile the xml to a
binary bundle that you can load with g_resource_load(). However, its more common to use the --generate-source and
--generate-header arguments to create a source file and header to link directly into your application.

Once a #GResource has been created and registered all the data in it can be accessed globally in the process by
using API calls like g_resources_open_stream() to stream the data or g_resources_lookup_data() to get a direct pointer
to the data. You can also use uris like "resource:///org/gtk/Example/data/splashscreen.png" with #GFile to access
the resource data.

There are two forms of the generated source, the default version uses the compiler support for constructor
and destructor functions (where available) to automatically create and register the #GResource on startup
or library load time. If you pass --manual-register two functions to register/unregister the resource is instead
created. This requires an explicit initialization call in your application/library, but it works on all platforms,
even on the minor ones where this is not available. (Constructor support is available for at least Win32, MacOS and Linux.)

Note that resource data can point directly into the data segment of e.g. a library, so if you are unloading libraries
during runtime you need to be very careful with keeping around pointers to data from a resource, as this goes away
when the library is unloaded. However, in practice this is not generally a problem, since most resource accesses
is for your own resources, and resource data is often used once, during parsing, and then released.
#NAME: cancellable
#PARENT: Gio.Mount.eject_with_operation.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: ref
#PARENT: Gio.SettingsSchemaKey.ref
#COMMENT: a new reference to @key
#NAME: PROXY_EXTENSION_POINT_NAME
#PARENT: Gio
#COMMENT: Extension point for proxy functionality.
See [Extending GIO][extending-gio].
#NAME: get_enum
#PARENT: Gio.Settings
#COMMENT: Gets the value that is stored in @settings for @key and converts it
to the enum value that it represents.

In order to use this function the type of the value must be a string
and it must be marked in the schema file as an enumerated type.

It is a programmer error to give a @key that isn't contained in the
schema for @settings or is not marked as an enumerated type.

If the value stored in the configuration database is not a valid
value for the enumerated type then this function will return the
default value.
#NAME: volume
#PARENT: Gio.VolumeIface.get_drive.get_drive.Drive
#COMMENT: a #GVolume
#NAME: serialize
#PARENT: Gio.Icon
#COMMENT: Serializes a #GIcon into a #GVariant. An equivalent #GIcon can be retrieved
back by calling g_icon_deserialize() on the returned value.
As serialization will avoid using raw icon data when possible, it only
makes sense to transfer the #GVariant between processes on the same machine,
(as opposed to over the network), and within the same file system namespace.
#NAME: result
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle_finish.lookup_certificate_for_handle_finish.TlsCertificate
#COMMENT: a #GAsyncResult.
#NAME: flags
#PARENT: Gio.TlsInteraction.request_certificate_async.none
#COMMENT: flags providing more information about the request
#NAME: connection
#PARENT: Gio.DBusInterfaceSetPropertyFunc.gboolean
#COMMENT: A #GDBusConnection.
#NAME: model
#PARENT: Gio.MenuItem.set_link.none
#COMMENT: the #GMenuModel to link to (or %NULL to unset)
#NAME: new_for_bus_finish
#PARENT: Gio.DBusProxy.new_for_bus_finish
#COMMENT: A #GDBusProxy or %NULL if @error is set. Free with g_object_unref().
#NAME: matcher
#PARENT: Gio.FileAttributeMatcher.matches_only.gboolean
#COMMENT: a #GFileAttributeMatcher.
#NAME: callback
#PARENT: Gio.File.unmount_mountable_with_operation.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: new
#PARENT: Gio.DBusAuthObserver
#COMMENT: Creates a new #GDBusAuthObserver object.
#NAME: launch_context
#PARENT: Gio.DesktopAppInfo.launch_action.none
#COMMENT: a #GAppLaunchContext
#NAME: ostream
#PARENT: Gio.MemoryOutputStream.get_data.gpointer
#COMMENT: a #GMemoryOutputStream
#NAME: fd_list
#PARENT: Gio.DBusProxy.call_with_unix_fd_list.none
#COMMENT: A #GUnixFDList or %NULL.
#NAME: event
#PARENT: Gio.SocketClient
#COMMENT: Emitted when @client's activity on @connectable changes state.
Among other things, this can be used to provide progress
information about a network connection in the UI. The meanings of
the different @event values are as follows:

- %G_SOCKET_CLIENT_RESOLVING: @client is about to look up @connectable
  in DNS. @connection will be %NULL.

- %G_SOCKET_CLIENT_RESOLVED:  @client has successfully resolved
  @connectable in DNS. @connection will be %NULL.

- %G_SOCKET_CLIENT_CONNECTING: @client is about to make a connection
  to a remote host; either a proxy server or the destination server
  itself. @connection is the #GSocketConnection, which is not yet
  connected.  Since GLib 2.40, you can access the remote
  address via g_socket_connection_get_remote_address().

- %G_SOCKET_CLIENT_CONNECTED: @client has successfully connected
  to a remote host. @connection is the connected #GSocketConnection.

- %G_SOCKET_CLIENT_PROXY_NEGOTIATING: @client is about to negotiate
  with a proxy to get it to connect to @connectable. @connection is
  the #GSocketConnection to the proxy server.

- %G_SOCKET_CLIENT_PROXY_NEGOTIATED: @client has negotiated a
  connection to @connectable through a proxy server. @connection is
  the stream returned from g_proxy_connect(), which may or may not
  be a #GSocketConnection.

- %G_SOCKET_CLIENT_TLS_HANDSHAKING: @client is about to begin a TLS
  handshake. @connection is a #GTlsClientConnection.

- %G_SOCKET_CLIENT_TLS_HANDSHAKED: @client has successfully completed
  the TLS handshake. @connection is a #GTlsClientConnection.

- %G_SOCKET_CLIENT_COMPLETE: @client has either successfully connected
  to @connectable (in which case @connection is the #GSocketConnection
  that it will be returning to the caller) or has failed (in which
  case @connection is %NULL and the client is about to return an error).

Each event except %G_SOCKET_CLIENT_COMPLETE may be emitted
multiple times (or not at all) for a given connectable (in
particular, if @client ends up attempting to connect to more than
one address). However, if @client emits the #GSocketClient::event
signal at all for a given connectable, that it will always emit
it with %G_SOCKET_CLIENT_COMPLETE when it is done.

Note that there may be additional #GSocketClientEvent values in
the future; unrecognized @event values should be ignored.
#NAME: FILE_ATTRIBUTE_UNIX_MODE
#PARENT: Gio
#COMMENT: A key in the "unix" namespace for getting the mode of the file
(e.g. whether the file is a regular file, symlink, etc). See lstat()
documentation. This attribute is only available for UNIX file systems.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: connection
#PARENT: Gio.DBusConnection.unexport_menu_model.none
#COMMENT: a #GDBusConnection
#NAME: get_object_path
#PARENT: Gio.DBusProxy.get_object_path
#COMMENT: A string owned by @proxy. Do not free.
#NAME: emblemed
#PARENT: Gio.EmblemedIcon.get_icon.Icon
#COMMENT: a #GEmblemedIcon
#NAME: header_field
#PARENT: Gio.DBusMessage.get_header.GLib.Variant
#COMMENT: A 8-bit unsigned integer (typically a value from the #GDBusMessageHeaderField enumeration)
#NAME: skip
#PARENT: Gio.InputStream.skip
#COMMENT: Number of bytes skipped, or -1 on error
#NAME: FILE_ATTRIBUTE_FILESYSTEM_FREE
#PARENT: Gio
#COMMENT: A key in the "filesystem" namespace for getting the number of bytes of free space left on the
file system. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_UINT64.
#NAME: description
#PARENT: Gio.TlsPassword.set_description.none
#COMMENT: The description of the password
#NAME: file
#PARENT: Gio.FileIface.trash_async.trash_async.none
#COMMENT: input #GFile
#NAME: error
#PARENT: Gio.DBusInterfaceSetPropertyFunc.gboolean
#COMMENT: Return location for error.
#NAME: new
#PARENT: Gio.SimplePermission
#COMMENT: Creates a new #GPermission instance that represents an action that is
either always or never allowed.
#NAME: result
#PARENT: Gio.FileIface.unmount_mountable_finish.unmount_mountable_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: to_charset
#PARENT: Gio.CharsetConverter.new.CharsetConverter
#COMMENT: destination charset
#NAME: DBusObjectManagerServer
#PARENT: Gio
#COMMENT: #GDBusObjectManagerServer is used to export #GDBusObject instances using
the standardized
[org.freedesktop.DBus.ObjectManager](http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager)
interface. For example, remote D-Bus clients can get all objects
and properties in a single call. Additionally, any change in the
object hierarchy is broadcast using signals. This means that D-Bus
clients can keep caches up to date by only listening to D-Bus
signals.

See #GDBusObjectManagerClient for the client-side code that is
intended to be used with #GDBusObjectManagerServer or any D-Bus
object implementing the org.freedesktop.DBus.ObjectManager
interface.
#NAME: stream
#PARENT: Gio.pollable_stream_read.gssize
#COMMENT: a #GInputStream
#NAME: manager
#PARENT: Gio.DBusObjectManager.get_object.DBusObject
#COMMENT: A #GDBusObjectManager.
#NAME: set_native
#PARENT: Gio.Credentials
#COMMENT: Copies the native credentials of type @native_type from @native
into @credentials.

It is a programming error (which will cause an warning to be
logged) to use this method if there is no #GCredentials support for
the OS or if @native_type isn't supported by the OS.
#NAME: buffer
#PARENT: Gio.InputStream.read_all_async.none
#COMMENT: a buffer to
    read data into (which should be at least count bytes long)
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.return_value_with_unix_fd_list.none
#COMMENT: A #GDBusMethodInvocation.
#NAME: peer_cert
#PARENT: Gio.TlsConnection.emit_accept_certificate.gboolean
#COMMENT: the peer's #GTlsCertificate
#NAME: g-authorize-method
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Emitted when a method is invoked by a remote caller and used to
determine if the method call is authorized.

Note that this signal is emitted in a thread dedicated to
handling the method call so handlers are allowed to perform
blocking IO. This means that it is appropriate to call e.g.
[polkit_authority_check_authorization_sync()](http://hal.freedesktop.org/docs/polkit/PolkitAuthority.html#polkit-authority-check-authorization-sync)
with the
[POLKIT_CHECK_AUTHORIZATION_FLAGS_ALLOW_USER_INTERACTION](http://hal.freedesktop.org/docs/polkit/PolkitAuthority.html#POLKIT-CHECK-AUTHORIZATION-FLAGS-ALLOW-USER-INTERACTION:CAPS)
flag set.

If %FALSE is returned then no further handlers are run and the
signal handler must take a reference to @invocation and finish
handling the call (e.g. return an error via
g_dbus_method_invocation_return_error()).

Otherwise, if %TRUE is returned, signal emission continues. If no
handlers return %FALSE, then the method is dispatched. If
@interface has an enclosing #GDBusObjectSkeleton, then the
#GDBusObjectSkeleton::authorize-method signal handlers run before
the handlers for this signal.

The default class handler just returns %TRUE.

Please note that the common case is optimized: if no signals
handlers are connected and the default class handler isn't
overridden (for both @interface and the enclosing
#GDBusObjectSkeleton, if any) and #GDBusInterfaceSkeleton:g-flags does
not have the
%G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD
flags set, no dedicated thread is ever used and the call will be
handled in the same thread as the object that @interface belongs
to was exported in.
#NAME: length
#PARENT: Gio.UnixFDList.steal_fds.gint
#COMMENT: pointer to the length of the returned
    array, or %NULL
#NAME: converter
#PARENT: Gio.Converter.reset.none
#COMMENT: a #GConverter.
#NAME: unref
#PARENT: Gio.DBusArgInfo
#COMMENT: If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.
#NAME: n_removals
#PARENT: Gio.ListStore.splice.none
#COMMENT: the number of items to remove
#NAME: stream
#PARENT: Gio.OutputStream.splice_async.none
#COMMENT: a #GOutputStream.
#NAME: set_value
#PARENT: Gio.Settings.set_value
#COMMENT: %TRUE if setting the key succeeded,
    %FALSE if the key was not writable
#NAME: stop_chars
#PARENT: Gio.DataInputStream.read_upto_async.none
#COMMENT: characters to terminate the read
#NAME: get_exit_on_close
#PARENT: Gio.DBusConnection
#COMMENT: Gets whether the process is terminated when @connection is
closed by the remote peer. See
#GDBusConnection:exit-on-close for more details.
#NAME: rrname
#PARENT: Gio.Resolver.lookup_records_async.none
#COMMENT: the DNS name to lookup the record for
#NAME: acquire
#PARENT: Gio.Permission.acquire
#COMMENT: %TRUE if the permission was successfully acquired
#NAME: links
#PARENT: Gio.MenuModelClass.get_item_links.get_item_links.none
#COMMENT: Links from the item
#NAME: read_finish
#PARENT: Gio.InputStreamClass.read_finish.read_finish
#COMMENT: number of bytes read in, or -1 on error, or 0 on end of file.
#NAME: mount
#PARENT: Gio.Mount.eject_with_operation.none
#COMMENT: a #GMount.
#NAME: equal
#PARENT: Gio.FileIface.equal.equal
#COMMENT: %TRUE if @file1 and @file2 are equal.
#NAME: callback
#PARENT: Gio.SocketClient.connect_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: value
#PARENT: Gio.SubprocessLauncher.setenv.none
#COMMENT: the new value for the variable
#NAME: task
#PARENT: Gio.Task.run_in_thread.none
#COMMENT: a #GTask
#NAME: flags
#PARENT: Gio.Volume.eject.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: path
#PARENT: Gio.resources_get_info.gboolean
#COMMENT: A pathname inside the resource
#NAME: is_media_check_automatic
#PARENT: Gio.Drive.is_media_check_automatic
#COMMENT: %TRUE if the @drive is capabable of automatically detecting
    media changes, %FALSE otherwise.
#NAME: attributes
#PARENT: Gio.FileIOStreamClass.query_info.query_info.FileInfo
#COMMENT: a file attribute query string.
#NAME: scope
#PARENT: Gio.IOModuleScope.block.none
#COMMENT: a module loading scope
#NAME: is_active
#PARENT: Gio.DBusServer.is_active
#COMMENT: %TRUE if server is active, %FALSE otherwise.
#NAME: host_not_found
#PARENT: Gio.IOErrorEnum
#COMMENT: Host couldn't be found (remote operations).
#NAME: value
#PARENT: Gio.SimpleAction.change-state.none
#COMMENT: the requested value for the state
#NAME: close
#PARENT: Gio.DBusConnection
#COMMENT: Closes @connection. Note that this never causes the process to
exit (this might only happen if the other end of a shared message
bus connection disconnects, see #GDBusConnection:exit-on-close).

Once the connection is closed, operations such as sending a message
will return with the error %G_IO_ERROR_CLOSED. Closing a connection
will not automatically flush the connection so queued messages may
be lost. Use g_dbus_connection_flush() if you need such guarantees.

If @connection is already closed, this method fails with
%G_IO_ERROR_CLOSED.

When @connection has been closed, the #GDBusConnection::closed
signal is emitted in the
[thread-default main context][g-main-context-push-thread-default]
of the thread that @connection was constructed in.

This is an asynchronous method. When the operation is finished,
@callback will be invoked in the
[thread-default main context][g-main-context-push-thread-default]
of the thread you are calling this method from. You can
then call g_dbus_connection_close_finish() to get the result of the
operation. See g_dbus_connection_close_sync() for the synchronous
version.
#NAME: open
#PARENT: Gio.Application
#COMMENT: The ::open signal is emitted on the primary instance when there are
files to open. See g_application_open() for more information.
#NAME: can_unmount
#PARENT: Gio.MountIface.can_unmount.can_unmount
#COMMENT: %TRUE if the @mount can be unmounted.
#NAME: get_anonymous
#PARENT: Gio.MountOperation
#COMMENT: Check to see whether the mount operation is being used
for an anonymous user.
#NAME: target
#PARENT: Gio.Notification.set_default_action_and_target_value.none
#COMMENT: a #GVariant to use as @action's parameter, or %NULL
#NAME: user_data
#PARENT: Gio.SocketClient.connect_to_service_async.none
#COMMENT: user data for the callback
#NAME: action
#PARENT: Gio.ActionInterface.get_name.get_name.utf8
#COMMENT: a #GAction
#NAME: io_priority
#PARENT: Gio.InputStream.read_bytes_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: new_with_default_fallbacks
#PARENT: Gio.ThemedIcon.new_with_default_fallbacks
#COMMENT: a new #GThemedIcon.
#NAME: out_guid
#PARENT: Gio.dbus_address_get_stream_sync.IOStream
#COMMENT: %NULL or return location to store the GUID extracted from @address, if any.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.should_show.should_show.gboolean
#COMMENT: a #GAppInfo.
#NAME: set_int
#PARENT: Gio.Settings
#COMMENT: Sets @key in @settings to @value.

A convenience variant of g_settings_set() for 32-bit integers.

It is a programmer error to give a @key that isn't specified as
having a int32 type in the schema for @settings.
#NAME: set_socket_type
#PARENT: Gio.SocketClient
#COMMENT: Sets the socket type of the socket client.
The sockets created by this object will be of the specified
type.

It doesn't make sense to specify a type of %G_SOCKET_TYPE_DATAGRAM,
as GSocketClient is used for connection oriented services.
#NAME: set_serial
#PARENT: Gio.DBusMessage
#COMMENT: Sets the serial for @message.
#NAME: handshake_finish
#PARENT: Gio.TlsConnectionClass.handshake_finish.handshake_finish
#COMMENT: %TRUE on success, %FALSE on failure, in which
case @error will be set.
#NAME: connection
#PARENT: Gio.DBusConnection.close_finish.gboolean
#COMMENT: a #GDBusConnection
#NAME: observer
#PARENT: Gio.DBusConnection.new_for_address.none
#COMMENT: a #GDBusAuthObserver or %NULL
#NAME: FILE_ATTRIBUTE_ACCESS_CAN_WRITE
#PARENT: Gio
#COMMENT: A key in the "access" namespace for getting write privileges.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
This attribute will be %TRUE if the user is able to write to the file.
#NAME: require-close-notify
#PARENT: Gio.TlsConnection
#COMMENT: Whether or not proper TLS close notification is required.
See g_tls_connection_set_require_close_notify().
#NAME: identity
#PARENT: Gio.TlsDatabase.verify_chain.TlsCertificateFlags
#COMMENT: the expected peer identity
#NAME: has_pending
#PARENT: Gio.FileEnumerator.has_pending
#COMMENT: %TRUE if the @enumerator has pending operations.
#NAME: bytes
#PARENT: Gio.BytesIcon
#COMMENT: The bytes containing the icon.
#NAME: mount
#PARENT: Gio.MountIface.eject_with_operation_finish.eject_with_operation_finish.gboolean
#COMMENT: a #GMount.
#NAME: read_line_finish
#PARENT: Gio.DataInputStream
#COMMENT: Finish an asynchronous call started by
g_data_input_stream_read_line_async().  Note the warning about
string encoding in g_data_input_stream_read_line() applies here as
well.
#NAME: none
#PARENT: Gio.FileMeasureFlags
#COMMENT: No flags set.
#NAME: resolver
#PARENT: Gio.Resolver.lookup_service_finish.SrvTarget
#COMMENT: a #GResolver
#NAME: request_certificate
#PARENT: Gio.TlsInteractionClass.request_certificate.request_certificate
#COMMENT: The status of the request certificate interaction.
#NAME: listener
#PARENT: Gio.SocketListener.accept_socket_finish.Socket
#COMMENT: a #GSocketListener
#NAME: get_method_info
#PARENT: Gio.DBusMethodInvocation.get_method_info
#COMMENT: A #GDBusMethodInfo or %NULL. Do not free, it is owned by @invocation.
#NAME: launch
#PARENT: Gio.AppInfo
#COMMENT: Launches the application. Passes @files to the launched application
as arguments, using the optional @launch_context to get information
about the details of the launcher (like what screen it is on).
On error, @error will be set accordingly.

To launch the application without arguments pass a %NULL @files list.

Note that even if the launch is successful the application launched
can fail to start if it runs into problems during startup. There is
no way to detect this.

Some URIs can be changed when passed through a GFile (for instance
unsupported URIs with strange formats like mailto:), so if you have
a textual URI you want to pass in as argument, consider using
g_app_info_launch_uris() instead.

The launched application inherits the environment of the launching
process, but it can be modified with g_app_launch_context_setenv()
and g_app_launch_context_unsetenv().

On UNIX, this function sets the `GIO_LAUNCHED_DESKTOP_FILE`
environment variable with the path of the launched desktop file and
`GIO_LAUNCHED_DESKTOP_FILE_PID` to the process id of the launched
process. This can be used to ignore `GIO_LAUNCHED_DESKTOP_FILE`,
should it be inherited by further processes. The `DISPLAY` and
`DESKTOP_STARTUP_ID` environment variables are also set, based
on information provided in @launch_context.
#NAME: cancellable
#PARENT: Gio.File.open_readwrite.FileIOStream
#COMMENT: a #GCancellable
#NAME: flags
#PARENT: Gio.DBusProxy.new_for_bus_sync.DBusProxy
#COMMENT: Flags used when constructing the proxy.
#NAME: verify
#PARENT: Gio.TlsCertificate
#COMMENT: This verifies @cert and returns a set of #GTlsCertificateFlags
indicating any problems found with it. This can be used to verify a
certificate outside the context of making a connection, or to
check a certificate against a CA that is not part of the system
CA database.

If @identity is not %NULL, @cert's name(s) will be compared against
it, and %G_TLS_CERTIFICATE_BAD_IDENTITY will be set in the return
value if it does not match. If @identity is %NULL, that bit will
never be set in the return value.

If @trusted_ca is not %NULL, then @cert (or one of the certificates
in its chain) must be signed by it, or else
%G_TLS_CERTIFICATE_UNKNOWN_CA will be set in the return value. If
@trusted_ca is %NULL, that bit will never be set in the return
value.

(All other #GTlsCertificateFlags values will always be set or unset
as appropriate.)
#NAME: action_group
#PARENT: Gio.ActionGroup.activate_action.none
#COMMENT: a #GActionGroup
#NAME: info
#PARENT: Gio.DesktopAppInfo.get_categories.utf8
#COMMENT: a #GDesktopAppInfo
#NAME: settings
#PARENT: Gio.Settings.set_flags.gboolean
#COMMENT: a #GSettings object
#NAME: app_info_get_all_for_type
#PARENT: Gio.app_info_get_all_for_type
#COMMENT: #GList of #GAppInfos
    for given @content_type or %NULL on error.
#NAME: message
#PARENT: Gio.DBusMessage.get_signature.utf8
#COMMENT: A #GDBusMessage.
#NAME: info
#PARENT: Gio.FileInfo.set_edit_name.none
#COMMENT: a #GFileInfo.
#NAME: MENU_ATTRIBUTE_TARGET
#PARENT: Gio
#COMMENT: The menu item attribute which holds the target with which the item's action
will be activated.

See also g_menu_item_set_action_and_target()
#NAME: get_method_name
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Gets the name of the method that was invoked.
#NAME: action
#PARENT: Gio.ActionInterface.activate.activate.none
#COMMENT: a #GAction
#NAME: socket
#PARENT: Gio.Socket.bind.gboolean
#COMMENT: a #GSocket.
#NAME: string
#PARENT: Gio.InetAddress.new_from_string.InetAddress
#COMMENT: a string representation of an IP address
#NAME: attributes
#PARENT: Gio.FileInputStream.query_info_async.none
#COMMENT: a file attribute query string.
#NAME: export_id
#PARENT: Gio.DBusConnection.unexport_menu_model.none
#COMMENT: the ID from g_dbus_connection_export_menu_model()
#NAME: monitor_file
#PARENT: Gio.FileIface.monitor_file.monitor_file
#COMMENT: a #GFileMonitor for the given @file,
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: resource_path
#PARENT: Gio.Application.set_resource_base_path.none
#COMMENT: the resource path to use
#NAME: invalid_signature
#PARENT: Gio.DBusError
#COMMENT: A type signature is not valid.
#NAME: mount_operation
#PARENT: Gio.File.mount_enclosing_volume.none
#COMMENT: a #GMountOperation
    or %NULL to avoid user interaction
#NAME: callback
#PARENT: Gio.File.replace_contents_bytes_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: content_type_can_be_executable
#PARENT: Gio
#COMMENT: Checks if a content type can be executable. Note that for instance
things like text files can be executables (i.e. scripts and batch files).
#NAME: item
#PARENT: Gio.Menu.prepend_item.none
#COMMENT: a #GMenuItem to prepend
#NAME: unmount_mountable_with_operation_finish
#PARENT: Gio.File
#COMMENT: Finishes an unmount operation,
see g_file_unmount_mountable_with_operation() for details.

Finish an asynchronous unmount operation that was started
with g_file_unmount_mountable_with_operation().
#NAME: condition
#PARENT: Gio.Socket.create_source.GLib.Source
#COMMENT: a #GIOCondition mask to monitor
#NAME: anchors
#PARENT: Gio.tls_file_database_new.TlsFileDatabase
#COMMENT: filename of anchor certificate authorities.
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.action_enabled_changed.action_enabled_changed.none
#COMMENT: the name of an action in the group
#NAME: make_directory
#PARENT: Gio.File
#COMMENT: Creates a directory. Note that this will only create a child directory
of the immediate parent directory of the path or URI given by the #GFile.
To recursively create directories, see g_file_make_directory_with_parents().
This function will fail if the parent directory does not exist, setting
@error to %G_IO_ERROR_NOT_FOUND. If the file system doesn't support
creating directories, this function will fail, setting @error to
%G_IO_ERROR_NOT_SUPPORTED.

For a local #GFile the newly created directory will have the default
(current) ownership and permissions of the current process.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: FILE_ATTRIBUTE_DOS_IS_SYSTEM
#PARENT: Gio
#COMMENT: A key in the "dos" namespace for checking if the file's backup flag
is set. This attribute is %TRUE if the backup flag is set. This attribute
is only available for DOS file systems. Corresponding #GFileAttributeType
is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: attribute
#PARENT: Gio.File.set_attribute_uint32.gboolean
#COMMENT: a string containing the attribute's name
#NAME: file
#PARENT: Gio.FileIface.measure_disk_usage_async.measure_disk_usage_async.none
#COMMENT: a #GFile
#NAME: is_same_user
#PARENT: Gio.Credentials
#COMMENT: Checks if @credentials and @other_credentials is the same user.

This operation can fail if #GCredentials is not supported on the
the OS.
#NAME: result
#PARENT: Gio.Mount.eject_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: files
#PARENT: Gio.Application.open.none
#COMMENT: an array of #GFiles
#NAME: new_finish
#PARENT: Gio.AsyncInitable.new_finish
#COMMENT: a newly created #GObject,
     or %NULL on error. Free with g_object_unref().
#NAME: write_finish
#PARENT: Gio.OutputStreamClass.write_finish.write_finish
#COMMENT: a #gssize containing the number of bytes written to the stream.
#NAME: stream
#PARENT: Gio.PollableInputStream.is_readable.gboolean
#COMMENT: a #GPollableInputStream.
#NAME: object_type
#PARENT: Gio.AsyncInitable.newv_async.none
#COMMENT: a #GType supporting #GAsyncInitable.
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_int64.gint64
#COMMENT: a file attribute key.
#NAME: result
#PARENT: Gio.TlsInteraction.request_certificate_finish.TlsInteractionResult
#COMMENT: the result passed to the callback
#NAME: DBusProxyClass
#PARENT: Gio
#COMMENT: Class structure for #GDBusProxy.
#NAME: res
#PARENT: Gio.SimpleAsyncThreadFunc.none
#COMMENT: a #GSimpleAsyncResult.
#NAME: mount
#PARENT: Gio.MountIface.get_name.get_name.utf8
#COMMENT: a #GMount.
#NAME: current_size
#PARENT: Gio.FileMeasureProgressCallback.none
#COMMENT: the current cumulative size measurement
#NAME: contents
#PARENT: Gio.File.load_contents.gboolean
#COMMENT: a location to place the contents of the file
#NAME: get_uuid
#PARENT: Gio.Mount.get_uuid
#COMMENT: the UUID for @mount or %NULL if no UUID can be computed.
    The returned string should be freed with g_free()
    when no longer needed.
#NAME: g_iface
#PARENT: Gio.NetworkMonitorInterface
#COMMENT: The parent interface.
#NAME: callback
#PARENT: Gio.FileEnumerator.close_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: password
#PARENT: Gio.ProxyAddress.new.SocketAddress
#COMMENT: The password to authenticate to the proxy server
    (or %NULL).
#NAME: action_print_detailed_name
#PARENT: Gio
#COMMENT: Formats a detailed action name from @action_name and @target_value.

It is an error to call this function with an invalid action name.

This function is the opposite of
g_action_parse_detailed_action_name().  It will produce a string that
can be parsed back to the @action_name and @target_value by that
function.

See that function for the types of strings that will be printed by
this function.
#NAME: user_data
#PARENT: Gio.Volume.eject_with_operation.none
#COMMENT: user data passed to @callback
#NAME: read_async
#PARENT: Gio.File
#COMMENT: Asynchronously opens @file for reading.

For more details, see g_file_read() which is
the synchronous version of this call.

When the operation is finished, @callback will be called.
You can then call g_file_read_finish() to get the result
of the operation.
#NAME: get_size
#PARENT: Gio.SocketControlMessageClass.get_size.get_size
#COMMENT: The number of bytes required.
#NAME: proxy
#PARENT: Gio.DBusProxy.set_default_timeout.none
#COMMENT: A #GDBusProxy.
#NAME: res
#PARENT: Gio.FileIface.enumerate_children_finish.enumerate_children_finish.FileEnumerator
#COMMENT: a #GAsyncResult
#NAME: FILE_ATTRIBUTE_OWNER_USER
#PARENT: Gio
#COMMENT: A key in the "owner" namespace for getting the user name of the
file's owner. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: handles_command_line
#PARENT: Gio.ApplicationFlags
#COMMENT: This application handles command line
    arguments (in the primary instance). Note that this flag only affect
    the default implementation of local_command_line().
    See g_application_run() for details.
#NAME: guess_content_type
#PARENT: Gio.Mount
#COMMENT: Tries to guess the type of content stored on @mount. Returns one or
more textual identifiers of well-known content types (typically
prefixed with "x-content/"), e.g. x-content/image-dcf for camera
memory cards. See the
[shared-mime-info](http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
specification for more on x-content types.

This is an asynchronous operation (see
g_mount_guess_content_type_sync() for the synchronous version), and
is finished by calling g_mount_guess_content_type_finish() with the
@mount and #GAsyncResult data returned in the @callback.
#NAME: status
#PARENT: Gio.FileInfo.get_attribute_data.gboolean
#COMMENT: return location for the attribute status, or %NULL
#NAME: cancellable
#PARENT: Gio.TlsInteractionClass.request_certificate_async.request_certificate_async.none
#COMMENT: an optional #GCancellable cancellation object
#NAME: get_username
#PARENT: Gio.MountOperation.get_username
#COMMENT: a string containing the user name.
#NAME: none
#PARENT: Gio.TlsDatabaseVerifyFlags
#COMMENT: No verification flags
#NAME: stream
#PARENT: Gio.OutputStream.write_bytes_finish.gssize
#COMMENT: a #GOutputStream.
#NAME: drive
#PARENT: Gio.Drive.get_sort_key.utf8
#COMMENT: A #GDrive.
#NAME: cancellable
#PARENT: Gio.DriveIface.eject_with_operation.eject_with_operation.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: new
#PARENT: Gio.ConverterInputStream.new
#COMMENT: a new #GInputStream.
#NAME: get_type
#PARENT: Gio.IOExtension
#COMMENT: Gets the type associated with @extension.
#NAME: set_uint
#PARENT: Gio.Settings.set_uint
#COMMENT: %TRUE if setting the key succeeded,
    %FALSE if the key was not writable
#NAME: new_from_native
#PARENT: Gio.SocketAddress
#COMMENT: Creates a #GSocketAddress subclass corresponding to the native
struct sockaddr @native.
#NAME: flags
#PARENT: Gio.FileIface.replace.replace.FileOutputStream
#COMMENT: a set of #GFileCreateFlags
#NAME: ProxyAddressClass
#PARENT: Gio
#COMMENT: Class structure for #GProxyAddress.
#NAME: mode
#PARENT: Gio.TlsConnection.set_rehandshake_mode.none
#COMMENT: the rehandshaking mode
#NAME: blocking
#PARENT: Gio.pollable_stream_write_all.gboolean
#COMMENT: whether to do blocking I/O
#NAME: volume
#PARENT: Gio.VolumeIface.enumerate_identifiers.enumerate_identifiers.utf8
#COMMENT: a #GVolume
#NAME: interface-proxy-properties-changed
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Emitted when one or more D-Bus properties on proxy changes. The
local cache has already been updated when this signal fires. Note
that both @changed_properties and @invalidated_properties are
guaranteed to never be %NULL (either may be empty though).

This signal exists purely as a convenience to avoid having to
connect signals to all interface proxies managed by @manager.

This signal is emitted in the
[thread-default main context][g-main-context-push-thread-default]
that @manager was constructed in.
#NAME: error_code
#PARENT: Gio.DBusError.unregister_error.gboolean
#COMMENT: An error code.
#NAME: io_priority
#PARENT: Gio.FileIface.create_async.create_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: property
#PARENT: Gio.Application.bind_busy_property.none
#COMMENT: the name of a boolean property of @object
#NAME: DBusInterfaceSetPropertyFunc
#PARENT: Gio.DBusInterfaceSetPropertyFunc
#COMMENT: %TRUE if the property was set to @value, %FALSE if @error is set.
#NAME: volume
#PARENT: Gio.VolumeIface.eject_with_operation_finish.eject_with_operation_finish.gboolean
#COMMENT: a #GVolume
#NAME: new_with_type
#PARENT: Gio.UnixSocketAddress
#COMMENT: Creates a new #GUnixSocketAddress of type @type with name @path.

If @type is %G_UNIX_SOCKET_ADDRESS_PATH, this is equivalent to
calling g_unix_socket_address_new().

If @path_type is %G_UNIX_SOCKET_ADDRESS_ABSTRACT, then @path_len
bytes of @path will be copied to the socket's path, and only those
bytes will be considered part of the name. (If @path_len is -1,
then @path is assumed to be NUL-terminated.) For example, if @path
was "test", then calling g_socket_address_get_native_size() on the
returned socket would return 7 (2 bytes of overhead, 1 byte for the
abstract-socket indicator byte, and 4 bytes for the name "test").

If @path_type is %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED, then
@path_len bytes of @path will be copied to the socket's path, the
rest of the path will be padded with 0 bytes, and the entire
zero-padded buffer will be considered the name. (As above, if
@path_len is -1, then @path is assumed to be NUL-terminated.) In
this case, g_socket_address_get_native_size() will always return
the full size of a `struct sockaddr_un`, although
g_unix_socket_address_get_path_len() will still return just the
length of @path.

%G_UNIX_SOCKET_ADDRESS_ABSTRACT is preferred over
%G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED for new programs. Of course,
when connecting to a server created by another process, you must
use the appropriate type corresponding to how that process created
its listening socket.
#NAME: FILE_ATTRIBUTE_TRASH_ORIG_PATH
#PARENT: Gio
#COMMENT: A key in the "trash" namespace.  When requested against
items in "trash:///", will return the original path to the file before it
was trashed. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
#NAME: get_password
#PARENT: Gio.MountOperation.get_password
#COMMENT: a string containing the password within @op.
#NAME: username
#PARENT: Gio.MountOperation
#COMMENT: The user name that is used for authentication when carrying out
the mount operation.
#NAME: do_not_auto_start
#PARENT: Gio.DBusProxyFlags
#COMMENT: If not set and the proxy if for a well-known name,
then request the bus to launch an owner for the name if no-one owns the name. This flag can
only be used in proxies for well-known names.
#NAME: replace_readwrite
#PARENT: Gio.File.replace_readwrite
#COMMENT: a #GFileIOStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: skip_finish
#PARENT: Gio.InputStream
#COMMENT: Finishes a stream skip operation.
#NAME: mount_operation
#PARENT: Gio.File.unmount_mountable_with_operation.none
#COMMENT: a #GMountOperation,
    or %NULL to avoid user interaction
#NAME: mechanism
#PARENT: Gio.DBusAuthObserver.allow-mechanism.gboolean
#COMMENT: The name of the mechanism, e.g. `DBUS_COOKIE_SHA1`.
#NAME: receive_from
#PARENT: Gio.Socket.receive_from
#COMMENT: Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error
#NAME: speaks_ipv4
#PARENT: Gio.Socket
#COMMENT: Checks if a socket is capable of speaking IPv4.

IPv4 sockets are capable of speaking IPv4.  On some operating systems
and under some combinations of circumstances IPv6 sockets are also
capable of speaking IPv4.  See RFC 3493 section 3.7 for more
information.

No other types of sockets are currently considered as being capable
of speaking IPv4.
#NAME: descendant
#PARENT: Gio.File.get_relative_path.utf8
#COMMENT: input #GFile
#NAME: flags
#PARENT: Gio.DBusConnection
#COMMENT: Flags from the #GDBusConnectionFlags enumeration.
#NAME: load_contents
#PARENT: Gio.File.load_contents
#COMMENT: %TRUE if the @file's contents were successfully loaded.
    %FALSE if there were errors.
#NAME: callback
#PARENT: Gio.OutputStream.write_bytes_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: state-type
#PARENT: Gio.SimpleAction
#COMMENT: The #GVariantType of the state that the action has, or %NULL if the
action is stateless.
#NAME: action_name
#PARENT: Gio.Action.print_detailed_name.utf8
#COMMENT: a valid action name
#NAME: callback
#PARENT: Gio.DataInputStream.read_line_async.none
#COMMENT: callback to call when the request is satisfied.
#NAME: action_name
#PARENT: Gio.ActionMapInterface.lookup_action.lookup_action.Action
#COMMENT: the name of an action
#NAME: FILE_ATTRIBUTE_TIME_CREATED_USEC
#PARENT: Gio
#COMMENT: A key in the "time" namespace for getting the microseconds of the time
the file was created. This should be used in conjunction with
#G_FILE_ATTRIBUTE_TIME_CREATED. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: request_certificate
#PARENT: Gio.TlsInteraction.request_certificate
#COMMENT: The status of the request certificate interaction.
#NAME: address
#PARENT: Gio.InetAddress.get_is_mc_node_local.gboolean
#COMMENT: a #GInetAddress
#NAME: can_poll
#PARENT: Gio.PollableOutputStreamInterface.can_poll.can_poll
#COMMENT: %TRUE if @stream is pollable, %FALSE if not.
#NAME: new
#PARENT: Gio.SubprocessLauncher
#COMMENT: Creates a new #GSubprocessLauncher.

The launcher is created with the default options.  A copy of the
environment of the calling process is made at the time of this call
and will be used as the environment that the process is launched in.
#NAME: new
#PARENT: Gio.Cancellable
#COMMENT: Creates a new #GCancellable object.

Applications that want to start one or more operations
that should be cancellable should create a #GCancellable
and pass it to the operations.

One #GCancellable can be used in multiple consecutive
operations or in multiple concurrent operations.
#NAME: label
#PARENT: Gio.MenuItem.new_section.MenuItem
#COMMENT: the section label, or %NULL
#NAME: section
#PARENT: Gio.Menu.append_section.none
#COMMENT: a #GMenuModel with the items of the section
#NAME: bytes
#PARENT: Gio.InetAddress.new_from_bytes.InetAddress
#COMMENT: raw address data
#NAME: name
#PARENT: Gio.DBusAnnotationInfo.lookup.utf8
#COMMENT: The name of the annotation to look up.
#NAME: get_capabilities
#PARENT: Gio.DBusConnection.get_capabilities
#COMMENT: zero or more flags from the #GDBusCapabilityFlags enumeration
#NAME: lookup
#PARENT: Gio.DBusAnnotationInfo
#COMMENT: Looks up the value of an annotation.

The cost of this function is O(n) in number of annotations.
#NAME: property
#PARENT: Gio.Application.unbind_busy_property.none
#COMMENT: the name of a boolean property of @object
#NAME: cancel
#PARENT: Gio.FileMonitorClass.cancel.cancel
#COMMENT: always %TRUE
#NAME: certificate
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer.lookup_certificate_issuer.TlsCertificate
#COMMENT: a #GTlsCertificate
#NAME: settings_schema_source_get_default
#PARENT: Gio.settings_schema_source_get_default
#COMMENT: the default schema source
#NAME: stop_mountable_finish
#PARENT: Gio.File.stop_mountable_finish
#COMMENT: %TRUE if the operation finished successfully.
    %FALSE otherwise.
#NAME: none
#PARENT: Gio.FileAttributeInfoFlags
#COMMENT: no flags set.
#NAME: drive
#PARENT: Gio.Drive.is_media_check_automatic.gboolean
#COMMENT: a #GDrive.
#NAME: stream
#PARENT: Gio.InputStream.set_pending.gboolean
#COMMENT: input stream
#NAME: condition_check
#PARENT: Gio.Socket
#COMMENT: Checks on the readiness of @socket to perform operations.
The operations specified in @condition are checked for and masked
against the currently-satisfied conditions on @socket. The result
is returned.

Note that on Windows, it is possible for an operation to return
%G_IO_ERROR_WOULD_BLOCK even immediately after
g_socket_condition_check() has claimed that the socket is ready for
writing. Rather than calling g_socket_condition_check() and then
writing to the socket if it succeeds, it is generally better to
simply try writing to the socket right away, and try again later if
the initial attempt returns %G_IO_ERROR_WOULD_BLOCK.

It is meaningless to specify %G_IO_ERR or %G_IO_HUP in condition;
these conditions will always be set in the output if they are true.

This call never blocks.
#NAME: flags
#PARENT: Gio.File.enumerate_children_async.none
#COMMENT: a set of #GFileQueryInfoFlags
#NAME: size
#PARENT: Gio.Socket.receive_from.gssize
#COMMENT: the number of bytes you want to read from the socket
#NAME: run
#PARENT: Gio.ThreadedSocketService
#COMMENT: The ::run signal is emitted in a worker thread in response to an
incoming connection. This thread is dedicated to handling
@connection and may perform blocking IO. The signal handler need
not return until the connection is closed.
#NAME: callback
#PARENT: Gio.VolumeIface.mount_fn.mount_fn.none
#COMMENT: a #GAsyncReadyCallback, or %NULL
#NAME: object_path
#PARENT: Gio.DBusObjectManagerIface.get_object.get_object.DBusObject
#COMMENT: Object path to lookup.
#NAME: unsetenv
#PARENT: Gio.AppLaunchContext
#COMMENT: Arranges for @variable to be unset in the child's environment
when @context is used to launch an application.
#NAME: static_resource
#PARENT: Gio.StaticResource.init.none
#COMMENT: pointer to a static #GStaticResource
#NAME: to_gerror
#PARENT: Gio.DBusMessage
#COMMENT: If @message is not of type %G_DBUS_MESSAGE_TYPE_ERROR does
nothing and returns %FALSE.

Otherwise this method encodes the error in @message as a #GError
using g_dbus_error_set_dbus_error() using the information in the
%G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field of @message as
well as the first string item in @message's body.
#NAME: cr_lf
#PARENT: Gio.DataStreamNewlineType
#COMMENT: Selects "CR, LF" line ending, common on Microsoft Windows.
#NAME: close_finish
#PARENT: Gio.InputStream
#COMMENT: Finishes closing a stream asynchronously, started from g_input_stream_close_async().
#NAME: result
#PARENT: Gio.OutputStreamClass.close_finish.close_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: application
#PARENT: Gio.Application.get_inactivity_timeout.guint
#COMMENT: a #GApplication
#NAME: result
#PARENT: Gio.FileIface.eject_mountable_finish.eject_mountable_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: cancellable
#PARENT: Gio.TaskThreadFunc.none
#COMMENT: @task's #GCancellable, or %NULL
#NAME: ref
#PARENT: Gio.FileAttributeInfoList
#COMMENT: References a file attribute info list.
#NAME: error_domain
#PARENT: Gio.DBusError.unregister_error.gboolean
#COMMENT: A #GQuark for a error domain.
#NAME: cancellable
#PARENT: Gio.Permission.acquire.gboolean
#COMMENT: a #GCancellable, or %NULL
#NAME: flags
#PARENT: Gio.Application.set_flags.none
#COMMENT: the flags for @application
#NAME: action-state-changed
#PARENT: Gio.ActionGroup
#COMMENT: Signals that the state of the named action has changed.
#NAME: solaris_ucred
#PARENT: Gio.CredentialsType
#COMMENT: The native credentials type is a <type>ucred_t</type>. Added in 2.40.
#NAME: inherit_fds
#PARENT: Gio.SubprocessFlags
#COMMENT: spawned processes will inherit the
  file descriptors of their parent, unless those descriptors have
  been explicitly marked as close-on-exec.  This flag has no effect
  over the "standard" file descriptors (stdin, stdout, stderr).
#NAME: set_required_type
#PARENT: Gio.IOExtensionPoint
#COMMENT: Sets the required type for @extension_point to @type.
All implementations must henceforth have this type.
#NAME: result
#PARENT: Gio.DataInputStream.read_line_finish_utf8.utf8
#COMMENT: the #GAsyncResult that was provided to the callback.
#NAME: relative_path
#PARENT: Gio.File.resolve_relative_path.File
#COMMENT: a given relative path string
#NAME: unmount_mountable_with_operation_finish
#PARENT: Gio.File.unmount_mountable_with_operation_finish
#COMMENT: %TRUE if the operation finished successfully.
    %FALSE otherwise.
#NAME: lookup_service_finish
#PARENT: Gio.Resolver.lookup_service_finish
#COMMENT: a non-empty #GList of
#GSrvTarget, or %NULL on error. See g_resolver_lookup_service() for more
details.
#NAME: serialize
#PARENT: Gio.Icon.serialize
#COMMENT: a #GVariant, or %NULL when serialization fails.
#NAME: user_data
#PARENT: Gio.ProxyResolverInterface.lookup_async.lookup_async.none
#COMMENT: data for @callback
#NAME: callback
#PARENT: Gio.InputStream.read_all_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: io_priority
#PARENT: Gio.InputStream.read_all_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: fd
#PARENT: Gio.UnixOutputStream.new.OutputStream
#COMMENT: a UNIX file descriptor
#NAME: error
#PARENT: Gio.dbus_error_is_remote_error.gboolean
#COMMENT: A #GError.
#NAME: set_member
#PARENT: Gio.DBusMessage
#COMMENT: Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_MEMBER header field.
#NAME: reply_type
#PARENT: Gio.DBusConnection.call_sync.GLib.Variant
#COMMENT: the expected type of the reply, or %NULL
#NAME: user_data
#PARENT: Gio.MountIface.unmount_with_operation.unmount_with_operation.none
#COMMENT: user data passed to @callback.
#NAME: get_stream
#PARENT: Gio.DBusConnection
#COMMENT: Gets the underlying stream used for IO.

While the #GDBusConnection is active, it will interact with this
stream from a worker thread, so it is not safe to interact with
the stream directly.
#NAME: drive
#PARENT: Gio.Drive.has_volumes.gboolean
#COMMENT: a #GDrive.
#NAME: get_icon
#PARENT: Gio.Drive
#COMMENT: Gets the icon for @drive.
#NAME: prepend_submenu
#PARENT: Gio.Menu
#COMMENT: Convenience function for prepending a submenu menu item to the start
of @menu.  Combine g_menu_item_new_submenu() and g_menu_insert_item() for
a more flexible alternative.
#NAME: appinfo
#PARENT: Gio.AppInfo.get_executable.utf8
#COMMENT: a #GAppInfo
#NAME: InputVector
#PARENT: Gio
#COMMENT: Structure used for scatter/gather data input.
You generally pass in an array of #GInputVectors
and the operation will store the read data starting in the
first buffer, switching to the next as needed.
#NAME: get_connection
#PARENT: Gio.DBusObjectProxy
#COMMENT: Gets the connection that @proxy is for.
#NAME: write_bytes
#PARENT: Gio.OutputStream
#COMMENT: A wrapper function for g_output_stream_write() which takes a
#GBytes as input.  This can be more convenient for use by language
bindings or in other cases where the refcounted nature of #GBytes
is helpful over a bare pointer interface.

However, note that this function may still perform partial writes,
just like g_output_stream_write().  If that occurs, to continue
writing, you will need to create a new #GBytes containing just the
remaining bytes, using g_bytes_new_from_bytes(). Passing the same
#GBytes instance multiple times potentially can result in duplicated
data in the output stream.
#NAME: get_relative_path
#PARENT: Gio.FileIface.get_relative_path.get_relative_path
#COMMENT: string with the relative path from @descendant
    to @parent, or %NULL if @descendant doesn't have @parent as
    prefix. The returned string should be freed with g_free() when
    no longer needed.
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.has_action.has_action.gboolean
#COMMENT: a #GActionGroup
#NAME: op
#PARENT: Gio.MountOperation.set_anonymous.none
#COMMENT: a #GMountOperation.
#NAME: SocketConnection
#PARENT: Gio
#COMMENT: #GSocketConnection is a #GIOStream for a connected socket. They
can be created either by #GSocketClient when connecting to a host,
or by #GSocketListener when accepting a new client.

The type of the #GSocketConnection object returned from these calls
depends on the type of the underlying socket that is in use. For
instance, for a TCP/IP connection it will be a #GTcpConnection.

Choosing what type of object to construct is done with the socket
connection factory, and it is possible for 3rd parties to register
custom socket connection types for specific combination of socket
family/type/protocol using g_socket_connection_factory_register_type().

To close a #GSocketConnection, use g_io_stream_close(). Closing both
substreams of the #GIOStream separately will not close the underlying
#GSocket.
#NAME: count
#PARENT: Gio.InputStreamClass.skip.skip.gssize
#COMMENT: the number of bytes that will be skipped from the stream
#NAME: state
#PARENT: Gio.SimpleAction.new_stateful.SimpleAction
#COMMENT: the initial state of the action
#NAME: proxy_address
#PARENT: Gio.Proxy.connect.IOStream
#COMMENT: a #GProxyAddress
#NAME: cancellable
#PARENT: Gio.SocketListener.accept_socket.Socket
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: volume
#PARENT: Gio.VolumeIface.mount_finish.mount_finish.gboolean
#COMMENT: a #GVolume
#NAME: parse_uri
#PARENT: Gio.NetworkAddress
#COMMENT: Creates a new #GSocketConnectable for connecting to the given
@uri. May fail and return %NULL in case parsing @uri fails.

Using this rather than g_network_address_new() or
g_network_address_parse() allows #GSocketClient to determine
when to use application-specific proxy protocols.
#NAME: name
#PARENT: Gio.bus_watch_name_on_connection.guint
#COMMENT: The name (well-known or unique) to watch.
#NAME: can_eject
#PARENT: Gio.Mount.can_eject
#COMMENT: %TRUE if the @mount can be ejected.
#NAME: indent
#PARENT: Gio.DBusInterfaceInfo.generate_xml.none
#COMMENT: Indentation level.
#NAME: callback
#PARENT: Gio.FileOutputStream.query_info_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: OutputStream
#PARENT: Gio
#COMMENT: #GOutputStream has functions to write to a stream (g_output_stream_write()),
to close a stream (g_output_stream_close()) and to flush pending writes
(g_output_stream_flush()).

To copy the content of an input stream to an output stream without
manually handling the reads and writes, use g_output_stream_splice().

All of these functions have async variants too.
#NAME: str
#PARENT: Gio.icon_new_for_string.Icon
#COMMENT: A string obtained via g_icon_to_string().
#NAME: flags
#PARENT: Gio.FileIface.set_attributes_async.set_attributes_async.none
#COMMENT: a #GFileQueryInfoFlags
#NAME: BusNameWatcherFlags
#PARENT: Gio
#COMMENT: Flags used in g_bus_watch_name().
#NAME: get_generic_name
#PARENT: Gio.DesktopAppInfo
#COMMENT: Gets the generic name from the destkop file.
#NAME: flags
#PARENT: Gio.File.set_attributes_async.none
#COMMENT: a #GFileQueryInfoFlags
#NAME: get_base_stream
#PARENT: Gio.FilterOutputStream
#COMMENT: Gets the base stream for the filter stream.
#NAME: getenv
#PARENT: Gio.SubprocessLauncher
#COMMENT: Returns the value of the environment variable @variable in the
environment of processes launched from this launcher.

The returned string is in the GLib file name encoding.  On UNIX, this
means that it can be an arbitrary byte string.  On Windows, it will
be UTF-8.
#NAME: volume-changed
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when mountable volume is changed.
#NAME: pollable_source_new
#PARENT: Gio.pollable_source_new
#COMMENT: the new #GSource.
#NAME: get_interface
#PARENT: Gio.DBusMessage.get_interface
#COMMENT: The value.
#NAME: DBusInterfaceVTable
#PARENT: Gio
#COMMENT: Virtual table for handling properties and method calls for a D-Bus
interface.

Since 2.38, if you want to handle getting/setting D-Bus properties
asynchronously, give %NULL as your get_property() or set_property()
function. The D-Bus call will be directed to your @method_call function,
with the provided @interface_name set to "org.freedesktop.DBus.Properties".

Ownership of the #GDBusMethodInvocation object passed to the
method_call() function is transferred to your handler; you must
call one of the methods of #GDBusMethodInvocation to return a reply
(possibly empty), or an error. These functions also take ownership
of the passed-in invocation object, so unless the invocation
object has otherwise been referenced, it will be then be freed.
Calling one of these functions may be done within your
method_call() implementation but it also can be done at a later
point to handle the method asynchronously.

The usual checks on the validity of the calls is performed. For
`Get` calls, an error is automatically returned if the property does
not exist or the permissions do not allow access. The same checks are
performed for `Set` calls, and the provided value is also checked for
being the correct type.

For both `Get` and `Set` calls, the #GDBusMethodInvocation
passed to the @method_call handler can be queried with
g_dbus_method_invocation_get_property_info() to get a pointer
to the #GDBusPropertyInfo of the property.

If you have readable properties specified in your interface info,
you must ensure that you either provide a non-%NULL @get_property()
function or provide implementations of both the `Get` and `GetAll`
methods on org.freedesktop.DBus.Properties interface in your @method_call
function. Note that the required return type of the `Get` call is
`(v)`, not the type of the property. `GetAll` expects a return value
of type `a{sv}`.

If you have writable properties specified in your interface info,
you must ensure that you either provide a non-%NULL @set_property()
function or provide an implementation of the `Set` call. If implementing
the call, you must return the value of type %G_VARIANT_TYPE_UNIT.
#NAME: export
#PARENT: Gio.DBusInterfaceSkeleton.export
#COMMENT: %TRUE if the interface was exported on @connection, otherwise %FALSE with
@error set.
#NAME: object-path
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: The object path the manager is for.
#NAME: dbus_is_unique_name
#PARENT: Gio
#COMMENT: Checks if @string is a valid D-Bus unique bus name.
#NAME: app_info_get_recommended_for_type
#PARENT: Gio
#COMMENT: Gets a list of recommended #GAppInfos for a given content type, i.e.
those applications which claim to support the given content type exactly,
and not by MIME type subclassing.
Note that the first application of the list is the last used one, i.e.
the last one for which g_app_info_set_as_last_used_for_type() has been
called.
#NAME: g_iface
#PARENT: Gio.AsyncInitableIface
#COMMENT: The parent interface.
#NAME: attribute
#PARENT: Gio.File.set_attribute_uint64.gboolean
#COMMENT: a string containing the attribute's name
#NAME: is_writable
#PARENT: Gio.PollableOutputStream.is_writable
#COMMENT: %TRUE if @stream is writable, %FALSE if not. If an error
  has occurred on @stream, this will result in
  g_pollable_output_stream_is_writable() returning %TRUE, and the
  next attempt to write will return the error.
#NAME: new
#PARENT: Gio.DBusObjectProxy
#COMMENT: Creates a new #GDBusObjectProxy for the given connection and
object path.
#NAME: error
#PARENT: Gio.OutputStream.printf.gboolean
#COMMENT: location to store the error occurring, or %NULL to ignore
#NAME: buffer
#PARENT: Gio.Socket.receive.gssize
#COMMENT: a buffer to
    read data into (which should be at least @size bytes long).
#NAME: abstract_padded
#PARENT: Gio.UnixSocketAddressType
#COMMENT: an abstract name, 0-padded
  to the full length of a unix socket name
#NAME: get_proxy_type_func
#PARENT: Gio.DBusObjectManagerClient.new_for_bus_sync.DBusObjectManagerClient
#COMMENT: A #GDBusProxyTypeFunc function or %NULL to always construct #GDBusProxy proxies.
#NAME: stream
#PARENT: Gio.FileInputStreamClass.query_info.query_info.FileInfo
#COMMENT: a #GFileInputStream.
#NAME: DBusObjectManagerClientClass
#PARENT: Gio
#COMMENT: Class structure for #GDBusObjectManagerClient.
#NAME: error
#PARENT: Gio.DBusError.set_dbus_error.none
#COMMENT: A pointer to a #GError or %NULL.
#NAME: copy_attributes
#PARENT: Gio.File
#COMMENT: Copies the file attributes from @source to @destination.

Normally only a subset of the file attributes are copied,
those that are copies in a normal file copy operation
(which for instance does not include e.g. owner). However
if #G_FILE_COPY_ALL_METADATA is specified in @flags, then
all the metadata that is possible to copy is copied. This
is useful when implementing move by copy + delete source.
#NAME: user_data
#PARENT: Gio.SocketSourceFunc.gboolean
#COMMENT: data passed in by the user.
#NAME: flags
#PARENT: Gio.TestDBus.new.TestDBus
#COMMENT: a #GTestDBusFlags
#NAME: replace_readwrite
#PARENT: Gio.FileIface.replace_readwrite.replace_readwrite
#COMMENT: a #GFileIOStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: file
#PARENT: Gio.FileIface.has_uri_scheme.has_uri_scheme.gboolean
#COMMENT: input #GFile
#NAME: new_method_error_literal
#PARENT: Gio.DBusMessage.new_method_error_literal
#COMMENT: A #GDBusMessage. Free with g_object_unref().
#NAME: num_dirs
#PARENT: Gio.File.measure_disk_usage.gboolean
#COMMENT: the number of directories encountered
#NAME: SocketListenerEvent
#PARENT: Gio
#COMMENT: Describes an event occurring on a #GSocketListener. See the
#GSocketListener::event signal for more details.

Additional values may be added to this type in the future.
#NAME: mount_entry
#PARENT: Gio.unix_mount_guess_can_eject.gboolean
#COMMENT: a #GUnixMountEntry
#NAME: user_data
#PARENT: Gio.File.unmount_mountable.none
#COMMENT: the data to pass to callback function
#NAME: call_sync
#PARENT: Gio.DBusConnection.call_sync
#COMMENT: %NULL if @error is set. Otherwise a #GVariant tuple with
    return values. Free with g_variant_unref().
#NAME: bus_own_name_with_closures
#PARENT: Gio
#COMMENT: Version of g_bus_own_name() using closures instead of callbacks for
easier binding in other languages.
#NAME: flags
#PARENT: Gio.FileIface.set_attribute.set_attribute.gboolean
#COMMENT: a set of #GFileQueryInfoFlags
#NAME: big_endian
#PARENT: Gio.DBusMessageByteOrder
#COMMENT: The byte order is big endian.
#NAME: res
#PARENT: Gio.File.replace_readwrite_finish.FileIOStream
#COMMENT: a #GAsyncResult
#NAME: res
#PARENT: Gio.File.copy_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: flags
#PARENT: Gio.DBusProxy.call.none
#COMMENT: Flags from the #GDBusCallFlags enumeration.
#NAME: content_type
#PARENT: Gio.app_info_reset_type_associations.none
#COMMENT: a content type
#NAME: list
#PARENT: Gio.FileAttributeInfoList.unref.none
#COMMENT: The #GFileAttributeInfoList to unreference.
#NAME: n_entries
#PARENT: Gio.SimpleActionGroup.add_entries.none
#COMMENT: the length of @entries, or -1
#NAME: menu_item
#PARENT: Gio.MenuItem.get_link.MenuModel
#COMMENT: a #GMenuItem
#NAME: get_properties
#PARENT: Gio.DBusInterfaceSkeletonClass.get_properties.get_properties
#COMMENT: A #GVariant of type
['a{sv}'][G-VARIANT-TYPE-VARDICT:CAPS].
Free with g_variant_unref().
#NAME: value
#PARENT: Gio.DBusAnnotationInfo
#COMMENT: The value of the annotation.
#NAME: ResourceFlags
#PARENT: Gio
#COMMENT: GResourceFlags give information about a particular file inside a resource
bundle.
#NAME: get_name
#PARENT: Gio.MenuLinkIter.get_name
#COMMENT: the type of the link
#NAME: EmblemedIcon
#PARENT: Gio
#COMMENT: #GEmblemedIcon is an implementation of #GIcon that supports
adding an emblem to an icon. Adding multiple emblems to an
icon is ensured via g_emblemed_icon_add_emblem().

Note that #GEmblemedIcon allows no control over the position
of the emblems. See also #GEmblem for more information.
#NAME: cancellable
#PARENT: Gio.OutputStream.flush.gboolean
#COMMENT: optional cancellable object
#NAME: destination-protocol
#PARENT: Gio.ProxyAddress
#COMMENT: The protocol being spoke to the destination host, or %NULL if
the #GProxyAddress doesn't know.
#NAME: ProxyResolverInterface
#PARENT: Gio
#COMMENT: The virtual function table for #GProxyResolver.
#NAME: cancellable
#PARENT: Gio.PermissionClass.acquire_async.acquire_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: tell
#PARENT: Gio.SeekableIface.tell.tell
#COMMENT: the offset from the beginning of the buffer.
#NAME: new
#PARENT: Gio.UnixFDList
#COMMENT: Creates a new #GUnixFDList containing no file descriptors.
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeletonClass.get_properties.get_properties.GLib.Variant
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: create_finish
#PARENT: Gio.File.create_finish
#COMMENT: a #GFileOutputStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: no_auto_start
#PARENT: Gio.DBusMessageFlags
#COMMENT: The bus must not launch an
owner for the destination name in response to this message.
#NAME: cancellable
#PARENT: Gio.File.monitor.FileMonitor
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: io_priority
#PARENT: Gio.FileIface.replace_readwrite_async.replace_readwrite_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: query_info_finish
#PARENT: Gio.FileInputStreamClass.query_info_finish.query_info_finish
#COMMENT: #GFileInfo.
#NAME: can_mount
#PARENT: Gio.Volume
#COMMENT: Checks if a volume can be mounted.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.get_display_name.get_display_name.utf8
#COMMENT: a #GAppInfo.
#NAME: get_attribute_stringv
#PARENT: Gio.FileInfo.get_attribute_stringv
#COMMENT: the contents of the @attribute value as a stringv, or
%NULL otherwise. Do not free. These returned strings are UTF-8.
#NAME: subtract
#PARENT: Gio.FileAttributeMatcher.subtract.FileAttributeMatcher
#COMMENT: The matcher to subtract
#NAME: hash
#PARENT: Gio.File.hash
#COMMENT: 0 if @file is not a valid #GFile, otherwise an
    integer that can be used as hash value for the #GFile.
    This function is intended for easily hashing a #GFile to
    add to a #GHashTable or similar data structure.
#NAME: file
#PARENT: Gio.FileIface.mount_mountable.mount_mountable.none
#COMMENT: input #GFile
#NAME: proxy_auth_failed
#PARENT: Gio.IOErrorEnum
#COMMENT: Proxy authentication failed. Since 2.26
#NAME: file_exists
#PARENT: Gio.DBusError
#COMMENT: Existing file and the operation you're using does not silently overwrite.
#NAME: down
#PARENT: Gio.TestDBus
#COMMENT: Stop the session bus started by g_test_dbus_up().

This will wait for the singleton returned by g_bus_get() or g_bus_get_sync()
is destroyed. This is done to ensure that the next unit test won't get a
leaked singleton from this test.
#NAME: stream
#PARENT: Gio.DataInputStream.read_line.guint8
#COMMENT: a given #GDataInputStream.
#NAME: path
#PARENT: Gio.DBusMessage.new_signal.DBusMessage
#COMMENT: A valid object path.
#NAME: item
#PARENT: Gio.Menu.insert_item.none
#COMMENT: the #GMenuItem to insert
#NAME: parent_iface
#PARENT: Gio.DBusObjectManagerIface
#COMMENT: The parent interface.
#NAME: CancellableSourceFunc
#PARENT: Gio
#COMMENT: This is the function type of the callback used for the #GSource
returned by g_cancellable_source_new().
#NAME: connect_to_uri_finish
#PARENT: Gio.SocketClient
#COMMENT: Finishes an async connect operation. See g_socket_client_connect_to_uri_async()
#NAME: socket
#PARENT: Gio.SocketListener.event.none
#COMMENT: the #GSocket the event is occurring on
#NAME: resolver
#PARENT: Gio.ProxyResolver.lookup_async.none
#COMMENT: a #GProxyResolver
#NAME: settings
#PARENT: Gio.Settings.bind_with_mapping.none
#COMMENT: a #GSettings object
#NAME: get_listen_backlog
#PARENT: Gio.Socket.get_listen_backlog
#COMMENT: the maximum number of pending connections.
#NAME: mount-removed
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when a mount is removed.
#NAME: get_n_items
#PARENT: Gio.ListModelInterface.get_n_items.get_n_items
#COMMENT: the number of items in @list.
#NAME: ipv4
#PARENT: Gio.SocketFamily
#COMMENT: the IPv4 family
#NAME: entries
#PARENT: Gio.Application.add_main_option_entries.none
#COMMENT: a
          %NULL-terminated list of #GOptionEntrys
#NAME: read_byte
#PARENT: Gio.BufferedInputStream
#COMMENT: Tries to read a single byte from the stream or the buffer. Will block
during this read.

On success, the byte read from the stream is returned. On end of stream
-1 is returned but it's not an exceptional error and @error is not set.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.
#NAME: flags
#PARENT: Gio.Mount.eject.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: ipv6
#PARENT: Gio.SocketFamily
#COMMENT: the IPv6 family
#NAME: new_with_credentials
#PARENT: Gio.UnixCredentialsMessage.new_with_credentials
#COMMENT: a new #GUnixCredentialsMessage
#NAME: get_socket
#PARENT: Gio.SocketConnection
#COMMENT: Gets the underlying #GSocket object of the connection.
This can be useful if you want to do something unusual on it
not supported by the #GSocketConnection APIs.
#NAME: user_data
#PARENT: Gio.TlsDatabaseClass.verify_chain_async.verify_chain_async.none
#COMMENT: the data to pass to the callback function
#NAME: file
#PARENT: Gio.File.query_info_async.none
#COMMENT: input #GFile
#NAME: 
#PARENT: Gio.Subprocess.new.Subprocess...
#COMMENT: more commandline arguments, followed by %NULL
#NAME: dbus_error_register_error
#PARENT: Gio
#COMMENT: Creates an association to map between @dbus_error_name and
#GErrors specified by @error_domain and @error_code.

This is typically done in the routine that returns the #GQuark for
an error domain.
#NAME: res
#PARENT: Gio.AsyncResult.legacy_propagate_error.gboolean
#COMMENT: a #GAsyncResult
#NAME: ProxyInterface
#PARENT: Gio
#COMMENT: Provides an interface for handling proxy connection and payload.
#NAME: application_name
#PARENT: Gio.AppInfo.create_from_commandline.AppInfo
#COMMENT: the application name, or %NULL to use @commandline
#NAME: io_priority
#PARENT: Gio.FileIface.make_directory_async.make_directory_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: n_files
#PARENT: Gio.Application.open.none
#COMMENT: the length of @files
#NAME: hash
#PARENT: Gio.FileIface.hash.hash
#COMMENT: 0 if @file is not a valid #GFile, otherwise an
    integer that can be used as hash value for the #GFile.
    This function is intended for easily hashing a #GFile to
    add to a #GHashTable or similar data structure.
#NAME: ApplicationCommandLineClass
#PARENT: Gio
#COMMENT: The #GApplicationCommandLineClass-struct
contains private data only.
#NAME: enumerator
#PARENT: Gio.FileEnumerator.close_async.none
#COMMENT: a #GFileEnumerator.
#NAME: list
#PARENT: Gio.ListModel.get_item_type.GType
#COMMENT: a #GListModel
#NAME: list_children
#PARENT: Gio.Settings
#COMMENT: Gets the list of children on @settings.

The list is exactly the list of strings for which it is not an error
to call g_settings_get_child().

For GSettings objects that are lists, this value can change at any
time and you should connect to the "children-changed" signal to watch
for those changes.  Note that there is a race condition here: you may
request a child after listing it only for it to have been destroyed
in the meantime.  For this reason, g_settings_get_child() may return
%NULL even for a child that was listed by this function.

For GSettings objects that are not lists, you should probably not be
calling this function from "normal" code (since you should already
know what children are in your schema).  This function may still be
useful there for introspection reasons, however.

You should free the return value with g_strfreev() when you are done
with it.
#NAME: self
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle_async.lookup_certificate_for_handle_async.none
#COMMENT: a #GTlsDatabase
#NAME: result
#PARENT: Gio.SocketClient.connect_finish.SocketConnection
#COMMENT: a #GAsyncResult.
#NAME: list_relocatable_schemas
#PARENT: Gio.Settings.list_relocatable_schemas
#COMMENT: a list of relocatable
  #GSettings schemas that are available.  The list must not be
  modified or freed.
#NAME: connection
#PARENT: Gio.UnixConnection.receive_credentials_async.none
#COMMENT: A #GUnixConnection.
#NAME: removed
#PARENT: Gio.MenuModel.items_changed.none
#COMMENT: the number of items removed
#NAME: addr
#PARENT: Gio.NetworkAddress.get_hostname.utf8
#COMMENT: a #GNetworkAddress
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.free.none
#COMMENT: unix mount point to free.
#NAME: stream
#PARENT: Gio.DataInputStream.read_until.utf8
#COMMENT: a given #GDataInputStream.
#NAME: file_new_for_path
#PARENT: Gio.file_new_for_path
#COMMENT: a new #GFile for the given @path.
  Free the returned object with g_object_unref().
#NAME: start_finish
#PARENT: Gio.Drive.start_finish
#COMMENT: %TRUE if the drive has been started successfully,
    %FALSE otherwise.
#NAME: name
#PARENT: Gio.DBusMessage.new_method_call.DBusMessage
#COMMENT: A valid D-Bus name or %NULL.
#NAME: limited
#PARENT: Gio.NetworkConnectivity
#COMMENT: The host is connected to a network, but
  does not appear to be able to reach the full Internet, perhaps
  due to upstream network problems.
#NAME: ttl
#PARENT: Gio.Socket
#COMMENT: Time-to-live for outgoing unicast packets
#NAME: start_mountable_finish
#PARENT: Gio.File.start_mountable_finish
#COMMENT: %TRUE if the operation finished successfully. %FALSE
otherwise.
#NAME: FileIOStream
#PARENT: Gio
#COMMENT: GFileIOStream provides io streams that both read and write to the same
file handle.

GFileIOStream implements #GSeekable, which allows the io
stream to jump to arbitrary positions in the file and to truncate
the file, provided the filesystem of the file supports these
operations.

To find the position of a file io stream, use
g_seekable_tell().

To find out if a file io stream supports seeking, use g_seekable_can_seek().
To position a file io stream, use g_seekable_seek().
To find out if a file io stream supports truncating, use
g_seekable_can_truncate(). To truncate a file io
stream, use g_seekable_truncate().

The default implementation of all the #GFileIOStream operations
and the implementation of #GSeekable just call into the same operations
on the output stream.
#NAME: info
#PARENT: Gio.FileInfo.get_modification_time.none
#COMMENT: a #GFileInfo.
#NAME: get_is_backup
#PARENT: Gio.FileInfo
#COMMENT: Checks if a file is a backup file.
#NAME: server
#PARENT: Gio.DBusServer.get_client_address.utf8
#COMMENT: A #GDBusServer.
#NAME: stream
#PARENT: Gio.PollableOutputStream.is_writable.gboolean
#COMMENT: a #GPollableOutputStream.
#NAME: user_data
#PARENT: Gio.FileEnumerator.next_files_async.none
#COMMENT: the data to pass to callback function
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.set_flags.none
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: callback
#PARENT: Gio.FileIface.open_readwrite_async.open_readwrite_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: user_data
#PARENT: Gio.File.load_contents_async.none
#COMMENT: the data to pass to callback function
#NAME: mount_finish
#PARENT: Gio.VolumeIface.mount_finish.mount_finish
#COMMENT: %TRUE, %FALSE if operation failed
#NAME: count
#PARENT: Gio.BufferedInputStream.peek_buffer.guint8
#COMMENT: a #gsize to get the number of bytes available in the buffer
#NAME: launch_context
#PARENT: Gio.AppInfo.launch_default_for_uri.gboolean
#COMMENT: an optional #GAppLaunchContext.
#NAME: icon_deserialize
#PARENT: Gio
#COMMENT: Deserializes a #GIcon previously serialized using g_icon_serialize().
#NAME: cancellable
#PARENT: Gio.FileIface.replace_readwrite.replace_readwrite.FileIOStream
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: info
#PARENT: Gio.FileIface.set_attributes_from_info.set_attributes_from_info.gboolean
#COMMENT: a #GFileInfo
#NAME: callback
#PARENT: Gio.File.poll_mountable.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: message
#PARENT: Gio.DBusMessage.set_message_type.none
#COMMENT: A #GDBusMessage.
#NAME: attribute
#PARENT: Gio.FileInfo.set_attribute_stringv.none
#COMMENT: a file attribute key
#NAME: appinfo
#PARENT: Gio.AppInfoIface.supports_uris.supports_uris.gboolean
#COMMENT: a #GAppInfo.
#NAME: action_group
#PARENT: Gio.ActionGroup.action_enabled_changed.none
#COMMENT: a #GActionGroup
#NAME: ask_password_finish
#PARENT: Gio.TlsInteraction
#COMMENT: Complete an ask password user interaction request. This should be once
the g_tls_interaction_ask_password_async() completion callback is called.

If %G_TLS_INTERACTION_HANDLED is returned, then the #GTlsPassword passed
to g_tls_interaction_ask_password() will have its password filled in.

If the interaction is cancelled by the cancellation object, or by the
user then %G_TLS_INTERACTION_FAILED will be returned with an error that
contains a %G_IO_ERROR_CANCELLED error code.
#NAME: set_attribute_uint32
#PARENT: Gio.File.set_attribute_uint32
#COMMENT: %TRUE if the @attribute was successfully set to @value
    in the @file, %FALSE otherwise.
#NAME: purpose
#PARENT: Gio.TlsDatabaseClass.verify_chain.verify_chain.TlsCertificateFlags
#COMMENT: the purpose that this certificate chain will be used for.
#NAME: lookup_by_address_async
#PARENT: Gio.Resolver
#COMMENT: Begins asynchronously reverse-resolving @address to determine its
associated hostname, and eventually calls @callback, which must
call g_resolver_lookup_by_address_finish() to get the final result.
#NAME: range_check
#PARENT: Gio.SettingsSchemaKey.range_check
#COMMENT: %TRUE if @value is valid for @key
#NAME: message
#PARENT: Gio.SocketControlMessageClass.get_level.get_level.gint
#COMMENT: a #GSocketControlMessage
#NAME: interface-removed
#PARENT: Gio.DBusObject
#COMMENT: Emitted when @interface is removed from @object.
#NAME: address
#PARENT: Gio.DBusConnection.new_for_address.none
#COMMENT: a D-Bus address
#NAME: file
#PARENT: Gio.File.unmount_mountable_with_operation.none
#COMMENT: input #GFile
#NAME: base_io_stream
#PARENT: Gio.TcpWrapperConnection.new.SocketConnection
#COMMENT: the #GIOStream to wrap
#NAME: client
#PARENT: Gio.SocketClient.set_socket_type.none
#COMMENT: a #GSocketClient.
#NAME: etag_out
#PARENT: Gio.File.load_partial_contents_finish.gboolean
#COMMENT: a location to place the current entity tag for the file,
    or %NULL if the entity tag is not needed
#NAME: cancellable
#PARENT: Gio.Volume.mount_fn.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: file
#PARENT: Gio.File.set_display_name_finish.File
#COMMENT: input #GFile
#NAME: callback
#PARENT: Gio.File.stop_mountable.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: query_settable_attributes
#PARENT: Gio.File.query_settable_attributes
#COMMENT: a #GFileAttributeInfoList describing the settable attributes.
    When you are done with it, release it with
    g_file_attribute_info_list_unref()
#NAME: path
#PARENT: Gio.Resource.lookup_data.GLib.Bytes
#COMMENT: A pathname inside the resource
#NAME: callback
#PARENT: Gio.Cancellable.connect.gulong
#COMMENT: The #GCallback to connect.
#NAME: ask_password_finish
#PARENT: Gio.TlsInteraction.ask_password_finish
#COMMENT: The status of the ask password interaction.
#NAME: notification
#PARENT: Gio.Notification.set_body.none
#COMMENT: a #GNotification
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.set_from_error.none
#COMMENT: a #GSimpleAsyncResult.
#NAME: get_object_path
#PARENT: Gio.DBusObjectManager.get_object_path
#COMMENT: A string owned by @manager. Do not free.
#NAME: flags
#PARENT: Gio.DBusServer.new_sync.DBusServer
#COMMENT: Flags from the #GDBusServerFlags enumeration.
#NAME: get_id
#PARENT: Gio.SettingsSchema
#COMMENT: Get the ID of @schema.
#NAME: callback
#PARENT: Gio.Volume.mount_fn.none
#COMMENT: a #GAsyncReadyCallback, or %NULL
#NAME: password-save
#PARENT: Gio.MountOperation
#COMMENT: Determines if and how the password information should be saved.
#NAME: password
#PARENT: Gio.TlsPassword.get_flags.TlsPasswordFlags
#COMMENT: a #GTlsPassword object
#NAME: name
#PARENT: Gio.bus_watch_name_with_closures.guint
#COMMENT: The name (well-known or unique) to watch.
#NAME: extension
#PARENT: Gio.IOExtension.get_type.GType
#COMMENT: a #GIOExtension
#NAME: ostream
#PARENT: Gio.MemoryOutputStream.get_data_size.gsize
#COMMENT: a #GMemoryOutputStream
#NAME: get_item_attribute_value
#PARENT: Gio.MenuModel
#COMMENT: Queries the item at position @item_index in @model for the attribute
specified by @attribute.

If @expected_type is non-%NULL then it specifies the expected type of
the attribute.  If it is %NULL then any type will be accepted.

If the attribute exists and matches @expected_type (or if the
expected type is unspecified) then the value is returned.

If the attribute does not exist, or does not match the expected type
then %NULL is returned.
#NAME: cancellable
#PARENT: Gio.File.find_enclosing_mount.Mount
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_completion_suffix
#PARENT: Gio.FilenameCompleter.get_completion_suffix
#COMMENT: a completed string, or %NULL if no completion exists.
    This string is not owned by GIO, so remember to g_free() it
    when finished.
#NAME: cancellable
#PARENT: Gio.Mount.guess_content_type.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: name
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: The name of the D-Bus interface, e.g. "org.freedesktop.DBus.Properties".
#NAME: subprocess
#PARENT: Gio.Subprocess.communicate_utf8_async.none
#COMMENT: Self
#NAME: time
#PARENT: Gio.unix_mount_points_changed_since.gboolean
#COMMENT: guint64 to contain a timestamp.
#NAME: res
#PARENT: Gio.AsyncReadyCallback.none
#COMMENT: a #GAsyncResult.
#NAME: stream
#PARENT: Gio.OutputStreamClass.write_async.write_async.none
#COMMENT: A #GOutputStream.
#NAME: platform_data
#PARENT: Gio.AppLaunchContext.launched.none
#COMMENT: additional platform-specific data for this launch
#NAME: file
#PARENT: Gio.File.start_mountable_finish.gboolean
#COMMENT: input #GFile
#NAME: receive
#PARENT: Gio.Socket.receive
#COMMENT: Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error
#NAME: can_eject
#PARENT: Gio.VolumeIface.can_eject.can_eject
#COMMENT: %TRUE if the @volume can be ejected. %FALSE otherwise
#NAME: close
#PARENT: Gio.IOStream.close
#COMMENT: %TRUE on success, %FALSE on failure
#NAME: callback
#PARENT: Gio.NetworkMonitor.can_reach_async.none
#COMMENT: a #GAsyncReadyCallback to call when the
    request is satisfied
#NAME: user_data
#PARENT: Gio.OutputStreamClass.splice_async.splice_async.none
#COMMENT: user data passed to @callback.
#NAME: error
#PARENT: Gio.Subprocess.new.Subprocess
#COMMENT: return location for an error, or %NULL
#NAME: app_info_get_default_for_type
#PARENT: Gio
#COMMENT: Gets the default #GAppInfo for a given content type.
#NAME: method_name
#PARENT: Gio.DBusConnection.call_sync.GLib.Variant
#COMMENT: the name of the method to invoke
#NAME: exit-on-close
#PARENT: Gio.DBusConnection
#COMMENT: A boolean specifying whether the process will be terminated (by
calling `raise(SIGTERM)`) if the connection is closed by the
remote peer.

Note that #GDBusConnection objects returned by g_bus_get_finish()
and g_bus_get_sync() will (usually) have this property set to %TRUE.
#NAME: receive_credentials
#PARENT: Gio.UnixConnection
#COMMENT: Receives credentials from the sending end of the connection.  The
sending end has to call g_unix_connection_send_credentials() (or
similar) for this to work.

As well as reading the credentials this also reads (and discards) a
single byte from the stream, as this is required for credentials
passing to work on some implementations.

Other ways to exchange credentials with a foreign peer includes the
#GUnixCredentialsMessage type and g_socket_get_credentials() function.
#NAME: callback
#PARENT: Gio.File.replace_contents_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: clear_status
#PARENT: Gio.FileInfo
#COMMENT: Clears the status information from @info.
#NAME: query_action
#PARENT: Gio.ActionGroup
#COMMENT: Queries all aspects of the named action within an @action_group.

This function acquires the information available from
g_action_group_has_action(), g_action_group_get_action_enabled(),
g_action_group_get_action_parameter_type(),
g_action_group_get_action_state_type(),
g_action_group_get_action_state_hint() and
g_action_group_get_action_state() with a single function call.

This provides two main benefits.

The first is the improvement in efficiency that comes with not having
to perform repeated lookups of the action in order to discover
different things about it.  The second is that implementing
#GActionGroup can now be done by only overriding this one virtual
function.

The interface provides a default implementation of this function that
calls the individual functions, as required, to fetch the
information.  The interface also provides default implementations of
those functions that call this function.  All implementations,
therefore, must override either this function or all of the others.

If the action exists, %TRUE is returned and any of the requested
fields (as indicated by having a non-%NULL reference passed in) are
filled.  If the action doesn't exist, %FALSE is returned and the
fields may or may not have been modified.
#NAME: urgent
#PARENT: Gio.NotificationPriority
#COMMENT: for urgent notifications, or notifications
  that require a response in a short space of time (for example phone calls
  or emergency warnings)
#NAME: current_num_bytes
#PARENT: Gio.FileProgressCallback.none
#COMMENT: the current number of bytes in the operation.
#NAME: menu
#PARENT: Gio.Menu.insert.none
#COMMENT: a #GMenu
#NAME: volume
#PARENT: Gio.VolumeIface.get_identifier.get_identifier.utf8
#COMMENT: a #GVolume
#NAME: flags
#PARENT: Gio.TlsDatabase.verify_chain_async.none
#COMMENT: additional verify flags
#NAME: user_data
#PARENT: Gio.DBusConnection.new_for_address.none
#COMMENT: the data to pass to @callback
#NAME: get_size
#PARENT: Gio.MemoryOutputStream
#COMMENT: Gets the size of the currently allocated data area (available from
g_memory_output_stream_get_data()).

You probably don't want to use this function on resizable streams.
See g_memory_output_stream_get_data_size() instead.  For resizable
streams the size returned by this function is an implementation
detail and may be change at any time in response to operations on the
stream.

If the stream is fixed-sized (ie: no realloc was passed to
g_memory_output_stream_new()) then this is the maximum size of the
stream and further writes will return %G_IO_ERROR_NO_SPACE.

In any case, if you want the number of bytes currently written to the
stream, use g_memory_output_stream_get_data_size().
#NAME: stream
#PARENT: Gio.FileIOStream.get_etag.utf8
#COMMENT: a #GFileIOStream.
#NAME: issuer_raw_dn
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by_async.lookup_certificates_issued_by_async.none
#COMMENT: a #GByteArray which holds the DER encoded issuer DN.
#NAME: get_double
#PARENT: Gio.Settings.get_double
#COMMENT: a double
#NAME: flags
#PARENT: Gio.File.monitor_dir.FileMonitor
#COMMENT: a set of #GFileMonitorFlags
#NAME: force_rescan
#PARENT: Gio.Mount.guess_content_type_sync.utf8
#COMMENT: Whether to force a rescan of the content.
    Otherwise a cached result will be used if available
#NAME: can_release
#PARENT: Gio.Permission.impl_update.none
#COMMENT: the new value for the 'can-release' property
#NAME: length
#PARENT: Gio.TlsPassword.get_value.guint8
#COMMENT: location to place the length of the password.
#NAME: new
#PARENT: Gio.CharsetConverter.new
#COMMENT: a new #GCharsetConverter or %NULL on error.
#NAME: cancellable
#PARENT: Gio.PollableInputStreamInterface.create_source.create_source.GLib.Source
#COMMENT: a #GCancellable, or %NULL
#NAME: put_byte
#PARENT: Gio.DataOutputStream.put_byte
#COMMENT: %TRUE if @data was successfully added to the @stream.
#NAME: cancellable
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle_async.lookup_certificate_for_handle_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: matcher
#PARENT: Gio.FileAttributeMatcher.subtract.FileAttributeMatcher
#COMMENT: Matcher to subtract from
#NAME: set_attributes_from_info
#PARENT: Gio.File
#COMMENT: Tries to set all attributes in the #GFileInfo on the target
values, not stopping on the first error.

If there is any error during this operation then @error will
be set to the first error. Error on particular fields are flagged
by setting the "status" field in the attribute value to
%G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING, which means you can
also detect further errors.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: cant_create_backup
#PARENT: Gio.IOErrorEnum
#COMMENT: Backup couldn't be created.
#NAME: quark
#PARENT: Gio.ResourceError
#COMMENT: Gets the #GResource Error Quark.
#NAME: model
#PARENT: Gio.MenuModel.get_item_attribute.gboolean
#COMMENT: a #GMenuModel
#NAME: count
#PARENT: Gio.InputStream.read.gssize
#COMMENT: the number of bytes that will be read from the stream
#NAME: auth_failed
#PARENT: Gio.DBusError
#COMMENT: Authentication didn't work.
#NAME: flags
#PARENT: Gio.FileIface.measure_disk_usage_async.measure_disk_usage_async.none
#COMMENT: #GFileMeasureFlags
#NAME: eject_mountable_finish
#PARENT: Gio.File.eject_mountable_finish
#COMMENT: %TRUE if the @file was ejected successfully.
    %FALSE otherwise.
#NAME: get_is_busy
#PARENT: Gio.Application.get_is_busy
#COMMENT: %TRUE if @application is currenty marked as busy
#NAME: user_data
#PARENT: Gio.Subprocess.wait_async.none
#COMMENT: user_data for @callback
#NAME: result
#PARENT: Gio.VolumeIface.eject_finish.eject_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: get_object_path
#PARENT: Gio.DBusObject.get_object_path
#COMMENT: A string owned by @object. Do not free.
#NAME: launch_context
#PARENT: Gio.app_info_launch_default_for_uri.gboolean
#COMMENT: an optional #GAppLaunchContext.
#NAME: address
#PARENT: Gio.InetSocketAddress.new.SocketAddress
#COMMENT: a #GInetAddress
#NAME: chain
#PARENT: Gio.TlsDatabaseClass.verify_chain.verify_chain.TlsCertificateFlags
#COMMENT: a #GTlsCertificate chain
#NAME: set_error_name
#PARENT: Gio.DBusMessage
#COMMENT: Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field.
#NAME: message
#PARENT: Gio.SocketControlMessage.serialize.none
#COMMENT: a #GSocketControlMessage
#NAME: get_default_value
#PARENT: Gio.SettingsSchemaKey.get_default_value
#COMMENT: the default value for the key
#NAME: callback
#PARENT: Gio.async_initable_newv_async.none
#COMMENT: a #GAsyncReadyCallback to call when the initialization is
    finished
#NAME: add
#PARENT: Gio.FileAttributeInfoList
#COMMENT: Adds a new attribute with @name to the @list, setting
its @type and @flags.
#NAME: drive
#PARENT: Gio.Drive.stop_finish.gboolean
#COMMENT: a #GDrive.
#NAME: VOLUME_IDENTIFIER_KIND_HAL_UDI
#PARENT: Gio
#COMMENT: The string used to obtain a Hal UDI with g_volume_get_identifier().
#NAME: task
#PARENT: Gio.Task.get_completed.gboolean
#COMMENT: a #GTask.
#NAME: io_priority
#PARENT: Gio.FileIface.query_filesystem_info_async.query_filesystem_info_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: stream
#PARENT: Gio.InputStream.skip_async.none
#COMMENT: A #GInputStream.
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.get_action_parameter_type.get_action_parameter_type.GLib.VariantType
#COMMENT: the name of the action to query
#NAME: progress_callback
#PARENT: Gio.File.move.gboolean
#COMMENT: #GFileProgressCallback
    function for updates
#NAME: get_int
#PARENT: Gio.Settings
#COMMENT: Gets the value that is stored at @key in @settings.

A convenience variant of g_settings_get() for 32-bit integers.

It is a programmer error to give a @key that isn't specified as
having a int32 type in the schema for @settings.
#NAME: cancellable
#PARENT: Gio.SimpleAsyncThreadFunc.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: flags
#PARENT: Gio.DriveIface.eject.eject.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: action
#PARENT: Gio.Action.get_state_hint.GLib.Variant
#COMMENT: a #GAction
#NAME: add_address
#PARENT: Gio.SocketListener.add_address
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: cancellable
#PARENT: Gio.Cancellable.disconnect.none
#COMMENT: A #GCancellable or %NULL.
#NAME: FILE_ATTRIBUTE_STANDARD_ICON
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the icon for the file.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.
The value for this key should contain a #GIcon.
#NAME: set_application_id
#PARENT: Gio.Application
#COMMENT: Sets the unique identifier for @application.

The application id can only be modified if @application has not yet
been registered.

If non-%NULL, the application id must be valid.  See
g_application_id_is_valid().
#NAME: op
#PARENT: Gio.MountOperation.get_username.utf8
#COMMENT: a #GMountOperation.
#NAME: get_default_value
#PARENT: Gio.Settings.get_default_value
#COMMENT: the default value
#NAME: get_attribute
#PARENT: Gio.MenuItem
#COMMENT: Queries the named @attribute on @menu_item.

If the attribute exists and matches the #GVariantType corresponding
to @format_string then @format_string is used to deconstruct the
value into the positional parameters and %TRUE is returned.

If the attribute does not exist, or it does exist but has the wrong
type, then the positional parameters are ignored and %FALSE is
returned.
#NAME: peek
#PARENT: Gio.SocketMsgFlags
#COMMENT: Read data from the socket without removing it from
    the queue.
#NAME: new
#PARENT: Gio.DBusObjectSkeleton.new
#COMMENT: A #GDBusObjectSkeleton. Free with g_object_unref().
#NAME: get_mounts
#PARENT: Gio.VolumeMonitorClass.get_mounts.get_mounts
#COMMENT: a #GList of #GMount objects.
#NAME: SimpleAsyncResult
#PARENT: Gio
#COMMENT: As of GLib 2.36, #GSimpleAsyncResult is deprecated in favor of
#GTask, which provides a simpler API.

#GSimpleAsyncResult implements #GAsyncResult.

GSimpleAsyncResult handles #GAsyncReadyCallbacks, error
reporting, operation cancellation and the final state of an operation,
completely transparent to the application. Results can be returned
as a pointer e.g. for functions that return data that is collected
asynchronously, a boolean value for checking the success or failure
of an operation, or a #gssize for operations which return the number
of bytes modified by the operation; all of the simple return cases
are covered.

Most of the time, an application will not need to know of the details
of this API; it is handled transparently, and any necessary operations
are handled by #GAsyncResult's interface. However, if implementing a
new GIO module, for writing language bindings, or for complex
applications that need better control of how asynchronous operations
are completed, it is important to understand this functionality.

GSimpleAsyncResults are tagged with the calling function to ensure
that asynchronous functions and their finishing functions are used
together correctly.

To create a new #GSimpleAsyncResult, call g_simple_async_result_new().
If the result needs to be created for a #GError, use
g_simple_async_result_new_from_error() or
g_simple_async_result_new_take_error(). If a #GError is not available
(e.g. the asynchronous operation's doesn't take a #GError argument),
but the result still needs to be created for an error condition, use
g_simple_async_result_new_error() (or g_simple_async_result_set_error_va()
if your application or binding requires passing a variable argument list
directly), and the error can then be propagated through the use of
g_simple_async_result_propagate_error().

An asynchronous operation can be made to ignore a cancellation event by
calling g_simple_async_result_set_handle_cancellation() with a
#GSimpleAsyncResult for the operation and %FALSE. This is useful for
operations that are dangerous to cancel, such as close (which would
cause a leak if cancelled before being run).

GSimpleAsyncResult can integrate into GLib's event loop, #GMainLoop,
or it can use #GThreads.
g_simple_async_result_complete() will finish an I/O task directly
from the point where it is called. g_simple_async_result_complete_in_idle()
will finish it from an idle handler in the
[thread-default main context][g-main-context-push-thread-default]
. g_simple_async_result_run_in_thread() will run the
job in a separate thread and then deliver the result to the
thread-default main context.

To set the results of an asynchronous function,
g_simple_async_result_set_op_res_gpointer(),
g_simple_async_result_set_op_res_gboolean(), and
g_simple_async_result_set_op_res_gssize()
are provided, setting the operation's result to a gpointer, gboolean, or
gssize, respectively.

Likewise, to get the result of an asynchronous function,
g_simple_async_result_get_op_res_gpointer(),
g_simple_async_result_get_op_res_gboolean(), and
g_simple_async_result_get_op_res_gssize() are
provided, getting the operation's result as a gpointer, gboolean, and
gssize, respectively.

For the details of the requirements implementations must respect, see
#GAsyncResult.  A typical implementation of an asynchronous operation
using GSimpleAsyncResult looks something like this:

|[<!-- language="C" -->
static void
baked_cb (Cake    *cake,
          gpointer user_data)
{
  // In this example, this callback is not given a reference to the cake,
  // so the GSimpleAsyncResult has to take a reference to it.
  GSimpleAsyncResult *result = user_data;

  if (cake == NULL)
    g_simple_async_result_set_error (result,
                                     BAKER_ERRORS,
                                     BAKER_ERROR_NO_FLOUR,
                                     "Go to the supermarket");
  else
    g_simple_async_result_set_op_res_gpointer (result,
                                               g_object_ref (cake),
                                               g_object_unref);


  // In this example, we assume that baked_cb is called as a callback from
  // the mainloop, so it's safe to complete the operation synchronously here.
  // If, however, _baker_prepare_cake () might call its callback without
  // first returning to the mainloop — inadvisable, but some APIs do so —
  // we would need to use g_simple_async_result_complete_in_idle().
  g_simple_async_result_complete (result);
  g_object_unref (result);
}

void
baker_bake_cake_async (Baker              *self,
                       guint               radius,
                       GAsyncReadyCallback callback,
                       gpointer            user_data)
{
  GSimpleAsyncResult *simple;
  Cake               *cake;

  if (radius < 3)
    {
      g_simple_async_report_error_in_idle (G_OBJECT (self),
                                           callback,
                                           user_data,
                                           BAKER_ERRORS,
                                           BAKER_ERROR_TOO_SMALL,
                                           "%ucm radius cakes are silly",
                                           radius);
      return;
    }

  simple = g_simple_async_result_new (G_OBJECT (self),
                                      callback,
                                      user_data,
                                      baker_bake_cake_async);
  cake = _baker_get_cached_cake (self, radius);

  if (cake != NULL)
    {
      g_simple_async_result_set_op_res_gpointer (simple,
                                                 g_object_ref (cake),
                                                 g_object_unref);
      g_simple_async_result_complete_in_idle (simple);
      g_object_unref (simple);
      // Drop the reference returned by _baker_get_cached_cake();
      // the GSimpleAsyncResult has taken its own reference.
      g_object_unref (cake);
      return;
    }

  _baker_prepare_cake (self, radius, baked_cb, simple);
}

Cake *
baker_bake_cake_finish (Baker        *self,
                        GAsyncResult *result,
                        GError      **error)
{
  GSimpleAsyncResult *simple;
  Cake               *cake;

  g_return_val_if_fail (g_simple_async_result_is_valid (result,
                                                        G_OBJECT (self),
                                                        baker_bake_cake_async),
                        NULL);

  simple = (GSimpleAsyncResult *) result;

  if (g_simple_async_result_propagate_error (simple, error))
    return NULL;

  cake = CAKE (g_simple_async_result_get_op_res_gpointer (simple));
  return g_object_ref (cake);
}
]|
#NAME: get_msg_type
#PARENT: Gio.SocketControlMessage.get_msg_type
#COMMENT: an integer describing the type of control message
#NAME: get_sort_key
#PARENT: Gio.Volume.get_sort_key
#COMMENT: Sorting key for @volume or %NULL if no such key is available
#NAME: callback
#PARENT: Gio.AsyncInitableIface.init_async.init_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: query_action
#PARENT: Gio.ActionGroupInterface.query_action.query_action
#COMMENT: %TRUE if the action exists, else %FALSE
#NAME: user_data
#PARENT: Gio.OutputStream.write_all_async.none
#COMMENT: the data to pass to callback function
#NAME: socket
#PARENT: Gio.Socket.condition_check.GLib.IOCondition
#COMMENT: a #GSocket
#NAME: user_data_free_func
#PARENT: Gio.bus_own_name_on_connection.guint
#COMMENT: function for freeing @user_data or %NULL
#NAME: etag
#PARENT: Gio.File.replace_contents_async.none
#COMMENT: a new [entity tag][gfile-etag] for the @file, or %NULL
#NAME: get_use_system_certdb
#PARENT: Gio.TlsConnection.get_use_system_certdb
#COMMENT: whether @conn uses the system certificate database
#NAME: stream
#PARENT: Gio.InputStreamClass.read_finish.read_finish.gssize
#COMMENT: a #GInputStream.
#NAME: parameter-type
#PARENT: Gio.Action
#COMMENT: The type of the parameter that must be given when activating the
action. This is immutable, and may be %NULL if no parameter is needed when
activating the action.
#NAME: self
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer_finish.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: get_path
#PARENT: Gio.DBusMessage
#COMMENT: Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_PATH header field.
#NAME: permission
#PARENT: Gio.PermissionClass.acquire_finish.acquire_finish.gboolean
#COMMENT: a #GPermission instance
#NAME: buffer
#PARENT: Gio.BufferedInputStream.peek.gsize
#COMMENT: a pointer to
  an allocated chunk of memory
#NAME: credentials
#PARENT: Gio.Credentials.get_unix_user.guint
#COMMENT: A #GCredentials
#NAME: no_xdev
#PARENT: Gio.FileMeasureFlags
#COMMENT: Do not cross mount point boundaries.
  Compare with `du -x`.
#NAME: file
#PARENT: Gio.File.delete_async.none
#COMMENT: input #GFile
#NAME: user_data
#PARENT: Gio.PollableSourceFunc.gboolean
#COMMENT: data passed in by the user.
#NAME: user_data
#PARENT: Gio.File.mount_mountable.none
#COMMENT: the data to pass to callback function
#NAME: all_metadata
#PARENT: Gio.FileCopyFlags
#COMMENT: Copy all file metadata instead of just default set used for copy (see #GFileInfo).
#NAME: content_type_can_be_executable
#PARENT: Gio.content_type_can_be_executable
#COMMENT: %TRUE if the file type corresponds to a type that
    can be executable, %FALSE otherwise.
#NAME: info
#PARENT: Gio.FileInfo.set_file_type.none
#COMMENT: a #GFileInfo.
#NAME: task
#PARENT: Gio.Task.return_error.none
#COMMENT: a #GTask.
#NAME: timeout_msec
#PARENT: Gio.DBusProxy.call.none
#COMMENT: The timeout in milliseconds (with %G_MAXINT meaning
               "infinite") or -1 to use the proxy default timeout.
#NAME: io_priority
#PARENT: Gio.FileIOStream.query_info_async.none
#COMMENT: the [I/O priority][gio-GIOScheduler] of the request
#NAME: get_nodisplay
#PARENT: Gio.DesktopAppInfo
#COMMENT: Gets the value of the NoDisplay key, which helps determine if the
application info should be shown in menus. See
#G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY and g_app_info_should_show().
#NAME: need_password
#PARENT: Gio.AskPasswordFlags
#COMMENT: operation requires a password.
#NAME: proxy
#PARENT: Gio.DBusProxy.get_cached_property.GLib.Variant
#COMMENT: A #GDBusProxy.
#NAME: is-mc-node-local
#PARENT: Gio.InetAddress
#COMMENT: Whether this is a node-local multicast address.
See g_inet_address_get_is_mc_node_local().
#NAME: get_multicast_loopback
#PARENT: Gio.Socket.get_multicast_loopback
#COMMENT: the multicast loopback setting on @socket
#NAME: result
#PARENT: Gio.MountIface.eject_with_operation_finish.eject_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: contents
#PARENT: Gio.File.replace_contents_bytes_async.none
#COMMENT: a #GBytes
#NAME: MountIface
#PARENT: Gio
#COMMENT: Interface for implementing operations for mounts.
#NAME: context
#PARENT: Gio.AppLaunchContext.get_startup_notify_id.utf8
#COMMENT: a #GAppLaunchContext
#NAME: name_vanished_handler
#PARENT: Gio.bus_watch_name_on_connection.guint
#COMMENT: Handler to invoke when @name is known to not exist or %NULL.
#NAME: mount_enclosing_volume
#PARENT: Gio.File
#COMMENT: Starts a @mount_operation, mounting the volume that contains
the file @location.

When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with
g_file_mount_enclosing_volume_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: enabled
#PARENT: Gio.ActionGroup.action_enabled_changed.none
#COMMENT: whether or not the action is now enabled
#NAME: settings
#PARENT: Gio.Settings.set_value.gboolean
#COMMENT: a #GSettings object
#NAME: io_priority
#PARENT: Gio.File.query_info_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: cancellable
#PARENT: Gio.File.set_display_name_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: close_finish
#PARENT: Gio.IOStreamClass.close_finish.close_finish
#COMMENT: %TRUE if stream was successfully closed, %FALSE otherwise.
#NAME: get_destination_protocol
#PARENT: Gio.ProxyAddress
#COMMENT: Gets the protocol that is being spoken to the destination
server; eg, "http" or "ftp".
#NAME: source_object
#PARENT: Gio.TaskThreadFunc.none
#COMMENT: @task's source object
#NAME: socket
#PARENT: Gio.Socket.is_connected.gboolean
#COMMENT: a #GSocket.
#NAME: progress_callback_data
#PARENT: Gio.File.copy.gboolean
#COMMENT: user data to pass to @progress_callback
#NAME: other_file
#PARENT: Gio.FileMonitor.changed.none
#COMMENT: a #GFile or #NULL.
#NAME: interaction
#PARENT: Gio.TlsInteraction.invoke_request_certificate.TlsInteractionResult
#COMMENT: a #GTlsInteraction object
#NAME: callback
#PARENT: Gio.SimpleAsyncResult.new.SimpleAsyncResult
#COMMENT: a #GAsyncReadyCallback.
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLineClass.get_stdin.get_stdin.InputStream
#COMMENT: a #GApplicationCommandLine
#NAME: application
#PARENT: Gio.Application.add_main_option_entries.none
#COMMENT: a #GApplication
#NAME: object
#PARENT: Gio.DBusObjectSkeleton.flush.none
#COMMENT: A #GDBusObjectSkeleton.
#NAME: source_object
#PARENT: Gio.AsyncReadyCallback.none
#COMMENT: the object the asynchronous operation was started with.
#NAME: out_fd_list
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_finish.GLib.Variant
#COMMENT: return location for a #GUnixFDList or %NULL
#NAME: query_info
#PARENT: Gio.FileOutputStreamClass.query_info.query_info
#COMMENT: a #GFileInfo for the @stream, or %NULL on error.
#NAME: result
#PARENT: Gio.InputStreamClass.close_finish.close_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: type
#PARENT: Gio.SocketListener.add_address.gboolean
#COMMENT: a #GSocketType
#NAME: cancellable
#PARENT: Gio.File.move.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: new
#PARENT: Gio.MemoryOutputStream
#COMMENT: Creates a new #GMemoryOutputStream.

In most cases this is not the function you want.  See
g_memory_output_stream_new_resizable() instead.

If @data is non-%NULL, the stream will use that for its internal storage.

If @realloc_fn is non-%NULL, it will be used for resizing the internal
storage when necessary and the stream will be considered resizable.
In that case, the stream will start out being (conceptually) empty.
@size is used only as a hint for how big @data is.  Specifically,
seeking to the end of a newly-created stream will seek to zero, not
@size.  Seeking past the end of the stream and then writing will
introduce a zero-filled gap.

If @realloc_fn is %NULL then the stream is fixed-sized.  Seeking to
the end will seek to @size exactly.  Writing past the end will give
an 'out of space' error.  Attempting to seek past the end will fail.
Unlike the resizable case, seeking to an offset within the stream and
writing will preserve the bytes passed in as @data before that point
and will return them as part of g_memory_output_stream_steal_data().
If you intend to seek you should probably therefore ensure that @data
is properly initialised.

It is probably only meaningful to provide @data and @size in the case
that you want a fixed-sized stream.  Put another way: if @realloc_fn
is non-%NULL then it makes most sense to give @data as %NULL and
@size as 0 (allowing #GMemoryOutputStream to do the initial
allocation for itself).

|[<!-- language="C" -->
// a stream that can grow
stream = g_memory_output_stream_new (NULL, 0, realloc, free);

// another stream that can grow
stream2 = g_memory_output_stream_new (NULL, 0, g_realloc, g_free);

// a fixed-size stream
data = malloc (200);
stream3 = g_memory_output_stream_new (data, 200, NULL, free);
]|
#NAME: stream
#PARENT: Gio.InputStreamClass.skip.skip.gssize
#COMMENT: a #GInputStream.
#NAME: new
#PARENT: Gio.DBusProxy
#COMMENT: Creates a proxy for accessing @interface_name on the remote object
at @object_path owned by @name at @connection and asynchronously
loads D-Bus properties unless the
%G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES flag is used. Connect to
the #GDBusProxy::g-properties-changed signal to get notified about
property changes.

If the %G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS flag is not set, also sets up
match rules for signals. Connect to the #GDBusProxy::g-signal signal
to handle signals from the remote object.

If @name is a well-known name and the
%G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START and %G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION
flags aren't set and no name owner currently exists, the message bus
will be requested to launch a name owner for the name.

This is a failable asynchronous constructor - when the proxy is
ready, @callback will be invoked and you can use
g_dbus_proxy_new_finish() to get the result.

See g_dbus_proxy_new_sync() and for a synchronous version of this constructor.

#GDBusProxy is used in this [example][gdbus-wellknown-proxy].
#NAME: get_filename
#PARENT: Gio.DesktopAppInfo.get_filename
#COMMENT: The full path to the file for @info, or %NULL if not known.
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_line_utf8.utf8
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: set_close_fd
#PARENT: Gio.UnixInputStream
#COMMENT: Sets whether the file descriptor of @stream shall be closed
when the stream is closed.
#NAME: info
#PARENT: Gio.FileInfo.get_deletion_date.GLib.DateTime
#COMMENT: a #GFileInfo.
#NAME: SettingsBindGetMapping
#PARENT: Gio
#COMMENT: The type for the function that is used to convert from #GSettings to
an object property. The @value is already initialized to hold values
of the appropriate type.
#NAME: connect_to_service_finish
#PARENT: Gio.SocketClient.connect_to_service_finish
#COMMENT: a #GSocketConnection on success, %NULL on error.
#NAME: replace_contents
#PARENT: Gio.File
#COMMENT: Replaces the contents of @file with @contents of @length bytes.

If @etag is specified (not %NULL), any existing file must have that etag,
or the error %G_IO_ERROR_WRONG_ETAG will be returned.

If @make_backup is %TRUE, this function will attempt to make a backup
of @file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

The returned @new_etag can be used to verify that the file hasn't
changed the next time it is saved over.
#NAME: body
#PARENT: Gio.Notification.set_body.none
#COMMENT: the new body for @notification, or %NULL
#NAME: set_enum
#PARENT: Gio.Settings.set_enum
#COMMENT: %TRUE, if the set succeeds
#NAME: parent_class
#PARENT: Gio.DBusObjectProxyClass
#COMMENT: The parent class.
#NAME: manager
#PARENT: Gio.DBusObjectManagerServer.export_uniquely.none
#COMMENT: A #GDBusObjectManagerServer.
#NAME: add_supports_type
#PARENT: Gio.AppInfo.add_supports_type
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: user_data
#PARENT: Gio.Volume.eject.none
#COMMENT: user data that gets passed to @callback
#NAME: new
#PARENT: Gio.AppLaunchContext
#COMMENT: Creates a new application launch context. This is not normally used,
instead you instantiate a subclass of this, such as #GdkAppLaunchContext.
#NAME: self
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle_finish.lookup_certificate_for_handle_finish.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: user_data_free_func
#PARENT: Gio.bus_watch_name_on_connection.guint
#COMMENT: Function for freeing @user_data or %NULL.
#NAME: get_start_stop_type
#PARENT: Gio.DriveIface.get_start_stop_type.get_start_stop_type
#COMMENT: A value from the #GDriveStartStopType enumeration.
#NAME: appinfo
#PARENT: Gio.AppInfo.launch.gboolean
#COMMENT: a #GAppInfo
#NAME: get_mapped
#PARENT: Gio.Settings
#COMMENT: Gets the value that is stored at @key in @settings, subject to
application-level validation/mapping.

You should use this function when the application needs to perform
some processing on the value of the key (for example, parsing).  The
@mapping function performs that processing.  If the function
indicates that the processing was unsuccessful (due to a parse error,
for example) then the mapping is tried again with another value.

This allows a robust 'fall back to defaults' behaviour to be
implemented somewhat automatically.

The first value that is tried is the user's setting for the key.  If
the mapping function fails to map this value, other values may be
tried in an unspecified order (system or site defaults, translated
schema default values, untranslated schema default values, etc).

If the mapping function fails for all possible values, one additional
attempt is made: the mapping function is called with a %NULL value.
If the mapping function still indicates failure at this point then
the application will be aborted.

The result parameter for the @mapping function is pointed to a
#gpointer which is initially set to %NULL.  The same pointer is given
to each invocation of @mapping.  The final value of that #gpointer is
what is returned by this function.  %NULL is valid; it is returned
just as any other value would be.
#NAME: method_call
#PARENT: Gio.DBusMessageType
#COMMENT: Method call.
#NAME: mount_entry
#PARENT: Gio.unix_mount_get_device_path.utf8
#COMMENT: a #GUnixMount.
#NAME: application_id
#PARENT: Gio.Application.id_is_valid.gboolean
#COMMENT: a potential application identifier
#NAME: volume
#PARENT: Gio.VolumeIface.get_name.get_name.utf8
#COMMENT: a #GVolume
#NAME: cancellable
#PARENT: Gio.OutputStream.splice_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: callback
#PARENT: Gio.File.eject_mountable.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: menu
#PARENT: Gio.Menu.append.none
#COMMENT: a #GMenu
#NAME: any
#PARENT: Gio.DataStreamNewlineType
#COMMENT: Automatically try to handle any line ending type.
#NAME: user_data
#PARENT: Gio.DBusInterfaceSetPropertyFunc.gboolean
#COMMENT: The @user_data #gpointer passed to g_dbus_connection_register_object().
#NAME: etag
#PARENT: Gio.File.replace_async.none
#COMMENT: an [entity tag][gfile-etag] for the current #GFile,
    or %NULL to ignore
#NAME: deserialize
#PARENT: Gio.Icon
#COMMENT: Deserializes a #GIcon previously serialized using g_icon_serialize().
#NAME: cancellable
#PARENT: Gio.Socket.send_to.gssize
#COMMENT: a %GCancellable or %NULL
#NAME: flags
#PARENT: Gio.FileIface.create_readwrite.create_readwrite.FileIOStream
#COMMENT: a set of #GFileCreateFlags
#NAME: user_data
#PARENT: Gio.FileEnumeratorClass.next_files_async.next_files_async.none
#COMMENT: the data to pass to callback function
#NAME: add_bytes
#PARENT: Gio.MemoryInputStream
#COMMENT: Appends @bytes to data that can be read from the input stream.
#NAME: set_as_default_for_extension
#PARENT: Gio.AppInfo.set_as_default_for_extension
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: never
#PARENT: Gio.PasswordSave
#COMMENT: never save a password.
#NAME: ZlibCompressorFormat
#PARENT: Gio
#COMMENT: Used to select the type of data format to use for #GZlibDecompressor
and #GZlibCompressor.
#NAME: settings
#PARENT: Gio.Settings.set_enum.gboolean
#COMMENT: a #GSettings object
#NAME: socket
#PARENT: Gio.Socket.get_family.SocketFamily
#COMMENT: a #GSocket.
#NAME: user_data
#PARENT: Gio.TlsDatabase.verify_chain_async.none
#COMMENT: the data to pass to the callback function
#NAME: flags
#PARENT: Gio.Volume.eject_with_operation.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: cancellable
#PARENT: Gio.File.query_info.FileInfo
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: implement
#PARENT: Gio.IOExtensionPoint
#COMMENT: Registers @type as extension for the extension point with name
@extension_point_name.

If @type has already been registered as an extension for this
extension point, the existing #GIOExtension object is returned.
#NAME: object_path
#PARENT: Gio.DBusSubtreeIntrospectFunc.DBusInterfaceInfo
#COMMENT: The object path that was registered with g_dbus_connection_register_subtree().
#NAME: shutdown
#PARENT: Gio.Socket
#COMMENT: Shut down part of a full-duplex connection.

If @shutdown_read is %TRUE then the receiving side of the connection
is shut down, and further reading is disallowed.

If @shutdown_write is %TRUE then the sending side of the connection
is shut down, and further writing is disallowed.

It is allowed for both @shutdown_read and @shutdown_write to be %TRUE.

One example where this is used is graceful disconnect for TCP connections
where you close the sending side, then wait for the other side to close
the connection, thus ensuring that the other side saw all sent data.
#NAME: append_to
#PARENT: Gio.FileIface.append_to.append_to
#COMMENT: a #GFileOutputStream, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: io_scheduler_push_job
#PARENT: Gio
#COMMENT: Schedules the I/O job to run in another thread.

@notify will be called on @user_data after @job_func has returned,
regardless whether the job was cancelled or has run to completion.

If @cancellable is not %NULL, it can be used to cancel the I/O job
by calling g_cancellable_cancel() or by calling
g_io_scheduler_cancel_all_jobs().
#NAME: result
#PARENT: Gio.FileIface.measure_disk_usage_finish.measure_disk_usage_finish.gboolean
#COMMENT: the #GAsyncResult passed to your #GAsyncReadyCallback
#NAME: key
#PARENT: Gio.Settings.set_string.gboolean
#COMMENT: the name of the key to set
#NAME: name
#PARENT: Gio.dbus_annotation_info_lookup.utf8
#COMMENT: The name of the annotation to look up.
#NAME: set_attribute_int32
#PARENT: Gio.FileInfo
#COMMENT: Sets the @attribute to contain the given @attr_value,
if possible.
#NAME: set_default_action_and_target
#PARENT: Gio.Notification
#COMMENT: Sets the default action of @notification to @action. This action is
activated when the notification is clicked on. It must be an
application-wide action (it must start with "app.").

If @target_format is given, it is used to collect remaining
positional parameters into a #GVariant instance, similar to
g_variant_new(). @action will be activated with that #GVariant as its
parameter.

When no default action is set, the application that the notification
was sent on is activated.
#NAME: priority
#PARENT: Gio.Notification.set_priority.none
#COMMENT: a #GNotificationPriority
#NAME: resolver
#PARENT: Gio.ResolverClass.lookup_service_finish.lookup_service_finish.SrvTarget
#COMMENT: a #GResolver
#NAME: setenv
#PARENT: Gio.SubprocessLauncher
#COMMENT: Sets the environment variable @variable in the environment of
processes launched from this launcher.

Both the variable's name and value should be in the GLib file name
encoding. On UNIX, this means that they can be arbitrary byte
strings. On Windows, they should be in UTF-8.
#NAME: set_attribute_uint32
#PARENT: Gio.FileInfo
#COMMENT: Sets the @attribute to contain the given @attr_value,
if possible.
#NAME: n_infos
#PARENT: Gio.FileAttributeInfoList
#COMMENT: the number of values in the array.
#NAME: address
#PARENT: Gio.Socket.send_message.gssize
#COMMENT: a #GSocketAddress, or %NULL
#NAME: error_message
#PARENT: Gio.DBusMethodInvocation.return_dbus_error.none
#COMMENT: A valid D-Bus error message.
#NAME: create_source
#PARENT: Gio.PollableInputStream
#COMMENT: Creates a #GSource that triggers when @stream can be read, or
@cancellable is triggered or an error occurs. The callback on the
source is of the #GPollableSourceFunc type.

As with g_pollable_input_stream_is_readable(), it is possible that
the stream may not actually be readable even after the source
triggers, so you should use g_pollable_input_stream_read_nonblocking()
rather than g_input_stream_read() from the callback.
#NAME: create_action
#PARENT: Gio.Settings.create_action
#COMMENT: a new #GAction
#NAME: self
#PARENT: Gio.SubprocessLauncher.set_stdout_file_path.none
#COMMENT: a #GSubprocessLauncher
#NAME: password
#PARENT: Gio.TlsPassword.get_warning.utf8
#COMMENT: a #GTlsPassword object
#NAME: default_port
#PARENT: Gio.SocketClient.connect_to_uri_async.none
#COMMENT: the default port to connect to
#NAME: monitor_directory
#PARENT: Gio.File
#COMMENT: Obtains a directory monitor for the given file.
This may fail if directory monitoring is not supported.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

It does not make sense for @flags to contain
%G_FILE_MONITOR_WATCH_HARD_LINKS, since hard links can not be made to
directories.  It is not possible to monitor all the files in a
directory for changes made via hard links; if you want to do this then
you must register individual watches with g_file_monitor().
#NAME: eject_with_operation_finish
#PARENT: Gio.Mount
#COMMENT: Finishes ejecting a mount. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.
#NAME: stream
#PARENT: Gio.BufferedInputStream.get_available.gsize
#COMMENT: #GBufferedInputStream
#NAME: user_data
#PARENT: Gio.DBusObjectManagerClient.new_for_bus.none
#COMMENT: The data to pass to @callback.
#NAME: key
#PARENT: Gio.Settings.set_boolean.gboolean
#COMMENT: the name of the key to set
#NAME: get_credentials
#PARENT: Gio.Socket
#COMMENT: Returns the credentials of the foreign process connected to this
socket, if any (e.g. it is only supported for %G_SOCKET_FAMILY_UNIX
sockets).

If this operation isn't supported on the OS, the method fails with
the %G_IO_ERROR_NOT_SUPPORTED error. On Linux this is implemented
by reading the %SO_PEERCRED option on the underlying socket.

Other ways to obtain credentials from a foreign peer includes the
#GUnixCredentialsMessage type and
g_unix_connection_send_credentials() /
g_unix_connection_receive_credentials() functions.
#NAME: source_tag
#PARENT: Gio.Task.report_new_error.none
#COMMENT: an opaque pointer indicating the source of this task
#NAME: sctp
#PARENT: Gio.SocketProtocol
#COMMENT: SCTP over IP
#NAME: get_item_links
#PARENT: Gio.MenuModel
#COMMENT: Gets all the links associated with the item in the menu model.
#NAME: drive
#PARENT: Gio.Drive.eject_with_operation_finish.gboolean
#COMMENT: a #GDrive.
#NAME: get_local_address
#PARENT: Gio.SocketConnection
#COMMENT: Try to get the local address of a socket connection.
#NAME: UnixSocketAddress
#PARENT: Gio
#COMMENT: Support for UNIX-domain (also known as local) sockets.

UNIX domain sockets are generally visible in the filesystem.
However, some systems support abstract socket names which are not
visible in the filesystem and not affected by the filesystem
permissions, visibility, etc. Currently this is only supported
under Linux. If you attempt to use abstract sockets on other
systems, function calls may return %G_IO_ERROR_NOT_SUPPORTED
errors. You can use g_unix_socket_address_abstract_names_supported()
to see if abstract names are supported.

Note that `<gio/gunixsocketaddress.h>` belongs to the UNIX-specific GIO
interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config file
when using it.
#NAME: enumerate
#PARENT: Gio.DBusSubtreeVTable
#COMMENT: Function for enumerating child nodes.
#NAME: DBusMessage
#PARENT: Gio
#COMMENT: A type for representing D-Bus messages that can be sent or received
on a #GDBusConnection.
#NAME: get_interface_name
#PARENT: Gio.DBusMethodInvocation.get_interface_name
#COMMENT: A string. Do not free, it is owned by @invocation.
#NAME: stream
#PARENT: Gio.FilterOutputStream.set_close_base_stream.none
#COMMENT: a #GFilterOutputStream.
#NAME: key
#PARENT: Gio.SettingsSchemaKey.get_default_value.GLib.Variant
#COMMENT: a #GSettingsSchemaKey
#NAME: flags
#PARENT: Gio.DBusConnection.send_message.gboolean
#COMMENT: flags affecting how the message is sent
#NAME: get_range
#PARENT: Gio.SettingsSchemaKey.get_range
#COMMENT: a #GVariant describing the range
#NAME: enabled
#PARENT: Gio.SimpleAction
#COMMENT: If @action is currently enabled.

If the action is disabled then calls to g_action_activate() and
g_action_change_state() have no effect.
#NAME: load
#PARENT: Gio.LoadableIcon
#COMMENT: Loads a loadable icon. For the asynchronous version of this function,
see g_loadable_icon_load_async().
#NAME: proxy
#PARENT: Gio.DBusProxy.get_interface_name.utf8
#COMMENT: A #GDBusProxy.
#NAME: get_symbolic_icon
#PARENT: Gio.MountIface.get_symbolic_icon.get_symbolic_icon
#COMMENT: a #GIcon.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: resolving
#PARENT: Gio.SocketClientEvent
#COMMENT: The client is doing a DNS lookup.
#NAME: file
#PARENT: Gio.File.trash_finish.gboolean
#COMMENT: input #GFile
#NAME: op
#PARENT: Gio.MountOperation.get_choice.gint
#COMMENT: a #GMountOperation.
#NAME: completed
#PARENT: Gio.Task
#COMMENT: Whether the task has completed, meaning its callback (if set) has been
invoked. This can only happen after g_task_return_pointer(),
g_task_return_error() or one of the other return functions have been called
on the task.

This property is guaranteed to change from %FALSE to %TRUE exactly once.

The #GObject::notify signal for this change is emitted in the same main
context as the task’s callback, immediately after that callback is invoked.
#NAME: urgent
#PARENT: Gio.Notification.set_urgent.none
#COMMENT: %TRUE if @notification is urgent
#NAME: action_name
#PARENT: Gio.ActionGroup.action_enabled_changed.none
#COMMENT: the name of an action in the group
#NAME: get_keepalive
#PARENT: Gio.Socket
#COMMENT: Gets the keepalive mode of the socket. For details on this,
see g_socket_set_keepalive().
#NAME: get_blocking
#PARENT: Gio.Socket
#COMMENT: Gets the blocking mode of the socket. For details on blocking I/O,
see g_socket_set_blocking().
#NAME: SimpleAction
#PARENT: Gio
#COMMENT: A #GSimpleAction is the obvious simple implementation of the #GAction
interface. This is the easiest way to create an action for purposes of
adding it to a #GSimpleActionGroup.

See also #GtkAction.
#NAME: address
#PARENT: Gio.SocketConnection.connect_async.none
#COMMENT: a #GSocketAddress specifying the remote address.
#NAME: matches_only
#PARENT: Gio.FileAttributeMatcher
#COMMENT: Checks if a attribute matcher only matches a given attribute. Always
returns %FALSE if "*" was used when creating the matcher.
#NAME: info
#PARENT: Gio.DesktopAppInfo.get_action_name.utf8
#COMMENT: a #GDesktopAppInfo
#NAME: cancellable
#PARENT: Gio.Mount.eject.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: mount
#PARENT: Gio.Mount.guess_content_type_sync.utf8
#COMMENT: a #GMount
#NAME: get_boolean
#PARENT: Gio.DesktopAppInfo.get_boolean
#COMMENT: the boolean value, or %FALSE if the key
    is not found
#NAME: stream
#PARENT: Gio.DataOutputStream.get_byte_order.DataStreamByteOrder
#COMMENT: a #GDataOutputStream.
#NAME: action_name
#PARENT: Gio.DesktopAppInfo.launch_action.none
#COMMENT: the name of the action as from
  g_desktop_app_info_list_actions()
#NAME: base_stream
#PARENT: Gio.ConverterInputStream.new.InputStream
#COMMENT: a #GInputStream
#NAME: none
#PARENT: Gio.ConverterFlags
#COMMENT: No flags.
#NAME: settings
#PARENT: Gio.Settings.list_children.utf8
#COMMENT: a #GSettings object
#NAME: self
#PARENT: Gio.TlsDatabaseClass.verify_chain_finish.verify_chain_finish.TlsCertificateFlags
#COMMENT: a #GTlsDatabase
#NAME: flags
#PARENT: Gio.FileIface.eject_mountable_with_operation.eject_mountable_with_operation.none
#COMMENT: flags affecting the operation
#NAME: size
#PARENT: Gio.Socket.receive_with_blocking.gssize
#COMMENT: the number of bytes you want to read from the socket
#NAME: is_readable
#PARENT: Gio.PollableInputStream
#COMMENT: Checks if @stream can be read.

Note that some stream types may not be able to implement this 100%
reliably, and it is possible that a call to g_input_stream_read()
after this returns %TRUE would still block. To guarantee
non-blocking behavior, you should always use
g_pollable_input_stream_read_nonblocking(), which will return a
%G_IO_ERROR_WOULD_BLOCK error rather than blocking.
#NAME: unref
#PARENT: Gio.DBusMethodInfo
#COMMENT: If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.
#NAME: socket
#PARENT: Gio.Socket.send.gssize
#COMMENT: a #GSocket
#NAME: callback
#PARENT: Gio.File.find_enclosing_mount_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: blocking
#PARENT: Gio.Socket.set_blocking.none
#COMMENT: Whether to use blocking I/O or not.
#NAME: final_try
#PARENT: Gio.TlsPasswordFlags
#COMMENT: Hint to the user that this is the last try to get
   this password right.
#NAME: pollable_source_new_full
#PARENT: Gio
#COMMENT: Utility method for #GPollableInputStream and #GPollableOutputStream
implementations. Creates a new #GSource, as with
g_pollable_source_new(), but also attaching @child_source (with a
dummy callback), and @cancellable, if they are non-%NULL.
#NAME: enumerator
#PARENT: Gio.SocketAddressEnumeratorClass.next_finish.next_finish.SocketAddress
#COMMENT: a #GSocketAddressEnumerator
#NAME: blob
#PARENT: Gio.DBusMessage.bytes_needed.gssize
#COMMENT: A blob represent a binary D-Bus message.
#NAME: data
#PARENT: Gio.DataOutputStream.put_uint16.gboolean
#COMMENT: a #guint16.
#NAME: user_data
#PARENT: Gio.MountIface.unmount.unmount.none
#COMMENT: user data passed to @callback.
#NAME: new
#PARENT: Gio.MenuItem
#COMMENT: Creates a new #GMenuItem.

If @label is non-%NULL it is used to set the "label" attribute of the
new item.

If @detailed_action is non-%NULL it is used to set the "action" and
possibly the "target" attribute of the new item.  See
g_menu_item_set_detailed_action() for more information.
#NAME: get_unix_pid
#PARENT: Gio.Credentials
#COMMENT: Tries to get the UNIX process identifier from @credentials. This
method is only available on UNIX platforms.

This operation can fail if #GCredentials is not supported on the
OS or if the native credentials type does not contain information
about the UNIX process ID.
#NAME: callback
#PARENT: Gio.File.set_attributes_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: result
#PARENT: Gio.InputStreamClass.skip_finish.skip_finish.gssize
#COMMENT: a #GAsyncResult.
#NAME: icon
#PARENT: Gio.LoadableIcon.load_finish.InputStream
#COMMENT: a #GLoadableIcon.
#NAME: domain
#PARENT: Gio.Task.return_new_error.none
#COMMENT: a #GQuark.
#NAME: guid
#PARENT: Gio.DBusServer.new_sync.DBusServer
#COMMENT: A D-Bus GUID.
#NAME: interaction
#PARENT: Gio.TlsInteractionClass.request_certificate_finish.request_certificate_finish.TlsInteractionResult
#COMMENT: a #GTlsInteraction object
#NAME: error
#PARENT: Gio.DBusConnection.closed.none
#COMMENT: a #GError with more details about the event or %NULL
#NAME: failed
#PARENT: Gio.DBusError
#COMMENT: A generic error; "something went wrong" - see the error message for
more.
#NAME: enumerate_children
#PARENT: Gio.File
#COMMENT: Gets the requested information about the files in a directory.
The result is a #GFileEnumerator object that will give out
#GFileInfo objects for all the files in the directory.

The @attributes value is a string that specifies the file
attributes that should be gathered. It is not an error if
it's not possible to read a particular requested attribute
from a file - it just won't be set. @attributes should
be a comma-separated list of attributes or attribute wildcards.
The wildcard "*" means all attributes, and a wildcard like
"standard::*" means all attributes in the standard namespace.
An example attribute query be "standard::*,owner::user".
The standard attributes are available as defines, like
#G_FILE_ATTRIBUTE_STANDARD_NAME.

If @cancellable is not %NULL, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
returned.

If the file does not exist, the %G_IO_ERROR_NOT_FOUND error will
be returned. If the file is not a directory, the %G_IO_ERROR_NOT_DIRECTORY
error will be returned. Other errors are possible too.
#NAME: object-path
#PARENT: Gio.DBusObjectManagerServer
#COMMENT: The object path to register the manager object at.
#NAME: cancellable
#PARENT: Gio.Cancellable.source_new.GLib.Source
#COMMENT: a #GCancellable, or %NULL
#NAME: certificate
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer.TlsCertificate
#COMMENT: a #GTlsCertificate
#NAME: handle
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle_async.lookup_certificate_for_handle_async.none
#COMMENT: a certificate handle
#NAME: offset
#PARENT: Gio.Seekable.truncate.gboolean
#COMMENT: a #goffset.
#NAME: TlsFileDatabaseInterface
#PARENT: Gio
#COMMENT: Provides an interface for #GTlsFileDatabase implementations.
#NAME: get_icon
#PARENT: Gio.Volume.get_icon
#COMMENT: a #GIcon.
    The returned object should be unreffed with g_object_unref()
    when no longer needed.
#NAME: user_data
#PARENT: Gio.File.poll_mountable.none
#COMMENT: the data to pass to callback function
#NAME: fd_list
#PARENT: Gio.DBusMessage.set_unix_fd_list.none
#COMMENT: A #GUnixFDList or %NULL.
#NAME: cancellable
#PARENT: Gio.OutputStream.write_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: key
#PARENT: Gio.Settings.get.none
#COMMENT: the key to get the value for
#NAME: get_available_bytes
#PARENT: Gio.Socket.get_available_bytes
#COMMENT: the number of bytes that can be read from the socket
without blocking or truncating, or -1 on error.
#NAME: DBusInterfaceGetPropertyFunc
#PARENT: Gio.DBusInterfaceGetPropertyFunc
#COMMENT: A #GVariant with the value for @property_name or %NULL if
    @error is set. If the returned #GVariant is floating, it is
    consumed - otherwise its reference count is decreased by one.
#NAME: action_name
#PARENT: Gio.ActionGroup.action-removed.none
#COMMENT: the name of the action in @action_group
#NAME: ref
#PARENT: Gio.DBusNodeInfo.ref
#COMMENT: The same @info.
#NAME: action_name
#PARENT: Gio.SimpleActionGroup.remove.none
#COMMENT: the name of the action
#NAME: cancellable
#PARENT: Gio.InputStreamClass.skip_async.skip_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_unix_user
#PARENT: Gio.Credentials
#COMMENT: Tries to get the UNIX user identifier from @credentials. This
method is only available on UNIX platforms.

This operation can fail if #GCredentials is not supported on the
OS or if the native credentials type does not contain information
about the UNIX user.
#NAME: error_code
#PARENT: Gio.DBusErrorEntry
#COMMENT: An error code.
#NAME: lookup_interface
#PARENT: Gio.DBusNodeInfo.lookup_interface
#COMMENT: A #GDBusInterfaceInfo or %NULL if not found. Do not free, it is owned by @info.
#NAME: parameter
#PARENT: Gio.ActionGroup.activate_action.none
#COMMENT: parameters to the activation
#NAME: get_interface_info
#PARENT: Gio.DBusProxy
#COMMENT: Returns the #GDBusInterfaceInfo, if any, specifying the interface
that @proxy conforms to. See the #GDBusProxy:g-interface-info
property for more details.
#NAME: get_local_address
#PARENT: Gio.SocketClient.get_local_address
#COMMENT: a #GSocketAddress or %NULL. Do not free.
#NAME: messages
#PARENT: Gio.Socket.send_message.gssize
#COMMENT: a pointer to an
  array of #GSocketControlMessages, or %NULL.
#NAME: aborted
#PARENT: Gio.MountOperation
#COMMENT: Emitted by the backend when e.g. a device becomes unavailable
while a mount operation is in progress.

Implementations of GMountOperation should handle this signal
by dismissing open password dialogs.
#NAME: ignore_hosts
#PARENT: Gio.SimpleProxyResolver.new.ProxyResolver
#COMMENT: an optional list of hosts/IP addresses
    to not use a proxy for.
#NAME: factory_register_type
#PARENT: Gio.SocketConnection
#COMMENT: Looks up the #GType to be used when creating socket connections on
sockets with the specified @family, @type and @protocol.

If no type is registered, the #GSocketConnection base type is returned.
#NAME: new
#PARENT: Gio.TlsPassword
#COMMENT: Create a new #GTlsPassword object.
#NAME: poll_mountable_finish
#PARENT: Gio.File.poll_mountable_finish
#COMMENT: %TRUE if the operation finished successfully. %FALSE
otherwise.
#NAME: var_args
#PARENT: Gio.Initable.new_valist.GObject.Object
#COMMENT: The var args list generated from @first_property_name.
#NAME: invalid
#PARENT: Gio.SocketType
#COMMENT: Type unknown or wrong
#NAME: callback
#PARENT: Gio.TlsInteractionClass.ask_password_async.ask_password_async.none
#COMMENT: will be called when the interaction completes
#NAME: long_name
#PARENT: Gio.Application.add_main_option.none
#COMMENT: the long name of an option used to specify it in a commandline
#NAME: get_uuid
#PARENT: Gio.Mount
#COMMENT: Gets the UUID for the @mount. The reference is typically based on
the file system UUID for the mount in question and should be
considered an opaque string. Returns %NULL if there is no UUID
available.
#NAME: stream
#PARENT: Gio.OutputStreamClass.splice_finish.splice_finish.gssize
#COMMENT: a #GOutputStream.
#NAME: task
#PARENT: Gio.Task.get_return_on_cancel.gboolean
#COMMENT: the #GTask
#NAME: FILE_ATTRIBUTE_TIME_ACCESS_USEC
#PARENT: Gio
#COMMENT: A key in the "time" namespace for getting the microseconds of the time
the file was last accessed. This should be used in conjunction with
#G_FILE_ATTRIBUTE_TIME_ACCESS. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: get_item_attribute
#PARENT: Gio.MenuModel.get_item_attribute
#COMMENT: %TRUE if the named attribute was found with the expected
    type
#NAME: domain
#PARENT: Gio.SimpleAsyncResult.set_error_va.none
#COMMENT: a #GQuark (usually #G_IO_ERROR).
#NAME: task
#PARENT: Gio.Task.get_priority.gint
#COMMENT: a #GTask
#NAME: get_is_abstract
#PARENT: Gio.UnixSocketAddress.get_is_abstract
#COMMENT: %TRUE if the address is abstract, %FALSE otherwise
#NAME: get_op_res_gssize
#PARENT: Gio.SimpleAsyncResult.get_op_res_gssize
#COMMENT: a gssize returned from the asynchronous function.
#NAME: equal
#PARENT: Gio.File.equal
#COMMENT: %TRUE if @file1 and @file2 are equal.
#NAME: FILE_ATTRIBUTE_PREVIEW_ICON
#PARENT: Gio
#COMMENT: A key in the "preview" namespace for getting a #GIcon that can be
used to get preview of the file. For example, it may be a low
resolution thumbnail without metadata. Corresponding
#GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.  The value
for this key should contain a #GIcon.
#NAME: self
#PARENT: Gio.SubprocessLauncher.spawn.Subprocess
#COMMENT: a #GSubprocessLauncher
#NAME: write_bytes_finish
#PARENT: Gio.OutputStream.write_bytes_finish
#COMMENT: a #gssize containing the number of bytes written to the stream.
#NAME: subprocess
#PARENT: Gio.Subprocess.wait_async.none
#COMMENT: a #GSubprocess
#NAME: flags
#PARENT: Gio.File.set_attribute_string.gboolean
#COMMENT: #GFileQueryInfoFlags
#NAME: app_info_get_all_for_type
#PARENT: Gio
#COMMENT: Gets a list of all #GAppInfos for a given content type,
including the recommended and fallback #GAppInfos. See
g_app_info_get_recommended_for_type() and
g_app_info_get_fallback_for_type().
#NAME: send_to_mainloop
#PARENT: Gio.IOSchedulerJob.send_to_mainloop
#COMMENT: The return value of @func
#NAME: position
#PARENT: Gio.ListModel.items-changed.none
#COMMENT: the position at which @list changed
#NAME: info
#PARENT: Gio.DesktopAppInfo.list_actions.utf8
#COMMENT: a #GDesktopAppInfo
#NAME: cancellable
#PARENT: Gio.File.eject_mountable_with_operation.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: info
#PARENT: Gio.DBusArgInfo.unref.none
#COMMENT: A #GDBusArgInfo.
#NAME: eject_with_operation
#PARENT: Gio.Drive
#COMMENT: Ejects a drive. This is an asynchronous operation, and is
finished by calling g_drive_eject_with_operation_finish() with the @drive
and #GAsyncResult data returned in the @callback.
#NAME: FILE_ATTRIBUTE_TRASH_ITEM_COUNT
#PARENT: Gio
#COMMENT: A key in the "trash" namespace.  When requested against
"trash:///" returns the number of (toplevel) items in the trash folder.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: can_reach_async
#PARENT: Gio.NetworkMonitor
#COMMENT: Asynchronously attempts to determine whether or not the host
pointed to by @connectable can be reached, without actually
trying to connect to it.

For more details, see g_network_monitor_can_reach().

When the operation is finished, @callback will be called.
You can then call g_network_monitor_can_reach_finish()
to get the result of the operation.
#NAME: self
#PARENT: Gio.TestDBus.stop.none
#COMMENT: a #GTestDBus
#NAME: call_with_unix_fd_list_sync
#PARENT: Gio.DBusConnection
#COMMENT: Like g_dbus_connection_call_sync() but also takes and returns #GUnixFDList objects.

This method is only available on UNIX.
#NAME: g_iface
#PARENT: Gio.ProxyInterface
#COMMENT: The parent interface.
#NAME: mount
#PARENT: Gio.VolumeMonitor.mount-changed.none
#COMMENT: a #GMount that changed.
#NAME: acquire_finish
#PARENT: Gio.PermissionClass.acquire_finish.acquire_finish
#COMMENT: %TRUE if the permission was successfully acquired
#NAME: callback
#PARENT: Gio.ResolverClass.lookup_records_async.lookup_records_async.none
#COMMENT: callback to call after resolution completes
#NAME: get_mounts
#PARENT: Gio.VolumeMonitor
#COMMENT: Gets a list of the mounts on the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().
#NAME: flags
#PARENT: Gio.DBusProxy.new_for_bus.none
#COMMENT: Flags used when constructing the proxy.
#NAME: get_option
#PARENT: Gio.Socket.get_option
#COMMENT: success or failure. On failure, @error will be set, and
  the system error value (`errno` or WSAGetLastError()) will still
  be set to the result of the getsockopt() call.
#NAME: set_attribute_int64
#PARENT: Gio.FileInfo
#COMMENT: Sets the @attribute to contain the given @attr_value,
if possible.
#NAME: set_attribute_uint64
#PARENT: Gio.FileInfo
#COMMENT: Sets the @attribute to contain the given @attr_value,
if possible.
#NAME: application
#PARENT: Gio.Application.get_dbus_object_path.utf8
#COMMENT: a #GApplication
#NAME: PollableOutputStreamInterface
#PARENT: Gio
#COMMENT: The interface for pollable output streams.

The default implementation of @can_poll always returns %TRUE.

The default implementation of @write_nonblocking calls
g_pollable_output_stream_is_writable(), and then calls
g_output_stream_write() if it returns %TRUE. This means you only
need to override it if it is possible that your @is_writable
implementation may return %TRUE when the stream is not actually
writable.
#NAME: issuer_raw_dn
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by.TlsCertificate
#COMMENT: a #GByteArray which holds the DER encoded issuer DN.
#NAME: flags
#PARENT: Gio.VolumeIface.eject_with_operation.eject_with_operation.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: get_uri_scheme
#PARENT: Gio.FileIface.get_uri_scheme.get_uri_scheme
#COMMENT: a string containing the URI scheme for the given
    #GFile. The returned string should be freed with g_free()
    when no longer needed.
#NAME: buffer
#PARENT: Gio.OutputStream.write_async.none
#COMMENT: the buffer containing the data to write.
#NAME: format
#PARENT: Gio.ZlibCompressor.new.ZlibCompressor
#COMMENT: The format to use for the compressed data
#NAME: list_keys
#PARENT: Gio.Settings.list_keys
#COMMENT: a list of the keys on @settings
#NAME: cancellable
#PARENT: Gio.TlsInteraction.request_certificate.TlsInteractionResult
#COMMENT: an optional #GCancellable cancellation object
#NAME: base_io_stream
#PARENT: Gio.tls_client_connection_new.TlsClientConnection
#COMMENT: the #GIOStream to wrap
#NAME: address
#PARENT: Gio.UnixSocketAddress.get_is_abstract.gboolean
#COMMENT: a #GInetSocketAddress
#NAME: user_data
#PARENT: Gio.AsyncInitableIface.init_async.init_async.none
#COMMENT: the data to pass to callback function
#NAME: return_error
#PARENT: Gio.Task
#COMMENT: Sets @task's result to @error (which @task assumes ownership of)
and completes the task (see g_task_return_pointer() for more
discussion of exactly what this means).

Note that since the task takes ownership of @error, and since the
task may be completed before returning from g_task_return_error(),
you cannot assume that @error is still valid after calling this.
Call g_error_copy() on the error if you need to keep a local copy
as well.

See also g_task_return_new_error().
#NAME: sender
#PARENT: Gio.DBusMessageHeaderField
#COMMENT: Unique name of the sender of the message (filled in by the bus).
#NAME: close_sync
#PARENT: Gio.DBusConnection
#COMMENT: Synchronously closees @connection. The calling thread is blocked
until this is done. See g_dbus_connection_close() for the
asynchronous version of this method and more details about what it
does.
#NAME: has_action
#PARENT: Gio.ActionGroup.has_action
#COMMENT: whether the named action exists
#NAME: read_until_finish
#PARENT: Gio.DataInputStream.read_until_finish
#COMMENT: a string with the data that was read
    before encountering any of the stop characters. Set @length to
    a #gsize to get the length of the string. This function will
    return %NULL on an error.
#NAME: appinfo1
#PARENT: Gio.AppInfoIface.equal.equal.gboolean
#COMMENT: the first #GAppInfo.
#NAME: FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the symbolic icon for the file.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.
The value for this key should contain a #GIcon.
#NAME: new_valist
#PARENT: Gio.Initable.new_valist
#COMMENT: a newly allocated
     #GObject, or %NULL on error
#NAME: appinfo2
#PARENT: Gio.AppInfoIface.equal.equal.gboolean
#COMMENT: the second #GAppInfo.
#NAME: desktop_env
#PARENT: Gio.DesktopAppInfo.get_show_in.gboolean
#COMMENT: a string specifying a desktop name
#NAME: result
#PARENT: Gio.DriveIface.eject_finish.eject_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: value
#PARENT: Gio.TlsPasswordClass.set_value.set_value.none
#COMMENT: the value for the password
#NAME: guess_name
#PARENT: Gio.UnixMountPoint
#COMMENT: Guesses the name of a Unix mount point.
The result is a translated string.
#NAME: user_data
#PARENT: Gio.DriveIface.stop.stop.none
#COMMENT: user data to pass to @callback
#NAME: open_readwrite
#PARENT: Gio.FileIface.open_readwrite.open_readwrite
#COMMENT: #GFileIOStream or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: unregister_error
#PARENT: Gio.DBusError
#COMMENT: Destroys an association previously set up with g_dbus_error_register_error().
#NAME: cancellable
#PARENT: Gio.PollableOutputStream.write_nonblocking.gssize
#COMMENT: a #GCancellable, or %NULL
#NAME: volume
#PARENT: Gio.VolumeIface.get_sort_key.get_sort_key.utf8
#COMMENT: a #GVolume
#NAME: initable
#PARENT: Gio.InitableIface.init.init.gboolean
#COMMENT: a #GInitable.
#NAME: stream
#PARENT: Gio.UnixOutputStream.get_fd.gint
#COMMENT: a #GUnixOutputStream
#NAME: io_extension_point_lookup
#PARENT: Gio
#COMMENT: Looks up an existing extension point.
#NAME: nofollow_symlinks
#PARENT: Gio.FileQueryInfoFlags
#COMMENT: Don't follow symlinks.
#NAME: get_priority
#PARENT: Gio.Task
#COMMENT: Gets @task's priority
#NAME: cancellable
#PARENT: Gio.InputStream.close_async.none
#COMMENT: optional cancellable object
#NAME: cancellable
#PARENT: Gio.Socket.create_source.GLib.Source
#COMMENT: a %GCancellable or %NULL
#NAME: name
#PARENT: Gio.IOExtensionPoint.get_extension_by_name.IOExtension
#COMMENT: the name of the extension to get
#NAME: io_priority
#PARENT: Gio.IOStream.close_async.none
#COMMENT: the io priority of the request
#NAME: connection
#PARENT: Gio.SocketClient.event.none
#COMMENT: the current representation of the connection
#NAME: connection
#PARENT: Gio.DBusConnection.send_message_with_reply.none
#COMMENT: a #GDBusConnection
#NAME: get_priority
#PARENT: Gio.SrvTarget.get_priority
#COMMENT: @target's priority
#NAME: result
#PARENT: Gio.File.trash_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: service
#PARENT: Gio.SocketClient.connect_to_service_async.none
#COMMENT: the name of the service to connect to
#NAME: task
#PARENT: Gio.Task.return_int.none
#COMMENT: a #GTask.
#NAME: volume_monitor
#PARENT: Gio.VolumeMonitorClass.get_mounts.get_mounts.Mount
#COMMENT: a #GVolumeMonitor.
#NAME: info
#PARENT: Gio.AppLaunchContextClass.get_display.get_display.utf8
#COMMENT: a #GAppInfo
#NAME: callback
#PARENT: Gio.ProxyResolverInterface.lookup_async.lookup_async.none
#COMMENT: callback to call after resolution completes
#NAME: certificate-pem
#PARENT: Gio.TlsCertificate
#COMMENT: The PEM (ASCII) encoded representation of the certificate.
This property and the #GTlsCertificate:certificate
property represent the same data, just in different forms.
#NAME: file-info
#PARENT: Gio.ZlibCompressor
#COMMENT: If set to a non-%NULL #GFileInfo object, and #GZlibCompressor:format is
%G_ZLIB_COMPRESSOR_FORMAT_GZIP, the compressor will write the file name
and modification time from the file info to the GZIP header.
#NAME: get_extensions
#PARENT: Gio.IOExtensionPoint.get_extensions
#COMMENT: a #GList of
    #GIOExtensions. The list is owned by GIO and should not be
    modified.
#NAME: cancellable
#PARENT: Gio.Task.new.Task
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_options_dict
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Gets the options there were passed to g_application_command_line().

If you did not override local_command_line() then these are the same
options that were parsed according to the #GOptionEntrys added to the
application with g_application_add_main_option_entries() and possibly
modified from your GApplication::handle-local-options handler.

If no options were sent then an empty dictionary is returned so that
you don't need to check for %NULL.
#NAME: value
#PARENT: Gio.SettingsGetMapping.gboolean
#COMMENT: the #GVariant to map, or %NULL
#NAME: stream
#PARENT: Gio.OutputStreamClass.splice.splice.gssize
#COMMENT: a #GOutputStream.
#NAME: get_header
#PARENT: Gio.DBusMessage.get_header
#COMMENT: A #GVariant with the value if the header was found, %NULL
otherwise. Do not free, it is owned by @message.
#NAME: source
#PARENT: Gio.FileIface.move.move.gboolean
#COMMENT: #GFile pointing to the source location
#NAME: cancellable
#PARENT: Gio.File.load_contents.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: get_object_path
#PARENT: Gio.DBusMethodInvocation.get_object_path
#COMMENT: A string. Do not free, it is owned by @invocation.
#NAME: cancellable
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle.lookup_certificate_for_handle.TlsCertificate
#COMMENT: a #GCancellable, or %NULL
#NAME: notification
#PARENT: Gio.Notification.add_button_with_target_value.none
#COMMENT: a #GNotification
#NAME: callback
#PARENT: Gio.File.open_readwrite_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: file
#PARENT: Gio.File.set_attribute_byte_string.gboolean
#COMMENT: input #GFile
#NAME: file
#PARENT: Gio.File.query_settable_attributes.FileAttributeInfoList
#COMMENT: input #GFile
#NAME: file
#PARENT: Gio.FileIface.create_readwrite.create_readwrite.FileIOStream
#COMMENT: a #GFile
#NAME: FileMonitorEvent
#PARENT: Gio
#COMMENT: Specifies what type of event a monitor event is.
#NAME: content_type_get_generic_icon_name
#PARENT: Gio.content_type_get_generic_icon_name
#COMMENT: the registered generic icon name for the given @type,
    or %NULL if unknown. Free with g_free()
#NAME: is-mc-org-local
#PARENT: Gio.InetAddress
#COMMENT: Whether this is an organization-local multicast address.
See g_inet_address_get_is_mc_org_local().
#NAME: do_not_auto_start
#PARENT: Gio.DBusObjectManagerClientFlags
#COMMENT: If not set and the
  manager is for a well-known name, then request the bus to launch
  an owner for the name if no-one owns the name. This flag can only
  be used in managers for well-known names.
#NAME: new
#PARENT: Gio.SocketClient.new
#COMMENT: a #GSocketClient.
    Free the returned object with g_object_unref().
#NAME: item
#PARENT: Gio.Menu.append_item.none
#COMMENT: a #GMenuItem to append
#NAME: lookup_certificates_issued_by_async
#PARENT: Gio.TlsDatabase
#COMMENT: Asynchronously lookup certificates issued by this issuer in the database. See
g_tls_database_lookup_certificates_issued_by() for more information.

The database may choose to hold a reference to the issuer byte array for the duration
of of this asynchronous operation. The byte array should not be modified during
this time.
#NAME: start
#PARENT: Gio.Drive
#COMMENT: Asynchronously starts a drive.

When the operation is finished, @callback will be called.
You can then call g_drive_start_finish() to obtain the
result of the operation.
#NAME: cancellable
#PARENT: Gio.File.append_to_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: OutputMessage
#PARENT: Gio
#COMMENT: Structure used for scatter/gather data output when sending multiple
messages or packets in one go. You generally pass in an array of
#GOutputVectors and the operation will use all the buffers as if they
were one buffer.

If @address is %NULL then the message is sent to the default receiver
(as previously set by g_socket_connect()).
#NAME: volume
#PARENT: Gio.VolumeMonitor.volume-changed.none
#COMMENT: a #GVolume that changed.
#NAME: drive
#PARENT: Gio.Drive.has_media.gboolean
#COMMENT: a #GDrive.
#NAME: get_body
#PARENT: Gio.DBusMessage.get_body
#COMMENT: A #GVariant or %NULL if the body is
empty. Do not free, it is owned by @message.
#NAME: change_state
#PARENT: Gio.Action
#COMMENT: Request for the state of @action to be changed to @value.

The action must be stateful and @value must be of the correct type.
See g_action_get_state_type().

This call merely requests a change.  The action may refuse to change
its state or may change its state to something other than @value.
See g_action_get_state_hint().

If the @value GVariant is floating, it is consumed.
#NAME: attribute
#PARENT: Gio.FileInfo.set_attribute_status.gboolean
#COMMENT: a file attribute key
#NAME: g_iface
#PARENT: Gio.AppInfoIface
#COMMENT: The parent interface.
#NAME: next_files_finish
#PARENT: Gio.FileEnumeratorClass.next_files_finish.next_files_finish
#COMMENT: a #GList of #GFileInfos. You must free the list with
    g_list_free() and unref the infos with g_object_unref() when you're
    done with them.
#NAME: FILE_ATTRIBUTE_ACCESS_CAN_TRASH
#PARENT: Gio
#COMMENT: A key in the "access" namespace for checking trashing privileges.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
This attribute will be %TRUE if the user is able to move the file to
the trash.
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.return_error.none
#COMMENT: A #GDBusMethodInvocation.
#NAME: none
#PARENT: Gio.FileMonitorFlags
#COMMENT: No flags set.
#NAME: callback
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer_async.lookup_certificate_issuer_async.none
#COMMENT: callback to call when the operation completes
#NAME: call_finish
#PARENT: Gio.DBusProxy
#COMMENT: Finishes an operation started with g_dbus_proxy_call().
#NAME: store
#PARENT: Gio.ListStore.append.none
#COMMENT: a #GListStore
#NAME: callback
#PARENT: Gio.Drive.eject.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: callback
#PARENT: Gio.IOStream.close_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: new_from_array
#PARENT: Gio.UnixFDList
#COMMENT: Creates a new #GUnixFDList containing the file descriptors given in
@fds.  The file descriptors become the property of the new list and
may no longer be used by the caller.  The array itself is owned by
the caller.

Each file descriptor in the array should be set to close-on-exec.

If @n_fds is -1 then @fds must be terminated with -1.
#NAME: get
#PARENT: Gio.VolumeMonitor.get
#COMMENT: a reference to the #GVolumeMonitor used by gio. Call
   g_object_unref() when done with it.
#NAME: credentials
#PARENT: Gio.UnixCredentialsMessage.new_with_credentials.SocketControlMessage
#COMMENT: A #GCredentials object.
#NAME: cancellable
#PARENT: Gio.SocketClient.connect_to_host.SocketConnection
#COMMENT: a #GCancellable, or %NULL
#NAME: user_data
#PARENT: Gio.BusAcquiredCallback.none
#COMMENT: User data passed to g_bus_own_name().
#NAME: content_type
#PARENT: Gio.AppInfoIface.add_supports_type.add_supports_type.gboolean
#COMMENT: a string.
#NAME: num_entries
#PARENT: Gio.DBusError.register_error_domain.none
#COMMENT: Number of items to register.
#NAME: is_cancelled
#PARENT: Gio.Cancellable.is_cancelled
#COMMENT: %TRUE if @cancellable is cancelled,
FALSE if called with %NULL or if item is not cancelled.
#NAME: result
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle_finish.TlsCertificate
#COMMENT: a #GAsyncResult.
#NAME: settings
#PARENT: Gio.Settings.list_keys.utf8
#COMMENT: a #GSettings object
#NAME: unix_mounts_changed_since
#PARENT: Gio
#COMMENT: Checks if the unix mounts have changed since a given unix time.
#NAME: file
#PARENT: Gio.FileIface.create_readwrite_async.create_readwrite_async.none
#COMMENT: input #GFile
#NAME: appinfo
#PARENT: Gio.AppInfoIface.get_icon.get_icon.Icon
#COMMENT: a #GAppInfo.
#NAME: guess_content_type_sync
#PARENT: Gio.Mount.guess_content_type_sync
#COMMENT: a %NULL-terminated array of content types or %NULL on error.
    Caller should free this array with g_strfreev() when done with it.
#NAME: res
#PARENT: Gio.File.load_partial_contents_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: object_path
#PARENT: Gio.DBusObjectProxy.new.DBusObjectProxy
#COMMENT: the object path
#NAME: op
#PARENT: Gio.MountOperation.set_choice.none
#COMMENT: a #GMountOperation.
#NAME: application
#PARENT: Gio.Application.withdraw_notification.none
#COMMENT: a #GApplication
#NAME: send_message
#PARENT: Gio.Socket.send_message
#COMMENT: Number of bytes written (which may be less than @size), or -1
on error
#NAME: set_content_type
#PARENT: Gio.FileInfo
#COMMENT: Sets the content type attribute for a given #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE.
#NAME: get_byte_order
#PARENT: Gio.DataOutputStream.get_byte_order
#COMMENT: the #GDataStreamByteOrder for the @stream.
#NAME: new
#PARENT: Gio.ZlibCompressor.new
#COMMENT: a new #GZlibCompressor
#NAME: io_priority
#PARENT: Gio.FileIface.open_readwrite_async.open_readwrite_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: value
#PARENT: Gio.AppLaunchContext.setenv.none
#COMMENT: the value for to set the variable to.
#NAME: source
#PARENT: Gio.TlsClientConnectionInterface.copy_session_state.copy_session_state.none
#COMMENT: a #GTlsClientConnection
#NAME: socket
#PARENT: Gio.Socket.get_timeout.guint
#COMMENT: a #GSocket.
#NAME: quark
#PARENT: Gio.TlsError.quark
#COMMENT: a #GQuark.
#NAME: file
#PARENT: Gio.File.measure_disk_usage_finish.gboolean
#COMMENT: a #GFile
#NAME: address
#PARENT: Gio.Socket.receive_message.gssize
#COMMENT: a pointer to a #GSocketAddress
    pointer, or %NULL
#NAME: password
#PARENT: Gio.TlsPassword.set_description.none
#COMMENT: a #GTlsPassword object
#NAME: parse_detailed_name
#PARENT: Gio.Action
#COMMENT: Parses a detailed action name into its separate name and target
components.

Detailed action names can have three formats.

The first format is used to represent an action name with no target
value and consists of just an action name containing no whitespace
nor the characters ':', '(' or ')'.  For example: "app.action".

The second format is used to represent an action with a target value
that is a non-empty string consisting only of alphanumerics, plus '-'
and '.'.  In that case, the action name and target value are
separated by a double colon ("::").  For example:
"app.action::target".

The third format is used to represent an action with any type of
target value, including strings.  The target value follows the action
name, surrounded in parens.  For example: "app.action(42)".  The
target value is parsed using g_variant_parse().  If a tuple-typed
value is desired, it must be specified in the same way, resulting in
two sets of parens, for example: "app.action((1,2,3))".  A string
target can be specified this way as well: "app.action('target')".
For strings, this third format must be used if * target value is
empty or contains characters other than alphanumerics, '-' and '.'.
#NAME: set_as_default_for_type
#PARENT: Gio.AppInfo
#COMMENT: Sets the application as the default handler for a given type.
#NAME: cancellable
#PARENT: Gio.Cancellable.push_current.none
#COMMENT: a #GCancellable object
#NAME: action-removed
#PARENT: Gio.ActionGroup
#COMMENT: Signals that an action is just about to be removed from the group.
This signal is emitted before the action is removed, so the action
is still visible and can be queried from the signal handler.
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.get_cwd.utf8
#COMMENT: a #GApplicationCommandLine
#NAME: lookup_certificate_for_handle_finish
#PARENT: Gio.TlsDatabase
#COMMENT: Finish an asynchronous lookup of a certificate by its handle. See
g_tls_database_lookup_certificate_handle() for more information.

If the handle is no longer valid, or does not point to a certificate in
this database, then %NULL will be returned.
#NAME: interaction
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by_async.lookup_certificates_issued_by_async.none
#COMMENT: used to interact with the user if necessary
#NAME: get_mount_path
#PARENT: Gio.UnixMountPoint
#COMMENT: Gets the mount path for a unix mount point.
#NAME: new_for_address_sync
#PARENT: Gio.DBusConnection.new_for_address_sync
#COMMENT: a #GDBusConnection or %NULL if @error is set. Free with
    g_object_unref().
#NAME: proxy
#PARENT: Gio.DBusProxy.get_name.utf8
#COMMENT: A #GDBusProxy.
#NAME: target
#PARENT: Gio.SrvTarget.copy.SrvTarget
#COMMENT: a #GSrvTarget
#NAME: is-mc-global
#PARENT: Gio.InetAddress
#COMMENT: Whether this is a global multicast address.
See g_inet_address_get_is_mc_global().
#NAME: unmount
#PARENT: Gio.Mount
#COMMENT: Unmounts a mount. This is an asynchronous operation, and is
finished by calling g_mount_unmount_finish() with the @mount
and #GAsyncResult data returned in the @callback.
#NAME: IOSchedulerJobFunc
#PARENT: Gio
#COMMENT: I/O Job function.

Long-running jobs should periodically check the @cancellable
to see if they have been cancelled.
#NAME: link
#PARENT: Gio.MenuModel.get_item_link.MenuModel
#COMMENT: the link to query
#NAME: destination
#PARENT: Gio.FileIface.copy_async.copy_async.none
#COMMENT: destination #GFile
#NAME: get_output_stream
#PARENT: Gio.IOStream.get_output_stream
#COMMENT: a #GOutputStream, owned by the #GIOStream.
Do not free.
#NAME: result
#PARENT: Gio.ResolverClass.lookup_by_name_finish.lookup_by_name_finish.InetAddress
#COMMENT: the result passed to your #GAsyncReadyCallback
#NAME: getenv
#PARENT: Gio.SubprocessLauncher.getenv
#COMMENT: the value of the environment variable, %NULL if unset
#NAME: user_data
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer_async.none
#COMMENT: the data to pass to the callback function
#NAME: get_num_unix_fds
#PARENT: Gio.DBusMessage
#COMMENT: Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header field.
#NAME: block_duplicates
#PARENT: Gio.IOModuleScopeFlags
#COMMENT: When using this scope to load or
    scan modules, automatically block a modules which has the same base
    basename as previously loaded module.
#NAME: callback
#PARENT: Gio.FileIface.enumerate_children_async.enumerate_children_async.none
#COMMENT: a #GAsyncReadyCallback to call when the
    request is satisfied
#NAME: protocol
#PARENT: Gio.SocketListener.add_address.gboolean
#COMMENT: a #GSocketProtocol
#NAME: datagram
#PARENT: Gio.SocketType
#COMMENT: Connectionless, unreliable datagram passing.
    (e.g. UDP)
#NAME: count
#PARENT: Gio.InputStream.read_async.none
#COMMENT: the number of bytes that will be read from the stream
#NAME: cancellable
#PARENT: Gio.InitableIface.init.init.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_connections
#PARENT: Gio.DBusInterfaceSkeleton.get_connections
#COMMENT: A list of
  all the connections that @interface_ is exported on. The returned
  list should be freed with g_list_free() after each element has
  been freed with g_object_unref().
#NAME: set_action_and_target
#PARENT: Gio.MenuItem
#COMMENT: Sets or unsets the "action" and "target" attributes of @menu_item.

If @action is %NULL then both the "action" and "target" attributes
are unset (and @format_string is ignored along with the positional
parameters).

If @action is non-%NULL then the "action" attribute is set.
@format_string is then inspected.  If it is non-%NULL then the proper
position parameters are collected to create a #GVariant instance to
use as the target value.  If it is %NULL then the positional
parameters are ignored and the "target" attribute is unset.

See also g_menu_item_set_action_and_target_value() for an equivalent
call that directly accepts a #GVariant.  See
g_menu_item_set_detailed_action() for a more convenient version that
works with string-typed targets.

See also g_menu_item_set_action_and_target_value() for a
description of the semantics of the action and target attributes.
#NAME: settings
#PARENT: Gio.Settings.get_child.Settings
#COMMENT: a #GSettings object
#NAME: send_with_blocking
#PARENT: Gio.Socket.send_with_blocking
#COMMENT: Number of bytes written (which may be less than @size), or -1
on error
#NAME: abstract
#PARENT: Gio.UnixSocketAddress
#COMMENT: Whether or not this is an abstract address
#NAME: LoadableIcon
#PARENT: Gio
#COMMENT: Extends the #GIcon interface and adds the ability to
load icons from streams.
#NAME: name
#PARENT: Gio.Action
#COMMENT: The name of the action.  This is mostly meaningful for identifying
the action once it has been added to a #GActionGroup. It is immutable.
#NAME: return_value
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Finishes handling a D-Bus method call by returning @parameters.
If the @parameters GVariant is floating, it is consumed.

It is an error if @parameters is not of the right format.

This method will free @invocation, you cannot use it afterwards.
#NAME: job
#PARENT: Gio.IOSchedulerJob.send_to_mainloop.gboolean
#COMMENT: a #GIOSchedulerJob
#NAME: set_attribute_byte_string
#PARENT: Gio.File
#COMMENT: Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING to @value.
If @attribute is of a different type, this operation will fail,
returning %FALSE.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: default_port
#PARENT: Gio.SocketClient.connect_to_host.SocketConnection
#COMMENT: the default port to connect to
#NAME: family
#PARENT: Gio.SocketConnection.factory_register_type.none
#COMMENT: a #GSocketFamily
#NAME: contents
#PARENT: Gio.File.replace_contents_async.none
#COMMENT: string of contents to replace the file with
#NAME: file
#PARENT: Gio.FileIface.set_attribute.set_attribute.gboolean
#COMMENT: input #GFile
#NAME: get_scope_id
#PARENT: Gio.InetSocketAddress.get_scope_id
#COMMENT: the scope id field
#NAME: source_object
#PARENT: Gio.SimpleAsyncResult.new_take_error.SimpleAsyncResult
#COMMENT: a #GObject, or %NULL
#NAME: set_child_setup
#PARENT: Gio.SubprocessLauncher
#COMMENT: Sets up a child setup function.

The child setup function will be called after fork() but before
exec() on the child's side.

@destroy_notify will not be automatically called on the child's side
of the fork().  It will only be called when the last reference on the
#GSubprocessLauncher is dropped or when a new child setup function is
given.

%NULL can be given as @child_setup to disable the functionality.

Child setup functions are only available on UNIX.
#NAME: set_attributes_async
#PARENT: Gio.File
#COMMENT: Asynchronously sets the attributes of @file with @info.

For more details, see g_file_set_attributes_from_info(),
which is the synchronous version of this call.

When the operation is finished, @callback will be called.
You can then call g_file_set_attributes_finish() to get
the result of the operation.
#NAME: destroy-function
#PARENT: Gio.MemoryOutputStream
#COMMENT: Function called with the buffer as argument when the stream is destroyed.
#NAME: user_data
#PARENT: Gio.FileIface.make_directory_async.make_directory_async.none
#COMMENT: the data to pass to callback function
#NAME: items-changed
#PARENT: Gio.MenuModel
#COMMENT: Emitted when a change has occured to the menu.

The only changes that can occur to a menu is that items are removed
or added.  Items may not change (except by being removed and added
back in the same location).  This signal is capable of describing
both of those changes (at the same time).

The signal means that starting at the index @position, @removed
items were removed and @added items were added in their place.  If
@removed is zero then only items were added.  If @added is zero
then only items were removed.

As an example, if the menu contains items a, b, c, d (in that
order) and the signal (2, 1, 3) occurs then the new composition of
the menu will be a, b, _, _, _, d (with each _ representing some
new item).

Signal handlers may query the model (particularly the added items)
and expect to see the results of the modification that is being
reported.  The signal is emitted after the modification.
#NAME: close
#PARENT: Gio.InputStream
#COMMENT: Closes the stream, releasing resources related to it.

Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
Closing a stream multiple times will not return an error.

Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure
resources are released as early as possible.

Some streams might keep the backing store of the stream (e.g. a file descriptor)
open after the stream is closed. See the documentation for the individual
stream for details.

On failure the first error that happened will be reported, but the close
operation will finish as much as possible. A stream that failed to
close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
is important to check and report the error to the user.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
Cancelling a close will still leave the stream closed, but some streams
can use a faster close that doesn't block to e.g. check errors.
#NAME: name
#PARENT: Gio.io_extension_point_lookup.IOExtensionPoint
#COMMENT: the name of the extension point
#NAME: object
#PARENT: Gio.Application.bind_busy_property.none
#COMMENT: a #GObject
#NAME: bound
#PARENT: Gio.SocketListenerEvent
#COMMENT: The listener has bound a socket.
#NAME: cancellable
#PARENT: Gio.Subprocess.wait.gboolean
#COMMENT: a #GCancellable
#NAME: is_symlink
#PARENT: Gio.FileInfo.set_is_symlink.none
#COMMENT: a #gboolean.
#NAME: filename
#PARENT: Gio.content_type_guess.utf8
#COMMENT: a string, or %NULL
#NAME: file
#PARENT: Gio.File.hash.guint
#COMMENT: #gconstpointer to a #GFile
#NAME: graceful_disconnect
#PARENT: Gio.TcpConnection.set_graceful_disconnect.none
#COMMENT: Whether to do graceful disconnects or not
#NAME: add_service_dir
#PARENT: Gio.TestDBus
#COMMENT: Add a path where dbus-daemon will look up .service files. This can't be
called after g_test_dbus_up().
#NAME: cancellable
#PARENT: Gio.Volume.eject_with_operation.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: measure_disk_usage_finish
#PARENT: Gio.File.measure_disk_usage_finish
#COMMENT: %TRUE if successful, with the out parameters set.
         %FALSE otherwise, with @error set.
#NAME: get_name
#PARENT: Gio.AppInfo
#COMMENT: Gets the installed name of the application.
#NAME: mount
#PARENT: Gio.MountIface.can_unmount.can_unmount.gboolean
#COMMENT: a #GMount.
#NAME: ConverterIface
#PARENT: Gio
#COMMENT: Provides an interface for converting data from one type
to another type. The conversion can be stateful
and may fail at any place.
#NAME: xml_data
#PARENT: Gio.DBusNodeInfo.new_for_xml.DBusNodeInfo
#COMMENT: Valid D-Bus introspection XML.
#NAME: TcpConnection
#PARENT: Gio
#COMMENT: This is the subclass of #GSocketConnection that is created
for TCP/IP sockets.
#NAME: read_finish
#PARENT: Gio.InputStream
#COMMENT: Finishes an asynchronous stream read operation.
#NAME: get_is_remote
#PARENT: Gio.Application.get_is_remote
#COMMENT: %TRUE if @application is remote
#NAME: new_from_error
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Creates a #GSimpleAsyncResult from an error condition.
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.get_action_state_hint.get_action_state_hint.GLib.Variant
#COMMENT: the name of the action to query
#NAME: result
#PARENT: Gio.Permission.release_finish.gboolean
#COMMENT: the #GAsyncResult given to the #GAsyncReadyCallback
#NAME: put_int32
#PARENT: Gio.DataOutputStream.put_int32
#COMMENT: %TRUE if @data was successfully added to the @stream.
#NAME: writable-change-event
#PARENT: Gio.Settings.writable-change-event
#COMMENT: %TRUE to stop other handlers from being invoked for the
         event. FALSE to propagate the event further.
#NAME: uri_scheme
#PARENT: Gio.DesktopAppInfoLookupIface.get_default_for_uri_scheme.get_default_for_uri_scheme.AppInfo
#COMMENT: a string containing a URI scheme.
#NAME: FileIcon
#PARENT: Gio
#COMMENT: #GFileIcon specifies an icon by pointing to an image file
to be used as icon.
#NAME: name
#PARENT: Gio.FileAttributeInfo
#COMMENT: the name of the attribute.
#NAME: task
#PARENT: Gio.Task.return_boolean.none
#COMMENT: a #GTask.
#NAME: result
#PARENT: Gio.Task.return_boolean.none
#COMMENT: the #gboolean result of a task function.
#NAME: count
#PARENT: Gio.OutputStream.write.gssize
#COMMENT: the number of bytes to write
#NAME: buffer
#PARENT: Gio.Socket.send.gssize
#COMMENT: the buffer
    containing the data to send.
#NAME: hostname
#PARENT: Gio.SrvTarget.new.SrvTarget
#COMMENT: the host that the service is running on
#NAME: password
#PARENT: Gio.TlsPassword.get_value.guint8
#COMMENT: a #GTlsPassword object
#NAME: tag
#PARENT: Gio.EmblemOrigin
#COMMENT: Emblem comes from a user-defined tag, e.g. set by nautilus (in the future)
#NAME: can_poll_for_media
#PARENT: Gio.Drive.can_poll_for_media
#COMMENT: %TRUE if the @drive can be polled for media changes,
    %FALSE otherwise.
#NAME: progress_data
#PARENT: Gio.FileIface.measure_disk_usage_async.measure_disk_usage_async.none
#COMMENT: user_data for @progress_callback
#NAME: label
#PARENT: Gio.Menu.append.none
#COMMENT: the section label, or %NULL
#NAME: stream
#PARENT: Gio.FileInputStreamClass.query_info_finish.query_info_finish.FileInfo
#COMMENT: a #GFileInputStream.
#NAME: interface_
#PARENT: Gio.DBusInterfaceIface.set_object.set_object.none
#COMMENT: An exported D-Bus interface.
#NAME: signature
#PARENT: Gio.DBusPropertyInfo
#COMMENT: The D-Bus signature of the property (a single complete type).
#NAME: dbus_error_new_for_dbus_error
#PARENT: Gio.dbus_error_new_for_dbus_error
#COMMENT: An allocated #GError. Free with g_error_free().
#NAME: read_int16
#PARENT: Gio.DataInputStream
#COMMENT: Reads a 16-bit/2-byte value from @stream.

In order to get the correct byte order for this read operation,
see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().
#NAME: connection
#PARENT: Gio.DBusConnection.call_sync.GLib.Variant
#COMMENT: a #GDBusConnection
#NAME: settings
#PARENT: Gio.Settings.revert.none
#COMMENT: a #GSettings instance
#NAME: remount_finish
#PARENT: Gio.Mount.remount_finish
#COMMENT: %TRUE if the mount was successfully remounted. %FALSE otherwise.
#NAME: appinfo
#PARENT: Gio.AppInfo.set_as_default_for_type.gboolean
#COMMENT: a #GAppInfo.
#NAME: stream
#PARENT: Gio.BufferedInputStream.fill.gssize
#COMMENT: a #GBufferedInputStream
#NAME: user_data
#PARENT: Gio.OutputStream.close_async.none
#COMMENT: the data to pass to callback function
#NAME: get_allowed
#PARENT: Gio.Permission
#COMMENT: Gets the value of the 'allowed' property.  This property is %TRUE if
the caller currently has permission to perform the action that
@permission represents the permission to perform.
#NAME: uri
#PARENT: Gio.ProxyResolverInterface.lookup.lookup.utf8
#COMMENT: a URI representing the destination to connect to
#NAME: file
#PARENT: Gio.File.trash.gboolean
#COMMENT: #GFile to send to trash
#NAME: get_port
#PARENT: Gio.InetSocketAddress.get_port
#COMMENT: the port for @address
#NAME: enumerate_identifiers
#PARENT: Gio.VolumeIface.enumerate_identifiers.enumerate_identifiers
#COMMENT: a %NULL-terminated array
  of strings containing kinds of identifiers. Use g_strfreev() to free.
#NAME: changed
#PARENT: Gio.FileMonitorEvent
#COMMENT: a file changed.
#NAME: query_filesystem_info
#PARENT: Gio.File.query_filesystem_info
#COMMENT: a #GFileInfo or %NULL if there was an error.
    Free the returned object with g_object_unref().
#NAME: socket
#PARENT: Gio.Socket.get_fd.gint
#COMMENT: a #GSocket.
#NAME: append_to
#PARENT: Gio.File
#COMMENT: Gets an output stream for appending data to the file.
If the file doesn't already exist it is created.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
returned.

Some file systems don't allow all file names, and may return an
%G_IO_ERROR_INVALID_FILENAME error. If the file is a directory the
%G_IO_ERROR_IS_DIRECTORY error will be returned. Other errors are
possible too, and depend on what kind of filesystem the file is on.
#NAME: display_name
#PARENT: Gio.FileInfo.set_display_name.none
#COMMENT: a string containing a display name.
#NAME: socket
#PARENT: Gio.Socket.set_blocking.none
#COMMENT: a #GSocket.
#NAME: dbus_is_member_name
#PARENT: Gio.dbus_is_member_name
#COMMENT: %TRUE if valid, %FALSE otherwise.
#NAME: next_files_async
#PARENT: Gio.FileEnumerator
#COMMENT: Request information for a number of files from the enumerator asynchronously.
When all i/o for the operation is finished the @callback will be called with
the requested information.

See the documentation of #GFileEnumerator for information about the
order of returned files.

The callback can be called with less than @num_files files in case of error
or at the end of the enumerator. In case of a partial error the callback will
be called with any succeeding items and no error, and on the next request the
error will be reported. If a request is cancelled the callback will be called
with %G_IO_ERROR_CANCELLED.

During an async request no other sync and async calls are allowed, and will
result in %G_IO_ERROR_PENDING errors.

Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is %G_PRIORITY_DEFAULT.
#NAME: get_child
#PARENT: Gio.FileEnumerator.get_child
#COMMENT: a #GFile for the #GFileInfo passed it.
#NAME: set_flags
#PARENT: Gio.DBusMessage
#COMMENT: Sets the flags to set on @message.
#NAME: FileMeasureFlags
#PARENT: Gio
#COMMENT: Flags that can be used with g_file_measure_disk_usage().
#NAME: FILE_ATTRIBUTE_TIME_CREATED
#PARENT: Gio
#COMMENT: A key in the "time" namespace for getting the time the file was created.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64,
and contains the UNIX time since the file was created.

This corresponds to the NTFS ctime.
#NAME: ApplicationCommandLine
#PARENT: Gio
#COMMENT: #GApplicationCommandLine represents a command-line invocation of
an application.  It is created by #GApplication and emitted
in the #GApplication::command-line signal and virtual function.

The class contains the list of arguments that the program was invoked
with.  It is also possible to query if the commandline invocation was
local (ie: the current process is running in direct response to the
invocation) or remote (ie: some other process forwarded the
commandline to this process).

The GApplicationCommandLine object can provide the @argc and @argv
parameters for use with the #GOptionContext command-line parsing API,
with the g_application_command_line_get_arguments() function. See
[gapplication-example-cmdline3.c][gapplication-example-cmdline3]
for an example.

The exit status of the originally-invoked process may be set and
messages can be printed to stdout or stderr of that process.  The
lifecycle of the originally-invoked process is tied to the lifecycle
of this object (ie: the process exits when the last reference is
dropped).

The main use for #GApplicationCommandLine (and the
#GApplication::command-line signal) is 'Emacs server' like use cases:
You can set the `EDITOR` environment variable to have e.g. git use
your favourite editor to edit commit messages, and if you already
have an instance of the editor running, the editing will happen
in the running instance, instead of opening a new one. An important
aspect of this use case is that the process that gets started by git
does not return until the editing is done.

Normally, the commandline is completely handled in the
#GApplication::command-line handler. The launching instance exits
once the signal handler in the primary instance has returned, and
the return value of the signal handler becomes the exit status
of the launching instance.
|[<!-- language="C" -->
static int
command_line (GApplication            *application,
              GApplicationCommandLine *cmdline)
{
  gchar **argv;
  gint argc;
  gint i;

  argv = g_application_command_line_get_arguments (cmdline, &argc);

  g_application_command_line_print (cmdline,
                                    "This text is written back\n"
                                    "to stdout of the caller\n");

  for (i = 0; i < argc; i++)
    g_print ("argument %d: %s\n", i, argv[i]);

  g_strfreev (argv);

  return 0;
}
]|
The complete example can be found here:
[gapplication-example-cmdline.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-cmdline.c)

In more complicated cases, the handling of the comandline can be
split between the launcher and the primary instance.
|[<!-- language="C" -->
static gboolean
 test_local_cmdline (GApplication   *application,
                     gchar        ***arguments,
                     gint           *exit_status)
{
  gint i, j;
  gchar **argv;

  argv = *arguments;

  i = 1;
  while (argv[i])
    {
      if (g_str_has_prefix (argv[i], "--local-"))
        {
          g_print ("handling argument %s locally\n", argv[i]);
          g_free (argv[i]);
          for (j = i; argv[j]; j++)
            argv[j] = argv[j + 1];
        }
      else
        {
          g_print ("not handling argument %s locally\n", argv[i]);
          i++;
        }
    }

  *exit_status = 0;

  return FALSE;
}

static void
test_application_class_init (TestApplicationClass *class)
{
  G_APPLICATION_CLASS (class)->local_command_line = test_local_cmdline;

  ...
}
]|
In this example of split commandline handling, options that start
with `--local-` are handled locally, all other options are passed
to the #GApplication::command-line handler which runs in the primary
instance.

The complete example can be found here:
[gapplication-example-cmdline2.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-cmdline2.c)

If handling the commandline requires a lot of work, it may
be better to defer it.
|[<!-- language="C" -->
static gboolean
my_cmdline_handler (gpointer data)
{
  GApplicationCommandLine *cmdline = data;

  // do the heavy lifting in an idle

  g_application_command_line_set_exit_status (cmdline, 0);
  g_object_unref (cmdline); // this releases the application

  return G_SOURCE_REMOVE;
}

static int
command_line (GApplication            *application,
              GApplicationCommandLine *cmdline)
{
  // keep the application running until we are done with this commandline
  g_application_hold (application);

  g_object_set_data_full (G_OBJECT (cmdline),
                          "application", application,
                          (GDestroyNotify)g_application_release);

  g_object_ref (cmdline);
  g_idle_add (my_cmdline_handler, cmdline);

  return 0;
}
]|
In this example the commandline is not completely handled before
the #GApplication::command-line handler returns. Instead, we keep
a reference to the #GApplicationCommandLine object and handle it
later (in this example, in an idle). Note that it is necessary to
hold the application until you are done with the commandline.

The complete example can be found here:
[gapplication-example-cmdline3.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-cmdline3.c)
#NAME: ref_class
#PARENT: Gio.IOExtension.ref_class
#COMMENT: the #GTypeClass for the type of @extension
#NAME: cancellable
#PARENT: Gio.ResolverClass.lookup_by_address_async.lookup_by_address_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.take_error.none
#COMMENT: a #GSimpleAsyncResult
#NAME: connection
#PARENT: Gio.SocketConnection.connect_finish.gboolean
#COMMENT: a #GSocketConnection
#NAME: cancellable
#PARENT: Gio.SocketClient.connect_to_uri.SocketConnection
#COMMENT: a #GCancellable, or %NULL
#NAME: SrvTarget
#PARENT: Gio
#COMMENT: SRV (service) records are used by some network protocols to provide
service-specific aliasing and load-balancing. For example, XMPP
(Jabber) uses SRV records to locate the XMPP server for a domain;
rather than connecting directly to "example.com" or assuming a
specific server hostname like "xmpp.example.com", an XMPP client
would look up the "xmpp-client" SRV record for "example.com", and
then connect to whatever host was pointed to by that record.

You can use g_resolver_lookup_service() or
g_resolver_lookup_service_async() to find the #GSrvTargets
for a given service. However, if you are simply planning to connect
to the remote service, you can use #GNetworkService's
#GSocketConnectable interface and not need to worry about
#GSrvTarget at all.
#NAME: get_message_type
#PARENT: Gio.DBusMessage.get_message_type
#COMMENT: A 8-bit unsigned integer (typically a value from the #GDBusMessageType enumeration).
#NAME: scheme
#PARENT: Gio.NetworkService.set_scheme.none
#COMMENT: a URI scheme
#NAME: strip_remote_error
#PARENT: Gio.DBusError
#COMMENT: Looks for extra information in the error message used to recover
the D-Bus error name and strips it if found. If stripped, the
message field in @error will correspond exactly to what was
received on the wire.

This is typically used when presenting errors to the end user.
#NAME: dup
#PARENT: Gio.AppInfoIface.dup.dup
#COMMENT: a duplicate of @appinfo.
#NAME: callback
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: a #GAsyncReadyCallback to call when the request is
    satisfied or %NULL if you don't * care about the result of the
    method invocation
#NAME: dbus_error_message
#PARENT: Gio.DBusError.set_dbus_error.none
#COMMENT: D-Bus error message.
#NAME: location
#PARENT: Gio.FileIface.mount_enclosing_volume_finish.mount_enclosing_volume_finish.gboolean
#COMMENT: input #GFile
#NAME: new
#PARENT: Gio.TcpWrapperConnection
#COMMENT: Wraps @base_io_stream and @socket together as a #GSocketConnection.
#NAME: self
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: print
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Formats a message and prints it using the stdout print handler in the
invoking process.

If @cmdline is a local invocation then this is exactly equivalent to
g_print().  If @cmdline is remote then this is equivalent to calling
g_print() in the invoking process.
#NAME: user_data
#PARENT: Gio.DBusConnection.signal_subscribe.guint
#COMMENT: user data to pass to @callback
#NAME: is_closed
#PARENT: Gio.DBusConnection.is_closed
#COMMENT: %TRUE if the connection is closed, %FALSE otherwise
#NAME: iconname
#PARENT: Gio.ThemedIcon.new.ThemedIcon
#COMMENT: a string containing an icon name.
#NAME: action_name
#PARENT: Gio.ActionGroup.action_added.none
#COMMENT: the name of an action in the group
#NAME: get_available
#PARENT: Gio.BufferedInputStream
#COMMENT: Gets the size of the available data within the stream.
#NAME: pid_callback_data
#PARENT: Gio.DesktopAppInfo.launch_uris_as_manager.gboolean
#COMMENT: User data for @callback
#NAME: file
#PARENT: Gio.File.monitor.FileMonitor
#COMMENT: input #GFile
#NAME: stream
#PARENT: Gio.FileIOStreamClass.get_etag.get_etag.utf8
#COMMENT: a #GFileIOStream.
#NAME: flags
#PARENT: Gio.DBusProxy.call_sync.GLib.Variant
#COMMENT: Flags from the #GDBusCallFlags enumeration.
#NAME: get_uri
#PARENT: Gio.ProxyAddress.get_uri
#COMMENT: the @proxy's URI, or %NULL if unknown
#NAME: no_reply_expected
#PARENT: Gio.DBusMessageFlags
#COMMENT: A reply is not expected.
#NAME: peek_buffer
#PARENT: Gio.BufferedInputStream
#COMMENT: Returns the buffer with the currently available bytes. The returned
buffer must not be modified and will become invalid when reading from
the stream or filling the buffer.
#NAME: clear_pending
#PARENT: Gio.OutputStream
#COMMENT: Clears the pending flag on @stream.
#NAME: set_from_error
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Sets the result from a #GError.
#NAME: new
#PARENT: Gio.SimpleAction.new
#COMMENT: a new #GSimpleAction
#NAME: message
#PARENT: Gio.UnixFDMessage.steal_fds.gint
#COMMENT: a #GUnixFDMessage
#NAME: cancellable
#PARENT: Gio.pollable_stream_read.gssize
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: read_nonblocking
#PARENT: Gio.PollableInputStream
#COMMENT: Attempts to read up to @count bytes from @stream into @buffer, as
with g_input_stream_read(). If @stream is not currently readable,
this will immediately return %G_IO_ERROR_WOULD_BLOCK, and you can
use g_pollable_input_stream_create_source() to create a #GSource
that will be triggered when @stream is readable.

Note that since this method never blocks, you cannot actually
use @cancellable to cancel it. However, it will return an error
if @cancellable has already been cancelled when you call, which
may happen if you call this method after a source triggers due
to having been cancelled.
#NAME: state
#PARENT: Gio.Action
#COMMENT: The state of the action, or %NULL if the action is stateless.
#NAME: settings
#PARENT: Gio.Settings.set_string.gboolean
#COMMENT: a #GSettings object
#NAME: report_new_error
#PARENT: Gio.Task
#COMMENT: Creates a #GTask and then immediately calls
g_task_return_new_error() on it. Use this in the wrapper function
of an asynchronous method when you want to avoid even calling the
virtual method. You can then use g_async_result_is_tagged() in the
finish method wrapper to check if the result there is tagged as
having been created by the wrapper method, and deal with it
appropriately if so.

See also g_task_report_error().
#NAME: cancellable
#PARENT: Gio.Cancellable.pop_current.none
#COMMENT: a #GCancellable object
#NAME: mount_monitor
#PARENT: Gio.UnixMountMonitor.set_rate_limit.none
#COMMENT: a #GUnixMountMonitor
#NAME: type
#PARENT: Gio.content_type_can_be_executable.gboolean
#COMMENT: a content type string
#NAME: eject-button
#PARENT: Gio.Drive
#COMMENT: Emitted when the physical eject button (if any) of a drive has
been pressed.
#NAME: name
#PARENT: Gio.DBusProxy.new_for_bus.none
#COMMENT: A bus name (well-known or unique).
#NAME: uri
#PARENT: Gio.app_info_launch_default_for_uri.gboolean
#COMMENT: the uri to show
#NAME: volume_monitor
#PARENT: Gio.VolumeMonitor.get_volumes.Volume
#COMMENT: a #GVolumeMonitor.
#NAME: export_action_group
#PARENT: Gio.DBusConnection
#COMMENT: Exports @action_group on @connection at @object_path.

The implemented D-Bus API should be considered private.  It is
subject to change in the future.

A given object path can only have one action group exported on it.
If this constraint is violated, the export will fail and 0 will be
returned (with @error set accordingly).

You can unexport the action group using
g_dbus_connection_unexport_action_group() with the return value of
this function.

The thread default main context is taken at the time of this call.
All incoming action activations and state change requests are
reported from this context.  Any changes on the action group that
cause it to emit signals must also come from this same context.
Since incoming action activations and state change requests are
rather likely to cause changes on the action group, this effectively
limits a given action group to being exported from only one main
context.
#NAME: get_boolean
#PARENT: Gio.Settings
#COMMENT: Gets the value that is stored at @key in @settings.

A convenience variant of g_settings_get() for booleans.

It is a programmer error to give a @key that isn't specified as
having a boolean type in the schema for @settings.
#NAME: cancellable
#PARENT: Gio.DBusConnection.call_sync.GLib.Variant
#COMMENT: a #GCancellable or %NULL
#NAME: password
#PARENT: Gio.TlsInteractionClass.ask_password.ask_password.TlsInteractionResult
#COMMENT: a #GTlsPassword object
#NAME: sender
#PARENT: Gio.DBusSubtreeEnumerateFunc.utf8
#COMMENT: The unique bus name of the remote caller.
#NAME: call_finish
#PARENT: Gio.DBusProxy.call_finish
#COMMENT: %NULL if @error is set. Otherwise a #GVariant tuple with
return values. Free with g_variant_unref().
#NAME: flags
#PARENT: Gio.File.set_attribute_uint32.gboolean
#COMMENT: a #GFileQueryInfoFlags
#NAME: value
#PARENT: Gio.Settings.set_int.gboolean
#COMMENT: the value to set it to
#NAME: new_from_string
#PARENT: Gio.InetSocketAddress
#COMMENT: Creates a new #GInetSocketAddress for @address and @port.

If @address is an IPv6 address, it can also contain a scope ID
(separated from the address by a "<literal>%</literal>").
#NAME: error_domain
#PARENT: Gio.dbus_error_unregister_error.gboolean
#COMMENT: A #GQuark for a error domain.
#NAME: proxy
#PARENT: Gio.Proxy.supports_hostname.gboolean
#COMMENT: a #GProxy
#NAME: file
#PARENT: Gio.FileIcon
#COMMENT: The file containing the icon.
#NAME: set_attribute_boolean
#PARENT: Gio.FileInfo
#COMMENT: Sets the @attribute to contain the given @attr_value,
if possible.
#NAME: object
#PARENT: Gio.DBusObject.get_interface.DBusInterface
#COMMENT: A #GDBusObject.
#NAME: message
#PARENT: Gio.DBusMessage.set_path.none
#COMMENT: A #GDBusMessage.
#NAME: dbus_error_unregister_error
#PARENT: Gio.dbus_error_unregister_error
#COMMENT: %TRUE if the association was destroyed, %FALSE if it wasn't found.
#NAME: error_name
#PARENT: Gio.DBusMessage.new_method_error_valist.DBusMessage
#COMMENT: A valid D-Bus error name.
#NAME: byte_string
#PARENT: Gio.FileAttributeType
#COMMENT: a zero terminated string of non-zero bytes.
#NAME: res
#PARENT: Gio.DBusProxy.new_for_bus_finish.DBusProxy
#COMMENT: A #GAsyncResult obtained from the #GAsyncReadyCallback function passed to g_dbus_proxy_new_for_bus().
#NAME: out_serial
#PARENT: Gio.DBusConnection.send_message_with_reply.none
#COMMENT: return location for serial number assigned
    to @message when sending it or %NULL
#NAME: read_int32
#PARENT: Gio.DataInputStream
#COMMENT: Reads a signed 32-bit/4-byte value from @stream.

In order to get the correct byte order for this read operation,
see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: is_connected
#PARENT: Gio.Socket
#COMMENT: Check whether the socket is connected. This is only useful for
connection-oriented sockets.
#NAME: lookup_action
#PARENT: Gio.ActionMap.lookup_action
#COMMENT: a #GAction, or %NULL
#NAME: seekable
#PARENT: Gio.Seekable.seek.gboolean
#COMMENT: a #GSeekable.
#NAME: get_source_object
#PARENT: Gio.AsyncResult
#COMMENT: Gets the source object from a #GAsyncResult.
#NAME: new_from_filename
#PARENT: Gio.DesktopAppInfo
#COMMENT: Creates a new #GDesktopAppInfo.
#NAME: AsyncResultIface
#PARENT: Gio
#COMMENT: Interface definition for #GAsyncResult.
#NAME: handles_open
#PARENT: Gio.ApplicationFlags
#COMMENT: This application handles opening files (in
    the primary instance). Note that this flag only affects the default
    implementation of local_command_line(), and has no effect if
    %G_APPLICATION_HANDLES_COMMAND_LINE is given.
    See g_application_run() for details.
#NAME: location
#PARENT: Gio.File.mount_enclosing_volume_finish.gboolean
#COMMENT: input #GFile
#NAME: file
#PARENT: Gio.File.eject_mountable_with_operation_finish.gboolean
#COMMENT: input #GFile
#NAME: settings
#PARENT: Gio.Settings.get_flags.guint
#COMMENT: a #GSettings object
#NAME: volume
#PARENT: Gio.Volume.get_identifier.utf8
#COMMENT: a #GVolume
#NAME: get_stdin_pipe
#PARENT: Gio.Subprocess.get_stdin_pipe
#COMMENT: the stdout pipe
#NAME: domain
#PARENT: Gio.Task.report_new_error.none
#COMMENT: a #GQuark.
#NAME: keys
#PARENT: Gio.Settings.change-event.gboolean
#COMMENT: 
       an array of #GQuarks for the changed keys, or %NULL
#NAME: SocketClientEvent
#PARENT: Gio
#COMMENT: Describes an event occurring on a #GSocketClient. See the
#GSocketClient::event signal for more details.

Additional values may be added to this type in the future.
#NAME: prepend_section
#PARENT: Gio.Menu
#COMMENT: Convenience function for prepending a section menu item to the start
of @menu.  Combine g_menu_item_new_section() and g_menu_insert_item() for
a more flexible alternative.
#NAME: set_unix_user
#PARENT: Gio.Credentials.set_unix_user
#COMMENT: %TRUE if @uid was set, %FALSE if error is set.
#NAME: interaction
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by.TlsCertificate
#COMMENT: used to interact with the user if necessary
#NAME: callback
#PARENT: Gio.File.read_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: get_all
#PARENT: Gio.AppInfo
#COMMENT: Gets a list of all of the applications currently registered
on this system.

For desktop files, this includes applications that have
`NoDisplay=true` set or are excluded from display by means
of `OnlyShowIn` or `NotShowIn`. See g_app_info_should_show().
The returned list does not include applications which have
the `Hidden` key set.
#NAME: base_stream
#PARENT: Gio.DataInputStream.new.DataInputStream
#COMMENT: a #GInputStream.
#NAME: result
#PARENT: Gio.Resolver.lookup_service_finish.SrvTarget
#COMMENT: the result passed to your #GAsyncReadyCallback
#NAME: flags
#PARENT: Gio.TlsClientConnection.set_validation_flags.none
#COMMENT: the #GTlsCertificateFlags to use
#NAME: tell
#PARENT: Gio.Seekable
#COMMENT: Tells the current position within the stream.
#NAME: new_method_error_valist
#PARENT: Gio.DBusMessage.new_method_error_valist
#COMMENT: A #GDBusMessage. Free with g_object_unref().
#NAME: file1
#PARENT: Gio.FileIface.equal.equal.gboolean
#COMMENT: the first #GFile
#NAME: livemetadata
#PARENT: Gio.EmblemOrigin
#COMMENT: Emblem depicts live metadata, such as "readonly"
#NAME: len
#PARENT: Gio.MemoryInputStream.new_from_data.InputStream
#COMMENT: length of the data, may be -1 if @data is a nul-terminated string
#NAME: get_supported_types
#PARENT: Gio.AppInfo
#COMMENT: Retrieves the list of content types that @app_info claims to support.
If this information is not provided by the environment, this function
will return %NULL.
This function does not take in consideration associations added with
g_app_info_add_supports_type(), but only those exported directly by
the application.
#NAME: file2
#PARENT: Gio.FileIface.equal.equal.gboolean
#COMMENT: the second #GFile
#NAME: dirname
#PARENT: Gio.io_modules_scan_all_in_directory_with_scope.none
#COMMENT: pathname for a directory containing modules to scan.
#NAME: conn
#PARENT: Gio.TlsConnection.emit_accept_certificate.gboolean
#COMMENT: a #GTlsConnection
#NAME: set_signature
#PARENT: Gio.DBusMessage
#COMMENT: Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field.
#NAME: free
#PARENT: Gio.SrvTarget
#COMMENT: Frees @target
#NAME: get_attribute_status
#PARENT: Gio.FileInfo
#COMMENT: Gets the attribute status for an attribute key.
#NAME: timed_out
#PARENT: Gio.IOErrorEnum
#COMMENT: Operation timed out.
#NAME: bus_watch_name_on_connection
#PARENT: Gio
#COMMENT: Like g_bus_watch_name() but takes a #GDBusConnection instead of a
#GBusType.
#NAME: data_destroy_func
#PARENT: Gio.Cancellable.connect.gulong
#COMMENT: Free function for @data or %NULL.
#NAME: selinux_security_context_unknown
#PARENT: Gio.DBusError
#COMMENT: Asked for SELinux security context and it wasn't available.
#NAME: event
#PARENT: Gio.SocketListener.event.none
#COMMENT: the event that is occurring
#NAME: set_attribute_uint32
#PARENT: Gio.File
#COMMENT: Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_UINT32 to @value.
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: section
#PARENT: Gio.MenuItem.set_section.none
#COMMENT: a #GMenuModel, or %NULL
#NAME: get_is_site_local
#PARENT: Gio.InetAddress.get_is_site_local
#COMMENT: %TRUE if @address is a site-local address.
#NAME: source_object
#PARENT: Gio.SimpleAsyncResult.new_from_error.SimpleAsyncResult
#COMMENT: a #GObject, or %NULL.
#NAME: close
#PARENT: Gio.Socket
#COMMENT: Closes the socket, shutting down any active connection.

Closing a socket does not wait for all outstanding I/O operations
to finish, so the caller should not rely on them to be guaranteed
to complete even if the close returns with no error.

Once the socket is closed, all other operations will return
%G_IO_ERROR_CLOSED. Closing a socket multiple times will not
return an error.

Sockets will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure
resources are released as early as possible.

Beware that due to the way that TCP works, it is possible for
recently-sent data to be lost if either you close a socket while the
%G_IO_IN condition is set, or else if the remote connection tries to
send something to you after you close the socket but before it has
finished reading all of the data you sent. There is no easy generic
way to avoid this problem; the easiest fix is to design the network
protocol such that the client will never send data "out of turn".
Another solution is for the server to half-close the connection by
calling g_socket_shutdown() with only the @shutdown_write flag set,
and then wait for the client to notice this and close its side of the
connection, after which the server can safely call g_socket_close().
(This is what #GTcpConnection does if you call
g_tcp_connection_set_graceful_disconnect(). But of course, this
only works if the client will close its connection after the server
does.)
#NAME: new_for_path
#PARENT: Gio.File
#COMMENT: Constructs a #GFile for a given path. This operation never
fails, but the returned object might not support any I/O
operation if @path is malformed.
#NAME: callback
#PARENT: Gio.DriveIface.eject.eject.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: dbus_address_get_stream_finish
#PARENT: Gio.dbus_address_get_stream_finish
#COMMENT: A #GIOStream or %NULL if @error is set.
#NAME: files
#PARENT: Gio.AppLaunchContextClass.get_display.get_display.utf8
#COMMENT: a #GList of #GFile objects
#NAME: default_port
#PARENT: Gio.NetworkAddress.parse_uri.SocketConnectable
#COMMENT: The default port if none is found in the URI
#NAME: name
#PARENT: Gio.Settings.is_writable.gboolean
#COMMENT: the name of a key
#NAME: DBusSubtreeVTable
#PARENT: Gio
#COMMENT: Virtual table for handling subtrees registered with g_dbus_connection_register_subtree().
#NAME: string
#PARENT: Gio.dbus_is_address.gboolean
#COMMENT: A string.
#NAME: make_backup
#PARENT: Gio.File.replace_async.none
#COMMENT: %TRUE if a backup should be created
#NAME: file
#PARENT: Gio.FileIface.make_symbolic_link.make_symbolic_link.gboolean
#COMMENT: a #GFile with the name of the symlink to create
#NAME: seekable
#PARENT: Gio.SeekableIface.seek.seek.gboolean
#COMMENT: a #GSeekable.
#NAME: socket
#PARENT: Gio.Socket.join_multicast_group.gboolean
#COMMENT: a #GSocket.
#NAME: return_value_with_unix_fd_list
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Like g_dbus_method_invocation_return_value() but also takes a #GUnixFDList.

This method is only available on UNIX.

This method will free @invocation, you cannot use it afterwards.
#NAME: get_check_cancellable
#PARENT: Gio.Task
#COMMENT: Gets @task's check-cancellable flag. See
g_task_set_check_cancellable() for more details.
#NAME: flags
#PARENT: Gio.TlsInteraction.request_certificate.TlsInteractionResult
#COMMENT: flags providing more information about the request
#NAME: user_data
#PARENT: Gio.DriveIface.poll_for_media.poll_for_media.none
#COMMENT: user data to pass to @callback
#NAME: drive
#PARENT: Gio.Drive.can_stop.gboolean
#COMMENT: a #GDrive.
#NAME: cancellable
#PARENT: Gio.MountIface.unmount_with_operation.unmount_with_operation.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: new_with_credentials
#PARENT: Gio.UnixCredentialsMessage
#COMMENT: Creates a new #GUnixCredentialsMessage holding @credentials.
#NAME: unix_mount_guess_should_display
#PARENT: Gio.unix_mount_guess_should_display
#COMMENT: %TRUE if @mount_entry is deemed to be displayable.
#NAME: value
#PARENT: Gio.ActionGroup.change_action_state.none
#COMMENT: the new state
#NAME: ref
#PARENT: Gio.DBusAnnotationInfo
#COMMENT: If @info is statically allocated does nothing. Otherwise increases
the reference count.
#NAME: dbus_annotation_info_lookup
#PARENT: Gio.dbus_annotation_info_lookup
#COMMENT: The value or %NULL if not found. Do not free, it is owned by @annotations.
#NAME: is_writable
#PARENT: Gio.Settings
#COMMENT: Finds out if a key can be written or not
#NAME: extension
#PARENT: Gio.AppInfo.set_as_default_for_extension.gboolean
#COMMENT: a string containing the file extension (without the dot).
#NAME: disk_usage
#PARENT: Gio.FileIface.measure_disk_usage_finish.measure_disk_usage_finish.gboolean
#COMMENT: the number of bytes of disk space used
#NAME: res
#PARENT: Gio.File.append_to_finish.FileOutputStream
#COMMENT: #GAsyncResult
#NAME: watcher_id
#PARENT: Gio.bus_unwatch_name.none
#COMMENT: An identifier obtained from g_bus_watch_name()
#NAME: add_emblem
#PARENT: Gio.EmblemedIcon
#COMMENT: Adds @emblem to the #GList of #GEmblems.
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.get_object_path.utf8
#COMMENT: A #GDBusMethodInvocation.
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.get_action_state.get_action_state.GLib.Variant
#COMMENT: the name of the action to query
#NAME: directory
#PARENT: Gio.FileType
#COMMENT: File handle represents a directory.
#NAME: unset_attribute_mask
#PARENT: Gio.FileInfo
#COMMENT: Unsets a mask set by g_file_info_set_attribute_mask(), if one
is set.
#NAME: bytes_read
#PARENT: Gio.InputStream.read_all_finish.gboolean
#COMMENT: location to store the number of bytes that was read from the stream
#NAME: application
#PARENT: Gio.Application.get_is_busy.gboolean
#COMMENT: a #GApplication
#NAME: stream
#PARENT: Gio.UnixInputStream.get_fd.gint
#COMMENT: a #GUnixInputStream
#NAME: get_object
#PARENT: Gio.ListModel.get_object
#COMMENT: the object at @position.
#NAME: interface
#PARENT: Gio.DBusObject.interface-removed.none
#COMMENT: The #GDBusInterface that was removed.
#NAME: 
#PARENT: Gio.SimpleAsyncResult.set_error.none...
#COMMENT: a list of variables to fill in @format.
#NAME: cancellable
#PARENT: Gio.TlsConnection.handshake_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: item_index
#PARENT: Gio.MenuModel.iterate_item_links.MenuLinkIter
#COMMENT: the index of the item
#NAME: user_data
#PARENT: Gio.SocketConnection.connect_async.none
#COMMENT: user data for the callback
#NAME: state_hint
#PARENT: Gio.ActionGroup.query_action.gboolean
#COMMENT: the state hint, or %NULL if none
#NAME: menu
#PARENT: Gio.Menu.remove.none
#COMMENT: a #GMenu
#NAME: user_data
#PARENT: Gio.Subprocess.communicate_utf8_async.none
#COMMENT: User data
#NAME: action_name
#PARENT: Gio.ActionGroup.action_state_changed.none
#COMMENT: the name of an action in the group
#NAME: settings
#PARENT: Gio.Settings.apply.none
#COMMENT: a #GSettings instance
#NAME: lookup_signal
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: Looks up information about a signal.

The cost of this function is O(n) in number of signals unless
g_dbus_interface_info_cache_build() has been used on @info.
#NAME: permission
#PARENT: Gio.Permission.acquire_async.none
#COMMENT: a #GPermission instance
#NAME: get_current
#PARENT: Gio.Cancellable
#COMMENT: Gets the top cancellable from the stack.
#NAME: flags
#PARENT: Gio.Application.new.Application
#COMMENT: the application flags
#NAME: get_identifier
#PARENT: Gio.Drive.get_identifier
#COMMENT: a newly allocated string containing the
    requested identfier, or %NULL if the #GDrive
    doesn't have this kind of identifier.
#NAME: key
#PARENT: Gio.Settings.range_check.gboolean
#COMMENT: the key to check
#NAME: fds
#PARENT: Gio.UnixFDList.new_from_array.UnixFDList
#COMMENT: the initial list of file descriptors
#NAME: files
#PARENT: Gio.AppInfo.launch.gboolean
#COMMENT: a #GList of #GFile objects
#NAME: set_file_info
#PARENT: Gio.ZlibCompressor
#COMMENT: Sets @file_info in @compressor. If non-%NULL, and @compressor's
#GZlibCompressor:format property is %G_ZLIB_COMPRESSOR_FORMAT_GZIP,
it will be used to set the file name and modification time in
the GZIP header of the compressed data.

Note: it is an error to call this function while a compression is in
progress; it may only be called immediately after creation of @compressor,
or after resetting it with g_converter_reset().
#NAME: flags
#PARENT: Gio.File.append_to_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: authorize-authenticated-peer
#PARENT: Gio.DBusAuthObserver.authorize-authenticated-peer
#COMMENT: %TRUE if the peer is authorized, %FALSE if not.
#NAME: list
#PARENT: Gio.UnixFDList.get.gint
#COMMENT: a #GUnixFDList
#NAME: FileCreateFlags
#PARENT: Gio
#COMMENT: Flags used when an operation may create a file.
#NAME: get_fd_list
#PARENT: Gio.UnixFDMessage
#COMMENT: Gets the #GUnixFDList contained in @message.  This function does not
return a reference to the caller, but the returned list is valid for
the lifetime of @message.
#NAME: ConverterFlags
#PARENT: Gio
#COMMENT: Flags used when calling a g_converter_convert().
#NAME: cancellable
#PARENT: Gio.UnixConnection.send_fd.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: callback
#PARENT: Gio.File.unmount_mountable.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: dbus_error_is_remote_error
#PARENT: Gio.dbus_error_is_remote_error
#COMMENT: %TRUE if @error represents an error from a remote peer,
%FALSE otherwise.
#NAME: add_socket
#PARENT: Gio.SocketListener
#COMMENT: Adds @socket to the set of sockets that we try to accept
new clients from. The socket must be bound to a local
address and listened to.

@source_object will be passed out in the various calls
to accept to identify this particular source, which is
useful if you're listening on multiple addresses and do
different things depending on what address is connected to.

The @socket will not be automatically closed when the @listener is finalized
unless the listener held the final reference to the socket. Before GLib 2.42,
the @socket was automatically closed on finalization of the @listener, even
if references to it were held elsewhere.
#NAME: group
#PARENT: Gio.Socket.leave_multicast_group.gboolean
#COMMENT: a #GInetAddress specifying the group address to leave.
#NAME: list_attributes
#PARENT: Gio.FileInfo
#COMMENT: Lists the file info structure's attributes.
#NAME: user_data
#PARENT: Gio.AsyncReadyCallback.none
#COMMENT: user data passed to the callback.
#NAME: set_byte_order
#PARENT: Gio.DataInputStream
#COMMENT: This function sets the byte order for the given @stream. All subsequent
reads from the @stream will be read in the given @order.
#NAME: app_info_create_from_commandline
#PARENT: Gio
#COMMENT: Creates a new #GAppInfo from the given information.

Note that for @commandline, the quoting rules of the Exec key of the
[freedesktop.org Desktop Entry Specification](http://freedesktop.org/Standards/desktop-entry-spec)
are applied. For example, if the @commandline contains
percent-encoded URIs, the percent-character must be doubled in order to prevent it from
being swallowed by Exec key unquoting. See the specification for exact quoting rules.
#NAME: delete_finish
#PARENT: Gio.File.delete_finish
#COMMENT: %TRUE if the file was deleted. %FALSE otherwise.
#NAME: flags
#PARENT: Gio.File.replace_contents_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: bad_identity
#PARENT: Gio.TlsCertificateFlags
#COMMENT: The certificate does not match the
  expected identity of the site that it was retrieved from.
#NAME: attributes
#PARENT: Gio.MenuModel.get_item_attributes.none
#COMMENT: Attributes on the item
#NAME: user_data_free_func
#PARENT: Gio.DBusConnection.add_filter.guint
#COMMENT: function to free @user_data with when filter
    is removed or %NULL
#NAME: conn
#PARENT: Gio.TlsConnection.get_require_close_notify.gboolean
#COMMENT: a #GTlsConnection
#NAME: list_children
#PARENT: Gio.SettingsSchema.list_children
#COMMENT: a list of the children on @settings
#NAME: set_local_address
#PARENT: Gio.SocketClient
#COMMENT: Sets the local address of the socket client.
The sockets created by this object will bound to the
specified address (if not %NULL) before connecting.

This is useful if you want to ensure that the local
side of the connection is on a specific port, or on
a specific interface.
#NAME: callback
#PARENT: Gio.bus_get.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: action_name
#PARENT: Gio.ActionGroup.get_action_enabled.gboolean
#COMMENT: the name of the action to query
#NAME: next
#PARENT: Gio.MenuLinkIter.next
#COMMENT: %TRUE on success, or %FALSE when there are no more links
#NAME: lookup_finish
#PARENT: Gio.ProxyResolver.lookup_finish
#COMMENT: A
              NULL-terminated array of proxy URIs. Must be freed
              with g_strfreev().
#NAME: object
#PARENT: Gio.Settings.unbind.none
#COMMENT: the object
#NAME: stop
#PARENT: Gio.SocketService
#COMMENT: Stops the service, i.e. stops accepting connections
from the added sockets when the mainloop runs.

This call is thread-safe, so it may be called from a thread
handling an incoming client request.

Note that this only stops accepting new connections; it does not
close the listening sockets, and you can call
g_socket_service_start() again later to begin listening again. To
close the listening sockets, call g_socket_listener_close(). (This
will happen automatically when the #GSocketService is finalized.)
#NAME: spawnv
#PARENT: Gio.SubprocessLauncher
#COMMENT: Creates a #GSubprocess given a provided array of arguments.
#NAME: file
#PARENT: Gio.File.query_filesystem_info_finish.FileInfo
#COMMENT: input #GFile
#NAME: stream
#PARENT: Gio.InputStream.read_bytes_finish.GLib.Bytes
#COMMENT: a #GInputStream.
#NAME: io_priority
#PARENT: Gio.FileEnumeratorClass.close_async.close_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: unix_mounts_get
#PARENT: Gio.unix_mounts_get
#COMMENT: 
    a #GList of the UNIX mounts.
#NAME: settings
#PARENT: Gio.Settings.get_uint.guint
#COMMENT: a #GSettings object
#NAME: info
#PARENT: Gio.DesktopAppInfo.get_keywords.utf8
#COMMENT: a #GDesktopAppInfo
#NAME: stream
#PARENT: Gio.PollableOutputStreamInterface.is_writable.is_writable.gboolean
#COMMENT: a #GPollableOutputStream.
#NAME: lookup_certificate_for_handle
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle.lookup_certificate_for_handle
#COMMENT: a newly allocated
#GTlsCertificate, or %NULL. Use g_object_unref() to release the certificate.
#NAME: content_type
#PARENT: Gio.AppInfo.reset_type_associations.none
#COMMENT: a content type
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_object.GObject.Object
#COMMENT: a #GFileInfo.
#NAME: get_graceful_disconnect
#PARENT: Gio.TcpConnection.get_graceful_disconnect
#COMMENT: %TRUE if graceful disconnect is used on close, %FALSE otherwise
#NAME: get_default
#PARENT: Gio.Vfs
#COMMENT: Gets the default #GVfs for the system.
#NAME: get_has_unapplied
#PARENT: Gio.Settings
#COMMENT: Returns whether the #GSettings object has any unapplied
changes.  This can only be the case if it is in 'delayed-apply' mode.
#NAME: get_names
#PARENT: Gio.ThemedIcon
#COMMENT: Gets the names of icons from within @icon.
#NAME: if_local
#PARENT: Gio.FilesystemPreviewType
#COMMENT: Preview files if user has requested preview of "local" files.
#NAME: read_int64
#PARENT: Gio.DataInputStream
#COMMENT: Reads a 64-bit/8-byte value from @stream.

In order to get the correct byte order for this read operation,
see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: get_supported_uri_schemes
#PARENT: Gio.Vfs.get_supported_uri_schemes
#COMMENT: a %NULL-terminated array of strings.
    The returned array belongs to GIO and must
    not be freed or modified.
#NAME: out_guid
#PARENT: Gio.dbus_address_get_stream_finish.IOStream
#COMMENT: %NULL or return location to store the GUID extracted from @address, if any.
#NAME: user_data
#PARENT: Gio.FileEnumeratorClass.close_async.close_async.none
#COMMENT: the data to pass to callback function
#NAME: set_icon
#PARENT: Gio.MenuItem
#COMMENT: Sets (or unsets) the icon on @menu_item.

This call is the same as calling g_icon_serialize() and using the
result as the value to g_menu_item_set_attribute_value() for
%G_MENU_ATTRIBUTE_ICON.

This API is only intended for use with "noun" menu items; things like
bookmarks or applications in an "Open With" menu.  Don't use it on
menu items corresponding to verbs (eg: stock icons for 'Save' or
'Quit').

If @icon is %NULL then the icon is unset.
#NAME: is_closed
#PARENT: Gio.OutputStream.is_closed
#COMMENT: %TRUE if @stream is closed. %FALSE otherwise.
#NAME: propagate_pointer
#PARENT: Gio.Task
#COMMENT: Gets the result of @task as a pointer, and transfers ownership
of that value to the caller.

If the task resulted in an error, or was cancelled, then this will
instead return %NULL and set @error.

Since this method transfers ownership of the return value (or
error) to the caller, you may only call it once.
#NAME: key
#PARENT: Gio.SettingsSchemaKey.get_description.utf8
#COMMENT: a #GSettingsSchemaKey
#NAME: enumerate_identifiers
#PARENT: Gio.DriveIface.enumerate_identifiers.enumerate_identifiers
#COMMENT: a %NULL-terminated
    array of strings containing kinds of identifiers. Use g_strfreev()
    to free.
#NAME: mount
#PARENT: Gio.Mount.is_shadowed.gboolean
#COMMENT: A #GMount.
#NAME: set_database
#PARENT: Gio.TlsConnection
#COMMENT: Sets the certificate database that is used to verify peer certificates.
This is set to the default database by default. See
g_tls_backend_get_default_database(). If set to %NULL, then
peer certificate validation will always set the
%G_TLS_CERTIFICATE_UNKNOWN_CA error (meaning
#GTlsConnection::accept-certificate will always be emitted on
client-side connections, unless that bit is not set in
#GTlsClientConnection:validation-flags).
#NAME: flags
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by.lookup_certificates_issued_by.TlsCertificate
#COMMENT: Flags which affect the lookup operation.
#NAME: cancellable
#PARENT: Gio.File.set_attribute_int32.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: interaction
#PARENT: Gio.TlsInteraction.request_certificate_finish.TlsInteractionResult
#COMMENT: a #GTlsInteraction object
#NAME: IOSchedulerJob
#PARENT: Gio
#COMMENT: Opaque class for defining and scheduling IO jobs.
#NAME: get_base_stream
#PARENT: Gio.FilterInputStream.get_base_stream
#COMMENT: a #GInputStream.
#NAME: format_string
#PARENT: Gio.MenuItem.set_action_and_target.none
#COMMENT: a GVariant format string
#NAME: is_user_mountable
#PARENT: Gio.UnixMountPoint
#COMMENT: Checks if a unix mount point is mountable by the user.
#NAME: source_new
#PARENT: Gio.Cancellable.source_new
#COMMENT: the new #GSource.
#NAME: callback
#PARENT: Gio.MountIface.unmount_with_operation.unmount_with_operation.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: icon
#PARENT: Gio.Icon.to_string.utf8
#COMMENT: a #GIcon.
#NAME: cancellable
#PARENT: Gio.ProxyInterface.connect.connect.IOStream
#COMMENT: a #GCancellable
#NAME: list_schemas
#PARENT: Gio.SettingsSchemaSource
#COMMENT: Lists the schemas in a given source.

If @recursive is %TRUE then include parent sources.  If %FALSE then
only include the schemas from one source (ie: one directory).  You
probably want %TRUE.

Non-relocatable schemas are those for which you can call
g_settings_new().  Relocatable schemas are those for which you must
use g_settings_new_with_path().

Do not call this function from normal programs.  This is designed for
use by database editors, commandline tools, etc.
#NAME: create_certificate_handle
#PARENT: Gio.TlsDatabase
#COMMENT: Create a handle string for the certificate. The database will only be able
to create a handle for certificates that originate from the database. In
cases where the database cannot create a handle for a certificate, %NULL
will be returned.

This handle should be stable across various instances of the application,
and between applications. If a certificate is modified in the database,
then it is not guaranteed that this handle will continue to point to it.
#NAME: verify_chain
#PARENT: Gio.TlsDatabase
#COMMENT: Verify's a certificate chain after looking up and adding any missing
certificates to the chain.

@chain is a chain of #GTlsCertificate objects each pointing to the next
certificate in the chain by its %issuer property. The chain may initially
consist of one or more certificates. After the verification process is
complete, @chain may be modified by adding missing certificates, or removing
extra certificates. If a certificate anchor was found, then it is added to
the @chain.

@purpose describes the purpose (or usage) for which the certificate
is being used. Typically @purpose will be set to #G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER
which means that the certificate is being used to authenticate a server
(and we are acting as the client).

The @identity is used to check for pinned certificates (trust exceptions)
in the database. These will override the normal verification process on a
host by host basis.

Currently there are no @flags, and %G_TLS_DATABASE_VERIFY_NONE should be
used.

This function can block, use g_tls_database_verify_chain_async() to perform
the verification operation asynchronously.
#NAME: get_native_size
#PARENT: Gio.SocketAddress
#COMMENT: Gets the size of @address's native struct sockaddr.
You can use this to allocate memory to pass to
g_socket_address_to_native().
#NAME: mount
#PARENT: Gio.Mount.can_unmount.gboolean
#COMMENT: a #GMount.
#NAME: stream
#PARENT: Gio.OutputStreamClass.close_async.close_async.none
#COMMENT: A #GOutputStream.
#NAME: cancellable
#PARENT: Gio.SocketAddressEnumeratorClass.next.next.SocketAddress
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_unix_fd_list
#PARENT: Gio.DBusMessage.get_unix_fd_list
#COMMENT: A #GUnixFDList or %NULL if no file descriptors are
associated. Do not free, this object is owned by @message.
#NAME: vfs
#PARENT: Gio.Vfs.get_file_for_path.File
#COMMENT: a #GVfs.
#NAME: get_emblems
#PARENT: Gio.EmblemedIcon
#COMMENT: Gets the list of emblems for the @icon.
#NAME: strip_remote_error
#PARENT: Gio.DBusError.strip_remote_error
#COMMENT: %TRUE if information was stripped, %FALSE otherwise.
#NAME: io_priority
#PARENT: Gio.FileEnumerator.next_files_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: force_rescan
#PARENT: Gio.Mount.guess_content_type.none
#COMMENT: Whether to force a rescan of the content.
    Otherwise a cached result will be used if available
#NAME: peek_fds
#PARENT: Gio.UnixFDList.peek_fds
#COMMENT: an array of file
    descriptors
#NAME: set_attribute_uint64
#PARENT: Gio.File
#COMMENT: Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_UINT64 to @value.
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: user_data
#PARENT: Gio.FileIface.eject_mountable.eject_mountable.none
#COMMENT: the data to pass to callback function
#NAME: get_uint
#PARENT: Gio.Settings
#COMMENT: Gets the value that is stored at @key in @settings.

A convenience variant of g_settings_get() for 32-bit unsigned
integers.

It is a programmer error to give a @key that isn't specified as
having a uint32 type in the schema for @settings.
#NAME: get_double
#PARENT: Gio.Settings
#COMMENT: Gets the value that is stored at @key in @settings.

A convenience variant of g_settings_get() for doubles.

It is a programmer error to give a @key that isn't specified as
having a 'double' type in the schema for @settings.
#NAME: message
#PARENT: Gio.DBusConnection.send_message.gboolean
#COMMENT: a #GDBusMessage
#NAME: proxy
#PARENT: Gio.Proxy.connect_async.none
#COMMENT: a #GProxy
#NAME: res
#PARENT: Gio.LoadableIconIface.load_finish.load_finish.InputStream
#COMMENT: a #GAsyncResult.
#NAME: stream
#PARENT: Gio.OutputStream.is_closing.gboolean
#COMMENT: a #GOutputStream.
#NAME: is_readable
#PARENT: Gio.PollableInputStreamInterface.is_readable.is_readable
#COMMENT: %TRUE if @stream is readable, %FALSE if not. If an error
  has occurred on @stream, this will result in
  g_pollable_input_stream_is_readable() returning %TRUE, and the
  next attempt to read will return the error.
#NAME: connection
#PARENT: Gio.DBusObjectManagerClient.new.none
#COMMENT: A #GDBusConnection.
#NAME: count
#PARENT: Gio.OutputStream.write_fn.gssize
#COMMENT: the number of bytes to write
#NAME: SimpleAsyncThreadFunc
#PARENT: Gio
#COMMENT: Simple thread function that runs an asynchronous operation and
checks for cancellation.
#NAME: interaction
#PARENT: Gio.TlsConnection
#COMMENT: A #GTlsInteraction object to be used when the connection or certificate
database need to interact with the user. This will be used to prompt the
user for passwords where necessary.
#NAME: get_flags
#PARENT: Gio.Application.get_flags
#COMMENT: the flags for @application
#NAME: stream
#PARENT: Gio.OutputStream.close.gboolean
#COMMENT: A #GOutputStream.
#NAME: result
#PARENT: Gio.SocketAddressEnumeratorClass.next_finish.next_finish.SocketAddress
#COMMENT: a #GAsyncResult
#NAME: up
#PARENT: Gio.TestDBus
#COMMENT: Start a dbus-daemon instance and set DBUS_SESSION_BUS_ADDRESS. After this
call, it is safe for unit tests to start sending messages on the session bus.

If this function is called from setup callback of g_test_add(),
g_test_dbus_down() must be called in its teardown callback.

If this function is called from unit test's main(), then g_test_dbus_down()
must be called after g_test_run().
#NAME: callback
#PARENT: Gio.simple_async_report_error_in_idle.none
#COMMENT: a #GAsyncReadyCallback.
#NAME: cancellable
#PARENT: Gio.LoadableIconIface.load.load.InputStream
#COMMENT: optional #GCancellable object, %NULL to
ignore.
#NAME: user_data
#PARENT: Gio.FileIface.mount_mountable.mount_mountable.none
#COMMENT: the data to pass to callback function
#NAME: set_ttl
#PARENT: Gio.Socket
#COMMENT: Sets the time-to-live for outgoing unicast packets on @socket.
By default the platform-specific default value is used.
#NAME: to_blob
#PARENT: Gio.DBusMessage.to_blob
#COMMENT: A pointer to a
valid binary D-Bus message of @out_size bytes generated by @message
or %NULL if @error is set. Free with g_free().
#NAME: new
#PARENT: Gio.InetAddressMask.new
#COMMENT: a new #GInetAddressMask, or %NULL on error
#NAME: volume
#PARENT: Gio.Volume.mount.none
#COMMENT: a #GVolume
#NAME: flush
#PARENT: Gio.OutputStreamClass.flush.flush
#COMMENT: %TRUE on success, %FALSE on error
#NAME: child_source
#PARENT: Gio.pollable_source_new_full.GLib.Source
#COMMENT: optional child source to attach
#NAME: mount
#PARENT: Gio.Mount.eject_with_operation_finish.gboolean
#COMMENT: a #GMount.
#NAME: flags
#PARENT: Gio.bus_watch_name_on_connection.guint
#COMMENT: Flags from the #GBusNameWatcherFlags enumeration.
#NAME: get_dbus_object_path
#PARENT: Gio.Application
#COMMENT: Gets the D-Bus object path being used by the application, or %NULL.

If #GApplication is using its D-Bus backend then this function will
return the D-Bus object path that #GApplication is using.  If the
application is the primary instance then there is an object published
at this path.  If the application is not the primary instance then
the result of this function is undefined.

If #GApplication is not using D-Bus then this function will return
%NULL.  This includes the situation where the D-Bus backend would
normally be in use but we were unable to connect to the bus.

This function must not be called before the application has been
registered.  See g_application_get_is_registered().
#NAME: FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT
#PARENT: Gio
#COMMENT: A key in the "unix" namespace for checking if the file represents a
UNIX mount point. This attribute is %TRUE if the file is a UNIX mount
point. This attribute is only available for UNIX file systems.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: cancellable
#PARENT: Gio.PermissionClass.release.release.gboolean
#COMMENT: a #GCancellable, or %NULL
#NAME: get_native_size
#PARENT: Gio.SocketAddress.get_native_size
#COMMENT: the size of the native struct sockaddr that
    @address represents
#NAME: mountable
#PARENT: Gio.FileType
#COMMENT: File is a mountable location.
#NAME: socket
#PARENT: Gio.Socket.receive_from.gssize
#COMMENT: a #GSocket
#NAME: invalid_data
#PARENT: Gio.IOErrorEnum
#COMMENT: The input data was invalid. Since 2.24
#NAME: FileReadMoreCallback
#PARENT: Gio
#COMMENT: When loading the partial contents of a file with g_file_load_partial_contents_async(),
it may become necessary to determine if any more data from the file should be loaded.
A #GFileReadMoreCallback function facilitates this by returning %TRUE if more data
should be read, or %FALSE otherwise.
#NAME: message
#PARENT: Gio.DBusMessage.set_signature.none
#COMMENT: A #GDBusMessage.
#NAME: mount
#PARENT: Gio.MountIface.remount.remount.none
#COMMENT: a #GMount.
#NAME: detailed_action
#PARENT: Gio.Menu.insert.none
#COMMENT: the detailed action string, or %NULL
#NAME: callback
#PARENT: Gio.FileEnumeratorClass.close_async.close_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: add_entries
#PARENT: Gio.SimpleActionGroup
#COMMENT: A convenience function for creating multiple #GSimpleAction instances
and adding them to the action group.
#NAME: get_header_fields
#PARENT: Gio.DBusMessage
#COMMENT: Gets an array of all header fields on @message that are set.
#NAME: query_default_handler
#PARENT: Gio.File.query_default_handler
#COMMENT: a #GAppInfo if the handle was found,
    %NULL if there were errors.
    When you are done with it, release it with g_object_unref()
#NAME: name
#PARENT: Gio.BusNameVanishedCallback.none
#COMMENT: The name being watched.
#NAME: no_space
#PARENT: Gio.IOErrorEnum
#COMMENT: No space left on drive.
#NAME: volume
#PARENT: Gio.Volume.mount_finish.gboolean
#COMMENT: a #GVolume
#NAME: spawn_no_memory
#PARENT: Gio.DBusError
#COMMENT: Tried to get a UNIX process ID and it wasn't available.
#NAME: backend
#PARENT: Gio.TlsBackendInterface.supports_tls.supports_tls.gboolean
#COMMENT: the #GTlsBackend
#NAME: TlsClientConnection
#PARENT: Gio
#COMMENT: #GTlsClientConnection is the client-side subclass of
#GTlsConnection, representing a client-side TLS connection.
#NAME: authorize_authenticated_peer
#PARENT: Gio.DBusAuthObserver.authorize_authenticated_peer
#COMMENT: %TRUE if the peer is authorized, %FALSE if not.
#NAME: vectors
#PARENT: Gio.OutputMessage
#COMMENT: pointer to an array of output vectors
#NAME: get_data_size
#PARENT: Gio.MemoryOutputStream.get_data_size
#COMMENT: the number of bytes written to the stream
#NAME: verify_chain_finish
#PARENT: Gio.TlsDatabase.verify_chain_finish
#COMMENT: the appropriate #GTlsCertificateFlags which represents the
result of verification.
#NAME: value
#PARENT: Gio.MenuLinkIterClass.get_next.get_next.gboolean
#COMMENT: the linked #GMenuModel
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.action_state_changed.action_state_changed.none
#COMMENT: a #GActionGroup
#NAME: fd_based
#PARENT: Gio.FileDescriptorBased.get_fd.gint
#COMMENT: a #GFileDescriptorBased.
#NAME: bytes_written
#PARENT: Gio.OutputStream.printf.gboolean
#COMMENT: location to store the number of bytes that was
    written to the stream
#NAME: enumerate
#PARENT: Gio.SocketConnectable.enumerate
#COMMENT: a new #GSocketAddressEnumerator.
#NAME: file_parse_name
#PARENT: Gio.file_parse_name
#COMMENT: a new #GFile.
#NAME: networking_init
#PARENT: Gio
#COMMENT: Initializes the platform networking libraries (eg, on Windows, this
calls WSAStartup()). GLib will call this itself if it is needed, so
you only need to call it if you directly call system networking
functions (without calling any GLib networking functions first).
#NAME: invocation
#PARENT: Gio.DBusObjectSkeleton.authorize-method.gboolean
#COMMENT: A #GDBusMethodInvocation.
#NAME: get_port
#PARENT: Gio.NetworkAddress.get_port
#COMMENT: @addr's port (which may be 0)
#NAME: interaction
#PARENT: Gio.TlsDatabaseClass.verify_chain.verify_chain.TlsCertificateFlags
#COMMENT: used to interact with the user if necessary
#NAME: flags
#PARENT: Gio.Mount.remount.none
#COMMENT: flags affecting the operation
#NAME: new
#PARENT: Gio.ConverterOutputStream
#COMMENT: Creates a new converter output stream for the @base_stream.
#NAME: manager
#PARENT: Gio.DBusObjectManagerServer.set_connection.none
#COMMENT: A #GDBusObjectManagerServer.
#NAME: vfs
#PARENT: Gio.VfsClass.is_active.is_active.gboolean
#COMMENT: a #GVfs.
#NAME: key
#PARENT: Gio.Settings.set_enum.gboolean
#COMMENT: a key, within @settings
#NAME: 
#PARENT: Gio.Settings.get.none...
#COMMENT: arguments as per @format
#NAME: new
#PARENT: Gio.UnixSocketAddress.new
#COMMENT: a new #GUnixSocketAddress
#NAME: close_finish
#PARENT: Gio.DBusConnection
#COMMENT: Finishes an operation started with g_dbus_connection_close().
#NAME: interface_
#PARENT: Gio.DBusMessage.new_signal.DBusMessage
#COMMENT: A valid D-Bus interface name.
#NAME: parse_detailed_name
#PARENT: Gio.Action.parse_detailed_name
#COMMENT: %TRUE if successful, else %FALSE with @error set
#NAME: unix_mount_points_changed_since
#PARENT: Gio
#COMMENT: Checks if the unix mount points have changed since a given unix time.
#NAME: get_options
#PARENT: Gio.UnixMountPoint
#COMMENT: Gets the options for the mount point.
#NAME: enumerate_namespace
#PARENT: Gio.FileAttributeMatcher
#COMMENT: Checks if the matcher will match all of the keys in a given namespace.
This will always return %TRUE if a wildcard character is in use (e.g. if
matcher was created with "standard::*" and @ns is "standard", or if matcher was created
using "*" and namespace is anything.)

TODO: this is awkwardly worded.
#NAME: user_data
#PARENT: Gio.File.create_readwrite_async.none
#COMMENT: the data to pass to callback function
#NAME: default-port
#PARENT: Gio.ProxyAddressEnumerator
#COMMENT: The default port to use if #GProxyAddressEnumerator:uri does not
specify one.
#NAME: platform_data
#PARENT: Gio.RemoteActionGroupInterface.change_action_state_full.change_action_state_full.none
#COMMENT: the platform data to send
#NAME: resource
#PARENT: Gio.Resource.get_info.gboolean
#COMMENT: A #GResource
#NAME: get_input_stream
#PARENT: Gio.IOStream.get_input_stream
#COMMENT: a #GInputStream, owned by the #GIOStream.
Do not free.
#NAME: ostream
#PARENT: Gio.MemoryOutputStream.steal_data.gpointer
#COMMENT: a #GMemoryOutputStream
#NAME: create_source
#PARENT: Gio.Socket.create_source
#COMMENT: a newly allocated %GSource, free with g_source_unref().
#NAME: icon
#PARENT: Gio.FileIcon.get_file.File
#COMMENT: a #GIcon.
#NAME: interaction
#PARENT: Gio.TlsDatabaseClass.verify_chain_async.verify_chain_async.none
#COMMENT: used to interact with the user if necessary
#NAME: get_base_stream
#PARENT: Gio.FilterInputStream
#COMMENT: Gets the base stream for the filter stream.
#NAME: listener
#PARENT: Gio.SocketListener.add_any_inet_port.guint16
#COMMENT: a #GSocketListener
#NAME: volume
#PARENT: Gio.Volume.get_drive.Drive
#COMMENT: a #GVolume
#NAME: DBusMethodInfo
#PARENT: Gio
#COMMENT: Information about a method on an D-Bus interface.
#NAME: flags
#PARENT: Gio.File.set_attribute_byte_string.gboolean
#COMMENT: a #GFileQueryInfoFlags
#NAME: result_destroy
#PARENT: Gio.Task.return_pointer.none
#COMMENT: a #GDestroyNotify function.
#NAME: load_contents_finish
#PARENT: Gio.File.load_contents_finish
#COMMENT: %TRUE if the load was successful. If %FALSE and @error is
    present, it will be set appropriately.
#NAME: g-signal
#PARENT: Gio.DBusProxy
#COMMENT: Emitted when a signal from the remote object and interface that @proxy is for, has been received.
#NAME: address
#PARENT: Gio.SocketConnection.connect.gboolean
#COMMENT: a #GSocketAddress specifying the remote address.
#NAME: read_upto_async
#PARENT: Gio.DataInputStream
#COMMENT: The asynchronous version of g_data_input_stream_read_upto().
It is an error to have two outstanding calls to this function.

In contrast to g_data_input_stream_read_until(), this function
does not consume the stop character. You have to use
g_data_input_stream_read_byte() to get it before calling
g_data_input_stream_read_upto() again.

Note that @stop_chars may contain '\0' if @stop_chars_len is
specified.

When the operation is finished, @callback will be called. You
can then call g_data_input_stream_read_upto_finish() to get
the result of the operation.
#NAME: source_object
#PARENT: Gio.Task.is_valid.gboolean
#COMMENT: the source object
  expected to be associated with the task
#NAME: file
#PARENT: Gio.File.set_attributes_finish.gboolean
#COMMENT: input #GFile
#NAME: set_timeout
#PARENT: Gio.SocketClient
#COMMENT: Sets the I/O timeout for sockets created by @client. @timeout is a
time in seconds, or 0 for no timeout (the default).

The timeout value affects the initial connection attempt as well,
so setting this may cause calls to g_socket_client_connect(), etc,
to fail with %G_IO_ERROR_TIMED_OUT.
#NAME: address
#PARENT: Gio.Resolver.lookup_by_address.utf8
#COMMENT: the address to reverse-resolve
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_status.FileAttributeStatus
#COMMENT: a #GFileInfo
#NAME: get_item_attribute
#PARENT: Gio.MenuModel
#COMMENT: Queries item at position @item_index in @model for the attribute
specified by @attribute.

If the attribute exists and matches the #GVariantType corresponding
to @format_string then @format_string is used to deconstruct the
value into the positional parameters and %TRUE is returned.

If the attribute does not exist, or it does exist but has the wrong
type, then the positional parameters are ignored and %FALSE is
returned.

This function is a mix of g_menu_model_get_item_attribute_value() and
g_variant_get(), followed by a g_variant_unref().  As such,
@format_string must make a complete copy of the data (since the
#GVariant may go away after the call to g_variant_unref()).  In
particular, no '&' characters are allowed in @format_string.
#NAME: get_is_hidden
#PARENT: Gio.DesktopAppInfo.get_is_hidden
#COMMENT: %TRUE if hidden, %FALSE otherwise.
#NAME: ResourceLookupFlags
#PARENT: Gio
#COMMENT: GResourceLookupFlags determine how resource path lookups are handled.
#NAME: set_name
#PARENT: Gio.FileInfo
#COMMENT: Sets the name attribute for the current #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_NAME.
#NAME: appinfo
#PARENT: Gio.AppInfo.get_commandline.utf8
#COMMENT: a #GAppInfo
#NAME: get_keepalive
#PARENT: Gio.Socket.get_keepalive
#COMMENT: %TRUE if keepalive is active, %FALSE otherwise.
#NAME: stream
#PARENT: Gio.DataOutputStream.set_byte_order.none
#COMMENT: a #GDataOutputStream.
#NAME: get_volume_for_uuid
#PARENT: Gio.VolumeMonitorClass.get_volume_for_uuid.get_volume_for_uuid
#COMMENT: a #GVolume or %NULL if no such volume is available.
    Free the returned object with g_object_unref().
#NAME: name
#PARENT: Gio.DBusProxy.new_sync.DBusProxy
#COMMENT: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
#NAME: server
#PARENT: Gio.DBusServer.start.none
#COMMENT: A #GDBusServer.
#NAME: get_stderr_pipe
#PARENT: Gio.Subprocess
#COMMENT: Gets the #GInputStream from which to read the stderr output of
@subprocess.

The process must have been created with
%G_SUBPROCESS_FLAGS_STDERR_PIPE.
#NAME: conn
#PARENT: Gio.TcpWrapperConnection.get_base_io_stream.IOStream
#COMMENT: a #GTcpWrapperConnection
#NAME: backend
#PARENT: Gio.TlsBackend.get_certificate_type.GType
#COMMENT: the #GTlsBackend
#NAME: set_sender
#PARENT: Gio.DBusMessage
#COMMENT: Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_SENDER header field.
#NAME: value
#PARENT: Gio.Settings.set_double.gboolean
#COMMENT: the value to set it to
#NAME: interaction
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by.lookup_certificates_issued_by.TlsCertificate
#COMMENT: used to interact with the user if necessary
#NAME: cancellable
#PARENT: Gio.File.monitor_file.FileMonitor
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: stream
#PARENT: Gio.DataOutputStream.put_uint32.gboolean
#COMMENT: a #GDataOutputStream.
#NAME: get_next
#PARENT: Gio.MenuAttributeIter.get_next
#COMMENT: %TRUE on success, or %FALSE if there is no additional
    attribute
#NAME: content_type_guess_for_tree
#PARENT: Gio
#COMMENT: Tries to guess the type of the tree with root @root, by
looking at the files it contains. The result is an array
of content types, with the best guess coming first.

The types returned all have the form x-content/foo, e.g.
x-content/audio-cdda (for audio CDs) or x-content/image-dcf
(for a camera memory card). See the
[shared-mime-info](http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec)
specification for more on x-content types.

This function is useful in the implementation of
g_mount_guess_content_type().
#NAME: get_buffer_size
#PARENT: Gio.BufferedInputStream.get_buffer_size
#COMMENT: the current buffer size.
#NAME: get_path
#PARENT: Gio.UnixSocketAddress.get_path
#COMMENT: the path for @address
#NAME: new
#PARENT: Gio.Application.new
#COMMENT: a new #GApplication instance
#NAME: new_method_error_valist
#PARENT: Gio.DBusMessage
#COMMENT: Like g_dbus_message_new_method_error() but intended for language bindings.
#NAME: DesktopAppInfoLookupIface
#PARENT: Gio
#COMMENT: Interface that is used by backends to associate default
handlers with URI schemes.
#NAME: close
#PARENT: Gio.InputStream.close
#COMMENT: %TRUE on success, %FALSE on failure
#NAME: action
#PARENT: Gio.SimpleActionGroup.insert.none
#COMMENT: a #GAction
#NAME: certificate
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer_async.lookup_certificate_issuer_async.none
#COMMENT: a #GTlsCertificate
#NAME: peek_fds
#PARENT: Gio.UnixFDList
#COMMENT: Returns the array of file descriptors that is contained in this
object.

After this call, the descriptors remain the property of @list.  The
caller must not close them and must not free the array.  The array is
valid only until @list is changed in any way.

If @length is non-%NULL then it is set to the number of file
descriptors in the returned array. The returned array is also
terminated with -1.

This function never returns %NULL. In case there are no file
descriptors contained in @list, an empty array is returned.
#NAME: get_supported_uri_schemes
#PARENT: Gio.VfsClass.get_supported_uri_schemes.get_supported_uri_schemes
#COMMENT: a %NULL-terminated array of strings.
    The returned array belongs to GIO and must
    not be freed or modified.
#NAME: stream
#PARENT: Gio.MemoryInputStream.add_data.none
#COMMENT: a #GMemoryInputStream
#NAME: io_priority
#PARENT: Gio.FileIface.trash_async.trash_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: interface_name
#PARENT: Gio.DBusInterfaceGetPropertyFunc.GLib.Variant
#COMMENT: The D-Bus interface name for the property.
#NAME: conn
#PARENT: Gio.TlsClientConnection.set_use_ssl3.none
#COMMENT: the #GTlsClientConnection
#NAME: send_credentials
#PARENT: Gio.UnixConnection
#COMMENT: Passes the credentials of the current user the receiving side
of the connection. The receiving end has to call
g_unix_connection_receive_credentials() (or similar) to accept the
credentials.

As well as sending the credentials this also writes a single NUL
byte to the stream, as this is required for credentials passing to
work on some implementations.

Other ways to exchange credentials with a foreign peer includes the
#GUnixCredentialsMessage type and g_socket_get_credentials() function.
#NAME: cancellable
#PARENT: Gio.AsyncInitable.new_valist_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: data
#PARENT: Gio.DataOutputStream.put_int64.gboolean
#COMMENT: a #gint64.
#NAME: attribute
#PARENT: Gio.MenuModelClass.get_item_attribute_value.get_item_attribute_value.GLib.Variant
#COMMENT: the attribute to query
#NAME: user_data
#PARENT: Gio.DBusMessageFilterFunction.DBusMessage
#COMMENT: User data passed when adding the filter.
#NAME: get_byte_order
#PARENT: Gio.DataInputStream.get_byte_order
#COMMENT: the @stream's current #GDataStreamByteOrder.
#NAME: is_valid
#PARENT: Gio.Task.is_valid
#COMMENT: %TRUE if @result and @source_object are valid, %FALSE
if not
#NAME: connection
#PARENT: Gio.ThreadedSocketService.run.gboolean
#COMMENT: a new #GSocketConnection object.
#NAME: action_parse_detailed_name
#PARENT: Gio
#COMMENT: Parses a detailed action name into its separate name and target
components.

Detailed action names can have three formats.

The first format is used to represent an action name with no target
value and consists of just an action name containing no whitespace
nor the characters ':', '(' or ')'.  For example: "app.action".

The second format is used to represent an action with a target value
that is a non-empty string consisting only of alphanumerics, plus '-'
and '.'.  In that case, the action name and target value are
separated by a double colon ("::").  For example:
"app.action::target".

The third format is used to represent an action with any type of
target value, including strings.  The target value follows the action
name, surrounded in parens.  For example: "app.action(42)".  The
target value is parsed using g_variant_parse().  If a tuple-typed
value is desired, it must be specified in the same way, resulting in
two sets of parens, for example: "app.action((1,2,3))".  A string
target can be specified this way as well: "app.action('target')".
For strings, this third format must be used if * target value is
empty or contains characters other than alphanumerics, '-' and '.'.
#NAME: DBusProxyTypeFunc
#PARENT: Gio.DBusProxyTypeFunc
#COMMENT: A #GType to use for the remote object. The returned type
  must be a #GDBusProxy<!-- -->- or #GDBusObjectProxy<!-- -->-derived
  type.
#NAME: interaction
#PARENT: Gio.TlsDatabase.verify_chain_async.none
#COMMENT: used to interact with the user if necessary
#NAME: link
#PARENT: Gio.MenuItem.get_link.MenuModel
#COMMENT: the link name to query
#NAME: uri
#PARENT: Gio.ProxyAddress
#COMMENT: The URI string that the proxy was constructed from (or %NULL
if the creator didn't specify this).
#NAME: new_error
#PARENT: Gio.SimpleAsyncResult.new_error
#COMMENT: a #GSimpleAsyncResult.
#NAME: watch_moves
#PARENT: Gio.FileMonitorFlags
#COMMENT: Watch for rename operations on a
  monitored directory.  This causes %G_FILE_MONITOR_EVENT_RENAMED,
  %G_FILE_MONITOR_EVENT_MOVED_IN and %G_FILE_MONITOR_EVENT_MOVED_OUT
  events to be emitted when possible.  Since: 2.44.
#NAME: get_hostname
#PARENT: Gio.NetworkAddress
#COMMENT: Gets @addr's hostname. This might be either UTF-8 or ASCII-encoded,
depending on what @addr was created with.
#NAME: connection
#PARENT: Gio.DBusConnection.signal_subscribe.guint
#COMMENT: a #GDBusConnection
#NAME: DBusInterfaceIface
#PARENT: Gio
#COMMENT: Base type for D-Bus interfaces.
#NAME: is_media_removable
#PARENT: Gio.DriveIface.is_media_removable.is_media_removable
#COMMENT: %TRUE if @drive supports removable media, %FALSE otherwise.
#NAME: subprocess
#PARENT: Gio.Subprocess.get_if_signaled.gboolean
#COMMENT: a #GSubprocess
#NAME: fd
#PARENT: Gio.SubprocessLauncher.take_stdout_fd.none
#COMMENT: a file descriptor, or -1
#NAME: name
#PARENT: Gio.DBusInterfaceInfo.lookup_method.DBusMethodInfo
#COMMENT: A D-Bus method name (typically in CamelCase)
#NAME: io_priority
#PARENT: Gio.FileIface.create_readwrite_async.create_readwrite_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: get_tls_validation_flags
#PARENT: Gio.SocketClient
#COMMENT: Gets the TLS validation flags used creating TLS connections via
@client.
#NAME: legacy_propagate_error
#PARENT: Gio.AsyncResult
#COMMENT: If @res is a #GSimpleAsyncResult, this is equivalent to
g_simple_async_result_propagate_error(). Otherwise it returns
%FALSE.

This can be used for legacy error handling in async *_finish()
wrapper functions that traditionally handled #GSimpleAsyncResult
error returns themselves rather than calling into the virtual method.
This should not be used in new code; #GAsyncResult errors that are
set by virtual methods should also be extracted by virtual methods,
to enable subclasses to chain up correctly.
#NAME: get_proxy_type_destroy_notify
#PARENT: Gio.DBusObjectManagerClient.new_for_bus.none
#COMMENT: Free function for @get_proxy_type_user_data or %NULL.
#NAME: connection
#PARENT: Gio.TlsInteraction.invoke_request_certificate.TlsInteractionResult
#COMMENT: a #GTlsConnection object
#NAME: read
#PARENT: Gio.InputStream.read
#COMMENT: Number of bytes read, or -1 on error, or 0 on end of file.
#NAME: dup
#PARENT: Gio.File.dup
#COMMENT: a new #GFile that is a duplicate
    of the given #GFile.
#NAME: callback
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by_async.lookup_certificates_issued_by_async.none
#COMMENT: callback to call when the operation completes
#NAME: get_op_res_gboolean
#PARENT: Gio.SimpleAsyncResult.get_op_res_gboolean
#COMMENT: %TRUE if the operation's result was %TRUE, %FALSE
    if the operation's result was %FALSE.
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_int64.gint64
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: eject_finish
#PARENT: Gio.DriveIface.eject_finish.eject_finish
#COMMENT: %TRUE if the drive has been ejected successfully,
    %FALSE otherwise.
#NAME: many_tries
#PARENT: Gio.TlsPasswordFlags
#COMMENT: Hint to the user that the password has been
   wrong many times, and the user may not have many chances left.
#NAME: name
#PARENT: Gio.DBusObjectManagerClient.new.none
#COMMENT: The owner of the control object (unique or well-known name).
#NAME: trash_finish
#PARENT: Gio.FileIface.trash_finish.trash_finish
#COMMENT: %TRUE on successful trash, %FALSE otherwise.
#NAME: destination
#PARENT: Gio.File.copy_attributes.gboolean
#COMMENT: a #GFile to copy attributes to
#NAME: new
#PARENT: Gio.InetSocketAddress.new
#COMMENT: a new #GInetSocketAddress
#NAME: attribute
#PARENT: Gio.FileInfo.set_attribute.none
#COMMENT: a file attribute key.
#NAME: code
#PARENT: Gio.Task.return_new_error.none
#COMMENT: an error code.
#NAME: add_main_option_entries
#PARENT: Gio.Application
#COMMENT: Adds main option entries to be handled by @application.

This function is comparable to g_option_context_add_main_entries().

After the commandline arguments are parsed, the
#GApplication::handle-local-options signal will be emitted.  At this
point, the application can inspect the values pointed to by @arg_data
in the given #GOptionEntrys.

Unlike #GOptionContext, #GApplication supports giving a %NULL
@arg_data for a non-callback #GOptionEntry.  This results in the
argument in question being packed into a #GVariantDict which is also
passed to #GApplication::handle-local-options, where it can be
inspected and modified.  If %G_APPLICATION_HANDLES_COMMAND_LINE is
set, then the resulting dictionary is sent to the primary instance,
where g_application_command_line_get_options_dict() will return it.
This "packing" is done according to the type of the argument --
booleans for normal flags, strings for strings, bytestrings for
filenames, etc.  The packing only occurs if the flag is given (ie: we
do not pack a "false" #GVariant in the case that a flag is missing).

In general, it is recommended that all commandline arguments are
parsed locally.  The options dictionary should then be used to
transmit the result of the parsing to the primary instance, where
g_variant_dict_lookup() can be used.  For local options, it is
possible to either use @arg_data in the usual way, or to consult (and
potentially remove) the option from the options dictionary.

This function is new in GLib 2.40.  Before then, the only real choice
was to send all of the commandline arguments (options and all) to the
primary instance for handling.  #GApplication ignored them completely
on the local side.  Calling this function "opts in" to the new
behaviour, and in particular, means that unrecognised options will be
treated as errors.  Unrecognised options have never been ignored when
%G_APPLICATION_HANDLES_COMMAND_LINE is unset.

If #GApplication::handle-local-options needs to see the list of
filenames, then the use of %G_OPTION_REMAINING is recommended.  If
@arg_data is %NULL then %G_OPTION_REMAINING can be used as a key into
the options dictionary.  If you do use %G_OPTION_REMAINING then you
need to handle these arguments for yourself because once they are
consumed, they will no longer be visible to the default handling
(which treats them as filenames to be opened).
#NAME: new
#PARENT: Gio.Task.new
#COMMENT: a #GTask.
#NAME: file
#PARENT: Gio.File.create_readwrite_finish.FileIOStream
#COMMENT: input #GFile
#NAME: parent_class
#PARENT: Gio.DBusObjectSkeletonClass
#COMMENT: The parent class.
#NAME: socket
#PARENT: Gio.Socket.shutdown.gboolean
#COMMENT: a #GSocket
#NAME: ListModel
#PARENT: Gio
#COMMENT: #GListModel is an interface that represents a mutable list of
#GObjects. Its main intention is as a model for various widgets in
user interfaces, such as list views, but it can also be used as a
convenient method of returning lists of data, with support for
updates.

Each object in the list may also report changes in itself via some
mechanism (normally the #GObject::notify signal).  Taken together
with the #GListModel::items-changed signal, this provides for a list
that can change its membership, and in which the members can change
their individual properties.

A good example would be the list of visible wireless network access
points, where each access point can report dynamic properties such as
signal strength.

It is important to note that the #GListModel itself does not report
changes to the individual items.  It only reports changes to the list
membership.  If you want to observe changes to the objects themselves
then you need to connect signals to the objects that you are
interested in.

All items in a #GListModel are of (or derived from) the same type.
g_list_model_get_item_type() returns that type.  The type may be an
interface, in which case all objects in the list must implement it.

The semantics are close to that of an array:
g_list_model_get_length() returns the number of items in the list and
g_list_model_get_item() returns an item at a (0-based) position. In
order to allow implementations to calculate the list length lazily,
you can also iterate over items: starting from 0, repeatedly call
g_list_model_get_item() until it returns %NULL.

An implementation may create objects lazily, but must take care to
return the same object for a given position until all references to
it are gone.

On the other side, a consumer is expected only to hold references on
objects that are currently "user visible", in order to faciliate the
maximum level of laziness in the implementation of the list and to
reduce the required number of signal connections at a given time.

This interface is intended only to be used from a single thread.  The
thread in which it is appropriate to use it depends on the particular
implementation, but typically it will be from the thread that owns
the [thread-default main context][g-main-context-push-thread-default]
in effect at the time that the model was created.
#NAME: get_path_len
#PARENT: Gio.UnixSocketAddress
#COMMENT: Gets the length of @address's path.

For details, see g_unix_socket_address_get_path().
#NAME: special
#PARENT: Gio.FileType
#COMMENT: File is a "special" file, such as a socket, fifo,
   block device, or character device.
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.get_environ.utf8
#COMMENT: a #GApplicationCommandLine
#NAME: cancellable
#PARENT: Gio.Socket.condition_timed_wait.gboolean
#COMMENT: a #GCancellable, or %NULL
#NAME: new
#PARENT: Gio.PropertyAction.new
#COMMENT: a new #GPropertyAction
#NAME: get_executable
#PARENT: Gio.AppInfo
#COMMENT: Gets the executable's name for the installed application.
#NAME: get_show_in
#PARENT: Gio.DesktopAppInfo
#COMMENT: Checks if the application info should be shown in menus that list available
applications for a specific name of the desktop, based on the
`OnlyShowIn` and `NotShowIn` keys.

@desktop_env should typically be given as %NULL, in which case the
`XDG_CURRENT_DESKTOP` environment variable is consulted.  If you want
to override the default mechanism then you may specify @desktop_env,
but this is not recommended.

Note that g_app_info_should_show() for @info will include this check (with
%NULL for @desktop_env) as well as additional checks.
#NAME: full
#PARENT: Gio.NetworkConnectivity
#COMMENT: The host is connected to a network, and
  appears to be able to reach the full Internet.
#NAME: get_symbolic_icon
#PARENT: Gio.Mount
#COMMENT: Gets the symbolic icon for @mount.
#NAME: allowed
#PARENT: Gio.Permission.impl_update.none
#COMMENT: the new value for the 'allowed' property
#NAME: len
#PARENT: Gio.SocketAddress.new_from_native.SocketAddress
#COMMENT: the size of the memory location pointed to by @native
#NAME: priority
#PARENT: Gio.IOExtensionPoint.implement.IOExtension
#COMMENT: the priority for the extension
#NAME: supports_uris
#PARENT: Gio.AppInfoCreateFlags
#COMMENT: Application supports URI arguments.
#NAME: none
#PARENT: Gio.DBusInterfaceSkeletonFlags
#COMMENT: No flags set.
#NAME: FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the display name of the file.
A display name is guaranteed to be in UTF8 and can thus be displayed in
the UI.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: to_bytes
#PARENT: Gio.InetAddressClass.to_bytes.to_bytes
#COMMENT: a pointer to an internal array of the bytes in @address,
which should not be modified, stored, or freed. The size of this
array can be gotten with g_inet_address_get_native_size().
#NAME: info
#PARENT: Gio.DesktopAppInfo.get_boolean.gboolean
#COMMENT: a #GDesktopAppInfo
#NAME: item_index
#PARENT: Gio.MenuModel.iterate_item_attributes.MenuAttributeIter
#COMMENT: the index of the item
#NAME: subprocess
#PARENT: Gio.Subprocess.wait_finish.gboolean
#COMMENT: a #GSubprocess
#NAME: flags
#PARENT: Gio.DBusObjectManagerClient.new_for_bus.none
#COMMENT: Zero or more flags from the #GDBusObjectManagerClientFlags enumeration.
#NAME: truncate_fn
#PARENT: Gio.SeekableIface.truncate_fn.truncate_fn
#COMMENT: %TRUE if successful. If an error
    has occurred, this function will return %FALSE and set @error
    appropriately if present.
#NAME: path
#PARENT: Gio.SubprocessLauncher.set_stdout_file_path.none
#COMMENT: a filename or %NULL
#NAME: stop
#PARENT: Gio.TestDBus
#COMMENT: Stop the session bus started by g_test_dbus_up().

Unlike g_test_dbus_down(), this won't verify the #GDBusConnection
singleton returned by g_bus_get() or g_bus_get_sync() is destroyed. Unit
tests wanting to verify behaviour after the session bus has been stopped
can use this function but should still call g_test_dbus_down() when done.
#NAME: content_type
#PARENT: Gio.AppInfoIface.remove_supports_type.remove_supports_type.gboolean
#COMMENT: a string.
#NAME: flush_finish
#PARENT: Gio.DBusConnection.flush_finish
#COMMENT: %TRUE if the operation succeeded, %FALSE if @error is set
#NAME: connection
#PARENT: Gio.DBusServer.new-connection.gboolean
#COMMENT: A #GDBusConnection for the new connection.
#NAME: dup_object
#PARENT: Gio.DBusInterface.dup_object
#COMMENT: A #GDBusObject or %NULL. The returned
reference should be freed with g_object_unref().
#NAME: startup_notify_id
#PARENT: Gio.AppLaunchContext.launch-failed.none
#COMMENT: the startup notification id for the failed launch
#NAME: get_multicast_loopback
#PARENT: Gio.Socket
#COMMENT: Gets the multicast loopback setting on @socket; if %TRUE (the
default), outgoing multicast packets will be looped back to
multicast listeners on the same host.
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.get_fs_type.utf8
#COMMENT: a #GUnixMountPoint.
#NAME: iter
#PARENT: Gio.MenuAttributeIter.get_value.GLib.Variant
#COMMENT: a #GMenuAttributeIter
#NAME: SocketListenerClass
#PARENT: Gio
#COMMENT: Class structure for #GSocketListener.
#NAME: targets
#PARENT: Gio.SrvTarget.list_sort.gpointer
#COMMENT: a #GList of #GSrvTarget
#NAME: flags
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer_async.lookup_certificate_issuer_async.none
#COMMENT: flags which affect the lookup operation
#NAME: callback
#PARENT: Gio.File.mount_mountable.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: file
#PARENT: Gio.File.replace.FileOutputStream
#COMMENT: input #GFile
#NAME: get_uri
#PARENT: Gio.File
#COMMENT: Gets the URI for the @file.

This call does no blocking I/O.
#NAME: value
#PARENT: Gio.DBusMessage.set_error_name.none
#COMMENT: The value to set.
#NAME: outbuf_size
#PARENT: Gio.ConverterIface.convert.convert.ConverterResult
#COMMENT: the number of bytes in @outbuf, must be at least one
#NAME: query_info_async
#PARENT: Gio.FileOutputStream
#COMMENT: Asynchronously queries the @stream for a #GFileInfo. When completed,
@callback will be called with a #GAsyncResult which can be used to
finish the operation with g_file_output_stream_query_info_finish().

For the synchronous version of this function, see
g_file_output_stream_query_info().
#NAME: item_index
#PARENT: Gio.MenuModelClass.iterate_item_links.iterate_item_links.MenuLinkIter
#COMMENT: the index of the item
#NAME: location
#PARENT: Gio.File.mount_enclosing_volume.none
#COMMENT: input #GFile
#NAME: is_active
#PARENT: Gio.SocketService.is_active
#COMMENT: %TRUE if the service is active, %FALSE otherwise
#NAME: prefix_matches
#PARENT: Gio.File
#COMMENT: Checks whether @file has the prefix specified by @prefix.

In other words, if the names of initial elements of @file's
pathname match @prefix. Only full pathname elements are matched,
so a path like /foo is not considered a prefix of /foobar, only
of /foo/bar.

A #GFile is not a prefix of itself. If you want to check for
equality, use g_file_equal().

This call does no I/O, as it works purely on names. As such it can
sometimes return %FALSE even if @file is inside a @prefix (from a
filesystem point of view), because the prefix of @file is an alias
of @prefix.
#NAME: res
#PARENT: Gio.LoadableIcon.load_finish.InputStream
#COMMENT: a #GAsyncResult.
#NAME: unmounted
#PARENT: Gio.Mount
#COMMENT: This signal is emitted when the #GMount have been
unmounted. If the recipient is holding references to the
object they should release them so the object can be
finalized.
#NAME: guess_content_type_finish
#PARENT: Gio.MountIface.guess_content_type_finish.guess_content_type_finish
#COMMENT: a %NULL-terminated array of content types or %NULL on error.
    Caller should free this array with g_strfreev() when done with it.
#NAME: stream
#PARENT: Gio.PollableInputStreamInterface.can_poll.can_poll.gboolean
#COMMENT: a #GPollableInputStream.
#NAME: flags
#PARENT: Gio.Drive.start.none
#COMMENT: flags affecting the start operation.
#NAME: close
#PARENT: Gio.Socket.close
#COMMENT: %TRUE on success, %FALSE on error
#NAME: flags
#PARENT: Gio.FileIface.stop_mountable.stop_mountable.none
#COMMENT: flags affecting the operation
#NAME: get_executable
#PARENT: Gio.AppInfoIface.get_executable.get_executable
#COMMENT: a string containing the @appinfo's application
binaries name
#NAME: record_type
#PARENT: Gio.ResolverClass.lookup_records.lookup_records.GLib.Variant
#COMMENT: the type of DNS record to lookup
#NAME: inbuf_size
#PARENT: Gio.ConverterIface.convert.convert.ConverterResult
#COMMENT: the number of bytes in @inbuf
#NAME: set_error_if_cancelled
#PARENT: Gio.Cancellable.set_error_if_cancelled
#COMMENT: %TRUE if @cancellable was cancelled, %FALSE if it was not
#NAME: none
#PARENT: Gio.BusNameWatcherFlags
#COMMENT: No flags set.
#NAME: close_sync
#PARENT: Gio.DBusConnection.close_sync
#COMMENT: %TRUE if the operation succeeded, %FALSE if @error is set
#NAME: cancellable
#PARENT: Gio.File.stop_mountable.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_summary
#PARENT: Gio.SettingsSchemaKey
#COMMENT: Gets the summary for @key.

If no summary has been provided in the schema for @key, returns
%NULL.

The summary is a short description of the purpose of the key; usually
one short sentence.  Summaries can be translated and the value
returned from this function is is the current locale.

This function is slow.  The summary and description information for
the schemas is not stored in the compiled schema database so this
function has to parse all of the source XML files in the schema
directory.
#NAME: Menu
#PARENT: Gio
#COMMENT: #GMenu is a simple implementation of #GMenuModel.
You populate a #GMenu by adding #GMenuItem instances to it.

There are some convenience functions to allow you to directly
add items (avoiding #GMenuItem) for the common cases. To add
a regular item, use g_menu_insert(). To add a section, use
g_menu_insert_section(). To add a submenu, use
g_menu_insert_submenu().
#NAME: make_backup
#PARENT: Gio.File.replace_readwrite_async.none
#COMMENT: %TRUE if a backup should be created
#NAME: emit_accept_certificate
#PARENT: Gio.TlsConnection.emit_accept_certificate
#COMMENT: %TRUE if one of the signal handlers has returned
    %TRUE to accept @peer_cert
#NAME: convert
#PARENT: Gio.ConverterIface.convert.convert
#COMMENT: a #GConverterResult, %G_CONVERTER_ERROR on error.
#NAME: object_path
#PARENT: Gio.DBusMenuModel.get.DBusMenuModel
#COMMENT: the object path at which the menu model is exported
#NAME: size
#PARENT: Gio.Socket.receive.gssize
#COMMENT: the number of bytes you want to read from the socket
#NAME: private-key
#PARENT: Gio.TlsCertificate
#COMMENT: The DER (binary) encoded representation of the certificate's
private key, in either PKCS#1 format or unencrypted PKCS#8
format. This property (or the #GTlsCertificate:private-key-pem
property) can be set when constructing a key (eg, from a file),
but cannot be read.

PKCS#8 format is supported since 2.32; earlier releases only
support PKCS#1. You can use the `openssl rsa`
tool to convert PKCS#8 keys to PKCS#1.
#NAME: manager
#PARENT: Gio.DBusObjectManager.get_object_path.utf8
#COMMENT: A #GDBusObjectManager.
#NAME: CredentialsType
#PARENT: Gio
#COMMENT: Enumeration describing different kinds of native credential types.
#NAME: return_new_error
#PARENT: Gio.Task
#COMMENT: Sets @task's result to a new #GError created from @domain, @code,
@format, and the remaining arguments, and completes the task (see
g_task_return_pointer() for more discussion of exactly what this
means).

See also g_task_return_error().
#NAME: MenuItem
#PARENT: Gio
#COMMENT: #GMenuItem is an opaque structure type.  You must access it using the
functions below.
#NAME: new_from_blob
#PARENT: Gio.DBusMessage.new_from_blob
#COMMENT: A new #GDBusMessage or %NULL if @error is set. Free with
g_object_unref().
#NAME: proxy-resolver
#PARENT: Gio.ProxyAddressEnumerator
#COMMENT: The proxy resolver to use.
#NAME: cancellable
#PARENT: Gio.File.query_filesystem_info_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: io_priority
#PARENT: Gio.InputStreamClass.close_async.close_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: high
#PARENT: Gio.NotificationPriority
#COMMENT: for events that require more attention,
  usually because responses are time-sensitive (for example chat and SMS
  messages or alarms)
#NAME: connection_factory_create_connection
#PARENT: Gio.Socket
#COMMENT: Creates a #GSocketConnection subclass of the right type for
@socket.
#NAME: data
#PARENT: Gio.DataOutputStream.put_uint32.gboolean
#COMMENT: a #guint32.
#NAME: callback
#PARENT: Gio.Mount.guess_content_type.none
#COMMENT: a #GAsyncReadyCallback
#NAME: appinfo
#PARENT: Gio.AppInfo.launch_uris.gboolean
#COMMENT: a #GAppInfo
#NAME: io_priority
#PARENT: Gio.File.measure_disk_usage_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: object_path
#PARENT: Gio.DBusProxyTypeFunc.GType
#COMMENT: The object path of the remote object.
#NAME: get_tls_validation_flags
#PARENT: Gio.SocketClient.get_tls_validation_flags
#COMMENT: the TLS validation flags
#NAME: backend
#PARENT: Gio.TlsBackend.supports_tls.gboolean
#COMMENT: the #GTlsBackend
#NAME: DesktopAppLaunchCallback
#PARENT: Gio
#COMMENT: During invocation, g_desktop_app_info_launch_uris_as_manager() may
create one or more child processes.  This callback is invoked once
for each, providing the process ID.
#NAME: cancellable
#PARENT: Gio.SeekableIface.truncate_fn.truncate_fn.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: take_fd
#PARENT: Gio.SubprocessLauncher
#COMMENT: Transfer an arbitrary file descriptor from parent process to the
child.  This function takes "ownership" of the fd; it will be closed
in the parent when @self is freed.

By default, all file descriptors from the parent will be closed.
This function allows you to create (for example) a custom pipe() or
socketpair() before launching the process, and choose the target
descriptor in the child.

An example use case is GNUPG, which has a command line argument
--passphrase-fd providing a file descriptor number where it expects
the passphrase to be written.
#NAME: register_subtree
#PARENT: Gio.DBusConnection.register_subtree
#COMMENT: 0 if @error is set, otherwise a subtree registration id (never 0)
that can be used with g_dbus_connection_unregister_subtree() .
#NAME: get_use_ssl3
#PARENT: Gio.TlsClientConnection
#COMMENT: Gets whether @conn will use SSL 3.0 rather than the
highest-supported version of TLS; see
g_tls_client_connection_set_use_ssl3().
#NAME: stream
#PARENT: Gio.DataInputStream.read_int64.gint64
#COMMENT: a given #GDataInputStream.
#NAME: source
#PARENT: Gio.OutputStream.splice.gssize
#COMMENT: a #GInputStream.
#NAME: result
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by_finish.lookup_certificates_issued_by_finish.TlsCertificate
#COMMENT: a #GAsyncResult.
#NAME: volume-removed
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when a mountable volume is removed from the system.
#NAME: path
#PARENT: Gio.resources_enumerate_children.utf8
#COMMENT: A pathname inside the resource
#NAME: cancellable
#PARENT: Gio.FileIface.delete_file_async.delete_file_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: source_object
#PARENT: Gio.SocketListener.add_inet_port.gboolean
#COMMENT: Optional #GObject identifying this source
#NAME: set_task_data
#PARENT: Gio.Task
#COMMENT: Sets @task's task data (freeing the existing task data, if any).
#NAME: get_origin
#PARENT: Gio.Emblem.get_origin
#COMMENT: the origin of the emblem
#NAME: value
#PARENT: Gio.DBusMessage.set_destination.none
#COMMENT: The value to set.
#NAME: cancellable
#PARENT: Gio.Socket.receive_from.gssize
#COMMENT: a %GCancellable or %NULL
#NAME: hostname
#PARENT: Gio.Resolver.lookup_by_name_async.none
#COMMENT: the hostname to look up the address of
#NAME: DBusSendMessageFlags
#PARENT: Gio
#COMMENT: Flags used when sending #GDBusMessages on a #GDBusConnection.
#NAME: stream
#PARENT: Gio.DataInputStream.read_until_finish.utf8
#COMMENT: a given #GDataInputStream.
#NAME: user_data
#PARENT: Gio.Drive.eject.none
#COMMENT: user data to pass to @callback
#NAME: source_tag
#PARENT: Gio.AsyncResultIface.is_tagged.is_tagged.gboolean
#COMMENT: an application-defined tag
#NAME: flags
#PARENT: Gio.File.stop_mountable.none
#COMMENT: flags affecting the operation
#NAME: mount_entry
#PARENT: Gio.unix_mount_is_readonly.gboolean
#COMMENT: a #GUnixMount.
#NAME: content_type_get_symbolic_icon
#PARENT: Gio.content_type_get_symbolic_icon
#COMMENT: symbolic #GIcon corresponding to the content type.
    Free the returned object with g_object_unref()
#NAME: user_data
#PARENT: Gio.DBusConnection.close.none
#COMMENT: The data to pass to @callback
#NAME: pop_current
#PARENT: Gio.Cancellable
#COMMENT: Pops @cancellable off the cancellable stack (verifying that @cancellable
is on the top of the stack).
#NAME: get_interfaces
#PARENT: Gio.DBusObject.get_interfaces
#COMMENT: A list of #GDBusInterface instances.
  The returned list must be freed by g_list_free() after each element has been freed
  with g_object_unref().
#NAME: listener
#PARENT: Gio.SocketListener.accept_socket.Socket
#COMMENT: a #GSocketListener
#NAME: task
#PARENT: Gio.Task.attach_source.none
#COMMENT: a #GTask
#NAME: flags
#PARENT: Gio.IOStream.splice_async.none
#COMMENT: a set of #GIOStreamSpliceFlags.
#NAME: linux_ucred
#PARENT: Gio.CredentialsType
#COMMENT: The native credentials type is a <type>struct ucred</type>.
#NAME: parameters
#PARENT: Gio.DBusConnection.call.none
#COMMENT: a #GVariant tuple with parameters for the method
    or %NULL if not passing parameters
#NAME: cancellable
#PARENT: Gio.OutputStream.write.gssize
#COMMENT: optional cancellable object
#NAME: emblem
#PARENT: Gio.EmblemedIcon.new.EmblemedIcon
#COMMENT: a #GEmblem, or %NULL
#NAME: resolver
#PARENT: Gio.ResolverClass.lookup_by_address_finish.lookup_by_address_finish.utf8
#COMMENT: a #GResolver
#NAME: has_key
#PARENT: Gio.DesktopAppInfo
#COMMENT: Returns whether @key exists in the "Desktop Entry" group
of the keyfile backing @info.
#NAME: new_from_names
#PARENT: Gio.ThemedIcon.new_from_names
#COMMENT: a new #GThemedIcon
#NAME: parent_class
#PARENT: Gio.DBusInterfaceSkeletonClass
#COMMENT: The parent class.
#NAME: get_auto_grow
#PARENT: Gio.BufferedOutputStream
#COMMENT: Checks if the buffer automatically grows as data is added.
#NAME: invoke_ask_password
#PARENT: Gio.TlsInteraction.invoke_ask_password
#COMMENT: The status of the ask password interaction.
#NAME: callback
#PARENT: Gio.MountIface.unmount.unmount.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: user_data
#PARENT: Gio.FileIface.start_mountable.start_mountable.none
#COMMENT: the data to pass to callback function
#NAME: connection
#PARENT: Gio.DBusConnection.get_capabilities.DBusCapabilityFlags
#COMMENT: a #GDBusConnection
#NAME: available
#PARENT: Gio.NetworkMonitor.network-changed.none
#COMMENT: the current value of #GNetworkMonitor:network-available
#NAME: get_newline_type
#PARENT: Gio.DataInputStream.get_newline_type
#COMMENT: #GDataStreamNewlineType for the given @stream.
#NAME: g_type
#PARENT: Gio.SocketConnection.factory_register_type.none
#COMMENT: a #GType, inheriting from %G_TYPE_SOCKET_CONNECTION
#NAME: get_credentials
#PARENT: Gio.UnixCredentialsMessage
#COMMENT: Gets the credentials stored in @message.
#NAME: can_mount
#PARENT: Gio.Volume.can_mount
#COMMENT: %TRUE if the @volume can be mounted. %FALSE otherwise
#NAME: list
#PARENT: Gio.ListModel.get_n_items.guint
#COMMENT: a #GListModel
#NAME: action_name
#PARENT: Gio.ActionMap.lookup_action.Action
#COMMENT: the name of an action
#NAME: default_proxy
#PARENT: Gio.SimpleProxyResolver.set_default_proxy.none
#COMMENT: the default proxy to use
#NAME: new_etag
#PARENT: Gio.File.replace_contents_finish.gboolean
#COMMENT: a location of a new [entity tag][gfile-etag]
    for the document. This should be freed with g_free() when it is no
    longer needed, or %NULL
#NAME: unix_mount_guess_name
#PARENT: Gio
#COMMENT: Guesses the name of a Unix mount.
The result is a translated string.
#NAME: message
#PARENT: Gio.DBusConnection.send_message_with_reply.none
#COMMENT: a #GDBusMessage
#NAME: total_num_bytes
#PARENT: Gio.FileProgressCallback.none
#COMMENT: the total number of bytes in the operation.
#NAME: subprocess
#PARENT: Gio.Subprocess.get_identifier.utf8
#COMMENT: a #GSubprocess
#NAME: cert_file
#PARENT: Gio.TlsCertificate.new_from_files.TlsCertificate
#COMMENT: file containing one or more PEM-encoded certificates to
import
#NAME: inbuf_size
#PARENT: Gio.Converter.convert.ConverterResult
#COMMENT: the number of bytes in @inbuf
#NAME: fill
#PARENT: Gio.BufferedInputStream
#COMMENT: Tries to read @count bytes from the stream into the buffer.
Will block during this read.

If @count is zero, returns zero and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

If @count is -1 then the attempted read size is equal to the number of
bytes that are required to fill the buffer.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.

For the asynchronous, non-blocking, version of this function, see
g_buffered_input_stream_fill_async().
#NAME: new
#PARENT: Gio.SimpleActionGroup.new
#COMMENT: a new #GSimpleActionGroup
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.get_op_res_gssize.gssize
#COMMENT: a #GSimpleAsyncResult.
#NAME: callback
#PARENT: Gio.FileIface.read_async.read_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: fill_finish
#PARENT: Gio.BufferedInputStreamClass.fill_finish.fill_finish
#COMMENT: a #gssize of the read stream, or %-1 on an error.
#NAME: get_startup_notify_id
#PARENT: Gio.AppLaunchContext
#COMMENT: Initiates startup notification for the application and returns the
`DESKTOP_STARTUP_ID` for the launched operation, if supported.

Startup notification IDs are defined in the
[FreeDesktop.Org Startup Notifications standard](http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt").
#NAME: result
#PARENT: Gio.Volume.eject_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: to_string
#PARENT: Gio.FileAttributeMatcher.to_string
#COMMENT: a string describing the attributes the matcher matches
  against or %NULL if @matcher was %NULL.
#NAME: g_iface
#PARENT: Gio.PollableInputStreamInterface
#COMMENT: The parent interface.
#NAME: cancellable
#PARENT: Gio.SocketConnection.connect.gboolean
#COMMENT: a %GCancellable or %NULL
#NAME: user_data
#PARENT: Gio.DBusConnection.send_message_with_reply.none
#COMMENT: The data to pass to @callback
#NAME: buffer
#PARENT: Gio.InputStreamClass.read_async.read_async.none
#COMMENT: a buffer to
    read data into (which should be at least count bytes long).
#NAME: platform_data
#PARENT: Gio.RemoteActionGroup.activate_action_full.none
#COMMENT: the platform data to send
#NAME: unmount_mountable_with_operation
#PARENT: Gio.File
#COMMENT: Unmounts a file of type #G_FILE_TYPE_MOUNTABLE.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called.
You can then call g_file_unmount_mountable_finish() to get
the result of the operation.
#NAME: do_delete
#PARENT: Gio.AppInfoIface.do_delete.do_delete
#COMMENT: %TRUE if @appinfo has been deleted
#NAME: has_pending
#PARENT: Gio.OutputStream.has_pending
#COMMENT: %TRUE if @stream has pending actions.
#NAME: has_attribute
#PARENT: Gio.FileInfo
#COMMENT: Checks if a file info structure has an attribute named @attribute.
#NAME: value
#PARENT: Gio.Socket.set_option.gboolean
#COMMENT: the value to set the option to
#NAME: drive
#PARENT: Gio.DriveIface.get_volumes.get_volumes.Volume
#COMMENT: a #GDrive.
#NAME: volume
#PARENT: Gio.Volume.eject_with_operation_finish.gboolean
#COMMENT: a #GVolume
#NAME: desktop_id
#PARENT: Gio.DesktopAppInfo.new.DesktopAppInfo
#COMMENT: the desktop file id
#NAME: remove
#PARENT: Gio.SimpleActionGroup
#COMMENT: Removes the named action from the action group.

If no action of this name is in the group then nothing happens.
#NAME: mount_mountable_finish
#PARENT: Gio.FileIface.mount_mountable_finish.mount_mountable_finish
#COMMENT: a #GFile or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: flags
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_for_handle.lookup_certificate_for_handle.TlsCertificate
#COMMENT: Flags which affect the lookup.
#NAME: pid
#PARENT: Gio.DesktopAppLaunchCallback.none
#COMMENT: Process identifier
#NAME: value
#PARENT: Gio.Settings.set_flags.gboolean
#COMMENT: a flags value
#NAME: FileMeasureProgressCallback
#PARENT: Gio
#COMMENT: This callback type is used by g_file_measure_disk_usage() to make
periodic progress reports when measuring the amount of disk spaced
used by a directory.

These calls are made on a best-effort basis and not all types of
#GFile will support them.  At the minimum, however, one call will
always be made immediately.

In the case that there is no support, @reporting will be set to
%FALSE (and the other values undefined) and no further calls will be
made.  Otherwise, the @reporting will be %TRUE and the other values
all-zeros during the first (immediate) call.  In this way, you can
know which type of progress UI to show without a delay.

For g_file_measure_disk_usage() the callback is made directly.  For
g_file_measure_disk_usage_async() the callback is made via the
default main context of the calling thread (ie: the same way that the
final async result would be reported).

@current_size is in the same units as requested by the operation (see
%G_FILE_DISK_USAGE_APPARENT_SIZE).

The frequency of the updates is implementation defined, but is
ideally about once every 200ms.

The last progress callback may or may not be equal to the final
result.  Always check the async result to get the final value.
#NAME: get_connection
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Gets the #GDBusConnection used by @manager.
#NAME: io_priority
#PARENT: Gio.File.find_enclosing_mount_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: DBusError
#PARENT: Gio
#COMMENT: Error codes for the %G_DBUS_ERROR error domain.
#NAME: address_in_use
#PARENT: Gio.DBusError
#COMMENT: Can't bind a socket since its address is in use (i.e. EADDRINUSE).
#NAME: cancellable
#PARENT: Gio.InputStream.read_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: appinfo
#PARENT: Gio.AppInfo.delete.gboolean
#COMMENT: a #GAppInfo
#NAME: password
#PARENT: Gio.TlsPassword.set_value_full.none
#COMMENT: a #GTlsPassword object
#NAME: set_display_name_finish
#PARENT: Gio.FileIface.set_display_name_finish.set_display_name_finish
#COMMENT: a #GFile or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: connection
#PARENT: Gio.TlsInteraction.request_certificate.TlsInteractionResult
#COMMENT: a #GTlsConnection object
#NAME: make_symbolic_link
#PARENT: Gio.File
#COMMENT: Creates a symbolic link named @file which contains the string
@symlink_value.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: application
#PARENT: Gio.Application.set_inactivity_timeout.none
#COMMENT: a #GApplication
#NAME: create_source
#PARENT: Gio.PollableOutputStreamInterface.create_source.create_source
#COMMENT: a new #GSource
#NAME: accept_socket
#PARENT: Gio.SocketListener
#COMMENT: Blocks waiting for a client to connect to any of the sockets added
to the listener. Returns the #GSocket that was accepted.

If you want to accept the high-level #GSocketConnection, not a #GSocket,
which is often the case, then you should use g_socket_listener_accept()
instead.

If @source_object is not %NULL it will be filled out with the source
object specified when the corresponding socket or address was added
to the listener.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: callback
#PARENT: Gio.VolumeIface.eject_with_operation.eject_with_operation.none
#COMMENT: a #GAsyncReadyCallback, or %NULL
#NAME: FILE_ATTRIBUTE_STANDARD_TYPE
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for storing file types.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
The value for this key should contain a #GFileType.
#NAME: BusType
#PARENT: Gio
#COMMENT: An enumeration for well-known message buses.
#NAME: error_domain
#PARENT: Gio.DBusError.register_error.gboolean
#COMMENT: A #GQuark for a error domain.
#NAME: address
#PARENT: Gio.SocketAddress.get_native_size.gssize
#COMMENT: a #GSocketAddress
#NAME: dbus_is_name
#PARENT: Gio
#COMMENT: Checks if @string is a valid D-Bus bus name (either unique or well-known).
#NAME: action_group
#PARENT: Gio.ActionGroup.get_action_parameter_type.GLib.VariantType
#COMMENT: a #GActionGroup
#NAME: offset
#PARENT: Gio.Seekable.seek.gboolean
#COMMENT: a #goffset.
#NAME: message
#PARENT: Gio.DBusMessage.to_blob.guint8
#COMMENT: A #GDBusMessage.
#NAME: fd
#PARENT: Gio.Socket.new_from_fd.Socket
#COMMENT: a native socket file descriptor.
#NAME: get_name
#PARENT: Gio.Volume
#COMMENT: Gets the name of @volume.
#NAME: stream
#PARENT: Gio.pollable_stream_write_all.gboolean
#COMMENT: a #GOutputStream.
#NAME: callback
#PARENT: Gio.SocketListener.accept_socket_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: result
#PARENT: Gio.Task.return_pointer.none
#COMMENT: the pointer result of a task
    function
#NAME: compare
#PARENT: Gio.UnixMountPoint
#COMMENT: Compares two unix mount points.
#NAME: get_item_type
#PARENT: Gio.ListModel.get_item_type
#COMMENT: the #GType of the items contained in @list.
#NAME: callback
#PARENT: Gio.Drive.poll_for_media.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: schema
#PARENT: Gio.SettingsSchema.ref.SettingsSchema
#COMMENT: a #GSettingsSchema
#NAME: connect_finish
#PARENT: Gio.SocketClient
#COMMENT: Finishes an async connect operation. See g_socket_client_connect_async()
#NAME: cwd
#PARENT: Gio.SubprocessLauncher.set_cwd.none
#COMMENT: the cwd for launched processes
#NAME: FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE)  is unmountable.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: message
#PARENT: Gio.DBusMessage.get_header_fields.guint8
#COMMENT: A #GDBusMessage.
#NAME: task
#PARENT: Gio.Task.propagate_int.gssize
#COMMENT: a #GTask.
#NAME: unix_mount_guess_should_display
#PARENT: Gio
#COMMENT: Guesses whether a Unix mount should be displayed in the UI.
#NAME: count
#PARENT: Gio.OutputStream.write_all_async.none
#COMMENT: the number of bytes to write
#NAME: interface
#PARENT: Gio.DBusMessageHeaderField
#COMMENT: The interface name.
#NAME: io_priority
#PARENT: Gio.OutputStreamClass.write_async.write_async.none
#COMMENT: the io priority of the request.
#NAME: SocketServiceClass
#PARENT: Gio
#COMMENT: Class structure for #GSocketService.
#NAME: password
#PARENT: Gio.TlsInteraction.ask_password_async.none
#COMMENT: a #GTlsPassword object
#NAME: get_mapped
#PARENT: Gio.Settings.get_mapped
#COMMENT: the result, which may be %NULL
#NAME: variable
#PARENT: Gio.SubprocessLauncher.setenv.none
#COMMENT: the environment variable to set, must not contain '='
#NAME: get_completed
#PARENT: Gio.Task
#COMMENT: Gets the value of #GTask:completed. This changes from %FALSE to %TRUE after
the task’s callback is invoked, and will return %FALSE if called from inside
the callback.
#NAME: io_priority
#PARENT: Gio.IOStream.splice_async.none
#COMMENT: the io priority of the request.
#NAME: io_priority
#PARENT: Gio.OutputStream.flush_async.none
#COMMENT: the io priority of the request.
#NAME: startup_notify_id
#PARENT: Gio.AppLaunchContext.launch_failed.none
#COMMENT: the startup notification id that was returned by g_app_launch_context_get_startup_notify_id().
#NAME: value_p
#PARENT: Gio.FileInfo.set_attribute.none
#COMMENT: pointer to the value
#NAME: file
#PARENT: Gio.FileIface.mount_mountable_finish.mount_mountable_finish.File
#COMMENT: input #GFile
#NAME: model
#PARENT: Gio.MenuModelClass.get_item_attributes.get_item_attributes.none
#COMMENT: the #GMenuModel to query
#NAME: new_sized
#PARENT: Gio.BufferedInputStream.new_sized
#COMMENT: a #GInputStream.
#NAME: cancellable
#PARENT: Gio.FileIface.find_enclosing_mount_async.find_enclosing_mount_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_default_for_protocol
#PARENT: Gio.Proxy.get_default_for_protocol
#COMMENT: return a #GProxy or NULL if protocol
              is not supported.
#NAME: has_key
#PARENT: Gio.DesktopAppInfo.has_key
#COMMENT: %TRUE if the @key exists
#NAME: append_submenu
#PARENT: Gio.Menu
#COMMENT: Convenience function for appending a submenu menu item to the end of
@menu.  Combine g_menu_item_new_submenu() and g_menu_insert_item() for a
more flexible alternative.
#NAME: object
#PARENT: Gio.PropertyAction
#COMMENT: The object to wrap a property on.

The object must be a non-%NULL #GObject with properties.
#NAME: volume
#PARENT: Gio.Volume.get_sort_key.utf8
#COMMENT: a #GVolume
#NAME: parse_name
#PARENT: Gio.Vfs.parse_name.File
#COMMENT: a string to be parsed by the VFS module.
#NAME: new_with_type
#PARENT: Gio.UnixSocketAddress.new_with_type
#COMMENT: a new #GUnixSocketAddress
#NAME: drive
#PARENT: Gio.DriveIface.enumerate_identifiers.enumerate_identifiers.utf8
#COMMENT: a #GDrive
#NAME: supports_files
#PARENT: Gio.AppInfoIface.supports_files.supports_files
#COMMENT: %TRUE if the @appinfo supports files.
#NAME: destlen
#PARENT: Gio.SocketAddress.to_native.gboolean
#COMMENT: the size of @dest. Must be at least as large as
    g_socket_address_get_native_size()
#NAME: credentials
#PARENT: Gio.Credentials.get_native.gpointer
#COMMENT: A #GCredentials.
#NAME: exit_status
#PARENT: Gio.ApplicationClass.local_command_line.local_command_line.gboolean
#COMMENT: exit status to fill after processing the command line.
#NAME: conn
#PARENT: Gio.TlsConnection.handshake.gboolean
#COMMENT: a #GTlsConnection
#NAME: icon
#PARENT: Gio.IconIface.hash.hash.guint
#COMMENT: #gconstpointer to an icon object.
#NAME: make_directory_with_parents
#PARENT: Gio.File.make_directory_with_parents
#COMMENT: %TRUE if all directories have been successfully created, %FALSE
otherwise.
#NAME: ref
#PARENT: Gio.SettingsSchemaKey
#COMMENT: Increase the reference count of @key, returning a new reference.
#NAME: resources_unregister
#PARENT: Gio
#COMMENT: Unregisters the resource from the process-global set of resources.
#NAME: attributes
#PARENT: Gio.FileOutputStream.query_info.FileInfo
#COMMENT: a file attribute query string.
#NAME: file_size
#PARENT: Gio.FileReadMoreCallback.gboolean
#COMMENT: the size of the data currently read.
#NAME: get_is_loopback
#PARENT: Gio.InetAddress.get_is_loopback
#COMMENT: %TRUE if @address is the loopback address for its family.
#NAME: destlen
#PARENT: Gio.SocketAddressClass.to_native.to_native.gboolean
#COMMENT: the size of @dest. Must be at least as large as
    g_socket_address_get_native_size()
#NAME: get_name
#PARENT: Gio.MountIface.get_name.get_name
#COMMENT: the name for the given @mount.
    The returned string should be freed with g_free()
    when no longer needed.
#NAME: close_async
#PARENT: Gio.IOStream
#COMMENT: Requests an asynchronous close of the stream, releasing resources
related to it. When the operation is finished @callback will be
called. You can then call g_io_stream_close_finish() to get
the result of the operation.

For behaviour details see g_io_stream_close().

The asynchronous methods have a default fallback that uses threads
to implement asynchronicity, so they are optional for inheriting
classes. However, if you override one you must override all.
#NAME: client
#PARENT: Gio.SocketClient.connect_to_host.SocketConnection
#COMMENT: a #GSocketClient
#NAME: user_data
#PARENT: Gio.DBusConnection.flush.none
#COMMENT: The data to pass to @callback
#NAME: get_link
#PARENT: Gio.MenuItem.get_link
#COMMENT: the link, or %NULL
#NAME: start_message_processing
#PARENT: Gio.DBusConnection
#COMMENT: If @connection was created with
%G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING, this method
starts processing messages. Does nothing on if @connection wasn't
created with this flag or if the method has already been called.
#NAME: load
#PARENT: Gio.IOModule
#COMMENT: Required API for GIO modules to implement.

This function is run after the module has been loaded into GIO,
to initialize the module. Typically, this function will call
g_io_extension_point_implement().
#NAME: can-acquire
#PARENT: Gio.Permission
#COMMENT: %TRUE if it is generally possible to acquire the permission by calling
g_permission_acquire().
#NAME: add_action_entries
#PARENT: Gio.ActionMap
#COMMENT: A convenience function for creating multiple #GSimpleAction instances
and adding them to a #GActionMap.

Each action is constructed as per one #GActionEntry.

|[<!-- language="C" -->
static void
activate_quit (GSimpleAction *simple,
               GVariant      *parameter,
               gpointer       user_data)
{
  exit (0);
}

static void
activate_print_string (GSimpleAction *simple,
                       GVariant      *parameter,
                       gpointer       user_data)
{
  g_print ("%s\n", g_variant_get_string (parameter, NULL));
}

static GActionGroup *
create_action_group (void)
{
  const GActionEntry entries[] = {
    { "quit",         activate_quit              },
    { "print-string", activate_print_string, "s" }
  };
  GSimpleActionGroup *group;

  group = g_simple_action_group_new ();
  g_action_map_add_action_entries (G_ACTION_MAP (group), entries, G_N_ELEMENTS (entries), NULL);

  return G_ACTION_GROUP (group);
}
]|
#NAME: SocketMsgFlags
#PARENT: Gio
#COMMENT: Flags used in g_socket_receive_message() and g_socket_send_message().
The flags listed in the enum are some commonly available flags, but the
values used for them are the same as on the platform, and any other flags
are passed in/out as is. So to use a platform specific flag, just include
the right system header and pass in the flag.
#NAME: destination
#PARENT: Gio.File.copy_async.none
#COMMENT: destination #GFile
#NAME: receive_from
#PARENT: Gio.Socket
#COMMENT: Receive data (up to @size bytes) from a socket.

If @address is non-%NULL then @address will be set equal to the
source address of the received packet.
@address is owned by the caller.

See g_socket_receive() for additional information.
#NAME: set_as_last_used_for_type
#PARENT: Gio.AppInfo.set_as_last_used_for_type
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: accept
#PARENT: Gio.SocketListener
#COMMENT: Blocks waiting for a client to connect to any of the sockets added
to the listener. Returns a #GSocketConnection for the socket that was
accepted.

If @source_object is not %NULL it will be filled out with the source
object specified when the corresponding socket or address was added
to the listener.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: destroy
#PARENT: Gio.Settings.bind_with_mapping.none
#COMMENT: #GDestroyNotify function for @user_data
#NAME: self
#PARENT: Gio.SubprocessLauncher.spawnv.Subprocess
#COMMENT: a #GSubprocessLauncher
#NAME: callback
#PARENT: Gio.Task.report_error.none
#COMMENT: a #GAsyncReadyCallback.
#NAME: read_bytes_finish
#PARENT: Gio.InputStream.read_bytes_finish
#COMMENT: the newly-allocated #GBytes, or %NULL on error
#NAME: FileAttributeInfo
#PARENT: Gio
#COMMENT: Information about a specific attribute.
#NAME: set_attribute_uint64
#PARENT: Gio.File.set_attribute_uint64
#COMMENT: %TRUE if the @attribute was successfully set to @value
    in the @file, %FALSE otherwise.
#NAME: user_data
#PARENT: Gio.DBusConnection.add_filter.guint
#COMMENT: user data to pass to @filter_function
#NAME: write_nonblocking
#PARENT: Gio.PollableOutputStreamInterface.write_nonblocking.write_nonblocking
#COMMENT: the number of bytes written, or -1 on error (including
  %G_IO_ERROR_WOULD_BLOCK).
#NAME: file
#PARENT: Gio.File.replace_readwrite.FileIOStream
#COMMENT: a #GFile
#NAME: client
#PARENT: Gio.SocketClient.get_local_address.SocketAddress
#COMMENT: a #GSocketClient.
#NAME: callback
#PARENT: Gio.OutputStream.flush_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: flags
#PARENT: Gio.Application.add_main_option.none
#COMMENT: flags from #GOptionFlags
#NAME: get_byte_order
#PARENT: Gio.DBusMessage.get_byte_order
#COMMENT: The byte order.
#NAME: can_acquire
#PARENT: Gio.Permission.impl_update.none
#COMMENT: the new value for the 'can-acquire' property
#NAME: cancellable
#PARENT: Gio.Cancellable.make_pollfd.gboolean
#COMMENT: a #GCancellable or %NULL
#NAME: detailed_action
#PARENT: Gio.Notification.add_button.none
#COMMENT: a detailed action name
#NAME: get_ttl
#PARENT: Gio.Socket
#COMMENT: Gets the unicast time-to-live setting on @socket; see
g_socket_set_ttl() for more details.
#NAME: info
#PARENT: Gio.DesktopAppInfo.launch_action.none
#COMMENT: a #GDesktopAppInfo
#NAME: attributes
#PARENT: Gio.FileIface.enumerate_children.enumerate_children.FileEnumerator
#COMMENT: an attribute query string
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.getenv.utf8
#COMMENT: a #GApplicationCommandLine
#NAME: set_modification_time
#PARENT: Gio.FileInfo
#COMMENT: Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED attribute in the file
info to the given time value.
#NAME: unknown_interface
#PARENT: Gio.DBusError
#COMMENT: Interface you invoked a method on isn't known by the object. Since 2.42
#NAME: get_service
#PARENT: Gio.NetworkService.get_service
#COMMENT: @srv's service name
#NAME: cancellable
#PARENT: Gio.File.trash_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: set_username
#PARENT: Gio.MountOperation
#COMMENT: Sets the user name within @op to @username.
#NAME: enabled
#PARENT: Gio.SimpleAction.set_enabled.none
#COMMENT: whether the action is enabled
#NAME: protocol_id
#PARENT: Gio.SocketConnection.factory_lookup_type.GType
#COMMENT: a protocol id
#NAME: get_unique_name
#PARENT: Gio.DBusConnection
#COMMENT: Gets the unique name of @connection as assigned by the message
bus. This can also be used to figure out if @connection is a
message bus connection.
#NAME: tmpl
#PARENT: Gio.File.new_tmp.File
#COMMENT: Template for the file
  name, as in g_file_open_tmp(), or %NULL for a default template
#NAME: bus_own_name_on_connection
#PARENT: Gio
#COMMENT: Like g_bus_own_name() but takes a #GDBusConnection instead of a
#GBusType.
#NAME: object_type
#PARENT: Gio.AsyncInitable.new_valist_async.none
#COMMENT: a #GType supporting #GAsyncInitable.
#NAME: initable
#PARENT: Gio.AsyncInitable.new_finish.GObject.Object
#COMMENT: the #GAsyncInitable from the callback
#NAME: icon
#PARENT: Gio.LoadableIconIface.load_async.load_async.none
#COMMENT: a #GLoadableIcon.
#NAME: get_action_parameter_type
#PARENT: Gio.ActionGroupInterface.get_action_parameter_type.get_action_parameter_type
#COMMENT: the parameter type
#NAME: g_iface
#PARENT: Gio.MountIface
#COMMENT: The parent interface.
#NAME: use_system_certdb
#PARENT: Gio.TlsConnection.set_use_system_certdb.none
#COMMENT: whether to use the system certificate database
#NAME: user_data
#PARENT: Gio.FileIface.append_to_async.append_to_async.none
#COMMENT: the data to pass to callback function
#NAME: file
#PARENT: Gio.FileIface.find_enclosing_mount_finish.find_enclosing_mount_finish.Mount
#COMMENT: a #GFile
#NAME: get_buffer_size
#PARENT: Gio.BufferedOutputStream
#COMMENT: Gets the size of the buffer in the @stream.
#NAME: module
#PARENT: Gio.IOModule.load.none
#COMMENT: a #GIOModule.
#NAME: file_new_tmp
#PARENT: Gio.file_new_tmp
#COMMENT: a new #GFile.
    Free the returned object with g_object_unref().
#NAME: set_connection
#PARENT: Gio.DBusObjectManagerServer
#COMMENT: Exports all objects managed by @manager on @connection. If
@connection is %NULL, stops exporting objects.
#NAME: cancellable
#PARENT: Gio.PollableInputStream.read_nonblocking.gssize
#COMMENT: a #GCancellable, or %NULL
#NAME: menu_item
#PARENT: Gio.MenuItem.set_link.none
#COMMENT: a #GMenuItem
#NAME: mount
#PARENT: Gio.VolumeMonitor.mount-added.none
#COMMENT: a #GMount that was added.
#NAME: send_message
#PARENT: Gio.DBusConnection
#COMMENT: Asynchronously sends @message to the peer represented by @connection.

Unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag, the serial number
will be assigned by @connection and set on @message via
g_dbus_message_set_serial(). If @out_serial is not %NULL, then the
serial number used will be written to this location prior to
submitting the message to the underlying transport.

If @connection is closed then the operation will fail with
%G_IO_ERROR_CLOSED. If @message is not well-formed,
the operation fails with %G_IO_ERROR_INVALID_ARGUMENT.

See this [server][gdbus-server] and [client][gdbus-unix-fd-client]
for an example of how to use this low-level API to send and receive
UNIX file descriptors.

Note that @message must be unlocked, unless @flags contain the
%G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL flag.
#NAME: error
#PARENT: Gio.DBusError.encode_gerror.utf8
#COMMENT: A #GError.
#NAME: connection
#PARENT: Gio.DBusInterfaceSkeleton.unexport_from_connection.none
#COMMENT: A #GDBusConnection.
#NAME: application_id
#PARENT: Gio.Application.set_application_id.none
#COMMENT: the identifier for @application
#NAME: check_cancellable
#PARENT: Gio.SimpleAsyncResult.set_check_cancellable.none
#COMMENT: a #GCancellable to check, or %NULL to unset
#NAME: callback
#PARENT: Gio.SocketListener.accept_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: handle
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle.TlsCertificate
#COMMENT: a certificate handle
#NAME: unix_is_mount_path_system_internal
#PARENT: Gio.unix_is_mount_path_system_internal
#COMMENT: %TRUE if @mount_path is considered an implementation detail
    of the OS.
#NAME: enumerator
#PARENT: Gio.FileEnumerator.close.gboolean
#COMMENT: a #GFileEnumerator.
#NAME: open_readwrite_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous file read operation started with
g_file_open_readwrite_async().
#NAME: to_string
#PARENT: Gio.FileAttributeMatcher
#COMMENT: Prints what the matcher is matching against. The format will be
equal to the format passed to g_file_attribute_matcher_new().
The output however, might not be identical, as the matcher may
decide to use a different order or omit needless parts.
#NAME: address
#PARENT: Gio.InetAddress.to_string.utf8
#COMMENT: a #GInetAddress
#NAME: file
#PARENT: Gio.File.eject_mountable.none
#COMMENT: input #GFile
#NAME: VOLUME_IDENTIFIER_KIND_CLASS
#PARENT: Gio
#COMMENT: The string used to obtain the volume class with g_volume_get_identifier().

Known volume classes include `device` and `network`. Other classes may
be added in the future.

This is intended to be used by applications to classify #GVolume
instances into different sections - for example a file manager or
file chooser can use this information to show `network` volumes under
a "Network" heading and `device` volumes under a "Devices" heading.
#NAME: bus_type
#PARENT: Gio.DBusObjectManagerClient.new_for_bus.none
#COMMENT: A #GBusType.
#NAME: set_display_name
#PARENT: Gio.FileIface.set_display_name.set_display_name
#COMMENT: a #GFile specifying what @file was renamed to,
    or %NULL if there was an error.
    Free the returned object with g_object_unref().
#NAME: drive
#PARENT: Gio.Drive.poll_for_media_finish.gboolean
#COMMENT: a #GDrive.
#NAME: resolver
#PARENT: Gio.Resolver.lookup_by_name_finish.InetAddress
#COMMENT: a #GResolver
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.activate_action.activate_action.none
#COMMENT: a #GActionGroup
#NAME: get_etag
#PARENT: Gio.FileIOStream.get_etag
#COMMENT: the entity tag for the stream.
#NAME: new_method_error
#PARENT: Gio.DBusMessage.new_method_error
#COMMENT: A #GDBusMessage. Free with g_object_unref().
#NAME: target
#PARENT: Gio.SrvTarget.get_weight.guint16
#COMMENT: a #GSrvTarget
#NAME: set_dbus_error_valist
#PARENT: Gio.DBusError
#COMMENT: Like g_dbus_error_set_dbus_error() but intended for language bindings.
#NAME: drive
#PARENT: Gio.Drive.get_icon.Icon
#COMMENT: a #GDrive.
#NAME: blob_len
#PARENT: Gio.DBusMessage.new_from_blob.DBusMessage
#COMMENT: The length of @blob.
#NAME: mount
#PARENT: Gio.MountIface.eject_with_operation.eject_with_operation.none
#COMMENT: a #GMount.
#NAME: load
#PARENT: Gio.LoadableIcon.load
#COMMENT: a #GInputStream to read the icon from.
#NAME: get_scope_id
#PARENT: Gio.InetSocketAddress
#COMMENT: Gets the `sin6_scope_id` field from @address,
which must be an IPv6 address.
#NAME: get_native_size
#PARENT: Gio.SocketAddressClass.get_native_size.get_native_size
#COMMENT: the size of the native struct sockaddr that
    @address represents
#NAME: mask
#PARENT: Gio.InetAddressMask.to_string.utf8
#COMMENT: a #GInetAddressMask
#NAME: callback
#PARENT: Gio.InputStream.read_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: get_categories
#PARENT: Gio.DesktopAppInfo.get_categories
#COMMENT: The unparsed Categories key from the desktop file;
    i.e. no attempt is made to split it by ';' or validate it.
#NAME: register_error
#PARENT: Gio.DBusError.register_error
#COMMENT: %TRUE if the association was created, %FALSE if it already
exists.
#NAME: unix_mount_is_system_internal
#PARENT: Gio
#COMMENT: Checks if a unix mount is a system path.
#NAME: inbuf
#PARENT: Gio.ConverterIface.convert.convert.ConverterResult
#COMMENT: the buffer
        containing the data to convert.
#NAME: SocketFamily
#PARENT: Gio
#COMMENT: The protocol family of a #GSocketAddress. (These values are
identical to the system defines %AF_INET, %AF_INET6 and %AF_UNIX,
if available.)
#NAME: context
#PARENT: Gio.AppLaunchContextClass.get_startup_notify_id.get_startup_notify_id.utf8
#COMMENT: a #GAppLaunchContext
#NAME: appinfo
#PARENT: Gio.AppInfoIface.can_remove_supports_type.can_remove_supports_type.gboolean
#COMMENT: a #GAppInfo.
#NAME: add_application_proxy
#PARENT: Gio.SocketClient
#COMMENT: Enable proxy protocols to be handled by the application. When the
indicated proxy protocol is returned by the #GProxyResolver,
#GSocketClient will consider this protocol as supported but will
not try to find a #GProxy instance to handle handshaking. The
application must check for this case by calling
g_socket_connection_get_remote_address() on the returned
#GSocketConnection, and seeing if it's a #GProxyAddress of the
appropriate type, to determine whether or not it needs to handle
the proxy handshaking itself.

This should be used for proxy protocols that are dialects of
another protocol such as HTTP proxy. It also allows cohabitation of
proxy protocols that are reused between protocols. A good example
is HTTP. It can be used to proxy HTTP, FTP and Gopher and can also
be use as generic socket proxy through the HTTP CONNECT method.

When the proxy is detected as being an application proxy, TLS handshake
will be skipped. This is required to let the application do the proxy
specific handshake.
#NAME: client
#PARENT: Gio.SocketClient.set_enable_proxy.none
#COMMENT: a #GSocketClient.
#NAME: get_destination
#PARENT: Gio.DBusMessage.get_destination
#COMMENT: The value.
#NAME: domain
#PARENT: Gio.SimpleAsyncResult.new_error.SimpleAsyncResult
#COMMENT: a #GQuark.
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.get_device_path.utf8
#COMMENT: a #GUnixMountPoint.
#NAME: default
#PARENT: Gio.SettingsBindFlags
#COMMENT: Equivalent to `G_SETTINGS_BIND_GET|G_SETTINGS_BIND_SET`
#NAME: object
#PARENT: Gio.DBusObjectManager.interface-added.none
#COMMENT: The #GDBusObject on which an interface was added.
#NAME: stream
#PARENT: Gio.IOStream.get_output_stream.OutputStream
#COMMENT: a #GIOStream
#NAME: ask_password
#PARENT: Gio.TlsInteractionClass.ask_password.ask_password
#COMMENT: The status of the ask password interaction.
#NAME: get_blocking
#PARENT: Gio.Socket.get_blocking
#COMMENT: %TRUE if blocking I/O is used, %FALSE otherwise.
#NAME: Mount
#PARENT: Gio
#COMMENT: The #GMount interface represents user-visible mounts. Note, when
porting from GnomeVFS, #GMount is the moral equivalent of #GnomeVFSVolume.

#GMount is a "mounted" filesystem that you can access. Mounted is in
quotes because it's not the same as a unix mount, it might be a gvfs
mount, but you can still access the files on it if you use GIO. Might or
might not be related to a volume object.

Unmounting a #GMount instance is an asynchronous operation. For
more information about asynchronous operations, see #GAsyncResult
and #GTask. To unmount a #GMount instance, first call
g_mount_unmount_with_operation() with (at least) the #GMount instance and a
#GAsyncReadyCallback.  The callback will be fired when the
operation has resolved (either with success or failure), and a
#GAsyncReady structure will be passed to the callback.  That
callback should then call g_mount_unmount_with_operation_finish() with the #GMount
and the #GAsyncReady data to see if the operation was completed
successfully.  If an @error is present when g_mount_unmount_with_operation_finish()
is called, then it will be filled with any error information.
#NAME: mount
#PARENT: Gio.MountIface.get_drive.get_drive.Drive
#COMMENT: a #GMount.
#NAME: schema
#PARENT: Gio.SettingsSchema.get_path.utf8
#COMMENT: a #GSettingsSchema
#NAME: authentication-mode
#PARENT: Gio.TlsServerConnection
#COMMENT: The #GTlsAuthenticationMode for the server. This can be changed
before calling g_tls_connection_handshake() if you want to
rehandshake with a different mode from the initial handshake.
#NAME: IOErrorEnum
#PARENT: Gio
#COMMENT: Error codes returned by GIO functions.

Note that this domain may be extended in future GLib releases. In
general, new error codes either only apply to new APIs, or else
replace %G_IO_ERROR_FAILED in cases that were not explicitly
distinguished before. You should therefore avoid writing code like
|[<!-- language="C" -->
if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_FAILED))
  {
    // Assume that this is EPRINTERONFIRE
    ...
  }
]|
but should instead treat all unrecognized error codes the same as
#G_IO_ERROR_FAILED.
#NAME: InputStream
#PARENT: Gio
#COMMENT: #GInputStream has functions to read from a stream (g_input_stream_read()),
to close a stream (g_input_stream_close()) and to skip some content
(g_input_stream_skip()).

To copy the content of an input stream to an output stream without
manually handling the reads and writes, use g_output_stream_splice().

All of these functions have async variants too.
#NAME: wrong_etag
#PARENT: Gio.IOErrorEnum
#COMMENT: File's Entity Tag was incorrect.
#NAME: cancellable
#PARENT: Gio.SocketClient.connect.SocketConnection
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_address
#PARENT: Gio.InetSocketAddress
#COMMENT: Gets @address's #GInetAddress.
#NAME: type
#PARENT: Gio.LoadableIcon.load_finish.InputStream
#COMMENT: a location to store the type of the loaded
       icon, %NULL to ignore.
#NAME: file_new_for_uri
#PARENT: Gio.file_new_for_uri
#COMMENT: a new #GFile for the given @uri.
    Free the returned object with g_object_unref().
#NAME: connection
#PARENT: Gio.DBusConnection.unexport_action_group.none
#COMMENT: a #GDBusConnection
#NAME: to_gerror
#PARENT: Gio.DBusMessage.to_gerror
#COMMENT: %TRUE if @error was set, %FALSE otherwise.
#NAME: get_socket_type
#PARENT: Gio.Socket
#COMMENT: Gets the socket type of the socket.
#NAME: get_object
#PARENT: Gio.DBusInterfaceIface.get_object.get_object
#COMMENT: A #GDBusObject or %NULL. The returned
    reference belongs to @interface_ and should not be freed.
#NAME: supports_uris
#PARENT: Gio.AppInfo
#COMMENT: Checks if the application supports reading files and directories from URIs.
#NAME: drive
#PARENT: Gio.Drive.is_media_removable.gboolean
#COMMENT: a #GDrive.
#NAME: launch_uris_as_manager
#PARENT: Gio.DesktopAppInfo
#COMMENT: This function performs the equivalent of g_app_info_launch_uris(),
but is intended primarily for operating system components that
launch applications.  Ordinary applications should use
g_app_info_launch_uris().

If the application is launched via traditional UNIX fork()/exec()
then @spawn_flags, @user_setup and @user_setup_data are used for the
call to g_spawn_async().  Additionally, @pid_callback (with
@pid_callback_data) will be called to inform about the PID of the
created process.

If application launching occurs via some other mechanism (eg: D-Bus
activation) then @spawn_flags, @user_setup, @user_setup_data,
@pid_callback and @pid_callback_data are ignored.
#NAME: flushed
#PARENT: Gio.ConverterResult
#COMMENT: Flushing is finished
#NAME: input_at_end
#PARENT: Gio.ConverterFlags
#COMMENT: At end of input data
#NAME: stream
#PARENT: Gio.FileIOStream.query_info.FileInfo
#COMMENT: a #GFileIOStream.
#NAME: get_object_path
#PARENT: Gio.DBusObjectIface.get_object_path.get_object_path
#COMMENT: A string owned by @object. Do not free.
#NAME: ResolverRecordType
#PARENT: Gio
#COMMENT: The type of record that g_resolver_lookup_records() or
g_resolver_lookup_records_async() should retrieve. The records are returned
as lists of #GVariant tuples. Each record type has different values in
the variant tuples returned.

%G_RESOLVER_RECORD_SRV records are returned as variants with the signature
'(qqqs)', containing a guint16 with the priority, a guint16 with the
weight, a guint16 with the port, and a string of the hostname.

%G_RESOLVER_RECORD_MX records are returned as variants with the signature
'(qs)', representing a guint16 with the preference, and a string containing
the mail exchanger hostname.

%G_RESOLVER_RECORD_TXT records are returned as variants with the signature
'(as)', representing an array of the strings in the text record.

%G_RESOLVER_RECORD_SOA records are returned as variants with the signature
'(ssuuuuu)', representing a string containing the primary name server, a
string containing the administrator, the serial as a guint32, the refresh
interval as guint32, the retry interval as a guint32, the expire timeout
as a guint32, and the ttl as a guint32.

%G_RESOLVER_RECORD_NS records are returned as variants with the signature
'(s)', representing a string of the hostname of the name server.
#NAME: FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the symlink target, if the file
is a symlink. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
#NAME: DBusArgInfo
#PARENT: Gio
#COMMENT: Information about an argument for a method or a signal.
#NAME: condition_wait
#PARENT: Gio.Socket.condition_wait
#COMMENT: %TRUE if the condition was met, %FALSE otherwise
#NAME: icon
#PARENT: Gio.Emblem.new_with_origin.Emblem
#COMMENT: a GIcon containing the icon.
#NAME: attribute
#PARENT: Gio.FileAttributeMatcher.matches.gboolean
#COMMENT: a file attribute key.
#NAME: unix_mount_get_fs_type
#PARENT: Gio.unix_mount_get_fs_type
#COMMENT: a string containing the file system type.
#NAME: unavailable
#PARENT: Gio.TlsError
#COMMENT: No TLS provider is available
#NAME: 
#PARENT: Gio.Notification.set_default_action_and_target.none...
#COMMENT: positional parameters, as determined by @target_format
#NAME: native
#PARENT: Gio.SocketAddress.new_from_native.SocketAddress
#COMMENT: a pointer to a struct sockaddr
#NAME: pollable_stream_read
#PARENT: Gio.pollable_stream_read
#COMMENT: the number of bytes read, or -1 on error.
#NAME: FilterInputStream
#PARENT: Gio
#COMMENT: Base class for input stream implementations that perform some
kind of filtering operation on a base stream. Typical examples
of filtering operations are character set conversion, compression
and byte order flipping.
#NAME: close_finish
#PARENT: Gio.IOStream
#COMMENT: Closes a stream.
#NAME: user_data
#PARENT: Gio.FileIface.copy_async.copy_async.none
#COMMENT: the data to pass to callback function
#NAME: stream
#PARENT: Gio.DBusAuthObserver.authorize-authenticated-peer.gboolean
#COMMENT: A #GIOStream for the #GDBusConnection.
#NAME: application
#PARENT: Gio.Application.unbind_busy_property.none
#COMMENT: a #GApplication
#NAME: io_priority
#PARENT: Gio.FileEnumerator.close_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: get_protocol
#PARENT: Gio.SocketClient.get_protocol
#COMMENT: a #GSocketProtocol
#NAME: info
#PARENT: Gio.DBusMethodInfo.ref.DBusMethodInfo
#COMMENT: A #GDBusMethodInfo
#NAME: file
#PARENT: Gio.FileIface.replace_readwrite.replace_readwrite.FileIOStream
#COMMENT: a #GFile
#NAME: timeout
#PARENT: Gio.Socket.condition_timed_wait.gboolean
#COMMENT: the maximum time (in microseconds) to wait, or -1
#NAME: new_full
#PARENT: Gio.Settings
#COMMENT: Creates a new #GSettings object with a given schema, backend and
path.

It should be extremely rare that you ever want to use this function.
It is made available for advanced use-cases (such as plugin systems
that want to provide access to schemas loaded from custom locations,
etc).

At the most basic level, a #GSettings object is a pure composition of
4 things: a #GSettingsSchema, a #GSettingsBackend, a path within that
backend, and a #GMainContext to which signals are dispatched.

This constructor therefore gives you full control over constructing
#GSettings instances.  The first 3 parameters are given directly as
@schema, @backend and @path, and the main context is taken from the
thread-default (as per g_settings_new()).

If @backend is %NULL then the default backend is used.

If @path is %NULL then the path from the schema is used.  It is an
error if @path is %NULL and the schema has no path of its own or if
@path is non-%NULL and not equal to the path that the schema does
have.
#NAME: source_tag
#PARENT: Gio.Task.report_error.none
#COMMENT: an opaque pointer indicating the source of this task
#NAME: register
#PARENT: Gio.IOExtensionPoint
#COMMENT: Registers an extension point.
#NAME: resolver
#PARENT: Gio.ResolverClass.lookup_records_async.lookup_records_async.none
#COMMENT: a #GResolver
#NAME: unix_mount_get_fs_type
#PARENT: Gio
#COMMENT: Gets the filesystem type for the unix mount.
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.get_platform_data.GLib.Variant
#COMMENT: #GApplicationCommandLine
#NAME: socket
#PARENT: Gio.Socket.get_multicast_loopback.gboolean
#COMMENT: a #GSocket.
#NAME: query_info
#PARENT: Gio.File.query_info
#COMMENT: a #GFileInfo for the given @file, or %NULL
    on error. Free the returned object with g_object_unref().
#NAME: model
#PARENT: Gio.MenuModelClass.get_item_attribute_value.get_item_attribute_value.GLib.Variant
#COMMENT: a #GMenuModel
#NAME: convert
#PARENT: Gio.Converter
#COMMENT: This is the main operation used when converting data. It is to be called
multiple times in a loop, and each time it will do some work, i.e.
producing some output (in @outbuf) or consuming some input (from @inbuf) or
both. If its not possible to do any work an error is returned.

Note that a single call may not consume all input (or any input at all).
Also a call may produce output even if given no input, due to state stored
in the converter producing output.

If any data was either produced or consumed, and then an error happens, then
only the successful conversion is reported and the error is returned on the
next call.

A full conversion loop involves calling this method repeatedly, each time
giving it new input and space output space. When there is no more input
data after the data in @inbuf, the flag %G_CONVERTER_INPUT_AT_END must be set.
The loop will be (unless some error happens) returning %G_CONVERTER_CONVERTED
each time until all data is consumed and all output is produced, then
%G_CONVERTER_FINISHED is returned instead. Note, that %G_CONVERTER_FINISHED
may be returned even if %G_CONVERTER_INPUT_AT_END is not set, for instance
in a decompression converter where the end of data is detectable from the
data (and there might even be other data after the end of the compressed data).

When some data has successfully been converted @bytes_read and is set to
the number of bytes read from @inbuf, and @bytes_written is set to indicate
how many bytes was written to @outbuf. If there are more data to output
or consume (i.e. unless the %G_CONVERTER_INPUT_AT_END is specified) then
%G_CONVERTER_CONVERTED is returned, and if no more data is to be output
then %G_CONVERTER_FINISHED is returned.

On error %G_CONVERTER_ERROR is returned and @error is set accordingly.
Some errors need special handling:

%G_IO_ERROR_NO_SPACE is returned if there is not enough space
to write the resulting converted data, the application should
call the function again with a larger @outbuf to continue.

%G_IO_ERROR_PARTIAL_INPUT is returned if there is not enough
input to fully determine what the conversion should produce,
and the %G_CONVERTER_INPUT_AT_END flag is not set. This happens for
example with an incomplete multibyte sequence when converting text,
or when a regexp matches up to the end of the input (and may match
further input). It may also happen when @inbuf_size is zero and
there is no more data to produce.

When this happens the application should read more input and then
call the function again. If further input shows that there is no
more data call the function again with the same data but with
the %G_CONVERTER_INPUT_AT_END flag set. This may cause the conversion
to finish as e.g. in the regexp match case (or, to fail again with
%G_IO_ERROR_PARTIAL_INPUT in e.g. a charset conversion where the
input is actually partial).

After g_converter_convert() has returned %G_CONVERTER_FINISHED the
converter object is in an invalid state where its not allowed
to call g_converter_convert() anymore. At this time you can only
free the object or call g_converter_reset() to reset it to the
initial state.

If the flag %G_CONVERTER_FLUSH is set then conversion is modified
to try to write out all internal state to the output. The application
has to call the function multiple times with the flag set, and when
the available input has been consumed and all internal state has
been produced then %G_CONVERTER_FLUSHED (or %G_CONVERTER_FINISHED if
really at the end) is returned instead of %G_CONVERTER_CONVERTED.
This is somewhat similar to what happens at the end of the input stream,
but done in the middle of the data.

This has different meanings for different conversions. For instance
in a compression converter it would mean that we flush all the
compression state into output such that if you uncompress the
compressed data you get back all the input data. Doing this may
make the final file larger due to padding though. Another example
is a regexp conversion, where if you at the end of the flushed data
have a match, but there is also a potential longer match. In the
non-flushed case we would ask for more input, but when flushing we
treat this as the end of input and do the match.

Flushing is not always possible (like if a charset converter flushes
at a partial multibyte sequence). Converters are supposed to try
to produce as much output as possible and then return an error
(typically %G_IO_ERROR_PARTIAL_INPUT).
#NAME: cancellable
#PARENT: Gio.FileOutputStreamClass.query_info.query_info.FileInfo
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: signal
#PARENT: Gio.DBusMessage.new_signal.DBusMessage
#COMMENT: A valid signal name.
#NAME: settings
#PARENT: Gio.Settings.set_uint.gboolean
#COMMENT: a #GSettings object
#NAME: supports_tls
#PARENT: Gio.TlsBackend.supports_tls
#COMMENT: whether or not TLS is supported
#NAME: stream
#PARENT: Gio.DataInputStream.read_upto.utf8
#COMMENT: a #GDataInputStream
#NAME: file
#PARENT: Gio.FileIface.get_parent.get_parent.File
#COMMENT: input #GFile
#NAME: call_with_unix_fd_list_finish
#PARENT: Gio.DBusProxy
#COMMENT: Finishes an operation started with g_dbus_proxy_call_with_unix_fd_list().
#NAME: get_exit_status
#PARENT: Gio.Subprocess.get_exit_status
#COMMENT: the exit status
#NAME: task
#PARENT: Gio.Task.set_task_data.none
#COMMENT: the #GTask
#NAME: cancellable
#PARENT: Gio.Resolver.lookup_service.SrvTarget
#COMMENT: a #GCancellable, or %NULL
#NAME: filename
#PARENT: Gio.Resource.load.Resource
#COMMENT: the path of a filename to load, in the GLib filename encoding
#NAME: cr
#PARENT: Gio.DataStreamNewlineType
#COMMENT: Selects "CR" line endings.
#NAME: 
#PARENT: Gio.DBusMethodInvocation.return_error.none...
#COMMENT: Parameters for @format.
#NAME: appinfo
#PARENT: Gio.AppInfo.get_icon.Icon
#COMMENT: a #GAppInfo.
#NAME: is_closed
#PARENT: Gio.InputStream.is_closed
#COMMENT: %TRUE if the stream is closed.
#NAME: pre_unmount
#PARENT: Gio.FileMonitorEvent
#COMMENT: the file location will soon be unmounted.
#NAME: get_sort_order
#PARENT: Gio.FileInfo.get_sort_order
#COMMENT: a #gint32 containing the value of the "standard::sort_order" attribute.
#NAME: new
#PARENT: Gio.DBusObjectManagerServer.new
#COMMENT: A #GDBusObjectManagerServer object. Free with g_object_unref().
#NAME: cancellable
#PARENT: Gio.Permission.release_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: signal_name
#PARENT: Gio.DBusSignalCallback.none
#COMMENT: The name of the signal.
#NAME: has_volumes
#PARENT: Gio.Drive
#COMMENT: Check if @drive has any mountable volumes.
#NAME: 
#PARENT: Gio.Task.report_new_error.none...
#COMMENT: a list of values to insert into @format.
#NAME: error
#PARENT: Gio.ConverterResult
#COMMENT: There was an error during conversion.
#NAME: task_data
#PARENT: Gio.Task.set_task_data.none
#COMMENT: task-specific data
#NAME: model
#PARENT: Gio.MenuModel.get_item_link.MenuModel
#COMMENT: a #GMenuModel
#NAME: protocol
#PARENT: Gio.Resolver.lookup_service_async.none
#COMMENT: the networking protocol to use for @service (eg, "tcp")
#NAME: stdin_buf
#PARENT: Gio.Subprocess.communicate_utf8_async.none
#COMMENT: Input data, or %NULL
#NAME: get_fd
#PARENT: Gio.FileDescriptorBased.get_fd
#COMMENT: The file descriptor
#NAME: get_name_owner
#PARENT: Gio.DBusProxy
#COMMENT: The unique name that owns the name that @proxy is for or %NULL if
no-one currently owns that name. You may connect to the
#GObject::notify signal to track changes to the
#GDBusProxy:g-name-owner property.
#NAME: drive
#PARENT: Gio.DriveIface.get_identifier.get_identifier.utf8
#COMMENT: a #GDrive
#NAME: action_group
#PARENT: Gio.DBusConnection.export_action_group.guint
#COMMENT: a #GActionGroup
#NAME: resolver
#PARENT: Gio.ProxyResolverInterface.lookup_async.lookup_async.none
#COMMENT: a #GProxyResolver
#NAME: return_gerror
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Like g_dbus_method_invocation_return_error() but takes a #GError
instead of the error domain, error code and message.

This method will free @invocation, you cannot use it afterwards.
#NAME: op
#PARENT: Gio.MountOperation.set_password.none
#COMMENT: a #GMountOperation.
#NAME: get_name
#PARENT: Gio.DBusObjectManagerClient.get_name
#COMMENT: A unique or well-known name. Do not free, the string
belongs to @manager.
#NAME: IOModuleScopeFlags
#PARENT: Gio
#COMMENT: Flags for use with g_io_module_scope_new().
#NAME: cancellable
#PARENT: Gio.Resolver.lookup_by_name_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: user_data
#PARENT: Gio.AsyncInitable.new_async.none
#COMMENT: the data to pass to callback function
#NAME: eject_finish
#PARENT: Gio.Mount
#COMMENT: Finishes ejecting a mount. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.
#NAME: read_byte
#PARENT: Gio.DataInputStream
#COMMENT: Reads an unsigned 8-bit/1-byte value from @stream.
#NAME: set_mapping
#PARENT: Gio.Settings.bind_with_mapping.none
#COMMENT: a function that gets called to convert values
    from @object to @settings, or %NULL to use the default GIO mapping
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.set_check_cancellable.none
#COMMENT: a #GSimpleAsyncResult
#NAME: get_warning
#PARENT: Gio.TlsPassword.get_warning
#COMMENT: The warning.
#NAME: user_data
#PARENT: Gio.MountIface.remount.remount.none
#COMMENT: user data passed to @callback.
#NAME: is_active
#PARENT: Gio.DBusServer
#COMMENT: Gets whether @server is active.
#NAME: stdout_buf
#PARENT: Gio.Subprocess.communicate_utf8.gboolean
#COMMENT: data read from the subprocess stdout
#NAME: add_button_with_target_value
#PARENT: Gio.Notification
#COMMENT: Adds a button to @notification that activates @action when clicked.
@action must be an application-wide action (it must start with "app.").

If @target is non-%NULL, @action will be activated with @target as
its parameter.
#NAME: proxy
#PARENT: Gio.DBusProxy.get_flags.DBusProxyFlags
#COMMENT: A #GDBusProxy.
#NAME: cancellable
#PARENT: Gio.TlsInteraction.ask_password.TlsInteractionResult
#COMMENT: an optional #GCancellable cancellation object
#NAME: menu
#PARENT: Gio.Menu.prepend.none
#COMMENT: a #GMenu
#NAME: optname
#PARENT: Gio.Socket.get_option.gboolean
#COMMENT: the "name" of the option (eg, `SO_BROADCAST`)
#NAME: conn
#PARENT: Gio.TlsConnection.set_database.none
#COMMENT: a #GTlsConnection
#NAME: socket
#PARENT: Gio.Socket.get_broadcast.gboolean
#COMMENT: a #GSocket.
#NAME: TlsConnection
#PARENT: Gio
#COMMENT: #GTlsConnection is the base TLS connection class type, which wraps
a #GIOStream and provides TLS encryption on top of it. Its
subclasses, #GTlsClientConnection and #GTlsServerConnection,
implement client-side and server-side TLS, respectively.
#NAME: callback_data
#PARENT: Gio.Task.report_error.none
#COMMENT: user data passed to @callback.
#NAME: ref
#PARENT: Gio.DBusNodeInfo
#COMMENT: If @info is statically allocated does nothing. Otherwise increases
the reference count.
#NAME: list
#PARENT: Gio.ListModel.items_changed.none
#COMMENT: a #GListModel
#NAME: get_password_save
#PARENT: Gio.MountOperation.get_password_save
#COMMENT: a #GPasswordSave flag.
#NAME: get_completed
#PARENT: Gio.Task.get_completed
#COMMENT: %TRUE if the task has completed, %FALSE otherwise.
#NAME: call_sync
#PARENT: Gio.DBusProxy.call_sync
#COMMENT: %NULL if @error is set. Otherwise a #GVariant tuple with
return values. Free with g_variant_unref().
#NAME: is_media_check_automatic
#PARENT: Gio.Drive
#COMMENT: Checks if @drive is capabable of automatically detecting media changes.
#NAME: ListModelInterface
#PARENT: Gio
#COMMENT: The virtual function table for #GListModel.
#NAME: hostname
#PARENT: Gio.ResolverClass.lookup_by_name_async.lookup_by_name_async.none
#COMMENT: the hostname to look up the address of
#NAME: name
#PARENT: Gio.DBusObjectManagerClient.new_sync.DBusObjectManagerClient
#COMMENT: The owner of the control object (unique or well-known name), or %NULL when not using a message bus connection.
#NAME: volume
#PARENT: Gio.VolumeIface.mount_fn.mount_fn.none
#COMMENT: a #GVolume
#NAME: user_data
#PARENT: Gio.DataInputStream.read_upto_async.none
#COMMENT: the data to pass to callback function
#NAME: has_prefix
#PARENT: Gio.File.has_prefix
#COMMENT: %TRUE if the @files's parent, grandparent, etc is @prefix,
    %FALSE otherwise.
#NAME: condition_wait
#PARENT: Gio.Socket
#COMMENT: Waits for @condition to become true on @socket. When the condition
is met, %TRUE is returned.

If @cancellable is cancelled before the condition is met, or if the
socket has a timeout set and it is reached before the condition is
met, then %FALSE is returned and @error, if non-%NULL, is set to
the appropriate value (%G_IO_ERROR_CANCELLED or
%G_IO_ERROR_TIMED_OUT).

See also g_socket_condition_timed_wait().
#NAME: user_data
#PARENT: Gio.IOSchedulerJobFunc.gboolean
#COMMENT: the data to pass to callback function
#NAME: action_name
#PARENT: Gio.ActionGroupInterface.has_action.has_action.gboolean
#COMMENT: the name of the action to check for
#NAME: self
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer.TlsCertificate
#COMMENT: a #GTlsDatabase
#NAME: result
#PARENT: Gio.FileIface.trash_finish.trash_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: info
#PARENT: Gio.FileInfo.has_namespace.gboolean
#COMMENT: a #GFileInfo.
#NAME: mask
#PARENT: Gio.InetAddressMask.matches.gboolean
#COMMENT: a #GInetAddressMask
#NAME: flags
#PARENT: Gio.DBusMessage.set_flags.none
#COMMENT: Flags for @message that are set (typically values from the #GDBusMessageFlags
enumeration bitwise ORed together).
#NAME: stream
#PARENT: Gio.BufferedOutputStream.set_auto_grow.none
#COMMENT: a #GBufferedOutputStream.
#NAME: lookup_certificate_issuer
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer.lookup_certificate_issuer
#COMMENT: a newly allocated issuer #GTlsCertificate,
or %NULL. Use g_object_unref() to release the certificate.
#NAME: length
#PARENT: Gio.DataInputStream.read_line.guint8
#COMMENT: a #gsize to get the length of the data read in.
#NAME: file
#PARENT: Gio.File.set_attributes_async.none
#COMMENT: input #GFile
#NAME: invalidated_properties
#PARENT: Gio.DBusObjectManagerClient.interface-proxy-properties-changed.none
#COMMENT: A %NULL terminated array of properties that was invalidated.
#NAME: first_property_name
#PARENT: Gio.AsyncInitable.new_async.none
#COMMENT: the name of the first property, or %NULL if no
    properties
#NAME: dest
#PARENT: Gio.SocketAddressClass.to_native.to_native.gboolean
#COMMENT: a pointer to a memory location that will contain the native
struct sockaddr
#NAME: g_iface
#PARENT: Gio.VolumeIface
#COMMENT: The parent interface.
#NAME: info
#PARENT: Gio.DBusInterfaceInfo.lookup_property.DBusPropertyInfo
#COMMENT: A #GDBusInterfaceInfo.
#NAME: num_files
#PARENT: Gio.FileIface.measure_disk_usage_finish.measure_disk_usage_finish.gboolean
#COMMENT: the number of non-directories encountered
#NAME: value
#PARENT: Gio.File.set_attribute_string.gboolean
#COMMENT: a string containing the attribute's value
#NAME: user_data
#PARENT: Gio.File.set_display_name_async.none
#COMMENT: the data to pass to callback function
#NAME: get_stdout_pipe
#PARENT: Gio.Subprocess.get_stdout_pipe
#COMMENT: the stdout pipe
#NAME: user_data
#PARENT: Gio.Settings.get_mapped.gpointer
#COMMENT: user data for @mapping
#NAME: get
#PARENT: Gio.SettingsBindFlags
#COMMENT: Update the #GObject property when the setting changes.
    It is an error to use this flag if the property is not writable.
#NAME: query_exists
#PARENT: Gio.File
#COMMENT: Utility function to check if a particular file exists. This is
implemented using g_file_query_info() and as such does blocking I/O.

Note that in many cases it is racy to first check for file existence
and then execute something based on the outcome of that, because the
file might have been created or removed in between the operations. The
general approach to handling that is to not check, but just do the
operation and handle the errors as they come.

As an example of race-free checking, take the case of reading a file,
and if it doesn't exist, creating it. There are two racy versions: read
it, and on error create it; and: check if it exists, if not create it.
These can both result in two processes creating the file (with perhaps
a partially written file as the result). The correct approach is to
always try to create the file with g_file_create() which will either
atomically create the file or fail with a %G_IO_ERROR_EXISTS error.

However, in many cases an existence check is useful in a user interface,
for instance to make a menu item sensitive/insensitive, so that you don't
have to fool users that something is possible and then just show an error
dialog. If you do this, you should make sure to also handle the errors
that can happen due to races when you execute the operation.
#NAME: emblem
#PARENT: Gio.EmblemedIcon.add_emblem.none
#COMMENT: a #GEmblem
#NAME: default-proxy
#PARENT: Gio.SimpleProxyResolver
#COMMENT: The default proxy URI that will be used for any URI that doesn't
match #GSimpleProxyResolver:ignore-hosts, and doesn't match any
of the schemes set with g_simple_proxy_resolver_set_uri_proxy().

Note that as a special case, if this URI starts with
"socks://", #GSimpleProxyResolver will treat it as referring
to all three of the socks5, socks4a, and socks4 proxy types.
#NAME: MenuLinkIter
#PARENT: Gio
#COMMENT: #GMenuLinkIter is an opaque structure type.  You must access it using
the functions below.
#NAME: init_async
#PARENT: Gio.AsyncInitable
#COMMENT: Starts asynchronous initialization of the object implementing the
interface. This must be done before any real use of the object after
initial construction. If the object also implements #GInitable you can
optionally call g_initable_init() instead.

When the initialization is finished, @callback will be called. You can
then call g_async_initable_init_finish() to get the result of the
initialization.

Implementations may also support cancellation. If @cancellable is not
%NULL, then initialization can be cancelled by triggering the cancellable
object from another thread. If the operation was cancelled, the error
%G_IO_ERROR_CANCELLED will be returned. If @cancellable is not %NULL, and
the object doesn't support cancellable initialization, the error
%G_IO_ERROR_NOT_SUPPORTED will be returned.

As with #GInitable, if the object is not initialized, or initialization
returns with an error, then all operations on the object except
g_object_ref() and g_object_unref() are considered to be invalid, and
have undefined behaviour. They will often fail with g_critical() or
g_warning(), but this must not be relied on.

Implementations of this method must be idempotent: i.e. multiple calls
to this function with the same argument should return the same results.
Only the first call initializes the object; further calls return the result
of the first call. This is so that it's safe to implement the singleton
pattern in the GObject constructor function.

For classes that also support the #GInitable interface, the default
implementation of this method will run the g_initable_init() function
in a thread, so if you want to support asynchronous initialization via
threads, just implement the #GAsyncInitable interface without overriding
any interface methods.
#NAME: user_data
#PARENT: Gio.LoadableIconIface.load_async.load_async.none
#COMMENT: the data to pass to callback function
#NAME: new
#PARENT: Gio.SimpleProxyResolver
#COMMENT: Creates a new #GSimpleProxyResolver. See
#GSimpleProxyResolver:default-proxy and
#GSimpleProxyResolver:ignore-hosts for more details on how the
arguments are interpreted.
#NAME: message
#PARENT: Gio.DBusConnection.send_message_with_reply_sync.DBusMessage
#COMMENT: a #GDBusMessage
#NAME: cert
#PARENT: Gio.TlsCertificate.get_issuer.TlsCertificate
#COMMENT: a #GTlsCertificate
#NAME: get_is_remote
#PARENT: Gio.ApplicationCommandLine.get_is_remote
#COMMENT: %TRUE if the invocation was remote
#NAME: send_to
#PARENT: Gio.Socket
#COMMENT: Tries to send @size bytes from @buffer to @address. If @address is
%NULL then the message is sent to the default receiver (set by
g_socket_connect()).

See g_socket_send() for additional information.
#NAME: action_name
#PARENT: Gio.ActionGroup.get_action_state_hint.GLib.Variant
#COMMENT: the name of the action to query
#NAME: icon
#PARENT: Gio.LoadableIcon.load_async.none
#COMMENT: a #GLoadableIcon.
#NAME: stream
#PARENT: Gio.DataInputStream.read_upto_async.none
#COMMENT: a #GDataInputStream
#NAME: get_level
#PARENT: Gio.SocketControlMessage
#COMMENT: Returns the "level" (i.e. the originating protocol) of the control message.
This is often SOL_SOCKET.
#NAME: cancellable
#PARENT: Gio.Drive.stop.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: file
#PARENT: Gio.File.create_readwrite.FileIOStream
#COMMENT: a #GFile
#NAME: family
#PARENT: Gio.SocketClient.set_family.none
#COMMENT: a #GSocketFamily
#NAME: copy_session_state
#PARENT: Gio.TlsClientConnection
#COMMENT: Copies session state from one connection to another. This is
not normally needed, but may be used when the same session
needs to be used between different endpoints as is required
by some protocols such as FTP over TLS. @source should have
already completed a handshake, and @conn should not have
completed a handshake.
#NAME: cancellable
#PARENT: Gio.TlsDatabase.verify_chain.TlsCertificateFlags
#COMMENT: a #GCancellable, or %NULL
#NAME: key
#PARENT: Gio.Settings.get_boolean.gboolean
#COMMENT: the key to get the value for
#NAME: icon
#PARENT: Gio.LoadableIcon.load.InputStream
#COMMENT: a #GLoadableIcon.
#NAME: FILE_ATTRIBUTE_UNIX_INODE
#PARENT: Gio
#COMMENT: A key in the "unix" namespace for getting the inode of the file.
This attribute is only available for UNIX file systems. Corresponding
#GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
#NAME: socket
#PARENT: Gio.Socket.set_ttl.none
#COMMENT: a #GSocket.
#NAME: none
#PARENT: Gio.TlsDatabaseLookupFlags
#COMMENT: No lookup flags
#NAME: connection
#PARENT: Gio.DBusConnection.send_message_with_reply_finish.DBusMessage
#COMMENT: a #GDBusConnection
#NAME: cancellable
#PARENT: Gio.MountIface.eject_with_operation.eject_with_operation.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: flush_sync
#PARENT: Gio.DBusConnection.flush_sync
#COMMENT: %TRUE if the operation succeeded, %FALSE if @error is set
#NAME: lookup_certificate_issuer_async
#PARENT: Gio.TlsDatabase
#COMMENT: Asynchronously lookup the issuer of @certificate in the database. See
g_tls_database_lookup_certificate_issuer() for more information.
#NAME: unknown_property
#PARENT: Gio.DBusError
#COMMENT: Property you tried to access isn't known by the object. Since 2.42
#NAME: address
#PARENT: Gio.SocketClient.set_local_address.none
#COMMENT: a #GSocketAddress, or %NULL
#NAME: app_info_get_default_for_uri_scheme
#PARENT: Gio
#COMMENT: Gets the default application for handling URIs with
the given URI scheme. A URI scheme is the initial part
of the URI, up to but not including the ':', e.g. "http",
"ftp" or "sip".
#NAME: stream
#PARENT: Gio.OutputStream.flush_async.none
#COMMENT: a #GOutputStream.
#NAME: callback
#PARENT: Gio.simple_async_report_take_gerror_in_idle.none
#COMMENT: a #GAsyncReadyCallback.
#NAME: length
#PARENT: Gio.TlsPassword.set_value_full.none
#COMMENT: the length of the password, or -1
#NAME: time_read
#PARENT: Gio.unix_mount_points_get.UnixMountPoint
#COMMENT: guint64 to contain a timestamp.
#NAME: type
#PARENT: Gio.SocketClient.set_socket_type.none
#COMMENT: a #GSocketType
#NAME: length
#PARENT: Gio.DataInputStream.read_until.utf8
#COMMENT: a #gsize to get the length of the data read in.
#NAME: stream
#PARENT: Gio.PollableOutputStream.write_nonblocking.gssize
#COMMENT: a #GPollableOutputStream
#NAME: error_code
#PARENT: Gio.dbus_error_unregister_error.gboolean
#COMMENT: An error code.
#NAME: connection
#PARENT: Gio.DBusSubtreeIntrospectFunc.DBusInterfaceInfo
#COMMENT: A #GDBusConnection.
#NAME: name
#PARENT: Gio.DBusInterfaceInfo.lookup_signal.DBusSignalInfo
#COMMENT: A D-Bus signal name (typically in CamelCase)
#NAME: user_data
#PARENT: Gio.FileIface.enumerate_children_async.enumerate_children_async.none
#COMMENT: the data to pass to callback function
#NAME: data
#PARENT: Gio.SocketControlMessageClass.serialize.serialize.none
#COMMENT: A buffer to write data to
#NAME: UnixInputStream
#PARENT: Gio
#COMMENT: #GUnixInputStream implements #GInputStream for reading from a UNIX
file descriptor, including asynchronous operations. (If the file
descriptor refers to a socket or pipe, this will use poll() to do
asynchronous I/O. If it refers to a regular file, it will fall back
to doing asynchronous I/O in another thread.)

Note that `<gio/gunixinputstream.h>` belongs to the UNIX-specific GIO
interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
file when using it.
#NAME: object_path
#PARENT: Gio.DBusActionGroup.get.DBusActionGroup
#COMMENT: the object path at which the action group is exported
#NAME: seekable
#PARENT: Gio.Seekable.can_truncate.gboolean
#COMMENT: a #GSeekable.
#NAME: attr_value
#PARENT: Gio.FileInfo.set_attribute_stringv.none
#COMMENT: a %NULL terminated array of UTF-8 strings.
#NAME: callback_data
#PARENT: Gio.Task.new.Task
#COMMENT: user data passed to @callback.
#NAME: get_activation_root
#PARENT: Gio.VolumeIface.get_activation_root.get_activation_root
#COMMENT: the activation root of @volume
    or %NULL. Use g_object_unref() to free.
#NAME: protocol
#PARENT: Gio.SocketClient.add_application_proxy.none
#COMMENT: The proxy protocol
#NAME: allow-mechanism
#PARENT: Gio.DBusAuthObserver.allow-mechanism
#COMMENT: %TRUE if @mechanism can be used to authenticate the other peer, %FALSE if not.
#NAME: MenuModel
#PARENT: Gio
#COMMENT: #GMenuModel represents the contents of a menu -- an ordered list of
menu items. The items are associated with actions, which can be
activated through them. Items can be grouped in sections, and may
have submenus associated with them. Both items and sections usually
have some representation data, such as labels or icons. The type of
the associated action (ie whether it is stateful, and what kind of
state it has) can influence the representation of the item.

The conceptual model of menus in #GMenuModel is hierarchical:
sections and submenus are again represented by #GMenuModels.
Menus themselves do not define their own roles. Rather, the role
of a particular #GMenuModel is defined by the item that references
it (or, in the case of the 'root' menu, is defined by the context
in which it is used).

As an example, consider the visible portions of this menu:

## An example menu # {#menu-example}

![](menu-example.png)

There are 8 "menus" visible in the screenshot: one menubar, two
submenus and 5 sections:

- the toplevel menubar (containing 4 items)
- the View submenu (containing 3 sections)
- the first section of the View submenu (containing 2 items)
- the second section of the View submenu (containing 1 item)
- the final section of the View submenu (containing 1 item)
- the Highlight Mode submenu (containing 2 sections)
- the Sources section (containing 2 items)
- the Markup section (containing 2 items)

The [example][menu-model] illustrates the conceptual connection between
these 8 menus. Each large block in the figure represents a menu and the
smaller blocks within the large block represent items in that menu. Some
items contain references to other menus.

## A menu example # {#menu-model}

![](menu-model.png)

Notice that the separators visible in the [example][menu-example]
appear nowhere in the [menu model][menu-model]. This is because
separators are not explicitly represented in the menu model. Instead,
a separator is inserted between any two non-empty sections of a menu.
Section items can have labels just like any other item. In that case,
a display system may show a section header instead of a separator.

The motivation for this abstract model of application controls is
that modern user interfaces tend to make these controls available
outside the application. Examples include global menus, jumplists,
dash boards, etc. To support such uses, it is necessary to 'export'
information about actions and their representation in menus, which
is exactly what the [GActionGroup exporter][gio-GActionGroup-exporter]
and the [GMenuModel exporter][gio-GMenuModel-exporter] do for
#GActionGroup and #GMenuModel. The client-side counterparts to
make use of the exported information are #GDBusActionGroup and
#GDBusMenuModel.

The API of #GMenuModel is very generic, with iterators for the
attributes and links of an item, see g_menu_model_iterate_item_attributes()
and g_menu_model_iterate_item_links(). The 'standard' attributes and
link types have predefined names: %G_MENU_ATTRIBUTE_LABEL,
%G_MENU_ATTRIBUTE_ACTION, %G_MENU_ATTRIBUTE_TARGET, %G_MENU_LINK_SECTION
and %G_MENU_LINK_SUBMENU.

Items in a #GMenuModel represent active controls if they refer to
an action that can get activated when the user interacts with the
menu item. The reference to the action is encoded by the string id
in the %G_MENU_ATTRIBUTE_ACTION attribute. An action id uniquely
identifies an action in an action group. Which action group(s) provide
actions depends on the context in which the menu model is used.
E.g. when the model is exported as the application menu of a
#GtkApplication, actions can be application-wide or window-specific
(and thus come from two different action groups). By convention, the
application-wide actions have names that start with "app.", while the
names of window-specific actions start with "win.".

While a wide variety of stateful actions is possible, the following
is the minimum that is expected to be supported by all users of exported
menu information:
- an action with no parameter type and no state
- an action with no parameter type and boolean state
- an action with string parameter type and string state

## Stateless

A stateless action typically corresponds to an ordinary menu item.

Selecting such a menu item will activate the action (with no parameter).

## Boolean State

An action with a boolean state will most typically be used with a "toggle"
or "switch" menu item. The state can be set directly, but activating the
action (with no parameter) results in the state being toggled.

Selecting a toggle menu item will activate the action. The menu item should
be rendered as "checked" when the state is true.

## String Parameter and State

Actions with string parameters and state will most typically be used to
represent an enumerated choice over the items available for a group of
radio menu items. Activating the action with a string parameter is
equivalent to setting that parameter as the state.

Radio menu items, in addition to being associated with the action, will
have a target value. Selecting that menu item will result in activation
of the action with the target value as the parameter. The menu item should
be rendered as "selected" when the state of the action is equal to the
target value of the menu item.
#NAME: new_for_commandline_arg_and_cwd
#PARENT: Gio.File.new_for_commandline_arg_and_cwd
#COMMENT: a new #GFile
#NAME: conn
#PARENT: Gio.TlsConnectionClass.handshake_async.handshake_async.none
#COMMENT: a #GTlsConnection
#NAME: interface-added
#PARENT: Gio.DBusObject
#COMMENT: Emitted when @interface is added to @object.
#NAME: get_environment
#PARENT: Gio.AppLaunchContext
#COMMENT: Gets the complete environment variable list to be passed to
the child process when @context is used to launch an application.
This is a %NULL-terminated array of strings, where each string has
the form `KEY=VALUE`.
#NAME: TlsBackendInterface
#PARENT: Gio
#COMMENT: Provides an interface for describing TLS-related types.
#NAME: file
#PARENT: Gio.File.delete_finish.gboolean
#COMMENT: input #GFile
#NAME: task
#PARENT: Gio.Task.get_task_data.gpointer
#COMMENT: a #GTask
#NAME: new_for_commandline_arg_and_cwd
#PARENT: Gio.File
#COMMENT: Creates a #GFile with the given argument from the command line.

This function is similar to g_file_new_for_commandline_arg() except
that it allows for passing the current working directory as an
argument instead of using the current working directory of the
process.

This is useful if the commandline argument was given in a context
other than the invocation of the current process.

See also g_application_command_line_create_file_for_arg().
#NAME: name_space
#PARENT: Gio.FileInfo.list_attributes.utf8
#COMMENT: a file attribute key's namespace.
#NAME: cancellable
#PARENT: Gio.OutputStreamClass.splice.splice.gssize
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_connection
#PARENT: Gio.DBusObjectProxy.get_connection
#COMMENT: A #GDBusConnection. Do not free, the
  object is owned by @proxy.
#NAME: result
#PARENT: Gio.Resolver.lookup_records_finish.GLib.Variant
#COMMENT: the result passed to your #GAsyncReadyCallback
#NAME: variable
#PARENT: Gio.SubprocessLauncher.unsetenv.none
#COMMENT: the environment variable to unset, must not contain '='
#NAME: get_origin
#PARENT: Gio.Emblem
#COMMENT: Gets the origin of the emblem.
#NAME: replace
#PARENT: Gio.BusNameOwnerFlags
#COMMENT: If another message bus connection owns the name and have
specified #G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT, then take the name from the other connection.
#NAME: srv_target_list_sort
#PARENT: Gio.srv_target_list_sort
#COMMENT: the head of the sorted list.
#NAME: DBusSubtreeEnumerateFunc
#PARENT: Gio
#COMMENT: The type of the @enumerate function in #GDBusSubtreeVTable.

This function is called when generating introspection data and also
when preparing to dispatch incoming messages in the event that the
%G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES flag is not
specified (ie: to verify that the object path is valid).

Hierarchies are not supported; the items that you return should not
contain the '/' character.

The return value will be freed with g_strfreev().
#NAME: callback
#PARENT: Gio.PermissionClass.acquire_async.acquire_async.none
#COMMENT: the #GAsyncReadyCallback to call when done
#NAME: bytes_needed
#PARENT: Gio.DBusMessage
#COMMENT: Utility function to calculate how many bytes are needed to
completely deserialize the D-Bus message stored at @blob.
#NAME: get_default_for_uri_scheme
#PARENT: Gio.DesktopAppInfoLookup
#COMMENT: Gets the default application for launching applications
using this URI scheme for a particular GDesktopAppInfoLookup
implementation.

The GDesktopAppInfoLookup interface and this function is used
to implement g_app_info_get_default_for_uri_scheme() backends
in a GIO module. There is no reason for applications to use it
directly. Applications should use g_app_info_get_default_for_uri_scheme().
#NAME: message
#PARENT: Gio.DBusMessage.set_reply_serial.none
#COMMENT: A #GDBusMessage.
#NAME: result
#PARENT: Gio.FileIOStreamClass.query_info_finish.query_info_finish.FileInfo
#COMMENT: a #GAsyncResult.
#NAME: result
#PARENT: Gio.MountIface.unmount_finish.unmount_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: expected_type
#PARENT: Gio.SettingsBindSetMapping.GLib.Variant
#COMMENT: the #GVariantType to create
#NAME: client
#PARENT: Gio.SocketClient.connect_to_service.SocketConnection
#COMMENT: a #GSocketConnection
#NAME: io_priority
#PARENT: Gio.FileIface.read_async.read_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: result
#PARENT: Gio.Permission.acquire_finish.gboolean
#COMMENT: the #GAsyncResult given to the #GAsyncReadyCallback
#NAME: source_tag
#PARENT: Gio.Task.set_source_tag.none
#COMMENT: an opaque pointer indicating the source of this task
#NAME: MENU_ATTRIBUTE_LABEL
#PARENT: Gio
#COMMENT: The menu item attribute which holds the label of the item.
#NAME: host_and_port
#PARENT: Gio.NetworkAddress.parse.SocketConnectable
#COMMENT: the hostname and optionally a port
#NAME: result
#PARENT: Gio.NetworkMonitorInterface.can_reach_finish.can_reach_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: emit_accept_certificate
#PARENT: Gio.TlsConnection
#COMMENT: Used by #GTlsConnection implementations to emit the
#GTlsConnection::accept-certificate signal.
#NAME: callback
#PARENT: Gio.File.copy_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: unregister_error
#PARENT: Gio.DBusError.unregister_error
#COMMENT: %TRUE if the association was destroyed, %FALSE if it wasn't found.
#NAME: user_data
#PARENT: Gio.File.copy_async.none
#COMMENT: the data to pass to callback function
#NAME: action_name
#PARENT: Gio.RemoteActionGroup.activate_action_full.none
#COMMENT: the name of the action to activate
#NAME: section
#PARENT: Gio.Menu.insert_section.none
#COMMENT: a #GMenuModel with the items of the section
#NAME: copy_attributes
#PARENT: Gio.File.copy_attributes
#COMMENT: %TRUE if the attributes were copied successfully,
    %FALSE otherwise.
#NAME: callback
#PARENT: Gio.File.enumerate_children_async.none
#COMMENT: a #GAsyncReadyCallback to call when the
    request is satisfied
#NAME: attributes
#PARENT: Gio.FileIface.enumerate_children_async.enumerate_children_async.none
#COMMENT: an attribute query string
#NAME: file
#PARENT: Gio.FileIface.replace.replace.FileOutputStream
#COMMENT: input #GFile
#NAME: application
#PARENT: Gio.Application.get_is_registered.gboolean
#COMMENT: a #GApplication
#NAME: callback
#PARENT: Gio.InputStreamClass.skip_async.skip_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: get_is_hidden
#PARENT: Gio.FileInfo
#COMMENT: Checks if a file is hidden.
#NAME: VOLUME_IDENTIFIER_KIND_UNIX_DEVICE
#PARENT: Gio
#COMMENT: The string used to obtain a Unix device path with g_volume_get_identifier().
#NAME: cancellable
#PARENT: Gio.ProxyResolverInterface.lookup.lookup.utf8
#COMMENT: a #GCancellable, or %NULL
#NAME: manager
#PARENT: Gio.DBusObjectManagerServer.unexport.gboolean
#COMMENT: A #GDBusObjectManagerServer.
#NAME: flags
#PARENT: Gio.Drive.stop.none
#COMMENT: flags affecting the unmount if required for stopping.
#NAME: connection
#PARENT: Gio.DBusConnection.get_stream.IOStream
#COMMENT: a #GDBusConnection
#NAME: subprocess
#PARENT: Gio.Subprocess.communicate_utf8_finish.gboolean
#COMMENT: Self
#NAME: get_etag
#PARENT: Gio.FileIOStreamClass.get_etag.get_etag
#COMMENT: the entity tag for the stream.
#NAME: resolver
#PARENT: Gio.ProxyResolverInterface.is_supported.is_supported.gboolean
#COMMENT: a #GProxyResolver
#NAME: lookup_by_address
#PARENT: Gio.Resolver
#COMMENT: Synchronously reverse-resolves @address to determine its
associated hostname.

If the DNS resolution fails, @error (if non-%NULL) will be set to
a value from #GResolverError.

If @cancellable is non-%NULL, it can be used to cancel the
operation, in which case @error (if non-%NULL) will be set to
%G_IO_ERROR_CANCELLED.
#NAME: accept_socket_async
#PARENT: Gio.SocketListener
#COMMENT: This is the asynchronous version of g_socket_listener_accept_socket().

When the operation is finished @callback will be
called. You can then call g_socket_listener_accept_socket_finish()
to get the result of the operation.
#NAME: result
#PARENT: Gio.VolumeIface.eject_with_operation_finish.eject_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: DBusObject
#PARENT: Gio
#COMMENT: The #GDBusObject type is the base type for D-Bus objects on both
the service side (see #GDBusObjectSkeleton) and the client side
(see #GDBusObjectProxy). It is essentially just a container of
interfaces.
#NAME: new_tmp
#PARENT: Gio.File.new_tmp
#COMMENT: a new #GFile.
    Free the returned object with g_object_unref().
#NAME: flags
#PARENT: Gio.TlsDatabaseClass.lookup_certificates_issued_by_async.lookup_certificates_issued_by_async.none
#COMMENT: Flags which affect the lookup operation.
#NAME: enumerate_children
#PARENT: Gio.Resource
#COMMENT: Returns all the names of children at the specified @path in the resource.
The return result is a %NULL terminated list of strings which should
be released with g_strfreev().

@lookup_flags controls the behaviour of the lookup.
#NAME: protocol
#PARENT: Gio.Resolver.lookup_service.SrvTarget
#COMMENT: the networking protocol to use for @service (eg, "tcp")
#NAME: volume-added
#PARENT: Gio.VolumeMonitor
#COMMENT: Emitted when a mountable volume is added to the system.
#NAME: dbus_address_escape_value
#PARENT: Gio
#COMMENT: Escape @string so it can appear in a D-Bus address as the value
part of a key-value pair.

For instance, if @string is "/run/bus-for-:0",
this function would return "/run/bus-for-%3A0",
which could be used in a D-Bus address like
"unix:nonce-tcp:host=127.0.0.1,port=42,noncefile=/run/bus-for-%3A0".
#NAME: new_valist
#PARENT: Gio.Initable
#COMMENT: Helper function for constructing #GInitable object. This is
similar to g_object_new_valist() but also initializes the object
and returns %NULL, setting an error on failure.
#NAME: flags
#PARENT: Gio.OutputStreamClass.splice.splice.gssize
#COMMENT: a set of #GOutputStreamSpliceFlags.
#NAME: SocketConnectable
#PARENT: Gio
#COMMENT: Objects that describe one or more potential socket endpoints
implement #GSocketConnectable. Callers can then use
g_socket_connectable_enumerate() to get a #GSocketAddressEnumerator
to try out each socket address in turn until one succeeds, as shown
in the sample code below.

|[<!-- language="C" -->
MyConnectionType *
connect_to_host (const char    *hostname,
                 guint16        port,
                 GCancellable  *cancellable,
                 GError       **error)
{
  MyConnection *conn = NULL;
  GSocketConnectable *addr;
  GSocketAddressEnumerator *enumerator;
  GSocketAddress *sockaddr;
  GError *conn_error = NULL;

  addr = g_network_address_new (hostname, port);
  enumerator = g_socket_connectable_enumerate (addr);
  g_object_unref (addr);

  // Try each sockaddr until we succeed. Record the first connection error,
  // but not any further ones (since they'll probably be basically the same
  // as the first).
  while (!conn && (sockaddr = g_socket_address_enumerator_next (enumerator, cancellable, error))
    {
      conn = connect_to_sockaddr (sockaddr, conn_error ? NULL : &conn_error);
      g_object_unref (sockaddr);
    }
  g_object_unref (enumerator);

  if (conn)
    {
      if (conn_error)
        {
          // We couldn't connect to the first address, but we succeeded
          // in connecting to a later address.
          g_error_free (conn_error);
        }
      return conn;
    }
  else if (error)
    {
      /// Either initial lookup failed, or else the caller cancelled us.
      if (conn_error)
        g_error_free (conn_error);
      return NULL;
    }
  else
    {
      g_error_propagate (error, conn_error);
      return NULL;
    }
}
]|
#NAME: conn
#PARENT: Gio.TlsConnection.get_peer_certificate_errors.TlsCertificateFlags
#COMMENT: a #GTlsConnection
#NAME: iter
#PARENT: Gio.MenuAttributeIter.get_next.gboolean
#COMMENT: a #GMenuAttributeIter
#NAME: get_default
#PARENT: Gio.NetworkMonitor
#COMMENT: Gets the default #GNetworkMonitor for the system.
#NAME: info
#PARENT: Gio.FileInfo.get_symbolic_icon.Icon
#COMMENT: a #GFileInfo.
#NAME: callback
#PARENT: Gio.DBusProxy.new.none
#COMMENT: Callback function to invoke when the proxy is ready.
#NAME: bytes_read
#PARENT: Gio.InputStream.read_all.gboolean
#COMMENT: location to store the number of bytes that was read from the stream
#NAME: self
#PARENT: Gio.TlsDatabase.verify_chain.TlsCertificateFlags
#COMMENT: a #GTlsDatabase
#NAME: ZlibCompressor
#PARENT: Gio
#COMMENT: Zlib decompression
#NAME: matcher
#PARENT: Gio.FileAttributeMatcher.matches.gboolean
#COMMENT: a #GFileAttributeMatcher.
#NAME: object
#PARENT: Gio.PropertyAction.new.PropertyAction
#COMMENT: the object that has the property
  to wrap
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_stringv.utf8
#COMMENT: a file attribute key.
#NAME: get_local_address
#PARENT: Gio.Socket.get_local_address
#COMMENT: a #GSocketAddress or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: ask_password
#PARENT: Gio.TlsInteraction.ask_password
#COMMENT: The status of the ask password interaction.
#NAME: FileType
#PARENT: Gio
#COMMENT: Indicates the file's on-disk type.
#NAME: can_reach
#PARENT: Gio.NetworkMonitor.can_reach
#COMMENT: %TRUE if @connectable is reachable, %FALSE if not.
#NAME: get_file_for_uri
#PARENT: Gio.Vfs
#COMMENT: Gets a #GFile for @uri.

This operation never fails, but the returned object
might not support any I/O operation if the URI
is malformed or if the URI scheme is not supported.
#NAME: close_base
#PARENT: Gio.FilterInputStream.set_close_base_stream.none
#COMMENT: %TRUE to close the base stream.
#NAME: result
#PARENT: Gio.FileEnumerator.next_files_finish.FileInfo
#COMMENT: a #GAsyncResult.
#NAME: set_as_default_for_extension
#PARENT: Gio.AppInfo
#COMMENT: Sets the application as the default handler for the given file extension.
#NAME: cancellable
#PARENT: Gio.PermissionClass.acquire.acquire.gboolean
#COMMENT: a #GCancellable, or %NULL
#NAME: drive
#PARENT: Gio.Drive.poll_for_media.none
#COMMENT: a #GDrive.
#NAME: lookup
#PARENT: Gio.ProxyResolver
#COMMENT: Looks into the system proxy configuration to determine what proxy,
if any, to use to connect to @uri. The returned proxy URIs are of
the form `<protocol>://[user[:password]@]host:port` or
`direct://`, where <protocol> could be http, rtsp, socks
or other proxying protocol.

If you don't know what network protocol is being used on the
socket, you should use `none` as the URI protocol.
In this case, the resolver might still return a generic proxy type
(such as SOCKS), but would not return protocol-specific proxy types
(such as http).

`direct://` is used when no proxy is needed.
Direct connection should not be attempted unless it is part of the
returned array of proxies.
#NAME: Seekable
#PARENT: Gio
#COMMENT: #GSeekable is implemented by streams (implementations of
#GInputStream or #GOutputStream) that support seeking.

Seekable streams largely fall into two categories: resizable and
fixed-size.

#GSeekable on fixed-sized streams is approximately the same as POSIX
lseek() on a block device (for example: attmepting to seek past the
end of the device is an error).  Fixed streams typically cannot be
truncated.

#GSeekable on resizable streams is approximately the same as POSIX
lseek() on a normal file.  Seeking past the end and writing data will
usually cause the stream to resize by introducing zero bytes.
#NAME: connection
#PARENT: Gio.DBusConnection.export_menu_model.guint
#COMMENT: a #GDBusConnection
#NAME: DBusMessageType
#PARENT: Gio
#COMMENT: Message types used in #GDBusMessage.
#NAME: join_multicast_group
#PARENT: Gio.Socket
#COMMENT: Registers @socket to receive multicast messages sent to @group.
@socket must be a %G_SOCKET_TYPE_DATAGRAM socket, and must have
been bound to an appropriate interface and port with
g_socket_bind().

If @iface is %NULL, the system will automatically pick an interface
to bind to based on @group.

If @source_specific is %TRUE, source-specific multicast as defined
in RFC 4604 is used. Note that on older platforms this may fail
with a %G_IO_ERROR_NOT_SUPPORTED error.
#NAME: user_data
#PARENT: Gio.DBusProxy.new_for_bus.none
#COMMENT: User data to pass to @callback.
#NAME: get_completions
#PARENT: Gio.FilenameCompleter
#COMMENT: Gets an array of completion strings for a given initial text.
#NAME: info
#PARENT: Gio.DBusInterfaceInfo.generate_xml.none
#COMMENT: A #GDBusNodeInfo
#NAME: res
#PARENT: Gio.File.load_contents_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: socket
#PARENT: Gio.Socket.receive.gssize
#COMMENT: a #GSocket
#NAME: result
#PARENT: Gio.TlsInteractionClass.request_certificate_finish.request_certificate_finish.TlsInteractionResult
#COMMENT: the result passed to the callback
#NAME: user_data
#PARENT: Gio.bus_get.none
#COMMENT: the data to pass to @callback
#NAME: handle_method_invocations_in_thread
#PARENT: Gio.DBusInterfaceSkeletonFlags
#COMMENT: Each method invocation is handled in
  a thread dedicated to the invocation. This means that the method implementation can use blocking IO
  without blocking any other part of the process. It also means that the method implementation must
  use locking to access data structures used by other threads.
#NAME: eject_finish
#PARENT: Gio.Volume
#COMMENT: Finishes ejecting a volume. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.
#NAME: SimpleActionGroup
#PARENT: Gio
#COMMENT: #GSimpleActionGroup is a hash table filled with #GAction objects,
implementing the #GActionGroup and #GActionMap interfaces.
#NAME: enumerate_children
#PARENT: Gio.FileIface.enumerate_children.enumerate_children
#COMMENT: A #GFileEnumerator if successful,
    %NULL on error. Free the returned object with g_object_unref().
#NAME: resolver
#PARENT: Gio.ResolverClass.lookup_by_name.lookup_by_name.InetAddress
#COMMENT: a #GResolver
#NAME: SettingsBindSetMapping
#PARENT: Gio
#COMMENT: The type for the function that is used to convert an object property
value to a #GVariant for storing it in #GSettings.
#NAME: message
#PARENT: Gio.SocketControlMessage.get_msg_type.gint
#COMMENT: a #GSocketControlMessage
#NAME: get_icon
#PARENT: Gio.EmblemedIcon.get_icon
#COMMENT: a #GIcon that is owned by @emblemed
#NAME: message
#PARENT: Gio.DBusMessage.get_body.GLib.Variant
#COMMENT: A #GDBusMessage.
#NAME: listening
#PARENT: Gio.SocketListenerEvent
#COMMENT: The listener is about to start
   listening on this socket.
#NAME: set_attribute_string
#PARENT: Gio.File.set_attribute_string
#COMMENT: %TRUE if the @attribute was successfully set, %FALSE otherwise.
#NAME: DBusCallFlags
#PARENT: Gio
#COMMENT: Flags used in g_dbus_connection_call() and similar APIs.
#NAME: io_priority
#PARENT: Gio.FileEnumeratorClass.next_files_async.next_files_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: cancellable
#PARENT: Gio.PollableInputStream.create_source.GLib.Source
#COMMENT: a #GCancellable, or %NULL
#NAME: filename_too_long
#PARENT: Gio.IOErrorEnum
#COMMENT: Filename is too many characters.
#NAME: key
#PARENT: Gio.SettingsSchemaKey.range_check.gboolean
#COMMENT: a #GSettingsSchemaKey
#NAME: callback
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer_async.none
#COMMENT: callback to call when the operation completes
#NAME: user_data
#PARENT: Gio.DBusConnection.register_object.guint
#COMMENT: data to pass to functions in @vtable
#NAME: removed
#PARENT: Gio.ListModel.items-changed.none
#COMMENT: the number of items removed
#NAME: set_interaction
#PARENT: Gio.TlsConnection
#COMMENT: Set the object that will be used to interact with the user. It will be used
for things like prompting the user for passwords.

The @interaction argument will normally be a derived subclass of
#GTlsInteraction. %NULL can also be provided if no user interaction
should occur for this connection.
#NAME: DBusSubtreeDispatchFunc
#PARENT: Gio.DBusSubtreeDispatchFunc
#COMMENT: A #GDBusInterfaceVTable or %NULL if you don't want to handle the methods.
#NAME: connection
#PARENT: Gio.UnixConnection.send_credentials_finish.gboolean
#COMMENT: A #GUnixConnection.
#NAME: unmount_finish
#PARENT: Gio.Mount.unmount_finish
#COMMENT: %TRUE if the mount was successfully unmounted. %FALSE otherwise.
#NAME: base_stream
#PARENT: Gio.BufferedInputStream.new_sized.InputStream
#COMMENT: a #GInputStream
#NAME: file
#PARENT: Gio.File.unmount_mountable_with_operation_finish.gboolean
#COMMENT: input #GFile
#NAME: connect_to_service_finish
#PARENT: Gio.SocketClient
#COMMENT: Finishes an async connect operation. See g_socket_client_connect_to_service_async()
#NAME: permission
#PARENT: Gio.Permission.acquire.gboolean
#COMMENT: a #GPermission instance
#NAME: get_item_type
#PARENT: Gio.ListModel
#COMMENT: Gets the type of the items in @list. All items returned from
g_list_model_get_type() are of that type or a subtype, or are an
implementation of that interface.

The item type of a #GListModel can not change during the life of the
model.
#NAME: call_finish
#PARENT: Gio.DBusConnection.call_finish
#COMMENT: %NULL if @error is set. Otherwise a #GVariant tuple with
    return values. Free with g_variant_unref().
#NAME: argv0
#PARENT: Gio.SubprocessLauncher.spawn.Subprocess
#COMMENT: Command line arguments
#NAME: result
#PARENT: Gio.FileOutputStream.query_info_finish.FileInfo
#COMMENT: a #GAsyncResult.
#NAME: read_uint16
#PARENT: Gio.DataInputStream
#COMMENT: Reads an unsigned 16-bit/2-byte value from @stream.

In order to get the correct byte order for this read operation,
see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.is_user_mountable.gboolean
#COMMENT: a #GUnixMountPoint.
#NAME: label
#PARENT: Gio.MenuItem.new.MenuItem
#COMMENT: the section label, or %NULL
#NAME: unexport
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Stops exporting @interface_ on all connections it is exported on.

To unexport @interface_ from only a single connection, use
g_dbus_interface_skeleton_unexport_from_connection()
#NAME: set_exit_status
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Sets the exit status that will be used when the invoking process
exits.

The return value of the #GApplication::command-line signal is
passed to this function when the handler returns.  This is the usual
way of setting the exit status.

In the event that you want the remote invocation to continue running
and want to decide on the exit status in the future, you can use this
call.  For the case of a remote invocation, the remote process will
typically exit when the last reference is dropped on @cmdline.  The
exit status of the remote process will be equal to the last value
that was set with this function.

In the case that the commandline invocation is local, the situation
is slightly more complicated.  If the commandline invocation results
in the mainloop running (ie: because the use-count of the application
increased to a non-zero value) then the application is considered to
have been 'successful' in a certain sense, and the exit status is
always zero.  If the application use count is zero, though, the exit
status of the local #GApplicationCommandLine is used.
#NAME: progress_callback
#PARENT: Gio.FileIface.move.move.gboolean
#COMMENT: #GFileProgressCallback
    function for updates
#NAME: stream
#PARENT: Gio.InputStream.read_all_finish.gboolean
#COMMENT: a #GInputStream
#NAME: message
#PARENT: Gio.DBusMessage.copy.DBusMessage
#COMMENT: A #GDBusMessage.
#NAME: callback
#PARENT: Gio.FileIface.poll_mountable.poll_mountable.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: set_attribute_mask
#PARENT: Gio.FileInfo
#COMMENT: Sets @mask on @info to match specific attribute types.
#NAME: key
#PARENT: Gio.Settings.get_mapped.gpointer
#COMMENT: the key to get the value for
#NAME: dbus_address_escape_value
#PARENT: Gio.dbus_address_escape_value
#COMMENT: a copy of @string with all
    non-optionally-escaped bytes escaped
#NAME: base_stream
#PARENT: Gio.BufferedOutputStream.new_sized.OutputStream
#COMMENT: a #GOutputStream.
#NAME: object_path
#PARENT: Gio.DBusSubtreeEnumerateFunc.utf8
#COMMENT: The object path that was registered with g_dbus_connection_register_subtree().
#NAME: application
#PARENT: Gio.Application.set_resource_base_path.none
#COMMENT: a #GApplication
#NAME: interface_name
#PARENT: Gio.DBusConnection.call_sync.GLib.Variant
#COMMENT: D-Bus interface to invoke method on
#NAME: result
#PARENT: Gio.VolumeIface.mount_finish.mount_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: get
#PARENT: Gio.AppInfoMonitor
#COMMENT: Gets the #GAppInfoMonitor for the current thread-default main
context.

The #GAppInfoMonitor will emit a "changed" signal in the
thread-default main context whenever the list of installed
applications (as reported by g_app_info_get_all()) may have changed.

You must only call g_object_unref() on the return value from under
the same main context as you created it.
#NAME: cancellable
#PARENT: Gio.FileIface.find_enclosing_mount.find_enclosing_mount.Mount
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: is_tagged
#PARENT: Gio.AsyncResult.is_tagged
#COMMENT: %TRUE if @res has the indicated @source_tag, %FALSE if
  not.
#NAME: file
#PARENT: Gio.FileIface.read_async.read_async.none
#COMMENT: input #GFile
#NAME: new
#PARENT: Gio.AppLaunchContext.new
#COMMENT: a #GAppLaunchContext.
#NAME: failed
#PARENT: Gio.TlsInteractionResult
#COMMENT: The interaction has failed, or was cancelled.
    and the operation should be aborted.
#NAME: res
#PARENT: Gio.FileIface.copy_finish.copy_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: format
#PARENT: Gio.Task.return_new_error.none
#COMMENT: a string with format characters.
#NAME: get_connection
#PARENT: Gio.DBusProxy
#COMMENT: Gets the connection @proxy is for.
#NAME: send_environment
#PARENT: Gio.ApplicationFlags
#COMMENT: Send the environment of the
    launching process to the primary instance. Set this flag if your
    application is expected to behave differently depending on certain
    environment variables. For instance, an editor might be expected
    to use the <envar>GIT_COMMITTER_NAME</envar> environment variable
    when editing a git commit message. The environment is available
    to the #GApplication::command-line signal handler, via
    g_application_command_line_getenv().
#NAME: ask-question
#PARENT: Gio.MountOperation
#COMMENT: Emitted when asking the user a question and gives a list of
choices for the user to choose from.

If the message contains a line break, the first line should be
presented as a heading. For example, it may be used as the
primary text in a #GtkMessageDialog.
#NAME: connectable
#PARENT: Gio.SocketConnectableIface.enumerate.enumerate.SocketAddressEnumerator
#COMMENT: a #GSocketConnectable
#NAME: set_display_name
#PARENT: Gio.File
#COMMENT: Renames @file to the specified display name.

The display name is converted from UTF-8 to the correct encoding
for the target filesystem if possible and the @file is renamed to this.

If you want to implement a rename operation in the user interface the
edit name (#G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME) should be used as the
initial value in the rename widget, and then the result after editing
should be passed to g_file_set_display_name().

On success the resulting converted filename is returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: get_icon
#PARENT: Gio.FileInfo.get_icon
#COMMENT: #GIcon for the given @info.
#NAME: g_iface
#PARENT: Gio.AsyncResultIface
#COMMENT: The parent interface.
#NAME: none
#PARENT: Gio.DBusSignalFlags
#COMMENT: No flags set.
#NAME: limit_msec
#PARENT: Gio.UnixMountMonitor.set_rate_limit.none
#COMMENT: a integer with the limit in milliseconds to
    poll for changes.
#NAME: dbus_error
#PARENT: Gio.IOErrorEnum
#COMMENT: A remote object generated an error that
    doesn't correspond to a locally registered #GError error
    domain. Use g_dbus_error_get_remote_error() to extract the D-Bus
    error name and g_dbus_error_strip_remote_error() to fix up the
    message so it matches what was received on the wire. Since 2.26.
#NAME: error
#PARENT: Gio.DBusMessageType
#COMMENT: Error reply.
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.guess_icon.Icon
#COMMENT: a #GUnixMountPoint
#NAME: DataOutputStream
#PARENT: Gio
#COMMENT: Data output stream implements #GOutputStream and includes functions for
writing data directly to an output stream.
#NAME: stream
#PARENT: Gio.BufferedInputStreamClass.fill.fill.gssize
#COMMENT: a #GBufferedInputStream
#NAME: can_seek
#PARENT: Gio.Seekable.can_seek
#COMMENT: %TRUE if @seekable can be seeked. %FALSE otherwise.
#NAME: set_tls_validation_flags
#PARENT: Gio.SocketClient
#COMMENT: Sets the TLS validation flags used when creating TLS connections
via @client. The default value is %G_TLS_CERTIFICATE_VALIDATE_ALL.
#NAME: bind
#PARENT: Gio.Socket.bind
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: value
#PARENT: Gio.DBusMessage.set_sender.none
#COMMENT: The value to set.
#NAME: get_dbus_object_path
#PARENT: Gio.Application.get_dbus_object_path
#COMMENT: the object path, or %NULL
#NAME: find_enclosing_mount_finish
#PARENT: Gio.FileIface.find_enclosing_mount_finish.find_enclosing_mount_finish
#COMMENT: #GMount for given @file or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: simple
#PARENT: Gio.SimpleAction.set_state_hint.none
#COMMENT: a #GSimpleAction
#NAME: io_priority
#PARENT: Gio.FileIface.query_info_async.query_info_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: mount_enclosing_volume_finish
#PARENT: Gio.FileIface.mount_enclosing_volume_finish.mount_enclosing_volume_finish
#COMMENT: %TRUE if successful. If an error has occurred,
    this function will return %FALSE and set @error
    appropriately if present.
#NAME: interface
#PARENT: Gio.DesktopAppInfo.get_implementations.DesktopAppInfo
#COMMENT: the name of the interface
#NAME: icon
#PARENT: Gio.icon_hash.guint
#COMMENT: #gconstpointer to an icon object.
#NAME: mount
#PARENT: Gio.Mount.unmount_with_operation_finish.gboolean
#COMMENT: a #GMount.
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.get_connections.DBusConnection
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: cancellable
#PARENT: Gio.InputStream.read.gssize
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: bus_type
#PARENT: Gio.bus_get_sync.DBusConnection
#COMMENT: a #GBusType
#NAME: res
#PARENT: Gio.File.read_finish.FileInputStream
#COMMENT: a #GAsyncResult
#NAME: DBusSubtreeEnumerateFunc
#PARENT: Gio.DBusSubtreeEnumerateFunc
#COMMENT: A newly allocated array of strings for node names that are children of @object_path.
#NAME: file
#PARENT: Gio.File.replace_contents.gboolean
#COMMENT: input #GFile
#NAME: bus_type
#PARENT: Gio.bus_watch_name_with_closures.guint
#COMMENT: The type of bus to watch a name on.
#NAME: zlib
#PARENT: Gio.ZlibCompressorFormat
#COMMENT: deflate compression with zlib header
#NAME: family
#PARENT: Gio.InetAddress.new_from_bytes.InetAddress
#COMMENT: the address family of @bytes
#NAME: exists
#PARENT: Gio.IOErrorEnum
#COMMENT: File already exists.
#NAME: TlsInteractionClass
#PARENT: Gio
#COMMENT: The class for #GTlsInteraction. Derived classes implement the various
virtual interaction methods to handle TLS interactions.

Derived classes can choose to implement whichever interactions methods they'd
like to support by overriding those virtual methods in their class
initialization function. If a derived class implements an async method,
it must also implement the corresponding finish method.

The synchronous interaction methods should implement to display modal dialogs,
and the asynchronous methods to display modeless dialogs.

If the user cancels an interaction, then the result should be
%G_TLS_INTERACTION_FAILED and the error should be set with a domain of
%G_IO_ERROR and code of %G_IO_ERROR_CANCELLED.
#NAME: search
#PARENT: Gio.DesktopAppInfo.search
#COMMENT: a
  list of strvs.  Free each item with g_strfreev() and free the outer
  list with g_free().
#NAME: seekable
#PARENT: Gio.SeekableIface.can_truncate.can_truncate.gboolean
#COMMENT: a #GSeekable.
#NAME: DBusSubtreeIntrospectFunc
#PARENT: Gio
#COMMENT: The type of the @introspect function in #GDBusSubtreeVTable.

Subtrees are flat.  @node, if non-%NULL, is always exactly one
segment of the object path (ie: it never contains a slash).

This function should return %NULL to indicate that there is no object
at this node.

If this function returns non-%NULL, the return value is expected to
be a %NULL-terminated array of pointers to #GDBusInterfaceInfo
structures describing the interfaces implemented by @node.  This
array will have g_dbus_interface_info_unref() called on each item
before being freed with g_free().

The difference between returning %NULL and an array containing zero
items is that the standard DBus interfaces will returned to the
remote introspector in the empty array case, but not in the %NULL
case.
#NAME: size
#PARENT: Gio.Resource.get_info.gboolean
#COMMENT: a location to place the length of the contents of the file,
   or %NULL if the length is not needed
#NAME: iface
#PARENT: Gio.Socket.leave_multicast_group.gboolean
#COMMENT: Interface used
#NAME: cancellable
#PARENT: Gio.TlsConnectionClass.handshake_async.handshake_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: get_vtable
#PARENT: Gio.DBusInterfaceSkeleton.get_vtable
#COMMENT: A #GDBusInterfaceVTable (never %NULL).
#NAME: item_index
#PARENT: Gio.MenuModel.get_item_links.none
#COMMENT: The #GMenuItem to query
#NAME: freeze
#PARENT: Gio.Menu
#COMMENT: Marks @menu as frozen.

After the menu is frozen, it is an error to attempt to make any
changes to it.  In effect this means that the #GMenu API must no
longer be used.

This function causes g_menu_model_is_mutable() to begin returning
%FALSE, which has some positive performance implications.
#NAME: attribute
#PARENT: Gio.FileIface.set_attribute.set_attribute.gboolean
#COMMENT: a string containing the attribute's name
#NAME: icon
#PARENT: Gio.IconIface.to_tokens.to_tokens.gboolean
#COMMENT: a #GIcon.
#NAME: user_data
#PARENT: Gio.FileProgressCallback.none
#COMMENT: user data passed to the callback.
#NAME: self
#PARENT: Gio.SubprocessLauncher.take_fd.none
#COMMENT: a #GSubprocessLauncher
#NAME: parameters
#PARENT: Gio.DBusInterfaceMethodCallFunc.none
#COMMENT: A #GVariant tuple with parameters.
#NAME: tls_file_database_new
#PARENT: Gio
#COMMENT: Creates a new #GTlsFileDatabase which uses anchor certificate authorities
in @anchors to verify certificate chains.

The certificates in @anchors must be PEM encoded.
#NAME: flags
#PARENT: Gio.IOModuleScope.new.IOModuleScope
#COMMENT: flags for the new scope
#NAME: uri
#PARENT: Gio.SocketClient.connect_to_uri.SocketConnection
#COMMENT: A network URI
#NAME: replace_contents_bytes_async
#PARENT: Gio.File
#COMMENT: Same as g_file_replace_contents_async() but takes a #GBytes input instead.
This function will keep a ref on @contents until the operation is done.
Unlike g_file_replace_contents_async() this allows forgetting about the
content without waiting for the callback.

When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with
g_file_replace_contents_finish().
#NAME: registration_id
#PARENT: Gio.DBusConnection.unregister_object.gboolean
#COMMENT: a registration id obtained from
    g_dbus_connection_register_object()
#NAME: format
#PARENT: Gio.SimpleAsyncResult.set_error_va.none
#COMMENT: a formatted error reporting string.
#NAME: file
#PARENT: Gio.FileIface.query_info.query_info.FileInfo
#COMMENT: input #GFile
#NAME: stream
#PARENT: Gio.PollableOutputStreamInterface.can_poll.can_poll.gboolean
#COMMENT: a #GPollableOutputStream.
#NAME: user_data
#PARENT: Gio.UnixConnection.send_credentials_async.none
#COMMENT: the data to pass to callback function
#NAME: item_index
#PARENT: Gio.MenuModelClass.get_item_attribute_value.get_item_attribute_value.GLib.Variant
#COMMENT: the index of the item
#NAME: attribute_changed
#PARENT: Gio.FileMonitorEvent
#COMMENT: a file attribute was changed.
#NAME: cancellable
#PARENT: Gio.File.replace_readwrite_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: splice_async
#PARENT: Gio.OutputStream
#COMMENT: Splices a stream asynchronously.
When the operation is finished @callback will be called.
You can then call g_output_stream_splice_finish() to get the
result of the operation.

For the synchronous, blocking version of this function, see
g_output_stream_splice().
#NAME: uuid
#PARENT: Gio.VolumeMonitorClass.get_mount_for_uuid.get_mount_for_uuid.Mount
#COMMENT: the UUID to look for
#NAME: uri
#PARENT: Gio.NetworkAddress.parse_uri.SocketConnectable
#COMMENT: the hostname and optionally a port
#NAME: drive
#PARENT: Gio.DriveIface.has_volumes.has_volumes.gboolean
#COMMENT: a #GDrive.
#NAME: nodes
#PARENT: Gio.DBusNodeInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusNodeInfo structures or %NULL if there are no nodes.
#NAME: get_default_for_protocol
#PARENT: Gio.Proxy
#COMMENT: Lookup "gio-proxy" extension point for a proxy implementation that supports
specified protocol.
#NAME: interaction
#PARENT: Gio.TlsInteractionClass.request_certificate.request_certificate.TlsInteractionResult
#COMMENT: a #GTlsInteraction object
#NAME: read_uint32
#PARENT: Gio.DataInputStream
#COMMENT: Reads an unsigned 32-bit/4-byte value from @stream.

In order to get the correct byte order for this read operation,
see g_data_input_stream_get_byte_order() and g_data_input_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: bytes_written
#PARENT: Gio.OutputStream.write_all.gboolean
#COMMENT: location to store the number of bytes that was
    written to the stream
#NAME: reload
#PARENT: Gio.Resolver
#COMMENT: Emitted when the resolver notices that the system resolver
configuration has changed.
#NAME: model
#PARENT: Gio.MenuModel.get_n_items.gint
#COMMENT: a #GMenuModel
#NAME: bytes
#PARENT: Gio.BytesIcon.new.BytesIcon
#COMMENT: a #GBytes.
#NAME: get_etag
#PARENT: Gio.FileOutputStream.get_etag
#COMMENT: the entity tag for the stream.
#NAME: count
#PARENT: Gio.OutputStreamClass.write_fn.write_fn.gssize
#COMMENT: the number of bytes to write
#NAME: filename
#PARENT: Gio.resource_load.Resource
#COMMENT: the path of a filename to load, in the GLib filename encoding
#NAME: get_family
#PARENT: Gio.SocketAddress.get_family
#COMMENT: the socket family type of @address
#NAME: get_default_database
#PARENT: Gio.TlsBackendInterface.get_default_database.get_default_database
#COMMENT: the default database, which should be
              unreffed when done.
#NAME: value
#PARENT: Gio.File.set_attribute_uint32.gboolean
#COMMENT: a #guint32 containing the attribute's new value
#NAME: launch_failed
#PARENT: Gio.AppLaunchContext
#COMMENT: Called when an application has failed to launch, so that it can cancel
the application startup notification started in g_app_launch_context_get_startup_notify_id().
#NAME: get_unix_pid
#PARENT: Gio.Credentials.get_unix_pid
#COMMENT: The UNIX process ID, or -1 if @error is set.
#NAME: launch
#PARENT: Gio.AppInfo.launch
#COMMENT: %TRUE on successful launch, %FALSE otherwise.
#NAME: get_attribute_byte_string
#PARENT: Gio.FileInfo
#COMMENT: Gets the value of a byte string attribute. If the attribute does
not contain a byte string, %NULL will be returned.
#NAME: sender_name
#PARENT: Gio.DBusObjectManagerClient.interface-proxy-signal.none
#COMMENT: The sender of the signal or NULL if the connection is not a bus connection.
#NAME: get_fd
#PARENT: Gio.FileDescriptorBased
#COMMENT: Gets the underlying file descriptor.
#NAME: set_as_default_for_type
#PARENT: Gio.AppInfoIface.set_as_default_for_type.set_as_default_for_type
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: lookup_certificate_issuer_finish
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer_finish.lookup_certificate_issuer_finish
#COMMENT: a newly allocated issuer #GTlsCertificate,
or %NULL. Use g_object_unref() to release the certificate.
#NAME: get_info
#PARENT: Gio.DBusInterface.get_info
#COMMENT: A #GDBusInterfaceInfo. Do not free.
#NAME: mount
#PARENT: Gio.Mount.unshadow.none
#COMMENT: A #GMount.
#NAME: take_stdin_fd
#PARENT: Gio.SubprocessLauncher
#COMMENT: Sets the file descriptor to use as the stdin for spawned processes.

If @fd is -1 then any previously given fd is unset.

Note that if your intention is to have the stdin of the calling
process inherited by the child then %G_SUBPROCESS_FLAGS_STDIN_INHERIT
is a better way to go about doing that.

The passed @fd is noted but will not be touched in the current
process.  It is therefore necessary that it be kept open by the
caller until the subprocess is spawned.  The file descriptor will
also not be explicitly closed on the child side, so it must be marked
O_CLOEXEC if that's what you want.

You may not set a stdin fd if a stdin file path is already set or if
the launcher flags contain any flags directing stdin elsewhere.

This feature is only available on UNIX.
#NAME: cancellable
#PARENT: Gio.async_initable_newv_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: dbus_error_strip_remote_error
#PARENT: Gio
#COMMENT: Looks for extra information in the error message used to recover
the D-Bus error name and strips it if found. If stripped, the
message field in @error will correspond exactly to what was
received on the wire.

This is typically used when presenting errors to the end user.
#NAME: new
#PARENT: Gio.BytesIcon.new
#COMMENT: a #GIcon for the given
  @bytes, or %NULL on error.
#NAME: callback
#PARENT: Gio.Mount.remount.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: stream
#PARENT: Gio.PollableInputStreamInterface.read_nonblocking.read_nonblocking.gssize
#COMMENT: a #GPollableInputStream
#NAME: bad_certificate
#PARENT: Gio.TlsError
#COMMENT: A certificate could not be parsed
#NAME: peek_buffer
#PARENT: Gio.BufferedInputStream.peek_buffer
#COMMENT: 
         read-only buffer
#NAME: member
#PARENT: Gio.DBusConnection.signal_subscribe.guint
#COMMENT: D-Bus signal name to match on or %NULL to match on
    all signals
#NAME: file
#PARENT: Gio.File.set_attribute_int64.gboolean
#COMMENT: input #GFile
#NAME: result
#PARENT: Gio.PermissionClass.acquire_finish.acquire_finish.gboolean
#COMMENT: the #GAsyncResult given to the #GAsyncReadyCallback
#NAME: seekable
#PARENT: Gio.SeekableIface.truncate_fn.truncate_fn.gboolean
#COMMENT: a #GSeekable.
#NAME: conn
#PARENT: Gio.TlsClientConnection.set_server_identity.none
#COMMENT: the #GTlsClientConnection
#NAME: dup
#PARENT: Gio.FileInfo.dup
#COMMENT: a duplicate #GFileInfo of @other.
#NAME: callback
#PARENT: Gio.SocketClient.connect_to_uri_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: message
#PARENT: Gio.DBusMessage.set_body.none
#COMMENT: A #GDBusMessage.
#NAME: netbsd_unpcbid
#PARENT: Gio.CredentialsType
#COMMENT: The native credentials type is a <type>struct unpcbid</type>.
#NAME: stream
#PARENT: Gio.SocketType
#COMMENT: Reliable connection-based byte streams (e.g. TCP).
#NAME: progress_callback_data
#PARENT: Gio.FileIface.copy_async.copy_async.none
#COMMENT: user data to pass to @progress_callback
#NAME: FileCopyFlags
#PARENT: Gio
#COMMENT: Flags used when copying or moving files.
#NAME: signal_name
#PARENT: Gio.DBusConnection.emit_signal.gboolean
#COMMENT: the name of the signal to emit
#NAME: get_name
#PARENT: Gio.AppInfo.get_name
#COMMENT: the name of the application for @appinfo.
#NAME: type
#PARENT: Gio.File.set_attribute.gboolean
#COMMENT: The type of the attribute
#NAME: DBusObjectManagerClient
#PARENT: Gio
#COMMENT: #GDBusObjectManagerClient is used to create, monitor and delete object
proxies for remote objects exported by a #GDBusObjectManagerServer (or any
code implementing the
[org.freedesktop.DBus.ObjectManager](http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager)
interface).

Once an instance of this type has been created, you can connect to
the #GDBusObjectManager::object-added and
#GDBusObjectManager::object-removed signals and inspect the
#GDBusObjectProxy objects returned by
g_dbus_object_manager_get_objects().

If the name for a #GDBusObjectManagerClient is not owned by anyone at
object construction time, the default behavior is to request the
message bus to launch an owner for the name. This behavior can be
disabled using the %G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START
flag. It's also worth noting that this only works if the name of
interest is activatable in the first place. E.g. in some cases it
is not possible to launch an owner for the requested name. In this
case, #GDBusObjectManagerClient object construction still succeeds but
there will be no object proxies
(e.g. g_dbus_object_manager_get_objects() returns the empty list) and
the #GDBusObjectManagerClient:name-owner property is %NULL.

The owner of the requested name can come and go (for example
consider a system service being restarted) – #GDBusObjectManagerClient
handles this case too; simply connect to the #GObject::notify
signal to watch for changes on the #GDBusObjectManagerClient:name-owner
property. When the name owner vanishes, the behavior is that
#GDBusObjectManagerClient:name-owner is set to %NULL (this includes
emission of the #GObject::notify signal) and then
#GDBusObjectManager::object-removed signals are synthesized
for all currently existing object proxies. Since
#GDBusObjectManagerClient:name-owner is %NULL when this happens, you can
use this information to disambiguate a synthesized signal from a
genuine signal caused by object removal on the remote
#GDBusObjectManager. Similarly, when a new name owner appears,
#GDBusObjectManager::object-added signals are synthesized
while #GDBusObjectManagerClient:name-owner is still %NULL. Only when all
object proxies have been added, the #GDBusObjectManagerClient:name-owner
is set to the new name owner (this includes emission of the
#GObject::notify signal).  Furthermore, you are guaranteed that
#GDBusObjectManagerClient:name-owner will alternate between a name owner
(e.g. `:1.42`) and %NULL even in the case where
the name of interest is atomically replaced

Ultimately, #GDBusObjectManagerClient is used to obtain #GDBusProxy
instances. All signals (including the
org.freedesktop.DBus.Properties::PropertiesChanged signal)
delivered to #GDBusProxy instances are guaranteed to originate
from the name owner. This guarantee along with the behavior
described above, means that certain race conditions including the
"half the proxy is from the old owner and the other half is from
the new owner" problem cannot happen.

To avoid having the application connect to signals on the returned
#GDBusObjectProxy and #GDBusProxy objects, the
#GDBusObject::interface-added,
#GDBusObject::interface-removed,
#GDBusProxy::g-properties-changed and
#GDBusProxy::g-signal signals
are also emitted on the #GDBusObjectManagerClient instance managing these
objects. The signals emitted are
#GDBusObjectManager::interface-added,
#GDBusObjectManager::interface-removed,
#GDBusObjectManagerClient::interface-proxy-properties-changed and
#GDBusObjectManagerClient::interface-proxy-signal.

Note that all callbacks and signals are emitted in the
[thread-default main context][g-main-context-push-thread-default]
that the #GDBusObjectManagerClient object was constructed
in. Additionally, the #GDBusObjectProxy and #GDBusProxy objects
originating from the #GDBusObjectManagerClient object will be created in
the same context and, consequently, will deliver signals in the
same main loop.
#NAME: spawn_child_exited
#PARENT: Gio.DBusError
#COMMENT: While starting a new process, the child exited with a status code.
#NAME: new
#PARENT: Gio.ThreadedSocketService
#COMMENT: Creates a new #GThreadedSocketService with no listeners. Listeners
must be added with one of the #GSocketListener "add" methods.
#NAME: anonymous_supported
#PARENT: Gio.AskPasswordFlags
#COMMENT: operation supports anonymous users.
#NAME: FILE_ATTRIBUTE_STANDARD_IS_SYMLINK
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for checking if the file is a symlink.
Typically the actual type is something else, if we followed the symlink
to get the type.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_until.utf8
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: callback
#PARENT: Gio.UnixConnection.receive_credentials_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: connect_to_service_async
#PARENT: Gio.SocketClient
#COMMENT: This is the asynchronous version of
g_socket_client_connect_to_service().
#NAME: info
#PARENT: Gio.FileInfo.set_sort_order.none
#COMMENT: a #GFileInfo.
#NAME: new
#PARENT: Gio.EmblemedIcon.new
#COMMENT: a new #GIcon
#NAME: target_value
#PARENT: Gio.action_print_detailed_name.utf8
#COMMENT: a #GVariant target value, or %NULL
#NAME: unref
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: If @info is statically allocated, does nothing. Otherwise decreases
the reference count of @info. When its reference count drops to 0,
the memory used is freed.
#NAME: check_connect_result
#PARENT: Gio.Socket
#COMMENT: Checks and resets the pending connect error for the socket.
This is used to check for errors when g_socket_connect() is
used in non-blocking mode.
#NAME: connect
#PARENT: Gio.Socket.connect
#COMMENT: %TRUE if connected, %FALSE on error.
#NAME: info
#PARENT: Gio.File.set_attributes_finish.gboolean
#COMMENT: a #GFileInfo
#NAME: vprintf
#PARENT: Gio.OutputStream
#COMMENT: This is a utility function around g_output_stream_write_all(). It
uses g_strdup_vprintf() to turn @format and @args into a string that
is then written to @stream.

See the documentation of g_output_stream_write_all() about the
behavior of the actual write operation.

Note that partial writes cannot be properly checked with this
function due to the variable length of the written string, if you
need precise control over partial write failures, you need to
create you own printf()-like wrapper around g_output_stream_write()
or g_output_stream_write_all().
#NAME: not_found
#PARENT: Gio.ResolverError
#COMMENT: the requested name/address/service was not
    found
#NAME: user_data
#PARENT: Gio.SettingsBindGetMapping.gboolean
#COMMENT: user data that was specified when the binding was created
#NAME: resources_get_info
#PARENT: Gio.resources_get_info
#COMMENT: %TRUE if the file was found. %FALSE if there were errors
#NAME: set_as_last_used_for_type
#PARENT: Gio.AppInfoIface.set_as_last_used_for_type.set_as_last_used_for_type
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: schema
#PARENT: Gio.SettingsSchema.unref.none
#COMMENT: a #GSettingsSchema
#NAME: action_parse_detailed_name
#PARENT: Gio.action_parse_detailed_name
#COMMENT: %TRUE if successful, else %FALSE with @error set
#NAME: value
#PARENT: Gio.DBusMessage.set_path.none
#COMMENT: The value to set.
#NAME: result
#PARENT: Gio.TlsConnection.handshake_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.return_error_valist.none
#COMMENT: A #GDBusMethodInvocation.
#NAME: attr_value
#PARENT: Gio.FileInfo.set_attribute_int64.none
#COMMENT: int64 value to set attribute to.
#NAME: new
#PARENT: Gio.Emblem.new
#COMMENT: a new #GEmblem.
#NAME: argc
#PARENT: Gio.ApplicationCommandLine.get_arguments.utf8
#COMMENT: the length of the arguments array, or %NULL
#NAME: lf
#PARENT: Gio.DataStreamNewlineType
#COMMENT: Selects "LF" line endings, common on most modern UNIX platforms.
#NAME: attribute
#PARENT: Gio.File.set_attribute_byte_string.gboolean
#COMMENT: a string containing the attribute's name
#NAME: cancellable
#PARENT: Gio.DBusConnection.new_sync.DBusConnection
#COMMENT: a #GCancellable or %NULL
#NAME: file
#PARENT: Gio.File.unmount_mountable.none
#COMMENT: input #GFile
#NAME: user_data_free_func
#PARENT: Gio.DBusConnection.register_subtree.guint
#COMMENT: function to call when the subtree is unregistered
#NAME: submenu
#PARENT: Gio.Menu.append_submenu.none
#COMMENT: a #GMenuModel with the items of the submenu
#NAME: object_path
#PARENT: Gio.DBusConnection.call.none
#COMMENT: path of remote object
#NAME: volume
#PARENT: Gio.VolumeIface.get_symbolic_icon.get_symbolic_icon.Icon
#COMMENT: a #GVolume
#NAME: res
#PARENT: Gio.AsyncResult.is_tagged.gboolean
#COMMENT: a #GAsyncResult
#NAME: Cancellable
#PARENT: Gio
#COMMENT: GCancellable is a thread-safe operation cancellation stack used
throughout GIO to allow for cancellation of synchronous and
asynchronous operations.
#NAME: mounts-changed
#PARENT: Gio.UnixMountMonitor
#COMMENT: Emitted when the unix mounts have changed.
#NAME: file
#PARENT: Gio.File.query_info_finish.FileInfo
#COMMENT: input #GFile
#NAME: get_base_io_stream
#PARENT: Gio.TcpWrapperConnection
#COMMENT: Get's @conn's base #GIOStream
#NAME: network_unreachable
#PARENT: Gio.IOErrorEnum
#COMMENT: Network unreachable. Since 2.26
#NAME: cancellable
#PARENT: Gio.DBusConnection.close_sync.gboolean
#COMMENT: a #GCancellable or %NULL
#NAME: file
#PARENT: Gio.File.mount_mountable_finish.File
#COMMENT: input #GFile
#NAME: handled
#PARENT: Gio.TlsInteractionResult
#COMMENT: The interaction completed, and resulting data
    is available.
#NAME: get_basename
#PARENT: Gio.File
#COMMENT: Gets the base name (the last component of the path) for a given #GFile.

If called for the top level of a system (such as the filesystem root
or a uri like sftp://host/) it will return a single directory separator
(and on Windows, possibly a drive letter).

The base name is a byte string (not UTF-8). It has no defined encoding
or rules other than it may not contain zero bytes.  If you want to use
filenames in a user interface you should use the display name that you
can get by requesting the %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
attribute with g_file_query_info().

This call does no blocking I/O.
#NAME: cancellable
#PARENT: Gio.File.create_readwrite_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: result
#PARENT: Gio.FileIface.unmount_mountable_with_operation_finish.unmount_mountable_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: get_path
#PARENT: Gio.SettingsSchema
#COMMENT: Gets the path associated with @schema, or %NULL.

Schemas may be single-instance or relocatable.  Single-instance
schemas correspond to exactly one set of keys in the backend
database: those located at the path returned by this function.

Relocatable schemas can be referenced by other schemas and can
threfore describe multiple sets of keys at different locations.  For
relocatable schemas, this function will return %NULL.
#NAME: name
#PARENT: Gio.DBusProxy.new.none
#COMMENT: A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
#NAME: interface_
#PARENT: Gio.DBusInterface.set_object.none
#COMMENT: An exported D-Bus interface.
#NAME: application
#PARENT: Gio.Application.get_dbus_connection.DBusConnection
#COMMENT: a #GApplication
#NAME: cancellable
#PARENT: Gio.SimpleAsyncResult.run_in_thread.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: notification
#PARENT: Gio.Notification.set_default_action_and_target.none
#COMMENT: a #GNotification
#NAME: check_connect_result
#PARENT: Gio.Socket.check_connect_result
#COMMENT: %TRUE if no error, %FALSE otherwise, setting @error to the error
#NAME: skip
#PARENT: Gio.InputStream
#COMMENT: Tries to skip @count bytes from the stream. Will block during the operation.

This is identical to g_input_stream_read(), from a behaviour standpoint,
but the bytes that are skipped are not returned to the user. Some
streams have an implementation that is more efficient than reading the data.

This function is optional for inherited classes, as the default implementation
emulates it using read.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.
#NAME: set_destination
#PARENT: Gio.DBusMessage
#COMMENT: Convenience setter for the %G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION header field.
#NAME: add_inet_port
#PARENT: Gio.SocketListener.add_inet_port
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: eject
#PARENT: Gio.Volume
#COMMENT: Ejects a volume. This is an asynchronous operation, and is
finished by calling g_volume_eject_finish() with the @volume
and #GAsyncResult returned in the @callback.
#NAME: icon
#PARENT: Gio.LoadableIconIface.load.load.InputStream
#COMMENT: a #GLoadableIcon.
#NAME: matcher
#PARENT: Gio.FileAttributeMatcher.ref.FileAttributeMatcher
#COMMENT: a #GFileAttributeMatcher.
#NAME: object
#PARENT: Gio.DBusObject.get_object_path.utf8
#COMMENT: A #GDBusObject.
#NAME: bytes_sent
#PARENT: Gio.OutputMessage
#COMMENT: initialize to 0. Will be set to the number of bytes
    that have been sent
#NAME: wait
#PARENT: Gio.Subprocess.wait
#COMMENT: %TRUE on success, %FALSE if @cancellable was cancelled
#NAME: path
#PARENT: Gio.UnixSocketAddressType
#COMMENT: a filesystem path
#NAME: file
#PARENT: Gio.FileIface.measure_disk_usage.measure_disk_usage.gboolean
#COMMENT: a #GFile
#NAME: supports_thread_contexts
#PARENT: Gio.File
#COMMENT: Checks if @file supports
[thread-default contexts][g-main-context-push-thread-default-context].
If this returns %FALSE, you cannot perform asynchronous operations on
@file in a thread that has a thread-default context.
#NAME: task
#PARENT: Gio.Task.get_source_object.GObject.Object
#COMMENT: a #GTask
#NAME: eject_with_operation_finish
#PARENT: Gio.Volume.eject_with_operation_finish
#COMMENT: %TRUE if the volume was successfully ejected. %FALSE otherwise
#NAME: backend
#PARENT: Gio.TlsBackend.get_client_connection_type.GType
#COMMENT: the #GTlsBackend
#NAME: TlsCertificateFlags
#PARENT: Gio
#COMMENT: A set of flags describing TLS certification validation. This can be
used to set which validation steps to perform (eg, with
g_tls_client_connection_set_validation_flags()), or to describe why
a particular certificate was rejected (eg, in
#GTlsConnection::accept-certificate).
#NAME: mount
#PARENT: Gio.VolumeMonitor.mount-pre-unmount.none
#COMMENT: a #GMount that is being unmounted.
#NAME: action_map
#PARENT: Gio.ActionMapInterface.lookup_action.lookup_action.Action
#COMMENT: a #GActionMap
#NAME: callback
#PARENT: Gio.AsyncInitable.new_async.none
#COMMENT: a #GAsyncReadyCallback to call when the initialization is
    finished
#NAME: monitor
#PARENT: Gio.File
#COMMENT: Obtains a file or directory monitor for the given file,
depending on the type of the file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: ref
#PARENT: Gio.Resource.ref
#COMMENT: The passed in #GResource
#NAME: cancellable
#PARENT: Gio.pollable_stream_write.gssize
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: object_path
#PARENT: Gio.DBusSignalCallback.none
#COMMENT: The object path that the signal was emitted on.
#NAME: user_data
#PARENT: Gio.File.stop_mountable.none
#COMMENT: the data to pass to callback function
#NAME: application
#PARENT: Gio.Application.get_flags.ApplicationFlags
#COMMENT: a #GApplication
#NAME: position
#PARENT: Gio.ListStore.insert.none
#COMMENT: the position at which to insert the new item
#NAME: cancellable
#PARENT: Gio.File.create.FileOutputStream
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_uint32.guint32
#COMMENT: a #GFileInfo.
#NAME: copy
#PARENT: Gio.SrvTarget.copy
#COMMENT: a copy of @target
#NAME: get_id
#PARENT: Gio.AppInfo.get_id
#COMMENT: a string containing the application's ID.
#NAME: set_attribute_value
#PARENT: Gio.MenuItem
#COMMENT: Sets or unsets an attribute on @menu_item.

The attribute to set or unset is specified by @attribute. This
can be one of the standard attribute names %G_MENU_ATTRIBUTE_LABEL,
%G_MENU_ATTRIBUTE_ACTION, %G_MENU_ATTRIBUTE_TARGET, or a custom
attribute name.
Attribute names are restricted to lowercase characters, numbers
and '-'. Furthermore, the names must begin with a lowercase character,
must not end with a '-', and must not contain consecutive dashes.

must consist only of lowercase
ASCII characters, digits and '-'.

If @value is non-%NULL then it is used as the new value for the
attribute.  If @value is %NULL then the attribute is unset. If
the @value #GVariant is floating, it is consumed.

See also g_menu_item_set_attribute() for a more convenient way to do
the same.
#NAME: set_attribute_stringv
#PARENT: Gio.FileInfo
#COMMENT: Sets the @attribute to contain the given @attr_value,
if possible.

Sinze: 2.22
#NAME: serialize
#PARENT: Gio.IconIface.serialize.serialize
#COMMENT: a #GVariant, or %NULL when serialization fails.
#NAME: flags
#PARENT: Gio.File.query_info.FileInfo
#COMMENT: a set of #GFileQueryInfoFlags
#NAME: lookup_data
#PARENT: Gio.Resource.lookup_data
#COMMENT: #GBytes or %NULL on error.
    Free the returned object with g_bytes_unref()
#NAME: incoming
#PARENT: Gio.SocketService
#COMMENT: The ::incoming signal is emitted when a new incoming connection
to @service needs to be handled. The handler must initiate the
handling of @connection, but may not block; in essence,
asynchronous operations must be used.

@connection will be unreffed once the signal handler returns,
so you need to ref it yourself if you are planning to use it.
#NAME: FileDescriptorBasedIface
#PARENT: Gio
#COMMENT: An interface for file descriptor based io objects.
#NAME: generic_error
#PARENT: Gio.TlsCertificateFlags
#COMMENT: Some other error occurred validating
  the certificate
#NAME: socket
#PARENT: Gio.Socket.close.gboolean
#COMMENT: a #GSocket
#NAME: read_uint64
#PARENT: Gio.DataInputStream
#COMMENT: Reads an unsigned 64-bit/8-byte value from @stream.

In order to get the correct byte order for this read operation,
see g_data_input_stream_get_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: optname
#PARENT: Gio.Socket.set_option.gboolean
#COMMENT: the "name" of the option (eg, `SO_BROADCAST`)
#NAME: SocketControlMessage
#PARENT: Gio
#COMMENT: A #GSocketControlMessage is a special-purpose utility message that
can be sent to or received from a #GSocket. These types of
messages are often called "ancillary data".

The message can represent some sort of special instruction to or
information from the socket or can represent a special kind of
transfer to the peer (for example, sending a file descriptor over
a UNIX socket).

These messages are sent with g_socket_send_message() and received
with g_socket_receive_message().

To extend the set of control message that can be sent, subclass this
class and override the get_size, get_level, get_type and serialize
methods.

To extend the set of control messages that can be received, subclass
this class and implement the deserialize method. Also, make sure your
class is registered with the GType typesystem before calling
g_socket_receive_message() to read such a message.
#NAME: user_data
#PARENT: Gio.File.read_async.none
#COMMENT: the data to pass to callback function
#NAME: io_priority
#PARENT: Gio.FileIOStreamClass.query_info_async.query_info_async.none
#COMMENT: the [I/O priority][gio-GIOScheduler] of the request
#NAME: parameter_type
#PARENT: Gio.ActionGroupInterface.query_action.query_action.gboolean
#COMMENT: the parameter type, or %NULL if none needed
#NAME: cancellable
#PARENT: Gio.File.query_writable_namespaces.FileAttributeInfoList
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: proxy
#PARENT: Gio.ProxyAddress.get_username.utf8
#COMMENT: a #GProxyAddress
#NAME: subprocess
#PARENT: Gio.Subprocess.get_exit_status.gint
#COMMENT: a #GSubprocess
#NAME: mount1
#PARENT: Gio.UnixMountPoint.compare.gint
#COMMENT: a #GUnixMount.
#NAME: attribute
#PARENT: Gio.File.set_attribute_int32.gboolean
#COMMENT: a string containing the attribute's name
#NAME: value_p
#PARENT: Gio.FileIface.set_attribute.set_attribute.gboolean
#COMMENT: a pointer to the value (or the pointer
    itself if the type is a pointer type)
#NAME: remove_action
#PARENT: Gio.ActionMap
#COMMENT: Removes the named action from the action map.

If no action of this name is in the map then nothing happens.
#NAME: has-unapplied
#PARENT: Gio.Settings
#COMMENT: If this property is %TRUE, the #GSettings object has outstanding
changes that will be applied when g_settings_apply() is called.
#NAME: mount2
#PARENT: Gio.UnixMountPoint.compare.gint
#COMMENT: a #GUnixMount.
#NAME: anonymous
#PARENT: Gio.UnixSocketAddressType
#COMMENT: anonymous
#NAME: get_peer_certificate
#PARENT: Gio.TlsConnection.get_peer_certificate
#COMMENT: @conn's peer's certificate, or %NULL
#NAME: get_fd
#PARENT: Gio.UnixOutputStream.get_fd
#COMMENT: The file descriptor of @stream
#NAME: timeout_msec
#PARENT: Gio.DBusProxy.call_with_unix_fd_list.none
#COMMENT: The timeout in milliseconds (with %G_MAXINT meaning
               "infinite") or -1 to use the proxy default timeout.
#NAME: saving_supported
#PARENT: Gio.AskPasswordFlags
#COMMENT: operation supports saving settings.
#NAME: get_display
#PARENT: Gio.AppLaunchContextClass.get_display.get_display
#COMMENT: a display string for the display.
#NAME: key
#PARENT: Gio.DesktopAppInfo.has_key.gboolean
#COMMENT: the key to look up
#NAME: user_data
#PARENT: Gio.IOSchedulerJob.send_to_mainloop.gboolean
#COMMENT: data to pass to @func
#NAME: callback
#PARENT: Gio.Mount.unmount.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: DBusMessageFlags
#PARENT: Gio
#COMMENT: Message flags used in #GDBusMessage.
#NAME: unix_mount_get_device_path
#PARENT: Gio.unix_mount_get_device_path
#COMMENT: a string containing the device path.
#NAME: drive
#PARENT: Gio.DriveIface.eject_finish.eject_finish.gboolean
#COMMENT: a #GDrive.
#NAME: DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME
#PARENT: Gio
#COMMENT: Extension point for default handler to URI association. See
[Extending GIO][extending-gio].
#NAME: finished
#PARENT: Gio.ConverterResult
#COMMENT: The conversion is finished
#NAME: object
#PARENT: Gio.DBusObjectManager.object-removed.none
#COMMENT: The #GDBusObject that was removed.
#NAME: simple
#PARENT: Gio.SimpleActionGroup.remove.none
#COMMENT: a #GSimpleActionGroup
#NAME: icon
#PARENT: Gio.LoadableIconIface.load_finish.load_finish.InputStream
#COMMENT: a #GLoadableIcon.
#NAME: new
#PARENT: Gio.IOModuleScope
#COMMENT: Create a new scope for loading of IO modules. A scope can be used for
blocking duplicate modules, or blocking a module you don't want to load.

Specify the %G_IO_MODULE_SCOPE_BLOCK_DUPLICATES flag to block modules
which have the same base name as a module that has already been seen
in this scope.
#NAME: user_data
#PARENT: Gio.OutputStream.write_async.none
#COMMENT: the data to pass to callback function
#NAME: dbus_address_get_stream
#PARENT: Gio
#COMMENT: Asynchronously connects to an endpoint specified by @address and
sets up the connection so it is in a state to run the client-side
of the D-Bus authentication conversation.

When the operation is finished, @callback will be invoked. You can
then call g_dbus_address_get_stream_finish() to get the result of
the operation.

This is an asynchronous failable function. See
g_dbus_address_get_stream_sync() for the synchronous version.
#NAME: attr_value
#PARENT: Gio.FileInfo.set_attribute_uint32.none
#COMMENT: an unsigned 32-bit integer.
#NAME: dbus_address_get_stream_sync
#PARENT: Gio.dbus_address_get_stream_sync
#COMMENT: A #GIOStream or %NULL if @error is set.
#NAME: list
#PARENT: Gio.FileAttributeInfoList.ref.FileAttributeInfoList
#COMMENT: a #GFileAttributeInfoList to reference.
#NAME: get_is_mc_node_local
#PARENT: Gio.InetAddress
#COMMENT: Tests whether @address is a node-local multicast address.
#NAME: completer
#PARENT: Gio.FilenameCompleter.set_dirs_only.none
#COMMENT: the filename completer.
#NAME: cancellable
#PARENT: Gio.File.set_attribute_int64.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_interface
#PARENT: Gio.DBusObjectManagerIface.get_interface.get_interface
#COMMENT: A #GDBusInterface instance or %NULL. Free
  with g_object_unref().
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_upto_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: volume
#PARENT: Gio.VolumeIface.get_activation_root.get_activation_root.File
#COMMENT: a #GVolume
#NAME: mount_operation
#PARENT: Gio.File.mount_mountable.none
#COMMENT: a #GMountOperation,
    or %NULL to avoid user interaction
#NAME: proxy
#PARENT: Gio.ProxyAddress.get_destination_hostname.utf8
#COMMENT: a #GProxyAddress
#NAME: resource
#PARENT: Gio.Resource.enumerate_children.utf8
#COMMENT: A #GResource
#NAME: delete
#PARENT: Gio.AppInfo.delete
#COMMENT: %TRUE if @appinfo has been deleted
#NAME: user_data
#PARENT: Gio.File.set_attributes_async.none
#COMMENT: a #gpointer
#NAME: format
#PARENT: Gio.OutputStream.printf.gboolean
#COMMENT: the format string. See the printf() documentation
#NAME: make_backup
#PARENT: Gio.File.replace.FileOutputStream
#COMMENT: %TRUE if a backup should be created
#NAME: copy_into
#PARENT: Gio.FileInfo
#COMMENT: Copies all of the [GFileAttribute][gio-GFileAttribute]
from @src_info to @dest_info.
#NAME: create
#PARENT: Gio.File.create
#COMMENT: a #GFileOutputStream for the newly created
    file, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: add_address
#PARENT: Gio.SocketListener
#COMMENT: Creates a socket of type @type and protocol @protocol, binds
it to @address and adds it to the set of sockets we're accepting
sockets from.

Note that adding an IPv6 address, depending on the platform,
may or may not result in a listener that also accepts IPv4
connections.  For more deterministic behavior, see
g_socket_listener_add_inet_port().

@source_object will be passed out in the various calls
to accept to identify this particular source, which is
useful if you're listening on multiple addresses and do
different things depending on what address is connected to.

If successful and @effective_address is non-%NULL then it will
be set to the address that the binding actually occurred at.  This
is helpful for determining the port number that was used for when
requesting a binding to port 0 (ie: "any port").  This address, if
requested, belongs to the caller and must be freed.
#NAME: g-flags
#PARENT: Gio.DBusProxy
#COMMENT: Flags from the #GDBusProxyFlags enumeration.
#NAME: get_default
#PARENT: Gio.Application
#COMMENT: Returns the default #GApplication instance for this process.

Normally there is only one #GApplication per process and it becomes
the default when it is created.  You can exercise more control over
this by using g_application_set_default().

If there is no default application then %NULL is returned.
#NAME: value
#PARENT: Gio.icon_deserialize.Icon
#COMMENT: a #GVariant created with g_icon_serialize()
#NAME: menu
#PARENT: Gio.Menu.freeze.none
#COMMENT: a #GMenu
#NAME: get_converter
#PARENT: Gio.ConverterOutputStream
#COMMENT: Gets the #GConverter that is used by @converter_stream.
#NAME: result
#PARENT: Gio.OutputStreamClass.write_finish.write_finish.gssize
#COMMENT: a #GAsyncResult.
#NAME: parameters
#PARENT: Gio.AsyncInitable.newv_async.none
#COMMENT: the parameters to use to construct the object
#NAME: name
#PARENT: Gio.IOExtensionPoint.register.IOExtensionPoint
#COMMENT: The name of the extension point
#NAME: prefix
#PARENT: Gio.FileIface.prefix_matches.prefix_matches.gboolean
#COMMENT: input #GFile
#NAME: verify
#PARENT: Gio.TlsCertificateClass.verify.verify
#COMMENT: the appropriate #GTlsCertificateFlags
#NAME: model
#PARENT: Gio.MenuModelClass.iterate_item_attributes.iterate_item_attributes.MenuAttributeIter
#COMMENT: a #GMenuModel
#NAME: set_is_hidden
#PARENT: Gio.FileInfo
#COMMENT: Sets the "is_hidden" attribute in a #GFileInfo according to @is_hidden.
See %G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN.
#NAME: schema
#PARENT: Gio.Settings.new_full.Settings
#COMMENT: a #GSettingsSchema
#NAME: appinfo
#PARENT: Gio.AppInfoIface.get_name.get_name.utf8
#COMMENT: a #GAppInfo.
#NAME: simple
#PARENT: Gio.SimpleAction.set_enabled.none
#COMMENT: a #GSimpleAction
#NAME: label
#PARENT: Gio.MenuItem.set_label.none
#COMMENT: the label to set, or %NULL to unset
#NAME: FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the content type of the file.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
The value for this key should contain a valid content type.
#NAME: result
#PARENT: Gio.DriveIface.stop_finish.stop_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: watch_hard_links
#PARENT: Gio.FileMonitorFlags
#COMMENT: Watch for changes to the file made
  via another hard link. Since 2.36.
#NAME: is_native
#PARENT: Gio.File
#COMMENT: Checks to see if a file is native to the platform.

A native file s one expressed in the platform-native filename format,
e.g. "C:\Windows" or "/usr/bin/". This does not mean the file is local,
as it might be on a locally mounted remote filesystem.

On some systems non-native files may be available using the native
filesystem via a userspace filesystem (FUSE), in these cases this call
will return %FALSE, but g_file_get_path() will still return a native path.

This call does no blocking I/O.
#NAME: lookup_flags
#PARENT: Gio.Resource.get_info.gboolean
#COMMENT: A #GResourceLookupFlags
#NAME: none
#PARENT: Gio.DriveStartFlags
#COMMENT: No flags set.
#NAME: mount_enclosing_volume_finish
#PARENT: Gio.File.mount_enclosing_volume_finish
#COMMENT: %TRUE if successful. If an error has occurred,
    this function will return %FALSE and set @error
    appropriately if present.
#NAME: application
#PARENT: Gio.Application.add_option_group.none
#COMMENT: the #GApplication
#NAME: user_data
#PARENT: Gio.Resolver.lookup_by_address_async.none
#COMMENT: data for @callback
#NAME: guess_content_type_finish
#PARENT: Gio.Mount
#COMMENT: Finishes guessing content types of @mount. If any errors occurred
during the operation, @error will be set to contain the errors and
%FALSE will be returned. In particular, you may get an
%G_IO_ERROR_NOT_SUPPORTED if the mount does not support content
guessing.
#NAME: new
#PARENT: Gio.FilenameCompleter
#COMMENT: Creates a new filename completer.
#NAME: name_acquired_closure
#PARENT: Gio.bus_own_name_with_closures.guint
#COMMENT: #GClosure to invoke when @name is
    acquired or %NULL
#NAME: permission
#PARENT: Gio.Permission.release.gboolean
#COMMENT: a #GPermission instance
#NAME: get_name_owner
#PARENT: Gio.DBusObjectManagerClient.get_name_owner
#COMMENT: The name owner or %NULL if no name owner
exists. Free with g_free().
#NAME: stream
#PARENT: Gio.InputStream.read_async.none
#COMMENT: A #GInputStream.
#NAME: TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER
#PARENT: Gio
#COMMENT: The purpose used to verify the server certificate in a TLS connection. This
is the most common purpose in use. Used by TLS clients.
#NAME: connect
#PARENT: Gio.SocketConnection.connect
#COMMENT: %TRUE if the connection succeeded, %FALSE on error
#NAME: query_info_finish
#PARENT: Gio.FileInputStream
#COMMENT: Finishes an asynchronous info query operation.
#NAME: NetworkMonitorInterface
#PARENT: Gio
#COMMENT: The virtual function table for #GNetworkMonitor.
#NAME: poll_for_media_finish
#PARENT: Gio.Drive
#COMMENT: Finishes an operation started with g_drive_poll_for_media() on a drive.
#NAME: launch_context
#PARENT: Gio.AppInfoIface.launch.launch.gboolean
#COMMENT: a #GAppLaunchContext or %NULL
#NAME: icon
#PARENT: Gio.Emblem.new.Emblem
#COMMENT: a GIcon containing the icon.
#NAME: can_stop
#PARENT: Gio.DriveIface.can_stop.can_stop
#COMMENT: %TRUE if the @drive can be stopped, %FALSE otherwise.
#NAME: get_protocol
#PARENT: Gio.Socket.get_protocol
#COMMENT: a protocol id, or -1 if unknown
#NAME: info
#PARENT: Gio.FileInfo.get_symlink_target.utf8
#COMMENT: a #GFileInfo.
#NAME: get_name
#PARENT: Gio.DBusProxy
#COMMENT: Gets the name that @proxy was constructed for.
#NAME: add_main_option
#PARENT: Gio.Application
#COMMENT: Add an option to be handled by @application.

Calling this function is the equivalent of calling
g_application_add_main_option_entries() with a single #GOptionEntry
that has its arg_data member set to %NULL.

The parsed arguments will be packed into a #GVariantDict which
is passed to #GApplication::handle-local-options. If
%G_APPLICATION_HANDLES_COMMAND_LINE is set, then it will also
be sent to the primary instance. See
g_application_add_main_option_entries() for more details.

See #GOptionEntry for more documentation of the arguments.
#NAME: key
#PARENT: Gio.SettingsSchemaKey.get_summary.utf8
#COMMENT: a #GSettingsSchemaKey
#NAME: simple
#PARENT: Gio.SimpleAsyncResult.propagate_error.gboolean
#COMMENT: a #GSimpleAsyncResult.
#NAME: get_hostname
#PARENT: Gio.SrvTarget.get_hostname
#COMMENT: @target's hostname
#NAME: file
#PARENT: Gio.FileIface.create_readwrite_finish.create_readwrite_finish.FileIOStream
#COMMENT: input #GFile
#NAME: connection
#PARENT: Gio.Proxy.connect.IOStream
#COMMENT: a #GIOStream
#NAME: address
#PARENT: Gio.InetAddress.get_is_mc_link_local.gboolean
#COMMENT: a #GInetAddress
#NAME: get_action_state_type
#PARENT: Gio.ActionGroupInterface.get_action_state_type.get_action_state_type
#COMMENT: the state type, if the action
is stateful
#NAME: user_data
#PARENT: Gio.OutputStreamClass.close_async.close_async.none
#COMMENT: the data to pass to callback function
#NAME: flags
#PARENT: Gio.app_info_create_from_commandline.AppInfo
#COMMENT: flags that can specify details of the created #GAppInfo
#NAME: get_flags
#PARENT: Gio.DBusInterfaceSkeleton
#COMMENT: Gets the #GDBusInterfaceSkeletonFlags that describes what the behavior
of @interface_
#NAME: parse_name
#PARENT: Gio.File.parse_name.File
#COMMENT: a file name or path to be parsed
#NAME: get_return_on_cancel
#PARENT: Gio.Task
#COMMENT: Gets @task's return-on-cancel flag. See
g_task_set_return_on_cancel() for more details.
#NAME: pending
#PARENT: Gio.IOErrorEnum
#COMMENT: Operations are still pending.
#NAME: property_name
#PARENT: Gio.PropertyAction.new.PropertyAction
#COMMENT: the name of the property
#NAME: seek
#PARENT: Gio.Seekable.seek
#COMMENT: %TRUE if successful. If an error
    has occurred, this function will return %FALSE and set @error
    appropriately if present.
#NAME: send_credentials_finish
#PARENT: Gio.UnixConnection.send_credentials_finish
#COMMENT: %TRUE if the operation was successful, otherwise %FALSE.
#NAME: completer
#PARENT: Gio.FilenameCompleter.get_completion_suffix.utf8
#COMMENT: the filename completer.
#NAME: get_destination_port
#PARENT: Gio.ProxyAddress
#COMMENT: Gets @proxy's destination port; that is, the port on the
destination host that will be connected to via the proxy, not the
port number of the proxy itself.
#NAME: get_description
#PARENT: Gio.SettingsSchemaKey.get_description
#COMMENT: the description for @key, or %NULL
#NAME: run_in_thread
#PARENT: Gio.DBusServerFlags
#COMMENT: All #GDBusServer::new-connection
signals will run in separated dedicated threads (see signal for
details).
#NAME: delete_file
#PARENT: Gio.File
#COMMENT: Deletes a file. If the @file is a directory, it will only be
deleted if it is empty. This has the same semantics as g_unlink().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: cancellable
#PARENT: Gio.DataOutputStream.put_string.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: cancellable
#PARENT: Gio.File.copy.gboolean
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: start_finish
#PARENT: Gio.DriveIface.start_finish.start_finish
#COMMENT: %TRUE if the drive has been started successfully,
    %FALSE otherwise.
#NAME: get_string
#PARENT: Gio.DesktopAppInfo
#COMMENT: Looks up a string value in the keyfile backing @info.

The @key is looked up in the "Desktop Entry" group.
#NAME: is_closed
#PARENT: Gio.InputStream
#COMMENT: Checks if an input stream is closed.
#NAME: user_data
#PARENT: Gio.InputStreamClass.skip_async.skip_async.none
#COMMENT: the data to pass to callback function
#NAME: backend
#PARENT: Gio.TlsBackendInterface.get_default_database.get_default_database.TlsDatabase
#COMMENT: the #GTlsBackend
#NAME: get-proxy-type-destroy-notify
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: A #GDestroyNotify for the #gpointer user_data in #GDBusObjectManagerClient:get-proxy-type-user-data.
#NAME: address
#PARENT: Gio.OutputMessage
#COMMENT: a #GSocketAddress, or %NULL
#NAME: too_many_open_files
#PARENT: Gio.IOErrorEnum
#COMMENT: The current process has too many files
    open and can't open any more. Duplicate descriptors do count toward
    this limit. Since 2.20
#NAME: proxy
#PARENT: Gio.DBusProxy.call_finish.GLib.Variant
#COMMENT: A #GDBusProxy.
#NAME: etag
#PARENT: Gio.File.replace.FileOutputStream
#COMMENT: an optional [entity tag][gfile-etag]
    for the current #GFile, or #NULL to ignore
#NAME: value
#PARENT: Gio.Settings.set_enum.gboolean
#COMMENT: an enumerated value
#NAME: listen
#PARENT: Gio.Socket.listen
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: client
#PARENT: Gio.SocketClient.get_socket_type.SocketType
#COMMENT: a #GSocketClient.
#NAME: string
#PARENT: Gio.dbus_is_interface_name.gboolean
#COMMENT: The string to check.
#NAME: next
#PARENT: Gio.MenuAttributeIter.next
#COMMENT: %TRUE on success, or %FALSE when there are no more attributes
#NAME: get_default_for_type
#PARENT: Gio.AppInfo
#COMMENT: Gets the default #GAppInfo for a given content type.
#NAME: connecting
#PARENT: Gio.SocketClientEvent
#COMMENT: The client is connecting to a remote
  host (either a proxy or the destination server).
#NAME: ns
#PARENT: Gio.FileAttributeMatcher.enumerate_namespace.gboolean
#COMMENT: a string containing a file attribute namespace.
#NAME: closed
#PARENT: Gio.IOErrorEnum
#COMMENT: File was closed.
#NAME: write_all
#PARENT: Gio.OutputStream.write_all
#COMMENT: %TRUE on success, %FALSE if there was an error
#NAME: message_bus_connection
#PARENT: Gio.DBusConnectionFlags
#COMMENT: Pass this flag if connecting to a peer that is a
message bus. This means that the Hello() method will be invoked as part of the connection setup.
#NAME: name_has_no_owner
#PARENT: Gio.DBusError
#COMMENT: The bus name you referenced doesn't exist (i.e. no application owns
it).
#NAME: result
#PARENT: Gio.SocketClient.connect_to_service_finish.SocketConnection
#COMMENT: a #GAsyncResult.
#NAME: key
#PARENT: Gio.Settings.bind_writable.none
#COMMENT: the key to bind
#NAME: object
#PARENT: Gio.DBusObjectIface.get_interface.get_interface.DBusInterface
#COMMENT: A #GDBusObject.
#NAME: flags
#PARENT: Gio.FileIface.unmount_mountable_with_operation.unmount_mountable_with_operation.none
#COMMENT: flags affecting the operation
#NAME: conn
#PARENT: Gio.TlsConnection.get_database.TlsDatabase
#COMMENT: a #GTlsConnection
#NAME: volume
#PARENT: Gio.Volume.get_name.utf8
#COMMENT: a #GVolume
#NAME: user_data
#PARENT: Gio.File.mount_enclosing_volume.none
#COMMENT: the data to pass to callback function
#NAME: is_mutable
#PARENT: Gio.MenuModelClass.is_mutable.is_mutable
#COMMENT: %TRUE if the model is mutable (ie: "items-changed" may be
    emitted).
#NAME: signal_unsubscribe
#PARENT: Gio.DBusConnection
#COMMENT: Unsubscribes from signals.
#NAME: abstract_names_supported
#PARENT: Gio.UnixSocketAddress
#COMMENT: Checks if abstract UNIX domain socket names are supported.
#NAME: content_type_is_unknown
#PARENT: Gio
#COMMENT: Checks if the content type is the generic "unknown" type.
On UNIX this is the "application/octet-stream" mimetype,
while on win32 it is "*".
#NAME: set_anonymous
#PARENT: Gio.MountOperation
#COMMENT: Sets the mount operation to use an anonymous user if @anonymous is %TRUE.
#NAME: stream
#PARENT: Gio.OutputStream.write_bytes.gssize
#COMMENT: a #GOutputStream.
#NAME: ApplicationFlags
#PARENT: Gio
#COMMENT: Flags used to define the behaviour of a #GApplication.
#NAME: dbus_address_get_for_bus_sync
#PARENT: Gio
#COMMENT: Synchronously looks up the D-Bus address for the well-known message
bus instance specified by @bus_type. This may involve using various
platform specific mechanisms.
#NAME: user_data
#PARENT: Gio.Drive.eject_with_operation.none
#COMMENT: user data passed to @callback.
#NAME: length
#PARENT: Gio.UnixFDList.peek_fds.gint
#COMMENT: pointer to the length of the returned
    array, or %NULL
#NAME: stop_chars
#PARENT: Gio.DataInputStream.read_until.utf8
#COMMENT: characters to terminate the read.
#NAME: ProxyAddress
#PARENT: Gio
#COMMENT: Support for proxied #GInetSocketAddress.
#NAME: error
#PARENT: Gio.Task.report_error.none
#COMMENT: error to report
#NAME: object
#PARENT: Gio.DBusObjectSkeleton.remove_interface.none
#COMMENT: A #GDBusObjectSkeleton.
#NAME: value
#PARENT: Gio.SettingsBindGetMapping.gboolean
#COMMENT: return location for the property value
#NAME: attribute
#PARENT: Gio.File.set_attribute_string.gboolean
#COMMENT: a string containing the attribute's name
#NAME: destroy_function
#PARENT: Gio.MemoryOutputStream.new.OutputStream
#COMMENT: a function to be called on @data when the stream is
    finalized, or %NULL
#NAME: value
#PARENT: Gio.File.set_attribute_byte_string.gboolean
#COMMENT: a string containing the attribute's new value
#NAME: is_readable
#PARENT: Gio.PollableInputStream.is_readable
#COMMENT: %TRUE if @stream is readable, %FALSE if not. If an error
  has occurred on @stream, this will result in
  g_pollable_input_stream_is_readable() returning %TRUE, and the
  next attempt to read will return the error.
#NAME: key
#PARENT: Gio.Settings.set_uint.gboolean
#COMMENT: the name of the key to set
#NAME: AppInfoCreateFlags
#PARENT: Gio
#COMMENT: Flags used when creating a #GAppInfo.
#NAME: launch_context
#PARENT: Gio.AppInfoIface.launch_uris.launch_uris.gboolean
#COMMENT: a #GAppLaunchContext or %NULL
#NAME: flags
#PARENT: Gio.MountIface.unmount.unmount.none
#COMMENT: flags affecting the operation
#NAME: flags
#PARENT: Gio.FileIface.start_mountable.start_mountable.none
#COMMENT: flags affecting the operation
#NAME: result
#PARENT: Gio.ProxyInterface.connect_finish.connect_finish.IOStream
#COMMENT: a #GAsyncResult
#NAME: format
#PARENT: Gio.Task.report_new_error.none
#COMMENT: a string with format characters.
#NAME: new
#PARENT: Gio.ThreadedSocketService.new
#COMMENT: a new #GSocketService.
#NAME: links
#PARENT: Gio.MenuModel.get_item_links.none
#COMMENT: Links from the item
#NAME: ref
#PARENT: Gio.SettingsSchemaSource.ref
#COMMENT: a new reference to @source
#NAME: socket
#PARENT: Gio.Socket.receive_message.gssize
#COMMENT: a #GSocket
#NAME: n_fds
#PARENT: Gio.UnixFDList.new_from_array.UnixFDList
#COMMENT: the length of #fds, or -1
#NAME: file
#PARENT: Gio.File.open_readwrite.FileIOStream
#COMMENT: #GFile to open
#NAME: append_section
#PARENT: Gio.Menu
#COMMENT: Convenience function for appending a section menu item to the end of
@menu.  Combine g_menu_item_new_section() and g_menu_insert_item() for a
more flexible alternative.
#NAME: notification
#PARENT: Gio.Notification.set_urgent.none
#COMMENT: a #GNotification
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.get_info.DBusInterfaceInfo
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: cancellable
#PARENT: Gio.File.load_partial_contents_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: uri_scheme
#PARENT: Gio.SimpleProxyResolver.set_uri_proxy.none
#COMMENT: the URI scheme to add a proxy for
#NAME: limit_msecs
#PARENT: Gio.FileMonitor.set_rate_limit.none
#COMMENT: a non-negative integer with the limit in milliseconds
    to poll for changes
#NAME: copy
#PARENT: Gio.File
#COMMENT: Copies the file @source to the location specified by @destination.
Can not handle recursive copies of directories.

If the flag #G_FILE_COPY_OVERWRITE is specified an already
existing @destination file is overwritten.

If the flag #G_FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks
will be copied as symlinks, otherwise the target of the
@source symlink will be copied.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

If @progress_callback is not %NULL, then the operation can be monitored
by setting this to a #GFileProgressCallback function.
@progress_callback_data will be passed to this function. It is guaranteed
that this callback will be called after all data has been transferred with
the total number of bytes copied during the operation.

If the @source file does not exist, then the %G_IO_ERROR_NOT_FOUND error
is returned, independent on the status of the @destination.

If #G_FILE_COPY_OVERWRITE is not specified and the target exists, then
the error %G_IO_ERROR_EXISTS is returned.

If trying to overwrite a file over a directory, the %G_IO_ERROR_IS_DIRECTORY
error is returned. If trying to overwrite a directory with a directory the
%G_IO_ERROR_WOULD_MERGE error is returned.

If the source is a directory and the target does not exist, or
#G_FILE_COPY_OVERWRITE is specified and the target is a file, then the
%G_IO_ERROR_WOULD_RECURSE error is returned.

If you are interested in copying the #GFile object itself (not the on-disk
file), see g_file_dup().
#NAME: get_default
#PARENT: Gio.SettingsSchemaSource
#COMMENT: Gets the default system schema source.

This function is not required for normal uses of #GSettings but it
may be useful to authors of plugin management systems or to those who
want to introspect the content of schemas.

If no schemas are installed, %NULL will be returned.

The returned source may actually consist of multiple schema sources
from different directories, depending on which directories were given
in `XDG_DATA_DIRS` and `GSETTINGS_SCHEMA_DIR`. For this reason, all
lookups performed against the default source should probably be done
recursively.
#NAME: host_unreachable
#PARENT: Gio.IOErrorEnum
#COMMENT: Host unreachable. Since 2.26
#NAME: trash
#PARENT: Gio.FileIface.trash.trash
#COMMENT: %TRUE on successful trash, %FALSE otherwise.
#NAME: non_unique
#PARENT: Gio.ApplicationFlags
#COMMENT: Make no attempts to do any of the typical
    single-instance application negotiation, even if the application
    ID is given.  The application neither attempts to become the
    owner of the application ID nor does it check if an existing
    owner already exists.  Everything occurs in the local process.
    Since: 2.30.
#NAME: set_op_res_gpointer
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Sets the operation result within the asynchronous result to a pointer.
#NAME: remove_attribute
#PARENT: Gio.FileInfo
#COMMENT: Removes all cases of @attribute from @info if it exists.
#NAME: get_unix_fd_list
#PARENT: Gio.DBusMessage
#COMMENT: Gets the UNIX file descriptors associated with @message, if any.

This method is only available on UNIX.
#NAME: volume
#PARENT: Gio.Volume.should_automount.gboolean
#COMMENT: a #GVolume
#NAME: drive
#PARENT: Gio.DriveIface.get_name.get_name.utf8
#COMMENT: a #GDrive.
#NAME: interface
#PARENT: Gio.DBusObjectSkeleton.authorize-method.gboolean
#COMMENT: The #GDBusInterfaceSkeleton that @invocation is for.
#NAME: 
#PARENT: Gio.MenuItem.set_action_and_target.none...
#COMMENT: positional parameters, as per @format_string
#NAME: bind_writable
#PARENT: Gio.Settings
#COMMENT: Create a binding between the writability of @key in the
@settings object and the property @property of @object.
The property must be boolean; "sensitive" or "visible"
properties of widgets are the most likely candidates.

Writable bindings are always uni-directional; changes of the
writability of the setting will be propagated to the object
property, not the other way.

When the @inverted argument is %TRUE, the binding inverts the
value as it passes from the setting to the object, i.e. @property
will be set to %TRUE if the key is not writable.

Note that the lifecycle of the binding is tied to the object,
and that you can have only one binding per object property.
If you bind the same property twice on the same object, the second
binding overrides the first one.
#NAME: iconname
#PARENT: Gio.ThemedIcon.append_name.none
#COMMENT: name of icon to append to list of icons from within @icon.
#NAME: dbus_is_name
#PARENT: Gio.dbus_is_name
#COMMENT: %TRUE if valid, %FALSE otherwise.
#NAME: self
#PARENT: Gio.TestDBus.up.none
#COMMENT: a #GTestDBus
#NAME: unmount_with_operation_finish
#PARENT: Gio.Mount.unmount_with_operation_finish
#COMMENT: %TRUE if the mount was successfully unmounted. %FALSE otherwise.
#NAME: flags
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: flags from the #GDBusCallFlags enumeration
#NAME: self
#PARENT: Gio.SubprocessLauncher.set_stdin_file_path.none
#COMMENT: a #GSubprocessLauncher
#NAME: get_require_close_notify
#PARENT: Gio.TlsConnection.get_require_close_notify
#COMMENT: %TRUE if @conn requires a proper TLS close
notification.
#NAME: result
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by_finish.TlsCertificate
#COMMENT: a #GAsyncResult.
#NAME: UnixFDMessage
#PARENT: Gio
#COMMENT: This #GSocketControlMessage contains a #GUnixFDList.
It may be sent using g_socket_send_message() and received using
g_socket_receive_message() over UNIX sockets (ie: sockets in the
%G_SOCKET_ADDRESS_UNIX family). The file descriptors are copied
between processes by the kernel.

For an easier way to send and receive file descriptors over
stream-oriented UNIX sockets, see g_unix_connection_send_fd() and
g_unix_connection_receive_fd().

Note that `<gio/gunixfdmessage.h>` belongs to the UNIX-specific GIO
interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
file when using it.
#NAME: resolver
#PARENT: Gio.ProxyResolverInterface.lookup_finish.lookup_finish.utf8
#COMMENT: a #GProxyResolver
#NAME: enumerator
#PARENT: Gio.FileEnumerator.get_child.File
#COMMENT: a #GFileEnumerator
#NAME: start_mountable
#PARENT: Gio.File
#COMMENT: Starts a file of type #G_FILE_TYPE_MOUNTABLE.
Using @start_operation, you can request callbacks when, for instance,
passwords are needed during authentication.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called.
You can then call g_file_mount_mountable_finish() to get
the result of the operation.
#NAME: query_filesystem_info_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous filesystem info query.
See g_file_query_filesystem_info_async().
#NAME: simple
#PARENT: Gio.SimpleActionGroup.add_entries.none
#COMMENT: a #GSimpleActionGroup
#NAME: initable_newv
#PARENT: Gio.initable_newv
#COMMENT: a newly allocated
     #GObject, or %NULL on error
#NAME: query_info_finish
#PARENT: Gio.FileIface.query_info_finish.query_info_finish
#COMMENT: #GFileInfo for given @file
    or %NULL on error. Free the returned object with
    g_object_unref().
#NAME: cancellable
#PARENT: Gio.File.make_directory_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: io_priority
#PARENT: Gio.DataInputStream.read_until_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: close_finish
#PARENT: Gio.InputStream.close_finish
#COMMENT: %TRUE if the stream was closed successfully.
#NAME: bus_name
#PARENT: Gio.DBusConnection.call_sync.GLib.Variant
#COMMENT: a unique or well-known bus name or %NULL if
    @connection is not a message bus connection
#NAME: connection
#PARENT: Gio.DBusInterfaceMethodCallFunc.none
#COMMENT: A #GDBusConnection.
#NAME: item_index
#PARENT: Gio.MenuItem.new_from_model.MenuItem
#COMMENT: the index of an item in @model
#NAME: user_data
#PARENT: Gio.OutputStream.write_bytes_async.none
#COMMENT: the data to pass to callback function
#NAME: connection
#PARENT: Gio.SocketConnection.connect.gboolean
#COMMENT: a #GSocketConnection
#NAME: stream
#PARENT: Gio.FileOutputStream.query_info_async.none
#COMMENT: a #GFileOutputStream.
#NAME: get_unique_name
#PARENT: Gio.DBusConnection.get_unique_name
#COMMENT: the unique name or %NULL if @connection is not a message
    bus connection. Do not free this string, it is owned by
    @connection.
#NAME: to_string
#PARENT: Gio.Icon.to_string
#COMMENT: An allocated NUL-terminated UTF8 string or
%NULL if @icon can't be serialized. Use g_free() to free.
#NAME: info
#PARENT: Gio.DBusMethodInfo.unref.none
#COMMENT: A #GDBusMethodInfo.
#NAME: message
#PARENT: Gio.DBusMessage.get_message_type.DBusMessageType
#COMMENT: A #GDBusMessage.
#NAME: user_data
#PARENT: Gio.File.query_info_async.none
#COMMENT: the data to pass to callback function
#NAME: flags
#PARENT: Gio.FileIface.eject_mountable.eject_mountable.none
#COMMENT: flags affecting the operation
#NAME: out_gvalue
#PARENT: Gio.dbus_gvariant_to_gvalue.none
#COMMENT: Return location pointing to a zero-filled (uninitialized) #GValue.
#NAME: read_line_async
#PARENT: Gio.DataInputStream
#COMMENT: The asynchronous version of g_data_input_stream_read_line().  It is
an error to have two outstanding calls to this function.

When the operation is finished, @callback will be called. You
can then call g_data_input_stream_read_line_finish() to get
the result of the operation.
#NAME: callback
#PARENT: Gio.File.load_partial_contents_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: is_media_check_automatic
#PARENT: Gio.DriveIface.is_media_check_automatic.is_media_check_automatic
#COMMENT: %TRUE if the @drive is capabable of automatically detecting
    media changes, %FALSE otherwise.
#NAME: object_type
#PARENT: Gio.async_initable_newv_async.none
#COMMENT: a #GType supporting #GAsyncInitable.
#NAME: attribute
#PARENT: Gio.FileInfo.set_attribute_object.none
#COMMENT: a file attribute key.
#NAME: res
#PARENT: Gio.DBusObjectManagerClient.new_finish.DBusObjectManagerClient
#COMMENT: A #GAsyncResult obtained from the #GAsyncReadyCallback passed to g_dbus_object_manager_client_new().
#NAME: lookup_method
#PARENT: Gio.DBusInterfaceInfo.lookup_method
#COMMENT: A #GDBusMethodInfo or %NULL if not found. Do not free, it is owned by @info.
#NAME: io_priority
#PARENT: Gio.OutputStream.close_async.none
#COMMENT: the io priority of the request.
#NAME: enumerator
#PARENT: Gio.SocketAddressEnumerator.next_finish.SocketAddress
#COMMENT: a #GSocketAddressEnumerator
#NAME: destroy
#PARENT: Gio.MemoryInputStream.add_data.none
#COMMENT: function that is called to free @data, or %NULL
#NAME: action
#PARENT: Gio.Action.get_enabled.gboolean
#COMMENT: a #GAction
#NAME: new_from_keyfile
#PARENT: Gio.DesktopAppInfo.new_from_keyfile
#COMMENT: a new #GDesktopAppInfo or %NULL on error.
#NAME: is_loopback
#PARENT: Gio.UnixMountPoint
#COMMENT: Checks if a unix mount point is a loopback device.
#NAME: stream
#PARENT: Gio.DataInputStream.read_line_finish.guint8
#COMMENT: a given #GDataInputStream.
#NAME: destination
#PARENT: Gio.File.move.gboolean
#COMMENT: #GFile pointing to the destination location
#NAME: get_local_address
#PARENT: Gio.SocketConnection.get_local_address
#COMMENT: a #GSocketAddress or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: context
#PARENT: Gio.AppLaunchContext.get_display.utf8
#COMMENT: a #GAppLaunchContext
#NAME: message
#PARENT: Gio.MountOperation.ask-password.none
#COMMENT: string containing a message to display to the user.
#NAME: new
#PARENT: Gio.SrvTarget
#COMMENT: Creates a new #GSrvTarget with the given parameters.

You should not need to use this; normally #GSrvTargets are
created by #GResolver.
#NAME: value
#PARENT: Gio.DBusMessage.set_signature.none
#COMMENT: The value to set.
#NAME: getenv
#PARENT: Gio.ApplicationCommandLine.getenv
#COMMENT: the value of the variable, or %NULL if unset or unsent
#NAME: get_sender
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Gets the bus name that invoked the method.
#NAME: sender
#PARENT: Gio.DBusSubtreeIntrospectFunc.DBusInterfaceInfo
#COMMENT: The unique bus name of the remote caller.
#NAME: TlsDatabaseLookupFlags
#PARENT: Gio
#COMMENT: Flags for g_tls_database_lookup_certificate_handle(),
g_tls_database_lookup_certificate_issuer(),
and g_tls_database_lookup_certificates_issued_by().
#NAME: get_drive
#PARENT: Gio.VolumeIface.get_drive.get_drive
#COMMENT: a #GDrive or %NULL if @volume is not
    associated with a drive. The returned object should be unreffed
    with g_object_unref() when no longer needed.
#NAME: SettingsGetMapping
#PARENT: Gio.SettingsGetMapping
#COMMENT: %TRUE if the conversion succeeded, %FALSE in case of an error
#NAME: close_finish
#PARENT: Gio.IOStream.close_finish
#COMMENT: %TRUE if stream was successfully closed, %FALSE otherwise.
#NAME: resolver
#PARENT: Gio.Resolver.lookup_records.GLib.Variant
#COMMENT: a #GResolver
#NAME: authorize-method
#PARENT: Gio.DBusObjectSkeleton.authorize-method
#COMMENT: %TRUE if the call is authorized, %FALSE otherwise.
#NAME: new
#PARENT: Gio.BufferedOutputStream
#COMMENT: Creates a new buffered output stream for a base stream.
#NAME: add_button
#PARENT: Gio.Notification
#COMMENT: Adds a button to @notification that activates the action in
@detailed_action when clicked. That action must be an
application-wide action (starting with "app."). If @detailed_action
contains a target, the action will be activated with that target as
its parameter.

See g_action_parse_detailed_name() for a description of the format
for @detailed_action.
#NAME: label
#PARENT: Gio.Menu.append_section.none
#COMMENT: the section label, or %NULL
#NAME: attribute
#PARENT: Gio.MenuItem.get_attribute.gboolean
#COMMENT: the attribute name to query
#NAME: too_many_links
#PARENT: Gio.IOErrorEnum
#COMMENT: File contains too many symbolic links.
#NAME: no_match_rule
#PARENT: Gio.DBusSignalFlags
#COMMENT: Don't actually send the AddMatch
D-Bus call for this signal subscription.  This gives you more control
over which match rules you add (but you must add them manually).
#NAME: close_async
#PARENT: Gio.InputStream
#COMMENT: Requests an asynchronous closes of the stream, releasing resources related to it.
When the operation is finished @callback will be called.
You can then call g_input_stream_close_finish() to get the result of the
operation.

For behaviour details see g_input_stream_close().

The asyncronous methods have a default fallback that uses threads to implement
asynchronicity, so they are optional for inheriting classes. However, if you
override one you must override all.
#NAME: parameters
#PARENT: Gio.DBusConnection.call_sync.GLib.Variant
#COMMENT: a #GVariant tuple with parameters for the method
    or %NULL if not passing parameters
#NAME: get_port
#PARENT: Gio.SrvTarget.get_port
#COMMENT: @target's port
#NAME: communicate_utf8_finish
#PARENT: Gio.Subprocess
#COMMENT: Complete an invocation of g_subprocess_communicate_utf8_async().
#NAME: resource
#PARENT: Gio.resources_register.none
#COMMENT: A #GResource
#NAME: file
#PARENT: Gio.FileIface.unmount_mountable_with_operation.unmount_mountable_with_operation.none
#COMMENT: input #GFile
#NAME: stream
#PARENT: Gio.BufferedOutputStream.get_buffer_size.gsize
#COMMENT: a #GBufferedOutputStream.
#NAME: equal
#PARENT: Gio.AppInfo.equal
#COMMENT: %TRUE if @appinfo1 is equal to @appinfo2. %FALSE otherwise.
#NAME: enumerate_identifiers
#PARENT: Gio.Drive
#COMMENT: Gets the kinds of identifiers that @drive has.
Use g_drive_get_identifier() to obtain the identifiers
themselves.
#NAME: mount_operation
#PARENT: Gio.Drive.stop.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: first_property_name
#PARENT: Gio.Initable.new_valist.GObject.Object
#COMMENT: the name of the first property, followed by
the value, and other property value pairs, and ended by %NULL.
#NAME: set_is_symlink
#PARENT: Gio.FileInfo
#COMMENT: Sets the "is_symlink" attribute in a #GFileInfo according to @is_symlink.
See %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK.
#NAME: return_boolean
#PARENT: Gio.Task
#COMMENT: Sets @task's result to @result and completes the task (see
g_task_return_pointer() for more discussion of exactly what this
means).
#NAME: FileEnumerator
#PARENT: Gio
#COMMENT: #GFileEnumerator allows you to operate on a set of #GFiles,
returning a #GFileInfo structure for each file enumerated (e.g.
g_file_enumerate_children() will return a #GFileEnumerator for each
of the children within a directory).

To get the next file's information from a #GFileEnumerator, use
g_file_enumerator_next_file() or its asynchronous version,
g_file_enumerator_next_files_async(). Note that the asynchronous
version will return a list of #GFileInfos, whereas the
synchronous will only return the next file in the enumerator.

The ordering of returned files is unspecified for non-Unix
platforms; for more information, see g_dir_read_name().  On Unix,
when operating on local files, returned files will be sorted by
inode number.  Effectively you can assume that the ordering of
returned files will be stable between successive calls (and
applications) assuming the directory is unchanged.

If your application needs a specific ordering, such as by name or
modification time, you will have to implement that in your
application code.

To close a #GFileEnumerator, use g_file_enumerator_close(), or
its asynchronous version, g_file_enumerator_close_async(). Once
a #GFileEnumerator is closed, no further actions may be performed
on it, and it should be freed with g_object_unref().
#NAME: TlsAuthenticationMode
#PARENT: Gio
#COMMENT: The client authentication mode for a #GTlsServerConnection.
#NAME: user_data
#PARENT: Gio.DBusSignalCallback.none
#COMMENT: User data passed when subscribing to the signal.
#NAME: unref
#PARENT: Gio.FileAttributeMatcher
#COMMENT: Unreferences @matcher. If the reference count falls below 1,
the @matcher is automatically freed.
#NAME: get_default_location
#PARENT: Gio.Mount.get_default_location
#COMMENT: a #GFile.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: bus_own_name_on_connection_with_closures
#PARENT: Gio.bus_own_name_on_connection_with_closures
#COMMENT: an identifier (never 0) that an be used with
    g_bus_unown_name() to stop owning the name.
#NAME: get
#PARENT: Gio.DBusActionGroup.get
#COMMENT: a #GDBusActionGroup
#NAME: report_any_error
#PARENT: Gio.FileMeasureFlags
#COMMENT: Report any error encountered
  while traversing the directory tree.  Normally errors are only
  reported for the toplevel file.
#NAME: name
#PARENT: Gio.DBusObjectManagerClient.new_for_bus.none
#COMMENT: The owner of the control object (unique or well-known name).
#NAME: lookup_certificates_issued_by
#PARENT: Gio.TlsDatabase
#COMMENT: Lookup certificates issued by this issuer in the database.

This function can block, use g_tls_database_lookup_certificates_issued_by_async() to perform
the lookup operation asynchronously.
#NAME: get_source_tag
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Gets the source tag for the #GSimpleAsyncResult.
#NAME: callback
#PARENT: Gio.FileIface.eject_mountable_with_operation.eject_mountable_with_operation.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: callback
#PARENT: Gio.FileIface.eject_mountable.eject_mountable.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: can_start
#PARENT: Gio.Drive
#COMMENT: Checks if a drive can be started.
#NAME: get_root
#PARENT: Gio.MountIface.get_root.get_root
#COMMENT: a #GFile.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: callback
#PARENT: Gio.FileIface.query_info_async.query_info_async.none
#COMMENT: a #GAsyncReadyCallback to call when the
    request is satisfied
#NAME: get_state
#PARENT: Gio.Action
#COMMENT: Queries the current state of @action.

If the action is not stateful then %NULL will be returned.  If the
action is stateful then the type of the return value is the type
given by g_action_get_state_type().

The return value (if non-%NULL) should be freed with
g_variant_unref() when it is no longer required.
#NAME: socket
#PARENT: Gio.Socket.condition_timed_wait.gboolean
#COMMENT: a #GSocket
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_line_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: stream
#PARENT: Gio.FileIOStreamClass.query_info.query_info.FileInfo
#COMMENT: a #GFileIOStream.
#NAME: FILE_ATTRIBUTE_ACCESS_CAN_DELETE
#PARENT: Gio
#COMMENT: A key in the "access" namespace for checking deletion privileges.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
This attribute will be %TRUE if the user is able to delete the file.
#NAME: complete
#PARENT: Gio.SocketClientEvent
#COMMENT: The client is done with a particular
  #GSocketConnectable.
#NAME: resource_load
#PARENT: Gio
#COMMENT: Loads a binary resource bundle and creates a #GResource representation of it, allowing
you to query it for data.

If you want to use this resource in the global resource namespace you need
to register it with g_resources_register().
#NAME: new_for_bus_finish
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Finishes an operation started with g_dbus_object_manager_client_new_for_bus().
#NAME: callback
#PARENT: Gio.simple_async_report_gerror_in_idle.none
#COMMENT: a #GAsyncReadyCallback.
#NAME: proxy
#PARENT: Gio.DBusProxy.get_connection.DBusConnection
#COMMENT: A #GDBusProxy.
#NAME: mount
#PARENT: Gio.Mount.guess_content_type_finish.utf8
#COMMENT: a #GMount
#NAME: appinfo1
#PARENT: Gio.AppInfo.equal.gboolean
#COMMENT: the first #GAppInfo.
#NAME: appinfo2
#PARENT: Gio.AppInfo.equal.gboolean
#COMMENT: the second #GAppInfo.
#NAME: TlsError
#PARENT: Gio
#COMMENT: An error code used with %G_TLS_ERROR in a #GError returned from a
TLS-related routine.
#NAME: user_data
#PARENT: Gio.IOStream.close_async.none
#COMMENT: the data to pass to callback function
#NAME: state
#PARENT: Gio.ActionGroupInterface.action_state_changed.action_state_changed.none
#COMMENT: the new state of the named action
#NAME: num_vectors
#PARENT: Gio.OutputMessage
#COMMENT: the number of output vectors pointed to by @vectors.
#NAME: proxy
#PARENT: Gio.ProxyAddress.get_password.utf8
#COMMENT: a #GProxyAddress
#NAME: anchors
#PARENT: Gio.TlsFileDatabase.new.TlsFileDatabase
#COMMENT: filename of anchor certificate authorities.
#NAME: get_string
#PARENT: Gio.DesktopAppInfo.get_string
#COMMENT: a newly allocated string, or %NULL if the key
    is not found
#NAME: authentication-observer
#PARENT: Gio.DBusConnection
#COMMENT: A #GDBusAuthObserver object to assist in the authentication process or %NULL.
#NAME: client
#PARENT: Gio.SocketClient.connect_async.none
#COMMENT: a #GSocketClient
#NAME: UnixOutputStream
#PARENT: Gio
#COMMENT: #GUnixOutputStream implements #GOutputStream for writing to a UNIX
file descriptor, including asynchronous operations. (If the file
descriptor refers to a socket or pipe, this will use poll() to do
asynchronous I/O. If it refers to a regular file, it will fall back
to doing asynchronous I/O in another thread.)

Note that `<gio/gunixoutputstream.h>` belongs to the UNIX-specific GIO
interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config file
when using it.
#NAME: out_fd_list
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_finish.GLib.Variant
#COMMENT: Return location for a #GUnixFDList or %NULL.
#NAME: connectivity
#PARENT: Gio.NetworkMonitor
#COMMENT: More detailed information about the host's network connectivity.
See g_network_monitor_get_connectivity() and
#GNetworkConnectivity for more details.
#NAME: proxy
#PARENT: Gio.DBusProxy.set_cached_property.none
#COMMENT: A #GDBusProxy
#NAME: cancellable
#PARENT: Gio.OutputStream.write_bytes.gssize
#COMMENT: optional cancellable object
#NAME: eject_finish
#PARENT: Gio.Drive.eject_finish
#COMMENT: %TRUE if the drive has been ejected successfully,
    %FALSE otherwise.
#NAME: new_from_filename
#PARENT: Gio.DesktopAppInfo.new_from_filename
#COMMENT: a new #GDesktopAppInfo or %NULL on error.
#NAME: file
#PARENT: Gio.FileIface.trash_finish.trash_finish.gboolean
#COMMENT: input #GFile
#NAME: invalid_args
#PARENT: Gio.DBusError
#COMMENT: Invalid arguments passed to a method call.
#NAME: get_default
#PARENT: Gio.ProxyResolver.get_default
#COMMENT: the default #GProxyResolver.
#NAME: get_context
#PARENT: Gio.Task
#COMMENT: Gets the #GMainContext that @task will return its result in (that
is, the context that was the
[thread-default main context][g-main-context-push-thread-default]
at the point when @task was created).

This will always return a non-%NULL value, even if the task's
context is the default #GMainContext.
#NAME: splice
#PARENT: Gio.OutputStream
#COMMENT: Splices an input stream into an output stream.
#NAME: stream
#PARENT: Gio.IOStream.close_finish.gboolean
#COMMENT: a #GIOStream
#NAME: value
#PARENT: Gio.Settings.set_value.gboolean
#COMMENT: a #GVariant of the correct type
#NAME: delay_message_processing
#PARENT: Gio.DBusConnectionFlags
#COMMENT: If set, processing of D-Bus messages is
delayed until g_dbus_connection_start_message_processing() is called.
#NAME: cancellable
#PARENT: Gio.FileIface.start_mountable.start_mountable.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: item_index
#PARENT: Gio.MenuModelClass.get_item_link.get_item_link.MenuModel
#COMMENT: the index of the item
#NAME: get_accepted_cas
#PARENT: Gio.TlsClientConnection
#COMMENT: Gets the list of distinguished names of the Certificate Authorities
that the server will accept certificates from. This will be set
during the TLS handshake if the server requests a certificate.
Otherwise, it will be %NULL.

Each item in the list is a #GByteArray which contains the complete
subject DN of the certificate authority.
#NAME: icon
#PARENT: Gio.BytesIcon.get_bytes.GLib.Bytes
#COMMENT: a #GIcon.
#NAME: should_show
#PARENT: Gio.AppInfo
#COMMENT: Checks if the application info should be shown in menus that
list available applications.
#NAME: conn
#PARENT: Gio.TlsConnection.handshake_finish.gboolean
#COMMENT: a #GTlsConnection
#NAME: set_as_default_for_type
#PARENT: Gio.AppInfo.set_as_default_for_type
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: remove_all
#PARENT: Gio.Menu
#COMMENT: Removes all items in the menu.
#NAME: get_destination_hostname
#PARENT: Gio.ProxyAddress
#COMMENT: Gets @proxy's destination hostname; that is, the name of the host
that will be connected to via the proxy, not the name of the proxy
itself.
#NAME: lookup_certificates_issued_by
#PARENT: Gio.TlsDatabase.lookup_certificates_issued_by
#COMMENT: a newly allocated list of #GTlsCertificate
objects. Use g_object_unref() on each certificate, and g_list_free() on the release the list.
#NAME: resources_open_stream
#PARENT: Gio
#COMMENT: Looks for a file at the specified @path in the set of
globally registered resources and returns a #GInputStream
that lets you read the data.

@lookup_flags controls the behaviour of the lookup.
#NAME: close_base
#PARENT: Gio.FilterOutputStream.set_close_base_stream.none
#COMMENT: %TRUE to close the base stream.
#NAME: run_in_thread_sync
#PARENT: Gio.Task
#COMMENT: Runs @task_func in another thread, and waits for it to return or be
cancelled. You can use g_task_propagate_pointer(), etc, afterward
to get the result of @task_func.

See #GTaskThreadFunc for more details about how @task_func is handled.

Normally this is used with tasks created with a %NULL
`callback`, but note that even if the task does
have a callback, it will not be invoked when @task_func returns.
#GTask:completed will be set to %TRUE just before this function returns.

Although GLib currently rate-limits the tasks queued via
g_task_run_in_thread_sync(), you should not assume that it will
always do this. If you have a very large number of tasks to run,
but don't want them to all run at once, you should only queue a
limited number of them at a time.
#NAME: dbus_error_is_remote_error
#PARENT: Gio
#COMMENT: Checks if @error represents an error received via D-Bus from a remote peer. If so,
use g_dbus_error_get_remote_error() to get the name of the error.
#NAME: cancellable
#PARENT: Gio.FileIface.replace.replace.FileOutputStream
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: cancellable
#PARENT: Gio.DataOutputStream.put_uint16.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: set_symbolic_icon
#PARENT: Gio.FileInfo
#COMMENT: Sets the symbolic icon for a given #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON.
#NAME: file
#PARENT: Gio.File.eject_mountable_finish.gboolean
#COMMENT: input #GFile
#NAME: create_action
#PARENT: Gio.Settings
#COMMENT: Creates a #GAction corresponding to a given #GSettings key.

The action has the same name as the key.

The value of the key becomes the state of the action and the action
is enabled when the key is writable.  Changing the state of the
action results in the key being written to.  Changes to the value or
writability of the key cause appropriate change notifications to be
emitted for the action.

For boolean-valued keys, action activations take no parameter and
result in the toggling of the value.  For all other types,
activations take the new value for the key (which must have the
correct type).
#NAME: SocketListener
#PARENT: Gio
#COMMENT: A #GSocketListener is an object that keeps track of a set
of server sockets and helps you accept sockets from any of the
socket, either sync or async.

If you want to implement a network server, also look at #GSocketService
and #GThreadedSocketService which are subclass of #GSocketListener
that makes this even easier.
#NAME: mount
#PARENT: Gio.MountIface.unmount_with_operation_finish.unmount_with_operation_finish.gboolean
#COMMENT: a #GMount.
#NAME: file
#PARENT: Gio.File.make_directory_async.none
#COMMENT: input #GFile
#NAME: connection
#PARENT: Gio.BusNameAcquiredCallback.none
#COMMENT: The #GDBusConnection on which to acquired the name.
#NAME: tell
#PARENT: Gio.Seekable.tell
#COMMENT: the offset from the beginning of the buffer.
#NAME: get_info
#PARENT: Gio.DBusInterfaceIface.get_info.get_info
#COMMENT: A #GDBusInterfaceInfo. Do not free.
#NAME: get_destination_port
#PARENT: Gio.ProxyAddress.get_destination_port
#COMMENT: the @proxy's destination port
#NAME: flowinfo
#PARENT: Gio.InetSocketAddress
#COMMENT: The `sin6_flowinfo` field, for IPv6 addresses.
#NAME: get_default_timeout
#PARENT: Gio.DBusProxy.get_default_timeout
#COMMENT: Timeout to use for @proxy.
#NAME: cancellable
#PARENT: Gio.FileOutputStreamClass.query_info_async.query_info_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: etag
#PARENT: Gio.File.replace_readwrite.FileIOStream
#COMMENT: an optional [entity tag][gfile-etag]
    for the current #GFile, or #NULL to ignore
#NAME: attr_value
#PARENT: Gio.FileInfo.set_attribute_object.none
#COMMENT: a #GObject.
#NAME: can_start_degraded
#PARENT: Gio.Drive.can_start_degraded
#COMMENT: %TRUE if the @drive can be started degraded, %FALSE otherwise.
#NAME: key
#PARENT: Gio.SettingsSchemaKey.unref.none
#COMMENT: a #GSettingsSchemaKey
#NAME: new_for_bus_sync
#PARENT: Gio.DBusProxy
#COMMENT: Like g_dbus_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

#GDBusProxy is used in this [example][gdbus-wellknown-proxy].
#NAME: connection
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_finish.GLib.Variant
#COMMENT: a #GDBusConnection
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.is_readonly.gboolean
#COMMENT: a #GUnixMountPoint.
#NAME: read_int64
#PARENT: Gio.DataInputStream.read_int64
#COMMENT: a signed 64-bit/8-byte value read from @stream or %0 if
an error occurred.
#NAME: bind
#PARENT: Gio.Settings
#COMMENT: Create a binding between the @key in the @settings object
and the property @property of @object.

The binding uses the default GIO mapping functions to map
between the settings and property values. These functions
handle booleans, numeric types and string types in a
straightforward way. Use g_settings_bind_with_mapping() if
you need a custom mapping, or map between types that are not
supported by the default mapping functions.

Unless the @flags include %G_SETTINGS_BIND_NO_SENSITIVITY, this
function also establishes a binding between the writability of
@key and the "sensitive" property of @object (if @object has
a boolean property by that name). See g_settings_bind_writable()
for more details about writable bindings.

Note that the lifecycle of the binding is tied to the object,
and that you can have only one binding per object property.
If you bind the same property twice on the same object, the second
binding overrides the first one.
#NAME: proxy_address
#PARENT: Gio.ProxyInterface.connect_async.connect_async.none
#COMMENT: a #GProxyAddress
#NAME: flags
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Flags from the #GDBusObjectManagerClientFlags enumeration.
#NAME: can_start_degraded
#PARENT: Gio.Drive
#COMMENT: Checks if a drive can be started degraded.
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.get_connection.DBusConnection
#COMMENT: A #GDBusMethodInvocation.
#NAME: label
#PARENT: Gio.Notification.add_button.none
#COMMENT: label of the button
#NAME: do_delete
#PARENT: Gio.AppInfo
#COMMENT: Tries to delete a #GAppInfo.

On some platforms, there may be a difference between user-defined
#GAppInfos which can be deleted, and system-wide ones which cannot.
See g_app_info_can_delete().
#NAME: conn
#PARENT: Gio.TlsClientConnectionInterface.copy_session_state.copy_session_state.none
#COMMENT: a #GTlsClientConnection
#NAME: get
#PARENT: Gio.AppInfoMonitor.get
#COMMENT: a reference to a #GAppInfoMonitor
#NAME: method_name
#PARENT: Gio.DBusProxy.call_sync.GLib.Variant
#COMMENT: Name of method to invoke.
#NAME: io_priority
#PARENT: Gio.FileIface.set_attributes_async.set_attributes_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: key
#PARENT: Gio.Settings.get_enum.gint
#COMMENT: the key to get the value for
#NAME: get_credentials
#PARENT: Gio.Socket.get_credentials
#COMMENT: %NULL if @error is set, otherwise a #GCredentials object
that must be freed with g_object_unref().
#NAME: file
#PARENT: Gio.File.find_enclosing_mount_async.none
#COMMENT: a #GFile
#NAME: stream
#PARENT: Gio.InputStream.close_async.none
#COMMENT: A #GInputStream.
#NAME: user_data
#PARENT: Gio.IOStream.splice_async.none
#COMMENT: user data passed to @callback.
#NAME: read_bytes
#PARENT: Gio.InputStream
#COMMENT: Like g_input_stream_read(), this tries to read @count bytes from
the stream in a blocking fashion. However, rather than reading into
a user-supplied buffer, this will create a new #GBytes containing
the data that was read. This may be easier to use from language
bindings.

If count is zero, returns a zero-length #GBytes and does nothing. A
value of @count larger than %G_MAXSSIZE will cause a
%G_IO_ERROR_INVALID_ARGUMENT error.

On success, a new #GBytes is returned. It is not an error if the
size of this object is not the same as the requested size, as it
can happen e.g. near the end of a file. A zero-length #GBytes is
returned on end of file (or if @count is zero), but never
otherwise.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error %NULL is returned and @error is set accordingly.
#NAME: result
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer_finish.lookup_certificate_issuer_finish.TlsCertificate
#COMMENT: a #GAsyncResult.
#NAME: out_fd_list
#PARENT: Gio.DBusConnection.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: return location for a #GUnixFDList or %NULL
#NAME: menu
#PARENT: Gio.Menu.prepend_submenu.none
#COMMENT: a #GMenu
#NAME: set_double
#PARENT: Gio.Settings
#COMMENT: Sets @key in @settings to @value.

A convenience variant of g_settings_set() for doubles.

It is a programmer error to give a @key that isn't specified as
having a 'double' type in the schema for @settings.
#NAME: bytes_written
#PARENT: Gio.pollable_stream_write_all.gboolean
#COMMENT: location to store the number of bytes that was
  written to the stream
#NAME: attribute
#PARENT: Gio.FileInfo.set_attribute_string.none
#COMMENT: a file attribute key.
#NAME: require_close_notify
#PARENT: Gio.TlsConnection.set_require_close_notify.none
#COMMENT: whether or not to require close notification
#NAME: new_for_bus_finish
#PARENT: Gio.DBusProxy
#COMMENT: Finishes creating a #GDBusProxy.
#NAME: client
#PARENT: Gio.SocketClient.get_tls_validation_flags.TlsCertificateFlags
#COMMENT: a #GSocketClient.
#NAME: ActionMap
#PARENT: Gio
#COMMENT: The GActionMap interface is implemented by #GActionGroup
implementations that operate by containing a number of
named #GAction instances, such as #GSimpleActionGroup.

One useful application of this interface is to map the
names of actions from various action groups to unique,
prefixed names (e.g. by prepending "app." or "win.").
This is the motivation for the 'Map' part of the interface
name.
#NAME: close_finish
#PARENT: Gio.FileEnumerator
#COMMENT: Finishes closing a file enumerator, started from g_file_enumerator_close_async().

If the file enumerator was already closed when g_file_enumerator_close_async()
was called, then this function will report %G_IO_ERROR_CLOSED in @error, and
return %FALSE. If the file enumerator had pending operation when the close
operation was started, then this function will report %G_IO_ERROR_PENDING, and
return %FALSE.  If @cancellable was not %NULL, then the operation may have been
cancelled by triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %FALSE will be
returned.
#NAME: stream
#PARENT: Gio.PollableOutputStreamInterface.write_nonblocking.write_nonblocking.gssize
#COMMENT: a #GPollableOutputStream
#NAME: get_no_changes
#PARENT: Gio.SettingsBindFlags
#COMMENT: When set in addition to #G_SETTINGS_BIND_GET, set the #GObject property
    value initially from the setting, but do not listen for changes of the setting
#NAME: NetworkMonitor
#PARENT: Gio
#COMMENT: #GNetworkMonitor provides an easy-to-use cross-platform API
for monitoring network connectivity. On Linux, the implementation
is based on the kernel's netlink interface.
#NAME: server
#PARENT: Gio.DBusServer.get_flags.DBusServerFlags
#COMMENT: A #GDBusServer.
#NAME: position
#PARENT: Gio.Menu.insert.none
#COMMENT: the position at which to insert the item
#NAME: lookup_action
#PARENT: Gio.ActionMapInterface.lookup_action.lookup_action
#COMMENT: a #GAction, or %NULL
#NAME: converter
#PARENT: Gio.CharsetConverter.set_use_fallback.none
#COMMENT: a #GCharsetConverter
#NAME: get_remote_address
#PARENT: Gio.SocketConnection.get_remote_address
#COMMENT: a #GSocketAddress or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: backend
#PARENT: Gio.Settings.new_with_backend.Settings
#COMMENT: the #GSettingsBackend to use
#NAME: certificate
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer_async.none
#COMMENT: a #GTlsCertificate
#NAME: bus_watch_name_on_connection_with_closures
#PARENT: Gio.bus_watch_name_on_connection_with_closures
#COMMENT: An identifier (never 0) that an be used with
g_bus_unwatch_name() to stop watching the name.
#NAME: source_object
#PARENT: Gio.SocketListener.add_socket.gboolean
#COMMENT: Optional #GObject identifying this source
#NAME: get_drive
#PARENT: Gio.Mount
#COMMENT: Gets the drive for the @mount.

This is a convenience method for getting the #GVolume and then
using that object to get the #GDrive.
#NAME: flags
#PARENT: Gio.Settings.bind_with_mapping.none
#COMMENT: flags for the binding
#NAME: callback
#PARENT: Gio.TlsDatabaseClass.verify_chain_async.verify_chain_async.none
#COMMENT: callback to call when the operation completes
#NAME: get_icon
#PARENT: Gio.Mount.get_icon
#COMMENT: a #GIcon.
     The returned object should be unreffed with
     g_object_unref() when no longer needed.
#NAME: expected_type
#PARENT: Gio.MenuModelClass.get_item_attribute_value.get_item_attribute_value.GLib.Variant
#COMMENT: the expected type of the attribute, or
    %NULL
#NAME: add_action
#PARENT: Gio.ActionMap
#COMMENT: Adds an action to the @action_map.

If the action map already contains an action with the same name
as @action then the old action is dropped from the action map.

The action map takes its own reference on @action.
#NAME: source
#PARENT: Gio.SettingsSchemaSource.list_schemas.none
#COMMENT: a #GSettingsSchemaSource
#NAME: proxy
#PARENT: Gio.Proxy.connect.IOStream
#COMMENT: a #GProxy
#NAME: callback
#PARENT: Gio.MountIface.guess_content_type.guess_content_type.none
#COMMENT: a #GAsyncReadyCallback
#NAME: new_sized
#PARENT: Gio.BufferedOutputStream
#COMMENT: Creates a new buffered output stream with a given buffer size.
#NAME: can_reach
#PARENT: Gio.NetworkMonitorInterface.can_reach.can_reach
#COMMENT: %TRUE if @connectable is reachable, %FALSE if not.
#NAME: file
#PARENT: Gio.File.create.FileOutputStream
#COMMENT: input #GFile
#NAME: object
#PARENT: Gio.simple_async_report_gerror_in_idle.none
#COMMENT: a #GObject, or %NULL
#NAME: error
#PARENT: Gio.Initable.new.GObject.Object
#COMMENT: a #GError location to store the error occurring, or %NULL to
   ignore.
#NAME: get_relative_path
#PARENT: Gio.File
#COMMENT: Gets the path for @descendant relative to @parent.

This call does no blocking I/O.
#NAME: set
#PARENT: Gio.SettingsBindFlags
#COMMENT: Update the setting when the #GObject property changes.
    It is an error to use this flag if the property is not readable.
#NAME: result
#PARENT: Gio.TlsDatabase.verify_chain_finish.TlsCertificateFlags
#COMMENT: a #GAsyncResult.
#NAME: commandline
#PARENT: Gio.AppInfo.create_from_commandline.AppInfo
#COMMENT: the commandline to use
#NAME: get_proxy_type_user_data
#PARENT: Gio.DBusObjectManagerClient.new_for_bus.none
#COMMENT: User data to pass to @get_proxy_type_func.
#NAME: not_regular_file
#PARENT: Gio.IOErrorEnum
#COMMENT: File is not a regular file.
#NAME: get_name
#PARENT: Gio.IOExtension
#COMMENT: Gets the name under which @extension was registered.

Note that the same type may be registered as extension
for multiple extension points, under different names.
#NAME: self
#PARENT: Gio.SubprocessLauncher.setenv.none
#COMMENT: a #GSubprocess
#NAME: result
#PARENT: Gio.BufferedInputStream.fill_finish.gssize
#COMMENT: a #GAsyncResult
#NAME: get_icon
#PARENT: Gio.Emblem.get_icon
#COMMENT: a #GIcon. The returned object belongs to
         the emblem and should not be modified or freed.
#NAME: sender
#PARENT: Gio.DBusSubtreeDispatchFunc.DBusInterfaceVTable
#COMMENT: The unique bus name of the remote caller.
#NAME: bus_type
#PARENT: Gio.dbus_address_get_for_bus_sync.utf8
#COMMENT: a #GBusType
#NAME: drive
#PARENT: Gio.Drive.eject_finish.gboolean
#COMMENT: a #GDrive.
#NAME: signal
#PARENT: Gio.DBusMessageType
#COMMENT: Signal emission.
#NAME: stdin_pipe
#PARENT: Gio.SubprocessFlags
#COMMENT: create a pipe for the stdin of the
  spawned process that can be accessed with
  g_subprocess_get_stdin_pipe().
#NAME: task
#PARENT: Gio.Task.set_source_tag.none
#COMMENT: the #GTask
#NAME: get_exit_status
#PARENT: Gio.ApplicationCommandLine.get_exit_status
#COMMENT: the exit status
#NAME: BufferedOutputStream
#PARENT: Gio
#COMMENT: Buffered output stream implements #GFilterOutputStream and provides
for buffered writes.

By default, #GBufferedOutputStream's buffer size is set at 4 kilobytes.

To create a buffered output stream, use g_buffered_output_stream_new(),
or g_buffered_output_stream_new_sized() to specify the buffer's size
at construction.

To get the size of a buffer within a buffered input stream, use
g_buffered_output_stream_get_buffer_size(). To change the size of a
buffered output stream's buffer, use
g_buffered_output_stream_set_buffer_size(). Note that the buffer's
size cannot be reduced below the size of the data within the buffer.
#NAME: user_data
#PARENT: Gio.async_initable_newv_async.none
#COMMENT: the data to pass to callback function
#NAME: appinfo
#PARENT: Gio.AppInfo.supports_files.gboolean
#COMMENT: a #GAppInfo.
#NAME: result
#PARENT: Gio.File.delete_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: new_full
#PARENT: Gio.Settings.new_full
#COMMENT: a new #GSettings object
#NAME: dontroute
#PARENT: Gio.SocketMsgFlags
#COMMENT: Don't use a gateway to send out the packet,
    only send to hosts on directly connected networks.
#NAME: settings
#PARENT: Gio.Settings.set_int.gboolean
#COMMENT: a #GSettings object
#NAME: cancellable
#PARENT: Gio.OutputStreamClass.splice_async.splice_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: use-system-certdb
#PARENT: Gio.TlsConnection
#COMMENT: Whether or not the system certificate database will be used to
verify peer certificates. See
g_tls_connection_set_use_system_certdb().
#NAME: notify
#PARENT: Gio.IOSchedulerJob.send_to_mainloop_async.none
#COMMENT: a #GDestroyNotify for @user_data, or %NULL
#NAME: FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for getting the fast content type.
The fast content type isn't as reliable as the regular one, as it
only uses the filename to guess it, but it is faster to calculate than the
regular content type.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
#NAME: can_poll_for_media
#PARENT: Gio.Drive
#COMMENT: Checks if a drive can be polled for media changes.
#NAME: location
#PARENT: Gio.FileIface.mount_enclosing_volume.mount_enclosing_volume.none
#COMMENT: input #GFile
#NAME: get_buffer_size
#PARENT: Gio.BufferedOutputStream.get_buffer_size
#COMMENT: the current size of the buffer.
#NAME: FileInputStream
#PARENT: Gio
#COMMENT: GFileInputStream provides input streams that take their
content from a file.

GFileInputStream implements #GSeekable, which allows the input
stream to jump to arbitrary positions in the file, provided the
filesystem of the file allows it. To find the position of a file
input stream, use g_seekable_tell(). To find out if a file input
stream supports seeking, use g_seekable_can_seek().
To position a file input stream, use g_seekable_seek().
#NAME: get_fd
#PARENT: Gio.Cancellable.get_fd
#COMMENT: A valid file descriptor. %-1 if the file descriptor
is not supported, or on errors.
#NAME: action_name
#PARENT: Gio.ActionGroup.action-state-changed.none
#COMMENT: the name of the action in @action_group
#NAME: unix_mount_compare
#PARENT: Gio
#COMMENT: Compares two unix mounts.
#NAME: buffer
#PARENT: Gio.OutputStream.write_all_async.none
#COMMENT: the buffer containing the data to write
#NAME: receive_credentials
#PARENT: Gio.UnixConnection.receive_credentials
#COMMENT: Received credentials on success (free with
g_object_unref()), %NULL if @error is set.
#NAME: attributes
#PARENT: Gio.File.query_filesystem_info_async.none
#COMMENT: an attribute query string
#NAME: get_fd
#PARENT: Gio.FileDescriptorBasedIface.get_fd.get_fd
#COMMENT: The file descriptor
#NAME: ref_count
#PARENT: Gio.DBusAnnotationInfo
#COMMENT: The reference count or -1 if statically allocated.
#NAME: flags
#PARENT: Gio.File.create_readwrite_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: error
#PARENT: Gio.DBusInterfaceGetPropertyFunc.GLib.Variant
#COMMENT: Return location for error.
#NAME: get_flags
#PARENT: Gio.TlsPassword.get_flags
#COMMENT: The flags about the password.
#NAME: FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL
#PARENT: Gio
#COMMENT: A key in the "standard" namespace for checking if a file is virtual.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: action_map
#PARENT: Gio.ActionMap.remove_action.none
#COMMENT: a #GActionMap
#NAME: expected_type
#PARENT: Gio.MenuModel.get_item_attribute_value.GLib.Variant
#COMMENT: the expected type of the attribute, or
    %NULL
#NAME: size
#PARENT: Gio.MemoryOutputStream
#COMMENT: Current size of the data buffer.
#NAME: handshake
#PARENT: Gio.TlsConnection
#COMMENT: Attempts a TLS handshake on @conn.

On the client side, it is never necessary to call this method;
although the connection needs to perform a handshake after
connecting (or after sending a "STARTTLS"-type command) and may
need to rehandshake later if the server requests it,
#GTlsConnection will handle this for you automatically when you try
to send or receive data on the connection. However, you can call
g_tls_connection_handshake() manually if you want to know for sure
whether the initial handshake succeeded or failed (as opposed to
just immediately trying to write to @conn's output stream, in which
case if it fails, it may not be possible to tell if it failed
before or after completing the handshake).

Likewise, on the server side, although a handshake is necessary at
the beginning of the communication, you do not need to call this
function explicitly unless you want clearer error reporting.
However, you may call g_tls_connection_handshake() later on to
renegotiate parameters (encryption methods, etc) with the client.

#GTlsConnection::accept_certificate may be emitted during the
handshake.
#NAME: self
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer_async.lookup_certificate_issuer_async.none
#COMMENT: a #GTlsDatabase
#NAME: other_credentials
#PARENT: Gio.Credentials.is_same_user.gboolean
#COMMENT: A #GCredentials.
#NAME: etag
#PARENT: Gio.FileIface.replace_readwrite.replace_readwrite.FileIOStream
#COMMENT: an optional [entity tag][gfile-etag]
    for the current #GFile, or #NULL to ignore
#NAME: proxy-resolver
#PARENT: Gio.SocketClient
#COMMENT: The proxy resolver to use
#NAME: g_iface
#PARENT: Gio.LoadableIconIface
#COMMENT: The parent interface.
#NAME: get_default_value
#PARENT: Gio.Settings
#COMMENT: Gets the "default value" of a key.

This is the value that would be read if g_settings_reset() were to be
called on the key.

Note that this may be a different value than returned by
g_settings_schema_key_get_default_value() if the system administrator
has provided a default value.

Comparing the return values of g_settings_get_default_value() and
g_settings_get_value() is not sufficient for determining if a value
has been set because the user may have explicitly set the value to
something that happens to be equal to the default.  The difference
here is that if the default changes in the future, the user's key
will still be set.

This function may be useful for adding an indication to a UI of what
the default value was before the user set it.

It is a programmer error to give a @key that isn't contained in the
schema for @settings.
#NAME: eject_with_operation_finish
#PARENT: Gio.Drive
#COMMENT: Finishes ejecting a drive. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.
#NAME: bus_own_name_on_connection
#PARENT: Gio.bus_own_name_on_connection
#COMMENT: an identifier (never 0) that an be used with
    g_bus_unown_name() to stop owning the name
#NAME: mount_entry
#PARENT: Gio.unix_mount_is_system_internal.gboolean
#COMMENT: a #GUnixMount.
#NAME: get_remote_error
#PARENT: Gio.DBusError
#COMMENT: Gets the D-Bus error name used for @error, if any.

This function is guaranteed to return a D-Bus error name for all
#GErrors returned from functions handling remote method calls
(e.g. g_dbus_connection_call_finish()) unless
g_dbus_error_strip_remote_error() has been used on @error.
#NAME: close_target
#PARENT: Gio.OutputStreamSpliceFlags
#COMMENT: Close the target stream after
    the splice.
#NAME: spawn_file_invalid
#PARENT: Gio.DBusError
#COMMENT: Service file invalid (Name, User or Exec missing).
#NAME: section
#PARENT: Gio.MenuItem.new_section.MenuItem
#COMMENT: a #GMenuModel with the items of the section
#NAME: credentials
#PARENT: Gio.DBusAuthObserver.authorize-authenticated-peer.gboolean
#COMMENT: Credentials received from the peer or %NULL.
#NAME: get_n_items
#PARENT: Gio.MenuModelClass.get_n_items.get_n_items
#COMMENT: the number of items
#NAME: dbus_error_encode_gerror
#PARENT: Gio.dbus_error_encode_gerror
#COMMENT: A D-Bus error name (never %NULL). Free with g_free().
#NAME: set_multicast_ttl
#PARENT: Gio.Socket
#COMMENT: Sets the time-to-live for outgoing multicast datagrams on @socket.
By default, this is 1, meaning that multicast packets will not leave
the local network.
#NAME: has_pending
#PARENT: Gio.InputStream
#COMMENT: Checks if an input stream has pending actions.
#NAME: property
#PARENT: Gio.Settings.unbind.none
#COMMENT: the property whose binding is removed
#NAME: io_priority
#PARENT: Gio.InputStream.skip_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: appinfo
#PARENT: Gio.AppInfo.dup.AppInfo
#COMMENT: a #GAppInfo.
#NAME: file
#PARENT: Gio.FileIface.hash.hash.guint
#COMMENT: #gconstpointer to a #GFile
#NAME: delete_file
#PARENT: Gio.File.delete_file
#COMMENT: %TRUE if the file was deleted. %FALSE otherwise.
#NAME: uri
#PARENT: Gio.ProxyResolverInterface.lookup_async.lookup_async.none
#COMMENT: a URI representing the destination to connect to
#NAME: buffer
#PARENT: Gio.pollable_stream_write.gssize
#COMMENT: the buffer
  containing the data to write.
#NAME: info
#PARENT: Gio.File.set_attributes_async.none
#COMMENT: a #GFileInfo
#NAME: parent
#PARENT: Gio.SettingsSchemaSource.new_from_directory.SettingsSchemaSource
#COMMENT: a #GSettingsSchemaSource, or %NULL
#NAME: get_msg_type
#PARENT: Gio.SocketControlMessage
#COMMENT: Returns the protocol specific type of the control message.
For instance, for UNIX fd passing this would be SCM_RIGHTS.
#NAME: get_identifier
#PARENT: Gio.Volume.get_identifier
#COMMENT: a newly allocated string containing the
    requested identfier, or %NULL if the #GVolume
    doesn't have this kind of identifier
#NAME: flags
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: flags from the #GDBusCallFlags enumeration
#NAME: menu
#PARENT: Gio.Menu.prepend_section.none
#COMMENT: a #GMenu
#NAME: manager
#PARENT: Gio.DBusObjectManagerClient.get_name_owner.utf8
#COMMENT: A #GDBusObjectManagerClient.
#NAME: user_data
#PARENT: Gio.File.delete_file_async.none
#COMMENT: the data to pass to callback function
#NAME: DesktopAppInfoLookup
#PARENT: Gio
#COMMENT: #GDesktopAppInfoLookup is an opaque data structure and can only be accessed
using the following functions.
#NAME: file
#PARENT: Gio.File.get_path.utf8
#COMMENT: input #GFile
#NAME: type
#PARENT: Gio.FileInfo.set_file_type.none
#COMMENT: a #GFileType.
#NAME: key_file
#PARENT: Gio.DesktopAppInfo.new_from_keyfile.DesktopAppInfo
#COMMENT: an opened #GKeyFile
#NAME: callback
#PARENT: Gio.File.make_directory_async.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied
#NAME: g-interface-name
#PARENT: Gio.DBusProxy
#COMMENT: The D-Bus interface name the proxy is for.
#NAME: bad_address
#PARENT: Gio.DBusError
#COMMENT: A D-Bus bus address was malformed.
#NAME: lookup_by_address_finish
#PARENT: Gio.Resolver
#COMMENT: Retrieves the result of a previous call to
g_resolver_lookup_by_address_async().

If the DNS resolution failed, @error (if non-%NULL) will be set to
a value from #GResolverError. If the operation was cancelled,
@error will be set to %G_IO_ERROR_CANCELLED.
#NAME: ref
#PARENT: Gio.FileAttributeInfoList.ref
#COMMENT: #GFileAttributeInfoList or %NULL on error.
#NAME: TlsPassword
#PARENT: Gio
#COMMENT: Holds a password used in TLS.
#NAME: target_value
#PARENT: Gio.Action.parse_detailed_name.gboolean
#COMMENT: the target value, or %NULL for no target
#NAME: progress_callback
#PARENT: Gio.File.measure_disk_usage_async.none
#COMMENT: a #GFileMeasureProgressCallback
#NAME: parse
#PARENT: Gio.NetworkAddress
#COMMENT: Creates a new #GSocketConnectable for connecting to the given
@hostname and @port. May fail and return %NULL in case
parsing @host_and_port fails.

@host_and_port may be in any of a number of recognised formats; an IPv6
address, an IPv4 address, or a domain name (in which case a DNS
lookup is performed). Quoting with [] is supported for all address
types. A port override may be specified in the usual way with a
colon.

If no port is specified in @host_and_port then @default_port will be
used as the port number to connect to.

In general, @host_and_port is expected to be provided by the user
(allowing them to give the hostname, and a port overide if necessary)
and @default_port is expected to be provided by the application.

(The port component of @host_and_port can also be specified as a
service name rather than as a numeric port, but this functionality
is deprecated, because it depends on the contents of /etc/services,
which is generally quite sparse on platforms other than Linux.)
#NAME: volume_monitor
#PARENT: Gio.VolumeMonitorClass.get_volume_for_uuid.get_volume_for_uuid.Volume
#COMMENT: a #GVolumeMonitor.
#NAME: format
#PARENT: Gio.Settings.set.gboolean
#COMMENT: a #GVariant format string
#NAME: next
#PARENT: Gio.SocketAddressEnumeratorClass.next.next
#COMMENT: a #GSocketAddress (owned by the caller), or %NULL on
    error (in which case *@error will be set) or if there are no
    more addresses.
#NAME: 
#PARENT: Gio.MenuModel.get_item_attribute.gboolean...
#COMMENT: positional parameters, as per @format_string
#NAME: get_item
#PARENT: Gio.ListModel
#COMMENT: Get the item at @position. If @position is greater than the number of
items in @list, %NULL is returned.

%NULL is never returned for an index that is smaller than the length
of the list.  See g_list_model_get_n_items().
#NAME: stream
#PARENT: Gio.InputStream.has_pending.gboolean
#COMMENT: input stream.
#NAME: cancellable
#PARENT: Gio.File.open_readwrite_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: mount
#PARENT: Gio.MountIface.get_icon.get_icon.Icon
#COMMENT: a #GMount.
#NAME: new
#PARENT: Gio.DataInputStream
#COMMENT: Creates a new data input stream for the @base_stream.
#NAME: file
#PARENT: Gio.FileIcon.new.FileIcon
#COMMENT: a #GFile.
#NAME: connection
#PARENT: Gio.DBusProxy.new_sync.DBusProxy
#COMMENT: A #GDBusConnection.
#NAME: MountOperationResult
#PARENT: Gio
#COMMENT: #GMountOperationResult is returned as a result when a request for
information is send by the mounting operation.
#NAME: new_loopback
#PARENT: Gio.NetworkAddress.new_loopback
#COMMENT: the new #GNetworkAddress
#NAME: wait_finish
#PARENT: Gio.Subprocess
#COMMENT: Collects the result of a previous call to
g_subprocess_wait_async().
#NAME: mount_mountable
#PARENT: Gio.File
#COMMENT: Mounts a file of type G_FILE_TYPE_MOUNTABLE.
Using @mount_operation, you can request callbacks when, for instance,
passwords are needed during authentication.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called.
You can then call g_file_mount_mountable_finish() to get
the result of the operation.
#NAME: result
#PARENT: Gio.File.poll_mountable_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: get_summary
#PARENT: Gio.SettingsSchemaKey.get_summary
#COMMENT: the summary for @key, or %NULL
#NAME: FILE_ATTRIBUTE_SELINUX_CONTEXT
#PARENT: Gio
#COMMENT: A key in the "selinux" namespace for getting the file's SELinux
context. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_STRING. Note that this attribute is only
available if GLib has been built with SELinux support.
#NAME: is-site-local
#PARENT: Gio.InetAddress
#COMMENT: Whether this is a site-local address.
See g_inet_address_get_is_loopback().
#NAME: callback
#PARENT: Gio.DBusConnection.close.none
#COMMENT: a #GAsyncReadyCallback to call when the request is
    satisfied or %NULL if you don't care about the result
#NAME: domain
#PARENT: Gio.SimpleAsyncResult.set_error.none
#COMMENT: a #GQuark (usually #G_IO_ERROR).
#NAME: get_socket
#PARENT: Gio.SocketConnection.get_socket
#COMMENT: a #GSocket or %NULL on error.
#NAME: dbus_gvalue_to_gvariant
#PARENT: Gio.dbus_gvalue_to_gvariant
#COMMENT: A #GVariant (never floating) of #GVariantType @type holding
    the data from @gvalue or %NULL in case of failure. Free with
    g_variant_unref().
#NAME: menu_item
#PARENT: Gio.MenuItem.set_section.none
#COMMENT: a #GMenuItem
#NAME: pollable_source_new
#PARENT: Gio
#COMMENT: Utility method for #GPollableInputStream and #GPollableOutputStream
implementations. Creates a new #GSource that expects a callback of
type #GPollableSourceFunc. The new source does not actually do
anything on its own; use g_source_add_child_source() to add other
sources to it to cause it to trigger.
#NAME: name
#PARENT: Gio.DBusSignalInfo
#COMMENT: The name of the D-Bus signal, e.g. "NameOwnerChanged".
#NAME: set_protocol
#PARENT: Gio.SocketClient
#COMMENT: Sets the protocol of the socket client.
The sockets created by this object will use of the specified
protocol.

If @protocol is %0 that means to use the default
protocol for the socket family and type.
#NAME: io_priority
#PARENT: Gio.File.copy_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: cancellable
#PARENT: Gio.Drive.eject_with_operation.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: cancellable
#PARENT: Gio.dbus_address_get_stream.none
#COMMENT: A #GCancellable or %NULL.
#NAME: file
#PARENT: Gio.FileIface.prefix_matches.prefix_matches.gboolean
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.IOStreamClass.close_async.close_async.none
#COMMENT: optional cancellable object
#NAME: get_interaction
#PARENT: Gio.TlsConnection
#COMMENT: Get the object that will be used to interact with the user. It will be used
for things like prompting the user for passwords. If %NULL is returned, then
no user interaction will occur for this connection.
#NAME: cancellable
#PARENT: Gio.TlsDatabaseClass.lookup_certificate_issuer_async.lookup_certificate_issuer_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: file
#PARENT: Gio.FileIface.open_readwrite.open_readwrite.FileIOStream
#COMMENT: #GFile to open
#NAME: move
#PARENT: Gio.File.move
#COMMENT: %TRUE on successful move, %FALSE otherwise.
#NAME: len
#PARENT: Gio.MemoryInputStream.add_data.none
#COMMENT: length of the data, may be -1 if @data is a nul-terminated string
#NAME: next_file
#PARENT: Gio.FileEnumeratorClass.next_file.next_file
#COMMENT: A #GFileInfo or %NULL on error
   or end of enumerator.  Free the returned object with
   g_object_unref() when no longer needed.
#NAME: uri
#PARENT: Gio.AppInfo.launch_default_for_uri.gboolean
#COMMENT: the uri to show
#NAME: close_finish
#PARENT: Gio.DBusConnection.close_finish
#COMMENT: %TRUE if the operation succeeded, %FALSE if @error is set
#NAME: lookup_service_finish
#PARENT: Gio.ResolverClass.lookup_service_finish.lookup_service_finish
#COMMENT: a non-empty #GList of
#GSrvTarget, or %NULL on error. See g_resolver_lookup_service() for more
details.
#NAME: get_exit_status
#PARENT: Gio.ApplicationCommandLine
#COMMENT: Gets the exit status of @cmdline.  See
g_application_command_line_set_exit_status() for more information.
#NAME: stream
#PARENT: Gio.DataInputStream.read_uint16.guint16
#COMMENT: a given #GDataInputStream.
#NAME: flags
#PARENT: Gio.Drive.eject.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: format_string
#PARENT: Gio.MenuItem.get_attribute.gboolean
#COMMENT: a #GVariant format string
#NAME: cancellable
#PARENT: Gio.AsyncInitable.init_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: source
#PARENT: Gio.File.copy_async.none
#COMMENT: input #GFile
#NAME: none
#PARENT: Gio.IOModuleScopeFlags
#COMMENT: No module scan flags
#NAME: method_call_message
#PARENT: Gio.DBusMessage.new_method_error_valist.DBusMessage
#COMMENT: A message of type %G_DBUS_MESSAGE_TYPE_METHOD_CALL to
create a reply message to.
#NAME: get_socket_type
#PARENT: Gio.SocketClient
#COMMENT: Gets the socket type of the socket client.

See g_socket_client_set_socket_type() for details.
#NAME: find_enclosing_mount
#PARENT: Gio.File
#COMMENT: Gets a #GMount for the #GFile.

If the #GFileIface for @file does not have a mount (e.g.
possibly a remote share), @error will be set to %G_IO_ERROR_NOT_FOUND
and %NULL will be returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: ref
#PARENT: Gio.DBusArgInfo.ref
#COMMENT: The same @info.
#NAME: value
#PARENT: Gio.SettingsSchemaKey.range_check.gboolean
#COMMENT: the value to check
#NAME: get_proxy_resolver
#PARENT: Gio.SocketClient
#COMMENT: Gets the #GProxyResolver being used by @client. Normally, this will
be the resolver returned by g_proxy_resolver_get_default(), but you
can override it with g_socket_client_set_proxy_resolver().
#NAME: has_uri_scheme
#PARENT: Gio.FileIface.has_uri_scheme.has_uri_scheme
#COMMENT: %TRUE if #GFile's backend supports the
    given URI scheme, %FALSE if URI scheme is %NULL,
    not supported, or #GFile is invalid.
#NAME: cancellable
#PARENT: Gio.Permission.acquire_async.none
#COMMENT: a #GCancellable, or %NULL
#NAME: lookup_by_address
#PARENT: Gio.ResolverClass.lookup_by_address.lookup_by_address
#COMMENT: a hostname (either ASCII-only, or in ASCII-encoded
    form), or %NULL on error.
#NAME: bind_busy_property
#PARENT: Gio.Application
#COMMENT: Marks @application as busy (see g_application_mark_busy()) while
@property on @object is %TRUE.

The binding holds a reference to @application while it is active, but
not to @object. Instead, the binding is destroyed when @object is
finalized.
#NAME: get_object_path
#PARENT: Gio.DBusInterfaceSkeleton.get_object_path
#COMMENT: A string owned by @interface_ or %NULL if @interface_ is not exported
anywhere. Do not free, the string belongs to @interface_.
#NAME: get_action_enabled
#PARENT: Gio.ActionGroup.get_action_enabled
#COMMENT: whether or not the action is currently enabled
#NAME: mount
#PARENT: Gio.MountIface.get_volume.get_volume.Volume
#COMMENT: a #GMount.
#NAME: allow_mechanism
#PARENT: Gio.DBusAuthObserver
#COMMENT: Emits the #GDBusAuthObserver::allow-mechanism signal on @observer.
#NAME: cancellable
#PARENT: Gio.FileEnumerator.next_file.FileInfo
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: failed
#PARENT: Gio.IOErrorEnum
#COMMENT: Generic error condition for when an operation fails
    and no more specific #GIOErrorEnum value is defined.
#NAME: object-removed
#PARENT: Gio.DBusObjectManager
#COMMENT: Emitted when @object is removed from @manager.
#NAME: get_cached_property
#PARENT: Gio.DBusProxy
#COMMENT: Looks up the value for a property from the cache. This call does no
blocking IO.

If @proxy has an expected interface (see
#GDBusProxy:g-interface-info) and @property_name is referenced by
it, then @value is checked against the type of the property.
#NAME: steal_fds
#PARENT: Gio.UnixFDMessage
#COMMENT: Returns the array of file descriptors that is contained in this
object.

After this call, the descriptors are no longer contained in
@message. Further calls will return an empty list (unless more
descriptors have been added).

The return result of this function must be freed with g_free().
The caller is also responsible for closing all of the file
descriptors.

If @length is non-%NULL then it is set to the number of file
descriptors in the returned array. The returned array is also
terminated with -1.

This function never returns %NULL. In case there are no file
descriptors contained in @message, an empty array is returned.
#NAME: nofollow_symlinks
#PARENT: Gio.FileCopyFlags
#COMMENT: Don't follow symlinks.
#NAME: timeout_msec
#PARENT: Gio.DBusConnection.call.none
#COMMENT: the timeout in milliseconds, -1 to use the default
    timeout or %G_MAXINT for no timeout
#NAME: Socket
#PARENT: Gio
#COMMENT: A #GSocket is a low-level networking primitive. It is a more or less
direct mapping of the BSD socket API in a portable GObject based API.
It supports both the UNIX socket implementations and winsock2 on Windows.

#GSocket is the platform independent base upon which the higher level
network primitives are based. Applications are not typically meant to
use it directly, but rather through classes like #GSocketClient,
#GSocketService and #GSocketConnection. However there may be cases where
direct use of #GSocket is useful.

#GSocket implements the #GInitable interface, so if it is manually constructed
by e.g. g_object_new() you must call g_initable_init() and check the
results before using the object. This is done automatically in
g_socket_new() and g_socket_new_from_fd(), so these functions can return
%NULL.

Sockets operate in two general modes, blocking or non-blocking. When
in blocking mode all operations block until the requested operation
is finished or there is an error. In non-blocking mode all calls that
would block return immediately with a %G_IO_ERROR_WOULD_BLOCK error.
To know when a call would successfully run you can call g_socket_condition_check(),
or g_socket_condition_wait(). You can also use g_socket_create_source() and
attach it to a #GMainContext to get callbacks when I/O is possible.
Note that all sockets are always set to non blocking mode in the system, and
blocking mode is emulated in GSocket.

When working in non-blocking mode applications should always be able to
handle getting a %G_IO_ERROR_WOULD_BLOCK error even when some other
function said that I/O was possible. This can easily happen in case
of a race condition in the application, but it can also happen for other
reasons. For instance, on Windows a socket is always seen as writable
until a write returns %G_IO_ERROR_WOULD_BLOCK.

#GSockets can be either connection oriented or datagram based.
For connection oriented types you must first establish a connection by
either connecting to an address or accepting a connection from another
address. For connectionless socket types the target/source address is
specified or received in each I/O operation.

All socket file descriptors are set to be close-on-exec.

Note that creating a #GSocket causes the signal %SIGPIPE to be
ignored for the remainder of the program. If you are writing a
command-line utility that uses #GSocket, you may need to take into
account the fact that your program will not automatically be killed
if it tries to write to %stdout after it has been closed.

Like most other APIs in GLib, #GSocket is not inherently thread safe. To use
a #GSocket concurrently from multiple threads, you must implement your own
locking.
#NAME: target
#PARENT: Gio.SrvTarget.get_port.guint16
#COMMENT: a #GSrvTarget
#NAME: load
#PARENT: Gio.Resource
#COMMENT: Loads a binary resource bundle and creates a #GResource representation of it, allowing
you to query it for data.

If you want to use this resource in the global resource namespace you need
to register it with g_resources_register().
#NAME: out_size
#PARENT: Gio.DBusMessage.to_blob.guint8
#COMMENT: Return location for size of generated blob.
#NAME: iter
#PARENT: Gio.MenuLinkIterClass.get_next.get_next.gboolean
#COMMENT: a #GMenuLinkIter
#NAME: write_fn
#PARENT: Gio.OutputStreamClass.write_fn.write_fn
#COMMENT: Number of bytes written, or -1 on error
#NAME: supports_hostname
#PARENT: Gio.ProxyInterface.supports_hostname.supports_hostname
#COMMENT: %TRUE if hostname resolution is supported.
#NAME: callback
#PARENT: Gio.Mount.eject.none
#COMMENT: a #GAsyncReadyCallback, or %NULL.
#NAME: list_actions
#PARENT: Gio.ActionGroup
#COMMENT: Lists the actions contained within @action_group.

The caller is responsible for freeing the list with g_strfreev() when
it is no longer required.
#NAME: flags
#PARENT: Gio.Volume.mount_fn.none
#COMMENT: flags affecting the operation
#NAME: trash_finish
#PARENT: Gio.File.trash_finish
#COMMENT: %TRUE on successful trash, %FALSE otherwise.
#NAME: put_int16
#PARENT: Gio.DataOutputStream.put_int16
#COMMENT: %TRUE if @data was successfully added to the @stream.
#NAME: get_fd
#PARENT: Gio.UnixOutputStream
#COMMENT: Return the UNIX file descriptor that the stream writes to.
#NAME: result
#PARENT: Gio.Mount.unmount_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: method_name
#PARENT: Gio.DBusConnection.call.none
#COMMENT: the name of the method to invoke
#NAME: PollableSourceFunc
#PARENT: Gio
#COMMENT: This is the function type of the callback used for the #GSource
returned by g_pollable_input_stream_create_source() and
g_pollable_output_stream_create_source().
#NAME: get_header_fields
#PARENT: Gio.DBusMessage.get_header_fields
#COMMENT: An array of header fields
terminated by %G_DBUS_MESSAGE_HEADER_FIELD_INVALID.  Each element
is a #guchar. Free with g_free().
#NAME: serial
#PARENT: Gio.DBusMessage.set_serial.none
#COMMENT: A #guint32.
#NAME: get_drive
#PARENT: Gio.Volume.get_drive
#COMMENT: a #GDrive or %NULL if @volume is not
    associated with a drive. The returned object should be unreffed
    with g_object_unref() when no longer needed.
#NAME: file
#PARENT: Gio.File.has_prefix.gboolean
#COMMENT: input #GFile
#NAME: set_attribute
#PARENT: Gio.MenuItem
#COMMENT: Sets or unsets an attribute on @menu_item.

The attribute to set or unset is specified by @attribute. This
can be one of the standard attribute names %G_MENU_ATTRIBUTE_LABEL,
%G_MENU_ATTRIBUTE_ACTION, %G_MENU_ATTRIBUTE_TARGET, or a custom
attribute name.
Attribute names are restricted to lowercase characters, numbers
and '-'. Furthermore, the names must begin with a lowercase character,
must not end with a '-', and must not contain consecutive dashes.

If @format_string is non-%NULL then the proper position parameters
are collected to create a #GVariant instance to use as the attribute
value.  If it is %NULL then the positional parameterrs are ignored
and the named attribute is unset.

See also g_menu_item_set_attribute_value() for an equivalent call
that directly accepts a #GVariant.
#NAME: attribute
#PARENT: Gio.FileInfo.has_attribute.gboolean
#COMMENT: a file attribute key.
#NAME: unmount_finish
#PARENT: Gio.Mount
#COMMENT: Finishes unmounting a mount. If any errors occurred during the operation,
@error will be set to contain the errors and %FALSE will be returned.
#NAME: connection
#PARENT: Gio.DBusConnection.remove_filter.none
#COMMENT: a #GDBusConnection
#NAME: object
#PARENT: Gio.DBusObjectManagerServer.is_exported.gboolean
#COMMENT: An object.
#NAME: get_objects
#PARENT: Gio.DBusObjectManagerIface.get_objects.get_objects
#COMMENT: A list of
  #GDBusObject objects. The returned list should be freed with
  g_list_free() after each element has been freed with
  g_object_unref().
#NAME: callback
#PARENT: Gio.OutputStream.write_all_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: next_file
#PARENT: Gio.FileEnumerator
#COMMENT: Returns information for the next file in the enumerated object.
Will block until the information is available. The #GFileInfo
returned from this function will contain attributes that match the
attribute string that was passed when the #GFileEnumerator was created.

See the documentation of #GFileEnumerator for information about the
order of returned files.

On error, returns %NULL and sets @error to the error. If the
enumerator is at the end, %NULL will be returned and @error will
be unset.
#NAME: ref_count
#PARENT: Gio.DBusMethodInfo
#COMMENT: The reference count or -1 if statically allocated.
#NAME: create_source
#PARENT: Gio.Socket
#COMMENT: Creates a #GSource that can be attached to a %GMainContext to monitor
for the availability of the specified @condition on the socket. The #GSource
keeps a reference to the @socket.

The callback on the source is of the #GSocketSourceFunc type.

It is meaningless to specify %G_IO_ERR or %G_IO_HUP in @condition;
these conditions will always be reported output if they are true.

@cancellable if not %NULL can be used to cancel the source, which will
cause the source to trigger, reporting the current condition (which
is likely 0 unless cancellation happened at the same time as a
condition change). You can check for this in the callback using
g_cancellable_is_cancelled().

If @socket has a timeout set, and it is reached before @condition
occurs, the source will then trigger anyway, reporting %G_IO_IN or
%G_IO_OUT depending on @condition. However, @socket will have been
marked as having had a timeout, and so the next #GSocket I/O method
you call will then fail with a %G_IO_ERROR_TIMED_OUT.
#NAME: new_for_xml
#PARENT: Gio.DBusNodeInfo.new_for_xml
#COMMENT: A #GDBusNodeInfo structure or %NULL if @error is set. Free
with g_dbus_node_info_unref().
#NAME: settings
#PARENT: Gio.Settings.set_boolean.gboolean
#COMMENT: a #GSettings object
#NAME: volume
#PARENT: Gio.Volume.get_uuid.utf8
#COMMENT: a #GVolume
#NAME: flags
#PARENT: Gio.DriveIface.eject_with_operation.eject_with_operation.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: address
#PARENT: Gio.InetSocketAddress.get_scope_id.guint32
#COMMENT: a %G_SOCKET_FAMILY_IPV6 #GInetAddress
#NAME: user_data
#PARENT: Gio.InputStreamClass.close_async.close_async.none
#COMMENT: the data to pass to callback function
#NAME: none
#PARENT: Gio.TlsAuthenticationMode
#COMMENT: client authentication not required
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeleton.unexport_from_connection.none
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: manager
#PARENT: Gio.DBusObjectManagerServer.is_exported.gboolean
#COMMENT: A #GDBusObjectManagerServer.
#NAME: io_priority
#PARENT: Gio.OutputStream.write_all_async.none
#COMMENT: the io priority of the request
#NAME: mount_entry
#PARENT: Gio.unix_mount_guess_name.utf8
#COMMENT: a #GUnixMountEntry
#NAME: uri
#PARENT: Gio.Vfs.get_file_for_uri.File
#COMMENT: a string containing a URI
#NAME: hint
#PARENT: Gio.ApplicationClass.open.open.none
#COMMENT: a hint (or ""), but never %NULL
#NAME: DBusConnectionFlags
#PARENT: Gio
#COMMENT: Flags used when creating a new #GDBusConnection.
#NAME: cancellable
#PARENT: Gio.FileIface.monitor_dir.monitor_dir.FileMonitor
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: user_data
#PARENT: Gio.Settings.bind_with_mapping.none
#COMMENT: data that gets passed to @get_mapping and @set_mapping
#NAME: len
#PARENT: Gio.ThemedIcon.new_from_names.ThemedIcon
#COMMENT: the length of the @iconnames array, or -1 if @iconnames is
    %NULL-terminated
#NAME: get_symbolic_icon
#PARENT: Gio.Volume.get_symbolic_icon
#COMMENT: a #GIcon.
    The returned object should be unreffed with g_object_unref()
    when no longer needed.
#NAME: remove_supports_type
#PARENT: Gio.AppInfoIface.remove_supports_type.remove_supports_type
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: object_type
#PARENT: Gio.AsyncInitable.new_async.none
#COMMENT: a #GType supporting #GAsyncInitable.
#NAME: proxy
#PARENT: Gio.ProxyAddress.get_destination_port.guint16
#COMMENT: a #GProxyAddress
#NAME: timeout
#PARENT: Gio.SocketClient.set_timeout.none
#COMMENT: the timeout
#NAME: source
#PARENT: Gio.OutputStreamClass.splice_async.splice_async.none
#COMMENT: a #GInputStream.
#NAME: connection
#PARENT: Gio.SocketService.incoming.gboolean
#COMMENT: a new #GSocketConnection object
#NAME: icon
#PARENT: Gio.ThemedIcon.get_names.utf8
#COMMENT: a #GThemedIcon.
#NAME: max_threads
#PARENT: Gio.ThreadedSocketService.new.SocketService
#COMMENT: the maximal number of threads to execute concurrently
  handling incoming clients, -1 means no limit
#NAME: flags
#PARENT: Gio.File.unmount_mountable.none
#COMMENT: flags affecting the operation
#NAME: set_enabled
#PARENT: Gio.SimpleAction
#COMMENT: Sets the action as enabled or not.

An action must be enabled in order to be activated or in order to
have its state changed from outside callers.

This should only be called by the implementor of the action.  Users
of the action should not attempt to modify its enabled flag.
#NAME: application
#PARENT: Gio.Application.quit.none
#COMMENT: a #GApplication
#NAME: port
#PARENT: Gio.ProxyAddress.new.SocketAddress
#COMMENT: The proxy server port.
#NAME: enumerator
#PARENT: Gio.SocketAddressEnumeratorClass.next.next.SocketAddress
#COMMENT: a #GSocketAddressEnumerator
#NAME: scope
#PARENT: Gio.io_modules_scan_all_in_directory_with_scope.none
#COMMENT: a scope to use when scanning the modules
#NAME: get_show_in
#PARENT: Gio.DesktopAppInfo.get_show_in
#COMMENT: %TRUE if the @info should be shown in @desktop_env according to the
`OnlyShowIn` and `NotShowIn` keys, %FALSE
otherwise.
#NAME: extension_point_name
#PARENT: Gio.io_extension_point_implement.IOExtension
#COMMENT: the name of the extension point
#NAME: get_file_for_path
#PARENT: Gio.Vfs.get_file_for_path
#COMMENT: a #GFile.
    Free the returned object with g_object_unref().
#NAME: insert_sorted
#PARENT: Gio.ListStore
#COMMENT: Inserts @item into @store at a position to be determined by the
@compare_func.

The list must already be sorted before calling this function or the
result is undefined.  Usually you would approach this by only ever
inserting items by way of this function.

This function takes a ref on @item.
#NAME: deserialize
#PARENT: Gio.SocketControlMessage
#COMMENT: Tries to deserialize a socket control message of a given
@level and @type. This will ask all known (to GType) subclasses
of #GSocketControlMessage if they can understand this kind
of message and if so deserialize it into a #GSocketControlMessage.

If there is no implementation for this kind of control message, %NULL
will be returned.
#NAME: database
#PARENT: Gio.TlsConnection
#COMMENT: The certificate database to use when verifying this TLS connection.
If no cerificate database is set, then the default database will be
used. See g_tls_backend_get_default_database().
#NAME: monitor_file
#PARENT: Gio.File.monitor_file
#COMMENT: a #GFileMonitor for the given @file,
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: is_connected
#PARENT: Gio.SocketConnection.is_connected
#COMMENT: whether @connection is connected
#NAME: password
#PARENT: Gio.TlsPassword.set_flags.none
#COMMENT: a #GTlsPassword object
#NAME: permission
#PARENT: Gio.Permission.get_allowed.gboolean
#COMMENT: a #GPermission instance
#NAME: name_appeared_handler
#PARENT: Gio.bus_watch_name_on_connection.guint
#COMMENT: Handler to invoke when @name is known to exist or %NULL.
#NAME: store
#PARENT: Gio.ListStore.insert_sorted.guint
#COMMENT: a #GListStore
#NAME: cache_build
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: Builds a lookup-cache to speed up
g_dbus_interface_info_lookup_method(),
g_dbus_interface_info_lookup_signal() and
g_dbus_interface_info_lookup_property().

If this has already been called with @info, the existing cache is
used and its use count is increased.

Note that @info cannot be modified until
g_dbus_interface_info_cache_release() is called.
#NAME: close
#PARENT: Gio.SocketListener
#COMMENT: Closes all the sockets in the listener.
#NAME: has_pending
#PARENT: Gio.FileEnumerator
#COMMENT: Checks if the file enumerator has pending operations.
#NAME: supports_uris
#PARENT: Gio.AppInfo.supports_uris
#COMMENT: %TRUE if the @appinfo supports URIs.
#NAME: get_name
#PARENT: Gio.DriveIface.get_name.get_name
#COMMENT: a string containing @drive's name. The returned
    string should be freed when no longer needed.
#NAME: bus_unwatch_name
#PARENT: Gio
#COMMENT: Stops watching a name.
#NAME: lookup_property
#PARENT: Gio.DBusInterfaceInfo.lookup_property
#COMMENT: A #GDBusPropertyInfo or %NULL if not found. Do not free, it is owned by @info.
#NAME: next_finish
#PARENT: Gio.SocketAddressEnumeratorClass.next_finish.next_finish
#COMMENT: a #GSocketAddress (owned by the caller), or %NULL on
    error (in which case *@error will be set) or if there are no
    more addresses.
#NAME: icon
#PARENT: Gio.ThemedIcon.prepend_name.none
#COMMENT: a #GThemedIcon
#NAME: timeout_msec
#PARENT: Gio.DBusConnection.send_message_with_reply_sync.DBusMessage
#COMMENT: the timeout in milliseconds, -1 to use the default
    timeout or %G_MAXINT for no timeout
#NAME: DBusObjectSkeletonClass
#PARENT: Gio
#COMMENT: Class structure for #GDBusObjectSkeleton.
#NAME: cancellable
#PARENT: Gio.Initable.newv.GObject.Object
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: make_directory_finish
#PARENT: Gio.FileIface.make_directory_finish.make_directory_finish
#COMMENT: %TRUE on successful directory creation, %FALSE otherwise.
#NAME: info
#PARENT: Gio.FileInfo.set_is_symlink.none
#COMMENT: a #GFileInfo.
#NAME: get_base_stream
#PARENT: Gio.FilterOutputStream.get_base_stream
#COMMENT: a #GOutputStream.
#NAME: cancellable
#PARENT: Gio.AsyncInitableIface.init_async.init_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: etag
#PARENT: Gio.FileIface.replace.replace.FileOutputStream
#COMMENT: an optional [entity tag][gfile-etag]
    for the current #GFile, or #NULL to ignore
#NAME: attribute
#PARENT: Gio.FileInfo.set_attribute_uint32.none
#COMMENT: a file attribute key.
#NAME: SettingsGetMapping
#PARENT: Gio
#COMMENT: The type of the function that is used to convert from a value stored
in a #GSettings to a value that is useful to the application.

If the value is successfully mapped, the result should be stored at
@result and %TRUE returned.  If mapping fails (for example, if @value
is not in the right format) then %FALSE should be returned.

If @value is %NULL then it means that the mapping function is being
given a "last chance" to successfully return a valid value.  %TRUE
must be returned in this case.
#NAME: stream
#PARENT: Gio.InputStream.read.gssize
#COMMENT: a #GInputStream.
#NAME: find_enclosing_mount
#PARENT: Gio.File.find_enclosing_mount
#COMMENT: a #GMount where the @file is located
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: replace_readwrite_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous file replace operation started with
g_file_replace_readwrite_async().
#NAME: result
#PARENT: Gio.FileIface.mount_mountable_finish.mount_mountable_finish.File
#COMMENT: a #GAsyncResult
#NAME: object
#PARENT: Gio.DBusObjectManager.interface-removed.none
#COMMENT: The #GDBusObject on which an interface was removed.
#NAME: offset
#PARENT: Gio.SeekableIface.truncate_fn.truncate_fn.gboolean
#COMMENT: a #goffset.
#NAME: content_type_guess_for_tree
#PARENT: Gio.content_type_guess_for_tree
#COMMENT: an %NULL-terminated
    array of zero or more content types. Free with g_strfreev()
#NAME: stream
#PARENT: Gio.IOStream.get_input_stream.InputStream
#COMMENT: a #GIOStream
#NAME: callback
#PARENT: Gio.DBusConnection.call.none
#COMMENT: a #GAsyncReadyCallback to call when the request
    is satisfied or %NULL if you don't care about the result of the
    method invocation
#NAME: set_submenu
#PARENT: Gio.MenuItem
#COMMENT: Sets or unsets the "submenu" link of @menu_item to @submenu.

If @submenu is non-%NULL, it is linked to.  If it is %NULL then the
link is unset.

The effect of having one menu appear as a submenu of another is
exactly as it sounds.
#NAME: stop_chars_len
#PARENT: Gio.DataInputStream.read_upto.utf8
#COMMENT: length of @stop_chars. May be -1 if @stop_chars is
    nul-terminated
#NAME: cancellable
#PARENT: Gio.OutputStream.write_all.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_priority
#PARENT: Gio.Task.get_priority
#COMMENT: @task's priority
#NAME: connection
#PARENT: Gio.UnixConnection.send_credentials.gboolean
#COMMENT: A #GUnixConnection.
#NAME: get_properties
#PARENT: Gio.DBusInterfaceSkeleton.get_properties
#COMMENT: A #GVariant of type
['a{sv}'][G-VARIANT-TYPE-VARDICT:CAPS].
Free with g_variant_unref().
#NAME: file
#PARENT: Gio.File.set_display_name_async.none
#COMMENT: input #GFile
#NAME: purpose
#PARENT: Gio.TlsDatabase.verify_chain_async.none
#COMMENT: the purpose that this certificate chain will be used for.
#NAME: DriveIface
#PARENT: Gio
#COMMENT: Interface for creating #GDrive implementations.
#NAME: return_on_cancel
#PARENT: Gio.Task.set_return_on_cancel.gboolean
#COMMENT: whether the task returns automatically when
  it is cancelled.
#NAME: descendant
#PARENT: Gio.FileIface.get_relative_path.get_relative_path.utf8
#COMMENT: input #GFile
#NAME: get
#PARENT: Gio.Settings
#COMMENT: Gets the value that is stored at @key in @settings.

A convenience function that combines g_settings_get_value() with
g_variant_get().

It is a programmer error to give a @key that isn't contained in the
schema for @settings or for the #GVariantType of @format to mismatch
the type given in the schema.
#NAME: attribute
#PARENT: Gio.FileInfo.set_attribute_boolean.none
#COMMENT: a file attribute key.
#NAME: stdout_buf
#PARENT: Gio.Subprocess.communicate_finish.gboolean
#COMMENT: Return location for stdout data
#NAME: connection
#PARENT: Gio.SocketConnection.get_remote_address.SocketAddress
#COMMENT: a #GSocketConnection
#NAME: schema
#PARENT: Gio.SettingsSchema.get_key.SettingsSchemaKey
#COMMENT: a #GSettingsSchema
#NAME: fd
#PARENT: Gio.UnixOutputStream
#COMMENT: The file descriptor that the stream writes to.
#NAME: object_path
#PARENT: Gio.DBusObjectSkeleton.new.DBusObjectSkeleton
#COMMENT: An object path.
#NAME: serialize
#PARENT: Gio.SocketControlMessage
#COMMENT: Converts the data in the message to bytes placed in the
message.

@data is guaranteed to have enough space to fit the size
returned by g_socket_control_message_get_size() on this
object.
#NAME: dbus_address_get_stream_finish
#PARENT: Gio
#COMMENT: Finishes an operation started with g_dbus_address_get_stream().
#NAME: bytes
#PARENT: Gio.OutputStream.write_bytes_async.none
#COMMENT: The bytes to write
#NAME: seek
#PARENT: Gio.Seekable
#COMMENT: Seeks in the stream by the given @offset, modified by @type.

Attempting to seek past the end of the stream will have different
results depending on if the stream is fixed-sized or resizable.  If
the stream is resizable then seeking past the end and then writing
will result in zeros filling the empty space.  Seeking past the end
of a resizable stream and reading will result in EOF.  Seeking past
the end of a fixed-sized stream will fail.

Any operation that would result in a negative offset will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: dbus_error_name
#PARENT: Gio.DBusError.unregister_error.gboolean
#COMMENT: A D-Bus error name.
#NAME: get_protocol
#PARENT: Gio.NetworkService
#COMMENT: Gets @srv's protocol name (eg, "tcp").
#NAME: create_readwrite_finish
#PARENT: Gio.File
#COMMENT: Finishes an asynchronous file create operation started with
g_file_create_readwrite_async().
#NAME: stream
#PARENT: Gio.IOStream.close_async.none
#COMMENT: a #GIOStream
#NAME: get_keywords
#PARENT: Gio.DesktopAppInfo
#COMMENT: Gets the keywords from the desktop file.
#NAME: ActionInterface
#PARENT: Gio
#COMMENT: The virtual function table for #GAction.
#NAME: FILE_ATTRIBUTE_FILESYSTEM_SIZE
#PARENT: Gio
#COMMENT: A key in the "filesystem" namespace for getting the total size (in bytes) of the file system,
used in g_file_query_filesystem_info(). Corresponding #GFileAttributeType
is %G_FILE_ATTRIBUTE_TYPE_UINT64.
#NAME: file
#PARENT: Gio.File.set_attribute_uint64.gboolean
#COMMENT: input #GFile
#NAME: NETWORK_MONITOR_EXTENSION_POINT_NAME
#PARENT: Gio
#COMMENT: Extension point for network status monitoring functionality.
See [Extending GIO][extending-gio].
#NAME: type
#PARENT: Gio.LoadableIcon.load.InputStream
#COMMENT: a location to store the type of the loaded
icon, %NULL to ignore.
#NAME: user_data
#PARENT: Gio.FileIface.replace_readwrite_async.replace_readwrite_async.none
#COMMENT: the data to pass to callback function
#NAME: count
#PARENT: Gio.PollableInputStreamInterface.read_nonblocking.read_nonblocking.gssize
#COMMENT: the number of bytes you want to read
#NAME: tcp
#PARENT: Gio.SocketProtocol
#COMMENT: TCP over IP
#NAME: get_stdout_pipe
#PARENT: Gio.Subprocess
#COMMENT: Gets the #GInputStream from which to read the stdout output of
@subprocess.

The process must have been created with
%G_SUBPROCESS_FLAGS_STDOUT_PIPE.
#NAME: flags
#PARENT: Gio.Volume.mount.none
#COMMENT: flags affecting the operation
#NAME: unix_mount_points_changed_since
#PARENT: Gio.unix_mount_points_changed_since
#COMMENT: %TRUE if the mount points have changed since @time.
#NAME: release_finish
#PARENT: Gio.PermissionClass.release_finish.release_finish
#COMMENT: %TRUE if the permission was successfully released
#NAME: dest
#PARENT: Gio.SocketAddress.to_native.gboolean
#COMMENT: a pointer to a memory location that will contain the native
struct sockaddr
#NAME: get_parameters
#PARENT: Gio.DBusMethodInvocation.get_parameters
#COMMENT: A #GVariant tuple. Do not unref this because it is owned by @invocation.
#NAME: manager
#PARENT: Gio.DBusObjectManagerIface.get_object_path.get_object_path.utf8
#COMMENT: A #GDBusObjectManager.
#NAME: new
#PARENT: Gio.FileAttributeInfoList
#COMMENT: Creates a new file attribute info list.
#NAME: new_any
#PARENT: Gio.InetAddress.new_any
#COMMENT: a new #GInetAddress corresponding to the "any" address
for @family.
#NAME: cancellable
#PARENT: Gio.FileIface.query_info.query_info.FileInfo
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: cancellable
#PARENT: Gio.File.mount_enclosing_volume.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: etag_out
#PARENT: Gio.File.load_contents.gboolean
#COMMENT: a location to place the current entity tag for the file,
   or %NULL if the entity tag is not needed
#NAME: emblem
#PARENT: Gio.Emblem.get_origin.EmblemOrigin
#COMMENT: a #GEmblem
#NAME: symbolic_link
#PARENT: Gio.FileType
#COMMENT: File handle represents a symbolic link
   (Unix systems).
#NAME: measure_disk_usage_async
#PARENT: Gio.File
#COMMENT: Recursively measures the disk usage of @file.

This is the asynchronous version of g_file_measure_disk_usage().  See
there for more information.
#NAME: file
#PARENT: Gio.FileIface.trash.trash.gboolean
#COMMENT: #GFile to send to trash
#NAME: listen
#PARENT: Gio.Socket
#COMMENT: Marks the socket as a server socket, i.e. a socket that is used
to accept incoming requests using g_socket_accept().

Before calling this the socket must be bound to a local address using
g_socket_bind().

To set the maximum amount of outstanding clients, use
g_socket_set_listen_backlog().
#NAME: g_iface
#PARENT: Gio.IconIface
#COMMENT: The parent interface.
#NAME: result
#PARENT: Gio.FileIface.eject_mountable_with_operation_finish.eject_mountable_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: schema
#PARENT: Gio.SettingsSchema.list_children.utf8
#COMMENT: a #GSettingsSchema
#NAME: extension_point_name
#PARENT: Gio.IOExtensionPoint.implement.IOExtension
#COMMENT: the name of the extension point
#NAME: appinfo
#PARENT: Gio.AppInfo.should_show.gboolean
#COMMENT: a #GAppInfo.
#NAME: cancellable
#PARENT: Gio.File.replace.FileOutputStream
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: create_async
#PARENT: Gio.File
#COMMENT: Asynchronously creates a new file and returns an output stream
for writing to it. The file must not already exist.

For more details, see g_file_create() which is
the synchronous version of this call.

When the operation is finished, @callback will be called.
You can then call g_file_create_finish() to get the result
of the operation.
#NAME: new_method_call
#PARENT: Gio.DBusMessage.new_method_call
#COMMENT: A #GDBusMessage. Free with g_object_unref().
#NAME: accept
#PARENT: Gio.Socket
#COMMENT: Accept incoming connections on a connection-based socket. This removes
the first outstanding connection request from the listening socket and
creates a #GSocket object for it.

The @socket must be bound to a local address with g_socket_bind() and
must be listening for incoming connections (g_socket_listen()).

If there are no outstanding connections then the operation will block
or return %G_IO_ERROR_WOULD_BLOCK if non-blocking I/O is enabled.
To be notified of an incoming connection, wait for the %G_IO_IN condition.
#NAME: stop_chars_len
#PARENT: Gio.DataInputStream.read_upto_async.none
#COMMENT: length of @stop_chars. May be -1 if @stop_chars is
    nul-terminated
#NAME: get_environment
#PARENT: Gio.AppLaunchContext.get_environment
#COMMENT: the
    child's environment
#NAME: invalid
#PARENT: Gio.DBusMessageHeaderField
#COMMENT: Not a valid header field.
#NAME: none
#PARENT: Gio.DBusCapabilityFlags
#COMMENT: No flags set.
#NAME: result
#PARENT: Gio.Drive.poll_for_media_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: TlsServerConnection
#PARENT: Gio
#COMMENT: #GTlsServerConnection is the server-side subclass of #GTlsConnection,
representing a server-side TLS connection.
#NAME: get_connection
#PARENT: Gio.DBusMethodInvocation
#COMMENT: Gets the #GDBusConnection the method was invoked on.
#NAME: value
#PARENT: Gio.Settings.set_uint.gboolean
#COMMENT: the value to set it to
#NAME: source_object
#PARENT: Gio.SocketListener.add_address.gboolean
#COMMENT: Optional #GObject identifying this source
#NAME: is_media_removable
#PARENT: Gio.Drive.is_media_removable
#COMMENT: %TRUE if @drive supports removable media, %FALSE otherwise.
#NAME: to_tokens
#PARENT: Gio.Icon.to_tokens
#COMMENT: An allocated NUL-terminated UTF8 string or
%NULL if @icon can't be serialized. Use g_free() to free.
#NAME: get_data
#PARENT: Gio.MemoryOutputStream
#COMMENT: Gets any loaded data from the @ostream.

Note that the returned pointer may become invalid on the next
write or truncate operation on the stream.
#NAME: connection
#PARENT: Gio.DBusProxy.new.none
#COMMENT: A #GDBusConnection.
#NAME: bus_acquired_closure
#PARENT: Gio.bus_own_name_with_closures.guint
#COMMENT: #GClosure to invoke when connected to
    the bus of type @bus_type or %NULL
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.get_property_info.DBusPropertyInfo
#COMMENT: A #GDBusMethodInvocation
#NAME: cancellable
#PARENT: Gio.FileIOStream.query_info.FileInfo
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: name
#PARENT: Gio.SettingsSchema.get_key.SettingsSchemaKey
#COMMENT: the name of a key
#NAME: interaction
#PARENT: Gio.TlsInteraction.request_certificate_async.none
#COMMENT: a #GTlsInteraction object
#NAME: info
#PARENT: Gio.FileInfo.get_attribute_boolean.gboolean
#COMMENT: a #GFileInfo.
#NAME: interface_
#PARENT: Gio.DBusInterface.dup_object.DBusObject
#COMMENT: An exported D-Bus interface.
#NAME: info
#PARENT: Gio.FileInfo.set_symlink_target.none
#COMMENT: a #GFileInfo.
#NAME: Application
#PARENT: Gio
#COMMENT: A #GApplication is the foundation of an application.  It wraps some
low-level platform-specific services and is intended to act as the
foundation for higher-level application classes such as
#GtkApplication or #MxApplication.  In general, you should not use
this class outside of a higher level framework.

GApplication provides convenient life cycle management by maintaining
a "use count" for the primary application instance. The use count can
be changed using g_application_hold() and g_application_release(). If
it drops to zero, the application exits. Higher-level classes such as
#GtkApplication employ the use count to ensure that the application
stays alive as long as it has any opened windows.

Another feature that GApplication (optionally) provides is process
uniqueness. Applications can make use of this functionality by
providing a unique application ID. If given, only one application
with this ID can be running at a time per session. The session
concept is platform-dependent, but corresponds roughly to a graphical
desktop login. When your application is launched again, its
arguments are passed through platform communication to the already
running program. The already running instance of the program is
called the "primary instance"; for non-unique applications this is
the always the current instance. On Linux, the D-Bus session bus
is used for communication.

The use of #GApplication differs from some other commonly-used
uniqueness libraries (such as libunique) in important ways. The
application is not expected to manually register itself and check
if it is the primary instance. Instead, the main() function of a
#GApplication should do very little more than instantiating the
application instance, possibly connecting signal handlers, then
calling g_application_run(). All checks for uniqueness are done
internally. If the application is the primary instance then the
startup signal is emitted and the mainloop runs. If the application
is not the primary instance then a signal is sent to the primary
instance and g_application_run() promptly returns. See the code
examples below.

If used, the expected form of an application identifier is very close
to that of of a
[DBus bus name](http://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-interface).
Examples include: "com.example.MyApp", "org.example.internal-apps.Calculator".
For details on valid application identifiers, see g_application_id_is_valid().

On Linux, the application identifier is claimed as a well-known bus name
on the user's session bus.  This means that the uniqueness of your
application is scoped to the current session.  It also means that your
application may provide additional services (through registration of other
object paths) at that bus name.  The registration of these object paths
should be done with the shared GDBus session bus.  Note that due to the
internal architecture of GDBus, method calls can be dispatched at any time
(even if a main loop is not running).  For this reason, you must ensure that
any object paths that you wish to register are registered before #GApplication
attempts to acquire the bus name of your application (which happens in
g_application_register()).  Unfortunately, this means that you cannot use
g_application_get_is_remote() to decide if you want to register object paths.

GApplication also implements the #GActionGroup and #GActionMap
interfaces and lets you easily export actions by adding them with
g_action_map_add_action(). When invoking an action by calling
g_action_group_activate_action() on the application, it is always
invoked in the primary instance. The actions are also exported on
the session bus, and GIO provides the #GDBusActionGroup wrapper to
conveniently access them remotely. GIO provides a #GDBusMenuModel wrapper
for remote access to exported #GMenuModels.

There is a number of different entry points into a GApplication:

- via 'Activate' (i.e. just starting the application)

- via 'Open' (i.e. opening some files)

- by handling a command-line

- via activating an action

The #GApplication::startup signal lets you handle the application
initialization for all of these in a single place.

Regardless of which of these entry points is used to start the
application, GApplication passes some "platform data from the
launching instance to the primary instance, in the form of a
#GVariant dictionary mapping strings to variants. To use platform
data, override the @before_emit or @after_emit virtual functions
in your #GApplication subclass. When dealing with
#GApplicationCommandLine objects, the platform data is
directly available via g_application_command_line_get_cwd(),
g_application_command_line_get_environ() and
g_application_command_line_get_platform_data().

As the name indicates, the platform data may vary depending on the
operating system, but it always includes the current directory (key
"cwd"), and optionally the environment (ie the set of environment
variables and their values) of the calling process (key "environ").
The environment is only added to the platform data if the
%G_APPLICATION_SEND_ENVIRONMENT flag is set. #GApplication subclasses
can add their own platform data by overriding the @add_platform_data
virtual function. For instance, #GtkApplication adds startup notification
data in this way.

To parse commandline arguments you may handle the
#GApplication::command-line signal or override the local_command_line()
vfunc, to parse them in either the primary instance or the local instance,
respectively.

For an example of opening files with a GApplication, see
[gapplication-example-open.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-open.c).

For an example of using actions with GApplication, see
[gapplication-example-actions.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-actions.c).

For an example of using extra D-Bus hooks with GApplication, see
[gapplication-example-dbushooks.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-dbushooks.c).
#NAME: file
#PARENT: Gio.File.create_readwrite_async.none
#COMMENT: input #GFile
#NAME: system
#PARENT: Gio.BusType
#COMMENT: The system-wide message bus.
#NAME: get_all_for_type
#PARENT: Gio.AppInfo
#COMMENT: Gets a list of all #GAppInfos for a given content type,
including the recommended and fallback #GAppInfos. See
g_app_info_get_recommended_for_type() and
g_app_info_get_fallback_for_type().
#NAME: callback
#PARENT: Gio.FileIface.set_attributes_async.set_attributes_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: run
#PARENT: Gio.Application
#COMMENT: Runs the application.

This function is intended to be run from main() and its return value
is intended to be returned by main(). Although you are expected to pass
the @argc, @argv parameters from main() to this function, it is possible
to pass %NULL if @argv is not available or commandline handling is not
required.  Note that on Windows, @argc and @argv are ignored, and
g_win32_get_command_line() is called internally (for proper support
of Unicode commandline arguments).

#GApplication will attempt to parse the commandline arguments.  You
can add commandline flags to the list of recognised options by way of
g_application_add_main_option_entries().  After this, the
#GApplication::handle-local-options signal is emitted, from which the
application can inspect the values of its #GOptionEntrys.

#GApplication::handle-local-options is a good place to handle options
such as `--version`, where an immediate reply from the local process is
desired (instead of communicating with an already-running instance).
A #GApplication::handle-local-options handler can stop further processing
by returning a non-negative value, which then becomes the exit status of
the process.

What happens next depends on the flags: if
%G_APPLICATION_HANDLES_COMMAND_LINE was specified then the remaining
commandline arguments are sent to the primary instance, where a
#GApplication::command-line signal is emitted.  Otherwise, the
remaining commandline arguments are assumed to be a list of files.
If there are no files listed, the application is activated via the
#GApplication::activate signal.  If there are one or more files, and
%G_APPLICATION_HANDLES_OPEN was specified then the files are opened
via the #GApplication::open signal.

If you are interested in doing more complicated local handling of the
commandline then you should implement your own #GApplication subclass
and override local_command_line(). In this case, you most likely want
to return %TRUE from your local_command_line() implementation to
suppress the default handling. See
[gapplication-example-cmdline2.c][gapplication-example-cmdline2]
for an example.

If, after the above is done, the use count of the application is zero
then the exit status is returned immediately.  If the use count is
non-zero then the default main context is iterated until the use count
falls to zero, at which point 0 is returned.

If the %G_APPLICATION_IS_SERVICE flag is set, then the service will
run for as much as 10 seconds with a use count of zero while waiting
for the message that caused the activation to arrive.  After that,
if the use count falls to zero the application will exit immediately,
except in the case that g_application_set_inactivity_timeout() is in
use.

This function sets the prgname (g_set_prgname()), if not already set,
to the basename of argv[0].

Since 2.40, applications that are not explicitly flagged as services
or launchers (ie: neither %G_APPLICATION_IS_SERVICE or
%G_APPLICATION_IS_LAUNCHER are given as flags) will check (from the
default handler for local_command_line) if "--gapplication-service"
was given in the command line.  If this flag is present then normal
commandline processing is interrupted and the
%G_APPLICATION_IS_SERVICE flag is set.  This provides a "compromise"
solution whereby running an application directly from the commandline
will invoke it in the normal way (which can be useful for debugging)
while still allowing applications to be D-Bus activated in service
mode.  The D-Bus service file should invoke the executable with
"--gapplication-service" as the sole commandline argument.  This
approach is suitable for use by most graphical applications but
should not be used from applications like editors that need precise
control over when processes invoked via the commandline will exit and
what their exit status will be.
#NAME: action
#PARENT: Gio.MenuItem.set_action_and_target.none
#COMMENT: the name of the action for this item
#NAME: FileAttributeMatcher
#PARENT: Gio
#COMMENT: Determines if a string matches a file attribute.
#NAME: detailed_action
#PARENT: Gio.Menu.prepend.none
#COMMENT: the detailed action string, or %NULL
#NAME: get_action_state_hint
#PARENT: Gio.ActionGroupInterface.get_action_state_hint.get_action_state_hint
#COMMENT: the state range hint
#NAME: property
#PARENT: Gio.Settings.bind_with_mapping.none
#COMMENT: the name of the property to bind
#NAME: get_timeout
#PARENT: Gio.Socket
#COMMENT: Gets the timeout setting of the socket. For details on this, see
g_socket_set_timeout().
#NAME: flags
#PARENT: Gio.TlsDatabase.lookup_certificate_issuer.TlsCertificate
#COMMENT: flags which affect the lookup operation
#NAME: cancellable
#PARENT: Gio.IOStream.close.gboolean
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: cancellable
#PARENT: Gio.Resolver.lookup_by_address.utf8
#COMMENT: a #GCancellable, or %NULL
#NAME: user_data
#PARENT: Gio.DBusProxyTypeFunc.GType
#COMMENT: User data.
#NAME: get_icon
#PARENT: Gio.EmblemedIcon
#COMMENT: Gets the main icon for @emblemed.
#NAME: list
#PARENT: Gio.ListModel.get_object.GObject.Object
#COMMENT: a #GListModel
#NAME: set_keepalive
#PARENT: Gio.Socket
#COMMENT: Sets or unsets the %SO_KEEPALIVE flag on the underlying socket. When
this flag is set on a socket, the system will attempt to verify that the
remote socket endpoint is still present if a sufficiently long period of
time passes with no data being exchanged. If the system is unable to
verify the presence of the remote endpoint, it will automatically close
the connection.

This option is only functional on certain kinds of sockets. (Notably,
%G_SOCKET_PROTOCOL_TCP sockets.)

The exact time between pings is system- and protocol-dependent, but will
normally be at least two hours. Most commonly, you would set this flag
on a server socket if you want to allow clients to remain idle for long
periods of time, but also want to ensure that connections are eventually
garbage-collected if clients crash or become unreachable.
#NAME: info
#PARENT: Gio.DesktopAppInfo.get_is_hidden.gboolean
#COMMENT: a #GDesktopAppInfo.
#NAME: FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be ejected.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: get_parent
#PARENT: Gio.File.get_parent
#COMMENT: a #GFile structure to the
    parent of the given #GFile or %NULL if there is no parent. Free
    the returned object with g_object_unref().
#NAME: get_status
#PARENT: Gio.Subprocess
#COMMENT: Gets the raw status code of the process, as from waitpid().

This value has no particular meaning, but it can be used with the
macros defined by the system headers such as WIFEXITED.  It can also
be used with g_spawn_check_exit_status().

It is more likely that you want to use g_subprocess_get_if_exited()
followed by g_subprocess_get_exit_status().

It is an error to call this function before g_subprocess_wait() has
returned.
#NAME: conn
#PARENT: Gio.TlsClientConnection.get_accepted_cas.gpointer
#COMMENT: the #GTlsClientConnection
#NAME: progress_callback
#PARENT: Gio.File.measure_disk_usage.gboolean
#COMMENT: a #GFileMeasureProgressCallback
#NAME: request_certificate_finish
#PARENT: Gio.TlsInteraction
#COMMENT: Complete an request certificate user interaction request. This should be once
the g_tls_interaction_request_certificate_async() completion callback is called.

If %G_TLS_INTERACTION_HANDLED is returned, then the #GTlsConnection
passed to g_tls_interaction_request_certificate_async() will have had its
#GTlsConnection:certificate filled in.

If the interaction is cancelled by the cancellation object, or by the
user then %G_TLS_INTERACTION_FAILED will be returned with an error that
contains a %G_IO_ERROR_CANCELLED error code.
#NAME: call_with_unix_fd_list
#PARENT: Gio.DBusConnection
#COMMENT: Like g_dbus_connection_call() but also takes a #GUnixFDList object.

This method is only available on UNIX.
#NAME: get_use_fallback
#PARENT: Gio.CharsetConverter
#COMMENT: Gets the #GCharsetConverter:use-fallback property.
#NAME: poll_for_media_finish
#PARENT: Gio.DriveIface.poll_for_media_finish.poll_for_media_finish
#COMMENT: %TRUE if the drive has been poll_for_mediaed successfully,
    %FALSE otherwise.
#NAME: listened
#PARENT: Gio.SocketListenerEvent
#COMMENT: The listener is now listening on
  this socket.
#NAME: length
#PARENT: Gio.DataInputStream.read_until_finish.utf8
#COMMENT: a #gsize to get the length of the data read in.
#NAME: get_extension_by_name
#PARENT: Gio.IOExtensionPoint
#COMMENT: Finds a #GIOExtension for an extension point by name.
#NAME: appinfo
#PARENT: Gio.AppInfoIface.get_id.get_id.utf8
#COMMENT: a #GAppInfo.
#NAME: address
#PARENT: Gio.DBusServer
#COMMENT: The D-Bus address to listen on.
#NAME: get_state_hint
#PARENT: Gio.ActionInterface.get_state_hint.get_state_hint
#COMMENT: the state range hint
#NAME: resolver
#PARENT: Gio.SimpleProxyResolver.set_default_proxy.none
#COMMENT: a #GSimpleProxyResolver
#NAME: io_priority
#PARENT: Gio.File.delete_file_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: size
#PARENT: Gio.BufferedOutputStream.new_sized.OutputStream
#COMMENT: a #gsize.
#NAME: get_flags
#PARENT: Gio.Settings.get_flags
#COMMENT: the flags value
#NAME: receive_message
#PARENT: Gio.Socket.receive_message
#COMMENT: Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error
#NAME: info
#PARENT: Gio.FileEnumerator.get_child.File
#COMMENT: a #GFileInfo gotten from g_file_enumerator_next_file()
  or the async equivalents.
#NAME: shortcut
#PARENT: Gio.FileType
#COMMENT: File is a shortcut (Windows systems).
#NAME: cancellable
#PARENT: Gio.InputStreamClass.read_async.read_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: attributes
#PARENT: Gio.FileIOStreamClass.query_info_async.query_info_async.none
#COMMENT: a file attribute query string.
#NAME: remove
#PARENT: Gio.Menu
#COMMENT: Removes an item from the menu.

@position gives the index of the item to remove.

It is an error if position is not in range the range from 0 to one
less than the number of items in the menu.

It is not possible to remove items by identity since items are added
to the menu simply by copying their links and attributes (ie:
identity of the item itself is not preserved).
#NAME: position
#PARENT: Gio.MenuModel.items-changed.none
#COMMENT: the position of the change
#NAME: new_from_string
#PARENT: Gio.InetAddress
#COMMENT: Parses @string as an IP address and creates a new #GInetAddress.
#NAME: get_flowinfo
#PARENT: Gio.InetSocketAddress.get_flowinfo
#COMMENT: the flowinfo field
#NAME: query_settable_attributes
#PARENT: Gio.FileIface.query_settable_attributes.query_settable_attributes
#COMMENT: a #GFileAttributeInfoList describing the settable attributes.
    When you are done with it, release it with
    g_file_attribute_info_list_unref()
#NAME: BufferedInputStream
#PARENT: Gio
#COMMENT: Buffered input stream implements #GFilterInputStream and provides
for buffered reads.

By default, #GBufferedInputStream's buffer size is set at 4 kilobytes.

To create a buffered input stream, use g_buffered_input_stream_new(),
or g_buffered_input_stream_new_sized() to specify the buffer's size at
construction.

To get the size of a buffer within a buffered input stream, use
g_buffered_input_stream_get_buffer_size(). To change the size of a
buffered input stream's buffer, use
g_buffered_input_stream_set_buffer_size(). Note that the buffer's size
cannot be reduced below the size of the data within the buffer.
#NAME: get_name
#PARENT: Gio.Action.get_name
#COMMENT: the name of the action
#NAME: result
#PARENT: Gio.FileIface.delete_file_finish.delete_file_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for getting the unix device.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: prefix_matches
#PARENT: Gio.FileIface.prefix_matches.prefix_matches
#COMMENT: %TRUE if the @files's parent, grandparent, etc is @prefix,
    %FALSE otherwise.
#NAME: get_can_acquire
#PARENT: Gio.Permission
#COMMENT: Gets the value of the 'can-acquire' property.  This property is %TRUE
if it is generally possible to acquire the permission by calling
g_permission_acquire().
#NAME: num_dirs
#PARENT: Gio.FileIface.measure_disk_usage_finish.measure_disk_usage_finish.gboolean
#COMMENT: the number of directories encountered
#NAME: stream
#PARENT: Gio.FileInputStream.query_info_async.none
#COMMENT: a #GFileInputStream.
#NAME: DBusInterface
#PARENT: Gio
#COMMENT: The #GDBusInterface type is the base type for D-Bus interfaces both
on the service side (see #GDBusInterfaceSkeleton) and client side
(see #GDBusProxy).
#NAME: mount_operation
#PARENT: Gio.MountIface.remount.remount.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: socket
#PARENT: Gio.Socket.set_timeout.none
#COMMENT: a #GSocket.
#NAME: new
#PARENT: Gio.Initable.new
#COMMENT: a newly allocated
     #GObject, or %NULL on error
#NAME: object_path
#PARENT: Gio.DBusConnection.call_with_unix_fd_list.none
#COMMENT: path of remote object
#NAME: trash
#PARENT: Gio.File
#COMMENT: Sends @file to the "Trashcan", if possible. This is similar to
deleting it, but the user can recover it before emptying the trashcan.
Not all file systems support trashing, so this call can return the
%G_IO_ERROR_NOT_SUPPORTED error.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
#NAME: get_default
#PARENT: Gio.Resolver.get_default
#COMMENT: the default #GResolver.
#NAME: data
#PARENT: Gio.TlsCertificate.new_from_pem.TlsCertificate
#COMMENT: PEM-encoded certificate data
#NAME: file
#PARENT: Gio.File.query_filesystem_info.FileInfo
#COMMENT: input #GFile
#NAME: new_from_string
#PARENT: Gio.InetAddress.new_from_string
#COMMENT: a new #GInetAddress corresponding to @string, or %NULL if
@string could not be parsed.
#NAME: user_data
#PARENT: Gio.FileIface.read_async.read_async.none
#COMMENT: the data to pass to callback function
#NAME: n_parameters
#PARENT: Gio.initable_newv.GObject.Object
#COMMENT: the number of parameters in @parameters
#NAME: get_parse_name
#PARENT: Gio.FileIface.get_parse_name.get_parse_name
#COMMENT: a string containing the #GFile's parse name.
    The returned string should be freed with g_free()
    when no longer needed.
#NAME: key
#PARENT: Gio.SettingsSchemaKey.get_range.GLib.Variant
#COMMENT: a #GSettingsSchemaKey
#NAME: get_is_backup
#PARENT: Gio.FileInfo.get_is_backup
#COMMENT: %TRUE if file is a backup file, %FALSE otherwise.
#NAME: drive
#PARENT: Gio.VolumeMonitor.drive-connected.none
#COMMENT: a #GDrive that was connected.
#NAME: new_from_pem
#PARENT: Gio.TlsCertificate.new_from_pem
#COMMENT: the new certificate, or %NULL if @data is invalid
#NAME: new_finish
#PARENT: Gio.DBusConnection.new_finish
#COMMENT: a #GDBusConnection or %NULL if @error is set. Free
    with g_object_unref().
#NAME: accept-certificate
#PARENT: Gio.TlsConnection.accept-certificate
#COMMENT: %TRUE to accept @peer_cert (which will also
immediately end the signal emission). %FALSE to allow the signal
emission to continue, which will cause the handshake to fail if
no one else overrides it.
#NAME: g_iface
#PARENT: Gio.ListModelInterface
#COMMENT: parent #GTypeInterface
#NAME: get_bytes
#PARENT: Gio.BytesIcon
#COMMENT: Gets the #GBytes associated with the given @icon.
#NAME: connection
#PARENT: Gio.DBusInterfaceSkeleton.export.gboolean
#COMMENT: A #GDBusConnection to export @interface_ on.
#NAME: etag
#PARENT: Gio.File.replace_contents.gboolean
#COMMENT: the old [entity-tag][gfile-etag] for the document,
    or %NULL
#NAME: cancellable
#PARENT: Gio.OutputStreamClass.flush_async.flush_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: interaction
#PARENT: Gio.TlsDatabase.lookup_certificate_for_handle.TlsCertificate
#COMMENT: used to interact with the user if necessary
#NAME: receive_with_blocking
#PARENT: Gio.Socket.receive_with_blocking
#COMMENT: Number of bytes read, or 0 if the connection was closed by
the peer, or -1 on error
#NAME: send_with_blocking
#PARENT: Gio.Socket
#COMMENT: This behaves exactly the same as g_socket_send(), except that
the choice of blocking or non-blocking behavior is determined by
the @blocking argument rather than by @socket's properties.
#NAME: parse_name
#PARENT: Gio.file_parse_name.File
#COMMENT: a file name or path to be parsed
#NAME: DBusMessageFilterFunction
#PARENT: Gio.DBusMessageFilterFunction
#COMMENT: A #GDBusMessage that will be freed with
g_object_unref() or %NULL to drop the message. Passive filter
functions can simply return the passed @message object.
#NAME: FILE_ATTRIBUTE_THUMBNAIL_PATH
#PARENT: Gio
#COMMENT: A key in the "thumbnail" namespace for getting the path to the thumbnail
image. Corresponding #GFileAttributeType is
%G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
#NAME: set_unix_user
#PARENT: Gio.Credentials
#COMMENT: Tries to set the UNIX user identifier on @credentials. This method
is only available on UNIX platforms.

This operation can fail if #GCredentials is not supported on the
OS or if the native credentials type does not contain information
about the UNIX user. It can also fail if the OS does not allow the
use of "spoofed" credentials.
#NAME: none
#PARENT: Gio.SocketMsgFlags
#COMMENT: No flags.
#NAME: result
#PARENT: Gio.Volume.mount_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeletonClass.flush.flush.none
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: target
#PARENT: Gio.SrvTarget.get_priority.guint16
#COMMENT: a #GSrvTarget
#NAME: annotations
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.
#NAME: settings
#PARENT: Gio.Settings.get_boolean.gboolean
#COMMENT: a #GSettings object
#NAME: attribute
#PARENT: Gio.FileInfo.set_attribute_uint64.none
#COMMENT: a file attribute key.
#NAME: new-connection
#PARENT: Gio.DBusServer
#COMMENT: Emitted when a new authenticated connection has been made. Use
g_dbus_connection_get_peer_credentials() to figure out what
identity (if any), was authenticated.

If you want to accept the connection, take a reference to the
@connection object and return %TRUE. When you are done with the
connection call g_dbus_connection_close() and give up your
reference. Note that the other peer may disconnect at any time -
a typical thing to do when accepting a connection is to listen to
the #GDBusConnection::closed signal.

If #GDBusServer:flags contains %G_DBUS_SERVER_FLAGS_RUN_IN_THREAD
then the signal is emitted in a new thread dedicated to the
connection. Otherwise the signal is emitted in the
[thread-default main context][g-main-context-push-thread-default]
of the thread that @server was constructed in.

You are guaranteed that signal handlers for this signal runs
before incoming messages on @connection are processed. This means
that it's suitable to call g_dbus_connection_register_object() or
similar from the signal handler.
#NAME: get_name
#PARENT: Gio.FileInfo
#COMMENT: Gets the name for a file.
#NAME: next
#PARENT: Gio.SocketAddressEnumerator.next
#COMMENT: a #GSocketAddress (owned by the caller), or %NULL on
    error (in which case *@error will be set) or if there are no
    more addresses.
#NAME: file
#PARENT: Gio.FileIface.make_directory.make_directory.gboolean
#COMMENT: input #GFile
#NAME: create
#PARENT: Gio.FileIface.create.create
#COMMENT: a #GFileOutputStream for the newly created
    file, or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: mount_entry
#PARENT: Gio.unix_mount_guess_should_display.gboolean
#COMMENT: a #GUnixMountEntry
#NAME: lookup
#PARENT: Gio.SimpleActionGroup
#COMMENT: Looks up the action with the name @action_name in the group.

If no such action exists, returns %NULL.
#NAME: conn
#PARENT: Gio.TlsConnection.get_use_system_certdb.gboolean
#COMMENT: a #GTlsConnection
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.create_file_for_arg.File
#COMMENT: a #GApplicationCommandLine
#NAME: io_extension_point_register
#PARENT: Gio
#COMMENT: Registers an extension point.
#NAME: export_menu_model
#PARENT: Gio.DBusConnection.export_menu_model
#COMMENT: the ID of the export (never zero), or 0 in case of failure
#NAME: object_path
#PARENT: Gio.DBusObjectManagerClient.new_sync.DBusObjectManagerClient
#COMMENT: The object path of the control object.
#NAME: callback
#PARENT: Gio.Resolver.lookup_by_address_async.none
#COMMENT: callback to call after resolution completes
#NAME: list_sort
#PARENT: Gio.SrvTarget.list_sort
#COMMENT: the head of the sorted list.
#NAME: auto_start
#PARENT: Gio.BusNameWatcherFlags
#COMMENT: If no-one owns the name when
beginning to watch the name, ask the bus to launch an owner for the
name.
#NAME: observer
#PARENT: Gio.DBusConnection.new.none
#COMMENT: a #GDBusAuthObserver or %NULL
#NAME: get_length
#PARENT: Gio.InetAddressMask.get_length
#COMMENT: @mask's length
#NAME: appinfo
#PARENT: Gio.AppInfoIface.get_supported_types.get_supported_types.utf8
#COMMENT: a #GAppInfo that can handle files
#NAME: not_supported
#PARENT: Gio.DBusError
#COMMENT: Requested operation isn't supported (like ENOSYS on UNIX).
#NAME: interface
#PARENT: Gio.DBusObjectManager.interface-removed.none
#COMMENT: The #GDBusInterface that was removed.
#NAME: AsyncInitable
#PARENT: Gio
#COMMENT: This is the asynchronous version of #GInitable; it behaves the same
in all ways except that initialization is asynchronous. For more details
see the descriptions on #GInitable.

A class may implement both the #GInitable and #GAsyncInitable interfaces.

Users of objects implementing this are not intended to use the interface
method directly; instead it will be used automatically in various ways.
For C applications you generally just call g_async_initable_new_async()
directly, or indirectly via a foo_thing_new_async() wrapper. This will call
g_async_initable_init_async() under the cover, calling back with %NULL and
a set %GError on failure.

A typical implementation might look something like this:

|[<!-- language="C" -->
enum {
   NOT_INITIALIZED,
   INITIALIZING,
   INITIALIZED
};

static void
_foo_ready_cb (Foo *self)
{
  GList *l;

  self->priv->state = INITIALIZED;

  for (l = self->priv->init_results; l != NULL; l = l->next)
    {
      GTask *task = l->data;

      if (self->priv->success)
        g_task_return_boolean (task, TRUE);
      else
        g_task_return_new_error (task, ...);
      g_object_unref (task);
    }

  g_list_free (self->priv->init_results);
  self->priv->init_results = NULL;
}

static void
foo_init_async (GAsyncInitable       *initable,
                int                   io_priority,
                GCancellable         *cancellable,
                GAsyncReadyCallback   callback,
                gpointer              user_data)
{
  Foo *self = FOO (initable);
  GTask *task;

  task = g_task_new (initable, cancellable, callback, user_data);

  switch (self->priv->state)
    {
      case NOT_INITIALIZED:
        _foo_get_ready (self);
        self->priv->init_results = g_list_append (self->priv->init_results,
                                                  task);
        self->priv->state = INITIALIZING;
        break;
      case INITIALIZING:
        self->priv->init_results = g_list_append (self->priv->init_results,
                                                  task);
        break;
      case INITIALIZED:
        if (!self->priv->success)
          g_task_return_new_error (task, ...);
        else
          g_task_return_boolean (task, TRUE);
        g_object_unref (task);
        break;
    }
}

static gboolean
foo_init_finish (GAsyncInitable       *initable,
                 GAsyncResult         *result,
                 GError              **error)
{
  g_return_val_if_fail (g_task_is_valid (result, initable), FALSE);

  return g_task_propagate_boolean (G_TASK (result), error);
}

static void
foo_async_initable_iface_init (gpointer g_iface,
                               gpointer data)
{
  GAsyncInitableIface *iface = g_iface;

  iface->init_async = foo_init_async;
  iface->init_finish = foo_init_finish;
}
]|
#NAME: new_submenu
#PARENT: Gio.MenuItem.new_submenu
#COMMENT: a new #GMenuItem
#NAME: out_link
#PARENT: Gio.MenuLinkIterClass.get_next.get_next.gboolean
#COMMENT: the name of the link
#NAME: FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE
#PARENT: Gio
#COMMENT: A key in the "mountable" namespace for getting the #GDriveStartStopType.
Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
#NAME: SubprocessLauncher
#PARENT: Gio
#COMMENT: This class contains a set of options for launching child processes,
such as where its standard input and output will be directed, the
argument list, the environment, and more.

While the #GSubprocess class has high level functions covering
popular cases, use of this class allows access to more advanced
options.  It can also be used to launch multiple subprocesses with
a similar configuration.
#NAME: result
#PARENT: Gio.TlsConnectionClass.handshake_finish.handshake_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: model
#PARENT: Gio.MenuModelClass.get_item_link.get_item_link.MenuModel
#COMMENT: a #GMenuModel
#NAME: proxy
#PARENT: Gio.ProxyInterface.connect_async.connect_async.none
#COMMENT: a #GProxy
#NAME: get_interface
#PARENT: Gio.DBusObjectIface.get_interface.get_interface
#COMMENT: %NULL if not found, otherwise a
  #GDBusInterface that must be freed with g_object_unref().
#NAME: user_data
#PARENT: Gio.simple_async_report_error_in_idle.none
#COMMENT: user data passed to @callback.
#NAME: CharsetConverter
#PARENT: Gio
#COMMENT: #GCharsetConverter is an implementation of #GConverter based on
GIConv.
#NAME: submenu
#PARENT: Gio.MenuItem.set_submenu.none
#COMMENT: a #GMenuModel, or %NULL
#NAME: source
#PARENT: Gio.OutputStream.splice_async.none
#COMMENT: a #GInputStream.
#NAME: new_with_fd_list
#PARENT: Gio.UnixFDMessage.new_with_fd_list
#COMMENT: a new #GUnixFDMessage
#NAME: flags
#PARENT: Gio.File.move.gboolean
#COMMENT: set of #GFileCopyFlags
#NAME: task_func
#PARENT: Gio.Task.run_in_thread.none
#COMMENT: a #GTaskThreadFunc
#NAME: invoke_request_certificate
#PARENT: Gio.TlsInteraction
#COMMENT: Invoke the interaction to ask the user to choose a certificate to
use with the connection. It invokes this interaction in the main
loop, specifically the #GMainContext returned by
g_main_context_get_thread_default() when the interaction is
created. This is called by called by #GTlsConnection when the peer
requests a certificate during the handshake.

Derived subclasses usually implement a certificate selector,
although they may also choose to provide a certificate from
elsewhere. Alternatively the user may abort this certificate
request, which may or may not abort the TLS connection.

The implementation can either be a synchronous (eg: modal dialog) or an
asynchronous one (eg: modeless dialog). This function will take care of
calling which ever one correctly.

If the interaction is cancelled by the cancellation object, or by the
user then %G_TLS_INTERACTION_FAILED will be returned with an error that
contains a %G_IO_ERROR_CANCELLED error code. Certain implementations may
not support immediate cancellation.
#NAME: stop_finish
#PARENT: Gio.Drive.stop_finish
#COMMENT: %TRUE if the drive has been stopped successfully,
    %FALSE otherwise.
#NAME: name
#PARENT: Gio.DBusPropertyInfo
#COMMENT: The name of the D-Bus property, e.g. "SupportedFilesystems".
#NAME: get_tls
#PARENT: Gio.SocketClient
#COMMENT: Gets whether @client creates TLS connections. See
g_socket_client_set_tls() for details.
#NAME: address
#PARENT: Gio.Socket.send_to.gssize
#COMMENT: a #GSocketAddress, or %NULL
#NAME: communicate_utf8_async
#PARENT: Gio.Subprocess
#COMMENT: Asynchronous version of g_subprocess_communicate_utf8().  Complete
invocation with g_subprocess_communicate_utf8_finish().
#NAME: icon_deserialize
#PARENT: Gio.icon_deserialize
#COMMENT: a #GIcon, or %NULL when deserialization fails.
#NAME: get_locked
#PARENT: Gio.DBusMessage.get_locked
#COMMENT: %TRUE if @message is locked, %FALSE otherwise.
#NAME: get_is_registered
#PARENT: Gio.Application
#COMMENT: Checks if @application is registered.

An application is registered if g_application_register() has been
successfully called.
#NAME: can_start_degraded
#PARENT: Gio.DriveIface.can_start_degraded.can_start_degraded
#COMMENT: %TRUE if the @drive can be started degraded, %FALSE otherwise.
#NAME: record_type
#PARENT: Gio.Resolver.lookup_records.GLib.Variant
#COMMENT: the type of DNS record to lookup
#NAME: desktop_env
#PARENT: Gio.DesktopAppInfo.set_desktop_env.none
#COMMENT: a string specifying what desktop this is
#NAME: get_name
#PARENT: Gio.Mount
#COMMENT: Gets the name of @mount.
#NAME: file
#PARENT: Gio.File.set_attribute_string.gboolean
#COMMENT: input #GFile
#NAME: cancellable
#PARENT: Gio.DBusConnection.flush.none
#COMMENT: a #GCancellable or %NULL
#NAME: pollable_stream_write
#PARENT: Gio
#COMMENT: Tries to write to @stream, as with g_output_stream_write() (if
@blocking is %TRUE) or g_pollable_output_stream_write_nonblocking()
(if @blocking is %FALSE). This can be used to more easily share
code between blocking and non-blocking implementations of a method.

If @blocking is %FALSE, then @stream must be a
#GPollableOutputStream for which
g_pollable_output_stream_can_poll() returns %TRUE or else the
behavior is undefined. If @blocking is %TRUE, then @stream does not
need to be a #GPollableOutputStream.
#NAME: parent
#PARENT: Gio.File.has_parent.gboolean
#COMMENT: the parent to check for, or %NULL
#NAME: get_n_items
#PARENT: Gio.MenuModel.get_n_items
#COMMENT: the number of items
#NAME: unexport_action_group
#PARENT: Gio.DBusConnection
#COMMENT: Reverses the effect of a previous call to
g_dbus_connection_export_action_group().

It is an error to call this function with an ID that wasn't returned
from g_dbus_connection_export_action_group() or to call it with the
same ID more than once.
#NAME: format
#PARENT: Gio.SimpleAsyncResult.new_error.SimpleAsyncResult
#COMMENT: a string with format characters.
#NAME: flags
#PARENT: Gio.TlsDatabase.verify_chain.TlsCertificateFlags
#COMMENT: additional verify flags
#NAME: unregister_object
#PARENT: Gio.DBusConnection.unregister_object
#COMMENT: %TRUE if the object was unregistered, %FALSE otherwise
#NAME: password
#PARENT: Gio.TlsPasswordClass.set_value.set_value.none
#COMMENT: a #GTlsPassword object
#NAME: result
#PARENT: Gio.OutputStream.write_finish.gssize
#COMMENT: a #GAsyncResult.
#NAME: new
#PARENT: Gio.FilenameCompleter.new
#COMMENT: a #GFilenameCompleter.
#NAME: g-default-timeout
#PARENT: Gio.DBusProxy
#COMMENT: The timeout to use if -1 (specifying default timeout) is passed
as @timeout_msec in the g_dbus_proxy_call() and
g_dbus_proxy_call_sync() functions.

This allows applications to set a proxy-wide timeout for all
remote method invocations on the proxy. If this property is -1,
the default timeout (typically 25 seconds) is used. If set to
%G_MAXINT, then no timeout is used.
#NAME: info
#PARENT: Gio.FileInfo.get_icon.Icon
#COMMENT: a #GFileInfo.
#NAME: password
#PARENT: Gio.DriveStartStopType
#COMMENT: The start/stop methods will
   unlock/lock the disk (for example using the ATA <quote>SECURITY
   UNLOCK DEVICE</quote> command)
#NAME: user_data
#PARENT: Gio.FileIface.query_filesystem_info_async.query_filesystem_info_async.none
#COMMENT: the data to pass to callback function
#NAME: user_data
#PARENT: Gio.DriveIface.eject.eject.none
#COMMENT: user data to pass to @callback
#NAME: get_source_tag
#PARENT: Gio.Task.get_source_tag
#COMMENT: @task's source tag
#NAME: unexport
#PARENT: Gio.DBusObjectManagerServer
#COMMENT: If @manager has an object at @path, removes the object. Otherwise
does nothing.

Note that @object_path must be in the hierarchy rooted by the
object path for @manager.
#NAME: get_mount_for_uuid
#PARENT: Gio.VolumeMonitorClass.get_mount_for_uuid.get_mount_for_uuid
#COMMENT: a #GMount or %NULL if no such mount is available.
    Free the returned object with g_object_unref().
#NAME: is_closed
#PARENT: Gio.FileEnumerator.is_closed
#COMMENT: %TRUE if the @enumerator is closed.
#NAME: callback
#PARENT: Gio.FileEnumerator.next_files_async.none
#COMMENT: a #GAsyncReadyCallback to call when the request is satisfied
#NAME: label
#PARENT: Gio.Menu.insert_submenu.none
#COMMENT: the section label, or %NULL
#NAME: callback
#PARENT: Gio.Proxy.connect_async.none
#COMMENT: a #GAsyncReadyCallback
#NAME: is_cancelled
#PARENT: Gio.FileMonitor.is_cancelled
#COMMENT: %TRUE if monitor is canceled. %FALSE otherwise.
#NAME: get_string
#PARENT: Gio.Settings
#COMMENT: Gets the value that is stored at @key in @settings.

A convenience variant of g_settings_get() for strings.

It is a programmer error to give a @key that isn't specified as
having a string type in the schema for @settings.
#NAME: send_to
#PARENT: Gio.Socket.send_to
#COMMENT: Number of bytes written (which may be less than @size), or -1
on error
#NAME: result
#PARENT: Gio.BufferedInputStreamClass.fill_finish.fill_finish.gssize
#COMMENT: a #GAsyncResult
#NAME: lookup_by_name_async
#PARENT: Gio.Resolver
#COMMENT: Begins asynchronously resolving @hostname to determine its
associated IP address(es), and eventually calls @callback, which
must call g_resolver_lookup_by_name_finish() to get the result.
See g_resolver_lookup_by_name() for more details.
#NAME: attribute
#PARENT: Gio.FileInfo.get_attribute_uint64.guint64
#COMMENT: a file attribute key.
#NAME: key
#PARENT: Gio.DesktopAppInfo.get_string.utf8
#COMMENT: the key to look up
#NAME: initial_text
#PARENT: Gio.FilenameCompleter.get_completions.utf8
#COMMENT: text to be completed.
#NAME: flags
#PARENT: Gio.File.set_attribute_uint64.gboolean
#COMMENT: a #GFileQueryInfoFlags
#NAME: get_family
#PARENT: Gio.InetAddressMask.get_family
#COMMENT: the #GSocketFamily of @mask's address
#NAME: lookup_records
#PARENT: Gio.Resolver
#COMMENT: Synchronously performs a DNS record lookup for the given @rrname and returns
a list of records as #GVariant tuples. See #GResolverRecordType for
information on what the records contain for each @record_type.

If the DNS resolution fails, @error (if non-%NULL) will be set to
a value from #GResolverError and %NULL will be returned.

If @cancellable is non-%NULL, it can be used to cancel the
operation, in which case @error (if non-%NULL) will be set to
%G_IO_ERROR_CANCELLED.
#NAME: type
#PARENT: Gio.SocketConnection.factory_register_type.none
#COMMENT: a #GSocketType
#NAME: mount_point
#PARENT: Gio.UnixMountPoint.guess_symbolic_icon.Icon
#COMMENT: a #GUnixMountPoint
#NAME: set_pending
#PARENT: Gio.OutputStream.set_pending
#COMMENT: %TRUE if pending was previously unset and is now set.
#NAME: buffer
#PARENT: Gio.Socket.receive_with_blocking.gssize
#COMMENT: a buffer to
    read data into (which should be at least @size bytes long).
#NAME: type
#PARENT: Gio.DBusMessage.set_message_type.none
#COMMENT: A 8-bit unsigned integer (typically a value from the #GDBusMessageType enumeration).
#NAME: get_value
#PARENT: Gio.MenuLinkIter.get_value
#COMMENT: the #GMenuModel that is linked to
#NAME: should_show
#PARENT: Gio.AppInfo.should_show
#COMMENT: %TRUE if the @appinfo should be shown, %FALSE otherwise.
#NAME: flags
#PARENT: Gio.File.unmount_mountable_with_operation.none
#COMMENT: flags affecting the operation
#NAME: get_scheme
#PARENT: Gio.NetworkAddress
#COMMENT: Gets @addr's scheme
#NAME: certificate_required
#PARENT: Gio.TlsError
#COMMENT: The TLS handshake failed because
  the server requested a client-side certificate, but none was
  provided. See g_tls_connection_set_certificate().
#NAME: enumerator
#PARENT: Gio.FileEnumerator.next_files_async.none
#COMMENT: a #GFileEnumerator.
#NAME: source
#PARENT: Gio.File.move.gboolean
#COMMENT: #GFile pointing to the source location
#NAME: listener
#PARENT: Gio.SocketListener.set_backlog.none
#COMMENT: a #GSocketListener
#NAME: get_volumes
#PARENT: Gio.VolumeMonitor
#COMMENT: Gets a list of the volumes on the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().
#NAME: cwd
#PARENT: Gio.File.new_for_commandline_arg_and_cwd.File
#COMMENT: the current working directory of the commandline
#NAME: accept_finish
#PARENT: Gio.SocketListener.accept_finish
#COMMENT: a #GSocketConnection on success, %NULL on error.
#NAME: info
#PARENT: Gio.FileInfo.set_attribute_stringv.none
#COMMENT: a #GFileInfo.
#NAME: subprocess
#PARENT: Gio.Subprocess.get_stdin_pipe.OutputStream
#COMMENT: a #GSubprocess
#NAME: mount
#PARENT: Gio.MountIface.get_root.get_root.File
#COMMENT: a #GMount.
#NAME: 
#PARENT: Gio.DBusError.set_dbus_error.none...
#COMMENT: Arguments for @format.
#NAME: stream
#PARENT: Gio.OutputStream.write.gssize
#COMMENT: a #GOutputStream.
#NAME: get_family
#PARENT: Gio.SocketAddress
#COMMENT: Gets the socket family type of @address.
#NAME: flags_none
#PARENT: Gio.ApplicationFlags
#COMMENT: Default
#NAME: is_launcher
#PARENT: Gio.ApplicationFlags
#COMMENT: Don't try to become the primary instance.
#NAME: username
#PARENT: Gio.ProxyAddress.new.SocketAddress
#COMMENT: The username to authenticate to the proxy server
    (or %NULL).
#NAME: port
#PARENT: Gio.InetSocketAddress.new.SocketAddress
#COMMENT: a port number
#NAME: interface
#PARENT: Gio.DBusObject.interface-added.none
#COMMENT: The #GDBusInterface that was added.
#NAME: user_data
#PARENT: Gio.FileIface.measure_disk_usage_async.measure_disk_usage_async.none
#COMMENT: the data to pass to callback function
#NAME: query_info
#PARENT: Gio.FileIOStream
#COMMENT: Queries a file io stream for the given @attributes.
This function blocks while querying the stream. For the asynchronous
version of this function, see g_file_io_stream_query_info_async().
While the stream is blocked, the stream will set the pending flag
internally, and any other operations on the stream will fail with
%G_IO_ERROR_PENDING.

Can fail if the stream was already closed (with @error being set to
%G_IO_ERROR_CLOSED), the stream has pending operations (with @error being
set to %G_IO_ERROR_PENDING), or if querying info is not supported for
the stream's interface (with @error being set to %G_IO_ERROR_NOT_SUPPORTED). I
all cases of failure, %NULL will be returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %NULL will
be returned.
#NAME: get_password
#PARENT: Gio.MountOperation
#COMMENT: Gets a password from the mount operation.
#NAME: monitor
#PARENT: Gio.NetworkMonitorInterface.can_reach.can_reach.gboolean
#COMMENT: a #GNetworkMonitor
#NAME: equal
#PARENT: Gio.InetAddressMask
#COMMENT: Tests if @mask and @mask2 are the same mask.
#NAME: message
#PARENT: Gio.MountOperation.show-unmount-progress.none
#COMMENT: string containing a mesage to display to the user
#NAME: client
#PARENT: Gio.SocketClient.connect_to_host_async.none
#COMMENT: a #GSocketClient
#NAME: flags
#PARENT: Gio.Mount.eject_with_operation.none
#COMMENT: flags affecting the unmount if required for eject
#NAME: settings
#PARENT: Gio.Settings.is_writable.gboolean
#COMMENT: a #GSettings object
#NAME: volume_monitor
#PARENT: Gio.VolumeMonitor.get_mount_for_uuid.Mount
#COMMENT: a #GVolumeMonitor.
#NAME: set_validation_flags
#PARENT: Gio.TlsClientConnection
#COMMENT: Sets @conn's validation flags, to override the default set of
checks performed when validating a server certificate. By default,
%G_TLS_CERTIFICATE_VALIDATE_ALL is used.
#NAME: flags
#PARENT: Gio.DBusObjectManagerClient.new.none
#COMMENT: Zero or more flags from the #GDBusObjectManagerClientFlags enumeration.
#NAME: uri
#PARENT: Gio.ProxyResolver.lookup_async.none
#COMMENT: a URI representing the destination to connect to
#NAME: blocking
#PARENT: Gio.pollable_stream_read.gssize
#COMMENT: whether to do blocking I/O
#NAME: event_type
#PARENT: Gio.FileMonitor.changed.none
#COMMENT: a #GFileMonitorEvent.
#NAME: get_action_enabled
#PARENT: Gio.ActionGroup
#COMMENT: Checks if the named action within @action_group is currently enabled.

An action must be enabled in order to be activated or in order to
have its state changed from outside callers.
#NAME: rrname
#PARENT: Gio.Resolver.lookup_records.GLib.Variant
#COMMENT: the DNS name to lookup the record for
#NAME: get_state_type
#PARENT: Gio.ActionInterface.get_state_type.get_state_type
#COMMENT: the state type, if the action is stateful
#NAME: cmdline
#PARENT: Gio.ApplicationCommandLine.get_stdin.InputStream
#COMMENT: a #GApplicationCommandLine
#NAME: application
#PARENT: Gio.Application.hold.none
#COMMENT: a #GApplication
#NAME: value
#PARENT: Gio.Settings.set_boolean.gboolean
#COMMENT: the value to set it to
#NAME: error
#PARENT: Gio.DBusError.strip_remote_error.gboolean
#COMMENT: A #GError.
#NAME: node
#PARENT: Gio.DBusSubtreeDispatchFunc.DBusInterfaceVTable
#COMMENT: A node that is a child of @object_path (relative to @object_path) or %NULL for the root of the subtree.
#NAME: icon
#PARENT: Gio.EmblemedIcon.new.EmblemedIcon
#COMMENT: a #GIcon
#NAME: detailed_name
#PARENT: Gio.action_parse_detailed_name.gboolean
#COMMENT: a detailed action name
#NAME: FILE_ATTRIBUTE_DOS_IS_ARCHIVE
#PARENT: Gio
#COMMENT: A key in the "dos" namespace for checking if the file's archive flag
is set. This attribute is %TRUE if the archive flag is set. This attribute
is only available for DOS file systems. Corresponding #GFileAttributeType
is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#NAME: user_data
#PARENT: Gio.DBusConnection.register_subtree.guint
#COMMENT: data to pass to functions in @vtable
#NAME: get_state
#PARENT: Gio.ActionInterface.get_state.get_state
#COMMENT: the current state of the action
#NAME: g-name
#PARENT: Gio.DBusProxy
#COMMENT: The well-known or unique name that the proxy is for.
#NAME: bytes_written
#PARENT: Gio.ConverterIface.convert.convert.ConverterResult
#COMMENT: will be set to the number of bytes written to @outbuf on success
#NAME: menu_item
#PARENT: Gio.MenuItem.set_label.none
#COMMENT: a #GMenuItem
#NAME: TlsFileDatabase
#PARENT: Gio
#COMMENT: #GTlsFileDatabase is implemented by #GTlsDatabase objects which load
their certificate information from a file. It is an interface which
TLS library specific subtypes implement.
#NAME: content_type_equals
#PARENT: Gio.content_type_equals
#COMMENT: %TRUE if the two strings are identical or equivalent,
    %FALSE otherwise.
#NAME: dbus_error_message
#PARENT: Gio.DBusError.set_dbus_error_valist.none
#COMMENT: D-Bus error message.
#NAME: flags
#PARENT: Gio.File.replace_contents_bytes_async.none
#COMMENT: a set of #GFileCreateFlags
#NAME: VOLUME_MONITOR_EXTENSION_POINT_NAME
#PARENT: Gio
#COMMENT: Extension point for volume monitor functionality.
See [Extending GIO][extending-gio].
#NAME: set_display_name
#PARENT: Gio.File.set_display_name
#COMMENT: a #GFile specifying what @file was renamed to,
    or %NULL if there was an error.
    Free the returned object with g_object_unref().
#NAME: make_pollfd
#PARENT: Gio.Cancellable
#COMMENT: Creates a #GPollFD corresponding to @cancellable; this can be passed
to g_poll() and used to poll for cancellation. This is useful both
for unix systems without a native poll and for portability to
windows.

When this function returns %TRUE, you should use
g_cancellable_release_fd() to free up resources allocated for the
@pollfd. After a %FALSE return, do not call g_cancellable_release_fd().

If this function returns %FALSE, either no @cancellable was given or
resource limits prevent this function from allocating the necessary
structures for polling. (On Linux, you will likely have reached
the maximum number of file descriptors.) The suggested way to handle
these cases is to ignore the @cancellable.

You are not supposed to read from the fd yourself, just check for
readable status. Reading to unset the readable status is done
with g_cancellable_reset().
#NAME: cancellable
#PARENT: Gio.DBusProxy.call_sync.GLib.Variant
#COMMENT: A #GCancellable or %NULL.
#NAME: application
#PARENT: Gio.Application.set_flags.none
#COMMENT: a #GApplication
#NAME: oob
#PARENT: Gio.SocketMsgFlags
#COMMENT: Request to send/receive out of band data.
#NAME: new
#PARENT: Gio.UnixInputStream.new
#COMMENT: a new #GUnixInputStream
#NAME: g-object-path
#PARENT: Gio.DBusObjectProxy
#COMMENT: The object path of the proxy.
#NAME: get_attribute_data
#PARENT: Gio.FileInfo
#COMMENT: Gets the attribute type, value and status for an attribute key.
#NAME: signature
#PARENT: Gio.DBusArgInfo
#COMMENT: D-Bus signature of the argument (a single complete type).
#NAME: can_truncate
#PARENT: Gio.Seekable.can_truncate
#COMMENT: %TRUE if the stream can be truncated, %FALSE otherwise.
#NAME: allowed
#PARENT: Gio.SimplePermission.new.Permission
#COMMENT: %TRUE if the action is allowed
#NAME: callback
#PARENT: Gio.OutputStream.close_async.none
#COMMENT: callback to call when the request is satisfied
#NAME: get_op_res_gpointer
#PARENT: Gio.SimpleAsyncResult.get_op_res_gpointer
#COMMENT: a pointer from the result.
#NAME: action
#PARENT: Gio.ActionInterface.get_state_type.get_state_type.GLib.VariantType
#COMMENT: a #GAction
#NAME: get_network_available
#PARENT: Gio.NetworkMonitor.get_network_available
#COMMENT: whether the network is available
#NAME: application
#PARENT: Gio.Application.local_command_line.gboolean
#COMMENT: a #GApplication
#NAME: cancellable
#PARENT: Gio.OutputStream.write_bytes_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: decompressor
#PARENT: Gio.ZlibDecompressor.get_file_info.FileInfo
#COMMENT: a #GZlibDecompressor
#NAME: FileDescriptorBased
#PARENT: Gio
#COMMENT: #GFileDescriptorBased is implemented by streams (implementations of
#GInputStream or #GOutputStream) that are based on file descriptors.

Note that `<gio/gfiledescriptorbased.h>` belongs to the UNIX-specific
GIO interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
file when using it.
#NAME: path
#PARENT: Gio.DBusMessageHeaderField
#COMMENT: The object path.
#NAME: self
#PARENT: Gio.TestDBus.get_bus_address.utf8
#COMMENT: a #GTestDBus
#NAME: VolumeMonitor
#PARENT: Gio
#COMMENT: #GVolumeMonitor is for listing the user interesting devices and volumes
on the computer. In other words, what a file selector or file manager
would show in a sidebar.

#GVolumeMonitor is not
[thread-default-context aware][g-main-context-push-thread-default],
and so should not be used other than from the main thread, with no
thread-default-context active.
#NAME: message
#PARENT: Gio.DBusMessage.get_header.GLib.Variant
#COMMENT: A #GDBusMessage.
#NAME: errors
#PARENT: Gio.TlsConnection.emit_accept_certificate.gboolean
#COMMENT: the problems with @peer_cert
#NAME: file_new_for_commandline_arg
#PARENT: Gio
#COMMENT: Creates a #GFile with the given argument from the command line.
The value of @arg can be either a URI, an absolute path or a
relative path resolved relative to the current working directory.
This operation never fails, but the returned object might not
support any I/O operation if @arg points to a malformed path.

Note that on Windows, this function expects its argument to be in
UTF-8 -- not the system code page.  This means that you
should not use this function with string from argv as it is passed
to main().  g_win32_get_command_line() will return a UTF-8 version of
the commandline.  #GApplication also uses UTF-8 but
g_application_command_line_create_file_for_arg() may be more useful
for you there.  It is also always possible to use this function with
#GOptionContext arguments of type %G_OPTION_ARG_FILENAME.
#NAME: ThemedIcon
#PARENT: Gio
#COMMENT: #GThemedIcon is an implementation of #GIcon that supports icon themes.
#GThemedIcon contains a list of all of the icons present in an icon
theme, so that icons can be looked up quickly. #GThemedIcon does
not provide actual pixmaps for icons, just the icon names.
Ideally something like gtk_icon_theme_choose_icon() should be used to
resolve the list of names so that fallback icons work nicely with
themes that inherit other themes.
#NAME: file
#PARENT: Gio.File.monitor_directory.FileMonitor
#COMMENT: input #GFile
#NAME: export_id
#PARENT: Gio.DBusConnection.unexport_action_group.none
#COMMENT: the ID from g_dbus_connection_export_action_group()
#NAME: can_eject
#PARENT: Gio.MountIface.can_eject.can_eject
#COMMENT: %TRUE if the @mount can be ejected.
#NAME: make_directory
#PARENT: Gio.File.make_directory
#COMMENT: %TRUE on successful creation, %FALSE otherwise.
#NAME: ActionMapInterface
#PARENT: Gio
#COMMENT: The virtual function table for #GActionMap.
#NAME: io_priority
#PARENT: Gio.FileOutputStream.query_info_async.none
#COMMENT: the [I/O priority][gio-GIOScheduler] of the request
#NAME: seekable
#PARENT: Gio.SeekableIface.tell.tell.gint64
#COMMENT: a #GSeekable.
#NAME: size
#PARENT: Gio.Socket.send_with_blocking.gssize
#COMMENT: the number of bytes to send
#NAME: appinfo
#PARENT: Gio.AppInfoIface.set_as_default_for_extension.set_as_default_for_extension.gboolean
#COMMENT: a #GAppInfo.
#NAME: get_arg0
#PARENT: Gio.DBusMessage.get_arg0
#COMMENT: The string item or %NULL if the first item in the body of
@message is not a string.
#NAME: get_flags
#PARENT: Gio.Application
#COMMENT: Gets the flags for @application.

See #GApplicationFlags.
#NAME: get_domain
#PARENT: Gio.MountOperation.get_domain
#COMMENT: a string set to the domain.
#NAME: get_etag
#PARENT: Gio.FileOutputStreamClass.get_etag.get_etag
#COMMENT: the entity tag for the stream.
#NAME: flags
#PARENT: Gio.FileIface.append_to.append_to.FileOutputStream
#COMMENT: a set of #GFileCreateFlags
#NAME: resolver_error_quark
#PARENT: Gio.resolver_error_quark
#COMMENT: a #GQuark.
#NAME: conn
#PARENT: Gio.TlsClientConnection.get_server_identity.SocketConnectable
#COMMENT: the #GTlsClientConnection
#NAME: interface_name
#PARENT: Gio.DBusProxy.new_for_bus.none
#COMMENT: A D-Bus interface name.
#NAME: signal_name
#PARENT: Gio.DBusProxy.g-signal.none
#COMMENT: The name of the signal.
#NAME: openbsd_sockpeercred
#PARENT: Gio.CredentialsType
#COMMENT: The native credentials type is a <type>struct sockpeercred</type>. Added in 2.30.
#NAME: flags
#PARENT: Gio.MountOperation.ask-password.none
#COMMENT: a set of #GAskPasswordFlags.
#NAME: set_priority
#PARENT: Gio.Task
#COMMENT: Sets @task's priority. If you do not call this, it will default to
%G_PRIORITY_DEFAULT.

This will affect the priority of #GSources created with
g_task_attach_source() and the scheduling of tasks run in threads,
and can also be explicitly retrieved later via
g_task_get_priority().
#NAME: connection
#PARENT: Gio.UnixConnection.receive_credentials.Credentials
#COMMENT: A #GUnixConnection.
#NAME: watch_mounts
#PARENT: Gio.FileMonitorFlags
#COMMENT: Watch for mount events.
#NAME: user_data
#PARENT: Gio.SocketListener.accept_socket_async.none
#COMMENT: user data for the callback
#NAME: path
#PARENT: Gio.SubprocessLauncher.set_stdin_file_path.none
#COMMENT: a filename or %NULL
#NAME: read_uint16
#PARENT: Gio.DataInputStream.read_uint16
#COMMENT: an unsigned 16-bit/2-byte value read from the @stream or %0 if
an error occurred.
#NAME: connectable
#PARENT: Gio.SocketConnectable.proxy_enumerate.SocketAddressEnumerator
#COMMENT: a #GSocketConnectable
#NAME: object
#PARENT: Gio.DBusObjectSkeleton.remove_interface_by_name.none
#COMMENT: A #GDBusObjectSkeleton.
#NAME: stream
#PARENT: Gio.PollableInputStreamInterface.is_readable.is_readable.gboolean
#COMMENT: a #GPollableInputStream.
#NAME: get_interface
#PARENT: Gio.DBusMessage
#COMMENT: Convenience getter for the %G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE header field.
#NAME: mount_mountable_finish
#PARENT: Gio.File
#COMMENT: Finishes a mount operation. See g_file_mount_mountable() for details.

Finish an asynchronous mount operation that was started
with g_file_mount_mountable().
#NAME: cancellable
#PARENT: Gio.FileIface.create_readwrite.create_readwrite.FileIOStream
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: get_volume_for_uuid
#PARENT: Gio.VolumeMonitor.get_volume_for_uuid
#COMMENT: a #GVolume or %NULL if no such volume is available.
    Free the returned object with g_object_unref().
#NAME: object_type
#PARENT: Gio.Initable.newv.GObject.Object
#COMMENT: a #GType supporting #GInitable.
#NAME: data
#PARENT: Gio.Cancellable.connect.gulong
#COMMENT: Data to pass to @callback.
#NAME: send_message
#PARENT: Gio.Socket
#COMMENT: Send data to @address on @socket.  This is the most complicated and
fully-featured version of this call. For easier use, see
g_socket_send() and g_socket_send_to().

If @address is %NULL then the message is sent to the default receiver
(set by g_socket_connect()).

@vectors must point to an array of #GOutputVector structs and
@num_vectors must be the length of this array. (If @num_vectors is -1,
then @vectors is assumed to be terminated by a #GOutputVector with a
%NULL buffer pointer.) The #GOutputVector structs describe the buffers
that the sent data will be gathered from. Using multiple
#GOutputVectors is more memory-efficient than manually copying
data from multiple sources into a single buffer, and more
network-efficient than making multiple calls to g_socket_send().

@messages, if non-%NULL, is taken to point to an array of @num_messages
#GSocketControlMessage instances. These correspond to the control
messages to be sent on the socket.
If @num_messages is -1 then @messages is treated as a %NULL-terminated
array.

@flags modify how the message is sent. The commonly available arguments
for this are available in the #GSocketMsgFlags enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system-specific flags too.

If the socket is in blocking mode the call will block until there is
space for the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
will be returned. To be notified when space is available, wait for the
%G_IO_OUT condition. Note though that you may still receive
%G_IO_ERROR_WOULD_BLOCK from g_socket_send() even if you were previously
notified of a %G_IO_OUT condition. (On Windows in particular, this is
very common due to the way the underlying APIs work.)

On error -1 is returned and @error is set accordingly.
#NAME: get_port
#PARENT: Gio.InetSocketAddress
#COMMENT: Gets @address's port.
#NAME: io_priority
#PARENT: Gio.FileIface.replace_async.replace_async.none
#COMMENT: the [I/O priority][io-priority] of the request
#NAME: new_sync
#PARENT: Gio.DBusObjectManagerClient.new_sync
#COMMENT: A
  #GDBusObjectManagerClient object or %NULL if @error is set. Free
  with g_object_unref().
#NAME: unix_mount_at
#PARENT: Gio.unix_mount_at
#COMMENT: a #GUnixMountEntry.
#NAME: interfaces
#PARENT: Gio.DBusNodeInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusInterfaceInfo structures or %NULL if there are no interfaces.
#NAME: stream
#PARENT: Gio.DataInputStream.read_int32.gint32
#COMMENT: a given #GDataInputStream.
#NAME: has_parent
#PARENT: Gio.File
#COMMENT: Checks if @file has a parent, and optionally, if it is @parent.

If @parent is %NULL then this function returns %TRUE if @file has any
parent at all.  If @parent is non-%NULL then %TRUE is only returned
if @file is a child of @parent.
#NAME: DBusObjectProxy
#PARENT: Gio
#COMMENT: A #GDBusObjectProxy is an object used to represent a remote object
with one or more D-Bus interfaces. Normally, you don't instantiate
a #GDBusObjectProxy yourself - typically #GDBusObjectManagerClient
is used to obtain it.
#NAME: can_delete
#PARENT: Gio.AppInfo.can_delete
#COMMENT: %TRUE if @appinfo can be deleted
#NAME: user_data
#PARENT: Gio.SocketListener.accept_async.none
#COMMENT: user data for the callback
#NAME: mount_operation
#PARENT: Gio.File.stop_mountable.none
#COMMENT: a #GMountOperation,
    or %NULL to avoid user interaction.
#NAME: ignore_hosts
#PARENT: Gio.SimpleProxyResolver.set_ignore_hosts.none
#COMMENT: %NULL-terminated list of hosts/IP addresses
    to not use a proxy for
#NAME: connect
#PARENT: Gio.SocketClient.connect
#COMMENT: a #GSocketConnection on success, %NULL on error.
#NAME: force_exit
#PARENT: Gio.Subprocess
#COMMENT: Use an operating-system specific method to attempt an immediate,
forceful termination of the process.  There is no mechanism to
determine whether or not the request itself was successful;
however, you can use g_subprocess_wait() to monitor the status of
the process after calling this function.

On Unix, this function sends %SIGKILL.
#NAME: g_iface
#PARENT: Gio.FileDescriptorBasedIface
#COMMENT: The parent interface.
#NAME: set_source_tag
#PARENT: Gio.Task
#COMMENT: Sets @task's source tag. You can use this to tag a task return
value with a particular pointer (usually a pointer to the function
doing the tagging) and then later check it using
g_task_get_source_tag() (or g_async_result_is_tagged()) in the
task's "finish" function, to figure out if the response came from a
particular place.
#NAME: object_path
#PARENT: Gio.DBusObjectManagerClient.new.none
#COMMENT: The object path of the control object.
#NAME: object-added
#PARENT: Gio.DBusObjectManager
#COMMENT: Emitted when @object is added to @manager.
#NAME: connect_async
#PARENT: Gio.Proxy
#COMMENT: Asynchronous version of g_proxy_connect().
#NAME: mount_operation
#PARENT: Gio.DriveIface.start.start.none
#COMMENT: a #GMountOperation or %NULL to avoid
    user interaction.
#NAME: file
#PARENT: Gio.File.delete_file_async.none
#COMMENT: input #GFile
#NAME: disconnected
#PARENT: Gio.Drive
#COMMENT: This signal is emitted when the #GDrive have been
disconnected. If the recipient is holding references to the
object they should release them so the object can be
finalized.
#NAME: action_group
#PARENT: Gio.ActionGroupInterface.get_action_parameter_type.get_action_parameter_type.GLib.VariantType
#COMMENT: a #GActionGroup
#NAME: volume
#PARENT: Gio.VolumeMonitor.volume-removed.none
#COMMENT: a #GVolume that was removed.
#NAME: get_num_unix_fds
#PARENT: Gio.DBusMessage.get_num_unix_fds
#COMMENT: The value.
#NAME: service
#PARENT: Gio.Resolver.lookup_service.SrvTarget
#COMMENT: the service type to look up (eg, "ldap")
#NAME: close
#PARENT: Gio.OutputStream
#COMMENT: Closes the stream, releasing resources related to it.

Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
Closing a stream multiple times will not return an error.

Closing a stream will automatically flush any outstanding buffers in the
stream.

Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure
resources are released as early as possible.

Some streams might keep the backing store of the stream (e.g. a file descriptor)
open after the stream is closed. See the documentation for the individual
stream for details.

On failure the first error that happened will be reported, but the close
operation will finish as much as possible. A stream that failed to
close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
is important to check and report the error to the user, otherwise
there might be a loss of data as all data might not be written.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
Cancelling a close will still leave the stream closed, but there some streams
can use a faster close that doesn't block to e.g. check errors. On
cancellation (as with any error) there is no guarantee that all written
data will reach the target.
#NAME: unmount_mountable_finish
#PARENT: Gio.File
#COMMENT: Finishes an unmount operation, see g_file_unmount_mountable() for details.

Finish an asynchronous unmount operation that was started
with g_file_unmount_mountable().
#NAME: set_attribute_string
#PARENT: Gio.FileInfo
#COMMENT: Sets the @attribute to contain the given @attr_value,
if possible.
#NAME: get_fd
#PARENT: Gio.Cancellable
#COMMENT: Gets the file descriptor for a cancellable job. This can be used to
implement cancellable operations on Unix systems. The returned fd will
turn readable when @cancellable is cancelled.

You are not supposed to read from the fd yourself, just check for
readable status. Reading to unset the readable status is done
with g_cancellable_reset().

After a successful return from this function, you should use
g_cancellable_release_fd() to free up resources allocated for
the returned file descriptor.

See also g_cancellable_make_pollfd().
#NAME: flags
#PARENT: Gio.Subprocess.new.Subprocess
#COMMENT: flags that define the behaviour of the subprocess
#NAME: cancellable
#PARENT: Gio.DriveIface.start.start.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: extension_point
#PARENT: Gio.IOExtensionPoint.set_required_type.none
#COMMENT: a #GIOExtensionPoint
#NAME: get_name_owner
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: The unique name that owns the name that @manager is for or %NULL if
no-one currently owns that name. You can connect to the
#GObject::notify signal to track changes to the
#GDBusObjectManagerClient:name-owner property.
#NAME: stream
#PARENT: Gio.InputStream.read_all.gboolean
#COMMENT: a #GInputStream.
#NAME: stream
#PARENT: Gio.FileOutputStream.get_etag.utf8
#COMMENT: a #GFileOutputStream.
#NAME: mount
#PARENT: Gio.MountIface.unmount_finish.unmount_finish.gboolean
#COMMENT: a #GMount.
#NAME: set_op_res_gssize
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Sets the operation result within the asynchronous result to
the given @op_res.
#NAME: result
#PARENT: Gio.UnixConnection.send_credentials_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: get_use_ssl3
#PARENT: Gio.TlsClientConnection.get_use_ssl3
#COMMENT: whether @conn will use SSL 3.0
#NAME: spawn
#PARENT: Gio.SubprocessLauncher.spawn
#COMMENT: A new #GSubprocess, or %NULL on error (and @error will be set)
#NAME: drive
#PARENT: Gio.DriveIface.eject.eject.none
#COMMENT: a #GDrive.
#NAME: acquire
#PARENT: Gio.PermissionClass.acquire.acquire
#COMMENT: %TRUE if the permission was successfully acquired
#NAME: app_info_launch_default_for_uri
#PARENT: Gio.app_info_launch_default_for_uri
#COMMENT: %TRUE on success, %FALSE on error.
#NAME: user_data
#PARENT: Gio.dbus_address_get_stream.none
#COMMENT: Data to pass to @callback.
#NAME: get_enabled
#PARENT: Gio.Action.get_enabled
#COMMENT: whether the action is enabled
#NAME: callback
#PARENT: Gio.SimpleAsyncResult.new_take_error.SimpleAsyncResult
#COMMENT: a #GAsyncReadyCallback
#NAME: get_action_state_type
#PARENT: Gio.ActionGroup
#COMMENT: Queries the type of the state of the named action within
@action_group.

If the action is stateful then this function returns the
#GVariantType of the state.  All calls to
g_action_group_change_action_state() must give a #GVariant of this
type and g_action_group_get_action_state() will return a #GVariant
of the same type.

If the action is not stateful then this function will return %NULL.
In that case, g_action_group_get_action_state() will return %NULL
and you must not call g_action_group_change_action_state().

The state type of a particular action will never change but it is
possible for an action to be removed and for a new action to be added
with the same name but a different state type.
#NAME: interface_
#PARENT: Gio.DBusInterfaceSkeletonClass.get_info.get_info.DBusInterfaceInfo
#COMMENT: A #GDBusInterfaceSkeleton.
#NAME: open_stream
#PARENT: Gio.Resource.open_stream
#COMMENT: #GInputStream or %NULL on error.
    Free the returned object with g_object_unref()
#NAME: query_info
#PARENT: Gio.FileOutputStream
#COMMENT: Queries a file output stream for the given @attributes.
This function blocks while querying the stream. For the asynchronous
version of this function, see g_file_output_stream_query_info_async().
While the stream is blocked, the stream will set the pending flag
internally, and any other operations on the stream will fail with
%G_IO_ERROR_PENDING.

Can fail if the stream was already closed (with @error being set to
%G_IO_ERROR_CLOSED), the stream has pending operations (with @error being
set to %G_IO_ERROR_PENDING), or if querying info is not supported for
the stream's interface (with @error being set to %G_IO_ERROR_NOT_SUPPORTED). In
all cases of failure, %NULL will be returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %NULL will
be returned.
#NAME: file
#PARENT: Gio.FileIface.find_enclosing_mount.find_enclosing_mount.Mount
#COMMENT: input #GFile
#NAME: new_from_pem
#PARENT: Gio.TlsCertificate
#COMMENT: Creates a #GTlsCertificate from the PEM-encoded data in @data. If
@data includes both a certificate and a private key, then the
returned certificate will include the private key data as well. (See
the #GTlsCertificate:private-key-pem property for information about
supported formats.)

The returned certificate will be the first certificate found in
@data. As of GLib 2.44, if @data contains more certificates it will
try to load a certificate chain. All certificates will be verified in
the order found (top-level certificate should be the last one in the
file) and the #GTlsCertificate:issuer property of each certificate
will be set accordingly if the verification succeeds. If any
certificate in the chain cannot be verified, the first certificate in
the file will still be returned.
#NAME: type
#PARENT: Gio.LoadableIconIface.load.load.InputStream
#COMMENT: a location to store the type of the loaded
icon, %NULL to ignore.
#NAME: property_name
#PARENT: Gio.DBusProxy.get_cached_property.GLib.Variant
#COMMENT: Property name.
#NAME: vfs
#PARENT: Gio.VfsClass.parse_name.parse_name.File
#COMMENT: a #GVfs.
#NAME: open_readwrite
#PARENT: Gio.File
#COMMENT: Opens an existing file for reading and writing. The result is
a #GFileIOStream that can be used to read and write the contents
of the file.

If @cancellable is not %NULL, then the operation can be cancelled
by triggering the cancellable object from another thread. If the
operation was cancelled, the error %G_IO_ERROR_CANCELLED will be
returned.

If the file does not exist, the %G_IO_ERROR_NOT_FOUND error will
be returned. If the file is a directory, the %G_IO_ERROR_IS_DIRECTORY
error will be returned. Other errors are possible too, and depend on
what kind of filesystem the file is on. Note that in many non-local
file cases read and write streams are not supported, so make sure you
really need to do read and write streaming, rather than just opening
for reading or writing.
#NAME: new
#PARENT: Gio.SocketClient
#COMMENT: Creates a new #GSocketClient with the default options.
#NAME: cert
#PARENT: Gio.TlsCertificate.verify.TlsCertificateFlags
#COMMENT: a #GTlsCertificate
#NAME: UnixSocketAddressType
#PARENT: Gio
#COMMENT: The type of name used by a #GUnixSocketAddress.
%G_UNIX_SOCKET_ADDRESS_PATH indicates a traditional unix domain
socket bound to a filesystem path. %G_UNIX_SOCKET_ADDRESS_ANONYMOUS
indicates a socket not bound to any name (eg, a client-side socket,
or a socket created with socketpair()).

For abstract sockets, there are two incompatible ways of naming
them; the man pages suggest using the entire `struct sockaddr_un`
as the name, padding the unused parts of the %sun_path field with
zeroes; this corresponds to %G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED.
However, many programs instead just use a portion of %sun_path, and
pass an appropriate smaller length to bind() or connect(). This is
%G_UNIX_SOCKET_ADDRESS_ABSTRACT.
#NAME: out_args
#PARENT: Gio.DBusMethodInfo
#COMMENT: A pointer to a %NULL-terminated array of pointers to #GDBusArgInfo structures or %NULL if there are no out arguments.
#NAME: data
#PARENT: Gio.MemoryInputStream.new_from_data.InputStream
#COMMENT: input data
#NAME: callback
#PARENT: Gio.Subprocess.wait_check_async.none
#COMMENT: a #GAsyncReadyCallback to call when the operation is complete
#NAME: volume
#PARENT: Gio.Volume.eject.none
#COMMENT: a #GVolume
#NAME: parameters
#PARENT: Gio.DBusProxy.call_with_unix_fd_list_sync.GLib.Variant
#COMMENT: A #GVariant tuple with parameters for the signal
             or %NULL if not passing parameters.
#NAME: get_weight
#PARENT: Gio.SrvTarget
#COMMENT: Gets @target's weight. You should not need to look at this;
#GResolver already sorts the targets according to the algorithm in
RFC 2782.
#NAME: cancellable
#PARENT: Gio.TlsInteractionClass.ask_password_async.ask_password_async.none
#COMMENT: an optional #GCancellable cancellation object
#NAME: get_domain
#PARENT: Gio.MountOperation
#COMMENT: Gets the domain of the mount operation.
#NAME: file
#PARENT: Gio.File.query_file_type.FileType
#COMMENT: input #GFile
#NAME: error_domain
#PARENT: Gio.dbus_error_register_error.gboolean
#COMMENT: A #GQuark for a error domain.
#NAME: application
#PARENT: Gio.Application.add_main_option.none
#COMMENT: the #GApplication
#NAME: g_iface
#PARENT: Gio.ConverterIface
#COMMENT: The parent interface.
#NAME: source
#PARENT: Gio.SettingsSchemaSource.ref.SettingsSchemaSource
#COMMENT: a #GSettingsSchemaSource
#NAME: path_len
#PARENT: Gio.UnixSocketAddress.new_with_type.SocketAddress
#COMMENT: the length of @path, or -1
#NAME: get_guid
#PARENT: Gio.DBusServer.get_guid
#COMMENT: A D-Bus GUID. Do not free this string, it is owned by @server.
#NAME: result
#PARENT: Gio.OutputStream.write_bytes_finish.gssize
#COMMENT: a #GAsyncResult.
#NAME: ResolverError
#PARENT: Gio
#COMMENT: An error code used with %G_RESOLVER_ERROR in a #GError returned
from a #GResolver routine.
#NAME: invalid
#PARENT: Gio.SocketFamily
#COMMENT: no address family
#NAME: content_type
#PARENT: Gio.app_info_get_default_for_type.AppInfo
#COMMENT: the content type to find a #GAppInfo for
#NAME: append_to_finish
#PARENT: Gio.File.append_to_finish
#COMMENT: a valid #GFileOutputStream
    or %NULL on error.
    Free the returned object with g_object_unref().
#NAME: cancellable
#PARENT: Gio.OutputStream.write_fn.gssize
#COMMENT: optional cancellable object
#NAME: ref
#PARENT: Gio.DBusInterfaceInfo
#COMMENT: If @info is statically allocated does nothing. Otherwise increases
the reference count.
#NAME: length
#PARENT: Gio.DataInputStream.read_upto.utf8
#COMMENT: a #gsize to get the length of the data read in
#NAME: lookup_service_finish
#PARENT: Gio.Resolver
#COMMENT: Retrieves the result of a previous call to
g_resolver_lookup_service_async().

If the DNS resolution failed, @error (if non-%NULL) will be set to
a value from #GResolverError. If the operation was cancelled,
@error will be set to %G_IO_ERROR_CANCELLED.
#NAME: get_broadcast
#PARENT: Gio.Socket
#COMMENT: Gets the broadcast setting on @socket; if %TRUE,
it is possible to send packets to broadcast
addresses.
#NAME: callback
#PARENT: Gio.FileIface.stop_mountable.stop_mountable.none
#COMMENT: a #GAsyncReadyCallback to call
    when the request is satisfied, or %NULL
#NAME: server
#PARENT: Gio.DBusServer.get_guid.utf8
#COMMENT: A #GDBusServer.
#NAME: info
#PARENT: Gio.DesktopAppInfo.get_show_in.gboolean
#COMMENT: a #GDesktopAppInfo
#NAME: can_remove_supports_type
#PARENT: Gio.AppInfoIface.can_remove_supports_type.can_remove_supports_type
#COMMENT: %TRUE if it is possible to remove supported
    content types from a given @appinfo, %FALSE if not.
#NAME: short_name
#PARENT: Gio.Application.add_main_option.none
#COMMENT: the short name of an option
#NAME: subprocess
#PARENT: Gio.Subprocess.get_status.gint
#COMMENT: a #GSubprocess
#NAME: dbus_is_guid
#PARENT: Gio
#COMMENT: Checks if @string is a D-Bus GUID.

See the D-Bus specification regarding what strings are valid D-Bus
GUID (for example, D-Bus GUIDs are not RFC-4122 compliant).
#NAME: acquire_finish
#PARENT: Gio.Permission
#COMMENT: Collects the result of attempting to acquire the permission
represented by @permission.

This is the second half of the asynchronous version of
g_permission_acquire().
#NAME: query_file_type
#PARENT: Gio.File
#COMMENT: Utility function to inspect the #GFileType of a file. This is
implemented using g_file_query_info() and as such does blocking I/O.

The primary use case of this method is to check if a file is
a regular file, directory, or symlink.
#NAME: mount
#PARENT: Gio.Mount.unmount_with_operation.none
#COMMENT: a #GMount.
#NAME: set_size
#PARENT: Gio.FileInfo
#COMMENT: Sets the %G_FILE_ATTRIBUTE_STANDARD_SIZE attribute in the file info
to the given size.
#NAME: set_strv
#PARENT: Gio.Settings
#COMMENT: Sets @key in @settings to @value.

A convenience variant of g_settings_set() for string arrays.  If
@value is %NULL, then @key is set to be the empty array.

It is a programmer error to give a @key that isn't specified as
having an array of strings type in the schema for @settings.
#NAME: cancellable
#PARENT: Gio.io_scheduler_push_job.none
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: get_name
#PARENT: Gio.MenuAttributeIter.get_name
#COMMENT: the name of the attribute
#NAME: invocation
#PARENT: Gio.DBusMethodInvocation.get_method_name.utf8
#COMMENT: A #GDBusMethodInvocation.
#NAME: cancellable
#PARENT: Gio.OutputStream.close.gboolean
#COMMENT: optional cancellable object
#NAME: stream
#PARENT: Gio.IOStreamClass.close_finish.close_finish.gboolean
#COMMENT: a #GIOStream
#NAME: removed
#PARENT: Gio.ListModel.items_changed.none
#COMMENT: the number of items removed
#NAME: get_value
#PARENT: Gio.TlsPasswordClass.get_value.get_value
#COMMENT: The password value (owned by the password object).
#NAME: num_messages
#PARENT: Gio.Socket.send_message.gssize
#COMMENT: number of elements in @messages, or -1.
#NAME: user_data
#PARENT: Gio.DBusSubtreeIntrospectFunc.DBusInterfaceInfo
#COMMENT: The @user_data #gpointer passed to g_dbus_connection_register_subtree().
#NAME: can_stop
#PARENT: Gio.Drive.can_stop
#COMMENT: %TRUE if the @drive can be stopped, %FALSE otherwise.
#NAME: type
#PARENT: Gio.LoadableIconIface.load_finish.load_finish.InputStream
#COMMENT: a location to store the type of the loaded
       icon, %NULL to ignore.
#NAME: subprocess
#PARENT: Gio.Subprocess.wait.gboolean
#COMMENT: a #GSubprocess
#NAME: result
#PARENT: Gio.Volume.eject_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult
#NAME: blocking
#PARENT: Gio.pollable_stream_write.gssize
#COMMENT: whether to do blocking I/O
#NAME: value
#PARENT: Gio.DBusMessage.set_header.none
#COMMENT: A #GVariant to set the header field or %NULL to clear the header field.
#NAME: get_connectivity
#PARENT: Gio.NetworkMonitor
#COMMENT: Gets a more detailed networking state than
g_network_monitor_get_network_available().

If #GNetworkMonitor:network-available is %FALSE, then the
connectivity state will be %G_NETWORK_CONNECTIVITY_LOCAL.

If #GNetworkMonitor:network-available is %TRUE, then the
connectivity state will be %G_NETWORK_CONNECTIVITY_FULL (if there
is full Internet connectivity), %G_NETWORK_CONNECTIVITY_LIMITED (if
the host has a default route, but appears to be unable to actually
reach the full Internet), or %G_NETWORK_CONNECTIVITY_PORTAL (if the
host is trapped behind a "captive portal" that requires some sort
of login or acknowledgement before allowing full Internet access).

Note that in the case of %G_NETWORK_CONNECTIVITY_LIMITED and
%G_NETWORK_CONNECTIVITY_PORTAL, it is possible that some sites are
reachable but others are not. In this case, applications can
attempt to connect to remote servers, but should gracefully fall
back to their "offline" behavior if the connection attempt fails.
#NAME: result
#PARENT: Gio.Mount.unmount_with_operation_finish.gboolean
#COMMENT: a #GAsyncResult.
#NAME: get_object
#PARENT: Gio.DBusInterface.get_object
#COMMENT: A #GDBusObject or %NULL. The returned
    reference belongs to @interface_ and should not be freed.
#NAME: PROXY_RESOLVER_EXTENSION_POINT_NAME
#PARENT: Gio
#COMMENT: Extension point for proxy resolving functionality.
See [Extending GIO][extending-gio].
#NAME: message
#PARENT: Gio.DBusMessage.get_member.utf8
#COMMENT: A #GDBusMessage.
#NAME: get_connection
#PARENT: Gio.DBusObjectManagerClient.get_connection
#COMMENT: A #GDBusConnection object. Do not free,
  the object belongs to @manager.
#NAME: command_line
#PARENT: Gio.Application.command-line.gint
#COMMENT: a #GApplicationCommandLine representing the
    passed commandline
#NAME: user_data
#PARENT: Gio.SimpleAsyncResult.new.SimpleAsyncResult
#COMMENT: user data passed to @callback.
#NAME: protocol
#PARENT: Gio.Socket.new.Socket
#COMMENT: the id of the protocol to use, or 0 for default.
#NAME: new
#PARENT: Gio.Task
#COMMENT: Creates a #GTask acting on @source_object, which will eventually be
used to invoke @callback in the current
[thread-default main context][g-main-context-push-thread-default].

Call this in the "start" method of your asynchronous method, and
pass the #GTask around throughout the asynchronous operation. You
can use g_task_set_task_data() to attach task-specific data to the
object, which you can retrieve later via g_task_get_task_data().

By default, if @cancellable is cancelled, then the return value of
the task will always be %G_IO_ERROR_CANCELLED, even if the task had
already completed before the cancellation. This allows for
simplified handling in cases where cancellation may imply that
other objects that the task depends on have been destroyed. If you
do not want this behavior, you can use
g_task_set_check_cancellable() to change it.
#NAME: g-bus-type
#PARENT: Gio.DBusProxy
#COMMENT: If this property is not %G_BUS_TYPE_NONE, then
#GDBusProxy:g-connection must be %NULL and will be set to the
#GDBusConnection obtained by calling g_bus_get() with the value
of this property.
#NAME: lookup
#PARENT: Gio.FileAttributeInfoList.lookup
#COMMENT: a #GFileAttributeInfo for the @name, or %NULL if an
attribute isn't found.
#NAME: DBusSubtreeFlags
#PARENT: Gio
#COMMENT: Flags passed to g_dbus_connection_register_subtree().
#NAME: connectable
#PARENT: Gio.SocketClient.connect_async.none
#COMMENT: a #GSocketConnectable specifying the remote address.
#NAME: file
#PARENT: Gio.File.has_uri_scheme.gboolean
#COMMENT: input #GFile
#NAME: connection
#PARENT: Gio.SocketConnection.is_connected.gboolean
#COMMENT: a #GSocketConnection
#NAME: list_relocatable_schemas
#PARENT: Gio.Settings
#COMMENT: <!-- -->
#NAME: changed
#PARENT: Gio.Settings
#COMMENT: The "changed" signal is emitted when a key has potentially changed.
You should call one of the g_settings_get() calls to check the new
value.

This signal supports detailed connections.  You can connect to the
detailed signal "changed::x" in order to only receive callbacks
when key "x" changes.
#NAME: get_op_res_gboolean
#PARENT: Gio.SimpleAsyncResult
#COMMENT: Gets the operation result boolean from within the asynchronous result.
#NAME: gzip
#PARENT: Gio.ZlibCompressorFormat
#COMMENT: gzip file format
#NAME: mask
#PARENT: Gio.FileInfo.set_attribute_mask.none
#COMMENT: a #GFileAttributeMatcher.
#NAME: cancellable
#PARENT: Gio.DataInputStream.read_int16.gint16
#COMMENT: optional #GCancellable object, %NULL to ignore.
#NAME: ref
#PARENT: Gio.DBusSignalInfo.ref
#COMMENT: The same @info.
#NAME: writable-changed
#PARENT: Gio.Settings
#COMMENT: The "writable-changed" signal is emitted when the writability of a
key has potentially changed.  You should call
g_settings_is_writable() in order to determine the new status.

This signal supports detailed connections.  You can connect to the
detailed signal "writable-changed::x" in order to only receive
callbacks when the writability of "x" changes.
#NAME: destroy
#PARENT: Gio.TlsPassword.set_value_full.none
#COMMENT: a function to use to free the password.
#NAME: async_initable_newv_async
#PARENT: Gio
#COMMENT: Helper function for constructing #GAsyncInitable object. This is
similar to g_object_newv() but also initializes the object asynchronously.

When the initialization is finished, @callback will be called. You can
then call g_async_initable_new_finish() to get the new object and check
for any errors.
#NAME: content_type_from_mime_type
#PARENT: Gio
#COMMENT: Tries to find a content type based on the mime type name.
#NAME: manager
#PARENT: Gio.DBusObjectManagerIface.get_objects.get_objects.DBusObject
#COMMENT: A #GDBusObjectManager.
#NAME: DBusInterfaceSkeletonFlags
#PARENT: Gio
#COMMENT: Flags describing the behavior of a #GDBusInterfaceSkeleton instance.
#NAME: seqpacket
#PARENT: Gio.SocketType
#COMMENT: Reliable connection-based passing of datagrams
    of fixed maximum length (e.g. SCTP).
#NAME: identity
#PARENT: Gio.TlsDatabaseClass.verify_chain_async.verify_chain_async.none
#COMMENT: the expected peer identity
#NAME: get_name
#PARENT: Gio.DBusObjectManagerClient
#COMMENT: Gets the name that @manager is for, or %NULL if not a message bus
connection.
