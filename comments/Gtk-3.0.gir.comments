#NAME: self
#PARENT: Gtk.AppChooserButton.get_show_default_item.gboolean
#COMMENT: a #GtkAppChooserButton
#NAME: get_paper_width
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH,
converted to @unit.
#NAME: new
#PARENT: Gtk.VSeparator.new
#COMMENT: a new #GtkVSeparator.
#NAME: remove_selection_clipboard
#PARENT: Gtk.TextBuffer
#COMMENT: Removes a #GtkClipboard added with
gtk_text_buffer_add_selection_clipboard().
#NAME: foreach
#PARENT: Gtk.AccelMap
#COMMENT: Loops over the entries in the accelerator map whose accel path
doesn’t match any of the filters added with gtk_accel_map_add_filter(),
and execute @foreach_func on each. The signature of @foreach_func is
that of #GtkAccelMapForeach, the @changed parameter indicates whether
this accelerator was changed during runtime (thus, would need
saving during an accelerator map dump).
#NAME: layout
#PARENT: Gtk.Layout.set_vadjustment.none
#COMMENT: a #GtkLayout
#NAME: set_group
#PARENT: Gtk.RadioButton
#COMMENT: Sets a #GtkRadioButton’s group. It should be noted that this does not change
the layout of your interface in any way, so if you are changing the group,
it is likely you will need to re-arrange the user interface to reflect these
changes.
#NAME: tagname
#PARENT: Gtk.BuildableIface.custom_tag_end.custom_tag_end.none
#COMMENT: name of tag
#NAME: request_image
#PARENT: Gtk.Clipboard
#COMMENT: Requests the contents of the clipboard as image. When the image is
later received, it will be converted to a #GdkPixbuf, and
@callback will be called.

The @pixbuf parameter to @callback will contain the resulting
#GdkPixbuf if the request succeeded, or %NULL if it failed. This
could happen for various reasons, in particular if the clipboard
was empty or if the contents of the clipboard could not be
converted into an image.
#NAME: owner
#PARENT: Gtk.Clipboard.set_with_owner.gboolean
#COMMENT: an object that “owns” the data. This object will be passed
    to the callbacks when called
#NAME: new_for_interval
#PARENT: Gtk.LevelBar
#COMMENT: Utility constructor that creates a new #GtkLevelBar for the specified
interval.
#NAME: widget
#PARENT: Gtk.Widget.show_now.none
#COMMENT: a #GtkWidget
#NAME: width
#PARENT: Gtk.CellRenderer.get_fixed_size.none
#COMMENT: location to fill in with the fixed width of the cell, or %NULL
#NAME: configure
#PARENT: Gtk.Adjustment
#COMMENT: Sets all properties of the adjustment at once.

Use this function to avoid multiple emissions of the #GtkAdjustment::changed
signal. See gtk_adjustment_set_lower() for an alternative way
of compressing multiple emissions of #GtkAdjustment::changed into one.
#NAME: height
#PARENT: Gtk.CellRenderer.get_fixed_size.none
#COMMENT: location to fill in with the fixed height of the cell, or %NULL
#NAME: detail
#PARENT: Gtk.paint_tab.none
#COMMENT: a style detail
#NAME: column_span
#PARENT: Gtk.ComboBox.set_column_span_column.none
#COMMENT: A column in the model passed during construction
#NAME: image
#PARENT: Gtk.Image.set_from_file.none
#COMMENT: a #GtkImage
#NAME: get_active
#PARENT: Gtk.Menu
#COMMENT: Returns the selected menu item from the menu.  This is used by the
#GtkComboBox.
#NAME: preview-text
#PARENT: Gtk.FontChooser
#COMMENT: The string with which to preview the font.
#NAME: scale
#PARENT: Gtk.Scale.set_draw_value.none
#COMMENT: a #GtkScale
#NAME: count
#PARENT: Gtk.TextIter.backward_lines.gboolean
#COMMENT: number of lines to move backward
#NAME: new
#PARENT: Gtk.Widget
#COMMENT: This is a convenience function for creating a widget and setting
its properties in one go. For example you might write:
`gtk_widget_new (GTK_TYPE_LABEL, "label", "Hello World", "xalign",
0.0, NULL)` to create a left-aligned label. Equivalent to
g_object_new(), but returns a widget so you don’t have to
cast the object yourself.
#NAME: widget
#PARENT: Gtk.Widget.has_screen.gboolean
#COMMENT: a #GtkWidget
#NAME: format_string
#PARENT: Gtk.Actionable.set_action_target.none
#COMMENT: a GVariant format string
#NAME: get_scale
#PARENT: Gtk.StyleContext.get_scale
#COMMENT: the scale
#NAME: first
#PARENT: Gtk.TextIter.order.none
#COMMENT: a #GtkTextIter
#NAME: ButtonRole
#PARENT: Gtk
#COMMENT: The role specifies the desired appearance of a #GtkModelButton.
#NAME: is_symbolic
#PARENT: Gtk.IconInfo
#COMMENT: Checks if the icon is symbolic or not. This currently uses only
the file name and not the file contents for determining this.
This behaviour may change in the future.
#NAME: register_buffer
#PARENT: Gtk.TextBufferSerializeFunc.guint8
#COMMENT: the #GtkTextBuffer for which the format is registered
#NAME: get_internal_child
#PARENT: Gtk.Buildable
#COMMENT: Get the internal child called @childname of the @buildable object.
#NAME: palette
#PARENT: Gtk.ToolPalette.set_exclusive.none
#COMMENT: a #GtkToolPalette
#NAME: placeholder
#PARENT: Gtk.UIManagerItemType
#COMMENT: Insert a placeholder.
#NAME: widget
#PARENT: Gtk.Widget.get_tooltip_text.utf8
#COMMENT: a #GtkWidget
#NAME: setting
#PARENT: Gtk.Window.set_mnemonics_visible.none
#COMMENT: the new value
#NAME: n_chars
#PARENT: Gtk.EntryBuffer.set_text.none
#COMMENT: the number of characters in @text, or -1
#NAME: cell
#PARENT: Gtk.CellRendererClass.activate.activate.gboolean
#COMMENT: a #GtkCellRenderer
#NAME: font_scale
#PARENT: Gtk.TextAttributes
#COMMENT: Font scale factor.
#NAME: yalign
#PARENT: Gtk.Button
#COMMENT: If the child of the button is a #GtkMisc or #GtkAlignment, this property
can be used to control its vertical alignment. 0.0 is top aligned,
1.0 is bottom aligned.
#NAME: jtype
#PARENT: Gtk.Label.set_justify.none
#COMMENT: a #GtkJustification
#NAME: get_default_right_margin
#PARENT: Gtk.PaperSize
#COMMENT: Gets the default right margin for the #GtkPaperSize.
#NAME: match_end
#PARENT: Gtk.TextIter.backward_search.gboolean
#COMMENT: return location for end of match, or %NULL
#NAME: icon_info
#PARENT: Gtk.IconInfo.load_icon_async.none
#COMMENT: a #GtkIconInfo from gtk_icon_theme_lookup_icon()
#NAME: path
#PARENT: Gtk.IconViewForeachFunc.none
#COMMENT: The #GtkTreePath of a selected row
#NAME: state_is_running
#PARENT: Gtk.StyleContext
#COMMENT: Returns %TRUE if there is a transition animation running for the
current region (see gtk_style_context_push_animatable_region()).

If @progress is not %NULL, the animation progress will be returned
there, 0.0 means the state is closest to being unset, while 1.0 means
it’s closest to being set. This means transition animation will
run from 0 to 1 when @state is being set and from 1 to 0 when
it’s being unset.
#NAME: set_activate_on_single_click
#PARENT: Gtk.TreeView
#COMMENT: Cause the #GtkTreeView::row-activated signal to be emitted
on a single click instead of a double click.
#NAME: activate
#PARENT: Gtk.CellArea
#COMMENT: Activates @area, usually by activating the currently focused
cell, however some subclasses which embed widgets in the area
can also activate a widget if it currently has the focus.
#NAME: get_ellipsize_mode
#PARENT: Gtk.ToolShellIface.get_ellipsize_mode.get_ellipsize_mode
#COMMENT: the current ellipsize mode of @shell
#NAME: set_show_menubar
#PARENT: Gtk.ApplicationWindow
#COMMENT: Sets whether the window will display a menubar for the app menu
and menubar as needed.
#NAME: set_show_progress
#PARENT: Gtk.PrintOperation
#COMMENT: If @show_progress is %TRUE, the print operation will show a
progress dialog during the print operation.
#NAME: new
#PARENT: Gtk.TreeStore
#COMMENT: Creates a new tree store as with @n_columns columns each of the types passed
in.  Note that only types derived from standard GObject fundamental types
are supported.

As an example, `gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING,
GDK_TYPE_PIXBUF);` will create a new #GtkTreeStore with three columns, of type
#gint, #gchararray, and #GdkPixbuf respectively.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_duplex.none
#COMMENT: a #GtkPrintSettings
#NAME: under_up
#PARENT: Gtk.StackTransitionType
#COMMENT: Uncover the new page by sliding up. Since 3.12
#NAME: minimum_width
#PARENT: Gtk.CellArea.get_preferred_width.none
#COMMENT: location to store the minimum width, or %NULL
#NAME: position
#PARENT: Gtk.Notebook.insert_page_menu.gint
#COMMENT: the index (starting at 0) at which to insert the page,
    or -1 to append the page after all other pages.
#NAME: STYLE_CLASS_HEADER
#PARENT: Gtk
#COMMENT: A CSS class to match a header element.

This is used for the header in #GtkCalendar.
#NAME: solid
#PARENT: Gtk.BorderStyle
#COMMENT: A single line segment
#NAME: state
#PARENT: Gtk.IconInfo.load_symbolic_for_style.GdkPixbuf.Pixbuf
#COMMENT: the widget state to use for colors
#NAME: iter
#PARENT: Gtk.TreeModel.row-changed.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the changed row
#NAME: natural_width
#PARENT: Gtk.CellArea.get_preferred_width.none
#COMMENT: location to store the natural width, or %NULL
#NAME: set_length
#PARENT: Gtk.PrintSettings
#COMMENT: Associates a length in units of @unit with @key.
#NAME: is_focus_sibling
#PARENT: Gtk.CellArea.is_focus_sibling
#COMMENT: %TRUE if @sibling is a focus sibling of @renderer
#NAME: apply_tag_by_name
#PARENT: Gtk.TextBuffer
#COMMENT: Calls gtk_text_tag_table_lookup() on the buffer’s tag table to
get a #GtkTextTag, then calls gtk_text_buffer_apply_tag().
#NAME: entry
#PARENT: Gtk.Entry.get_has_frame.gboolean
#COMMENT: a #GtkEntry
#NAME: path
#PARENT: Gtk.IconView.path_is_selected.gboolean
#COMMENT: A #GtkTreePath to check selection on.
#NAME: id
#PARENT: Gtk.Widget.remove_tick_callback.none
#COMMENT: an id returned by gtk_widget_add_tick_callback()
#NAME: get_face
#PARENT: Gtk.FontSelection
#COMMENT: Gets the #PangoFontFace representing the selected font group
details (i.e. family, slant, weight, width, etc).
#NAME: context
#PARENT: Gtk.CellAreaClass.get_preferred_width.get_preferred_width.none
#COMMENT: the #GtkCellAreaContext to perform this request with
#NAME: activate_key
#PARENT: Gtk.Window.activate_key
#COMMENT: %TRUE if a mnemonic or accelerator was found and activated.
#NAME: set_image
#PARENT: Gtk.MessageDialog
#COMMENT: Sets the dialog’s image to @image.
#NAME: context
#PARENT: Gtk.StyleContext.set_frame_clock.none
#COMMENT: a #GdkFrameClock
#NAME: text_view
#PARENT: Gtk.TextView.get_iter_at_location.none
#COMMENT: a #GtkTextView
#NAME: icon_view
#PARENT: Gtk.IconView.get_spacing.gint
#COMMENT: a #GtkIconView
#NAME: get_label
#PARENT: Gtk.MenuItem.get_label
#COMMENT: The text in the @menu_item label. This is the internal
  string used by the label, and must not be modified.
#NAME: new_for_manager
#PARENT: Gtk.RecentChooserDialog
#COMMENT: Creates a new #GtkRecentChooserDialog with a specified recent manager.

This is useful if you have implemented your own recent manager, or if you
have a customized instance of a #GtkRecentManager object.
#NAME: iter
#PARENT: Gtk.TextIter.forward_sentence_end.gboolean
#COMMENT: a #GtkTextIter
#NAME: position
#PARENT: Gtk.Grid.remove_row.none
#COMMENT: the position of the row to remove
#NAME: get_size
#PARENT: Gtk.IconSource.get_size
#COMMENT: icon size this source matches.
#NAME: get_hadjustment
#PARENT: Gtk.TextView.get_hadjustment
#COMMENT: pointer to the horizontal #GtkAdjustment
#NAME: flags
#PARENT: Gtk.CellRenderer.get_aligned_area.none
#COMMENT: render flags
#NAME: IconInfo
#PARENT: Gtk
#COMMENT: Contains information found when looking up an icon in
an icon theme.
#NAME: entry
#PARENT: Gtk.Entry.get_width_chars.gint
#COMMENT: a #GtkEntry
#NAME: from_name
#PARENT: Gtk.IconSize
#COMMENT: Looks up the icon size associated with @name.
#NAME: css_provider
#PARENT: Gtk.CssProvider.load_from_resource.none
#COMMENT: a #GtkCssProvider
#NAME: get_embed_page_setup
#PARENT: Gtk.PrintOperation
#COMMENT: Gets the value of #GtkPrintOperation:embed-page-setup property.
#NAME: STOCK_ORIENTATION_REVERSE_PORTRAIT
#PARENT: Gtk
#COMMENT: The “Reverse Portrait Orientation” item and icon.
#NAME: clipboard
#PARENT: Gtk.TextBuffer.remove_selection_clipboard.none
#COMMENT: a #GtkClipboard added to @buffer by
            gtk_text_buffer_add_selection_clipboard()
#NAME: unit
#PARENT: Gtk.PaperSize.get_default_right_margin.gdouble
#COMMENT: the unit for the return value, not %GTK_UNIT_NONE
#NAME: STYLE_CLASS_MESSAGE_DIALOG
#PARENT: Gtk
#COMMENT: A CSS class that is added to message dialogs.
#NAME: location
#PARENT: Gtk.TextBuffer.insert-pixbuf.none
#COMMENT: position to insert @pixbuf in @textbuffer
#NAME: deletable
#PARENT: Gtk.Window
#COMMENT: Whether the window frame should have a close button.
#NAME: add_tick_callback
#PARENT: Gtk.Widget
#COMMENT: Queues an animation frame update and adds a callback to be called
before each frame. Until the tick callback is removed, it will be
called frequently (usually at the frame rate of the output device
or as quickly as the application can be repainted, whichever is
slower). For this reason, is most suitable for handling graphics
that change every frame or every few frames. The tick callback does
not automatically imply a relayout or repaint. If you want a
repaint or relayout, and aren’t changing widget properties that
would trigger that (for example, changing the text of a #GtkLabel),
then you will have to call gtk_widget_queue_resize() or
gtk_widget_queue_draw_area() yourself.

gdk_frame_clock_get_frame_time() should generally be used for timing
continuous animations and
gdk_frame_timings_get_predicted_presentation_time() if you are
trying to display isolated frames at particular times.

This is a more convenient alternative to connecting directly to the
#GdkFrameClock::update signal of #GdkFrameClock, since you don't
have to worry about when a #GdkFrameClock is assigned to a widget.
#NAME: get_title
#PARENT: Gtk.ColorButton
#COMMENT: Gets the title of the color selection dialog.
#NAME: uri
#PARENT: Gtk.RecentManager.move_item.gboolean
#COMMENT: the URI of a recently used resource
#NAME: icon_name
#PARENT: Gtk.IconTheme.lookup_icon_for_scale.IconInfo
#COMMENT: the name of the icon to lookup
#NAME: bubble
#PARENT: Gtk.PropagationPhase
#COMMENT: Events are delivered in the bubble phase. The bubble
  phase happens after the capture phase, and before the default handlers
  are run. This phase runs from the event widget, up to the toplevel.
#NAME: table
#PARENT: Gtk.Table.get_homogeneous.gboolean
#COMMENT: a #GtkTable
#NAME: new
#PARENT: Gtk.AccelGroup
#COMMENT: Creates a new #GtkAccelGroup.
#NAME: take-focus
#PARENT: Gtk.MenuShell
#COMMENT: A boolean that determines whether the menu and its submenus grab the
keyboard focus. See gtk_menu_shell_set_take_focus() and
gtk_menu_shell_get_take_focus().
#NAME: targets
#PARENT: Gtk.selection_add_targets.none
#COMMENT: a table of targets to add
#NAME: get_text_length
#PARENT: Gtk.Entry
#COMMENT: Retrieves the current length of the text in
@entry.

This is equivalent to:

|[<!-- language="C" -->
GtkEntryBuffer *buffer;
buffer = gtk_entry_get_buffer (entry);
gtk_entry_buffer_get_length (buffer);
]|
#NAME: slide_up_down
#PARENT: Gtk.StackTransitionType
#COMMENT: Slide from top down or bottom up according to the order
#NAME: create_mark
#PARENT: Gtk.TextBuffer
#COMMENT: Creates a mark at position @where. If @mark_name is %NULL, the mark
is anonymous; otherwise, the mark can be retrieved by name using
gtk_text_buffer_get_mark(). If a mark has left gravity, and text is
inserted at the mark’s current location, the mark will be moved to
the left of the newly-inserted text. If the mark has right gravity
(@left_gravity = %FALSE), the mark will end up on the right of
newly-inserted text. The standard left-to-right cursor is a mark
with right gravity (when you type, the cursor stays on the right
side of the text you’re typing).

The caller of this function does not own a
reference to the returned #GtkTextMark, so you can ignore the
return value if you like. Marks are owned by the buffer and go
away when the buffer does.

Emits the #GtkTextBuffer::mark-set signal as notification of the mark's
initial placement.
#NAME: iter
#PARENT: Gtk.TreeModelIface.rows_reordered.rows_reordered.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the node whose children
    have been reordered, or %NULL if the depth of @path is 0
#NAME: get_tab_vborder
#PARENT: Gtk.Notebook
#COMMENT: Returns the vertical width of a tab border.
#NAME: func
#PARENT: Gtk.CellLayoutIface.set_cell_data_func.set_cell_data_func.none
#COMMENT: the #GtkCellLayoutDataFunc to use, or %NULL
#NAME: load_symbolic_for_context
#PARENT: Gtk.IconInfo
#COMMENT: Loads an icon, modifying it to match the system colors for the foreground,
success, warning and error colors provided. If the icon is not a symbolic
one, the function will return the result from gtk_icon_info_load_icon().
This function uses the regular foreground color and the symbolic colors
with the names “success_color”, “warning_color” and “error_color” from
the context.

This allows loading symbolic icons that will match the system theme.

See gtk_icon_info_load_symbolic() for more details.
#NAME: link_button
#PARENT: Gtk.LinkButton.set_uri.none
#COMMENT: a #GtkLinkButton
#NAME: render_frame
#PARENT: Gtk
#COMMENT: Renders a frame around the rectangle defined by @x, @y, @width, @height.

Examples of frame rendering, showing the effect of `border-image`,
`border-color`, `border-width`, `border-radius` and junctions:

![](frames.png)
#NAME: widget
#PARENT: Gtk.Menu.get_for_attach_widget.Widget
#COMMENT: a #GtkWidget
#NAME: day
#PARENT: Gtk.Calendar.select_day.none
#COMMENT: the day number between 1 and 31, or 0 to unselect
  the currently selected day.
#NAME: focus
#PARENT: Gtk.CellAreaClass.focus.focus
#COMMENT: %TRUE if focus remains inside @area as a result of this call.
#NAME: new
#PARENT: Gtk.DrawingArea.new
#COMMENT: a new #GtkDrawingArea
#NAME: cell_view
#PARENT: Gtk.CellView.get_size_of_row.gboolean
#COMMENT: a #GtkCellView
#NAME: modifier
#PARENT: Gtk.Window.mnemonic_activate.gboolean
#COMMENT: the modifiers
#NAME: grid
#PARENT: Gtk.Grid.get_baseline_row.gint
#COMMENT: a #GtkGrid
#NAME: copyright
#PARENT: Gtk.AboutDialog.set_copyright.none
#COMMENT: the copyright string
#NAME: fit-model
#PARENT: Gtk.CellView
#COMMENT: Whether the view should request enough space to always fit
the size of every row in the model (used by the combo box to
ensure the combo box size doesnt change when different items
are selected).

since 3.0
#NAME: input
#PARENT: Gtk.SpinButton.input
#COMMENT: %TRUE for a successful conversion, %FALSE if the input
    was not handled, and %GTK_INPUT_ERROR if the conversion failed.
#NAME: new_from_pixbuf
#PARENT: Gtk.StatusIcon
#COMMENT: Creates a status icon displaying @pixbuf.

The image will be scaled down to fit in the available
space in the notification area, if necessary.
#NAME: show-details
#PARENT: Gtk.Calendar
#COMMENT: Determines whether details are shown directly in the widget, or if they are
available only as tooltip. When this property is set days with details are
marked.
#NAME: name
#PARENT: Gtk.PaperSize.new.PaperSize
#COMMENT: a paper size name, or %NULL
#NAME: copy
#PARENT: Gtk.Border.copy
#COMMENT: a copy of @border_.
#NAME: set_use_underline
#PARENT: Gtk.Button
#COMMENT: If true, an underline in the text of the button label indicates
the next character should be used for the mnemonic accelerator key.
#NAME: get_label
#PARENT: Gtk.NumerableIcon.get_label
#COMMENT: the currently displayed label
#NAME: STYLE_CLASS_RIGHT
#PARENT: Gtk
#COMMENT: A CSS class to indicate an area at the right of a widget.

This is used by widgets that can render an area in different
positions, such as tabs in a #GtkNotebook.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_search_equal_func.TreeViewSearchEqualFunc
#COMMENT: A #GtkTreeView
#NAME: get_preferred_width
#PARENT: Gtk.Widget
#COMMENT: Retrieves a widget’s initial minimum and natural width.

This call is specific to height-for-width requests.

The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroups that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.
#NAME: error
#PARENT: Gtk.MessageType
#COMMENT: Fatal error message
#NAME: set_stack
#PARENT: Gtk.StackSwitcher
#COMMENT: Sets the stack to control.
#NAME: trigger_tooltip_query
#PARENT: Gtk.Widget
#COMMENT: Triggers a tooltip query on the display where the toplevel of @widget
is located. See gtk_tooltip_trigger_tooltip_query() for more
information.
#NAME: state_type
#PARENT: Gtk.paint_spinner.none
#COMMENT: a state
#NAME: ypad
#PARENT: Gtk.CellRenderer.get_padding.none
#COMMENT: location to fill in with the y padding of the cell, or %NULL
#NAME: context
#PARENT: Gtk.CellAreaContextClass.allocate.allocate.none
#COMMENT: a #GtkCellAreaContext
#NAME: list_store
#PARENT: Gtk.ListStore.set_column_types.none
#COMMENT: A #GtkListStore
#NAME: enable_model_drag_dest
#PARENT: Gtk.TreeView
#COMMENT: Turns @tree_view into a drop destination for automatic DND. Calling
this method sets #GtkTreeView:reorderable to %FALSE.
#NAME: x
#PARENT: Gtk.render_expander.none
#COMMENT: X origin of the rectangle
#NAME: path
#PARENT: Gtk.TreeModelIface.row_changed.row_changed.none
#COMMENT: a #GtkTreePath-struct pointing to the changed row
#NAME: y
#PARENT: Gtk.render_expander.none
#COMMENT: Y origin of the rectangle
#NAME: needed
#PARENT: Gtk.FileFilter.add_custom.none
#COMMENT: bitfield of flags indicating the information that the custom
         filter function needs.
#NAME: AppChooserWidget
#PARENT: Gtk
#COMMENT: #GtkAppChooserWidget is a widget for selecting applications.
It is the main building block for #GtkAppChooserDialog. Most
applications only need to use the latter; but you can use
this widget as part of a larger widget if you have special needs.

#GtkAppChooserWidget offers detailed control over what applications
are shown, using the
#GtkAppChooserWidget:show-default,
#GtkAppChooserWidget:show-recommended,
#GtkAppChooserWidget:show-fallback,
#GtkAppChooserWidget:show-other and
#GtkAppChooserWidget:show-all
properties. See the #GtkAppChooser documentation for more information
about these groups of applications.

To keep track of the selected application, use the
#GtkAppChooserWidget::application-selected and #GtkAppChooserWidget::application-activated signals.
#NAME: gtk-icon-sizes
#PARENT: Gtk.Settings
#COMMENT: A list of icon sizes. The list is separated by colons, and
item has the form:

`size-name` = `width` , `height`

E.g. "gtk-menu=16,16:gtk-button=20,20:gtk-dialog=48,48".
GTK+ itself use the following named icon sizes: gtk-menu,
gtk-button, gtk-small-toolbar, gtk-large-toolbar, gtk-dnd,
gtk-dialog. Applications can register their own named icon
sizes with gtk_icon_size_register().
#NAME: title
#PARENT: Gtk.FontButton.set_title.none
#COMMENT: a string containing the font chooser dialog title
#NAME: widget
#PARENT: Gtk.CellAreaClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: the #GtkWidget where @area will be rendering
#NAME: tree_model
#PARENT: Gtk.TreeModel.iter_previous.gboolean
#COMMENT: a #GtkTreeModel
#NAME: targets_include_image
#PARENT: Gtk.SelectionData.targets_include_image
#COMMENT: %TRUE if @selection_data holds a list of targets,
  and a suitable target for images is included, otherwise %FALSE.
#NAME: enable
#PARENT: Gtk.TreeView.set_rubber_banding.none
#COMMENT: %TRUE to enable rubber banding
#NAME: callback
#PARENT: Gtk.CellArea.foreach_alloc.none
#COMMENT: the #GtkCellAllocCallback to call
#NAME: column
#PARENT: Gtk.CellLayoutIface.add_attribute.add_attribute.none
#COMMENT: the column position on the model to get the attribute from
#NAME: get_show_close_button
#PARENT: Gtk.SearchBar
#COMMENT: Returns whether the close button is shown.
#NAME: iter
#PARENT: Gtk.TextIter.backward_char.gboolean
#COMMENT: an iterator
#NAME: tree_view
#PARENT: Gtk.TreeView.get_level_indentation.gint
#COMMENT: a #GtkTreeView.
#NAME: new
#PARENT: Gtk.FileChooserWidget.new
#COMMENT: a new #GtkFileChooserWidget
#NAME: set_width_chars
#PARENT: Gtk.Entry
#COMMENT: Changes the size request of the entry to be about the right size
for @n_chars characters. Note that it changes the size
request, the size can still be affected by
how you pack the widget into containers. If @n_chars is -1, the
size reverts to the default entry size.
#NAME: password
#PARENT: Gtk.InputPurpose
#COMMENT: Like @GTK_INPUT_PURPOSE_FREE_FORM, but characters are hidden
#NAME: end
#PARENT: Gtk.TextBuffer.delete-range.none
#COMMENT: the end of the range to be deleted
#NAME: get_stock_id
#PARENT: Gtk.ToolButton.get_stock_id
#COMMENT: the name of the stock item for @button.
#NAME: get_is_important
#PARENT: Gtk.ToolItem
#COMMENT: Returns whether @tool_item is considered important. See
gtk_tool_item_set_is_important()
#NAME: get_heading
#PARENT: Gtk.AppChooserDialog.get_heading
#COMMENT: the text to display at the top of the dialog, or %NULL, in which
    case a default text is displayed
#NAME: max-width-chars
#PARENT: Gtk.Entry
#COMMENT: The desired maximum width of the entry, in characters.
If this property is set to -1, the width will be calculated
automatically.
#NAME: area
#PARENT: Gtk.GLArea.make_current.none
#COMMENT: a #GtkGLArea
#NAME: set_support_multidevice
#PARENT: Gtk.Widget
#COMMENT: Enables or disables multiple pointer awareness. If this setting is %TRUE,
@widget will start receiving multiple, per device enter/leave events. Note
that if custom #GdkWindows are created in #GtkWidget::realize,
gdk_window_set_support_multidevice() will have to be called manually on them.
#NAME: icon_size_register_alias
#PARENT: Gtk
#COMMENT: Registers @alias as another name for @target.
So calling gtk_icon_size_from_name() with @alias as argument
will return @target.
#NAME: text_view
#PARENT: Gtk.TextView.set_monospace.none
#COMMENT: a #GtkTextView
#NAME: box
#PARENT: Gtk.ListBoxClass.select_all.select_all.none
#COMMENT: a #GtkListBox
#NAME: setup
#PARENT: Gtk.PageSetup.get_paper_width.gdouble
#COMMENT: a #GtkPageSetup
#NAME: format
#PARENT: Gtk.Clipboard.wait_for_rich_text.guint8
#COMMENT: return location for the format of the returned data
#NAME: new_from_indicesv
#PARENT: Gtk.TreePath
#COMMENT: Creates a new path with the given @indices array of @length.
#NAME: application
#PARENT: Gtk.Application.get_actions_for_accel.utf8
#COMMENT: a #GtkApplication
#NAME: about
#PARENT: Gtk.AboutDialog.set_documenters.none
#COMMENT: a #GtkAboutDialog
#NAME: slide_up
#PARENT: Gtk.StackTransitionType
#COMMENT: Slide from bottom up
#NAME: background-gdk
#PARENT: Gtk.CellRendererText
#COMMENT: Background color as a #GdkColor
#NAME: cell_view
#PARENT: Gtk.CellView.set_displayed_row.none
#COMMENT: a #GtkCellView
#NAME: detailed_action_name
#PARENT: Gtk.Application.get_accels_for_action.utf8
#COMMENT: a detailed action name, specifying an action
    and target to obtain accelerators for
#NAME: set_mapped
#PARENT: Gtk.Widget
#COMMENT: Marks the widget as being realized.

This function should only ever be called in a derived widget's
“map” or “unmap” implementation.
#NAME: set_background_color
#PARENT: Gtk.CellView
#COMMENT: Sets the background color of @view.
#NAME: y_offset
#PARENT: Gtk.CellRendererClass.get_size.get_size.none
#COMMENT: location to return y offset of cell relative to @cell_area, or %NULL
#NAME: popover
#PARENT: Gtk.Popover.set_relative_to.none
#COMMENT: a #GtkPopover
#NAME: iter
#PARENT: Gtk.TextBufferClass.insert_pixbuf.insert_pixbuf.none
#COMMENT: location to insert the pixbuf
#NAME: get_marks
#PARENT: Gtk.TextIter
#COMMENT: Returns a list of all #GtkTextMark at this location. Because marks
are not iterable (they don’t take up any "space" in the buffer,
they are just marks in between iterable locations), multiple marks
can exist in the same place. The returned list is not in any
meaningful order.
#NAME: setting
#PARENT: Gtk.Window.set_destroy_with_parent.none
#COMMENT: whether to destroy @window with its transient parent
#NAME: get_direction_wildcarded
#PARENT: Gtk.IconSource.get_direction_wildcarded
#COMMENT: %TRUE if this icon source is a base for any text direction variant
#NAME: STYLE_CLASS_DND
#PARENT: Gtk
#COMMENT: A CSS class for a drag-and-drop indicator.

This is used when drawing an outline around a potential
drop target during DND.
#NAME: list
#PARENT: Gtk.TargetList.find.gboolean
#COMMENT: a #GtkTargetList
#NAME: both
#PARENT: Gtk.ToolbarStyle
#COMMENT: Buttons display text and icons in the toolbar.
#NAME: widget
#PARENT: Gtk.Widget.is_focus.gboolean
#COMMENT: a #GtkWidget
#NAME: leave-notify-event
#PARENT: Gtk.Widget.leave-notify-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: n_chars
#PARENT: Gtk.Entry.set_max_width_chars.none
#COMMENT: the new desired maximum width, in characters
#NAME: button
#PARENT: Gtk.ColorButton.get_use_alpha.gboolean
#COMMENT: a #GtkColorButton
#NAME: new_parent
#PARENT: Gtk.Widget.reparent.none
#COMMENT: a #GtkContainer to move the widget into
#NAME: height
#PARENT: Gtk.Window.set_default_size.none
#COMMENT: height in pixels, or -1 to unset the default height
#NAME: primary-icon-stock
#PARENT: Gtk.Entry
#COMMENT: The stock id to use for the primary icon for the entry.
#NAME: column
#PARENT: Gtk.TreeView.insert_column.gint
#COMMENT: The #GtkTreeViewColumn to be inserted.
#NAME: ModelButton
#PARENT: Gtk
#COMMENT: GtkModelButton is a button class that can use a #GAction as its model.
In contrast to #GtkToggleButton or #GtkRadioButton, which can also
be backed by a #GAction via the #GtkActionable:action-name property,
GtkModelButton will adapt its appearance according to the kind of
action it is backed by, and appear either as a plain, check or
radio button.

Model buttons are used when popovers from a menu model with
gtk_popover_new_from_model(); they can also be used manually in
a #GtkPopoverMenu.

When the action is specified via the #GtkActionable:action-name
and #GtkActionable:action-target properties, the role of the button
(i.e. whether it is a plain, check or radio button) is determined by
the type of the action and doesn't have to be explicitly specified
with the #GtkModelButton:role property.

The content of the button is specified by the #GtkModelButton:text
and #GtkModelButton:icon properties.

The appearance of model buttons can be influenced with the
#GtkModelButton:centered and #GtkModelButton:iconic properties.

Model buttons have built-in support for submenus in #GtkPopoverMenu.
To make a GtkModelButton that opens a submenu when activated, set
the #GtkModelButton:menu-name property. To make a button that goes
back to the parent menu, you should set the #GtkModelButton:inverted
property to place the submenu indicator at the opposite side.

# Example

|[
<object class="GtkPopoverMenu">
  <child>
    <object class="GtkBox">
      <property name="visible">True</property>
      <property name="margin">10</property>
      <child>
        <object class="GtkModelButton">
          <property name="visible">True</property>
          <property name="action-name">view.cut</property>
          <property name="text" translatable="yes">Cut</property>
        </object>
      </child>
      <child>
        <object class="GtkModelButton">
          <property name="visible">True</property>
          <property name="action-name">view.copy</property>
          <property name="text" translatable="yes">Copy</property>
        </object>
      </child>
      <child>
        <object class="GtkModelButton">
          <property name="visible">True</property>
          <property name="action-name">view.paste</property>
          <property name="text" translatable="yes">Paste</property>
        </object>
      </child>
    </object>
  </child>
</object>
]|
#NAME: append_with_siblings
#PARENT: Gtk.WidgetPath.append_with_siblings
#COMMENT: the position where the element was inserted.
#NAME: set_accel_closure
#PARENT: Gtk.AccelLabel
#COMMENT: Sets the closure to be monitored by this accelerator label. The closure
must be connected to an accelerator group; see gtk_accel_group_connect().
#NAME: check_menu_item
#PARENT: Gtk.CheckMenuItem.get_active.gboolean
#COMMENT: a #GtkCheckMenuItem
#NAME: font_name
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: get_sensitive
#PARENT: Gtk.ActionGroup.get_sensitive
#COMMENT: %TRUE if the group is sensitive.
#NAME: uris
#PARENT: Gtk.ClipboardURIReceivedFunc.none
#COMMENT: the received URIs
#NAME: section
#PARENT: Gtk.CssSection.get_section_type.CssSectionType
#COMMENT: the section
#NAME: layout_style
#PARENT: Gtk.ButtonBox.set_layout.none
#COMMENT: the new layout style
#NAME: position
#PARENT: Gtk.TreeStore.move_before.none
#COMMENT: A #GtkTreeIter or %NULL.
#NAME: get_auto_render
#PARENT: Gtk.GLArea
#COMMENT: Returns whether the area is in auto render mode or not.
#NAME: radio_group_member
#PARENT: Gtk.RadioButton.new_with_mnemonic_from_widget.Widget
#COMMENT: widget to get radio group from or %NULL
#NAME: adjustment
#PARENT: Gtk.Adjustment.get_minimum_increment.gdouble
#COMMENT: a #GtkAdjustment
#NAME: vexpand
#PARENT: Gtk.Widget
#COMMENT: Whether to expand vertically. See gtk_widget_set_vexpand().
#NAME: copy
#PARENT: Gtk.IconSource
#COMMENT: Creates a copy of @source; mostly useful for language bindings.
#NAME: sibling
#PARENT: Gtk.ListStore.insert_before.none
#COMMENT: A valid #GtkTreeIter, or %NULL
#NAME: reorder
#PARENT: Gtk.TreeStore
#COMMENT: Reorders the children of @parent in @tree_store to follow the order
indicated by @new_order. Note that this function only works with
unsorted stores.
#NAME: props
#PARENT: Gtk.StyleProperties.clear.none
#COMMENT: a #GtkStyleProperties
#NAME: widget
#PARENT: Gtk.WidgetClass.destroy.destroy.none
#COMMENT: a #GtkWidget
#NAME: gap_side
#PARENT: Gtk.paint_box_gap.none
#COMMENT: side in which to leave the gap
#NAME: get_device
#PARENT: Gtk.Gesture
#COMMENT: Returns the master #GdkDevice that is currently operating
on @gesture, or %NULL if the gesture is not being interacted.
#NAME: STOCK_REVERT_TO_SAVED
#PARENT: Gtk
#COMMENT: The “Revert” item and icon. The icon has an RTL variant.
#NAME: button
#PARENT: Gtk.ButtonClass.clicked.clicked.none
#COMMENT: The #GtkButton you want to send the signal to.
#NAME: reference
#PARENT: Gtk.TreeRowReference.get_path.TreePath
#COMMENT: a #GtkTreeRowReference
#NAME: widget
#PARENT: Gtk.Widget.get_receives_default.gboolean
#COMMENT: a #GtkWidget
#NAME: edit_only
#PARENT: Gtk.CellAreaClass.activate.activate.gboolean
#COMMENT: if %TRUE then only cell renderers that are %GTK_CELL_RENDERER_MODE_EDITABLE
            will be activated.
#NAME: Scrollbar
#PARENT: Gtk
#COMMENT: The #GtkScrollbar widget is a horizontal or vertical scrollbar,
depending on the value of the #GtkOrientable:orientation property.

The position of the thumb in a scrollbar is controlled by the scroll
adjustments. See #GtkAdjustment for the fields in an adjustment - for
#GtkScrollbar, the #GtkAdjustment:value field represents the position
of the scrollbar, which must be between the #GtkAdjustment:lower field
and #GtkAdjustment:upper - #GtkAdjustment:page-size. The
#GtkAdjustment:page-size field represents the size of the visible
scrollable area. The #GtkAdjustment:step-increment and
#GtkAdjustment:page-increment fields are properties when the user asks to
step down (using the small stepper arrows) or page down (using for
example the `Page Down` key).
#NAME: set_spacing
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the spacing field of @tree_column, which is the number of pixels to
place between cell renderers packed into it.
#NAME: widget
#PARENT: Gtk.Widget.add_accelerator.none
#COMMENT: widget to install an accelerator on
#NAME: new
#PARENT: Gtk.GestureDrag
#COMMENT: Returns a newly created #GtkGesture that recognizes drags.
#NAME: accel_quark
#PARENT: Gtk.AccelGroup.activate.gboolean
#COMMENT: the quark for the accelerator name
#NAME: number_of_rows
#PARENT: Gtk.CellRendererText.set_fixed_height_from_font.none
#COMMENT: Number of rows of text each cell renderer is allocated, or -1
#NAME: text_view
#PARENT: Gtk.TextView.get_iter_location.none
#COMMENT: a #GtkTextView
#NAME: visible_horizontal
#PARENT: Gtk.ToolItem.set_visible_horizontal.none
#COMMENT: Whether @tool_item is visible when in horizontal mode
#NAME: tree_view
#PARENT: Gtk.TreeView.move_column_after.none
#COMMENT: A #GtkTreeView
#NAME: queue_resize
#PARENT: Gtk.TreeViewColumn
#COMMENT: Flags the column, and the cell renderers added to this column, to have
their sizes renegotiated.
#NAME: expand
#PARENT: Gtk.TreeViewColumn.set_expand.none
#COMMENT: %TRUE if the column should expand to fill available space.
#NAME: set_child_visible
#PARENT: Gtk.Widget
#COMMENT: Sets whether @widget should be mapped along with its when its parent
is mapped and @widget has been shown with gtk_widget_show().

The child visibility can be set for widget before it is added to
a container with gtk_widget_set_parent(), to avoid mapping
children unnecessary before immediately unmapping them. However
it will be reset to its default state of %TRUE when the widget
is removed from a container.

Note that changing the child visibility of a widget does not
queue a resize on the widget. Most of the time, the size of
a widget is computed from all visible children, whether or
not they are mapped. If this is not the case, the container
can queue a resize itself.

This function is only useful for container implementations and
never should be called by an application.
#NAME: widget
#PARENT: Gtk.CellAreaClass.get_preferred_height.get_preferred_height.none
#COMMENT: the #GtkWidget where @area will be rendering
#NAME: get_top_margin
#PARENT: Gtk.PageSetup
#COMMENT: Gets the top margin in units of @unit.
#NAME: preview
#PARENT: Gtk.PrintOperation.preview.gboolean
#COMMENT: the #GtkPrintOperationPreview for the current operation
#NAME: widget
#PARENT: Gtk.Widget.drag_highlight.none
#COMMENT: a widget to highlight
#NAME: file-set
#PARENT: Gtk.FileChooserButton
#COMMENT: The ::file-set signal is emitted when the user selects a file.

Note that this signal is only emitted when the user
changes the file.
#NAME: always
#PARENT: Gtk.SpinButtonUpdatePolicy
#COMMENT: When refreshing your #GtkSpinButton, the value is
    always displayed
#NAME: child_widget
#PARENT: Gtk.Layout.move.none
#COMMENT: a current child of @layout
#NAME: menu
#PARENT: Gtk.Menu.reorder_child.none
#COMMENT: a #GtkMenu
#NAME: accelerator_get_default_mod_mask
#PARENT: Gtk
#COMMENT: Gets the value set by gtk_accelerator_set_default_mod_mask().
#NAME: get_font_desc
#PARENT: Gtk.FontChooser
#COMMENT: Gets the currently-selected font.

Note that this can be a different string than what you set with
gtk_font_chooser_set_font(), as the font chooser widget may
normalize font names and thus return a string with a different
structure. For example, “Helvetica Italic Bold 12” could be
normalized to “Helvetica Bold Italic 12”.

Use pango_font_description_equal() if you want to compare two
font descriptions.
#NAME: top
#PARENT: Gtk.PositionType
#COMMENT: The feature is at the top edge.
#NAME: set_use_underline
#PARENT: Gtk.ToolButton
#COMMENT: If set, an underline in the label property indicates that the next character
should be used for the mnemonic accelerator key in the overflow menu. For
example, if the label property is “_Open” and @use_underline is %TRUE,
the label on the tool button will be “Open” and the item on the overflow
menu will have an underlined “O”.

Labels shown on tool buttons never have mnemonics on them; this property
only affects the menu item on the overflow menu.
#NAME: area
#PARENT: Gtk.CellArea.get_preferred_width.none
#COMMENT: a #GtkCellArea
#NAME: wide
#PARENT: Gtk.Paned.set_wide_handle.none
#COMMENT: the new value for the #GtkPaned:wide-handle property
#NAME: set_group_position
#PARENT: Gtk.ToolPalette
#COMMENT: Sets the position of the group as an index of the tool palette.
If position is 0 the group will become the first child, if position is
-1 it will become the last child.
#NAME: editable
#PARENT: Gtk.Editable.delete_text.none
#COMMENT: a #GtkEditable
#NAME: set_icon_size
#PARENT: Gtk.ToolPalette
#COMMENT: Sets the size of icons in the tool palette.
#NAME: no_drop
#PARENT: Gtk.IconViewDropPosition
#COMMENT: no drop possible
#NAME: func
#PARENT: Gtk.TextTagTable.foreach.none
#COMMENT: a function to call on each tag
#NAME: text_view
#PARENT: Gtk.TextView.scroll_to_iter.gboolean
#COMMENT: a #GtkTextView
#NAME: website
#PARENT: Gtk.AboutDialog
#COMMENT: The URL for the link to the website of the program.
This should be a string starting with "http://.
#NAME: print
#PARENT: Gtk.PrintOperationAction
#COMMENT: Start to print without showing
    the print dialog, based on the current print settings.
#NAME: widget
#PARENT: Gtk.Widget.hide_on_delete.gboolean
#COMMENT: a #GtkWidget
#NAME: xalign
#PARENT: Gtk.Button.get_alignment.none
#COMMENT: return location for horizontal alignment
#NAME: source
#PARENT: Gtk.IconSource.set_state.none
#COMMENT: a #GtkIconSource
#NAME: get_transitions_enabled
#PARENT: Gtk.Popover
#COMMENT: Returns whether show/hide transitions are enabled on this popover.
#NAME: gtk-im-status-style
#PARENT: Gtk.Settings
#COMMENT: How to draw the input method statusbar.
#NAME: merge
#PARENT: Gtk.StyleProperties
#COMMENT: Merges into @props all the style information contained
in @props_to_merge. If @replace is %TRUE, the values
will be overwritten, if it is %FALSE, the older values
will prevail.
#NAME: iter
#PARENT: Gtk.ListStore.set.none
#COMMENT: row iterator
#NAME: get_has_selection
#PARENT: Gtk.PrintOperation
#COMMENT: Gets the value of #GtkPrintOperation:has-selection property.
#NAME: gtk-can-change-accels
#PARENT: Gtk.Settings
#COMMENT: Whether menu accelerators can be changed by pressing a key over the menu item.
#NAME: popover
#PARENT: Gtk.MenuButton
#COMMENT: The #GtkPopover that will be popped up when the button is clicked.
#NAME: TEXT_VIEW_PRIORITY_VALIDATE
#PARENT: Gtk
#COMMENT: The priority at which the text view validates onscreen lines
in an idle job in the background.
#NAME: text_view
#PARENT: Gtk.TextView.set_accepts_tab.none
#COMMENT: A #GtkTextView
#NAME: builder
#PARENT: Gtk.BuildableIface.custom_tag_end.custom_tag_end.none
#COMMENT: #GtkBuilder used to construct this object
#NAME: get_icon
#PARENT: Gtk.RecentInfo.get_icon
#COMMENT: a #GdkPixbuf containing the icon,
    or %NULL. Use g_object_unref() when finished using the icon.
#NAME: widget
#PARENT: Gtk.Widget.drag_dest_add_uri_targets.none
#COMMENT: a #GtkWidget that’s a drag destination
#NAME: height
#PARENT: Gtk.paint_box.none
#COMMENT: the height of the box
#NAME: combo_box
#PARENT: Gtk.ComboBoxText.insert.none
#COMMENT: A #GtkComboBoxText
#NAME: builder
#PARENT: Gtk.Builder.add_from_string.guint
#COMMENT: a #GtkBuilder
#NAME: label
#PARENT: Gtk.Label.get_label.utf8
#COMMENT: a #GtkLabel
#NAME: StyleProperties
#PARENT: Gtk
#COMMENT: GtkStyleProperties provides the storage for style information
that is used by #GtkStyleContext and other #GtkStyleProvider
implementations.

Before style properties can be stored in GtkStyleProperties, they
must be registered with gtk_style_properties_register_property().

Unless you are writing a #GtkStyleProvider implementation, you
are unlikely to use this API directly, as gtk_style_context_get()
and its variants are the preferred way to access styling information
from widget implementations and theming engine implementations
should use the APIs provided by #GtkThemingEngine instead.

#GtkStyleProperties has been deprecated in GTK 3.16. The CSS
machinery does not use it anymore and all users of this object
have been deprecated.
#NAME: engine
#PARENT: Gtk.ThemingEngine.has_region.gboolean
#COMMENT: a #GtkThemingEngine
#NAME: pspec
#PARENT: Gtk.RcProperty.parse_requisition.gboolean
#COMMENT: a #GParamSpec
#NAME: unselect_all
#PARENT: Gtk.TreeSelection
#COMMENT: Unselects all the nodes.
#NAME: get_tooltip_text
#PARENT: Gtk.Widget
#COMMENT: Gets the contents of the tooltip for @widget.
#NAME: set_adjustment
#PARENT: Gtk.Range
#COMMENT: Sets the adjustment to be used as the “model” object for this range
widget. The adjustment indicates the current range value, the
minimum and maximum range values, the step/page increments used
for keybindings and scrolling, and the page size. The page size
is normally 0 for #GtkScale and nonzero for #GtkScrollbar, and
indicates the size of the visible area of the widget being scrolled.
The page size affects the size of the scrollbar slider.
#NAME: value
#PARENT: Gtk.StyleProvider.get_style_property.gboolean
#COMMENT: return location for the property value
#NAME: get_always_show_image
#PARENT: Gtk.Button.get_always_show_image
#COMMENT: %TRUE if the button will always show the image
#NAME: button
#PARENT: Gtk.RadioToolButton.set_group.none
#COMMENT: a #GtkRadioToolButton
#NAME: n_types
#PARENT: Gtk.test_list_all_types.GType
#COMMENT: location to store number of types
#NAME: entry
#PARENT: Gtk.Entry.get_buffer.EntryBuffer
#COMMENT: a #GtkEntry
#NAME: max
#PARENT: Gtk.HScale.new_with_range.Widget
#COMMENT: maximum value
#NAME: pack_type
#PARENT: Gtk.Box.query_child_packing.none
#COMMENT: pointer to return location for pack-type
    child property
#NAME: translation-domain
#PARENT: Gtk.Builder
#COMMENT: The translation domain used when translating property values that
have been marked as translatable in interface descriptions.
If the translation domain is %NULL, #GtkBuilder uses gettext(),
otherwise g_dgettext().
#NAME: icon_name
#PARENT: Gtk.Image.set_from_icon_name.none
#COMMENT: an icon name
#NAME: x
#PARENT: Gtk.ToolPalette.get_drop_group.ToolItemGroup
#COMMENT: the x position
#NAME: viewport
#PARENT: Gtk.Viewport.set_shadow_type.none
#COMMENT: a #GtkViewport.
#NAME: pixbuf
#PARENT: Gtk.Image.set_from_pixbuf.none
#COMMENT: a #GdkPixbuf or %NULL
#NAME: set_text_with_mnemonic
#PARENT: Gtk.Label
#COMMENT: Sets the label’s text from the string @str.
If characters in @str are preceded by an underscore, they are underlined
indicating that they represent a keyboard accelerator called a mnemonic.
The mnemonic key can be used to activate another widget, chosen
automatically, or explicitly using gtk_label_set_mnemonic_widget().
#NAME: menu_shell
#PARENT: Gtk.MenuShell.get_selected_item.Widget
#COMMENT: a #GtkMenuShell
#NAME: y
#PARENT: Gtk.ToolPalette.get_drop_group.ToolItemGroup
#COMMENT: the y position
#NAME: get_current_alpha
#PARENT: Gtk.ColorSelection
#COMMENT: Returns the current alpha value.
#NAME: STOCK_MEDIA_PLAY
#PARENT: Gtk
#COMMENT: The “Media Play” item and icon. The icon has an RTL variant.
#NAME: scale
#PARENT: Gtk.Scale.get_layout_offsets.none
#COMMENT: a #GtkScale
#NAME: get_status
#PARENT: Gtk.PrintOperation
#COMMENT: Returns the status of the print operation.
Also see gtk_print_operation_get_status_string().
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_uris.utf8
#COMMENT: a #GtkRecentChooser
#NAME: stack
#PARENT: Gtk.Stack.get_hhomogeneous.gboolean
#COMMENT: a #GtkStack
#NAME: buffer_x
#PARENT: Gtk.TextView.buffer_to_window_coords.none
#COMMENT: buffer x coordinate
#NAME: get_drop_item
#PARENT: Gtk.ToolPalette.get_drop_item
#COMMENT: the #GtkToolItem at position or %NULL if there is no such item
#NAME: palette
#PARENT: Gtk.ToolPalette.unset_style.none
#COMMENT: a #GtkToolPalette
#NAME: new_from_pixbuf
#PARENT: Gtk.IconSet.new_from_pixbuf
#COMMENT: a new #GtkIconSet
#NAME: buffer_y
#PARENT: Gtk.TextView.buffer_to_window_coords.none
#COMMENT: buffer y coordinate
#NAME: get_edited_cell
#PARENT: Gtk.CellArea.get_edited_cell
#COMMENT: The currently edited #GtkCellRenderer
#NAME: new
#PARENT: Gtk.HScrollbar
#COMMENT: Creates a new horizontal scrollbar.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_double.none
#COMMENT: a #GtkPrintSettings
#NAME: DirectionType
#PARENT: Gtk
#COMMENT: Focus movement types.
#NAME: entry
#PARENT: Gtk.Entry.set_icon_drag_source.none
#COMMENT: a #GtkEntry
#NAME: license
#PARENT: Gtk.AboutDialog
#COMMENT: The license of the program. This string is displayed in a
text view in a secondary dialog, therefore it is fine to use
a long multi-paragraph text. Note that the text is only wrapped
in the text view if the "wrap-license" property is set to %TRUE;
otherwise the text itself must contain the intended linebreaks.
When setting this property to a non-%NULL value, the
#GtkAboutDialog:license-type property is set to %GTK_LICENSE_CUSTOM
as a side effect.
#NAME: move-cursor
#PARENT: Gtk.Entry
#COMMENT: The ::move-cursor signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates a cursor movement.
If the cursor is not visible in @entry, this signal causes
the viewport to be moved instead.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically.

The default bindings for this signal come in two variants,
the variant with the Shift modifier extends the selection,
the variant without the Shift modifer does not.
There are too many key combinations to list them all here.
- Arrow keys move by individual characters/lines
- Ctrl-arrow key combinations move by words/paragraphs
- Home/End keys move to the ends of the buffer
#NAME: stock_id
#PARENT: Gtk.ToolButton.set_stock_id.none
#COMMENT: a name of a stock item, or %NULL
#NAME: iter_is_valid
#PARENT: Gtk.TreeStore.iter_is_valid
#COMMENT: %TRUE if the iter is valid, %FALSE if the iter is invalid.
#NAME: gradient
#PARENT: Gtk.Gradient.to_string.utf8
#COMMENT: the gradient to print
#NAME: area
#PARENT: Gtk.CellArea.apply_attributes.none
#COMMENT: a #GtkCellArea
#NAME: notebook
#PARENT: Gtk.Notebook.set_tab_detachable.none
#COMMENT: a #GtkNotebook
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_min_width.gint
#COMMENT: A #GtkTreeViewColumn.
#NAME: is_expanded
#PARENT: Gtk.TreeViewColumn.cell_set_cell_data.none
#COMMENT: %TRUE, if the row has visible children
#NAME: paint_focus
#PARENT: Gtk
#COMMENT: Draws a focus indicator around the given rectangle on @cr using the
given style.
#NAME: menu_item
#PARENT: Gtk.MenuItemClass.get_label.get_label.utf8
#COMMENT: a #GtkMenuItem
#NAME: path_string
#PARENT: Gtk.CellRendererAccel.accel-cleared.none
#COMMENT: the path identifying the row of the edited cell
#NAME: new
#PARENT: Gtk.SearchEntry.new
#COMMENT: a new #GtkSearchEntry
#NAME: EntryBuffer
#PARENT: Gtk
#COMMENT: The #GtkEntryBuffer class contains the actual text displayed in a
#GtkEntry widget.

A single #GtkEntryBuffer object can be shared by multiple #GtkEntry
widgets which will then share the same text content, but not the cursor
position, visibility attributes, icon etc.

#GtkEntryBuffer may be derived from. Such a derived class might allow
text to be stored in an alternate location, such as non-pageable memory,
useful in the case of important passwords. Or a derived class could
integrate with an application’s concept of undo/redo.
#NAME: short_label
#PARENT: Gtk.Action.set_short_label.none
#COMMENT: the label text to set
#NAME: set_composite_name
#PARENT: Gtk.Widget
#COMMENT: Sets a widgets composite name. The widget must be
a composite child of its parent; see gtk_widget_push_composite_child().
#NAME: factory
#PARENT: Gtk.IconFactory.lookup.IconSet
#COMMENT: a #GtkIconFactory
#NAME: set_show_not_found
#PARENT: Gtk.RecentChooser
#COMMENT: Sets whether @chooser should display the recently used resources that
it didn’t find.  This only applies to local resources.
#NAME: restore
#PARENT: Gtk.StyleContext
#COMMENT: Restores @context state to a previous stage.
See gtk_style_context_save().
#NAME: filter
#PARENT: Gtk.TreeModelFilter.convert_child_iter_to_iter.gboolean
#COMMENT: A #GtkTreeModelFilter.
#NAME: timestamp
#PARENT: Gtk.Window.begin_resize_drag.none
#COMMENT: timestamp from the click event that initiated the drag
#NAME: remove_accelerator
#PARENT: Gtk.Application
#COMMENT: Removes an accelerator that has been previously added
with gtk_application_add_accelerator().
#NAME: padding_left
#PARENT: Gtk.Alignment.set_padding.none
#COMMENT: the padding at the left of the widget
#NAME: get_visibility
#PARENT: Gtk.Entry
#COMMENT: Retrieves whether the text in @entry is visible. See
gtk_entry_set_visibility().
#NAME: new_with_range
#PARENT: Gtk.HScale
#COMMENT: Creates a new horizontal scale widget that lets the user input a
number between @min and @max (including @min and @max) with the
increment @step.  @step must be nonzero; it’s the distance the
slider moves when using the arrow keys to adjust the scale value.

Note that the way in which the precision is derived works best if @step
is a power of ten. If the resulting precision is not suitable for your
needs, use gtk_scale_set_digits() to correct it.
#NAME: new
#PARENT: Gtk.RecentChooserWidget.new
#COMMENT: a new #GtkRecentChooserWidget
#NAME: new
#PARENT: Gtk.Layout.new
#COMMENT: a new #GtkLayout
#NAME: set_cairo_context
#PARENT: Gtk.PrintContext
#COMMENT: Sets a new cairo context on a print context.

This function is intended to be used when implementing
an internal print preview, it is not needed for printing,
since GTK+ itself creates a suitable cairo context in that
case.
#NAME: new
#PARENT: Gtk.RcStyle.new
#COMMENT: the newly-created #GtkRcStyle
#NAME: padding
#PARENT: Gtk.Box.pack_end.none
#COMMENT: extra space in pixels to put between this child and its
  neighbors, over and above the global amount specified by
  #GtkBox:spacing property.  If @child is a widget at one of the
  reference ends of @box, then @padding pixels are also put between
  @child and the reference edge of @box
#NAME: extra_space
#PARENT: Gtk.distribute_natural_allocation.gint
#COMMENT: Extra space to redistribute among children after subtracting
              minimum sizes and any child padding from the overall allocation
#NAME: delete-from-cursor
#PARENT: Gtk.Entry
#COMMENT: The ::delete-from-cursor signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates a text deletion.

If the @type is %GTK_DELETE_CHARS, GTK+ deletes the selection
if there is one, otherwise it deletes the requested number
of characters.

The default bindings for this signal are
Delete for deleting a character and Ctrl-Delete for
deleting a word.
#NAME: actions
#PARENT: Gtk.IconView.enable_model_drag_source.none
#COMMENT: the bitmask of possible actions for a drag from this
   widget
#NAME: get_alignment
#PARENT: Gtk.Entry.get_alignment
#COMMENT: the alignment
#NAME: 
#PARENT: Gtk.ListStore.set.none...
#COMMENT: pairs of column number and value, terminated with -1
#NAME: get_popup_set_width
#PARENT: Gtk.EntryCompletion.get_popup_set_width
#COMMENT: %TRUE if the popup window will be resized to the width of
  the entry
#NAME: set_current_rgba
#PARENT: Gtk.ColorSelection
#COMMENT: Sets the current color to be @rgba.

The first time this is called, it will also set
the original color to be @rgba too.
#NAME: new
#PARENT: Gtk.ApplicationWindow
#COMMENT: Creates a new #GtkApplicationWindow.
#NAME: child
#PARENT: Gtk.Container.get_path_for_child.WidgetPath
#COMMENT: a child of @container
#NAME: set_visible
#PARENT: Gtk.Action
#COMMENT: Sets the :visible property of the action to @visible. Note that
this doesn’t necessarily mean effective visibility. See
gtk_action_is_visible()
for that.
#NAME: text_view
#PARENT: Gtk.TextView.set_pixels_inside_wrap.none
#COMMENT: a #GtkTextView
#NAME: widget_path_pspecs
#PARENT: Gtk.BindingSet
#COMMENT: unused
#NAME: is_expander
#PARENT: Gtk.TreeViewColumn.cell_set_cell_data.none
#COMMENT: %TRUE, if the row has children
#NAME: state_type
#PARENT: Gtk.paint_expander.none
#COMMENT: a state
#NAME: tx
#PARENT: Gtk.TreeView.convert_tree_to_widget_coords.none
#COMMENT: X coordinate relative to the tree
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_show_tips.gboolean
#COMMENT: a #GtkRecentChooser
#NAME: ty
#PARENT: Gtk.TreeView.convert_tree_to_widget_coords.none
#COMMENT: Y coordinate relative to the tree
#NAME: set_icon_sensitive
#PARENT: Gtk.Entry
#COMMENT: Sets the sensitivity for the specified icon.
#NAME: pspec
#PARENT: Gtk.RcProperty.parse_enum.gboolean
#COMMENT: a #GParamSpec
#NAME: get_reorderable
#PARENT: Gtk.TreeView
#COMMENT: Retrieves whether the user can reorder the tree via drag-and-drop. See
gtk_tree_view_set_reorderable().
#NAME: set_accel_group
#PARENT: Gtk.ImageMenuItem
#COMMENT: Specifies an @accel_group to add the menu items accelerator to
(this only applies to stock items so a stock item must already
be set, make sure to call gtk_image_menu_item_set_use_stock()
and gtk_menu_item_set_label() with a valid stock item first).

If you want this menu item to have changeable accelerators then
you shouldnt need this (see gtk_image_menu_item_new_from_stock()).
#NAME: info
#PARENT: Gtk.RecentInfo.get_private_hint.gboolean
#COMMENT: a #GtkRecentInfo
#NAME: damage-event
#PARENT: Gtk.Widget
#COMMENT: Emitted when a redirected window belonging to @widget gets drawn into.
The region/area members of the event shows what area of the redirected
drawable was drawn into.
#NAME: get_filename
#PARENT: Gtk.IconInfo.get_filename
#COMMENT: the filename for the icon, or %NULL
    if gtk_icon_info_get_builtin_pixbuf() should be used instead.
    The return value is owned by GTK+ and should not be modified
    or freed.
#NAME: selection-changed
#PARENT: Gtk.IconView
#COMMENT: The ::selection-changed signal is emitted when the selection
(i.e. the set of selected items) changes.
#NAME: new
#PARENT: Gtk.LockButton
#COMMENT: Creates a new lock button which reflects the @permission.
#NAME: set_transitions_enabled
#PARENT: Gtk.Popover
#COMMENT: Sets whether show/hide transitions are enabled on this popover
#NAME: chooser
#PARENT: Gtk.RecentChooser.set_limit.none
#COMMENT: a #GtkRecentChooser
#NAME: get_icon
#PARENT: Gtk.RecentInfo
#COMMENT: Retrieves the icon of size @size associated to the resource MIME type.
#NAME: tree_model
#PARENT: Gtk.TreeModel.ref_node.none
#COMMENT: a #GtkTreeModel
#NAME: parent_class
#PARENT: Gtk.OffscreenWindowClass
#COMMENT: The parent class.
#NAME: PolicyType
#PARENT: Gtk
#COMMENT: Determines how the size should be computed to achieve the one of the
visibility mode for the scrollbars.
#NAME: context
#PARENT: Gtk.drag_set_icon_name.none
#COMMENT: the context for a drag (This must be called
    with a context for the source side of a drag)
#NAME: all
#PARENT: Gtk.DestDefaults
#COMMENT: If set, specifies that all default actions should
  be taken.
#NAME: first_prop_name
#PARENT: Gtk.Container.child_set.none
#COMMENT: the name of the first property to set
#NAME: class_name
#PARENT: Gtk.StyleContext.add_class.none
#COMMENT: class name to use in styling
#NAME: widget
#PARENT: Gtk.Widget.override_background_color.none
#COMMENT: a #GtkWidget
#NAME: always-show-image
#PARENT: Gtk.Action
#COMMENT: If %TRUE, the action's menu item proxies will ignore the #GtkSettings:gtk-menu-images
setting and always show their image, if available.

Use this property if the menu item would be useless or hard to use
without their image.
#NAME: set_upper
#PARENT: Gtk.Adjustment
#COMMENT: Sets the maximum value of the adjustment.

Note that values will be restricted by
`upper - page-size` if the page-size
property is nonzero.

See gtk_adjustment_set_lower() about how to compress multiple
emissions of the #GtkAdjustment::changed signal when setting multiple adjustment
properties.
#NAME: builder
#PARENT: Gtk.Builder.get_translation_domain.utf8
#COMMENT: a #GtkBuilder
#NAME: button
#PARENT: Gtk.Button.set_image_position.none
#COMMENT: a #GtkButton
#NAME: RcProperty
#PARENT: Gtk
#COMMENT: Deprecated
#NAME: set_placement
#PARENT: Gtk.ScrolledWindow
#COMMENT: Sets the placement of the contents with respect to the scrollbars
for the scrolled window.

The default is %GTK_CORNER_TOP_LEFT, meaning the child is
in the top left, with the scrollbars underneath and to the right.
Other values in #GtkCornerType are %GTK_CORNER_TOP_RIGHT,
%GTK_CORNER_BOTTOM_LEFT, and %GTK_CORNER_BOTTOM_RIGHT.

See also gtk_scrolled_window_get_placement() and
gtk_scrolled_window_unset_placement().
#NAME: sw
#PARENT: Gtk.Switch.set_state.none
#COMMENT: a #GtkSwitch
#NAME: self
#PARENT: Gtk.AppChooserWidget.get_show_all.gboolean
#COMMENT: a #GtkAppChooserWidget
#NAME: set_vadjustment
#PARENT: Gtk.FlowBox
#COMMENT: Hooks up an adjustment to focus handling in @box.
The adjustment is also used for autoscrolling during
rubberband selection. See gtk_scrolled_window_get_vadjustment()
for a typical way of obtaining the adjustment, and
gtk_flow_box_set_hadjustment()for setting the horizontal
adjustment.

The adjustments have to be in pixel units and in the same
coordinate system as the allocation for immediate children
of the box.
#NAME: revealer
#PARENT: Gtk.Revealer.set_reveal_child.none
#COMMENT: a #GtkRevealer
#NAME: get_buffer
#PARENT: Gtk.TextView.get_buffer
#COMMENT: a #GtkTextBuffer
#NAME: name
#PARENT: Gtk.Stack.set_visible_child_name.none
#COMMENT: the name of the child to make visible
#NAME: height
#PARENT: Gtk.Layout.get_size.none
#COMMENT: location to store the height set on
    @layout, or %NULL
#NAME: child
#PARENT: Gtk.TextView.add_child_in_window.none
#COMMENT: a #GtkWidget
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_sort_column_id.gint
#COMMENT: a #GtkTreeViewColumn
#NAME: get_icon_sensitive
#PARENT: Gtk.Entry.get_icon_sensitive
#COMMENT: %TRUE if the icon is sensitive.
#NAME: notebook
#PARENT: Gtk.Notebook.get_menu_label.Widget
#COMMENT: a #GtkNotebook
#NAME: widget
#PARENT: Gtk.CellArea.get_preferred_height_for_width.none
#COMMENT: the #GtkWidget where @area will be rendering
#NAME: label
#PARENT: Gtk.Label.get_use_markup.gboolean
#COMMENT: a #GtkLabel
#NAME: text
#PARENT: Gtk.Statusbar.text-pushed.none
#COMMENT: the message that was pushed
#NAME: iter_get_name
#PARENT: Gtk.WidgetPath.iter_get_name
#COMMENT: The widget name, or %NULL if none was set.
#NAME: context
#PARENT: Gtk.PrintContext.get_dpi_y.gdouble
#COMMENT: a #GtkPrintContext
#NAME: widget
#PARENT: Gtk.Widget.get_has_window.gboolean
#COMMENT: a #GtkWidget
#NAME: invalid_file
#PARENT: Gtk.PrintError
#COMMENT: An error occurred while loading a page setup
    or paper size from a key file.
#NAME: x
#PARENT: Gtk.render_slider.none
#COMMENT: X origin of the rectangle
#NAME: unhandled_tag
#PARENT: Gtk.BuilderError
#COMMENT: The input contained a tag that #GtkBuilder
 can’t handle.
#NAME: xalign
#PARENT: Gtk.TextView.scroll_to_iter.gboolean
#COMMENT: horizontal alignment of mark within visible area
#NAME: y
#PARENT: Gtk.render_slider.none
#COMMENT: Y origin of the rectangle
#NAME: domain
#PARENT: Gtk.ActionGroup.set_translation_domain.none
#COMMENT: the translation domain to use for g_dgettext()
calls, or %NULL to use the domain set with textdomain()
#NAME: buffer
#PARENT: Gtk.EntryBufferClass.delete_text.delete_text.guint
#COMMENT: a #GtkEntryBuffer
#NAME: step_backward
#PARENT: Gtk.ScrollType
#COMMENT: Step backward.
#NAME: get_message_area
#PARENT: Gtk.Statusbar
#COMMENT: Retrieves the box containing the label widget.
#NAME: child
#PARENT: Gtk.Notebook.set_menu_label_text.none
#COMMENT: the child widget
#NAME: new
#PARENT: Gtk.Plug.new
#COMMENT: the new #GtkPlug widget.
#NAME: get_use_color
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_USE_COLOR.
#NAME: new
#PARENT: Gtk.StackSidebar
#COMMENT: Creates a new sidebar.
#NAME: set_stack
#PARENT: Gtk.StackSidebar
#COMMENT: Set the #GtkStack associated with this #GtkStackSidebar.

The sidebar widget will automatically update according to the order
(packing) and items within the given #GtkStack.
#NAME: set_current_value
#PARENT: Gtk.RadioAction
#COMMENT: Sets the currently active group member to the member with value
property @current_value.
#NAME: changed
#PARENT: Gtk.FlowBoxChild
#COMMENT: Marks @child as changed, causing any state that depends on this
to be updated. This affects sorting and filtering.

Note that calls to this method must be in sync with the data
used for the sorting and filtering functions. For instance, if
the list is mirroring some external data set, and *two* children
changed in the external data set when you call
gtk_flow_box_child_changed() on the first child, the sort function
must only read the new data for the first of the two changed
children, otherwise the resorting of the children will be wrong.

This generally means that if you don’t fully control the data
model, you have to duplicate the data that affects the sorting
and filtering functions into the widgets themselves. Another
alternative is to call gtk_flow_box_invalidate_sort() on any
model change, but that is more expensive.
#NAME: activate_cell
#PARENT: Gtk.CellArea.activate_cell
#COMMENT: whether cell activation was successful
#NAME: pages
#PARENT: Gtk.PrintSettings.set_print_pages.none
#COMMENT: a #GtkPrintPages value
#NAME: user_data
#PARENT: Gtk.TreeModel.foreach.none
#COMMENT: user data to passed to @func
#NAME: has_parent
#PARENT: Gtk.WidgetPath
#COMMENT: Returns %TRUE if any of the parents of the widget represented
in @path is of type @type, or any subtype of it.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_has_qname.gboolean
#COMMENT: position to query, -1 for the path head
#NAME: widget
#PARENT: Gtk.CellRenderer.get_preferred_width_for_height.none
#COMMENT: the #GtkWidget this cell will be rendering to
#NAME: n_colors
#PARENT: Gtk.ColorSelection.palette_from_string.gboolean
#COMMENT: return location for length of array
#NAME: append_for_widget
#PARENT: Gtk.WidgetPath
#COMMENT: Appends the data from @widget to the widget hierarchy represented
by @path. This function is a shortcut for adding information from
@widget to the given @path. This includes setting the name or
adding the style classes from @widget.
#NAME: widget
#PARENT: Gtk.paint_handle.none
#COMMENT: the widget
#NAME: drag_x
#PARENT: Gtk.IconView.get_dest_item_at_pos.gboolean
#COMMENT: the position to determine the destination item for
#NAME: set_filter_func
#PARENT: Gtk.ListBox
#COMMENT: By setting a filter function on the @box one can decide dynamically which
of the rows to show. For instance, to implement a search function on a list that
filters the original list to only show the matching rows.

The @filter_func will be called for each row after the call, and it will
continue to be called each time a row changes (via gtk_list_box_row_changed()) or
when gtk_list_box_invalidate_filter() is called.
#NAME: get_index
#PARENT: Gtk.FlowBoxChild.get_index
#COMMENT: the index of the @child, or -1 if the @child is not
    in a flow box.
#NAME: drag_y
#PARENT: Gtk.IconView.get_dest_item_at_pos.gboolean
#COMMENT: the position to determine the destination item for
#NAME: has_application
#PARENT: Gtk.RecentInfo.has_application
#COMMENT: %TRUE if an application with name @app_name was found,
  %FALSE otherwise
#NAME: style
#PARENT: Gtk.Style.lookup_icon_set.IconSet
#COMMENT: a #GtkStyle
#NAME: get_action
#PARENT: Gtk.FileChooser
#COMMENT: Gets the type of operation that the file chooser is performing; see
gtk_file_chooser_set_action().
#NAME: width
#PARENT: Gtk.Grid.attach_next_to.none
#COMMENT: the number of columns that @child will span
#NAME: get_n_pages
#PARENT: Gtk.Notebook.get_n_pages
#COMMENT: the number of pages in the notebook
#NAME: new_order
#PARENT: Gtk.TreeModel.rows-reordered.none
#COMMENT: an array of integers mapping the current position
    of each child to its old position before the re-ordering,
    i.e. @new_order`[newpos] = oldpos`
#NAME: cr
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: a #cairo_t
#NAME: cell-area
#PARENT: Gtk.IconView
#COMMENT: The #GtkCellArea used to layout cell renderers for this view.

If no area is specified when creating the icon view with gtk_icon_view_new_with_area()
a #GtkCellAreaBox will be used.
#NAME: new_with_mnemonic_from_widget
#PARENT: Gtk.RadioMenuItem
#COMMENT: Creates a new GtkRadioMenuItem containing a label. The label will be
created using gtk_label_new_with_mnemonic(), so underscores in label
indicate the mnemonic for the menu item.

The new #GtkRadioMenuItem is added to the same group as @group.
#NAME: load
#PARENT: Gtk.AccelMap
#COMMENT: Parses a file previously saved with gtk_accel_map_save() for
accelerator specifications, and propagates them accordingly.
#NAME: PAPER_NAME_LETTER
#PARENT: Gtk
#COMMENT: Name for the Letter paper size.
#NAME: get_mode
#PARENT: Gtk.LevelBar
#COMMENT: Returns the value of the #GtkLevelBar:mode property.
#NAME: key
#PARENT: Gtk.PrintSettings.get_length.gdouble
#COMMENT: a key
#NAME: get_parent
#PARENT: Gtk.StyleContext
#COMMENT: Gets the parent context set via gtk_style_context_set_parent().
See that function for details.
#NAME: widget
#PARENT: Gtk.TextWindowType
#COMMENT: Window that floats over scrolling areas.
#NAME: pack1
#PARENT: Gtk.Paned
#COMMENT: Adds a child to the top or left pane.
#NAME: mark
#PARENT: Gtk.TextMark.get_deleted.gboolean
#COMMENT: a #GtkTextMark
#NAME: message-type
#PARENT: Gtk.MessageDialog
#COMMENT: The type of the message.
#NAME: pack2
#PARENT: Gtk.Paned
#COMMENT: Adds a child to the bottom or right pane.
#NAME: get_modifier_style
#PARENT: Gtk.Widget
#COMMENT: Returns the current modifier style for the widget. (As set by
gtk_widget_modify_style().) If no style has previously set, a new
#GtkRcStyle will be created with all values unset, and set as the
modifier style for the widget. If you make changes to this rc
style, you must call gtk_widget_modify_style(), passing in the
returned rc style, to make sure that your changes take effect.

Caution: passing the style back to gtk_widget_modify_style() will
normally end up destroying it, because gtk_widget_modify_style() copies
the passed-in style and sets the copy as the new modifier style,
thus dropping any reference to the old modifier style. Add a reference
to the modifier style if you want to keep it alive.
#NAME: enable
#PARENT: Gtk.Window.set_interactive_debugging.none
#COMMENT: %TRUE to enable interactive debugging
#NAME: gicon
#PARENT: Gtk.Image.get_gicon.none
#COMMENT: place to store a
    #GIcon, or %NULL
#NAME: get_path
#PARENT: Gtk.TreeModel
#COMMENT: Returns a newly-created #GtkTreePath-struct referenced by @iter.

This path should be freed with gtk_tree_path_free().
#NAME: next-month
#PARENT: Gtk.Calendar
#COMMENT: Emitted when the user switched to the next month.
#NAME: completion
#PARENT: Gtk.EntryCompletion.get_minimum_key_length.gint
#COMMENT: a #GtkEntryCompletion
#NAME: get_filename
#PARENT: Gtk.IconInfo
#COMMENT: Gets the filename for the icon. If the %GTK_ICON_LOOKUP_USE_BUILTIN
flag was passed to gtk_icon_theme_lookup_icon(), there may be no
filename if a builtin icon is returned; in this case, you should
use gtk_icon_info_get_builtin_pixbuf().
#NAME: resolution_x
#PARENT: Gtk.PrintSettings.set_resolution_xy.none
#COMMENT: the horizontal resolution in dpi
#NAME: STYLE_CLASS_LIST
#PARENT: Gtk
#COMMENT: A CSS class to match lists.

This is used by #GtkListBox.
#NAME: if_valid
#PARENT: Gtk.SpinButtonUpdatePolicy
#COMMENT: When refreshing your #GtkSpinButton, the value is
    only displayed if it is valid within the bounds of the spin button's
    adjustment
#NAME: set_popup_single_match
#PARENT: Gtk.EntryCompletion
#COMMENT: Sets whether the completion popup window will appear even if there is
only a single match. You may want to set this to %FALSE if you
are using [inline completion][GtkEntryCompletion--inline-completion].
#NAME: child
#PARENT: Gtk.Notebook.set_tab_reorderable.none
#COMMENT: a child #GtkWidget
#NAME: resolution_y
#PARENT: Gtk.PrintSettings.set_resolution_xy.none
#COMMENT: the vertical resolution in dpi
#NAME: sending_data
#PARENT: Gtk.PrintStatus
#COMMENT: The print job is being sent off to the
    printer.
#NAME: get_accel
#PARENT: Gtk.AccelLabel
#COMMENT: Gets the keyval and modifier mask set with
gtk_accel_label_set_accel().
#NAME: unselect_all
#PARENT: Gtk.IconView
#COMMENT: Unselects all the icons.
#NAME: new_from_model
#PARENT: Gtk.MenuBar.new_from_model
#COMMENT: a new #GtkMenuBar
#NAME: set_has_resize_grip
#PARENT: Gtk.Window
#COMMENT: Sets whether @window has a corner resize grip.

Note that the resize grip is only shown if the window
is actually resizable and not maximized. Use
gtk_window_resize_grip_is_visible() to find out if the
resize grip is currently shown.
#NAME: mode
#PARENT: Gtk.LevelBar
#COMMENT: The #GtkLevelBar:mode property determines the way #GtkLevelBar
interprets the value properties to draw the level fill area.
Specifically, when the value is #GTK_LEVEL_BAR_MODE_CONTINUOUS,
#GtkLevelBar will draw a single block representing the current value in
that area; when the value is #GTK_LEVEL_BAR_MODE_DISCRETE,
the widget will draw a succession of separate blocks filling the
draw area, with the number of blocks being equal to the units separating
the integral roundings of #GtkLevelBar:min-value and #GtkLevelBar:max-value.
#NAME: day-selected
#PARENT: Gtk.Calendar
#COMMENT: Emitted when the user selects a day.
#NAME: stack
#PARENT: Gtk.StackSwitcher.set_stack.none
#COMMENT: a #GtkStack
#NAME: args
#PARENT: Gtk.StyleProperties.set_valist.none
#COMMENT: va_list of property name/value pairs, followed by %NULL
#NAME: set_select_function
#PARENT: Gtk.TreeSelection
#COMMENT: Sets the selection function.

If set, this function is called before any node is selected or unselected,
giving some control over which nodes are selected. The select function
should return %TRUE if the state of the node may be toggled, and %FALSE
if the state of the node should be left unchanged.
#NAME: show-preview-entry
#PARENT: Gtk.FontChooser
#COMMENT: Whether to show an entry to change the preview text.
#NAME: row1
#PARENT: Gtk.ListBoxSortFunc.gint
#COMMENT: the first row
#NAME: area
#PARENT: Gtk.CellAreaClass.activate.activate.gboolean
#COMMENT: a #GtkCellArea
#NAME: button
#PARENT: Gtk.Button.get_alignment.none
#COMMENT: a #GtkButton
#NAME: row2
#PARENT: Gtk.ListBoxSortFunc.gint
#COMMENT: the second row
#NAME: ythickness
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: dialog
#PARENT: Gtk.Dialog.set_alternative_button_order.none
#COMMENT: a #GtkDialog
#NAME: position
#PARENT: Gtk.Grid.insert_row.none
#COMMENT: the position to insert the row at
#NAME: alignment
#PARENT: Gtk.CellRendererText
#COMMENT: Specifies how to align the lines of text with respect to each other.

Note that this property describes how to align the lines of text in
case there are several of them. The "xalign" property of #GtkCellRenderer,
on the other hand, sets the horizontal alignment of the whole text.
#NAME: column
#PARENT: Gtk.TreeModelFilter.set_visible_column.none
#COMMENT: A #gint which is the column containing the visible information
#NAME: set_show_fallback
#PARENT: Gtk.AppChooserWidget
#COMMENT: Sets whether the app chooser should show related applications
for the content type in a separate section.
#NAME: range
#PARENT: Gtk.Range.get_show_fill_level.gboolean
#COMMENT: A #GtkRange
#NAME: minor
#PARENT: Gtk.GLArea.set_required_version.none
#COMMENT: the minor version
#NAME: get_sort_indicator
#PARENT: Gtk.TreeViewColumn.get_sort_indicator
#COMMENT: whether the sort indicator arrow is displayed
#NAME: menu
#PARENT: Gtk.Menu.attach_to_widget.none
#COMMENT: a #GtkMenu
#NAME: parent_class
#PARENT: Gtk.RcStyleClass
#COMMENT: The parent class.
#NAME: scroll-event
#PARENT: Gtk.StatusIcon
#COMMENT: The ::scroll-event signal is emitted when a button in the 4 to 7
range is pressed. Wheel mice are usually configured to generate
button press events for buttons 4 and 5 when the wheel is turned.

Whether this event is emitted is platform-dependent.
#NAME: get_widget
#PARENT: Gtk.EventController.get_widget
#COMMENT: a #GtkWidget
#NAME: label
#PARENT: Gtk.ImageMenuItem.new_with_label.Widget
#COMMENT: the text of the menu item.
#NAME: set_tab_pos
#PARENT: Gtk.Notebook
#COMMENT: Sets the edge at which the tabs for switching pages in the
notebook are drawn.
#NAME: sort_func
#PARENT: Gtk.RecentChooser.set_sort_func.none
#COMMENT: the comparison function
#NAME: add_ui
#PARENT: Gtk.UIManager
#COMMENT: Adds a UI element to the current contents of @manager.

If @type is %GTK_UI_MANAGER_AUTO, GTK+ inserts a menuitem, toolitem or
separator if such an element can be inserted at the place determined by
@path. Otherwise @type must indicate an element that can be inserted at
the place determined by @path.

If @path points to a menuitem or toolitem, the new element will be inserted
before or after this item, depending on @top.
#NAME: type_name
#PARENT: Gtk.BuilderClass.get_type_from_name.get_type_from_name.GType
#COMMENT: type name to lookup
#NAME: context
#PARENT: Gtk.StyleContext.set_path.none
#COMMENT: a #GtkStyleContext
#NAME: text
#PARENT: Gtk.TextBuffer.insert-text.none
#COMMENT: the UTF-8 text to be inserted
#NAME: flags
#PARENT: Gtk.WidgetPath.iter_has_qregion.gboolean
#COMMENT: return location for the region flags
#NAME: grid
#PARENT: Gtk.Grid.remove_column.none
#COMMENT: a #GtkGrid
#NAME: same_widget
#PARENT: Gtk.TargetFlags
#COMMENT: If this is set, the target will only be selected
  for drags within a single widget.
#NAME: set_display_options
#PARENT: Gtk.Calendar
#COMMENT: Sets display options (whether to display the heading and the month
headings).
#NAME: STOCK_CLEAR
#PARENT: Gtk
#COMMENT: The “Clear” item and icon.
#NAME: STOCK_MEDIA_FORWARD
#PARENT: Gtk
#COMMENT: The “Media Forward” item and icon. The icon has an RTL variant.
#NAME: get_margin_left
#PARENT: Gtk.Widget
#COMMENT: Gets the value of the #GtkWidget:margin-left property.
#NAME: set_image_position
#PARENT: Gtk.Button
#COMMENT: Sets the position of the image relative to the text
inside the button.
#NAME: adjustment
#PARENT: Gtk.Adjustment.set_upper.none
#COMMENT: a #GtkAdjustment
#NAME: sortable
#PARENT: Gtk.TreeSortableIface.set_sort_column_id.set_sort_column_id.none
#COMMENT: A #GtkTreeSortable
#NAME: x0
#PARENT: Gtk.Gradient.new_linear.Gradient
#COMMENT: X coordinate of the starting point
#NAME: set_expand
#PARENT: Gtk.ToolItem
#COMMENT: Sets whether @tool_item is allocated extra space when there
is more room on the toolbar then needed for the items. The
effect is that the item gets bigger when the toolbar gets bigger
and smaller when the toolbar gets smaller.
#NAME: x1
#PARENT: Gtk.Gradient.new_linear.Gradient
#COMMENT: X coordinate of the end point
#NAME: iter
#PARENT: Gtk.CellAreaClass.apply_attributes.apply_attributes.none
#COMMENT: the #GtkTreeIter in @tree_model to apply values for
#NAME: load_icon_finish
#PARENT: Gtk.IconInfo.load_icon_finish
#COMMENT: the rendered icon; this may be a newly
    created icon or a new reference to an internal icon, so you must
    not modify the icon. Use g_object_unref() to release your reference
    to the icon.
#NAME: radio_menu_item
#PARENT: Gtk.RadioMenuItem.get_group.RadioMenuItem
#COMMENT: a #GtkRadioMenuItem
#NAME: cell
#PARENT: Gtk.TreeView.insert_column_with_data_func.gint
#COMMENT: cell renderer for column
#NAME: font_button
#PARENT: Gtk.FontButton.get_use_font.gboolean
#COMMENT: a #GtkFontButton
#NAME: grab_widget
#PARENT: Gtk.KeySnoopFunc.gint
#COMMENT: the widget to which the event will be delivered
#NAME: select_region
#PARENT: Gtk.Label
#COMMENT: Selects a range of characters in the label, if the label is selectable.
See gtk_label_set_selectable(). If the label is not selectable,
this function has no effect. If @start_offset or
@end_offset are -1, then the end of the label will be substituted.
#NAME: new
#PARENT: Gtk.ToolButton.new
#COMMENT: A new #GtkToolButton
#NAME: parent
#PARENT: Gtk.ColorChooserDialog.new.Widget
#COMMENT: Transient parent of the dialog, or %NULL
#NAME: get_padding
#PARENT: Gtk.StyleContext
#COMMENT: Gets the padding for a given state as a #GtkBorder.
See %GTK_STYLE_PROPERTY_PADDING.
#NAME: new_with_mnemonic
#PARENT: Gtk.CheckMenuItem
#COMMENT: Creates a new #GtkCheckMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.
#NAME: area
#PARENT: Gtk.GLArea.set_has_alpha.none
#COMMENT: a #GtkGLArea
#NAME: iter_has_class
#PARENT: Gtk.WidgetPath
#COMMENT: Returns %TRUE if the widget at position @pos has the class @name
defined, %FALSE otherwise.
#NAME: is_showing
#PARENT: Gtk.MountOperation.is_showing
#COMMENT: %TRUE if @op is currently displaying a window
#NAME: get_child_anchor
#PARENT: Gtk.TextIter
#COMMENT: If the location at @iter contains a child anchor, the
anchor is returned (with no new reference count added). Otherwise,
%NULL is returned.
#NAME: set_show_close_button
#PARENT: Gtk.HeaderBar
#COMMENT: Sets whether this header bar shows the standard window decorations,
including close, maximize, and minimize.
#NAME: fontchooser
#PARENT: Gtk.FontChooser.get_font_family.Pango.FontFamily
#COMMENT: a #GtkFontChooser
#NAME: use_size
#PARENT: Gtk.FontButton.set_use_size.none
#COMMENT: If %TRUE, font name will be written using the selected size.
#NAME: list_icons
#PARENT: Gtk.IconTheme.list_icons
#COMMENT: a #GList list
    holding the names of all the icons in the theme. You must
    first free each element in the list with g_free(), then
    free the list itself with g_list_free().
#NAME: size
#PARENT: Gtk.IconTheme.load_icon.GdkPixbuf.Pixbuf
#COMMENT: the desired icon size. The resulting icon may not be
    exactly this size; see gtk_icon_info_load_icon().
#NAME: to_string
#PARENT: Gtk.SymbolicColor
#COMMENT: Converts the given @color to a string representation. This is useful
both for debugging and for serialization of strings. The format of
the string may change between different versions of GTK, but it is
guaranteed that the GTK css parser is able to read the string and
create the same symbolic color from it.
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_modified.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: style
#PARENT: Gtk.Widget.set_style.none
#COMMENT: a #GtkStyle, or %NULL to remove the effect
    of a previous call to gtk_widget_set_style() and go back to
    the default style
#NAME: new_with_area
#PARENT: Gtk.EntryCompletion
#COMMENT: Creates a new #GtkEntryCompletion object using the
specified @area to layout cells in the underlying
#GtkTreeViewColumn for the drop-down menu.
#NAME: construct_child
#PARENT: Gtk.Buildable.construct_child
#COMMENT: the constructed child
#NAME: tree_store
#PARENT: Gtk.TreeStore.set_column_types.none
#COMMENT: A #GtkTreeStore
#NAME: page_nr
#PARENT: Gtk.PrintOperationPreviewIface.is_selected.is_selected.gboolean
#COMMENT: a page number
#NAME: set_artists
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the strings which are displayed in the artists tab
of the secondary credits dialog.
#NAME: STOCK_LEAVE_FULLSCREEN
#PARENT: Gtk
#COMMENT: The “Leave Fullscreen” item and icon.
#NAME: setting
#PARENT: Gtk.Window.set_skip_pager_hint.none
#COMMENT: %TRUE to keep this window from appearing in the pager
#NAME: InputHints
#PARENT: Gtk
#COMMENT: Describes hints that might be taken into account by input methods
or applications. Note that input methods may already tailor their
behaviour according to the #GtkInputPurpose of the entry.

Some common sense is expected when using these flags - mixing
@GTK_INPUT_HINT_LOWERCASE with any of the uppercase hints makes no sense.

This enumeration may be extended in the future; input methods should
ignore unknown values.
#NAME: func_data
#PARENT: Gtk.CellLayout.set_cell_data_func.none
#COMMENT: user data for @func
#NAME: user_data
#PARENT: Gtk.ActionGroup.add_actions_full.none
#COMMENT: data to pass to the action callbacks
#NAME: tagname
#PARENT: Gtk.BuildableIface.custom_tag_start.custom_tag_start.gboolean
#COMMENT: name of tag
#NAME: button-release-event
#PARENT: Gtk.Widget
#COMMENT: The ::button-release-event signal will be emitted when a button
(typically from a mouse) is released.

To receive this signal, the #GdkWindow associated to the
widget needs to enable the #GDK_BUTTON_RELEASE_MASK mask.

This signal will be sent to the grab widget if there is one.
#NAME: name
#PARENT: Gtk.WidgetPath.iter_remove_class.none
#COMMENT: class name
#NAME: CellRendererText
#PARENT: Gtk
#COMMENT: A #GtkCellRendererText renders a given text in its cell, using the font, color and
style information provided by its properties. The text will be ellipsized if it is
too long and the #GtkCellRendererText:ellipsize property allows it.

If the #GtkCellRenderer:mode is %GTK_CELL_RENDERER_MODE_EDITABLE,
the #GtkCellRendererText allows to edit its text using an entry.
#NAME: cursor_pos
#PARENT: Gtk.IMContextClass.get_preedit_string.get_preedit_string.none
#COMMENT: location to store position of cursor (in characters)
             within the preedit string.
#NAME: op
#PARENT: Gtk.PrintOperation.set_default_page_setup.none
#COMMENT: a #GtkPrintOperation
#NAME: time_
#PARENT: Gtk.RecentInfo.get_application_info.gboolean
#COMMENT: return location for the timestamp this item was last registered
   for this application
#NAME: new
#PARENT: Gtk.ToggleAction
#COMMENT: Creates a new #GtkToggleAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_alignment.gfloat
#COMMENT: A #GtkTreeViewColumn.
#NAME: minimum_height
#PARENT: Gtk.CellArea.get_preferred_height_for_width.none
#COMMENT: location to store the minimum height, or %NULL
#NAME: snooper_handler_id
#PARENT: Gtk.key_snooper_remove.none
#COMMENT: Identifies the key snooper to remove
#NAME: list_windows
#PARENT: Gtk.WindowGroup
#COMMENT: Returns a list of the #GtkWindows that belong to @window_group.
#NAME: insert
#PARENT: Gtk.FlowBox
#COMMENT: Inserts the @widget into @box at @position.

If a sort function is set, the widget will actually be inserted
at the calculated position and this function has the same effect
as gtk_container_add().

If @position is -1, or larger than the total number of children
in the @box, then the @widget will be appended to the end.
#NAME: propagate_draw
#PARENT: Gtk.Container
#COMMENT: When a container receives a call to the draw function, it must send
synthetic #GtkWidget::draw calls to all children that don’t have their
own #GdkWindows. This function provides a convenient way of doing this.
A container, when it receives a call to its #GtkWidget::draw function,
calls gtk_container_propagate_draw() once for each child, passing in
the @cr the container received.

gtk_container_propagate_draw() takes care of translating the origin of @cr,
and deciding whether the draw needs to be sent to the child. It is a
convenient and optimized way of getting the same effect as calling
gtk_widget_draw() on the child directly.

In most cases, a container can simply either inherit the
#GtkWidget::draw implementation from #GtkContainer, or do some drawing
and then chain to the ::draw implementation from #GtkContainer.
#NAME: STYLE_PROVIDER_PRIORITY_FALLBACK
#PARENT: Gtk
#COMMENT: The priority used for default style information
that is used in the absence of themes.

Note that this is not very useful for providing default
styling for custom style classes - themes are likely to
override styling provided at this priority with
catch-all `* {...}` rules.
#NAME: tree_store
#PARENT: Gtk.TreeStore.reorder.none
#COMMENT: A #GtkTreeStore
#NAME: set_hadjustment
#PARENT: Gtk.Layout
#COMMENT: Sets the horizontal scroll adjustment for the layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
#NAME: new
#PARENT: Gtk.RecentChooserMenu
#COMMENT: Creates a new #GtkRecentChooserMenu widget.

This kind of widget shows the list of recently used resources as
a menu, each item as a menu item.  Each item inside the menu might
have an icon, representing its MIME type, and a number, for mnemonic
access.

This widget implements the #GtkRecentChooser interface.

This widget creates its own #GtkRecentManager object.  See the
gtk_recent_chooser_menu_new_for_manager() function to know how to create
a #GtkRecentChooserMenu widget bound to another #GtkRecentManager object.
#NAME: 
#PARENT: Gtk.CellArea.cell_get.none...
#COMMENT: return location for the first cell property, followed
    optionally by more name/return location pairs, followed by %NULL
#NAME: keyval
#PARENT: Gtk.bindings_activate.gboolean
#COMMENT: key value of the binding
#NAME: show_enter_location
#PARENT: Gtk.PlacesSidebar.set_show_enter_location.none
#COMMENT: whether to show an item for the Connect to Server command
#NAME: table
#PARENT: Gtk.TextTagTable.foreach.none
#COMMENT: a #GtkTextTagTable
#NAME: sidebar
#PARENT: Gtk.StackSidebar.get_stack.Stack
#COMMENT: a #GtkStackSidebar
#NAME: resize
#PARENT: Gtk.Table
#COMMENT: If you need to change a table’s size after
it has been created, this function allows you to do so.
#NAME: text_view
#PARENT: Gtk.TextView.get_pixels_above_lines.gint
#COMMENT: a #GtkTextView
#NAME: path
#PARENT: Gtk.TreeDragSourceIface.drag_data_get.drag_data_get.gboolean
#COMMENT: row that was dragged
#NAME: child_iter
#PARENT: Gtk.TreeModelFilter.convert_iter_to_child_iter.none
#COMMENT: An uninitialized #GtkTreeIter.
#NAME: gesture
#PARENT: Gtk.GestureDrag.get_start_point.gboolean
#COMMENT: a #GtkGesture
#NAME: state_type
#PARENT: Gtk.paint_check.none
#COMMENT: a state
#NAME: set_markup_column
#PARENT: Gtk.IconView
#COMMENT: Sets the column with markup information for @icon_view to be
@column. The markup column must be of type #G_TYPE_STRING.
If the markup column is set to something, it overrides
the text column set by gtk_icon_view_set_text_column().
#NAME: manager
#PARENT: Gtk.RecentManager.move_item.gboolean
#COMMENT: a #GtkRecentManager
#NAME: filename
#PARENT: Gtk.FileChooser.unselect_filename.none
#COMMENT: the filename to unselect
#NAME: clipboard
#PARENT: Gtk.Clipboard.request_text.none
#COMMENT: a #GtkClipboard
#NAME: unref
#PARENT: Gtk.TextAttributes
#COMMENT: Decrements the reference count on @values, freeing the structure
if the reference count reaches 0.
#NAME: window
#PARENT: Gtk.Window.set_icon.none
#COMMENT: a #GtkWindow
#NAME: hot_x
#PARENT: Gtk.drag_set_icon_gicon.none
#COMMENT: the X offset of the hotspot within the icon
#NAME: hot_y
#PARENT: Gtk.drag_set_icon_gicon.none
#COMMENT: the Y offset of the hotspot within the icon
#NAME: shell
#PARENT: Gtk.ToolShellIface.get_text_size_group.get_text_size_group.SizeGroup
#COMMENT: a #GtkToolShell
#NAME: widget
#PARENT: Gtk.Widget.set_mapped.none
#COMMENT: a #GtkWidget
#NAME: for_size
#PARENT: Gtk.CellArea.request_renderer.none
#COMMENT: the allocation contextual size to request for, or -1 if
the base request for the orientation is to be returned.
#NAME: get_size_list
#PARENT: Gtk.FontSelection
#COMMENT: This returns the #GtkTreeView used to list font sizes.
#NAME: secondary-text
#PARENT: Gtk.MessageDialog
#COMMENT: The secondary text of the message dialog.
#NAME: STYLE_CLASS_TOUCH_SELECTION
#PARENT: Gtk
#COMMENT: A CSS class for touch selection popups on entries
and text views.
#NAME: delete_mark_by_name
#PARENT: Gtk.TextBuffer
#COMMENT: Deletes the mark named @name; the mark must exist. See
gtk_text_buffer_delete_mark() for details.
#NAME: y0
#PARENT: Gtk.Gradient.new_linear.Gradient
#COMMENT: Y coordinate of the starting point
#NAME: surface
#PARENT: Gtk.ImageType
#COMMENT: the widget contains a #cairo_surface_t.
 This image type was added in GTK+ 3.10
#NAME: prepend
#PARENT: Gtk.MenuShell
#COMMENT: Adds a new #GtkMenuItem to the beginning of the menu shell's
item list.
#NAME: gtk-titlebar-right-click
#PARENT: Gtk.Settings
#COMMENT: This setting determines the action to take when a right-click
occurs on the titlebar of client-side decorated windows.

Recognized actions are minimize, toggle-maximize, menu, lower
or none.
#NAME: get_ellipsize_mode
#PARENT: Gtk.ToolShell
#COMMENT: Retrieves the current ellipsize mode for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_ellipsize_mode()
instead.
#NAME: empty
#PARENT: Gtk.ToolbarSpaceStyle
#COMMENT: Use blank spacers.
#NAME: do_set_related_action
#PARENT: Gtk.Activatable
#COMMENT: This is a utility function for #GtkActivatable implementors.

When implementing #GtkActivatable you must call this when
handling changes of the #GtkActivatable:related-action, and
you must also use this to break references in #GObject->dispose().

This function adds a reference to the currently set related
action for you, it also makes sure the #GtkActivatable->update()
method is called when the related #GtkAction properties change
and registers to the action’s proxy list.

> Be careful to call this before setting the local
> copy of the #GtkAction property, since this function uses
> gtk_activatable_get_related_action() to retrieve the
> previous action.
#NAME: y1
#PARENT: Gtk.Gradient.new_linear.Gradient
#COMMENT: Y coordinate of the end point
#NAME: action
#PARENT: Gtk.FileChooser.set_action.none
#COMMENT: the action that the file selector is performing
#NAME: homogeneous
#PARENT: Gtk.ToolItem.set_homogeneous.none
#COMMENT: whether @tool_item is the same size as other homogeneous items
#NAME: custom_tag_start
#PARENT: Gtk.BuildableIface.custom_tag_start.custom_tag_start
#COMMENT: %TRUE if a object has a custom implementation, %FALSE
         if it doesn't.
#NAME: text
#PARENT: Gtk.ComboBoxText.insert_text.none
#COMMENT: A string
#NAME: notebook
#PARENT: Gtk.Notebook.next_page.none
#COMMENT: a #GtkNotebook
#NAME: style
#PARENT: Gtk.paint_extension.none
#COMMENT: a #GtkStyle
#NAME: get_decoration_layout
#PARENT: Gtk.HeaderBar.get_decoration_layout
#COMMENT: the decoration layout
#NAME: get_bin_window
#PARENT: Gtk.Layout
#COMMENT: Retrieve the bin window of the layout used for drawing operations.
#NAME: notebook
#PARENT: Gtk.Notebook.page_num.gint
#COMMENT: a #GtkNotebook
#NAME: transitions_enabled
#PARENT: Gtk.Popover.set_transitions_enabled.none
#COMMENT: Whether transitions are enabled
#NAME: align
#PARENT: Gtk.Widget.set_valign.none
#COMMENT: the vertical alignment
#NAME: gesture
#PARENT: Gtk.Gesture.set_state.gboolean
#COMMENT: a #GtkGesture
#NAME: start_pos
#PARENT: Gtk.EditableInterface.set_selection_bounds.set_selection_bounds.none
#COMMENT: start of region
#NAME: create-custom-widget
#PARENT: Gtk.PrintOperation
#COMMENT: Emitted when displaying the print dialog. If you return a
widget in a handler for this signal it will be added to a custom
tab in the print dialog. You typically return a container widget
with multiple widgets in it.

The print dialog owns the returned widget, and its lifetime is not
controlled by the application. However, the widget is guaranteed
to stay around until the #GtkPrintOperation::custom-widget-apply
signal is emitted on the operation. Then you can read out any
information you need from the widgets.
#NAME: get_item_width
#PARENT: Gtk.IconView
#COMMENT: Returns the value of the ::item-width property.
#NAME: tree_model
#PARENT: Gtk.TreeModel.row_changed.none
#COMMENT: a #GtkTreeModel
#NAME: get_name
#PARENT: Gtk.FileFilter
#COMMENT: Gets the human-readable name for the filter. See gtk_file_filter_set_name().
#NAME: Alignment
#PARENT: Gtk
#COMMENT: The #GtkAlignment widget controls the alignment and size of its child widget.
It has four settings: xscale, yscale, xalign, and yalign.

The scale settings are used to specify how much the child widget should
expand to fill the space allocated to the #GtkAlignment.
The values can range from 0 (meaning the child doesn’t expand at all) to
1 (meaning the child expands to fill all of the available space).

The align settings are used to place the child widget within the available
area. The values range from 0 (top or left) to 1 (bottom or right).
Of course, if the scale settings are both set to 1, the alignment settings
have no effect.

GtkAlignment has been deprecated in 3.14 and should not be used in
newly-written code. The desired effect can be achieved by using the
#GtkWidget:halign, #GtkWidget:valign and #GtkWidget:margin properties on the
child widget.
#NAME: iter
#PARENT: Gtk.TreeModel.iter_next.gboolean
#COMMENT: the #GtkTreeIter-struct
#NAME: CssSection
#PARENT: Gtk
#COMMENT: Defines a part of a CSS document. Because sections are nested into
one another, you can use gtk_css_section_get_parent() to get the
containing region.
#NAME: create_pango_layout
#PARENT: Gtk.Widget.create_pango_layout
#COMMENT: the new #PangoLayout
#NAME: current-rgba
#PARENT: Gtk.ColorSelection
#COMMENT: The current RGBA color.
#NAME: font_desc
#PARENT: Gtk.FontChooser.set_font_desc.none
#COMMENT: a #PangoFontDescription
#NAME: base
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: label
#PARENT: Gtk.Label.set_angle.none
#COMMENT: a #GtkLabel
#NAME: set_open_flags
#PARENT: Gtk.PlacesSidebar
#COMMENT: Sets the way in which the calling application can open new locations from
the places sidebar.  For example, some applications only open locations
“directly” into their main view, while others may support opening locations
in a new notebook tab or a new window.

This function is used to tell the places @sidebar about the ways in which the
application can open new locations, so that the sidebar can display (or not)
the “Open in new tab” and “Open in new window” menu items as appropriate.

When the #GtkPlacesSidebar::open-location signal is emitted, its flags
argument will be set to one of the @flags that was passed in
gtk_places_sidebar_set_open_flags().

Passing 0 for @flags will cause #GTK_PLACES_OPEN_NORMAL to always be sent
to callbacks for the “open-location” signal.
#NAME: key_file
#PARENT: Gtk.PrintSettings.to_key_file.none
#COMMENT: the #GKeyFile to save the print settings to
#NAME: direction
#PARENT: Gtk.SpinButton.spin.none
#COMMENT: a #GtkSpinType indicating the direction to spin
#NAME: first_property_name
#PARENT: Gtk.Style.get_valist.none
#COMMENT: the name of the first style property to get
#NAME: get_expand
#PARENT: Gtk.ToolPalette.get_expand
#COMMENT: %TRUE if group should be given extra space, %FALSE otherwise
#NAME: set_text
#PARENT: Gtk.Tooltip
#COMMENT: Sets the text of the tooltip to be @text. If @text is %NULL, the label
will be hidden. See also gtk_tooltip_set_markup().
#NAME: tree_view
#PARENT: Gtk.TreeView.collapse_row.gboolean
#COMMENT: a #GtkTreeView
#NAME: key
#PARENT: Gtk.PrintSettings.set_bool.none
#COMMENT: a key
#NAME: button
#PARENT: Gtk.ScaleButton.get_minus_button.Widget
#COMMENT: a #GtkScaleButton
#NAME: get_value_as_int
#PARENT: Gtk.SpinButton.get_value_as_int
#COMMENT: the value of @spin_button
#NAME: copy_clipboard
#PARENT: Gtk.TextBuffer
#COMMENT: Copies the currently-selected text to a clipboard.
#NAME: wx
#PARENT: Gtk.TreeView.convert_tree_to_widget_coords.none
#COMMENT: return location for widget X coordinate
#NAME: destroy
#PARENT: Gtk.TreeView.set_destroy_count_func.none
#COMMENT: Destroy notifier for @data, or %NULL
#NAME: get_has_alpha
#PARENT: Gtk.GLArea
#COMMENT: Returns whether the area has an alpha component.
#NAME: ignore_hidden
#PARENT: Gtk.SizeGroup.set_ignore_hidden.none
#COMMENT: whether unmapped widgets should be ignored
  when calculating the size
#NAME: wy
#PARENT: Gtk.TreeView.convert_tree_to_widget_coords.none
#COMMENT: return location for widget Y coordinate
#NAME: data
#PARENT: Gtk.AccelMapForeach.none
#COMMENT: User data passed to gtk_accel_map_foreach() or
 gtk_accel_map_foreach_unfiltered()
#NAME: to_string
#PARENT: Gtk.TreePath.to_string
#COMMENT: A newly-allocated string.
    Must be freed with g_free().
#NAME: value
#PARENT: Gtk.ThemingEngine.get_style_property.none
#COMMENT: Return location for the property value, free with
        g_value_unset() after use.
#NAME: path
#PARENT: Gtk.TreeModel.row-changed.none
#COMMENT: a #GtkTreePath-struct identifying the changed row
#NAME: column
#PARENT: Gtk.TreeView.set_search_column.none
#COMMENT: the column of the model to search in, or -1 to disable searching
#NAME: new
#PARENT: Gtk.GestureDrag.new
#COMMENT: a newly created #GtkGestureDrag
#NAME: builder
#PARENT: Gtk.BuilderClass.get_type_from_name.get_type_from_name.GType
#COMMENT: a #GtkBuilder
#NAME: buffer
#PARENT: Gtk.TextBuffer.deserialize_get_can_create_tags.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: popover
#PARENT: Gtk.Popover.set_modal.none
#COMMENT: a #GtkPopover
#NAME: backspace
#PARENT: Gtk.TextView
#COMMENT: The ::backspace signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

The default bindings for this signal are
Backspace and Shift-Backspace.
#NAME: state
#PARENT: Gtk.Widget.modify_base.none
#COMMENT: the state for which to set the base color
#NAME: new_with_dialog
#PARENT: Gtk.FileChooserButton
#COMMENT: Creates a #GtkFileChooserButton widget which uses @dialog as its
file-picking window.

Note that @dialog must be a #GtkDialog (or subclass) which
implements the #GtkFileChooser interface and must not have
%GTK_DIALOG_DESTROY_WITH_PARENT set.

Also note that the dialog needs to have its confirmative button
added with response %GTK_RESPONSE_ACCEPT or %GTK_RESPONSE_OK in
order for the button to take over the file selected in the dialog.
#NAME: request_uris
#PARENT: Gtk.Clipboard
#COMMENT: Requests the contents of the clipboard as URIs. When the URIs are
later received @callback will be called.

The @uris parameter to @callback will contain the resulting array of
URIs if the request succeeded, or %NULL if it failed. This could happen
for various reasons, in particular if the clipboard was empty or if the
contents of the clipboard could not be converted into URI form.
#NAME: accel_label
#PARENT: Gtk.AccelLabel.refetch.gboolean
#COMMENT: a #GtkAccelLabel.
#NAME: new
#PARENT: Gtk.TextChildAnchor.new
#COMMENT: a new #GtkTextChildAnchor
#NAME: count
#PARENT: Gtk.TextIter.backward_sentence_starts.gboolean
#COMMENT: number of sentences to move
#NAME: target_list
#PARENT: Gtk.Widget.drag_source_set_target_list.none
#COMMENT: list of draggable targets, or %NULL for none
#NAME: clipboard
#PARENT: Gtk.Clipboard.request_targets.none
#COMMENT: a #GtkClipboard
#NAME: parent_class
#PARENT: Gtk.ExpanderClass
#COMMENT: The parent class.
#NAME: get_message_area
#PARENT: Gtk.MessageDialog.get_message_area
#COMMENT: A #GtkVBox corresponding to the
    “message area” in the @message_dialog.
#NAME: buffer
#PARENT: Gtk.TextView.set_buffer.none
#COMMENT: a #GtkTextBuffer
#NAME: opacity
#PARENT: Gtk.Window.set_opacity.none
#COMMENT: desired opacity, between 0 and 1
#NAME: side
#PARENT: Gtk.Grid.attach_next_to.none
#COMMENT: the side of @sibling that @child is positioned next to
#NAME: no_month_change
#PARENT: Gtk.CalendarDisplayOptions
#COMMENT: Prevents the user from switching months with the calendar.
#NAME: pbar
#PARENT: Gtk.ProgressBar.set_inverted.none
#COMMENT: a #GtkProgressBar
#NAME: cr
#PARENT: Gtk.render_insertion_cursor.none
#COMMENT: a #cairo_t
#NAME: get_visible_horizontal
#PARENT: Gtk.Action
#COMMENT: Checks whether @action is visible when horizontal
#NAME: signal_name
#PARENT: Gtk.BindingEntry.add_signal.none
#COMMENT: signal to execute upon activation
#NAME: icon_info
#PARENT: Gtk.IconInfo.load_symbolic_for_context_finish.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconInfo from gtk_icon_theme_lookup_icon()
#NAME: source
#PARENT: Gtk.IconSource.get_direction_wildcarded.gboolean
#COMMENT: a #GtkIconSource
#NAME: new
#PARENT: Gtk.Separator
#COMMENT: Creates a new #GtkSeparator with the given orientation.
#NAME: register_property
#PARENT: Gtk.ThemingEngine
#COMMENT: Registers a property so it can be used in the CSS file format,
on the CSS file the property will look like
"-${@name_space}-${property_name}". being
${property_name} the given to @pspec. @name_space will usually
be the theme engine name.

For any type a @parse_func may be provided, being this function
used for turning any property value (between “:” and “;”) in
CSS to the #GValue needed. For basic types there is already
builtin parsing support, so %NULL may be provided for these
cases.

Engines must ensure property registration happens exactly once,
usually GTK+ deals with theming engines as singletons, so this
should be guaranteed to happen once, but bear this in mind
when creating #GtkThemeEngines yourself.

In order to make use of the custom registered properties in
the CSS file, make sure the engine is loaded first by specifying
the engine property, either in a previous rule or within the same
one.
|[
* {
    engine: someengine;
    -SomeEngine-custom-property: 2;
}
]|
#NAME: get_font_size
#PARENT: Gtk.FontChooser
#COMMENT: The selected font size.
#NAME: editable
#PARENT: Gtk.EditableInterface.set_selection_bounds.set_selection_bounds.none
#COMMENT: a #GtkEditable
#NAME: get_image
#PARENT: Gtk.MessageDialog
#COMMENT: Gets the dialog’s image.
#NAME: to_key_file
#PARENT: Gtk.PrintSettings
#COMMENT: This function adds the print settings from @settings to @key_file.
#NAME: path
#PARENT: Gtk.WidgetPath.get_object_type.GType
#COMMENT: a #GtkWidget
#NAME: label
#PARENT: Gtk.Frame.set_label.none
#COMMENT: the text to use as the label of the frame
#NAME: prelit
#PARENT: Gtk.CellRendererState
#COMMENT: The mouse is hovering over the cell.
#NAME: minimum
#PARENT: Gtk.ScrollablePolicy
#COMMENT: Scrollable adjustments are based on the minimum size
#NAME: current-color
#PARENT: Gtk.ColorSelection
#COMMENT: The current GdkColor color.
#NAME: label
#PARENT: Gtk.Label.set_single_line_mode.none
#COMMENT: a #GtkLabel
#NAME: accelerator
#PARENT: Gtk.RadioActionEntry
#COMMENT: The accelerator for the action, in the format understood by
 gtk_accelerator_parse().
#NAME: STYLE_CLASS_LINKED
#PARENT: Gtk
#COMMENT: A CSS class to match a linked area, such as a box containing buttons
belonging to the same control.
#NAME: get_sequences
#PARENT: Gtk.Gesture.get_sequences
#COMMENT: A list
         of #GdkEventSequences, the list elements are owned by GTK+
         and must not be freed or modified, the list itself must be deleted
         through g_list_free()
#NAME: has-entry
#PARENT: Gtk.ComboBox
#COMMENT: Whether the combo box has an entry.
#NAME: min
#PARENT: Gtk.SpinButton.new_with_range.Widget
#COMMENT: Minimum allowable value
#NAME: iter
#PARENT: Gtk.TextIter.set_line_index.none
#COMMENT: a #GtkTextIter
#NAME: is_ancestor
#PARENT: Gtk.TreePath
#COMMENT: Returns %TRUE if @descendant is a descendant of @path.
#NAME: flags
#PARENT: Gtk.IconTheme.load_icon.GdkPixbuf.Pixbuf
#COMMENT: flags modifying the behavior of the icon lookup
#NAME: class
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: label
#PARENT: Gtk.Widget.remove_mnemonic_label.none
#COMMENT: a #GtkWidget that was previously set as a mnemnic label for
        @widget with gtk_widget_add_mnemonic_label().
#NAME: child
#PARENT: Gtk.ButtonBox.get_child_secondary.gboolean
#COMMENT: a child of @widget
#NAME: set_wrap_width
#PARENT: Gtk.ComboBox
#COMMENT: Sets the wrap width of @combo_box to be @width. The wrap width is basically
the preferred number of columns when you want the popup to be layed out
in a table.
#NAME: get_text_column
#PARENT: Gtk.EntryCompletion.get_text_column
#COMMENT: the column containing the strings
#NAME: days
#PARENT: Gtk.RecentFilter.add_age.none
#COMMENT: number of days
#NAME: iter
#PARENT: Gtk.TextView.get_iter_at_location.none
#COMMENT: a #GtkTextIter
#NAME: rgb_to_hsv
#PARENT: Gtk
#COMMENT: Converts a color from RGB space to HSV.

Input values must be in the [0.0, 1.0] range;
output values will be in the same range.
#NAME: create_menu
#PARENT: Gtk.ActionClass.create_menu.create_menu
#COMMENT: the menu item provided by the
              action, or %NULL.
#NAME: keyval
#PARENT: Gtk.AccelGroup.accel-changed.none
#COMMENT: the accelerator keyval
#NAME: new
#PARENT: Gtk.GestureSwipe
#COMMENT: Returns a newly created #GtkGesture that recognizes swipes.
#NAME: select_day
#PARENT: Gtk.Calendar
#COMMENT: Selects a day from the current month.
#NAME: icon_view
#PARENT: Gtk.IconView.enable_model_drag_source.none
#COMMENT: a #GtkIconView
#NAME: set_allow_async
#PARENT: Gtk.PrintOperation
#COMMENT: Sets whether the gtk_print_operation_run() may return
before the print operation is completed. Note that
some platforms may not allow asynchronous operation.
#NAME: name
#PARENT: Gtk.Widget.set_name.none
#COMMENT: name for the widget
#NAME: button
#PARENT: Gtk.FileChooserButton.set_focus_on_click.none
#COMMENT: a #GtkFileChooserButton
#NAME: gesture
#PARENT: Gtk.Gesture.set_window.none
#COMMENT: a #GtkGesture
#NAME: title
#PARENT: Gtk.TreeViewColumn.new_with_attributes.TreeViewColumn
#COMMENT: The title to set the header to
#NAME: entry
#PARENT: Gtk.Entry.set_tabs.none
#COMMENT: a #GtkEntry
#NAME: widget
#PARENT: Gtk.HandleBox.child-detached.none
#COMMENT: the child widget of the handlebox.
  (this argument provides no extra information
  and is here only for backwards-compatibility)
#NAME: get_propagation_phase
#PARENT: Gtk.EventController
#COMMENT: Gets the propagation phase at which @controller handles events.
#NAME: entry
#PARENT: Gtk.Entry.get_placeholder_text.utf8
#COMMENT: a #GtkEntry
#NAME: orientable
#PARENT: Gtk.Orientable.set_orientation.none
#COMMENT: a #GtkOrientable
#NAME: get_direction
#PARENT: Gtk.ThemingEngine
#COMMENT: Returns the widget direction used for rendering.
#NAME: path
#PARENT: Gtk.TreeModelIface.rows_reordered.rows_reordered.none
#COMMENT: a #GtkTreePath-struct pointing to the tree node whose children
    have been reordered
#NAME: test_register_all_types
#PARENT: Gtk
#COMMENT: Force registration of all core Gtk+ and Gdk object types.
This allowes to refer to any of those object types via
g_type_from_name() after calling this function.
#NAME: new
#PARENT: Gtk.Frame
#COMMENT: Creates a new #GtkFrame, with optional label @label.
If @label is %NULL, the label is omitted.
#NAME: widget
#PARENT: Gtk.CellRendererClass.get_aligned_area.get_aligned_area.none
#COMMENT: the #GtkWidget this cell will be rendering to
#NAME: index_
#PARENT: Gtk.TreePath.prepend_index.none
#COMMENT: the index
#NAME: context
#PARENT: Gtk.IMContextClass.delete_surrounding.delete_surrounding.gboolean
#COMMENT: a #GtkIMContext
#NAME: use-header-bar
#PARENT: Gtk.Dialog
#COMMENT: %TRUE if the dialog uses a #GtkHeaderBar for action buttons
instead of the action-area.

For technical reasons, this property is declared as an integer
property, but you should only set it to %TRUE or %FALSE.
#NAME: label
#PARENT: Gtk.Label.get_selectable.gboolean
#COMMENT: a #GtkLabel
#NAME: get_text
#PARENT: Gtk.SelectionData
#COMMENT: Gets the contents of the selection data as a UTF-8 string.
#NAME: load
#PARENT: Gtk.ThemingEngine.load
#COMMENT: A theming engine, or %NULL if
the engine @name doesn’t exist.
#NAME: get_tooltip
#PARENT: Gtk.Action
#COMMENT: Gets the tooltip text of @action.
#NAME: people
#PARENT: Gtk.AboutDialog.add_credit_section.none
#COMMENT: The people who belong to that section
#NAME: activatable
#PARENT: Gtk.ListBoxRow
#COMMENT: The property determines whether the #GtkListBox::row-activated
signal will be emitted for this row.
#NAME: ltr
#PARENT: Gtk.PackDirection
#COMMENT: Widgets are packed left-to-right
#NAME: application
#PARENT: Gtk.RecentFilter.add_application.none
#COMMENT: an application name
#NAME: direction_type
#PARENT: Gtk.ScrolledWindow.move-focus-out.none
#COMMENT: either %GTK_DIR_TAB_FORWARD or
  %GTK_DIR_TAB_BACKWARD
#NAME: match_start
#PARENT: Gtk.TextIter.backward_search.gboolean
#COMMENT: return location for start of match, or %NULL
#NAME: iter
#PARENT: Gtk.TreeStore.set.none
#COMMENT: A valid #GtkTreeIter for the row being modified
#NAME: set_icons
#PARENT: Gtk.ScaleButton
#COMMENT: Sets the icons to be used by the scale button.
For details, see the #GtkScaleButton:icons property.
#NAME: window
#PARENT: Gtk.Window.remove_accel_group.none
#COMMENT: a #GtkWindow
#NAME: targets
#PARENT: Gtk.ToolPalette.set_drag_source.none
#COMMENT: the #GtkToolPaletteDragTargets
    which the widget should support
#NAME: get_column_type
#PARENT: Gtk.TreeModel.get_column_type
#COMMENT: the type of the column
#NAME: x
#PARENT: Gtk.render_insertion_cursor.none
#COMMENT: X origin
#NAME: cursor_index
#PARENT: Gtk.IMContextClass.get_surrounding.get_surrounding.gboolean
#COMMENT: location to store byte index of the insertion
       cursor within @text.
#NAME: new
#PARENT: Gtk.ListBoxRow.new
#COMMENT: a new #GtkListBoxRow
#NAME: invalid_uri
#PARENT: Gtk.RecentChooserError
#COMMENT: Indicates a malformed URI
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_expand.gboolean
#COMMENT: A #GtkTreeViewColumn.
#NAME: y
#PARENT: Gtk.render_insertion_cursor.none
#COMMENT: Y origin
#NAME: set_fixed_height_from_font
#PARENT: Gtk.CellRendererText
#COMMENT: Sets the height of a renderer to explicitly be determined by the “font” and
“y_pad” property set on it.  Further changes in these properties do not
affect the height, so they must be accompanied by a subsequent call to this
function.  Using this function is unflexible, and should really only be used
if calculating the size of a cell is too slow (ie, a massive number of cells
displayed).  If @number_of_rows is -1, then the fixed height is unset, and
the height is determined by the properties again.
#NAME: get_toplevel
#PARENT: Gtk.Widget
#COMMENT: This function returns the topmost widget in the container hierarchy
@widget is a part of. If @widget has no parent widgets, it will be
returned as the topmost widget. No reference will be added to the
returned widget; it should not be unreferenced.

Note the difference in behavior vs. gtk_widget_get_ancestor();
`gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
would return
%NULL if @widget wasn’t inside a toplevel window, and if the
window was inside a #GtkWindow-derived widget which was in turn
inside the toplevel #GtkWindow. While the second case may
seem unlikely, it actually happens when a #GtkPlug is embedded
inside a #GtkSocket within the same application.

To reliably find the toplevel #GtkWindow, use
gtk_widget_get_toplevel() and call gtk_widget_is_toplevel()
on the result.
|[<!-- language="C" -->
 GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 if (gtk_widget_is_toplevel (toplevel))
   {
     // Perform action on toplevel.
   }
]|
#NAME: gstring
#PARENT: Gtk.RcProperty.parse_enum.gboolean
#COMMENT: the #GString to be parsed
#NAME: STYLE_PROPERTY_BORDER_COLOR
#PARENT: Gtk
#COMMENT: A property holding the element’s border color as a #GdkRGBA.
#NAME: spin_button
#PARENT: Gtk.SpinButton.set_snap_to_ticks.none
#COMMENT: a #GtkSpinButton
#NAME: get_screen
#PARENT: Gtk.StatusIcon
#COMMENT: Returns the #GdkScreen associated with @status_icon.
#NAME: padding_left
#PARENT: Gtk.Alignment.get_padding.none
#COMMENT: location to store the padding
    for the left of the widget, or %NULL
#NAME: normal
#PARENT: Gtk.PrintQuality
#COMMENT: Normal quality.
#NAME: provider
#PARENT: Gtk.StyleProvider.get_style.StyleProperties
#COMMENT: a #GtkStyleProvider
#NAME: iter
#PARENT: Gtk.TreeStore.remove.gboolean
#COMMENT: A valid #GtkTreeIter
#NAME: root_x
#PARENT: Gtk.Window.get_position.none
#COMMENT: return location for X coordinate of
    gravity-determined reference point, or %NULL
#NAME: root_y
#PARENT: Gtk.Window.get_position.none
#COMMENT: return location for Y coordinate of
    gravity-determined reference point, or %NULL
#NAME: set_attributes
#PARENT: Gtk.Entry
#COMMENT: Sets a #PangoAttrList; the attributes in the list are applied to the
entry text.
#NAME: position
#PARENT: Gtk.Box.set_baseline_position.none
#COMMENT: a #GtkBaselinePosition
#NAME: over_down
#PARENT: Gtk.StackTransitionType
#COMMENT: Cover the old page by sliding down. Since: 3.12
#NAME: widget
#PARENT: Gtk.Style.render_icon.GdkPixbuf.Pixbuf
#COMMENT: the widget
#NAME: window
#PARENT: Gtk.ApplicationWindow.get_id.guint
#COMMENT: a #GtkApplicationWindow
#NAME: destroy
#PARENT: Gtk.Menu.popup_for_device.none
#COMMENT: destroy notify for @data
#NAME: ypad
#PARENT: Gtk.Misc.set_padding.none
#COMMENT: the amount of space to add on the top and bottom of the widget,
  in pixels.
#NAME: 
#PARENT: Gtk.TreeModel.get.none...
#COMMENT: pairs of column number and value return locations,
    terminated by -1
#NAME: insert_column_with_attributes
#PARENT: Gtk.TreeView.insert_column_with_attributes
#COMMENT: The number of columns in @tree_view after insertion.
#NAME: 
#PARENT: Gtk.TreeView.insert_column_with_attributes.gint...
#COMMENT: A %NULL-terminated list of attributes
#NAME: context
#PARENT: Gtk.drag_cancel.none
#COMMENT: a #GdkDragContext, as e.g. returned by gtk_drag_begin_with_coordinates()
#NAME: get_cell_at_position
#PARENT: Gtk.CellArea
#COMMENT: Gets the #GtkCellRenderer at @x and @y coordinates inside @area and optionally
returns the full cell allocation for it inside @cell_area.
#NAME: group_source
#PARENT: Gtk.RadioButton.join_group.none
#COMMENT: a radio button object whos group we are
  joining, or %NULL to remove the radio button from its group
#NAME: x
#PARENT: Gtk.Entry.get_icon_at_pos.gint
#COMMENT: the x coordinate of the position to find
#NAME: adjustment
#PARENT: Gtk.Adjustment.get_page_size.gdouble
#COMMENT: a #GtkAdjustment
#NAME: BindingEntry
#PARENT: Gtk
#COMMENT: Each key binding element of a binding sets binding list is
represented by a GtkBindingEntry.
#NAME: set_font_name
#PARENT: Gtk.FontSelection.set_font_name
#COMMENT: %TRUE if the font could be set successfully; %FALSE if no
    such font exists or if the @fontsel doesn’t belong to a particular
    screen yet.
#NAME: layout
#PARENT: Gtk.Layout.set_size.none
#COMMENT: a #GtkLayout
#NAME: get_page_set
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_PAGE_SET.
#NAME: format
#PARENT: Gtk.TextBuffer.serialize.guint8
#COMMENT: the rich text format to use for serializing
#NAME: natural_size
#PARENT: Gtk.CellRenderer.get_preferred_height.none
#COMMENT: location to store the natural size, or %NULL
#NAME: y
#PARENT: Gtk.Entry.get_icon_at_pos.gint
#COMMENT: the y coordinate of the position to find
#NAME: chooser
#PARENT: Gtk.FileChooser.remove_shortcut_folder_uri.gboolean
#COMMENT: a #GtkFileChooser
#NAME: new_with_mnemonic
#PARENT: Gtk.Label.new_with_mnemonic
#COMMENT: the new #GtkLabel
#NAME: content_buffer
#PARENT: Gtk.TextBufferSerializeFunc.guint8
#COMMENT: the #GtkTextBuffer to serialize
#NAME: drag_dest
#PARENT: Gtk.TreeDragDest.drag_data_received.gboolean
#COMMENT: a #GtkTreeDragDest
#NAME: id
#PARENT: Gtk.SymbolicColor.new_win32.SymbolicColor
#COMMENT: The color id
#NAME: column
#PARENT: Gtk.TreeModelIface.get_value.get_value.none
#COMMENT: the column to lookup the value at
#NAME: app_paintable
#PARENT: Gtk.Widget.set_app_paintable.none
#COMMENT: %TRUE if the application will paint on the widget
#NAME: clipboard
#PARENT: Gtk.Clipboard.request_contents.none
#COMMENT: a #GtkClipboard
#NAME: area
#PARENT: Gtk.IMContextClass.set_cursor_location.set_cursor_location.none
#COMMENT: new location
#NAME: page_nr
#PARENT: Gtk.PrintOperationPreview.render_page.none
#COMMENT: the page to render
#NAME: flags_return
#PARENT: Gtk.StyleContext.has_region.gboolean
#COMMENT: return location for region flags
#NAME: get_iter_location
#PARENT: Gtk.TextView
#COMMENT: Gets a rectangle which roughly contains the character at @iter.
The rectangle position is in buffer coordinates; use
gtk_text_view_buffer_to_window_coords() to convert these
coordinates to coordinates for one of the windows in the text view.
#NAME: get_event_widget
#PARENT: Gtk
#COMMENT: If @event is %NULL or the event was not associated with any widget,
returns %NULL, otherwise returns the widget that received the event
originally.
#NAME: activate-link
#PARENT: Gtk.Label.activate-link
#COMMENT: %TRUE if the link has been activated
#NAME: path
#PARENT: Gtk.TranslateFunc.utf8
#COMMENT: The id of the message. In #GtkActionGroup this will be a label
  or tooltip from a #GtkActionEntry.
#NAME: entry
#PARENT: Gtk.Entry.set_icon_from_pixbuf.none
#COMMENT: a #GtkEntry
#NAME: get_id
#PARENT: Gtk.Socket
#COMMENT: Gets the window ID of a #GtkSocket widget, which can then
be used to create a client embedded inside the socket, for
instance with gtk_plug_new().

The #GtkSocket must have already be added into a toplevel window
before you can make this call.
#NAME: get_hover_expand
#PARENT: Gtk.TreeView.get_hover_expand
#COMMENT: %TRUE if @tree_view is in hover expansion mode
#NAME: add_tearoffs
#PARENT: Gtk.ComboBox.set_add_tearoffs.none
#COMMENT: %TRUE to add tearoff menu items
#NAME: default_editable
#PARENT: Gtk.TextBuffer.delete_selection.gboolean
#COMMENT: whether the buffer is editable by default
#NAME: column
#PARENT: Gtk.TreeView.scroll_to_cell.none
#COMMENT: The #GtkTreeViewColumn to move horizontally to, or %NULL.
#NAME: event
#PARENT: Gtk.TextView.im_context_filter_keypress.gboolean
#COMMENT: the key event
#NAME: realized
#PARENT: Gtk.Widget.set_realized.none
#COMMENT: %TRUE to mark the widget as realized
#NAME: unblock_activate
#PARENT: Gtk.Action
#COMMENT: Reenable activation signals from the action
#NAME: filename
#PARENT: Gtk.Window.set_icon_from_file.gboolean
#COMMENT: location of icon file
#NAME: get_step_increment
#PARENT: Gtk.Adjustment.get_step_increment
#COMMENT: The current step increment of the adjustment.
#NAME: builder
#PARENT: Gtk.Builder.get_objects.GObject.Object
#COMMENT: a #GtkBuilder
#NAME: step
#PARENT: Gtk.TreeView.move-cursor.gboolean
#COMMENT: the granularity of the move, as a
#GtkMovementStep. %GTK_MOVEMENT_LOGICAL_POSITIONS,
%GTK_MOVEMENT_VISUAL_POSITIONS, %GTK_MOVEMENT_DISPLAY_LINES,
%GTK_MOVEMENT_PAGES and %GTK_MOVEMENT_BUFFER_ENDS are
supported. %GTK_MOVEMENT_LOGICAL_POSITIONS and
%GTK_MOVEMENT_VISUAL_POSITIONS are treated identically.
#NAME: begin-print
#PARENT: Gtk.PrintOperation
#COMMENT: Emitted after the user has finished changing print settings
in the dialog, before the actual rendering starts.

A typical use for ::begin-print is to use the parameters from the
#GtkPrintContext and paginate the document accordingly, and then
set the number of pages with gtk_print_operation_set_n_pages().
#NAME: next-match
#PARENT: Gtk.SearchEntry
#COMMENT: The ::next-match signal is a [keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates a move to the next match
for the current search string.

Applications should connect to it, to implement moving between
matches.

The default bindings for this signal is Ctrl-g.
#NAME: mode
#PARENT: Gtk.TreeSelection
#COMMENT: Selection mode.
See gtk_tree_selection_set_mode() for more information on this property.
#NAME: button
#PARENT: Gtk.ToolButton.set_icon_name.none
#COMMENT: a #GtkToolButton
#NAME: get_sizing
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns the current type of @tree_column.
#NAME: activate_signal
#PARENT: Gtk.WidgetClass
#COMMENT: The signal to emit when a widget of this class is
  activated, gtk_widget_activate() handles the emission.
  Implementation of this signal is optional.
#NAME: drag_get_source_widget
#PARENT: Gtk.drag_get_source_widget
#COMMENT: if the drag is occurring
    within a single application, a pointer to the source widget.
    Otherwise, %NULL.
#NAME: get_action_target_value
#PARENT: Gtk.Actionable
#COMMENT: Gets the current target value of @actionabe.

See gtk_actionable_set_action_target_value() for more information.
#NAME: info
#PARENT: Gtk.RecentInfo.has_application.gboolean
#COMMENT: a #GtkRecentInfo
#NAME: widget
#PARENT: Gtk.selection_owner_set_for_display.gboolean
#COMMENT: new selection owner (a #GtkWidget), or %NULL.
#NAME: get_printer_lpi
#PARENT: Gtk.PrintSettings.get_printer_lpi
#COMMENT: the resolution in lpi (lines per inch)
#NAME: get_allocation
#PARENT: Gtk.CellAreaContext
#COMMENT: Fetches the current allocation size for @context.

If the context was not allocated in width or height, or if the
context was recently reset with gtk_cell_area_context_reset(),
the returned value will be -1.
#NAME: label
#PARENT: Gtk.Label.get_line_wrap_mode.Pango.WrapMode
#COMMENT: a #GtkLabel
#NAME: page_num
#PARENT: Gtk.Notebook.page_num
#COMMENT: the index of the page containing @child, or
    -1 if @child is not in the notebook
#NAME: set_fill_level
#PARENT: Gtk.Range
#COMMENT: Set the new position of the fill level indicator.

The “fill level” is probably best described by its most prominent
use case, which is an indicator for the amount of pre-buffering in
a streaming media player. In that use case, the value of the range
would indicate the current play position, and the fill level would
be the position up to which the file/stream has been downloaded.

This amount of prebuffering can be displayed on the range’s trough
and is themeable separately from the trough. To enable fill level
display, use gtk_range_set_show_fill_level(). The range defaults
to not showing the fill level.

Additionally, it’s possible to restrict the range’s slider position
to values which are smaller than the fill level. This is controller
by gtk_range_set_restrict_to_fill_level() and is by default
enabled.
#NAME: new
#PARENT: Gtk.Spinner.new
#COMMENT: a new #GtkSpinner
#NAME: icon_name
#PARENT: Gtk.Tooltip.set_icon_from_icon_name.none
#COMMENT: an icon name, or %NULL
#NAME: get_pixels_below_lines
#PARENT: Gtk.TextView
#COMMENT: Gets the value set by gtk_text_view_set_pixels_below_lines().
#NAME: set_background_rgba
#PARENT: Gtk.CellView
#COMMENT: Sets the background color of @cell_view.
#NAME: invalidate_sort
#PARENT: Gtk.FlowBox
#COMMENT: Updates the sorting for all children.

Call this when the result of the sort function on
@box is changed due to an external factor.
#NAME: get_value
#PARENT: Gtk.Adjustment.get_value
#COMMENT: The current value of the adjustment.
#NAME: get_focus_hadjustment
#PARENT: Gtk.Container
#COMMENT: Retrieves the horizontal focus adjustment for the container. See
gtk_container_set_focus_hadjustment ().
#NAME: get_active
#PARENT: Gtk.ToggleToolButton.get_active
#COMMENT: %TRUE if the toggle tool button is pressed in, %FALSE if not
#NAME: file_chooser_error_quark
#PARENT: Gtk
#COMMENT: Registers an error quark for #GtkFileChooser if necessary.
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_add_tearoffs.gboolean
#COMMENT: a #GtkComboBox
#NAME: action
#PARENT: Gtk.Action.set_visible_vertical.none
#COMMENT: a #GtkAction
#NAME: gpl_3_0_only
#PARENT: Gtk.License
#COMMENT: The GNU General Public License, version 3.0 only. Since 3.12.
#NAME: step_up
#PARENT: Gtk.ScrollType
#COMMENT: Step up.
#NAME: iter
#PARENT: Gtk.TextBuffer.get_end_iter.none
#COMMENT: iterator to initialize
#NAME: default_editable
#PARENT: Gtk.TextBuffer.insert_interactive.gboolean
#COMMENT: default editability of buffer
#NAME: show-expanders
#PARENT: Gtk.TreeView
#COMMENT: %TRUE if the view has expanders.
#NAME: viewport
#PARENT: Gtk.Viewport.get_vadjustment.Adjustment
#COMMENT: a #GtkViewport.
#NAME: layout_index_to_text_index
#PARENT: Gtk.Entry.layout_index_to_text_index
#COMMENT: byte index into the entry contents
#NAME: lookup_for_settings
#PARENT: Gtk.IconSize.lookup_for_settings
#COMMENT: %TRUE if @size was a valid size
#NAME: gtk-application-prefer-dark-theme
#PARENT: Gtk.Settings
#COMMENT: Whether the application prefers to use a dark theme. If a GTK+ theme
includes a dark variant, it will be used instead of the configured
theme.

Some applications benefit from minimizing the amount of light pollution that
interferes with the content. Good candidates for dark themes are photo and
video editors that make the actual content get all the attention and minimize
the distraction of the chrome.

Dark themes should not be used for documents, where large spaces are white/light
and the dark chrome creates too much contrast (web browser, text editor...).
#NAME: text_view
#PARENT: Gtk.TextView.forward_display_line_end.gboolean
#COMMENT: a #GtkTextView
#NAME: activate
#PARENT: Gtk.CellArea.activate
#COMMENT: Whether @area was successfully activated.
#NAME: get_n_columns
#PARENT: Gtk.TreeModel.get_n_columns
#COMMENT: the number of columns
#NAME: menu
#PARENT: Gtk.MenuButton.set_popup.none
#COMMENT: a #GtkMenu
#NAME: set_visible
#PARENT: Gtk.CellRenderer
#COMMENT: Sets the cell renderer’s visibility.
#NAME: icon_view
#PARENT: Gtk.IconViewForeachFunc.none
#COMMENT: a #GtkIconView
#NAME: image
#PARENT: Gtk.MessageDialog.set_image.none
#COMMENT: the image
#NAME: program-name
#PARENT: Gtk.AboutDialog
#COMMENT: The name of the program.
If this is not set, it defaults to g_get_application_name().
#NAME: entry
#PARENT: Gtk.Entry.set_input_purpose.none
#COMMENT: a #GtkEntry
#NAME: pop
#PARENT: Gtk.Statusbar
#COMMENT: Removes the first message in the #GtkStatusbar’s stack
with the given context id.

Note that this may not change the displayed message, if
the message at the top of the stack has a different
context id.
#NAME: input-purpose
#PARENT: Gtk.TextView
#COMMENT: The purpose of this text field.

This property can be used by on-screen keyboards and other input
methods to adjust their behaviour.
#NAME: tree_view
#PARENT: Gtk.TreeView.convert_tree_to_widget_coords.none
#COMMENT: a #GtkTreeView
#NAME: cell-area
#PARENT: Gtk.EntryCompletion
#COMMENT: The #GtkCellArea used to layout cell renderers in the treeview column.

If no area is specified when creating the entry completion with gtk_entry_completion_new_with_area()
a horizontally oriented #GtkCellAreaBox will be used.
#NAME: layout
#PARENT: Gtk.Layout.set_hadjustment.none
#COMMENT: a #GtkLayout
#NAME: parse_border
#PARENT: Gtk.RcProperty
#COMMENT: A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses
borders in the form
`"{ left, right, top, bottom }"` for integers
left, right, top and bottom.
#NAME: state_type
#PARENT: Gtk.paint_shadow.none
#COMMENT: a state
#NAME: bottom_right
#PARENT: Gtk.CornerType
#COMMENT: Place the scrollbars on the top and left of the
 widget.
#NAME: menu
#PARENT: Gtk.MenuDetachFunc.none
#COMMENT: the #GtkMenu being detached.
#NAME: menu_item
#PARENT: Gtk.MenuShellClass.select_item.select_item.none
#COMMENT: The #GtkMenuItem to select
#NAME: set_inconsistent
#PARENT: Gtk.CheckMenuItem
#COMMENT: If the user has selected a range of elements (such as some text or
spreadsheet cells) that are affected by a boolean setting, and the
current values in that range are inconsistent, you may want to
display the check in an “in between” state. This function turns on
“in between” display.  Normally you would turn off the inconsistent
state again if the user explicitly selects a setting. This has to be
done manually, gtk_check_menu_item_set_inconsistent() only affects
visual appearance, it doesn’t affect the semantics of the widget.
#NAME: get_min_width
#PARENT: Gtk.TreeViewColumn.get_min_width
#COMMENT: The minimum width of the @tree_column.
#NAME: callback
#PARENT: Gtk.Clipboard.request_targets.none
#COMMENT: a function to call when the targets are
    received, or the retrieval fails. (It will always be called
    one way or the other.)
#NAME: sensitivity
#PARENT: Gtk.Range.set_upper_stepper_sensitivity.none
#COMMENT: the upper stepper’s sensitivity policy.
#NAME: is_descendant
#PARENT: Gtk.TreePath.is_descendant
#COMMENT: %TRUE if @ancestor contains @path somewhere below it
#NAME: accessible
#PARENT: Gtk.Accessible.get_widget.Widget
#COMMENT: a #GtkAccessible
#NAME: get_modified
#PARENT: Gtk.RecentInfo
#COMMENT: Gets the timestamp (seconds from system’s Epoch) when the meta-data
for the resource was last modified.
#NAME: get_style_property
#PARENT: Gtk.StyleProvider
#COMMENT: Looks up a widget style property as defined by @provider for
the widget represented by @path.
#NAME: new_shade
#PARENT: Gtk.SymbolicColor
#COMMENT: Creates a symbolic color defined as a shade of
another color. A factor > 1.0 would resolve to
a brighter color, while < 1.0 would resolve to
a darker color.
#NAME: width
#PARENT: Gtk.paint_handle.none
#COMMENT: with of the handle
#NAME: targets_include_text
#PARENT: Gtk.targets_include_text
#COMMENT: %TRUE if @targets include a suitable target for text,
  otherwise %FALSE.
#NAME: name
#PARENT: Gtk.AppChooserButton.set_active_custom_item.none
#COMMENT: the name of the custom item
#NAME: flags
#PARENT: Gtk.MessageDialog.new_with_markup.Widget
#COMMENT: flags
#NAME: icon-size-set
#PARENT: Gtk.ToolPalette
#COMMENT: Is %TRUE if the #GtkToolPalette:icon-size property has been set.
#NAME: height
#PARENT: Gtk.Widget.queue_draw_area.none
#COMMENT: height of region to draw
#NAME: padding
#PARENT: Gtk.Box.pack_start.none
#COMMENT: extra space in pixels to put between this child and its
  neighbors, over and above the global amount specified by
  #GtkBox:spacing property.  If @child is a widget at one of the
  reference ends of @box, then @padding pixels are also put between
  @child and the reference edge of @box
#NAME: resource
#PARENT: Gtk.Image
#COMMENT: A path to a resource file to display.
#NAME: none
#PARENT: Gtk.ShadowType
#COMMENT: No outline.
#NAME: attribute_connect
#PARENT: Gtk.CellArea
#COMMENT: Connects an @attribute to apply values from @column for the
#GtkTreeModel in use.
#NAME: keyval
#PARENT: Gtk.AccelGroup.accel-activate.gboolean
#COMMENT: the accelerator keyval
#NAME: new_from_model
#PARENT: Gtk.Menu.new_from_model
#COMMENT: a new #GtkMenu
#NAME: context
#PARENT: Gtk.StyleContext.get_padding.none
#COMMENT: a #GtkStyleContext
#NAME: has_focus
#PARENT: Gtk.Widget
#COMMENT: Determines if the widget has the global input focus. See
gtk_widget_is_focus() for the difference between having the global
input focus, and only having the focus within a toplevel.
#NAME: name
#PARENT: Gtk.Window.set_icon_name.none
#COMMENT: the name of the themed icon
#NAME: is_activatable
#PARENT: Gtk.CellArea
#COMMENT: Returns whether the area can do anything when activated,
after applying new attributes to @area.
#NAME: gap_side
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: side in which to leave the gap
#NAME: context_simple
#PARENT: Gtk.IMContextSimple.add_table.none
#COMMENT: A #GtkIMContextSimple
#NAME: set_mode
#PARENT: Gtk.LevelBar
#COMMENT: Sets the value of the #GtkLevelBar:mode property.
#NAME: child
#PARENT: Gtk.Notebook.get_menu_label_text.utf8
#COMMENT: the child widget of a page of the notebook.
#NAME: im_context_filter_keypress
#PARENT: Gtk.TextView
#COMMENT: Allow the #GtkTextView input method to internally handle key press
and release events. If this function returns %TRUE, then no further
processing should be done for this key event. See
gtk_im_context_filter_keypress().

Note that you are expected to call this function from your handler
when overriding key event handling. This is needed in the case when
you need to insert your own key handling between the input method
and the default key event handling of the #GtkTextView.

|[<!-- language="C" -->
static gboolean
gtk_foo_bar_key_press_event (GtkWidget   *widget,
                             GdkEventKey *event)
{
  if ((key->keyval == GDK_KEY_Return || key->keyval == GDK_KEY_KP_Enter))
    {
      if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (view), event))
        return TRUE;
    }

    // Do some stuff

  return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)->key_press_event (widget, event);
}
]|
#NAME: keys-changed
#PARENT: Gtk.Window
#COMMENT: The ::keys-changed signal gets emitted when the set of accelerators
or mnemonics that are associated with @window changes.
#NAME: fontsel
#PARENT: Gtk.FontSelection.get_size_list.Widget
#COMMENT: a #GtkFontSelection
#NAME: get_height
#PARENT: Gtk.PrintContext
#COMMENT: Obtains the height of the #GtkPrintContext, in pixels.
#NAME: style
#PARENT: Gtk.Style.get_valist.none
#COMMENT: a #GtkStyle
#NAME: colors
#PARENT: Gtk.ColorSelection.palette_from_string.gboolean
#COMMENT: return location for
    allocated array of #GdkColor
#NAME: self
#PARENT: Gtk.NumerableIcon.get_count.gint
#COMMENT: a #GtkNumerableIcon
#NAME: unit
#PARENT: Gtk.PageSetup.set_right_margin.none
#COMMENT: the units for @margin
#NAME: horizontal
#PARENT: Gtk.ScrolledWindow.scroll-child.gboolean
#COMMENT: whether the keybinding scrolls the child
  horizontally or not
#NAME: cell
#PARENT: Gtk.CellRendererClass.start_editing.start_editing.CellEditable
#COMMENT: a #GtkCellRenderer
#NAME: activatable
#PARENT: Gtk.ActivatableIface.sync_action_properties.sync_action_properties.none
#COMMENT: a #GtkActivatable
#NAME: start
#PARENT: Gtk.TextBuffer.serialize.guint8
#COMMENT: start of block of text to serialize
#NAME: cell
#PARENT: Gtk.CellRenderer.stop_editing.none
#COMMENT: A #GtkCellRenderer
#NAME: type
#PARENT: Gtk.UIManager.add_ui.none
#COMMENT: the type of UI element to add.
#NAME: new_from_key_file
#PARENT: Gtk.PrintSettings
#COMMENT: Reads the print settings from the group @group_name in @key_file.  Returns a
new #GtkPrintSettings object with the restored settings, or %NULL if an
error occurred. If the file could not be loaded then error is set to either
a #GFileError or #GKeyFileError.
#NAME: bottom
#PARENT: Gtk.Border
#COMMENT: The width of the bottom border
#NAME: new_with_label
#PARENT: Gtk.RadioMenuItem.new_with_label
#COMMENT: A new #GtkRadioMenuItem
#NAME: homogeneous
#PARENT: Gtk.Stack.set_homogeneous.none
#COMMENT: %TRUE to make @stack homogeneous
#NAME: style
#PARENT: Gtk.Style.detach.none
#COMMENT: a #GtkStyle
#NAME: path_string
#PARENT: Gtk.CellRendererCombo.changed.none
#COMMENT: a string of the path identifying the edited cell
              (relative to the tree view model)
#NAME: wait_for_text
#PARENT: Gtk.Clipboard
#COMMENT: Requests the contents of the clipboard as text and converts
the result to UTF-8 if necessary. This function waits for
the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.
#NAME: menu_shell
#PARENT: Gtk.MenuShell.activate_item.none
#COMMENT: a #GtkMenuShell
#NAME: iter
#PARENT: Gtk.TextIter.copy.TextIter
#COMMENT: an iterator
#NAME: get_text_alignment
#PARENT: Gtk.ToolShellIface.get_text_alignment.get_text_alignment
#COMMENT: the current text alignment of @shell
#NAME: context
#PARENT: Gtk.CellAreaContext.get_preferred_height_for_width.none
#COMMENT: a #GtkCellAreaContext
#NAME: disconnect-proxy
#PARENT: Gtk.ActionGroup
#COMMENT: The ::disconnect-proxy signal is emitted after disconnecting a proxy
from an action in the group.

#GtkUIManager proxies the signal and provides global notification
just before any action is connected to a proxy, which is probably more
convenient to use.
#NAME: cell
#PARENT: Gtk.CellLayout.reorder.none
#COMMENT: a #GtkCellRenderer to reorder
#NAME: func
#PARENT: Gtk.FlowBox.selected_foreach.none
#COMMENT: the function to call for each selected child
#NAME: setting
#PARENT: Gtk.Window.set_deletable.none
#COMMENT: %TRUE to decorate the window as deletable
#NAME: menu_shell
#PARENT: Gtk.MenuShell.append.none
#COMMENT: a #GtkMenuShell
#NAME: STOCK_EXECUTE
#PARENT: Gtk
#COMMENT: The “Execute” item and icon.
#NAME: new_proxy
#PARENT: Gtk.TreeRowReference
#COMMENT: You do not need to use this function.

Creates a row reference based on @path.

This reference will keep pointing to the node pointed to
by @path, so long as it exists. If @path isn’t a valid
path in @model, then %NULL is returned. However, unlike
references created with gtk_tree_row_reference_new(), it
does not listen to the model for changes. The creator of
the row reference must do this explicitly using
gtk_tree_row_reference_inserted(), gtk_tree_row_reference_deleted(),
gtk_tree_row_reference_reordered().

These functions must be called exactly once per proxy when the
corresponding signal on the model is emitted. This single call
updates all row references for that proxy. Since built-in GTK+
objects like #GtkTreeView already use this mechanism internally,
using them as the proxy object will produce unpredictable results.
Further more, passing the same object as @model and @proxy
doesn’t work for reasons of internal implementation.

This type of row reference is primarily meant by structures that
need to carefully monitor exactly when a row reference updates
itself, and is not generally needed by most applications.
#NAME: show-other
#PARENT: Gtk.AppChooserWidget
#COMMENT: The #GtkAppChooserWidget:show-other property determines whether
the app chooser should show a section for other applications.
#NAME: info
#PARENT: Gtk.RecentInfo.get_display_name.utf8
#COMMENT: a #GtkRecentInfo
#NAME: stack
#PARENT: Gtk.Stack.set_transition_type.none
#COMMENT: a #GtkStack
#NAME: ToggleAction
#PARENT: Gtk
#COMMENT: A #GtkToggleAction corresponds roughly to a #GtkCheckMenuItem. It has an
“active” state specifying whether the action has been checked or not.
#NAME: bx
#PARENT: Gtk.TreeView.convert_widget_to_bin_window_coords.none
#COMMENT: return location for bin_window X coordinate
#NAME: show_border
#PARENT: Gtk.Notebook.set_show_border.none
#COMMENT: %TRUE if a bevel should be drawn around the notebook
#NAME: ends
#PARENT: Gtk.ScrollStep
#COMMENT: Scroll to ends.
#NAME: button
#PARENT: Gtk.ToolButton.get_stock_id.utf8
#COMMENT: a #GtkToolButton
#NAME: path
#PARENT: Gtk.TreeRowReference.new.TreeRowReference
#COMMENT: a valid #GtkTreePath-struct to monitor
#NAME: by
#PARENT: Gtk.TreeView.convert_widget_to_bin_window_coords.none
#COMMENT: return location for bin_window Y coordinate
#NAME: clear_func
#PARENT: Gtk.Clipboard.set_with_data.gboolean
#COMMENT: when the clipboard contents are set again,
    this function will be called, and @get_func will not be subsequently
    called.
#NAME: set_number_up
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.
#NAME: child
#PARENT: Gtk.Container.child_set.none
#COMMENT: a widget which is a child of @container
#NAME: set_default_source
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
#NAME: position
#PARENT: Gtk.Assistant.insert_page.gint
#COMMENT: the index (starting at 0) at which to insert the page,
    or -1 to append the page to the @assistant
#NAME: get_needed
#PARENT: Gtk.RecentFilter.get_needed
#COMMENT: bitfield of flags indicating needed fields when
  calling gtk_recent_filter_filter()
#NAME: color
#PARENT: Gtk.ThemingEngine.get_color.none
#COMMENT: return value for the foreground color
#NAME: get_header_relief
#PARENT: Gtk.ToolItemGroup
#COMMENT: Gets the relief mode of the header button of @group.
#NAME: get_file
#PARENT: Gtk.FileChooser
#COMMENT: Gets the #GFile for the currently selected file in
the file selector. If multiple files are selected,
one of the files will be returned at random.

If the file chooser is in folder mode, this function returns the selected
folder.
#NAME: box
#PARENT: Gtk.FlowBox.set_sort_func.none
#COMMENT: a #GtkFlowBox
#NAME: is_important
#PARENT: Gtk.ToolItem.set_is_important.none
#COMMENT: whether the tool item should be considered important
#NAME: parent_class
#PARENT: Gtk.ContainerClass
#COMMENT: The parent class.
#NAME: natural_height
#PARENT: Gtk.CellRenderer.get_preferred_height_for_width.none
#COMMENT: location for storing the preferred size, or %NULL
#NAME: icon-press
#PARENT: Gtk.Entry
#COMMENT: The ::icon-press signal is emitted when an activatable icon
is clicked.
#NAME: slide_down
#PARENT: Gtk.StackTransitionType
#COMMENT: Slide from top down
#NAME: comments
#PARENT: Gtk.AboutDialog.set_comments.none
#COMMENT: a comments string
#NAME: notebook
#PARENT: Gtk.Notebook.get_menu_label_text.utf8
#COMMENT: a #GtkNotebook
#NAME: get_widget_for_response
#PARENT: Gtk.Dialog.get_widget_for_response
#COMMENT: the @widget button that uses the given
    @response_id, or %NULL.
#NAME: get_bin_window
#PARENT: Gtk.TreeView
#COMMENT: Returns the window that @tree_view renders to.
This is used primarily to compare to `event->window`
to confirm that the event on @tree_view is on the right window.
#NAME: area
#PARENT: Gtk.CellAreaClass.remove.remove.none
#COMMENT: a #GtkCellArea
#NAME: area
#PARENT: Gtk.GLArea.get_has_alpha.gboolean
#COMMENT: a #GtkGLArea
#NAME: checked
#PARENT: Gtk.StateFlags
#COMMENT: Widget is checked. Since 3.14
#NAME: data
#PARENT: Gtk.TextTagTable.foreach.none
#COMMENT: user data
#NAME: tree_view
#PARENT: Gtk.TreeView.get_expander_column.TreeViewColumn
#COMMENT: A #GtkTreeView
#NAME: builder
#PARENT: Gtk.Builder.set_application.none
#COMMENT: a #GtkBuilder
#NAME: expand
#PARENT: Gtk.AttachOptions
#COMMENT: the widget should expand to take up any extra space in its
container that has been allocated.
#NAME: window
#PARENT: Gtk.StyleContext.notify_state_change.none
#COMMENT: a #GdkWindow
#NAME: get_visible_child_name
#PARENT: Gtk.Stack.get_visible_child_name
#COMMENT: the name of the visible child of the #GtkStack
#NAME: height
#PARENT: Gtk.render_background.none
#COMMENT: rectangle height
#NAME: limit
#PARENT: Gtk.RecentChooser.set_limit.none
#COMMENT: a positive integer, or -1 for all items
#NAME: remove_action_group
#PARENT: Gtk.UIManager
#COMMENT: Removes an action group from the list of action groups associated
with @manager.
#NAME: rc_parse_priority
#PARENT: Gtk
#COMMENT: Parses a #GtkPathPriorityType variable from the format expected
in a RC file.
#NAME: FileChooserWidget
#PARENT: Gtk
#COMMENT: #GtkFileChooserWidget is a widget for choosing files.
It exposes the #GtkFileChooser interface, and you should
use the methods of this interface to interact with the
widget.
#NAME: signal_name
#PARENT: Gtk.BindingEntry.add_signall.none
#COMMENT: signal name to be bound
#NAME: BuilderConnectFunc
#PARENT: Gtk
#COMMENT: This is the signature of a function used to connect signals.  It is used
by the gtk_builder_connect_signals() and gtk_builder_connect_signals_full()
methods.  It is mainly intended for interpreted language bindings, but
could be useful where the programmer wants more control over the signal
connection process. Note that this function can only be called once,
subsequent calls will do nothing.
#NAME: columns
#PARENT: Gtk.ListStore.insert_with_valuesv.none
#COMMENT: an array of column numbers
#NAME: group
#PARENT: Gtk.RadioButton.new_with_label.Widget
#COMMENT: an existing
        radio button group, or %NULL if you are creating a new group.
#NAME: pixels_inside_wrap
#PARENT: Gtk.TextView.set_pixels_inside_wrap.none
#COMMENT: default number of pixels between wrapped lines
#NAME: get_base_scale
#PARENT: Gtk.IconInfo
#COMMENT: Gets the base scale for the icon. The base scale is a scale
for the icon that was specified by the icon theme creator.
For instance an icon drawn for a high-dpi screen with window
scale 2 for a base size of 32 will be 64 pixels tall and have
a base scale of 2.
#NAME: get_show_tips
#PARENT: Gtk.RecentChooser
#COMMENT: Gets whether @chooser should display tooltips containing the full path
of a recently user resource.
#NAME: STYLE_CLASS_MENU
#PARENT: Gtk
#COMMENT: A CSS class to match menus.

This is used in #GtkMenu.
#NAME: new
#PARENT: Gtk.TargetEntry.new
#COMMENT: a pointer to a new #GtkTargetEntry.
    Free with gtk_target_entry_free()
#NAME: selected_foreach
#PARENT: Gtk.TreeSelection
#COMMENT: Calls a function for each selected node. Note that you cannot modify
the tree or selection from within this function. As a result,
gtk_tree_selection_get_selected_rows() might be more useful.
#NAME: has-tooltip
#PARENT: Gtk.Widget
#COMMENT: Enables or disables the emission of #GtkWidget::query-tooltip on @widget.
A value of %TRUE indicates that @widget can have a tooltip, in this case
the widget will be queried using #GtkWidget::query-tooltip to determine
whether it will provide a tooltip or not.

Note that setting this property to %TRUE for the first time will change
the event masks of the GdkWindows of this widget to include leave-notify
and motion-notify events.  This cannot and will not be undone when the
property is set to %FALSE again.
#NAME: setup
#PARENT: Gtk.PageSetup.load_file.gboolean
#COMMENT: a #GtkPageSetup
#NAME: new_value
#PARENT: Gtk.SpinButton.input.gint
#COMMENT: return location for the new value
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_widget.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: set_label
#PARENT: Gtk.NumerableIcon
#COMMENT: Sets the currently displayed value of @self to the string
in @label. Setting an empty label removes the emblem.

Note that this is meant for displaying short labels, such as
roman numbers, or single letters. For roman numbers, consider
using the Unicode characters U+2160 - U+217F. Strings longer
than two characters will likely not be rendered very well.

If this method is called, and a number was already set on the
icon, it will automatically be reset to zero before rendering
the label, i.e. the last method called between
gtk_numerable_icon_set_label() and gtk_numerable_icon_set_count()
has always priority.
#NAME: im_context_filter_keypress
#PARENT: Gtk.TextView.im_context_filter_keypress
#COMMENT: %TRUE if the input method handled the key event.
#NAME: get_role
#PARENT: Gtk.Window.get_role
#COMMENT: the role of the window if set, or %NULL. The
  returned is owned by the widget and must not be modified
  or freed.
#NAME: remove
#PARENT: Gtk.Container
#COMMENT: Removes @widget from @container. @widget must be inside @container.
Note that @container will own a reference to @widget, and that this
may be the last reference held; so removing a widget from its
container can destroy that widget. If you want to use @widget
again, you need to add a reference to it while it’s not inside
a container, using g_object_ref(). If you don’t want to use @widget
again it’s usually more efficient to simply destroy it directly
using gtk_widget_destroy() since this will remove it from the
container and help break any circular reference count cycles.
#NAME: list
#PARENT: Gtk.TargetList.add_uri_targets.none
#COMMENT: a #GtkTargetList
#NAME: size
#PARENT: Gtk.PaperSize.get_default_left_margin.gdouble
#COMMENT: a #GtkPaperSize object
#NAME: ends_line
#PARENT: Gtk.TextIter.ends_line
#COMMENT: whether @iter is at the end of a line
#NAME: purpose
#PARENT: Gtk.TextView.set_input_purpose.none
#COMMENT: the purpose
#NAME: palette
#PARENT: Gtk.ToolPalette.set_style.none
#COMMENT: a #GtkToolPalette
#NAME: set_model
#PARENT: Gtk.CellView
#COMMENT: Sets the model for @cell_view.  If @cell_view already has a model
set, it will remove it before setting the new model.  If @model is
%NULL, then it will unset the old model.
#NAME: display
#PARENT: Gtk.ModuleDisplayInitFunc.none
#COMMENT: an open #GdkDisplay
#NAME: path
#PARENT: Gtk.TreePath.get_indices.gint
#COMMENT: a #GtkTreePath-struct
#NAME: entry
#PARENT: Gtk.TreeView.set_search_entry.none
#COMMENT: the entry the interactive search code of @tree_view should use or %NULL
#NAME: create_widget_func
#PARENT: Gtk.ListBox.bind_model.none
#COMMENT: a function that creates widgets for items
#NAME: set
#PARENT: Gtk.ListStore
#COMMENT: Sets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by the value to be set.
The list is terminated by a -1. For example, to set column 0 with type
%G_TYPE_STRING to “Foo”, you would write `gtk_list_store_set (store, iter,
0, "Foo", -1)`.

The value will be referenced by the store if it is a %G_TYPE_OBJECT, and it
will be copied if it is a %G_TYPE_STRING or %G_TYPE_BOXED.
#NAME: set
#PARENT: Gtk.Arrow
#COMMENT: Sets the direction and style of the #GtkArrow, @arrow.
#NAME: child
#PARENT: Gtk.MenuShell.append.none
#COMMENT: The #GtkMenuItem to add
#NAME: use_drag_window
#PARENT: Gtk.ToolItem.set_use_drag_window.none
#COMMENT: Whether @tool_item has a drag window.
#NAME: box
#PARENT: Gtk.Box.pack_end.none
#COMMENT: a #GtkBox
#NAME: new
#PARENT: Gtk.LevelBar.new
#COMMENT: a #GtkLevelBar.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_cursor.none
#COMMENT: A #GtkTreeView
#NAME: activate
#PARENT: Gtk.Entry
#COMMENT: The ::activate signal is emitted when the user hits
the Enter key.

While this signal is used as a
[keybinding signal][GtkBindingSignal],
it is also commonly used by applications to intercept
activation of entries.

The default bindings for this signal are all forms of the Enter key.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_x_offset.gint
#COMMENT: A #GtkTreeViewColumn.
#NAME: color
#PARENT: Gtk.Widget.override_color.none
#COMMENT: the color to assign, or %NULL to undo the effect
    of previous calls to gtk_widget_override_color()
#NAME: SeparatorToolItem
#PARENT: Gtk
#COMMENT: A #GtkSeparatorToolItem is a #GtkToolItem that separates groups of other
#GtkToolItems. Depending on the theme, a #GtkSeparatorToolItem will
often look like a vertical line on horizontally docked toolbars.

If the #GtkToolbar child property “expand” is %TRUE and the property
#GtkSeparatorToolItem:draw is %FALSE, a #GtkSeparatorToolItem will act as
a “spring” that forces other items to the ends of the toolbar.

Use gtk_separator_tool_item_new() to create a new #GtkSeparatorToolItem.
#NAME: connect
#PARENT: Gtk.AccelGroup
#COMMENT: Installs an accelerator in this group. When @accel_group is being
activated in response to a call to gtk_accel_groups_activate(),
@closure will be invoked if the @accel_key and @accel_mods from
gtk_accel_groups_activate() match those of this connection.

The signature used for the @closure is that of #GtkAccelGroupActivate.

Note that, due to implementation details, a single closure can
only be connected to one accelerator group.
#NAME: min
#PARENT: Gtk.HScale.new_with_range.Widget
#COMMENT: minimum value
#NAME: up
#PARENT: Gtk.PanDirection
#COMMENT: panned upwards
#NAME: get_id
#PARENT: Gtk.Plug.get_id
#COMMENT: the window ID for the plug
#NAME: set_vexpand
#PARENT: Gtk.Widget
#COMMENT: Sets whether the widget would like any available extra vertical
space.

See gtk_widget_set_hexpand() for more detail.
#NAME: window
#PARENT: Gtk.ApplicationWindow.get_show_menubar.gboolean
#COMMENT: a #GtkApplicationWindow
#NAME: free
#PARENT: Gtk.TreeRowReference
#COMMENT: Free’s @reference. @reference may be %NULL
#NAME: get_reveal_child
#PARENT: Gtk.Revealer
#COMMENT: Returns whether the child is currently
revealed. See gtk_revealer_set_reveal_child().

This function returns %TRUE as soon as the transition
is to the revealed state is started. To learn whether
the child is fully revealed (ie the transition is completed),
use gtk_revealer_get_child_revealed().
#NAME: get_adjustment
#PARENT: Gtk.ScaleButton
#COMMENT: Gets the #GtkAdjustment associated with the #GtkScaleButton’s scale.
See gtk_range_get_adjustment() for details.
#NAME: state
#PARENT: Gtk.StyleProperties.set_property.none
#COMMENT: state to set the value for
#NAME: section
#PARENT: Gtk.CssSection.get_start_line.guint
#COMMENT: the section
#NAME: set_single_line_mode
#PARENT: Gtk.Label
#COMMENT: Sets whether the label is in single line mode.
#NAME: stack
#PARENT: Gtk.Stack.get_visible_child_name.utf8
#COMMENT: a #GtkStack
#NAME: get_label_widget
#PARENT: Gtk.ToolButton
#COMMENT: Returns the widget used as label on @button.
See gtk_tool_button_set_label_widget().
#NAME: TreeSelectionFunc
#PARENT: Gtk.TreeSelectionFunc
#COMMENT: %TRUE, if the selection state of the row can be toggled
#NAME: region
#PARENT: Gtk.Widget.region_intersect.cairo.Region
#COMMENT: a #cairo_region_t, in the same coordinate system as
         @widget->allocation. That is, relative to @widget->window
         for widgets which return %FALSE from gtk_widget_get_has_window();
         relative to the parent window of @widget->window otherwise.
#NAME: add_pixbuf_formats
#PARENT: Gtk.RecentFilter
#COMMENT: Adds a rule allowing image files in the formats supported
by GdkPixbuf.
#NAME: new
#PARENT: Gtk.VPaned.new
#COMMENT: the new #GtkVPaned
#NAME: height
#PARENT: Gtk.render_extension.none
#COMMENT: rectangle height
#NAME: box
#PARENT: Gtk.FlowBox.get_activate_on_single_click.gboolean
#COMMENT: a #GtkFlowBox
#NAME: move-cursor
#PARENT: Gtk.IconView
#COMMENT: The ::move-cursor signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates a cursor movement.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically.

The default bindings for this signal include
- Arrow keys which move by individual steps
- Home/End keys which move to the first/last item
- PageUp/PageDown which move by "pages"
All of these will extend the selection when combined with
the Shift modifier.
#NAME: backward_to_tag_toggle
#PARENT: Gtk.TextIter.backward_to_tag_toggle
#COMMENT: whether we found a tag toggle before @iter
#NAME: keyval
#PARENT: Gtk.Window.mnemonic_activate.gboolean
#COMMENT: the mnemonic
#NAME: icon_size_from_name
#PARENT: Gtk
#COMMENT: Looks up the icon size associated with @name.
#NAME: func
#PARENT: Gtk.FileFilter.add_custom.none
#COMMENT: callback function; if the function returns %TRUE, then
  the file will be displayed.
#NAME: new
#PARENT: Gtk.SeparatorToolItem.new
#COMMENT: the new #GtkSeparatorToolItem
#NAME: wait_is_target_available
#PARENT: Gtk.Clipboard.wait_is_target_available
#COMMENT: %TRUE if the target is available, %FALSE otherwise.
#NAME: get_preview_filename
#PARENT: Gtk.FileChooser
#COMMENT: Gets the filename that should be previewed in a custom preview
widget. See gtk_file_chooser_set_preview_widget().
#NAME: path
#PARENT: Gtk.IconView.item-activated.none
#COMMENT: the #GtkTreePath for the activated item
#NAME: get_orientation
#PARENT: Gtk.PageSetup
#COMMENT: Gets the page orientation of the #GtkPageSetup.
#NAME: setting
#PARENT: Gtk.ToggleButton.set_inconsistent.none
#COMMENT: %TRUE if state is inconsistent
#NAME: compute_expand
#PARENT: Gtk.Widget.compute_expand
#COMMENT: whether widget tree rooted here should be expanded
#NAME: path
#PARENT: Gtk.WidgetPath.free.none
#COMMENT: a #GtkWidgetPath
#NAME: n_colors
#PARENT: Gtk.ColorSelectionChangePaletteWithScreenFunc.none
#COMMENT: Number of colors in the array
#NAME: new_from_file
#PARENT: Gtk.PrintSettings.new_from_file
#COMMENT: the restored #GtkPrintSettings
#NAME: SelectionMode
#PARENT: Gtk
#COMMENT: Used to control what selections users are allowed to make.
#NAME: renderer
#PARENT: Gtk.CellRendererText.set_fixed_height_from_font.none
#COMMENT: A #GtkCellRendererText
#NAME: lock_path
#PARENT: Gtk.AccelMap
#COMMENT: Locks the given accelerator path. If the accelerator map doesn’t yet contain
an entry for @accel_path, a new one is created.

Locking an accelerator path prevents its accelerator from being changed
during runtime. A locked accelerator path can be unlocked by
gtk_accel_map_unlock_path(). Refer to gtk_accel_map_change_entry()
for information about runtime accelerator changes.

If called more than once, @accel_path remains locked until
gtk_accel_map_unlock_path() has been called an equivalent number
of times.

Note that locking of individual accelerator paths is independent from
locking the #GtkAccelGroup containing them. For runtime accelerator
changes to be possible, both the accelerator path and its #GtkAccelGroup
have to be unlocked.
#NAME: RecentFilter
#PARENT: Gtk
#COMMENT: A #GtkRecentFilter can be used to restrict the files being shown
in a #GtkRecentChooser.  Files can be filtered based on their name
(with gtk_recent_filter_add_pattern()), on their mime type (with
gtk_file_filter_add_mime_type()), on the application that has
registered them (with gtk_recent_filter_add_application()), or by
a custom filter function (with gtk_recent_filter_add_custom()).

Filtering by mime type handles aliasing and subclassing of mime
types; e.g. a filter for text/plain also matches a file with mime
type application/rtf, since application/rtf is a subclass of text/plain.
Note that #GtkRecentFilter allows wildcards for the subtype of a
mime type, so you can e.g. filter for image/\*.

Normally, filters are used by adding them to a #GtkRecentChooser,
see gtk_recent_chooser_add_filter(), but it is also possible to
manually use a filter on a file with gtk_recent_filter_filter().

Recently used files are supported since GTK+ 2.10.

## GtkRecentFilter as GtkBuildable

The GtkRecentFilter implementation of the GtkBuildable interface
supports adding rules using the <mime-types>, <patterns> and
<applications> elements and listing the rules within. Specifying
a <mime-type>, <pattern> or <application> has the same effect as
calling gtk_recent_filter_add_mime_type(),
gtk_recent_filter_add_pattern() or gtk_recent_filter_add_application().

An example of a UI definition fragment specifying GtkRecentFilter rules:
|[
<object class="GtkRecentFilter">
  <mime-types>
    <mime-type>text/plain</mime-type>
    <mime-type>image/png</mime-type>
  </mime-types>
  <patterns>
    <pattern>*.txt</pattern>
    <pattern>*.png</pattern>
  </patterns>
  <applications>
    <application>gimp</application>
    <application>gedit</application>
    <application>glade</application>
  </applications>
</object>
]|
#NAME: unset_rows_drag_dest
#PARENT: Gtk.TreeView
#COMMENT: Undoes the effect of
gtk_tree_view_enable_model_drag_dest(). Calling this method sets
#GtkTreeView:reorderable to %FALSE.
#NAME: block_others
#PARENT: Gtk.device_grab_add.none
#COMMENT: %TRUE to prevent other devices to interact with @widget.
#NAME: AssistantPageFunc
#PARENT: Gtk.AssistantPageFunc
#COMMENT: The next page number.
#NAME: new
#PARENT: Gtk.RadioButton.new
#COMMENT: a new radio button
#NAME: horizontal
#PARENT: Gtk.TreeViewGridLines
#COMMENT: Horizontal grid lines.
#NAME: widget
#PARENT: Gtk.Widget.drag_unhighlight.none
#COMMENT: a widget to remove the highlight from
#NAME: set_default_icon_from_file
#PARENT: Gtk.Window.set_default_icon_from_file
#COMMENT: %TRUE if setting the icon succeeded.
#NAME: center_widget
#PARENT: Gtk.ActionBar.set_center_widget.none
#COMMENT: a widget to use for the center
#NAME: entry
#PARENT: Gtk.Entry.layout_index_to_text_index.gint
#COMMENT: a #GtkEntry
#NAME: get_filenames
#PARENT: Gtk.FileChooser.get_filenames
#COMMENT: a #GSList
   containing the filenames of all selected files and subfolders in
   the current folder. Free the returned list with g_slist_free(),
   and the filenames with g_free().
#NAME: set_max_width
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the maximum width of the @tree_column.  If @max_width is -1, then the
maximum width is unset.  Note, the column can actually be wider than max
width if it’s the last column in a view.  In this case, the column expands to
fill any extra space.
#NAME: n_seqs
#PARENT: Gtk.IMContextSimple.add_table.none
#COMMENT: number of sequences in the table
#NAME: Popover
#PARENT: Gtk
#COMMENT: GtkPopover is a bubble-like context window, primarily meant to
provide context-dependent information or options. Popovers are
attached to a widget, passed at construction time on gtk_popover_new(),
or updated afterwards through gtk_popover_set_relative_to(), by
default they will point to the whole widget area, although this
behavior can be changed through gtk_popover_set_pointing_to().

The position of a popover relative to the widget it is attached to
can also be changed through gtk_popover_set_position().

By default, #GtkPopover performs a GTK+ grab, in order to ensure
input events get redirected to it while it is shown, and also so
the popover is dismissed in the expected situations (clicks outside
the popover, or the Esc key being pressed). If no such modal behavior
is desired on a popover, gtk_popover_set_modal() may be called on it
to tweak its behavior.

## GtkPopover as menu replacement

GtkPopover is often used to replace menus. To facilitate this, it
supports being populated from a #GMenuModel, using
gtk_popover_new_from_model(). In addition to all the regular menu
model features, this function supports rendering sections in the
model in a more compact form, as a row of icon buttons instead of
menu items.

To use this rendering, set the ”display-hint” attribute of the
section to ”horizontal-buttons” and set the icons of your items
with the ”verb-icon” attribute.

|[
<section>
  <attribute name="display-hint">horizontal-buttons</attribute>
  <item>
    <attribute name="label">Cut</attribute>
    <attribute name="action">app.cut</attribute>
    <attribute name="verb-icon">edit-cut-symbolic</attribute>
  </item>
  <item>
    <attribute name="label">Copy</attribute>
    <attribute name="action">app.copy</attribute>
    <attribute name="verb-icon">edit-copy-symbolic</attribute>
  </item>
  <item>
    <attribute name="label">Paste</attribute>
    <attribute name="action">app.paste</attribute>
    <attribute name="verb-icon">edit-paste-symbolic</attribute>
  </item>
</section>
]|
#NAME: iter_children
#PARENT: Gtk.TreeModel.iter_children
#COMMENT: %TRUE, if @child has been set to the first child
#NAME: path
#PARENT: Gtk.WidgetPath.iter_list_classes.utf8
#COMMENT: a #GtkWidgetPath
#NAME: accel_key
#PARENT: Gtk.AccelMap.add_entry.none
#COMMENT: the accelerator key
#NAME: get_default_bottom_margin
#PARENT: Gtk.PaperSize
#COMMENT: Gets the default bottom margin for the #GtkPaperSize.
#NAME: set_license_type
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the license of the application showing the @about dialog from a
list of known licenses.

This function overrides the license set using
gtk_about_dialog_set_license().
#NAME: clipboard
#PARENT: Gtk.Clipboard.request_uris.none
#COMMENT: a #GtkClipboard
#NAME: widget
#PARENT: Gtk.StyleClass.render_icon.render_icon.GdkPixbuf.Pixbuf
#COMMENT: the widget
#NAME: get_default_row_spacing
#PARENT: Gtk.Table.get_default_row_spacing
#COMMENT: the default row spacing
#NAME: selection_data
#PARENT: Gtk.ClipboardReceivedFunc.none
#COMMENT: a #GtkSelectionData containing the data was received.
  If retrieving the data failed, then then length field
  of @selection_data will be negative.
#NAME: assistant
#PARENT: Gtk.Assistant.prepend_page.gint
#COMMENT: a #GtkAssistant
#NAME: insert
#PARENT: Gtk.MenuShell
#COMMENT: The ::insert signal is emitted when a new #GtkMenuItem is added to
a #GtkMenuShell.  A separate signal is used instead of
GtkContainer::add because of the need for an additional position
parameter.

The inverse of this signal is the GtkContainer::removed signal.
#NAME: STOCK_SAVE
#PARENT: Gtk
#COMMENT: The “Save” item and icon.
#NAME: inert
#PARENT: Gtk.CellRendererMode
#COMMENT: The cell is just for display
 and cannot be interacted with.  Note that this doesn’t mean that eg. the
 row being drawn can’t be selected -- just that a particular element of
 it cannot be individually modified.
#NAME: end_pos
#PARENT: Gtk.EditableInterface.do_delete_text.do_delete_text.none
#COMMENT: end position
#NAME: compute_prefix
#PARENT: Gtk.EntryCompletion.compute_prefix
#COMMENT: The common prefix all rows starting with @key
  or %NULL if no row matches @key.
#NAME: configure-event
#PARENT: Gtk.Widget.configure-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: event
#PARENT: Gtk.Widget.unmap-event.gboolean
#COMMENT: the #GdkEventAny which triggered this signal
#NAME: get_current_name
#PARENT: Gtk.FileChooser.get_current_name
#COMMENT: The raw text from the file chooser’s “Name” entry.  Free this with
g_free().  Note that this string is not a full pathname or URI; it is
whatever the contents of the entry are.  Note also that this string is in
UTF-8 encoding, which is not necessarily the system’s encoding for filenames.
#NAME: get_show_fallback
#PARENT: Gtk.AppChooserWidget.get_show_fallback
#COMMENT: the value of #GtkAppChooserWidget:show-fallback
#NAME: get_focus_from_sibling
#PARENT: Gtk.CellArea
#COMMENT: Gets the #GtkCellRenderer which is expected to be focusable
for which @renderer is, or may be a sibling.

This is handy for #GtkCellArea subclasses when handling events,
after determining the renderer at the event location it can
then chose to activate the focus cell for which the event
cell may have been a sibling.
#NAME: get_path_at_pos
#PARENT: Gtk.IconView
#COMMENT: Finds the path at the point (@x, @y), relative to bin_window coordinates.
See gtk_icon_view_get_item_at_pos(), if you are also interested in
the cell at the specified position.
See gtk_icon_view_convert_widget_to_bin_window_coords() for converting
widget coordinates to bin_window coordinates.
#NAME: get_expander_column
#PARENT: Gtk.TreeView
#COMMENT: Returns the column that is the current expander column.
This column has the expander arrow drawn next to it.
#NAME: EntryCompletion
#PARENT: Gtk
#COMMENT: #GtkEntryCompletion is an auxiliary object to be used in conjunction with
#GtkEntry to provide the completion functionality. It implements the
#GtkCellLayout interface, to allow the user to add extra cells to the
#GtkTreeView with completion matches.

“Completion functionality” means that when the user modifies the text
in the entry, #GtkEntryCompletion checks which rows in the model match
the current content of the entry, and displays a list of matches.
By default, the matching is done by comparing the entry text
case-insensitively against the text column of the model (see
gtk_entry_completion_set_text_column()), but this can be overridden
with a custom match function (see gtk_entry_completion_set_match_func()).

When the user selects a completion, the content of the entry is
updated. By default, the content of the entry is replaced by the
text column of the model, but this can be overridden by connecting
to the #GtkEntryCompletion::match-selected signal and updating the
entry in the signal handler. Note that you should return %TRUE from
the signal handler to suppress the default behaviour.

To add completion functionality to an entry, use gtk_entry_set_completion().

In addition to regular completion matches, which will be inserted into the
entry when they are selected, #GtkEntryCompletion also allows to display
“actions” in the popup window. Their appearance is similar to menuitems,
to differentiate them clearly from completion strings. When an action is
selected, the #GtkEntryCompletion::action-activated signal is emitted.

GtkEntryCompletion uses a #GtkTreeModelFilter model to represent the
subset of the entire model that is currently matching. While the
GtkEntryCompletion signals #GtkEntryCompletion::match-selected and
#GtkEntryCompletion::cursor-on-match take the original model and an
iter pointing to that model as arguments, other callbacks and signals
(such as #GtkCellLayoutDataFuncs or #GtkCellArea::apply-attributes)
will generally take the filter model as argument. As long as you are
only calling gtk_tree_model_get(), this will make no difference to
you. If for some reason, you need the original model, use
gtk_tree_model_filter_get_model(). Don’t forget to use
gtk_tree_model_filter_convert_iter_to_child_iter() to obtain a
matching iter.
#NAME: page_increment
#PARENT: Gtk.Adjustment.set_page_increment.none
#COMMENT: the new page increment
#NAME: set_model
#PARENT: Gtk.ComboBox
#COMMENT: Sets the model used by @combo_box to be @model. Will unset a previously set
model (if applicable). If model is %NULL, then it will unset the model.

Note that this function does not clear the cell renderers, you have to
call gtk_cell_layout_clear() yourself if you need to set up different
cell renderers for the new model.
#NAME: where
#PARENT: Gtk.TextBuffer.move_mark_by_name.none
#COMMENT: new location for mark
#NAME: setup
#PARENT: Gtk.PageSetup.set_top_margin.none
#COMMENT: a #GtkPageSetup
#NAME: new
#PARENT: Gtk.ImageMenuItem
#COMMENT: Creates a new #GtkImageMenuItem with an empty label.
#NAME: adjustment
#PARENT: Gtk.Viewport.set_vadjustment.none
#COMMENT: a #GtkAdjustment.
#NAME: x
#PARENT: Gtk.render_background.none
#COMMENT: X origin of the rectangle
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_show_private.gboolean
#COMMENT: a #GtkRecentChooser
#NAME: y
#PARENT: Gtk.render_background.none
#COMMENT: Y origin of the rectangle
#NAME: get_cells
#PARENT: Gtk.CellLayoutIface.get_cells.get_cells
#COMMENT: 
    a list of cell renderers. The list, but not the renderers has
    been newly allocated and should be freed with g_list_free()
    when no longer needed.
#NAME: modifiers
#PARENT: Gtk.BindingEntry.add_signal.none
#COMMENT: key modifier of binding to install
#NAME: provider
#PARENT: Gtk.StyleProviderIface.get_style.get_style.StyleProperties
#COMMENT: a #GtkStyleProvider
#NAME: property_name
#PARENT: Gtk.StyleProperties.lookup_property.gboolean
#COMMENT: property name to look up
#NAME: get_major_version
#PARENT: Gtk
#COMMENT: Returns the major version number of the GTK+ library.
(e.g. in GTK+ version 3.1.5 this is 3.)

This function is in the library, so it represents the GTK+ library
your code is running against. Contrast with the #GTK_MAJOR_VERSION
macro, which represents the major version of the GTK+ headers you
have included when compiling your code.
#NAME: first_property_name
#PARENT: Gtk.show_about_dialog.none
#COMMENT: the name of the first property
#NAME: set_selection_bounds
#PARENT: Gtk.Editable
#COMMENT: Selects a region of text. The characters that are selected are
those characters at positions from @start_pos up to, but not
including @end_pos. If @end_pos is negative, then the
characters selected are those characters from @start_pos to
the end of the text.

Note that positions are specified in characters, not bytes.
#NAME: filter
#PARENT: Gtk.FileFilter.add_custom.none
#COMMENT: a #GtkFileFilter
#NAME: warning_color
#PARENT: Gtk.IconInfo.load_symbolic_async.none
#COMMENT: a #GdkRGBA representing the warning color
    of the icon or %NULL to use the default color
#NAME: iter
#PARENT: Gtk.TreeCellDataFunc.none
#COMMENT: A #GtkTreeIter of the current row rendered
#NAME: target_list
#PARENT: Gtk.Widget.drag_dest_set_target_list.none
#COMMENT: list of droppable targets, or %NULL for none
#NAME: drag_set_icon_pixbuf
#PARENT: Gtk
#COMMENT: Sets @pixbuf as the icon for a given drag.
#NAME: setting
#PARENT: Gtk.CellRendererToggle.set_active.none
#COMMENT: the value to set.
#NAME: has-alpha
#PARENT: Gtk.GLArea
#COMMENT: If set to %TRUE the buffer allocated by the widget will have an alpha channel
component, and when rendering to the window the result will be composited over
whatever is below the widget.

If set to %FALSE there will be no alpha channel, and the buffer will fully
replace anything below the widget.
#NAME: get_tab_label
#PARENT: Gtk.Notebook
#COMMENT: Returns the tab label widget for the page @child.
%NULL is returned if @child is not in @notebook or
if no tab label has specifically been set for @child.
#NAME: new_custom
#PARENT: Gtk.PaperSize.new_custom
#COMMENT: a new #GtkPaperSize object, use gtk_paper_size_free()
to free it
#NAME: get_text_orientation
#PARENT: Gtk.ToolItem.get_text_orientation
#COMMENT: a #GtkOrientation indicating the text orientation
used for @tool_item
#NAME: get_action_group
#PARENT: Gtk.Widget.get_action_group
#COMMENT: A #GActionGroup or %NULL.
#NAME: get_double_buffered
#PARENT: Gtk.Widget.get_double_buffered
#COMMENT: %TRUE if the widget is double buffered
#NAME: insensitive
#PARENT: Gtk.StateType
#COMMENT: State indicating that the widget is
                        unresponsive to user actions.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_sort_order.none
#COMMENT: a #GtkTreeViewColumn
#NAME: add_ui_from_resource
#PARENT: Gtk.UIManager.add_ui_from_resource
#COMMENT: The merge id for the merged UI. The merge id can be used
  to unmerge the UI with gtk_ui_manager_remove_ui(). If an error occurred,
  the return value is 0.
#NAME: info
#PARENT: Gtk.RecentInfo.get_added.glong
#COMMENT: a #GtkRecentInfo
#NAME: new
#PARENT: Gtk.Box
#COMMENT: Creates a new #GtkBox.
#NAME: get_uri
#PARENT: Gtk.FileChooser.get_uri
#COMMENT: The currently selected URI, or %NULL
 if no file is selected. If gtk_file_chooser_set_local_only() is set to %TRUE
(the default) a local URI will be returned for any FUSE locations.
Free with g_free()
#NAME: cell_get_property
#PARENT: Gtk.CellArea
#COMMENT: Gets the value of a cell property for @renderer in @area.
#NAME: state_type
#PARENT: Gtk.paint_box_gap.none
#COMMENT: a state
#NAME: center
#PARENT: Gtk.Justification
#COMMENT: The text is placed in the center of the label.
#NAME: STYLE_CLASS_SCROLLBAR
#PARENT: Gtk
#COMMENT: A CSS class to match scrollbars.
#NAME: button
#PARENT: Gtk.StatusIcon.popup-menu.none
#COMMENT: the button that was pressed, or 0 if the
  signal is not emitted in response to a button press event
#NAME: data
#PARENT: Gtk.TreeCellDataFunc.none
#COMMENT: user data
#NAME: free
#PARENT: Gtk.Border
#COMMENT: Frees a #GtkBorder-struct.
#NAME: notebook
#PARENT: Gtk.Notebook.get_tab_label_text.utf8
#COMMENT: a #GtkNotebook
#NAME: new_from_widget
#PARENT: Gtk.RadioToolButton.new_from_widget
#COMMENT: The new #GtkRadioToolButton
#NAME: actions
#PARENT: Gtk.ToolPalette.add_drag_dest.none
#COMMENT: the #GdkDragActions which the widget should suppport
#NAME: window
#PARENT: Gtk.Window.set_attached_to.none
#COMMENT: a #GtkWindow
#NAME: get_child_at
#PARENT: Gtk.Grid.get_child_at
#COMMENT: the child at the given position, or %NULL
#NAME: colors
#PARENT: Gtk.ColorSelectionChangePaletteFunc.none
#COMMENT: Array of colors
#NAME: minimum_width
#PARENT: Gtk.CellAreaContext.push_preferred_width.none
#COMMENT: the proposed new minimum width for @context
#NAME: inner_area
#PARENT: Gtk.CellArea.inner_cell_area.none
#COMMENT: the return location for the inner cell area
#NAME: summary
#PARENT: Gtk.AssistantPageType
#COMMENT: The page informs the user of the changes
 done. Only the Close button will be shown.
#NAME: css_provider
#PARENT: Gtk.CssProvider.load_from_path.gboolean
#COMMENT: a #GtkCssProvider
#NAME: adjustment
#PARENT: Gtk.Container.set_focus_hadjustment.none
#COMMENT: an adjustment which should be adjusted when the focus is
  moved among the descendents of @container
#NAME: notebook
#PARENT: Gtk.Notebook.reorder_child.none
#COMMENT: a #GtkNotebook
#NAME: context
#PARENT: Gtk.StyleContext.get_frame_clock.Gdk.FrameClock
#COMMENT: a #GtkStyleContext
#NAME: test_text_set
#PARENT: Gtk
#COMMENT: Set the text string of @widget to @string if it is a GtkLabel,
GtkEditable (entry and text widgets) or GtkTextView.
#NAME: chooser
#PARENT: Gtk.RecentChooserIface.get_current_uri.get_current_uri.utf8
#COMMENT: a #GtkRecentChooser
#NAME: get_double
#PARENT: Gtk.PrintSettings.get_double
#COMMENT: the double value of @key
#NAME: ipp_name
#PARENT: Gtk.PaperSize.new_from_ipp.PaperSize
#COMMENT: an IPP paper name
#NAME: widget
#PARENT: Gtk.Widget.intersect.gboolean
#COMMENT: a #GtkWidget
#NAME: color
#PARENT: Gtk.ColorChooser.get_rgba.none
#COMMENT: a #GdkRGBA to fill in with the current color
#NAME: copy-clipboard
#PARENT: Gtk.Entry
#COMMENT: The ::copy-clipboard signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to copy the selection to the clipboard.

The default bindings for this signal are
Ctrl-c and Ctrl-Insert.
#NAME: get_icon_list
#PARENT: Gtk.Window.get_icon_list
#COMMENT: copy of window’s icon list
#NAME: font
#PARENT: Gtk.TextAttributes
#COMMENT: #PangoFontDescription for text.
#NAME: selected-children-changed
#PARENT: Gtk.FlowBox
#COMMENT: The ::selected-children-changed signal is emitted when the
set of selected children changes.

Use gtk_flow_box_selected_foreach() or
gtk_flow_box_get_selected_children() to obtain the
selected children.
#NAME: assistant
#PARENT: Gtk.Assistant.set_page_complete.none
#COMMENT: a #GtkAssistant
#NAME: get_accepts_tab
#PARENT: Gtk.TextView
#COMMENT: Returns whether pressing the Tab key inserts a tab characters.
gtk_text_view_set_accepts_tab().
#NAME: get_collapsed
#PARENT: Gtk.ToolItemGroup
#COMMENT: Gets whether @group is collapsed or expanded.
#NAME: get_grid_lines
#PARENT: Gtk.TreeView
#COMMENT: Returns which grid lines are enabled in @tree_view.
#NAME: overwrite
#PARENT: Gtk.Entry.set_overwrite_mode.none
#COMMENT: new value
#NAME: collate
#PARENT: Gtk.PrintSettings.set_collate.none
#COMMENT: whether to collate the output
#NAME: slide_left
#PARENT: Gtk.RevealerTransitionType
#COMMENT: Slide in from the right
#NAME: get_visible
#PARENT: Gtk.ActionGroup.get_visible
#COMMENT: %TRUE if the group is visible.
#NAME: get_button
#PARENT: Gtk.GestureSingle
#COMMENT: Returns the button number @gesture listens for, or 0 if @gesture
reacts to any button press.
#NAME: group
#PARENT: Gtk.RadioMenuItem.new.Widget
#COMMENT: the group to which the
  radio menu item is to be attached, or %NULL
#NAME: area
#PARENT: Gtk.CellArea.get_current_path_string.utf8
#COMMENT: a #GtkCellArea
#NAME: path
#PARENT: Gtk.TreePath.is_descendant.gboolean
#COMMENT: a #GtkTreePath-struct
#NAME: state
#PARENT: Gtk.StyleProperties.get_property.gboolean
#COMMENT: state to retrieve the property value for
#NAME: has_icon
#PARENT: Gtk.IconTheme
#COMMENT: Checks whether an icon theme includes an icon
for a particular name.
#NAME: get_row_at_index
#PARENT: Gtk.ListBox.get_row_at_index
#COMMENT: the child #GtkWidget or %NULL
#NAME: text_view
#PARENT: Gtk.TextView.get_overwrite.gboolean
#COMMENT: a #GtkTextView
#NAME: manager
#PARENT: Gtk.RecentChooserWidget.new_for_manager.Widget
#COMMENT: a #GtkRecentManager
#NAME: STYLE_CLASS_LABEL
#PARENT: Gtk
#COMMENT: A CSS class to match labels.

This is used by #GtkLabel.
#NAME: shell
#PARENT: Gtk.ToolShellIface.get_style.get_style.ToolbarStyle
#COMMENT: a #GtkToolShell
#NAME: unlock_path
#PARENT: Gtk.AccelMap
#COMMENT: Undoes the last call to gtk_accel_map_lock_path() on this @accel_path.
Refer to gtk_accel_map_lock_path() for information about accelerator path locking.
#NAME: selection_data
#PARENT: Gtk.SelectionData.targets_include_uri.gboolean
#COMMENT: a #GtkSelectionData object
#NAME: new
#PARENT: Gtk.CellRendererCombo
#COMMENT: Creates a new #GtkCellRendererCombo.
Adjust how text is drawn using object properties.
Object properties can be set globally (with g_object_set()).
Also, with #GtkTreeViewColumn, you can bind a property to a value
in a #GtkTreeModel. For example, you can bind the “text” property
on the cell renderer to a string value in the model, thus rendering
a different string in each row of the #GtkTreeView.
#NAME: builder
#PARENT: Gtk.BuildableIface.construct_child.construct_child.GObject.Object
#COMMENT: #GtkBuilder used to construct this object
#NAME: tearoff-title
#PARENT: Gtk.Menu
#COMMENT: A title that may be displayed by the window manager when this
menu is torn-off.
#NAME: manager
#PARENT: Gtk.UIManager.set_add_tearoffs.none
#COMMENT: a #GtkUIManager
#NAME: height
#PARENT: Gtk.IconSize.lookup.gboolean
#COMMENT: location to store icon height
#NAME: get_min_value
#PARENT: Gtk.LevelBar.get_min_value
#COMMENT: a positive value
#NAME: visible
#PARENT: Gtk.StatusIcon.set_visible.none
#COMMENT: %TRUE to show the status icon, %FALSE to hide it
#NAME: get_interface_age
#PARENT: Gtk
#COMMENT: Returns the interface age as passed to `libtool`
when building the GTK+ library the process is running against.
If `libtool` means nothing to you, don't
worry about it.
#NAME: add_pixbuf_formats
#PARENT: Gtk.FileFilter
#COMMENT: Adds a rule allowing image files in the formats supported
by GdkPixbuf.
#NAME: inset
#PARENT: Gtk.BorderStyle
#COMMENT: Looks as if the content is sunken into the canvas
#NAME: self
#PARENT: Gtk.LevelBar.get_min_value.gdouble
#COMMENT: a #GtkLevelBar
#NAME: draw_as_radio
#PARENT: Gtk.ToggleAction.set_draw_as_radio.none
#COMMENT: whether the action should have proxies like a radio
   action
#NAME: reversed
#PARENT: Gtk.Paned.cycle-handle-focus.gboolean
#COMMENT: whether cycling backward or forward
#NAME: new
#PARENT: Gtk.ProgressBar.new
#COMMENT: a #GtkProgressBar.
#NAME: pspec
#PARENT: Gtk.StyleProviderIface.get_style_property.get_style_property.gboolean
#COMMENT: The #GParamSpec to query
#NAME: start
#PARENT: Gtk.TextBuffer.apply_tag_by_name.none
#COMMENT: one bound of range to be tagged
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_spacing.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: x
#PARENT: Gtk.paint_handle.none
#COMMENT: x origin of the handle
#NAME: new
#PARENT: Gtk.Notebook
#COMMENT: Creates a new #GtkNotebook widget with no pages.
#NAME: y
#PARENT: Gtk.paint_handle.none
#COMMENT: y origin of the handle
#NAME: clipboard
#PARENT: Gtk.TextBuffer.cut_clipboard.none
#COMMENT: the #GtkClipboard object to cut to
#NAME: mnemonic_activate
#PARENT: Gtk.Window.mnemonic_activate
#COMMENT: %TRUE if the activation is done.
#NAME: print_run_page_setup_dialog
#PARENT: Gtk
#COMMENT: Runs a page setup dialog, letting the user modify the values from
@page_setup. If the user cancels the dialog, the returned #GtkPageSetup
is identical to the passed in @page_setup, otherwise it contains the
modifications done in the dialog.

Note that this function may use a recursive mainloop to show the page
setup dialog. See gtk_print_run_page_setup_dialog_async() if this is
a problem.
#NAME: list_shortcuts
#PARENT: Gtk.PlacesSidebar.list_shortcuts
#COMMENT: 
    A #GSList of #GFile of the locations that have been added as
    application-specific shortcuts with gtk_places_sidebar_add_shortcut().
To free this list, you can use
|[<!-- language="C" -->
g_slist_free_full (list, (GDestroyNotify) g_object_unref);
]|
#NAME: item
#PARENT: Gtk.StockItem.copy.StockItem
#COMMENT: a #GtkStockItem
#NAME: get_resizable
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns %TRUE if the @tree_column can be resized by the end user.
#NAME: relative_to
#PARENT: Gtk.Popover.set_relative_to.none
#COMMENT: a #GtkWidget
#NAME: iter
#PARENT: Gtk.TextIter.forward_word_end.gboolean
#COMMENT: a #GtkTextIter
#NAME: sort_data
#PARENT: Gtk.RecentChooser.set_sort_func.none
#COMMENT: user data to pass to @sort_func, or %NULL
#NAME: toggled_on
#PARENT: Gtk.TextIter.get_toggled_tags.TextTag
#COMMENT: %TRUE to get toggled-on tags
#NAME: drag_source
#PARENT: Gtk.TreeDragSourceIface.drag_data_get.drag_data_get.gboolean
#COMMENT: a #GtkTreeDragSource
#NAME: about
#PARENT: Gtk.AboutDialog.set_copyright.none
#COMMENT: a #GtkAboutDialog
#NAME: register_property
#PARENT: Gtk.StyleProperties
#COMMENT: Registers a property so it can be used in the CSS file format.
This function is the low-level equivalent of
gtk_theming_engine_register_property(), if you are implementing
a theming engine, you want to use that function instead.
#NAME: get_progress_pulse_step
#PARENT: Gtk.Entry
#COMMENT: Retrieves the pulse step set with gtk_entry_set_progress_pulse_step().
#NAME: get_nth_bookmark
#PARENT: Gtk.PlacesSidebar.get_nth_bookmark
#COMMENT: The bookmark specified by the index @n, or
#NULL if no such index exist.  Note that the indices start at 0, even though
the file chooser starts them with the keyboard shortcut “Alt-1”.
#NAME: purge_items
#PARENT: Gtk.RecentManager.purge_items
#COMMENT: the number of items that have been removed from the
  recently used resources list
#NAME: table
#PARENT: Gtk.TextTagTable.lookup.TextTag
#COMMENT: a #GtkTextTagTable
#NAME: widget
#PARENT: Gtk.Widget.style_get_valist.none
#COMMENT: a #GtkWidget
#NAME: get_focus_on_click
#PARENT: Gtk.FileChooserButton.get_focus_on_click
#COMMENT: %TRUE if the button grabs focus when it is clicked with
              the mouse.
#NAME: right_attach
#PARENT: Gtk.Menu.attach.none
#COMMENT: The column number to attach the right side of the item to
#NAME: parent_class
#PARENT: Gtk.SeparatorToolItemClass
#COMMENT: The parent class.
#NAME: child_notify
#PARENT: Gtk.Widget
#COMMENT: Emits a #GtkWidget::child-notify signal for the
[child property][child-properties] @child_property
on @widget.

This is the analogue of g_object_notify() for child properties.

Also see gtk_container_child_notify().
#NAME: get_border_window_size
#PARENT: Gtk.TextView.get_border_window_size
#COMMENT: width of window
#NAME: remove_accelerator
#PARENT: Gtk.Widget.remove_accelerator
#COMMENT: whether an accelerator was installed and could be removed
#NAME: parent_class
#PARENT: Gtk.BinClass
#COMMENT: The parent class.
#NAME: natural_height
#PARENT: Gtk.CellArea.get_preferred_height.none
#COMMENT: location to store the natural height, or %NULL
#NAME: box
#PARENT: Gtk.FlowBox.set_selection_mode.none
#COMMENT: a #GtkFlowBox
#NAME: get_group
#PARENT: Gtk.RadioMenuItem.get_group
#COMMENT: the group
    of @radio_menu_item
#NAME: new_from_stock
#PARENT: Gtk.ToggleToolButton.new_from_stock
#COMMENT: A new #GtkToggleToolButton
#NAME: window
#PARENT: Gtk.Window.set_keep_above.none
#COMMENT: a #GtkWindow
#NAME: test_list_all_types
#PARENT: Gtk.test_list_all_types
#COMMENT: 
   0-terminated array of type ids
#NAME: tooltip
#PARENT: Gtk.Action.set_tooltip.none
#COMMENT: the tooltip text
#NAME: op
#PARENT: Gtk.PrintOperation.get_has_selection.gboolean
#COMMENT: a #GtkPrintOperation
#NAME: get_current_uri
#PARENT: Gtk.RecentChooserIface.get_current_uri.get_current_uri
#COMMENT: a newly allocated string holding a URI.
#NAME: add_age
#PARENT: Gtk.RecentFilter
#COMMENT: Adds a rule that allows resources based on their age - that is, the number
of days elapsed since they were last modified.
#NAME: RadioMenuItem
#PARENT: Gtk
#COMMENT: A radio menu item is a check menu item that belongs to a group. At each
instant exactly one of the radio menu items from a group is selected.

The group list does not need to be freed, as each #GtkRadioMenuItem will
remove itself and its list item when it is destroyed.

The correct way to create a group of radio menu items is approximatively
this:

## How to create a group of radio menu items.

|[<!-- language="C" -->
GSList *group = NULL;
GtkWidget *item;
gint i;

for (i = 0; i < 5; i++)
{
  item = gtk_radio_menu_item_new_with_label (group, "This is an example");
  group = gtk_radio_menu_item_get_group (GTK_RADIO_MENU_ITEM (item));
  if (i == 1)
    gtk_check_menu_item_set_active (GTK_CHECK_MENU_ITEM (item), TRUE);
}
]|
#NAME: height
#PARENT: Gtk.CellRenderer.get_size.none
#COMMENT: location to return height needed to render a cell, or %NULL
#NAME: create_tag
#PARENT: Gtk.TextBuffer.create_tag
#COMMENT: a new tag
#NAME: get_screen
#PARENT: Gtk.ThemingEngine
#COMMENT: Returns the #GdkScreen to which @engine currently rendering to.
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.iter_children.iter_children.gboolean
#COMMENT: a #GtkTreeModel
#NAME: entry
#PARENT: Gtk.Entry.reset_im_context.none
#COMMENT: a #GtkEntry
#NAME: about
#PARENT: Gtk.AboutDialog.get_website.utf8
#COMMENT: a #GtkAboutDialog
#NAME: combo_box
#PARENT: Gtk.ComboBoxText.append.none
#COMMENT: A #GtkComboBoxText
#NAME: editable
#PARENT: Gtk.Editable.get_editable.gboolean
#COMMENT: a #GtkEditable
#NAME: widget
#PARENT: Gtk.CellArea.event.gint
#COMMENT: the #GtkWidget that @area is rendering to
#NAME: current_value
#PARENT: Gtk.RadioAction.set_current_value.none
#COMMENT: the new value
#NAME: get_action
#PARENT: Gtk.ActionGroup
#COMMENT: Looks up an action in the action group by name.
#NAME: user_data
#PARENT: Gtk.Clipboard.request_image.none
#COMMENT: user data to pass to @callback.
#NAME: switch
#PARENT: Gtk.ApplicationInhibitFlags
#COMMENT: Inhibit user switching
#NAME: key_snooper_install
#PARENT: Gtk
#COMMENT: Installs a key snooper function, which will get called on all
key events before delivering them normally.
#NAME: secondary-icon-tooltip-markup
#PARENT: Gtk.Entry
#COMMENT: The contents of the tooltip on the secondary icon, which is marked up
with the [Pango text markup language][PangoMarkupFormat].

Also see gtk_entry_set_icon_tooltip_markup().
#NAME: get_icon_set
#PARENT: Gtk.Image
#COMMENT: Gets the icon set and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ICON_SET (see gtk_image_get_storage_type()).
#NAME: get_exclusive
#PARENT: Gtk.GestureSingle
#COMMENT: Gets whether a gesture is exclusive. For more information, see
gtk_gesture_single_set_exclusive().
#NAME: widget
#PARENT: Gtk.Widget.drag_source_set_target_list.none
#COMMENT: a #GtkWidget that’s a drag source
#NAME: render_icon
#PARENT: Gtk
#COMMENT: Renders the icon in @pixbuf at the specified @x and @y coordinates.
#NAME: widget
#PARENT: Gtk.ButtonBox.get_layout.ButtonBoxStyle
#COMMENT: a #GtkButtonBox
#NAME: cell_get_position
#PARENT: Gtk.TreeViewColumn.cell_get_position
#COMMENT: %TRUE if @cell belongs to @tree_column.
#NAME: ResponseType
#PARENT: Gtk
#COMMENT: Predefined values for use as response ids in gtk_dialog_add_button().
All predefined values are negative, GTK+ leaves positive values for
application-defined response ids.
#NAME: remove_widget
#PARENT: Gtk.SizeGroup
#COMMENT: Removes a widget from a #GtkSizeGroup.
#NAME: style
#PARENT: Gtk.Toolbar.style-changed.none
#COMMENT: the new #GtkToolbarStyle of the toolbar
#NAME: get_view_window
#PARENT: Gtk.Viewport.get_view_window
#COMMENT: a #GdkWindow
#NAME: get_content_area
#PARENT: Gtk.InfoBar
#COMMENT: Returns the content area of @info_bar.
#NAME: get_slider_size_fixed
#PARENT: Gtk.Range
#COMMENT: This function is useful mainly for #GtkRange subclasses.

See gtk_range_set_slider_size_fixed().
#NAME: get_show_numbers
#PARENT: Gtk.RecentAction
#COMMENT: Returns the value set by gtk_recent_chooser_menu_set_show_numbers().
#NAME: new
#PARENT: Gtk.RecentChooserDialog.new
#COMMENT: a new #GtkRecentChooserDialog
#NAME: editable
#PARENT: Gtk.TextIter
#COMMENT: Returns whether the character at @iter is within an editable region
of text.  Non-editable text is “locked” and can’t be changed by the
user via #GtkTextView. This function is simply a convenience
wrapper around gtk_text_iter_get_attributes(). If no tags applied
to this text affect editability, @default_setting will be returned.

You don’t want to use this function to decide whether text can be
inserted at @iter, because for insertion you don’t want to know
whether the char at @iter is inside an editable range, you want to
know whether a new character inserted at @iter would be inside an
editable range. Use gtk_text_iter_can_insert() to handle this
case.
#NAME: window
#PARENT: Gtk.Window.set_icon_from_file.gboolean
#COMMENT: a #GtkWindow
#NAME: set_use_alpha
#PARENT: Gtk.ColorChooser
#COMMENT: Sets whether or not the color chooser should use the alpha channel.
#NAME: fontname
#PARENT: Gtk.FontButton.new_with_font.Widget
#COMMENT: Name of font to display in font chooser dialog
#NAME: get_label
#PARENT: Gtk.MenuItem
#COMMENT: Sets @text on the @menu_item label
#NAME: get_accel_closure
#PARENT: Gtk.Action
#COMMENT: Returns the accel closure for this action.
#NAME: PageSetup
#PARENT: Gtk
#COMMENT: A GtkPageSetup object stores the page size, orientation and margins.
The idea is that you can get one of these from the page setup dialog
and then pass it to the #GtkPrintOperation when printing.
The benefit of splitting this out of the #GtkPrintSettings is that
these affect the actual layout of the page, and thus need to be set
long before user prints.

## Margins ## {#print-margins}
The margins specified in this object are the “print margins”, i.e. the
parts of the page that the printer cannot print on. These are different
from the layout margins that a word processor uses; they are typically
used to determine the minimal size for the layout
margins.

To obtain a #GtkPageSetup use gtk_page_setup_new() to get the defaults,
or use gtk_print_run_page_setup_dialog() to show the page setup dialog
and receive the resulting page setup.

## A page setup dialog

|[<!-- language="C" -->
static GtkPrintSettings *settings = NULL;
static GtkPageSetup *page_setup = NULL;

static void
do_page_setup (void)
{
  GtkPageSetup *new_page_setup;

  if (settings == NULL)
    settings = gtk_print_settings_new ();

  new_page_setup = gtk_print_run_page_setup_dialog (GTK_WINDOW (main_window),
                                                    page_setup, settings);

  if (page_setup)
    g_object_unref (page_setup);

  page_setup = new_page_setup;
}
]|

Printing support was added in GTK+ 2.10.
#NAME: group_name
#PARENT: Gtk.PageSetup.new_from_key_file.PageSetup
#COMMENT: the name of the group in the key_file to read, or %NULL
             to use the default name “Page Setup”
#NAME: context
#PARENT: Gtk.Widget.drag_get_data.none
#COMMENT: the drag context
#NAME: toggle-cursor-item
#PARENT: Gtk.IconView
#COMMENT: A [keybinding signal][GtkBindingSignal]
which gets emitted when the user toggles whether the currently
focused item is selected or not. The exact effect of this
depend on the selection mode.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control selection
programmatically.

There is no default binding for this signal is Ctrl-Space.
#NAME: detail
#PARENT: Gtk.paint_focus.none
#COMMENT: a style detail
#NAME: caps-lock-warning
#PARENT: Gtk.Entry
#COMMENT: Whether password entries will show a warning when Caps Lock is on.

Note that the warning is shown using a secondary icon, and thus
does not work if you are using the secondary icon position for some
other purpose.
#NAME: STOCK_PRINT_PAUSED
#PARENT: Gtk
#COMMENT: The “Print Paused” icon.
#NAME: accel_key
#PARENT: Gtk.accel_groups_activate.gboolean
#COMMENT: accelerator keyval from a key event
#NAME: spacing
#PARENT: Gtk.Expander.set_spacing.none
#COMMENT: distance between the expander and child in pixels
#NAME: n_initial_chars
#PARENT: Gtk.EntryBuffer.new.EntryBuffer
#COMMENT: number of characters in @initial_chars, or -1
#NAME: window
#PARENT: Gtk.Window.set_type_hint.none
#COMMENT: a #GtkWindow
#NAME: get_kinetic_scrolling
#PARENT: Gtk.ScrolledWindow
#COMMENT: Returns the specified kinetic scrolling behavior.
#NAME: order
#PARENT: Gtk.TreeSortableIface.get_sort_column_id.get_sort_column_id.gboolean
#COMMENT: The #GtkSortType to be filled in
#NAME: gstring
#PARENT: Gtk.rc_property_parse_border.gboolean
#COMMENT: the #GString to be parsed
#NAME: run
#PARENT: Gtk.Dialog.run
#COMMENT: response ID
#NAME: width
#PARENT: Gtk.Grid.attach.none
#COMMENT: the number of columns that @child will span
#NAME: incomplete_hostname
#PARENT: Gtk.FileChooserError
#COMMENT: Indicates an incomplete hostname (e.g. "http://foo" without a slash after that).
#NAME: was_symbolic
#PARENT: Gtk.IconInfo.load_symbolic_for_context_finish.GdkPixbuf.Pixbuf
#COMMENT: a #gboolean, returns whether the
    loaded icon was a symbolic one and whether the @fg color was
    applied to it.
#NAME: file_name
#PARENT: Gtk.PrintSettings.new_from_file.PrintSettings
#COMMENT: the filename to read the settings from
#NAME: get_icon_name
#PARENT: Gtk.StatusIcon.get_icon_name
#COMMENT: name of the displayed icon, or %NULL if the image is empty.
#NAME: tagset_name
#PARENT: Gtk.TextBuffer.register_deserialize_tagset.Gdk.Atom
#COMMENT: an optional tagset name, on %NULL
#NAME: entries
#PARENT: Gtk.init_with_args.gboolean
#COMMENT: a %NULL-terminated array
   of #GOptionEntrys describing the options of your program
#NAME: text
#PARENT: Gtk.MenuToolButton.set_arrow_tooltip_text.none
#COMMENT: text to be used as tooltip text for button’s arrow button
#NAME: new_with_mnemonic
#PARENT: Gtk.Expander.new_with_mnemonic
#COMMENT: a new #GtkExpander widget.
#NAME: column-spacing
#PARENT: Gtk.IconView
#COMMENT: The column-spacing property specifies the space which is inserted between
the columns of the icon view.
#NAME: entry
#PARENT: Gtk.Entry.set_alignment.none
#COMMENT: a #GtkEntry
#NAME: heading
#PARENT: Gtk.AppChooserButton
#COMMENT: The text to show at the top of the dialog that can be
opened from the button. The string may contain Pango markup.
#NAME: box
#PARENT: Gtk.ListBox.get_row_at_y.ListBoxRow
#COMMENT: a #GtkListBox
#NAME: activate
#PARENT: Gtk.BindingSet
#COMMENT: Find a key binding matching @keyval and @modifiers within
@binding_set and activate the binding on @object.
#NAME: StackSidebar
#PARENT: Gtk
#COMMENT: A GtkStackSidebar enables you to quickly and easily provide a
consistent "sidebar" object for your user interface.

In order to use a GtkStackSidebar, you simply use a GtkStack to
organize your UI flow, and add the sidebar to your sidebar area. You
can use gtk_stack_sidebar_set_stack() to connect the #GtkStackSidebar
to the #GtkStack.
#NAME: chooser
#PARENT: Gtk.FileChooser.get_extra_widget.Widget
#COMMENT: a #GtkFileChooser
#NAME: end_pos
#PARENT: Gtk.Editable.set_selection_bounds.none
#COMMENT: end of region
#NAME: height
#PARENT: Gtk.render_expander.none
#COMMENT: rectangle height
#NAME: orientation-changed
#PARENT: Gtk.Toolbar
#COMMENT: Emitted when the orientation of the toolbar changes.
#NAME: path
#PARENT: Gtk.IconView.get_item_row.gint
#COMMENT: the #GtkTreePath of the item
#NAME: get_transition_duration
#PARENT: Gtk.Stack
#COMMENT: Returns the amount of time (in milliseconds) that
transitions between pages in @stack will take.
#NAME: text_view
#PARENT: Gtk.TextView.get_line_yrange.none
#COMMENT: a #GtkTextView
#NAME: path
#PARENT: Gtk.TreeView.set_cursor_on_cell.none
#COMMENT: A #GtkTreePath
#NAME: target_value
#PARENT: Gtk.Actionable.set_action_target_value.none
#COMMENT: a #GVariant to set as the target value, or %NULL
#NAME: get_applications
#PARENT: Gtk.RecentInfo.get_applications
#COMMENT: 
    a newly allocated %NULL-terminated array of strings.
    Use g_strfreev() to free it.
#NAME: step
#PARENT: Gtk.SpinButton.get_increments.none
#COMMENT: location to store step increment, or %NULL
#NAME: path
#PARENT: Gtk.TreeView.set_cursor.none
#COMMENT: A #GtkTreePath
#NAME: show_uri
#PARENT: Gtk
#COMMENT: This is a convenience function for launching the default application
to show the uri. The uri must be of a form understood by GIO (i.e. you
need to install gvfs to get support for uri schemes such as http://
or ftp://, as only local files are handled by GIO itself).
Typical examples are
- `file:///home/gnome/pict.jpg`
- `http://www.gnome.org`
- `mailto:me@gnome.org`

Ideally the timestamp is taken from the event triggering
the gtk_show_uri() call. If timestamp is not known you can take
%GDK_CURRENT_TIME.
#NAME: small_toolbar
#PARENT: Gtk.IconSize
#COMMENT: Size appropriate for small toolbars (16px).
#NAME: popover
#PARENT: Gtk.PopoverMenu.open_submenu.none
#COMMENT: a #GtkPopoverMenu
#NAME: iter
#PARENT: Gtk.TreeModel.get_iter_first.gboolean
#COMMENT: the uninitialized #GtkTreeIter-struct
#NAME: callback
#PARENT: Gtk.Clipboard.request_image.none
#COMMENT: a function to call when the image is received,
    or the retrieval fails. (It will always be called one way or the other.)
#NAME: get_menu_label
#PARENT: Gtk.Notebook
#COMMENT: Retrieves the menu label widget of the page containing @child.
#NAME: round_digits
#PARENT: Gtk.Range.set_round_digits.none
#COMMENT: the precision in digits, or -1
#NAME: action
#PARENT: Gtk.Action.get_name.utf8
#COMMENT: the action object
#NAME: forward_find_char
#PARENT: Gtk.TextIter.forward_find_char
#COMMENT: whether a match was found
#NAME: move_after
#PARENT: Gtk.TreeStore
#COMMENT: Moves @iter in @tree_store to the position after @position. @iter and
@position should be in the same level. Note that this function only
works with unsorted stores. If @position is %NULL, @iter will be moved
to the start of the level.
#NAME: object
#PARENT: Gtk.bindings_activate_event.gboolean
#COMMENT: a #GObject (generally must be a widget)
#NAME: label
#PARENT: Gtk.Expander.new.Widget
#COMMENT: the text of the label
#NAME: notebook
#PARENT: Gtk.Notebook.get_action_widget.Widget
#COMMENT: a #GtkNotebook
#NAME: x
#PARENT: Gtk.paint_check.none
#COMMENT: x origin of the rectangle to draw the check in
#NAME: y
#PARENT: Gtk.paint_check.none
#COMMENT: y origin of the rectangle to draw the check in
#NAME: section
#PARENT: Gtk.CssSection.unref.none
#COMMENT: a #GtkCssSection
#NAME: box
#PARENT: Gtk.ListBoxClass.unselect_all.unselect_all.none
#COMMENT: a #GtkListBox
#NAME: PrintOperationResult
#PARENT: Gtk
#COMMENT: A value of this type is returned by gtk_print_operation_run().
#NAME: pixbuf
#PARENT: Gtk.drag_set_icon_pixbuf.none
#COMMENT: the #GdkPixbuf to use as the drag icon
#NAME: assistant
#PARENT: Gtk.Assistant.set_page_side_image.none
#COMMENT: a #GtkAssistant
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.set_show_enter_location.none
#COMMENT: a places sidebar
#NAME: draw_bg
#PARENT: Gtk.TextAppearance
#COMMENT: Whether to use background-related values; this is
  irrelevant for the values struct when in a tag, but is used for
  the composite values struct; it’s true if any of the tags being
  composited had background stuff set.
#NAME: forward_lines
#PARENT: Gtk.TextIter
#COMMENT: Moves @count lines forward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn’t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves backward by 0 - @count lines.
#NAME: iter
#PARENT: Gtk.TextView.forward_display_line.gboolean
#COMMENT: a #GtkTextIter
#NAME: label
#PARENT: Gtk.Label.get_use_underline.gboolean
#COMMENT: a #GtkLabel
#NAME: include_hidden_chars
#PARENT: Gtk.TextBuffer.get_text.utf8
#COMMENT: whether to include invisible text
#NAME: tree_view
#PARENT: Gtk.TreeView.convert_bin_window_to_widget_coords.none
#COMMENT: a #GtkTreeView
#NAME: cell-background-gdk
#PARENT: Gtk.CellRenderer
#COMMENT: Cell background as a #GdkColor
#NAME: path
#PARENT: Gtk.IconTheme.set_search_path.none
#COMMENT: array of
    directories that are searched for icon themes
#NAME: start
#PARENT: Gtk.TextBuffer.delete-range.none
#COMMENT: the start of the range to be deleted
#NAME: n_properties
#PARENT: Gtk.WidgetClass.list_style_properties.GObject.ParamSpec
#COMMENT: location to return the number of style properties found
#NAME: progress-pulse-step
#PARENT: Gtk.Entry
#COMMENT: The fraction of total entry width to move the progress
bouncing block for each call to gtk_entry_progress_pulse().
#NAME: radio_button
#PARENT: Gtk.RadioButton.set_group.none
#COMMENT: a #GtkRadioButton.
#NAME: app_name
#PARENT: Gtk.RecentInfo.has_application.gboolean
#COMMENT: a string containing an application name
#NAME: get_visible_slice
#PARENT: Gtk.TextIter.get_visible_slice
#COMMENT: slice of text from the buffer
#NAME: context
#PARENT: Gtk.IconInfo.load_symbolic_for_context.GdkPixbuf.Pixbuf
#COMMENT: a #GtkStyleContext
#NAME: insert_interactive_at_cursor
#PARENT: Gtk.TextBuffer.insert_interactive_at_cursor
#COMMENT: whether text was actually inserted
#NAME: get_label
#PARENT: Gtk.ToolButton.get_label
#COMMENT: The label, or %NULL
#NAME: popup
#PARENT: Gtk.ComboBox
#COMMENT: The ::popup signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to popup the combo box list.

The default binding for this signal is Alt+Down.
#NAME: get_vhomogeneous
#PARENT: Gtk.Stack.get_vhomogeneous
#COMMENT: whether @stack is vertically homogeneous.
#NAME: buffer
#PARENT: Gtk.TextBufferClass.remove_tag.remove_tag.none
#COMMENT: a #GtkTextBuffer
#NAME: color
#PARENT: Gtk.SymbolicColor.resolve.gboolean
#COMMENT: a #GtkSymbolicColor
#NAME: cell-area-context
#PARENT: Gtk.CellView
#COMMENT: The #GtkCellAreaContext used to compute the geometry of the cell view.

A group of cell views can be assigned the same context in order to
ensure the sizes and cell alignments match across all the views with
the same context.

#GtkComboBox menus uses this to assign the same context to all cell views
in the menu items for a single menu (each submenu creates its own
context since the size of each submenu does not depend on parent
or sibling menus).

since 3.0
#NAME: register_deserialize_format
#PARENT: Gtk.TextBuffer
#COMMENT: This function registers a rich text deserialization @function along with
its @mime_type with the passed @buffer.
#NAME: window
#PARENT: Gtk.Window.get_focus.Widget
#COMMENT: a #GtkWindow
#NAME: cell_view
#PARENT: Gtk.CellView.set_background_rgba.none
#COMMENT: a #GtkCellView
#NAME: max-length
#PARENT: Gtk.EntryBuffer
#COMMENT: The maximum length (in characters) of the text in the buffer.
#NAME: get_value
#PARENT: Gtk.Range.get_value
#COMMENT: current value of the range.
#NAME: label
#PARENT: Gtk.ToggleActionEntry
#COMMENT: The label for the action. This field should typically be marked
 for translation, see gtk_action_group_set_translation_domain().
#NAME: yalign
#PARENT: Gtk.CellRenderer.get_alignment.none
#COMMENT: location to fill in with the y alignment of the cell, or %NULL
#NAME: get_id
#PARENT: Gtk.ApplicationWindow.get_id
#COMMENT: the unique ID for @window, or `0` if the window
  has not yet been added to a #GtkApplication
#NAME: get_current_folder
#PARENT: Gtk.FileChooser.get_current_folder
#COMMENT: the full path of the current folder,
or %NULL if the current path cannot be represented as a local
filename.  Free with g_free().  This function will also return
%NULL if the file chooser was unable to load the last folder that
was requested from it; for example, as would be for calling
gtk_file_chooser_set_current_folder() on a nonexistent folder.
#NAME: bar
#PARENT: Gtk.HeaderBar.pack_start.none
#COMMENT: A #GtkHeaderBar
#NAME: size
#PARENT: Gtk.Image.get_stock.none
#COMMENT: place to store a stock icon
    size, or %NULL
#NAME: new_from_stock
#PARENT: Gtk.ToolButton.new_from_stock
#COMMENT: A new #GtkToolButton
#NAME: set_has_depth_buffer
#PARENT: Gtk.GLArea
#COMMENT: If @has_depth_buffer is %TRUE the widget will allocate and
enable a depth buffer for the target framebuffer. Otherwise
there will be none.
#NAME: vertical
#PARENT: Gtk.Orientation
#COMMENT: The element is in vertical orientation.
#NAME: targets_include_image
#PARENT: Gtk.SelectionData
#COMMENT: Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide a #GdkPixbuf.
#NAME: get_homogeneous
#PARENT: Gtk.FlowBox.get_homogeneous
#COMMENT: %TRUE if the box is homogeneous.
#NAME: clear_func
#PARENT: Gtk.Clipboard.set_with_owner.gboolean
#COMMENT: when the clipboard contents are set again,
    this function will be called, and @get_func will not be subsequently
    called
#NAME: get_action_name
#PARENT: Gtk.Actionable.get_action_name
#COMMENT: the action name, or %NULL if none is set
#NAME: new
#PARENT: Gtk.EventBox
#COMMENT: Creates a new #GtkEventBox.
#NAME: iter
#PARENT: Gtk.TreeModel.row_has_child_toggled.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the changed row
#NAME: tree_view
#PARENT: Gtk.TreeView.insert_column_with_attributes.gint
#COMMENT: A #GtkTreeView
#NAME: adjustment
#PARENT: Gtk.Adjustment.set_page_increment.none
#COMMENT: a #GtkAdjustment
#NAME: child
#PARENT: Gtk.Notebook.set_menu_label.none
#COMMENT: the child widget
#NAME: to_file
#PARENT: Gtk.PageSetup
#COMMENT: This function saves the information from @setup to @file_name.
#NAME: vscroll-policy
#PARENT: Gtk.Scrollable
#COMMENT: Determines whether vertical scrolling should start once the scrollable
widget is allocated less than its minimum height or less than its natural height.
#NAME: get_min_width
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns the minimum width in pixels of the @tree_column, or -1 if no minimum
width is set.
#NAME: container
#PARENT: Gtk.Container.set_reallocate_redraws.none
#COMMENT: a #GtkContainer
#NAME: set_direction
#PARENT: Gtk.IconSource
#COMMENT: Sets the text direction this icon source is intended to be used
with.

Setting the text direction on an icon source makes no difference
if the text direction is wildcarded. Therefore, you should usually
call gtk_icon_source_set_direction_wildcarded() to un-wildcard it
in addition to calling this function.
#NAME: self
#PARENT: Gtk.LevelBar.get_mode.LevelBarMode
#COMMENT: a #GtkLevelBar
#NAME: get_editable
#PARENT: Gtk.Editable
#COMMENT: Retrieves whether @editable is editable. See
gtk_editable_set_editable().
#NAME: context
#PARENT: Gtk.PrintOperation.draw-page.none
#COMMENT: the #GtkPrintContext for the current operation
#NAME: n_formats
#PARENT: Gtk.TextBuffer.get_serialize_formats.Gdk.Atom
#COMMENT: return location for the number of formats
#NAME: length
#PARENT: Gtk.TreePath.new_from_indicesv.TreePath
#COMMENT: length of @indices array
#NAME: disconnect-proxy
#PARENT: Gtk.UIManager
#COMMENT: The ::disconnect-proxy signal is emitted after disconnecting a proxy
from an action in the group.
#NAME: drag_dest_set_target_list
#PARENT: Gtk.Widget
#COMMENT: Sets the target types that this widget can accept from drag-and-drop.
The widget must first be made into a drag destination with
gtk_drag_dest_set().
#NAME: proximity-out-event
#PARENT: Gtk.Widget.proximity-out-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: get_show_connect_to_server
#PARENT: Gtk.PlacesSidebar.get_show_connect_to_server
#COMMENT: %TRUE if the sidebar will display a “Connect to Server” item.
#NAME: after
#PARENT: Gtk.TreeViewDropPosition
#COMMENT: dropped row is inserted after
#NAME: widget
#PARENT: Gtk.Widget.get_style.Style
#COMMENT: a #GtkWidget
#NAME: page_setup
#PARENT: Gtk.print_run_page_setup_dialog_async.none
#COMMENT: an existing #GtkPageSetup, or %NULL
#NAME: calendar
#PARENT: Gtk.CalendarDetailFunc.utf8
#COMMENT: a #GtkCalendar.
#NAME: byte_index
#PARENT: Gtk.TextBuffer.get_iter_at_line_index.none
#COMMENT: byte index from start of line
#NAME: iter
#PARENT: Gtk.TextIter.backward_visible_cursor_positions.gboolean
#COMMENT: a #GtkTextIter
#NAME: can_focus
#PARENT: Gtk.Widget.set_can_focus.none
#COMMENT: whether or not @widget can own the input focus.
#NAME: get_screen
#PARENT: Gtk.Window.get_screen
#COMMENT: a #GdkScreen.
#NAME: set_update_policy
#PARENT: Gtk.SpinButton
#COMMENT: Sets the update behavior of a spin button.
This determines whether the spin button is always updated
or only when a valid value is set.
#NAME: text_view
#PARENT: Gtk.TextView.get_editable.gboolean
#COMMENT: a #GtkTextView
#NAME: get_deletable
#PARENT: Gtk.Window.get_deletable
#COMMENT: %TRUE if the window has been set to have a close button
#NAME: selection_add_targets
#PARENT: Gtk
#COMMENT: Prepends a table of targets to the list of supported targets
for a given widget and selection.
#NAME: document
#PARENT: Gtk.CssSectionType
#COMMENT: The section describes a complete document.
  This section time is the only one where gtk_css_section_get_parent()
  might return %NULL.
#NAME: entry
#PARENT: Gtk.Entry.set_icon_from_gicon.none
#COMMENT: A #GtkEntry
#NAME: get_insert
#PARENT: Gtk.TextBuffer.get_insert
#COMMENT: insertion point mark
#NAME: event
#PARENT: Gtk.Widget.selection-request-event.gboolean
#COMMENT: the #GdkEventSelection which triggered
  this signal.
#NAME: get_filter
#PARENT: Gtk.RecentChooser
#COMMENT: Gets the #GtkRecentFilter object currently used by @chooser to affect
the display of the recently used resources.
#NAME: list
#PARENT: Gtk.TargetList.add_text_targets.none
#COMMENT: a #GtkTargetList
#NAME: is_ancestor
#PARENT: Gtk.TreeStore.is_ancestor
#COMMENT: %TRUE, if @iter is an ancestor of @descendant
#NAME: toggle
#PARENT: Gtk.CellRendererToggle.set_active.none
#COMMENT: a #GtkCellRendererToggle.
#NAME: set_transition_duration
#PARENT: Gtk.Stack
#COMMENT: Sets the duration that transitions between pages in @stack
will take.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_cell_data_func.none
#COMMENT: A #GtkTreeViewColumn
#NAME: title
#PARENT: Gtk.ColorSelectionDialog.new.Widget
#COMMENT: a string containing the title text for the dialog.
#NAME: copy
#PARENT: Gtk.IconSource.copy
#COMMENT: a new #GtkIconSource
#NAME: get_description
#PARENT: Gtk.RecentInfo.get_description
#COMMENT: the description of the resource. The returned string
  is owned by the recent manager, and should not be freed.
#NAME: purge_items
#PARENT: Gtk.RecentManager
#COMMENT: Purges every item from the recently used resources list.
#NAME: TranslateFunc
#PARENT: Gtk.TranslateFunc
#COMMENT: the translated message
#NAME: get_header_bar
#PARENT: Gtk.Dialog.get_header_bar
#COMMENT: the header bar
#NAME: remove_action
#PARENT: Gtk.ActionGroup
#COMMENT: Removes an action object from the action group.
#NAME: list_shortcuts
#PARENT: Gtk.PlacesSidebar
#COMMENT: Gets the list of shortcuts.
#NAME: lookup
#PARENT: Gtk.TextTagTable
#COMMENT: Look up a named tag.
#NAME: use_font
#PARENT: Gtk.FontButton.set_use_font.none
#COMMENT: If %TRUE, font name will be written using font chosen.
#NAME: setup
#PARENT: Gtk.PageSetup.set_left_margin.none
#COMMENT: a #GtkPageSetup
#NAME: filter
#PARENT: Gtk.RecentFilter.get_name.utf8
#COMMENT: a #GtkRecentFilter
#NAME: new
#PARENT: Gtk.SearchBar
#COMMENT: Creates a #GtkSearchBar. You will need to tell it about
which widget is going to be your text entry using
gtk_search_bar_connect_entry().
#NAME: buffer
#PARENT: Gtk.TextBuffer.register_serialize_format.Gdk.Atom
#COMMENT: a #GtkTextBuffer
#NAME: end
#PARENT: Gtk.TextView.extend-selection.gboolean
#COMMENT: where the selection should end
#NAME: deleted-text
#PARENT: Gtk.EntryBuffer
#COMMENT: This signal is emitted after text is deleted from the buffer.
#NAME: do_overwrite_confirmation
#PARENT: Gtk.FileChooser.set_do_overwrite_confirmation.none
#COMMENT: whether to confirm overwriting in save mode
#NAME: MICRO_VERSION
#PARENT: Gtk
#COMMENT: Like gtk_get_micro_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
#NAME: accepts_tab
#PARENT: Gtk.TextView.set_accepts_tab.none
#COMMENT: %TRUE if pressing the Tab key should insert a tab
   character, %FALSE, if pressing the Tab key should move the
   keyboard focus.
#NAME: ListBoxFilterFunc
#PARENT: Gtk
#COMMENT: Will be called whenever the row changes or is added and lets you control
if the row should be visible or not.
#NAME: get_expanded
#PARENT: Gtk.Expander.get_expanded
#COMMENT: the current state of the expander
#NAME: get_n_copies
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_N_COPIES.
#NAME: show-numbers
#PARENT: Gtk.RecentAction
#COMMENT: Whether the items should be displayed with a number.
#NAME: event
#PARENT: Gtk.TextTag.event
#COMMENT: %TRUE to stop other handlers from being invoked for the
event. %FALSE to propagate the event further.
#NAME: STOCK_DELETE
#PARENT: Gtk
#COMMENT: The “Delete” item and icon.
#NAME: text
#PARENT: Gtk.ComboBoxText.prepend.none
#COMMENT: a string
#NAME: targets
#PARENT: Gtk.Clipboard.set_can_store.none
#COMMENT: array containing
          information about which forms should be stored or %NULL
          to indicate that all forms should be stored.
#NAME: hide_on_delete
#PARENT: Gtk.Widget
#COMMENT: Utility function; intended to be connected to the #GtkWidget::delete-event
signal on a #GtkWindow. The function calls gtk_widget_hide() on its
argument, then returns %TRUE. If connected to ::delete-event, the
result is that clicking the close button for a window (on the
window frame, top right corner usually) will hide but not destroy
the window. By default, GTK+ destroys windows when ::delete-event
is received.
#NAME: select
#PARENT: Gtk.MenuItem
#COMMENT: Emits the #GtkMenuItem::select signal on the given item.
#NAME: selection-request-event
#PARENT: Gtk.Widget
#COMMENT: The ::selection-request-event signal will be emitted when
another client requests ownership of the selection owned by
the @widget's window.
#NAME: external
#PARENT: Gtk.PolicyType
#COMMENT: Don't show a scrollbar, but don't force the
 size to follow the content. This can be used e.g. to make multiple
 scrolled windows share a scrollbar. Since: 3.16
#NAME: table
#PARENT: Gtk.Table.set_col_spacings.none
#COMMENT: a #GtkTable.
#NAME: select_file
#PARENT: Gtk.FileChooser
#COMMENT: Selects the file referred to by @file. An internal function. See
_gtk_file_chooser_select_uri().
#NAME: get_model
#PARENT: Gtk.ComboBox.get_model
#COMMENT: A #GtkTreeModel which was passed
    during construction.
#NAME: translate_string
#PARENT: Gtk.ActionGroup
#COMMENT: Translates a string using the function set with
gtk_action_group_set_translate_func(). This
is mainly intended for language bindings.
#NAME: get_use_preview_label
#PARENT: Gtk.FileChooser.get_use_preview_label
#COMMENT: %TRUE if the file chooser is set to display a label with the
name of the previewed file, %FALSE otherwise.
#NAME: ModuleDisplayInitFunc
#PARENT: Gtk
#COMMENT: A multihead-aware GTK+ module may have a gtk_module_display_init() function
with this prototype. GTK+ calls this function for each opened display.
#NAME: socket_id
#PARENT: Gtk.Plug.construct.none
#COMMENT: the XID of the socket’s window.
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_hadjustment.Adjustment
#COMMENT: a #GtkScrolledWindow
#NAME: 
#PARENT: Gtk.CellArea.add_with_properties.none...
#COMMENT: a %NULL-terminated list of property names and values, starting
    with @first_prop_name
#NAME: none
#PARENT: Gtk.ArrowType
#COMMENT: No arrow. Since 2.10.
#NAME: new
#PARENT: Gtk.HScale.new
#COMMENT: a new #GtkHScale.
#NAME: button
#PARENT: Gtk.LockButton.set_permission.none
#COMMENT: a #GtkLockButton
#NAME: initial
#PARENT: Gtk.PrintStatus
#COMMENT: The printing has not started yet; this
    status is set initially, and while the print dialog is shown.
#NAME: chooser
#PARENT: Gtk.RecentChooser.set_show_icons.none
#COMMENT: a #GtkRecentChooser
#NAME: data
#PARENT: Gtk.ClipboardTextReceivedFunc.none
#COMMENT: the @user_data supplied to
  gtk_clipboard_request_text().
#NAME: focusable_widgets
#PARENT: Gtk.Container.set_focus_chain.none
#COMMENT: 
    the new focus chain
#NAME: angle
#PARENT: Gtk.Label
#COMMENT: The angle that the baseline of the label makes with the horizontal,
in degrees, measured counterclockwise. An angle of 90 reads from
from bottom to top, an angle of 270, from top to bottom. Ignored
if the label is selectable, wrapped, or ellipsized.
#NAME: get_pixels_below_lines
#PARENT: Gtk.TextView.get_pixels_below_lines
#COMMENT: default number of blank pixels below paragraphs
#NAME: new
#PARENT: Gtk.DrawingArea
#COMMENT: Creates a new drawing area.
#NAME: chooser
#PARENT: Gtk.FileChooser.set_preview_widget_active.none
#COMMENT: a #GtkFileChooser
#NAME: markup
#PARENT: Gtk.TextBuffer.insert_markup.none
#COMMENT: a nul-terminated UTF-8 string containing [Pango markup][PangoMarkupFormat]
#NAME: sort_column_id
#PARENT: Gtk.TreeSortable.set_sort_func.none
#COMMENT: the sort column id to set the function for
#NAME: column
#PARENT: Gtk.CellArea.attribute_connect.none
#COMMENT: the #GtkTreeModel column to fetch attribute values from
#NAME: pixel-size
#PARENT: Gtk.Image
#COMMENT: The "pixel-size" property can be used to specify a fixed size
overriding the #GtkImage:icon-size property for images of type
%GTK_IMAGE_ICON_NAME.
#NAME: x
#PARENT: Gtk.ToolItemGroup.get_drop_item.ToolItem
#COMMENT: the x position
#NAME: y
#PARENT: Gtk.ToolItemGroup.get_drop_item.ToolItem
#COMMENT: the y position
#NAME: get_margin_bottom
#PARENT: Gtk.Widget
#COMMENT: Gets the value of the #GtkWidget:margin-bottom property.
#NAME: get_index
#PARENT: Gtk.FlowBoxChild
#COMMENT: Gets the current index of the @child in its #GtkFlowBox container.
#NAME: buffer
#PARENT: Gtk.TextBuffer.insert_pixbuf.none
#COMMENT: a #GtkTextBuffer
#NAME: iter
#PARENT: Gtk.TextBuffer.insert_pixbuf.none
#COMMENT: location to insert the pixbuf
#NAME: get_transition_duration
#PARENT: Gtk.Revealer
#COMMENT: Returns the amount of time (in milliseconds) that
transitions will take.
#NAME: new
#PARENT: Gtk.ToggleButton
#COMMENT: Creates a new toggle button. A widget should be packed into the button, as in gtk_button_new().
#NAME: gesture
#PARENT: Gtk.Gesture.set_sequence_state.gboolean
#COMMENT: a #GtkGesture
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.get_show_enter_location.gboolean
#COMMENT: a places sidebar
#NAME: text
#PARENT: Gtk.TextBuffer.insert_at_cursor.none
#COMMENT: text in UTF-8 format
#NAME: foreach
#PARENT: Gtk.CellArea
#COMMENT: Calls @callback for every #GtkCellRenderer in @area.
#NAME: show-hidden
#PARENT: Gtk.FileChooserWidget
#COMMENT: The ::show-hidden signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

This is used to make the file chooser display hidden files.

The default binding for this signal is `Control + H`.
#NAME: accel_path
#PARENT: Gtk.Action.set_accel_path.none
#COMMENT: the accelerator path
#NAME: register
#PARENT: Gtk.IconSize.register
#COMMENT: integer value representing the size
#NAME: style
#PARENT: Gtk.IconSet.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a #GtkStyle associated with @widget, or %NULL
#NAME: sortable
#PARENT: Gtk.TreeSortable.set_default_sort_func.none
#COMMENT: A #GtkTreeSortable
#NAME: get_binary_age
#PARENT: Gtk
#COMMENT: Returns the binary age as passed to `libtool`
when building the GTK+ library the process is running against.
If `libtool` means nothing to you, don't
worry about it.
#NAME: action_group
#PARENT: Gtk.ActionGroup.get_sensitive.gboolean
#COMMENT: the action group
#NAME: buttons
#PARENT: Gtk.MessageDialog.new_with_markup.Widget
#COMMENT: set of buttons to use
#NAME: settings
#PARENT: Gtk.PrintSettings.set_media_type.none
#COMMENT: a #GtkPrintSettings
#NAME: STYLE_CLASS_SCROLLBARS_JUNCTION
#PARENT: Gtk
#COMMENT: A CSS class to match the junction area between an horizontal
and vertical scrollbar, when they’re both shown.

This is used in #GtkScrolledWindow.
#NAME: clipboard
#PARENT: Gtk.Clipboard.set_can_store.none
#COMMENT: a #GtkClipboard
#NAME: shadow_type
#PARENT: Gtk.paint_handle.none
#COMMENT: type of shadow to draw
#NAME: box
#PARENT: Gtk.FlowBox.get_max_children_per_line.guint
#COMMENT: a #GtkFlowBox
#NAME: height_for_width
#PARENT: Gtk.SizeRequestMode
#COMMENT: Prefer height-for-width geometry management
#NAME: create_menu_item
#PARENT: Gtk.Action
#COMMENT: Creates a menu item widget that proxies for the given action.
#NAME: rtl
#PARENT: Gtk.PackDirection
#COMMENT: Widgets are packed right-to-left
#NAME: location
#PARENT: Gtk.TextBuffer.mark-set.none
#COMMENT: The location of @mark in @textbuffer
#NAME: user_data2
#PARENT: Gtk.TreeIter
#COMMENT: model-specific data
#NAME: starts_line
#PARENT: Gtk.TextIter
#COMMENT: Returns %TRUE if @iter begins a paragraph,
i.e. if gtk_text_iter_get_line_offset() would return 0.
However this function is potentially more efficient than
gtk_text_iter_get_line_offset() because it doesn’t have to compute
the offset, it just has to see whether it’s 0.
#NAME: user_data3
#PARENT: Gtk.TreeIter
#COMMENT: model-specific data
#NAME: move_before
#PARENT: Gtk.TreeStore
#COMMENT: Moves @iter in @tree_store to the position before @position. @iter and
@position should be in the same level. Note that this function only
works with unsorted stores. If @position is %NULL, @iter will be
moved to the end of the level.
#NAME: func
#PARENT: Gtk.TreeView.insert_column_with_data_func.gint
#COMMENT: function to set attributes of cell renderer
#NAME: page
#PARENT: Gtk.Assistant.set_page_title.none
#COMMENT: a page of @assistant
#NAME: column-span-column
#PARENT: Gtk.ComboBox
#COMMENT: If this is set to a non-negative value, it must be the index of a column
of type %G_TYPE_INT in the model.

The values of that column are used to determine how many columns a value
in the list will span.
#NAME: show-style
#PARENT: Gtk.FontButton
#COMMENT: If this property is set to %TRUE, the name of the selected font style
will be shown in the label. For a more WYSIWYG way to show the selected
style, see the ::use-font property.
#NAME: load
#PARENT: Gtk.ThemingEngine
#COMMENT: Loads and initializes a theming engine module from the
standard directories.
#NAME: length
#PARENT: Gtk.Builder.new_from_string.Builder
#COMMENT: the length of @string, or -1
#NAME: button
#PARENT: Gtk.Button.set_relief.none
#COMMENT: The #GtkButton you want to set relief styles of
#NAME: actions
#PARENT: Gtk.Widget.drag_dest_set.none
#COMMENT: a bitmask of possible actions for a drop onto this @widget.
#NAME: window
#PARENT: Gtk.Window.set_gravity.none
#COMMENT: a #GtkWindow
#NAME: paint_layout
#PARENT: Gtk
#COMMENT: Draws a layout on @cr using the given parameters.
#NAME: name
#PARENT: Gtk.TextBuffer.get_mark.TextMark
#COMMENT: a mark name
#NAME: get_vadjustment
#PARENT: Gtk.ToolPalette.get_vadjustment
#COMMENT: the vertical adjustment of @palette
#NAME: tree_view
#PARENT: Gtk.TreeView.set_show_expanders.none
#COMMENT: a #GtkTreeView
#NAME: type
#PARENT: Gtk.Viewport.set_shadow_type.none
#COMMENT: the new shadow type.
#NAME: new
#PARENT: Gtk.ColorButton
#COMMENT: Creates a new color button.

This returns a widget in the form of a small button containing
a swatch representing the current selected color. When the button
is clicked, a color-selection dialog will open, allowing the user
to select a color. The swatch will be updated to reflect the new
color when the user finishes.
#NAME: row
#PARENT: Gtk.ListBoxRow.set_header.none
#COMMENT: a #GtkListBoxRow
#NAME: group_name
#PARENT: Gtk.PaperSize.to_key_file.none
#COMMENT: the group to add the settings to in @key_file
#NAME: window
#PARENT: Gtk.IMContext.set_client_window.none
#COMMENT: the client window. This may be %NULL to indicate
          that the previous client window no longer exists.
#NAME: file_name
#PARENT: Gtk.PageSetup.to_file.gboolean
#COMMENT: the file to save to
#NAME: menu
#PARENT: Gtk.RecentChooserMenu.set_show_numbers.none
#COMMENT: a #GtkRecentChooserMenu
#NAME: accel-path
#PARENT: Gtk.Menu
#COMMENT: An accel path used to conveniently construct accel paths of child items.
#NAME: load_file
#PARENT: Gtk.PrintSettings.load_file
#COMMENT: %TRUE on success
#NAME: assistant
#PARENT: Gtk.Assistant.previous_page.none
#COMMENT: a #GtkAssistant
#NAME: data
#PARENT: Gtk.CellAllocCallback.gboolean
#COMMENT: user-supplied data
#NAME: binding_args
#PARENT: Gtk.BindingEntry.add_signall.none
#COMMENT: 
    list of #GtkBindingArg signal arguments
#NAME: new_from_file
#PARENT: Gtk.Image
#COMMENT: Creates a new #GtkImage displaying the file @filename. If the file
isn’t found or can’t be loaded, the resulting #GtkImage will
display a “broken image” icon. This function never returns %NULL,
it always returns a valid #GtkImage widget.

If the file contains an animation, the image will contain an
animation.

If you need to detect failures to load the file, use
gdk_pixbuf_new_from_file() to load the file yourself, then create
the #GtkImage from the pixbuf. (Or for animations, use
gdk_pixbuf_animation_new_from_file()).

The storage type (gtk_image_get_storage_type()) of the returned
image is not defined, it will be whatever is appropriate for
displaying the file.
#NAME: wrapped
#PARENT: Gtk.SpinButton
#COMMENT: The ::wrapped signal is emitted right after the spinbutton wraps
from its maximum to minimum value or vice-versa.
#NAME: state_type
#PARENT: Gtk.paint_focus.none
#COMMENT: a state
#NAME: add_image_targets
#PARENT: Gtk.TargetList
#COMMENT: Appends the image targets supported by #GtkSelectionData to
the target list. All targets are added with the same @info.
#NAME: button
#PARENT: Gtk.test_spin_button_click.gboolean
#COMMENT: Number of the pointer button for the event, usually 1, 2 or 3.
#NAME: text
#PARENT: Gtk.RcFlags
#COMMENT: Deprecated
#NAME: load_from_resource
#PARENT: Gtk.CssProvider
#COMMENT: Loads the data contained in the resource at @resource_path into
the #GtkCssProvider, clearing any previously loaded information.

To track errors while loading CSS, connect to the
#GtkCssProvider::parsing-error signal.
#NAME: get_named
#PARENT: Gtk.CssProvider.get_named
#COMMENT: a #GtkCssProvider with the theme loaded.
    This memory is owned by GTK+, and you must not free it.
#NAME: height
#PARENT: Gtk.CellAreaContextClass.allocate.allocate.none
#COMMENT: the allocated height for all #GtkTreeModel rows rendered
    with @context, or -1.
#NAME: new
#PARENT: Gtk.TearoffMenuItem.new
#COMMENT: a new #GtkTearoffMenuItem.
#NAME: STOCK_JUSTIFY_LEFT
#PARENT: Gtk
#COMMENT: The “Left” item and icon.
#NAME: widget
#PARENT: Gtk.Widget.destroy.none
#COMMENT: a #GtkWidget
#NAME: get_last_updated_sequence
#PARENT: Gtk.Gesture.get_last_updated_sequence
#COMMENT: The last updated sequence
#NAME: STYLE_CLASS_INLINE_TOOLBAR
#PARENT: Gtk
#COMMENT: A CSS class to match inline toolbars.

This should be used for toolbars that are used to hold
actions below lists, as seen e.g. in the left pane of the
file chooser.
#NAME: TextDirection
#PARENT: Gtk
#COMMENT: Reading directions for text.
#NAME: tag
#PARENT: Gtk.TextIter.forward_to_tag_toggle.gboolean
#COMMENT: a #GtkTextTag, or %NULL
#NAME: detail
#PARENT: Gtk.IconSet.render_icon.GdkPixbuf.Pixbuf
#COMMENT: detail to pass to the theme engine, or %NULL.
         Note that passing a detail of anything but %NULL
         will disable caching.
#NAME: container
#PARENT: Gtk.Container.child_set_valist.none
#COMMENT: a #GtkContainer
#NAME: name
#PARENT: Gtk.TextBuffer.delete_mark_by_name.none
#COMMENT: name of a mark in @buffer
#NAME: query-tooltip
#PARENT: Gtk.Widget.query-tooltip
#COMMENT: %TRUE if @tooltip should be shown right now, %FALSE otherwise.
#NAME: test_slider_get_value
#PARENT: Gtk
#COMMENT: Retrive the literal adjustment value for GtkRange based
widgets and spin buttons. Note that the value returned by
this function is anything between the lower and upper bounds
of the adjustment belonging to @widget, and is not a percentage
as passed in to gtk_test_slider_set_perc().
#NAME: text
#PARENT: Gtk.ComboBoxText.append_text.none
#COMMENT: A string
#NAME: HBox
#PARENT: Gtk
#COMMENT: #GtkHBox is a container that organizes child widgets into a single row.

Use the #GtkBox packing interface to determine the arrangement,
spacing, width, and alignment of #GtkHBox children.

All children are allocated the same height.

GtkHBox has been deprecated. You can use #GtkBox instead, which is a
very quick and easy change. If you have derived your own classes from
GtkHBox, you can simply change the inheritance to derive directly
from #GtkBox. No further changes are needed, since the default
value of the #GtkOrientable:orientation property is
%GTK_ORIENTATION_HORIZONTAL.
If you don’t need first-child or last-child styling, and want your code
to be future-proof, the recommendation is to switch to #GtkGrid instead
of nested boxes. For more information about migrating to #GtkGrid,
see [Migrating from other containers to GtkGrid][gtk-migrating-GtkGrid].
#NAME: title
#PARENT: Gtk.Assistant.set_page_title.none
#COMMENT: the new title for @page
#NAME: n_targets
#PARENT: Gtk.target_table_free.none
#COMMENT: the number of entries in the array
#NAME: unlock
#PARENT: Gtk.AccelGroup
#COMMENT: Undoes the last call to gtk_accel_group_lock() on this @accel_group.
#NAME: get_paper_size
#PARENT: Gtk.PageSetup.get_paper_size
#COMMENT: the paper size
#NAME: proximity-in-event
#PARENT: Gtk.Widget.proximity-in-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: on_change
#PARENT: Gtk.ActionGroup.add_radio_actions_full.none
#COMMENT: the callback to connect to the changed signal
#NAME: action_group
#PARENT: Gtk.ActionGroup.get_name.utf8
#COMMENT: the action group
#NAME: accel_group
#PARENT: Gtk.AccelGroup.query.AccelGroupEntry
#COMMENT: the accelerator group to query
#NAME: path
#PARENT: Gtk.WidgetPath.iter_add_region.none
#COMMENT: a #GtkWidgetPath
#NAME: action_group
#PARENT: Gtk.ActionGroup.add_action.none
#COMMENT: the action group
#NAME: new
#PARENT: Gtk.Fixed
#COMMENT: Creates a new #GtkFixed.
#NAME: column
#PARENT: Gtk.IconView.set_markup_column.none
#COMMENT: A column in the currently used model, or -1 to display no text
#NAME: invisible
#PARENT: Gtk.TextTag
#COMMENT: Whether this text is hidden.

Note that there may still be problems with the support for invisible
text, in particular when navigating programmatically inside a buffer
containing invisible segments.
#NAME: get_activate_on_single_click
#PARENT: Gtk.TreeView
#COMMENT: Gets the setting set by gtk_tree_view_set_activate_on_single_click().
#NAME: tree_store
#PARENT: Gtk.TreeStore.set.none
#COMMENT: A #GtkTreeStore
#NAME: GestureSwipe
#PARENT: Gtk
#COMMENT: #GtkGestureSwipe is a #GtkGesture implementation able to recognize
swipes, after a press/move/.../move/release sequence happens, the
#GtkGestureSwipe::swipe signal will be emitted, providing the velocity
and directionality of the sequence at the time it was lifted.

If the velocity is desired in intermediate points,
gtk_gesture_swipe_get_velocity() can be called on eg. a
#GtkGesture::update handler.

All velocities are reported in pixels/sec units.
#NAME: get_visible_line_offset
#PARENT: Gtk.TextIter.get_visible_line_offset
#COMMENT: offset in visible characters from the start of the line
#NAME: stock_id
#PARENT: Gtk.ToolButton.new_from_stock.ToolItem
#COMMENT: the name of the stock item
#NAME: device
#PARENT: Gtk.Widget.get_device_events.Gdk.EventMask
#COMMENT: a #GdkDevice
#NAME: set_transition_duration
#PARENT: Gtk.Revealer
#COMMENT: Sets the duration that transitions will take.
#NAME: tree_model
#PARENT: Gtk.CellArea.apply_attributes.none
#COMMENT: the #GtkTreeModel to pull values from
#NAME: copy
#PARENT: Gtk.Requisition
#COMMENT: Copies a #GtkRequisition.
#NAME: style
#PARENT: Gtk.paint_focus.none
#COMMENT: a #GtkStyle
#NAME: get_label
#PARENT: Gtk.NumerableIcon
#COMMENT: Returns the currently displayed label of the icon, or %NULL.
#NAME: desktop-folder
#PARENT: Gtk.FileChooserWidget
#COMMENT: The ::desktop-folder signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

This is used to make the file chooser show the user's Desktop
folder in the file list.

The default binding for this signal is `Alt + D`.
#NAME: contains
#PARENT: Gtk.RecentFilterInfo
#COMMENT: #GtkRecentFilterFlags to indicate which fields are set.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_tooltip_row.none
#COMMENT: a #GtkTreeView
#NAME: class_path
#PARENT: Gtk.Widget
#COMMENT: Same as gtk_widget_path(), but always uses the name of a widget’s type,
never uses a custom name set with gtk_widget_set_name().
#NAME: get_bool
#PARENT: Gtk.PrintSettings
#COMMENT: Returns the boolean represented by the value
that is associated with @key.

The string “true” represents %TRUE, any other
string %FALSE.
#NAME: text_view
#PARENT: Gtk.TextView.get_visible_rect.none
#COMMENT: a #GtkTextView
#NAME: data
#PARENT: Gtk.FlowBox.selected_foreach.none
#COMMENT: user data to pass to the function
#NAME: column
#PARENT: Gtk.TreeView.get_background_area.none
#COMMENT: a #GtkTreeViewColumn for the column, or %NULL to get only vertical coordiantes
#NAME: closure
#PARENT: Gtk.AccelGroup.connect_by_path.none
#COMMENT: closure to be executed upon accelerator activation
#NAME: activate-on-single-click
#PARENT: Gtk.FlowBox
#COMMENT: Determines whether children can be activated with a single
click, or require a double-click.
#NAME: get_selection_bounds
#PARENT: Gtk.Label.get_selection_bounds
#COMMENT: %TRUE if selection is non-empty
#NAME: window
#PARENT: Gtk.Window.set_title.none
#COMMENT: a #GtkWindow
#NAME: match-selected
#PARENT: Gtk.EntryCompletion.match-selected
#COMMENT: %TRUE if the signal has been handled
#NAME: op
#PARENT: Gtk.PrintOperation.set_unit.none
#COMMENT: a #GtkPrintOperation
#NAME: add_drag_dest
#PARENT: Gtk.ToolPalette
#COMMENT: Sets @palette as drag source (see gtk_tool_palette_set_drag_source())
and sets @widget as a drag destination for drags from @palette.
See gtk_drag_dest_set().
#NAME: get_realized
#PARENT: Gtk.Widget.get_realized
#COMMENT: %TRUE if @widget is realized, %FALSE otherwise
#NAME: button
#PARENT: Gtk.Window.begin_move_drag.none
#COMMENT: mouse button that initiated the drag
#NAME: current-page
#PARENT: Gtk.PrintOperation
#COMMENT: The current page in the document.

If this is set before gtk_print_operation_run(),
the user will be able to select to print only the current page.

Note that this only makes sense for pre-paginated documents.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_from_gicon.none
#COMMENT: a #GtkStatusIcon
#NAME: convert_iter_to_child_iter
#PARENT: Gtk.TreeModelFilter
#COMMENT: Sets @child_iter to point to the row pointed to by @filter_iter.
#NAME: user_data
#PARENT: Gtk.Clipboard.set_with_data.gboolean
#COMMENT: user data to pass to @get_func and @clear_func.
#NAME: bar
#PARENT: Gtk.SearchBar.get_show_close_button.gboolean
#COMMENT: a #GtkSearchBar
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_use_drag_window.gboolean
#COMMENT: a #GtkToolItem
#NAME: append_with_siblings
#PARENT: Gtk.WidgetPath
#COMMENT: Appends a widget type with all its siblings to the widget hierarchy
represented by @path. Using this function instead of
gtk_widget_path_append_type() will allow the CSS theming to use
sibling matches in selectors and apply :nth-child() pseudo classes.
In turn, it requires a lot more care in widget implementations as
widgets need to make sure to call gtk_widget_reset_style() on all
involved widgets when the @siblings path changes.
#NAME: callback_data
#PARENT: Gtk.CellAreaClass.foreach_alloc.foreach_alloc.none
#COMMENT: user provided data pointer
#NAME: install_style_property
#PARENT: Gtk.WidgetClass
#COMMENT: Installs a style property on a widget class. The parser for the
style property is determined by the value type of @pspec.
#NAME: ActionBar
#PARENT: Gtk
#COMMENT: GtkActionBar is designed to present contextual actions. It is
expected to be displayed below the content and expand horizontally
to fill the area.

It allows placing children at the start or the end. In addition, it
contains an internal centered box which is centered with respect to
the full width of the box, even if the children at either side take
up different amounts of space.
#NAME: size
#PARENT: Gtk.IconTheme.lookup_by_gicon.IconInfo
#COMMENT: desired icon size
#NAME: col_align
#PARENT: Gtk.IconView.scroll_to_path.none
#COMMENT: The horizontal alignment of the item specified by @path.
#NAME: get_accel_path
#PARENT: Gtk.MenuItem
#COMMENT: Retrieve the accelerator path that was previously set on @menu_item.

See gtk_menu_item_set_accel_path() for details.
#NAME: thaw_child_notify
#PARENT: Gtk.Widget
#COMMENT: Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
This causes all queued #GtkWidget::child-notify signals on @widget to be
emitted.
#NAME: widget
#PARENT: Gtk.Box.set_center_widget.none
#COMMENT: the widget to center
#NAME: font_desc
#PARENT: Gtk.RcStyle
#COMMENT: A #PangoFontDescription
#NAME: window-added
#PARENT: Gtk.Application
#COMMENT: Emitted when a #GtkWindow is added to @application through
gtk_application_add_window().
#NAME: chooser
#PARENT: Gtk.ColorChooser.set_use_alpha.none
#COMMENT: a #GtkColorChooser
#NAME: icon_view
#PARENT: Gtk.IconView.item_activated.none
#COMMENT: A #GtkIconView
#NAME: activate-cursor-item
#PARENT: Gtk.IconView
#COMMENT: A [keybinding signal][GtkBindingSignal]
which gets emitted when the user activates the currently
focused item.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control activation
programmatically.

The default bindings for this signal are Space, Return and Enter.
#NAME: icon_view
#PARENT: Gtk.IconViewClass.item_activated.item_activated.none
#COMMENT: A #GtkIconView
#NAME: text_index
#PARENT: Gtk.Entry.text_index_to_layout_index.gint
#COMMENT: byte index into the entry contents
#NAME: spacing
#PARENT: Gtk.IconView.set_spacing.none
#COMMENT: the spacing
#NAME: source
#PARENT: Gtk.Style.render_icon.GdkPixbuf.Pixbuf
#COMMENT: the #GtkIconSource specifying the icon to render
#NAME: window
#PARENT: Gtk.Window.set_focus_visible.none
#COMMENT: a #GtkWindow
#NAME: get_minor_version
#PARENT: Gtk.get_minor_version
#COMMENT: the minor version number of the GTK+ library
#NAME: xalign
#PARENT: Gtk.CellRenderer.set_alignment.none
#COMMENT: the x alignment of the cell renderer
#NAME: GestureMultiPress
#PARENT: Gtk
#COMMENT: #GtkGestureMultiPress is a #GtkGesture implementation able to recognize
multiple clicks on a nearby zone, which can be listened for through the
#GtkGestureMultiPress::pressed signal. Whenever time or distance between
clicks exceed the GTK+ defaults, #GtkGestureMultiPress::stopped is emitted,
and the click counter is reset.

Callers may also restrict the area that is considered valid for a >1
touch/button press through gtk_gesture_multi_press_set_area(), so any
click happening outside that area is considered to be a first click of
its own.
#NAME: widget
#PARENT: Gtk.ContainerClass.add.add.none
#COMMENT: a widget to be placed inside @container
#NAME: input_shape_combine_region
#PARENT: Gtk.Widget
#COMMENT: Sets an input shape for this widget’s GDK window. This allows for
windows which react to mouse click in a nonrectangular region, see
gdk_window_input_shape_combine_region() for more information.
#NAME: icon_info
#PARENT: Gtk.IconInfo.get_embedded_rect.gboolean
#COMMENT: a #GtkIconInfo
#NAME: actions
#PARENT: Gtk.IconView.enable_model_drag_dest.none
#COMMENT: the bitmask of possible actions for a drag to this
   widget
#NAME: widget
#PARENT: Gtk.Widget.activate.gboolean
#COMMENT: a #GtkWidget that’s activatable
#NAME: response_id
#PARENT: Gtk.Dialog.add_button.Widget
#COMMENT: response ID for the button
#NAME: always
#PARENT: Gtk.PolicyType
#COMMENT: The scrollbar is always visible. The view size is
 independent of the content.
#NAME: widget
#PARENT: Gtk.Widget.get_frame_clock.Gdk.FrameClock
#COMMENT: a #GtkWidget
#NAME: insert_text
#PARENT: Gtk.EntryBufferClass.insert_text.insert_text
#COMMENT: The number of characters actually inserted.
#NAME: get_nth_item
#PARENT: Gtk.Toolbar.get_nth_item
#COMMENT: The @n'th #GtkToolItem on @toolbar,
    or %NULL if there isn’t an @n'th item.
#NAME: editable
#PARENT: Gtk.EditableInterface.get_position.get_position.gint
#COMMENT: a #GtkEditable
#NAME: new
#PARENT: Gtk.Table.new
#COMMENT: A pointer to the newly created table widget.
#NAME: list_toplevels
#PARENT: Gtk.Window
#COMMENT: Returns a list of all existing toplevel windows. The widgets
in the list are not individually referenced. If you want
to iterate through the list and perform actions involving
callbacks that might destroy the widgets, you must call
`g_list_foreach (result, (GFunc)g_object_ref, NULL)` first, and
then unref all the widgets afterwards.
#NAME: height
#PARENT: Gtk.CellAreaContext.get_preferred_width_for_height.none
#COMMENT: a proposed height for allocation
#NAME: context
#PARENT: Gtk.CellArea.foreach_alloc.none
#COMMENT: the #GtkCellAreaContext for this row of data.
#NAME: cursor_index
#PARENT: Gtk.IMContextClass.set_surrounding.set_surrounding.none
#COMMENT: the byte index of the insertion cursor within @text.
#NAME: add_rich_text_targets
#PARENT: Gtk.TargetList
#COMMENT: Appends the rich text targets registered with
gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_deserialize_format() to the target list. All
targets are added with the same @info.
#NAME: get_groups
#PARENT: Gtk.RecentInfo
#COMMENT: Returns all groups registered for the recently used item @info.
The array of returned group names will be %NULL terminated, so
length might optionally be %NULL.
#NAME: enable_model_drag_source
#PARENT: Gtk.IconView
#COMMENT: Turns @icon_view into a drag source for automatic DND. Calling this
method sets #GtkIconView:reorderable to %FALSE.
#NAME: is_finished
#PARENT: Gtk.PrintOperation.is_finished
#COMMENT: %TRUE, if the print operation is finished.
#NAME: stock_id
#PARENT: Gtk.RecentAction.new_for_manager.Action
#COMMENT: the stock icon to display in widgets representing
  the action, or %NULL
#NAME: set_state
#PARENT: Gtk.Switch
#COMMENT: Sets the underlying state of the #GtkSwitch.

Normally, this is the same as #GtkSwitch:active, unless the switch
is set up for delayed state changes. This function is typically
called from a #GtkSwitch::state-set signal handler.

See #GtkSwitch::state-set for details.
#NAME: state
#PARENT: Gtk.rc_parse_state.guint
#COMMENT: A pointer to a #GtkStateType variable in which to
 store the result.
#NAME: parent
#PARENT: Gtk.MountOperation.new.Gio.MountOperation
#COMMENT: transient parent of the window, or %NULL
#NAME: get_display_options
#PARENT: Gtk.Calendar.get_display_options
#COMMENT: the display options.
#NAME: setting
#PARENT: Gtk.IconSource.set_size_wildcarded.none
#COMMENT: %TRUE to wildcard the widget state
#NAME: shell
#PARENT: Gtk.ToolShellIface.get_relief_style.get_relief_style.ReliefStyle
#COMMENT: a #GtkToolShell
#NAME: setting
#PARENT: Gtk.Window.set_urgency_hint.none
#COMMENT: %TRUE to mark this window as urgent
#NAME: application
#PARENT: Gtk.Builder.set_application.none
#COMMENT: a #GtkApplication
#NAME: set_alignment
#PARENT: Gtk.Misc
#COMMENT: Sets the alignment of the widget.
#NAME: get_stock
#PARENT: Gtk.StatusIcon.get_stock
#COMMENT: stock id of the displayed stock icon,
  or %NULL if the image is empty.
#NAME: scroll_animations
#PARENT: Gtk.StyleContext
#COMMENT: This function is analogous to gdk_window_scroll(), and
should be called together with it so the invalidation
areas for any ongoing animation are scrolled together
with it.
#NAME: get_create_folders
#PARENT: Gtk.FileChooser
#COMMENT: Gets whether file choser will offer to create new folders.
See gtk_file_chooser_set_create_folders().
#NAME: timeout_expired
#PARENT: Gtk.DragResult
#COMMENT: The drag operation timed out.
#NAME: user_data_free_func
#PARENT: Gtk.ListBox.bind_model.none
#COMMENT: function for freeing @user_data
#NAME: widget
#PARENT: Gtk.CellRendererClass.get_size.get_size.none
#COMMENT: the widget the renderer is rendering to
#NAME: name
#PARENT: Gtk.Buildable.construct_child.GObject.Object
#COMMENT: name of child to construct
#NAME: add_entry
#PARENT: Gtk.AccelMap
#COMMENT: Registers a new accelerator with the global accelerator map.
This function should only be called once per @accel_path
with the canonical @accel_key and @accel_mods for this path.
To change the accelerator during runtime programatically, use
gtk_accel_map_change_entry().

Set @accel_key and @accel_mods to 0 to request a removal of
the accelerator.

Note that @accel_path string will be stored in a #GQuark. Therefore, if you
pass a static string, you can save some memory by interning it first with
g_intern_static_string().
#NAME: user_data
#PARENT: Gtk.CalendarDetailFunc.utf8
#COMMENT: the data passed with gtk_calendar_set_detail_func().
#NAME: toggle-handle-focus
#PARENT: Gtk.Paned
#COMMENT: The ::toggle-handle-focus is a
[keybinding signal][GtkBindingSignal]
which gets emitted to accept the current position of the handle and then
move focus to the next widget in the focus chain.

The default binding is Tab.
#NAME: STOCK_DIRECTORY
#PARENT: Gtk
#COMMENT: The “Directory” icon.
#NAME: application
#PARENT: Gtk.PathPriorityType
#COMMENT: Deprecated
#NAME: count
#PARENT: Gtk.TextIter.backward_word_starts.gboolean
#COMMENT: number of times to move
#NAME: toggle_button
#PARENT: Gtk.ToggleButton.set_active.none
#COMMENT: a #GtkToggleButton.
#NAME: shell
#PARENT: Gtk.ToolShell.get_icon_size.gint
#COMMENT: a #GtkToolShell
#NAME: TreeModelFilter
#PARENT: Gtk
#COMMENT: A #GtkTreeModelFilter is a tree model which wraps another tree model,
and can do the following things:

- Filter specific rows, based on data from a “visible column”, a column
  storing booleans indicating whether the row should be filtered or not,
  or based on the return value of a “visible function”, which gets a
  model, iter and user_data and returns a boolean indicating whether the
  row should be filtered or not.

- Modify the “appearance” of the model, using a modify function.
  This is extremely powerful and allows for just changing some
  values and also for creating a completely different model based
  on the given child model.

- Set a different root node, also known as a “virtual root”. You can pass
  in a #GtkTreePath indicating the root node for the filter at construction
  time.

The basic API is similar to #GtkTreeModelSort. For an example on its usage,
see the section on #GtkTreeModelSort.

When using #GtkTreeModelFilter, it is important to realize that
#GtkTreeModelFilter maintains an internal cache of all nodes which are
visible in its clients. The cache is likely to be a subtree of the tree
exposed by the child model. #GtkTreeModelFilter will not cache the entire
child model when unnecessary to not compromise the caching mechanism
that is exposed by the reference counting scheme. If the child model
implements reference counting, unnecessary signals may not be emitted
because of reference counting rule 3, see the #GtkTreeModel
documentation. (Note that e.g. #GtkTreeStore does not implement
reference counting and will always emit all signals, even when
the receiving node is not visible).

Because of this, limitations for possible visible functions do apply.
In general, visible functions should only use data or properties from
the node for which the visibility state must be determined, its siblings
or its parents. Usually, having a dependency on the state of any child
node is not possible, unless references are taken on these explicitly.
When no such reference exists, no signals may be received for these child
nodes (see reference couting rule number 3 in the #GtkTreeModel section).

Determining the visibility state of a given node based on the state
of its child nodes is a frequently occurring use case. Therefore,
#GtkTreeModelFilter explicitly supports this. For example, when a node
does not have any children, you might not want the node to be visible.
As soon as the first row is added to the node’s child level (or the
last row removed), the node’s visibility should be updated.

This introduces a dependency from the node on its child nodes. In order
to accommodate this, #GtkTreeModelFilter must make sure the necessary
signals are received from the child model. This is achieved by building,
for all nodes which are exposed as visible nodes to #GtkTreeModelFilter's
clients, the child level (if any) and take a reference on the first node
in this level. Furthermore, for every row-inserted, row-changed or
row-deleted signal (also these which were not handled because the node
was not cached), #GtkTreeModelFilter will check if the visibility state
of any parent node has changed.

Beware, however, that this explicit support is limited to these two
cases. For example, if you want a node to be visible only if two nodes
in a child’s child level (2 levels deeper) are visible, you are on your
own. In this case, either rely on #GtkTreeStore to emit all signals
because it does not implement reference counting, or for models that
do implement reference counting, obtain references on these child levels
yourself.
#NAME: get_model
#PARENT: Gtk.ComboBox
#COMMENT: Returns the #GtkTreeModel which is acting as data source for @combo_box.
#NAME: set_icon_tooltip_text
#PARENT: Gtk.Entry
#COMMENT: Sets @tooltip as the contents of the tooltip for the icon
at the specified position.

Use %NULL for @tooltip to remove an existing tooltip.

See also gtk_widget_set_tooltip_text() and
gtk_entry_set_icon_tooltip_markup().
#NAME: renderer
#PARENT: Gtk.CellArea.attribute_disconnect.none
#COMMENT: the #GtkCellRenderer to disconnect an attribute for
#NAME: get_width_chars
#PARENT: Gtk.Entry
#COMMENT: Gets the value set by gtk_entry_set_width_chars().
#NAME: get_windows
#PARENT: Gtk.Application.get_windows
#COMMENT: a #GList of #GtkWindow
#NAME: label
#PARENT: Gtk.Label.set_mnemonic_widget.none
#COMMENT: a #GtkLabel
#NAME: invalidate_filter
#PARENT: Gtk.ListBox
#COMMENT: Update the filtering for all rows. Call this when result
of the filter function on the @box is changed due
to an external factor. For instance, this would be used
if the filter function just looked for a specific search
string and the entry with the search string has changed.
#NAME: widget
#PARENT: Gtk.Overlay.get-child-position.gboolean
#COMMENT: the child widget to position
#NAME: list
#PARENT: Gtk.TargetList.ref.TargetList
#COMMENT: a #GtkTargetList
#NAME: move_visually
#PARENT: Gtk.TextView
#COMMENT: Move the iterator a given number of characters visually, treating
it as the strong cursor position. If @count is positive, then the
new strong cursor position will be @count positions to the right of
the old cursor position. If @count is negative then the new strong
cursor position will be @count positions to the left of the old
cursor position.

In the presence of bi-directional text, the correspondence
between logical and visual order will depend on the direction
of the current run, and there may be jumps when the cursor
is moved off of the end of a run.
#NAME: drag_source_set_icon_pixbuf
#PARENT: Gtk.Widget
#COMMENT: Sets the icon that will be used for drags from a particular widget
from a #GdkPixbuf. GTK+ retains a reference for @pixbuf and will
release it when it is no longer needed.
#NAME: clipboard
#PARENT: Gtk.Clipboard.wait_is_text_available.gboolean
#COMMENT: a #GtkClipboard
#NAME: append
#PARENT: Gtk.MenuShell
#COMMENT: Adds a new #GtkMenuItem to the end of the menu shell's
item list.
#NAME: semi_expanded
#PARENT: Gtk.ExpanderStyle
#COMMENT: Intermediate style used during animation.
#NAME: value
#PARENT: Gtk.ListStore.set_value.none
#COMMENT: new value for the cell
#NAME: vadjustment
#PARENT: Gtk.ScrolledWindow.set_vadjustment.none
#COMMENT: vertical scroll adjustment
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_padding.none
#COMMENT: a #GtkThemingEngine
#NAME: widget
#PARENT: Gtk.Widget.get_valign_with_baseline.Align
#COMMENT: a #GtkWidget
#NAME: init_template
#PARENT: Gtk.Widget
#COMMENT: Creates and initializes child widgets defined in templates. This
function must be called in the instance initializer for any
class which assigned itself a template using gtk_widget_class_set_template()

It is important to call this function in the instance initializer
of a #GtkWidget subclass and not in #GObject.constructed() or
#GObject.constructor() for two reasons.

One reason is that generally derived widgets will assume that parent
class composite widgets have been created in their instance
initializers.

Another reason is that when calling g_object_new() on a widget with
composite templates, it’s important to build the composite widgets
before the construct properties are set. Properties passed to g_object_new()
should take precedence over properties set in the private template XML.
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_copy_target_list.TargetList
#COMMENT: a #GtkTextBuffer
#NAME: get_state
#PARENT: Gtk.Widget
#COMMENT: Returns the widget’s state. See gtk_widget_set_state().
#NAME: action
#PARENT: Gtk.ActionGroup.remove_action.none
#COMMENT: an action
#NAME: lowest
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: position
#PARENT: Gtk.EntryBufferClass.insert_text.insert_text.guint
#COMMENT: the position at which to insert text.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_model.none
#COMMENT: A #GtkTreeView.
#NAME: geometry
#PARENT: Gtk.Window.parse_geometry.gboolean
#COMMENT: geometry string
#NAME: set_title
#PARENT: Gtk.FileChooserButton
#COMMENT: Modifies the @title of the browse dialog used by @button.
#NAME: get_extra_widget
#PARENT: Gtk.FileChooser.get_extra_widget
#COMMENT: the current extra widget, or %NULL
#NAME: window
#PARENT: Gtk.Window.set_decorated.none
#COMMENT: a #GtkWindow
#NAME: text_view
#PARENT: Gtk.TextView.get_cursor_visible.gboolean
#COMMENT: a #GtkTextView
#NAME: false
#PARENT: Gtk
#COMMENT: Analogical to gtk_true(), this function does nothing
but always returns %FALSE.
#NAME: get_name
#PARENT: Gtk.Action.get_name
#COMMENT: the name of the action. The string belongs to GTK+ and should not
  be freed.
#NAME: action
#PARENT: Gtk.Action.set_accel_group.none
#COMMENT: the action object
#NAME: fsd
#PARENT: Gtk.FontSelectionDialog.get_font_name.utf8
#COMMENT: a #GtkFontSelectionDialog
#NAME: request_text
#PARENT: Gtk.Clipboard
#COMMENT: Requests the contents of the clipboard as text. When the text is
later received, it will be converted to UTF-8 if necessary, and
@callback will be called.

The @text parameter to @callback will contain the resulting text if
the request succeeded, or %NULL if it failed. This could happen for
various reasons, in particular if the clipboard was empty or if the
contents of the clipboard could not be converted into text form.
#NAME: tabs
#PARENT: Gtk.TextAttributes
#COMMENT: Custom #PangoTabArray for this text.
#NAME: data
#PARENT: Gtk.FileFilter.add_custom.none
#COMMENT: data to pass to @func
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.set_location.none
#COMMENT: a places sidebar
#NAME: sensitivity
#PARENT: Gtk.Range.set_lower_stepper_sensitivity.none
#COMMENT: the lower stepper’s sensitivity policy.
#NAME: get_show_icons
#PARENT: Gtk.RecentChooser.get_show_icons
#COMMENT: %TRUE if the icons should be displayed, %FALSE otherwise.
#NAME: get_junction_sides
#PARENT: Gtk.StyleContext
#COMMENT: Returns the sides where rendered elements connect visually with others.
#NAME: cell_view
#PARENT: Gtk.CellView.set_fit_model.none
#COMMENT: a #GtkCellView
#NAME: get_print_pages
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_number_up.none
#COMMENT: a #GtkPrintSettings
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_overlay_scrolling.gboolean
#COMMENT: a #GtkScrolledWindow
#NAME: event
#PARENT: Gtk.Widget.event-after.none
#COMMENT: the #GdkEvent which triggered this signal
#NAME: chooser
#PARENT: Gtk.FileChooser.select_all.none
#COMMENT: a #GtkFileChooser
#NAME: warning
#PARENT: Gtk.MessageType
#COMMENT: Non-fatal warning message
#NAME: drag_source_set_icon_gicon
#PARENT: Gtk.Widget
#COMMENT: Sets the icon that will be used for drags from a particular source
to @icon. See the docs for #GtkIconTheme for more details.
#NAME: height
#PARENT: Gtk.Window.get_default_size.none
#COMMENT: location to store the default height, or %NULL
#NAME: event
#PARENT: Gtk.Entry.icon-release.none
#COMMENT: the button release event
#NAME: row
#PARENT: Gtk.ListBoxUpdateHeaderFunc.none
#COMMENT: the row to update
#NAME: selection-request-event
#PARENT: Gtk.Widget.selection-request-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: border_
#PARENT: Gtk.Border.free.none
#COMMENT: a #GtkBorder-struct
#NAME: width
#PARENT: Gtk.CellRendererClass.get_size.get_size.none
#COMMENT: location to return width needed to render a cell, or %NULL
#NAME: path
#PARENT: Gtk.TreeRowReference.deleted.none
#COMMENT: the path position that was deleted
#NAME: group
#PARENT: Gtk.ToolPalette.get_group_position.gint
#COMMENT: a #GtkToolItemGroup
#NAME: widget
#PARENT: Gtk.Widget.get_size_request.none
#COMMENT: a #GtkWidget
#NAME: list
#PARENT: Gtk.Window.set_default_icon_list.none
#COMMENT: a list of #GdkPixbuf
#NAME: get_adjustment
#PARENT: Gtk.ListBox
#COMMENT: Gets the adjustment (if any) that the widget uses to
for vertical scrolling.
#NAME: tree_model_sort
#PARENT: Gtk.TreeModelSort.convert_iter_to_child_iter.none
#COMMENT: A #GtkTreeModelSort
#NAME: rc_property_parse_enum
#PARENT: Gtk
#COMMENT: A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a single
enumeration value.

The enumeration value can be specified by its name, its nickname or
its numeric value. For consistency with flags parsing, the value
may be surrounded by parentheses.
#NAME: format_secondary_text
#PARENT: Gtk.MessageDialog
#COMMENT: Sets the secondary text of the message dialog to be @message_format
(with printf()-style).
#NAME: 
#PARENT: Gtk.StyleContext.get.none...
#COMMENT: property name /return value pairs, followed by %NULL
#NAME: get_iter_at_location
#PARENT: Gtk.TextView
#COMMENT: Retrieves the iterator at buffer coordinates @x and @y. Buffer
coordinates are coordinates for the entire buffer, not just the
currently-displayed portion.  If you have coordinates from an
event, you have to convert those to buffer coordinates with
gtk_text_view_window_to_buffer_coords().
#NAME: height
#PARENT: Gtk.render_frame_gap.none
#COMMENT: rectangle height
#NAME: move_before
#PARENT: Gtk.ListStore
#COMMENT: Moves @iter in @store to the position before @position. Note that this
function only works with unsorted stores. If @position is %NULL, @iter
will be moved to the end of the list.
#NAME: time
#PARENT: Gtk.Widget.drag-data-received.none
#COMMENT: the timestamp at which the data was received
#NAME: flags
#PARENT: Gtk.Widget.state-flags-changed.none
#COMMENT: The previous state flags.
#NAME: get_offset_value
#PARENT: Gtk.LevelBar.get_offset_value
#COMMENT: %TRUE if the specified offset is found
#NAME: iter_has_qregion
#PARENT: Gtk.WidgetPath.iter_has_qregion
#COMMENT: %TRUE if the widget at @pos has the region defined.
#NAME: str
#PARENT: Gtk.IMContext.commit.none
#COMMENT: the completed character(s) entered by the user
#NAME: length
#PARENT: Gtk.TextBuffer.deserialize.gboolean
#COMMENT: length of @data
#NAME: widget
#PARENT: Gtk.WidgetClass.show.show.none
#COMMENT: a #GtkWidget
#NAME: bindings_activate
#PARENT: Gtk.bindings_activate
#COMMENT: %TRUE if a binding was found and activated
#NAME: grid
#PARENT: Gtk.Grid.insert_column.none
#COMMENT: a #GtkGrid
#NAME: read
#PARENT: Gtk.RecentManagerError
#COMMENT: failure while reading the recently used
  resources file.
#NAME: path
#PARENT: Gtk.TreePath.up.gboolean
#COMMENT: a #GtkTreePath-struct
#NAME: height
#PARENT: Gtk.WidgetAuxInfo
#COMMENT: the widget’s height
#NAME: PageRange
#PARENT: Gtk
#COMMENT: See also gtk_print_settings_set_page_ranges().
#NAME: child
#PARENT: Gtk.Container.child_get_property.none
#COMMENT: a widget which is a child of @container
#NAME: gpl_3_0
#PARENT: Gtk.License
#COMMENT: The GNU General Public License, version 3.0 or later
#NAME: new
#PARENT: Gtk.Menu
#COMMENT: Creates a new #GtkMenu
#NAME: popup-menu
#PARENT: Gtk.Widget.popup-menu
#COMMENT: %TRUE if a menu was activated
#NAME: label
#PARENT: Gtk.RadioButton.new_with_label.Widget
#COMMENT: the text label to display next to the radio button.
#NAME: x
#PARENT: Gtk.TextView.get_iter_at_position.none
#COMMENT: x position, in buffer coordinates
#NAME: window
#PARENT: Gtk.Window.present_with_time.none
#COMMENT: a #GtkWindow
#NAME: window
#PARENT: Gtk.Window.set_focus_on_map.none
#COMMENT: a #GtkWindow
#NAME: y
#PARENT: Gtk.TextView.get_iter_at_position.none
#COMMENT: y position, in buffer coordinates
#NAME: setting
#PARENT: Gtk.Window.set_decorated.none
#COMMENT: %TRUE to decorate the window
#NAME: cairo_transform_to_window
#PARENT: Gtk
#COMMENT: Transforms the given cairo context @cr that from @widget-relative
coordinates to @window-relative coordinates.
If the @widget’s window is not an ancestor of @window, no
modification will be applied.

This is the inverse to the transformation GTK applies when
preparing an expose event to be emitted with the #GtkWidget::draw
signal. It is intended to help porting multiwindow widgets from
GTK+ 2 to the rendering architecture of GTK+ 3.
#NAME: new_from_icon_name
#PARENT: Gtk.Button.new_from_icon_name
#COMMENT: a new #GtkButton displaying the themed icon
#NAME: CellRenderer
#PARENT: Gtk
#COMMENT: The #GtkCellRenderer is a base class of a set of objects used for
rendering a cell to a #cairo_t.  These objects are used primarily by
the #GtkTreeView widget, though they aren’t tied to them in any
specific way.  It is worth noting that #GtkCellRenderer is not a
#GtkWidget and cannot be treated as such.

The primary use of a #GtkCellRenderer is for drawing a certain graphical
elements on a #cairo_t. Typically, one cell renderer is used to
draw many cells on the screen.  To this extent, it isn’t expected that a
CellRenderer keep any permanent state around.  Instead, any state is set
just prior to use using #GObjects property system.  Then, the
cell is measured using gtk_cell_renderer_get_size(). Finally, the cell
is rendered in the correct location using gtk_cell_renderer_render().

There are a number of rules that must be followed when writing a new
#GtkCellRenderer.  First and foremost, it’s important that a certain set
of properties will always yield a cell renderer of the same size,
barring a #GtkStyle change.  The #GtkCellRenderer also has a number of
generic properties that are expected to be honored by all children.

Beyond merely rendering a cell, cell renderers can optionally
provide active user interface elements. A cell renderer can be
“activatable” like #GtkCellRendererToggle,
which toggles when it gets activated by a mouse click, or it can be
“editable” like #GtkCellRendererText, which
allows the user to edit the text using a #GtkEntry.
To make a cell renderer activatable or editable, you have to
implement the #GtkCellRendererClass.activate or
#GtkCellRendererClass.start_editing virtual functions, respectively.

Many properties of #GtkCellRenderer and its subclasses have a
corresponding “set” property, e.g. “cell-background-set” corresponds
to “cell-background”. These “set” properties reflect whether a property
has been set or not. You should not set them independently.
#NAME: get_collapsed
#PARENT: Gtk.ToolItemGroup.get_collapsed
#COMMENT: %TRUE if @group is collapsed, %FALSE if it is expanded
#NAME: name
#PARENT: Gtk.TextMark.new.TextMark
#COMMENT: mark name or %NULL
#NAME: other
#PARENT: Gtk.MessageType
#COMMENT: None of the above
#NAME: path
#PARENT: Gtk.TreeSelection.unselect_path.none
#COMMENT: The #GtkTreePath to be unselected.
#NAME: path
#PARENT: Gtk.WidgetPath.iter_has_name.gboolean
#COMMENT: a #GtkWidgetPath
#NAME: get_cairo_context
#PARENT: Gtk.PrintContext.get_cairo_context
#COMMENT: the cairo context of @context
#NAME: get_sensitive
#PARENT: Gtk.Widget.get_sensitive
#COMMENT: %TRUE if the widget is sensitive
#NAME: TreeSelection
#PARENT: Gtk
#COMMENT: The #GtkTreeSelection object is a helper object to manage the selection
for a #GtkTreeView widget.  The #GtkTreeSelection object is
automatically created when a new #GtkTreeView widget is created, and
cannot exist independently of this widget.  The primary reason the
#GtkTreeSelection objects exists is for cleanliness of code and API.
That is, there is no conceptual reason all these functions could not be
methods on the #GtkTreeView widget instead of a separate function.

The #GtkTreeSelection object is gotten from a #GtkTreeView by calling
gtk_tree_view_get_selection().  It can be manipulated to check the
selection status of the tree, as well as select and deselect individual
rows.  Selection is done completely view side.  As a result, multiple
views of the same model can have completely different selections.
Additionally, you cannot change the selection of a row on the model that
is not currently displayed by the view without expanding its parents
first.

One of the important things to remember when monitoring the selection of
a view is that the #GtkTreeSelection::changed signal is mostly a hint.
That is, it may only emit one signal when a range of rows is selected.
Additionally, it may on occasion emit a #GtkTreeSelection::changed signal
when nothing has happened (mostly as a result of programmers calling
select_row on an already selected row).
#NAME: set_selectable
#PARENT: Gtk.ListBoxRow
#COMMENT: Set the #GtkListBoxRow:selectable property for this row.
#NAME: get_depth
#PARENT: Gtk.TreePath
#COMMENT: Returns the current depth of @path.
#NAME: user_data
#PARENT: Gtk.TreeViewMappingFunc.none
#COMMENT: user data
#NAME: local_only
#PARENT: Gtk.FileChooser.set_local_only.none
#COMMENT: %TRUE if only local files can be selected
#NAME: width-chars
#PARENT: Gtk.FileChooserButton
#COMMENT: The width of the entry and label inside the button, in characters.
#NAME: get_line_wrap
#PARENT: Gtk.Label
#COMMENT: Returns whether lines in the label are automatically wrapped.
See gtk_label_set_line_wrap().
#NAME: new_proxy
#PARENT: Gtk.TreeRowReference.new_proxy
#COMMENT: a newly allocated #GtkTreeRowReference, or %NULL
#NAME: unset_state_flags
#PARENT: Gtk.Widget
#COMMENT: This function is for use in widget implementations. Turns off flag
values for the current widget state (insensitive, prelighted, etc.).
See gtk_widget_set_state_flags().
#NAME: add_buttons
#PARENT: Gtk.Dialog
#COMMENT: Adds more buttons, same as calling gtk_dialog_add_button()
repeatedly.  The variable argument list should be %NULL-terminated
as with gtk_dialog_new_with_buttons(). Each button must have both
text and response ID.
#NAME: unselect_uri
#PARENT: Gtk.FileChooser
#COMMENT: Unselects the file referred to by @uri. If the file
is not in the current directory, does not exist, or
is otherwise not currently selected, does nothing.
#NAME: fontchooser
#PARENT: Gtk.FontChooser.set_filter_func.none
#COMMENT: a #GtkFontChooser
#NAME: icon_theme
#PARENT: Gtk.IconTheme.append_search_path.none
#COMMENT: a #GtkIconTheme
#NAME: slider_end
#PARENT: Gtk.Range.get_slider_range.none
#COMMENT: return location for the slider's
    end, or %NULL
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_color.none
#COMMENT: a #GtkThemingEngine
#NAME: minimum_width
#PARENT: Gtk.Widget.get_preferred_width.none
#COMMENT: location to store the minimum width, or %NULL
#NAME: type
#PARENT: Gtk.MessageDialog.new_with_markup.Widget
#COMMENT: type of message
#NAME: menu_label
#PARENT: Gtk.Notebook.insert_page_menu.gint
#COMMENT: the widget to use as a label for the
    page-switch menu, if that is enabled. If %NULL, and @tab_label
    is a #GtkLabel or %NULL, then the menu label will be a newly
    created label with the same text as @tab_label; if @tab_label
    is not a #GtkLabel, @menu_label must be specified if the
    page-switch menu is to be used.
#NAME: get_uri_display
#PARENT: Gtk.RecentInfo
#COMMENT: Gets a displayable version of the resource’s URI. If the resource
is local, it returns a local path; if the resource is not local,
it returns the UTF-8 encoded content of gtk_recent_info_get_uri().
#NAME: requisition
#PARENT: Gtk.Requisition.free.none
#COMMENT: a #GtkRequisition
#NAME: get_margin_bottom
#PARENT: Gtk.Widget.get_margin_bottom
#COMMENT: The bottom margin of @widget
#NAME: chooser
#PARENT: Gtk.RecentChooser.set_local_only.none
#COMMENT: a #GtkRecentChooser
#NAME: VolumeButton
#PARENT: Gtk
#COMMENT: #GtkVolumeButton is a subclass of #GtkScaleButton that has
been tailored for use as a volume control widget with suitable
icons, tooltips and accessible labels.
#NAME: get_tooltip_markup
#PARENT: Gtk.Widget
#COMMENT: Gets the contents of the tooltip for @widget.
#NAME: context
#PARENT: Gtk.render_insertion_cursor.none
#COMMENT: a #GtkStyleContext
#NAME: op
#PARENT: Gtk.PrintOperation.set_defer_drawing.none
#COMMENT: a #GtkPrintOperation
#NAME: get_width
#PARENT: Gtk.PaperSize.get_width
#COMMENT: the paper width
#NAME: tabs
#PARENT: Gtk.TextView.set_tabs.none
#COMMENT: tabs as a #PangoTabArray
#NAME: add_from_string
#PARENT: Gtk.Builder.add_from_string
#COMMENT: A positive value on success, 0 if an error occurred
#NAME: search-shortcut
#PARENT: Gtk.FileChooserWidget
#COMMENT: The ::search-shortcut signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

This is used to make the file chooser show the search entry.

The default binding for this signal is `Alt + S`.
#NAME: tree_view
#PARENT: Gtk.TreeViewColumnDropFunc.gboolean
#COMMENT: A #GtkTreeView
#NAME: widget
#PARENT: Gtk.Widget.region_intersect.cairo.Region
#COMMENT: a #GtkWidget
#NAME: type
#PARENT: Gtk.Assistant.set_page_type.none
#COMMENT: the new type for @page
#NAME: get_propagation_phase
#PARENT: Gtk.EventController.get_propagation_phase
#COMMENT: the propagation phase
#NAME: cancel-position
#PARENT: Gtk.Paned
#COMMENT: The ::cancel-position signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to cancel moving the position of the handle using key
bindings. The position of the handle will be reset to the value prior to
moving it.

The default binding for this signal is Escape.
#NAME: stack
#PARENT: Gtk.Stack.set_vhomogeneous.none
#COMMENT: a #GtkStack
#NAME: chooser
#PARENT: Gtk.FileChooser.set_current_name.none
#COMMENT: a #GtkFileChooser
#NAME: set_adjustment
#PARENT: Gtk.SpinButton
#COMMENT: Replaces the #GtkAdjustment associated with @spin_button.
#NAME: set_tab_label
#PARENT: Gtk.Notebook
#COMMENT: Changes the tab label for @child.
If %NULL is specified for @tab_label, then the page will
have the label “page N”.
#NAME: get_enable_tree_lines
#PARENT: Gtk.TreeView
#COMMENT: Returns whether or not tree lines are drawn in @tree_view.
#NAME: dialog
#PARENT: Gtk.DialogClass.response.response.none
#COMMENT: a #GtkDialog
#NAME: get_request_mode
#PARENT: Gtk.CellArea
#COMMENT: Gets whether the area prefers a height-for-width layout
or a width-for-height layout.
#NAME: count
#PARENT: Gtk.TextIter.forward_chars.gboolean
#COMMENT: number of characters to move, may be negative
#NAME: cr
#PARENT: Gtk.paint_option.none
#COMMENT: a #cairo_t
#NAME: new
#PARENT: Gtk.PageSetup.new
#COMMENT: a new #GtkPageSetup.
#NAME: move-handle
#PARENT: Gtk.Paned
#COMMENT: The ::move-handle signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to move the handle when the user is using key bindings
to move it.
#NAME: buffer
#PARENT: Gtk.TextBuffer.create_mark.TextMark
#COMMENT: a #GtkTextBuffer
#NAME: button-press-event
#PARENT: Gtk.Widget
#COMMENT: The ::button-press-event signal will be emitted when a button
(typically from a mouse) is pressed.

To receive this signal, the #GdkWindow associated to the
widget needs to enable the #GDK_BUTTON_PRESS_MASK mask.

This signal will be sent to the grab widget if there is one.
#NAME: text_view
#PARENT: Gtk.TextView.set_tabs.none
#COMMENT: a #GtkTextView
#NAME: icon_view
#PARENT: Gtk.IconView.enable_model_drag_dest.none
#COMMENT: a #GtkIconView
#NAME: pixbuf
#PARENT: Gtk.Assistant.set_page_side_image.none
#COMMENT: the new side image @page
#NAME: lookup_for_settings
#PARENT: Gtk.IconSize
#COMMENT: Obtains the pixel size of a semantic icon size, possibly
modified by user preferences for a particular
#GtkSettings. Normally @size would be
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
isn’t normally needed, gtk_widget_render_icon_pixbuf() is the usual
way to get an icon for rendering, then just look at the size of
the rendered pixbuf. The rendered pixbuf may not even correspond to
the width/height returned by gtk_icon_size_lookup(), because themes
are free to render the pixbuf however they like, including changing
the usual size.
#NAME: state
#PARENT: Gtk.Gesture.set_state.gboolean
#COMMENT: the sequence state
#NAME: set_inverted
#PARENT: Gtk.LevelBar
#COMMENT: Sets the value of the #GtkLevelBar:inverted property.
#NAME: cr
#PARENT: Gtk.CellAreaClass.render.render.none
#COMMENT: the #cairo_t to render with
#NAME: vadjustment
#PARENT: Gtk.Scrollable.set_vadjustment.none
#COMMENT: a #GtkAdjustment
#NAME: get_reveal_child
#PARENT: Gtk.Revealer.get_reveal_child
#COMMENT: %TRUE if the child is revealed.
#NAME: get_char
#PARENT: Gtk.TextIter.get_char
#COMMENT: a Unicode character, or 0 if @iter is not dereferenceable
#NAME: scroll_to_iter
#PARENT: Gtk.TextView
#COMMENT: Scrolls @text_view so that @iter is on the screen in the position
indicated by @xalign and @yalign. An alignment of 0.0 indicates
left or top, 1.0 indicates right or bottom, 0.5 means center.
If @use_align is %FALSE, the text scrolls the minimal distance to
get the mark onscreen, possibly not scrolling at all. The effective
screen for purposes of this function is reduced by a margin of size
@within_margin.

Note that this function uses the currently-computed height of the
lines in the text buffer. Line heights are computed in an idle
handler; so this function may not have the desired effect if it’s
called before the height computations. To avoid oddness, consider
using gtk_text_view_scroll_to_mark() which saves a point to be
scrolled to after line validation.
#NAME: get_screen
#PARENT: Gtk.Window
#COMMENT: Returns the #GdkScreen associated with @window.
#NAME: x
#PARENT: Gtk.render_frame.none
#COMMENT: X origin of the rectangle
#NAME: get_default_source
#PARENT: Gtk.PrintSettings.get_default_source
#COMMENT: the default source
#NAME: map-event
#PARENT: Gtk.Widget.map-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: property-notify-event
#PARENT: Gtk.Widget
#COMMENT: The ::property-notify-event signal will be emitted when a property on
the @widget's window has been changed or deleted.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_PROPERTY_CHANGE_MASK mask.
#NAME: y
#PARENT: Gtk.render_frame.none
#COMMENT: Y origin of the rectangle
#NAME: get_size_of_row
#PARENT: Gtk.CellView.get_size_of_row
#COMMENT: %TRUE
#NAME: rgba
#PARENT: Gtk.ColorChooser
#COMMENT: The ::rgba property contains the currently selected color,
as a #GdkRGBA struct. The property can be set to change
the current selection programmatically.
#NAME: container
#PARENT: Gtk.Container.foreach.none
#COMMENT: a #GtkContainer
#NAME: rgba
#PARENT: Gtk.ColorSelection.get_previous_rgba.none
#COMMENT: a #GdkRGBA to fill in with the original color value
#NAME: action_group
#PARENT: Gtk.ActionGroup.remove_action.none
#COMMENT: the action group
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_tree_view.Widget
#COMMENT: A #GtkTreeViewColumn
#NAME: expander
#PARENT: Gtk.Expander.get_label_fill.gboolean
#COMMENT: a #GtkExpander
#NAME: new_from_icon_name
#PARENT: Gtk.StatusIcon.new_from_icon_name
#COMMENT: a new #GtkStatusIcon
#NAME: job_name
#PARENT: Gtk.PrintOperation.set_job_name.none
#COMMENT: a string that identifies the print job
#NAME: STOCK_PAGE_SETUP
#PARENT: Gtk
#COMMENT: The “Page Setup” item and icon.
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_display.Gdk.Display
#COMMENT: a pointer to a #GtkSelectionData-struct.
#NAME: name
#PARENT: Gtk.TextTag.new.TextTag
#COMMENT: tag name, or %NULL
#NAME: widget
#PARENT: Gtk.Widget.device_is_shadowed.gboolean
#COMMENT: a #GtkWidget
#NAME: hide_on_delete
#PARENT: Gtk.Widget.hide_on_delete
#COMMENT: %TRUE
#NAME: transition
#PARENT: Gtk.Revealer.set_transition_type.none
#COMMENT: the new transition type
#NAME: points
#PARENT: Gtk.Unit
#COMMENT: Dimensions in points.
#NAME: invalidate_filter
#PARENT: Gtk.FlowBox
#COMMENT: Updates the filtering for all children.

Call this function when the result of the filter
function on the @box is changed due ot an external
factor. For instance, this would be used if the
filter function just looked for a specific search
term, and the entry with the string has changed.
#NAME: new_from_icon_set
#PARENT: Gtk.Image
#COMMENT: Creates a #GtkImage displaying an icon set. Sample stock sizes are
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. Instead of using
this function, usually it’s better to create a #GtkIconFactory, put
your icon sets in the icon factory, add the icon factory to the
list of default factories with gtk_icon_factory_add_default(), and
then use gtk_image_new_from_stock(). This will allow themes to
override the icon you ship with your application.

The #GtkImage does not assume a reference to the
icon set; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.
#NAME: detacher
#PARENT: Gtk.Menu.attach_to_widget.none
#COMMENT: the user supplied callback function
            that will be called when the menu calls gtk_menu_detach()
#NAME: primary
#PARENT: Gtk.PlacesSidebar.show-error-message.none
#COMMENT: primary message with a summary of the error to show.
#NAME: bind_template_callback_full
#PARENT: Gtk.WidgetClass
#COMMENT: Declares a @callback_symbol to handle @callback_name from the template XML
defined for @widget_type. See gtk_builder_add_callback_symbol().

Note that this must be called from a composite widget classes class
initializer after calling gtk_widget_class_set_template().
#NAME: show-text
#PARENT: Gtk.ProgressBar
#COMMENT: Sets whether the progress bar will show text superimposed
over the bar. The shown text is either the value of
the #GtkProgressBar:text property or, if that is %NULL,
the #GtkProgressBar:fraction value, as a percentage.

To make a progress bar that is styled and sized suitably for containing
text (even if the actual text is blank), set #GtkProgressBar:show-text to
%TRUE and #GtkProgressBar:text to the empty string (not %NULL).
#NAME: grid
#PARENT: Gtk.Grid.set_column_homogeneous.none
#COMMENT: a #GtkGrid
#NAME: button
#PARENT: Gtk.Widget.drag_begin_with_coordinates.Gdk.DragContext
#COMMENT: The button the user clicked to start the drag
#NAME: get_icon_activatable
#PARENT: Gtk.Entry
#COMMENT: Returns whether the icon is activatable.
#NAME: tab_backward
#PARENT: Gtk.DirectionType
#COMMENT: Move backward.
#NAME: child
#PARENT: Gtk.Container.child_set_property.none
#COMMENT: a widget which is a child of @container
#NAME: get_website
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the website URL.
#NAME: data
#PARENT: Gtk.ClipboardRichTextReceivedFunc.none
#COMMENT: the @user_data supplied to
  gtk_clipboard_request_rich_text().
#NAME: BuildableIface
#PARENT: Gtk
#COMMENT: The #GtkBuildableIface interface contains method that are
necessary to allow #GtkBuilder to construct an object from
a #GtkBuilder UI definition.
#NAME: set_cell_data_func
#PARENT: Gtk.CellLayout
#COMMENT: Sets the #GtkCellLayoutDataFunc to use for @cell_layout.

This function is used instead of the standard attributes mapping
for setting the column value, and should set the value of @cell_layout’s
cell renderer(s) as appropriate.

@func may be %NULL to remove a previously set function.
#NAME: get_default_language
#PARENT: Gtk.get_default_language
#COMMENT: the default language as a #PangoLanguage,
    must not be freed
#NAME: context_id
#PARENT: Gtk.Statusbar.push.guint
#COMMENT: the message’s context id, as returned by
             gtk_statusbar_get_context_id()
#NAME: parent
#PARENT: Gtk.TreeStore.insert_after.none
#COMMENT: A valid #GtkTreeIter, or %NULL
#NAME: text
#PARENT: Gtk.Widget.set_tooltip_text.none
#COMMENT: the contents of the tooltip for @widget
#NAME: set_text
#PARENT: Gtk.Clipboard
#COMMENT: Sets the contents of the clipboard to the given UTF-8 string. GTK+ will
make a copy of the text and take responsibility for responding
for requests for the text, and for converting the text into
the requested format.
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_title.utf8
#COMMENT: a #GtkComboBox
#NAME: widget
#PARENT: Gtk.Widget.drag_dest_set_track_motion.none
#COMMENT: a #GtkWidget that’s a drag destination
#NAME: set_title
#PARENT: Gtk.FontButton
#COMMENT: Sets the title for the font chooser dialog.
#NAME: convert_tree_to_widget_coords
#PARENT: Gtk.TreeView
#COMMENT: Converts tree coordinates (coordinates in full scrollable area of the tree)
to widget coordinates.
#NAME: stock_add_static
#PARENT: Gtk
#COMMENT: Same as gtk_stock_add(), but doesn’t copy @items, so
@items must persist until application exit.
#NAME: model
#PARENT: Gtk.TreeSelectionFunc.gboolean
#COMMENT: A #GtkTreeModel being viewed
#NAME: get_row_span_column
#PARENT: Gtk.ComboBox.get_row_span_column
#COMMENT: the row span column.
#NAME: get_destroy_with_parent
#PARENT: Gtk.Window.get_destroy_with_parent
#COMMENT: %TRUE if the window will be destroyed with its transient parent.
#NAME: pixbuf
#PARENT: Gtk.CellView.new_with_pixbuf.Widget
#COMMENT: the image to display in the cell view
#NAME: focus
#PARENT: Gtk.CellArea
#COMMENT: This should be called by the @area’s owning layout widget
when focus is to be passed to @area, or moved within @area
for a given @direction and row data.

Implementing #GtkCellArea classes should implement this
method to receive and navigate focus in its own way particular
to how it lays out cells.
#NAME: application
#PARENT: Gtk.Application.get_active_window.Window
#COMMENT: a #GtkApplication
#NAME: get_preview_widget_active
#PARENT: Gtk.FileChooser.get_preview_widget_active
#COMMENT: %TRUE if the preview widget is active for the current filename.
#NAME: new
#PARENT: Gtk.MessageDialog.new
#COMMENT: a new #GtkMessageDialog
#NAME: settings
#PARENT: Gtk.PrintSettings.get_bool.gboolean
#COMMENT: a #GtkPrintSettings
#NAME: state_type
#PARENT: Gtk.paint_arrow.none
#COMMENT: a state
#NAME: get_preview_text
#PARENT: Gtk.FontChooser.get_preview_text
#COMMENT: the text displayed in the
    preview area
#NAME: area
#PARENT: Gtk.CellAreaClass.is_activatable.is_activatable.gboolean
#COMMENT: a #GtkCellArea
#NAME: get_relative_to
#PARENT: Gtk.Popover.get_relative_to
#COMMENT: a #GtkWidget
#NAME: visibility-notify-event
#PARENT: Gtk.Widget.visibility-notify-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: row
#PARENT: Gtk.Grid.set_baseline_row.none
#COMMENT: the row index
#NAME: event
#PARENT: Gtk.Widget.key-release-event.gboolean
#COMMENT: the #GdkEventKey which triggered this signal.
#NAME: focus
#PARENT: Gtk.WindowClass.set_focus.set_focus.none
#COMMENT: widget to be the new focus widget, or %NULL to unset
  any focus widget for the toplevel window.
#NAME: word_ends
#PARENT: Gtk.DeleteType
#COMMENT: Delete only the portion of the word to the
  left/right of cursor if we’re in the middle of a word.
#NAME: state
#PARENT: Gtk.StyleClass.render_icon.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a state
#NAME: renderer
#PARENT: Gtk.CellArea.attribute_connect.none
#COMMENT: the #GtkCellRenderer to connect an attribute for
#NAME: widget
#PARENT: Gtk.PrintOperation.custom-widget-apply.none
#COMMENT: the custom widget added in create-custom-widget
#NAME: entry
#PARENT: Gtk.Entry.set_inner_border.none
#COMMENT: a #GtkEntry
#NAME: parameter
#PARENT: Gtk.Application.remove_accelerator.none
#COMMENT: parameter to pass when activating the action,
  or %NULL if the action does not accept an activation parameter
#NAME: main_quit
#PARENT: Gtk
#COMMENT: Makes the innermost invocation of the main loop return
when it regains control.
#NAME: layout_index_to_text_index
#PARENT: Gtk.Entry
#COMMENT: Converts from a position in the entry contents (returned
by gtk_entry_get_text()) to a position in the
entry’s #PangoLayout (returned by gtk_entry_get_layout(),
with text retrieved via pango_layout_get_text()).
#NAME: color
#PARENT: Gtk.ColorChooserInterface.get_rgba.get_rgba.none
#COMMENT: a #GdkRGBA to fill in with the current color
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_sizing.TreeViewColumnSizing
#COMMENT: A #GtkTreeViewColumn.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_get_siblings.WidgetPath
#COMMENT: position to get the siblings for, -1 for the path head
#NAME: replace
#PARENT: Gtk.StyleProperties.merge.none
#COMMENT: whether to replace values or not
#NAME: is_active
#PARENT: Gtk.ToggleToolButton.set_active.none
#COMMENT: whether @button should be active
#NAME: window
#PARENT: Gtk.Window.mnemonic_activate.gboolean
#COMMENT: a #GtkWindow
#NAME: context
#PARENT: Gtk.drag_set_icon_surface.none
#COMMENT: the context for a drag (This must be called
    with a context for the source side of a drag)
#NAME: get_license
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the license information.
#NAME: get_markup_column
#PARENT: Gtk.IconView.get_markup_column
#COMMENT: the markup column, or -1 if it’s unset.
#NAME: n_colors
#PARENT: Gtk.ColorSelectionChangePaletteFunc.none
#COMMENT: Number of colors in the array
#NAME: palette_to_string
#PARENT: Gtk.ColorSelection.palette_to_string
#COMMENT: allocated string encoding the palette
#NAME: get_selection_mode
#PARENT: Gtk.IconView
#COMMENT: Gets the selection mode of the @icon_view.
#NAME: add_child_in_window
#PARENT: Gtk.TextView
#COMMENT: Adds a child at fixed coordinates in one of the text widget's
windows.

The window must have nonzero size (see
gtk_text_view_set_border_window_size()). Note that the child
coordinates are given relative to scrolling. When
placing a child in #GTK_TEXT_WINDOW_WIDGET, scrolling is
irrelevant, the child floats above all scrollable areas. But when
placing a child in one of the scrollable windows (border windows or
text window) it will move with the scrolling as needed.
#NAME: toolbar
#PARENT: Gtk.Toolbar.get_n_items.gint
#COMMENT: a #GtkToolbar
#NAME: iter_list_classes
#PARENT: Gtk.WidgetPath
#COMMENT: Returns a list with all the class names defined for the widget
at position @pos in the hierarchy defined in @path.
#NAME: action
#PARENT: Gtk.Action.is_sensitive.gboolean
#COMMENT: the action object
#NAME: section
#PARENT: Gtk.CssSection.ref.CssSection
#COMMENT: a #GtkCssSection
#NAME: tree_store
#PARENT: Gtk.TreeStore.set_valuesv.none
#COMMENT: A #GtkTreeStore
#NAME: aclass
#PARENT: Gtk.CellAreaClass.install_cell_property.none
#COMMENT: a #GtkCellAreaClass
#NAME: STOCK_DIALOG_QUESTION
#PARENT: Gtk
#COMMENT: The “Question” item and icon.
#NAME: new
#PARENT: Gtk.ColorButton.new
#COMMENT: a new color button
#NAME: new
#PARENT: Gtk.FontSelectionDialog
#COMMENT: Creates a new #GtkFontSelectionDialog.
#NAME: deserializable
#PARENT: Gtk.TargetList.add_rich_text_targets.none
#COMMENT: if %TRUE, then deserializable rich text formats
                 will be added, serializable formats otherwise.
#NAME: variant
#PARENT: Gtk.CssProvider.get_named.CssProvider
#COMMENT: variant to load, for example, "dark", or
    %NULL for the default
#NAME: manager
#PARENT: Gtk.RecentManager.has_item.gboolean
#COMMENT: a #GtkRecentManager
#NAME: n_sizes
#PARENT: Gtk.IconSet.get_sizes.none
#COMMENT: location to store number of elements in returned array
#NAME: context
#PARENT: Gtk.IMContext.get_preedit_string.none
#COMMENT: a #GtkIMContext
#NAME: widget
#PARENT: Gtk.Widget.get_margin_bottom.gint
#COMMENT: a #GtkWidget
#NAME: is_active
#PARENT: Gtk.Window
#COMMENT: Returns whether the window is part of the current active toplevel.
(That is, the toplevel window receiving keystrokes.)
The return value is %TRUE if the window is active toplevel
itself, but also if it is, say, a #GtkPlug embedded in the active toplevel.
You might use this function if you wanted to draw a widget
differently in an active window from a widget in an inactive window.
See gtk_window_has_toplevel_focus()
#NAME: source
#PARENT: Gtk.StyleClass.render_icon.render_icon.GdkPixbuf.Pixbuf
#COMMENT: the #GtkIconSource specifying the icon to render
#NAME: window
#PARENT: Gtk.Window.get_deletable.gboolean
#COMMENT: a #GtkWindow
#NAME: buffer
#PARENT: Gtk.TextBuffer.register_deserialize_tagset.Gdk.Atom
#COMMENT: a #GtkTextBuffer
#NAME: STOCK_YES
#PARENT: Gtk
#COMMENT: The “Yes” item and icon.
#NAME: get_sort_indicator
#PARENT: Gtk.TreeViewColumn
#COMMENT: Gets the value set by gtk_tree_view_column_set_sort_indicator().
#NAME: pixbuf
#PARENT: Gtk.Clipboard.set_image.none
#COMMENT: a #GdkPixbuf
#NAME: add_action_widget
#PARENT: Gtk.InfoBar
#COMMENT: Add an activatable widget to the action area of a #GtkInfoBar,
connecting a signal handler that will emit the #GtkInfoBar::response
signal on the message area when the widget is activated. The widget
is appended to the end of the message areas action area.
#NAME: path
#PARENT: Gtk.TreeModel.row_has_child_toggled.none
#COMMENT: a #GtkTreePath-struct pointing to the changed row
#NAME: spellcheck
#PARENT: Gtk.InputHints
#COMMENT: Suggest checking for typos
#NAME: widget
#PARENT: Gtk.Widget.set_margin_left.none
#COMMENT: a #GtkWidget
#NAME: set_completion
#PARENT: Gtk.Entry
#COMMENT: Sets @completion to be the auxiliary completion object to use with @entry.
All further configuration of the completion mechanism is done on
@completion using the #GtkEntryCompletion API. Completion is disabled if
@completion is set to %NULL.
#NAME: get_activatable
#PARENT: Gtk.CellRendererToggle.get_activatable
#COMMENT: %TRUE if the cell renderer is activatable.
#NAME: expander
#PARENT: Gtk.Expander.set_label_fill.none
#COMMENT: a #GtkExpander
#NAME: get_visited
#PARENT: Gtk.RecentInfo.get_visited
#COMMENT: the number of seconds elapsed from system’s Epoch when
  the resource was last visited, or -1 on failure.
#NAME: over_right_left
#PARENT: Gtk.StackTransitionType
#COMMENT: Cover the old page sliding right or uncover the new page sliding left, according to order. Since: 3.14
#NAME: set_draw_as_radio
#PARENT: Gtk.ToggleAction
#COMMENT: Sets whether the action should have proxies like a radio action.
#NAME: trigger_tooltip_query
#PARENT: Gtk.Tooltip
#COMMENT: Triggers a new tooltip query on @display, in order to update the current
visible tooltip, or to show/hide the current tooltip.  This function is
useful to call when, for example, the state of the widget changed by a
key press.
#NAME: name
#PARENT: Gtk.WidgetPath.iter_remove_region.none
#COMMENT: region name
#NAME: chooser
#PARENT: Gtk.FileChooser.get_preview_widget_active.gboolean
#COMMENT: a #GtkFileChooser
#NAME: widget
#PARENT: Gtk.ButtonBox.set_layout.none
#COMMENT: a #GtkButtonBox
#NAME: Frame
#PARENT: Gtk
#COMMENT: The frame widget is a Bin that surrounds its child
with a decorative frame and an optional label.
If present, the label is drawn in a gap in the
top side of the frame. The position of the
label can be controlled with gtk_frame_set_label_align().

# GtkFrame as GtkBuildable

The GtkFrame implementation of the GtkBuildable interface supports
placing a child in the label position by specifying “label” as the
“type” attribute of a <child> element. A normal content child can
be specified without specifying a <child> type attribute.

An example of a UI definition fragment with GtkFrame:
|[
<object class="GtkFrame">
  <child type="label">
    <object class="GtkLabel" id="frame-label"/>
  </child>
  <child>
    <object class="GtkEntry" id="frame-content"/>
  </child>
</object>
]|
#NAME: new
#PARENT: Gtk.PaperSize.new
#COMMENT: a new #GtkPaperSize, use gtk_paper_size_free()
to free it
#NAME: get_name
#PARENT: Gtk.PaperSize.get_name
#COMMENT: the name of @size
#NAME: get_x11_window_id
#PARENT: Gtk.StatusIcon
#COMMENT: This function is only useful on the X11/freedesktop.org platform.
It returns a window ID for the widget in the underlying
status icon implementation.  This is useful for the Galago
notification service, which can send a window ID in the protocol
in order for the server to position notification windows
pointing to a status icon reliably.

This function is not intended for other use cases which are
more likely to be met by one of the non-X11 specific methods, such
as gtk_status_icon_position_menu().
#NAME: tree_store
#PARENT: Gtk.TreeStore.insert.none
#COMMENT: A #GtkTreeStore
#NAME: target
#PARENT: Gtk.Widget.drag_get_data.none
#COMMENT: the target (form of the data) to retrieve
#NAME: set_from_resource
#PARENT: Gtk.Image
#COMMENT: See gtk_image_new_from_resource() for details.
#NAME: state
#PARENT: Gtk.StyleContext.get_property.none
#COMMENT: state to retrieve the property value for
#NAME: context
#PARENT: Gtk.CellView.new_with_context.Widget
#COMMENT: the #GtkCellAreaContext in which to calculate cell geometry
#NAME: digits
#PARENT: Gtk.SpinButton.configure.none
#COMMENT: the number of decimal places to display in the spin button
#NAME: event
#PARENT: Gtk.StatusIcon.scroll-event.gboolean
#COMMENT: the #GdkEventScroll which triggered
                                this signal
#NAME: mark
#PARENT: Gtk.TextMark.get_left_gravity.gboolean
#COMMENT: a #GtkTextMark
#NAME: enable_model_drag_source
#PARENT: Gtk.TreeView
#COMMENT: Turns @tree_view into a drag source for automatic DND. Calling this
method sets #GtkTreeView:reorderable to %FALSE.
#NAME: entry
#PARENT: Gtk.Entry.get_input_hints.InputHints
#COMMENT: a #GtkEntry
#NAME: pspec
#PARENT: Gtk.CellAreaClass.install_cell_property.none
#COMMENT: the #GParamSpec for the property
#NAME: stock
#PARENT: Gtk.ImageType
#COMMENT: the widget contains a [stock item name][gtkstock]
#NAME: get_widgets
#PARENT: Gtk.TextChildAnchor.get_widgets
#COMMENT: list of widgets anchored at @anchor
#NAME: convert_bin_window_to_tree_coords
#PARENT: Gtk.TreeView
#COMMENT: Converts bin_window coordinates to coordinates for the
tree (the full scrollable area of the tree).
#NAME: indentation
#PARENT: Gtk.TreeView.set_level_indentation.none
#COMMENT: the amount, in pixels, of extra indentation in @tree_view.
#NAME: markup
#PARENT: Gtk.Widget.set_tooltip_markup.none
#COMMENT: the contents of the tooltip for @widget, or %NULL
#NAME: copy_context
#PARENT: Gtk.CellArea
#COMMENT: This is sometimes needed for cases where rows need to share
alignments in one orientation but may be separately grouped
in the opposing orientation.

For instance, #GtkIconView creates all icons (rows) to have
the same width and the cells theirin to have the same
horizontal alignments. However each row of icons may have
a separate collective height. #GtkIconView uses this to
request the heights of each row based on a context which
was already used to request all the row widths that are
to be displayed.
#NAME: next
#PARENT: Gtk.TreePath
#COMMENT: Moves the @path to point to the next node at the current depth.
#NAME: 
#PARENT: Gtk.BindingEntry.add_signal.none...
#COMMENT: arguments to @signal_name
#NAME: buffer
#PARENT: Gtk.Builder.add_objects_from_string.guint
#COMMENT: the string to parse
#NAME: unref
#PARENT: Gtk.Gradient
#COMMENT: Decreases the reference count of @gradient, freeing its memory
if the reference count reaches 0.
#NAME: state_type
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: a state
#NAME: remove_shortcut_folder
#PARENT: Gtk.FileChooser
#COMMENT: Removes a folder from a file chooser’s list of shortcut folders.
#NAME: set_program_name
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the name to display in the about dialog.
If this is not set, it defaults to g_get_application_name().
#NAME: set_path
#PARENT: Gtk.StyleContext
#COMMENT: Sets the #GtkWidgetPath used for style matching. As a
consequence, the style will be regenerated to match
the new given path.

If you are using a #GtkStyleContext returned from
gtk_widget_get_style_context(), you do not need to call
this yourself.
#NAME: parameter_string
#PARENT: Gtk.init_with_args.gboolean
#COMMENT: a string which is displayed in
   the first line of `--help` output, after
   `programname [OPTION...]`
#NAME: unknown_value
#PARENT: Gtk.CssProviderError
#COMMENT: Unknown value.
#NAME: new_with_label
#PARENT: Gtk.RadioMenuItem
#COMMENT: Creates a new #GtkRadioMenuItem whose child is a simple #GtkLabel.
#NAME: area
#PARENT: Gtk.CellArea.cell_set_property.none
#COMMENT: a #GtkCellArea
#NAME: chooser
#PARENT: Gtk.FileChooser.set_do_overwrite_confirmation.none
#COMMENT: a #GtkFileChooser
#NAME: reordered
#PARENT: Gtk.TreeRowReference
#COMMENT: Lets a set of row reference created by
gtk_tree_row_reference_new_proxy() know that the
model emitted the #GtkTreeModel::rows-reordered signal.
#NAME: DestDefaults
#PARENT: Gtk
#COMMENT: The #GtkDestDefaults enumeration specifies the various
types of action that will be taken on behalf
of the user for a drag destination site.
#NAME: widget
#PARENT: Gtk.Widget.set_name.none
#COMMENT: a #GtkWidget
#NAME: grid
#PARENT: Gtk.Grid.get_column_spacing.guint
#COMMENT: a #GtkGrid
#NAME: editable
#PARENT: Gtk.EditableInterface.set_position.set_position.none
#COMMENT: a #GtkEditable
#NAME: layout
#PARENT: Gtk.Layout.get_vadjustment.Adjustment
#COMMENT: a #GtkLayout
#NAME: color
#PARENT: Gtk.Widget.modify_text.none
#COMMENT: the color to assign (does not need to
    be allocated), or %NULL to undo the effect of previous
    calls to of gtk_widget_modify_text().
#NAME: new_with_area_and_entry
#PARENT: Gtk.ComboBox.new_with_area_and_entry
#COMMENT: A new #GtkComboBox.
#NAME: get_default
#PARENT: Gtk.PaperSize.get_default
#COMMENT: the name of the default paper size. The string
is owned by GTK+ and should not be modified.
#NAME: list_filters
#PARENT: Gtk.RecentChooser.list_filters
#COMMENT: A singly linked list
  of #GtkRecentFilter objects.  You
  should just free the returned list using g_slist_free().
#NAME: style
#PARENT: Gtk.Style.has_context.gboolean
#COMMENT: a #GtkStyle
#NAME: path
#PARENT: Gtk.CellView.set_displayed_row.none
#COMMENT: a #GtkTreePath or %NULL to unset.
#NAME: target
#PARENT: Gtk.Clipboard.wait_for_contents.SelectionData
#COMMENT: an atom representing the form into which the clipboard
         owner should convert the selection.
#NAME: get_number_up_layout
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.
#NAME: position
#PARENT: Gtk.ToolItemGroup.set_item_position.none
#COMMENT: the new position of @item in @group, starting with 0.
    The position -1 means end of list.
#NAME: acceleratable
#PARENT: Gtk.AccelGroup.activate.gboolean
#COMMENT: the #GObject, usually a #GtkWindow, on which
   to activate the accelerator
#NAME: path
#PARENT: Gtk.TreeDragSourceIface.row_draggable.row_draggable.gboolean
#COMMENT: row on which user is initiating a drag
#NAME: orientation
#PARENT: Gtk.ColorChooserInterface.add_palette.add_palette.none
#COMMENT: %GTK_ORIENTATION_HORIZONTAL if the palette should
    be displayed in rows, %GTK_ORIENTATION_VERTICAL for columns
#NAME: create_menu
#PARENT: Gtk.Action
#COMMENT: If @action provides a #GtkMenu widget as a submenu for the menu
item or the toolbar item it creates, this function returns an
instance of that menu.
#NAME: cclass
#PARENT: Gtk.ContainerClass.find_child_property.GObject.ParamSpec
#COMMENT: a #GtkContainerClass
#NAME: path
#PARENT: Gtk.IconView.select_path.none
#COMMENT: The #GtkTreePath to be selected.
#NAME: adjustment
#PARENT: Gtk.Layout.set_vadjustment.none
#COMMENT: new scroll adjustment
#NAME: text_view
#PARENT: Gtk.TextView.backward_display_line.gboolean
#COMMENT: a #GtkTextView
#NAME: n_requested_sizes
#PARENT: Gtk.distribute_natural_allocation.gint
#COMMENT: Number of requests to fit into the allocation
#NAME: parent_class
#PARENT: Gtk.MenuToolButtonClass
#COMMENT: The parent class.
#NAME: get_hhomogeneous
#PARENT: Gtk.Stack.get_hhomogeneous
#COMMENT: whether @stack is horizontally homogeneous.
#NAME: choose_icon
#PARENT: Gtk.IconTheme
#COMMENT: Looks up a named icon and returns a #GtkIconInfo containing
information such as the filename of the icon. The icon
can then be rendered into a pixbuf using
gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
combines these two steps if all you need is the pixbuf.)

If @icon_names contains more than one name, this function
tries them all in the given order before falling back to
inherited icon themes.
#NAME: get_gicon
#PARENT: Gtk.Image
#COMMENT: Gets the #GIcon and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_GICON (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned #GIcon.
#NAME: ShadowType
#PARENT: Gtk
#COMMENT: Used to change the appearance of an outline typically provided by a #GtkFrame.

Note that many themes do not differentiate the appearance of the
various shadow types: Either their is no visible shadow (@GTK_SHADOW_NONE),
or there is (any other value).
#NAME: paint_diamond
#PARENT: Gtk
#COMMENT: Draws a diamond in the given rectangle on @window using the given
parameters.
#NAME: add_objects_from_resource
#PARENT: Gtk.Builder
#COMMENT: Parses a resource file containing a [GtkBuilder UI definition][BUILDER-UI]
building only the requested objects and merges
them with the current contents of @builder.

Upon errors 0 will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_RESOURCE_ERROR
domain.

If you are adding an object that depends on an object that is not
its child (for instance a #GtkTreeView that depends on its
#GtkTreeModel), you have to explicitly list all of them in @object_ids.
#NAME: set_modal
#PARENT: Gtk.Popover
#COMMENT: Sets whether @popover is modal, a modal popover will grab all input
within the toplevel and grab the keyboard focus on it when being
displayed. Clicking outside the popover area or pressing Esc will
dismiss the popover and ungrab input.
#NAME: first_button_text
#PARENT: Gtk.RecentChooserDialog.new.Widget
#COMMENT: stock ID or text to go in the first button, or %NULL
#NAME: path
#PARENT: Gtk.TreePath.append_index.none
#COMMENT: a #GtkTreePath-struct
#NAME: name
#PARENT: Gtk.Buildable.set_buildable_property.none
#COMMENT: name of property
#NAME: use-stock
#PARENT: Gtk.ImageMenuItem
#COMMENT: If %TRUE, the label set in the menuitem is used as a
stock id to select the stock item for the item.
#NAME: filter_info
#PARENT: Gtk.RecentFilterFunc.gboolean
#COMMENT: a #GtkRecentFilterInfo that is filled according
 to the @needed flags passed to gtk_recent_filter_add_custom()
#NAME: CellRendererSpin
#PARENT: Gtk
#COMMENT: #GtkCellRendererSpin renders text in a cell like #GtkCellRendererText from
which it is derived. But while #GtkCellRendererText offers a simple entry to
edit the text, #GtkCellRendererSpin offers a #GtkSpinButton widget. Of course,
that means that the text has to be parseable as a floating point number.

The range of the spinbutton is taken from the adjustment property of the
cell renderer, which can be set explicitly or mapped to a column in the
tree model, like all properties of cell renders. #GtkCellRendererSpin
also has properties for the #GtkCellRendererSpin:climb-rate and the number
of #GtkCellRendererSpin:digits to display. Other #GtkSpinButton properties
can be set in a handler for the #GtkCellRenderer::editing-started signal.

The #GtkCellRendererSpin cell renderer was added in GTK+ 2.10.
#NAME: chooser
#PARENT: Gtk.FileChooser.set_filter.none
#COMMENT: a #GtkFileChooser
#NAME: get_content_type
#PARENT: Gtk.AppChooser.get_content_type
#COMMENT: the content type of @self. Free with g_free()
#NAME: info_bar
#PARENT: Gtk.InfoBar.add_action_widget.none
#COMMENT: a #GtkInfoBar
#NAME: deselect
#PARENT: Gtk.MenuItem
#COMMENT: Emits the #GtkMenuItem::deselect signal on the given item.
#NAME: get_selection
#PARENT: Gtk.SelectionData
#COMMENT: Retrieves the selection #GdkAtom of the selection data.
#NAME: move_mark
#PARENT: Gtk.TextBuffer
#COMMENT: Moves @mark to the new location @where. Emits the #GtkTextBuffer::mark-set
signal as notification of the move.
#NAME: folder
#PARENT: Gtk.FileChooser.add_shortcut_folder.gboolean
#COMMENT: filename of the folder to add
#NAME: ok_cancel
#PARENT: Gtk.ButtonsType
#COMMENT: OK and Cancel buttons
#NAME: gesture
#PARENT: Gtk.Gesture.get_group.Gesture
#COMMENT: a #GtkGesture
#NAME: value
#PARENT: Gtk.ActionGroup.add_radio_actions_full.none
#COMMENT: the value of the action to activate initially, or -1 if
  no action should be activated
#NAME: menu
#PARENT: Gtk.Menu.set_tearoff_state.none
#COMMENT: a #GtkMenu
#NAME: active
#PARENT: Gtk.Menu
#COMMENT: The index of the currently selected menu item, or -1 if no
menu item is selected.
#NAME: state
#PARENT: Gtk.StyleContext.get_border.none
#COMMENT: state to retrieve the border for
#NAME: root_x
#PARENT: Gtk.Window.begin_resize_drag.none
#COMMENT: X position where the user clicked to initiate the drag, in root window coordinates
#NAME: get_padding
#PARENT: Gtk.Misc
#COMMENT: Gets the padding in the X and Y directions of the widget.
See gtk_misc_set_padding().
#NAME: root_y
#PARENT: Gtk.Window.begin_resize_drag.none
#COMMENT: Y position where the user clicked to initiate the drag
#NAME: grid
#PARENT: Gtk.Grid.attach.none
#COMMENT: a #GtkGrid
#NAME: palette_from_string
#PARENT: Gtk.ColorSelection.palette_from_string
#COMMENT: %TRUE if a palette was successfully parsed
#NAME: Editable
#PARENT: Gtk
#COMMENT: The #GtkEditable interface is an interface which should be implemented by
text editing widgets, such as #GtkEntry and #GtkSpinButton. It contains functions
for generically manipulating an editable widget, a large number of action
signals used for key bindings, and several signals that an application can
connect to to modify the behavior of a widget.

As an example of the latter usage, by connecting
the following handler to #GtkEditable::insert-text, an application
can convert all entry into a widget into uppercase.

## Forcing entry to uppercase.

|[<!-- language="C" -->
#include <ctype.h>;

void
insert_text_handler (GtkEditable *editable,
                     const gchar *text,
                     gint         length,
                     gint        *position,
                     gpointer     data)
{
  gchar *result = g_utf8_strup (text, length);

  g_signal_handlers_block_by_func (editable,
                               (gpointer) insert_text_handler, data);
  gtk_editable_insert_text (editable, result, length, position);
  g_signal_handlers_unblock_by_func (editable,
                                     (gpointer) insert_text_handler, data);

  g_signal_stop_emission_by_name (editable, "insert_text");

  g_free (result);
}
]|
#NAME: chooser
#PARENT: Gtk.FileChooser.select_filename.gboolean
#COMMENT: a #GtkFileChooser
#NAME: func
#PARENT: Gtk.IconView.selected_foreach.none
#COMMENT: The function to call for each selected icon.
#NAME: get_popover
#PARENT: Gtk.MenuButton
#COMMENT: Returns the #GtkPopover that pops out of the button.
If the button is not using a #GtkPopover, this function
returns %NULL.
#NAME: max
#PARENT: Gtk.SpinButton.get_range.none
#COMMENT: location to store maximum allowed value, or %NULL
#NAME: widget
#PARENT: Gtk.Widget.drag_begin.Gdk.DragContext
#COMMENT: the source widget
#NAME: ref
#PARENT: Gtk.CssSection
#COMMENT: Increments the reference count on @section.
#NAME: get_tooltip_column
#PARENT: Gtk.IconView.get_tooltip_column
#COMMENT: the index of the tooltip column that is currently being
used, or -1 if this is disabled.
#NAME: menu
#PARENT: Gtk.PlacesSidebar.populate-popup.none
#COMMENT: a #GtkMenu.
#NAME: filename
#PARENT: Gtk.PrintOperation.set_export_filename.none
#COMMENT: the filename for the exported file
#NAME: get
#PARENT: Gtk.Style
#COMMENT: Gets the values of a multiple style properties for @widget_type
from @style.
#NAME: new_from_indices
#PARENT: Gtk.TreePath
#COMMENT: Creates a new path with @first_index and @varargs as indices.
#NAME: get_screen
#PARENT: Gtk.MountOperation.get_screen
#COMMENT: the screen on which windows of @op are shown
#NAME: get_column_spacing
#PARENT: Gtk.IconView
#COMMENT: Returns the value of the ::column-spacing property.
#NAME: margin
#PARENT: Gtk.Widget.set_margin_start.none
#COMMENT: the start margin
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_min_width.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: get_handle_position
#PARENT: Gtk.HandleBox
#COMMENT: Gets the handle position of the handle box. See
gtk_handle_box_set_handle_position().
#NAME: popup-shown
#PARENT: Gtk.ComboBox
#COMMENT: Whether the combo boxes dropdown is popped up.
Note that this property is mainly useful, because
it allows you to connect to notify::popup-shown.
#NAME: op
#PARENT: Gtk.PrintOperation.get_print_settings.PrintSettings
#COMMENT: a #GtkPrintOperation
#NAME: RecentChooserError
#PARENT: Gtk
#COMMENT: These identify the various errors that can occur while calling
#GtkRecentChooser functions.
#NAME: entry
#PARENT: Gtk.Entry.set_attributes.none
#COMMENT: a #GtkEntry
#NAME: renderer
#PARENT: Gtk.CellArea.cell_set_property.none
#COMMENT: a #GtkCellRenderer inside @area
#NAME: STYLE_CLASS_NEEDS_ATTENTION
#PARENT: Gtk
#COMMENT: A CSS class used when an element needs the user attention,
for instance a button in a stack switcher corresponding to
a hidden page that changed state.
#NAME: get_column
#PARENT: Gtk.TreeView
#COMMENT: Gets the #GtkTreeViewColumn at the given position in the #tree_view.
#NAME: new
#PARENT: Gtk.FontChooserWidget.new
#COMMENT: a new #GtkFontChooserWidget
#NAME: active
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: new
#PARENT: Gtk.TextTagTable.new
#COMMENT: a new #GtkTextTagTable
#NAME: resize
#PARENT: Gtk.Window
#COMMENT: Resizes the window as if the user had done so, obeying geometry
constraints. The default geometry constraint is that windows may
not be smaller than their size request; to override this
constraint, call gtk_widget_set_size_request() to set the window's
request to a smaller value.

If gtk_window_resize() is called before showing a window for the
first time, it overrides any default size set with
gtk_window_set_default_size().

Windows may not be resized smaller than 1 by 1 pixels.
#NAME: new
#PARENT: Gtk.Alignment
#COMMENT: Creates a new #GtkAlignment.
#NAME: area
#PARENT: Gtk.CellArea.cell_set.none
#COMMENT: a #GtkCellArea
#NAME: window_to_buffer_coords
#PARENT: Gtk.TextView
#COMMENT: Converts coordinates on the window identified by @win to buffer
coordinates, storing the result in (@buffer_x,@buffer_y).

Note that you can’t convert coordinates for a nonexisting window (see
gtk_text_view_set_border_window_size()).
#NAME: value
#PARENT: Gtk.CssSectionType
#COMMENT: The section defines the value of a CSS declaration.
#NAME: Action
#PARENT: Gtk
#COMMENT: > In GTK+ 3.10, GtkAction has been deprecated. Use #GAction
> instead, and associate actions with #GtkActionable widgets. Use
> #GMenuModel for creating menus with gtk_menu_new_from_model().

Actions represent operations that the user can be perform, along with
some information how it should be presented in the interface. Each action
provides methods to create icons, menu items and toolbar items
representing itself.

As well as the callback that is called when the action gets activated,
the following also gets associated with the action:

- a name (not translated, for path lookup)

- a label (translated, for display)

- an accelerator

- whether label indicates a stock id

- a tooltip (optional, translated)

- a toolbar label (optional, shorter than label)


The action will also have some state information:

- visible (shown/hidden)

- sensitive (enabled/disabled)

Apart from regular actions, there are [toggle actions][GtkToggleAction],
which can be toggled between two states and
[radio actions][GtkRadioAction], of which only one in a group
can be in the “active” state. Other actions can be implemented as #GtkAction
subclasses.

Each action can have one or more proxy widgets. To act as an action proxy,
widget needs to implement #GtkActivatable interface. Proxies mirror the state
of the action and should change when the action’s state changes. Properties
that are always mirrored by proxies are #GtkAction:sensitive and
#GtkAction:visible. #GtkAction:gicon, #GtkAction:icon-name, #GtkAction:label,
#GtkAction:short-label and #GtkAction:stock-id properties are only mirorred
if proxy widget has #GtkActivatable:use-action-appearance property set to
%TRUE.

When the proxy is activated, it should activate its action.
#NAME: insert_action_markup
#PARENT: Gtk.EntryCompletion
#COMMENT: Inserts an action in @completion’s action item list at position @index_
with markup @markup.
#NAME: size
#PARENT: Gtk.IconTheme.load_surface.cairo.Surface
#COMMENT: the desired icon size. The resulting icon may not be
    exactly this size; see gtk_icon_info_load_icon().
#NAME: store
#PARENT: Gtk.ListStore.swap.none
#COMMENT: A #GtkListStore.
#NAME: n
#PARENT: Gtk.TreeModel.iter_nth_child.gboolean
#COMMENT: the index of the desired child
#NAME: klass
#PARENT: Gtk.WidgetClass.find_style_property.GObject.ParamSpec
#COMMENT: a #GtkWidgetClass
#NAME: icon_set
#PARENT: Gtk.IconSet.unref.none
#COMMENT: a #GtkIconSet
#NAME: new
#PARENT: Gtk.NumerableIcon.new
#COMMENT: a new #GIcon
#NAME: right
#PARENT: Gtk.PrintContext.get_hard_margins.gboolean
#COMMENT: right hardware printer margin
#NAME: new_from_string
#PARENT: Gtk.TreePath
#COMMENT: Creates a new #GtkTreePath-struct initialized to @path.

@path is expected to be a colon separated list of numbers.
For example, the string “10:4:0” would create a path of depth
3 pointing to the 11th child of the root node, the 5th
child of that 11th child, and the 1st child of that 5th child.
If an invalid path string is passed in, %NULL is returned.
#NAME: get_hadjustment
#PARENT: Gtk.Layout
#COMMENT: This function should only be called after the layout has been
placed in a #GtkScrolledWindow or otherwise configured for
scrolling. It returns the #GtkAdjustment used for communication
between the horizontal scrollbar and @layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
#NAME: widget
#PARENT: Gtk.Widget.set_composite_name.none
#COMMENT: a #GtkWidget.
#NAME: set_label
#PARENT: Gtk.Frame
#COMMENT: Sets the text of the label. If @label is %NULL,
the current label is removed.
#NAME: buffer
#PARENT: Gtk.Clipboard.request_rich_text.none
#COMMENT: a #GtkTextBuffer
#NAME: Container
#PARENT: Gtk
#COMMENT: A GTK+ user interface is constructed by nesting widgets inside widgets.
Container widgets are the inner nodes in the resulting tree of widgets:
they contain other widgets. So, for example, you might have a #GtkWindow
containing a #GtkFrame containing a #GtkLabel. If you wanted an image instead
of a textual label inside the frame, you might replace the #GtkLabel widget
with a #GtkImage widget.

There are two major kinds of container widgets in GTK+. Both are subclasses
of the abstract GtkContainer base class.

The first type of container widget has a single child widget and derives
from #GtkBin. These containers are decorators, which
add some kind of functionality to the child. For example, a #GtkButton makes
its child into a clickable button; a #GtkFrame draws a frame around its child
and a #GtkWindow places its child widget inside a top-level window.

The second type of container can have more than one child; its purpose is to
manage layout. This means that these containers assign
sizes and positions to their children. For example, a #GtkHBox arranges its
children in a horizontal row, and a #GtkGrid arranges the widgets it contains
in a two-dimensional grid.

# Height for width geometry management

GTK+ uses a height-for-width (and width-for-height) geometry management system.
Height-for-width means that a widget can change how much vertical space it needs,
depending on the amount of horizontal space that it is given (and similar for
width-for-height).

There are some things to keep in mind when implementing container widgets
that make use of GTK+’s height for width geometry management system. First,
it’s important to note that a container must prioritize one of its
dimensions, that is to say that a widget or container can only have a
#GtkSizeRequestMode that is %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH or
%GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT. However, every widget and container
must be able to respond to the APIs for both dimensions, i.e. even if a
widget has a request mode that is height-for-width, it is possible that
its parent will request its sizes using the width-for-height APIs.

To ensure that everything works properly, here are some guidelines to follow
when implementing height-for-width (or width-for-height) containers.

Each request mode involves 2 virtual methods. Height-for-width apis run
through gtk_widget_get_preferred_width() and then through gtk_widget_get_preferred_height_for_width().
When handling requests in the opposite #GtkSizeRequestMode it is important that
every widget request at least enough space to display all of its content at all times.

When gtk_widget_get_preferred_height() is called on a container that is height-for-width,
the container must return the height for its minimum width. This is easily achieved by
simply calling the reverse apis implemented for itself as follows:

|[<!-- language="C" -->
static void
foo_container_get_preferred_height (GtkWidget *widget,
                                    gint *min_height,
                                    gint *nat_height)
{
   if (i_am_in_height_for_width_mode)
     {
       gint min_width;

       GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
                                                           &min_width,
                                                           NULL);
       GTK_WIDGET_GET_CLASS (widget)->get_preferred_height_for_width
                                                          (widget,
                                                           min_width,
                                                           min_height,
                                                           nat_height);
     }
   else
     {
       ... many containers support both request modes, execute the
       real width-for-height request here by returning the
       collective heights of all widgets that are stacked
       vertically (or whatever is appropriate for this container)
       ...
     }
}
]|

Similarly, when gtk_widget_get_preferred_width_for_height() is called for a container or widget
that is height-for-width, it then only needs to return the base minimum width like so:

|[<!-- language="C" -->
static void
foo_container_get_preferred_width_for_height (GtkWidget *widget,
                                              gint for_height,
                                              gint *min_width,
                                              gint *nat_width)
{
   if (i_am_in_height_for_width_mode)
     {
       GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
                                                           min_width,
                                                           nat_width);
     }
   else
     {
       ... execute the real width-for-height request here based on
       the required width of the children collectively if the
       container were to be allocated the said height ...
     }
}
]|

Height for width requests are generally implemented in terms of a virtual allocation
of widgets in the input orientation. Assuming an height-for-width request mode, a container
would implement the get_preferred_height_for_width() virtual function by first calling
gtk_widget_get_preferred_width() for each of its children.

For each potential group of children that are lined up horizontally, the values returned by
gtk_widget_get_preferred_width() should be collected in an array of #GtkRequestedSize structures.
Any child spacing should be removed from the input @for_width and then the collective size should be
allocated using the gtk_distribute_natural_allocation() convenience function.

The container will then move on to request the preferred height for each child by using
gtk_widget_get_preferred_height_for_width() and using the sizes stored in the #GtkRequestedSize array.

To allocate a height-for-width container, it’s again important
to consider that a container must prioritize one dimension over the other. So if
a container is a height-for-width container it must first allocate all widgets horizontally
using a #GtkRequestedSize array and gtk_distribute_natural_allocation() and then add any
extra space (if and where appropriate) for the widget to expand.

After adding all the expand space, the container assumes it was allocated sufficient
height to fit all of its content. At this time, the container must use the total horizontal sizes
of each widget to request the height-for-width of each of its children and store the requests in a
#GtkRequestedSize array for any widgets that stack vertically (for tabular containers this can
be generalized into the heights and widths of rows and columns).
The vertical space must then again be distributed using gtk_distribute_natural_allocation()
while this time considering the allocated height of the widget minus any vertical spacing
that the container adds. Then vertical expand space should be added where appropriate and available
and the container should go on to actually allocating the child widgets.

See [GtkWidget’s geometry management section][geometry-management]
to learn more about implementing height-for-width geometry management for widgets.

# Child properties

GtkContainer introduces child properties.
These are object properties that are not specific
to either the container or the contained widget, but rather to their relation.
Typical examples of child properties are the position or pack-type of a widget
which is contained in a #GtkBox.

Use gtk_container_class_install_child_property() to install child properties
for a container class and gtk_container_class_find_child_property() or
gtk_container_class_list_child_properties() to get information about existing
child properties.

To set the value of a child property, use gtk_container_child_set_property(),
gtk_container_child_set() or gtk_container_child_set_valist().
To obtain the value of a child property, use
gtk_container_child_get_property(), gtk_container_child_get() or
gtk_container_child_get_valist(). To emit notification about child property
changes, use gtk_widget_child_notify().

# GtkContainer as GtkBuildable

The GtkContainer implementation of the GtkBuildable interface supports
a <packing> element for children, which can contain multiple <property>
elements that specify child properties for the child.

Since 2.16, child properties can also be marked as translatable using
the same “translatable”, “comments” and “context” attributes that are used
for regular properties.

Since 3.16, containers can have a <focus-chain> element containing multiple
<widget> elements, one for each child that should be added to the focus
chain. The ”name” attribute gives the id of the widget.

An example of these properties in UI definitions:
|[
<object class="GtkBox">
  <child>
    <object class="GtkEntry" id="entry1"/>
    <packing>
      <property name="pack-type">start</property>
    </packing>
  </child>
  <child>
    <object class="GtkEntry" id="entry2"/>
  </child>
  <focus-chain>
    <widget name="entry1"/>
    <widget name="entry2"/>
  </focus-chain>
</object>
]|
#NAME: edit_only
#PARENT: Gtk.CellArea.activate.gboolean
#COMMENT: if %TRUE then only cell renderers that are %GTK_CELL_RENDERER_MODE_EDITABLE
            will be activated.
#NAME: is_adjusting
#PARENT: Gtk.HSV.is_adjusting
#COMMENT: %TRUE if clients can ignore changes to the color value,
    since they may be transitory, or %FALSE if they should consider
    the color value status to be final.
#NAME: toolbar
#PARENT: Gtk.Toolbar.unset_icon_size.none
#COMMENT: a #GtkToolbar
#NAME: get_displayed_row
#PARENT: Gtk.CellView
#COMMENT: Returns a #GtkTreePath referring to the currently
displayed row. If no row is currently displayed,
%NULL is returned.
#NAME: mark
#PARENT: Gtk.TextBuffer.move_mark.none
#COMMENT: a #GtkTextMark
#NAME: events_pending
#PARENT: Gtk.events_pending
#COMMENT: %TRUE if any events are pending, %FALSE otherwise
#NAME: callback_data
#PARENT: Gtk.Container.forall.none
#COMMENT: callback user data
#NAME: app_name
#PARENT: Gtk.RecentInfo.get_application_info.gboolean
#COMMENT: the name of the application that has registered this item
#NAME: not_found
#PARENT: Gtk.IconThemeError
#COMMENT: The icon specified does not exist in the theme
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_placement.CornerType
#COMMENT: a #GtkScrolledWindow
#NAME: orientation
#PARENT: Gtk.GesturePan.new.Gesture
#COMMENT: expected orientation
#NAME: pack_type
#PARENT: Gtk.Notebook.set_action_widget.none
#COMMENT: pack type of the action widget
#NAME: grid
#PARENT: Gtk.Grid.get_row_homogeneous.gboolean
#COMMENT: a #GtkGrid
#NAME: max-width-chars
#PARENT: Gtk.CellRendererText
#COMMENT: The desired maximum width of the cell, in characters. If this property
is set to -1, the width will be calculated automatically.

For cell renderers that ellipsize or wrap text; this property
controls the maximum reported width of the cell. The
cell should not receive any greater allocation unless it is
set to expand in its #GtkCellLayout and all of the cell's siblings
have received their natural width.
#NAME: sortable
#PARENT: Gtk.TreeSortableIface.sort_column_changed.sort_column_changed.none
#COMMENT: A #GtkTreeSortable
#NAME: gstring
#PARENT: Gtk.rc_property_parse_enum.gboolean
#COMMENT: the #GString to be parsed
#NAME: label
#PARENT: Gtk.Label.get_line_wrap.gboolean
#COMMENT: a #GtkLabel
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_capture_button_press.gboolean
#COMMENT: a #GtkScrolledWindow
#NAME: get_program_name
#PARENT: Gtk.AboutDialog.get_program_name
#COMMENT: The program name. The string is owned by the about
 dialog and must not be modified.
#NAME: get_message_area
#PARENT: Gtk.Statusbar.get_message_area
#COMMENT: a #GtkBox
#NAME: set_label
#PARENT: Gtk.ToolButton
#COMMENT: Sets @label as the label used for the tool button. The “label” property
only has an effect if not overridden by a non-%NULL “label_widget” property.
If both the “label_widget” and “label” properties are %NULL, the label
is determined by the “stock_id” property. If the “stock_id” property is also
%NULL, @button will not have a label.
#NAME: iter
#PARENT: Gtk.TreeModelForeachFunc.gboolean
#COMMENT: the current #GtkTreeIter
#NAME: response_id
#PARENT: Gtk.DialogClass.response.response.none
#COMMENT: response ID
#NAME: stock_id
#PARENT: Gtk.Entry.set_icon_from_stock.none
#COMMENT: The name of the stock item, or %NULL
#NAME: test_create_simple_window
#PARENT: Gtk
#COMMENT: Create a simple window with window title @window_title and
text contents @dialog_text.
The window will quit any running gtk_main()-loop when destroyed, and it
will automatically be destroyed upon test function teardown.
#NAME: bad_filename
#PARENT: Gtk.FileChooserError
#COMMENT: Indicates a malformed filename.
#NAME: shadow_type
#PARENT: Gtk.paint_check.none
#COMMENT: the type of shadow to draw
#NAME: invisible-char-set
#PARENT: Gtk.Entry
#COMMENT: Whether the invisible char has been set for the #GtkEntry.
#NAME: set_label
#PARENT: Gtk.Button
#COMMENT: Sets the text of the label of the button to @str. This text is
also used to select the stock item if gtk_button_set_use_stock()
is used.

This will also clear any previously set labels.
#NAME: bar
#PARENT: Gtk.HeaderBar.get_custom_title.Widget
#COMMENT: a #GtkHeaderBar
#NAME: close
#PARENT: Gtk.InfoBar
#COMMENT: The ::close signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user uses a keybinding to dismiss
the info bar.

The default binding for this signal is the Escape key.
#NAME: range
#PARENT: Gtk.Range.set_restrict_to_fill_level.none
#COMMENT: A #GtkRange
#NAME: CellAreaBox
#PARENT: Gtk
#COMMENT: The #GtkCellAreaBox renders cell renderers into a row or a column
depending on its #GtkOrientation.

GtkCellAreaBox uses a notion of packing. Packing
refers to adding cell renderers with reference to a particular position
in a #GtkCellAreaBox. There are two reference positions: the
start and the end of the box.
When the #GtkCellAreaBox is oriented in the %GTK_ORIENTATION_VERTICAL
orientation, the start is defined as the top of the box and the end is
defined as the bottom. In the %GTK_ORIENTATION_HORIZONTAL orientation
start is defined as the left side and the end is defined as the right
side.

Alignments of #GtkCellRenderers rendered in adjacent rows can be
configured by configuring the #GtkCellAreaBox align child cell property
with gtk_cell_area_cell_set_property() or by specifying the "align"
argument to gtk_cell_area_box_pack_start() and gtk_cell_area_box_pack_end().
#NAME: create_icon
#PARENT: Gtk.Action.create_icon
#COMMENT: a widget that displays the icon for this action.
#NAME: n_values
#PARENT: Gtk.ListStore.set_valuesv.none
#COMMENT: the length of the @columns and @values arrays
#NAME: data
#PARENT: Gtk.TreeModelForeachFunc.gboolean
#COMMENT: The user data passed to gtk_tree_model_foreach()
#NAME: window
#PARENT: Gtk.Window.stick.none
#COMMENT: a #GtkWindow
#NAME: EventController
#PARENT: Gtk
#COMMENT: #GtkEventController is a base, low-level implementation for event
controllers. Those react to a series of #GdkEvents, and possibly trigger
actions as a consequence of those.
#NAME: activatable
#PARENT: Gtk.ListBoxRow.set_activatable.none
#COMMENT: %TRUE to mark the row as activatable
#NAME: TickCallback
#PARENT: Gtk
#COMMENT: Callback type for adding a function to update animations. See gtk_widget_add_tick_callback().
#NAME: into_or_after
#PARENT: Gtk.TreeViewDropPosition
#COMMENT: dropped row becomes a child or is inserted after
#NAME: value_from_string_type
#PARENT: Gtk.Builder
#COMMENT: Like gtk_builder_value_from_string(), this function demarshals
a value from a string, but takes a #GType instead of #GParamSpec.
This function calls g_value_init() on the @value argument, so it
need not be initialised beforehand.

Upon errors %FALSE will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR domain.
#NAME: backward_visible_cursor_position
#PARENT: Gtk.TextIter.backward_visible_cursor_position
#COMMENT: %TRUE if we moved and the new position is dereferenceable
#NAME: minimum_size
#PARENT: Gtk.Widget.get_preferred_size.none
#COMMENT: location for storing the minimum size, or %NULL
#NAME: height
#PARENT: Gtk.icon_size_lookup_for_settings.gboolean
#COMMENT: location to store icon height
#NAME: height
#PARENT: Gtk.paint_arrow.none
#COMMENT: height of the rectangle to draw the arrow in
#NAME: on
#PARENT: Gtk.SensitivityType
#COMMENT: The arrow is always sensitive
#NAME: data
#PARENT: Gtk.ClipboardReceivedFunc.none
#COMMENT: the @user_data supplied to
  gtk_clipboard_request_contents().
#NAME: filter
#PARENT: Gtk.RecentFilter.filter
#COMMENT: %TRUE if the file should be displayed
#NAME: prev
#PARENT: Gtk.TreePath.prev
#COMMENT: %TRUE if @path has a previous node, and
    the move was made
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_sizing.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: Gesture
#PARENT: Gtk
#COMMENT: #GtkGesture is the base object for gesture recognition, although this
object is quite generalized to serve as a base for multi-touch gestures,
it is suitable to implement single-touch and pointer-based gestures (using
the special %NULL #GdkEventSequence value for these).

The number of touches that a #GtkGesture need to be recognized is controlled
by the #GtkGesture:n-points property, if a gesture is keeping track of less
or more than that number of sequences, it won't check wether the gesture
is recognized.

As soon as the gesture has the expected number of touches, the gesture will
run the #GtkGesture::check signal regularly on input events until the gesture
is recognized, the criteria to consider a gesture as "recognized" is left to
#GtkGesture subclasses.

A recognized gesture will then emit the following signals:
- #GtkGesture::begin when the gesture is recognized.
- A number of #GtkGesture::update, whenever an input event is processed.
- #GtkGesture::end when the gesture is no longer recognized.

## Event propagation

In order to receive events, a gesture needs to either set a propagation phase
through gtk_event_controller_set_propagation_phase(), or feed those manually
through gtk_event_controller_handle_event().

In the capture phase, events are propagated from the toplevel down to the
target widget, and gestures that are attached to containers above the widget
get a chance to interact with the event before it reaches the target.

After the capture phase, GTK+ emits the traditional #GtkWidget::button-press,
#GtkWidget::button-release, #GtkWidget::touch-event, etc signals. Gestures
with the %GTK_PHASE_TARGET phase are fed events from the default #GtkWidget::event
handlers.

In the bubble phase, events are propagated up from the target widget to the
toplevel, and gestures that are attached to containers above the widget get
a chance to interact with events that have not been handled yet.

## States of a sequence # {#touch-sequence-states}

Whenever input interaction happens, a single event may trigger a cascade of
#GtkGestures, both across the parents of the widget receiving the event and
in parallel within an individual widget. It is a responsibility of the
widgets using those gestures to set the state of touch sequences accordingly
in order to enable cooperation of gestures around the #GdkEventSequences
triggering those.

Within a widget, gestures can be grouped through gtk_gesture_group(),
grouped gestures synchronize the state of sequences, so calling
gtk_gesture_set_sequence_state() on one will effectively propagate
the state throughout the group.

By default, all sequences start out in the #GTK_EVENT_SEQUENCE_NONE state,
sequences in this state trigger the gesture event handler, but event
propagation will continue unstopped by gestures.

If a sequence enters into the #GTK_EVENT_SEQUENCE_DENIED state, the gesture
group will effectively ignore the sequence, letting events go unstopped
through the gesture, but the "slot" will still remain occupied while
the touch is active.

If a sequence enters in the #GTK_EVENT_SEQUENCE_CLAIMED state, the gesture
group will grab all interaction on the sequence, by:
- Setting the same sequence to #GTK_EVENT_SEQUENCE_DENIED on every other gesture
  group within the widget, and every gesture on parent widgets in the propagation
  chain.
- calling #GtkGesture::cancel on every gesture in widgets underneath in the
  propagation chain.
- Stopping event propagation after the gesture group handles the event.

Note: if a sequence is set early to #GTK_EVENT_SEQUENCE_CLAIMED on
#GDK_TOUCH_BEGIN/#GDK_BUTTON_PRESS (so those events are captured before
reaching the event widget, this implies #GTK_PHASE_CAPTURE), one similar
event will emulated if the sequence changes to #GTK_EVENT_SEQUENCE_DENIED.
This way event coherence is preserved before event propagation is unstopped
again.

Sequence states can't be changed freely, see gtk_gesture_set_sequence_state()
to know about the possible lifetimes of a #GdkEventSequence.
#NAME: icon_view
#PARENT: Gtk.IconView.get_item_row.gint
#COMMENT: a #GtkIconView
#NAME: set_relative_to
#PARENT: Gtk.Popover
#COMMENT: Sets a new widget to be attached to @popover. If @popover is
visible, the position will be updated.

Note: the ownership of popovers is always given to their @relative_to
widget, so if @relative_to is set to %NULL on an attached @popover, it
will be detached from its previous widget, and consequently destroyed
unless extra references are kept.
#NAME: chooser
#PARENT: Gtk.FileChooser.get_show_hidden.gboolean
#COMMENT: a #GtkFileChooser
#NAME: get_pixels_above_lines
#PARENT: Gtk.TextView.get_pixels_above_lines
#COMMENT: default number of pixels above paragraphs
#NAME: get_row_spacing
#PARENT: Gtk.IconView.get_row_spacing
#COMMENT: the space between rows
#NAME: n-pages
#PARENT: Gtk.PrintOperation
#COMMENT: The number of pages in the document.

This must be set to a positive number
before the rendering starts. It may be set in a
#GtkPrintOperation::begin-print signal hander.

Note that the page numbers passed to the
#GtkPrintOperation::request-page-setup and
#GtkPrintOperation::draw-page signals are 0-based, i.e. if
the user chooses to print all pages, the last ::draw-page signal
will be for page @n_pages - 1.
#NAME: get_builtin_pixbuf
#PARENT: Gtk.IconInfo
#COMMENT: Gets the built-in image for this icon, if any. To allow GTK+ to use
built in icon images, you must pass the %GTK_ICON_LOOKUP_USE_BUILTIN
to gtk_icon_theme_lookup_icon().
#NAME: get_resize_toplevel
#PARENT: Gtk.Expander
#COMMENT: Returns whether the expander will resize the toplevel widget
containing the expander upon resizing and collpasing.
#NAME: format
#PARENT: Gtk.TextBuffer.deserialize_set_can_create_tags.none
#COMMENT: a #GdkAtom representing a registered rich text format
#NAME: insert_range
#PARENT: Gtk.TextBuffer
#COMMENT: Copies text, tags, and pixbufs between @start and @end (the order
of @start and @end doesn’t matter) and inserts the copy at @iter.
Used instead of simply getting/inserting text because it preserves
images and tags. If @start and @end are in a different buffer from
@buffer, the two buffers must share the same tag table.

Implemented via emissions of the insert_text and apply_tag signals,
so expect those.
#NAME: type
#PARENT: Gtk.MessageDialog.new.Widget
#COMMENT: type of message
#NAME: add_mark
#PARENT: Gtk.TextBuffer
#COMMENT: Adds the mark at position @where. The mark must not be added to
another buffer, and if its name is not %NULL then there must not
be another mark in the buffer with the same name.

Emits the #GtkTextBuffer::mark-set signal as notification of the mark's
initial placement.
#NAME: new
#PARENT: Gtk.GestureMultiPress
#COMMENT: Returns a newly created #GtkGesture that recognizes single and multiple
presses.
#NAME: bar
#PARENT: Gtk.SearchBar.set_show_close_button.none
#COMMENT: a #GtkSearchBar
#NAME: set_search_path
#PARENT: Gtk.IconTheme
#COMMENT: Sets the search path for the icon theme object. When looking
for an icon theme, GTK+ will search for a subdirectory of
one or more of the directories in @path with the same name
as the icon theme containing an index.theme file. (Themes from
multiple of the path elements are combined to allow themes to be
extended by adding icons in the user’s home directory.)

In addition if an icon found isn’t found either in the current
icon theme or the default icon theme, and an image file with
the right name is found directly in one of the elements of
@path, then that image will be used for the icon name.
(This is legacy feature, and new icons should be put
into the fallback icon theme, which is called hicolor,
rather than directly on the icon path.)
#NAME: self
#PARENT: Gtk.NumerableIcon.get_background_icon_name.utf8
#COMMENT: a #GtkNumerableIcon
#NAME: draw
#PARENT: Gtk.SeparatorToolItem.set_draw.none
#COMMENT: whether @item is drawn as a vertical line
#NAME: disconnect
#PARENT: Gtk.AccelGroup
#COMMENT: Removes an accelerator previously installed through
gtk_accel_group_connect().

Since 2.20 @closure can be %NULL.
#NAME: title
#PARENT: Gtk.RecentChooserDialog.new_for_manager.Widget
#COMMENT: Title of the dialog, or %NULL
#NAME: iter
#PARENT: Gtk.TextIter.get_offset.gint
#COMMENT: an iterator
#NAME: data
#PARENT: Gtk.TreeView.insert_column_with_data_func.gint
#COMMENT: data for @func
#NAME: window
#PARENT: Gtk.Window.parse_geometry.gboolean
#COMMENT: a #GtkWindow
#NAME: show-fill-level
#PARENT: Gtk.Range
#COMMENT: The show-fill-level property controls whether fill level indicator
graphics are displayed on the trough. See
gtk_range_set_show_fill_level().
#NAME: tooltip
#PARENT: Gtk.Tooltip.set_icon_from_gicon.none
#COMMENT: a #GtkTooltip
#NAME: dialog
#PARENT: Gtk.Dialog.set_alternative_button_order_from_array.none
#COMMENT: a #GtkDialog
#NAME: model
#PARENT: Gtk.CellRendererCombo
#COMMENT: Holds a tree model containing the possible values for the combo box.
Use the text_column property to specify the column holding the values.
#NAME: state
#PARENT: Gtk.Switch.state-set.gboolean
#COMMENT: the new state of the switch
#NAME: set_homogeneous
#PARENT: Gtk.ToolItem
#COMMENT: Sets whether @tool_item is to be allocated the same size as other
homogeneous items. The effect is that all homogeneous items will have
the same width as the widest of the items.
#NAME: cell_area
#PARENT: Gtk.CellRendererClass.render.render.none
#COMMENT: area normally rendered by a cell renderer
#NAME: get_device_enabled
#PARENT: Gtk.Widget
#COMMENT: Returns whether @device can interact with @widget and its
children. See gtk_widget_set_device_enabled().
#NAME: fd
#PARENT: Gtk.AccelMap.save_fd.none
#COMMENT: a valid writable file descriptor
#NAME: name
#PARENT: Gtk.CssProvider.get_named.CssProvider
#COMMENT: A theme name
#NAME: get_button
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns the button used in the treeview column header
#NAME: paragraph_ends
#PARENT: Gtk.MovementStep
#COMMENT: Move to either end of a paragraph
#NAME: iter
#PARENT: Gtk.TextBuffer.get_iter_at_offset.none
#COMMENT: iterator to initialize
#NAME: event
#PARENT: Gtk.main_do_event.none
#COMMENT: An event to process (normally passed by GDK)
#NAME: action
#PARENT: Gtk.ActionGroup.add_action_with_accel.none
#COMMENT: the action to add
#NAME: first_button_text
#PARENT: Gtk.RecentChooserDialog.new_for_manager.Widget
#COMMENT: stock ID or text to go in the first button, or %NULL
#NAME: cell_layout
#PARENT: Gtk.CellLayoutIface.pack_start.pack_start.none
#COMMENT: a #GtkCellLayout
#NAME: new_with_markup
#PARENT: Gtk.CellView
#COMMENT: Creates a new #GtkCellView widget, adds a #GtkCellRendererText
to it, and makes it show @markup. The text can be
marked up with the [Pango text markup language][PangoMarkupFormat].
#NAME: grid
#PARENT: Gtk.Grid.set_row_spacing.none
#COMMENT: a #GtkGrid
#NAME: search_data
#PARENT: Gtk.TreeViewSearchEqualFunc.gboolean
#COMMENT: user data from gtk_tree_view_set_search_equal_func()
#NAME: proxy
#PARENT: Gtk.UIManager.connect-proxy.none
#COMMENT: the proxy
#NAME: is_primary
#PARENT: Gtk.draw_insertion_cursor.none
#COMMENT: if the cursor should be the primary cursor color.
#NAME: artists
#PARENT: Gtk.AboutDialog
#COMMENT: The people who contributed artwork to the program, as a %NULL-terminated
array of strings. Each string may contain email addresses and URLs, which
will be displayed as links, see the introduction for more details.
#NAME: focus_on_click
#PARENT: Gtk.ComboBox.set_focus_on_click.none
#COMMENT: whether the combo box grabs focus when clicked
   with the mouse
#NAME: selected_foreach
#PARENT: Gtk.IconView
#COMMENT: Calls a function for each selected icon. Note that the model or
selection cannot be modified from within this function.
#NAME: get_level_indentation
#PARENT: Gtk.TreeView
#COMMENT: Returns the amount, in pixels, of extra indentation for child levels
in @tree_view.
#NAME: get_clickable
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns %TRUE if the user can click on the header for the column.
#NAME: expanded
#PARENT: Gtk.ExpanderStyle
#COMMENT: The style used for an expanded subtree.
#NAME: icon_pos
#PARENT: Gtk.Entry.get_icon_area.none
#COMMENT: Icon position
#NAME: widget
#PARENT: Gtk.selection_remove_all.none
#COMMENT: a #GtkWidget
#NAME: cell_view
#PARENT: Gtk.CellView.get_model.TreeModel
#COMMENT: a #GtkCellView
#NAME: uri
#PARENT: Gtk.FileChooser.unselect_uri.none
#COMMENT: the URI to unselect
#NAME: deiconify
#PARENT: Gtk.Window
#COMMENT: Asks to deiconify (i.e. unminimize) the specified @window. Note
that you shouldn’t assume the window is definitely deiconified
afterward, because other entities (e.g. the user or
[window manager][gtk-X11-arch])) could iconify it
again before your code which assumes deiconification gets to run.

You can track iconification via the “window-state-event” signal
on #GtkWidget.
#NAME: modifiers
#PARENT: Gtk.binding_entry_remove.none
#COMMENT: key modifier of binding to remove
#NAME: item_name
#PARENT: Gtk.AppChooserButton.custom-item-activated.none
#COMMENT: the name of the activated item
#NAME: paned
#PARENT: Gtk.Paned.get_child2.Widget
#COMMENT: a #GtkPaned widget
#NAME: get_style_context
#PARENT: Gtk.Widget.get_style_context
#COMMENT: a #GtkStyleContext. This memory is owned by @widget and
         must not be freed.
#NAME: get_font_selection
#PARENT: Gtk.FontSelectionDialog
#COMMENT: Retrieves the #GtkFontSelection widget embedded in the dialog.
#NAME: get_plug_window
#PARENT: Gtk.Socket.get_plug_window
#COMMENT: the window of the plug if available, or %NULL
#NAME: event
#PARENT: Gtk.Widget
#COMMENT: The GTK+ main loop will emit three signals for each GDK event delivered
to a widget: one generic ::event signal, another, more specific,
signal that matches the type of event delivered (e.g.
#GtkWidget::key-press-event) and finally a generic
#GtkWidget::event-after signal.
#NAME: get_print_settings
#PARENT: Gtk.PrintOperation
#COMMENT: Returns the current print settings.

Note that the return value is %NULL until either
gtk_print_operation_set_print_settings() or
gtk_print_operation_run() have been called.
#NAME: PropagationPhase
#PARENT: Gtk
#COMMENT: Describes the stage at which events are fed into a #GtkEventController.
#NAME: get_data
#PARENT: Gtk.SelectionData.get_data
#COMMENT: the raw data of the selection.
#NAME: path
#PARENT: Gtk.TreeView.get_background_area.none
#COMMENT: a #GtkTreePath for the row, or %NULL to get only horizontal coordinates
#NAME: new_from_stock
#PARENT: Gtk.RadioToolButton
#COMMENT: Creates a new #GtkRadioToolButton, adding it to @group.
The new #GtkRadioToolButton will contain an icon and label from the
stock item indicated by @stock_id.
#NAME: bindings_activate_event
#PARENT: Gtk.bindings_activate_event
#COMMENT: %TRUE if a matching key binding was found
#NAME: get_color_selection
#PARENT: Gtk.ColorSelectionDialog.get_color_selection
#COMMENT: the embedded #GtkColorSelection
#NAME: secondary-use-markup
#PARENT: Gtk.MessageDialog
#COMMENT: %TRUE if the secondary text of the dialog includes Pango markup.
See pango_parse_markup().
#NAME: first_property_name
#PARENT: Gtk.Container.child_get_valist.none
#COMMENT: the name of the first property to get
#NAME: size
#PARENT: Gtk.IconTheme.load_icon_for_scale.GdkPixbuf.Pixbuf
#COMMENT: the desired icon size. The resulting icon may not be
    exactly this size; see gtk_icon_info_load_icon().
#NAME: get_visited
#PARENT: Gtk.LinkButton
#COMMENT: Retrieves the “visited” state of the URI where the #GtkLinkButton
points. The button becomes visited when it is clicked. If the URI
is changed on the button, the “visited” state is unset again.

The state may also be changed using gtk_link_button_set_visited().
#NAME: inside_sentence
#PARENT: Gtk.TextIter.inside_sentence
#COMMENT: %TRUE if @iter is inside a sentence.
#NAME: buffer
#PARENT: Gtk.Clipboard.wait_for_rich_text.guint8
#COMMENT: a #GtkTextBuffer
#NAME: check_menu_item
#PARENT: Gtk.CheckMenuItem.set_draw_as_radio.none
#COMMENT: a #GtkCheckMenuItem
#NAME: open_default_display
#PARENT: Gtk.get_option_group.GLib.OptionGroup
#COMMENT: whether to open the default display
    when parsing the commandline arguments
#NAME: alias
#PARENT: Gtk.icon_size_register_alias.none
#COMMENT: an alias for @target
#NAME: homogeneous
#PARENT: Gtk.VBox.new.Widget
#COMMENT: %TRUE if all children are to be given equal space allotments.
#NAME: get_current_device_grab
#PARENT: Gtk.WindowGroup.get_current_device_grab
#COMMENT: The grab widget, or %NULL
#NAME: append_menuitems
#PARENT: Gtk.IMMulticontext
#COMMENT: Add menuitems for various available input methods to a menu;
the menuitems, when selected, will switch the input method
for the context and the global default input method.
#NAME: language
#PARENT: Gtk.TextAttributes
#COMMENT: #PangoLanguage for text.
#NAME: path
#PARENT: Gtk.TreeModelIface.row_deleted.row_deleted.none
#COMMENT: a #GtkTreePath-struct pointing to the previous location of
    the deleted row
#NAME: rc_get_module_dir
#PARENT: Gtk.rc_get_module_dir
#COMMENT: the directory. (Must be freed with g_free())
#NAME: about
#PARENT: Gtk.AboutDialog.get_authors.utf8
#COMMENT: a #GtkAboutDialog
#NAME: gstring
#PARENT: Gtk.RcProperty.parse_border.gboolean
#COMMENT: the #GString to be parsed
#NAME: new
#PARENT: Gtk.AppChooserButton
#COMMENT: Creates a new #GtkAppChooserButton for applications
that can handle content of the given type.
#NAME: step_backward
#PARENT: Gtk.SpinType
#COMMENT: Decrement by the adjustments step increment.
#NAME: get_state
#PARENT: Gtk.Switch
#COMMENT: Gets the underlying state of the #GtkSwitch.
#NAME: len
#PARENT: Gtk.TextBuffer.insert_interactive_at_cursor.gboolean
#COMMENT: length of text in bytes, or -1
#NAME: set_hadjustment
#PARENT: Gtk.Scrollable
#COMMENT: Sets the horizontal adjustment of the #GtkScrollable.
#NAME: get_property
#PARENT: Gtk.StyleContext
#COMMENT: Gets a style property from @context for the given state.

When @value is no longer needed, g_value_unset() must be called
to free any allocated memory.
#NAME: bottom
#PARENT: Gtk.PrintContext.get_hard_margins.gboolean
#COMMENT: bottom hardware printer margin
#NAME: start
#PARENT: Gtk.TextBuffer.remove_tag.none
#COMMENT: one bound of range to be untagged
#NAME: parent_class
#PARENT: Gtk.ToolButtonClass
#COMMENT: The parent class.
#NAME: widget
#PARENT: Gtk.test_slider_set_perc.none
#COMMENT: valid widget pointer.
#NAME: path
#PARENT: Gtk.CellRendererClass.activate.activate.gboolean
#COMMENT: widget-dependent string representation of the event location;
   e.g. for #GtkTreeView, a string representation of #GtkTreePath
#NAME: parent
#PARENT: Gtk.TreeStore.prepend.none
#COMMENT: A valid #GtkTreeIter, or %NULL
#NAME: widget
#PARENT: Gtk.WidgetClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: a #GtkWidget instance
#NAME: load_key_file
#PARENT: Gtk.PageSetup.load_key_file
#COMMENT: %TRUE on success
#NAME: hadjustment
#PARENT: Gtk.Scrollable.set_hadjustment.none
#COMMENT: a #GtkAdjustment
#NAME: window
#PARENT: Gtk.Window.set_screen.none
#COMMENT: a #GtkWindow.
#NAME: module_path
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: insert_range_interactive
#PARENT: Gtk.TextBuffer.insert_range_interactive
#COMMENT: whether an insertion was possible at @iter
#NAME: default_editable
#PARENT: Gtk.TextBuffer.paste_clipboard.none
#COMMENT: whether the buffer is editable by default
#NAME: window
#PARENT: Gtk.Window.unfullscreen.none
#COMMENT: a #GtkWindow
#NAME: set_documenters
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the strings which are displayed in the documenters tab
of the secondary credits dialog.
#NAME: unref
#PARENT: Gtk.RecentInfo
#COMMENT: Decreases the reference count of @info by one. If the reference
count reaches zero, @info is deallocated, and the memory freed.
#NAME: copy
#PARENT: Gtk.TreePath.copy
#COMMENT: a new #GtkTreePath-struct
#NAME: get_focus_visible
#PARENT: Gtk.Window
#COMMENT: Gets the value of the #GtkWindow:focus-visible property.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_quality.none
#COMMENT: a #GtkPrintSettings
#NAME: get_short_name
#PARENT: Gtk.RecentInfo
#COMMENT: Computes a valid UTF-8 string that can be used as the
name of the item in a menu or list. For example, calling
this function on an item that refers to
“file:///foo/bar.txt” will yield “bar.txt”.
#NAME: confirm
#PARENT: Gtk.FileChooserConfirmation
#COMMENT: The file chooser will present
 its stock dialog to confirm about overwriting an existing file.
#NAME: forward_cursor_positions
#PARENT: Gtk.TextIter.forward_cursor_positions
#COMMENT: %TRUE if we moved and the new position is dereferenceable
#NAME: activate
#PARENT: Gtk.Action
#COMMENT: The "activate" signal is emitted when the action is activated.
#NAME: bottom_attach
#PARENT: Gtk.Table.attach_defaults.none
#COMMENT: The row number to attach the bottom of the child widget to.
#NAME: display_line_ends
#PARENT: Gtk.MovementStep
#COMMENT: Move to either end of a line
#NAME: size
#PARENT: Gtk.PaperSize.get_width.gdouble
#COMMENT: a #GtkPaperSize object
#NAME: value
#PARENT: Gtk.PrintSettings.set_bool.none
#COMMENT: a boolean
#NAME: group
#PARENT: Gtk.RecentFilterFlags
#COMMENT: the groups to which the file belongs to
#NAME: set_left_margin
#PARENT: Gtk.TextView
#COMMENT: Sets the default left margin for text in @text_view.
Tags in the buffer may override the default.
#NAME: key-release-event
#PARENT: Gtk.Widget
#COMMENT: The ::key-release-event signal is emitted when a key is released.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_KEY_RELEASE_MASK mask.

This signal will be sent to the grab widget if there is one.
#NAME: show-default
#PARENT: Gtk.AppChooserWidget
#COMMENT: The ::show-default property determines whether the app chooser
should show the default handler for the content type in a
separate section. If %FALSE, the default handler is listed
among the recommended applications.
#NAME: parent_class
#PARENT: Gtk.FrameClass
#COMMENT: The parent class.
#NAME: chooser
#PARENT: Gtk.FileChooser.set_current_folder_uri.gboolean
#COMMENT: a #GtkFileChooser
#NAME: new
#PARENT: Gtk.Dialog
#COMMENT: Creates a new dialog box.

Widgets should not be packed into this #GtkWindow
directly, but into the @vbox and @action_area, as described above.
#NAME: yscale
#PARENT: Gtk.Alignment.new.Widget
#COMMENT: the amount that the child widget expands vertically to fill up
 unused space, from 0 to 1. The values are similar to @xscale.
#NAME: entry
#PARENT: Gtk.Entry.get_text_length.guint16
#COMMENT: a #GtkEntry
#NAME: user_cancelled
#PARENT: Gtk.DragResult
#COMMENT: The user cancelled the drag operation.
#NAME: spacing
#PARENT: Gtk.Box.set_spacing.none
#COMMENT: the number of pixels to put between children
#NAME: ListBoxFilterFunc
#PARENT: Gtk.ListBoxFilterFunc
#COMMENT: %TRUE if the row should be visible, %FALSE otherwise
#NAME: tree_view
#PARENT: Gtk.TreeViewMappingFunc.none
#COMMENT: A #GtkTreeView
#NAME: setting
#PARENT: Gtk.HeaderBar.set_has_subtitle.none
#COMMENT: %TRUE to reserve space for a subtitle
#NAME: get_request_mode
#PARENT: Gtk.CellArea.get_request_mode
#COMMENT: The #GtkSizeRequestMode preferred by @area.
#NAME: render_icon_pixbuf
#PARENT: Gtk.IconSet.render_icon_pixbuf
#COMMENT: a #GdkPixbuf to be displayed
#NAME: settings
#PARENT: Gtk.PrintSettings.set_page_ranges.none
#COMMENT: a #GtkPrintSettings
#NAME: get_snap_to_ticks
#PARENT: Gtk.SpinButton
#COMMENT: Returns whether the values are corrected to the nearest step.
See gtk_spin_button_set_snap_to_ticks().
#NAME: color
#PARENT: Gtk.rc_parse_color.guint
#COMMENT: a pointer to a #GdkColor in which to store
    the result
#NAME: get_title
#PARENT: Gtk.FileChooserButton
#COMMENT: Retrieves the title of the browse dialog used by @button. The returned value
should not be modified or freed.
#NAME: radio_button
#PARENT: Gtk.RadioButton.get_group.RadioButton
#COMMENT: a #GtkRadioButton.
#NAME: get_status_string
#PARENT: Gtk.PrintOperation
#COMMENT: Returns a string representation of the status of the
print operation. The string is translated and suitable
for displaying the print status e.g. in a #GtkStatusbar.

Use gtk_print_operation_get_status() to obtain a status
value that is suitable for programmatic use.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.pack_end.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: notebook
#PARENT: Gtk.Notebook.get_tab_label.Widget
#COMMENT: a #GtkNotebook
#NAME: new
#PARENT: Gtk.RecentAction
#COMMENT: Creates a new #GtkRecentAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().
#NAME: ins
#PARENT: Gtk.TextBuffer.select_range.none
#COMMENT: where to put the “insert” mark
#NAME: pixbuf
#PARENT: Gtk.TextBuffer.insert-pixbuf.none
#COMMENT: the #GdkPixbuf to be inserted
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_policy.none
#COMMENT: a #GtkScrolledWindow
#NAME: up
#PARENT: Gtk.TreePath.up
#COMMENT: %TRUE if @path has a parent, and the move was made
#NAME: file
#PARENT: Gtk.AppChooserDialog.new.Widget
#COMMENT: a #GFile
#NAME: ellipsize
#PARENT: Gtk.ToolItemGroup.set_ellipsize.none
#COMMENT: the #PangoEllipsizeMode labels in @group should use
#NAME: icon_name
#PARENT: Gtk.Widget.drag_source_set_icon_name.none
#COMMENT: name of icon to use
#NAME: section
#PARENT: Gtk.CssSection.get_end_position.guint
#COMMENT: the section
#NAME: get_visible
#PARENT: Gtk.TextMark
#COMMENT: Returns %TRUE if the mark is visible (i.e. a cursor is displayed
for it).
#NAME: set_snap_edge
#PARENT: Gtk.HandleBox
#COMMENT: Sets the snap edge of a handlebox. The snap edge is
the edge of the detached child that must be aligned
with the corresponding edge of the “ghost” left
behind when the child was detached to reattach
the torn-off window. Usually, the snap edge should
be chosen so that it stays in the same place on
the screen when the handlebox is torn off.

If the snap edge is not set, then an appropriate value
will be guessed from the handle position. If the
handle position is %GTK_POS_RIGHT or %GTK_POS_LEFT,
then the snap edge will be %GTK_POS_TOP, otherwise
it will be %GTK_POS_LEFT.
#NAME: get_current_event_device
#PARENT: Gtk
#COMMENT: If there is a current event and it has a device, return that
device, otherwise return %NULL.
#NAME: context
#PARENT: Gtk.StyleContext.get_scale.gint
#COMMENT: a #GtkStyleContext
#NAME: file
#PARENT: Gtk.FileChooser.unselect_file.none
#COMMENT: a #GFile
#NAME: get_path_at_pos
#PARENT: Gtk.TreeView.get_path_at_pos
#COMMENT: %TRUE if a row exists at that coordinate.
#NAME: is_selected
#PARENT: Gtk.FlowBoxChild.is_selected
#COMMENT: %TRUE if @child is selected
#NAME: cell_area
#PARENT: Gtk.CellRendererClass.activate.activate.gboolean
#COMMENT: cell area as passed to gtk_cell_renderer_render()
#NAME: get_item_at_pos
#PARENT: Gtk.IconView
#COMMENT: Finds the path at the point (@x, @y), relative to bin_window coordinates.
In contrast to gtk_icon_view_get_path_at_pos(), this function also
obtains the cell at the specified position. The returned path should
be freed with gtk_tree_path_free().
See gtk_icon_view_convert_widget_to_bin_window_coords() for converting
widget coordinates to bin_window coordinates.
#NAME: load_key_file
#PARENT: Gtk.PageSetup
#COMMENT: Reads the page setup from the group @group_name in the key file
@key_file.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_rules_hint.none
#COMMENT: a #GtkTreeView
#NAME: frame
#PARENT: Gtk.Frame.get_label_widget.Widget
#COMMENT: a #GtkFrame
#NAME: yalign
#PARENT: Gtk.Label.set_yalign.none
#COMMENT: the new yalign value, between 0 and 1
#NAME: new_with_mnemonic
#PARENT: Gtk.RadioMenuItem
#COMMENT: Creates a new #GtkRadioMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.
#NAME: background_area
#PARENT: Gtk.CellRenderer.render.none
#COMMENT: entire cell area (including tree expanders and maybe
   padding on the sides)
#NAME: window
#PARENT: Gtk.Application.add_window.none
#COMMENT: a #GtkWindow
#NAME: path
#PARENT: Gtk.StyleProvider.get_style.StyleProperties
#COMMENT: #GtkWidgetPath to query
#NAME: get_editable
#PARENT: Gtk.TextView.get_editable
#COMMENT: whether text is editable by default
#NAME: widget
#PARENT: Gtk.Widget.get_can_focus.gboolean
#COMMENT: a #GtkWidget
#NAME: height
#PARENT: Gtk.CellAreaContextClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: a proposed height for allocation
#NAME: dialog
#PARENT: Gtk.MessageDialog.set_image.none
#COMMENT: a #GtkMessageDialog
#NAME: widget
#PARENT: Gtk.Widget.get_no_show_all.gboolean
#COMMENT: a #GtkWidget
#NAME: value_changed
#PARENT: Gtk.Adjustment
#COMMENT: Emits a #GtkAdjustment::value_changed signal from the #GtkAdjustment.
This is typically called by the owner of the #GtkAdjustment after it has
changed the #GtkAdjustment:value property.
#NAME: 
#PARENT: Gtk.ListStore.insert_with_values.none...
#COMMENT: pairs of column number and value, terminated with -1
#NAME: starts_display_line
#PARENT: Gtk.TextView
#COMMENT: Determines whether @iter is at the start of a display line.
See gtk_text_view_forward_display_line() for an explanation of
display lines vs. paragraphs.
#NAME: area
#PARENT: Gtk.CellArea.activate.gboolean
#COMMENT: a #GtkCellArea
#NAME: load_icon
#PARENT: Gtk.IconTheme
#COMMENT: Looks up an icon in an icon theme, scales it to the given size
and renders it into a pixbuf. This is a convenience function;
if more details about the icon are needed, use
gtk_icon_theme_lookup_icon() followed by gtk_icon_info_load_icon().

Note that you probably want to listen for icon theme changes and
update the icon. This is usually done by connecting to the
GtkWidget::style-set signal. If for some reason you do not want to
update the icon when the icon theme changes, you should consider
using gdk_pixbuf_copy() to make a private copy of the pixbuf
returned by this function. Otherwise GTK+ may need to keep the old
icon theme loaded, which would be a waste of memory.
#NAME: role
#PARENT: Gtk.ModelButton
#COMMENT: Specifies whether the button is a plain, check or radio button.
When #GtkActionable:action-name is set, the role will be determined
from the action and does not have to be set explicitly.
#NAME: set_reorderable
#PARENT: Gtk.TreeViewColumn
#COMMENT: If @reorderable is %TRUE, then the column can be reordered by the end user
dragging the header.
#NAME: step
#PARENT: Gtk.Scale.new_with_range.Widget
#COMMENT: step increment (tick size) used with keyboard shortcuts
#NAME: unref
#PARENT: Gtk.TargetList
#COMMENT: Decreases the reference count of a #GtkTargetList by one.
If the resulting reference count is zero, frees the list.
#NAME: data
#PARENT: Gtk.ClipboardTargetsReceivedFunc.none
#COMMENT: the @user_data supplied to
  gtk_clipboard_request_targets().
#NAME: get_license
#PARENT: Gtk.AboutDialog.get_license
#COMMENT: The license information. The string is owned by the about
 dialog and must not be modified.
#NAME: get_reserve_toggle_size
#PARENT: Gtk.Menu
#COMMENT: Returns whether the menu reserves space for toggles and
icons, regardless of their actual presence.
#NAME: assistant
#PARENT: Gtk.Assistant.get_page_type.AssistantPageType
#COMMENT: a #GtkAssistant
#NAME: assistant
#PARENT: Gtk.Assistant.set_current_page.none
#COMMENT: a #GtkAssistant
#NAME: STOCK_CANCEL
#PARENT: Gtk
#COMMENT: The “Cancel” item and icon.
#NAME: widget
#PARENT: Gtk.CellRendererClass.start_editing.start_editing.CellEditable
#COMMENT: widget that received the event
#NAME: position
#PARENT: Gtk.ComboBoxText.remove.none
#COMMENT: Index of the item to remove
#NAME: widget
#PARENT: Gtk.Widget.set_parent.none
#COMMENT: a #GtkWidget
#NAME: widget
#PARENT: Gtk.Widget.set_window.none
#COMMENT: a #GtkWidget
#NAME: prepend_page
#PARENT: Gtk.Assistant
#COMMENT: Prepends a page to the @assistant.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_has_tooltip.none
#COMMENT: a #GtkStatusIcon
#NAME: get_screen
#PARENT: Gtk.Widget
#COMMENT: Get the #GdkScreen from the toplevel window associated with
this widget. This function can only be called after the widget
has been added to a widget hierarchy with a #GtkWindow
at the top.

In general, you should only create screen specific
resources when a widget has been realized, and you should
free those resources when the widget is unrealized.
#NAME: page
#PARENT: Gtk.Assistant.set_page_complete.none
#COMMENT: a page of @assistant
#NAME: get_focus_child
#PARENT: Gtk.Container.get_focus_child
#COMMENT: The child widget which will receive the
         focus inside @container when the @conatiner is focussed,
         or %NULL if none is set.
#NAME: copy
#PARENT: Gtk.PrintSettings
#COMMENT: Copies a #GtkPrintSettings object.
#NAME: add_mnemonic
#PARENT: Gtk.Window
#COMMENT: Adds a mnemonic to this window.
#NAME: print_run_page_setup_dialog_async
#PARENT: Gtk
#COMMENT: Runs a page setup dialog, letting the user modify the values from @page_setup.

In contrast to gtk_print_run_page_setup_dialog(), this function  returns after
showing the page setup dialog on platforms that support this, and calls @done_cb
from a signal handler for the ::response signal of the dialog.
#NAME: child_type
#PARENT: Gtk.ContainerClass.child_type.child_type
#COMMENT: a #GType.
#NAME: find
#PARENT: Gtk.AccelGroup.find
#COMMENT: the key of the first entry passing
   @find_func. The key is owned by GTK+ and must not be freed.
#NAME: max_value
#PARENT: Gtk.LevelBar.new_for_interval.Widget
#COMMENT: a positive value
#NAME: menu_item
#PARENT: Gtk.MenuItem.set_reserve_indicator.none
#COMMENT: a #GtkMenuItem
#NAME: settings
#PARENT: Gtk.PrintSettings.set_finishings.none
#COMMENT: a #GtkPrintSettings
#NAME: widget
#PARENT: Gtk.Widget.unmap.none
#COMMENT: a #GtkWidget
#NAME: widget
#PARENT: Gtk.paint_focus.none
#COMMENT: the widget
#NAME: STOCK_UNDERLINE
#PARENT: Gtk
#COMMENT: The “Underline” item and icon.
#NAME: context
#PARENT: Gtk.IMContextClass.get_preedit_string.get_preedit_string.none
#COMMENT: a #GtkIMContext
#NAME: STOCK_DISCARD
#PARENT: Gtk
#COMMENT: The “Discard” item.
#NAME: table
#PARENT: Gtk.Table.resize.none
#COMMENT: The #GtkTable you wish to change the size of.
#NAME: x
#PARENT: Gtk.render_handle.none
#COMMENT: X origin of the rectangle
#NAME: get_show_close_button
#PARENT: Gtk.HeaderBar.get_show_close_button
#COMMENT: %TRUE if the decorations are shown
#NAME: chooser
#PARENT: Gtk.FileChooser.set_select_multiple.none
#COMMENT: a #GtkFileChooser
#NAME: widget
#PARENT: Gtk.FlowBox.insert.none
#COMMENT: the #GtkWidget to add
#NAME: show_tips
#PARENT: Gtk.RecentChooser.set_show_tips.none
#COMMENT: %TRUE if tooltips should be shown
#NAME: y
#PARENT: Gtk.render_handle.none
#COMMENT: Y origin of the rectangle
#NAME: chooser
#PARENT: Gtk.FileChooser.set_uri.gboolean
#COMMENT: a #GtkFileChooser
#NAME: user_data
#PARENT: Gtk.ListBoxFilterFunc.gboolean
#COMMENT: user data
#NAME: iter
#PARENT: Gtk.TextIter.backward_word_start.gboolean
#COMMENT: a #GtkTextIter
#NAME: accel_groups_activate
#PARENT: Gtk.accel_groups_activate
#COMMENT: %TRUE if an accelerator was activated and handled
    this keypress
#NAME: info
#PARENT: Gtk.TargetEntry
#COMMENT: an application-assigned integer ID which will
    get passed as a parameter to e.g the #GtkWidget::selection-get
    signal. It allows the application to identify the target
    type without extensive string compares.
#NAME: widget
#PARENT: Gtk.selection_add_target.none
#COMMENT: a #GtkWidget
#NAME: 
#PARENT: Gtk.test_display_button_window.Widget...
#COMMENT: %NULL terminated list of (const char *label, int *nump) pairs.
#NAME: get_alignment
#PARENT: Gtk.TreeViewColumn.get_alignment
#COMMENT: The current alignent of @tree_column.
#NAME: permission
#PARENT: Gtk.LockButton.new.Widget
#COMMENT: a #GPermission
#NAME: not_found
#PARENT: Gtk.RecentManagerError
#COMMENT: the URI specified does not exists in
  the recently used resources list.
#NAME: selected
#PARENT: Gtk.StateFlags
#COMMENT: Widget is selected.
#NAME: TreeModelFlags
#PARENT: Gtk
#COMMENT: These flags indicate various properties of a #GtkTreeModel.

They are returned by gtk_tree_model_get_flags(), and must be
static for the lifetime of the object. A more complete description
of #GTK_TREE_MODEL_ITERS_PERSIST can be found in the overview of
this section.
#NAME: tree_row_reference_reordered
#PARENT: Gtk
#COMMENT: Lets a set of row reference created by
gtk_tree_row_reference_new_proxy() know that the
model emitted the #GtkTreeModel::rows-reordered signal.
#NAME: area
#PARENT: Gtk.CellArea.is_activatable.gboolean
#COMMENT: a #GtkCellArea
#NAME: modal
#PARENT: Gtk.Popover.set_modal.none
#COMMENT: #TRUE to make popover claim all input within the toplevel
#NAME: add_provider_for_screen
#PARENT: Gtk.StyleContext
#COMMENT: Adds a global style provider to @screen, which will be used
in style construction for all #GtkStyleContexts under @screen.

GTK+ uses this to make styling information from #GtkSettings
available.

Note: If both priorities are the same, A #GtkStyleProvider
added through gtk_style_context_add_provider() takes precedence
over another added through this function.
#NAME: TextMark
#PARENT: Gtk
#COMMENT: You may wish to begin by reading the
[text widget conceptual overview][TextWidget]
which gives an overview of all the objects and data
types related to the text widget and how they work together.

A #GtkTextMark is like a bookmark in a text buffer; it preserves a position in
the text. You can convert the mark to an iterator using
gtk_text_buffer_get_iter_at_mark(). Unlike iterators, marks remain valid across
buffer mutations, because their behavior is defined when text is inserted or
deleted. When text containing a mark is deleted, the mark remains in the
position originally occupied by the deleted text. When text is inserted at a
mark, a mark with “left gravity” will be moved to the
beginning of the newly-inserted text, and a mark with “right
gravity” will be moved to the end.

Note that “left” and “right” here refer to logical direction (left
is the toward the start of the buffer); in some languages such as
Hebrew the logically-leftmost text is not actually on the left when
displayed.

Marks are reference counted, but the reference count only controls the validity
of the memory; marks can be deleted from the buffer at any time with
gtk_text_buffer_delete_mark(). Once deleted from the buffer, a mark is
essentially useless.

Marks optionally have names; these can be convenient to avoid passing the
#GtkTextMark object around.

Marks are typically created using the gtk_text_buffer_create_mark() function.
#NAME: has_screen
#PARENT: Gtk.Widget.has_screen
#COMMENT: %TRUE if there is a #GdkScreen associcated
  with the widget.
#NAME: scale-changed
#PARENT: Gtk.GestureZoom
#COMMENT: This signal is emitted whenever the distance between both tracked
sequences changes.
#NAME: data_destroy
#PARENT: Gtk.RecentChooserIface.set_sort_func.set_sort_func.none
#COMMENT: destroy notifier for @sort_data, or %NULL
#NAME: child_iter
#PARENT: Gtk.TreeModelSort.convert_iter_to_child_iter.none
#COMMENT: An uninitialized #GtkTreeIter
#NAME: klass
#PARENT: Gtk.WidgetClass.list_style_properties.GObject.ParamSpec
#COMMENT: a #GtkWidgetClass
#NAME: placeholder-text
#PARENT: Gtk.Entry
#COMMENT: The text that will be displayed in the #GtkEntry when it is empty
and unfocused.
#NAME: icon
#PARENT: Gtk.NumerableIcon.set_background_gicon.none
#COMMENT: a #GIcon, or %NULL
#NAME: get_show_desktop
#PARENT: Gtk.PlacesSidebar.get_show_desktop
#COMMENT: %TRUE if the sidebar will display a builtin shortcut to the desktop folder.
#NAME: get_pixbuf
#PARENT: Gtk.StatusIcon
#COMMENT: Gets the #GdkPixbuf being displayed by the #GtkStatusIcon.
The storage type of the status icon must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_PIXBUF (see gtk_status_icon_get_storage_type()).
The caller of this function does not own a reference to the
returned pixbuf.
#NAME: get_ellipsize
#PARENT: Gtk.ToolItemGroup.get_ellipsize
#COMMENT: the #PangoEllipsizeMode of @group
#NAME: device
#PARENT: Gtk.device_grab_add.none
#COMMENT: a #GdkDevice to grab on.
#NAME: class_path
#PARENT: Gtk.rc_get_style_by_paths.Style
#COMMENT: the class path to use when looking up the style,
    or %NULL if no matching against the class path should be done.
#NAME: binding_entry_add_signal_from_string
#PARENT: Gtk.binding_entry_add_signal_from_string
#COMMENT: %G_TOKEN_NONE if the signal was successfully parsed and added,
    the expected token otherwise
#NAME: get-child-position
#PARENT: Gtk.Overlay
#COMMENT: The ::get-child-position signal is emitted to determine
the position and size of any overlay child widgets. A
handler for this signal should fill @allocation with
the desired position and size for @widget, relative to
the 'main' child of @overlay.

The default handler for this signal uses the @widget's
halign and valign properties to determine the position
and gives the widget its natural size (except that an
alignment of %GTK_ALIGN_FILL will cause the overlay to
be full-width/height). If the main child is a
#GtkScrolledWindow, the overlays are placed relative
to its contents.
#NAME: iter_n_children
#PARENT: Gtk.TreeModelIface.iter_n_children.iter_n_children
#COMMENT: the number of children of @iter
#NAME: get_template_child
#PARENT: Gtk.Widget.get_template_child
#COMMENT: The object built in the template XML with the id @name
#NAME: button
#PARENT: Gtk.Button.set_image.none
#COMMENT: a #GtkButton
#NAME: button
#PARENT: Gtk.LockButton.get_permission.Gio.Permission
#COMMENT: a #GtkLockButton
#NAME: STYLE_CLASS_SUBTITLE
#PARENT: Gtk
#COMMENT: A CSS class used for the subtitle label in a titlebar in
a toplevel window.
#NAME: tree_model
#PARENT: Gtk.TreeModel.iter_next.gboolean
#COMMENT: a #GtkTreeModel
#NAME: for_window
#PARENT: Gtk.IconInfo.load_surface.cairo.Surface
#COMMENT: #GdkWindow to optimize drawing for, or %NULL
#NAME: stop
#PARENT: Gtk.Spinner
#COMMENT: Stops the animation of the spinner.
#NAME: get_priority
#PARENT: Gtk.TextTag
#COMMENT: Get the tag priority.
#NAME: Assistant
#PARENT: Gtk
#COMMENT: A #GtkAssistant is a widget used to represent a generally complex
operation splitted in several steps, guiding the user through its
pages and controlling the page flow to collect the necessary data.

The design of GtkAssistant is that it controls what buttons to show
and to make sensitive, based on what it knows about the page sequence
and the [type][GtkAssistantPageType] of each page,
in addition to state information like the page
[completion][gtk-assistant-set-page-complete]
and [committed][gtk-assistant-commit] status.

If you have a case that doesn’t quite fit in #GtkAssistants way of
handling buttons, you can use the #GTK_ASSISTANT_PAGE_CUSTOM page
type and handle buttons yourself.

# GtkAssistant as GtkBuildable

The GtkAssistant implementation of the #GtkBuildable interface
exposes the @action_area as internal children with the name
“action_area”.

To add pages to an assistant in #GtkBuilder, simply add it as a
child to the GtkAssistant object, and set its child properties
as necessary.
#NAME: find
#PARENT: Gtk.TargetList
#COMMENT: Looks up a given target in a #GtkTargetList.
#NAME: invalid_property
#PARENT: Gtk.BuilderError
#COMMENT: The specified property is unknown for the object class.
#NAME: accept_filename
#PARENT: Gtk.FileChooserConfirmation
#COMMENT: The file chooser will
 terminate and accept the user’s choice of a file name.
#NAME: get_preview_text
#PARENT: Gtk.FontChooser
#COMMENT: Gets the text displayed in the preview area.
#NAME: general
#PARENT: Gtk.PrintError
#COMMENT: An unspecified error occurred.
#NAME: func
#PARENT: Gtk.TreeView.set_destroy_count_func.none
#COMMENT: Function to be called when a view row is destroyed, or %NULL
#NAME: get_justify
#PARENT: Gtk.Label
#COMMENT: Returns the justification of the label. See gtk_label_set_justify().
#NAME: filter_iter
#PARENT: Gtk.TreeModelFilter.convert_child_iter_to_iter.gboolean
#COMMENT: An uninitialized #GtkTreeIter.
#NAME: prepend_type
#PARENT: Gtk.WidgetPath
#COMMENT: Prepends a widget type to the widget hierachy represented by @path.
#NAME: new
#PARENT: Gtk.Entry
#COMMENT: Creates a new entry.
#NAME: foreground-rgba
#PARENT: Gtk.TextTag
#COMMENT: Foreground color as a #GdkRGBA.
#NAME: proxy
#PARENT: Gtk.UIManager.disconnect-proxy.none
#COMMENT: the proxy
#NAME: has_window
#PARENT: Gtk.Widget.set_has_window.none
#COMMENT: whether or not @widget has a window.
#NAME: Allocation
#PARENT: Gtk
#COMMENT: A #GtkAllocation-struct of a widget represents region
which has been allocated to the widget by its parent. It is a subregion
of its parents allocation. See
[GtkWidget’s geometry management section][geometry-management] for
more information.
#NAME: rc_get_im_module_path
#PARENT: Gtk.rc_get_im_module_path
#COMMENT: a newly-allocated string containing the
   path in which to look for IM modules.
#NAME: wait_is_image_available
#PARENT: Gtk.Clipboard.wait_is_image_available
#COMMENT: %TRUE is there is an image available, %FALSE otherwise.
#NAME: icon_pos
#PARENT: Gtk.Entry.icon-release.none
#COMMENT: The position of the clicked icon
#NAME: drag_data_delete
#PARENT: Gtk.TreeDragSourceIface.drag_data_delete.drag_data_delete
#COMMENT: %TRUE if the row was successfully deleted
#NAME: get_mode
#PARENT: Gtk.TreeSelection
#COMMENT: Gets the selection mode for @selection. See
gtk_tree_selection_set_mode().
#NAME: iter_has_qname
#PARENT: Gtk.WidgetPath.iter_has_qname
#COMMENT: %TRUE if the widget at @pos has this name
#NAME: render_focus
#PARENT: Gtk
#COMMENT: Renders a focus indicator on the rectangle determined by @x, @y, @width, @height.

Typical focus rendering:

![](focus.png)
#NAME: get_vscrollbar
#PARENT: Gtk.ScrolledWindow.get_vscrollbar
#COMMENT: the vertical scrollbar of the scrolled window.
#NAME: text_view
#PARENT: Gtk.TextView.backward_display_line_start.gboolean
#COMMENT: a #GtkTextView
#NAME: off
#PARENT: Gtk.SensitivityType
#COMMENT: The arrow is always insensitive
#NAME: buffer
#PARENT: Gtk.TextBuffer.begin_user_action.none
#COMMENT: a #GtkTextBuffer
#NAME: window
#PARENT: Gtk.Window.get_application.Application
#COMMENT: a #GtkWindow
#NAME: add_shortcut_folder
#PARENT: Gtk.FileChooser
#COMMENT: Adds a folder to be displayed with the shortcut folders in a file chooser.
Note that shortcut folders do not get saved, as they are provided by the
application.  For example, you can use this to add a
“/usr/share/mydrawprogram/Clipart” folder to the volume list.
#NAME: get_visible
#PARENT: Gtk.TextMark.get_visible
#COMMENT: %TRUE if visible
#NAME: selection
#PARENT: Gtk.TreeSelection.set_select_function.none
#COMMENT: A #GtkTreeSelection.
#NAME: page_nr
#PARENT: Gtk.PrintOperationPreview.is_selected.gboolean
#COMMENT: a page number
#NAME: set_reserve_toggle_size
#PARENT: Gtk.Menu
#COMMENT: Sets whether the menu should reserve space for drawing toggles
or icons, regardless of their actual presence.
#NAME: setup
#PARENT: Gtk.PageSetup.set_paper_size_and_default_margins.none
#COMMENT: a #GtkPageSetup
#NAME: get_hard_margins
#PARENT: Gtk.PrintContext.get_hard_margins
#COMMENT: %TRUE if the hard margins were retrieved
#NAME: set_wrap_mode
#PARENT: Gtk.TextView
#COMMENT: Sets the line wrapping for the view.
#NAME: iter
#PARENT: Gtk.TreeModel.get_value.none
#COMMENT: the #GtkTreeIter-struct
#NAME: color
#PARENT: Gtk.ColorButton.new_with_color.Widget
#COMMENT: A #GdkColor to set the current color with
#NAME: menu_button
#PARENT: Gtk.MenuButton.get_popup.Menu
#COMMENT: a #GtkMenuButton
#NAME: get_current_path_string
#PARENT: Gtk.CellArea.get_current_path_string
#COMMENT: The current #GtkTreePath string for the current
attributes applied to @area. This string belongs to the area and
should not be freed.
#NAME: text
#PARENT: Gtk.MessageDialog
#COMMENT: The primary text of the message dialog. If the dialog has
a secondary text, this will appear as the title.
#NAME: get_group
#PARENT: Gtk.RadioButton.get_group
#COMMENT: a linked list
containing all the radio buttons in the same group
as @radio_button. The returned list is owned by the radio button
and must not be modified or freed.
#NAME: backward_display_line
#PARENT: Gtk.TextView.backward_display_line
#COMMENT: %TRUE if @iter was moved and is not on the end iterator
#NAME: widget
#PARENT: Gtk.Widget.get_clip.none
#COMMENT: a #GtkWidget
#NAME: markup
#PARENT: Gtk.CellView.new_with_markup.Widget
#COMMENT: the text to display in the cell view
#NAME: label
#PARENT: Gtk.Button.new_with_label.Widget
#COMMENT: The text you want the #GtkLabel to hold.
#NAME: add_id
#PARENT: Gtk.Socket
#COMMENT: Adds an XEMBED client, such as a #GtkPlug, to the #GtkSocket.  The
client may be in the same process or in a different process.

To embed a #GtkPlug in a #GtkSocket, you can either create the
#GtkPlug with `gtk_plug_new (0)`, call
gtk_plug_get_id() to get the window ID of the plug, and then pass that to the
gtk_socket_add_id(), or you can call gtk_socket_get_id() to get the
window ID for the socket, and call gtk_plug_new() passing in that
ID.

The #GtkSocket must have already be added into a toplevel window
 before you can make this call.
#NAME: vertical
#PARENT: Gtk.TreeViewGridLines
#COMMENT: Vertical grid lines.
#NAME: get_title
#PARENT: Gtk.FontButton
#COMMENT: Retrieves the title of the font chooser dialog.
#NAME: drag-update
#PARENT: Gtk.GestureDrag
#COMMENT: This signal is emitted whenever the dragging point moves.
#NAME: menu_button
#PARENT: Gtk.MenuButton.set_direction.none
#COMMENT: a #GtkMenuButton
#NAME: text
#PARENT: Gtk.ProgressBar.set_text.none
#COMMENT: a UTF-8 string, or %NULL
#NAME: down
#PARENT: Gtk.DirectionType
#COMMENT: Move down.
#NAME: copy_clipboard
#PARENT: Gtk.Editable
#COMMENT: Copies the contents of the currently selected content in the editable and
puts it on the clipboard.
#NAME: stock_id
#PARENT: Gtk.Image.set_from_stock.none
#COMMENT: a stock icon name
#NAME: end_iter
#PARENT: Gtk.TextBuffer.delete_interactive.gboolean
#COMMENT: end of range
#NAME: convert_path_to_child_path
#PARENT: Gtk.TreeModelFilter.convert_path_to_child_path
#COMMENT: A newly allocated #GtkTreePath, or %NULL.
#NAME: authors
#PARENT: Gtk.AboutDialog.set_authors.none
#COMMENT: a %NULL-terminated array of strings
#NAME: stock_id
#PARENT: Gtk.stock_lookup.gboolean
#COMMENT: a stock item name
#NAME: x_offset
#PARENT: Gtk.CellRenderer.get_size.none
#COMMENT: location to return x offset of cell relative to @cell_area, or %NULL
#NAME: qname
#PARENT: Gtk.WidgetPath.iter_has_qname.gboolean
#COMMENT: widget name as a #GQuark
#NAME: widget
#PARENT: Gtk.GestureSwipe.new.Gesture
#COMMENT: a #GtkWidget
#NAME: label
#PARENT: Gtk.Label.set_max_width_chars.none
#COMMENT: a #GtkLabel
#NAME: style
#PARENT: Gtk.IconInfo.load_symbolic_for_style.GdkPixbuf.Pixbuf
#COMMENT: a #GtkStyle to take the colors from
#NAME: clipboard
#PARENT: Gtk.Clipboard.get_owner.GObject.Object
#COMMENT: a #GtkClipboard
#NAME: parent_menu_item
#PARENT: Gtk.Menu.popup.none
#COMMENT: the menu item whose activation
    triggered the popup, or %NULL
#NAME: actions
#PARENT: Gtk.TreeView.enable_model_drag_source.none
#COMMENT: the bitmask of possible actions for a drag from this
   widget
#NAME: get_area
#PARENT: Gtk.CellLayout.get_area
#COMMENT: the cell area used by @cell_layout.
#NAME: box
#PARENT: Gtk.ListBox.unselect_row.none
#COMMENT: a #GtkListBox
#NAME: keyval
#PARENT: Gtk.binding_entry_remove.none
#COMMENT: key value of binding to remove
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_column_span_column.none
#COMMENT: A #GtkComboBox
#NAME: parent_class
#PARENT: Gtk.ComboBoxClass
#COMMENT: The parent class.
#NAME: width
#PARENT: Gtk.paint_resize_grip.none
#COMMENT: the width of the rectangle in which to draw the resize grip
#NAME: pattern
#PARENT: Gtk.Label.set_pattern.none
#COMMENT: The pattern as described above.
#NAME: size
#PARENT: Gtk.PaperSize.get_ppd_name.utf8
#COMMENT: a #GtkPaperSize object
#NAME: set_use_full_page
#PARENT: Gtk.PrintOperation
#COMMENT: If @full_page is %TRUE, the transformation for the cairo context
obtained from #GtkPrintContext puts the origin at the top left
corner of the page (which may not be the top left corner of the
sheet, depending on page orientation and the number of pages per
sheet). Otherwise, the origin is at the top left corner of the
imageable area (i.e. inside the margins).
#NAME: range
#PARENT: Gtk.Range.set_show_fill_level.none
#COMMENT: A #GtkRange
#NAME: STOCK_SORT_DESCENDING
#PARENT: Gtk
#COMMENT: The “Descending” item and icon.
#NAME: top_attach
#PARENT: Gtk.Table.attach.none
#COMMENT: the row number to attach the top of a child widget to.
#NAME: iter
#PARENT: Gtk.TextBuffer.insert_with_tags.none
#COMMENT: an iterator in @buffer
#NAME: widget
#PARENT: Gtk.Widget.get_device_enabled.gboolean
#COMMENT: a #GtkWidget
#NAME: parent_class
#PARENT: Gtk.AccelGroupClass
#COMMENT: The parent class.
#NAME: padding_bottom
#PARENT: Gtk.Alignment.get_padding.none
#COMMENT: location to store the padding
    for the bottom of the widget, or %NULL
#NAME: parent_class
#PARENT: Gtk.IconThemeClass
#COMMENT: The parent class.
#NAME: builder
#PARENT: Gtk.Builder.value_from_string.gboolean
#COMMENT: a #GtkBuilder
#NAME: entry
#PARENT: Gtk.Entry.get_overwrite_mode.gboolean
#COMMENT: a #GtkEntry
#NAME: get_show_dialog_item
#PARENT: Gtk.AppChooserButton
#COMMENT: Returns the current value of the #GtkAppChooserButton:show-dialog-item
property.
#NAME: direction
#PARENT: Gtk.MenuShell.cycle-focus.none
#COMMENT: the direction to cycle in
#NAME: row_deleted
#PARENT: Gtk.TreeModel
#COMMENT: Emits the #GtkTreeModel::row-deleted signal on @tree_model.

This should be called by models after a row has been removed.
The location pointed to by @path should be the location that
the row previously was at. It may not be a valid location anymore.

Nodes that are deleted are not unreffed, this means that any
outstanding references on the deleted node should not be released.
#NAME: widget
#PARENT: Gtk.Widget.queue_resize_no_redraw.none
#COMMENT: a #GtkWidget
#NAME: info
#PARENT: Gtk.RecentInfo.get_age.gint
#COMMENT: a #GtkRecentInfo
#NAME: STYLE_CLASS_WARNING
#PARENT: Gtk
#COMMENT: A CSS class for an area displaying a warning message,
such as those in infobars.

This is used by #GtkInfoBar.
#NAME: icon-size
#PARENT: Gtk.ToolPalette
#COMMENT: The size of the icons in a tool palette. When this property is set,
it overrides the default setting.

This should only be used for special-purpose tool palettes, normal
application tool palettes should respect the user preferences for the
size of icons.
#NAME: list_actions
#PARENT: Gtk.ActionGroup.list_actions
#COMMENT: an allocated list of the action objects in the action group
#NAME: state
#PARENT: Gtk.Gesture.set_sequence_state.gboolean
#COMMENT: the sequence state
#NAME: iter
#PARENT: Gtk.TextView.get_iter_location.none
#COMMENT: a #GtkTextIter
#NAME: delete_surrounding
#PARENT: Gtk.IMContextClass.delete_surrounding.delete_surrounding
#COMMENT: %TRUE if the signal was handled.
#NAME: pspec
#PARENT: Gtk.StyleProvider.get_style_property.gboolean
#COMMENT: The #GParamSpec to query
#NAME: tree_column
#PARENT: Gtk.TreeViewColumnClass.clicked.clicked.none
#COMMENT: a #GtkTreeViewColumn
#NAME: list_store
#PARENT: Gtk.ListStore.set_valuesv.none
#COMMENT: A #GtkListStore
#NAME: setup
#PARENT: Gtk.PageSetup.get_right_margin.gdouble
#COMMENT: a #GtkPageSetup
#NAME: backward_lines
#PARENT: Gtk.TextIter
#COMMENT: Moves @count lines backward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn’t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves forward by 0 - @count lines.
#NAME: container
#PARENT: Gtk.Container.add.none
#COMMENT: a #GtkContainer
#NAME: accel_group
#PARENT: Gtk.ImageMenuItem.new_from_stock.Widget
#COMMENT: the #GtkAccelGroup to add the menu items
  accelerator to, or %NULL.
#NAME: iter
#PARENT: Gtk.TextIter.can_insert.gboolean
#COMMENT: an iterator
#NAME: menu_item_id
#PARENT: Gtk.ToolItem.set_proxy_menu_item.none
#COMMENT: a string used to identify @menu_item
#NAME: tool_item
#PARENT: Gtk.ToolItemClass.toolbar_reconfigured.toolbar_reconfigured.none
#COMMENT: a #GtkToolItem
#NAME: intersection
#PARENT: Gtk.Widget.intersect.gboolean
#COMMENT: rectangle to store intersection of @widget and @area
#NAME: group
#PARENT: Gtk.RadioMenuItem.new_with_label.Widget
#COMMENT: 
        group the radio menu item is inside, or %NULL
#NAME: widget_class
#PARENT: Gtk.WidgetClass.set_accessible_role.none
#COMMENT: class to set the accessible role for
#NAME: cell
#PARENT: Gtk.CellRendererClass.get_preferred_height.get_preferred_height.none
#COMMENT: a #GtkCellRenderer instance
#NAME: settings
#PARENT: Gtk.rc_find_pixmap_in_path.filename
#COMMENT: a #GtkSettings
#NAME: icon_info
#PARENT: Gtk.IconInfo.set_raw_coordinates.none
#COMMENT: a #GtkIconInfo
#NAME: get_application
#PARENT: Gtk.Window
#COMMENT: Gets the #GtkApplication associated with the window (if any).
#NAME: close
#PARENT: Gtk.Window
#COMMENT: Requests that the window is closed, similar to what happens
when a window manager close button is clicked.

This function can be used with close buttons in custom
titlebars.
#NAME: keyval
#PARENT: Gtk.binding_entry_skip.none
#COMMENT: key value of binding to skip
#NAME: child
#PARENT: Gtk.ActionBar.pack_start.none
#COMMENT: the #GtkWidget to be added to @action_bar
#NAME: application
#PARENT: Gtk.Application.remove_accelerator.none
#COMMENT: a #GtkApplication
#NAME: page
#PARENT: Gtk.Assistant.prepend_page.gint
#COMMENT: a #GtkWidget
#NAME: get_preferred_height
#PARENT: Gtk.CellArea
#COMMENT: Retrieves a cell area’s initial minimum and natural height.

@area will store some geometrical information in @context along the way;
when requesting sizes over an arbitrary number of rows, it’s not important
to check the @minimum_height and @natural_height of this call but rather to
consult gtk_cell_area_context_get_preferred_height() after a series of
requests.
#NAME: get_default_left_margin
#PARENT: Gtk.PaperSize.get_default_left_margin
#COMMENT: the default left margin
#NAME: copy
#PARENT: Gtk.StockItem
#COMMENT: Copies a stock item, mostly useful for language bindings and not in applications.
#NAME: event
#PARENT: Gtk.Widget.event
#COMMENT: %TRUE to stop other handlers from being invoked for the event
and to cancel the emission of the second specific ::event signal.
  %FALSE to propagate the event further and to allow the emission of
  the second signal. The ::event-after signal is emitted regardless of
  the return value.
#NAME: icon
#PARENT: Gtk.Entry.set_icon_from_gicon.none
#COMMENT: The icon to set, or %NULL
#NAME: height
#PARENT: Gtk.PaperSize.new_custom.PaperSize
#COMMENT: the paper height, in units of @unit
#NAME: get_visible_slice
#PARENT: Gtk.TextIter
#COMMENT: Like gtk_text_iter_get_slice(), but invisible text is not included.
Invisible text is usually invisible because a #GtkTextTag with the
“invisible” attribute turned on has been applied to it.
#NAME: phase
#PARENT: Gtk.EventController.set_propagation_phase.none
#COMMENT: a propagation phase
#NAME: renderer
#PARENT: Gtk.CellArea.add_focus_sibling.none
#COMMENT: the #GtkCellRenderer expected to have focus
#NAME: parent_menu_item
#PARENT: Gtk.Menu.popup_for_device.none
#COMMENT: the menu item whose activation triggered
    the popup, or %NULL
#NAME: set_screen
#PARENT: Gtk.Menu
#COMMENT: Sets the #GdkScreen on which the menu will be displayed.
#NAME: unit
#PARENT: Gtk.PaperSize.get_default_bottom_margin.gdouble
#COMMENT: the unit for the return value, not %GTK_UNIT_NONE
#NAME: popover
#PARENT: Gtk.Popover.set_pointing_to.none
#COMMENT: a #GtkPopover
#NAME: invisible
#PARENT: Gtk.Invisible.set_screen.none
#COMMENT: a #GtkInvisible.
#NAME: insert-child-anchor
#PARENT: Gtk.TextBuffer
#COMMENT: The ::insert-child-anchor signal is emitted to insert a
#GtkTextChildAnchor in a #GtkTextBuffer.
Insertion actually occurs in the default handler.

Note that if your handler runs before the default handler it must
not invalidate the @location iter (or has to revalidate it).
The default signal handler revalidates it to be placed after the
inserted @anchor.

See also: gtk_text_buffer_insert_child_anchor().
#NAME: iter
#PARENT: Gtk.TextView.backward_display_line_start.gboolean
#COMMENT: a #GtkTextIter
#NAME: get_transient_for
#PARENT: Gtk.Window.get_transient_for
#COMMENT: the transient parent for this window, or %NULL
   if no transient parent has been set.
#NAME: user_data
#PARENT: Gtk.TreeSortable.set_sort_func.none
#COMMENT: User data to pass to @sort_func, or %NULL
#NAME: disconnect_key
#PARENT: Gtk.AccelGroup.disconnect_key
#COMMENT: %TRUE if there was an accelerator which could be
    removed, %FALSE otherwise
#NAME: 
#PARENT: Gtk.RecentChooserDialog.new_for_manager.Widget...
#COMMENT: response ID for the first button, then additional (button, id)
  pairs, ending with %NULL
#NAME: set_value_pos
#PARENT: Gtk.Scale
#COMMENT: Sets the position in which the current value is displayed.
#NAME: new
#PARENT: Gtk.TextAttributes
#COMMENT: Creates a #GtkTextAttributes, which describes
a set of properties on some text.
#NAME: select_uri
#PARENT: Gtk.FileChooser
#COMMENT: Selects the file to by @uri. If the URI doesn’t refer to a
file in the current folder of @chooser, then the current folder of
@chooser will be changed to the folder containing @filename.
#NAME: area
#PARENT: Gtk.GLArea.set_has_depth_buffer.none
#COMMENT: a #GtkGLArea
#NAME: source
#PARENT: Gtk.IconSource.get_size_wildcarded.gboolean
#COMMENT: a #GtkIconSource
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_tooltip_text.none
#COMMENT: a #GtkStatusIcon
#NAME: add_child_at_anchor
#PARENT: Gtk.TextView
#COMMENT: Adds a child widget in the text buffer, at the given @anchor.
#NAME: set_name
#PARENT: Gtk.binding_set_find.BindingSet
#COMMENT: unique binding set name
#NAME: StateType
#PARENT: Gtk
#COMMENT: This type indicates the current state of a widget; the state determines how
the widget is drawn. The #GtkStateType enumeration is also used to
identify different colors in a #GtkStyle for drawing, so states can be
used for subparts of a widget as well as entire widgets.
#NAME: property_value
#PARENT: Gtk.RcProperty.parse_requisition.gboolean
#COMMENT: a #GValue which must hold boxed values.
#NAME: place_cursor
#PARENT: Gtk.TextBuffer
#COMMENT: This function moves the “insert” and “selection_bound” marks
simultaneously.  If you move them to the same place in two steps
with gtk_text_buffer_move_mark(), you will temporarily select a
region in between their old and new locations, which can be pretty
inefficient since the temporarily-selected region will force stuff
to be recalculated. This function moves them as a unit, which can
be optimized.
#NAME: inside_selection
#PARENT: Gtk.TextAppearance
#COMMENT: This are only used when we are actually laying
  out and rendering a paragraph; not when a #GtkTextAppearance is
  part of a #GtkTextAttributes.
#NAME: active-id
#PARENT: Gtk.ComboBox
#COMMENT: The value of the ID column of the active row.
#NAME: unbind
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: x
#PARENT: Gtk.Widget.drag-data-received.none
#COMMENT: where the drop happened
#NAME: CellView
#PARENT: Gtk
#COMMENT: A #GtkCellView displays a single row of a #GtkTreeModel using a #GtkCellArea
and #GtkCellAreaContext. A #GtkCellAreaContext can be provided to the
#GtkCellView at construction time in order to keep the cellview in context
of a group of cell views, this ensures that the renderers displayed will
be properly aligned with eachother (like the aligned cells in the menus
of #GtkComboBox).

#GtkCellView is #GtkOrientable in order to decide in which orientation
the underlying #GtkCellAreaContext should be allocated. Taking the #GtkComboBox
menu as an example, cellviews should be oriented horizontally if the menus are
listed top-to-bottom and thus all share the same width but may have separate
individual heights (left-to-right menus should be allocated vertically since
they all share the same height but may have variable widths).
#NAME: yalign
#PARENT: Gtk.Button.set_alignment.none
#COMMENT: the vertical position of the child, 0.0 is top aligned,
  1.0 is bottom aligned
#NAME: props
#PARENT: Gtk.StyleProperties.get.none
#COMMENT: a #GtkStyleProperties
#NAME: y
#PARENT: Gtk.Widget.drag-data-received.none
#COMMENT: where the drop happened
#NAME: get_item_column
#PARENT: Gtk.IconView.get_item_column
#COMMENT: The column in which the item is displayed
#NAME: custom_widget
#PARENT: Gtk.Tooltip.set_custom.none
#COMMENT: a #GtkWidget, or %NULL to unset the old custom widget.
#NAME: hot_x
#PARENT: Gtk.drag_set_icon_name.none
#COMMENT: the X offset of the hotspot within the icon
#NAME: accel_path
#PARENT: Gtk.AccelMap.add_entry.none
#COMMENT: valid accelerator path
#NAME: cell
#PARENT: Gtk.CellLayout.pack_end.none
#COMMENT: a #GtkCellRenderer
#NAME: set_action_widget
#PARENT: Gtk.Notebook
#COMMENT: Sets @widget as one of the action widgets. Depending on the pack type
the widget will be placed before or after the tabs. You can use
a #GtkBox if you need to pack more than one widget on the same side.

Note that action widgets are “internal” children of the notebook and thus
not included in the list returned from gtk_container_foreach().
#NAME: lru
#PARENT: Gtk.RecentSortType
#COMMENT: Sort the returned list with the least recently used
  items first.
#NAME: hot_y
#PARENT: Gtk.drag_set_icon_name.none
#COMMENT: the Y offset of the hotspot within the icon
#NAME: new_from_stock
#PARENT: Gtk.Button.new_from_stock
#COMMENT: a new #GtkButton
#NAME: widget
#PARENT: Gtk.GestureRotate.new.Gesture
#COMMENT: a #GtkWidget
#NAME: box
#PARENT: Gtk.Box.set_spacing.none
#COMMENT: a #GtkBox
#NAME: cell_area
#PARENT: Gtk.CellArea.render.none
#COMMENT: the @widget relative coordinates for @area
#NAME: get_modal
#PARENT: Gtk.Popover
#COMMENT: Returns whether the popover is modal, see gtk_popover_set_modal to
see the implications of this.
#NAME: table
#PARENT: Gtk.Table.get_size.none
#COMMENT: a #GtkTable
#NAME: get_icon_factory
#PARENT: Gtk.StyleProviderIface.get_icon_factory.get_icon_factory
#COMMENT: The icon factory to use for @path, or %NULL
#NAME: get_buffer
#PARENT: Gtk.TextIter.get_buffer
#COMMENT: the buffer
#NAME: set_position
#PARENT: Gtk.Window
#COMMENT: Sets a position constraint for this window. If the old or new
constraint is %GTK_WIN_POS_CENTER_ALWAYS, this will also cause
the window to be repositioned to satisfy the new constraint.
#NAME: targets
#PARENT: Gtk.IconView.enable_model_drag_source.none
#COMMENT: the table of targets that the drag will
          support
#NAME: info_bar
#PARENT: Gtk.InfoBarClass.response.response.none
#COMMENT: a #GtkInfoBar
#NAME: question
#PARENT: Gtk.MessageType
#COMMENT: Question requiring a choice
#NAME: get_scale_factor
#PARENT: Gtk.Widget
#COMMENT: Retrieves the internal scale factor that maps from window coordinates
to the actual device pixels. On traditional systems this is 1, on
high density outputs, it can be a higher value (typically 2).

See gdk_window_get_scale_factor().
#NAME: widget
#PARENT: Gtk.Widget.set_has_window.none
#COMMENT: a #GtkWidget
#NAME: get_active
#PARENT: Gtk.Menu.get_active
#COMMENT: the #GtkMenuItem that was last selected
         in the menu.  If a selection has not yet been made, the
         first menu item is selected.
#NAME: icon_name
#PARENT: Gtk.StatusIcon.new_from_icon_name.StatusIcon
#COMMENT: an icon name
#NAME: set_sort_order
#PARENT: Gtk.TreeViewColumn
#COMMENT: Changes the appearance of the sort indicator.

This does not actually sort the model.  Use
gtk_tree_view_column_set_sort_column_id() if you want automatic sorting
support.  This function is primarily for custom sorting behavior, and should
be used in conjunction with gtk_tree_sortable_set_sort_column_id() to do
that. For custom models, the mechanism will vary.

The sort indicator changes direction to indicate normal sort or reverse sort.
Note that you must have the sort indicator enabled to see anything when
calling this function; see gtk_tree_view_column_set_sort_indicator().
#NAME: binding_set_by_class
#PARENT: Gtk
#COMMENT: This function returns the binding set named after the type name of
the passed in class structure. New binding sets are created on
demand by this function.
#NAME: browse
#PARENT: Gtk.SelectionMode
#COMMENT: Exactly one element is selected.
    In some circumstances, such as initially or during a search
    operation, it’s possible for no element to be selected with
    %GTK_SELECTION_BROWSE. What is really enforced is that the user
    can’t deselect a currently selected element except by selecting
    another element.
#NAME: stack
#PARENT: Gtk.Stack.set_hhomogeneous.none
#COMMENT: a #GtkStack
#NAME: stack
#PARENT: Gtk.Stack.set_homogeneous.none
#COMMENT: a #GtkStack
#NAME: bg
#PARENT: Gtk.Style
#COMMENT: Set of background #GdkColor
#NAME: unregister_window
#PARENT: Gtk.Widget
#COMMENT: Unregisters a #GdkWindow from the widget that was previously set up with
gtk_widget_register_window(). You need to call this when the window is
no longer used by the widget, such as when you destroy it.
#NAME: force_hide
#PARENT: Gtk.MenuShell.activate-current.none
#COMMENT: if %TRUE, hide the menu after activating the menu item
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_text.utf8
#COMMENT: a #GtkTextBuffer
#NAME: icon_theme
#PARENT: Gtk.IconTheme.list_contexts.utf8
#COMMENT: a #GtkIconTheme
#NAME: get_groups
#PARENT: Gtk.RecentInfo.get_groups
#COMMENT: 
  a newly allocated %NULL terminated array of strings.
  Use g_strfreev() to free it.
#NAME: minimum_width
#PARENT: Gtk.WidgetClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: location for storing the minimum width, or %NULL
#NAME: xalign
#PARENT: Gtk.TreeViewColumn.set_alignment.none
#COMMENT: The alignment, which is between [0.0 and 1.0] inclusive.
#NAME: chooser
#PARENT: Gtk.FileChooser.get_preview_widget.Widget
#COMMENT: a #GtkFileChooser
#NAME: area
#PARENT: Gtk.CellArea.event.gint
#COMMENT: a #GtkCellArea
#NAME: notebook
#PARENT: Gtk.Notebook.get_tab_hborder.guint16
#COMMENT: a #GtkNotebook
#NAME: label
#PARENT: Gtk.RadioButton.new_with_label_from_widget.Widget
#COMMENT: a text string to display next to the radio button.
#NAME: adjustment
#PARENT: Gtk.HScale.new.Widget
#COMMENT: the #GtkAdjustment which sets the range of
the scale.
#NAME: path
#PARENT: Gtk.IconView.unselect_path.none
#COMMENT: The #GtkTreePath to be unselected.
#NAME: get_child_by_name
#PARENT: Gtk.Stack
#COMMENT: Finds the child of the #GtkStack with the name given as
the argument. Returns %NULL if there is no child with this
name.
#NAME: tag
#PARENT: Gtk.TextTag.set_priority.none
#COMMENT: a #GtkTextTag
#NAME: accel_group
#PARENT: Gtk.AccelGroup.get_is_locked.gboolean
#COMMENT: a #GtkAccelGroup
#NAME: op
#PARENT: Gtk.PrintOperation.get_support_selection.gboolean
#COMMENT: a #GtkPrintOperation
#NAME: get_modal
#PARENT: Gtk.Window
#COMMENT: Returns whether the window is modal. See gtk_window_set_modal().
#NAME: get_page_type
#PARENT: Gtk.Assistant
#COMMENT: Gets the page type of @page.
#NAME: popup_single_match
#PARENT: Gtk.EntryCompletion.set_popup_single_match.none
#COMMENT: %TRUE if the popup should appear even for a single
    match
#NAME: new
#PARENT: Gtk.HandleBox
#COMMENT: Create a new handle box.
#NAME: get_inverted
#PARENT: Gtk.ProgressBar.get_inverted
#COMMENT: %TRUE if the progress bar is inverted
#NAME: range
#PARENT: Gtk.Range.set_increments.none
#COMMENT: a #GtkRange
#NAME: RecentChooserDialog
#PARENT: Gtk
#COMMENT: #GtkRecentChooserDialog is a dialog box suitable for displaying the recently
used documents.  This widgets works by putting a #GtkRecentChooserWidget inside
a #GtkDialog.  It exposes the #GtkRecentChooserIface interface, so you can use
all the #GtkRecentChooser functions on the recent chooser dialog as well as
those for #GtkDialog.

Note that #GtkRecentChooserDialog does not have any methods of its own.
Instead, you should use the functions that work on a #GtkRecentChooser.

## Typical usage ## {#gtkrecentchooser-typical-usage}

In the simplest of cases, you can use the following code to use
a #GtkRecentChooserDialog to select a recently used file:

|[<!-- language="C" -->
GtkWidget *dialog;
gint res;

dialog = gtk_recent_chooser_dialog_new ("Recent Documents",
                                        parent_window,
                                        _("_Cancel"),
                                        GTK_RESPONSE_CANCEL,
                                        _("_Open"),
                                        GTK_RESPONSE_ACCEPT,
                                        NULL);

res = gtk_dialog_run (GTK_DIALOG (dialog));
if (res == GTK_RESPONSE_ACCEPT)
  {
    GtkRecentInfo *info;
    GtkRecentChooser *chooser = GTK_RECENT_CHOOSER (dialog);

    info = gtk_recent_chooser_get_current_item (chooser);
    open_file (gtk_recent_info_get_uri (info));
    gtk_recent_info_unref (info);
  }

gtk_widget_destroy (dialog);
]|

Recently used files are supported since GTK+ 2.10.
#NAME: get_size_of_row
#PARENT: Gtk.CellView
#COMMENT: Sets @requisition to the size needed by @cell_view to display
the model row pointed to by @path.
#NAME: rgba
#PARENT: Gtk.ColorSelection.set_previous_rgba.none
#COMMENT: a #GdkRGBA to set the previous color with
#NAME: NumerableIcon
#PARENT: Gtk
#COMMENT: GtkNumerableIcon is a subclass of #GEmblemedIcon that can
show a number or short string as an emblem. The number can
be overlayed on top of another emblem, if desired.

It supports theming by taking font and color information
from a provided #GtkStyleContext; see
gtk_numerable_icon_set_style_context().

Typical numerable icons:
![](numerableicon.png)
![](numerableicon2.png)
#NAME: get_deserialize_formats
#PARENT: Gtk.TextBuffer.get_deserialize_formats
#COMMENT: an array of
              #GdkAtoms representing the registered formats.
#NAME: get_icon_widget
#PARENT: Gtk.ToolButton
#COMMENT: Return the widget used as icon widget on @button.
See gtk_tool_button_set_icon_widget().
#NAME: action
#PARENT: Gtk.Action.activate.none
#COMMENT: the action object
#NAME: set_name
#PARENT: Gtk.binding_set_new.BindingSet
#COMMENT: unique name of this binding set
#NAME: editable
#PARENT: Gtk.CellArea.add-editable.none
#COMMENT: the #GtkCellEditable widget to add
#NAME: center
#PARENT: Gtk.Align
#COMMENT: center natural width of widget inside the
    allocation
#NAME: get_active
#PARENT: Gtk.Switch
#COMMENT: Gets whether the #GtkSwitch is in its “on” or “off” state.
#NAME: set_modify_func
#PARENT: Gtk.TreeModelFilter
#COMMENT: With the @n_columns and @types parameters, you give an array of column
types for this model (which will be exposed to the parent model/view).
The @func, @data and @destroy parameters are for specifying the modify
function. The modify function will get called for each
data access, the goal of the modify function is to return the data which
should be displayed at the location specified using the parameters of the
modify function.

Note that gtk_tree_model_filter_set_modify_func()
can only be called once for a given filter model.
#NAME: widget
#PARENT: Gtk.WidgetClass.show_all.show_all.none
#COMMENT: a #GtkWidget
#NAME: height
#PARENT: Gtk.paint_option.none
#COMMENT: the height of the rectangle to draw the option in
#NAME: application
#PARENT: Gtk.Application.get_menu_by_id.Gio.Menu
#COMMENT: a #GtkApplication
#NAME: display
#PARENT: Gtk.Clipboard.get_default.Clipboard
#COMMENT: the #GdkDisplay for which the clipboard is to be retrieved.
#NAME: list_filters
#PARENT: Gtk.FileChooser
#COMMENT: Lists the current set of user-selectable filters; see
gtk_file_chooser_add_filter(), gtk_file_chooser_remove_filter().
#NAME: get_adjustment
#PARENT: Gtk.ScaleButton.get_adjustment
#COMMENT: the adjustment associated with the scale
#NAME: iter
#PARENT: Gtk.TextIter.is_cursor_position.gboolean
#COMMENT: a #GtkTextIter
#NAME: value
#PARENT: Gtk.CellArea.cell_set_property.none
#COMMENT: the value to set the cell property to
#NAME: get_gicon
#PARENT: Gtk.StatusIcon.get_gicon
#COMMENT: the displayed icon, or %NULL if the image is empty
#NAME: x
#PARENT: Gtk.render_activity.none
#COMMENT: X origin of the rectangle
#NAME: get_entry_text_column
#PARENT: Gtk.ComboBox.get_entry_text_column
#COMMENT: A column in the data source model of @combo_box.
#NAME: y
#PARENT: Gtk.render_activity.none
#COMMENT: Y origin of the rectangle
#NAME: application
#PARENT: Gtk.AppChooserWidget.application-selected.none
#COMMENT: the selected #GAppInfo
#NAME: create-custom-widget
#PARENT: Gtk.PrintOperation.create-custom-widget
#COMMENT: A custom widget that gets embedded in
         the print dialog, or %NULL
#NAME: set_child_secondary
#PARENT: Gtk.ButtonBox
#COMMENT: Sets whether @child should appear in a secondary group of children.
A typical use of a secondary child is the help button in a dialog.

This group appears after the other children if the style
is %GTK_BUTTONBOX_START, %GTK_BUTTONBOX_SPREAD or
%GTK_BUTTONBOX_EDGE, and before the other children if the style
is %GTK_BUTTONBOX_END. For horizontal button boxes, the definition
of before/after depends on direction of the widget (see
gtk_widget_set_direction()). If the style is %GTK_BUTTONBOX_START
or %GTK_BUTTONBOX_END, then the secondary children are aligned at
the other end of the button box from the main children. For the
other styles, they appear immediately next to the main children.
#NAME: ClipboardGetFunc
#PARENT: Gtk
#COMMENT: A function that will be called to provide the contents of the selection.
If multiple types of data were advertised, the requested type can
be determined from the @info parameter or by checking the target field
of @selection_data. If the data could successfully be converted into
then it should be stored into the @selection_data object by
calling gtk_selection_data_set() (or related functions such
as gtk_selection_data_set_text()). If no data is set, the requestor
will be informed that the attempt to get the data failed.
#NAME: x_offset
#PARENT: Gtk.TreeViewColumn.cell_get_position.gboolean
#COMMENT: return location for the horizontal
           position of @cell within @tree_column, may be %NULL
#NAME: page_setup
#PARENT: Gtk.PageSetupDoneFunc.none
#COMMENT: the #GtkPageSetup that has been
#NAME: range
#PARENT: Gtk.Range.set_fill_level.none
#COMMENT: a #GtkRange
#NAME: get_age
#PARENT: Gtk.RecentInfo.get_age
#COMMENT: a positive integer containing the number of days
  elapsed since the time this resource was last modified
#NAME: gtk-enable-primary-paste
#PARENT: Gtk.Settings
#COMMENT: Whether a middle click on a mouse should paste the
'PRIMARY' clipboard content at the cursor location.
#NAME: get_direction
#PARENT: Gtk.StyleContext
#COMMENT: Returns the widget direction used for rendering.
#NAME: set_inline_completion
#PARENT: Gtk.EntryCompletion
#COMMENT: Sets whether the common prefix of the possible completions should
be automatically inserted in the entry.
#NAME: new_for_pixbuf
#PARENT: Gtk.IconInfo.new_for_pixbuf
#COMMENT: a #GtkIconInfo
#NAME: reorder_child
#PARENT: Gtk.Box
#COMMENT: Moves @child to a new @position in the list of @box children.
The list contains widgets packed #GTK_PACK_START
as well as widgets packed #GTK_PACK_END, in the order that these
widgets were added to @box.

A widget’s position in the @box children list determines where
the widget is packed into @box.  A child widget at some position
in the list will be packed just after all other widgets of the
same packing type that appear earlier in the list.
#NAME: new_win32
#PARENT: Gtk.SymbolicColor
#COMMENT: Creates a symbolic color based on the current win32
theme.

Note that while this call is available on all platforms
the actual value returned is not reliable on non-win32
platforms.
#NAME: grid
#PARENT: Gtk.Grid.remove_row.none
#COMMENT: a #GtkGrid
#NAME: right
#PARENT: Gtk.DirectionType
#COMMENT: Move right.
#NAME: policy
#PARENT: Gtk.Scrollable.set_vscroll_policy.none
#COMMENT: the vertical #GtkScrollablePolicy
#NAME: buffer
#PARENT: Gtk.TextBuffer.delete.none
#COMMENT: a #GtkTextBuffer
#NAME: time
#PARENT: Gtk.Widget.drag-data-get.none
#COMMENT: the timestamp at which the data was requested
#NAME: get_activate_on_single_click
#PARENT: Gtk.FlowBox.get_activate_on_single_click
#COMMENT: %TRUE if children are activated on single click,
    %FALSE otherwise
#NAME: set_select_multiple
#PARENT: Gtk.RecentChooser
#COMMENT: Sets whether @chooser can select multiple items.
#NAME: ends_word
#PARENT: Gtk.TextIter
#COMMENT: Determines whether @iter ends a natural-language word.  Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).
#NAME: show_progress
#PARENT: Gtk.PrintOperation.set_show_progress.none
#COMMENT: %TRUE to show a progress dialog
#NAME: paper_size
#PARENT: Gtk.PrintSettings.set_paper_size.none
#COMMENT: a paper size
#NAME: STOCK_ZOOM_100
#PARENT: Gtk
#COMMENT: The “Zoom 100%” item and icon.
#NAME: get_numeric
#PARENT: Gtk.SpinButton.get_numeric
#COMMENT: %TRUE if only numeric text can be entered
#NAME: ends_sentence
#PARENT: Gtk.TextIter
#COMMENT: Determines whether @iter ends a sentence.  Sentence boundaries are
determined by Pango and should be correct for nearly any language
(if not, the correct fix would be to the Pango text boundary
algorithms).
#NAME: path
#PARENT: Gtk.TreeModelForeachFunc.gboolean
#COMMENT: the current #GtkTreePath
#NAME: tree_view
#PARENT: Gtk.TreeView.insert_column.gint
#COMMENT: A #GtkTreeView.
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_bounds.none
#COMMENT: a #GtkTextBuffer
#NAME: editable
#PARENT: Gtk.TextIter.editable
#COMMENT: whether @iter is inside an editable range
#NAME: 
#PARENT: Gtk.Builder.add_callback_symbols.none...
#COMMENT: A list of callback name and callback symbol pairs terminated with %NULL
#NAME: setting
#PARENT: Gtk.AppChooserWidget.set_show_all.none
#COMMENT: the new value for #GtkAppChooserWidget:show-all
#NAME: handles_sequence
#PARENT: Gtk.Gesture
#COMMENT: Returns %TRUE if @gesture is currently handling events corresponding to
@sequence.
#NAME: message_dialog
#PARENT: Gtk.MessageDialog.set_markup.none
#COMMENT: a #GtkMessageDialog
#NAME: iter_get_sibling_index
#PARENT: Gtk.WidgetPath.iter_get_sibling_index
#COMMENT: 0 or the index into the list of siblings for the element at @pos.
#NAME: property_name
#PARENT: Gtk.CellAreaClass.find_cell_property.GObject.ParamSpec
#COMMENT: the name of the child property to find
#NAME: var_args
#PARENT: Gtk.ListStore.set_valist.none
#COMMENT: va_list of column/value pairs
#NAME: anchor
#PARENT: Gtk.TextChildAnchor.get_widgets.Widget
#COMMENT: a #GtkTextChildAnchor
#NAME: get_label
#PARENT: Gtk.ToolButton
#COMMENT: Returns the label used by the tool button, or %NULL if the tool button
doesn’t have a label. or uses a the label from a stock item. The returned
string is owned by GTK+, and must not be modified or freed.
#NAME: new
#PARENT: Gtk.AccelGroup.new
#COMMENT: a new #GtkAccelGroup object
#NAME: position
#PARENT: Gtk.FlowBox.insert.none
#COMMENT: the position to insert @child in
#NAME: parent_menu_shell
#PARENT: Gtk.Menu.popup_for_device.none
#COMMENT: the menu shell containing the triggering
    menu item, or %NULL
#NAME: get_current_event_time
#PARENT: Gtk.get_current_event_time
#COMMENT: the timestamp from the current event,
    or %GDK_CURRENT_TIME.
#NAME: section
#PARENT: Gtk.CssSection.get_file.Gio.File
#COMMENT: the section
#NAME: clear
#PARENT: Gtk.Image
#COMMENT: Resets the image to be empty.
#NAME: get_sequences
#PARENT: Gtk.Gesture
#COMMENT: Returns the list of #GdkEventSequences currently being interpreted
by @gesture.
#NAME: context
#PARENT: Gtk.IMContextClass.set_client_window.set_client_window.none
#COMMENT: a #GtkIMContext
#NAME: icon_pos
#PARENT: Gtk.Entry.set_icon_sensitive.none
#COMMENT: Icon position
#NAME: data
#PARENT: Gtk.IconView.selected_foreach.none
#COMMENT: User data to pass to the function.
#NAME: pixmap_path
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: case_insensitive
#PARENT: Gtk.TextSearchFlags
#COMMENT: The text will be matched regardless of
what case it is in.
#NAME: get_icon_stock
#PARENT: Gtk.Entry
#COMMENT: Retrieves the stock id used for the icon, or %NULL if there is
no icon or if the icon was set by some other method (e.g., by
pixbuf, icon name or gicon).
#NAME: colorsel
#PARENT: Gtk.ColorSelection.set_previous_rgba.none
#COMMENT: a #GtkColorSelection
#NAME: render_icon_surface
#PARENT: Gtk
#COMMENT: Renders the icon in @surface at the specified @x and @y coordinates.
#NAME: handle_event
#PARENT: Gtk.SearchEntry
#COMMENT: This function should be called when the top-level window
which contains the search entry received a key event. If
the entry is part of a #GtkSearchBar, it is preferable
to call gtk_search_bar_handle_event() instead, which will
reveal the entry in addition to passing the event to this
function.

If the key event is handled by the search entry and starts
or continues a search, %GDK_EVENT_STOP will be returned.
The caller should ensure that the entry is shown in this
case, and not propagate the event further.
#NAME: widget
#PARENT: Gtk.Widget.set_direction.none
#COMMENT: a #GtkWidget
#NAME: get_needed
#PARENT: Gtk.FileFilter.get_needed
#COMMENT: bitfield of flags indicating needed fields when
  calling gtk_file_filter_filter()
#NAME: completion
#PARENT: Gtk.EntryCompletion.get_text_column.gint
#COMMENT: a #GtkEntryCompletion
#NAME: convert_child_path_to_path
#PARENT: Gtk.TreeModelSort
#COMMENT: Converts @child_path to a path relative to @tree_model_sort.  That is,
@child_path points to a path in the child model.  The returned path will
point to the same row in the sorted model.  If @child_path isn’t a valid
path on the child model, then %NULL is returned.
#NAME: append_type
#PARENT: Gtk.WidgetPath.append_type
#COMMENT: the position where the element was inserted
#NAME: pred
#PARENT: Gtk.TextIter.forward_find_char.gboolean
#COMMENT: a function to be called on each character
#NAME: text_view
#PARENT: Gtk.TextView.get_indent.gint
#COMMENT: a #GtkTextView
#NAME: window
#PARENT: Gtk.Window.has_toplevel_focus.gboolean
#COMMENT: a #GtkWindow
#NAME: before
#PARENT: Gtk.ListBoxUpdateHeaderFunc.none
#COMMENT: the row before @row, or %NULL if it is first
#NAME: min
#PARENT: Gtk.SpinButton.get_range.none
#COMMENT: location to store minimum allowed value, or %NULL
#NAME: attach
#PARENT: Gtk.Style
#COMMENT: Attaches a style to a window; this process allocates the
colors and creates the GC’s for the style - it specializes
it to a particular visual. The process may involve the creation
of a new style if the style has already been attached to a
window with a different style and visual.

Since this function may return a new object, you have to use it
in the following way:
`style = gtk_style_attach (style, window)`
#NAME: user_data
#PARENT: Gtk.TextBuffer.register_serialize_format.Gdk.Atom
#COMMENT: @function’s user_data
#NAME: adjustment
#PARENT: Gtk.Adjustment.clamp_page.none
#COMMENT: a #GtkAdjustment.
#NAME: AccelGroup
#PARENT: Gtk
#COMMENT: A #GtkAccelGroup represents a group of keyboard accelerators,
typically attached to a toplevel #GtkWindow (with
gtk_window_add_accel_group()). Usually you won’t need to create a
#GtkAccelGroup directly; instead, when using #GtkUIManager, GTK+
automatically sets up the accelerators for your menus in the ui
manager’s #GtkAccelGroup.

Note that “accelerators” are different from
“mnemonics”. Accelerators are shortcuts for
activating a menu item; they appear alongside the menu item they’re a
shortcut for. For example “Ctrl+Q” might appear alongside the “Quit”
menu item. Mnemonics are shortcuts for GUI elements such as text
entries or buttons; they appear as underlined characters. See
gtk_label_new_with_mnemonic(). Menu items can have both accelerators
and mnemonics, of course.
#NAME: size
#PARENT: Gtk.Image.set_from_stock.none
#COMMENT: a stock icon size
#NAME: text
#PARENT: Gtk.TextBuffer.insert_with_tags_by_name.none
#COMMENT: UTF-8 text
#NAME: get_style
#PARENT: Gtk.ToolShell.get_style
#COMMENT: the current style of @shell
#NAME: new_for_content_type
#PARENT: Gtk.AppChooserDialog.new_for_content_type
#COMMENT: a newly created #GtkAppChooserDialog
#NAME: insert_after
#PARENT: Gtk.ListStore
#COMMENT: Inserts a new row after @sibling. If @sibling is %NULL, then the row will be
prepended to the beginning of the list. @iter will be changed to point to
this new row. The row will be empty after this function is called. To fill
in values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
#NAME: detachable
#PARENT: Gtk.Notebook.set_tab_detachable.none
#COMMENT: whether the tab is detachable or not
#NAME: stop-search
#PARENT: Gtk.SearchEntry
#COMMENT: The ::stop-search signal is a [keybinding signal][GtkBindingSignal]
which gets emitted when the user stops a search via keyboard input.

Applications should connect to it, to implement hiding the search
entry in this case.

The default bindings for this signal is Escape.
#NAME: list_regions
#PARENT: Gtk.StyleContext
#COMMENT: Returns the list of regions currently defined in @context.
#NAME: cycle-handle-focus
#PARENT: Gtk.Paned
#COMMENT: The ::cycle-handle-focus signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to cycle whether the paned should grab focus to allow
the user to change position of the handle by using key bindings.

The default binding for this signal is f8.
#NAME: get_font_name
#PARENT: Gtk.FontSelection
#COMMENT: Gets the currently-selected font name.

Note that this can be a different string than what you set with
gtk_font_selection_set_font_name(), as the font selection widget may
normalize font names and thus return a string with a different structure.
For example, “Helvetica Italic Bold 12” could be normalized to
“Helvetica Bold Italic 12”. Use pango_font_description_equal()
if you want to compare two font descriptions.
#NAME: get_interface_age
#PARENT: Gtk.get_interface_age
#COMMENT: the interface age of the GTK+ library
#NAME: insert
#PARENT: Gtk.TextBuffer
#COMMENT: Inserts @len bytes of @text at position @iter.  If @len is -1,
@text must be nul-terminated and will be inserted in its
entirety. Emits the “insert-text” signal; insertion actually occurs
in the default handler for the signal. @iter is invalidated when
insertion occurs (because the buffer contents change), but the
default signal handler revalidates it to point to the end of the
inserted text.
#NAME: group
#PARENT: Gtk.Widget.insert_action_group.none
#COMMENT: a #GActionGroup, or %NULL
#NAME: get_char
#PARENT: Gtk.TextIter
#COMMENT: The Unicode character at this iterator is returned.  (Equivalent to
operator* on a C++ iterator.)  If the element at this iterator is a
non-character element, such as an image embedded in the buffer, the
Unicode “unknown” character 0xFFFC is returned. If invoked on
the end iterator, zero is returned; zero is not a valid Unicode character.
So you can write a loop which ends when gtk_text_iter_get_char()
returns 0.
#NAME: paint_handle
#PARENT: Gtk
#COMMENT: Draws a handle as used in #GtkHandleBox and #GtkPaned.
#NAME: detail-height-rows
#PARENT: Gtk.Calendar
#COMMENT: Height of a detail cell, in rows.
A value of 0 allows any width. See gtk_calendar_set_detail_func().
#NAME: border_
#PARENT: Gtk.Border.copy.Border
#COMMENT: a #GtkBorder-struct
#NAME: box
#PARENT: Gtk.FlowBox.set_column_spacing.none
#COMMENT: a #GtkFlowBox
#NAME: set_active
#PARENT: Gtk.Menu
#COMMENT: Selects the specified menu item within the menu.  This is used by
the #GtkComboBox and should not be used by anyone else.
#NAME: show_heading
#PARENT: Gtk.CalendarDisplayOptions
#COMMENT: Specifies that the month and year should be displayed.
#NAME: where
#PARENT: Gtk.TextBuffer.place_cursor.none
#COMMENT: where to put the cursor
#NAME: set_name
#PARENT: Gtk.BindingSet
#COMMENT: unique name of this binding set
#NAME: text
#PARENT: Gtk.FontSelectionDialog.set_preview_text.none
#COMMENT: the text to display in the preview area
#NAME: menu_shell
#PARENT: Gtk.MenuShell.deactivate.none
#COMMENT: a #GtkMenuShell
#NAME: child
#PARENT: Gtk.Notebook.get_tab_label_text.utf8
#COMMENT: a widget contained in a page of @notebook
#NAME: set_orientation
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_ORIENTATION.
#NAME: new
#PARENT: Gtk.Builder.new
#COMMENT: a new (empty) #GtkBuilder object
#NAME: get_pixbuf_column
#PARENT: Gtk.IconView
#COMMENT: Returns the column with pixbufs for @icon_view.
#NAME: get_child1
#PARENT: Gtk.Paned
#COMMENT: Obtains the first child of the paned widget.
#NAME: refetch
#PARENT: Gtk.AccelLabel
#COMMENT: Recreates the string representing the accelerator keys.
This should not be needed since the string is automatically updated whenever
accelerators are added or removed from the associated widget.
#NAME: get_child2
#PARENT: Gtk.Paned
#COMMENT: Obtains the second child of the paned widget.
#NAME: minimum_height
#PARENT: Gtk.Widget.get_preferred_height_and_baseline_for_width.none
#COMMENT: location for storing the minimum height, or %NULL
#NAME: new_name
#PARENT: Gtk.SymbolicColor.new_name
#COMMENT: a newly created #GtkSymbolicColor
#NAME: widget
#PARENT: Gtk.test_text_set.none
#COMMENT: valid widget pointer.
#NAME: resize
#PARENT: Gtk.GLArea
#COMMENT: The ::resize signal is emitted once when the widget is realized, and
then each time the widget is changed while realized. This is useful
in order to keep GL state up to date with the widget size, like for
instance camera properties which may depend on the width/height ratio.

The GL context for the area is guaranteed to be current when this signal
is emitted.

The default handler sets up the GL viewport.
#NAME: context
#PARENT: Gtk.StyleContext.cancel_animations.none
#COMMENT: a #GtkStyleContext
#NAME: is_type
#PARENT: Gtk.WidgetPath
#COMMENT: Returns %TRUE if the widget type represented by this path
is @type, or a subtype of it.
#NAME: group
#PARENT: Gtk.Gesture
#COMMENT: Adds @gesture to the same group than @group_gesture. Gestures
are by default isolated in their own groups.

When gestures are grouped, the state of #GdkEventSequences
is kept in sync for all of those, so calling gtk_gesture_set_sequence_state(),
on one will transfer the same value to the others.

Groups also perform an "implicit grabbing" of sequences, if a
#GdkEventSequence state is set to #GTK_EVENT_SEQUENCE_CLAIMED on one group,
every other gesture group attached to the same #GtkWidget will switch the
state for that sequence to #GTK_EVENT_SEQUENCE_DENIED.
#NAME: get_previous_alpha
#PARENT: Gtk.ColorSelection
#COMMENT: Returns the previous alpha value.
#NAME: location
#PARENT: Gtk.TextBuffer.insert-child-anchor.none
#COMMENT: position to insert @anchor in @textbuffer
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.clear.none
#COMMENT: A #GtkTreeViewColumn
#NAME: set_skip_taskbar_hint
#PARENT: Gtk.Window
#COMMENT: Windows may set a hint asking the desktop environment not to display
the window in the task bar. This function sets this hint.
#NAME: set_subtitle
#PARENT: Gtk.HeaderBar
#COMMENT: Sets the subtitle of the #GtkHeaderBar. The title should give a user
an additional detail to help him identify the current view.

Note that GtkHeaderBar by default reserves room for the subtitle,
even if none is currently set. If this is not desired, set the
#GtkHeaderBar:has-subtitle property to %FALSE.
#NAME: size
#PARENT: Gtk.PaperSize.free.none
#COMMENT: a #GtkPaperSize
#NAME: expander
#PARENT: Gtk.Expander.set_label.none
#COMMENT: a #GtkExpander
#NAME: window
#PARENT: Gtk.Window.set_mnemonics_visible.none
#COMMENT: a #GtkWindow
#NAME: get_visible_range
#PARENT: Gtk.IconView
#COMMENT: Sets @start_path and @end_path to be the first and last visible path.
Note that there may be invisible paths in between.

Both paths should be freed with gtk_tree_path_free() after use.
#NAME: area
#PARENT: Gtk.CellAreaClass.get_preferred_width.get_preferred_width.none
#COMMENT: a #GtkCellArea
#NAME: connect_signals
#PARENT: Gtk.Builder
#COMMENT: This method is a simpler variation of gtk_builder_connect_signals_full().
It uses symbols explicitly added to @builder with prior calls to
gtk_builder_add_callback_symbol(). In the case that symbols are not
explicitly added; it uses #GModule’s introspective features (by opening the module %NULL)
to look at the application’s symbol table. From here it tries to match
the signal handler names given in the interface description with
symbols in the application and connects the signals. Note that this
function can only be called once, subsequent calls will do nothing.

Note that unless gtk_builder_add_callback_symbol() is called for
all signal callbacks which are referenced by the loaded XML, this
function will require that #GModule be supported on the platform.

If you rely on #GModule support to lookup callbacks in the symbol table,
the following details should be noted:

When compiling applications for Windows, you must declare signal callbacks
with #G_MODULE_EXPORT, or they will not be put in the symbol table.
On Linux and Unices, this is not necessary; applications should instead
be compiled with the -Wl,--export-dynamic CFLAGS, and linked against
gmodule-export-2.0.
#NAME: present
#PARENT: Gtk.Window
#COMMENT: Presents a window to the user. This may mean raising the window
in the stacking order, deiconifying it, moving it to the current
desktop, and/or giving it the keyboard focus, possibly dependent
on the user’s platform, window manager, and preferences.

If @window is hidden, this function calls gtk_widget_show()
as well.

This function should be used when the user tries to open a window
that’s already open. Say for example the preferences dialog is
currently open, and the user chooses Preferences from the menu
a second time; use gtk_window_present() to move the already-open dialog
where the user can see it.

If you are calling this function in response to a user interaction,
it is preferable to use gtk_window_present_with_time().
#NAME: redraw_on_allocate
#PARENT: Gtk.Widget.set_redraw_on_allocate.none
#COMMENT: if %TRUE, the entire widget will be redrawn
  when it is allocated to a new size. Otherwise, only the
  new portion of the widget will be redrawn.
#NAME: buffer
#PARENT: Gtk.Clipboard.wait_is_rich_text_available.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: insert_text
#PARENT: Gtk.Editable
#COMMENT: Inserts @new_text_length bytes of @new_text into the contents of the
widget, at position @position.

Note that the position is in characters, not in bytes.
The function updates @position to point after the newly inserted text.
#NAME: get_always_show_image
#PARENT: Gtk.Button
#COMMENT: Returns whether the button will ignore the #GtkSettings:gtk-button-images
setting and always show the image, if available.
#NAME: icon_view
#PARENT: Gtk.IconView.get_cell_rect.gboolean
#COMMENT: a #GtkIconView
#NAME: assistant
#PARENT: Gtk.Assistant.next_page.none
#COMMENT: a #GtkAssistant
#NAME: display_lines
#PARENT: Gtk.MovementStep
#COMMENT: Move up or down lines (wrapped lines)
#NAME: get_show_fill_level
#PARENT: Gtk.Range
#COMMENT: Gets whether the range displays the fill level graphically.
#NAME: backspace
#PARENT: Gtk.TextBuffer.backspace
#COMMENT: %TRUE if the buffer was modified
#NAME: selection
#PARENT: Gtk.TreeSelection.get_select_function.TreeSelectionFunc
#COMMENT: A #GtkTreeSelection.
#NAME: from_accel_closure
#PARENT: Gtk.AccelGroup.from_accel_closure
#COMMENT: the #GtkAccelGroup to which @closure
    is connected, or %NULL
#NAME: stack
#PARENT: Gtk.StackSidebar.set_stack.none
#COMMENT: a #GtkStack
#NAME: has_region
#PARENT: Gtk.ThemingEngine
#COMMENT: Returns %TRUE if the currently rendered contents have the
region defined. If @flags_return is not %NULL, it is set
to the flags affecting the region.
#NAME: dpi_x
#PARENT: Gtk.PrintContext.set_cairo_context.none
#COMMENT: the horizontal resolution to use with @cr
#NAME: remove_provider_for_screen
#PARENT: Gtk.StyleContext
#COMMENT: Removes @provider from the global style providers list in @screen.
#NAME: forward_sentence_ends
#PARENT: Gtk.TextIter
#COMMENT: Calls gtk_text_iter_forward_sentence_end() @count times (or until
gtk_text_iter_forward_sentence_end() returns %FALSE). If @count is
negative, moves backward instead of forward.
#NAME: text_view
#PARENT: Gtk.TextView.set_overwrite.none
#COMMENT: a #GtkTextView
#NAME: drag-drop
#PARENT: Gtk.Widget
#COMMENT: The ::drag-drop signal is emitted on the drop site when the user drops
the data onto the widget. The signal handler must determine whether
the cursor position is in a drop zone or not. If it is not in a drop
zone, it returns %FALSE and no further processing is necessary.
Otherwise, the handler returns %TRUE. In this case, the handler must
ensure that gtk_drag_finish() is called to let the source know that
the drop is done. The call to gtk_drag_finish() can be done either
directly or in a #GtkWidget::drag-data-received handler which gets
triggered by calling gtk_drag_get_data() to receive the data for one
or more of the supported targets.
#NAME: context
#PARENT: Gtk.IMMulticontext.append_menuitems.none
#COMMENT: a #GtkIMMulticontext
#NAME: dpi_y
#PARENT: Gtk.PrintContext.set_cairo_context.none
#COMMENT: the vertical resolution to use with @cr
#NAME: selection
#PARENT: Gtk.TreeSelection.select_path.none
#COMMENT: A #GtkTreeSelection.
#NAME: wx
#PARENT: Gtk.TreeView.convert_widget_to_bin_window_coords.none
#COMMENT: X coordinate relative to the widget
#NAME: CellCallback
#PARENT: Gtk.CellCallback
#COMMENT: %TRUE to stop iterating over cells.
#NAME: get_border
#PARENT: Gtk.StyleContext
#COMMENT: Gets the border for a given state as a #GtkBorder.
See %GTK_STYLE_PROPERTY_BORDER_WIDTH.
#NAME: wy
#PARENT: Gtk.TreeView.convert_widget_to_bin_window_coords.none
#COMMENT: Y coordinate relative to the widget
#NAME: add_toggle_actions_full
#PARENT: Gtk.ActionGroup
#COMMENT: This variant of gtk_action_group_add_toggle_actions() adds a
#GDestroyNotify callback for @user_data.
#NAME: get_hadjustment
#PARENT: Gtk.Scrollable.get_hadjustment
#COMMENT: horizontal #GtkAdjustment.
#NAME: yoptions
#PARENT: Gtk.Table.attach.none
#COMMENT: The same as xoptions, except this field determines behaviour of vertical resizing.
#NAME: new_for_screen
#PARENT: Gtk.Invisible
#COMMENT: Creates a new #GtkInvisible object for a specified screen
#NAME: selection
#PARENT: Gtk.TreeSelection.select_iter.none
#COMMENT: A #GtkTreeSelection.
#NAME: widget
#PARENT: Gtk.Widget.set_child_visible.none
#COMMENT: a #GtkWidget
#NAME: top
#PARENT: Gtk.Grid.attach.none
#COMMENT: the row number to attach the top side of @child to
#NAME: icons
#PARENT: Gtk.ScaleButton.set_icons.none
#COMMENT: a %NULL-terminated array of icon names
#NAME: button
#PARENT: Gtk.ToolButton.get_label.utf8
#COMMENT: a #GtkToolButton
#NAME: message_dialog
#PARENT: Gtk.MessageDialog.get_message_area.Widget
#COMMENT: a #GtkMessageDialog
#NAME: new_with_mnemonic
#PARENT: Gtk.RadioButton
#COMMENT: Creates a new #GtkRadioButton containing a label, adding it to the same
group as @group. The label will be created using
gtk_label_new_with_mnemonic(), so underscores in @label indicate the
mnemonic for the button.
#NAME: none
#PARENT: Gtk.RevealerTransitionType
#COMMENT: No transition
#NAME: func
#PARENT: Gtk.Calendar.set_detail_func.none
#COMMENT: a function providing details for each day.
#NAME: callback
#PARENT: Gtk.CellAreaClass.foreach.foreach.none
#COMMENT: the #GtkCellCallback to call
#NAME: new
#PARENT: Gtk.HSV.new
#COMMENT: A newly-created HSV color selector.
#NAME: set_from_pixbuf
#PARENT: Gtk.StatusIcon
#COMMENT: Makes @status_icon display @pixbuf.
See gtk_status_icon_new_from_pixbuf() for details.
#NAME: orientation
#PARENT: Gtk.Toolbar.orientation-changed.none
#COMMENT: the new #GtkOrientation of the toolbar
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_has_name.gboolean
#COMMENT: position to query, -1 for the path head
#NAME: test_list_all_types
#PARENT: Gtk
#COMMENT: Return the type ids that have been registered after
calling gtk_test_register_all_types().
#NAME: STOCK_DIALOG_ERROR
#PARENT: Gtk
#COMMENT: The “Error” item and icon.
#NAME: get_icon_size
#PARENT: Gtk.Toolbar.get_icon_size
#COMMENT: the current icon size for the icons on the toolbar.
#NAME: tree_view
#PARENT: Gtk.TreeView.create_row_drag_icon.cairo.Surface
#COMMENT: a #GtkTreeView
#NAME: insensitive
#PARENT: Gtk.CellRendererState
#COMMENT: The cell is drawn in an insensitive manner
#NAME: set_context_id
#PARENT: Gtk.IMMulticontext
#COMMENT: Sets the context id for @context.

This causes the currently active slave of @context to be
replaced by the slave corresponding to the new context id.
#NAME: padding
#PARENT: Gtk.StyleContext.get_padding.none
#COMMENT: return value for the padding settings
#NAME: cr
#PARENT: Gtk.paint_spinner.none
#COMMENT: a #cairo_t
#NAME: response_id
#PARENT: Gtk.InfoBar.add_action_widget.none
#COMMENT: response ID for @child
#NAME: parse_flags
#PARENT: Gtk.RcProperty
#COMMENT: A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses flags.

Flags can be specified by their name, their nickname or
numerically. Multiple flags can be specified in the form
`"( flag1 | flag2 | ... )"`.
#NAME: backward_visible_cursor_positions
#PARENT: Gtk.TextIter.backward_visible_cursor_positions
#COMMENT: %TRUE if we moved and the new position is dereferenceable
#NAME: data
#PARENT: Gtk.TextTagTableForeach.none
#COMMENT: data passed to gtk_text_tag_table_foreach()
#NAME: path
#PARENT: Gtk.WidgetPath.ref.WidgetPath
#COMMENT: a #GtkWidgetPath
#NAME: icon_name
#PARENT: Gtk.Entry.set_icon_from_icon_name.none
#COMMENT: An icon name, or %NULL
#NAME: get_ellipsize_mode
#PARENT: Gtk.ToolShell.get_ellipsize_mode
#COMMENT: the current ellipsize mode of @shell
#NAME: set_row_separator_func
#PARENT: Gtk.TreeView
#COMMENT: Sets the row separator function, which is used to determine
whether a row should be drawn as a separator. If the row separator
function is %NULL, no separators are drawn. This is the default value.
#NAME: width
#PARENT: Gtk.Widget.get_size_request.none
#COMMENT: return location for width, or %NULL
#NAME: day-selected-double-click
#PARENT: Gtk.Calendar
#COMMENT: Emitted when the user double-clicks a day.
#NAME: selectable
#PARENT: Gtk.ListBoxRow.set_selectable.none
#COMMENT: %TRUE to mark the row as selectable
#NAME: context
#PARENT: Gtk.StyleContext.add_class.none
#COMMENT: a #GtkStyleContext
#NAME: parent
#PARENT: Gtk.TreeStore.insert_with_valuesv.none
#COMMENT: A valid #GtkTreeIter, or %NULL
#NAME: get_for_display
#PARENT: Gtk.Clipboard.get_for_display
#COMMENT: the appropriate clipboard object. If no
  clipboard already exists, a new one will be created. Once a clipboard
  object has been created, it is persistent and, since it is owned by
  GTK+, must not be freed or unrefd.
#NAME: event
#PARENT: Gtk.CellArea.event.gint
#COMMENT: the #GdkEvent to handle
#NAME: tree_view
#PARENT: Gtk.TreeView.set_vadjustment.none
#COMMENT: A #GtkTreeView
#NAME: new
#PARENT: Gtk.VScrollbar
#COMMENT: Creates a new vertical scrollbar.
#NAME: remove
#PARENT: Gtk.BindingEntry
#COMMENT: Remove a binding previously installed via
gtk_binding_entry_add_signal() on @binding_set.
#NAME: new
#PARENT: Gtk.CellRendererProgress.new
#COMMENT: the new cell renderer
#NAME: user_data
#PARENT: Gtk.Clipboard.request_rich_text.none
#COMMENT: user data to pass to @callback.
#NAME: set_message_type
#PARENT: Gtk.InfoBar
#COMMENT: Sets the message type of the message area.
GTK+ uses this type to determine what color to use
when drawing the message area.
#NAME: set_group
#PARENT: Gtk.RadioAction
#COMMENT: Sets the radio group for the radio action object.
#NAME: engine
#PARENT: Gtk.ThemingEngine.get.none
#COMMENT: a #GtkThemingEngine
#NAME: icon_size
#PARENT: Gtk.Toolbar.set_icon_size.none
#COMMENT: The #GtkIconSize that stock icons in the toolbar shall have.
#NAME: update
#PARENT: Gtk.Gesture
#COMMENT: This signal is emitted whenever an event is handled while the gesture is
recognized. @sequence is guaranteed to pertain to the set of active touches.
#NAME: is_selected
#PARENT: Gtk.PrintOperationPreviewIface.is_selected.is_selected
#COMMENT: %TRUE if the page has been selected for printing
#NAME: drop
#PARENT: Gtk.DestDefaults
#COMMENT: If set for a widget, when a drop occurs, GTK+ will
  will check if the drag matches this widget’s list of possible targets and
  actions. If so, GTK+ will call gtk_drag_get_data() on behalf of the widget.
  Whether or not the drop is successful, GTK+ will call gtk_drag_finish(). If
  the action was a move, then if the drag was successful, then %TRUE will be
  passed for the @delete parameter to gtk_drag_finish().
#NAME: new
#PARENT: Gtk.Popover
#COMMENT: Creates a new popover to point to @relative_to
#NAME: gravity
#PARENT: Gtk.Window
#COMMENT: The window gravity of the window. See gtk_window_move() and #GdkGravity for
more details about window gravity.
#NAME: new
#PARENT: Gtk.CellView.new
#COMMENT: A newly created #GtkCellView widget.
#NAME: child-detached
#PARENT: Gtk.HandleBox
#COMMENT: This signal is emitted when the contents of the
handlebox are detached from the main window.
#NAME: buffer
#PARENT: Gtk.EntryBuffer.set_max_length.none
#COMMENT: a #GtkEntryBuffer
#NAME: wait_for_targets
#PARENT: Gtk.Clipboard
#COMMENT: Returns a list of targets that are present on the clipboard, or %NULL
if there aren’t any targets available. The returned list must be
freed with g_free().
This function waits for the data to be received using the main
loop, so events, timeouts, etc, may be dispatched during the wait.
#NAME: get_object_type
#PARENT: Gtk.WidgetPath.get_object_type
#COMMENT: The object type
#NAME: get_current_page
#PARENT: Gtk.Assistant
#COMMENT: Returns the page number of the current page.
#NAME: pixbuf
#PARENT: Gtk.StatusIcon.set_from_pixbuf.none
#COMMENT: a #GdkPixbuf or %NULL
#NAME: tree_store
#PARENT: Gtk.TreeStore.swap.none
#COMMENT: A #GtkTreeStore.
#NAME: get_input_hints
#PARENT: Gtk.Entry
#COMMENT: Gets the value of the #GtkEntry:input-hints property.
#NAME: new
#PARENT: Gtk.Image
#COMMENT: Creates a new empty #GtkImage widget.
#NAME: run
#PARENT: Gtk.PrintOperation.run
#COMMENT: the result of the print operation. A return value of
  %GTK_PRINT_OPERATION_RESULT_APPLY indicates that the printing was
  completed successfully. In this case, it is a good idea to obtain
  the used print settings with gtk_print_operation_get_print_settings()
  and store them for reuse with the next print operation. A value of
  %GTK_PRINT_OPERATION_RESULT_IN_PROGRESS means the operation is running
  asynchronously, and will emit the #GtkPrintOperation::done signal when
  done.
#NAME: type
#PARENT: Gtk.WidgetPath.is_type.gboolean
#COMMENT: widget type to match
#NAME: set_cursor
#PARENT: Gtk.IconView
#COMMENT: Sets the current keyboard focus to be at @path, and selects it.  This is
useful when you want to focus the user’s attention on a particular item.
If @cell is not %NULL, then focus is given to the cell specified by
it. Additionally, if @start_editing is %TRUE, then editing should be
started in the specified cell.

This function is often followed by `gtk_widget_grab_focus
(icon_view)` in order to give keyboard focus to the widget.
Please note that editing can only happen when the widget is realized.
#NAME: widget
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: the widget
#NAME: size
#PARENT: Gtk.IconTheme.choose_icon.IconInfo
#COMMENT: desired icon size
#NAME: set_clickable
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the header to be active if @clickable is %TRUE.  When the header is
active, then it can take keyboard focus, and can be clicked.
#NAME: accel_key
#PARENT: Gtk.Widget.add_accelerator.none
#COMMENT: GDK keyval of the accelerator
#NAME: calendar
#PARENT: Gtk.Calendar.select_day.none
#COMMENT: a #GtkCalendar.
#NAME: new_from_pixbuf
#PARENT: Gtk.IconSet
#COMMENT: Creates a new #GtkIconSet with @pixbuf as the default/fallback
source image. If you don’t add any additional #GtkIconSource to the
icon set, all variants of the icon will be created from @pixbuf,
using scaling, pixelation, etc. as required to adjust the icon size
or make the icon look insensitive/prelighted.
#NAME: context
#PARENT: Gtk.PrintOperation.preview.gboolean
#COMMENT: the #GtkPrintContext that will be used
#NAME: get_length
#PARENT: Gtk.PrintSettings.get_length
#COMMENT: the length value of @key, converted to @unit
#NAME: other_app
#PARENT: Gtk.TargetFlags
#COMMENT: If this is set, the target will not be selected
  for drags within a single application.
#NAME: output
#PARENT: Gtk.SpinButton
#COMMENT: The ::output signal can be used to change to formatting
of the value that is displayed in the spin buttons entry.
|[<!-- language="C" -->
// show leading zeros
static gboolean
on_output (GtkSpinButton *spin,
           gpointer       data)
{
   GtkAdjustment *adjustment;
   gchar *text;
   int value;

   adjustment = gtk_spin_button_get_adjustment (spin);
   value = (int)gtk_adjustment_get_value (adjustment);
   text = g_strdup_printf ("%02d", value);
   gtk_entry_set_text (GTK_ENTRY (spin), text);
   g_free (text);

   return TRUE;
}
]|
#NAME: context
#PARENT: Gtk.CellArea.get_preferred_width.none
#COMMENT: the #GtkCellAreaContext to perform this request with
#NAME: size
#PARENT: Gtk.IconTheme.lookup_icon.IconInfo
#COMMENT: desired icon size
#NAME: none
#PARENT: Gtk.Unit
#COMMENT: No units.
#NAME: reorder
#PARENT: Gtk.ListStore
#COMMENT: Reorders @store to follow the order indicated by @new_order. Note that
this function only works with unsorted stores.
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_proxy_menu_item.Widget
#COMMENT: a #GtkToolItem
#NAME: set_hadjustment
#PARENT: Gtk.TreeView
#COMMENT: Sets the #GtkAdjustment for the current horizontal aspect.
#NAME: notify
#PARENT: Gtk.ActionGroup.set_translate_func.none
#COMMENT: a #GDestroyNotify function to be called when @action_group is
  destroyed and when the translation function is changed again
#NAME: append_page_menu
#PARENT: Gtk.Notebook.append_page_menu
#COMMENT: the index (starting from 0) of the appended
    page in the notebook, or -1 if function fails
#NAME: buffer
#PARENT: Gtk.TextBuffer.move_mark.none
#COMMENT: a #GtkTextBuffer
#NAME: set_angle
#PARENT: Gtk.Label
#COMMENT: Sets the angle of rotation for the label. An angle of 90 reads from
from bottom to top, an angle of 270, from top to bottom. The angle
setting for the label is ignored if the label is selectable,
wrapped, or ellipsized.
#NAME: info
#PARENT: Gtk.TargetList.add_image_targets.none
#COMMENT: an ID that will be passed back to the application
#NAME: lhs
#PARENT: Gtk.TextIter.compare.gint
#COMMENT: a #GtkTextIter
#NAME: editable
#PARENT: Gtk.Editable.get_position.gint
#COMMENT: a #GtkEditable
#NAME: invalid_value
#PARENT: Gtk.BuilderError
#COMMENT: #GtkBuilder couldn’t parse
 some attribute value.
#NAME: setup
#PARENT: Gtk.PageSetup.get_page_width.gdouble
#COMMENT: a #GtkPageSetup
#NAME: self
#PARENT: Gtk.AppChooserWidget.set_default_text.none
#COMMENT: a #GtkAppChooserWidget
#NAME: select_uri
#PARENT: Gtk.FileChooser.select_uri
#COMMENT: Not useful.
#NAME: str
#PARENT: Gtk.ColorSelection.palette_from_string.gboolean
#COMMENT: a string encoding a color palette
#NAME: inverted
#PARENT: Gtk.LevelBar
#COMMENT: Level bars normally grow from top to bottom or left to right.
Inverted level bars grow in the opposite direction.
#NAME: STYLE_PROPERTY_BACKGROUND_IMAGE
#PARENT: Gtk
#COMMENT: A property holding the element’s background as a #cairo_pattern_t.
#NAME: get_gicon
#PARENT: Gtk.Action.get_gicon
#COMMENT: The action’s #GIcon if one is set.
#NAME: accel_group
#PARENT: Gtk.Widget.set_accel_path.none
#COMMENT: a #GtkAccelGroup.
#NAME: state
#PARENT: Gtk.Widget.set_state.none
#COMMENT: new state for @widget
#NAME: create-folders
#PARENT: Gtk.FileChooser
#COMMENT: Whether a file chooser not in %GTK_FILE_CHOOSER_ACTION_OPEN mode
will offer the user to create new folders.
#NAME: set_font_name
#PARENT: Gtk.FontSelectionDialog.set_font_name
#COMMENT: %TRUE if the font selected in @fsd is now the
    @fontname specified, %FALSE otherwise.
#NAME: colorsel
#PARENT: Gtk.ColorSelection.get_has_palette.gboolean
#COMMENT: a #GtkColorSelection
#NAME: get_select_multiple
#PARENT: Gtk.FileChooser
#COMMENT: Gets whether multiple files can be selected in the file
selector. See gtk_file_chooser_set_select_multiple().
#NAME: source
#PARENT: Gtk.IconSource.get_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconSource
#NAME: get_border
#PARENT: Gtk.ScrollableInterface.get_border.get_border
#COMMENT: %TRUE if @border has been set
#NAME: toolbar
#PARENT: Gtk.Toolbar.get_show_arrow.gboolean
#COMMENT: a #GtkToolbar
#NAME: pspec
#PARENT: Gtk.rc_property_parse_flags.gboolean
#COMMENT: a #GParamSpec
#NAME: property_name
#PARENT: Gtk.CellArea.cell_get_property.none
#COMMENT: the name of the property to get
#NAME: display_line_ends
#PARENT: Gtk.DeleteType
#COMMENT: Delete only the portion of the
  display-line to the left/right of cursor.
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_style.none
#COMMENT: a #GtkThemingEngine
#NAME: mime_type
#PARENT: Gtk.RecentData
#COMMENT: the MIME type of the resource;
#NAME: stack
#PARENT: Gtk.Stack.set_visible_child_name.none
#COMMENT: a #GtkStack
#NAME: action
#PARENT: Gtk.Action.get_is_important.gboolean
#COMMENT: a #GtkAction
#NAME: new_with_rgba
#PARENT: Gtk.ColorButton.new_with_rgba
#COMMENT: a new color button
#NAME: source_file_list
#PARENT: Gtk.PlacesSidebar.drag-perform-drop.none
#COMMENT: 
  #GList of #GFile that got dropped.
#NAME: bar
#PARENT: Gtk.HeaderBar.pack_end.none
#COMMENT: A #GtkHeaderBar
#NAME: cell
#PARENT: Gtk.CellRenderer.get_preferred_size.none
#COMMENT: a #GtkCellRenderer instance
#NAME: get_entry_text_column
#PARENT: Gtk.ComboBox
#COMMENT: Returns the column which @combo_box is using to get the strings
from to display in the internal entry.
#NAME: filter
#PARENT: Gtk.FileFilter.filter.gboolean
#COMMENT: a #GtkFileFilter
#NAME: columns
#PARENT: Gtk.IconView.set_columns.none
#COMMENT: the number of columns
#NAME: activate-item
#PARENT: Gtk.MenuItem
#COMMENT: Emitted when the item is activated, but also if the menu item has a
submenu. For normal applications, the relevant signal is
#GtkMenuItem::activate.
#NAME: colorsel
#PARENT: Gtk.ColorSelection.set_has_opacity_control.none
#COMMENT: a #GtkColorSelection
#NAME: move_item
#PARENT: Gtk.RecentManager
#COMMENT: Changes the location of a recently used resource from @uri to @new_uri.

Please note that this function will not affect the resource pointed
by the URIs, but only the URI used in the recently used resources list.
#NAME: get_internal_child
#PARENT: Gtk.BuildableIface.get_internal_child.get_internal_child
#COMMENT: the internal child of the buildable object
#NAME: use_builtin
#PARENT: Gtk.IconLookupFlags
#COMMENT: When passed to
  gtk_icon_theme_lookup_icon() includes builtin icons
  as well as files. For a builtin icon, gtk_icon_info_get_filename()
  is %NULL and you need to call gtk_icon_info_get_builtin_pixbuf().
#NAME: action
#PARENT: Gtk.Action.set_short_label.none
#COMMENT: a #GtkAction
#NAME: move
#PARENT: Gtk.Fixed
#COMMENT: Moves a child of a #GtkFixed container to the given position.
#NAME: put
#PARENT: Gtk.Layout
#COMMENT: Adds @child_widget to @layout, at position (@x,@y).
@layout becomes the new parent container of @child_widget.
#NAME: set_group
#PARENT: Gtk.RadioToolButton
#COMMENT: Adds @button to @group, removing it from the group it belonged to before.
#NAME: get_digits
#PARENT: Gtk.SpinButton
#COMMENT: Fetches the precision of @spin_button. See gtk_spin_button_set_digits().
#NAME: get_row_spacing
#PARENT: Gtk.Grid.get_row_spacing
#COMMENT: the row spacing of @grid
#NAME: setup
#PARENT: Gtk.PageSetup.to_file.gboolean
#COMMENT: a #GtkPageSetup
#NAME: row-activated
#PARENT: Gtk.ListBox
#COMMENT: The ::row-activated signal is emitted when a row has been activated by the user.
#NAME: get_default
#PARENT: Gtk.Settings
#COMMENT: Gets the #GtkSettings object for the default GDK screen, creating
it if necessary. See gtk_settings_get_for_screen().
#NAME: state
#PARENT: Gtk.StyleContext.get_font.Pango.FontDescription
#COMMENT: state to retrieve the font for
#NAME: get_serialize_formats
#PARENT: Gtk.TextBuffer.get_serialize_formats
#COMMENT: an array of
              #GdkAtoms representing the registered formats.
#NAME: column
#PARENT: Gtk.TreeView.row_activated.none
#COMMENT: The #GtkTreeViewColumn to be activated.
#NAME: get_header_bar
#PARENT: Gtk.Dialog
#COMMENT: Returns the header bar of @dialog. Note that the
headerbar is only used by the dialog if the
#GtkDialog:use-header-bar property is %TRUE.
#NAME: 
#PARENT: Gtk.TreePath.new_from_indices.TreePath...
#COMMENT: list of integers terminated by -1
#NAME: get_children
#PARENT: Gtk.Container.get_children
#COMMENT: a newly-allocated list of the container’s non-internal children.
#NAME: icon_name
#PARENT: Gtk.Image.new_from_icon_name.Widget
#COMMENT: an icon name
#NAME: tooltip-markup
#PARENT: Gtk.StatusIcon
#COMMENT: Sets the text of tooltip to be the given string, which is marked up
with the [Pango text markup language][PangoMarkupFormat].
Also see gtk_tooltip_set_markup().

This is a convenience property which will take care of getting the
tooltip shown if the given string is not %NULL.
#GtkStatusIcon:has-tooltip will automatically be set to %TRUE and
the default handler for the #GtkStatusIcon::query-tooltip signal
will take care of displaying the tooltip.

On some platforms, embedded markup will be ignored.
#NAME: dark
#PARENT: Gtk.Style
#COMMENT: Set of dark #GdkColor
#NAME: CornerType
#PARENT: Gtk
#COMMENT: Specifies which corner a child widget should be placed in when packed into
a #GtkScrolledWindow. This is effectively the opposite of where the scroll
bars are placed.
#NAME: widget
#PARENT: Gtk.CellRenderer.get_state.StateFlags
#COMMENT: a #GtkWidget, or %NULL
#NAME: path
#PARENT: Gtk.IconView.item_activated.none
#COMMENT: The #GtkTreePath to be activated
#NAME: set_media_type
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.

The set of media types is defined in PWG 5101.1-2002 PWG.
#NAME: get_font
#PARENT: Gtk.StyleContext.get_font
#COMMENT: the #PangoFontDescription for the given
         state.  This object is owned by GTK+ and should not be
         freed.
#NAME: expand
#PARENT: Gtk.ToolItem.set_expand.none
#COMMENT: Whether @tool_item is allocated extra space
#NAME: button
#PARENT: Gtk.Button.released.none
#COMMENT: The #GtkButton you want to send the signal to.
#NAME: get_columns
#PARENT: Gtk.IconView
#COMMENT: Returns the value of the ::columns property.
#NAME: width
#PARENT: Gtk.render_frame.none
#COMMENT: rectangle width
#NAME: flags
#PARENT: Gtk.CellArea.activate.gboolean
#COMMENT: the #GtkCellRendererState flags for @area for this row of data.
#NAME: page_up
#PARENT: Gtk.ScrollType
#COMMENT: Page up.
#NAME: count
#PARENT: Gtk.TextIter.backward_visible_cursor_positions.gboolean
#COMMENT: number of positions to move
#NAME: first_property_name
#PARENT: Gtk.Widget.style_get.none
#COMMENT: the name of the first property to get
#NAME: bar
#PARENT: Gtk.SearchBar.handle_event.gboolean
#COMMENT: a #GtkSearchBar
#NAME: length
#PARENT: Gtk.UIManager.add_ui_from_string.guint
#COMMENT: the length of @buffer (may be -1 if @buffer is nul-terminated)
#NAME: inch
#PARENT: Gtk.Unit
#COMMENT: Dimensions in inches.
#NAME: minimum_baseline
#PARENT: Gtk.Widget.get_preferred_height_and_baseline_for_width.none
#COMMENT: location for storing the baseline for the minimum height, or %NULL
#NAME: binding_set
#PARENT: Gtk.BindingEntry.add_signal_from_string.GLib.TokenType
#COMMENT: a #GtkBindingSet
#NAME: get_menu
#PARENT: Gtk.MenuToolButton.get_menu
#COMMENT: the #GtkMenu associated
    with #GtkMenuToolButton
#NAME: round-digits
#PARENT: Gtk.Range
#COMMENT: The number of digits to round the value to when
it changes, or -1. See #GtkRange::change-value.
#NAME: fg
#PARENT: Gtk.Style
#COMMENT: Set of foreground #GdkColor
#NAME: selection
#PARENT: Gtk.TreeSelection.iter_is_selected.gboolean
#COMMENT: A #GtkTreeSelection
#NAME: get_option_group
#PARENT: Gtk.get_option_group
#COMMENT: a #GOptionGroup for the commandline
    arguments recognized by GTK+
#NAME: spin_button
#PARENT: Gtk.SpinButton.get_snap_to_ticks.gboolean
#COMMENT: a #GtkSpinButton
#NAME: get_overwrite
#PARENT: Gtk.TextView.get_overwrite
#COMMENT: whether @text_view is in overwrite mode or not.
#NAME: calendar
#PARENT: Gtk.Calendar.get_date.none
#COMMENT: a #GtkCalendar
#NAME: icon-name
#PARENT: Gtk.CellRendererPixbuf
#COMMENT: The name of the themed icon to display.
This property only has an effect if not overridden by "stock_id"
or "pixbuf" properties.
#NAME: parent
#PARENT: Gtk.StyleContext
#COMMENT: Sets or gets the style context’s parent. See gtk_style_context_set_parent()
for details.
#NAME: model
#PARENT: Gtk.TreeRowReference.new.TreeRowReference
#COMMENT: a #GtkTreeModel
#NAME: context
#PARENT: Gtk.IconTheme.list_icons.utf8
#COMMENT: a string identifying a particular type of
          icon, or %NULL to list all icons.
#NAME: fontchooser
#PARENT: Gtk.FontChooser.get_preview_text.utf8
#COMMENT: a #GtkFontChooser
#NAME: get_children
#PARENT: Gtk.ContainerCellAccessible
#COMMENT: Get a list of children.
#NAME: dest_file
#PARENT: Gtk.PlacesSidebar.drag-action-requested.gint
#COMMENT: #GFile with the tentative location that is being hovered for a drop
#NAME: new
#PARENT: Gtk.ColorChooserWidget.new
#COMMENT: a new #GtkColorChooserWidget
#NAME: even
#PARENT: Gtk.RegionFlags
#COMMENT: Region has an even number within a set.
#NAME: show_details
#PARENT: Gtk.CalendarDisplayOptions
#COMMENT: Just show an indicator, not the full details
text when details are provided. See gtk_calendar_set_detail_func().
#NAME: STOCK_HOME
#PARENT: Gtk
#COMMENT: The “Home” item and icon.
#NAME: iter
#PARENT: Gtk.TreeModel.rows-reordered.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the node whose children
    have been reordered, or %NULL if the depth of @path is 0
#NAME: locked
#PARENT: Gtk.AccelFlags
#COMMENT: Accelerator not removable
#NAME: menu_label
#PARENT: Gtk.Notebook.append_page_menu.gint
#COMMENT: the widget to use as a label for the
    page-switch menu, if that is enabled. If %NULL, and @tab_label
    is a #GtkLabel or %NULL, then the menu label will be a newly
    created label with the same text as @tab_label; if @tab_label
    is not a #GtkLabel, @menu_label must be specified if the
    page-switch menu is to be used.
#NAME: target
#PARENT: Gtk.PropagationPhase
#COMMENT: Events are delivered in the default widget event handlers,
  note that widget implementations must chain up on button, motion, touch and
  grab broken handlers for controllers in this phase to be run.
#NAME: get_line
#PARENT: Gtk.TextIter
#COMMENT: Returns the line number containing the iterator. Lines in
a #GtkTextBuffer are numbered beginning with 0 for the first
line in the buffer.
#NAME: use-fallback
#PARENT: Gtk.Image
#COMMENT: Whether the icon displayed in the GtkImage will use
standard icon names fallback. The value of this property
is only relevant for images of type %GTK_IMAGE_ICON_NAME
and %GTK_IMAGE_GICON.
#NAME: start_editing
#PARENT: Gtk.TreeView.set_cursor.none
#COMMENT: %TRUE if the specified cell should start being edited.
#NAME: widget
#PARENT: Gtk.CellAreaClass.foreach_alloc.foreach_alloc.none
#COMMENT: the #GtkWidget that @area is rendering to
#NAME: tooltip
#PARENT: Gtk.IconView.set_tooltip_item.none
#COMMENT: a #GtkTooltip
#NAME: get_double_with_default
#PARENT: Gtk.PrintSettings.get_double_with_default
#COMMENT: the floating point number associated with @key
#NAME: orientation
#PARENT: Gtk.GesturePan.set_orientation.none
#COMMENT: expected orientation
#NAME: scroll_type
#PARENT: Gtk.ComboBox.move-active.none
#COMMENT: a #GtkScrollType
#NAME: new_name
#PARENT: Gtk.SymbolicColor
#COMMENT: Creates a symbolic color pointing to an unresolved named
color. See gtk_style_context_lookup_color() and
gtk_style_properties_lookup_color().
#NAME: widget
#PARENT: Gtk.Widget.get_request_mode.SizeRequestMode
#COMMENT: a #GtkWidget instance
#NAME: get_menu_by_id
#PARENT: Gtk.Application
#COMMENT: Gets a menu from automatically loaded resources.
See [Automatic resources][automatic-resources]
for more information.
#NAME: quick-bookmark
#PARENT: Gtk.FileChooserWidget
#COMMENT: The ::quick-bookmark signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

This is used to make the file chooser switch to the bookmark
specified in the @bookmark_index parameter.
For example, if you have three bookmarks, you can pass 0, 1, 2 to
this signal to switch to each of them, respectively.

The default binding for this signal is `Alt + 1`, `Alt + 2`,
etc. until `Alt + 0`.  Note that in the default binding, that
`Alt + 1` is actually defined to switch to the bookmark at index
0, and so on successively; `Alt + 0` is defined to switch to the
bookmark at index 10.
#NAME: iter_nth_child
#PARENT: Gtk.TreeModelIface.iter_nth_child.iter_nth_child
#COMMENT: %TRUE, if @parent has an @n-th child
#NAME: is_inhibited
#PARENT: Gtk.Application.is_inhibited
#COMMENT: %TRUE if any of the actions specified in @flags are inhibited
#NAME: type
#PARENT: Gtk.HandleBox.set_shadow_type.none
#COMMENT: the shadow type.
#NAME: set_paper_size
#PARENT: Gtk.PageSetup
#COMMENT: Sets the paper size of the #GtkPageSetup without
changing the margins. See
gtk_page_setup_set_paper_size_and_default_margins().
#NAME: job-name
#PARENT: Gtk.PrintOperation
#COMMENT: A string used to identify the job (e.g. in monitoring
applications like eggcups).

If you don't set a job name, GTK+ picks a default one
by numbering successive print jobs.
#NAME: info
#PARENT: Gtk.TargetList.add.none
#COMMENT: an ID that will be passed back to the application
#NAME: set_style
#PARENT: Gtk.ToolPalette
#COMMENT: Sets the style (text, icons or both) of items in the tool palette.
#NAME: position
#PARENT: Gtk.EntryBuffer.inserted-text.none
#COMMENT: the position the text was inserted at.
#NAME: get_child_by_name
#PARENT: Gtk.Stack.get_child_by_name
#COMMENT: the requested child of the #GtkStack
#NAME: priority
#PARENT: Gtk.TextTag.set_priority.none
#COMMENT: the new priority
#NAME: page
#PARENT: Gtk.Assistant.set_page_side_image.none
#COMMENT: a page of @assistant
#NAME: activate_item
#PARENT: Gtk.MenuShell
#COMMENT: Activates the menu item within the menu shell.
#NAME: create_menu_item
#PARENT: Gtk.ActionClass.create_menu_item.create_menu_item
#COMMENT: a menu item connected to the action.
#NAME: get_app_info
#PARENT: Gtk.AppChooser
#COMMENT: Returns the currently selected application.
#NAME: widget
#PARENT: Gtk.GestureLongPress.new.Gesture
#COMMENT: a #GtkWidget
#NAME: icon_set
#PARENT: Gtk.IconSet.render_icon_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconSet
#NAME: box
#PARENT: Gtk.ListBox.get_row_at_index.ListBoxRow
#COMMENT: a #GtkListBox
#NAME: insert_page
#PARENT: Gtk.Notebook
#COMMENT: Insert a page into @notebook at the given position.
#NAME: drag-action-requested
#PARENT: Gtk.PlacesSidebar
#COMMENT: When the user starts a drag-and-drop operation and the sidebar needs
to ask the application for which drag action to perform, then the
sidebar will emit this signal.

The application can evaluate the @context for customary actions, or
it can check the type of the files indicated by @source_file_list against the
possible actions for the destination @dest_file.

The drag action to use must be the return value of the signal handler.
#NAME: key
#PARENT: Gtk.EntryCompletionMatchFunc.gboolean
#COMMENT: the string to match, normalized and case-folded
#NAME: chooser
#PARENT: Gtk.RecentChooser.set_sort_type.none
#COMMENT: a #GtkRecentChooser
#NAME: ratio
#PARENT: Gtk.AspectFrame.set.none
#COMMENT: The desired aspect ratio.
#NAME: input-hints
#PARENT: Gtk.Entry
#COMMENT: Additional hints (beyond #GtkEntry:input-purpose) that
allow input methods to fine-tune their behaviour.
#NAME: set_progress_fraction
#PARENT: Gtk.Entry
#COMMENT: Causes the entry’s progress indicator to “fill in” the given
fraction of the bar. The fraction should be between 0.0 and 1.0,
inclusive.
#NAME: highest
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: set_homogeneous
#PARENT: Gtk.Stack
#COMMENT: Sets the #GtkStack to be homogeneous or not. If it
is homogeneous, the #GtkStack will request the same
size for all its children. If it isn't, the stack
may change size when a different child becomes visible.

Since 3.16, homogeneity can be controlled separately
for horizontal and vertical size, with the
#GtkStack:hhomogeneous and #GtkStack:vhomogeneous.
#NAME: get_window_type
#PARENT: Gtk.TextView
#COMMENT: Usually used to find out which window an event corresponds to.
If you connect to an event signal on @text_view, this function
should be called on `event-&gt;window` to
see which window it was.
#NAME: start
#PARENT: Gtk.TextBuffer.remove-tag.none
#COMMENT: the start of the range the tag is removed from
#NAME: drag_data_get
#PARENT: Gtk.TreeDragSource
#COMMENT: Asks the #GtkTreeDragSource to fill in @selection_data with a
representation of the row at @path. @selection_data->target gives
the required type of the data.  Should robustly handle a @path no
longer found in the model!
#NAME: callback_name
#PARENT: Gtk.WidgetClass.bind_template_callback_full.none
#COMMENT: The name of the callback as expected in the template XML
#NAME: clipboard
#PARENT: Gtk.Clipboard.clear.none
#COMMENT: a #GtkClipboard
#NAME: get_title
#PARENT: Gtk.ColorButton.get_title
#COMMENT: An internal string, do not free the return value
#NAME: unselect-all
#PARENT: Gtk.FlowBox
#COMMENT: The ::unselect-all signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to unselect all children of the box, if
the selection mode permits it.

The default bindings for this signal is Ctrl-Shift-a.
#NAME: ypad
#PARENT: Gtk.CellRenderer.set_padding.none
#COMMENT: the y padding of the cell renderer
#NAME: x
#PARENT: Gtk.TreeView.get_path_at_pos.gboolean
#COMMENT: The x position to be identified (relative to bin_window).
#NAME: cell_layout
#PARENT: Gtk.CellLayoutDataFunc.none
#COMMENT: a #GtkCellLayout
#NAME: get_position
#PARENT: Gtk.EditableInterface.get_position.get_position
#COMMENT: the cursor position
#NAME: get_label_widget
#PARENT: Gtk.ToolButton.get_label_widget
#COMMENT: The widget used as label
    on @button, or %NULL.
#NAME: y
#PARENT: Gtk.TreeView.get_path_at_pos.gboolean
#COMMENT: The y position to be identified (relative to bin_window).
#NAME: main_iteration_do
#PARENT: Gtk
#COMMENT: Runs a single iteration of the mainloop.
If no events are available either return or block depending on
the value of @blocking.
#NAME: flags
#PARENT: Gtk.CellRenderer.render.none
#COMMENT: flags that affect rendering
#NAME: settings
#PARENT: Gtk.PrintSettings.get_paper_size.PaperSize
#COMMENT: a #GtkPrintSettings
#NAME: group
#PARENT: Gtk.RadioToolButton.new_from_widget.ToolItem
#COMMENT: An existing #GtkRadioToolButton, or %NULL
#NAME: is_expanded
#PARENT: Gtk.CellArea.apply-attributes.none
#COMMENT: whether the view is currently showing the children of this row
#NAME: box
#PARENT: Gtk.ListBox.insert.none
#COMMENT: a #GtkListBox
#NAME: new
#PARENT: Gtk.FontButton
#COMMENT: Creates a new font picker widget.
#NAME: get_inline_completion
#PARENT: Gtk.EntryCompletion.get_inline_completion
#COMMENT: %TRUE if inline completion is turned on
#NAME: widget
#PARENT: Gtk.Widget.remove_accelerator.gboolean
#COMMENT: widget to install an accelerator on
#NAME: drag_set_icon_gicon
#PARENT: Gtk
#COMMENT: Sets the icon for a given drag from the given @icon.
See the documentation for gtk_drag_set_icon_name()
for more details about using icons in drag and drop.
#NAME: callback
#PARENT: Gtk.IconInfo.load_symbolic_for_context_async.none
#COMMENT: a #GAsyncReadyCallback to call when the
    request is satisfied
#NAME: lookup_property
#PARENT: Gtk.StyleProperties
#COMMENT: Returns %TRUE if a property has been registered, if @pspec or
@parse_func are not %NULL, the #GParamSpec and parsing function
will be respectively returned.
#NAME: iter_depth
#PARENT: Gtk.TreeStore.iter_depth
#COMMENT: The depth of @iter
#NAME: viewport
#PARENT: Gtk.Viewport.set_vadjustment.none
#COMMENT: a #GtkViewport.
#NAME: insensitive
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: area
#PARENT: Gtk.CellAreaClass.focus.focus.gboolean
#COMMENT: a #GtkCellArea
#NAME: set_focus_on_map
#PARENT: Gtk.Window
#COMMENT: Windows may set a hint asking the desktop environment not to receive
the input focus when the window is mapped.  This function sets this
hint.
#NAME: CellRendererState
#PARENT: Gtk
#COMMENT: Tells how a cell is to be rendered.
#NAME: dialog
#PARENT: Gtk.Dialog.add_buttons.none
#COMMENT: a #GtkDialog
#NAME: iter
#PARENT: Gtk.IconView.get_tooltip_context.gboolean
#COMMENT: a pointer to receive a #GtkTreeIter or %NULL
#NAME: get_height
#PARENT: Gtk.PaperSize
#COMMENT: Gets the paper height of the #GtkPaperSize, in
units of @unit.
#NAME: set_visible_child
#PARENT: Gtk.Stack
#COMMENT: Makes @child the visible child of @stack.

If @child is different from the currently
visible child, the transition between the
two will be animated with the current
transition type of @stack.

Note that the @child widget has to be visible itself
(see gtk_widget_show()) in order to become the visible
child of @stack.
#NAME: state
#PARENT: Gtk.StyleProperties.set.none
#COMMENT: state to set the values for
#NAME: events
#PARENT: Gtk.Widget.add_events.none
#COMMENT: an event mask, see #GdkEventMask
#NAME: wait_is_rich_text_available
#PARENT: Gtk.Clipboard
#COMMENT: Test to see if there is rich text available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains any of the supported rich text targets. This function
waits for the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.

This function is a little faster than calling
gtk_clipboard_wait_for_rich_text() since it doesn’t need to retrieve
the actual text.
#NAME: buildable
#PARENT: Gtk.Buildable.custom_finished.none
#COMMENT: a #GtkBuildable
#NAME: sort_func
#PARENT: Gtk.ListBox.set_sort_func.none
#COMMENT: the sort function
#NAME: get_accel_group
#PARENT: Gtk.UIManager
#COMMENT: Returns the #GtkAccelGroup associated with @manager.
#NAME: show_menubar
#PARENT: Gtk.ApplicationWindow.set_show_menubar.none
#COMMENT: whether to show a menubar when needed
#NAME: entry
#PARENT: Gtk.Entry.text_index_to_layout_index.gint
#COMMENT: a #GtkEntry
#NAME: single-line-mode
#PARENT: Gtk.Label
#COMMENT: Whether the label is in single line mode. In single line mode,
the height of the label does not depend on the actual text, it
is always set to ascent + descent of the font. This can be an
advantage in situations where resizing the label because of text
changes would be distracting, e.g. in a statusbar.
#NAME: get_receives_default
#PARENT: Gtk.Widget.get_receives_default
#COMMENT: %TRUE if @widget acts as the default widget when focussed,
              %FALSE otherwise
#NAME: alpha
#PARENT: Gtk.ColorButton
#COMMENT: The selected opacity value (0 fully transparent, 65535 fully opaque).
#NAME: get_width
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns the current size of @tree_column in pixels.
#NAME: context
#PARENT: Gtk.render_option.none
#COMMENT: a #GtkStyleContext
#NAME: path
#PARENT: Gtk.CellRendererClass.start_editing.start_editing.CellEditable
#COMMENT: widget-dependent string representation of the event location;
   e.g. for #GtkTreeView, a string representation of #GtkTreePath
#NAME: cell
#PARENT: Gtk.CellLayout.pack_start.none
#COMMENT: a #GtkCellRenderer
#NAME: is_expander
#PARENT: Gtk.CellArea.apply-attributes.none
#COMMENT: whether the view shows children for this row
#NAME: has_key
#PARENT: Gtk.PrintSettings.has_key
#COMMENT: %TRUE, if @key has a value
#NAME: buffer
#PARENT: Gtk.TextBuffer.delete_selection.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: data
#PARENT: Gtk.TreeView.set_destroy_count_func.none
#COMMENT: User data to be passed to @func, or %NULL
#NAME: new_with_mnemonic
#PARENT: Gtk.Expander
#COMMENT: Creates a new expander using @label as the text of the label.
If characters in @label are preceded by an underscore, they are underlined.
If you need a literal underscore character in a label, use “__” (two
underscores). The first underlined character represents a keyboard
accelerator called a mnemonic.
Pressing Alt and that key activates the button.
#NAME: response_id
#PARENT: Gtk.Dialog.add_action_widget.none
#COMMENT: response ID for @child
#NAME: self
#PARENT: Gtk.AppChooserWidget.get_show_recommended.gboolean
#COMMENT: a #GtkAppChooserWidget
#NAME: iter_remove_class
#PARENT: Gtk.WidgetPath
#COMMENT: Removes the class @name from the widget at position @pos in
the hierarchy defined in @path.
#NAME: get_focus_visible
#PARENT: Gtk.Window.get_focus_visible
#COMMENT: %TRUE if “focus rectangles” are supposed to be visible
    in this window.
#NAME: missing_attribute
#PARENT: Gtk.BuilderError
#COMMENT: An attribute that is required by
 #GtkBuilder was missing.
#NAME: widget
#PARENT: Gtk.PathType
#COMMENT: Deprecated
#NAME: STOCK_PROPERTIES
#PARENT: Gtk
#COMMENT: The “Properties” item and icon.
#NAME: targets
#PARENT: Gtk.TreeView.enable_model_drag_dest.none
#COMMENT: the table of targets that
          the drag will support
#NAME: new_with_entry
#PARENT: Gtk.ComboBox.new_with_entry
#COMMENT: A new #GtkComboBox.
#NAME: palette
#PARENT: Gtk.ToolPalette.get_icon_size.gint
#COMMENT: a #GtkToolPalette
#NAME: accelerator_get_label
#PARENT: Gtk.accelerator_get_label
#COMMENT: a newly-allocated string representing the accelerator.
#NAME: set_icon_drag_source
#PARENT: Gtk.Entry
#COMMENT: Sets up the icon at the given position so that GTK+ will start a drag
operation when the user clicks and drags the icon.

To handle the drag operation, you need to connect to the usual
#GtkWidget::drag-data-get (or possibly #GtkWidget::drag-data-delete)
signal, and use gtk_entry_get_current_icon_drag_source() in
your signal handler to find out if the drag was started from
an icon.

By default, GTK+ uses the icon as the drag icon. You can use the
#GtkWidget::drag-begin signal to set a different icon. Note that you
have to use g_signal_connect_after() to ensure that your signal handler
gets executed after the default handler.
#NAME: n_chars
#PARENT: Gtk.IMContextClass.delete_surrounding.delete_surrounding.gboolean
#COMMENT: number of characters to delete.
#NAME: binding_entry_skip
#PARENT: Gtk
#COMMENT: Install a binding on @binding_set which causes key lookups
to be aborted, to prevent bindings from lower priority sets
to be activated.
#NAME: window_placement
#PARENT: Gtk.ScrolledWindow.set_placement.none
#COMMENT: position of the child window
#NAME: end
#PARENT: Gtk.TextIter.get_text.utf8
#COMMENT: iterator at end of a range
#NAME: height
#PARENT: Gtk.Requisition
#COMMENT: the widget’s desired height
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_button.Widget
#COMMENT: A #GtkTreeViewColumn
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_valist.none
#COMMENT: a #GtkThemingEngine
#NAME: width
#PARENT: Gtk.paint_diamond.none
#COMMENT: width of the rectangle to draw the diamond in
#NAME: cell
#PARENT: Gtk.CellRendererClass.get_request_mode.get_request_mode.SizeRequestMode
#COMMENT: a #GtkCellRenderer    instance
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_show_icons.gboolean
#COMMENT: a #GtkRecentChooser
#NAME: get_item_index
#PARENT: Gtk.Toolbar
#COMMENT: Returns the position of @item on the toolbar, starting from 0.
It is an error if @item is not a child of the toolbar.
#NAME: widget
#PARENT: Gtk.Widget.show_all.none
#COMMENT: a #GtkWidget
#NAME: get_title
#PARENT: Gtk.FontButton.get_title
#COMMENT: an internal copy of the title string which must not be freed.
#NAME: types
#PARENT: Gtk.ListStore.newv.ListStore
#COMMENT: an array of #GType types for the columns, from first to last
#NAME: group
#PARENT: Gtk.RadioButton.set_group.none
#COMMENT: an existing radio
    button group, such as one returned from gtk_radio_button_get_group(), or %NULL.
#NAME: close
#PARENT: Gtk.ResponseType
#COMMENT: Returned by Close buttons in GTK+ dialogs
#NAME: widget
#PARENT: Gtk.ButtonBox.set_child_non_homogeneous.none
#COMMENT: a #GtkButtonBox
#NAME: load_symbolic_finish
#PARENT: Gtk.IconInfo.load_symbolic_finish
#COMMENT: the rendered icon; this may be a newly
    created icon or a new reference to an internal icon, so you must
    not modify the icon. Use g_object_unref() to release your reference
    to the icon.
#NAME: event
#PARENT: Gtk.Widget.button-release-event.gboolean
#COMMENT: the #GdkEventButton which triggered
  this signal.
#NAME: id
#PARENT: Gtk.ComboBoxText.append.none
#COMMENT: a string ID for this value, or %NULL
#NAME: get_attributes
#PARENT: Gtk.Label
#COMMENT: Gets the attribute list that was set on the label using
gtk_label_set_attributes(), if any. This function does
not reflect attributes that come from the labels markup
(see gtk_label_set_markup()). If you want to get the
effective attributes for the label, use
pango_layout_get_attribute (gtk_label_get_layout (label)).
#NAME: filter
#PARENT: Gtk.TreeModelFilter.set_visible_func.none
#COMMENT: A #GtkTreeModelFilter
#NAME: drag_dest_get_target_list
#PARENT: Gtk.Widget.drag_dest_get_target_list
#COMMENT: the #GtkTargetList, or %NULL if none
#NAME: widget
#PARENT: Gtk.Widget.drag_dest_get_target_list.TargetList
#COMMENT: a #GtkWidget
#NAME: self
#PARENT: Gtk.AppChooserDialog.get_widget.Widget
#COMMENT: a #GtkAppChooserDialog
#NAME: text_view
#PARENT: Gtk.TextView.get_wrap_mode.WrapMode
#COMMENT: a #GtkTextView
#NAME: get_filter
#PARENT: Gtk.FileChooser.get_filter
#COMMENT: the current filter, or %NULL
#NAME: entry
#PARENT: Gtk.Entry.set_buffer.none
#COMMENT: a #GtkEntry
#NAME: move-slider
#PARENT: Gtk.Range
#COMMENT: Virtual function that moves the slider. Used for keybindings.
#NAME: mid
#PARENT: Gtk.Style
#COMMENT: Set of mid #GdkColor
#NAME: shadow_type
#PARENT: Gtk.paint_shadow.none
#COMMENT: type of shadow to draw
#NAME: accel_group
#PARENT: Gtk.AccelGroup.find.AccelKey
#COMMENT: a #GtkAccelGroup
#NAME: name
#PARENT: Gtk.StyleProperties.lookup_color.SymbolicColor
#COMMENT: color name to lookup
#NAME: natural_size
#PARENT: Gtk.CellArea.request_renderer.none
#COMMENT: location to store the natural size, or %NULL
#NAME: get_iter_at_line_index
#PARENT: Gtk.TextBuffer
#COMMENT: Obtains an iterator pointing to @byte_index within the given line.
@byte_index must be the start of a UTF-8 character, and must not be
beyond the end of the line.  Note bytes, not
characters; UTF-8 may encode one character as multiple bytes.
#NAME: copy-target-list
#PARENT: Gtk.TextBuffer
#COMMENT: The list of targets this buffer supports for clipboard copying
and as DND source.
#NAME: paint_vline
#PARENT: Gtk
#COMMENT: Draws a vertical line from (@x, @y1_) to (@x, @y2_) in @cr
using the given style and state.
#NAME: width
#PARENT: Gtk.render_check.none
#COMMENT: rectangle width
#NAME: new_with_font
#PARENT: Gtk.FontButton
#COMMENT: Creates a new font picker widget.
#NAME: widget
#PARENT: Gtk.CellArea.inner_cell_area.none
#COMMENT: the #GtkWidget that @area is rendering onto
#NAME: accel_group
#PARENT: Gtk.AccelGroup.unlock.none
#COMMENT: a #GtkAccelGroup
#NAME: print_settings
#PARENT: Gtk.PrintOperation.set_print_settings.none
#COMMENT: #GtkPrintSettings
#NAME: dashed
#PARENT: Gtk.BorderStyle
#COMMENT: A series of square-ended dashes
#NAME: iter_has_region
#PARENT: Gtk.WidgetPath
#COMMENT: Returns %TRUE if the widget at position @pos has the class @name
defined, %FALSE otherwise.
#NAME: get_objects
#PARENT: Gtk.Builder
#COMMENT: Gets all objects that have been constructed by @builder. Note that
this function does not increment the reference counts of the returned
objects.
#NAME: user_data
#PARENT: Gtk.Builder.connect_signals_full.none
#COMMENT: arbitrary data that will be passed to the connection function
#NAME: yalign
#PARENT: Gtk.Alignment.new.Widget
#COMMENT: the vertical alignment of the child widget, from 0 (top) to 1
 (bottom).
#NAME: user_data
#PARENT: Gtk.FlowBoxFilterFunc.gboolean
#COMMENT: user data
#NAME: chooser
#PARENT: Gtk.FileChooser.set_create_folders.none
#COMMENT: a #GtkFileChooser
#NAME: max-value
#PARENT: Gtk.LevelBar
#COMMENT: The #GtkLevelBar:max-value property determaxes the maximum value of
the interval that can be displayed by the bar.
#NAME: menu_item
#PARENT: Gtk.MenuItemClass.activate.activate.none
#COMMENT: the menu item
#NAME: key_file
#PARENT: Gtk.PageSetup.load_key_file.gboolean
#COMMENT: the #GKeyFile to retrieve the page_setup from
#NAME: new_for_manager
#PARENT: Gtk.RecentChooserMenu
#COMMENT: Creates a new #GtkRecentChooserMenu widget using @manager as
the underlying recently used resources manager.

This is useful if you have implemented your own recent manager,
or if you have a customized instance of a #GtkRecentManager
object or if you wish to share a common #GtkRecentManager object
among multiple #GtkRecentChooser widgets.
#NAME: start
#PARENT: Gtk.TextBuffer.remove_tag_by_name.none
#COMMENT: one bound of range to be untagged
#NAME: path
#PARENT: Gtk.UIManager.get_action.Action
#COMMENT: a path
#NAME: chooser
#PARENT: Gtk.FileChooser.get_files.Gio.File
#COMMENT: a #GtkFileChooser
#NAME: draw_as_radio
#PARENT: Gtk.CheckMenuItem.set_draw_as_radio.none
#COMMENT: whether @check_menu_item is drawn like a #GtkRadioMenuItem
#NAME: flags
#PARENT: Gtk.TargetPair
#COMMENT: #GtkTargetFlags for DND
#NAME: columns
#PARENT: Gtk.TreeStore.set_valuesv.none
#COMMENT: an array of column numbers
#NAME: widget
#PARENT: Gtk.test_widget_send_key.gboolean
#COMMENT: Widget to generate a key press and release on.
#NAME: proxy
#PARENT: Gtk.ActionGroup.connect-proxy.none
#COMMENT: the proxy
#NAME: get_double_with_default
#PARENT: Gtk.PrintSettings
#COMMENT: Returns the floating point number represented by
the value that is associated with @key, or @default_val
if the value does not represent a floating point number.

Floating point numbers are parsed with g_ascii_strtod().
#NAME: iter
#PARENT: Gtk.TextIter.is_end.gboolean
#COMMENT: an iterator
#NAME: n
#PARENT: Gtk.TreeView.get_column.TreeViewColumn
#COMMENT: The position of the column, counting from 0.
#NAME: flags
#PARENT: Gtk.CellAreaClass.render.render.none
#COMMENT: the #GtkCellRendererState for @area in this row.
#NAME: in
#PARENT: Gtk.ShadowType
#COMMENT: The outline is bevelled inwards.
#NAME: set_size_request
#PARENT: Gtk.Widget
#COMMENT: Sets the minimum size of a widget; that is, the widget’s size
request will be at least @width by @height. You can use this
function to force a widget to be larger than it normally would be.

In most cases, gtk_window_set_default_size() is a better choice for
toplevel windows than this function; setting the default size will
still allow users to shrink the window. Setting the size request
will force them to leave the window at least as large as the size
request. When dealing with window sizes,
gtk_window_set_geometry_hints() can be a useful function as well.

Note the inherent danger of setting any fixed size - themes,
translations into other languages, different fonts, and user action
can all change the appropriate size for a given widget. So, it's
basically impossible to hardcode a size that will always be
correct.

The size request of a widget is the smallest size a widget can
accept while still functioning well and drawing itself correctly.
However in some strange cases a widget may be allocated less than
its requested size, and in many cases a widget may be allocated more
space than it requested.

If the size request in a given direction is -1 (unset), then
the “natural” size request of the widget will be used instead.

The size request set here does not include any margin from the
#GtkWidget properties margin-left, margin-right, margin-top, and
margin-bottom, but it does include pretty much all other padding
or border properties set by any subclass of #GtkWidget.
#NAME: set_label_align
#PARENT: Gtk.Frame
#COMMENT: Sets the alignment of the frame widget’s label. The
default values for a newly created frame are 0.0 and 0.5.
#NAME: none
#PARENT: Gtk.WindowPosition
#COMMENT: No influence is made on placement.
#NAME: end_pos
#PARENT: Gtk.Editable.get_chars.utf8
#COMMENT: end of text
#NAME: get_animation
#PARENT: Gtk.Image.get_animation
#COMMENT: the displayed animation, or %NULL if
the image is empty
#NAME: label
#PARENT: Gtk.Label.get_ellipsize.Pango.EllipsizeMode
#COMMENT: a #GtkLabel
#NAME: STYLE_CLASS_DIM_LABEL
#PARENT: Gtk
#COMMENT: A CSS class to match dimmed labels.

This should be used for toning down right aligned labels as
compared to the entry value.
#NAME: filter_new
#PARENT: Gtk.TreeModel.filter_new
#COMMENT: A new #GtkTreeModel.
#NAME: sort_column_id
#PARENT: Gtk.TreeSortable.set_sort_column_id.none
#COMMENT: the sort column id to set
#NAME: none
#PARENT: Gtk.SizeGroupMode
#COMMENT: group has no effect
#NAME: both
#PARENT: Gtk.SizeGroupMode
#COMMENT: group affects both horizontal and vertical requisition
#NAME: parent
#PARENT: Gtk.TreeStore.insert_before.none
#COMMENT: A valid #GtkTreeIter, or %NULL
#NAME: index
#PARENT: Gtk.render_insertion_cursor.none
#COMMENT: the index in the #PangoLayout
#NAME: set_action
#PARENT: Gtk.FileChooser
#COMMENT: Sets the type of operation that the chooser is performing; the
user interface is adapted to suit the selected action. For example,
an option to create a new folder might be shown if the action is
%GTK_FILE_CHOOSER_ACTION_SAVE but not if the action is
%GTK_FILE_CHOOSER_ACTION_OPEN.
#NAME: other
#PARENT: Gtk.Gesture.is_grouped_with.gboolean
#COMMENT: another #GtkGesture
#NAME: buffer
#PARENT: Gtk.EntryBuffer.emit_inserted_text.none
#COMMENT: a #GtkEntryBuffer
#NAME: action
#PARENT: Gtk.Action.create_icon.Widget
#COMMENT: the action object
#NAME: suspend
#PARENT: Gtk.ApplicationInhibitFlags
#COMMENT: Inhibit suspending the
    session or computer
#NAME: keyboard_tip
#PARENT: Gtk.IconView.get_tooltip_context.gboolean
#COMMENT: whether this is a keyboard tooltip or not
#NAME: get_menu_model
#PARENT: Gtk.MenuButton.get_menu_model
#COMMENT: a #GMenuModel or %NULL
#NAME: set_bottom_margin
#PARENT: Gtk.PageSetup
#COMMENT: Sets the bottom margin of the #GtkPageSetup.
#NAME: end_path
#PARENT: Gtk.TreeSelection.unselect_range.none
#COMMENT: The initial node of the range.
#NAME: set_stock_id
#PARENT: Gtk.Action
#COMMENT: Sets the stock id on @action
#NAME: path
#PARENT: Gtk.IconView.create_drag_icon.cairo.Surface
#COMMENT: a #GtkTreePath in @icon_view
#NAME: tree_model
#PARENT: Gtk.TreeModel.get_column_type.GType
#COMMENT: a #GtkTreeModel
#NAME: new
#PARENT: Gtk.ListStore
#COMMENT: Creates a new list store as with @n_columns columns each of the types passed
in.  Note that only types derived from standard GObject fundamental types
are supported.

As an example, `gtk_list_store_new (3, G_TYPE_INT, G_TYPE_STRING,
GDK_TYPE_PIXBUF);` will create a new #GtkListStore with three columns, of type
int, string and #GdkPixbuf respectively.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_dither.none
#COMMENT: a #GtkPrintSettings
#NAME: data
#PARENT: Gtk.SelectionData.copy.SelectionData
#COMMENT: a pointer to a #GtkSelectionData-struct.
#NAME: set_parent
#PARENT: Gtk.StyleContext
#COMMENT: Sets the parent style context for @context. The parent style
context is used to implement
[inheritance](http://www.w3.org/TR/css3-cascade/#inheritance)
of properties.

If you are using a #GtkStyleContext returned from
gtk_widget_get_style_context(), the parent will be set for you.
#NAME: set_input_purpose
#PARENT: Gtk.TextView
#COMMENT: Sets the #GtkTextView:input-purpose property which
can be used by on-screen keyboards and other input
methods to adjust their behaviour.
#NAME: group
#PARENT: Gtk.ToolPalette.set_group_position.none
#COMMENT: a #GtkToolItemGroup which is a child of palette
#NAME: new
#PARENT: Gtk.Arrow
#COMMENT: Creates a new #GtkArrow widget.
#NAME: show_hidden
#PARENT: Gtk.FileChooser.set_show_hidden.none
#COMMENT: %TRUE if hidden files and folders should be displayed.
#NAME: button
#PARENT: Gtk.ScaleButton.get_adjustment.Adjustment
#COMMENT: a #GtkScaleButton
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_from_icon_name.none
#COMMENT: a #GtkStatusIcon
#NAME: tooltip
#PARENT: Gtk.Widget.query-tooltip.gboolean
#COMMENT: a #GtkTooltip
#NAME: HScale
#PARENT: Gtk
#COMMENT: The #GtkHScale widget is used to allow the user to select a value using
a horizontal slider. To create one, use gtk_hscale_new_with_range().

The position to show the current value, and the number of decimal places
shown can be set using the parent #GtkScale class’s functions.

GtkHScale has been deprecated, use #GtkScale instead.
#NAME: cell
#PARENT: Gtk.CellRendererClass.get_aligned_area.get_aligned_area.none
#COMMENT: a #GtkCellRenderer instance
#NAME: is_local
#PARENT: Gtk.RecentInfo
#COMMENT: Checks whether the resource is local or not by looking at the
scheme of its URI.
#NAME: toggle
#PARENT: Gtk.CellRendererToggle.get_active.gboolean
#COMMENT: a #GtkCellRendererToggle
#NAME: single
#PARENT: Gtk.IconView.set_activate_on_single_click.none
#COMMENT: %TRUE to emit item-activated on a single click
#NAME: STYLE_CLASS_QUESTION
#PARENT: Gtk
#COMMENT: A CSS class for an area displaying a question to the user,
such as those in infobars.

This is used by #GtkInfoBar.
#NAME: get_id
#PARENT: Gtk.Socket.get_id
#COMMENT: the window ID for the socket
#NAME: new
#PARENT: Gtk.Calendar.new
#COMMENT: a newly #GtkCalendar widget
#NAME: icon_theme
#PARENT: Gtk.IconInfo.new_for_pixbuf.IconInfo
#COMMENT: a #GtkIconTheme
#NAME: child
#PARENT: Gtk.Notebook.page_num.gint
#COMMENT: a #GtkWidget
#NAME: fullscreen
#PARENT: Gtk.Window
#COMMENT: Asks to place @window in the fullscreen state. Note that you
shouldn’t assume the window is definitely full screen afterward,
because other entities (e.g. the user or
[window manager][gtk-X11-arch]) could unfullscreen it
again, and not all window managers honor requests to fullscreen
windows. But normally the window will end up fullscreen. Just
don’t write code that crashes if not.

You can track the fullscreen state via the “window-state-event” signal
on #GtkWidget.
#NAME: property
#PARENT: Gtk.StyleProperties.unset_property.none
#COMMENT: property to unset
#NAME: action_name
#PARENT: Gtk.Application.add_accelerator.none
#COMMENT: the name of the action to activate
#NAME: up
#PARENT: Gtk.DirectionType
#COMMENT: Move up.
#NAME: entry
#PARENT: Gtk.Entry.get_invisible_char.gunichar
#COMMENT: a #GtkEntry
#NAME: set_menu
#PARENT: Gtk.MenuToolButton
#COMMENT: Sets the #GtkMenu that is popped up when the user clicks on the arrow.
If @menu is NULL, the arrow button becomes insensitive.
#NAME: end
#PARENT: Gtk.TextIter.get_slice.utf8
#COMMENT: iterator at end of a range
#NAME: color
#PARENT: Gtk.ThemingEngine.lookup_color.gboolean
#COMMENT: Return location for the looked up color
#NAME: ListBoxUpdateHeaderFunc
#PARENT: Gtk
#COMMENT: Whenever @row changes or which row is before @row changes this
is called, which lets you update the header on @row. You may
remove or set a new one via gtk_list_box_row_set_header() or
just change the state of the current header widget.
#NAME: key
#PARENT: Gtk.PrintSettings.get_bool.gboolean
#COMMENT: a key
#NAME: is_embedded
#PARENT: Gtk.StatusIcon.is_embedded
#COMMENT: %TRUE if the status icon is embedded in
  a notification area.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_headers_clickable.none
#COMMENT: A #GtkTreeView.
#NAME: fontsel
#PARENT: Gtk.FontSelection.get_family_list.Widget
#COMMENT: a #GtkFontSelection
#NAME: user_data
#PARENT: Gtk.TickCallback.gboolean
#COMMENT: user data passed to gtk_widget_add_tick_callback().
#NAME: mnemonic_activate
#PARENT: Gtk.WidgetClass.mnemonic_activate.mnemonic_activate
#COMMENT: %TRUE if the signal has been handled
#NAME: path
#PARENT: Gtk.tree_set_row_drag_data.gboolean
#COMMENT: a row in @tree_model
#NAME: get_hadjustment
#PARENT: Gtk.ScrolledWindow.get_hadjustment
#COMMENT: the horizontal #GtkAdjustment
#NAME: yalign
#PARENT: Gtk.AspectFrame.new.Widget
#COMMENT: Vertical alignment of the child within the allocation of
 the #GtkAspectFrame. This ranges from 0.0 (top aligned)
 to 1.0 (bottom aligned)
#NAME: yalign
#PARENT: Gtk.Label
#COMMENT: The yalign property determines the vertical aligment of the label text
inside the labels size allocation. Compare this to #GtkWidget:valign,
which determines how the labels size allocation is positioned in the
space available for the label.
#NAME: button
#PARENT: Gtk.ColorButton.get_alpha.guint16
#COMMENT: a #GtkColorButton
#NAME: iter
#PARENT: Gtk.EntryCompletion.match-selected.gboolean
#COMMENT: a #GtkTreeIter positioned at the selected match
#NAME: STOCK_REMOVE
#PARENT: Gtk
#COMMENT: The “Remove” item and icon.
#NAME: get_monospace
#PARENT: Gtk.TextView.get_monospace
#COMMENT: %TRUE if monospace fonts are desired
#NAME: load_symbolic_for_context_async
#PARENT: Gtk.IconInfo
#COMMENT: Asynchronously load, render and scale a symbolic icon previously
looked up from the icon theme using gtk_icon_theme_lookup_icon().

For more details, see gtk_icon_info_load_symbolic_for_context()
which is the synchronous version of this call.
#NAME: get_visible_horizontal
#PARENT: Gtk.Action.get_visible_horizontal
#COMMENT: whether @action is visible when horizontal
#NAME: get_margin_left
#PARENT: Gtk.Widget.get_margin_left
#COMMENT: The left margin of @widget
#NAME: event
#PARENT: Gtk.Widget.enter-notify-event.gboolean
#COMMENT: the #GdkEventCrossing which triggered
  this signal.
#NAME: has_group
#PARENT: Gtk.Window.has_group
#COMMENT: %TRUE if @window has an explicit window group.

Since 2.22
#NAME: initial_chars
#PARENT: Gtk.EntryBuffer.new.EntryBuffer
#COMMENT: initial buffer text, or %NULL
#NAME: get_draw_sensitive
#PARENT: Gtk.CellView.get_draw_sensitive
#COMMENT: whether @cell_view draws all of its
cells in a sensitive state
#NAME: dir
#PARENT: Gtk.Widget.set_default_direction.none
#COMMENT: the new default direction. This cannot be
       %GTK_TEXT_DIR_NONE.
#NAME: self
#PARENT: Gtk.AppChooserButton.append_custom_item.none
#COMMENT: a #GtkAppChooserButton
#NAME: scroll_type
#PARENT: Gtk.Paned.move-handle.gboolean
#COMMENT: a #GtkScrollType
#NAME: targets_include_text
#PARENT: Gtk.SelectionData
#COMMENT: Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide text.
#NAME: fontname
#PARENT: Gtk.FontSelection.set_font_name.gboolean
#COMMENT: a font name like “Helvetica 12” or “Times Bold 18”
#NAME: entry
#PARENT: Gtk.Entry.set_progress_fraction.none
#COMMENT: a #GtkEntry
#NAME: entry
#PARENT: Gtk.Entry.get_tabs.Pango.TabArray
#COMMENT: a #GtkEntry
#NAME: path
#PARENT: Gtk.IconView.set_drag_dest_item.none
#COMMENT: The path of the item to highlight, or %NULL.
#NAME: icon_view
#PARENT: Gtk.IconView.set_pixbuf_column.none
#COMMENT: A #GtkIconView.
#NAME: row_has_child_toggled
#PARENT: Gtk.TreeModel
#COMMENT: Emits the #GtkTreeModel::row-has-child-toggled signal on
@tree_model. This should be called by models after the child
state of a node changes.
#NAME: append_page
#PARENT: Gtk.Assistant.append_page
#COMMENT: the index (starting at 0) of the inserted page
#NAME: get_description
#PARENT: Gtk.RecentInfo
#COMMENT: Gets the (short) description of the resource.
#NAME: STOCK_PASTE
#PARENT: Gtk
#COMMENT: The “Paste” item and icon.
#NAME: iter
#PARENT: Gtk.TextTag.event.gboolean
#COMMENT: a #GtkTextIter pointing at the location the event occured
#NAME: icon_size_lookup
#PARENT: Gtk
#COMMENT: Obtains the pixel size of a semantic icon size @size:
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
isn’t normally needed, gtk_icon_theme_load_icon() is the usual
way to get an icon for rendering, then just look at the size of
the rendered pixbuf. The rendered pixbuf may not even correspond to
the width/height returned by gtk_icon_size_lookup(), because themes
are free to render the pixbuf however they like, including changing
the usual size.
#NAME: hardware_keycode
#PARENT: Gtk.CellRendererAccel.accel-edited.none
#COMMENT: the keycode of the new accelerator
#NAME: flags
#PARENT: Gtk.CellAreaClass.event.event.gint
#COMMENT: the #GtkCellRendererState for @area in this row.
#NAME: window
#PARENT: Gtk.Window.has_group.gboolean
#COMMENT: a #GtkWindow
#NAME: tab_text
#PARENT: Gtk.Notebook.set_tab_label_text.none
#COMMENT: the label text
#NAME: target
#PARENT: Gtk.TargetEntry.new.TargetEntry
#COMMENT: String identifier for target
#NAME: buffer
#PARENT: Gtk.TextBuffer.insert_range.none
#COMMENT: a #GtkTextBuffer
#NAME: widget
#PARENT: Gtk.Widget.set_vexpand.none
#COMMENT: the widget
#NAME: buffer
#PARENT: Gtk.TextBufferClass.apply_tag.apply_tag.none
#COMMENT: a #GtkTextBuffer
#NAME: no_show_all
#PARENT: Gtk.Widget.set_no_show_all.none
#COMMENT: the new value for the “no-show-all” property
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_filter.RecentFilter
#COMMENT: a #GtkRecentChooser
#NAME: sort_func
#PARENT: Gtk.TreeSortable.set_sort_func.none
#COMMENT: The comparison function
#NAME: xalign
#PARENT: Gtk.Misc.get_alignment.none
#COMMENT: location to store X alignment of @misc, or %NULL
#NAME: x
#PARENT: Gtk.GestureDrag.get_start_point.gboolean
#COMMENT: X coordinate for the drag start point
#NAME: icon
#PARENT: Gtk.Image.new_from_gicon.Widget
#COMMENT: an icon
#NAME: slider_start
#PARENT: Gtk.Range.get_slider_range.none
#COMMENT: return location for the slider's
    start, or %NULL
#NAME: iter
#PARENT: Gtk.TextIter.ends_sentence.gboolean
#COMMENT: a #GtkTextIter
#NAME: style
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: a #GtkStyle
#NAME: keyval
#PARENT: Gtk.test_widget_send_key.gboolean
#COMMENT: A Gdk keyboard value.
#NAME: y
#PARENT: Gtk.GestureDrag.get_start_point.gboolean
#COMMENT: Y coordinate for the drag start point
#NAME: context
#PARENT: Gtk.PrintContext.get_height.gdouble
#COMMENT: a #GtkPrintContext
#NAME: upwards
#PARENT: Gtk.test_spin_button_click.gboolean
#COMMENT: %TRUE for upwards arrow click, %FALSE for downwards arrow click.
#NAME: builder
#PARENT: Gtk.Builder.expose_object.none
#COMMENT: a #GtkBuilder
#NAME: calendar
#PARENT: Gtk.Calendar.set_detail_height_rows.none
#COMMENT: a #GtkCalendar.
#NAME: tree_view
#PARENT: Gtk.TreeView.collapse_all.none
#COMMENT: A #GtkTreeView.
#NAME: get_pango_context
#PARENT: Gtk.Widget
#COMMENT: Gets a #PangoContext with the appropriate font map, font description,
and base direction for this widget. Unlike the context returned
by gtk_widget_create_pango_context(), this context is owned by
the widget (it can be used until the screen for the widget changes
or the widget is removed from its toplevel), and will be updated to
match any changes to the widget’s attributes. This can be tracked
by using the #GtkWidget::screen-changed signal on the widget.
#NAME: event
#PARENT: Gtk.Widget.key-press-event.gboolean
#COMMENT: the #GdkEventKey which triggered this signal.
#NAME: detail
#PARENT: Gtk.paint_check.none
#COMMENT: a style detail
#NAME: builder
#PARENT: Gtk.Builder.set_translation_domain.none
#COMMENT: a #GtkBuilder
#NAME: str
#PARENT: Gtk.IMContextClass.get_preedit_string.get_preedit_string.none
#COMMENT: location to store the retrieved
             string. The string retrieved must be freed with g_free().
#NAME: get_round_digits
#PARENT: Gtk.Range
#COMMENT: Gets the number of digits to round the value to when
it changes. See #GtkRange::change-value.
#NAME: STYLE_CLASS_ENTRY
#PARENT: Gtk
#COMMENT: A CSS class to match text entries.

This is used by #GtkEntry.
#NAME: resource_path
#PARENT: Gtk.CssProvider.load_from_resource.none
#COMMENT: a #GResource resource path
#NAME: box
#PARENT: Gtk.Box.get_spacing.gint
#COMMENT: a #GtkBox
#NAME: label
#PARENT: Gtk.CheckMenuItem.new_with_label.Widget
#COMMENT: the string to use for the label.
#NAME: setting
#PARENT: Gtk.Dialog.set_response_sensitive.none
#COMMENT: %TRUE for sensitive
#NAME: chooser
#PARENT: Gtk.RecentChooserIface.unselect_uri.unselect_uri.none
#COMMENT: a #GtkRecentChooser
#NAME: vhomogeneous
#PARENT: Gtk.Stack
#COMMENT: %TRUE if the stack allocates the same height for all children.
#NAME: targets
#PARENT: Gtk.targets_include_image.gboolean
#COMMENT: an array of #GdkAtoms
#NAME: to_rgb
#PARENT: Gtk.HSV
#COMMENT: Converts a color from HSV space to RGB.

Input values must be in the [0.0, 1.0] range;
output values will be in the same range.
#NAME: background_area
#PARENT: Gtk.CellRenderer.start_editing.CellEditable
#COMMENT: background area as passed to gtk_cell_renderer_render()
#NAME: group_name
#PARENT: Gtk.PrintSettings.load_key_file.gboolean
#COMMENT: the name of the group to use, or %NULL to use the default
    “Print Settings”
#NAME: get_current_event_device
#PARENT: Gtk.get_current_event_device
#COMMENT: a #GdkDevice, or %NULL
#NAME: setup
#PARENT: Gtk.PageSetup.to_key_file.none
#COMMENT: a #GtkPageSetup
#NAME: new
#PARENT: Gtk.FileFilter.new
#COMMENT: a new #GtkFileFilter
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_screen.Gdk.Screen
#COMMENT: a #GtkThemingEngine
#NAME: minimum_height
#PARENT: Gtk.Widget.get_preferred_height_for_width.none
#COMMENT: location for storing the minimum height, or %NULL
#NAME: completion
#PARENT: Gtk.EntryCompletion.complete.none
#COMMENT: a #GtkEntryCompletion
#NAME: application_id
#PARENT: Gtk.Application.new.Application
#COMMENT: The application ID.
#NAME: notebook
#PARENT: Gtk.Notebook.set_action_widget.none
#COMMENT: a #GtkNotebook
#NAME: can_insert
#PARENT: Gtk.TextIter
#COMMENT: Considering the default editability of the buffer, and tags that
affect editability, determines whether text inserted at @iter would
be editable. If text inserted at @iter would be editable then the
user should be allowed to insert text at @iter.
gtk_text_buffer_insert_interactive() uses this function to decide
whether insertions are allowed at a given position.
#NAME: new
#PARENT: Gtk.ToolItemGroup
#COMMENT: Creates a new tool item group with label @label.
#NAME: keynav_failed
#PARENT: Gtk.WidgetClass.keynav_failed.keynav_failed
#COMMENT: %TRUE if stopping keyboard navigation is fine, %FALSE
              if the emitting widget should try to handle the keyboard
              navigation attempt in its parent container(s).
#NAME: style
#PARENT: Gtk.paint_hline.none
#COMMENT: a #GtkStyle
#NAME: new_text
#PARENT: Gtk.EditableInterface.insert_text.insert_text.none
#COMMENT: the text to append
#NAME: label
#PARENT: Gtk.Label.set_text.none
#COMMENT: a #GtkLabel
#NAME: user_data
#PARENT: Gtk.TreeIter
#COMMENT: model-specific data
#NAME: etched_in
#PARENT: Gtk.ShadowType
#COMMENT: The outline has a sunken 3d appearance.
#NAME: menu
#PARENT: Gtk.Menu.get_tearoff_state.gboolean
#COMMENT: a #GtkMenu
#NAME: font_desc
#PARENT: Gtk.Widget.override_font.none
#COMMENT: the font descriptiong to use, or %NULL to undo
    the effect of previous calls to gtk_widget_override_font()
#NAME: child
#PARENT: Gtk.FlowBox.unselect_child.none
#COMMENT: a child of @box
#NAME: get_shadow_type
#PARENT: Gtk.ScrolledWindow
#COMMENT: Gets the shadow type of the scrolled window. See
gtk_scrolled_window_set_shadow_type().
#NAME: get_short_label
#PARENT: Gtk.Action.get_short_label
#COMMENT: the short label text.
#NAME: none
#PARENT: Gtk.ButtonsType
#COMMENT: no buttons at all
#NAME: label
#PARENT: Gtk.MenuItem
#COMMENT: The text for the child label.
#NAME: line_number
#PARENT: Gtk.TextBuffer.get_iter_at_line_offset.none
#COMMENT: line number counting from 0
#NAME: get_visual
#PARENT: Gtk.Widget.get_visual
#COMMENT: the visual for @widget
#NAME: pack_end
#PARENT: Gtk.CellAreaBox
#COMMENT: Adds @renderer to @box, packed with reference to the end of @box.

The @renderer is packed after (away from end of) any other
#GtkCellRenderer packed with reference to the end of @box.
#NAME: get_parent
#PARENT: Gtk.CssSection
#COMMENT: Gets the parent section for the given @section. The parent section is
the section that contains this @section. A special case are sections of
type #GTK_CSS_SECTION_DOCUMENT. Their parent will either be %NULL
if they are the original CSS document that was loaded by
gtk_css_provider_load_from_file() or a section of type
#GTK_CSS_SECTION_IMPORT if it was loaded with an import rule from
a different file.
#NAME: get_font
#PARENT: Gtk.ThemingEngine
#COMMENT: Returns the font description for a given state.
#NAME: gap_x
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: starting position of the gap
#NAME: source
#PARENT: Gtk.IconSource.set_direction.none
#COMMENT: a #GtkIconSource
#NAME: words
#PARENT: Gtk.MovementStep
#COMMENT: Move forward or back by words
#NAME: location
#PARENT: Gtk.PlacesSidebar.set_location.none
#COMMENT: location to select, or #NULL for no current path
#NAME: border
#PARENT: Gtk.StyleContext.get_border.none
#COMMENT: return value for the border settings
#NAME: secondary
#PARENT: Gtk.Widget.modify_cursor.none
#COMMENT: the color to use for secondary cursor (does
    not need to be allocated), or %NULL to undo the effect of
    previous calls to of gtk_widget_modify_cursor().
#NAME: cr
#PARENT: Gtk.cairo_should_draw_window.gboolean
#COMMENT: a cairo context
#NAME: label
#PARENT: Gtk.RadioMenuItem.new_with_label.Widget
#COMMENT: the text for the label
#NAME: get_headers_clickable
#PARENT: Gtk.TreeView
#COMMENT: Returns whether all header columns are clickable.
#NAME: bar
#PARENT: Gtk.HeaderBar.set_decoration_layout.none
#COMMENT: a #GtkHeaderBar
#NAME: get_print_settings
#PARENT: Gtk.PrintOperation.get_print_settings
#COMMENT: the current print settings of @op.
#NAME: set_embed_page_setup
#PARENT: Gtk.PrintOperation
#COMMENT: Embed page size combo box and orientation combo box into page setup page.
Selected page setup is stored as default page setup in #GtkPrintOperation.
#NAME: set_has_tooltip
#PARENT: Gtk.StatusIcon
#COMMENT: Sets the has-tooltip property on @status_icon to @has_tooltip.
See #GtkStatusIcon:has-tooltip for more information.
#NAME: unit
#PARENT: Gtk.PageSetup.set_top_margin.none
#COMMENT: the units for @margin
#NAME: new
#PARENT: Gtk.ToolItem.new
#COMMENT: the new #GtkToolItem
#NAME: proxy
#PARENT: Gtk.TreeRowReference.new_proxy.TreeRowReference
#COMMENT: a proxy #GObject
#NAME: is_secondary
#PARENT: Gtk.ButtonBox.set_child_secondary.none
#COMMENT: if %TRUE, the @child appears in a secondary group of the
               button box.
#NAME: chooser
#PARENT: Gtk.FileChooser.get_preview_filename.filename
#COMMENT: a #GtkFileChooser
#NAME: deleted
#PARENT: Gtk.TreeRowReference
#COMMENT: Lets a set of row reference created by
gtk_tree_row_reference_new_proxy() know that the
model emitted the #GtkTreeModel::row-deleted signal.
#NAME: get_use_size
#PARENT: Gtk.FontButton
#COMMENT: Returns whether the selected size is used in the label.
#NAME: window
#PARENT: Gtk.Widget.set_window.none
#COMMENT: a #GdkWindow
#NAME: list_store
#PARENT: Gtk.ListStore.append.none
#COMMENT: A #GtkListStore
#NAME: adjustment
#PARENT: Gtk.Range.set_adjustment.none
#COMMENT: a #GtkAdjustment
#NAME: gtk-toolbar-icon-size
#PARENT: Gtk.Settings
#COMMENT: The size of icons in default toolbars.
#NAME: where
#PARENT: Gtk.TextBuffer.create_mark.TextMark
#COMMENT: location to place mark
#NAME: chooser
#PARENT: Gtk.FileChooser.select_file.gboolean
#COMMENT: a #GtkFileChooser
#NAME: color
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: spin_button
#PARENT: Gtk.SpinButton.get_numeric.gboolean
#COMMENT: a #GtkSpinButton
#NAME: get_menubar
#PARENT: Gtk.Application
#COMMENT: Returns the menu model that has been set with
gtk_application_set_menubar().
#NAME: ends_tag
#PARENT: Gtk.TextIter
#COMMENT: Returns %TRUE if @tag is toggled off at exactly this point. If @tag
is %NULL, returns %TRUE if any tag is toggled off at this point.

Note that if gtk_text_iter_ends_tag() returns %TRUE, it means that @iter is
at the end of the tagged range, but that the character
at @iter is outside the tagged range. In other words,
unlike gtk_text_iter_begins_tag(), if gtk_text_iter_ends_tag() returns %TRUE,
gtk_text_iter_has_tag() will return %FALSE for the same parameters.
#NAME: dest_path
#PARENT: Gtk.TreeDragDest.row_drop_possible.gboolean
#COMMENT: destination row
#NAME: state
#PARENT: Gtk.Widget.modify_bg.none
#COMMENT: the state for which to set the background color
#NAME: font-name
#PARENT: Gtk.FontButton
#COMMENT: The name of the currently selected font.
#NAME: get_spacing
#PARENT: Gtk.IconView
#COMMENT: Returns the value of the ::spacing property.
#NAME: get_font
#PARENT: Gtk.StyleContext
#COMMENT: Returns the font description for a given state. The returned
object is const and will remain valid until the
#GtkStyleContext::changed signal happens.
#NAME: set_page_type
#PARENT: Gtk.Assistant
#COMMENT: Sets the page type for @page.

The page type determines the page behavior in the @assistant.
#NAME: add_class
#PARENT: Gtk.StyleContext
#COMMENT: Adds a style class to @context, so posterior calls to
gtk_style_context_get() or any of the gtk_render_*()
functions will make use of this new class for styling.

In the CSS file format, a #GtkEntry defining an “entry”
class, would be matched by:

|[
GtkEntry.entry { ... }
]|

While any widget defining an “entry” class would be
matched by:
|[
.entry { ... }
]|
#NAME: context
#PARENT: Gtk.render_expander.none
#COMMENT: a #GtkStyleContext
#NAME: n_children
#PARENT: Gtk.FlowBox.set_min_children_per_line.none
#COMMENT: the minimum number of children per line
#NAME: label
#PARENT: Gtk.Button.set_label.none
#COMMENT: a string
#NAME: new
#PARENT: Gtk.VBox.new
#COMMENT: a new #GtkVBox.
#NAME: text_index_to_layout_index
#PARENT: Gtk.Entry.text_index_to_layout_index
#COMMENT: byte index into the entry layout text
#NAME: bx
#PARENT: Gtk.IconView.convert_widget_to_bin_window_coords.none
#COMMENT: return location for bin_window X coordinate
#NAME: screen
#PARENT: Gtk.StatusIcon.set_screen.none
#COMMENT: a #GdkScreen
#NAME: by
#PARENT: Gtk.IconView.convert_widget_to_bin_window_coords.none
#COMMENT: return location for bin_window Y coordinate
#NAME: number_up_layout
#PARENT: Gtk.PrintSettings.set_number_up_layout.none
#COMMENT: a #GtkNumberUpLayout value
#NAME: engine
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: data
#PARENT: Gtk.TargetEntry.free.none
#COMMENT: a pointer to a #GtkTargetEntry.
#NAME: position
#PARENT: Gtk.Editable.insert-text.none
#COMMENT: the position, in characters,
    at which to insert the new text. this is an in-out
    parameter.  After the signal emission is finished, it
    should point after the newly inserted text.
#NAME: iter_has_child
#PARENT: Gtk.TreeModelIface.iter_has_child.iter_has_child
#COMMENT: %TRUE if @iter has children
#NAME: get_debug_flags
#PARENT: Gtk
#COMMENT: Returns the GTK+ debug flags.

This function is intended for GTK+ modules that want
to adjust their debug output based on GTK+ debug flags.
#NAME: list_shortcut_folders
#PARENT: Gtk.FileChooser
#COMMENT: Queries the list of shortcut folders in the file chooser, as set by
gtk_file_chooser_add_shortcut_folder().
#NAME: rectangle
#PARENT: Gtk.IconInfo.get_embedded_rect.gboolean
#COMMENT: #GdkRectangle in which to store embedded
  rectangle coordinates; coordinates are only stored
  when this function returns %TRUE.
#NAME: unknown
#PARENT: Gtk.License
#COMMENT: No license specified
#NAME: context
#PARENT: Gtk.PrintOperation.paginate.gboolean
#COMMENT: the #GtkPrintContext for the current operation
#NAME: STOCK_NEW
#PARENT: Gtk
#COMMENT: The “New” item and icon.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_geometry.gboolean
#COMMENT: a #GtkStatusIcon
#NAME: value
#PARENT: Gtk.StyleProperties.set_property.none
#COMMENT: new value for the property
#NAME: value-changed
#PARENT: Gtk.Adjustment
#COMMENT: Emitted when the #GtkAdjustment:value property has been changed.
#NAME: push_in
#PARENT: Gtk.MenuPositionFunc.none
#COMMENT: This parameter controls how menus placed outside
    the monitor are handled.  If this is set to %TRUE and part of
    the menu is outside the monitor then GTK+ pushes the window
    into the visible area, effectively modifying the popup
    position.  Note that moving and possibly resizing the menu
    around will alter the scroll position to keep the menu items
    “in place”, i.e. at the same monitor position they would have
    been without resizing.  In practice, this behavior is only
    useful for combobox popups or option menus and cannot be used
    to simply confine a menu to monitor boundaries.  In that case,
    changing the scroll offset is not desirable.
#NAME: slide_up
#PARENT: Gtk.RevealerTransitionType
#COMMENT: Slide in from the bottom
#NAME: is_end
#PARENT: Gtk.TextIter
#COMMENT: Returns %TRUE if @iter is the end iterator, i.e. one past the last
dereferenceable iterator in the buffer. gtk_text_iter_is_end() is
the most efficient way to check whether an iterator is the end
iterator.
#NAME: move_child
#PARENT: Gtk.TextView
#COMMENT: Updates the position of a child, as for gtk_text_view_add_child_in_window().
#NAME: width
#PARENT: Gtk.paint_box_gap.none
#COMMENT: width of the rectangle
#NAME: new_with_dialog
#PARENT: Gtk.FileChooserButton.new_with_dialog
#COMMENT: a new button widget.
#NAME: set_create_folders
#PARENT: Gtk.FileChooser
#COMMENT: Sets whether file choser will offer to create new folders.
This is only relevant if the action is not set to be
%GTK_FILE_CHOOSER_ACTION_OPEN.
#NAME: new
#PARENT: Gtk.PopoverMenu.new
#COMMENT: a new #GtkPopoverMenu
#NAME: show-menubar
#PARENT: Gtk.ApplicationWindow
#COMMENT: If this property is %TRUE, the window will display a menubar
that includes the app menu and menubar, unless these are
shown by the desktop shell. See gtk_application_set_app_menu()
and gtk_application_set_menubar().

If %FALSE, the window will not display a menubar, regardless
of whether the desktop shell is showing the menus or not.
#NAME: max_length
#PARENT: Gtk.EntryBuffer.set_max_length.none
#COMMENT: the maximum length of the entry buffer, or 0 for no maximum.
  (other than the maximum length of entries.) The value passed in will
  be clamped to the range 0-65536.
#NAME: settings
#PARENT: Gtk.PrintSettings.to_key_file.none
#COMMENT: a #GtkPrintSettings
#NAME: load_icon_finish
#PARENT: Gtk.IconInfo
#COMMENT: Finishes an async icon load, see gtk_icon_info_load_icon_async().
#NAME: area
#PARENT: Gtk.ComboBox.new_with_area.Widget
#COMMENT: the #GtkCellArea to use to layout cell renderers
#NAME: drag-action-ask
#PARENT: Gtk.PlacesSidebar
#COMMENT: The places sidebar emits this signal when it needs to ask the application
to pop up a menu to ask the user for which drag action to perform.
#NAME: match_start
#PARENT: Gtk.TextIter.forward_search.gboolean
#COMMENT: return location for start of match, or %NULL
#NAME: get_translation_domain
#PARENT: Gtk.Builder
#COMMENT: Gets the translation domain of @builder.
#NAME: get_n_pages
#PARENT: Gtk.Assistant
#COMMENT: Returns the number of pages in the @assistant
#NAME: page
#PARENT: Gtk.Assistant.get_page_header_image.GdkPixbuf.Pixbuf
#COMMENT: a page of @assistant
#NAME: image
#PARENT: Gtk.ImageMenuItem
#COMMENT: Child widget to appear next to the menu text.
#NAME: min_value
#PARENT: Gtk.LevelBar.new_for_interval.Widget
#COMMENT: a positive value
#NAME: filter
#PARENT: Gtk.RecentChooserIface.remove_filter.remove_filter.none
#COMMENT: a #GtkRecentFilter
#NAME: is_start
#PARENT: Gtk.TextIter
#COMMENT: Returns %TRUE if @iter is the first iterator in the buffer, that is
if @iter has a character offset of 0.
#NAME: new
#PARENT: Gtk.Widget.new
#COMMENT: a new #GtkWidget of type @widget_type
#NAME: height
#PARENT: Gtk.CellAreaContext.get_allocation.none
#COMMENT: location to store the allocated height, or %NULL
#NAME: set_font_name
#PARENT: Gtk.FontSelectionDialog
#COMMENT: Sets the currently selected font.
#NAME: set_input_hints
#PARENT: Gtk.TextView
#COMMENT: Sets the #GtkTextView:input-hints property, which
allows input methods to fine-tune their behaviour.
#NAME: context
#PARENT: Gtk.GLArea.render.gboolean
#COMMENT: the #GdkGLContext used by @area
#NAME: descending
#PARENT: Gtk.SortType
#COMMENT: Sorting is in descending order.
#NAME: cr
#PARENT: Gtk.render_layout.none
#COMMENT: a #cairo_t
#NAME: get_windows
#PARENT: Gtk.Application
#COMMENT: Gets a list of the #GtkWindows associated with @application.

The list is sorted by most recently focused window, such that the first
element is the currently focused window. (Useful for choosing a parent
for a transient window.)

The list that is returned should not be modified in any way. It will
only remain valid until the next focus change or window creation or
deletion.
#NAME: colorsel
#PARENT: Gtk.ColorSelection.set_previous_alpha.none
#COMMENT: a #GtkColorSelection
#NAME: entry
#PARENT: Gtk.Entry.get_icon_name.utf8
#COMMENT: A #GtkEntry
#NAME: get_has_selection
#PARENT: Gtk.PrintOperation.get_has_selection
#COMMENT: whether there is a selection
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_clickable.gboolean
#COMMENT: a #GtkTreeViewColumn
#NAME: open
#PARENT: Gtk.FileChooserAction
#COMMENT: Indicates open mode.  The file chooser
 will only let the user pick an existing file.
#NAME: homogeneous
#PARENT: Gtk.FlowBox.set_homogeneous.none
#COMMENT: %TRUE to create equal allotments,
  %FALSE for variable allotments
#NAME: context_description
#PARENT: Gtk.Statusbar.get_context_id.guint
#COMMENT: textual description of what context
                      the new message is being used in
#NAME: iconify
#PARENT: Gtk.Window
#COMMENT: Asks to iconify (i.e. minimize) the specified @window. Note that
you shouldn’t assume the window is definitely iconified afterward,
because other entities (e.g. the user or
[window manager][gtk-X11-arch]) could deiconify it
again, or there may not be a window manager in which case
iconification isn’t possible, etc. But normally the window will end
up iconified. Just don’t write code that crashes if not.

It’s permitted to call this function before showing a window,
in which case the window will be iconified before it ever appears
onscreen.

You can track iconification via the “window-state-event” signal
on #GtkWidget.
#NAME: filename
#PARENT: Gtk.rc_add_default_file.none
#COMMENT: the pathname to the file. If @filename
   is not absolute, it is searched in the current directory.
#NAME: area
#PARENT: Gtk.CellArea.is_focus_sibling.gboolean
#COMMENT: a #GtkCellArea
#NAME: get_always_show_image
#PARENT: Gtk.ImageMenuItem.get_always_show_image
#COMMENT: %TRUE if the menu item will always show the image
#NAME: step
#PARENT: Gtk.Range.move-slider.none
#COMMENT: how to move the slider
#NAME: chooser
#PARENT: Gtk.RecentChooserIface.remove_filter.remove_filter.none
#COMMENT: a #GtkRecentChooser
#NAME: cr
#PARENT: Gtk.Widget.draw.gboolean
#COMMENT: the cairo context to draw to
#NAME: type
#PARENT: Gtk.Window.new.Widget
#COMMENT: type of window
#NAME: height
#PARENT: Gtk.render_activity.none
#COMMENT: rectangle height
#NAME: 
#PARENT: Gtk.Container.child_set.none...
#COMMENT: a %NULL-terminated list of property names and values, starting
    with @first_prop_name
#NAME: get_font_family
#PARENT: Gtk.FontChooserIface.get_font_family.get_font_family
#COMMENT: A #PangoFontFamily representing the
    selected font family, or %NULL. The returned object is owned by @fontchooser
    and must not be modified or freed.
#NAME: completion
#PARENT: Gtk.EntryCompletion.get_model.TreeModel
#COMMENT: a #GtkEntryCompletion
#NAME: new
#PARENT: Gtk.IconTheme.new
#COMMENT: the newly created #GtkIconTheme object.
#NAME: dir_ltr
#PARENT: Gtk.StateFlags
#COMMENT: Widget is in left-to-right text direction. Since 3.8
#NAME: style
#PARENT: Gtk.paint_box.none
#COMMENT: a #GtkStyle
#NAME: accel-mode
#PARENT: Gtk.CellRendererAccel
#COMMENT: Determines if the edited accelerators are GTK+ accelerators. If
they are, consumed modifiers are suppressed, only accelerators
accepted by GTK+ are allowed, and the accelerators are rendered
in the same way as they are in menus.
#NAME: entry
#PARENT: Gtk.Entry.set_icon_sensitive.none
#COMMENT: A #GtkEntry
#NAME: primary
#PARENT: Gtk.Widget.modify_cursor.none
#COMMENT: the color to use for primary cursor (does not
    need to be allocated), or %NULL to undo the effect of previous
    calls to of gtk_widget_modify_cursor().
#NAME: minimum_height
#PARENT: Gtk.WidgetClass.get_preferred_height_and_baseline_for_width.get_preferred_height_and_baseline_for_width.none
#COMMENT: location for storing the minimum height, or %NULL
#NAME: get_reverse
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_REVERSE.
#NAME: buffer
#PARENT: Gtk.Builder.add_from_string.guint
#COMMENT: the string to parse
#NAME: n_args
#PARENT: Gtk.BindingEntry.add_signal.none
#COMMENT: number of arguments to @signal_name
#NAME: settings
#PARENT: Gtk.PrintSettings.get_output_bin.utf8
#COMMENT: a #GtkPrintSettings
#NAME: popover
#PARENT: Gtk.Popover.set_transitions_enabled.none
#COMMENT: a #GtkPopover
#NAME: set_junction_sides
#PARENT: Gtk.StyleContext
#COMMENT: Sets the sides where rendered elements (mostly through
gtk_render_frame()) will visually connect with other visual elements.

This is merely a hint that may or may not be honored
by themes.

Container widgets are expected to set junction hints as appropriate
for their children, so it should not normally be necessary to call
this function manually.
#NAME: widget
#PARENT: Gtk.WidgetClass.size_allocate.size_allocate.none
#COMMENT: a #GtkWidget
#NAME: STYLE_REGION_ROW
#PARENT: Gtk
#COMMENT: A widget region name to define a treeview row.
#NAME: widget
#PARENT: Gtk.paint_slider.none
#COMMENT: the widget
#NAME: widget
#PARENT: Gtk.Widget.grab_remove.none
#COMMENT: The widget which gives up the grab
#NAME: cell_area
#PARENT: Gtk.CellArea.event.gint
#COMMENT: the @widget relative coordinates for @area
#NAME: new_with_label_from_widget
#PARENT: Gtk.RadioMenuItem.new_with_label_from_widget
#COMMENT: The new #GtkRadioMenuItem
#NAME: stock_id
#PARENT: Gtk.StockItem
#COMMENT: Identifier.
#NAME: info
#PARENT: Gtk.TargetPair
#COMMENT: an application-assigned integer ID which will
    get passed as a parameter to e.g the #GtkWidget::selection-get
    signal. It allows the application to identify the target
    type without extensive string compares.
#NAME: context
#PARENT: Gtk.Widget.drag-drop.gboolean
#COMMENT: the drag context
#NAME: path
#PARENT: Gtk.WidgetPath.iter_get_object_type.GType
#COMMENT: a #GtkWidgetPath
#NAME: chooser
#PARENT: Gtk.FileChooser.get_local_only.gboolean
#COMMENT: a #GtkFileChooser
#NAME: cell
#PARENT: Gtk.CellLayoutIface.add_attribute.add_attribute.none
#COMMENT: a #GtkCellRenderer
#NAME: accel_mods
#PARENT: Gtk.AccelKey
#COMMENT: The accelerator modifiers
#NAME: bx
#PARENT: Gtk.TreeView.convert_bin_window_to_tree_coords.none
#COMMENT: X coordinate relative to bin_window
#NAME: get_hexpand_set
#PARENT: Gtk.Widget.get_hexpand_set
#COMMENT: whether hexpand has been explicitly set
#NAME: event
#PARENT: Gtk.Widget.focus-out-event.gboolean
#COMMENT: the #GdkEventFocus which triggered this
  signal.
#NAME: set_max_length
#PARENT: Gtk.Entry
#COMMENT: Sets the maximum allowed length of the contents of the widget. If
the current contents are longer than the given length, then they
will be truncated to fit.

This is equivalent to:

|[<!-- language="C" -->
GtkEntryBuffer *buffer;
buffer = gtk_entry_get_buffer (entry);
gtk_entry_buffer_set_max_length (buffer, max);
]|
#NAME: set_local_only
#PARENT: Gtk.PlacesSidebar
#COMMENT: Sets whether the @sidebar should only show local files.
#NAME: tag_name
#PARENT: Gtk.TextBuffer.create_tag.TextTag
#COMMENT: name of the new tag, or %NULL
#NAME: by
#PARENT: Gtk.TreeView.convert_bin_window_to_tree_coords.none
#COMMENT: Y coordinate relative to bin_window
#NAME: get_current_uri
#PARENT: Gtk.Label.get_current_uri
#COMMENT: the currently active URI. The string is owned by GTK+ and must
  not be freed or modified.
#NAME: get_number_up
#PARENT: Gtk.PrintSettings.get_number_up
#COMMENT: the number of pages per sheet
#NAME: set_transition_type
#PARENT: Gtk.Stack
#COMMENT: Sets the type of animation that will be used for
transitions between pages in @stack. Available
types include various kinds of fades and slides.

The transition type can be changed without problems
at runtime, so it is possible to change the animation
based on the page that is about to become current.
#NAME: bar
#PARENT: Gtk.HeaderBar.set_custom_title.none
#COMMENT: a #GtkHeaderBar
#NAME: palette
#PARENT: Gtk.ToolPalette.unset_icon_size.none
#COMMENT: a #GtkToolPalette
#NAME: leave
#PARENT: Gtk.Button
#COMMENT: Emitted when the pointer leaves the button.
#NAME: select_uri
#PARENT: Gtk.RecentChooser
#COMMENT: Selects @uri inside @chooser.
#NAME: get_completion
#PARENT: Gtk.Entry.get_completion
#COMMENT: The auxiliary completion object currently
    in use by @entry.
#NAME: accel-mods
#PARENT: Gtk.CellRendererAccel
#COMMENT: The modifier mask of the accelerator.
#NAME: buildable
#PARENT: Gtk.BuildableIface.add_child.add_child.none
#COMMENT: a #GtkBuildable
#NAME: set_font_name
#PARENT: Gtk.FontSelection
#COMMENT: Sets the currently-selected font.

Note that the @fontsel needs to know the screen in which it will appear
for this to work; this can be guaranteed by simply making sure that the
@fontsel is inserted in a toplevel window before you call this function.
#NAME: set_wide_handle
#PARENT: Gtk.Paned
#COMMENT: Sets the #GtkPaned:wide-handle property.
#NAME: get_duplex
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_DUPLEX.
#NAME: backward_visible_word_starts
#PARENT: Gtk.TextIter.backward_visible_word_starts
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: width
#PARENT: Gtk.Widget.get_preferred_height_and_baseline_for_width.none
#COMMENT: the width which is available for allocation, or -1 if none
#NAME: get_alignment
#PARENT: Gtk.CellRenderer
#COMMENT: Fills in @xalign and @yalign with the appropriate values of @cell.
#NAME: EntryIconPosition
#PARENT: Gtk
#COMMENT: Specifies the side of the entry at which an icon is placed.
#NAME: container
#PARENT: Gtk.Container.get_resize_mode.ResizeMode
#COMMENT: a #GtkContainer
#NAME: enable_model_drag_dest
#PARENT: Gtk.IconView
#COMMENT: Turns @icon_view into a drop destination for automatic DND. Calling this
method sets #GtkIconView:reorderable to %FALSE.
#NAME: base_icon
#PARENT: Gtk.NumerableIcon.new.Gio.Icon
#COMMENT: a #GIcon to overlay on
#NAME: get_parent
#PARENT: Gtk.MountOperation
#COMMENT: Gets the transient parent used by the #GtkMountOperation
#NAME: context
#PARENT: Gtk.PrintOperation.request-page-setup.none
#COMMENT: the #GtkPrintContext for the current operation
#NAME: settings
#PARENT: Gtk.PrintSettings.foreach.none
#COMMENT: a #GtkPrintSettings
#NAME: set_hover_expand
#PARENT: Gtk.TreeView
#COMMENT: Enables or disables the hover expansion mode of @tree_view.
Hover expansion makes rows expand or collapse if the pointer
moves over them.
#NAME: TreeViewRowSeparatorFunc
#PARENT: Gtk.TreeViewRowSeparatorFunc
#COMMENT: %TRUE if the row is a separator
#NAME: widget
#PARENT: Gtk.Widget.has_focus.gboolean
#COMMENT: a #GtkWidget
#NAME: end_pos
#PARENT: Gtk.EditableInterface.set_selection_bounds.set_selection_bounds.none
#COMMENT: end of region
#NAME: new
#PARENT: Gtk.ComboBox.new
#COMMENT: A new #GtkComboBox.
#NAME: register-session
#PARENT: Gtk.Application
#COMMENT: Set this property to %TRUE to register with the session manager.
#NAME: header
#PARENT: Gtk.ListBoxRow.set_header.none
#COMMENT: the header, or %NULL
#NAME: section_name
#PARENT: Gtk.AboutDialog.add_credit_section.none
#COMMENT: The name of the section
#NAME: region
#PARENT: Gtk.Widget.shape_combine_region.none
#COMMENT: shape to be added, or %NULL to remove an existing shape
#NAME: container
#PARENT: Gtk.Container.set_focus_vadjustment.none
#COMMENT: a #GtkContainer
#NAME: foreach_func
#PARENT: Gtk.AccelMap.foreach.none
#COMMENT: function to be executed for each accel
               map entry which is not filtered out
#NAME: get_group
#PARENT: Gtk.RadioAction
#COMMENT: Returns the list representing the radio group for this object.
Note that the returned list is only valid until the next change
to the group.

A common way to set up a group of radio group is the following:
|[<!-- language="C" -->
  GSList *group = NULL;
  GtkRadioAction *action;
 
  while ( ...more actions to add... /)
    {
       action = gtk_radio_action_new (...);
       
       gtk_radio_action_set_group (action, group);
       group = gtk_radio_action_get_group (action);
    }
]|
#NAME: spin_button
#PARENT: Gtk.SpinButton.set_range.none
#COMMENT: a #GtkSpinButton
#NAME: forward_visible_cursor_positions
#PARENT: Gtk.TextIter.forward_visible_cursor_positions
#COMMENT: %TRUE if we moved and the new position is dereferenceable
#NAME: widget
#PARENT: Gtk.Widget.get_preferred_width.none
#COMMENT: a #GtkWidget instance
#NAME: siblings
#PARENT: Gtk.WidgetPath.append_with_siblings.gint
#COMMENT: a widget path describing a list of siblings. This path
  may not contain any siblings itself and it must not be modified
  afterwards.
#NAME: render_icon_pixbuf
#PARENT: Gtk.render_icon_pixbuf
#COMMENT: a newly-created #GdkPixbuf containing the rendered icon
#NAME: get_app_info
#PARENT: Gtk.AppChooser.get_app_info
#COMMENT: a #GAppInfo for the currently selected
    application, or %NULL if none is selected. Free with g_object_unref()
#NAME: accelerator_set_default_mod_mask
#PARENT: Gtk
#COMMENT: Sets the modifiers that will be considered significant for keyboard
accelerators. The default mod mask is #GDK_CONTROL_MASK |
#GDK_SHIFT_MASK | #GDK_MOD1_MASK | #GDK_SUPER_MASK |
#GDK_HYPER_MASK | #GDK_META_MASK, that is, Control, Shift, Alt,
Super, Hyper and Meta. Other modifiers will by default be ignored
by #GtkAccelGroup.
You must include at least the three modifiers Control, Shift
and Alt in any value you pass to this function.

The default mod mask should be changed on application startup,
before using any accelerator groups.
#NAME: icon_theme
#PARENT: Gtk.IconTheme.load_icon.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconTheme
#NAME: widget
#PARENT: Gtk.Widget.set_tooltip_markup.none
#COMMENT: a #GtkWidget
#NAME: window
#PARENT: Gtk.Window.get_titlebar.Widget
#COMMENT: a #GtkWindow
#NAME: area
#PARENT: Gtk.CellArea.cell_set_valist.none
#COMMENT: a #GtkCellArea
#NAME: get_text
#PARENT: Gtk.TextIter.get_text
#COMMENT: array of characters from the buffer
#NAME: args
#PARENT: Gtk.ThemingEngine.get_valist.none
#COMMENT: va_list of property name/return location pairs, followed by %NULL
#NAME: buffer
#PARENT: Gtk.Entry.new_with_buffer.Widget
#COMMENT: The buffer to use for the new #GtkEntry.
#NAME: pbar
#PARENT: Gtk.ProgressBar.set_fraction.none
#COMMENT: a #GtkProgressBar
#NAME: child
#PARENT: Gtk.FlowBox.select_child.none
#COMMENT: a child of @box
#NAME: first_button_text
#PARENT: Gtk.InfoBar.new_with_buttons.Widget
#COMMENT: stock ID or text to go in first button, or %NULL
#NAME: child_widget
#PARENT: Gtk.Layout.put.none
#COMMENT: child widget
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_gicon.Gio.Icon
#COMMENT: a #GtkStatusIcon
#NAME: clipboard
#PARENT: Gtk.Clipboard.store.none
#COMMENT: a #GtkClipboard
#NAME: keynav_failed
#PARENT: Gtk.Widget
#COMMENT: This function should be called whenever keyboard navigation within
a single widget hits a boundary. The function emits the
#GtkWidget::keynav-failed signal on the widget and its return
value should be interpreted in a way similar to the return value of
gtk_widget_child_focus():

When %TRUE is returned, stay in the widget, the failed keyboard
navigation is Ok and/or there is nowhere we can/should move the
focus to.

When %FALSE is returned, the caller should continue with keyboard
navigation outside the widget, e.g. by calling
gtk_widget_child_focus() on the widget’s toplevel.

The default ::keynav-failed handler returns %TRUE for
%GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
values of #GtkDirectionType it returns %FALSE.

Whenever the default handler returns %TRUE, it also calls
gtk_widget_error_bell() to notify the user of the failed keyboard
navigation.

A use case for providing an own implementation of ::keynav-failed
(either by connecting to it or by overriding it) would be a row of
#GtkEntry widgets where the user should be able to navigate the
entire row with the cursor keys, as e.g. known from user interfaces
that require entering license keys.
#NAME: STOCK_JUSTIFY_CENTER
#PARENT: Gtk
#COMMENT: The “Center” item and icon.
#NAME: ScrolledWindow
#PARENT: Gtk
#COMMENT: GtkScrolledWindow is a #GtkBin subclass: it’s a container
the accepts a single child widget. GtkScrolledWindow adds scrollbars
to the child widget and optionally draws a beveled frame around the
child widget.

The scrolled window can work in two ways. Some widgets have native
scrolling support; these widgets implement the #GtkScrollable interface.
Widgets with native scroll support include #GtkTreeView, #GtkTextView,
and #GtkLayout.

For widgets that lack native scrolling support, the #GtkViewport
widget acts as an adaptor class, implementing scrollability for child
widgets that lack their own scrolling capabilities. Use #GtkViewport
to scroll child widgets such as #GtkGrid, #GtkBox, and so on.

If a widget has native scrolling abilities, it can be added to the
GtkScrolledWindow with gtk_container_add(). If a widget does not, you
must first add the widget to a #GtkViewport, then add the #GtkViewport
to the scrolled window. gtk_container_add() will do this for you for
widgets that don’t implement #GtkScrollable natively, so you can
ignore the presence of the viewport.

The position of the scrollbars is controlled by the scroll adjustments.
See #GtkAdjustment for the fields in an adjustment — for
#GtkScrollbar, used by GtkScrolledWindow, the “value” field
represents the position of the scrollbar, which must be between the
“lower” field and “upper - page_size.” The “page_size” field
represents the size of the visible scrollable area. The
“step_increment” and “page_increment” fields are used when the user
asks to step down (using the small stepper arrows) or page down (using
for example the PageDown key).

If a GtkScrolledWindow doesn’t behave quite as you would like, or
doesn’t have exactly the right layout, it’s very possible to set up
your own scrolling with #GtkScrollbar and for example a #GtkGrid.

# Touch support

GtkScrolledWindow has built-in support for touch devices. When a
touchscreen is used, swiping will move the scrolled window, and will
expose 'kinetic' behavior. This can be turned off with the
#GtkScrolledWindow:kinetic-scrolling property if it is undesired.

GtkScrolledWindow also displays visual 'overshoot' indication when
the content is pulled beyond the end, and this situation can be
captured with the #GtkScrolledWindow::edge-overshot signal.

If no mouse device is present, the scrollbars will overlayed as
narrow, auto-hiding indicators over the content. If traditional
scrollbars are desired although no mouse is present, this behaviour
can be turned off with the #GtkScrolledWindow:overlay-scrolling
property.
#NAME: has_region
#PARENT: Gtk.ThemingEngine.has_region
#COMMENT: %TRUE if region is defined
#NAME: popup-set-width
#PARENT: Gtk.EntryCompletion
#COMMENT: Determines whether the completions popup window will be
resized to the width of the entry.
#NAME: action
#PARENT: Gtk.Action.block_activate.none
#COMMENT: a #GtkAction
#NAME: get_item_padding
#PARENT: Gtk.IconView
#COMMENT: Returns the value of the ::item-padding property.
#NAME: self
#PARENT: Gtk.AppChooserButton.set_show_dialog_item.none
#COMMENT: a #GtkAppChooserButton
#NAME: path
#PARENT: Gtk.IconView.get_item_column.gint
#COMMENT: the #GtkTreePath of the item
#NAME: color
#PARENT: Gtk.Widget.override_background_color.none
#COMMENT: the color to assign, or %NULL to undo the effect
    of previous calls to gtk_widget_override_background_color()
#NAME: event
#PARENT: Gtk.CellArea.event
#COMMENT: %TRUE if the event was handled by @area.
#NAME: stack
#PARENT: Gtk.Stack.get_vhomogeneous.gboolean
#COMMENT: a #GtkStack
#NAME: value
#PARENT: Gtk.StyleProperties.get_property.gboolean
#COMMENT: return location for the style property value.
#NAME: viewport
#PARENT: Gtk.Viewport.get_view_window.Gdk.Window
#COMMENT: a #GtkViewport
#NAME: handle_box
#PARENT: Gtk.HandleBox.get_shadow_type.ShadowType
#COMMENT: a #GtkHandleBox
#NAME: self
#PARENT: Gtk.AppChooserWidget.set_show_fallback.none
#COMMENT: a #GtkAppChooserWidget
#NAME: num_copies
#PARENT: Gtk.PrintSettings.set_n_copies.none
#COMMENT: the number of copies
#NAME: main_iteration
#PARENT: Gtk
#COMMENT: Runs a single iteration of the mainloop.

If no events are waiting to be processed GTK+ will block
until the next event is noticed. If you don’t want to block
look at gtk_main_iteration_do() or check if any events are
pending with gtk_events_pending() first.
#NAME: PAPER_NAME_EXECUTIVE
#PARENT: Gtk
#COMMENT: Name for the Executive paper size.
#NAME: container
#PARENT: Gtk.Container.remove.none
#COMMENT: a #GtkContainer
#NAME: entry
#PARENT: Gtk.Entry.set_completion.none
#COMMENT: A #GtkEntry
#NAME: menu_shell
#PARENT: Gtk.MenuShellClass.select_item.select_item.none
#COMMENT: a #GtkMenuShell
#NAME: get_resolution_y
#PARENT: Gtk.PrintSettings.get_resolution_y
#COMMENT: the vertical resolution in dpi
#NAME: set_sensitive
#PARENT: Gtk.ActionGroup
#COMMENT: Changes the sensitivity of @action_group
#NAME: equal
#PARENT: Gtk.TextIter.equal
#COMMENT: %TRUE if the iterators point to the same place in the buffer
#NAME: get_path
#PARENT: Gtk.Widget.get_path
#COMMENT: The #GtkWidgetPath representing @widget
#NAME: set_row_spacing
#PARENT: Gtk.Grid
#COMMENT: Sets the amount of space between rows of @grid.
#NAME: data
#PARENT: Gtk.Calendar.set_detail_func.none
#COMMENT: data to pass to @func invokations.
#NAME: select_first
#PARENT: Gtk.MenuShell
#COMMENT: Select the first visible or selectable child of the menu shell;
don’t select tearoff items unless the only item is a tearoff
item.
#NAME: get_modal
#PARENT: Gtk.Popover.get_modal
#COMMENT: #TRUE if @popover is modal
#NAME: new
#PARENT: Gtk.GestureZoom
#COMMENT: Returns a newly created #GtkGesture that recognizes zoom
in/out gestures (usually known as pinch/zoom).
#NAME: AccelLabel
#PARENT: Gtk
#COMMENT: The #GtkAccelLabel widget is a subclass of #GtkLabel that also displays an
accelerator key on the right of the label text, e.g. “Ctl+S”.
It is commonly used in menus to show the keyboard short-cuts for commands.

The accelerator key to display is not set explicitly.
Instead, the #GtkAccelLabel displays the accelerators which have been added to
a particular widget. This widget is set by calling
gtk_accel_label_set_accel_widget().

For example, a #GtkMenuItem widget may have an accelerator added to emit the
“activate” signal when the “Ctl+S” key combination is pressed.
A #GtkAccelLabel is created and added to the #GtkMenuItem, and
gtk_accel_label_set_accel_widget() is called with the #GtkMenuItem as the
second argument. The #GtkAccelLabel will now display “Ctl+S” after its label.

Note that creating a #GtkMenuItem with gtk_menu_item_new_with_label() (or
one of the similar functions for #GtkCheckMenuItem and #GtkRadioMenuItem)
automatically adds a #GtkAccelLabel to the #GtkMenuItem and calls
gtk_accel_label_set_accel_widget() to set it up for you.

A #GtkAccelLabel will only display accelerators which have %GTK_ACCEL_VISIBLE
set (see #GtkAccelFlags).
A #GtkAccelLabel can display multiple accelerators and even signal names,
though it is almost always used to display just one accelerator key.

## Creating a simple menu item with an accelerator key.

|[<!-- language="C" -->
  GtkWidget *save_item;
  GtkAccelGroup *accel_group;

  // Create a GtkAccelGroup and add it to the window.
  accel_group = gtk_accel_group_new ();
  gtk_window_add_accel_group (GTK_WINDOW (window), accel_group);

  // Create the menu item using the convenience function.
  save_item = gtk_menu_item_new_with_label ("Save");
  gtk_widget_show (save_item);
  gtk_container_add (GTK_CONTAINER (menu), save_item);

  // Now add the accelerator to the GtkMenuItem. Note that since we
  // called gtk_menu_item_new_with_label() to create the GtkMenuItem
  // the GtkAccelLabel is automatically set up to display the
  // GtkMenuItem accelerators. We just need to make sure we use
  // GTK_ACCEL_VISIBLE here.
  gtk_widget_add_accelerator (save_item, "activate", accel_group,
                              GDK_KEY_s, GDK_CONTROL_MASK, GTK_ACCEL_VISIBLE);
]|
#NAME: get_angle
#PARENT: Gtk.Label
#COMMENT: Gets the angle of rotation for the label. See
gtk_label_set_angle().
#NAME: is_selected
#PARENT: Gtk.PrintOperationPreview
#COMMENT: Returns whether the given page is included in the set of pages that
have been selected for printing.
#NAME: get_show_expanders
#PARENT: Gtk.TreeView
#COMMENT: Returns whether or not expanders are drawn in @tree_view.
#NAME: cursor_pos
#PARENT: Gtk.IMContext.get_preedit_string.none
#COMMENT: location to store position of cursor (in characters)
             within the preedit string.
#NAME: icon-name
#PARENT: Gtk.Image
#COMMENT: The name of the icon in the icon theme. If the icon theme is
changed, the image will be updated automatically.
#NAME: path
#PARENT: Gtk.StyleProvider.get_style_property.gboolean
#COMMENT: #GtkWidgetPath to query
#NAME: set_sizing
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the growth behavior of @tree_column to @type.
#NAME: visible-vertical
#PARENT: Gtk.Action
#COMMENT: Whether the toolbar item is visible when the toolbar is in a vertical orientation.
#NAME: new
#PARENT: Gtk.LockButton.new
#COMMENT: a new #GtkLockButton
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_border.none
#COMMENT: a #GtkThemingEngine
#NAME: get_root_window
#PARENT: Gtk.Widget.get_root_window
#COMMENT: the #GdkWindow root window for the toplevel for this widget.
#NAME: widget
#PARENT: Gtk.Widget.unset_state_flags.none
#COMMENT: a #GtkWidget
#NAME: colorsel
#PARENT: Gtk.ColorSelectionDialog.get_color_selection.Widget
#COMMENT: a #GtkColorSelectionDialog
#NAME: n_atoms
#PARENT: Gtk.ClipboardTargetsReceivedFunc.none
#COMMENT: the length of the @atoms array.
#NAME: set_active_custom_item
#PARENT: Gtk.AppChooserButton
#COMMENT: Selects a custom item previously added with
gtk_app_chooser_button_append_custom_item().

Use gtk_app_chooser_refresh() to bring the selection
to its initial state.
#NAME: forward_display_line_end
#PARENT: Gtk.TextView
#COMMENT: Moves the given @iter forward to the next display line end.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view’s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.
#NAME: new
#PARENT: Gtk.RadioToolButton
#COMMENT: Creates a new #GtkRadioToolButton, adding it to @group.
#NAME: action_group
#PARENT: Gtk.ActionGroup.list_actions.Action
#COMMENT: the action group
#NAME: new
#PARENT: Gtk.HScale
#COMMENT: Creates a new #GtkHScale.
#NAME: ToolbarSpaceStyle
#PARENT: Gtk
#COMMENT: Whether spacers are vertical lines or just blank.
#NAME: parent_class
#PARENT: Gtk.GridClass
#COMMENT: The parent class.
#NAME: model
#PARENT: Gtk.Popover.bind_model.none
#COMMENT: the #GMenuModel to bind to or %NULL to remove
  binding
#NAME: has_rc_style
#PARENT: Gtk.Widget.has_rc_style
#COMMENT: %TRUE if the widget has been looked up through the rc
  mechanism, %FALSE otherwise.
#NAME: select_child
#PARENT: Gtk.FlowBox
#COMMENT: Selects a single child of @box, if the selection
mode allows it.
#NAME: new_from_stock
#PARENT: Gtk.Button
#COMMENT: Creates a new #GtkButton containing the image and text from a stock item.
Some stock ids have preprocessor macros like #GTK_STOCK_OK and
#GTK_STOCK_APPLY.

If @stock_id is unknown, then it will be treated as a mnemonic
label (as for gtk_button_new_with_mnemonic()).
#NAME: context
#PARENT: Gtk.IMContext.set_client_window.none
#COMMENT: a #GtkIMContext
#NAME: widget
#PARENT: Gtk.ContainerClass.remove.remove.none
#COMMENT: a current child of @container
#NAME: IconLookupFlags
#PARENT: Gtk
#COMMENT: Used to specify options for gtk_icon_theme_lookup_icon()
#NAME: function
#PARENT: Gtk.TextBuffer.register_serialize_format.Gdk.Atom
#COMMENT: the serialize function to register
#NAME: use-alpha
#PARENT: Gtk.ColorButton
#COMMENT: If this property is set to %TRUE, the color swatch on the button is
rendered against a checkerboard background to show its opacity and
the opacity slider is displayed in the color selection dialog.
#NAME: n_values
#PARENT: Gtk.TreeStore.set_valuesv.none
#COMMENT: the length of the @columns and @values arrays
#NAME: width
#PARENT: Gtk.icon_size_lookup_for_settings.gboolean
#COMMENT: location to store icon width
#NAME: statusbar
#PARENT: Gtk.Statusbar.pop.none
#COMMENT: a #GtkStatusbar
#NAME: widget
#PARENT: Gtk.Widget.get_double_buffered.gboolean
#COMMENT: a #GtkWidget
#NAME: get_group
#PARENT: Gtk.RadioToolButton
#COMMENT: Returns the radio button group @button belongs to.
#NAME: minimum_height
#PARENT: Gtk.WidgetClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: location for storing the minimum height, or %NULL
#NAME: backspace
#PARENT: Gtk.Entry
#COMMENT: The ::backspace signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

The default bindings for this signal are
Backspace and Shift-Backspace.
#NAME: self
#PARENT: Gtk.AppChooserWidget.get_default_text.utf8
#COMMENT: a #GtkAppChooserWidget
#NAME: paint_box_gap
#PARENT: Gtk
#COMMENT: Draws a box in @cr using the given style and state and shadow type,
leaving a gap in one side.
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_active.gint
#COMMENT: A #GtkComboBox
#NAME: completion
#PARENT: Gtk.EntryCompletion.set_minimum_key_length.none
#COMMENT: a #GtkEntryCompletion
#NAME: box
#PARENT: Gtk.FlowBox.set_max_children_per_line.none
#COMMENT: a #GtkFlowBox
#NAME: image
#PARENT: Gtk.Image.set_from_icon_set.none
#COMMENT: a #GtkImage
#NAME: pre-activate
#PARENT: Gtk.ActionGroup
#COMMENT: The ::pre-activate signal is emitted just before the @action in the
@action_group is activated

This is intended for #GtkUIManager to proxy the signal and provide global
notification just before any action is activated.
#NAME: get_margin_end
#PARENT: Gtk.Widget
#COMMENT: Gets the value of the #GtkWidget:margin-end property.
#NAME: button
#PARENT: Gtk.ButtonClass.released.released.none
#COMMENT: The #GtkButton you want to send the signal to.
#NAME: crossfade
#PARENT: Gtk.StackTransitionType
#COMMENT: A cross-fade
#NAME: commit
#PARENT: Gtk.IMContext
#COMMENT: The ::commit signal is emitted when a complete input sequence
has been entered by the user. This can be a single character
immediately after a key press or the final result of preediting.
#NAME: column
#PARENT: Gtk.TreeViewSearchEqualFunc.gboolean
#COMMENT: the search column set by gtk_tree_view_set_search_column()
#NAME: rc_property_parse_flags
#PARENT: Gtk.rc_property_parse_flags
#COMMENT: %TRUE if @gstring could be parsed and @property_value
has been set to the resulting flags value.
#NAME: orientation
#PARENT: Gtk.CellArea.request_renderer.none
#COMMENT: the #GtkOrientation in which to request size
#NAME: get_visible_vertical
#PARENT: Gtk.Action.get_visible_vertical
#COMMENT: whether @action is visible when horizontal
#NAME: manager
#PARENT: Gtk.UIManager.new_merge_id.guint
#COMMENT: a #GtkUIManager
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_model.none
#COMMENT: A #GtkComboBox
#NAME: MessageType
#PARENT: Gtk
#COMMENT: The type of message being displayed in the dialog.
#NAME: popover
#PARENT: Gtk.Popover.get_modal.gboolean
#COMMENT: a #GtkPopover
#NAME: get_minimum_increment
#PARENT: Gtk.Adjustment
#COMMENT: Gets the smaller of step increment and page increment.
#NAME: event
#PARENT: Gtk.KeySnoopFunc.gint
#COMMENT: the key event
#NAME: margin
#PARENT: Gtk.PageSetup.set_left_margin.none
#COMMENT: the new left margin in units of @unit
#NAME: ActionableInterface
#PARENT: Gtk
#COMMENT: The interface vtable for #GtkActionable.
#NAME: path
#PARENT: Gtk.TreeModel.rows-reordered.none
#COMMENT: a #GtkTreePath-struct identifying the tree node whose children
    have been reordered
#NAME: load_scanner
#PARENT: Gtk.AccelMap
#COMMENT: #GScanner variant of gtk_accel_map_load().
#NAME: get_text_size_group
#PARENT: Gtk.ToolShell
#COMMENT: Retrieves the current text size group for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_text_size_group()
instead.
#NAME: velocity_x
#PARENT: Gtk.GestureSwipe.swipe.none
#COMMENT: velocity in the X axis, in pixels/sec
#NAME: step
#PARENT: Gtk.HScale.new_with_range.Widget
#COMMENT: step increment (tick size) used with keyboard shortcuts
#NAME: cell
#PARENT: Gtk.CellRenderer.set_visible.none
#COMMENT: A #GtkCellRenderer
#NAME: preview
#PARENT: Gtk.PrintOperationPreviewIface.end_preview.end_preview.none
#COMMENT: a #GtkPrintOperationPreview
#NAME: insert_with_tags
#PARENT: Gtk.TextBuffer
#COMMENT: Inserts @text into @buffer at @iter, applying the list of tags to
the newly-inserted text. The last tag specified must be %NULL to
terminate the list. Equivalent to calling gtk_text_buffer_insert(),
then gtk_text_buffer_apply_tag() on the inserted text;
gtk_text_buffer_insert_with_tags() is just a convenience function.
#NAME: velocity_y
#PARENT: Gtk.GestureSwipe.swipe.none
#COMMENT: velocity in the Y axis, in pixels/sec
#NAME: new
#PARENT: Gtk.TextBuffer.new
#COMMENT: a new text buffer
#NAME: add_from_resource
#PARENT: Gtk.Builder.add_from_resource
#COMMENT: A positive value on success, 0 if an error occurred
#NAME: parse_requisition
#PARENT: Gtk.RcProperty.parse_requisition
#COMMENT: %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GtkRequisition.
#NAME: child
#PARENT: Gtk.FlowBoxChild.changed.none
#COMMENT: a #GtkFlowBoxChild
#NAME: sortable
#PARENT: Gtk.TreeSortable.set_sort_column_id.none
#COMMENT: A #GtkTreeSortable
#NAME: cell_layout
#PARENT: Gtk.CellLayout.get_cells.CellRenderer
#COMMENT: a #GtkCellLayout
#NAME: new
#PARENT: Gtk.EntryCompletion
#COMMENT: Creates a new #GtkEntryCompletion object.
#NAME: iter_get_state
#PARENT: Gtk.WidgetPath
#COMMENT: Returns the state flags corresponding to the widget found at
the position @pos in the widget hierarchy defined by
@path
#NAME: tag
#PARENT: Gtk.TextTag.get_priority.gint
#COMMENT: a #GtkTextTag
#NAME: set_selection_mode
#PARENT: Gtk.IconView
#COMMENT: Sets the selection mode of the @icon_view.
#NAME: info_bar
#PARENT: Gtk.InfoBar.get_content_area.Widget
#COMMENT: a #GtkInfoBar
#NAME: range
#PARENT: Gtk.Range.set_inverted.none
#COMMENT: a #GtkRange
#NAME: PRINT_SETTINGS_OUTPUT_FILE_FORMAT
#PARENT: Gtk
#COMMENT: The key used by the “Print to file” printer to store the format
of the output. The supported values are “PS” and “PDF”.
#NAME: text
#PARENT: Gtk.TextBuffer.insert_interactive.gboolean
#COMMENT: some UTF-8 text
#NAME: tree_model
#PARENT: Gtk.TreeModel.get_n_columns.gint
#COMMENT: a #GtkTreeModel
#NAME: add_objects_from_resource
#PARENT: Gtk.Builder.add_objects_from_resource
#COMMENT: A positive value on success, 0 if an error occurred
#NAME: iter
#PARENT: Gtk.TextBuffer.deserialize.gboolean
#COMMENT: insertion point for the deserialized text
#NAME: height
#PARENT: Gtk.Layout.set_size.none
#COMMENT: height of entire scrollable area
#NAME: notebook
#PARENT: Gtk.Notebook.set_menu_label_text.none
#COMMENT: a #GtkNotebook
#NAME: context
#PARENT: Gtk.StyleContext.get_style_property.none
#COMMENT: a #GtkStyleContext
#NAME: parent
#PARENT: Gtk.StyleContext.set_parent.none
#COMMENT: the new parent or %NULL
#NAME: focus_cell
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the current keyboard focus to be at @cell, if the column contains
2 or more editable and activatable cells.
#NAME: set_detail_height_rows
#PARENT: Gtk.Calendar
#COMMENT: Updates the height of detail cells.
See #GtkCalendar:detail-height-rows.
#NAME: handles_sequence
#PARENT: Gtk.Gesture.handles_sequence
#COMMENT: %TRUE if @gesture is handling @sequence
#NAME: sibling
#PARENT: Gtk.TreeStore.insert_before.none
#COMMENT: A valid #GtkTreeIter, or %NULL
#NAME: widget
#PARENT: Gtk.Widget.set_has_tooltip.none
#COMMENT: a #GtkWidget
#NAME: focus
#PARENT: Gtk.Widget.focus
#COMMENT: %TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.
#NAME: new
#PARENT: Gtk.AppChooserWidget.new
#COMMENT: a newly created #GtkAppChooserWidget
#NAME: slide_right
#PARENT: Gtk.RevealerTransitionType
#COMMENT: Slide in from the left
#NAME: TextBufferSerializeFunc
#PARENT: Gtk
#COMMENT: A function that is called to serialize the content of a text buffer.
It must return the serialized form of the content.
#NAME: ref
#PARENT: Gtk.WidgetPath
#COMMENT: Increments the reference count on @path.
#NAME: window
#PARENT: Gtk.Window.set_wmclass.none
#COMMENT: a #GtkWindow
#NAME: get_start_position
#PARENT: Gtk.CssSection.get_start_position
#COMMENT: the offset in bytes from the start of the line.
#NAME: register
#PARENT: Gtk.IconSize
#COMMENT: Registers a new icon size, along the same lines as #GTK_ICON_SIZE_MENU,
etc. Returns the integer value for the size.
#NAME: get_drag_dest_item
#PARENT: Gtk.IconView
#COMMENT: Gets information about the item that is highlighted for feedback.
#NAME: resolution
#PARENT: Gtk.PrintSettings.set_resolution.none
#COMMENT: the resolution in dpi
#NAME: data
#PARENT: Gtk.TextBuffer.deserialize.gboolean
#COMMENT: data to deserialize
#NAME: STOCK_PRINT
#PARENT: Gtk
#COMMENT: The “Print” item and icon.
#NAME: query-tooltip
#PARENT: Gtk.StatusIcon.query-tooltip
#COMMENT: %TRUE if @tooltip should be shown right now, %FALSE otherwise.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.cell_is_visible.gboolean
#COMMENT: A #GtkTreeViewColumn
#NAME: modify_text
#PARENT: Gtk.Widget
#COMMENT: Sets the text color for a widget in a particular state.

All other style values are left untouched.
The text color is the foreground color used along with the
base color (see gtk_widget_modify_base()) for widgets such
as #GtkEntry and #GtkTextView.
See also gtk_widget_modify_style().
#NAME: notebook
#PARENT: Gtk.Notebook.detach_tab.none
#COMMENT: a #GtkNotebook
#NAME: Settings
#PARENT: Gtk
#COMMENT: GtkSettings provide a mechanism to share global settings between
applications.

On the X window system, this sharing is realized by an
[XSettings](http://www.freedesktop.org/wiki/Specifications/xsettings-spec)
manager that is usually part of the desktop environment, along with
utilities that let the user change these settings. In the absence of
an Xsettings manager, GTK+ reads default values for settings from
`settings.ini` files in
`/etc/gtk-3.0`, `$XDG_CONFIG_DIRS/gtk-3.0`
and `$XDG_CONFIG_HOME/gtk-3.0`.
These files must be valid key files (see #GKeyFile), and have
a section called Settings. Themes can also provide default values
for settings by installing a `settings.ini` file
next to their `gtk.css` file.

Applications can override system-wide settings by setting the property
of the GtkSettings object with g_object_set(). This should be restricted
to special cases though; GtkSettings are not meant as an application
configuration facility. When doing so, you need to be aware that settings
that are specific to individual widgets may not be available before the
widget type has been realized at least once. The following example
demonstrates a way to do this:
|[<!-- language="C" -->
  gtk_init (&argc, &argv);

  // make sure the type is realized
  g_type_class_unref (g_type_class_ref (GTK_TYPE_IMAGE_MENU_ITEM));

  g_object_set (gtk_settings_get_default (), "gtk-enable-animations", FALSE, NULL);
]|

There is one GtkSettings instance per screen. It can be obtained with
gtk_settings_get_for_screen(), but in many cases, it is more convenient
to use gtk_widget_get_settings(). gtk_settings_get_default() returns the
GtkSettings instance for the default screen.
#NAME: value
#PARENT: Gtk.ActionGroup.add_radio_actions.none
#COMMENT: the value of the action to activate initially, or -1 if
  no action should be activated
#NAME: attribute
#PARENT: Gtk.CellArea.attribute_connect.none
#COMMENT: the attribute name
#NAME: STOCK_SORT_ASCENDING
#PARENT: Gtk
#COMMENT: The “Ascending” item and icon.
#NAME: equal
#PARENT: Gtk.TextIter
#COMMENT: Tests whether two iterators are equal, using the fastest possible
mechanism. This function is very fast; you can expect it to perform
better than e.g. getting the character offset for each iterator and
comparing the offsets yourself. Also, it’s a bit faster than
gtk_text_iter_compare().
#NAME: set_sort_indicator
#PARENT: Gtk.TreeViewColumn
#COMMENT: Call this function with a @setting of %TRUE to display an arrow in
the header button indicating the column is sorted. Call
gtk_tree_view_column_set_sort_order() to change the direction of
the arrow.
#NAME: gradient
#PARENT: Gtk.Gradient.unref.none
#COMMENT: a #GtkGradient
#NAME: widget
#PARENT: Gtk.CellRendererClass.activate.activate.gboolean
#COMMENT: widget that received the event
#NAME: get_opacity
#PARENT: Gtk.Window.get_opacity
#COMMENT: the requested opacity for this window.
#NAME: targets
#PARENT: Gtk.target_table_free.none
#COMMENT: a #GtkTargetEntry array
#NAME: action_group
#PARENT: Gtk.UIManager.remove_action_group.none
#COMMENT: the action group to be removed
#NAME: geometry_widget
#PARENT: Gtk.Window.set_geometry_hints.none
#COMMENT: widget the geometry hints will be applied to or %NULL
#NAME: activate_time
#PARENT: Gtk.Menu.popup.none
#COMMENT: the time at which the activation event occurred.
#NAME: width
#PARENT: Gtk.paint_option.none
#COMMENT: the width of the rectangle to draw the option in
#NAME: set_accel
#PARENT: Gtk.AccelLabel
#COMMENT: Manually sets a keyval and modifier mask as the accelerator rendered
by @accel_label.

If a keyval and modifier are explicitly set then these values are
used regardless of any associated accel closure or widget.

Providing an @accelerator_key of 0 removes the manual setting.
#NAME: get_search_path
#PARENT: Gtk.IconTheme
#COMMENT: Gets the current search path. See gtk_icon_theme_set_search_path().
#NAME: new
#PARENT: Gtk.Paned
#COMMENT: Creates a new #GtkPaned widget.
#NAME: PrintQuality
#PARENT: Gtk
#COMMENT: See also gtk_print_settings_set_quality().
#NAME: toggles_tag
#PARENT: Gtk.TextIter.toggles_tag
#COMMENT: whether @tag is toggled on or off at @iter
#NAME: start
#PARENT: Gtk.TextBuffer.insert_range.none
#COMMENT: a position in a #GtkTextBuffer
#NAME: path_is_selected
#PARENT: Gtk.TreeSelection.path_is_selected
#COMMENT: %TRUE if @path is selected.
#NAME: path
#PARENT: Gtk.WidgetPath.copy.WidgetPath
#COMMENT: a #GtkWidgetPath
#NAME: add_objects_from_file
#PARENT: Gtk.Builder.add_objects_from_file
#COMMENT: A positive value on success, 0 if an error occurred
#NAME: path
#PARENT: Gtk.IconView.get_tooltip_context.gboolean
#COMMENT: a pointer to receive a #GtkTreePath or %NULL
#NAME: surface
#PARENT: Gtk.Image.new_from_surface.Widget
#COMMENT: a #cairo_surface_t, or %NULL
#NAME: message_type
#PARENT: Gtk.InfoBar.set_message_type.none
#COMMENT: a #GtkMessageType
#NAME: message_format
#PARENT: Gtk.MessageDialog.format_secondary_markup.none
#COMMENT: printf()-style markup string (see
     [Pango markup format][PangoMarkupFormat]), or %NULL
#NAME: orientation
#PARENT: Gtk.Orientable.set_orientation.none
#COMMENT: the orientable’s new orientation.
#NAME: get_homogeneous
#PARENT: Gtk.ToolItem
#COMMENT: Returns whether @tool_item is the same size as other homogeneous
items. See gtk_tool_item_set_homogeneous().
#NAME: insert-pixbuf
#PARENT: Gtk.TextBuffer
#COMMENT: The ::insert-pixbuf signal is emitted to insert a #GdkPixbuf
in a #GtkTextBuffer. Insertion actually occurs in the default handler.

Note that if your handler runs before the default handler it must not
invalidate the @location iter (or has to revalidate it).
The default signal handler revalidates it to be placed after the
inserted @pixbuf.

See also: gtk_text_buffer_insert_pixbuf().
#NAME: width
#PARENT: Gtk.Widget.set_size_request.none
#COMMENT: width @widget should request, or -1 to unset
#NAME: get_detail_height_rows
#PARENT: Gtk.Calendar.get_detail_height_rows
#COMMENT: The height of detail cells, in rows.
#NAME: cell
#PARENT: Gtk.IconView.get_cursor.gboolean
#COMMENT: Return location the current
       focus cell, or %NULL
#NAME: button
#PARENT: Gtk.MenuToolButton.set_menu.none
#COMMENT: a #GtkMenuToolButton
#NAME: state
#PARENT: Gtk.Switch.set_state.none
#COMMENT: the new state
#NAME: spacing
#PARENT: Gtk.FlowBox.set_row_spacing.none
#COMMENT: the spacing to use
#NAME: set_icon_name
#PARENT: Gtk.IconSource
#COMMENT: Sets the name of an icon to look up in the current icon theme
to use as a base image when creating icon variants for #GtkIconSet.
#NAME: TreeView
#PARENT: Gtk
#COMMENT: Widget that displays any object that implements the #GtkTreeModel interface.

Please refer to the
[tree widget conceptual overview][TreeWidget]
for an overview of all the objects and data types related
to the tree widget and how they work together.

Several different coordinate systems are exposed in the GtkTreeView API.
These are:

![](tree-view-coordinates.png)

Coordinate systems in GtkTreeView API:

- Widget coordinates: Coordinates relative to the widget (usually `widget->window`).

- Bin window coordinates: Coordinates relative to the window that GtkTreeView renders to.

- Tree coordinates: Coordinates relative to the entire scrollable area of GtkTreeView. These
  coordinates start at (0, 0) for row 0 of the tree.

Several functions are available for converting between the different
coordinate systems.  The most common translations are between widget and bin
window coordinates and between bin window and tree coordinates. For the
former you can use gtk_tree_view_convert_widget_to_bin_window_coords()
(and vice versa), for the latter gtk_tree_view_convert_bin_window_to_tree_coords()
(and vice versa).

# GtkTreeView as GtkBuildable

The GtkTreeView implementation of the GtkBuildable interface accepts
#GtkTreeViewColumn objects as <child> elements and exposes the internal
#GtkTreeSelection in UI definitions.

An example of a UI definition fragment with GtkTreeView:
|[
<object class="GtkTreeView" id="treeview">
  <property name="model">liststore1</property>
  <child>
    <object class="GtkTreeViewColumn" id="test-column">
      <property name="title">Test</property>
      <child>
        <object class="GtkCellRendererText" id="test-renderer"/>
        <attributes>
          <attribute name="text">1</attribute>
        </attributes>
      </child>
    </object>
  </child>
  <child internal-child="selection">
    <object class="GtkTreeSelection" id="selection">
      <signal name="changed" handler="on_treeview_selection_changed"/>
    </object>
  </child>
</object>
]|
#NAME: bg_color
#PARENT: Gtk.TextAppearance
#COMMENT: Background #GdkColor.
#NAME: height
#PARENT: Gtk.Window.resize.none
#COMMENT: height in pixels to resize the window to
#NAME: iter
#PARENT: Gtk.tree_row_reference_reordered.none
#COMMENT: the iter pointing to the parent of the reordered
#NAME: action
#PARENT: Gtk.Action.get_proxies.Widget
#COMMENT: the action object
#NAME: name
#PARENT: Gtk.ThemingEngine
#COMMENT: The theming engine name, this name will be used when registering
custom properties, for a theming engine named "Clearlooks" registering
a "glossy" custom property, it could be referenced in the CSS file as

|[
-Clearlooks-glossy: true;
]|
#NAME: get_ellipsize_mode
#PARENT: Gtk.ToolItem.get_ellipsize_mode
#COMMENT: a #PangoEllipsizeMode indicating how text in @tool_item
should be ellipsized.
#NAME: key
#PARENT: Gtk.TreeViewSearchEqualFunc.gboolean
#COMMENT: the key string to compare with
#NAME: kinetic-scrolling
#PARENT: Gtk.ScrolledWindow
#COMMENT: Whether kinetic scrolling is enabled or not. Kinetic scrolling
only applies to devices with source %GDK_SOURCE_TOUCHSCREEN.
#NAME: size_group
#PARENT: Gtk.SizeGroup.get_mode.SizeGroupMode
#COMMENT: a #GtkSizeGroup
#NAME: context
#PARENT: Gtk.IMContextClass.set_cursor_location.set_cursor_location.none
#COMMENT: a #GtkIMContext
#NAME: get_inverted
#PARENT: Gtk.LevelBar.get_inverted
#COMMENT: %TRUE if the level bar is inverted
#NAME: manager
#PARENT: Gtk.UIManagerClass.get_action.get_action.Action
#COMMENT: a #GtkUIManager
#NAME: path
#PARENT: Gtk.TreePath.down.none
#COMMENT: a #GtkTreePath-struct
#NAME: set_deletable
#PARENT: Gtk.Window
#COMMENT: By default, windows have a close button in the window frame. Some
[window managers][gtk-X11-arch] allow GTK+ to
disable this button. If you set the deletable property to %FALSE
using this function, GTK+ will do its best to convince the window
manager not to show a close button. Depending on the system, this
function may not have any effect when called on a window that is
already visible, so you should call it before calling gtk_widget_show().

On Windows, this function always works, since there’s no window manager
policy involved.
#NAME: add1
#PARENT: Gtk.Paned
#COMMENT: Adds a child to the top or left pane with default parameters. This is
equivalent to
`gtk_paned_pack1 (paned, child, FALSE, TRUE)`.
#NAME: odd
#PARENT: Gtk.RegionFlags
#COMMENT: Region has an odd number within a set.
#NAME: iter
#PARENT: Gtk.TextIter.ends_word.gboolean
#COMMENT: a #GtkTextIter
#NAME: get_search_column
#PARENT: Gtk.TreeView.get_search_column
#COMMENT: the column the interactive search code searches in.
#NAME: gesture
#PARENT: Gtk.GestureSingle.set_button.none
#COMMENT: a #GtkGestureSingle
#NAME: add2
#PARENT: Gtk.Paned
#COMMENT: Adds a child to the bottom or right pane with default parameters. This
is equivalent to
`gtk_paned_pack2 (paned, child, TRUE, TRUE)`.
#NAME: parse_func
#PARENT: Gtk.StyleProperties.lookup_property.gboolean
#COMMENT: return location for the parse function
#NAME: rhs
#PARENT: Gtk.TextIter.compare.gint
#COMMENT: another #GtkTextIter
#NAME: get_name
#PARENT: Gtk.Widget.get_name
#COMMENT: name of the widget. This string is owned by GTK+ and
should not be modified or freed
#NAME: color
#PARENT: Gtk.ColorButton.get_color.none
#COMMENT: a #GdkColor to fill in with the current color
#NAME: child_get
#PARENT: Gtk.Container
#COMMENT: Gets the values of one or more child properties for @child and @container.
#NAME: menu
#PARENT: Gtk.Menu.reposition.none
#COMMENT: a #GtkMenu
#NAME: TranslateFunc
#PARENT: Gtk
#COMMENT: The function used to translate messages in e.g. #GtkIconFactory
and #GtkActionGroup.
#NAME: screen-changed
#PARENT: Gtk.Widget
#COMMENT: The ::screen-changed signal gets emitted when the
screen of a widget has changed.
#NAME: accel_mods
#PARENT: Gtk.AccelGroup.disconnect_key.gboolean
#COMMENT: modifier combination of the accelerator
#NAME: slide_right
#PARENT: Gtk.StackTransitionType
#COMMENT: Slide from left to right
#NAME: name
#PARENT: Gtk.TextBuffer.move_mark_by_name.none
#COMMENT: name of a mark
#NAME: attrs
#PARENT: Gtk.IMContextClass.get_preedit_string.get_preedit_string.none
#COMMENT: location to store the retrieved
             attribute list.  When you are done with this list, you
             must unreference it with pango_attr_list_unref().
#NAME: widget
#PARENT: Gtk.cairo_transform_to_window.none
#COMMENT: the widget the context is currently centered for
#NAME: context
#PARENT: Gtk.StyleContext.get_direction.TextDirection
#COMMENT: a #GtkStyleContext
#NAME: ypadding
#PARENT: Gtk.Table.attach.none
#COMMENT: The amount of padding above and below the child widget.
#NAME: property_value
#PARENT: Gtk.rc_property_parse_flags.gboolean
#COMMENT: a #GValue which must hold flags values.
#NAME: start_pos
#PARENT: Gtk.Editable.do_delete_text.none
#COMMENT: start position
#NAME: assistant
#PARENT: Gtk.Assistant.get_current_page.gint
#COMMENT: a #GtkAssistant
#NAME: set_focus_hadjustment
#PARENT: Gtk.Container
#COMMENT: Hooks up an adjustment to focus handling in a container, so when a child
of the container is focused, the adjustment is scrolled to show that
widget. This function sets the horizontal alignment.
See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining
the adjustment and gtk_container_set_focus_vadjustment() for setting
the vertical adjustment.

The adjustments have to be in pixel units and in the same coordinate
system as the allocation for immediate children of the container.
#NAME: get_line_wrap
#PARENT: Gtk.Label.get_line_wrap
#COMMENT: %TRUE if the lines of the label are automatically wrapped.
#NAME: name
#PARENT: Gtk.LevelBar.offset-changed.none
#COMMENT: the name of the offset that changed value
#NAME: attach_to_widget
#PARENT: Gtk.Menu
#COMMENT: Attaches the menu to the widget and provides a callback function
that will be invoked when the menu calls gtk_menu_detach() during
its destruction.

If the menu is attached to the widget then it will be destroyed
when the widget is destroyed, as if it was a child widget.
An attached menu will also move between screens correctly if the
widgets moves between screens.
#NAME: copy
#PARENT: Gtk.Style.copy
#COMMENT: a copy of @style
#NAME: state
#PARENT: Gtk.StyleContext.get_padding.none
#COMMENT: state to retrieve the padding for
#NAME: drag_source
#PARENT: Gtk.TreeDragSource.drag_data_delete.gboolean
#COMMENT: a #GtkTreeDragSource
#NAME: get_focus
#PARENT: Gtk.Window
#COMMENT: Retrieves the current focused widget within the window.
Note that this is the widget that would have the focus
if the toplevel window focused; if the toplevel window
is not focused then  `gtk_widget_has_focus (widget)` will
not be %TRUE for the widget.
#NAME: get_min_slider_size
#PARENT: Gtk.Range.get_min_slider_size
#COMMENT: The minimum size of the range’s slider.
#NAME: show-not-found
#PARENT: Gtk.RecentChooser
#COMMENT: Whether this #GtkRecentChooser should display the recently used resources
even if not present anymore. Setting this to %FALSE will perform a
potentially expensive check on every local resource (every remote
resource will always be displayed).
#NAME: get_geometry
#PARENT: Gtk.StatusIcon
#COMMENT: Obtains information about the location of the status icon
on screen. This information can be used to e.g. position
popups like notification bubbles.

See gtk_status_icon_position_menu() for a more convenient
alternative for positioning menus.

Note that some platforms do not allow GTK+ to provide
this information, and even on platforms that do allow it,
the information is not reliable unless the status icon
is embedded in a notification area, see
gtk_status_icon_is_embedded().
#NAME: get_drop_item
#PARENT: Gtk.ToolPalette
#COMMENT: Gets the item at position (x, y).
See gtk_tool_palette_get_drop_group().
#NAME: value
#PARENT: Gtk.TreeModelFilterModifyFunc.none
#COMMENT: A #GValue which is already initialized for
 with the correct type for the column @column.
#NAME: check_version
#PARENT: Gtk
#COMMENT: Checks that the GTK+ library in use is compatible with the
given version. Generally you would pass in the constants
#GTK_MAJOR_VERSION, #GTK_MINOR_VERSION, #GTK_MICRO_VERSION
as the three arguments to this function; that produces
a check that the library in use is compatible with
the version of GTK+ the application or module was compiled
against.

Compatibility is defined by two things: first the version
of the running library is newer than the version
@required_major.required_minor.@required_micro. Second
the running library must be binary compatible with the
version @required_major.required_minor.@required_micro
(same major version.)

This function is primarily for GTK+ modules; the module
can call this function to check that it wasn’t loaded
into an incompatible version of GTK+. However, such a
check isn’t completely reliable, since the module may be
linked against an old version of GTK+ and calling the
old version of gtk_check_version(), but still get loaded
into an application using a newer version of GTK+.
#NAME: menubar
#PARENT: Gtk.MenuBar.get_pack_direction.PackDirection
#COMMENT: a #GtkMenuBar
#NAME: num_ranges
#PARENT: Gtk.PrintSettings.set_page_ranges.none
#COMMENT: the length of @page_ranges
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_button_sensitivity.SensitivityType
#COMMENT: a #GtkComboBox
#NAME: new_with_stock_from_widget
#PARENT: Gtk.RadioToolButton.new_with_stock_from_widget
#COMMENT: A new #GtkRadioToolButton
#NAME: filter
#PARENT: Gtk.RecentFilter.set_name.none
#COMMENT: a #GtkRecentFilter
#NAME: action
#PARENT: Gtk.Action.get_accel_closure.GObject.Closure
#COMMENT: the action object
#NAME: new
#PARENT: Gtk.TextMark.new
#COMMENT: new #GtkTextMark
#NAME: data
#PARENT: Gtk.AccelMap.foreach_unfiltered.none
#COMMENT: data to be passed into @foreach_func
#NAME: has_tooltip
#PARENT: Gtk.Widget.set_has_tooltip.none
#COMMENT: whether or not @widget has a tooltip.
#NAME: child_property
#PARENT: Gtk.WidgetClass.child_notify.child_notify.none
#COMMENT: the name of a child property installed on the
                 class of @widget’s parent
#NAME: tooltip
#PARENT: Gtk.WidgetHelpType
#COMMENT: Tooltip.
#NAME: none
#PARENT: Gtk.IMPreeditStyle
#COMMENT: Deprecated
#NAME: new
#PARENT: Gtk.Stack
#COMMENT: Creates a new #GtkStack container.
#NAME: get_column_type
#PARENT: Gtk.TreeModel
#COMMENT: Returns the type of the column.
#NAME: widget
#PARENT: Gtk.Widget.set_redraw_on_allocate.none
#COMMENT: a #GtkWidget
#NAME: get_active_id
#PARENT: Gtk.ComboBox
#COMMENT: Returns the ID of the active row of @combo_box.  This value is taken
from the active row and the column specified by the #GtkComboBox:id-column
property of @combo_box (see gtk_combo_box_set_id_column()).

The returned value is an interned string which means that you can
compare the pointer by value to other interned strings and that you
must not free it.

If the #GtkComboBox:id-column property of @combo_box is not set, or if
no row is active, or if the active row has a %NULL ID value, then %NULL
is returned.
#NAME: accel-group
#PARENT: Gtk.Menu
#COMMENT: The accel group holding accelerators for the menu.
#NAME: pred
#PARENT: Gtk.TextIter.backward_find_char.gboolean
#COMMENT: function to be called on each character
#NAME: clipboard
#PARENT: Gtk.Clipboard.wait_for_contents.SelectionData
#COMMENT: a #GtkClipboard
#NAME: offset
#PARENT: Gtk.IMContext.delete_surrounding.gboolean
#COMMENT: offset from cursor position in chars;
   a negative value means start before the cursor.
#NAME: image
#PARENT: Gtk.Image.set_from_stock.none
#COMMENT: a #GtkImage
#NAME: RecentChooserWidget
#PARENT: Gtk
#COMMENT: #GtkRecentChooserWidget is a widget suitable for selecting recently used
files.  It is the main building block of a #GtkRecentChooserDialog.  Most
applications will only need to use the latter; you can use
#GtkRecentChooserWidget as part of a larger window if you have special needs.

Note that #GtkRecentChooserWidget does not have any methods of its own.
Instead, you should use the functions that work on a #GtkRecentChooser.

Recently used files are supported since GTK+ 2.10.
#NAME: STOCK_PRINT_PREVIEW
#PARENT: Gtk
#COMMENT: The “Print Preview” item and icon.
#NAME: set_show_size
#PARENT: Gtk.FontButton
#COMMENT: If @show_size is %TRUE, the font size will be displayed along with the name of the selected font.
#NAME: max
#PARENT: Gtk.SpinButton.set_range.none
#COMMENT: maximum allowable value
#NAME: merge_id
#PARENT: Gtk.UIManager.add_ui.none
#COMMENT: the merge id for the merged UI, see gtk_ui_manager_new_merge_id()
#NAME: about
#PARENT: Gtk.AboutDialog.set_program_name.none
#COMMENT: a #GtkAboutDialog
#NAME: position
#PARENT: Gtk.ListStore.move_after.none
#COMMENT: A #GtkTreeIter or %NULL.
#NAME: menu_shell
#PARENT: Gtk.MenuShell.select_item.none
#COMMENT: a #GtkMenuShell
#NAME: get_printer_lpi
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.
#NAME: get_action_name
#PARENT: Gtk.ActionableInterface.get_action_name.get_action_name
#COMMENT: the action name, or %NULL if none is set
#NAME: get_page_size
#PARENT: Gtk.Adjustment.get_page_size
#COMMENT: The current page size of the adjustment.
#NAME: tree_view
#PARENT: Gtk.TreeView.is_blank_at_pos.gboolean
#COMMENT: A #GtkTreeView
#NAME: set_search_position_func
#PARENT: Gtk.TreeView
#COMMENT: Sets the function to use when positioning the search dialog.
#NAME: get_default_widget
#PARENT: Gtk.Window
#COMMENT: Returns the default widget for @window. See gtk_window_set_default()
for more details.
#NAME: new
#PARENT: Gtk.GestureZoom.new
#COMMENT: a newly created #GtkGestureZoom
#NAME: set_column_spacing
#PARENT: Gtk.IconView
#COMMENT: Sets the ::column-spacing property which specifies the space
which is inserted between the columns of the icon view.
#NAME: menu_item
#PARENT: Gtk.MenuItem.set_label.none
#COMMENT: a #GtkMenuItem
#NAME: STOCK_ORIENTATION_LANDSCAPE
#PARENT: Gtk
#COMMENT: The “Landscape Orientation” item and icon.
#NAME: fixed
#PARENT: Gtk.TreeViewColumnSizing
#COMMENT: Columns are a fixed numbers of pixels wide.
#NAME: add_group
#PARENT: Gtk.RecentFilter
#COMMENT: Adds a rule that allows resources based on the name of the group
to which they belong
#NAME: x
#PARENT: Gtk.paint_layout.none
#COMMENT: x origin
#NAME: crossfade
#PARENT: Gtk.RevealerTransitionType
#COMMENT: Fade in
#NAME: y
#PARENT: Gtk.paint_layout.none
#COMMENT: y origin
#NAME: get_documenters
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the string which are displayed in the documenters
tab of the secondary credits dialog.
#NAME: size
#PARENT: Gtk.IconSize.get_name.utf8
#COMMENT: a #GtkIconSize.
#NAME: palette
#PARENT: Gtk.ToolPalette.get_expand.gboolean
#COMMENT: a #GtkToolPalette
#NAME: include
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: get_artists
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the string which are displayed in the artists tab
of the secondary credits dialog.
#NAME: expander
#PARENT: Gtk.Expander.set_use_underline.none
#COMMENT: a #GtkExpander
#NAME: bottom
#PARENT: Gtk.PositionType
#COMMENT: The feature is at the bottom edge.
#NAME: response_id
#PARENT: Gtk.Dialog.response.none
#COMMENT: the response ID
#NAME: iter
#PARENT: Gtk.TreeModel.iter_has_child.gboolean
#COMMENT: the #GtkTreeIter-struct to test for children
#NAME: size_allocate_with_baseline
#PARENT: Gtk.Widget
#COMMENT: This function is only used by #GtkContainer subclasses, to assign a size,
position and (optionally) baseline to their child widgets.

In this function, the allocation and baseline may be adjusted. It
will be forced to a 1x1 minimum size, and the
adjust_size_allocation virtual and adjust_baseline_allocation
methods on the child will be used to adjust the allocation and
baseline. Standard adjustments include removing the widget's
margins, and applying the widget’s #GtkWidget:halign and
#GtkWidget:valign properties.

If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
baseline argument is ignored and -1 is used instead.
#NAME: get_preview_text
#PARENT: Gtk.FontSelectionDialog.get_preview_text
#COMMENT: the text displayed in the preview area.
    This string is owned by the widget and should not be
    modified or freed
#NAME: text
#PARENT: Gtk.Statusbar.push.guint
#COMMENT: the message to add to the statusbar
#NAME: rows_reordered_with_length
#PARENT: Gtk.TreeModel
#COMMENT: Emits the #GtkTreeModel::rows-reordered signal on @tree_model.

This should be called by models when their rows have been
reordered.
#NAME: widget
#PARENT: Gtk.Widget.get_visible.gboolean
#COMMENT: a #GtkWidget
#NAME: HSeparator
#PARENT: Gtk
#COMMENT: The #GtkHSeparator widget is a horizontal separator, used to group the
widgets within a window. It displays a horizontal line with a shadow to
make it appear sunken into the interface.

> The #GtkHSeparator widget is not used as a separator within menus.
> To create a separator in a menu create an empty #GtkSeparatorMenuItem
> widget using gtk_separator_menu_item_new() and add it to the menu with
> gtk_menu_shell_append().

GtkHSeparator has been deprecated, use #GtkSeparator instead.
#NAME: action_name
#PARENT: Gtk.Application.remove_accelerator.none
#COMMENT: the name of the action to activate
#NAME: next-year
#PARENT: Gtk.Calendar
#COMMENT: Emitted when user switched to the next year.
#NAME: is_equal
#PARENT: Gtk.PaperSize
#COMMENT: Compares two #GtkPaperSize objects.
#NAME: forward_visible_word_end
#PARENT: Gtk.TextIter.forward_visible_word_end
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_widget.Widget
#COMMENT: A #GtkTreeViewColumn.
#NAME: drag_source_unset
#PARENT: Gtk.Widget
#COMMENT: Undoes the effects of gtk_drag_source_set().
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_set_name.none
#COMMENT: position to modify, -1 for the path head
#NAME: new_with_text
#PARENT: Gtk.CellView.new_with_text
#COMMENT: A newly created #GtkCellView widget.
#NAME: tree_model
#PARENT: Gtk.TreeModel.iter_has_child.gboolean
#COMMENT: a #GtkTreeModel
#NAME: unmaximize
#PARENT: Gtk.Window
#COMMENT: Asks to unmaximize @window. Note that you shouldn’t assume the
window is definitely unmaximized afterward, because other entities
(e.g. the user or [window manager][gtk-X11-arch])
could maximize it again, and not all window
managers honor requests to unmaximize. But normally the window will
end up unmaximized. Just don’t write code that crashes if not.

You can track maximization via the “window-state-event” signal
on #GtkWidget.
#NAME: new_with_area
#PARENT: Gtk.ComboBox.new_with_area
#COMMENT: A new #GtkComboBox.
#NAME: cell_layout
#PARENT: Gtk.CellLayout.get_area.CellArea
#COMMENT: a #GtkCellLayout
#NAME: buildable
#PARENT: Gtk.Buildable.set_name.none
#COMMENT: a #GtkBuildable
#NAME: IconViewDropPosition
#PARENT: Gtk
#COMMENT: An enum for determining where a dropped item goes.
#NAME: set_output_bin
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.
#NAME: box
#PARENT: Gtk.ListBox.set_placeholder.none
#COMMENT: a #GtkListBox
#NAME: set_valist
#PARENT: Gtk.ListStore
#COMMENT: See gtk_list_store_set(); this version takes a va_list for use by language
bindings.
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_kinetic_scrolling.gboolean
#COMMENT: a #GtkScrolledWindow
#NAME: get_width_chars
#PARENT: Gtk.Entry.get_width_chars
#COMMENT: number of chars to request space for, or negative if unset
#NAME: get_file
#PARENT: Gtk.FileChooser.get_file
#COMMENT: a selected #GFile. You own the returned file;
    use g_object_unref() to release it.
#NAME: get_title
#PARENT: Gtk.StatusIcon.get_title
#COMMENT: the title of the status icon
#NAME: animation
#PARENT: Gtk.Image.new_from_animation.Widget
#COMMENT: an animation
#NAME: left
#PARENT: Gtk.PrintContext.get_hard_margins.gboolean
#COMMENT: left hardware printer margin
#NAME: chooser
#PARENT: Gtk.FileChooser.get_filter.FileFilter
#COMMENT: a #GtkFileChooser
#NAME: filter
#PARENT: Gtk.RecentFilter.add_application.none
#COMMENT: a #GtkRecentFilter
#NAME: path
#PARENT: Gtk.TreeDragSourceIface.drag_data_delete.drag_data_delete.gboolean
#COMMENT: row that was being dragged
#NAME: color
#PARENT: Gtk.ColorChooser.color-activated.none
#COMMENT: the color
#NAME: remove_default
#PARENT: Gtk.IconFactory
#COMMENT: Removes an icon factory from the list of default icon
factories. Not normally used; you might use it for a library that
can be unloaded or shut down.
#NAME: get_age
#PARENT: Gtk.RecentInfo
#COMMENT: Gets the number of days elapsed since the last update
of the resource pointed by @info.
#NAME: get_button_sensitivity
#PARENT: Gtk.ComboBox
#COMMENT: Returns whether the combo box sets the dropdown button
sensitive or not when there are no items in the model.
#NAME: flags
#PARENT: Gtk.CellRendererClass.start_editing.start_editing.CellEditable
#COMMENT: render flags
#NAME: position
#PARENT: Gtk.ListStore.insert_with_values.none
#COMMENT: position to insert the new row, or -1 to append after existing
    rows
#NAME: get_justification
#PARENT: Gtk.TextView
#COMMENT: Gets the default justification of paragraphs in @text_view.
Tags in the buffer may override the default.
#NAME: widget
#PARENT: Gtk.Widget.get_requisition.none
#COMMENT: a #GtkWidget
#NAME: rc_property_parse_requisition
#PARENT: Gtk.rc_property_parse_requisition
#COMMENT: %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GtkRequisition.
#NAME: time_
#PARENT: Gtk.selection_owner_set.gboolean
#COMMENT: timestamp with which to claim the selection
#NAME: style
#PARENT: Gtk.NumerableIcon.set_style_context.none
#COMMENT: a #GtkStyleContext
#NAME: no_target
#PARENT: Gtk.DragResult
#COMMENT: No suitable drag target.
#NAME: set_reserve_indicator
#PARENT: Gtk.MenuItem
#COMMENT: Sets whether the @menu_item should reserve space for
the submenu indicator, regardless if it actually has
a submenu or not.

There should be little need for applications to call
this functions.
#NAME: show-numbers
#PARENT: Gtk.RecentChooserMenu
#COMMENT: Whether the first ten items in the menu should be prepended by
a number acting as a unique mnemonic.
#NAME: use_stock
#PARENT: Gtk.Button.set_use_stock.none
#COMMENT: %TRUE if the button should use a stock item
#NAME: get_orientation
#PARENT: Gtk.PrintSettings.get_orientation
#COMMENT: the orientation
#NAME: selection_data
#PARENT: Gtk.SelectionData.targets_include_image.gboolean
#COMMENT: a #GtkSelectionData object
#NAME: func_data
#PARENT: Gtk.key_snooper_install.guint
#COMMENT: data to pass to @snooper
#NAME: get_type_from_name
#PARENT: Gtk.Builder.get_type_from_name
#COMMENT: the #GType found for @type_name or #G_TYPE_INVALID
  if no type was found
#NAME: property_name
#PARENT: Gtk.WidgetClass.find_style_property.GObject.ParamSpec
#COMMENT: the name of the style property to find
#NAME: set_vadjustment
#PARENT: Gtk.Layout
#COMMENT: Sets the vertical scroll adjustment for the layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
#NAME: rc_property_parse_color
#PARENT: Gtk.rc_property_parse_color
#COMMENT: %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GdkColor.
#NAME: object_class
#PARENT: Gtk.BindingSet.by_class.BindingSet
#COMMENT: a valid #GObject class
#NAME: toggle_button
#PARENT: Gtk.ToggleButton.set_inconsistent.none
#COMMENT: a #GtkToggleButton
#NAME: fg_color
#PARENT: Gtk.TextAppearance
#COMMENT: Foreground #GdkColor.
#NAME: tag
#PARENT: Gtk.TextBufferClass.apply_tag.apply_tag.none
#COMMENT: a #GtkTextTag
#NAME: get_preview_text
#PARENT: Gtk.FontSelection.get_preview_text
#COMMENT: the text displayed in the preview area.
    This string is owned by the widget and should not be
    modified or freed
#NAME: cell
#PARENT: Gtk.CellLayout.set_attributes.none
#COMMENT: a #GtkCellRenderer
#NAME: get_draw_sensitive
#PARENT: Gtk.CellView
#COMMENT: Gets whether @cell_view is configured to draw all of its
cells in a sensitive state.
#NAME: tooltip
#PARENT: Gtk.Action.new.Action
#COMMENT: a tooltip for the action, or %NULL
#NAME: 
#PARENT: Gtk.TreeStore.set.none...
#COMMENT: pairs of column number and value, terminated with -1
#NAME: is_sensitive
#PARENT: Gtk.Widget.is_sensitive
#COMMENT: %TRUE if the widget is effectively sensitive
#NAME: about
#PARENT: Gtk.AboutDialog.set_license_type.none
#COMMENT: a #GtkAboutDialog
#NAME: container
#PARENT: Gtk.Container.get_focus_chain.gboolean
#COMMENT: a #GtkContainer
#NAME: fraction
#PARENT: Gtk.ProgressBar.set_pulse_step.none
#COMMENT: fraction between 0.0 and 1.0
#NAME: selection
#PARENT: Gtk.TreeSelection.get_selected_rows.TreePath
#COMMENT: A #GtkTreeSelection.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_rubber_banding.gboolean
#COMMENT: a #GtkTreeView
#NAME: setting
#PARENT: Gtk.AppChooserButton.set_show_dialog_item.none
#COMMENT: the new value for #GtkAppChooserButton:show-dialog-item
#NAME: position
#PARENT: Gtk.Grid.insert_column.none
#COMMENT: the position to insert the column at
#NAME: gstring
#PARENT: Gtk.RcProperty.parse_flags.gboolean
#COMMENT: the #GString to be parsed
#NAME: set_draw_as_radio
#PARENT: Gtk.CheckMenuItem
#COMMENT: Sets whether @check_menu_item is drawn like a #GtkRadioMenuItem
#NAME: set_alignment
#PARENT: Gtk.Button
#COMMENT: Sets the alignment of the child. This property has no effect unless
the child is a #GtkMisc or a #GtkAlignment.
#NAME: user_data
#PARENT: Gtk.IconInfo.load_symbolic_async.none
#COMMENT: the data to pass to callback function
#NAME: op
#PARENT: Gtk.MountOperation.set_parent.none
#COMMENT: a #GtkMountOperation
#NAME: get_double
#PARENT: Gtk.PrintSettings
#COMMENT: Returns the double value associated with @key, or 0.
#NAME: set_baseline_row
#PARENT: Gtk.Grid
#COMMENT: Sets which row defines the global baseline for the entire grid.
Each row in the grid can have its own local baseline, but only
one of those is global, meaning it will be the baseline in the
parent of the @grid.
#NAME: name
#PARENT: Gtk.PopoverMenu.open_submenu.none
#COMMENT: the name of the menu to switch to
#NAME: get_debug_flags
#PARENT: Gtk.get_debug_flags
#COMMENT: the GTK+ debug flags.
#NAME: x
#PARENT: Gtk.CellArea.get_cell_at_position.CellRenderer
#COMMENT: the x position
#NAME: y
#PARENT: Gtk.CellArea.get_cell_at_position.CellRenderer
#COMMENT: the y position
#NAME: window
#PARENT: Gtk.Window.get_decorated.gboolean
#COMMENT: a #GtkWindow
#NAME: new
#PARENT: Gtk.WidgetPath.new
#COMMENT: A newly created, empty, #GtkWidgetPath
#NAME: accel_key
#PARENT: Gtk.CellRendererAccel.accel-edited.none
#COMMENT: the new accelerator keyval
#NAME: odd
#PARENT: Gtk.PageSet
#COMMENT: Odd pages.
#NAME: path
#PARENT: Gtk.ComboBox.format-entry-text.utf8
#COMMENT: the GtkTreePath string from the combo box's current model to format text for
#NAME: create_app_info
#PARENT: Gtk.RecentInfo.create_app_info
#COMMENT: the newly created #GAppInfo, or %NULL.
  In case of error, @error will be set either with a
  %GTK_RECENT_MANAGER_ERROR or a %G_IO_ERROR
#NAME: STYLE_CLASS_WIDE
#PARENT: Gtk
#COMMENT: A CSS class to indicate that a UI element should be 'wide'.
Used by #GtkPaned.
#NAME: tooltip-text
#PARENT: Gtk.Widget
#COMMENT: Sets the text of tooltip to be the given string.

Also see gtk_tooltip_set_text().

This is a convenience property which will take care of getting the
tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
will automatically be set to %TRUE and there will be taken care of
#GtkWidget::query-tooltip in the default signal handler.

Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
are set, the last one wins.
#NAME: style
#PARENT: Gtk.paint_layout.none
#COMMENT: a #GtkStyle
#NAME: settings
#PARENT: Gtk.PrintSettings.set_int.none
#COMMENT: a #GtkPrintSettings
#NAME: sort_func
#PARENT: Gtk.FlowBox.set_sort_func.none
#COMMENT: the sort function
#NAME: accel_path
#PARENT: Gtk.AccelMap.lock_path.none
#COMMENT: a valid accelerator path
#NAME: get_attributes
#PARENT: Gtk.Entry.get_attributes
#COMMENT: the attribute list, or %NULL
    if none was set.
#NAME: add_provider
#PARENT: Gtk.StyleContext
#COMMENT: Adds a style provider to @context, to be used in style construction.
Note that a style provider added by this function only affects
the style of the widget to which @context belongs. If you want
to affect the style of all widgets, use
gtk_style_context_add_provider_for_screen().

Note: If both priorities are the same, a #GtkStyleProvider
added through this function takes precedence over another added
through gtk_style_context_add_provider_for_screen().
#NAME: set_button
#PARENT: Gtk.GestureSingle
#COMMENT: Sets the button number @gesture listens to. If non-0, every
button press from a different button number will be ignored.
Touch events implicitly match with button 1.
#NAME: clipboard
#PARENT: Gtk.TextBuffer.paste_clipboard.none
#COMMENT: the #GtkClipboard to paste from
#NAME: list_toplevels
#PARENT: Gtk.Window.list_toplevels
#COMMENT: list of toplevel widgets
#NAME: values
#PARENT: Gtk.ListStore.insert_with_valuesv.none
#COMMENT: an array of GValues
#NAME: new_for_manager
#PARENT: Gtk.RecentAction.new_for_manager
#COMMENT: the newly created #GtkRecentAction
#NAME: start_button_mask
#PARENT: Gtk.TreeView.enable_model_drag_source.none
#COMMENT: Mask of allowed buttons to start drag
#NAME: new
#PARENT: Gtk.VScale
#COMMENT: Creates a new #GtkVScale.
#NAME: scale
#PARENT: Gtk.Scale.get_value_pos.PositionType
#COMMENT: a #GtkScale
#NAME: Table
#PARENT: Gtk
#COMMENT: The #GtkTable functions allow the programmer to arrange widgets in rows and
columns, making it easy to align many widgets next to each other,
horizontally and vertically.

Tables are created with a call to gtk_table_new(), the size of which can
later be changed with gtk_table_resize().

Widgets can be added to a table using gtk_table_attach() or the more
convenient (but slightly less flexible) gtk_table_attach_defaults().

To alter the space next to a specific row, use gtk_table_set_row_spacing(),
and for a column, gtk_table_set_col_spacing().
The gaps between all rows or columns can be changed by
calling gtk_table_set_row_spacings() or gtk_table_set_col_spacings()
respectively. Note that spacing is added between the
children, while padding added by gtk_table_attach() is added on
either side of the widget it belongs to.

gtk_table_set_homogeneous(), can be used to set whether all cells in the
table will resize themselves to the size of the largest widget in the table.

> #GtkTable has been deprecated. Use #GtkGrid instead. It provides the same
> capabilities as GtkTable for arranging widgets in a rectangular grid, but
> does support height-for-width geometry management.
#NAME: content
#PARENT: Gtk.AssistantPageType
#COMMENT: The page has regular contents. Both the
 Back and forward buttons will be shown.
#NAME: targets
#PARENT: Gtk.IconView.enable_model_drag_dest.none
#COMMENT: the table of targets that the drag will
          support
#NAME: container
#PARENT: Gtk.Container.get_path_for_child.WidgetPath
#COMMENT: a #GtkContainer
#NAME: action
#PARENT: Gtk.UIManager.disconnect-proxy.none
#COMMENT: the action
#NAME: mapped
#PARENT: Gtk.Widget.set_mapped.none
#COMMENT: %TRUE to mark the widget as mapped
#NAME: n_elements
#PARENT: Gtk.IconTheme.get_search_path.none
#COMMENT: location to store number of elements in @path, or %NULL
#NAME: icon_theme
#PARENT: Gtk.IconTheme.load_icon_for_scale.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconTheme
#NAME: reject
#PARENT: Gtk.ResponseType
#COMMENT: Generic response id, not used by GTK+ dialogs
#NAME: region_intersect
#PARENT: Gtk.Widget
#COMMENT: Computes the intersection of a @widget’s area and @region, returning
the intersection. The result may be empty, use cairo_region_is_empty() to
check.
#NAME: get_selection_mode
#PARENT: Gtk.FlowBox
#COMMENT: Gets the selection mode of @box.
#NAME: start
#PARENT: Gtk.Spinner
#COMMENT: Starts the animation of the spinner.
#NAME: title
#PARENT: Gtk.Window.set_title.none
#COMMENT: title of the window
#NAME: chooser
#PARENT: Gtk.FileChooser.set_current_folder_file.gboolean
#COMMENT: a #GtkFileChooser
#NAME: get_use_stock
#PARENT: Gtk.ImageMenuItem
#COMMENT: Checks whether the label set in the menuitem is used as a
stock id to select the stock item for the item.
#NAME: buffer
#PARENT: Gtk.TextBuffer.place_cursor.none
#COMMENT: a #GtkTextBuffer
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_id_column.gint
#COMMENT: A #GtkComboBox
#NAME: setting
#PARENT: Gtk.CellRendererToggle.set_activatable.none
#COMMENT: the value to set.
#NAME: anchor
#PARENT: Gtk.TextBuffer.insert-child-anchor.none
#COMMENT: the #GtkTextChildAnchor to be inserted
#NAME: text_view
#PARENT: Gtk.TextView.get_hadjustment.Adjustment
#COMMENT: a #GtkTextView
#NAME: EntryCompletionMatchFunc
#PARENT: Gtk.EntryCompletionMatchFunc
#COMMENT: %TRUE if @iter should be displayed as a possible completion
    for @key
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_is_important.gboolean
#COMMENT: a #GtkToolItem
#NAME: area
#PARENT: Gtk.CellArea.get_focus_siblings.CellRenderer
#COMMENT: a #GtkCellArea
#NAME: accelerator
#PARENT: Gtk.accelerator_parse_with_keycode.none
#COMMENT: string representing an accelerator
#NAME: new_for_manager
#PARENT: Gtk.RecentChooserDialog.new_for_manager
#COMMENT: a new #GtkRecentChooserDialog
#NAME: sortable
#PARENT: Gtk.TreeSortable.get_sort_column_id.gboolean
#COMMENT: A #GtkTreeSortable
#NAME: iter_has_qclass
#PARENT: Gtk.WidgetPath
#COMMENT: See gtk_widget_path_iter_has_class(). This is a version that operates
with GQuarks.
#NAME: get_right_justified
#PARENT: Gtk.MenuItem
#COMMENT: Gets whether the menu item appears justified at the right
side of the menu bar.
#NAME: get_items
#PARENT: Gtk.RecentChooser.get_items
#COMMENT: A newly allocated
  list of #GtkRecentInfo objects.  You should
  use gtk_recent_info_unref() on every item of the list, and then free
  the list itself using g_list_free().
#NAME: get_transition_type
#PARENT: Gtk.Stack.get_transition_type
#COMMENT: the current transition type of @stack
#NAME: image
#PARENT: Gtk.Image.get_storage_type.ImageType
#COMMENT: a #GtkImage
#NAME: menu_item
#PARENT: Gtk.MenuItem.get_reserve_indicator.gboolean
#COMMENT: a #GtkMenuItem
#NAME: language
#PARENT: Gtk.TextTag
#COMMENT: The language this text is in, as an ISO code. Pango can use this as a
hint when rendering the text. If not set, an appropriate default will be
used.

Note that the initial value of this property depends on the current
locale, see also gtk_get_default_language().
#NAME: builder
#PARENT: Gtk.Buildable.add_child.none
#COMMENT: a #GtkBuilder
#NAME: new
#PARENT: Gtk.ToolPalette
#COMMENT: Creates a new tool palette.
#NAME: row
#PARENT: Gtk.ListBoxRow.get_header.Widget
#COMMENT: a #GtkListBoxRow
#NAME: set_min_slider_size
#PARENT: Gtk.Range
#COMMENT: Sets the minimum size of the range’s slider.

This function is useful mainly for #GtkRange subclasses.
#NAME: font_button
#PARENT: Gtk.FontButton.get_use_size.gboolean
#COMMENT: a #GtkFontButton
#NAME: lower
#PARENT: Gtk.Adjustment.configure.none
#COMMENT: the new minimum value
#NAME: pbar
#PARENT: Gtk.ProgressBar.get_text.utf8
#COMMENT: a #GtkProgressBar
#NAME: new
#PARENT: Gtk.ScaleButton.new
#COMMENT: a new #GtkScaleButton
#NAME: get_visible_horizontal
#PARENT: Gtk.ToolItem
#COMMENT: Returns whether the @tool_item is visible on toolbars that are
docked horizontally.
#NAME: get_resizable
#PARENT: Gtk.TreeViewColumn.get_resizable
#COMMENT: %TRUE, if the @tree_column can be resized.
#NAME: key-press-event
#PARENT: Gtk.Widget.key-press-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: accel-activate
#PARENT: Gtk.AccelGroup.accel-activate
#COMMENT: %TRUE if the accelerator was activated
#NAME: visible
#PARENT: Gtk.Entry.set_visibility.none
#COMMENT: %TRUE if the contents of the entry are displayed
          as plaintext
#NAME: setup
#PARENT: Gtk.PrintOperation.request-page-setup.none
#COMMENT: the #GtkPageSetup
#NAME: color
#PARENT: Gtk.StyleContext.get_background_color.none
#COMMENT: return value for the background color
#NAME: child_set_property
#PARENT: Gtk.Container
#COMMENT: Sets a child property for @child and @container.
#NAME: flags
#PARENT: Gtk.IconTheme.lookup_icon_for_scale.IconInfo
#COMMENT: flags modifying the behavior of the icon lookup
#NAME: set_print_settings
#PARENT: Gtk.PrintOperation
#COMMENT: Sets the print settings for @op. This is typically used to
re-establish print settings from a previous print operation,
see gtk_print_operation_run().
#NAME: parent
#PARENT: Gtk.RecentChooserDialog.new.Widget
#COMMENT: Transient parent of the dialog, or %NULL,
#NAME: settings
#PARENT: Gtk.PrintSettings.get_printer_lpi.gdouble
#COMMENT: a #GtkPrintSettings
#NAME: factor
#PARENT: Gtk.SymbolicColor.new_mix.SymbolicColor
#COMMENT: mix factor
#NAME: none
#PARENT: Gtk.TextDirection
#COMMENT: No direction.
#NAME: fontsel
#PARENT: Gtk.FontSelection.set_font_name.gboolean
#COMMENT: a #GtkFontSelection
#NAME: data
#PARENT: Gtk.AccelGroup.find.AccelKey
#COMMENT: data to pass to @find_func
#NAME: state
#PARENT: Gtk.ThemingEngine.get_margin.none
#COMMENT: state to retrieve the border for
#NAME: get_popup_completion
#PARENT: Gtk.EntryCompletion.get_popup_completion
#COMMENT: %TRUE if popup completion is turned on
#NAME: get_image
#PARENT: Gtk.ImageMenuItem
#COMMENT: Gets the widget that is currently set as the image of @image_menu_item.
See gtk_image_menu_item_set_image().
#NAME: current_page
#PARENT: Gtk.PrintOperation.set_current_page.none
#COMMENT: the current page, 0-based
#NAME: get_allocated_width
#PARENT: Gtk.Widget.get_allocated_width
#COMMENT: the width of the @widget
#NAME: iter_set_name
#PARENT: Gtk.WidgetPath
#COMMENT: Sets the widget name for the widget found at position @pos
in the widget hierarchy defined by @path.
#NAME: get_path_for_child
#PARENT: Gtk.Container.get_path_for_child
#COMMENT: A newly created #GtkWidgetPath
#NAME: start_offset
#PARENT: Gtk.Label.select_region.none
#COMMENT: start offset (in characters not bytes)
#NAME: setting
#PARENT: Gtk.TextBuffer.set_modified.none
#COMMENT: modification flag setting
#NAME: value
#PARENT: Gtk.PrintSettings.set_int.none
#COMMENT: an integer
#NAME: get_hadjustment
#PARENT: Gtk.ScrolledWindow
#COMMENT: Returns the horizontal scrollbar’s adjustment, used to connect the
horizontal scrollbar to the child widget’s horizontal scroll
functionality.
#NAME: buffer
#PARENT: Gtk.TextBuffer.remove_tag.none
#COMMENT: a #GtkTextBuffer
#NAME: get_use_stock
#PARENT: Gtk.Button
#COMMENT: Returns whether the button label is a stock item.
#NAME: image
#PARENT: Gtk.MessageDialog
#COMMENT: The image for this dialog.
#NAME: get_tab_detachable
#PARENT: Gtk.Notebook
#COMMENT: Returns whether the tab contents can be detached from @notebook.
#NAME: str
#PARENT: Gtk.TextIter.backward_search.gboolean
#COMMENT: search string
#NAME: limit
#PARENT: Gtk.TextIter.backward_search.gboolean
#COMMENT: location of last possible @match_start, or %NULL for start of buffer
#NAME: name
#PARENT: Gtk.TextMark
#COMMENT: The name of the mark or %NULL if the mark is anonymous.
#NAME: binding_set
#PARENT: Gtk.binding_entry_remove.none
#COMMENT: a #GtkBindingSet to remove an entry of
#NAME: icon-release
#PARENT: Gtk.Entry
#COMMENT: The ::icon-release signal is emitted on the button release from a
mouse click over an activatable icon.
#NAME: property_name
#PARENT: Gtk.ThemingEngine.get_style_property.none
#COMMENT: the name of the widget style property
#NAME: renderer
#PARENT: Gtk.CellArea.get_cell_allocation.none
#COMMENT: the #GtkCellRenderer to get the allocation for
#NAME: get_wrap_license
#PARENT: Gtk.AboutDialog
#COMMENT: Returns whether the license text in @about is
automatically wrapped.
#NAME: new_for_manager
#PARENT: Gtk.RecentChooserWidget.new_for_manager
#COMMENT: a new #GtkRecentChooserWidget
#NAME: gradient
#PARENT: Gtk.Gradient.ref.Gradient
#COMMENT: a #GtkGradient
#NAME: get_activates_default
#PARENT: Gtk.Entry.get_activates_default
#COMMENT: %TRUE if the entry will activate the default widget
#NAME: new_from_resource
#PARENT: Gtk.Builder
#COMMENT: Builds the [GtkBuilder UI definition][BUILDER-UI]
at @resource_path.

If there is an error locating the resource or parsing the
description, then the program will be aborted.
#NAME: right_margin
#PARENT: Gtk.TextAttributes
#COMMENT: Width of the right margin in pixels.
#NAME: activate
#PARENT: Gtk.FlowBoxChild
#COMMENT: The ::activate signal is emitted when the user activates
a child widget in a #GtkFlowBox, either by clicking or
double-clicking, or by using the Space or Enter key.

While this signal is used as a
[keybinding signal][GtkBindingSignal],
it can be used by applications for their own purposes.
#NAME: new
#PARENT: Gtk.Revealer.new
#COMMENT: a newly created #GtkRevealer
#NAME: rc_property_parse_flags
#PARENT: Gtk
#COMMENT: A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses flags.

Flags can be specified by their name, their nickname or
numerically. Multiple flags can be specified in the form
`"( flag1 | flag2 | ... )"`.
#NAME: get_preferred_size
#PARENT: Gtk.CellRenderer
#COMMENT: Retrieves the minimum and natural size of a cell taking
into account the widget’s preference for height-for-width management.
#NAME: setting
#PARENT: Gtk.IconSource.set_direction_wildcarded.none
#COMMENT: %TRUE to wildcard the text direction
#NAME: get_icon_sizes
#PARENT: Gtk.IconTheme
#COMMENT: Returns an array of integers describing the sizes at which
the icon is available without scaling. A size of -1 means
that the icon is available in a scalable format. The array
is zero-terminated.
#NAME: normal
#PARENT: Gtk.StateType
#COMMENT: State during normal operation.
#NAME: iter
#PARENT: Gtk.TextIter.forward_word_ends.gboolean
#COMMENT: a #GtkTextIter
#NAME: accel_label
#PARENT: Gtk.AccelLabel.get_accel_width.guint
#COMMENT: a #GtkAccelLabel.
#NAME: image
#PARENT: Gtk.Button.set_image.none
#COMMENT: a widget to set as the image for the button
#NAME: iter
#PARENT: Gtk.TextIter.get_line.gint
#COMMENT: an iterator
#NAME: group
#PARENT: Gtk.ToolItemGroup.get_item_position.gint
#COMMENT: a #GtkToolItemGroup
#NAME: state_type
#PARENT: Gtk.paint_layout.none
#COMMENT: a state
#NAME: get_is_important
#PARENT: Gtk.Action
#COMMENT: Checks whether @action is important or not
#NAME: get_focus_on_click
#PARENT: Gtk.FileChooserButton
#COMMENT: Returns whether the button grabs focus when it is clicked with the mouse.
See gtk_file_chooser_button_set_focus_on_click().
#NAME: area
#PARENT: Gtk.GLArea.set_required_version.none
#COMMENT: a #GtkGLArea
#NAME: parent_class
#PARENT: Gtk.PrintOperationClass
#COMMENT: The parent class.
#NAME: new
#PARENT: Gtk.VScale.new
#COMMENT: a new #GtkVScale.
#NAME: edited-cell
#PARENT: Gtk.CellArea
#COMMENT: The cell in the area that is currently edited

This property is read-only and only changes as
a result of a call gtk_cell_area_activate_cell().
#NAME: set_short_label
#PARENT: Gtk.Action
#COMMENT: Sets a shorter label text on @action.
#NAME: get_dest_item_at_pos
#PARENT: Gtk.IconView.get_dest_item_at_pos
#COMMENT: whether there is an item at the given position.
#NAME: tree_store
#PARENT: Gtk.TreeStore.append.none
#COMMENT: A #GtkTreeStore
#NAME: focus_column
#PARENT: Gtk.TreeView.set_cursor.none
#COMMENT: A #GtkTreeViewColumn, or %NULL
#NAME: new
#PARENT: Gtk.TreeViewColumn.new
#COMMENT: A newly created #GtkTreeViewColumn.
#NAME: font_button
#PARENT: Gtk.FontButton.get_title.utf8
#COMMENT: a #GtkFontButton
#NAME: height
#PARENT: Gtk.CellAreaClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: the height for which to check the width of this area
#NAME: get_has_selection
#PARENT: Gtk.TextBuffer
#COMMENT: Indicates whether the buffer has some text currently selected.
#NAME: get_ellipsize
#PARENT: Gtk.ProgressBar
#COMMENT: Returns the ellipsizing position of the progress bar.
See gtk_progress_bar_set_ellipsize().
#NAME: appearance
#PARENT: Gtk.TextAttributes
#COMMENT: #GtkTextAppearance for text.
#NAME: set_text
#PARENT: Gtk.EntryBuffer
#COMMENT: Sets the text in the buffer.

This is roughly equivalent to calling gtk_entry_buffer_delete_text()
and gtk_entry_buffer_insert_text().

Note that @n_chars is in characters, not in bytes.
#NAME: text-yalign
#PARENT: Gtk.CellRendererProgress
#COMMENT: The "text-yalign" property controls the vertical alignment of the
text in the progress bar.  Valid values range from 0 (top) to 1
(bottom).
#NAME: over_left
#PARENT: Gtk.StackTransitionType
#COMMENT: Cover the old page by sliding to the left. Since: 3.12
#NAME: insert_prefix
#PARENT: Gtk.EntryCompletion
#COMMENT: Requests a prefix insertion.
#NAME: set_background_gicon
#PARENT: Gtk.NumerableIcon
#COMMENT: Updates the icon to use @icon as the base background image.
If @icon is %NULL, @self will go back using style information
or default theming for its background image.

If this method is called and an icon name was already set as
background for the icon, @icon will be used, i.e. the last method
called between gtk_numerable_icon_set_background_gicon() and
gtk_numerable_icon_set_background_icon_name() has always priority.
#NAME: get_default
#PARENT: Gtk.PaperSize
#COMMENT: Returns the name of the default paper size, which
depends on the current locale.
#NAME: cut_clipboard
#PARENT: Gtk.TextBuffer
#COMMENT: Copies the currently-selected text to a clipboard, then deletes
said text if it’s editable.
#NAME: iter
#PARENT: Gtk.TextIter.forward_sentence_ends.gboolean
#COMMENT: a #GtkTextIter
#NAME: add_filter
#PARENT: Gtk.AccelMap
#COMMENT: Adds a filter to the global list of accel path filters.

Accel map entries whose accel path matches one of the filters
are skipped by gtk_accel_map_foreach().

This function is intended for GTK+ modules that create their own
menus, but don’t want them to be saved into the applications accelerator
map dump.
#NAME: event
#PARENT: Gtk.CellEditable.start_editing.none
#COMMENT: A #GdkEvent, or %NULL
#NAME: radio_menu_item
#PARENT: Gtk.RadioMenuItem.set_group.none
#COMMENT: a #GtkRadioMenuItem.
#NAME: adjustment
#PARENT: Gtk.Adjustment.value_changed.none
#COMMENT: a #GtkAdjustment
#NAME: insert_markup
#PARENT: Gtk.TextBuffer
#COMMENT: Inserts the text in @markup at position @iter. @markup will be inserted
in its entirety and must be nul-terminated and valid UTF-8. Emits the
#GtkTextBuffer::insert-text signal, possibly multiple times; insertion
actually occurs in the default handler for the signal. @iter will point
to the end of the inserted text on return.
#NAME: widget
#PARENT: Gtk.Widget.set_size_request.none
#COMMENT: a #GtkWidget
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_ellipsize_mode.Pango.EllipsizeMode
#COMMENT: a #GtkToolItem
#NAME: palette
#PARENT: Gtk.ToolPalette.get_exclusive.gboolean
#COMMENT: a #GtkToolPalette
#NAME: expand
#PARENT: Gtk.Widget
#COMMENT: Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
#NAME: get_support_selection
#PARENT: Gtk.PrintOperation.get_support_selection
#COMMENT: whether the application supports print of selection
#NAME: height
#PARENT: Gtk.paint_flat_box.none
#COMMENT: the height of the box
#NAME: remove_region
#PARENT: Gtk.StyleContext
#COMMENT: Removes a region from @context.
#NAME: ref
#PARENT: Gtk.SymbolicColor
#COMMENT: Increases the reference count of @color
#NAME: get_length
#PARENT: Gtk.EntryBuffer
#COMMENT: Retrieves the length in characters of the buffer.
#NAME: cell
#PARENT: Gtk.CellRenderer.start_editing.CellEditable
#COMMENT: a #GtkCellRenderer
#NAME: unit
#PARENT: Gtk.PageSetup.get_page_width.gdouble
#COMMENT: the unit for the return value
#NAME: get_handle_window
#PARENT: Gtk.Paned
#COMMENT: Returns the #GdkWindow of the handle. This function is
useful when handling button or motion events because it
enables the callback to distinguish between the window
of the paned, a child and the handle.
#NAME: get_accept_focus
#PARENT: Gtk.Window.get_accept_focus
#COMMENT: %TRUE if window should receive the input focus
#NAME: new
#PARENT: Gtk.WindowGroup.new
#COMMENT: a new #GtkWindowGroup.
#NAME: STYLE_CLASS_READ_ONLY
#PARENT: Gtk
#COMMENT: A CSS class used to indicate a read-only state.
#NAME: box
#PARENT: Gtk.CellAreaBox.set_spacing.none
#COMMENT: a #GtkCellAreaBox
#NAME: override_symbolic_color
#PARENT: Gtk.Widget
#COMMENT: Sets a symbolic color for a widget.

All other style values are left untouched.
See gtk_widget_override_color() for overriding the foreground
or background color.
#NAME: drop_above
#PARENT: Gtk.IconViewDropPosition
#COMMENT: dropped item is inserted above
#NAME: tab_forward
#PARENT: Gtk.DirectionType
#COMMENT: Move forward.
#NAME: child
#PARENT: Gtk.HeaderBar.pack_end.none
#COMMENT: the #GtkWidget to be added to @bar
#NAME: get_column_spacing
#PARENT: Gtk.FlowBox
#COMMENT: Gets the horizontal spacing.
#NAME: get_visible_line_offset
#PARENT: Gtk.TextIter
#COMMENT: Returns the offset in characters from the start of the
line to the given @iter, not counting characters that
are invisible due to tags with the “invisible” flag
toggled on.
#NAME: widget
#PARENT: Gtk.Widget.get_visual.Gdk.Visual
#COMMENT: a #GtkWidget
#NAME: style_get
#PARENT: Gtk.Widget
#COMMENT: Gets the values of a multiple style properties of @widget.
#NAME: check_menu_item
#PARENT: Gtk.CheckMenuItem.set_inconsistent.none
#COMMENT: a #GtkCheckMenuItem
#NAME: get_selection_mode
#PARENT: Gtk.IconView.get_selection_mode
#COMMENT: the current selection mode
#NAME: set_column_types
#PARENT: Gtk.ListStore
#COMMENT: This function is meant primarily for #GObjects that inherit from #GtkListStore,
and should only be used when constructing a new #GtkListStore.  It will not
function after a row has been added, or a method on the #GtkTreeModel
interface is called.
#NAME: text_view
#PARENT: Gtk.TextView.get_input_hints.InputHints
#COMMENT: a #GtkTextView
#NAME: get_text
#PARENT: Gtk.Entry.get_text
#COMMENT: a pointer to the contents of the widget as a
     string. This string points to internally allocated
     storage in the widget and must not be freed, modified or
     stored.
#NAME: get_collate
#PARENT: Gtk.PrintSettings.get_collate
#COMMENT: whether to collate the printed pages
#NAME: remove_item
#PARENT: Gtk.RecentManager
#COMMENT: Removes a resource pointed by @uri from the recently used resources
list handled by a recent manager.
#NAME: icon_name
#PARENT: Gtk.drag_set_icon_name.none
#COMMENT: name of icon to use
#NAME: clipboard
#PARENT: Gtk.ClipboardTargetsReceivedFunc.none
#COMMENT: the #GtkClipboard
#NAME: register_alias
#PARENT: Gtk.IconSize
#COMMENT: Registers @alias as another name for @target.
So calling gtk_icon_size_from_name() with @alias as argument
will return @target.
#NAME: draw
#PARENT: Gtk.Widget
#COMMENT: This signal is emitted when a widget is supposed to render itself.
The @widget's top left corner must be painted at the origin of
the passed in context and be sized to the values returned by
gtk_widget_get_allocated_width() and
gtk_widget_get_allocated_height().

Signal handlers connected to this signal can modify the cairo
context passed as @cr in any way they like and don't need to
restore it. The signal emission takes care of calling cairo_save()
before and cairo_restore() after invoking the handler.

The signal handler will get a @cr with a clip region already set to the
widget's dirty region, i.e. to the area that needs repainting.  Complicated
widgets that want to avoid redrawing themselves completely can get the full
extents of the clip region with gdk_cairo_get_clip_rectangle(), or they can
get a finer-grained representation of the dirty region with
cairo_copy_clip_rectangle_list().
#NAME: calendar
#PARENT: Gtk.Calendar.get_day_is_marked.gboolean
#COMMENT: a #GtkCalendar
#NAME: menu_item
#PARENT: Gtk.MenuItem.toggle_size_request.none
#COMMENT: the menu item
#NAME: get_junction_sides
#PARENT: Gtk.StyleContext.get_junction_sides
#COMMENT: the junction sides
#NAME: add_custom
#PARENT: Gtk.RecentFilter
#COMMENT: Adds a rule to a filter that allows resources based on a custom callback
function. The bitfield @needed which is passed in provides information
about what sorts of information that the filter function needs;
this allows GTK+ to avoid retrieving expensive information when
it isn’t needed by the filter.
#NAME: tag
#PARENT: Gtk.TextBuffer.remove_tag.none
#COMMENT: a #GtkTextTag
#NAME: cr
#PARENT: Gtk.paint_shadow.none
#COMMENT: a #cairo_t
#NAME: exclusive
#PARENT: Gtk.ToolPalette.set_exclusive.none
#COMMENT: whether the group should be exclusive or not
#NAME: activatable
#PARENT: Gtk.Activatable.get_use_action_appearance.gboolean
#COMMENT: a #GtkActivatable
#NAME: get_style_property
#PARENT: Gtk.StyleProvider.get_style_property
#COMMENT: %TRUE if the property was found and has a value, %FALSE otherwise
#NAME: get_default_icon_list
#PARENT: Gtk.Window
#COMMENT: Gets the value set by gtk_window_set_default_icon_list().
The list is a copy and should be freed with g_list_free(),
but the pixbufs in the list have not had their reference count
incremented.
#NAME: grid
#PARENT: Gtk.Grid.get_row_baseline_position.BaselinePosition
#COMMENT: a #GtkGrid
#NAME: new_with_range
#PARENT: Gtk.HScale.new_with_range
#COMMENT: a new #GtkHScale
#NAME: get_visible_child
#PARENT: Gtk.Stack.get_visible_child
#COMMENT: the visible child of the #GtkStack
#NAME: get_icon_size
#PARENT: Gtk.ToolShell.get_icon_size
#COMMENT: the current size for icons of @shell
#NAME: get_vexpand_set
#PARENT: Gtk.Widget
#COMMENT: Gets whether gtk_widget_set_vexpand() has been used to
explicitly set the expand flag on this widget.

See gtk_widget_get_hexpand_set() for more detail.
#NAME: backward_visible_lines
#PARENT: Gtk.TextIter.backward_visible_lines
#COMMENT: whether @iter moved and is dereferenceable
#NAME: childname
#PARENT: Gtk.Buildable.get_internal_child.GObject.Object
#COMMENT: name of child
#NAME: line_number
#PARENT: Gtk.TextIter.set_line.none
#COMMENT: line number (counted from 0)
#NAME: tool_item
#PARENT: Gtk.ToolItem.set_homogeneous.none
#COMMENT: a #GtkToolItem
#NAME: set_alignment
#PARENT: Gtk.Entry
#COMMENT: Sets the alignment for the contents of the entry. This controls
the horizontal positioning of the contents when the displayed
text is shorter than the width of the entry.
#NAME: menu_shell
#PARENT: Gtk.MenuShell.deselect.none
#COMMENT: a #GtkMenuShell
#NAME: op
#PARENT: Gtk.PrintOperation.set_allow_async.none
#COMMENT: a #GtkPrintOperation
#NAME: get_visible
#PARENT: Gtk.CellRenderer
#COMMENT: Returns the cell renderer’s visibility.
#NAME: child
#PARENT: Gtk.Assistant.remove_action_widget.none
#COMMENT: a #GtkWidget
#NAME: add_credit_section
#PARENT: Gtk.AboutDialog
#COMMENT: Creates a new section in the Credits page.
#NAME: context
#PARENT: Gtk.IMContextClass.reset.reset.none
#COMMENT: a #GtkIMContext
#NAME: get_focus_vadjustment
#PARENT: Gtk.Container
#COMMENT: Retrieves the vertical focus adjustment for the container. See
gtk_container_set_focus_vadjustment().
#NAME: pos
#PARENT: Gtk.IconView.get_drag_dest_item.none
#COMMENT: Return location for the drop position, or %NULL
#NAME: new
#PARENT: Gtk.TreeView
#COMMENT: Creates a new #GtkTreeView widget.
#NAME: add_mark
#PARENT: Gtk.Scale
#COMMENT: Adds a mark at @value.

A mark is indicated visually by drawing a tick mark next to the scale,
and GTK+ makes it easy for the user to position the scale exactly at the
marks value.

If @markup is not %NULL, text is shown next to the tick mark.

To remove marks from a scale, use gtk_scale_clear_marks().
#NAME: context
#PARENT: Gtk.StyleContext.has_region.gboolean
#COMMENT: a #GtkStyleContext
#NAME: width
#PARENT: Gtk.paint_spinner.none
#COMMENT: the width of the rectangle in which to draw the spinner
#NAME: action
#PARENT: Gtk.ActionClass.create_menu_item.create_menu_item.Widget
#COMMENT: the action object
#NAME: get_bytes
#PARENT: Gtk.EntryBuffer.get_bytes
#COMMENT: The byte length of the buffer.
#NAME: get_pixbuf
#PARENT: Gtk.TextIter
#COMMENT: If the element at @iter is a pixbuf, the pixbuf is returned
(with no new reference count added). Otherwise,
%NULL is returned.
#NAME: icon_pos
#PARENT: Gtk.Entry.set_icon_from_gicon.none
#COMMENT: The position at which to set the icon
#NAME: new
#PARENT: Gtk.RadioAction.new
#COMMENT: a new #GtkRadioAction
#NAME: get_finishings
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_FINISHINGS.
#NAME: iter
#PARENT: Gtk.TreeStore.set_value.none
#COMMENT: A valid #GtkTreeIter for the row being modified
#NAME: func
#PARENT: Gtk.TreeView.set_column_drag_function.none
#COMMENT: A function to determine which columns are reorderable, or %NULL.
#NAME: set_default_size
#PARENT: Gtk.Window
#COMMENT: Sets the default size of a window. If the window’s “natural” size
(its size request) is larger than the default, the default will be
ignored. More generally, if the default size does not obey the
geometry hints for the window (gtk_window_set_geometry_hints() can
be used to set these explicitly), the default size will be clamped
to the nearest permitted size.

Unlike gtk_widget_set_size_request(), which sets a size request for
a widget and thus would keep users from shrinking the window, this
function only sets the initial size, just as if the user had
resized the window themselves. Users can still shrink the window
again as they normally would. Setting a default size of -1 means to
use the “natural” default size (the size request of the window).

For more control over a window’s initial size and how resizing works,
investigate gtk_window_set_geometry_hints().

For some uses, gtk_window_resize() is a more appropriate function.
gtk_window_resize() changes the current size of the window, rather
than the size to be used on initial display. gtk_window_resize() always
affects the window itself, not the geometry widget.

The default size of a window only affects the first time a window is
shown; if a window is hidden and re-shown, it will remember the size
it had prior to hiding, rather than using the default size.

Windows can’t actually be 0x0 in size, they must be at least 1x1, but
passing 0 for @width and @height is OK, resulting in a 1x1 default size.
#NAME: check_menu_item
#PARENT: Gtk.CheckMenuItemClass.toggled.toggled.none
#COMMENT: a #GtkCheckMenuItem.
#NAME: widget
#PARENT: Gtk.Widget.class_path.none
#COMMENT: a #GtkWidget
#NAME: gtk-scrolled-window-placement
#PARENT: Gtk.Settings
#COMMENT: Where the contents of scrolled windows are located with respect to the
scrollbars, if not overridden by the scrolled window's own placement.
#NAME: get_allocation
#PARENT: Gtk.Widget
#COMMENT: Retrieves the widget’s allocation.

Note, when implementing a #GtkContainer: a widget’s allocation will
be its “adjusted” allocation, that is, the widget’s parent
container typically calls gtk_widget_size_allocate() with an
allocation, and that allocation is then adjusted (to handle margin
and alignment for example) before assignment to the widget.
gtk_widget_get_allocation() returns the adjusted allocation that
was actually assigned to the widget. The adjusted allocation is
guaranteed to be completely contained within the
gtk_widget_size_allocate() allocation, however. So a #GtkContainer
is guaranteed that its children stay inside the assigned bounds,
but not that they have exactly the bounds the container assigned.
There is no way to get the original allocation assigned by
gtk_widget_size_allocate(), since it isn’t stored; if a container
implementation needs that information it will have to track it itself.
#NAME: get_font_face
#PARENT: Gtk.FontChooser.get_font_face
#COMMENT: A #PangoFontFace representing the
    selected font group details, or %NULL. The returned object is owned by
    @fontchooser and must not be modified or freed.
#NAME: window
#PARENT: Gtk.Style.attach.Style
#COMMENT: a #GdkWindow.
#NAME: get_add_tearoffs
#PARENT: Gtk.UIManager.get_add_tearoffs
#COMMENT: whether tearoff menu items are added
#NAME: child
#PARENT: Gtk.Buildable.add_child.none
#COMMENT: child to add
#NAME: tearoff-state
#PARENT: Gtk.Menu
#COMMENT: A boolean that indicates whether the menu is torn-off.
#NAME: minimum_height
#PARENT: Gtk.CellAreaContextClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: location to store the minimum height,
    or %NULL
#NAME: tab_label
#PARENT: Gtk.Notebook.prepend_page_menu.gint
#COMMENT: the #GtkWidget to be used as the label
    for the page, or %NULL to use the default label, “page N”
#NAME: show-enter-location
#PARENT: Gtk.PlacesSidebar
#COMMENT: The places sidebar emits this signal when it needs the calling
application to present an way to directly enter a location.
For example, the application may bring up a dialog box asking for
a URL like "http://http.example.com".
#NAME: filename
#PARENT: Gtk.RecentManager
#COMMENT: The full path to the file to be used to store and read the
recently used resources list
#NAME: lookup_color
#PARENT: Gtk.StyleProperties
#COMMENT: Returns the symbolic color that is mapped
to @name.
#NAME: completion
#PARENT: Gtk.EntryCompletion.set_model.none
#COMMENT: a #GtkEntryCompletion
#NAME: get_application
#PARENT: Gtk.Builder.get_application
#COMMENT: the application being used by the builder,
    or %NULL
#NAME: pbar
#PARENT: Gtk.ProgressBar.get_ellipsize.Pango.EllipsizeMode
#COMMENT: a #GtkProgressBar
#NAME: range
#PARENT: Gtk.Range.get_value.gdouble
#COMMENT: a #GtkRange
#NAME: tree_store
#PARENT: Gtk.TreeStore.set_valist.none
#COMMENT: A #GtkTreeStore
#NAME: insert-text
#PARENT: Gtk.Editable
#COMMENT: This signal is emitted when text is inserted into
the widget by the user. The default handler for
this signal will normally be responsible for inserting
the text, so by connecting to this signal and then
stopping the signal with g_signal_stop_emission(), it
is possible to modify the inserted text, or prevent
it from being inserted entirely.
#NAME: spin_button
#PARENT: Gtk.SpinButton.set_update_policy.none
#COMMENT: a #GtkSpinButton
#NAME: filter_new
#PARENT: Gtk.TreeModel
#COMMENT: Creates a new #GtkTreeModel, with @child_model as the child_model
and @root as the virtual root.
#NAME: stock_id
#PARENT: Gtk.RadioActionEntry
#COMMENT: The stock id for the action, or the name of an icon from the
 icon theme.
#NAME: width
#PARENT: Gtk.paint_check.none
#COMMENT: the width of the rectangle to draw the check in
#NAME: range
#PARENT: Gtk.Range.set_round_digits.none
#COMMENT: a #GtkRange
#NAME: iter
#PARENT: Gtk.TreeModel.get_valist.none
#COMMENT: a row in @tree_model
#NAME: n_columns
#PARENT: Gtk.TreeStore.set_column_types.none
#COMMENT: Number of columns for the tree store
#NAME: get_style
#PARENT: Gtk.Widget
#COMMENT: Simply an accessor function that returns @widget->style.
#NAME: accelerator_mods
#PARENT: Gtk.accelerator_parse_with_keycode.none
#COMMENT: return location for accelerator
    modifier mask, %NULL
#NAME: get_actions_for_accel
#PARENT: Gtk.Application
#COMMENT: Returns the list of actions (possibly empty) that @accel maps to.
Each item in the list is a detailed action name in the usual form.

This might be useful to discover if an accel already exists in
order to prevent installation of a conflicting accelerator (from
an accelerator editor or a plugin system, for example). Note that
having more than one action per accelerator may not be a bad thing
and might make sense in cases where the actions never appear in the
same context.

In case there are no actions for a given accelerator, an empty array
is returned.  %NULL is never returned.

It is a programmer error to pass an invalid accelerator string.
If you are unsure, check it with gtk_accelerator_parse() first.
#NAME: n_targets
#PARENT: Gtk.Clipboard.set_can_store.none
#COMMENT: number of elements in @targets
#NAME: printer
#PARENT: Gtk.PrintSettings.set_printer.none
#COMMENT: the printer name
#NAME: finished
#PARENT: Gtk.PrintStatus
#COMMENT: The printing has been completed successfully.
#NAME: get_clickable
#PARENT: Gtk.TreeViewColumn.get_clickable
#COMMENT: %TRUE if user can click the column header.
#NAME: string
#PARENT: Gtk.AccelLabel.new.Widget
#COMMENT: the label string. Must be non-%NULL.
#NAME: VSeparator
#PARENT: Gtk
#COMMENT: The #GtkVSeparator widget is a vertical separator, used to group the
widgets within a window. It displays a vertical line with a shadow to
make it appear sunken into the interface.

GtkVSeparator has been deprecated, use #GtkSeparator instead.
#NAME: natural_height
#PARENT: Gtk.CellAreaContext.get_preferred_height.none
#COMMENT: location to store the natural height,
    or %NULL
#NAME: gesture
#PARENT: Gtk.GesturePan.set_orientation.none
#COMMENT: A #GtkGesturePan
#NAME: set_filter
#PARENT: Gtk.RecentChooser
#COMMENT: Sets @filter as the current #GtkRecentFilter object used by @chooser
to affect the displayed recently used resources.
#NAME: render_frame_gap
#PARENT: Gtk
#COMMENT: Renders a frame around the rectangle defined by (@x, @y, @width, @height),
leaving a gap on one side. @xy0_gap and @xy1_gap will mean X coordinates
for %GTK_POS_TOP and %GTK_POS_BOTTOM gap sides, and Y coordinates for
%GTK_POS_LEFT and %GTK_POS_RIGHT.

Typical rendering of a frame with a gap:

![](frame-gap.png)
#NAME: end
#PARENT: Gtk.Label.get_selection_bounds.gboolean
#COMMENT: return location for end of selection, as a character offset
#NAME: action
#PARENT: Gtk.RadioAction.get_current_value.gint
#COMMENT: a #GtkRadioAction
#NAME: text_view
#PARENT: Gtk.TextView.scroll_mark_onscreen.none
#COMMENT: a #GtkTextView
#NAME: test-collapse-row
#PARENT: Gtk.TreeView.test-collapse-row
#COMMENT: %FALSE to allow collapsing, %TRUE to reject
#NAME: controller
#PARENT: Gtk.EventController.get_widget.Widget
#COMMENT: a #GtkEventController
#NAME: type
#PARENT: Gtk.Widget.new.Widget
#COMMENT: type ID of the widget to create
#NAME: gtk-entry-password-hint-timeout
#PARENT: Gtk.Settings
#COMMENT: How long to show the last input character in hidden
entries. This value is in milliseconds. 0 disables showing the
last char. 600 is a good value for enabling it.
#NAME: create_context
#PARENT: Gtk.CellArea.create_context
#COMMENT: a newly created #GtkCellAreaContext which can be used with @area.
#NAME: set_title
#PARENT: Gtk.ComboBox
#COMMENT: Sets the menu’s title in tearoff mode.
#NAME: value
#PARENT: Gtk.Adjustment.configure.none
#COMMENT: the new value
#NAME: STYLE_CLASS_INSERTION_CURSOR
#PARENT: Gtk
#COMMENT: A CSS class used when rendering a drag handle for
the insertion cursor position.
#NAME: widget
#PARENT: Gtk.Widget.insert_action_group.none
#COMMENT: a #GtkWidget
#NAME: window
#PARENT: Gtk.Window.set_has_user_ref_count.none
#COMMENT: a #GtkWindow
#NAME: set_from_icon_set
#PARENT: Gtk.Image
#COMMENT: See gtk_image_new_from_icon_set() for details.
#NAME: gtk-touchscreen-mode
#PARENT: Gtk.Settings
#COMMENT: When %TRUE, there are no motion notify events delivered on this screen,
and widgets can't use the pointer hovering them for any essential
functionality.
#NAME: TargetPair
#PARENT: Gtk
#COMMENT: A #GtkTargetPair is used to represent the same
information as a table of #GtkTargetEntry, but in
an efficient form.
#NAME: child
#PARENT: Gtk.Dialog.add_action_widget.none
#COMMENT: an activatable widget
#NAME: get_row_baseline_position
#PARENT: Gtk.Grid
#COMMENT: Returns the baseline position of @row as set
by gtk_grid_set_row_baseline_position() or the default value
%GTK_BASELINE_POSITION_CENTER.
#NAME: widget
#PARENT: Gtk.Container.remove.none
#COMMENT: a current child of @container
#NAME: iter_has_qname
#PARENT: Gtk.WidgetPath
#COMMENT: See gtk_widget_path_iter_has_name(). This is a version
that operates on #GQuarks.
#NAME: activate-link
#PARENT: Gtk.AboutDialog.activate-link
#COMMENT: %TRUE if the link has been activated
#NAME: theme_name
#PARENT: Gtk.IconTheme.set_custom_theme.none
#COMMENT: name of icon theme to use instead of
  configured theme, or %NULL to unset a previously set custom theme
#NAME: iter
#PARENT: Gtk.TextIter.forward_find_char.gboolean
#COMMENT: a #GtkTextIter
#NAME: menu
#PARENT: Gtk.Menu.popup.none
#COMMENT: a #GtkMenu
#NAME: TextView
#PARENT: Gtk
#COMMENT: You may wish to begin by reading the
[text widget conceptual overview][TextWidget]
which gives an overview of all the objects and data
types related to the text widget and how they work together.
#NAME: widget
#PARENT: Gtk.Widget.set_valign.none
#COMMENT: a #GtkWidget
#NAME: get_wrap_width
#PARENT: Gtk.ComboBox.get_wrap_width
#COMMENT: the wrap width.
#NAME: user_data
#PARENT: Gtk.ListBox.set_header_func.none
#COMMENT: user data passed to @update_header
#NAME: get_can_default
#PARENT: Gtk.Widget.get_can_default
#COMMENT: %TRUE if @widget can be a default widget, %FALSE otherwise
#NAME: accel_mods
#PARENT: Gtk.AccelGroup.connect.none
#COMMENT: modifier combination of the accelerator
#NAME: state_value
#PARENT: Gtk.StyleContext.notify_state_change.none
#COMMENT: %TRUE if @state is the state we are changing to,
    %FALSE if we are changing away from it
#NAME: close
#PARENT: Gtk.Dialog
#COMMENT: The ::close signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user uses a keybinding to close
the dialog.

The default binding for this signal is the Escape key.
#NAME: attach_buffers
#PARENT: Gtk.GLArea
#COMMENT: Ensures that the @area framebuffer object is made the current draw
and read target, and that all the required buffers for the @area
are created and bound to the frambuffer.

This function is automatically called before emitting the
#GtkGLArea::render signal, and doesn't normally need to be called
by application code.
#NAME: name
#PARENT: Gtk.IconSize.register.gint
#COMMENT: name of the icon size
#NAME: style
#PARENT: Gtk.paint_slider.none
#COMMENT: a #GtkStyle
#NAME: file_name
#PARENT: Gtk.AccelMap.load.none
#COMMENT: a file containing accelerator specifications,
  in the GLib file name encoding
#NAME: normal
#PARENT: Gtk.ButtonRole
#COMMENT: A plain button
#NAME: entries
#PARENT: Gtk.ActionGroup.add_toggle_actions.none
#COMMENT: an array of toggle action descriptions
#NAME: get_tabs
#PARENT: Gtk.Entry.get_tabs
#COMMENT: the tabstops, or %NULL if none was set.
#NAME: set_min_content_height
#PARENT: Gtk.ScrolledWindow
#COMMENT: Sets the minimum height that @scrolled_window should keep visible.
Note that this can and (usually will) be smaller than the minimum
size of the content.
#NAME: add_from_string
#PARENT: Gtk.Builder
#COMMENT: Parses a string containing a [GtkBuilder UI definition][BUILDER-UI]
and merges it with the current contents of @builder.

Most users will probably want to use gtk_builder_new_from_string().

Upon errors 0 will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or
#G_VARIANT_PARSE_ERROR domain.

It’s not really reasonable to attempt to handle failures of this
call.  The only reasonable thing to do when an error is detected is
to call g_error().
#NAME: get_border
#PARENT: Gtk.Scrollable
#COMMENT: Returns the size of a non-scrolling border around the
outside of the scrollable. An example for this would
be treeview headers. GTK+ can use this information to
display overlayed graphics, like the overshoot indication,
at the right position.
#NAME: height
#PARENT: Gtk.render_focus.none
#COMMENT: rectangle height
#NAME: construct_child
#PARENT: Gtk.Buildable
#COMMENT: Constructs a child of @buildable with the name @name.

#GtkBuilder calls this function if a “constructor” has been
specified in the UI definition.
#NAME: set_show_hidden
#PARENT: Gtk.FileChooser
#COMMENT: Sets whether hidden files and folders are displayed in the file selector.
#NAME: get_focus_child
#PARENT: Gtk.Container
#COMMENT: Returns the current focus child widget inside @container. This is not the
currently focused widget. That can be obtained by calling
gtk_window_get_focus().
#NAME: get_monitor
#PARENT: Gtk.Menu
#COMMENT: Retrieves the number of the monitor on which to show the menu.
#NAME: toggled
#PARENT: Gtk.CheckMenuItem
#COMMENT: This signal is emitted when the state of the check box is changed.

A signal handler can use gtk_check_menu_item_get_active()
to discover the new state.
#NAME: expand
#PARENT: Gtk.Box.pack_start.none
#COMMENT: %TRUE if the new child is to be given extra space allocated
    to @box. The extra space will be divided evenly between all children
    that use this option
#NAME: get_end_iter
#PARENT: Gtk.TextBuffer
#COMMENT: Initializes @iter with the “end iterator,” one past the last valid
character in the text buffer. If dereferenced with
gtk_text_iter_get_char(), the end iterator has a character value of 0.
The entire buffer lies in the range from the first position in
the buffer (call gtk_text_buffer_get_start_iter() to get
character position 0) to the end iterator.
#NAME: convert_path_to_child_path
#PARENT: Gtk.TreeModelSort.convert_path_to_child_path
#COMMENT: A newly allocated #GtkTreePath, or %NULL
#NAME: min-value
#PARENT: Gtk.LevelBar
#COMMENT: The #GtkLevelBar:min-value property determines the minimum value of
the interval that can be displayed by the bar.
#NAME: selection_data
#PARENT: Gtk.TreeDragDestIface.row_drop_possible.row_drop_possible.gboolean
#COMMENT: the data being dragged
#NAME: widget
#PARENT: Gtk.Widget.get_margin_top.gint
#COMMENT: a #GtkWidget
#NAME: selection-clear-event
#PARENT: Gtk.Widget
#COMMENT: The ::selection-clear-event signal will be emitted when the
the @widget's window has lost ownership of a selection.
#NAME: secondary-icon-pixbuf
#PARENT: Gtk.Entry
#COMMENT: An pixbuf to use as the secondary icon for the entry.
#NAME: button
#PARENT: Gtk.ColorButton.get_rgba.none
#COMMENT: a #GtkColorButton
#NAME: IMPreeditStyle
#PARENT: Gtk
#COMMENT: Style for input method preedit. See also
#GtkSettings:gtk-im-preedit-style
#NAME: new_with_model
#PARENT: Gtk.IconView
#COMMENT: Creates a new #GtkIconView widget with the model @model.
#NAME: dir_rtl
#PARENT: Gtk.StateFlags
#COMMENT: Widget is in right-to-left text direction. Since 3.8
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_tag_table.TextTagTable
#COMMENT: a #GtkTextBuffer
#NAME: minimum-height
#PARENT: Gtk.CellAreaContext
#COMMENT: The minimum height for the #GtkCellArea in this context
for all #GtkTreeModel rows that this context was requested
for using gtk_cell_area_get_preferred_height().
#NAME: new
#PARENT: Gtk.IconSource
#COMMENT: Creates a new #GtkIconSource. A #GtkIconSource contains a #GdkPixbuf (or
image filename) that serves as the base image for one or more of the
icons in a #GtkIconSet, along with a specification for which icons in the
icon set will be based on that pixbuf or image file. An icon set contains
a set of icons that represent “the same” logical concept in different states,
different global text directions, and different sizes.

So for example a web browser’s “Back to Previous Page” icon might
point in a different direction in Hebrew and in English; it might
look different when insensitive; and it might change size depending
on toolbar mode (small/large icons). So a single icon set would
contain all those variants of the icon. #GtkIconSet contains a list
of #GtkIconSource from which it can derive specific icon variants in
the set.

In the simplest case, #GtkIconSet contains one source pixbuf from
which it derives all variants. The convenience function
gtk_icon_set_new_from_pixbuf() handles this case; if you only have
one source pixbuf, just use that function.

If you want to use a different base pixbuf for different icon
variants, you create multiple icon sources, mark which variants
they’ll be used to create, and add them to the icon set with
gtk_icon_set_add_source().

By default, the icon source has all parameters wildcarded. That is,
the icon source will be used as the base icon for any desired text
direction, widget state, or icon size.
#NAME: direction-changed
#PARENT: Gtk.Widget
#COMMENT: The ::direction-changed signal is emitted when the text direction
of a widget changes.
#NAME: path
#PARENT: Gtk.CellArea.focus-changed.none
#COMMENT: the current #GtkTreePath string set for @area
#NAME: end
#PARENT: Gtk.ButtonBoxStyle
#COMMENT: Buttons are grouped towards the end of the box,
  (on the right for a HBox, or the bottom for a VBox).
#NAME: icon_view
#PARENT: Gtk.IconView.create_drag_icon.cairo.Surface
#COMMENT: a #GtkIconView
#NAME: get_sequence_state
#PARENT: Gtk.Gesture
#COMMENT: Returns the @sequence state, as seen by @gesture.
#NAME: slide_left
#PARENT: Gtk.StackTransitionType
#COMMENT: Slide from right to left
#NAME: label
#PARENT: Gtk.StockItem
#COMMENT: User visible label.
#NAME: above
#PARENT: Gtk.TextViewLayer
#COMMENT: The layer rendered above the text.
#NAME: toggle_button
#PARENT: Gtk.ToggleButton.get_inconsistent.gboolean
#COMMENT: a #GtkToggleButton
#NAME: rect
#PARENT: Gtk.TreeView.get_background_area.none
#COMMENT: rectangle to fill with cell background rect
#NAME: ComboBox
#PARENT: Gtk
#COMMENT: A GtkComboBox is a widget that allows the user to choose from a list of
valid choices. The GtkComboBox displays the selected choice. When
activated, the GtkComboBox displays a popup which allows the user to
make a new choice. The style in which the selected value is displayed,
and the style of the popup is determined by the current theme. It may
be similar to a Windows-style combo box.

The GtkComboBox uses the model-view pattern; the list of valid choices
is specified in the form of a tree model, and the display of the choices
can be adapted to the data in the model by using cell renderers, as you
would in a tree view. This is possible since GtkComboBox implements the
#GtkCellLayout interface. The tree model holding the valid choices is
not restricted to a flat list, it can be a real tree, and the popup will
reflect the tree structure.

To allow the user to enter values not in the model, the “has-entry”
property allows the GtkComboBox to contain a #GtkEntry. This entry
can be accessed by calling gtk_bin_get_child() on the combo box.

For a simple list of textual choices, the model-view API of GtkComboBox
can be a bit overwhelming. In this case, #GtkComboBoxText offers a
simple alternative. Both GtkComboBox and #GtkComboBoxText can contain
an entry.
#NAME: ridge
#PARENT: Gtk.BorderStyle
#COMMENT: Looks as if it were coming out of the canvas
#NAME: x
#PARENT: Gtk.render_frame_gap.none
#COMMENT: X origin of the rectangle
#NAME: set_buildable_property
#PARENT: Gtk.Buildable
#COMMENT: Sets the property name @name to @value on the @buildable object.
#NAME: rc_property_parse_enum
#PARENT: Gtk.rc_property_parse_enum
#COMMENT: %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GEnumValue.
#NAME: y
#PARENT: Gtk.render_frame_gap.none
#COMMENT: Y origin of the rectangle
#NAME: row-activated
#PARENT: Gtk.TreeView
#COMMENT: The "row-activated" signal is emitted when the method
gtk_tree_view_row_activated() is called, when the user double
clicks a treeview row with the "activate-on-single-click"
property set to %FALSE, or when the user single clicks a row when
the "activate-on-single-click" property set to %TRUE. It is also
emitted when a non-editable row is selected and one of the keys:
Space, Shift+Space, Return or Enter is pressed.

For selection handling refer to the
[tree widget conceptual overview][TreeWidget]
as well as #GtkTreeSelection.
#NAME: get_receives_default
#PARENT: Gtk.Widget
#COMMENT: Determines whether @widget is always treated as the default widget
within its toplevel when it has the focus, even if another widget
is the default.

See gtk_widget_set_receives_default().
#NAME: get_accel_group
#PARENT: Gtk.Menu.get_accel_group
#COMMENT: the #GtkAccelGroup associated with the menu
#NAME: op
#PARENT: Gtk.PrintOperation.get_error.none
#COMMENT: a #GtkPrintOperation
#NAME: get_path
#PARENT: Gtk.TreeRowReference
#COMMENT: Returns a path that the row reference currently points to,
or %NULL if the path pointed to is no longer valid.
#NAME: accelerator_mods
#PARENT: Gtk.accelerator_get_label.utf8
#COMMENT: accelerator modifier mask
#NAME: get_visible
#PARENT: Gtk.CellRenderer.get_visible
#COMMENT: %TRUE if the cell renderer is visible
#NAME: stock_id
#PARENT: Gtk.IconFactory.lookup_default.IconSet
#COMMENT: an icon name
#NAME: get_tab_hborder
#PARENT: Gtk.Notebook.get_tab_hborder
#COMMENT: horizontal width of a tab border
#NAME: buffer
#PARENT: Gtk.TextBuffer.deserialize_set_can_create_tags.none
#COMMENT: a #GtkTextBuffer
#NAME: set_visible
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the visibility of @tree_column.
#NAME: text
#PARENT: Gtk.Entry.set_text.none
#COMMENT: the new text
#NAME: menu
#PARENT: Gtk.Menu.set_screen.none
#COMMENT: a #GtkMenu
#NAME: get_model
#PARENT: Gtk.TreeModelSort.get_model
#COMMENT: the "child model" being sorted
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_get_sibling_index.guint
#COMMENT: position to get the sibling index for, -1 for the path head
#NAME: get_popup
#PARENT: Gtk.MenuButton.get_popup
#COMMENT: a #GtkMenu or %NULL
#NAME: value-changed
#PARENT: Gtk.Range
#COMMENT: Emitted when the range value changes.
#NAME: active
#PARENT: Gtk.ComboBox
#COMMENT: The item which is currently active. If the model is a non-flat treemodel,
and the active item is not an immediate child of the root of the tree,
this property has the value
`gtk_tree_path_get_indices (path)[0]`,
where `path` is the #GtkTreePath of the active item.
#NAME: window
#PARENT: Gtk.Window.resize_grip_is_visible.gboolean
#COMMENT: a #GtkWindow
#NAME: context
#PARENT: Gtk.IMContext.get_surrounding.gboolean
#COMMENT: a #GtkIMContext
#NAME: 
#PARENT: Gtk.InfoBar.new_with_buttons.Widget...
#COMMENT: response ID for first button, then additional buttons, ending
   with %NULL
#NAME: set_required_version
#PARENT: Gtk.GLArea
#COMMENT: Sets the required version of OpenGL to be used when creating the context
for the widget.

This function must be called before the area has been realized.
#NAME: widget
#PARENT: Gtk.PrintOperation.update-custom-widget.none
#COMMENT: the custom widget added in create-custom-widget
#NAME: position
#PARENT: Gtk.EditableInterface.set_position.set_position.none
#COMMENT: the position of the cursor
#NAME: get_message_area
#PARENT: Gtk.MessageDialog
#COMMENT: Returns the message area of the dialog. This is the box where the
dialog’s primary and secondary labels are packed. You can add your
own extra content to that box and it will appear below those labels.
See gtk_dialog_get_content_area() for the corresponding
function in the parent #GtkDialog.
#NAME: get_select_multiple
#PARENT: Gtk.RecentChooser.get_select_multiple
#COMMENT: %TRUE if @chooser can select more than one item.
#NAME: natural_size
#PARENT: Gtk.RequestedSize
#COMMENT: The natural size for allocation in a given orientation
#NAME: natural_height
#PARENT: Gtk.Widget.get_preferred_height.none
#COMMENT: location to store the natural height, or %NULL
#NAME: widget
#PARENT: Gtk.Widget.get_scale_factor.gint
#COMMENT: a #GtkWidget
#NAME: clicked
#PARENT: Gtk.Button
#COMMENT: Emitted when the button has been activated (pressed and released).
#NAME: fontchooser
#PARENT: Gtk.FontChooser.set_preview_text.none
#COMMENT: a #GtkFontChooser
#NAME: background_area
#PARENT: Gtk.CellRendererClass.start_editing.start_editing.CellEditable
#COMMENT: background area as passed to gtk_cell_renderer_render()
#NAME: window
#PARENT: Gtk.Window.set_opacity.none
#COMMENT: a #GtkWindow
#NAME: callback_data
#PARENT: Gtk.CellArea.foreach.none
#COMMENT: user provided data pointer
#NAME: animation
#PARENT: Gtk.ImageType
#COMMENT: the widget contains a #GdkPixbufAnimation
#NAME: label
#PARENT: Gtk.RecentAction.new.Action
#COMMENT: the label displayed in menu items and on buttons,
  or %NULL
#NAME: get_targets
#PARENT: Gtk.SelectionData.get_targets
#COMMENT: %TRUE if @selection_data contains a valid
   array of targets, otherwise %FALSE.
#NAME: set
#PARENT: Gtk.AspectFrame
#COMMENT: Set parameters for an existing #GtkAspectFrame.
#NAME: arrow_type
#PARENT: Gtk.Arrow.new.Widget
#COMMENT: a valid #GtkArrowType.
#NAME: gesture
#PARENT: Gtk.GesturePan.get_orientation.Orientation
#COMMENT: A #GtkGesturePan
#NAME: populate-popup
#PARENT: Gtk.Label
#COMMENT: The ::populate-popup signal gets emitted before showing the
context menu of the label. Note that only selectable labels
have context menus.

If you need to add items to the context menu, connect
to this signal and append your menuitems to the @menu.
#NAME: get_vexpand
#PARENT: Gtk.Widget
#COMMENT: Gets whether the widget would like any available extra vertical
space.

See gtk_widget_get_hexpand() for more detail.
#NAME: menu_item
#PARENT: Gtk.MenuItem.get_submenu.Widget
#COMMENT: a #GtkMenuItem
#NAME: construct_for_display
#PARENT: Gtk.Plug
#COMMENT: Finish the initialization of @plug for a given #GtkSocket identified by
@socket_id which is currently displayed on @display.
This function will generally only be used by classes deriving from #GtkPlug.
#NAME: embedded
#PARENT: Gtk.Plug
#COMMENT: Gets emitted when the plug becomes embedded in a socket.
#NAME: get_hadjustment
#PARENT: Gtk.TextView
#COMMENT: Gets the horizontal-scrolling #GtkAdjustment.
#NAME: base_icon
#PARENT: Gtk.NumerableIcon.new_with_style_context.Gio.Icon
#COMMENT: a #GIcon to overlay on
#NAME: widget
#PARENT: Gtk.Widget.shape_combine_region.none
#COMMENT: a #GtkWidget
#NAME: show_icons
#PARENT: Gtk.RecentChooser.set_show_icons.none
#COMMENT: whether to show an icon near the resource
#NAME: stock_id
#PARENT: Gtk.StyleContext.lookup_icon_set.IconSet
#COMMENT: an icon name
#NAME: fallback
#PARENT: Gtk.TextTag
#COMMENT: Whether font fallback is enabled.

When set to %TRUE, other fonts will be substituted
where the current font is missing glyphs.
#NAME: time
#PARENT: Gtk.Widget.drag-leave.none
#COMMENT: the timestamp of the motion event
#NAME: widget_type
#PARENT: Gtk.test_find_widget.Widget
#COMMENT: Type of a aearched for label sibling widget.
#NAME: get_event_window
#PARENT: Gtk.Button
#COMMENT: Returns the button’s event window if it is realized, %NULL otherwise.
This function should be rarely needed.
#NAME: cell_background
#PARENT: Gtk.CellAllocCallback.gboolean
#COMMENT: the background area for @renderer inside the
    background area provided to gtk_cell_area_foreach_alloc().
#NAME: drag_begin_with_coordinates
#PARENT: Gtk.Widget.drag_begin_with_coordinates
#COMMENT: the context for this drag
#NAME: use_underline
#PARENT: Gtk.Expander.set_use_underline.none
#COMMENT: %TRUE if underlines in the text indicate mnemonics
#NAME: get_column_span_column
#PARENT: Gtk.ComboBox
#COMMENT: Returns the column with column span information for @combo_box.
#NAME: unit
#PARENT: Gtk.PrintSettings.get_paper_height.gdouble
#COMMENT: the unit for the return value
#NAME: title
#PARENT: Gtk.RecentChooserDialog.new.Widget
#COMMENT: Title of the dialog, or %NULL
#NAME: pos
#PARENT: Gtk.ScrolledWindow.edge-overshot.none
#COMMENT: edge side that was hit
#NAME: new
#PARENT: Gtk.HScrollbar.new
#COMMENT: the new #GtkHScrollbar
#NAME: preview
#PARENT: Gtk.PrintOperationPreview.render_page.none
#COMMENT: a #GtkPrintOperationPreview
#NAME: ToolShell
#PARENT: Gtk
#COMMENT: The #GtkToolShell interface allows container widgets to provide additional
information when embedding #GtkToolItem widgets.
#NAME: iter
#PARENT: Gtk.TreeModelIface.row_inserted.row_inserted.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the inserted row
#NAME: get_state
#PARENT: Gtk.IconSource.get_state
#COMMENT: widget state this source matches
#NAME: palette
#PARENT: Gtk.ToolPalette.get_drop_group.ToolItemGroup
#COMMENT: a #GtkToolPalette
#NAME: n_entries
#PARENT: Gtk.ActionGroup.add_actions_full.none
#COMMENT: the number of entries
#NAME: prelight
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: new
#PARENT: Gtk.TextChildAnchor
#COMMENT: Creates a new #GtkTextChildAnchor. Usually you would then insert
it into a #GtkTextBuffer with gtk_text_buffer_insert_child_anchor().
To perform the creation and insertion in one step, use the
convenience function gtk_text_buffer_create_child_anchor().
#NAME: action_group
#PARENT: Gtk.ActionGroup.add_actions_full.none
#COMMENT: the action group
#NAME: new_with_model_and_entry
#PARENT: Gtk.ComboBox
#COMMENT: Creates a new empty #GtkComboBox with an entry
and with the model initialized to @model.
#NAME: index_
#PARENT: Gtk.EntryCompletion.delete_action.none
#COMMENT: the index of the item to delete
#NAME: get_orientation
#PARENT: Gtk.PrintSettings
#COMMENT: Get the value of %GTK_PRINT_SETTINGS_ORIENTATION,
converted to a #GtkPageOrientation.
#NAME: RegionFlags
#PARENT: Gtk
#COMMENT: Describes a region within a widget.
#NAME: focus-cell
#PARENT: Gtk.CellArea
#COMMENT: The cell in the area that currently has focus
#NAME: set_padding
#PARENT: Gtk.Alignment
#COMMENT: Sets the padding on the different sides of the widget.
The padding adds blank space to the sides of the widget. For instance,
this can be used to indent the child widget towards the right by adding
padding on the left.
#NAME: context
#PARENT: Gtk.StyleContext.pop_animatable_region.none
#COMMENT: a #GtkStyleContext
#NAME: widget
#PARENT: Gtk.Widget.drag_dest_set_target_list.none
#COMMENT: a #GtkWidget that’s a drag destination
#NAME: get_tooltip_window
#PARENT: Gtk.Widget
#COMMENT: Returns the #GtkWindow of the current tooltip. This can be the
GtkWindow created by default, or the custom tooltip window set
using gtk_widget_set_tooltip_window().
#NAME: RadioAction
#PARENT: Gtk
#COMMENT: A #GtkRadioAction is similar to #GtkRadioMenuItem. A number of radio
actions can be linked together so that only one may be active at any
one time.
#NAME: get_display
#PARENT: Gtk.SelectionData.get_display
#COMMENT: the display of the selection.
#NAME: clear
#PARENT: Gtk.TreeStore
#COMMENT: Removes all rows from @tree_store
#NAME: path
#PARENT: Gtk.tree_row_reference_reordered.none
#COMMENT: the parent path of the reordered signal
#NAME: icon-name
#PARENT: Gtk.Action
#COMMENT: The name of the icon from the icon theme.

Note that the stock icon is preferred, if the #GtkAction:stock-id
property holds the id of an existing stock icon, and the #GIcon is
preferred if the #GtkAction:gicon property is set.

This is an appearance property and thus only applies if
#GtkActivatable:use-action-appearance is %TRUE.
#NAME: default_mod_mask
#PARENT: Gtk.accelerator_set_default_mod_mask.none
#COMMENT: accelerator modifier mask
#NAME: get_vadjustment
#PARENT: Gtk.Viewport.get_vadjustment
#COMMENT: the vertical adjustment of @viewport.
#NAME: count
#PARENT: Gtk.TextView.move_visually.gboolean
#COMMENT: number of characters to move (negative moves left,
   positive moves right)
#NAME: to_string
#PARENT: Gtk.WidgetPath
#COMMENT: Dumps the widget path into a string representation. It tries to match
the CSS style as closely as possible (Note that there might be paths
that cannot be represented in CSS).

The main use of this code is for debugging purposes, so that you can
g_print() the path or dump it in a gdb session.
#NAME: tooltip
#PARENT: Gtk.ToggleAction.new.ToggleAction
#COMMENT: A tooltip for the action, or %NULL
#NAME: set_has_window
#PARENT: Gtk.Widget
#COMMENT: Specifies whether @widget has a #GdkWindow of its own. Note that
all realized widgets have a non-%NULL “window” pointer
(gtk_widget_get_window() never returns a %NULL window when a widget
is realized), but for many of them it’s actually the #GdkWindow of
one of its parent widgets. Widgets that do not create a %window for
themselves in #GtkWidget::realize must announce this by
calling this function with @has_window = %FALSE.

This function should only be called by widget implementations,
and they should call it in their init() function.
#NAME: percentage
#PARENT: Gtk.test_slider_set_perc.none
#COMMENT: value between 0 and 100.
#NAME: new
#PARENT: Gtk.FontChooserWidget
#COMMENT: Creates a new #GtkFontChooserWidget.
#NAME: get_line_at_y
#PARENT: Gtk.TextView
#COMMENT: Gets the #GtkTextIter at the start of the line containing
the coordinate @y. @y is in buffer coordinates, convert from
window coordinates with gtk_text_view_window_to_buffer_coords().
If non-%NULL, @line_top will be filled with the coordinate of the top
edge of the line.
#NAME: test_display_button_window
#PARENT: Gtk.test_display_button_window
#COMMENT: a widget pointer to the newly created GtkWindow.
#NAME: adjustment
#PARENT: Gtk.Container.set_focus_vadjustment.none
#COMMENT: an adjustment which should be adjusted when the focus
  is moved among the descendents of @container
#NAME: forward_search
#PARENT: Gtk.TextIter
#COMMENT: Searches forward for @str. Any match is returned by setting
@match_start to the first character of the match and @match_end to the
first character after the match. The search will not continue past
@limit. Note that a search is a linear or O(n) operation, so you
may wish to use @limit to avoid locking up your UI on large
buffers.

@match_start will never be set to a #GtkTextIter located before @iter, even if
there is a possible @match_end after or at @iter.
#NAME: drag_data_get
#PARENT: Gtk.TreeDragSource.drag_data_get
#COMMENT: %TRUE if data of the required type was provided
#NAME: parent_class
#PARENT: Gtk.ApplicationClass
#COMMENT: The parent class.
#NAME: finishings
#PARENT: Gtk.PrintSettings.set_finishings.none
#COMMENT: the finishings
#NAME: fontset
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: expand_row
#PARENT: Gtk.TreeView
#COMMENT: Opens the row so its children are visible.
#NAME: get_filter
#PARENT: Gtk.FileChooser
#COMMENT: Gets the current filter; see gtk_file_chooser_set_filter().
#NAME: get_drag_dest_row
#PARENT: Gtk.TreeView
#COMMENT: Gets information about the row that is highlighted for feedback.
#NAME: context
#PARENT: Gtk.Widget.drag-data-delete.none
#COMMENT: the drag context
#NAME: has_context
#PARENT: Gtk.Style.has_context
#COMMENT: %TRUE if @style has a #GtkStyleContext
#NAME: area
#PARENT: Gtk.CellArea.get_cell_at_position.CellRenderer
#COMMENT: a #GtkCellArea
#NAME: cr
#PARENT: Gtk.paint_handle.none
#COMMENT: a #cairo_t
#NAME: step_right
#PARENT: Gtk.ScrollType
#COMMENT: Step to the right.
#NAME: remove_all
#PARENT: Gtk.Statusbar
#COMMENT: Forces the removal of all messages from a statusbar's
stack with the exact @context_id.
#NAME: set_default_direction
#PARENT: Gtk.Widget
#COMMENT: Sets the default reading direction for widgets where the
direction has not been explicitly set by gtk_widget_set_direction().
#NAME: accel_mods
#PARENT: Gtk.AccelMap.add_entry.none
#COMMENT: the accelerator modifiers
#NAME: value
#PARENT: Gtk.StyleContext.get_property.none
#COMMENT: return location for the style property value
#NAME: orientation
#PARENT: Gtk.render_slider.none
#COMMENT: orientation of the slider
#NAME: clamp_page
#PARENT: Gtk.Adjustment
#COMMENT: Updates the #GtkAdjustment:value property to ensure that the range
between @lower and @upper is in the current page (i.e. between
#GtkAdjustment:value and #GtkAdjustment:value + #GtkAdjustment:page_size).
If the range is larger than the page size, then only the start of it will
be in the current page.
A #GtkAdjustment::changed signal will be emitted if the value is changed.
#NAME: box
#PARENT: Gtk.FlowBox.selected_foreach.none
#COMMENT: a #GtkFlowBox
#NAME: buffer
#PARENT: Gtk.TextView.new_with_buffer.Widget
#COMMENT: a #GtkTextBuffer
#NAME: sibling
#PARENT: Gtk.Grid.insert_next_to.none
#COMMENT: the child of @grid that the new row or column will be
    placed next to
#NAME: gfile
#PARENT: Gtk.AppChooserDialog
#COMMENT: The GFile used by the #GtkAppChooserDialog.
The dialog's #GtkAppChooserWidget content type will be guessed from the
file, if present.
#NAME: style
#PARENT: Gtk.StyleClass.render_icon.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a #GtkStyle
#NAME: set_row_spacing
#PARENT: Gtk.Table
#COMMENT: Changes the space between a given table row and the subsequent row.
#NAME: group
#PARENT: Gtk.ToolItemGroup.set_item_position.none
#COMMENT: a #GtkToolItemGroup
#NAME: secondary-icon-gicon
#PARENT: Gtk.Entry
#COMMENT: The #GIcon to use for the secondary icon for the entry.
#NAME: get_page_title
#PARENT: Gtk.Assistant.get_page_title
#COMMENT: the title for @page
#NAME: container
#PARENT: Gtk.Container.set_focus_chain.none
#COMMENT: a #GtkContainer
#NAME: get_junction_sides
#PARENT: Gtk.ThemingEngine
#COMMENT: Returns the widget direction used for rendering.
#NAME: get_accept_focus
#PARENT: Gtk.Window
#COMMENT: Gets the value set by gtk_window_set_accept_focus().
#NAME: buildable
#PARENT: Gtk.BuildableIface.set_name.set_name.none
#COMMENT: a #GtkBuildable
#NAME: palette
#PARENT: Gtk.ToolPalette.set_icon_size.none
#COMMENT: a #GtkToolPalette
#NAME: label
#PARENT: Gtk.Label.get_yalign.gfloat
#COMMENT: a #GtkLabel
#NAME: default_editable
#PARENT: Gtk.TextBuffer.delete_interactive.gboolean
#COMMENT: whether the buffer is editable by default
#NAME: minimum_height
#PARENT: Gtk.CellAreaContext.push_preferred_height.none
#COMMENT: the proposed new minimum height for @context
#NAME: get_use_stock
#PARENT: Gtk.ImageMenuItem.get_use_stock
#COMMENT: %TRUE if the label set in the menuitem is used as a
    stock id to select the stock item for the item
#NAME: info
#PARENT: Gtk.RecentInfo.get_applications.utf8
#COMMENT: a #GtkRecentInfo
#NAME: get_last_event
#PARENT: Gtk.Gesture
#COMMENT: Returns the last event that was processed for @sequence.
#NAME: PaperSize
#PARENT: Gtk
#COMMENT: GtkPaperSize handles paper sizes. It uses the standard called
[PWG 5101.1-2002 PWG: Standard for Media Standardized Names](http://www.pwg.org/standards.html)
to name the paper sizes (and to get the data for the page sizes).
In addition to standard paper sizes, GtkPaperSize allows to
construct custom paper sizes with arbitrary dimensions.

The #GtkPaperSize object stores not only the dimensions (width
and height) of a paper size and its name, it also provides
default [print margins][print-margins].

Printing support has been added in GTK+ 2.10.
#NAME: ToolPalette
#PARENT: Gtk
#COMMENT: A #GtkToolPalette allows you to add #GtkToolItems to a palette-like
container with different categories and drag and drop support.

A #GtkToolPalette is created with a call to gtk_tool_palette_new().

#GtkToolItems cannot be added directly to a #GtkToolPalette -
instead they are added to a #GtkToolItemGroup which can than be added
to a #GtkToolPalette. To add a #GtkToolItemGroup to a #GtkToolPalette,
use gtk_container_add().

|[<!-- language="C" -->
GtkWidget *palette, *group;
GtkToolItem *item;

palette = gtk_tool_palette_new ();
group = gtk_tool_item_group_new (_("Test Category"));
gtk_container_add (GTK_CONTAINER (palette), group);

item = gtk_tool_button_new_new (NULL, _("_Open"));
gtk_tool_button_set_icon_name (GTK_TOOL_BUTTON (item), "document-open");
gtk_tool_item_group_insert (GTK_TOOL_ITEM_GROUP (group), item, -1);
]|

The easiest way to use drag and drop with #GtkToolPalette is to call
gtk_tool_palette_add_drag_dest() with the desired drag source @palette
and the desired drag target @widget. Then gtk_tool_palette_get_drag_item()
can be used to get the dragged item in the #GtkWidget::drag-data-received
signal handler of the drag target.

|[<!-- language="C" -->
static void
passive_canvas_drag_data_received (GtkWidget        *widget,
                                   GdkDragContext   *context,
                                   gint              x,
                                   gint              y,
                                   GtkSelectionData *selection,
                                   guint             info,
                                   guint             time,
                                   gpointer          data)
{
  GtkWidget *palette;
  GtkWidget *item;

  // Get the dragged item
  palette = gtk_widget_get_ancestor (gtk_drag_get_source_widget (context),
                                     GTK_TYPE_TOOL_PALETTE);
  if (palette != NULL)
    item = gtk_tool_palette_get_drag_item (GTK_TOOL_PALETTE (palette),
                                           selection);

  // Do something with item
}

GtkWidget *target, palette;

palette = gtk_tool_palette_new ();
target = gtk_drawing_area_new ();

g_signal_connect (G_OBJECT (target), "drag-data-received",
                  G_CALLBACK (passive_canvas_drag_data_received), NULL);
gtk_tool_palette_add_drag_dest (GTK_TOOL_PALETTE (palette), target,
                                GTK_DEST_DEFAULT_ALL,
                                GTK_TOOL_PALETTE_DRAG_ITEMS,
                                GDK_ACTION_COPY);
]|
#NAME: rect
#PARENT: Gtk.GestureMultiPress.get_area.gboolean
#COMMENT: return location for the press area
#NAME: window
#PARENT: Gtk.Window.unstick.none
#COMMENT: a #GtkWindow
#NAME: context
#PARENT: Gtk.CellAreaClass.copy_context.copy_context.CellAreaContext
#COMMENT: the #GtkCellAreaContext to copy
#NAME: new
#PARENT: Gtk.CellRendererSpin.new
#COMMENT: a new #GtkCellRendererSpin
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.iter_previous.iter_previous.gboolean
#COMMENT: a #GtkTreeModel
#NAME: widget
#PARENT: Gtk.Widget.get_preferred_height_for_width.none
#COMMENT: a #GtkWidget instance
#NAME: widget
#PARENT: Gtk.Widget.get_window.Gdk.Window
#COMMENT: a #GtkWidget
#NAME: PrintPages
#PARENT: Gtk
#COMMENT: See also gtk_print_job_set_pages()
#NAME: path
#PARENT: Gtk.TreePath.get_depth.gint
#COMMENT: a #GtkTreePath-struct
#NAME: new_text_length
#PARENT: Gtk.EditableInterface.do_insert_text.do_insert_text.none
#COMMENT: the length of the text in bytes, or -1
#NAME: get_valist
#PARENT: Gtk.StyleContext
#COMMENT: Retrieves several style property values from @context for a given state.
#NAME: set_placeholder_text
#PARENT: Gtk.Entry
#COMMENT: Sets text to be displayed in @entry when it is empty and unfocused.
This can be used to give a visual hint of the expected contents of
the #GtkEntry.

Note that since the placeholder text gets removed when the entry
received focus, using this feature is a bit problematic if the entry
is given the initial focus in a window. Sometimes this can be
worked around by delaying the initial focus setting until the
first key event arrives.
#NAME: event
#PARENT: Gtk.Entry.im_context_filter_keypress.gboolean
#COMMENT: the key event
#NAME: property_value
#PARENT: Gtk.RcProperty.parse_color.gboolean
#COMMENT: a #GValue which must hold #GdkColor values.
#NAME: ring_width
#PARENT: Gtk.HSV.set_metrics.none
#COMMENT: Width of the hue ring
#NAME: drag-action-requested
#PARENT: Gtk.PlacesSidebar.drag-action-requested
#COMMENT: The drag action to use, for example, #GDK_ACTION_COPY
or #GDK_ACTION_MOVE, or 0 if no action is allowed here (i.e. drops
are not allowed in the specified @dest_file).
#NAME: iter
#PARENT: Gtk.TextBuffer.get_iter_at_line.none
#COMMENT: iterator to initialize
#NAME: minimum_width
#PARENT: Gtk.CellAreaContext.get_preferred_width.none
#COMMENT: location to store the minimum width,
    or %NULL
#NAME: handle_border_width
#PARENT: Gtk.ContainerClass
#COMMENT: Modifies a subclass of #GtkContainerClass to automatically add and
remove the border-width setting on GtkContainer.  This allows the
subclass to ignore the border width in its size request and
allocate methods. The intent is for a subclass to invoke this
in its class_init function.

gtk_container_class_handle_border_width() is necessary because it
would break API too badly to make this behavior the default. So
subclasses must “opt in” to the parent class handling border_width
for them.
#NAME: menu_shell
#PARENT: Gtk.MenuShell.select_first.none
#COMMENT: a #GtkMenuShell
#NAME: popup_for_device
#PARENT: Gtk.ComboBox
#COMMENT: Pops up the menu or dropdown list of @combo_box, the popup window
will be grabbed so only @device and its associated pointer/keyboard
are the only #GdkDevices able to send events to it.
#NAME: ArrowPlacement
#PARENT: Gtk
#COMMENT: Used to specify the placement of scroll arrows in scrolling menus.
#NAME: natural_size
#PARENT: Gtk.CellRendererClass.get_preferred_height.get_preferred_height.none
#COMMENT: location to store the natural size, or %NULL
#NAME: landscape
#PARENT: Gtk.PageOrientation
#COMMENT: Landscape mode.
#NAME: window
#PARENT: Gtk.Window.get_hide_titlebar_when_maximized.gboolean
#COMMENT: a #GtkWindow
#NAME: area
#PARENT: Gtk.GLArea.get_has_stencil_buffer.gboolean
#COMMENT: a #GtkGLArea
#NAME: pack_type
#PARENT: Gtk.Notebook.get_action_widget.Widget
#COMMENT: pack type of the action widget to receive
#NAME: get_transition_duration
#PARENT: Gtk.Revealer.get_transition_duration
#COMMENT: the transition duration
#NAME: set_use_alpha
#PARENT: Gtk.ColorButton
#COMMENT: Sets whether or not the color button should use the alpha channel.
#NAME: xpad
#PARENT: Gtk.CellRenderer.get_padding.none
#COMMENT: location to fill in with the x padding of the cell, or %NULL
#NAME: inserted
#PARENT: Gtk.TreeRowReference
#COMMENT: Lets a set of row reference created by
gtk_tree_row_reference_new_proxy() know that the
model emitted the #GtkTreeModel::row-inserted signal.
#NAME: widget
#PARENT: Gtk.Widget.set_allocation.none
#COMMENT: a #GtkWidget
#NAME: get_response_for_widget
#PARENT: Gtk.Dialog
#COMMENT: Gets the response id of a widget in the action area
of a dialog.
#NAME: first_property_name
#PARENT: Gtk.TextBuffer.create_tag.TextTag
#COMMENT: name of first property to set, or %NULL
#NAME: get_margin_top
#PARENT: Gtk.Widget.get_margin_top
#COMMENT: The top margin of @widget
#NAME: new
#PARENT: Gtk.ActionBar.new
#COMMENT: a new #GtkActionBar
#NAME: backward_line
#PARENT: Gtk.TextIter.backward_line
#COMMENT: whether @iter moved
#NAME: internal_child
#PARENT: Gtk.WidgetClass.bind_template_child_full.none
#COMMENT: Whether the child should be accessible as an “internal-child”
                 when this class is used in GtkBuilder XML
#NAME: widget_type
#PARENT: Gtk.test_create_widget.Widget
#COMMENT: a valid widget type.
#NAME: x
#PARENT: Gtk.Gesture.get_bounding_box_center.gboolean
#COMMENT: X coordinate for the bounding box center
#NAME: about
#PARENT: Gtk.AboutDialog.set_comments.none
#COMMENT: a #GtkAboutDialog
#NAME: ListBoxCreateWidgetFunc
#PARENT: Gtk
#COMMENT: Called for list boxes that are bound to a #GListModel with
gtk_list_box_bind_model() for each item that gets added to the model.
#NAME: origin
#PARENT: Gtk.SettingsValue
#COMMENT: Origin should be something like “filename:linenumber” for
   rc files, or e.g. “XProperty” for other sources.
#NAME: iter
#PARENT: Gtk.TreeModelIface.row_has_child_toggled.row_has_child_toggled.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the changed row
#NAME: get_response_for_widget
#PARENT: Gtk.Dialog.get_response_for_widget
#COMMENT: the response id of @widget, or %GTK_RESPONSE_NONE
 if @widget doesn’t have a response id set.
#NAME: y
#PARENT: Gtk.Gesture.get_bounding_box_center.gboolean
#COMMENT: Y coordinate for the bounding box center
#NAME: wrap
#PARENT: Gtk.Label.set_line_wrap.none
#COMMENT: the setting
#NAME: show-progress
#PARENT: Gtk.PrintOperation
#COMMENT: Determines whether to show a progress dialog during the
print operation.
#NAME: iter
#PARENT: Gtk.TextIter.get_buffer.TextBuffer
#COMMENT: an iterator
#NAME: free
#PARENT: Gtk.TreePath
#COMMENT: Frees @path. If @path is %NULL, it simply returns.
#NAME: inline_selection
#PARENT: Gtk.EntryCompletion.set_inline_selection.none
#COMMENT: %TRUE to do inline selection
#NAME: completion
#PARENT: Gtk.EntryCompletion.set_popup_completion.none
#COMMENT: a #GtkEntryCompletion
#NAME: new
#PARENT: Gtk.StatusIcon.new
#COMMENT: a new #GtkStatusIcon
#NAME: get_add_tearoffs
#PARENT: Gtk.ComboBox.get_add_tearoffs
#COMMENT: the current value of the :add-tearoffs property.
#NAME: tree_set_row_drag_data
#PARENT: Gtk
#COMMENT: Sets selection data of target type %GTK_TREE_MODEL_ROW. Normally used
in a drag_data_get handler.
#NAME: get_child_non_homogeneous
#PARENT: Gtk.ButtonBox.get_child_non_homogeneous
#COMMENT: %TRUE if the child is not subject to homogenous sizing
#NAME: get_file
#PARENT: Gtk.CssSection
#COMMENT: Gets the file that @section was parsed from. If no such file exists,
for example because the CSS was loaded via
@gtk_css_provider_load_from_data(), then %NULL is returned.
#NAME: context
#PARENT: Gtk.CellAreaContext.reset.none
#COMMENT: a #GtkCellAreaContext
#NAME: is_sensitive
#PARENT: Gtk.Action
#COMMENT: Returns whether the action is effectively sensitive.
#NAME: set_header_relief
#PARENT: Gtk.ToolItemGroup
#COMMENT: Set the button relief of the group header.
See gtk_button_set_relief() for details.
#NAME: new
#PARENT: Gtk.ButtonBox
#COMMENT: Creates a new #GtkButtonBox.
#NAME: value
#PARENT: Gtk.Scale.format-value.utf8
#COMMENT: the value to format
#NAME: get_homogeneous
#PARENT: Gtk.Box
#COMMENT: Returns whether the box is homogeneous (all children are the
same size). See gtk_box_set_homogeneous().
#NAME: acceleratable
#PARENT: Gtk.AccelGroup.accel-activate.gboolean
#COMMENT: the object on which the accelerator was activated
#NAME: Spinner
#PARENT: Gtk
#COMMENT: A GtkSpinner widget displays an icon-size spinning animation.
It is often used as an alternative to a #GtkProgressBar for
displaying indefinite activity, instead of actual progress.

To start the animation, use gtk_spinner_start(), to stop it
use gtk_spinner_stop().
#NAME: get_submenu
#PARENT: Gtk.MenuItem
#COMMENT: Gets the submenu underneath this menu item, if any.
See gtk_menu_item_set_submenu().
#NAME: get_hadjustment
#PARENT: Gtk.TreeView
#COMMENT: Gets the #GtkAdjustment currently being used for the horizontal aspect.
#NAME: expand
#PARENT: Gtk.CellAreaBox.pack_start.none
#COMMENT: whether @renderer should receive extra space when the area receives
more than its natural size
#NAME: settings
#PARENT: Gtk.PrintSettings.load_key_file.gboolean
#COMMENT: a #GtkPrintSettings
#NAME: item
#PARENT: Gtk.SeparatorToolItem.set_draw.none
#COMMENT: a #GtkSeparatorToolItem
#NAME: set_label
#PARENT: Gtk.MenuItem
#COMMENT: Sets @text on the @menu_item label
#NAME: get_show_recommended
#PARENT: Gtk.AppChooserWidget
#COMMENT: Returns the current value of the #GtkAppChooserWidget:show-recommended
property.
#NAME: FileFilterFunc
#PARENT: Gtk.FileFilterFunc
#COMMENT: %TRUE if the file should be displayed
#NAME: selection
#PARENT: Gtk.selection_clear_targets.none
#COMMENT: an atom representing a selection
#NAME: auto_render
#PARENT: Gtk.GLArea.set_auto_render.none
#COMMENT: a boolean
#NAME: adjustment
#PARENT: Gtk.Adjustment.set_value.none
#COMMENT: a #GtkAdjustment.
#NAME: context
#PARENT: Gtk.CellArea.render.none
#COMMENT: the #GtkCellAreaContext for this row of data.
#NAME: action_name
#PARENT: Gtk.Actionable.set_action_name.none
#COMMENT: an action name, or %NULL
#NAME: set_filename
#PARENT: Gtk.FileChooser.set_filename
#COMMENT: Not useful.
#NAME: pspec
#PARENT: Gtk.RcProperty.parse_border.gboolean
#COMMENT: a #GParamSpec
#NAME: set_search_entry
#PARENT: Gtk.TreeView
#COMMENT: Sets the entry which the interactive search code will use for this
@tree_view.  This is useful when you want to provide a search entry
in our interface at all time at a fixed position.  Passing %NULL for
@entry will make the interactive search code use the built-in popup
entry again.
#NAME: unrealize
#PARENT: Gtk.Widget
#COMMENT: The ::unrealize signal is emitted when the #GdkWindow associated with
@widget is destroyed, which means that gtk_widget_unrealize() has been
called or the widget has been unmapped (that is, it is going to be
hidden).
#NAME: get_show_style
#PARENT: Gtk.FontButton
#COMMENT: Returns whether the name of the font style will be shown in the label.
#NAME: action
#PARENT: Gtk.Action.get_icon_name.utf8
#COMMENT: a #GtkAction
#NAME: n_chars
#PARENT: Gtk.IMContext.delete-surrounding.gboolean
#COMMENT: the number of characters to be deleted
#NAME: property
#PARENT: Gtk.StyleContext.get_property.none
#COMMENT: style property name
#NAME: get_paste_target_list
#PARENT: Gtk.TextBuffer
#COMMENT: This function returns the list of targets this text buffer supports
for pasting and as DND destination. The targets in the list are
added with @info values from the #GtkTextBufferTargetInfo enum,
using gtk_target_list_add_rich_text_targets() and
gtk_target_list_add_text_targets().
#NAME: get_has_depth_buffer
#PARENT: Gtk.GLArea.get_has_depth_buffer
#COMMENT: %TRUE if the @area has a depth buffer, %FALSE otherwise
#NAME: min
#PARENT: Gtk.SpinButton.set_range.none
#COMMENT: minimum allowable value
#NAME: STOCK_JUMP_TO
#PARENT: Gtk
#COMMENT: The “Jump to” item and icon. The icon has an RTL variant.
#NAME: widget
#PARENT: Gtk.Widget.is_ancestor.gboolean
#COMMENT: a #GtkWidget
#NAME: popup
#PARENT: Gtk.Entry.populate-popup.none
#COMMENT: the container that is being populated
#NAME: get_angle_delta
#PARENT: Gtk.GestureRotate
#COMMENT: If @gesture is active, this function returns the angle difference
in radians since the gesture was first recognized. If @gesture is
not active, 0 is returned.
#NAME: get_visible
#PARENT: Gtk.Action.get_visible
#COMMENT: %TRUE if the action itself is visible.
#NAME: key
#PARENT: Gtk.PrintSettings.has_key.gboolean
#COMMENT: a key
#NAME: signal_id
#PARENT: Gtk.Widget.can-activate-accel.gboolean
#COMMENT: the ID of a signal installed on @widget
#NAME: remove_column
#PARENT: Gtk.Grid
#COMMENT: Removes a column from the grid.

Children that are placed in this column are removed,
spanning children that overlap this column have their
width reduced by one, and children after the column
are moved to the left.
#NAME: move_item
#PARENT: Gtk.RecentManager.move_item
#COMMENT: %TRUE on success
#NAME: size_changed
#PARENT: Gtk.TextTagTable.tag-changed.none
#COMMENT: whether the size has been changed.
#NAME: get_relief_style
#PARENT: Gtk.ToolShellIface.get_relief_style.get_relief_style
#COMMENT: The relief style of buttons on @shell.
#NAME: always-show-image
#PARENT: Gtk.ImageMenuItem
#COMMENT: If %TRUE, the menu item will always show the image, if available.

Use this property only if the menuitem would be useless or hard to use
without the image.
#NAME: setup
#PARENT: Gtk.PageSetup.set_paper_size.none
#COMMENT: a #GtkPageSetup
#NAME: screen
#PARENT: Gtk.Settings.get_for_screen.Settings
#COMMENT: a #GdkScreen.
#NAME: shadow_type
#PARENT: Gtk.paint_arrow.none
#COMMENT: the type of shadow to draw
#NAME: cr
#PARENT: Gtk.render_icon_surface.none
#COMMENT: a #cairo_t
#NAME: action
#PARENT: Gtk.Action.disconnect_accelerator.none
#COMMENT: a #GtkAction
#NAME: text_view
#PARENT: Gtk.TextView.get_vadjustment.Adjustment
#COMMENT: a #GtkTextView
#NAME: binding_args
#PARENT: Gtk.binding_entry_add_signall.none
#COMMENT: 
    list of #GtkBindingArg signal arguments
#NAME: get_pixels_above_lines
#PARENT: Gtk.TextView
#COMMENT: Gets the default number of pixels to put above paragraphs.
#NAME: right-padding
#PARENT: Gtk.Alignment
#COMMENT: The padding to insert at the right of the widget.
#NAME: self
#PARENT: Gtk.LevelBar.get_offset_value.gboolean
#COMMENT: a #GtkLevelBar
#NAME: iter
#PARENT: Gtk.ListStore.remove.gboolean
#COMMENT: A valid #GtkTreeIter
#NAME: no_fallback
#PARENT: Gtk.TextAttributes
#COMMENT: Whether to disable font fallback.
#NAME: height
#PARENT: Gtk.Widget.get_preferred_width_for_height.none
#COMMENT: the height which is available for allocation
#NAME: screen
#PARENT: Gtk.IconTheme.get_for_screen.IconTheme
#COMMENT: a #GdkScreen
#NAME: user_data
#PARENT: Gtk.StatusIcon.position_menu.none
#COMMENT: the status icon to position the menu on
#NAME: path
#PARENT: Gtk.WidgetPath.length.gint
#COMMENT: a #GtkWidgetPath
#NAME: INTERFACE_AGE
#PARENT: Gtk
#COMMENT: Like gtk_get_interface_age(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
#NAME: context
#PARENT: Gtk.CellArea.get_preferred_width_for_height.none
#COMMENT: the #GtkCellAreaContext which has already been requested for widths.
#NAME: top
#PARENT: Gtk.PrintContext.get_hard_margins.gboolean
#COMMENT: top hardware printer margin
#NAME: STYLE_PROPERTY_PADDING
#PARENT: Gtk
#COMMENT: A property holding the rendered element’s padding as a #GtkBorder. The
padding is defined as the spacing between the inner part of the element border
and its child. It’s the innermost spacing property of the padding/border/margin
series.
#NAME: button
#PARENT: Gtk.Button.get_label.utf8
#COMMENT: a #GtkButton
#NAME: btlr
#PARENT: Gtk.NumberUpLayout
#COMMENT: ![](layout-btlr.png)
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.set_shadow_type.none
#COMMENT: a #GtkScrolledWindow
#NAME: iter
#PARENT: Gtk.TextIter.backward_to_tag_toggle.gboolean
#COMMENT: a #GtkTextIter
#NAME: new_from_indices
#PARENT: Gtk.TreePath.new_from_indices
#COMMENT: A newly created #GtkTreePath-struct
#NAME: ClipboardURIReceivedFunc
#PARENT: Gtk
#COMMENT: A function to be called when the results of
gtk_clipboard_request_uris() are received, or when the request
fails.
#NAME: mnemonic_activate
#PARENT: Gtk.Window
#COMMENT: Activates the targets associated with the mnemonic.
#NAME: get_label_fill
#PARENT: Gtk.Expander.get_label_fill
#COMMENT: %TRUE if the label widget will fill all
    available horizontal space
#NAME: STYLE_CLASS_LEFT
#PARENT: Gtk
#COMMENT: A CSS class to indicate an area at the left of a widget.

This is used by widgets that can render an area in different
positions, such as tabs in a #GtkNotebook.
#NAME: done
#PARENT: Gtk.PrintOperation
#COMMENT: Emitted when the print operation run has finished doing
everything required for printing.

@result gives you information about what happened during the run.
If @result is %GTK_PRINT_OPERATION_RESULT_ERROR then you can call
gtk_print_operation_get_error() for more information.

If you enabled print status tracking then
gtk_print_operation_is_finished() may still return %FALSE
after #GtkPrintOperation::done was emitted.
#NAME: get_attributes
#PARENT: Gtk.Label.get_attributes
#COMMENT: the attribute list, or %NULL
    if none was set.
#NAME: new_from_stock
#PARENT: Gtk.MenuToolButton.new_from_stock
#COMMENT: the new #GtkMenuToolButton
#NAME: state
#PARENT: Gtk.StyleProperties.unset_property.none
#COMMENT: state to unset
#NAME: parent
#PARENT: Gtk.TreeModel.iter_nth_child.gboolean
#COMMENT: the #GtkTreeIter-struct to get the child from, or %NULL.
#NAME: set_shadow_type
#PARENT: Gtk.Viewport
#COMMENT: Sets the shadow type of the viewport.
#NAME: select_month
#PARENT: Gtk.Calendar
#COMMENT: Shifts the calendar to a different month.
#NAME: mark
#PARENT: Gtk.TextMark.get_visible.gboolean
#COMMENT: a #GtkTextMark
#NAME: set_previous_alpha
#PARENT: Gtk.ColorSelection
#COMMENT: Sets the “previous” alpha to be @alpha.

This function should be called with some hesitations,
as it might seem confusing to have that alpha change.
#NAME: tree_model
#PARENT: Gtk.TreeViewColumn.cell_set_cell_data.none
#COMMENT: The #GtkTreeModel to to get the cell renderers attributes from.
#NAME: box
#PARENT: Gtk.Box.set_homogeneous.none
#COMMENT: a #GtkBox
#NAME: get_icon_pixbuf
#PARENT: Gtk.Entry.get_icon_pixbuf
#COMMENT: A #GdkPixbuf, or %NULL if no icon is
    set for this position.
#NAME: iter
#PARENT: Gtk.ListStore.move_before.none
#COMMENT: A #GtkTreeIter.
#NAME: actions
#PARENT: Gtk.PlacesSidebar.drag-action-ask.gint
#COMMENT: Possible drag actions that need to be asked for.
#NAME: has_class
#PARENT: Gtk.StyleContext.has_class
#COMMENT: %TRUE if @context has @class_name defined
#NAME: width
#PARENT: Gtk.TreeViewColumn.cell_get_position.gboolean
#COMMENT: return location for the width of @cell,
        may be %NULL
#NAME: detail
#PARENT: Gtk.paint_layout.none
#COMMENT: a style detail
#NAME: window
#PARENT: Gtk.Application.remove_window.none
#COMMENT: a #GtkWindow
#NAME: targets_include_uri
#PARENT: Gtk.SelectionData
#COMMENT: Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide a list or URIs.
#NAME: rc_find_module_in_path
#PARENT: Gtk.rc_find_module_in_path
#COMMENT: The filename, if found (must be
  freed with g_free()), otherwise %NULL.
#NAME: get_has_subtitle
#PARENT: Gtk.HeaderBar.get_has_subtitle
#COMMENT: %TRUE if the header bar reserves space
    for a subtitle
#NAME: new
#PARENT: Gtk.ColorChooserWidget
#COMMENT: Creates a new #GtkColorChooserWidget.
#NAME: manager
#PARENT: Gtk.RecentManager.get_items.RecentInfo
#COMMENT: a #GtkRecentManager
#NAME: get_max_width_chars
#PARENT: Gtk.Entry
#COMMENT: Retrieves the desired maximum width of @entry, in characters.
See gtk_entry_set_max_width_chars().
#NAME: label
#PARENT: Gtk.Label.set_yalign.none
#COMMENT: a #GtkLabel
#NAME: stock_id
#PARENT: Gtk.RadioToolButton.new_from_stock.ToolItem
#COMMENT: the name of a stock item
#NAME: PrintSettings
#PARENT: Gtk
#COMMENT: A GtkPrintSettings object represents the settings of a print dialog in
a system-independent way. The main use for this object is that once
you’ve printed you can get a settings object that represents the settings
the user chose, and the next time you print you can pass that object in so
that the user doesn’t have to re-set all his settings.

Its also possible to enumerate the settings so that you can easily save
the settings for the next time your app runs, or even store them in a
document. The predefined keys try to use shared values as much as possible
so that moving such a document between systems still works.

Printing support was added in GTK+ 2.10.
#NAME: STYLE_CLASS_SLIDER
#PARENT: Gtk
#COMMENT: A CSS class to match sliders.

This is used by #GtkSwitch and #GtkRange and its subclasses.
#NAME: set_preview_text
#PARENT: Gtk.FontSelectionDialog
#COMMENT: Sets the text displayed in the preview area.
#NAME: forward_visible_word_ends
#PARENT: Gtk.TextIter.forward_visible_word_ends
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: get_relief_style
#PARENT: Gtk.ToolItem
#COMMENT: Returns the relief style of @tool_item. See gtk_button_set_relief().
Custom subclasses of #GtkToolItem should call this function in the handler
of the #GtkToolItem::toolbar_reconfigured signal to find out the
relief style of buttons.
#NAME: unmap-event
#PARENT: Gtk.Widget.unmap-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: context
#PARENT: Gtk.render_frame.none
#COMMENT: a #GtkStyleContext
#NAME: set_position
#PARENT: Gtk.Editable
#COMMENT: Sets the cursor position in the editable to the given value.

The cursor is displayed before the character with the given (base 0)
index in the contents of the editable. The value must be less than or
equal to the number of characters in the editable. A value of -1
indicates that the position should be set after the last character
of the editable. Note that @position is in characters, not in bytes.
#NAME: natural_size
#PARENT: Gtk.CellRenderer.get_preferred_width.none
#COMMENT: location to store the natural size, or %NULL
#NAME: get_icon_storage_type
#PARENT: Gtk.Entry.get_icon_storage_type
#COMMENT: image representation being used
#NAME: get_item_position
#PARENT: Gtk.ToolItemGroup
#COMMENT: Gets the position of @item in @group as index.
#NAME: get_current_uri
#PARENT: Gtk.RecentChooser.get_current_uri
#COMMENT: a newly allocated string holding a URI.
#NAME: size_group
#PARENT: Gtk.SizeGroup.add_widget.none
#COMMENT: a #GtkSizeGroup
#NAME: margin
#PARENT: Gtk.Widget.set_margin_left.none
#COMMENT: the left margin
#NAME: font-set
#PARENT: Gtk.FontButton
#COMMENT: The ::font-set signal is emitted when the user selects a font.
When handling this signal, use gtk_font_button_get_font_name()
to find out which font was just selected.

Note that this signal is only emitted when the user
changes the font. If you need to react to programmatic font changes
as well, use the notify::font-name signal.
#NAME: min-content-width
#PARENT: Gtk.ScrolledWindow
#COMMENT: The minimum content width of @scrolled_window, or -1 if not set.
#NAME: cell
#PARENT: Gtk.TreeViewColumn.new_with_attributes.TreeViewColumn
#COMMENT: The #GtkCellRenderer
#NAME: non_homogeneous
#PARENT: Gtk.ButtonBox.set_child_non_homogeneous.none
#COMMENT: the new value
#NAME: closure
#PARENT: Gtk.AccelGroup.disconnect.gboolean
#COMMENT: the closure to remove from this accelerator
    group, or %NULL to remove all closures
#NAME: size_group
#PARENT: Gtk.SizeGroup.get_ignore_hidden.gboolean
#COMMENT: a #GtkSizeGroup
#NAME: get_visible
#PARENT: Gtk.StatusIcon.get_visible
#COMMENT: %TRUE if the status icon is visible
#NAME: select-all
#PARENT: Gtk.ListBox
#COMMENT: The ::select-all signal is a [keybinding signal][GtkBindingSignal]
which gets emitted to select all children of the box, if the selection
mode permits it.

The default bindings for this signal is Ctrl-a.
#NAME: buffer
#PARENT: Gtk.TextBuffer.insert_with_tags.none
#COMMENT: a #GtkTextBuffer
#NAME: child
#PARENT: Gtk.TreeModel.iter_parent.gboolean
#COMMENT: the #GtkTreeIter-struct
#NAME: path
#PARENT: Gtk.WidgetPath.iter_has_qname.gboolean
#COMMENT: a #GtkWidgetPath
#NAME: x
#PARENT: Gtk.paint_flat_box.none
#COMMENT: x origin of the box
#NAME: new
#PARENT: Gtk.Grid
#COMMENT: Creates a new grid widget.
#NAME: icon_pos
#PARENT: Gtk.Entry.get_icon_activatable.gboolean
#COMMENT: Icon position
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_sort_column_id.none
#COMMENT: a #GtkTreeViewColumn
#NAME: y
#PARENT: Gtk.paint_flat_box.none
#COMMENT: y origin of the box
#NAME: get_preview_entry
#PARENT: Gtk.FontSelection.get_preview_entry
#COMMENT: A #GtkWidget that is part of @fontsel
#NAME: show_desktop
#PARENT: Gtk.PlacesSidebar.set_show_desktop.none
#COMMENT: whether to show an item for the Desktop folder
#NAME: get_pointer
#PARENT: Gtk.Widget
#COMMENT: Obtains the location of the mouse pointer in widget coordinates.
Widget coordinates are a bit odd; for historical reasons, they are
defined as @widget->window coordinates for widgets that return %TRUE for
gtk_widget_get_has_window(); and are relative to @widget->allocation.x,
@widget->allocation.y otherwise.
#NAME: mime_type
#PARENT: Gtk.FileFilterInfo
#COMMENT: the mime type of the file
#NAME: fontsel
#PARENT: Gtk.FontSelection.get_family.Pango.FontFamily
#COMMENT: a #GtkFontSelection
#NAME: new
#PARENT: Gtk.MenuBar
#COMMENT: Creates a new #GtkMenuBar
#NAME: manager
#PARENT: Gtk.UIManager.get_action_groups.ActionGroup
#COMMENT: a #GtkUIManager object
#NAME: expander
#PARENT: Gtk.Expander.get_label_widget.Widget
#COMMENT: a #GtkExpander
#NAME: context
#PARENT: Gtk.CellAreaClass.render.render.none
#COMMENT: the #GtkCellAreaContext for this row of data.
#NAME: get_permission
#PARENT: Gtk.LockButton.get_permission
#COMMENT: the #GPermission of @button
#NAME: disconnect_key
#PARENT: Gtk.AccelGroup
#COMMENT: Removes an accelerator previously installed through
gtk_accel_group_connect().
#NAME: icon_view
#PARENT: Gtk.IconView.get_dest_item_at_pos.gboolean
#COMMENT: a #GtkIconView
#NAME: set_position
#PARENT: Gtk.Paned
#COMMENT: Sets the position of the divider between the two panes.
#NAME: none
#PARENT: Gtk.ResponseType
#COMMENT: Returned if an action widget has no response id,
    or if the dialog gets programmatically hidden or destroyed
#NAME: selection_add_target
#PARENT: Gtk
#COMMENT: Appends a specified target to the list of supported targets for a
given widget and selection.
#NAME: stock_add
#PARENT: Gtk
#COMMENT: Registers each of the stock items in @items. If an item already
exists with the same stock ID as one of the @items, the old item
gets replaced. The stock items are copied, so GTK+ does not hold
any pointer into @items and @items can be freed. Use
gtk_stock_add_static() if @items is persistent and GTK+ need not
copy the array.
#NAME: GestureRotate
#PARENT: Gtk
#COMMENT: #GtkGestureRotate is a #GtkGesture implementation able to recognize
2-finger rotations, whenever the angle between both handled sequences
changes, the #GtkGestureRotate::angle-changed signal is emitted.
#NAME: get_focus_cell
#PARENT: Gtk.CellArea
#COMMENT: Retrieves the currently focused cell for @area
#NAME: context
#PARENT: Gtk.StyleContext.save.none
#COMMENT: a #GtkStyleContext
#NAME: is_drawable
#PARENT: Gtk.Widget.is_drawable
#COMMENT: %TRUE if @widget is drawable, %FALSE otherwise
#NAME: set_screen
#PARENT: Gtk.Window
#COMMENT: Sets the #GdkScreen where the @window is displayed; if
the window is already mapped, it will be unmapped, and
then remapped on the new screen.
#NAME: new
#PARENT: Gtk.Application
#COMMENT: Creates a new #GtkApplication instance.

When using #GtkApplication, it is not necessary to call gtk_init()
manually. It is called as soon as the application gets registered as
the primary instance.

Concretely, gtk_init() is called in the default handler for the
#GApplication::startup signal. Therefore, #GtkApplication subclasses should
chain up in their #GApplication::startup handler before using any GTK+ API.

Note that commandline arguments are not passed to gtk_init().
All GTK+ functionality that is available via commandline arguments
can also be achieved by setting suitable environment variables
such as `G_DEBUG`, so this should not be a big
problem. If you absolutely must support GTK+ commandline arguments,
you can explicitly call gtk_init() before creating the application
instance.

If non-%NULL, the application ID must be valid.  See
g_application_id_is_valid().

If no application ID is given then some features (most notably application
uniqueness) will be disabled. A null application ID is only allowed with
GTK+ 3.6 or later.
#NAME: gtk-long-press-time
#PARENT: Gtk.Settings
#COMMENT: The time for a button or touch press to be considered a "long press".
#NAME: stack
#PARENT: Gtk.Stack.get_child_by_name.Widget
#COMMENT: a #GtkStack
#NAME: name
#PARENT: Gtk.SymbolicColor.new_name.SymbolicColor
#COMMENT: color name
#NAME: window
#PARENT: Gtk.Window.activate_key.gboolean
#COMMENT: a #GtkWindow
#NAME: targets_include_image
#PARENT: Gtk
#COMMENT: Determines if any of the targets in @targets can be used to
provide a #GdkPixbuf.
#NAME: context
#PARENT: Gtk.StyleContext.get.none
#COMMENT: a #GtkStyleContext
#NAME: buffer
#PARENT: Gtk.TextBuffer.add_selection_clipboard.none
#COMMENT: a #GtkTextBuffer
#NAME: new_with_mnemonic
#PARENT: Gtk.Button
#COMMENT: Creates a new #GtkButton containing a label.
If characters in @label are preceded by an underscore, they are underlined.
If you need a literal underscore character in a label, use “__” (two
underscores). The first underlined character represents a keyboard
accelerator called a mnemonic.
Pressing Alt and that key activates the button.
#NAME: set_tooltip_cell
#PARENT: Gtk.IconView
#COMMENT: Sets the tip area of @tooltip to the area which @cell occupies in
the item pointed to by @path. See also gtk_tooltip_set_tip_area().

See also gtk_icon_view_set_tooltip_column() for a simpler alternative.
#NAME: get_for_attach_widget
#PARENT: Gtk.Menu.get_for_attach_widget
#COMMENT: the list
    of menus attached to his widget.
#NAME: focus
#PARENT: Gtk.CellArea.focus
#COMMENT: %TRUE if focus remains inside @area as a result of this call.
#NAME: editable
#PARENT: Gtk.Editable.insert_text.none
#COMMENT: a #GtkEditable
#NAME: flags
#PARENT: Gtk.StyleContext.add_region.none
#COMMENT: flags that apply to the region
#NAME: get_user_data
#PARENT: Gtk.TreeSelection
#COMMENT: Returns the user data for the selection function.
#NAME: label
#PARENT: Gtk.ActionEntry
#COMMENT: The label for the action. This field should typically be marked
 for translation, see gtk_action_group_set_translation_domain(). If
 @label is %NULL, the label of the stock item with id @stock_id is used.
#NAME: clipboard
#PARENT: Gtk.Clipboard.wait_for_rich_text.guint8
#COMMENT: a #GtkClipboard
#NAME: value
#PARENT: Gtk.SettingsValue
#COMMENT: Valid types are LONG, DOUBLE and STRING corresponding to
   the token parsed, or a GSTRING holding an unparsed statement
#NAME: set_text
#PARENT: Gtk.TextBuffer
#COMMENT: Deletes current contents of @buffer, and inserts @text instead. If
@len is -1, @text must be nul-terminated. @text must be valid UTF-8.
#NAME: LevelBar
#PARENT: Gtk
#COMMENT: The #GtkLevelBar is a bar widget that can be used
as a level indicator. Typical use cases are displaying the strength
of a password, or showing the charge level of a battery.

Use gtk_level_bar_set_value() to set the current value, and
gtk_level_bar_add_offset_value() to set the value offsets at which
the bar will be considered in a different state. GTK will add two offsets
by default on the level bar: #GTK_LEVEL_BAR_OFFSET_LOW and
#GTK_LEVEL_BAR_OFFSET_HIGH, with values 0.25 and 0.75 respectively.

## Adding a custom offset on the bar

|[<!-- language="C" -->

static GtkWidget *
create_level_bar (void)
{
  GtkWidget *widget;
  GtkLevelBar *bar;

  widget = gtk_level_bar_new ();
  bar = GTK_LEVEL_BAR (widget);

  /<!---->* This changes the value of the default low offset
  *<!---->/

  gtk_level_bar_add_offset_value (bar,
                                  GTK_LEVEL_BAR_OFFSET_LOW,
                                  0.10);

  /<!---->* This adds a new offset to the bar; the application will
   be able to change its color by using the following selector,
   either by adding it to its CSS file or using
   gtk_css_provider_load_from_data() and
   gtk_style_context_add_provider()

   * .level-bar.fill-block.level-my-offset {
   *   background-color: green;
   *   border-style: solid;
   *   border-color: black;
   *   border-style: 1px;
   * }
   *<!---->/

  gtk_level_bar_add_offset_value (bar, "my-offset", 0.60);

  return widget;
}
]|

The default interval of values is between zero and one, but it’s possible to
modify the interval using gtk_level_bar_set_min_value() and
gtk_level_bar_set_max_value(). The value will be always drawn in proportion to
the admissible interval, i.e. a value of 15 with a specified interval between
10 and 20 is equivalent to a value of 0.5 with an interval between 0 and 1.
When #GTK_LEVEL_BAR_MODE_DISCRETE is used, the bar level is rendered
as a finite and number of separated blocks instead of a single one. The number
of blocks that will be rendered is equal to the number of units specified by
the admissible interval.
For instance, to build a bar rendered with five blocks, it’s sufficient to
set the minimum value to 0 and the maximum value to 5 after changing the indicator
mode to discrete.
#NAME: get_index
#PARENT: Gtk.ListBoxRow.get_index
#COMMENT: the index of the @row, or -1 if the @row is not in a listbox
#NAME: width
#PARENT: Gtk.TreeViewColumn.cell_get_size.none
#COMMENT: location to return width needed to render a cell, or %NULL
#NAME: selection
#PARENT: Gtk.selection_add_target.none
#COMMENT: the selection
#NAME: icon_view
#PARENT: Gtk.IconView.unset_model_drag_source.none
#COMMENT: a #GtkIconView
#NAME: title
#PARENT: Gtk.StatusIcon
#COMMENT: The title of this tray icon. This should be a short, human-readable,
localized string describing the tray icon. It may be used by tools
like screen readers to render the tray icon.
#NAME: get_menu_label
#PARENT: Gtk.Notebook.get_menu_label
#COMMENT: the menu label, or %NULL if the
    notebook page does not have a menu label other than the
    default (the tab label).
#NAME: border
#PARENT: Gtk.ScrollableInterface.get_border.get_border.gboolean
#COMMENT: return location for the results
#NAME: gtk-keynav-wrap-around
#PARENT: Gtk.Settings
#COMMENT: When %TRUE, some widgets will wrap around when doing keyboard
navigation, such as menus, menubars and notebooks.
#NAME: is_adjusting
#PARENT: Gtk.ColorSelection.is_adjusting
#COMMENT: %TRUE if the user is currently dragging
    a color around, and %FALSE if the selection has stopped
#NAME: get_target
#PARENT: Gtk.SelectionData.get_target
#COMMENT: the target of the selection.
#NAME: set_icon_from_gicon
#PARENT: Gtk.Tooltip
#COMMENT: Sets the icon of the tooltip (which is in front of the text)
to be the icon indicated by @gicon with the size indicated
by @size. If @gicon is %NULL, the image will be hidden.
#NAME: callback
#PARENT: Gtk.ActionEntry
#COMMENT: The function to call when the action is activated.
#NAME: entry
#PARENT: Gtk.SearchBar.connect_entry.none
#COMMENT: a #GtkEntry
#NAME: size
#PARENT: Gtk.StatusIcon.size-changed.gboolean
#COMMENT: the new size
#NAME: get_deleted
#PARENT: Gtk.TextMark.get_deleted
#COMMENT: whether the mark is deleted
#NAME: self
#PARENT: Gtk.AppChooserDialog.get_heading.utf8
#COMMENT: a #GtkAppChooserDialog
#NAME: overwrite-mode
#PARENT: Gtk.Entry
#COMMENT: If text is overwritten when typing in the #GtkEntry.
#NAME: set_website_label
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the label to be used for the website link.
#NAME: new_from_icon_name
#PARENT: Gtk.Button
#COMMENT: Creates a new button containing an icon from the current icon theme.

If the icon name isn’t known, a “broken image” icon will be
displayed instead. If the current icon theme is changed, the icon
will be updated appropriately.

This function is a convenience wrapper around gtk_button_new() and
gtk_button_set_image().
#NAME: get_value_as_int
#PARENT: Gtk.SpinButton
#COMMENT: Get the value @spin_button represented as an integer.
#NAME: activate
#PARENT: Gtk.Button
#COMMENT: The ::activate signal on GtkButton is an action signal and
emitting it causes the button to animate press then release.
Applications should never connect to this signal, but use the
#GtkButton::clicked signal.
#NAME: fontchooser
#PARENT: Gtk.FontChooserIface.get_font_face.get_font_face.Pango.FontFace
#COMMENT: a #GtkFontChooser
#NAME: get_lines
#PARENT: Gtk.Label.get_lines
#COMMENT: The number of lines
#NAME: set_state
#PARENT: Gtk.IconSource
#COMMENT: Sets the widget state this icon source is intended to be used
with.

Setting the widget state on an icon source makes no difference
if the state is wildcarded. Therefore, you should usually
call gtk_icon_source_set_state_wildcarded() to un-wildcard it
in addition to calling this function.
#NAME: get_default_attributes
#PARENT: Gtk.TextView
#COMMENT: Obtains a copy of the default text attributes. These are the
attributes used for text unless a tag overrides them.
You’d typically pass the default attributes in to
gtk_text_iter_get_attributes() in order to get the
attributes in effect at a given text position.

The return value is a copy owned by the caller of this function,
and should be freed with gtk_text_attributes_unref().
#NAME: get_window
#PARENT: Gtk.Gesture
#COMMENT: Returns the user-defined window that receives the events
handled by @gesture. See gtk_gesture_set_window() for more
information.
#NAME: get_current_uri
#PARENT: Gtk.Label
#COMMENT: Returns the URI for the currently active link in the label.
The active link is the one under the mouse pointer or, in a
selectable label, the link in which the text cursor is currently
positioned.

This function is intended for use in a #GtkLabel::activate-link handler
or for use in a #GtkWidget::query-tooltip handler.
#NAME: palette
#PARENT: Gtk.ToolPalette.get_vadjustment.Adjustment
#COMMENT: a #GtkToolPalette
#NAME: get_background_color
#PARENT: Gtk.ThemingEngine
#COMMENT: Gets the background color for a given state.
#NAME: action
#PARENT: Gtk.ActionClass.create_menu.create_menu.Widget
#COMMENT: a #GtkAction
#NAME: expand_all
#PARENT: Gtk.TreeView
#COMMENT: Recursively expands all nodes in the @tree_view.
#NAME: create_folders
#PARENT: Gtk.FileChooser.set_create_folders.none
#COMMENT: %TRUE if the Create Folder button should be displayed
#NAME: get_vhomogeneous
#PARENT: Gtk.Stack
#COMMENT: Gets whether @stack is vertically homogeneous.
See gtk_stack_set_vhomogeneous().
#NAME: TreeModelFilterModifyFunc
#PARENT: Gtk
#COMMENT: A function which calculates display values from raw values in the model.
It must fill @value with the display value for the column @column in the
row indicated by @iter.

Since this function is called for each data access, it’s not a
particularly efficient operation.
#NAME: get_preferred_height_for_width
#PARENT: Gtk.CellArea
#COMMENT: Retrieves a cell area’s minimum and natural height if it would be given
the specified @width.

@area stores some geometrical information in @context along the way
while calling gtk_cell_area_get_preferred_width(). It’s important to
perform a series of gtk_cell_area_get_preferred_width() requests with
@context first and then call gtk_cell_area_get_preferred_height_for_width()
on each cell area individually to get the height for width of each
fully requested row.

If at some point, the width of a single row changes, it should be
requested with gtk_cell_area_get_preferred_width() again and then
the full width of the requested rows checked again with
gtk_cell_area_context_get_preferred_width().
#NAME: new_text
#PARENT: Gtk.Editable.do_insert_text.none
#COMMENT: the text to append
#NAME: icon_view
#PARENT: Gtk.IconView.selected_foreach.none
#COMMENT: A #GtkIconView.
#NAME: copy
#PARENT: Gtk.SelectionData
#COMMENT: Makes a copy of a #GtkSelectionData-struct and its data.
#NAME: remove_window
#PARENT: Gtk.Application
#COMMENT: Remove a window from @application.

If @window belongs to @application then this call is equivalent to
setting the #GtkWindow:application property of @window to
%NULL.

The application may stop running as a result of a call to this
function.
#NAME: get_inline_selection
#PARENT: Gtk.EntryCompletion
#COMMENT: Returns %TRUE if inline-selection mode is turned on.
#NAME: 
#PARENT: Gtk.Actionable.set_action_target.none...
#COMMENT: arguments appropriate for @format_string
#NAME: func
#PARENT: Gtk.PrintSettings.foreach.none
#COMMENT: the function to call
#NAME: value
#PARENT: Gtk.PrintSettings.set.none
#COMMENT: a string value, or %NULL
#NAME: default_editable
#PARENT: Gtk.TextBuffer.cut_clipboard.none
#COMMENT: default editability of the buffer
#NAME: get_bytes_in_line
#PARENT: Gtk.TextIter
#COMMENT: Returns the number of bytes in the line containing @iter,
including the paragraph delimiters.
#NAME: rgba
#PARENT: Gtk.ColorSelection.set_current_rgba.none
#COMMENT: A #GdkRGBA to set the current color with
#NAME: sibling
#PARENT: Gtk.CellArea.is_focus_sibling.gboolean
#COMMENT: the #GtkCellRenderer to check against @renderer’s sibling list
#NAME: color
#PARENT: Gtk.SymbolicColor.new_literal.SymbolicColor
#COMMENT: a #GdkRGBA
#NAME: allocation
#PARENT: Gtk.Overlay.get-child-position.gboolean
#COMMENT: return
  location for the allocation
#NAME: sw
#PARENT: Gtk.Switch.set_active.none
#COMMENT: a #GtkSwitch
#NAME: manager
#PARENT: Gtk.UIManagerClass.get_widget.get_widget.Widget
#COMMENT: a #GtkUIManager
#NAME: get_current_event_state
#PARENT: Gtk.get_current_event_state
#COMMENT: %TRUE if there was a current event and it
    had a state field
#NAME: get_modifier_mask
#PARENT: Gtk.AccelGroup.get_modifier_mask
#COMMENT: the modifier mask for this accel group.
#NAME: set_accel_path
#PARENT: Gtk.Action
#COMMENT: Sets the accel path for this action.  All proxy widgets associated
with the action will have this accel path, so that their
accelerators are consistent.

Note that @accel_path string will be stored in a #GQuark. Therefore, if you
pass a static string, you can save some memory by interning it first with
g_intern_static_string().
#NAME: gtk-titlebar-middle-click
#PARENT: Gtk.Settings
#COMMENT: This setting determines the action to take when a middle-click
occurs on the titlebar of client-side decorated windows.

Recognized actions are minimize, toggle-maximize, menu, lower
or none.
#NAME: count
#PARENT: Gtk.TextView.move-cursor.none
#COMMENT: the number of @step units to move
#NAME: actions
#PARENT: Gtk.TreeView.enable_model_drag_dest.none
#COMMENT: the bitmask of possible actions for a drag from this
   widget
#NAME: get_event_widget
#PARENT: Gtk.get_event_widget
#COMMENT: the widget that originally
    received @event, or %NULL
#NAME: get_selection
#PARENT: Gtk.TreeView.get_selection
#COMMENT: A #GtkTreeSelection object.
#NAME: test-expand-row
#PARENT: Gtk.TreeView.test-expand-row
#COMMENT: %FALSE to allow expansion, %TRUE to reject
#NAME: has_visible_focus
#PARENT: Gtk.Widget.has_visible_focus
#COMMENT: %TRUE if the widget should display a “focus rectangle”
#NAME: widget_type
#PARENT: Gtk.Widget.get_template_child.GObject.Object
#COMMENT: The #GType to get a template child for
#NAME: show_day_names
#PARENT: Gtk.CalendarDisplayOptions
#COMMENT: Specifies that three letter day descriptions should be present.
#NAME: aclass
#PARENT: Gtk.CellAreaClass.list_cell_properties.GObject.ParamSpec
#COMMENT: a #GtkCellAreaClass
#NAME: binding_set
#PARENT: Gtk.binding_entry_add_signall.none
#COMMENT: a #GtkBindingSet to add a signal to
#NAME: position
#PARENT: Gtk.CellLayoutIface.reorder.reorder.none
#COMMENT: new position to insert @cell at
#NAME: reset_widgets
#PARENT: Gtk.StyleContext
#COMMENT: This function recomputes the styles for all widgets under a particular
#GdkScreen. This is useful when some global parameter has changed that
affects the appearance of all widgets, because when a widget gets a new
style, it will both redraw and recompute any cached information about
its appearance. As an example, it is used when the color scheme changes
in the related #GtkSettings object.
#NAME: width
#PARENT: Gtk.render_focus.none
#COMMENT: rectangle width
#NAME: align
#PARENT: Gtk.CellAreaBox.pack_end.none
#COMMENT: whether @renderer should be aligned in adjacent rows
#NAME: get_sequence_state
#PARENT: Gtk.Gesture.get_sequence_state
#COMMENT: The sequence state in @gesture
#NAME: timestamp
#PARENT: Gtk.show_uri.gboolean
#COMMENT: a timestamp to prevent focus stealing
#NAME: filter
#PARENT: Gtk.FileFilter.get_needed.FileFilterFlags
#COMMENT: a #GtkFileFilter
#NAME: end
#PARENT: Gtk.PageRange
#COMMENT: end of page range.
#NAME: user_defined
#PARENT: Gtk.SpinType
#COMMENT: Change by a specified amount.
#NAME: cr
#PARENT: Gtk.CellArea.render.none
#COMMENT: the #cairo_t to render with
#NAME: get_transitions_enabled
#PARENT: Gtk.Popover.get_transitions_enabled
#COMMENT: #TRUE if the show and hide transitions of the given
         popover are enabled, #FALSE otherwise.
#NAME: path
#PARENT: Gtk.Widget.path.none
#COMMENT: location to store allocated path string,
    or %NULL
#NAME: event
#PARENT: Gtk.Widget.delete-event.gboolean
#COMMENT: the event which triggered this signal
#NAME: gesture
#PARENT: Gtk.GestureMultiPress.get_area.gboolean
#COMMENT: a #GtkGestureMultiPress
#NAME: to_string
#PARENT: Gtk.CssProvider
#COMMENT: Converts the @provider into a string representation in CSS
format.

Using gtk_css_provider_load_from_data() with the return value
from this function on a new provider created with
gtk_css_provider_new() will basically create a duplicate of
this @provider.
#NAME: cell_editable
#PARENT: Gtk.CellEditable.remove_widget.none
#COMMENT: A #GtkCellEditable
#NAME: height
#PARENT: Gtk.Grid.attach_next_to.none
#COMMENT: the number of rows that @child will span
#NAME: length
#PARENT: Gtk.SelectionData.set.none
#COMMENT: length of the data
#NAME: text_view
#PARENT: Gtk.TextView.scroll_to_mark.none
#COMMENT: a #GtkTextView
#NAME: show-tips
#PARENT: Gtk.RecentChooser
#COMMENT: Whether this #GtkRecentChooser should display a tooltip containing the
full path of the recently used resources.
#NAME: STYLE_CLASS_VERTICAL
#PARENT: Gtk
#COMMENT: A CSS class for vertically layered widgets.

This is used by widgets implementing #GtkOrientable.
#NAME: icon_set
#PARENT: Gtk.ImageType
#COMMENT: the widget contains a #GtkIconSet
#NAME: get_output_bin
#PARENT: Gtk.PrintSettings.get_output_bin
#COMMENT: the output bin
#NAME: get_hadjustment
#PARENT: Gtk.ToolPalette
#COMMENT: Gets the horizontal adjustment of the tool palette.
#NAME: name
#PARENT: Gtk.WidgetPath.iter_set_name.none
#COMMENT: widget name
#NAME: orientation
#PARENT: Gtk.paint_slider.none
#COMMENT: the orientation to be used
#NAME: button
#PARENT: Gtk.IconSize
#COMMENT: Size appropriate for buttons (16px)
#NAME: filter
#PARENT: Gtk.RecentFilter.add_group.none
#COMMENT: a #GtkRecentFilter
#NAME: tree_store
#PARENT: Gtk.TreeStore.insert_after.none
#COMMENT: A #GtkTreeStore
#NAME: drag-begin
#PARENT: Gtk.Widget
#COMMENT: The ::drag-begin signal is emitted on the drag source when a drag is
started. A typical reason to connect to this signal is to set up a
custom drag icon with e.g. gtk_drag_source_set_icon_pixbuf().

Note that some widgets set up a drag icon in the default handler of
this signal, so you may have to use g_signal_connect_after() to
override what the default handler did.
#NAME: add_accel_group
#PARENT: Gtk.Window
#COMMENT: Associate @accel_group with @window, such that calling
gtk_accel_groups_activate() on @window will activate accelerators
in @accel_group.
#NAME: set_action_target_value
#PARENT: Gtk.Actionable
#COMMENT: Sets the target value of an actionable widget.

If @target_value is %NULL then the target value is unset.

The target value has two purposes.  First, it is used as the
parameter to activation of the action associated with the
#GtkActionable widget. Second, it is used to determine if the widget
should be rendered as “active” — the widget is active if the state
is equal to the given target.

Consider the example of associating a set of buttons with a #GAction
with string state in a typical “radio button” situation.  Each button
will be associated with the same action, but with a different target
value for that action.  Clicking on a particular button will activate
the action with the target of that button, which will typically cause
the action’s state to change to that value.  Since the action’s state
is now equal to the target value of the button, the button will now
be rendered as active (and the other buttons, with different targets,
rendered inactive).
#NAME: get_overlay_scrolling
#PARENT: Gtk.ScrolledWindow
#COMMENT: Returns whether overlay scrolling is enabled for this scrolled window.
#NAME: drag_data_delete
#PARENT: Gtk.TreeDragSource
#COMMENT: Asks the #GtkTreeDragSource to delete the row at @path, because
it was moved somewhere else via drag-and-drop. Returns %FALSE
if the deletion fails because @path no longer exists, or for
some model-specific reason. Should robustly handle a @path no
longer found in the model!
#NAME: override_background_color
#PARENT: Gtk.Widget
#COMMENT: Sets the background color to use for a widget.

All other style values are left untouched.
See gtk_widget_override_color().
#NAME: set_show_all
#PARENT: Gtk.AppChooserWidget
#COMMENT: Sets whether the app chooser should show all applications
in a flat list.
#NAME: box
#PARENT: Gtk.CellAreaBox.get_spacing.gint
#COMMENT: a #GtkCellAreaBox
#NAME: page_setup
#PARENT: Gtk.PrintOperationPreview.got-page-size.none
#COMMENT: the #GtkPageSetup for the current page
#NAME: month
#PARENT: Gtk.Calendar.select_month.none
#COMMENT: a month number between 0 and 11.
#NAME: load_surface
#PARENT: Gtk.IconTheme
#COMMENT: Looks up an icon in an icon theme for a particular window scale,
scales it to the given size and renders it into a cairo surface. This is a
convenience function; if more details about the icon are needed,
use gtk_icon_theme_lookup_icon() followed by
gtk_icon_info_load_surface().

Note that you probably want to listen for icon theme changes and
update the icon. This is usually done by connecting to the
GtkWidget::style-set signal.
#NAME: render_page
#PARENT: Gtk.PrintOperationPreview
#COMMENT: Renders a page to the preview, using the print context that
was passed to the #GtkPrintOperation::preview handler together
with @preview.

A custom iprint preview should use this function in its ::expose
handler to render the currently selected page.

Note that this function requires a suitable cairo context to
be associated with the print context.
#NAME: STOCK_ORIENTATION_REVERSE_LANDSCAPE
#PARENT: Gtk
#COMMENT: The “Reverse Landscape Orientation” item and icon.
#NAME: new
#PARENT: Gtk.CellRendererToggle
#COMMENT: Creates a new #GtkCellRendererToggle. Adjust rendering
parameters using object properties. Object properties can be set
globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
can bind a property to a value in a #GtkTreeModel. For example, you
can bind the “active” property on the cell renderer to a boolean value
in the model, thus causing the check button to reflect the state of
the model.
#NAME: char_offset
#PARENT: Gtk.TextBuffer.get_iter_at_offset.none
#COMMENT: char offset from start of buffer, counting from 0, or -1
#NAME: get_mode
#PARENT: Gtk.ToggleButton.get_mode
#COMMENT: %TRUE if the togglebutton is drawn as a separate indicator
  and label.
#NAME: stock_id
#PARENT: Gtk.Button.new_from_stock.Widget
#COMMENT: the name of the stock item
#NAME: window
#PARENT: Gtk.cairo_transform_to_window.none
#COMMENT: the window to transform the context to
#NAME: gtk
#PARENT: Gtk.PathPriorityType
#COMMENT: Deprecated
#NAME: row_align
#PARENT: Gtk.TreeView.scroll_to_cell.none
#COMMENT: The vertical alignment of the row specified by @path.
#NAME: get_family_list
#PARENT: Gtk.FontSelection
#COMMENT: This returns the #GtkTreeView that lists font families, for
example, “Sans”, “Serif”, etc.
#NAME: renderer
#PARENT: Gtk.CellArea.is_focus_sibling.gboolean
#COMMENT: the #GtkCellRenderer expected to have focus
#NAME: use-action-appearance
#PARENT: Gtk.Activatable
#COMMENT: Whether this activatable should reset its layout
and appearance when setting the related action or when
the action changes appearance.

See the #GtkAction documentation directly to find which properties
should be ignored by the #GtkActivatable when this property is %FALSE.

> #GtkActivatable implementors need to handle this property
> and call gtk_activatable_sync_action_properties() on the activatable
> widget when it changes.
#NAME: get_focus_siblings
#PARENT: Gtk.CellArea
#COMMENT: Gets the focus sibling cell renderers for @renderer.
#NAME: gtk-color-palette
#PARENT: Gtk.Settings
#COMMENT: Palette to use in the deprecated color selector.
#NAME: cancel
#PARENT: Gtk.ResponseType
#COMMENT: Returned by Cancel buttons in GTK+ dialogs
#NAME: image
#PARENT: Gtk.Image.set_pixel_size.none
#COMMENT: a #GtkImage
#NAME: next_page
#PARENT: Gtk.Assistant
#COMMENT: Navigate to the next page.

It is a programming error to call this function when
there is no next page.

This function is for use when creating pages of the
#GTK_ASSISTANT_PAGE_CUSTOM type.
#NAME: icon_pos
#PARENT: Gtk.Entry.set_icon_tooltip_markup.none
#COMMENT: the icon position
#NAME: box
#PARENT: Gtk.FlowBox.set_filter_func.none
#COMMENT: a #GtkFlowBox
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_popup_fixed_width.none
#COMMENT: a #GtkComboBox
#NAME: stack
#PARENT: Gtk.Stack.get_transition_duration.guint
#COMMENT: a #GtkStack
#NAME: reverse
#PARENT: Gtk.PrintSettings.set_reverse.none
#COMMENT: whether to reverse the output
#NAME: width
#PARENT: Gtk.Widget.get_preferred_height_for_width.none
#COMMENT: the width which is available for allocation
#NAME: filter
#PARENT: Gtk.RecentFilter.add_age.none
#COMMENT: a #GtkRecentFilter
#NAME: new_with_buffer
#PARENT: Gtk.TextView.new_with_buffer
#COMMENT: a new #GtkTextView.
#NAME: get_title
#PARENT: Gtk.ComboBox
#COMMENT: Gets the current title of the menu in tearoff mode. See
gtk_combo_box_set_add_tearoffs().
#NAME: get_iter_at_mark
#PARENT: Gtk.TextBuffer
#COMMENT: Initializes @iter with the current position of @mark.
#NAME: true
#PARENT: Gtk.true
#COMMENT: %TRUE
#NAME: has_rc_style
#PARENT: Gtk.Widget
#COMMENT: Determines if the widget style has been looked up through the rc mechanism.
#NAME: scale
#PARENT: Gtk.IconSet.render_icon_surface.cairo.Surface
#COMMENT: the window scale to render for
#NAME: cell_layout
#PARENT: Gtk.CellLayoutIface.clear_attributes.clear_attributes.none
#COMMENT: a #GtkCellLayout
#NAME: n_formats
#PARENT: Gtk.TextBuffer.get_deserialize_formats.Gdk.Atom
#COMMENT: return location for the number of formats
#NAME: cell_area
#PARENT: Gtk.CellRenderer.activate.gboolean
#COMMENT: cell area as passed to gtk_cell_renderer_render()
#NAME: path
#PARENT: Gtk.IconTheme.prepend_search_path.none
#COMMENT: directory name to prepend to the icon path
#NAME: context
#PARENT: Gtk.IconSet.render_icon_surface.cairo.Surface
#COMMENT: a #GtkStyleContext
#NAME: revealer
#PARENT: Gtk.Revealer.get_transition_type.RevealerTransitionType
#COMMENT: a #GtkRevealer
#NAME: var_args
#PARENT: Gtk.Widget.style_get_valist.none
#COMMENT: a va_list of pairs of property names and
    locations to return the property values, starting with the location
    for @first_property_name.
#NAME: set_detailed_action_name
#PARENT: Gtk.Actionable
#COMMENT: Sets the action-name and associated string target value of an
actionable widget.

This allows for the effect of both gtk_actionable_set_action_name()
and gtk_actionable_set_action_target_value() in the common case that
the target is string-valued.

@detailed_action_name is a string of the form
`"action::target"` where `action`
is the action name and `target` is the string to use
as the target.
#NAME: set_font_desc
#PARENT: Gtk.FontChooser
#COMMENT: Sets the currently-selected font from @font_desc.
#NAME: get_visited
#PARENT: Gtk.LinkButton.get_visited
#COMMENT: %TRUE if the link has been visited, %FALSE otherwise
#NAME: menu_item
#PARENT: Gtk.MenuItem.get_accel_path.utf8
#COMMENT: a valid #GtkMenuItem
#NAME: set_search_mode
#PARENT: Gtk.SearchBar
#COMMENT: Switches the search mode on or off.
#NAME: button
#PARENT: Gtk.Window.begin_resize_drag.none
#COMMENT: mouse button that initiated the drag
#NAME: detailed_action_name
#PARENT: Gtk.Actionable.set_detailed_action_name.none
#COMMENT: the detailed action name
#NAME: targets
#PARENT: Gtk.TreeView.enable_model_drag_source.none
#COMMENT: the table of targets that the drag will support
#NAME: add_device_events
#PARENT: Gtk.Widget
#COMMENT: Adds the device events in the bitfield @events to the event mask for
@widget. See gtk_widget_set_device_events() for details.
#NAME: widget
#PARENT: Gtk.Widget.set_opacity.none
#COMMENT: a #GtkWidget
#NAME: filename
#PARENT: Gtk.FileChooser.select_filename.gboolean
#COMMENT: the filename to select
#NAME: label
#PARENT: Gtk.ToolItemGroup.new.Widget
#COMMENT: the label of the new group
#NAME: get_data
#PARENT: Gtk.SelectionData
#COMMENT: Retrieves the raw data of the selection.
#NAME: new
#PARENT: Gtk.LinkButton.new
#COMMENT: a new link button widget.
#NAME: sequence
#PARENT: Gtk.Gesture.update.none
#COMMENT: the #GdkEventSequence that was updated
#NAME: path
#PARENT: Gtk.IconView.get_drag_dest_item.none
#COMMENT: Return location for the path of
       the highlighted item, or %NULL.
#NAME: set_line_index
#PARENT: Gtk.TextIter
#COMMENT: Same as gtk_text_iter_set_line_offset(), but works with a
byte index. The given byte index must be at
the start of a character, it can’t be in the middle of a UTF-8
encoded character.
#NAME: new
#PARENT: Gtk.TextView
#COMMENT: Creates a new #GtkTextView. If you don’t call gtk_text_view_set_buffer()
before using the text view, an empty default buffer will be created
for you. Get the buffer with gtk_text_view_get_buffer(). If you want
to specify your own buffer, consider gtk_text_view_new_with_buffer().
#NAME: about
#PARENT: Gtk.AboutDialog.set_logo_icon_name.none
#COMMENT: a #GtkAboutDialog
#NAME: first_property_name
#PARENT: Gtk.CellArea.cell_set_valist.none
#COMMENT: the name of the first cell property to set
#NAME: set_default_text
#PARENT: Gtk.AppChooserWidget
#COMMENT: Sets the text that is shown if there are not applications
that can handle the content type.
#NAME: secondary-icon-sensitive
#PARENT: Gtk.Entry
#COMMENT: Whether the secondary icon is sensitive.

An insensitive icon appears grayed out. GTK+ does not emit the
#GtkEntry::icon-press and #GtkEntry::icon-release signals and
does not allow DND from insensitive icons.

An icon should be set insensitive if the action that would trigger
when clicked is currently not available.
#NAME: show_private
#PARENT: Gtk.RecentChooser.set_show_private.none
#COMMENT: %TRUE to show private items, %FALSE otherwise
#NAME: iter
#PARENT: Gtk.TreeViewRowSeparatorFunc.gboolean
#COMMENT: a #GtkTreeIter pointing at a row in @model
#NAME: bottom_attach
#PARENT: Gtk.Menu.attach.none
#COMMENT: The row number to attach the bottom of the item to
#NAME: get_pulse_step
#PARENT: Gtk.ProgressBar
#COMMENT: Retrieves the pulse step set with gtk_progress_bar_set_pulse_step().
#NAME: set_text
#PARENT: Gtk.ProgressBar
#COMMENT: Causes the given @text to appear superimposed on the progress bar.

If @text is %NULL and #GtkProgressBar:show-text is %TRUE, the current
value of #GtkProgressBar:fraction will be displayed as a percentage.

If @text is non-%NULL and #GtkProgressBar:show-text is %TRUE, the text will
be displayed. In this case, it will not display the progress percentage.
If @text is the empty string, the progress bar will still be styled and sized
suitably for containing text, as long as #GtkProgressBar:show-text is %TRUE.
#NAME: new
#PARENT: Gtk.TextBuffer
#COMMENT: Creates a new text buffer.
#NAME: for_window
#PARENT: Gtk.IconTheme.load_surface.cairo.Surface
#COMMENT: #GdkWindow to optimize drawing for, or %NULL
#NAME: range
#PARENT: Gtk.Range.get_restrict_to_fill_level.gboolean
#COMMENT: A #GtkRange
#NAME: range
#PARENT: Gtk.Range.get_slider_size_fixed.gboolean
#COMMENT: a #GtkRange
#NAME: WrapMode
#PARENT: Gtk
#COMMENT: Describes a type of line wrapping.
#NAME: get_page_setup
#PARENT: Gtk.PrintContext
#COMMENT: Obtains the #GtkPageSetup that determines the page
dimensions of the #GtkPrintContext.
#NAME: iter
#PARENT: Gtk.ComboBox.get_active_iter.gboolean
#COMMENT: The uninitialized #GtkTreeIter
#NAME: track_status
#PARENT: Gtk.PrintOperation.set_track_print_status.none
#COMMENT: %TRUE to track status after printing
#NAME: style_region
#PARENT: Gtk.ThemingEngine.has_region.gboolean
#COMMENT: a region name
#NAME: position
#PARENT: Gtk.EntryBufferClass.delete_text.delete_text.guint
#COMMENT: position at which to delete text
#NAME: path
#PARENT: Gtk.TreeView.scroll_to_cell.none
#COMMENT: The path of the row to move to, or %NULL.
#NAME: data
#PARENT: Gtk.TreeViewRowSeparatorFunc.gboolean
#COMMENT: user data
#NAME: get_selection_mode
#PARENT: Gtk.FlowBox.get_selection_mode
#COMMENT: the #GtkSelectionMode
#NAME: get_use_action_appearance
#PARENT: Gtk.Activatable
#COMMENT: Gets whether this activatable should reset its layout
and appearance when setting the related action or when
the action changes appearance.
#NAME: serialize
#PARENT: Gtk.TextBuffer.serialize
#COMMENT: the serialized
              data, encoded as @format
#NAME: TreeModelSort
#PARENT: Gtk
#COMMENT: The #GtkTreeModelSort is a model which implements the #GtkTreeSortable
interface.  It does not hold any data itself, but rather is created with
a child model and proxies its data.  It has identical column types to
this child model, and the changes in the child are propagated.  The
primary purpose of this model is to provide a way to sort a different
model without modifying it. Note that the sort function used by
#GtkTreeModelSort is not guaranteed to be stable.

The use of this is best demonstrated through an example.  In the
following sample code we create two #GtkTreeView widgets each with a
view of the same data.  As the model is wrapped here by a
#GtkTreeModelSort, the two #GtkTreeViews can each sort their
view of the data without affecting the other.  By contrast, if we
simply put the same model in each widget, then sorting the first would
sort the second.

## Using a #GtkTreeModelSort

|[<!-- language="C" -->
{
  GtkTreeView *tree_view1;
  GtkTreeView *tree_view2;
  GtkTreeModel *sort_model1;
  GtkTreeModel *sort_model2;
  GtkTreeModel *child_model;

  // get the child model
  child_model = get_my_model ();

  // Create the first tree
  sort_model1 = gtk_tree_model_sort_new_with_model (child_model);
  tree_view1 = gtk_tree_view_new_with_model (sort_model1);

  // Create the second tree
  sort_model2 = gtk_tree_model_sort_new_with_model (child_model);
  tree_view2 = gtk_tree_view_new_with_model (sort_model2);

  // Now we can sort the two models independently
  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model1),
                                        COLUMN_1, GTK_SORT_ASCENDING);
  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model2),
                                        COLUMN_1, GTK_SORT_DESCENDING);
}
]|

To demonstrate how to access the underlying child model from the sort
model, the next example will be a callback for the #GtkTreeSelection
#GtkTreeSelection::changed signal.  In this callback, we get a string
from COLUMN_1 of the model.  We then modify the string, find the same
selected row on the child model, and change the row there.

## Accessing the child model of in a selection changed callback

|[<!-- language="C" -->
void
selection_changed (GtkTreeSelection *selection, gpointer data)
{
  GtkTreeModel *sort_model = NULL;
  GtkTreeModel *child_model;
  GtkTreeIter sort_iter;
  GtkTreeIter child_iter;
  char *some_data = NULL;
  char *modified_data;

  // Get the current selected row and the model.
  if (! gtk_tree_selection_get_selected (selection,
                                         &sort_model,
                                         &sort_iter))
    return;

  // Look up the current value on the selected row and get
  // a new value to change it to.
  gtk_tree_model_get (GTK_TREE_MODEL (sort_model), &sort_iter,
                      COLUMN_1, &some_data,
                      -1);

  modified_data = change_the_data (some_data);
  g_free (some_data);

  // Get an iterator on the child model, instead of the sort model.
  gtk_tree_model_sort_convert_iter_to_child_iter (GTK_TREE_MODEL_SORT (sort_model),
                                                  &child_iter,
                                                  &sort_iter);

  // Get the child model and change the value of the row. In this
  // example, the child model is a GtkListStore. It could be any other
  // type of model, though.
  child_model = gtk_tree_model_sort_get_model (GTK_TREE_MODEL_SORT (sort_model));
  gtk_list_store_set (GTK_LIST_STORE (child_model), &child_iter,
                      COLUMN_1, &modified_data,
                      -1);
  g_free (modified_data);
}
]|
#NAME: image
#PARENT: Gtk.Image.clear.none
#COMMENT: a #GtkImage
#NAME: move-selected
#PARENT: Gtk.MenuShell.move-selected
#COMMENT: %TRUE to stop the signal emission, %FALSE to continue
#NAME: is_active
#PARENT: Gtk.ToggleAction.set_active.none
#COMMENT: whether the action should be checked or not
#NAME: UIManagerItemType
#PARENT: Gtk
#COMMENT: These enumeration values are used by gtk_ui_manager_add_ui() to determine
what UI element to create.
#NAME: Adjustment
#PARENT: Gtk
#COMMENT: The #GtkAdjustment object represents a value which has an associated lower
and upper bound, together with step and page increments, and a page size.
It is used within several GTK+ widgets, including
#GtkSpinButton, #GtkViewport, and #GtkRange (which is a base class for
#GtkHScrollbar, #GtkVScrollbar, #GtkHScale, and #GtkVScale).

The #GtkAdjustment object does not update the value itself. Instead
it is left up to the owner of the #GtkAdjustment to control the value.

The owner of the #GtkAdjustment typically calls the
gtk_adjustment_value_changed() and gtk_adjustment_changed() functions
after changing the value and its bounds. This results in the emission of the
#GtkAdjustment::value_changed or #GtkAdjustment::changed signal respectively.
#NAME: get_selection_bounds
#PARENT: Gtk.EditableInterface.get_selection_bounds.get_selection_bounds
#COMMENT: %TRUE if an area is selected, %FALSE otherwise
#NAME: get_icon_tooltip_markup
#PARENT: Gtk.Entry
#COMMENT: Gets the contents of the tooltip on the icon at the specified
position in @entry.
#NAME: menu_item
#PARENT: Gtk.MenuItem.toggle_size_allocate.none
#COMMENT: the menu item.
#NAME: activate-current
#PARENT: Gtk.MenuShell
#COMMENT: An action signal that activates the current menu item within
the menu shell.
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_state.StateFlags
#COMMENT: a #GtkThemingEngine
#NAME: widget
#PARENT: Gtk.Widget.get_state.StateType
#COMMENT: a #GtkWidget
#NAME: icon_view
#PARENT: Gtk.IconView.set_markup_column.none
#COMMENT: A #GtkIconView.
#NAME: new_from_widget
#PARENT: Gtk.RadioMenuItem.new_from_widget
#COMMENT: The new #GtkRadioMenuItem
#NAME: STOCK_GO_UP
#PARENT: Gtk
#COMMENT: The “Up” item and icon.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_visible.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: get_show_dialog_item
#PARENT: Gtk.AppChooserButton.get_show_dialog_item
#COMMENT: the value of #GtkAppChooserButton:show-dialog-item
#NAME: focus-out-event
#PARENT: Gtk.Widget.focus-out-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: allocation
#PARENT: Gtk.WidgetClass.size_allocate.size_allocate.none
#COMMENT: position and size to be allocated to @widget
#NAME: new_with_label
#PARENT: Gtk.ImageMenuItem
#COMMENT: Creates a new #GtkImageMenuItem containing a label.
#NAME: get_format
#PARENT: Gtk.SelectionData
#COMMENT: Retrieves the format of the selection.
#NAME: flags
#PARENT: Gtk.WidgetPath.iter_has_region.gboolean
#COMMENT: return location for the region flags
#NAME: class_name
#PARENT: Gtk.StyleContext.has_class.gboolean
#COMMENT: a class name
#NAME: iter
#PARENT: Gtk.TreeIter.free.none
#COMMENT: a dynamically allocated tree iterator
#NAME: context
#PARENT: Gtk.IconSet.render_icon_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: a #GtkStyleContext
#NAME: widget_class
#PARENT: Gtk.WidgetClass.set_connect_func.none
#COMMENT: A #GtkWidgetClass
#NAME: get_cursor
#PARENT: Gtk.IconView.get_cursor
#COMMENT: %TRUE if the cursor is set.
#NAME: compare
#PARENT: Gtk.TreePath
#COMMENT: Compares two paths.

If @a appears before @b in a tree, then -1 is returned.
If @b appears before @a, then 1 is returned.
If the two nodes are equal, then 0 is returned.
#NAME: sort_iter
#PARENT: Gtk.TreeModelSort.convert_child_iter_to_iter.gboolean
#COMMENT: An uninitialized #GtkTreeIter.
#NAME: get_tooltip_text
#PARENT: Gtk.StatusIcon.get_tooltip_text
#COMMENT: the tooltip text, or %NULL. You should free the
  returned string with g_free() when done.
#NAME: event
#PARENT: Gtk.Widget.motion-notify-event.gboolean
#COMMENT: the #GdkEventMotion which triggered
  this signal.
#NAME: list_mnemonic_labels
#PARENT: Gtk.Widget
#COMMENT: Returns a newly allocated list of the widgets, normally labels, for
which this widget is the target of a mnemonic (see for example,
gtk_label_set_mnemonic_widget()).

The widgets in the list are not individually referenced. If you
want to iterate through the list and perform actions involving
callbacks that might destroy the widgets, you
must call `g_list_foreach (result,
(GFunc)g_object_ref, NULL)` first, and then unref all the
widgets afterwards.
#NAME: attrs
#PARENT: Gtk.Entry.set_attributes.none
#COMMENT: a #PangoAttrList
#NAME: step
#PARENT: Gtk.ScaleButton.new.Widget
#COMMENT: the stepping of value when a scroll-wheel event,
       or up/down arrow event occurs (usually 2)
#NAME: follow-state
#PARENT: Gtk.CellRendererPixbuf
#COMMENT: Specifies whether the rendered pixbuf should be colorized
according to the #GtkCellRendererState.
#NAME: widget
#PARENT: Gtk.Widget.send_expose.gint
#COMMENT: a #GtkWidget
#NAME: menu_button
#PARENT: Gtk.MenuButton.set_menu_model.none
#COMMENT: a #GtkMenuButton
#NAME: get_orientation
#PARENT: Gtk.Orientable.get_orientation
#COMMENT: the orientation of the @orientable.
#NAME: name
#PARENT: Gtk.RecentAction.new_for_manager.Action
#COMMENT: a unique name for the action
#NAME: get_capture_button_press
#PARENT: Gtk.ScrolledWindow.get_capture_button_press
#COMMENT: %TRUE if button presses are captured during kinetic scrolling
#NAME: grid_lines
#PARENT: Gtk.TreeView.set_grid_lines.none
#COMMENT: a #GtkTreeViewGridLines value indicating which grid lines to
enable.
#NAME: list_store
#PARENT: Gtk.ListStore.insert_with_values.none
#COMMENT: A #GtkListStore
#NAME: prev-year
#PARENT: Gtk.Calendar
#COMMENT: Emitted when user switched to the previous year.
#NAME: action
#PARENT: Gtk.ActionClass.create_tool_item.create_tool_item.Widget
#COMMENT: the action object
#NAME: get_inner_border
#PARENT: Gtk.Entry.get_inner_border
#COMMENT: the entry’s #GtkBorder, or
  %NULL if none was set.
#NAME: lookup_icon_set
#PARENT: Gtk.StyleContext.lookup_icon_set
#COMMENT: The looked  up %GtkIconSet, or %NULL
#NAME: tree_view
#PARENT: Gtk.TreeView.set_destroy_count_func.none
#COMMENT: A #GtkTreeView
#NAME: get_margin_end
#PARENT: Gtk.Widget.get_margin_end
#COMMENT: The end margin of @widget
#NAME: translate_coordinates
#PARENT: Gtk.Widget.translate_coordinates
#COMMENT: %FALSE if either widget was not realized, or there
  was no common ancestor. In this case, nothing is stored in
  *@dest_x and *@dest_y. Otherwise %TRUE.
#NAME: parent_class
#PARENT: Gtk.ActionGroupClass
#COMMENT: The parent class.
#NAME: iter
#PARENT: Gtk.TextIter.backward_chars.gboolean
#COMMENT: an iterator
#NAME: unselect_iter
#PARENT: Gtk.TreeSelection
#COMMENT: Unselects the specified iterator.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_hover_expand.gboolean
#COMMENT: a #GtkTreeView
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.cell_get_position.gboolean
#COMMENT: a #GtkTreeViewColumn
#NAME: widget
#PARENT: Gtk.Widget.style_attach.none
#COMMENT: a #GtkWidget
#NAME: content_type
#PARENT: Gtk.AppChooserWidget.new.Widget
#COMMENT: the content type to show applications for
#NAME: combo_box
#PARENT: Gtk.ComboBoxText.append_text.none
#COMMENT: A #GtkComboBoxText
#NAME: model
#PARENT: Gtk.ComboBox.new_with_model.Widget
#COMMENT: A #GtkTreeModel.
#NAME: font_button
#PARENT: Gtk.FontButton.set_font_name.gboolean
#COMMENT: a #GtkFontButton
#NAME: new
#PARENT: Gtk.FileChooserDialog.new
#COMMENT: a new #GtkFileChooserDialog
#NAME: set_ignore_hidden
#PARENT: Gtk.SizeGroup
#COMMENT: Sets whether unmapped widgets should be ignored when
calculating the size.
#NAME: path
#PARENT: Gtk.TreeModelIface.row_inserted.row_inserted.none
#COMMENT: a #GtkTreePath-struct pointing to the inserted row
#NAME: controller
#PARENT: Gtk.EventController.get_propagation_phase.PropagationPhase
#COMMENT: a #GtkEventController
#NAME: free
#PARENT: Gtk.PaperSize
#COMMENT: Free the given #GtkPaperSize object.
#NAME: get_preferred_width_for_height
#PARENT: Gtk.Widget
#COMMENT: Retrieves a widget’s minimum and natural width if it would be given
the specified @height.

The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroups that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.
#NAME: titlebar
#PARENT: Gtk.Window.set_titlebar.none
#COMMENT: the widget to use as titlebar
#NAME: filter
#PARENT: Gtk.FileChooser.set_filter.none
#COMMENT: a #GtkFileFilter
#NAME: get_widget
#PARENT: Gtk.EventController
#COMMENT: Returns the #GtkWidget this controller relates to.
#NAME: app_name
#PARENT: Gtk.RecentInfo.create_app_info.Gio.AppInfo
#COMMENT: the name of the application that should
  be mapped to a #GAppInfo; if %NULL is used then the default
  application for the MIME type is used
#NAME: get_cursor_locations
#PARENT: Gtk.TextView
#COMMENT: Given an @iter within a text layout, determine the positions of the
strong and weak cursors if the insertion point is at that
iterator. The position of each cursor is stored as a zero-width
rectangle. The strong cursor location is the location where
characters of the directionality equal to the base direction of the
paragraph are inserted.  The weak cursor location is the location
where characters of the directionality opposite to the base
direction of the paragraph are inserted.

If @iter is %NULL, the actual cursor position is used.

Note that if @iter happens to be the actual cursor position, and
there is currently an IM preedit sequence being entered, the
returned locations will be adjusted to account for the preedit
cursor’s offset within the preedit sequence.

The rectangle position is in buffer coordinates; use
gtk_text_view_buffer_to_window_coords() to convert these
coordinates to coordinates for one of the windows in the text view.
#NAME: keyval
#PARENT: Gtk.BindingEntry.add_signall.none
#COMMENT: key value
#NAME: get_family
#PARENT: Gtk.FontSelection
#COMMENT: Gets the #PangoFontFamily representing the selected font family.
#NAME: set_header_func
#PARENT: Gtk.ListBox
#COMMENT: By setting a header function on the @box one can dynamically add headers
in front of rows, depending on the contents of the row and its position in the list.
For instance, one could use it to add headers in front of the first item of a
new kind, in a list sorted by the kind.

The @update_header can look at the current header widget using gtk_list_box_row_get_header()
and either update the state of the widget as needed, or set a new one using
gtk_list_box_row_set_header(). If no header is needed, set the header to %NULL.

Note that you may get many calls @update_header to this for a particular row when e.g.
changing things that don’t affect the header. In this case it is important for performance
to not blindly replace an existing header with an identical one.

The @update_header function will be called for each row after the call, and it will
continue to be called each time a row changes (via gtk_list_box_row_changed()) and when
the row before changes (either by gtk_list_box_row_changed() on the previous row, or when
the previous row becomes a different row). It is also called for all rows when
gtk_list_box_invalidate_headers() is called.
#NAME: pressed
#PARENT: Gtk.GestureMultiPress
#COMMENT: This signal is emitted whenever a button or touch press happens.
#NAME: mark
#PARENT: Gtk.TextBuffer.delete_mark.none
#COMMENT: a #GtkTextMark in @buffer
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.get_value.get_value.none
#COMMENT: a #GtkTreeModel
#NAME: destroy
#PARENT: Gtk.TreeSortable.set_default_sort_func.none
#COMMENT: Destroy notifier of @user_data, or %NULL
#NAME: get_halign
#PARENT: Gtk.Widget
#COMMENT: Gets the value of the #GtkWidget:halign property.

For backwards compatibility reasons this method will never return
%GTK_ALIGN_BASELINE, but instead it will convert it to
%GTK_ALIGN_FILL. Baselines are not supported for horizontal
alignment.
#NAME: n_properties
#PARENT: Gtk.CellAreaClass.list_cell_properties.GObject.ParamSpec
#COMMENT: location to return the number of cell properties found
#NAME: button
#PARENT: Gtk.ToolButton.set_label.none
#COMMENT: a #GtkToolButton
#NAME: iter
#PARENT: Gtk.TreeModelIface.get_value.get_value.none
#COMMENT: the #GtkTreeIter-struct
#NAME: minimum_width
#PARENT: Gtk.CellRendererClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: location for storing the minimum size, or %NULL
#NAME: get_translator_credits
#PARENT: Gtk.AboutDialog.get_translator_credits
#COMMENT: The translator credits string. The string is
  owned by the about dialog and must not be modified.
#NAME: accel_group
#PARENT: Gtk.ImageMenuItem.set_accel_group.none
#COMMENT: the #GtkAccelGroup
#NAME: ListBoxCreateWidgetFunc
#PARENT: Gtk.ListBoxCreateWidgetFunc
#COMMENT: a #GtkWidget that represents @item
#NAME: set_proxy_menu_item
#PARENT: Gtk.ToolItem
#COMMENT: Sets the #GtkMenuItem used in the toolbar overflow menu. The
@menu_item_id is used to identify the caller of this function and
should also be used with gtk_tool_item_get_proxy_menu_item().
#NAME: remove-widget
#PARENT: Gtk.CellEditable
#COMMENT: This signal is meant to indicate that the cell is finished
editing, and the widget may now be destroyed.

Implementations of #GtkCellEditable are responsible for
emitting this signal when they are done editing. It must
be emitted after the #GtkCellEditable::editing-done signal,
to give the cell renderer a chance to update the cell's value
before the widget is removed.

gtk_cell_editable_remove_widget() is a convenience method
for emitting #GtkCellEditable::remove-widget.
#NAME: left
#PARENT: Gtk.JunctionSides
#COMMENT: Element connects on the left side.
#NAME: position
#PARENT: Gtk.MenuShellClass.insert.insert.none
#COMMENT: The position in the item list where @child
    is added. Positions are numbered from 0 to n-1
#NAME: set_state
#PARENT: Gtk.Widget
#COMMENT: This function is for use in widget implementations. Sets the state
of a widget (insensitive, prelighted, etc.) Usually you should set
the state using wrapper functions such as gtk_widget_set_sensitive().
#NAME: geometry
#PARENT: Gtk.Window.set_geometry_hints.none
#COMMENT: struct containing geometry information or %NULL
#NAME: window_title
#PARENT: Gtk.test_display_button_window.Widget
#COMMENT: Title of the window to be displayed.
#NAME: clipboard
#PARENT: Gtk.ClipboardTextReceivedFunc.none
#COMMENT: the #GtkClipboard
#NAME: offset
#PARENT: Gtk.GesturePan.pan.none
#COMMENT: Offset along the gesture orientation
#NAME: STYLE_PROVIDER_PRIORITY_THEME
#PARENT: Gtk
#COMMENT: The priority used for style information provided
by themes.
#NAME: distribute_natural_allocation
#PARENT: Gtk.distribute_natural_allocation
#COMMENT: The remainder of @extra_space after redistributing space
to @sizes.
#NAME: get_subtitle
#PARENT: Gtk.HeaderBar.get_subtitle
#COMMENT: the subtitle of the header, or %NULL if none has
   been set explicitly. The returned string is owned by the widget
   and must not be modified or freed.
#NAME: context
#PARENT: Gtk.PrintContext.get_dpi_x.gdouble
#COMMENT: a #GtkPrintContext
#NAME: render_background
#PARENT: Gtk
#COMMENT: Renders the background of an element.

Typical background rendering, showing the effect of
`background-image`, `border-width` and `border-radius`:

![](background.png)
#NAME: pos
#PARENT: Gtk.IconView.set_drag_dest_item.none
#COMMENT: Specifies where to drop, relative to the item
#NAME: toggle_button
#PARENT: Gtk.ToggleButton.get_active.gboolean
#COMMENT: a #GtkToggleButton.
#NAME: time_
#PARENT: Gtk.drag_finish.none
#COMMENT: the timestamp from the #GtkWidget::drag-drop signal
#NAME: add_mime_type
#PARENT: Gtk.FileFilter
#COMMENT: Adds a rule allowing a given mime type to @filter.
#NAME: row
#PARENT: Gtk.ListBoxForeachFunc.none
#COMMENT: a #GtkListBoxRow
#NAME: get_input_hints
#PARENT: Gtk.TextView
#COMMENT: Gets the value of the #GtkTextView:input-hints property.
#NAME: within_margin
#PARENT: Gtk.TextView.scroll_to_iter.gboolean
#COMMENT: margin as a [0.0,0.5) fraction of screen size
#NAME: use_header_bar
#PARENT: Gtk.DialogFlags
#COMMENT: Create dialog with actions in header
    bar instead of action area. Since 3.12.
#NAME: widget
#PARENT: Gtk.WidgetClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: a #GtkWidget instance
#NAME: settings
#PARENT: Gtk.PrintSettings.get_quality.PrintQuality
#COMMENT: a #GtkPrintSettings
#NAME: angle
#PARENT: Gtk.render_arrow.none
#COMMENT: arrow angle from 0 to 2 * %G_PI, being 0 the arrow pointing to the north
#NAME: natural_width
#PARENT: Gtk.CellAreaContext.push_preferred_width.none
#COMMENT: the proposed new natural width for @context
#NAME: get_sensitive
#PARENT: Gtk.Action.get_sensitive
#COMMENT: %TRUE if the action itself is sensitive.
#NAME: setting
#PARENT: Gtk.Entry.set_has_frame.none
#COMMENT: new value
#NAME: ref
#PARENT: Gtk.Gradient
#COMMENT: Increases the reference count of @gradient.
#NAME: complete
#PARENT: Gtk.EntryCompletion
#COMMENT: Requests a completion operation, or in other words a refiltering of the
current list with completions, using the current key. The completion list
view will be updated accordingly.
#NAME: MessageDialog
#PARENT: Gtk
#COMMENT: #GtkMessageDialog presents a dialog with some message text. It’s simply a
convenience widget; you could construct the equivalent of #GtkMessageDialog
from #GtkDialog without too much effort, but #GtkMessageDialog saves typing.

One difference from #GtkDialog is that #GtkMessageDialog sets the
#GtkWindow:skip-taskbar-hint property to %TRUE, so that the dialog is hidden
from the taskbar by default.

The easiest way to do a modal message dialog is to use gtk_dialog_run(), though
you can also pass in the %GTK_DIALOG_MODAL flag, gtk_dialog_run() automatically
makes the dialog modal and waits for the user to respond to it. gtk_dialog_run()
returns when any dialog button is clicked.

An example for using a modal dialog:
|[<!-- language="C" -->
 GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;
 dialog = gtk_message_dialog_new (parent_window,
                                  flags,
                                  GTK_MESSAGE_ERROR,
                                  GTK_BUTTONS_CLOSE,
                                  "Error reading “%s”: %s",
                                  filename,
                                  g_strerror (errno));
 gtk_dialog_run (GTK_DIALOG (dialog));
 gtk_widget_destroy (dialog);
]|

You might do a non-modal #GtkMessageDialog as follows:

An example for a non-modal dialog:
|[<!-- language="C" -->
 GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;
 dialog = gtk_message_dialog_new (parent_window,
                                  flags,
                                  GTK_MESSAGE_ERROR,
                                  GTK_BUTTONS_CLOSE,
                                  "Error reading “%s”: %s",
                                  filename,
                                  g_strerror (errno));

 // Destroy the dialog when the user responds to it
 // (e.g. clicks a button)

 g_signal_connect_swapped (dialog, "response",
                           G_CALLBACK (gtk_widget_destroy),
                           dialog);
]|

# GtkMessageDialog as GtkBuildable

The GtkMessageDialog implementation of the GtkBuildable interface exposes
the message area as an internal child with the name “message_area”.
#NAME: path
#PARENT: Gtk.TreeModel.row-deleted.none
#COMMENT: a #GtkTreePath-struct identifying the row
#NAME: entry
#PARENT: Gtk.Entry.set_icon_activatable.none
#COMMENT: A #GtkEntry
#NAME: widget
#PARENT: Gtk.CellAreaClass.render.render.none
#COMMENT: the #GtkWidget that @area is rendering to
#NAME: list_action_prefixes
#PARENT: Gtk.Widget.list_action_prefixes
#COMMENT: a %NULL-terminated array of strings.
#NAME: info
#PARENT: Gtk.RecentInfo.exists.gboolean
#COMMENT: a #GtkRecentInfo
#NAME: set_use_color
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_USE_COLOR.
#NAME: y
#PARENT: Gtk.TextView.get_line_yrange.none
#COMMENT: return location for a y coordinate
#NAME: was_grabbed
#PARENT: Gtk.Widget.grab-notify.none
#COMMENT: %FALSE if the widget becomes shadowed, %TRUE
              if it becomes unshadowed
#NAME: signal_desc
#PARENT: Gtk.binding_entry_add_signal_from_string.GLib.TokenType
#COMMENT: a signal description
#NAME: get_proxies
#PARENT: Gtk.Action.get_proxies
#COMMENT: a #GSList of proxy widgets. The list is owned by GTK+
and must not be modified.
#NAME: box
#PARENT: Gtk.Box.set_child_packing.none
#COMMENT: a #GtkBox
#NAME: container
#PARENT: Gtk.Container.forall.none
#COMMENT: a #GtkContainer
#NAME: child
#PARENT: Gtk.ContainerClass.get_path_for_child.get_path_for_child.WidgetPath
#COMMENT: a child of @container
#NAME: result
#PARENT: Gtk.PrintOperation.done.none
#COMMENT: the result of the print operation
#NAME: set_redraw_on_allocate
#PARENT: Gtk.Widget
#COMMENT: Sets whether the entire widget is queued for drawing when its size
allocation changes. By default, this setting is %TRUE and
the entire widget is redrawn on every size change. If your widget
leaves the upper left unchanged when made bigger, turning this
setting off will improve performance.

Note that for widgets where gtk_widget_get_has_window() is %FALSE
setting this flag to %FALSE turns off all allocation on resizing:
the widget will not even redraw if its position changes; this is to
allow containers that don’t draw anything to avoid excess
invalidations. If you set this flag on a widget with no window that
does draw on @widget->window, you are
responsible for invalidating both the old and new allocation of the
widget when the widget is moved and responsible for invalidating
regions newly when the widget increases size.
#NAME: print_error_quark
#PARENT: Gtk.print_error_quark
#COMMENT: The error quark used for #GtkPrintOperation errors.
#NAME: position
#PARENT: Gtk.Editable.set_position.none
#COMMENT: the position of the cursor
#NAME: icon
#PARENT: Gtk.ModelButton
#COMMENT: A #GIcon that will be used if iconic appearance for the button is
desired.
#NAME: get_use_color
#PARENT: Gtk.PrintSettings.get_use_color
#COMMENT: whether to use color
#NAME: widget
#PARENT: Gtk.paint_tab.none
#COMMENT: the widget
#NAME: render_icon_pixbuf
#PARENT: Gtk.IconSet
#COMMENT: Renders an icon using gtk_render_icon_pixbuf(). In most cases,
gtk_widget_render_icon_pixbuf() is better, since it automatically provides
most of the arguments from the current widget settings.  This
function never returns %NULL; if the icon can’t be rendered
(perhaps because an image file fails to load), a default "missing
image" icon will be returned instead.
#NAME: get_copy_target_list
#PARENT: Gtk.TextBuffer
#COMMENT: This function returns the list of targets this text buffer can
provide for copying and as DND source. The targets in the list are
added with @info values from the #GtkTextBufferTargetInfo enum,
using gtk_target_list_add_rich_text_targets() and
gtk_target_list_add_text_targets().
#NAME: x
#PARENT: Gtk.Widget.queue_draw_area.none
#COMMENT: x coordinate of upper-left corner of rectangle to redraw
#NAME: CellAllocCallback
#PARENT: Gtk
#COMMENT: The type of the callback functions used for iterating over the
cell renderers and their allocated areas inside a #GtkCellArea,
see gtk_cell_area_foreach_alloc().
#NAME: STOCK_SELECT_ALL
#PARENT: Gtk
#COMMENT: The “Select All” item and icon.
#NAME: text_view
#PARENT: Gtk.TextView.set_left_margin.none
#COMMENT: a #GtkTextView
#NAME: sort_column_id
#PARENT: Gtk.TreeSortableIface.get_sort_column_id.get_sort_column_id.gboolean
#COMMENT: The sort column id to be filled in
#NAME: y
#PARENT: Gtk.Widget.queue_draw_area.none
#COMMENT: y coordinate of upper-left corner of rectangle to redraw
#NAME: get_wide_handle
#PARENT: Gtk.Paned
#COMMENT: Gets the #GtkPaned:wide-handle property.
#NAME: location
#PARENT: Gtk.TextBuffer.insert-text.none
#COMMENT: position to insert @text in @textbuffer
#NAME: queue_draw
#PARENT: Gtk.Widget
#COMMENT: Equivalent to calling gtk_widget_queue_draw_area() for the
entire area of a widget.
#NAME: id
#PARENT: Gtk.Application.get_menu_by_id.Gio.Menu
#COMMENT: the id of the menu to look up
#NAME: chooser
#PARENT: Gtk.RecentChooser.select_uri.gboolean
#COMMENT: a #GtkRecentChooser
#NAME: height
#PARENT: Gtk.render_option.none
#COMMENT: rectangle height
#NAME: stock_id
#PARENT: Gtk.IconFactory.lookup.IconSet
#COMMENT: an icon name
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.set_show_desktop.none
#COMMENT: a places sidebar
#NAME: get_baseline_position
#PARENT: Gtk.Box
#COMMENT: Gets the value set by gtk_box_set_baseline_position().
#NAME: find
#PARENT: Gtk.AccelGroup
#COMMENT: Finds the first entry in an accelerator group for which
@find_func returns %TRUE and returns its #GtkAccelKey.
#NAME: get_label_widget
#PARENT: Gtk.Expander
#COMMENT: Retrieves the label widget for the frame. See
gtk_expander_set_label_widget().
#NAME: minimum_size
#PARENT: Gtk.CellRenderer.get_preferred_height.none
#COMMENT: location to store the minimum size, or %NULL
#NAME: get_image
#PARENT: Gtk.Button
#COMMENT: Gets the widget that is currenty set as the image of @button.
This may have been explicitly set by gtk_button_set_image()
or constructed by gtk_button_new_from_stock().
#NAME: path_type
#PARENT: Gtk.BindingSet.add_path.none
#COMMENT: path type the pattern applies to
#NAME: get_show_all
#PARENT: Gtk.AppChooserWidget.get_show_all
#COMMENT: the value of #GtkAppChooserWidget:show-all
#NAME: capture
#PARENT: Gtk.PropagationPhase
#COMMENT: Events are delivered in the capture phase. The
  capture phase happens before the bubble phase, runs from the toplevel down
  to the event widget. This option should only be used on containers that
  might possibly handle events before their children do.
#NAME: STOCK_JUSTIFY_RIGHT
#PARENT: Gtk
#COMMENT: The “Right” item and icon.
#NAME: buffer
#PARENT: Gtk.TextBuffer.set_text.none
#COMMENT: a #GtkTextBuffer
#NAME: get_shadow_type
#PARENT: Gtk.Viewport.get_shadow_type
#COMMENT: the shadow type
#NAME: widget
#PARENT: Gtk.Widget.get_device_events.Gdk.EventMask
#COMMENT: a #GtkWidget
#NAME: x
#PARENT: Gtk.render_layout.none
#COMMENT: X origin
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_targets.gboolean
#COMMENT: a #GtkSelectionData object
#NAME: count
#PARENT: Gtk.TextIter.backward_chars.gboolean
#COMMENT: number of characters to move
#NAME: y
#PARENT: Gtk.render_layout.none
#COMMENT: Y origin
#NAME: area
#PARENT: Gtk.CellArea.get_focus_cell.CellRenderer
#COMMENT: a #GtkCellArea
#NAME: notebook
#PARENT: Gtk.Notebook.get_tab_reorderable.gboolean
#COMMENT: a #GtkNotebook
#NAME: drag_source
#PARENT: Gtk.TreeDragSourceIface.row_draggable.row_draggable.gboolean
#COMMENT: a #GtkTreeDragSource
#NAME: reset_rc_styles
#PARENT: Gtk.Widget
#COMMENT: Reset the styles of @widget and all descendents, so when
they are looked up again, they get the correct values
for the currently loaded RC file settings.

This function is not useful for applications.
#NAME: parse_enum
#PARENT: Gtk.RcProperty
#COMMENT: A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a single
enumeration value.

The enumeration value can be specified by its name, its nickname or
its numeric value. For consistency with flags parsing, the value
may be surrounded by parentheses.
#NAME: set_label
#PARENT: Gtk.Action
#COMMENT: Sets the label of @action.
#NAME: get_device_events
#PARENT: Gtk.Widget
#COMMENT: Returns the events mask for the widget corresponding to an specific device. These
are the events that the widget will receive when @device operates on it.
#NAME: template_bytes
#PARENT: Gtk.WidgetClass.set_template.none
#COMMENT: A #GBytes holding the #GtkBuilder XML
#NAME: row
#PARENT: Gtk.ListBoxFilterFunc.gboolean
#COMMENT: the row that may be filtered
#NAME: ToolButton
#PARENT: Gtk
#COMMENT: #GtkToolButtons are #GtkToolItems containing buttons.

Use gtk_tool_button_new() to create a new #GtkToolButton.

The label of a #GtkToolButton is determined by the properties
#GtkToolButton:label-widget, #GtkToolButton:label, and
#GtkToolButton:stock-id. If #GtkToolButton:label-widget is
non-%NULL, then that widget is used as the label. Otherwise, if
#GtkToolButton:label is non-%NULL, that string is used as the label.
Otherwise, if #GtkToolButton:stock-id is non-%NULL, the label is
determined by the stock item. Otherwise, the button does not have a label.

The icon of a #GtkToolButton is determined by the properties
#GtkToolButton:icon-widget and #GtkToolButton:stock-id. If
#GtkToolButton:icon-widget is non-%NULL, then
that widget is used as the icon. Otherwise, if #GtkToolButton:stock-id is
non-%NULL, the icon is determined by the stock item. Otherwise,
the button does not have a icon.
#NAME: parser_finished
#PARENT: Gtk.Buildable
#COMMENT: Called when the builder finishes the parsing of a
[GtkBuilder UI definition][BUILDER-UI].
Note that this will be called once for each time
gtk_builder_add_from_file() or gtk_builder_add_from_string()
is called on a builder.
#NAME: xpad
#PARENT: Gtk.Misc.set_padding.none
#COMMENT: the amount of space to add on the left and right of the widget,
  in pixels.
#NAME: STYLE_CLASS_PULSE
#PARENT: Gtk
#COMMENT: A CSS class to use when rendering a pulse in an indeterminate progress bar.

This is used by #GtkProgressBar and #GtkEntry.
#NAME: set_from_gicon
#PARENT: Gtk.StatusIcon
#COMMENT: Makes @status_icon display the #GIcon.
See gtk_status_icon_new_from_gicon() for details.
#NAME: path
#PARENT: Gtk.TreeModelIface.row_has_child_toggled.row_has_child_toggled.none
#COMMENT: a #GtkTreePath-struct pointing to the changed row
#NAME: events
#PARENT: Gtk.Widget.set_events.none
#COMMENT: event mask
#NAME: icon_view
#PARENT: Gtk.IconView.get_item_width.gint
#COMMENT: a #GtkIconView
#NAME: add_palette
#PARENT: Gtk.ColorChooser
#COMMENT: Adds a palette to the color chooser. If @orientation is horizontal,
the colors are grouped in rows, with @colors_per_line colors
in each row. If @horizontal is %FALSE, the colors are grouped
in columns instead.

The default color palette of #GtkColorChooserWidget has
27 colors, organized in columns of 3 colors. The default gray
palette has 9 grays in a single row.

The layout of the color chooser widget works best when the
palettes have 9-10 columns.

Calling this function for the first time has the
side effect of removing the default color and gray palettes
from the color chooser.

If @colors is %NULL, removes all previously added palettes.
#NAME: AccelFlags
#PARENT: Gtk
#COMMENT: Accelerator flags used with gtk_accel_group_connect().
#NAME: info
#PARENT: Gtk.RecentInfo.last_application.utf8
#COMMENT: a #GtkRecentInfo
#NAME: area
#PARENT: Gtk.GLArea.get_auto_render.gboolean
#COMMENT: a #GtkGLArea
#NAME: up
#PARENT: Gtk.ArrowType
#COMMENT: Represents an upward pointing arrow.
#NAME: drop_right
#PARENT: Gtk.IconViewDropPosition
#COMMENT: dropped item is inserted to the right
#NAME: get_message_type
#PARENT: Gtk.InfoBar.get_message_type
#COMMENT: the message type of the message area.
#NAME: region_name
#PARENT: Gtk.StyleContext.remove_region.none
#COMMENT: region name to unset
#NAME: user_data
#PARENT: Gtk.TextBuffer.register_deserialize_format.Gdk.Atom
#COMMENT: @function’s user_data
#NAME: set_use_drag_window
#PARENT: Gtk.ToolItem
#COMMENT: Sets whether @tool_item has a drag window. When %TRUE the
toolitem can be used as a drag source through gtk_drag_source_set().
When @tool_item has a drag window it will intercept all events,
even those that would otherwise be sent to a child of @tool_item.
#NAME: actionable
#PARENT: Gtk.ActionableInterface.get_action_target_value.get_action_target_value.GLib.Variant
#COMMENT: a #GtkActionable widget
#NAME: cell_layout
#PARENT: Gtk.CellLayoutIface.get_area.get_area.CellArea
#COMMENT: a #GtkCellLayout
#NAME: start_pos
#PARENT: Gtk.Editable.select_region.none
#COMMENT: start of region
#NAME: icon_theme
#PARENT: Gtk.IconTheme.has_icon.gboolean
#COMMENT: a #GtkIconTheme
#NAME: get_use_underline
#PARENT: Gtk.MenuItem
#COMMENT: Checks if an underline in the text indicates the next character
should be used for the mnemonic accelerator key.
#NAME: btrl
#PARENT: Gtk.NumberUpLayout
#COMMENT: ![](layout-btrl.png)
#NAME: get_count
#PARENT: Gtk.NumerableIcon.get_count
#COMMENT: the currently displayed value
#NAME: object
#PARENT: Gtk.TextTag.event.gboolean
#COMMENT: the object the event was fired from (typically a #GtkTextView)
#NAME: right
#PARENT: Gtk.TextWindowType
#COMMENT: Right side border window.
#NAME: clickable
#PARENT: Gtk.TreeViewColumn.set_clickable.none
#COMMENT: %TRUE if the header is active.
#NAME: accel_label
#PARENT: Gtk.AccelLabel.set_accel.none
#COMMENT: a #GtkAccelLabel
#NAME: phone
#PARENT: Gtk.InputPurpose
#COMMENT: Edited field expects phone number
#NAME: action
#PARENT: Gtk.RadioAction.join_group.none
#COMMENT: the action object
#NAME: path_reversed
#PARENT: Gtk.Widget.class_path.none
#COMMENT: location to store the reverse
    class path as an allocated string, or %NULL
#NAME: set_align_widget
#PARENT: Gtk.MenuButton
#COMMENT: Sets the #GtkWidget to use to line the menu with when popped up.
Note that the @align_widget must contain the #GtkMenuButton itself.

Setting it to %NULL means that the menu will be aligned with the
button itself.

Note that this property is only used with menus currently,
and not for popovers.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_resolution_xy.none
#COMMENT: a #GtkPrintSettings
#NAME: convert_path_to_child_path
#PARENT: Gtk.TreeModelFilter
#COMMENT: Converts @filter_path to a path on the child model of @filter. That is,
@filter_path points to a location in @filter. The returned path will
point to the same location in the model not being filtered. If @filter_path
does not point to a location in the child model, %NULL is returned.
#NAME: set_add_tearoffs
#PARENT: Gtk.UIManager
#COMMENT: Sets the “add_tearoffs” property, which controls whether menus
generated by this #GtkUIManager will have tearoff menu items.

Note that this only affects regular menus. Generated popup
menus never have tearoff menu items.
#NAME: set_with_data
#PARENT: Gtk.Clipboard.set_with_data
#COMMENT: %TRUE if setting the clipboard data succeeded.
   If setting the clipboard data failed the provided callback
   functions will be ignored.
#NAME: grid
#PARENT: Gtk.Grid.get_child_at.Widget
#COMMENT: a #GtkGrid
#NAME: position
#PARENT: Gtk.ToolItemGroup.insert.none
#COMMENT: the position of @item in @group, starting with 0.
    The position -1 means end of list.
#NAME: clip
#PARENT: Gtk.Widget.get_clip.none
#COMMENT: a pointer to a #GtkAllocation to copy to
#NAME: iter
#PARENT: Gtk.TreeModel.iter_parent.gboolean
#COMMENT: the new #GtkTreeIter-struct to set to the parent
#NAME: markup
#PARENT: Gtk.EntryCompletion.insert_action_markup.none
#COMMENT: markup of the item to insert
#NAME: remove_mnemonic_label
#PARENT: Gtk.Widget
#COMMENT: Removes a widget from the list of mnemonic labels for
this widget. (See gtk_widget_list_mnemonic_labels()). The widget
must have previously been added to the list with
gtk_widget_add_mnemonic_label().
#NAME: get_attach_widget
#PARENT: Gtk.Menu.get_attach_widget
#COMMENT: the #GtkWidget that the menu is attached to
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_iter_at_child_anchor.none
#COMMENT: a #GtkTextBuffer
#NAME: pixbuf
#PARENT: Gtk.ImageType
#COMMENT: the widget contains a #GdkPixbuf
#NAME: get_increments
#PARENT: Gtk.SpinButton
#COMMENT: Gets the current step and page the increments used by @spin_button. See
gtk_spin_button_set_increments().
#NAME: cr
#PARENT: Gtk.paint_arrow.none
#COMMENT: a #cairo_t
#NAME: widget
#PARENT: Gtk.Widget.get_state_flags.StateFlags
#COMMENT: a #GtkWidget
#NAME: path
#PARENT: Gtk.WidgetPath.iter_has_qclass.gboolean
#COMMENT: a #GtkWidgetPath
#NAME: get_label_fill
#PARENT: Gtk.Expander
#COMMENT: Returns whether the label widget will fill all available
horizontal space allocated to @expander.
#NAME: wait_is_target_available
#PARENT: Gtk.Clipboard
#COMMENT: Checks if a clipboard supports pasting data of a given type. This
function can be used to determine if a “Paste” menu item should be
insensitive or not.

If you want to see if there’s text available on the clipboard, use
gtk_clipboard_wait_is_text_available () instead.
#NAME: parent_class
#PARENT: Gtk.BoxClass
#COMMENT: The parent class.
#NAME: clipboard
#PARENT: Gtk.Clipboard.wait_is_uris_available.gboolean
#COMMENT: a #GtkClipboard
#NAME: get_frame_clock
#PARENT: Gtk.StyleContext.get_frame_clock
#COMMENT: a #GdkFrameClock, or %NULL
 if @context does not have an attached frame clock.
#NAME: set
#PARENT: Gtk.SelectionData
#COMMENT: Stores new data into a #GtkSelectionData object. Should
only be called from a selection handler callback.
Zero-terminates the stored data.
#NAME: context
#PARENT: Gtk.StyleContext.get_font.Pango.FontDescription
#COMMENT: a #GtkStyleContext
#NAME: child_path
#PARENT: Gtk.TreeModelSort.convert_child_path_to_path.TreePath
#COMMENT: A #GtkTreePath to convert
#NAME: get_reorderable
#PARENT: Gtk.TreeView.get_reorderable
#COMMENT: %TRUE if the tree can be reordered.
#NAME: get_accel_path
#PARENT: Gtk.Menu
#COMMENT: Retrieves the accelerator path set on the menu.
#NAME: widget
#PARENT: Gtk.Widget.drag_get_data.none
#COMMENT: the widget that will receive the
  #GtkWidget::drag-data-received signal
#NAME: CellLayoutDataFunc
#PARENT: Gtk
#COMMENT: A function which should set the value of @cell_layout’s cell renderer(s)
as appropriate.
#NAME: set_shadow_type
#PARENT: Gtk.Frame
#COMMENT: Sets the shadow type for @frame.
#NAME: has_class
#PARENT: Gtk.ThemingEngine.has_class
#COMMENT: %TRUE if @engine has @class_name defined
#NAME: tree_view
#PARENT: Gtk.TreeView.get_reorderable.gboolean
#COMMENT: a #GtkTreeView
#NAME: translator_credits
#PARENT: Gtk.AboutDialog.set_translator_credits.none
#COMMENT: the translator credits
#NAME: scroll-event
#PARENT: Gtk.StatusIcon.scroll-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: get_show_expanders
#PARENT: Gtk.TreeView.get_show_expanders
#COMMENT: %TRUE if expanders are drawn in @tree_view, %FALSE
otherwise.
#NAME: new
#PARENT: Gtk.ActionGroup.new
#COMMENT: the new #GtkActionGroup
#NAME: parent_class
#PARENT: Gtk.ButtonBoxClass
#COMMENT: The parent class.
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_length.gint
#COMMENT: a pointer to a #GtkSelectionData-struct.
#NAME: anchor
#PARENT: Gtk.TextBuffer.insert_child_anchor.none
#COMMENT: a #GtkTextChildAnchor
#NAME: get_orientation
#PARENT: Gtk.ToolShellIface.get_orientation.get_orientation
#COMMENT: the current orientation of @shell
#NAME: sensitive
#PARENT: Gtk.Entry.set_icon_sensitive.none
#COMMENT: Specifies whether the icon should appear
            sensitive or insensitive
#NAME: test_slider_get_value
#PARENT: Gtk.test_slider_get_value
#COMMENT: gtk_adjustment_get_value (adjustment) for an adjustment belonging to @widget.
#NAME: path
#PARENT: Gtk.StyleProviderIface.get_style.get_style.StyleProperties
#COMMENT: #GtkWidgetPath to query
#NAME: tx
#PARENT: Gtk.TreeView.convert_bin_window_to_tree_coords.none
#COMMENT: return location for tree X coordinate
#NAME: get_row_at_y
#PARENT: Gtk.ListBox.get_row_at_y
#COMMENT: the row
#NAME: ty
#PARENT: Gtk.TreeView.convert_bin_window_to_tree_coords.none
#COMMENT: return location for tree Y coordinate
#NAME: event
#PARENT: Gtk.Widget.configure-event.gboolean
#COMMENT: the #GdkEventConfigure which triggered
  this signal.
#NAME: container
#PARENT: Gtk.Container.child_type.GType
#COMMENT: a #GtkContainer
#NAME: get_text
#PARENT: Gtk.EntryBuffer.get_text
#COMMENT: a pointer to the contents of the widget as a
     string. This string points to internally allocated
     storage in the buffer and must not be freed, modified or
     stored.
#NAME: get_hard_margins
#PARENT: Gtk.PrintContext
#COMMENT: Obtains the hardware printer margins of the #GtkPrintContext, in units.
#NAME: prefix
#PARENT: Gtk.Widget.get_action_group.Gio.ActionGroup
#COMMENT: The “prefix” of the action group.
#NAME: label
#PARENT: Gtk.Button.new_with_mnemonic.Widget
#COMMENT: The text of the button, with an underscore in front of the
        mnemonic character
#NAME: get_current_color
#PARENT: Gtk.ColorSelection
#COMMENT: Sets @color to be the current color in the GtkColorSelection widget.
#NAME: editable
#PARENT: Gtk.Editable.copy_clipboard.none
#COMMENT: a #GtkEditable
#NAME: uri
#PARENT: Gtk.RecentManager.add_full.gboolean
#COMMENT: a valid URI
#NAME: forward_sentence_ends
#PARENT: Gtk.TextIter.forward_sentence_ends
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: widget
#PARENT: Gtk.Widget.child_notify.none
#COMMENT: a #GtkWidget
#NAME: WidgetHelpType
#PARENT: Gtk
#COMMENT: Kinds of widget-specific help. Used by the ::show-help signal.
#NAME: get_icon_activatable
#PARENT: Gtk.Entry.get_icon_activatable
#COMMENT: %TRUE if the icon is activatable.
#NAME: gpl_2_0_only
#PARENT: Gtk.License
#COMMENT: The GNU General Public License, version 2.0 only. Since 3.12.
#NAME: unselect_all
#PARENT: Gtk.RecentChooser
#COMMENT: Unselects all the items inside @chooser.
#NAME: style
#PARENT: Gtk.ToolPalette.set_style.none
#COMMENT: the #GtkToolbarStyle that items in the tool palette shall have
#NAME: end
#PARENT: Gtk.TextBuffer.apply-tag.none
#COMMENT: the end of the range the tag is applied to
#NAME: get_child_anchor
#PARENT: Gtk.TextIter.get_child_anchor
#COMMENT: the anchor at @iter
#NAME: mark
#PARENT: Gtk.TextView.scroll_to_mark.none
#COMMENT: a #GtkTextMark
#NAME: scale
#PARENT: Gtk.Scale.get_digits.gint
#COMMENT: a #GtkScale
#NAME: toggle_size_allocate
#PARENT: Gtk.MenuItem
#COMMENT: Emits the #GtkMenuItem::toggle-size-allocate signal on the given item.
#NAME: is_showing
#PARENT: Gtk.MountOperation
#COMMENT: Returns whether the #GtkMountOperation is currently displaying
a window.
#NAME: chooser
#PARENT: Gtk.RecentChooserIface.select_all.select_all.none
#COMMENT: a #GtkRecentChooser
#NAME: lookup_item
#PARENT: Gtk.RecentManager.lookup_item
#COMMENT: a #GtkRecentInfo-struct containing information
  about the resource pointed by @uri, or %NULL if the URI was
  not registered in the recently used resources list. Free with
  gtk_recent_info_unref().
#NAME: get_color
#PARENT: Gtk.StyleContext
#COMMENT: Gets the foreground color for a given state.
#NAME: get_icon_size
#PARENT: Gtk.Toolbar
#COMMENT: Retrieves the icon size for the toolbar. See gtk_toolbar_set_icon_size().
#NAME: iter
#PARENT: Gtk.TreeSelection.get_selected.gboolean
#COMMENT: The #GtkTreeIter, or NULL.
#NAME: set_resize_mode
#PARENT: Gtk.Container
#COMMENT: Sets the resize mode for the container.

The resize mode of a container determines whether a resize request
will be passed to the container’s parent, queued for later execution
or executed immediately.
#NAME: context
#PARENT: Gtk.IconInfo.load_symbolic_for_context_async.none
#COMMENT: a #GtkStyleContext
#NAME: columns
#PARENT: Gtk.IconView
#COMMENT: The columns property contains the number of the columns in which the
items should be displayed. If it is -1, the number of columns will
be chosen automatically to fill the available area.
#NAME: def
#PARENT: Gtk.PrintSettings.get_double_with_default.gdouble
#COMMENT: the default value
#NAME: set_visible_vertical
#PARENT: Gtk.Action
#COMMENT: Sets whether @action is visible when vertical
#NAME: set_progress_pulse_step
#PARENT: Gtk.Entry
#COMMENT: Sets the fraction of total entry width to move the progress
bouncing block for each call to gtk_entry_progress_pulse().
#NAME: hints
#PARENT: Gtk.Entry.set_input_hints.none
#COMMENT: the hints
#NAME: path
#PARENT: Gtk.CellRendererText.edited.none
#COMMENT: the path identifying the edited cell
#NAME: new_with_markup
#PARENT: Gtk.MessageDialog
#COMMENT: Creates a new message dialog, which is a simple dialog with some text that
is marked up with the [Pango text markup language][PangoMarkupFormat].
When the user clicks a button a “response” signal is emitted with
response IDs from #GtkResponseType. See #GtkDialog for more details.

Special XML characters in the printf() arguments passed to this
function will automatically be escaped as necessary.
(See g_markup_printf_escaped() for how this is implemented.)
Usually this is what you want, but if you have an existing
Pango markup string that you want to use literally as the
label, then you need to use gtk_message_dialog_set_markup()
instead, since you can’t pass the markup string either
as the format (it might contain “%” characters) or as a string
argument.
|[<!-- language="C" -->
 GtkWidget *dialog;
 GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;
 dialog = gtk_message_dialog_new (parent_window,
                                  flags,
                                  GTK_MESSAGE_ERROR,
                                  GTK_BUTTONS_CLOSE,
                                  NULL);
 gtk_message_dialog_set_markup (GTK_MESSAGE_DIALOG (dialog),
                                markup);
]|
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.set_local_only.none
#COMMENT: a places sidebar
#NAME: set_track_print_status
#PARENT: Gtk.PrintOperation
#COMMENT: If track_status is %TRUE, the print operation will try to continue report
on the status of the print job in the printer queues and printer. This
can allow your application to show things like “out of paper” issues,
and when the print job actually reaches the printer.

This function is often implemented using some form of polling, so it should
not be enabled unless needed.
#NAME: translation_domain
#PARENT: Gtk.StockItem
#COMMENT: Translation domain of the menu or toolbar item
#NAME: tree_model
#PARENT: Gtk.TreeModel.get_path.TreePath
#COMMENT: a #GtkTreeModel
#NAME: chooser
#PARENT: Gtk.FileChooser.add_shortcut_folder_uri.gboolean
#COMMENT: a #GtkFileChooser
#NAME: widget
#PARENT: Gtk.Widget.drag_source_unset.none
#COMMENT: a #GtkWidget
#NAME: get_exclusive
#PARENT: Gtk.GestureSingle.get_exclusive
#COMMENT: Whether the gesture is exclusive
#NAME: application
#PARENT: Gtk.AppChooserWidget.application-activated.none
#COMMENT: the activated #GAppInfo
#NAME: index
#PARENT: Gtk.EntryCompletion.action-activated.none
#COMMENT: the index of the activated action
#NAME: get_tree_view
#PARENT: Gtk.TreeSelection
#COMMENT: Returns the tree view associated with @selection.
#NAME: list
#PARENT: Gtk.target_table_new_from_list.TargetEntry
#COMMENT: a #GtkTargetList
#NAME: style
#PARENT: Gtk.Style.copy.Style
#COMMENT: a #GtkStyle
#NAME: change_entry
#PARENT: Gtk.AccelMap.change_entry
#COMMENT: %TRUE if the accelerator could be changed, %FALSE otherwise
#NAME: new_with_label
#PARENT: Gtk.LinkButton.new_with_label
#COMMENT: a new link button widget.
#NAME: iter
#PARENT: Gtk.TextView.get_iter_at_position.none
#COMMENT: a #GtkTextIter
#NAME: TreeModelForeachFunc
#PARENT: Gtk.TreeModelForeachFunc
#COMMENT: %TRUE to stop iterating, %FALSE to continue
#NAME: get_image
#PARENT: Gtk.Button.get_image
#COMMENT: a #GtkWidget or %NULL in case there is no image
#NAME: get_use_alpha
#PARENT: Gtk.ColorButton.get_use_alpha
#COMMENT: %TRUE if the color sample uses alpha channel, %FALSE if not
#NAME: bg
#PARENT: Gtk.RcFlags
#COMMENT: Deprecated
#NAME: set_level_indentation
#PARENT: Gtk.TreeView
#COMMENT: Sets the amount of extra indentation for child levels to use in @tree_view
in addition to the default indentation.  The value should be specified in
pixels, a value of 0 disables this feature and in this case only the default
indentation will be used.
This does not have any visible effects for lists.
#NAME: parent_class
#PARENT: Gtk.ViewportClass
#COMMENT: The parent class.
#NAME: is_composited
#PARENT: Gtk.Widget.is_composited
#COMMENT: %TRUE if the widget can rely on its alpha
channel being drawn correctly.
#NAME: settings
#PARENT: Gtk.PrintSettings.get_use_color.gboolean
#COMMENT: a #GtkPrintSettings
#NAME: set_accel_path
#PARENT: Gtk.Widget
#COMMENT: Given an accelerator group, @accel_group, and an accelerator path,
@accel_path, sets up an accelerator in @accel_group so whenever the
key binding that is defined for @accel_path is pressed, @widget
will be activated.  This removes any accelerators (for any
accelerator group) installed by previous calls to
gtk_widget_set_accel_path(). Associating accelerators with
paths allows them to be modified by the user and the modifications
to be saved for future use. (See gtk_accel_map_save().)

This function is a low level function that would most likely
be used by a menu creation system like #GtkUIManager. If you
use #GtkUIManager, setting up accelerator paths will be done
automatically.

Even when you you aren’t using #GtkUIManager, if you only want to
set up accelerators on menu items gtk_menu_item_set_accel_path()
provides a somewhat more convenient interface.

Note that @accel_path string will be stored in a #GQuark. Therefore, if you
pass a static string, you can save some memory by interning it first with
g_intern_static_string().
#NAME: get_targets
#PARENT: Gtk.SelectionData
#COMMENT: Gets the contents of @selection_data as an array of targets.
This can be used to interpret the results of getting
the standard TARGETS target that is always supplied for
any selection.
#NAME: grab_get_current
#PARENT: Gtk
#COMMENT: Queries the current grab of the default window group.
#NAME: set_fixed_size
#PARENT: Gtk.CellRenderer
#COMMENT: Sets the renderer size to be explicit, independent of the properties set.
#NAME: resize-toplevel
#PARENT: Gtk.Expander
#COMMENT: When this property is %TRUE, the expander will resize the toplevel
widget containing the expander upon expanding and collapsing.
#NAME: list_store
#PARENT: Gtk.ListStore.insert_with_valuesv.none
#COMMENT: A #GtkListStore
#NAME: activate_default
#PARENT: Gtk.Window.activate_default
#COMMENT: %TRUE if a widget got activated.
#NAME: editable
#PARENT: Gtk.Editable.cut_clipboard.none
#COMMENT: a #GtkEditable
#NAME: targets
#PARENT: Gtk.Clipboard.set_with_data.gboolean
#COMMENT: array containing information
    about the available forms for the clipboard data
#NAME: area
#PARENT: Gtk.CellAreaClass.get_preferred_height.get_preferred_height.none
#COMMENT: a #GtkCellArea
#NAME: get_relief_style
#PARENT: Gtk.Toolbar
#COMMENT: Returns the relief style of buttons on @toolbar. See
gtk_button_set_relief().
#NAME: set_default_icon_from_file
#PARENT: Gtk.Window
#COMMENT: Sets an icon to be used as fallback for windows that haven't
had gtk_window_set_icon_list() called on them from a file
on disk. Warns on failure if @err is %NULL.
#NAME: set_logo
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the pixbuf to be displayed as logo in the about dialog.
If it is %NULL, the default window icon set with
gtk_window_set_default_icon() will be used.
#NAME: pos
#PARENT: Gtk.IconView.get_dest_item_at_pos.gboolean
#COMMENT: Return location for the drop position, or %NULL
#NAME: get_mnemonic_widget
#PARENT: Gtk.Label.get_mnemonic_widget
#COMMENT: the target of the label’s mnemonic,
    or %NULL if none has been set and the default algorithm will be used.
#NAME: STYLE_REGION_COLUMN_HEADER
#PARENT: Gtk
#COMMENT: A widget region name to define a treeview column header.
#NAME: btt
#PARENT: Gtk.PackDirection
#COMMENT: Widgets are packed bottom-to-top
#NAME: set_line_offset
#PARENT: Gtk.TextIter
#COMMENT: Moves @iter within a line, to a new character
(not byte) offset. The given character offset must be less than or
equal to the number of characters in the line; if equal, @iter
moves to the start of the next line. See
gtk_text_iter_set_line_index() if you have a byte index rather than
a character offset.
#NAME: list_actions
#PARENT: Gtk.ActionGroup
#COMMENT: Lists the actions in the action group.
#NAME: version
#PARENT: Gtk.AboutDialog
#COMMENT: The version of the program.
#NAME: x
#PARENT: Gtk.Entry.get_layout_offsets.none
#COMMENT: location to store X offset of layout, or %NULL
#NAME: menu_shell
#PARENT: Gtk.MenuShell.get_parent_shell.Widget
#COMMENT: a #GtkMenuShell
#NAME: new
#PARENT: Gtk.Switch.new
#COMMENT: the newly created #GtkSwitch instance
#NAME: set_hadjustment
#PARENT: Gtk.Viewport
#COMMENT: Sets the horizontal adjustment of the viewport.
#NAME: y
#PARENT: Gtk.Entry.get_layout_offsets.none
#COMMENT: location to store Y offset of layout, or %NULL
#NAME: set_title
#PARENT: Gtk.HeaderBar
#COMMENT: Sets the title of the #GtkHeaderBar. The title should help a user
identify the current view. A good title should not include the
application name.
#NAME: reorderable
#PARENT: Gtk.TreeView.set_reorderable.none
#COMMENT: %TRUE, if the tree can be reordered.
#NAME: add_action_with_accel
#PARENT: Gtk.ActionGroup
#COMMENT: Adds an action object to the action group and sets up the accelerator.

If @accelerator is %NULL, attempts to use the accelerator associated
with the stock_id of the action.

Accel paths are set to `<Actions>/group-name/action-name`.
#NAME: set_has_alpha
#PARENT: Gtk.GLArea
#COMMENT: If @has_alpha is %TRUE the buffer allocated by the widget will have
an alpha channel component, and when rendering to the window the
result will be composited over whatever is below the widget.

If @has_alpha is %FALSE there will be no alpha channel, and the
buffer will fully replace anything below the widget.
#NAME: home
#PARENT: Gtk.SpinType
#COMMENT: Go to the adjustments lower bound.
#NAME: new_order
#PARENT: Gtk.TreeModelIface.rows_reordered.rows_reordered.none
#COMMENT: an array of integers mapping the current position of
    each child to its old position before the re-ordering,
    i.e. @new_order`[newpos] = oldpos`
#NAME: action
#PARENT: Gtk.UIManager.post-activate.none
#COMMENT: the action
#NAME: label
#PARENT: Gtk.Label.get_text.utf8
#COMMENT: a #GtkLabel
#NAME: obey_child
#PARENT: Gtk.AspectFrame.set.none
#COMMENT: If %TRUE, @ratio is ignored, and the aspect
 ratio is taken from the requistion of the child.
#NAME: data
#PARENT: Gtk.Buildable.custom_tag_end.none
#COMMENT: user data that will be passed in to parser functions
#NAME: notebook
#PARENT: Gtk.Notebook.set_tab_label_text.none
#COMMENT: a #GtkNotebook
#NAME: path
#PARENT: Gtk.WidgetPath.append_for_widget.gint
#COMMENT: a widget path
#NAME: iter_list_regions
#PARENT: Gtk.WidgetPath.iter_list_regions
#COMMENT: The list of
         regions, This is a list of strings, the #GSList contents
         are owned by GTK+, but you should use g_slist_free() to
         free the list itself.
#NAME: get_border_window_size
#PARENT: Gtk.TextView
#COMMENT: Gets the width of the specified border window. See
gtk_text_view_set_border_window_size().
#NAME: get_documenters
#PARENT: Gtk.AboutDialog.get_documenters
#COMMENT: A
 %NULL-terminated string array containing the documenters. The
 array is owned by the about dialog and must not be modified.
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_uris.utf8
#COMMENT: a #GtkSelectionData
#NAME: new_mix
#PARENT: Gtk.SymbolicColor
#COMMENT: Creates a symbolic color defined as a mix of another
two colors. a mix factor of 0 would resolve to @color1,
while a factor of 1 would resolve to @color2.
#NAME: remove
#PARENT: Gtk.TreeStore
#COMMENT: Removes @iter from @tree_store.  After being removed, @iter is set to the
next valid row at that level, or invalidated if it previously pointed to the
last one.
#NAME: page_setup
#PARENT: Gtk.print_run_page_setup_dialog.PageSetup
#COMMENT: an existing #GtkPageSetup
#NAME: get_use_markup
#PARENT: Gtk.Label
#COMMENT: Returns whether the label’s text is interpreted as marked up with
the [Pango text markup language][PangoMarkupFormat].
See gtk_label_set_use_markup ().
#NAME: iter
#PARENT: Gtk.TextIter.backward_find_char.gboolean
#COMMENT: a #GtkTextIter
#NAME: window
#PARENT: Gtk.WindowGroup.add_window.none
#COMMENT: the #GtkWindow to add
#NAME: button
#PARENT: Gtk.Button.get_image_position.PositionType
#COMMENT: a #GtkButton
#NAME: ref
#PARENT: Gtk.IconSet
#COMMENT: Increments the reference count on @icon_set.
#NAME: new
#PARENT: Gtk.ScrolledWindow
#COMMENT: Creates a new scrolled window.

The two arguments are the scrolled window’s adjustments; these will be
shared with the scrollbars and the child widget to keep the bars in sync
with the child. Usually you want to pass %NULL for the adjustments, which
will cause the scrolled window to create them for you.
#NAME: get_view_window
#PARENT: Gtk.Viewport
#COMMENT: Gets the view window of the #GtkViewport.
#NAME: widget
#PARENT: Gtk.WidgetClass.get_request_mode.get_request_mode.SizeRequestMode
#COMMENT: a #GtkWidget instance
#NAME: name
#PARENT: Gtk.RecentFilter.set_name.none
#COMMENT: then human readable name of @filter
#NAME: gtk-sound-theme-name
#PARENT: Gtk.Settings
#COMMENT: The XDG sound theme to use for event sounds.

See the [Sound Theme Specifications](http://www.freedesktop.org/wiki/Specifications/sound-theme-spec)
for more information on event sounds and sound themes.

GTK+ itself does not support event sounds, you have to use a loadable
module like the one that comes with libcanberra.
#NAME: get_opacity
#PARENT: Gtk.Widget.get_opacity
#COMMENT: the requested opacity for this widget.
#NAME: tab_label
#PARENT: Gtk.Notebook.insert_page_menu.gint
#COMMENT: the #GtkWidget to be used as the label
    for the page, or %NULL to use the default label, “page N”
#NAME: STOCK_JUSTIFY_FILL
#PARENT: Gtk
#COMMENT: The “Fill” item and icon.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_visible.gboolean
#COMMENT: A #GtkTreeViewColumn.
#NAME: width
#PARENT: Gtk.paint_flat_box.none
#COMMENT: the width of the box
#NAME: widget
#PARENT: Gtk.test_text_get.utf8
#COMMENT: valid widget pointer.
#NAME: render_icon
#PARENT: Gtk.IconSet.render_icon
#COMMENT: a #GdkPixbuf to be displayed
#NAME: word
#PARENT: Gtk.TextExtendSelection
#COMMENT: Selects the current word. It is triggered by
  a double-click for example.
#NAME: get_row_at_y
#PARENT: Gtk.ListBox
#COMMENT: Gets the row at the @y position.
#NAME: new
#PARENT: Gtk.EntryCompletion.new
#COMMENT: A newly created #GtkEntryCompletion object
#NAME: STYLE_CLASS_CHECK
#PARENT: Gtk
#COMMENT: A CSS class to match check boxes.

This is used in #GtkCheckButton, #GtkCheckMenuItem and
#GtkCellRendererToggle.
#NAME: button
#PARENT: Gtk.Button.leave.none
#COMMENT: The #GtkButton you want to send the signal to.
#NAME: expand
#PARENT: Gtk.CellLayoutIface.pack_end.pack_end.none
#COMMENT: %TRUE if @cell is to be given extra space allocated to @cell_layout
#NAME: icon_view
#PARENT: Gtk.IconView.select_all.none
#COMMENT: A #GtkIconView.
#NAME: about
#PARENT: Gtk.AboutDialog.get_website_label.utf8
#COMMENT: a #GtkAboutDialog
#NAME: button
#PARENT: Gtk.ColorButton.set_color.none
#COMMENT: a #GtkColorButton
#NAME: LEVEL_BAR_OFFSET_HIGH
#PARENT: Gtk
#COMMENT: The name used for the stock high offset included by #GtkLevelBar.
#NAME: assistant
#PARENT: Gtk.Assistant.remove_page.none
#COMMENT: a #GtkAssistant
#NAME: text_view
#PARENT: Gtk.TextView.set_pixels_above_lines.none
#COMMENT: a #GtkTextView
#NAME: stock_list_ids
#PARENT: Gtk.stock_list_ids
#COMMENT: a list of known stock IDs
#NAME: row
#PARENT: Gtk.Table.get_row_spacing.guint
#COMMENT: a row in the table, 0 indicates the first row
#NAME: tag
#PARENT: Gtk.TextTag.event.gboolean
#COMMENT: a #GtkTextTag
#NAME: path_currently_selected
#PARENT: Gtk.TreeSelectionFunc.gboolean
#COMMENT: %TRUE, if the path is currently selected
#NAME: flags
#PARENT: Gtk.IconTheme.load_icon_for_scale.GdkPixbuf.Pixbuf
#COMMENT: flags modifying the behavior of the icon lookup
#NAME: tree_view
#PARENT: Gtk.TreeView.get_hover_selection.gboolean
#COMMENT: a #GtkTreeView
#NAME: label
#PARENT: Gtk.Label.set_xalign.none
#COMMENT: a #GtkLabel
#NAME: get_popup_fixed_width
#PARENT: Gtk.ComboBox.get_popup_fixed_width
#COMMENT: %TRUE if the popup uses a fixed width
#NAME: icon-name
#PARENT: Gtk.ToolButton
#COMMENT: The name of the themed icon displayed on the item.
This property only has an effect if not overridden by "label",
"icon_widget" or "stock_id" properties.
#NAME: tree_view
#PARENT: Gtk.TreeView.scroll_to_point.none
#COMMENT: a #GtkTreeView
#NAME: buffer
#PARENT: Gtk.TextBuffer.remove_all_tags.none
#COMMENT: a #GtkTextBuffer
#NAME: other
#PARENT: Gtk.TextIter.assign.none
#COMMENT: another #GtkTextIter
#NAME: iter_has_child
#PARENT: Gtk.TreeModel.iter_has_child
#COMMENT: %TRUE if @iter has children
#NAME: get_filename
#PARENT: Gtk.IconSource.get_filename
#COMMENT: image filename. This string must not
be modified or freed.
#NAME: n_values
#PARENT: Gtk.ListStore.insert_with_valuesv.none
#COMMENT: the length of the @columns and @values arrays
#NAME: child
#PARENT: Gtk.Notebook.get_tab_reorderable.gboolean
#COMMENT: a child #GtkWidget
#NAME: plug
#PARENT: Gtk.Plug.get_socket_window.Gdk.Window
#COMMENT: a #GtkPlug
#NAME: insert_with_tags_by_name
#PARENT: Gtk.TextBuffer
#COMMENT: Same as gtk_text_buffer_insert_with_tags(), but allows you
to pass in tag names instead of tag objects.
#NAME: get_show_private
#PARENT: Gtk.RecentChooser
#COMMENT: Returns whether @chooser should display recently used resources
registered as private.
#NAME: STYLE_CLASS_SCALE
#PARENT: Gtk
#COMMENT: A CSS class to match scale widgets.

This is used in #GtkScale.
#NAME: activate-focus
#PARENT: Gtk.Window
#COMMENT: The ::activate-focus signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user activates the currently
focused widget of @window.
#NAME: set_always_show_image
#PARENT: Gtk.Action
#COMMENT: Sets whether @action's menu item proxies will ignore the
#GtkSettings:gtk-menu-images setting and always show their image, if available.

Use this if the menu item would be useless or hard to use
without their image.
#NAME: icon_view
#PARENT: Gtk.IconView.set_spacing.none
#COMMENT: a #GtkIconView
#NAME: pos
#PARENT: Gtk.ScrolledWindow.edge-reached.none
#COMMENT: edge side that was reached
#NAME: tree_view
#PARENT: Gtk.TreeView.set_headers_visible.none
#COMMENT: A #GtkTreeView.
#NAME: set_alternative_button_order_from_array
#PARENT: Gtk.Dialog
#COMMENT: Sets an alternative button order. If the
#GtkSettings:gtk-alternative-button-order setting is set to %TRUE,
the dialog buttons are reordered according to the order of the
response ids in @new_order.

See gtk_dialog_set_alternative_button_order() for more information.

This function is for use by language bindings.
#NAME: add_action
#PARENT: Gtk.ActionGroup
#COMMENT: Adds an action object to the action group. Note that this function
does not set up the accel path of the action, which can lead to problems
if a user tries to modify the accelerator of a menuitem associated with
the action. Therefore you must either set the accel path yourself with
gtk_action_set_accel_path(), or use
`gtk_action_group_add_action_with_accel (..., NULL)`.
#NAME: get_vadjustment
#PARENT: Gtk.Layout.get_vadjustment
#COMMENT: vertical scroll adjustment
#NAME: new
#PARENT: Gtk.TextView.new
#COMMENT: a new #GtkTextView
#NAME: get_state
#PARENT: Gtk.IconSource
#COMMENT: Obtains the widget state this icon source applies to. The return
value is only useful/meaningful if the widget state is not
wildcarded.
#NAME: set_number_up_layout
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.
#NAME: requisition
#PARENT: Gtk.Requisition.copy.Requisition
#COMMENT: a #GtkRequisition
#NAME: bx
#PARENT: Gtk.TreeView.convert_tree_to_bin_window_coords.none
#COMMENT: return location for X coordinate relative to bin_window
#NAME: realize
#PARENT: Gtk.Widget
#COMMENT: The ::realize signal is emitted when @widget is associated with a
#GdkWindow, which means that gtk_widget_realize() has been called or the
widget has been mapped (that is, it is going to be drawn).
#NAME: get_popup_set_width
#PARENT: Gtk.EntryCompletion
#COMMENT: Returns whether the  completion popup window will be resized to the
width of the entry.
#NAME: set_custom_title
#PARENT: Gtk.HeaderBar
#COMMENT: Sets a custom title for the #GtkHeaderBar.

The title should help a user identify the current view. This
supersedes any title set by gtk_header_bar_set_title() or
gtk_header_bar_set_subtitle(). To achieve the same style as
the builtin title and subtitle, use the “title” and “subtitle”
style classes.

You should set the custom title to %NULL, for the header title
label to be visible again.
#NAME: set_menu_label_text
#PARENT: Gtk.Notebook
#COMMENT: Creates a new label and sets it as the menu label of @child.
#NAME: by
#PARENT: Gtk.TreeView.convert_tree_to_bin_window_coords.none
#COMMENT: return location for Y coordinate relative to bin_window
#NAME: GestureLongPress
#PARENT: Gtk
#COMMENT: #GtkGestureLongPress is a #GtkGesture implementation able to recognize
long presses, triggering the #GtkGestureLongPress::pressed after the
timeout is exceeded.

If the touchpoint is lifted before the timeout passes, or if it drifts
too far of the initial press point, the #GtkGestureLongPress::cancelled
signal will be emitted.
#NAME: uri
#PARENT: Gtk.FileFilterInfo
#COMMENT: the URI for the file being tested
#NAME: select_again
#PARENT: Gtk.FileChooserConfirmation
#COMMENT: The file chooser will
 continue running, so as to let the user select another file name.
#NAME: op
#PARENT: Gtk.PrintOperation.set_has_selection.none
#COMMENT: a #GtkPrintOperation
#NAME: range
#PARENT: Gtk.Range.get_round_digits.gint
#COMMENT: a #GtkRange
#NAME: adjustment
#PARENT: Gtk.Adjustment.set_page_size.none
#COMMENT: a #GtkAdjustment
#NAME: unit
#PARENT: Gtk.PrintSettings.set_length.none
#COMMENT: the unit of @length
#NAME: time_
#PARENT: Gtk.Widget.drag_get_data.none
#COMMENT: a timestamp for retrieving the data. This will
  generally be the time received in a #GtkWidget::drag-motion
  or #GtkWidget::drag-drop signal
#NAME: window
#PARENT: Gtk.Window.get_window_type.WindowType
#COMMENT: a #GtkWindow
#NAME: callback
#PARENT: Gtk.CellAreaClass.foreach_alloc.foreach_alloc.none
#COMMENT: the #GtkCellAllocCallback to call
#NAME: exists
#PARENT: Gtk.RecentInfo
#COMMENT: Checks whether the resource pointed by @info still exists.
At the moment this check is done only on resources pointing
to local files.
#NAME: cell
#PARENT: Gtk.CellLayoutIface.pack_end.pack_end.none
#COMMENT: a #GtkCellRenderer
#NAME: get_example_icon_name
#PARENT: Gtk.IconTheme
#COMMENT: Gets the name of an icon that is representative of the
current theme (for instance, to use when presenting
a list of themes to the user.)
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_shadow_type.ShadowType
#COMMENT: a #GtkScrolledWindow
#NAME: iter
#PARENT: Gtk.TextIter.forward_cursor_position.gboolean
#COMMENT: a #GtkTextIter
#NAME: corner_topright
#PARENT: Gtk.JunctionSides
#COMMENT: Element connects on the top-right corner.
#NAME: set_show_expanders
#PARENT: Gtk.TreeView
#COMMENT: Sets whether to draw and enable expanders and indent child rows in
@tree_view.  When disabled there will be no expanders visible in trees
and there will be no way to expand and collapse rows by default.  Also
note that hiding the expanders will disable the default indentation.  You
can set a custom indentation in this case using
gtk_tree_view_set_level_indentation().
This does not have any visible effects for lists.
#NAME: first_property_name
#PARENT: Gtk.test_create_widget.Widget
#COMMENT: Name of first property to set or %NULL
#NAME: context
#PARENT: Gtk.CellAreaClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: the #GtkCellAreaContext which has already been requested for widths.
#NAME: error_color
#PARENT: Gtk.IconInfo.load_symbolic.GdkPixbuf.Pixbuf
#COMMENT: a #GdkRGBA representing the error color
    of the icon or %NULL to use the default color (allow-none)
#NAME: get_size
#PARENT: Gtk.FontSelection
#COMMENT: The selected font size.
#NAME: n_params
#PARENT: Gtk.Dialog.set_alternative_button_order_from_array.none
#COMMENT: the number of response ids in @new_order
#NAME: activate
#PARENT: Gtk.Switch
#COMMENT: The ::activate signal on GtkSwitch is an action signal and
emitting it causes the switch to animate.
Applications should never connect to this signal, but use the
notify::active signal.
#NAME: manager
#PARENT: Gtk.UIManager.get_add_tearoffs.gboolean
#COMMENT: a #GtkUIManager
#NAME: path
#PARENT: Gtk.WidgetPath.has_parent.gboolean
#COMMENT: a #GtkWidgetPath
#NAME: set_active
#PARENT: Gtk.CheckMenuItem
#COMMENT: Sets the active state of the menu item’s check box.
#NAME: notebook
#PARENT: Gtk.Notebook.set_show_tabs.none
#COMMENT: a #GtkNotebook
#NAME: target
#PARENT: Gtk.TargetList.remove.none
#COMMENT: the interned atom representing the target
#NAME: parent_class
#PARENT: Gtk.ThemingEngineClass
#COMMENT: The parent class.
#NAME: get_background_area
#PARENT: Gtk.TreeView
#COMMENT: Fills the bounding rectangle in bin_window coordinates for the cell at the
row specified by @path and the column specified by @column.  If @path is
%NULL, or points to a node not found in the tree, the @y and @height fields of
the rectangle will be filled with 0. If @column is %NULL, the @x and @width
fields will be filled with 0.  The returned rectangle is equivalent to the
@background_area passed to gtk_cell_renderer_render().  These background
areas tile to cover the entire bin window.  Contrast with the @cell_area,
returned by gtk_tree_view_get_cell_area(), which returns only the cell
itself, excluding surrounding borders and the tree expander area.
#NAME: set_popup_completion
#PARENT: Gtk.EntryCompletion
#COMMENT: Sets whether the completions should be presented in a popup window.
#NAME: get_orientation
#PARENT: Gtk.GesturePan
#COMMENT: Returns the orientation of the pan gestures that this @gesture expects.
#NAME: info
#PARENT: Gtk.RecentInfo.get_uri.utf8
#COMMENT: a #GtkRecentInfo
#NAME: set_clip
#PARENT: Gtk.Widget
#COMMENT: Sets the widget’s clip.  This must not be used directly,
but from within a widget’s size_allocate method.
It must be called after gtk_widget_set_allocation() (or after chaning up
to the parent class), because that function resets the clip.

The clip set should be the area that @widget draws on. If @widget is a
#GtkContainer, the area must contain all children's clips.

If this function is not called by @widget during a ::size-allocate handler,
the clip will be set to @widget's allocation.
#NAME: halign
#PARENT: Gtk.Widget
#COMMENT: How to distribute horizontal space if widget gets extra space, see #GtkAlign
#NAME: add
#PARENT: Gtk.IconFactory
#COMMENT: Adds the given @icon_set to the icon factory, under the name
@stock_id.  @stock_id should be namespaced for your application,
e.g. “myapp-whatever-icon”.  Normally applications create a
#GtkIconFactory, then add it to the list of default factories with
gtk_icon_factory_add_default(). Then they pass the @stock_id to
widgets such as #GtkImage to display the icon. Themes can provide
an icon with the same name (such as "myapp-whatever-icon") to
override your application’s default icons. If an icon already
existed in @factory for @stock_id, it is unreferenced and replaced
with the new @icon_set.
#NAME: set_tab_reorderable
#PARENT: Gtk.Notebook
#COMMENT: Sets whether the notebook tab can be reordered
via drag and drop or not.
#NAME: Fixed
#PARENT: Gtk
#COMMENT: The #GtkFixed widget is a container which can place child widgets
at fixed positions and with fixed sizes, given in pixels. #GtkFixed
performs no automatic layout management.

For most applications, you should not use this container! It keeps
you from having to learn about the other GTK+ containers, but it
results in broken applications.  With #GtkFixed, the following
things will result in truncated text, overlapping widgets, and
other display bugs:

- Themes, which may change widget sizes.

- Fonts other than the one you used to write the app will of course
  change the size of widgets containing text; keep in mind that
  users may use a larger font because of difficulty reading the
  default, or they may be using Windows or the framebuffer port of
  GTK+, where different fonts are available.

- Translation of text into other languages changes its size. Also,
  display of non-English text will use a different font in many
  cases.

In addition, the fixed widget can’t properly be mirrored in
right-to-left languages such as Hebrew and Arabic. i.e. normally
GTK+ will flip the interface to put labels to the right of the
thing they label, but it can’t do that with #GtkFixed. So your
application will not be usable in right-to-left languages.

Finally, fixed positioning makes it kind of annoying to add/remove
GUI elements, since you have to reposition all the other
elements. This is a long-term maintenance problem for your
application.

If you know none of these things are an issue for your application,
and prefer the simplicity of #GtkFixed, by all means use the
widget. But you should be aware of the tradeoffs.
#NAME: wx
#PARENT: Gtk.IconView.convert_widget_to_bin_window_coords.none
#COMMENT: X coordinate relative to the widget
#NAME: label
#PARENT: Gtk.Label.get_current_uri.utf8
#COMMENT: a #GtkLabel
#NAME: wy
#PARENT: Gtk.IconView.convert_widget_to_bin_window_coords.none
#COMMENT: Y coordinate relative to the widget
#NAME: set_visible_vertical
#PARENT: Gtk.ToolItem
#COMMENT: Sets whether @tool_item is visible when the toolbar is docked
vertically. Some tool items, such as text entries, are too wide to be
useful on a vertically docked toolbar. If @visible_vertical is %FALSE
@tool_item will not appear on toolbars that are docked vertically.
#NAME: n_targets
#PARENT: Gtk.Widget.drag_dest_set.none
#COMMENT: the number of entries in @targets
#NAME: rc_reparse_all_for_settings
#PARENT: Gtk
#COMMENT: If the modification time on any previously read file
for the given #GtkSettings has changed, discard all style information
and then reread all previously read RC files.
#NAME: get_resize_toplevel
#PARENT: Gtk.Expander.get_resize_toplevel
#COMMENT: the “resize toplevel” setting.
#NAME: PackType
#PARENT: Gtk
#COMMENT: Represents the packing location #GtkBox children. (See: #GtkVBox,
#GtkHBox, and #GtkButtonBox).
#NAME: sort-column-id
#PARENT: Gtk.TreeViewColumn
#COMMENT: Logical sort column ID this column sorts on when selected for sorting. Setting the sort column ID makes the column header
clickable. Set to -1 to make the column unsortable.
#NAME: upper
#PARENT: Gtk.Adjustment.configure.none
#COMMENT: the new maximum value
#NAME: child
#PARENT: Gtk.Menu.reorder_child.none
#COMMENT: the #GtkMenuItem to move
#NAME: new_from_model
#PARENT: Gtk.MenuBar
#COMMENT: Creates a new #GtkMenuBar and populates it with menu items
and submenus according to @model.

The created menu items are connected to actions found in the
#GtkApplicationWindow to which the menu bar belongs - typically
by means of being contained within the #GtkApplicationWindows
widget hierarchy.
#NAME: get_angle_delta
#PARENT: Gtk.GestureRotate.get_angle_delta
#COMMENT: the angle delta in radians
#NAME: image
#PARENT: Gtk.ImageMenuItem.set_image.none
#COMMENT: a widget to set as the image for the menu item.
#NAME: get_action_widget
#PARENT: Gtk.Notebook.get_action_widget
#COMMENT: The action widget with the given @pack_type
    or %NULL when this action widget has not been set
#NAME: get_layout
#PARENT: Gtk.Scale.get_layout
#COMMENT: the #PangoLayout for this scale,
    or %NULL if the #GtkScale:draw-value property is %FALSE.
#NAME: context
#PARENT: Gtk.StyleContext.get_color.none
#COMMENT: a #GtkStyleContext
#NAME: forward_word_ends
#PARENT: Gtk.TextIter
#COMMENT: Calls gtk_text_iter_forward_word_end() up to @count times.
#NAME: request_rich_text
#PARENT: Gtk.Clipboard
#COMMENT: Requests the contents of the clipboard as rich text. When the rich
text is later received, @callback will be called.

The @text parameter to @callback will contain the resulting rich
text if the request succeeded, or %NULL if it failed. The @length
parameter will contain @text’s length. This function can fail for
various reasons, in particular if the clipboard was empty or if the
contents of the clipboard could not be converted into rich text form.
#NAME: queue_render
#PARENT: Gtk.GLArea
#COMMENT: Marks the currently rendered data (if any) as invalid, and queues
a redraw of the widget, ensuring that the #GtkGLArea::render signal
is emitted during the draw.

This is only needed when the gtk_gl_area_set_auto_render() has
been called with a %FALSE value. The default behaviour is to
emit #GtkGLArea::render on each draw.
#NAME: margin-end
#PARENT: Gtk.Widget
#COMMENT: Margin on end of widget, horizontally. This property supports
left-to-right and right-to-left text directions.

This property adds margin outside of the widget's normal size
request, the margin will be added in addition to the size from
gtk_widget_set_size_request() for example.
#NAME: n_entries
#PARENT: Gtk.ActionGroup.add_radio_actions_full.none
#COMMENT: the number of entries
#NAME: new
#PARENT: Gtk.AccelLabel
#COMMENT: Creates a new #GtkAccelLabel.
#NAME: get_sort_column_id
#PARENT: Gtk.TreeViewColumn
#COMMENT: Gets the logical @sort_column_id that the model sorts on when this
column is selected for sorting.
See gtk_tree_view_column_set_sort_column_id().
#NAME: get_toplevels
#PARENT: Gtk.UIManager.get_toplevels
#COMMENT: a newly-allocated #GSList of
all toplevel widgets of the requested types.  Free the returned list with g_slist_free().
#NAME: rc_set_default_files
#PARENT: Gtk
#COMMENT: Sets the list of files that GTK+ will read at the
end of gtk_init().
#NAME: success_color
#PARENT: Gtk.IconInfo.load_symbolic_async.none
#COMMENT: a #GdkRGBA representing the warning color
    of the icon or %NULL to use the default color
#NAME: ColorButton
#PARENT: Gtk
#COMMENT: The #GtkColorButton is a button which displays the currently selected
color and allows to open a color selection dialog to change the color.
It is suitable widget for selecting a color in a preference dialog.
#NAME: 
#PARENT: Gtk.CellArea.cell_set.none...
#COMMENT: a %NULL-terminated list of property names and values, starting
          with @first_prop_name
#NAME: new_from_key_file
#PARENT: Gtk.PageSetup.new_from_key_file
#COMMENT: the restored #GtkPageSetup
#NAME: new
#PARENT: Gtk.FileChooserDialog
#COMMENT: Creates a new #GtkFileChooserDialog.  This function is analogous to
gtk_dialog_new_with_buttons().
#NAME: get_child_at_index
#PARENT: Gtk.FlowBox
#COMMENT: Gets the nth child in the @box.
#NAME: data
#PARENT: Gtk.ClipboardURIReceivedFunc.none
#COMMENT: the @user_data supplied to
  gtk_clipboard_request_uris().
#NAME: completion
#PARENT: Gtk.EntryCompletion.set_popup_set_width.none
#COMMENT: a #GtkEntryCompletion
#NAME: child_set
#PARENT: Gtk.Container
#COMMENT: Sets one or more child properties for @child and @container.
#NAME: unit
#PARENT: Gtk.PrintSettings.get_length.gdouble
#COMMENT: the unit of the return value
#NAME: iter
#PARENT: Gtk.TextIter.get_language.Pango.Language
#COMMENT: an iterator
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_button_sensitivity.none
#COMMENT: a #GtkComboBox
#NAME: get_orientation
#PARENT: Gtk.PageSetup.get_orientation
#COMMENT: the page orientation
#NAME: application
#PARENT: Gtk.RecentFilterFlags
#COMMENT: the list of applications that have
 registered the file
#NAME: style
#PARENT: Gtk.paint_arrow.none
#COMMENT: a #GtkStyle
#NAME: end_pos
#PARENT: Gtk.Editable.delete_text.none
#COMMENT: end position
#NAME: setup
#PARENT: Gtk.PrintOperation.update-custom-widget.none
#COMMENT: actual page setup
#NAME: position
#PARENT: Gtk.ListStore.insert_with_valuesv.none
#COMMENT: position to insert the new row, or -1 for last
#NAME: get_path
#PARENT: Gtk.ThemingEngine
#COMMENT: Returns the widget path used for style matching.
#NAME: freeze_child_notify
#PARENT: Gtk.Widget
#COMMENT: Stops emission of #GtkWidget::child-notify signals on @widget. The
signals are queued until gtk_widget_thaw_child_notify() is called
on @widget.

This is the analogue of g_object_freeze_notify() for child properties.
#NAME: gesture
#PARENT: Gtk.Gesture.is_grouped_with.gboolean
#COMMENT: a #GtkGesture
#NAME: flags
#PARENT: Gtk.CellRenderer.activate.gboolean
#COMMENT: render flags
#NAME: wrap
#PARENT: Gtk.SpinButton.set_wrap.none
#COMMENT: a flag indicating if wrapping behavior is performed
#NAME: tree_view
#PARENT: Gtk.TreeView.expand_row.gboolean
#COMMENT: a #GtkTreeView
#NAME: fsd
#PARENT: Gtk.FontSelectionDialog.get_preview_text.utf8
#COMMENT: a #GtkFontSelectionDialog
#NAME: self
#PARENT: Gtk.LevelBar.remove_offset_value.none
#COMMENT: a #GtkLevelBar
#NAME: set_valuesv
#PARENT: Gtk.TreeStore
#COMMENT: A variant of gtk_tree_store_set_valist() which takes
the columns and values as two arrays, instead of varargs.  This
function is mainly intended for language bindings or in case
the number of columns to change is not known until run-time.
#NAME: blocking
#PARENT: Gtk.main_iteration_do.gboolean
#COMMENT: %TRUE if you want GTK+ to block if no events are pending
#NAME: pattern
#PARENT: Gtk.RecentFilter.add_pattern.none
#COMMENT: a file pattern
#NAME: new_with_attributes
#PARENT: Gtk.TreeViewColumn.new_with_attributes
#COMMENT: A newly created #GtkTreeViewColumn.
#NAME: add_attribute
#PARENT: Gtk.TreeViewColumn
#COMMENT: Adds an attribute mapping to the list in @tree_column.  The @column is the
column of the model to get a value from, and the @attribute is the
parameter on @cell_renderer to be set from the value. So for example
if column 2 of the model contains strings, you could have the
“text” attribute of a #GtkCellRendererText get its values from
column 2.
#NAME: can-activate-accel
#PARENT: Gtk.Widget
#COMMENT: Determines whether an accelerator that activates the signal
identified by @signal_id can currently be activated.
This signal is present to allow applications and derived
widgets to override the default #GtkWidget handling
for determining whether an accelerator can be activated.
#NAME: main
#PARENT: Gtk
#COMMENT: Runs the main loop until gtk_main_quit() is called.

You can nest calls to gtk_main(). In that case gtk_main_quit()
will make the innermost invocation of the main loop return.
#NAME: select-all
#PARENT: Gtk.IconView
#COMMENT: A [keybinding signal][GtkBindingSignal]
which gets emitted when the user selects all items.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control selection
programmatically.

The default binding for this signal is Ctrl-a.
#NAME: insert
#PARENT: Gtk.ListBox
#COMMENT: Insert the @child into the @box at @position. If a sort function is
set, the widget will actually be inserted at the calculated position and
this function has the same effect of gtk_container_add().

If @position is -1, or larger than the total number of items in the
@box, then the @child will be appended to the end.
#NAME: major
#PARENT: Gtk.GLArea.set_required_version.none
#COMMENT: the major version
#NAME: clear
#PARENT: Gtk.ListStore
#COMMENT: Removes all rows from the list store.
#NAME: row_span
#PARENT: Gtk.ComboBox.set_row_span_column.none
#COMMENT: A column in the model passed during construction.
#NAME: detach
#PARENT: Gtk.Menu
#COMMENT: Detaches the menu from the widget to which it had been attached.
This function will call the callback function, @detacher, provided
when the gtk_menu_attach_to_widget() function was called.
#NAME: find
#PARENT: Gtk.BindingSet
#COMMENT: Find a binding set by its globally unique name.

The @set_name can either be a name used for gtk_binding_set_new()
or the type name of a class used in gtk_binding_set_by_class().
#NAME: has_origin
#PARENT: Gtk.Scale.set_has_origin.none
#COMMENT: %TRUE if the scale has an origin
#NAME: orientation
#PARENT: Gtk.StatusIcon
#COMMENT: The orientation of the tray in which the statusicon
is embedded.
#NAME: window
#PARENT: Gtk.Window.get_skip_pager_hint.gboolean
#COMMENT: a #GtkWindow
#NAME: get_preview_widget
#PARENT: Gtk.FileChooser.get_preview_widget
#COMMENT: the current preview widget, or %NULL
#NAME: get_path
#PARENT: Gtk.StyleContext
#COMMENT: Returns the widget path used for style matching.
#NAME: new
#PARENT: Gtk.TextTag.new
#COMMENT: a new #GtkTextTag
#NAME: name
#PARENT: Gtk.icon_size_from_name.gint
#COMMENT: the name to look up.
#NAME: collapsed
#PARENT: Gtk.ExpanderStyle
#COMMENT: The style used for a collapsed subtree.
#NAME: child
#PARENT: Gtk.ButtonBox.set_child_secondary.none
#COMMENT: a child of @widget
#NAME: keyval
#PARENT: Gtk.BindingEntry.skip.none
#COMMENT: key value of binding to skip
#NAME: text
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: get_heading
#PARENT: Gtk.AppChooserButton.get_heading
#COMMENT: the text to display at the top of the dialog,
    or %NULL, in which case a default text is displayed
#NAME: unselect-all
#PARENT: Gtk.ListBox
#COMMENT: The ::unselect-all signal is a [keybinding signal][GtkBindingSignal]
which gets emitted to unselect all children of the box, if the selection
mode permits it.

The default bindings for this signal is Ctrl-Shift-a.
#NAME: get_tooltip_window
#PARENT: Gtk.Widget.get_tooltip_window
#COMMENT: The #GtkWindow of the current tooltip.
#NAME: get_filename
#PARENT: Gtk.IconSource
#COMMENT: Retrieves the source filename, or %NULL if none is set. The
filename is not a copy, and should not be modified or expected to
persist beyond the lifetime of the icon source.
#NAME: handle_box
#PARENT: Gtk.HandleBox.get_snap_edge.PositionType
#COMMENT: a #GtkHandleBox
#NAME: label
#PARENT: Gtk.Label.set_justify.none
#COMMENT: a #GtkLabel
#NAME: settings
#PARENT: Gtk.PrintSettings.set.none
#COMMENT: a #GtkPrintSettings
#NAME: ScrollablePolicy
#PARENT: Gtk
#COMMENT: Defines the policy to be used in a scrollable widget when updating
the scrolled window adjustments in a given orientation.
#NAME: get_size
#PARENT: Gtk.Table
#COMMENT: Gets the number of rows and columns in the table.
#NAME: text_view
#PARENT: Gtk.TextView.get_left_margin.gint
#COMMENT: a #GtkTextView
#NAME: iter_parent
#PARENT: Gtk.TreeModelIface.iter_parent.iter_parent
#COMMENT: %TRUE, if @iter is set to the parent of @child
#NAME: TreeViewGridLines
#PARENT: Gtk
#COMMENT: Used to indicate which grid lines to draw in a tree view.
#NAME: test_widget_send_key
#PARENT: Gtk
#COMMENT: This function will generate keyboard press and release events in
the middle of the first GdkWindow found that belongs to @widget.
For windowless widgets like #GtkButton (which returns %FALSE from
gtk_widget_get_has_window()), this will often be an
input-only event window. For other widgets, this is usually widget->window.
Certain caveats should be considered when using this function, in
particular because the mouse pointer is warped to the key press
location, see gdk_test_simulate_key() for details.
#NAME: set_icon_from_pixbuf
#PARENT: Gtk.Entry
#COMMENT: Sets the icon shown in the specified position using a pixbuf.

If @pixbuf is %NULL, no icon will be shown in the specified position.
#NAME: preedit-changed
#PARENT: Gtk.IMContext
#COMMENT: The ::preedit-changed signal is emitted whenever the preedit sequence
currently being entered has changed.  It is also emitted at the end of
a preedit sequence, in which case
gtk_im_context_get_preedit_string() returns the empty string.
#NAME: restrict-to-fill-level
#PARENT: Gtk.Range
#COMMENT: The restrict-to-fill-level property controls whether slider
movement is restricted to an upper boundary set by the
fill level. See gtk_range_set_restrict_to_fill_level().
#NAME: stack
#PARENT: Gtk.Stack.set_visible_child_full.none
#COMMENT: a #GtkStack
#NAME: toggle_button
#PARENT: Gtk.ToggleButton.toggled.none
#COMMENT: a #GtkToggleButton.
#NAME: accelerator_get_default_mod_mask
#PARENT: Gtk.accelerator_get_default_mod_mask
#COMMENT: the default accelerator modifier mask
#NAME: set_drag_dest_item
#PARENT: Gtk.IconView
#COMMENT: Sets the item that is highlighted for feedback.
#NAME: widget
#PARENT: Gtk.CellArea.request_renderer.none
#COMMENT: the #GtkWidget that @area is rendering onto
#NAME: mode
#PARENT: Gtk.ListBox.set_selection_mode.none
#COMMENT: The #GtkSelectionMode
#NAME: scanner
#PARENT: Gtk.rc_parse_color.guint
#COMMENT: a #GScanner
#NAME: notebook
#PARENT: Gtk.Notebook.insert_page_menu.gint
#COMMENT: a #GtkNotebook
#NAME: get_default_icon_name
#PARENT: Gtk.Window
#COMMENT: Returns the fallback icon name for windows that has been set
with gtk_window_set_default_icon_name(). The returned
string is owned by GTK+ and should not be modified. It
is only valid until the next call to
gtk_window_set_default_icon_name().
#NAME: area
#PARENT: Gtk.CellArea.get_preferred_width_for_height.none
#COMMENT: a #GtkCellArea
#NAME: semi_collapsed
#PARENT: Gtk.ExpanderStyle
#COMMENT: Intermediate style used during animation.
#NAME: get_action
#PARENT: Gtk.FileChooser.get_action
#COMMENT: the action that the file selector is performing
#NAME: tree_view
#PARENT: Gtk.TreeView.get_bin_window.Gdk.Window
#COMMENT: A #GtkTreeView
#NAME: widget
#PARENT: Gtk.Widget.get_margin_end.gint
#COMMENT: a #GtkWidget
#NAME: unparent
#PARENT: Gtk.Widget
#COMMENT: This function is only for use in widget implementations.
Should be called by implementations of the remove method
on #GtkContainer, to dissociate a child from the container.
#NAME: adjustment
#PARENT: Gtk.AdjustmentClass.changed.changed.none
#COMMENT: a #GtkAdjustment
#NAME: append_page
#PARENT: Gtk.Notebook.append_page
#COMMENT: the index (starting from 0) of the appended
    page in the notebook, or -1 if function fails
#NAME: max_seq_len
#PARENT: Gtk.IMContextSimple.add_table.none
#COMMENT: Maximum length of a sequence in the table
              (cannot be greater than #GTK_MAX_COMPOSE_LEN)
#NAME: mark
#PARENT: Gtk.TextBuffer.mark-set.none
#COMMENT: The mark that is set
#NAME: TreeSelectionFunc
#PARENT: Gtk
#COMMENT: A function used by gtk_tree_selection_set_select_function() to filter
whether or not a row may be selected.  It is called whenever a row's
state might change.  A return value of %TRUE indicates to @selection
that it is okay to change the selection.
#NAME: set_preview_widget_active
#PARENT: Gtk.FileChooser
#COMMENT: Sets whether the preview widget set by
gtk_file_chooser_set_preview_widget() should be shown for the
current filename. When @active is set to false, the file chooser
may display an internally generated preview of the current file
or it may display no preview at all. See
gtk_file_chooser_set_preview_widget() for more details.
#NAME: clipboard
#PARENT: Gtk.ClipboardURIReceivedFunc.none
#COMMENT: the #GtkClipboard
#NAME: parent_class
#PARENT: Gtk.FileChooserWidgetClass
#COMMENT: The parent class.
#NAME: action
#PARENT: Gtk.Action.get_sensitive.gboolean
#COMMENT: the action object
#NAME: refilter
#PARENT: Gtk.TreeModelFilter
#COMMENT: Emits ::row_changed for each row in the child model, which causes
the filter to re-evaluate whether a row is visible or not.
#NAME: use_alpha
#PARENT: Gtk.ColorButton.set_use_alpha.none
#COMMENT: %TRUE if color button should use alpha channel, %FALSE if not
#NAME: toolbar
#PARENT: Gtk.Toolbar.set_icon_size.none
#COMMENT: A #GtkToolbar
#NAME: proxy
#PARENT: Gtk.TreeRowReference.reordered.none
#COMMENT: a #GObject
#NAME: natural_height
#PARENT: Gtk.CellAreaClass.get_preferred_height.get_preferred_height.none
#COMMENT: location to store the natural height, or %NULL
#NAME: path
#PARENT: Gtk.TreePath.free.none
#COMMENT: a #GtkTreePath-struct
#NAME: get_skip_pager_hint
#PARENT: Gtk.Window
#COMMENT: Gets the value set by gtk_window_set_skip_pager_hint().
#NAME: resize_to_geometry
#PARENT: Gtk.Window
#COMMENT: Like gtk_window_resize(), but @width and @height are interpreted
in terms of the base size and increment set with
gtk_window_set_geometry_hints.
#NAME: n_chars
#PARENT: Gtk.EntryBuffer.emit_inserted_text.none
#COMMENT: number of characters inserted
#NAME: icons
#PARENT: Gtk.ScaleButton
#COMMENT: The names of the icons to be used by the scale button.
The first item in the array will be used in the button
when the current value is the lowest value, the second
item for the highest value. All the subsequent icons will
be used for all the other values, spread evenly over the
range of values.

If there's only one icon name in the @icons array, it will
be used for all the values. If only two icon names are in
the @icons array, the first one will be used for the bottom
50% of the scale, and the second one for the top 50%.

It is recommended to use at least 3 icons so that the
#GtkScaleButton reflects the current value of the scale
better for the users.
#NAME: background_area
#PARENT: Gtk.CellRendererClass.render.render.none
#COMMENT: entire cell area (including tree expanders and maybe
   padding on the sides)
#NAME: get_page_increment
#PARENT: Gtk.Adjustment
#COMMENT: Retrieves the page increment of the adjustment.
#NAME: add_table
#PARENT: Gtk.TargetList
#COMMENT: Prepends a table of #GtkTargetEntry to a target list.
#NAME: window-state-event
#PARENT: Gtk.Widget
#COMMENT: The ::window-state-event will be emitted when the state of the
toplevel window associated to the @widget changes.

To receive this signal the #GdkWindow associated to the widget
needs to enable the #GDK_STRUCTURE_MASK mask. GDK will enable
this mask automatically for all new windows.
#NAME: app_exec
#PARENT: Gtk.RecentInfo.get_application_info.gboolean
#COMMENT: return location for the string containing
   the command line
#NAME: set_enable_search
#PARENT: Gtk.TreeView
#COMMENT: If @enable_search is set, then the user can type in text to search through
the tree interactively (this is sometimes called "typeahead find").

Note that even if this is %FALSE, the user can still initiate a search
using the “start-interactive-search” key binding.
#NAME: drag_get_source_widget
#PARENT: Gtk
#COMMENT: Determines the source widget for a drag.
#NAME: radius0
#PARENT: Gtk.Gradient.new_radial.Gradient
#COMMENT: radius of the start circle
#NAME: orientation
#PARENT: Gtk.Scale.new_with_range.Widget
#COMMENT: the scale’s orientation.
#NAME: path
#PARENT: Gtk.TreeView.row_activated.none
#COMMENT: The #GtkTreePath to be activated.
#NAME: columns_autosize
#PARENT: Gtk.TreeView
#COMMENT: Resizes all columns to their optimal width. Only works after the
treeview has been realized.
#NAME: icon
#PARENT: Gtk.drag_set_icon_gicon.none
#COMMENT: a #GIcon
#NAME: radius1
#PARENT: Gtk.Gradient.new_radial.Gradient
#COMMENT: radius of the end circle
#NAME: action
#PARENT: Gtk.Activatable.sync_action_properties.none
#COMMENT: the related #GtkAction or %NULL
#NAME: settings
#PARENT: Gtk.PrintSettings.unset.none
#COMMENT: a #GtkPrintSettings
#NAME: related-action
#PARENT: Gtk.Activatable
#COMMENT: The action that this activatable will activate and receive
updates from for various states and possibly appearance.

> #GtkActivatable implementors need to handle the this property and
> call gtk_activatable_do_set_related_action() when it changes.
#NAME: group
#PARENT: Gtk.RadioAction
#COMMENT: Sets a new group for a radio action.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: a #GtkStatusIcon
#NAME: set_logo_icon_name
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the pixbuf to be displayed as logo in the about dialog.
If it is %NULL, the default window icon set with
gtk_window_set_default_icon() will be used.
#NAME: gesture
#PARENT: Gtk.Gesture.ungroup.none
#COMMENT: a #GtkGesture
#NAME: get_item_width
#PARENT: Gtk.IconView.get_item_width
#COMMENT: the width of a single item, or -1
#NAME: icon_view
#PARENT: Gtk.IconView.scroll_to_path.none
#COMMENT: A #GtkIconView.
#NAME: page_num
#PARENT: Gtk.Notebook.page-reordered.none
#COMMENT: the new page number for @child
#NAME: get_reverse
#PARENT: Gtk.PrintSettings.get_reverse
#COMMENT: whether to reverse the order of the printed pages
#NAME: is_cursor_position
#PARENT: Gtk.TextIter.is_cursor_position
#COMMENT: %TRUE if the cursor can be placed at @iter
#NAME: get_font_name
#PARENT: Gtk.FontButton
#COMMENT: Retrieves the name of the currently selected font. This name includes
style and size information as well. If you want to render something
with the font, use this string with pango_font_description_from_string() .
If you’re interested in peeking certain values (family name,
style, size, weight) just query these properties from the
#PangoFontDescription object.
#NAME: create_pango_context
#PARENT: Gtk.PrintContext.create_pango_context
#COMMENT: a new Pango context for @context
#NAME: delete_interactive
#PARENT: Gtk.TextBuffer.delete_interactive
#COMMENT: whether some text was actually deleted
#NAME: height
#PARENT: Gtk.render_handle.none
#COMMENT: rectangle height
#NAME: set_activate_on_single_click
#PARENT: Gtk.IconView
#COMMENT: Causes the #GtkIconView::item-activated signal to be emitted on
a single click instead of a double click.
#NAME: stack
#PARENT: Gtk.Stack.get_transition_running.gboolean
#COMMENT: a #GtkStack
#NAME: copy
#PARENT: Gtk.TreeRowReference.copy
#COMMENT: a copy of @reference
#NAME: ref
#PARENT: Gtk.WidgetPath.ref
#COMMENT: @path itself.
#NAME: start_path
#PARENT: Gtk.IconView.get_visible_range.gboolean
#COMMENT: Return location for start of region,
             or %NULL
#NAME: parent_class
#PARENT: Gtk.TextViewClass
#COMMENT: The object class structure needs to be the first
#NAME: get_grid_lines
#PARENT: Gtk.TreeView.get_grid_lines
#COMMENT: a #GtkTreeViewGridLines value indicating which grid lines
are enabled.
#NAME: buildable
#PARENT: Gtk.Buildable.get_name.utf8
#COMMENT: a #GtkBuildable
#NAME: unselect_path
#PARENT: Gtk.TreeSelection
#COMMENT: Unselects the row at @path.
#NAME: size_group
#PARENT: Gtk.SizeGroup.get_widgets.Widget
#COMMENT: a #GtkSizeGroup
#NAME: cell_area
#PARENT: Gtk.CellAreaClass.activate.activate.gboolean
#COMMENT: the size and location of @area relative to @widget’s allocation
#NAME: get_value
#PARENT: Gtk.LevelBar.get_value
#COMMENT: a value in the interval between
    #GtkLevelBar:min-value and #GtkLevelBar:max-value
#NAME: set_has_origin
#PARENT: Gtk.Scale
#COMMENT: If @has_origin is set to %TRUE (the default),
the scale will highlight the part of the scale
between the origin (bottom or left side) of the scale
and the current value.
#NAME: func_data
#PARENT: Gtk.TranslateFunc.utf8
#COMMENT: user data passed in when registering the
  function
#NAME: assistant
#PARENT: Gtk.Assistant.set_page_title.none
#COMMENT: a #GtkAssistant
#NAME: completion
#PARENT: Gtk.EntryCompletion.delete_action.none
#COMMENT: a #GtkEntryCompletion
#NAME: renderer
#PARENT: Gtk.CellArea.cell_get_property.none
#COMMENT: a #GtkCellRenderer inside @area
#NAME: get_stock_id
#PARENT: Gtk.Action.get_stock_id
#COMMENT: the stock id
#NAME: flags
#PARENT: Gtk.Application.is_inhibited.gboolean
#COMMENT: what types of actions should be queried
#NAME: context
#PARENT: Gtk.CellAreaClass.get_preferred_height.get_preferred_height.none
#COMMENT: the #GtkCellAreaContext to perform this request with
#NAME: new
#PARENT: Gtk.PaperSize
#COMMENT: Creates a new #GtkPaperSize object by parsing a
[PWG 5101.1-2002](ftp://ftp.pwg.org/pub/pwg/candidates/cs-pwgmsn10-20020226-5101.1.pdf)
paper name.

If @name is %NULL, the default paper size is returned,
see gtk_paper_size_get_default().
#NAME: get_private_hint
#PARENT: Gtk.RecentInfo
#COMMENT: Gets the value of the “private” flag. Resources in the recently used
list that have this flag set to %TRUE should only be displayed by the
applications that have registered them.
#NAME: load_file
#PARENT: Gtk.PageSetup
#COMMENT: Reads the page setup from the file @file_name.
See gtk_page_setup_to_file().
#NAME: widget
#PARENT: Gtk.CellAreaClass.event.event.gint
#COMMENT: the #GtkWidget that @area is rendering to
#NAME: get_yalign
#PARENT: Gtk.Label
#COMMENT: Gets the #GtkLabel:yalign property for @label.
#NAME: stock_id
#PARENT: Gtk.RadioToolButton.new_with_stock_from_widget.ToolItem
#COMMENT: the name of a stock item
#NAME: is_visible
#PARENT: Gtk.Action.is_visible
#COMMENT: %TRUE if the action and its associated action group
are both visible.
#NAME: get_aligned_area
#PARENT: Gtk.CellRenderer
#COMMENT: Gets the aligned area used by @cell inside @cell_area. Used for finding
the appropriate edit and focus rectangle.
#NAME: new
#PARENT: Gtk.SizeGroup.new
#COMMENT: a newly created #GtkSizeGroup
#NAME: context
#PARENT: Gtk.render_line.none
#COMMENT: a #GtkStyleContext
#NAME: icon_pos
#PARENT: Gtk.Entry.get_icon_gicon.Gio.Icon
#COMMENT: Icon position
#NAME: select_multiple
#PARENT: Gtk.FileChooser.set_select_multiple.none
#COMMENT: %TRUE if multiple files can be selected.
#NAME: get_current_page
#PARENT: Gtk.Assistant.get_current_page
#COMMENT: The index (starting from 0) of the current
    page in the @assistant, or -1 if the @assistant has no pages,
    or no current page.
#NAME: setting
#PARENT: Gtk.Label.set_use_markup.none
#COMMENT: %TRUE if the label’s text should be parsed for markup.
#NAME: expander
#PARENT: Gtk.Expander.set_spacing.none
#COMMENT: a #GtkExpander
#NAME: spacing
#PARENT: Gtk.IconView
#COMMENT: The spacing property specifies the space which is inserted between
the cells (i.e. the icon and the text) of an item.
#NAME: page
#PARENT: Gtk.Notebook.switch-page.none
#COMMENT: the new current page
#NAME: load_file
#PARENT: Gtk.PrintSettings
#COMMENT: Reads the print settings from @file_name. If the file could not be loaded
then error is set to either a #GFileError or #GKeyFileError.
See gtk_print_settings_to_file().
#NAME: factory
#PARENT: Gtk.IconFactory.remove_default.none
#COMMENT: a #GtkIconFactory previously added with gtk_icon_factory_add_default()
#NAME: detail-width-chars
#PARENT: Gtk.Calendar
#COMMENT: Width of a detail cell, in characters.
A value of 0 allows any width. See gtk_calendar_set_detail_func().
#NAME: drag-end
#PARENT: Gtk.GestureDrag
#COMMENT: This signal is emitted whenever the dragging is finished.
#NAME: get_scale_delta
#PARENT: Gtk.GestureZoom.get_scale_delta
#COMMENT: the scale delta
#NAME: tooltip
#PARENT: Gtk.Tooltip.set_custom.none
#COMMENT: a #GtkTooltip
#NAME: get_rubber_banding
#PARENT: Gtk.TreeView.get_rubber_banding
#COMMENT: %TRUE if rubber banding in @tree_view is enabled.
#NAME: widget
#PARENT: Gtk.selection_clear_targets.none
#COMMENT: a #GtkWidget
#NAME: display
#PARENT: Gtk.Clipboard.get_for_display.Clipboard
#COMMENT: the #GdkDisplay for which the clipboard is to be retrieved or created.
#NAME: filter_path
#PARENT: Gtk.TreeModelFilter.convert_path_to_child_path.TreePath
#COMMENT: A #GtkTreePath to convert.
#NAME: set_show_tips
#PARENT: Gtk.RecentChooser
#COMMENT: Sets whether to show a tooltips containing the full path of each
recently used resource in a #GtkRecentChooser widget.
#NAME: action_group
#PARENT: Gtk.UIManager.insert_action_group.none
#COMMENT: the action group to be inserted
#NAME: set_range
#PARENT: Gtk.Range
#COMMENT: Sets the allowable values in the #GtkRange, and clamps the range
value to be between @min and @max. (If the range has a non-zero
page size, it is clamped between @min and @max - page-size.)
#NAME: priority
#PARENT: Gtk.StyleContext.add_provider.none
#COMMENT: the priority of the style provider. The lower
           it is, the earlier it will be used in the style
           construction. Typically this will be in the range
           between %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK and
           %GTK_STYLE_PROVIDER_PRIORITY_USER
#NAME: margin-left
#PARENT: Gtk.Widget
#COMMENT: Margin on left side of widget.

This property adds margin outside of the widget's normal size
request, the margin will be added in addition to the size from
gtk_widget_set_size_request() for example.
#NAME: focus_on_click
#PARENT: Gtk.Button.set_focus_on_click.none
#COMMENT: whether the button grabs focus when clicked with the mouse
#NAME: render_icon_surface
#PARENT: Gtk.IconSet
#COMMENT: Renders an icon using gtk_render_icon_pixbuf() and converts it to a
cairo surface.

This function never returns %NULL; if the icon can’t be rendered
(perhaps because an image file fails to load), a default "missing
image" icon will be returned instead.
#NAME: manager
#PARENT: Gtk.RecentChooserMenu.new_for_manager.Widget
#COMMENT: a #GtkRecentManager
#NAME: index
#PARENT: Gtk.ToolItemGroup.get_nth_item.ToolItem
#COMMENT: the index
#NAME: x
#PARENT: Gtk.render_extension.none
#COMMENT: X origin of the rectangle
#NAME: minimum_width
#PARENT: Gtk.CellArea.get_preferred_width_for_height.none
#COMMENT: location to store the minimum width, or %NULL
#NAME: count
#PARENT: Gtk.Label.move-cursor.none
#COMMENT: the number of @step units to move
#NAME: fg
#PARENT: Gtk.RcFlags
#COMMENT: Deprecated
#NAME: viewport
#PARENT: Gtk.Viewport.get_bin_window.Gdk.Window
#COMMENT: a #GtkViewport
#NAME: y
#PARENT: Gtk.render_extension.none
#COMMENT: Y origin of the rectangle
#NAME: row
#PARENT: Gtk.ListBox.row-activated.none
#COMMENT: the activated row
#NAME: plug
#PARENT: Gtk.Plug.construct.none
#COMMENT: a #GtkPlug.
#NAME: expander
#PARENT: Gtk.Expander.set_label_widget.none
#COMMENT: a #GtkExpander
#NAME: child
#PARENT: Gtk.Container.child_get_valist.none
#COMMENT: a widget which is a child of @container
#NAME: unselect_path
#PARENT: Gtk.IconView
#COMMENT: Unselects the row at @path.
#NAME: ancestor
#PARENT: Gtk.Widget.is_ancestor.gboolean
#COMMENT: another #GtkWidget
#NAME: toggled
#PARENT: Gtk.CellRendererToggle
#COMMENT: The ::toggled signal is emitted when the cell is toggled.

It is the responsibility of the application to update the model
with the correct value to store at @path.  Often this is simply the
opposite of the value currently stored at @path.
#NAME: iter
#PARENT: Gtk.TreeView.test-expand-row.gboolean
#COMMENT: the tree iter of the row to expand
#NAME: get_preferred_height_and_baseline_for_width
#PARENT: Gtk.Widget
#COMMENT: Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
the specified @width, or the default height if @width is -1. The baselines may be -1 which means
that no baseline is requested for this widget.

The returned request will be modified by the
GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
and by any #GtkSizeGroups that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.
#NAME: closure
#PARENT: Gtk.AccelGroup.connect.none
#COMMENT: closure to be executed upon accelerator activation
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_vadjustment.Adjustment
#COMMENT: a #GtkScrolledWindow
#NAME: focus_column
#PARENT: Gtk.TreeView.get_cursor.none
#COMMENT: A
  pointer to be filled with the current focus column, or %NULL
#NAME: before
#PARENT: Gtk.TreeViewDropPosition
#COMMENT: dropped row is inserted before
#NAME: direction
#PARENT: Gtk.Widget.child_focus.gboolean
#COMMENT: direction of focus movement
#NAME: get_comments
#PARENT: Gtk.AboutDialog.get_comments
#COMMENT: The comments. The string is owned by the about
 dialog and must not be modified.
#NAME: requisition
#PARENT: Gtk.CellView.get_size_of_row.gboolean
#COMMENT: return location for the size
#NAME: shadow_type
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: type of shadow to draw
#NAME: uppercase_sentences
#PARENT: Gtk.InputHints
#COMMENT: Suggest to capitalize the
    first word of each sentence
#NAME: get_device_enabled
#PARENT: Gtk.Widget.get_device_enabled
#COMMENT: %TRUE is @device is enabled for @widget
#NAME: get_size
#PARENT: Gtk.CellRenderer
#COMMENT: Obtains the width and height needed to render the cell. Used by view
widgets to determine the appropriate size for the cell_area passed to
gtk_cell_renderer_render().  If @cell_area is not %NULL, fills in the
x and y offsets (if set) of the cell relative to this location.

Please note that the values set in @width and @height, as well as those
in @x_offset and @y_offset are inclusive of the xpad and ypad properties.
#NAME: in_range
#PARENT: Gtk.TextIter.in_range
#COMMENT: %TRUE if @iter is in the range
#NAME: cell
#PARENT: Gtk.TreeViewColumn.pack_start.none
#COMMENT: The #GtkCellRenderer.
#NAME: main_iteration
#PARENT: Gtk.main_iteration
#COMMENT: %TRUE if gtk_main_quit() has been called for the
    innermost mainloop
#NAME: iter
#PARENT: Gtk.TreeModel.row-inserted.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the new row
#NAME: menu
#PARENT: Gtk.IconSize
#COMMENT: Size appropriate for menus (16px).
#NAME: sizes
#PARENT: Gtk.IconSet.get_sizes.none
#COMMENT: return location
    for array of sizes
#NAME: iter_nth_child
#PARENT: Gtk.TreeModel.iter_nth_child
#COMMENT: %TRUE, if @parent has an @n-th child
#NAME: get_show_menubar
#PARENT: Gtk.ApplicationWindow
#COMMENT: Returns whether the window will display a menubar for the app menu
and menubar as needed.
#NAME: uri
#PARENT: Gtk.RecentChooserIface.select_uri.select_uri.gboolean
#COMMENT: a URI
#NAME: context
#PARENT: Gtk.StyleContext.invalidate.none
#COMMENT: a #GtkStyleContext.
#NAME: data
#PARENT: Gtk.BuildableIface.custom_finished.custom_finished.none
#COMMENT: user data created in custom_tag_start
#NAME: load_symbolic_for_context_finish
#PARENT: Gtk.IconInfo.load_symbolic_for_context_finish
#COMMENT: the rendered icon; this may be a newly
    created icon or a new reference to an internal icon, so you must
    not modify the icon. Use g_object_unref() to release your reference
    to the icon.
#NAME: padding
#PARENT: Gtk.Box.set_child_packing.none
#COMMENT: the new value of the padding child property
#NAME: cell
#PARENT: Gtk.CellRendererClass.get_preferred_width.get_preferred_width.none
#COMMENT: a #GtkCellRenderer instance
#NAME: child
#PARENT: Gtk.Notebook.page-removed.none
#COMMENT: the child #GtkWidget affected
#NAME: reserve-toggle-size
#PARENT: Gtk.Menu
#COMMENT: A boolean that indicates whether the menu reserves space for
toggles and icons, regardless of their actual presence.

This property should only be changed from its default value
for special-purposes such as tabular menus. Regular menus that
are connected to a menu bar or context menus should reserve
toggle space for consistency.
#NAME: text_view
#PARENT: Gtk.TextView.get_accepts_tab.gboolean
#COMMENT: A #GtkTextView
#NAME: monospace
#PARENT: Gtk.TextView.set_monospace.none
#COMMENT: %TRUE to request monospace styling
#NAME: set_permission
#PARENT: Gtk.LockButton
#COMMENT: Sets the #GPermission object that controls @button.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_list_regions.utf8
#COMMENT: position to query, -1 for the path head
#NAME: selection_data
#PARENT: Gtk.tree_set_row_drag_data.gboolean
#COMMENT: some #GtkSelectionData
#NAME: start
#PARENT: Gtk.TextIter.get_text.utf8
#COMMENT: iterator at start of a range
#NAME: width
#PARENT: Gtk.CellAreaContext.get_preferred_height_for_width.none
#COMMENT: a proposed width for allocation
#NAME: notebook
#PARENT: Gtk.Notebook.get_tab_vborder.guint16
#COMMENT: a #GtkNotebook
#NAME: hadjustment
#PARENT: Gtk.Layout.new.Widget
#COMMENT: horizontal scroll adjustment, or %NULL
#NAME: x
#PARENT: Gtk.MenuPositionFunc.none
#COMMENT: address of the #gint representing the horizontal
    position where the menu shall be drawn.
#NAME: reset_style
#PARENT: Gtk.Widget
#COMMENT: Updates the style context of @widget and all descendents
by updating its widget path. #GtkContainers may want
to use this on a child when reordering it in a way that a different
style might apply to it. See also gtk_container_get_path_for_child().
#NAME: left
#PARENT: Gtk.Border
#COMMENT: The width of the left border
#NAME: top_right
#PARENT: Gtk.CornerType
#COMMENT: Place the scrollbars on the left and bottom of the
 widget.
#NAME: y
#PARENT: Gtk.MenuPositionFunc.none
#COMMENT: address of the #gint representing the vertical position
    where the menu shall be drawn.  This is an output parameter.
#NAME: get_flippable
#PARENT: Gtk.Range
#COMMENT: Gets the value set by gtk_range_set_flippable().
#NAME: rc_reparse_all_for_settings
#PARENT: Gtk.rc_reparse_all_for_settings
#COMMENT: %TRUE if the files were reread.
#NAME: get_slice
#PARENT: Gtk.TextBuffer
#COMMENT: Returns the text in the range [@start,@end). Excludes undisplayed
text (text marked with tags that set the invisibility attribute) if
@include_hidden_chars is %FALSE. The returned string includes a
0xFFFC character whenever the buffer contains
embedded images, so byte and character indexes into
the returned string do correspond to byte
and character indexes into the buffer. Contrast with
gtk_text_buffer_get_text(). Note that 0xFFFC can occur in normal
text as well, so it is not a reliable indicator that a pixbuf or
widget is in the buffer.
#NAME: resize-grip-visible
#PARENT: Gtk.Window
#COMMENT: Whether a corner resize grip is currently shown.
#NAME: new
#PARENT: Gtk.CheckMenuItem.new
#COMMENT: a new #GtkCheckMenuItem.
#NAME: set_child_pack_direction
#PARENT: Gtk.MenuBar
#COMMENT: Sets how widgets should be packed inside the children of a menubar.
#NAME: get_button
#PARENT: Gtk.TreeViewColumn.get_button
#COMMENT: The button for the column header.
#NAME: get_expand
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns %TRUE if the column expands to fill available space.
#NAME: location-popup
#PARENT: Gtk.FileChooserWidget
#COMMENT: The ::location-popup signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

This is used to make the file chooser show a "Location"
prompt which the user can use to manually type the name of
the file he wishes to select.

The default bindings for this signal are
`Control + L`
with a @path string of "" (the empty
string).  It is also bound to `/` with a
@path string of "`/`"
(a slash):  this lets you type `/` and
immediately type a path name.  On Unix systems, this is bound to
`~` (tilde) with a @path string
of "~" itself for access to home directories.
#NAME: size
#PARENT: Gtk.CellRendererSpinner
#COMMENT: The #GtkIconSize value that specifies the size of the rendered spinner.
#NAME: image
#PARENT: Gtk.Image.get_gicon.none
#COMMENT: a #GtkImage
#NAME: fill
#PARENT: Gtk.paint_arrow.none
#COMMENT: %TRUE if the arrow tip should be filled
#NAME: get_preferred_width
#PARENT: Gtk.CellRenderer
#COMMENT: Retreives a renderer’s natural size when rendered to @widget.
#NAME: set_page_title
#PARENT: Gtk.Assistant
#COMMENT: Sets a title for @page.

The title is displayed in the header area of the assistant
when @page is the current page.
#NAME: selection
#PARENT: Gtk.TreeSelection.get_mode.SelectionMode
#COMMENT: a #GtkTreeSelection
#NAME: add_radio_actions
#PARENT: Gtk.ActionGroup
#COMMENT: This is a convenience routine to create a group of radio actions and
add them to the action group.

The “changed” signal of the first radio action is connected to the
@on_change callback and the accel paths of the actions are set to
`<Actions>/group-name/action-name`.
#NAME: action
#PARENT: Gtk.PrintOperation.run.PrintOperationResult
#COMMENT: the action to start
#NAME: new_from_string
#PARENT: Gtk.TreePath.new_from_string
#COMMENT: A newly-created #GtkTreePath-struct, or %NULL
#NAME: chooser
#PARENT: Gtk.FileChooser.get_preview_uri.utf8
#COMMENT: a #GtkFileChooser
#NAME: get_default_widget
#PARENT: Gtk.Window.get_default_widget
#COMMENT: the default widget, or %NULL if there is none.
#NAME: icon_name
#PARENT: Gtk.AboutDialog.set_logo_icon_name.none
#COMMENT: an icon name, or %NULL
#NAME: color
#PARENT: Gtk.SymbolicColor.to_string.utf8
#COMMENT: color to convert to a string
#NAME: get_icon_name
#PARENT: Gtk.ToolButton.get_icon_name
#COMMENT: the icon name or %NULL if the tool button has
no themed icon
#NAME: get_row_separator_func
#PARENT: Gtk.TreeView.get_row_separator_func
#COMMENT: the current row separator function.
#NAME: state_type
#PARENT: Gtk.paint_slider.none
#COMMENT: a state
#NAME: set_draw_sensitive
#PARENT: Gtk.CellView
#COMMENT: Sets whether @cell_view should draw all of its
cells in a sensitive state, this is used by #GtkComboBox menus
to ensure that rows with insensitive cells that contain
children appear sensitive in the parent menu item.
#NAME: colors
#PARENT: Gtk.ColorSelectionChangePaletteWithScreenFunc.none
#COMMENT: Array of colors
#NAME: context
#PARENT: Gtk.CellAreaContext.get_preferred_width_for_height.none
#COMMENT: a #GtkCellAreaContext
#NAME: buffer
#PARENT: Gtk.TextBuffer.apply_tag.none
#COMMENT: a #GtkTextBuffer
#NAME: drag_highlight
#PARENT: Gtk.Widget
#COMMENT: Draws a highlight around a widget. This will attach
handlers to #GtkWidget::draw, so the highlight
will continue to be displayed until gtk_drag_unhighlight()
is called.
#NAME: set_valuesv
#PARENT: Gtk.ListStore
#COMMENT: A variant of gtk_list_store_set_valist() which
takes the columns and values as two arrays, instead of
varargs. This function is mainly intended for
language-bindings and in case the number of columns to
change is not known until run-time.
#NAME: offscreen
#PARENT: Gtk.OffscreenWindow.get_surface.cairo.Surface
#COMMENT: the #GtkOffscreenWindow contained widget.
#NAME: set_has_subtitle
#PARENT: Gtk.HeaderBar
#COMMENT: Sets whether the header bar should reserve space
for a subtitle, even if none is currently set.
#NAME: set_width_chars
#PARENT: Gtk.Label
#COMMENT: Sets the desired width in characters of @label to @n_chars.
#NAME: window
#PARENT: Gtk.Window.set_default.none
#COMMENT: a #GtkWindow
#NAME: IconFactory
#PARENT: Gtk
#COMMENT: An icon factory manages a collection of #GtkIconSet; a #GtkIconSet manages a
set of variants of a particular icon (i.e. a #GtkIconSet contains variants for
different sizes and widget states). Icons in an icon factory are named by a
stock ID, which is a simple string identifying the icon. Each #GtkStyle has a
list of #GtkIconFactory derived from the current theme; those icon factories
are consulted first when searching for an icon. If the theme doesn’t set a
particular icon, GTK+ looks for the icon in a list of default icon factories,
maintained by gtk_icon_factory_add_default() and
gtk_icon_factory_remove_default(). Applications with icons should add a default
icon factory with their icons, which will allow themes to override the icons
for the application.

To display an icon, always use gtk_style_lookup_icon_set() on the widget that
will display the icon, or the convenience function
gtk_widget_render_icon(). These functions take the theme into account when
looking up the icon to use for a given stock ID.

# GtkIconFactory as GtkBuildable # {#GtkIconFactory-BUILDER-UI}

GtkIconFactory supports a custom <sources> element, which can contain
multiple <source> elements. The following attributes are allowed:

- stock-id

    The stock id of the source, a string. This attribute is
    mandatory

- filename

    The filename of the source, a string.  This attribute is
    optional

- icon-name

    The icon name for the source, a string.  This attribute is
    optional.

- size

    Size of the icon, a #GtkIconSize enum value.  This attribute is
    optional.

- direction

    Direction of the source, a #GtkTextDirection enum value.  This
    attribute is optional.

- state

    State of the source, a #GtkStateType enum value.  This
    attribute is optional.


## A #GtkIconFactory UI definition fragment. ##

|[
<object class="GtkIconFactory" id="iconfactory1">
  <sources>
    <source stock-id="apple-red" filename="apple-red.png"/>
  </sources>
</object>
<object class="GtkWindow" id="window1">
  <child>
    <object class="GtkButton" id="apple_button">
      <property name="label">apple-red</property>
      <property name="use-stock">True</property>
    </object>
  </child>
</object>
]|
#NAME: get_point
#PARENT: Gtk.Gesture.get_point
#COMMENT: %TRUE if @sequence is currently interpreted
#NAME: column
#PARENT: Gtk.TreeModelFilterModifyFunc.none
#COMMENT: the column whose display value is determined
#NAME: modal
#PARENT: Gtk.Window.set_modal.none
#COMMENT: whether the window is modal
#NAME: container
#PARENT: Gtk.Container.unset_focus_chain.none
#COMMENT: a #GtkContainer
#NAME: gesture
#PARENT: Gtk.GestureSingle.get_exclusive.gboolean
#COMMENT: a #GtkGestureSingle
#NAME: renderer
#PARENT: Gtk.CellArea.remove.none
#COMMENT: the #GtkCellRenderer to remove from @area
#NAME: lpi
#PARENT: Gtk.PrintSettings.set_printer_lpi.none
#COMMENT: the resolution in lpi (lines per inch)
#NAME: get_size
#PARENT: Gtk.TextTagTable.get_size
#COMMENT: number of tags in @table
#NAME: natural_width
#PARENT: Gtk.Widget.get_preferred_width.none
#COMMENT: location to store the natural width, or %NULL
#NAME: buildable
#PARENT: Gtk.BuildableIface.get_internal_child.get_internal_child.GObject.Object
#COMMENT: a #GtkBuildable
#NAME: down
#PARENT: Gtk.TreePath
#COMMENT: Moves @path to point to the first child of the current path.
#NAME: width
#PARENT: Gtk.PaperSize.new_from_ppd.PaperSize
#COMMENT: the paper width, in points
#NAME: primary-icon-storage-type
#PARENT: Gtk.Entry
#COMMENT: The representation which is used for the primary icon of the entry.
#NAME: cell
#PARENT: Gtk.CellRenderer.get_aligned_area.none
#COMMENT: a #GtkCellRenderer instance
#NAME: pspec
#PARENT: Gtk.ContainerClass.install_child_property.none
#COMMENT: the #GParamSpec for the property
#NAME: drop_left
#PARENT: Gtk.IconViewDropPosition
#COMMENT: droppped item is inserted to the left
#NAME: remove_column
#PARENT: Gtk.TreeView
#COMMENT: Removes @column from @tree_view.
#NAME: widget
#PARENT: Gtk.Widget.style_get_property.none
#COMMENT: a #GtkWidget
#NAME: offset
#PARENT: Gtk.IMContextClass.delete_surrounding.delete_surrounding.gboolean
#COMMENT: offset from cursor position in chars;
   a negative value means start before the cursor.
#NAME: get_label
#PARENT: Gtk.Action
#COMMENT: Gets the label text of @action.
#NAME: controller
#PARENT: Gtk.EventController.set_propagation_phase.none
#COMMENT: a #GtkEventController
#NAME: corner_bottomright
#PARENT: Gtk.JunctionSides
#COMMENT: Element connects on the bottom-right corner.
#NAME: edited
#PARENT: Gtk.CellRendererText
#COMMENT: This signal is emitted after @renderer has been edited.

It is the responsibility of the application to update the model
and store @new_text at the position indicated by @path.
#NAME: list_child_properties
#PARENT: Gtk.ContainerClass.list_child_properties
#COMMENT: 
    a newly allocated %NULL-terminated array of #GParamSpec*.
    The array must be freed with g_free().
#NAME: self
#PARENT: Gtk.NumerableIcon.get_style_context.StyleContext
#COMMENT: a #GtkNumerableIcon
#NAME: combo_box
#PARENT: Gtk.ComboBox.popup.none
#COMMENT: a #GtkComboBox
#NAME: new
#PARENT: Gtk.ComboBoxText.new
#COMMENT: A new #GtkComboBoxText
#NAME: text
#PARENT: Gtk.Clipboard.set_text.none
#COMMENT: a UTF-8 string.
#NAME: set_row_spacing
#PARENT: Gtk.IconView
#COMMENT: Sets the ::row-spacing property which specifies the space
which is inserted between the rows of the icon view.
#NAME: is_recognized
#PARENT: Gtk.Gesture
#COMMENT: Returns %TRUE if the gesture is currently recognized.
A gesture is recognized if there are as many interacting
touch sequences as required by @gesture, and #GtkGesture::check
returned %TRUE for the sequences being currently interpreted.
#NAME: delete_text
#PARENT: Gtk.Editable
#COMMENT: Deletes a sequence of characters. The characters that are deleted are
those characters at positions from @start_pos up to, but not including
@end_pos. If @end_pos is negative, then the characters deleted
are those from @start_pos to the end of the text.

Note that the positions are specified in characters, not bytes.
#NAME: yalign
#PARENT: Gtk.Misc.set_alignment.none
#COMMENT: the vertical alignment, from 0 (top) to 1 (bottom).
#NAME: resize
#PARENT: Gtk.Paned.pack2.none
#COMMENT: should this child expand when the paned widget is resized.
#NAME: toggle-cursor-visible
#PARENT: Gtk.TextView
#COMMENT: The ::toggle-cursor-visible signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to toggle the visibility of the cursor.

The default binding for this signal is F7.
#NAME: get_column_type
#PARENT: Gtk.TreeModelIface.get_column_type.get_column_type
#COMMENT: the type of the column
#NAME: mru
#PARENT: Gtk.RecentSortType
#COMMENT: Sort the returned list with the most recently used
  items first.
#NAME: protocol
#PARENT: Gtk.Widget.drag_dest_set_proxy.none
#COMMENT: the drag protocol which the @proxy_window accepts
  (You can use gdk_drag_get_protocol() to determine this)
#NAME: natural_size
#PARENT: Gtk.CellRenderer.get_preferred_size.none
#COMMENT: location for storing the natural size, or %NULL
#NAME: get_sensitive
#PARENT: Gtk.CellRenderer
#COMMENT: Returns the cell renderer’s sensitivity.
#NAME: lookup_color
#PARENT: Gtk.Style
#COMMENT: Looks up @color_name in the style’s logical color mappings,
filling in @color and returning %TRUE if found, otherwise
returning %FALSE. Do not cache the found mapping, because
it depends on the #GtkStyle and might change when a theme
switch occurs.
#NAME: drag_check_threshold
#PARENT: Gtk.Widget
#COMMENT: Checks to see if a mouse drag starting at (@start_x, @start_y) and ending
at (@current_x, @current_y) has passed the GTK+ drag threshold, and thus
should trigger the beginning of a drag-and-drop operation.
#NAME: socket_
#PARENT: Gtk.Socket.add_id.none
#COMMENT: a #GtkSocket
#NAME: spin_button
#PARENT: Gtk.SpinButton.get_increments.none
#COMMENT: a #GtkSpinButton
#NAME: filename
#PARENT: Gtk.FileChooser.set_current_folder.gboolean
#COMMENT: the full path of the new current folder
#NAME: select_uri
#PARENT: Gtk.RecentChooserIface.select_uri.select_uri
#COMMENT: %TRUE if @uri was found.
#NAME: has_tag
#PARENT: Gtk.TextIter.has_tag
#COMMENT: whether @iter is tagged with @tag
#NAME: iter_previous
#PARENT: Gtk.TreeModelIface.iter_previous.iter_previous
#COMMENT: %TRUE if @iter has been changed to the previous node
#NAME: name
#PARENT: Gtk.WidgetPath.iter_has_region.gboolean
#COMMENT: region name
#NAME: callback_name
#PARENT: Gtk.Builder.lookup_callback_symbol.GObject.Callback
#COMMENT: The name of the callback
#NAME: data
#PARENT: Gtk.CssProvider.load_from_data.gboolean
#COMMENT: CSS data loaded in memory
#NAME: chooser
#PARENT: Gtk.FileChooser.set_extra_widget.none
#COMMENT: a #GtkFileChooser
#NAME: set_selection_mode
#PARENT: Gtk.FlowBox
#COMMENT: Sets how selection works in @box.
See #GtkSelectionMode for details.
#NAME: set_markup_with_mnemonic
#PARENT: Gtk.Label
#COMMENT: Parses @str which is marked up with the
[Pango text markup language][PangoMarkupFormat],
setting the label’s text and attribute list based on the parse results.
If characters in @str are preceded by an underscore, they are underlined
indicating that they represent a keyboard accelerator called a mnemonic.

The mnemonic key can be used to activate another widget, chosen
automatically, or explicitly using gtk_label_set_mnemonic_widget().
#NAME: get_items
#PARENT: Gtk.RecentChooser
#COMMENT: Gets the list of recently used resources in form of #GtkRecentInfo objects.

The return value of this function is affected by the “sort-type” and
“limit” properties of @chooser.
#NAME: copy
#PARENT: Gtk.PageSetup.copy
#COMMENT: a copy of @other
#NAME: group
#PARENT: Gtk.RadioToolButton.new.ToolItem
#COMMENT: An
  existing radio button group, or %NULL if you are creating a new group
#NAME: set_frame_clock
#PARENT: Gtk.StyleContext
#COMMENT: Attaches @context to the given frame clock.

The frame clock is used for the timing of animations.

If you are using a #GtkStyleContext returned from
gtk_widget_get_style_context(), you do not need to
call this yourself.
#NAME: color_name
#PARENT: Gtk.Style.lookup_color.gboolean
#COMMENT: the name of the logical color to look up
#NAME: get_min_children_per_line
#PARENT: Gtk.FlowBox
#COMMENT: Gets the minimum number of children per line.
#NAME: new
#PARENT: Gtk.RecentFilter.new
#COMMENT: a new #GtkRecentFilter
#NAME: set_collapsed
#PARENT: Gtk.ToolItemGroup
#COMMENT: Sets whether the @group should be collapsed or expanded.
#NAME: get_active_id
#PARENT: Gtk.ComboBox.get_active_id
#COMMENT: the ID of the active row, or %NULL
#NAME: get_accel_widget
#PARENT: Gtk.AccelLabel.get_accel_widget
#COMMENT: the object monitored by the accelerator label, or %NULL.
#NAME: get
#PARENT: Gtk.StyleContext
#COMMENT: Retrieves several style property values from @context for a
given state.
#NAME: editable
#PARENT: Gtk.TextAttributes
#COMMENT: Can edit this text.
#NAME: cell_renderer
#PARENT: Gtk.TreeViewColumn.add_attribute.none
#COMMENT: the #GtkCellRenderer to set attributes on
#NAME: widget
#PARENT: Gtk.Widget.get_events.gint
#COMMENT: a #GtkWidget
#NAME: copy
#PARENT: Gtk.PrintSettings.copy
#COMMENT: a newly allocated copy of @other
#NAME: convert_child_iter_to_iter
#PARENT: Gtk.TreeModelFilter
#COMMENT: Sets @filter_iter to point to the row in @filter that corresponds to the
row pointed at by @child_iter.  If @filter_iter was not set, %FALSE is
returned.
#NAME: main_iteration_do
#PARENT: Gtk.main_iteration_do
#COMMENT: %TRUE if gtk_main_quit() has been called for the
    innermost mainloop
#NAME: new_from_pixbuf
#PARENT: Gtk.Image.new_from_pixbuf
#COMMENT: a new #GtkImage
#NAME: Toolbar
#PARENT: Gtk
#COMMENT: A toolbar is created with a call to gtk_toolbar_new().

A toolbar can contain instances of a subclass of #GtkToolItem. To add
a #GtkToolItem to the a toolbar, use gtk_toolbar_insert(). To remove
an item from the toolbar use gtk_container_remove(). To add a button
to the toolbar, add an instance of #GtkToolButton.

Toolbar items can be visually grouped by adding instances of
#GtkSeparatorToolItem to the toolbar. If the GtkToolbar child property
“expand” is #TRUE and the property #GtkSeparatorToolItem:draw is set to
#FALSE, the effect is to force all following items to the end of the toolbar.

Creating a context menu for the toolbar can be done by connecting to
the #GtkToolbar::popup-context-menu signal.
#NAME: shape_combine_region
#PARENT: Gtk.Widget
#COMMENT: Sets a shape for this widget’s GDK window. This allows for
transparent windows etc., see gdk_window_shape_combine_region()
for more information.
#NAME: widget
#PARENT: Gtk.paint_layout.none
#COMMENT: the widget
#NAME: buffer
#PARENT: Gtk.TextBuffer.insert_interactive_at_cursor.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: recent-manager
#PARENT: Gtk.RecentChooser
#COMMENT: The #GtkRecentManager instance used by the #GtkRecentChooser to
display the list of recently used resources.
#NAME: enable
#PARENT: Gtk.TreeView.set_fixed_height_mode.none
#COMMENT: %TRUE to enable fixed height mode
#NAME: set
#PARENT: Gtk.Widget.set_vexpand_set.none
#COMMENT: value for vexpand-set property
#NAME: child
#PARENT: Gtk.MenuShellClass.insert.insert.none
#COMMENT: The #GtkMenuItem to add
#NAME: tree_view
#PARENT: Gtk.TreeView.get_enable_search.gboolean
#COMMENT: A #GtkTreeView
#NAME: box
#PARENT: Gtk.FlowBox.select_child.none
#COMMENT: a #GtkFlowBox
#NAME: box
#PARENT: Gtk.FlowBox.set_row_spacing.none
#COMMENT: a #GtkFlowBox
#NAME: LevelBarMode
#PARENT: Gtk
#COMMENT: Describes how #GtkLevelBar contents should be rendered.
Note that this enumeration could be extended with additional modes
in the future.
#NAME: invalid
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: selection_owner_set
#PARENT: Gtk
#COMMENT: Claims ownership of a given selection for a particular widget,
or, if @widget is %NULL, release ownership of the selection.
#NAME: get_relief_style
#PARENT: Gtk.ToolShell.get_relief_style
#COMMENT: The relief style of buttons on @shell.
#NAME: pixbuf
#PARENT: Gtk.Widget.drag_source_set_icon_pixbuf.none
#COMMENT: the #GdkPixbuf for the drag icon
#NAME: get_current_item
#PARENT: Gtk.RecentChooser.get_current_item
#COMMENT: a #GtkRecentInfo.  Use gtk_recent_info_unref() when
  when you have finished using it.
#NAME: create_child_anchor
#PARENT: Gtk.TextBuffer.create_child_anchor
#COMMENT: the created child anchor
#NAME: get_default_direction
#PARENT: Gtk.Widget.get_default_direction
#COMMENT: the current default direction.
#NAME: width
#PARENT: Gtk.render_extension.none
#COMMENT: rectangle width
#NAME: current
#PARENT: Gtk.BindingSet
#COMMENT: implementation detail
#NAME: cancel
#PARENT: Gtk.Gesture
#COMMENT: This signal is emitted whenever a sequence is cancelled. This usually
happens on active touches when gtk_event_controller_reset() is called
on @gesture (manually, due to grabs...), or the individual @sequence
was claimed by parent widgets' controllers (see gtk_gesture_set_sequence_state()).

@gesture must forget everything about @sequence as a reaction to this signal.
#NAME: drag_dest
#PARENT: Gtk.TreeDragDestIface.drag_data_received.drag_data_received.gboolean
#COMMENT: a #GtkTreeDragDest
#NAME: get_cursor
#PARENT: Gtk.TreeView
#COMMENT: Fills in @path and @focus_column with the current path and focus column.  If
the cursor isn’t currently set, then *@path will be %NULL.  If no column
currently has focus, then *@focus_column will be %NULL.

The returned #GtkTreePath must be freed with gtk_tree_path_free() when
you are done with it.
#NAME: get_collate
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_COLLATE.
#NAME: interactive
#PARENT: Gtk.TextBuffer.backspace.gboolean
#COMMENT: whether the deletion is caused by user interaction
#NAME: preedit-start
#PARENT: Gtk.IMContext
#COMMENT: The ::preedit-start signal is emitted when a new preediting sequence
starts.
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.row_inserted.row_inserted.none
#COMMENT: a #GtkTreeModel
#NAME: get_flags
#PARENT: Gtk.TreeModelIface.get_flags.get_flags
#COMMENT: the flags supported by this interface
#NAME: spinner
#PARENT: Gtk.test_spin_button_click.gboolean
#COMMENT: valid GtkSpinButton widget.
#NAME: enter
#PARENT: Gtk.Button
#COMMENT: Emitted when the pointer enters the button.
#NAME: new_for_pixbuf
#PARENT: Gtk.IconInfo
#COMMENT: Creates a #GtkIconInfo for a #GdkPixbuf.
#NAME: new
#PARENT: Gtk.HSeparator
#COMMENT: Creates a new #GtkHSeparator.
#NAME: set_tab_detachable
#PARENT: Gtk.Notebook
#COMMENT: Sets whether the tab can be detached from @notebook to another
notebook or widget.

Note that 2 notebooks must share a common group identificator
(see gtk_notebook_set_group_name()) to allow automatic tabs
interchange between them.

If you want a widget to interact with a notebook through DnD
(i.e.: accept dragged tabs from it) it must be set as a drop
destination and accept the target “GTK_NOTEBOOK_TAB”. The notebook
will fill the selection with a GtkWidget** pointing to the child
widget that corresponds to the dropped tab.

Note that you should use gtk_notebook_detach_tab() instead
of gtk_container_remove() if you want to remove the tab from
the source notebook as part of accepting a drop. Otherwise,
the source notebook will think that the dragged tab was
removed from underneath the ongoing drag operation, and
will initiate a drag cancel animation.

|[<!-- language="C" -->
 static void
 on_drag_data_received (GtkWidget        *widget,
                        GdkDragContext   *context,
                        gint              x,
                        gint              y,
                        GtkSelectionData *data,
                        guint             info,
                        guint             time,
                        gpointer          user_data)
 {
   GtkWidget *notebook;
   GtkWidget **child;

   notebook = gtk_drag_get_source_widget (context);
   child = (void*) gtk_selection_data_get_data (data);

   process_widget (*child);
   gtk_notebook_detach_tab (GTK_NOTEBOOK (notebook), *child);
 }
]|

If you want a notebook to accept drags from other widgets,
you will have to set your own DnD code to do it.
#NAME: extra_widget
#PARENT: Gtk.FileChooser.set_extra_widget.none
#COMMENT: widget for extra options
#NAME: action
#PARENT: Gtk.Action.get_label.utf8
#COMMENT: a #GtkAction
#NAME: get_range_rect
#PARENT: Gtk.Range
#COMMENT: This function returns the area that contains the range’s trough
and its steppers, in widget->window coordinates.

This function is useful mainly for #GtkRange subclasses.
#NAME: STOCK_GO_FORWARD
#PARENT: Gtk
#COMMENT: The “Forward” item and icon. The icon has an RTL variant.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_from_file.none
#COMMENT: a #GtkStatusIcon
#NAME: src
#PARENT: Gtk.TextAttributes.copy.TextAttributes
#COMMENT: a #GtkTextAttributes to be copied
#NAME: group
#PARENT: Gtk.ToolPalette.set_expand.none
#COMMENT: a #GtkToolItemGroup which is a child of palette
#NAME: set_resizable
#PARENT: Gtk.TreeViewColumn
#COMMENT: If @resizable is %TRUE, then the user can explicitly resize the column by
grabbing the outer edge of the column button.  If resizable is %TRUE and
sizing mode of the column is #GTK_TREE_VIEW_COLUMN_AUTOSIZE, then the sizing
mode is changed to #GTK_TREE_VIEW_COLUMN_GROW_ONLY.
#NAME: name
#PARENT: Gtk.WidgetPath.iter_has_class.gboolean
#COMMENT: class name
#NAME: accel_group
#PARENT: Gtk.Window.remove_accel_group.none
#COMMENT: a #GtkAccelGroup
#NAME: get_active_text
#PARENT: Gtk.ComboBoxText
#COMMENT: Returns the currently active string in @combo_box, or %NULL
if none is selected. If @combo_box contains an entry, this
function will return its contents (which will not necessarily
be an item from the list).
#NAME: get_preview_uri
#PARENT: Gtk.FileChooser.get_preview_uri
#COMMENT: the URI for the file to preview, or %NULL if no file is
selected. Free with g_free().
#NAME: wrap_mode
#PARENT: Gtk.Label.set_line_wrap_mode.none
#COMMENT: the line wrapping mode
#NAME: icon
#PARENT: Gtk.AppChooserButton.append_custom_item.none
#COMMENT: the icon for the custom item
#NAME: get_active_window
#PARENT: Gtk.Application
#COMMENT: Gets the “active” window for the application.

The active window is the one that was most recently focused (within
the application).  This window may not have the focus at the moment
if another application has it — this is just the most
recently-focused window within this application.
#NAME: chooser
#PARENT: Gtk.RecentChooser.set_show_not_found.none
#COMMENT: a #GtkRecentChooser
#NAME: update
#PARENT: Gtk.SpinButton
#COMMENT: Manually force an update of the spin button.
#NAME: step_increment
#PARENT: Gtk.Adjustment.new.Adjustment
#COMMENT: the step increment.
#NAME: select-cursor-item
#PARENT: Gtk.IconView
#COMMENT: A [keybinding signal][GtkBindingSignal]
which gets emitted when the user selects the item that is currently
focused.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control selection
programmatically.

There is no default binding for this signal.
#NAME: area
#PARENT: Gtk.CellAreaClass.get_request_mode.get_request_mode.SizeRequestMode
#COMMENT: a #GtkCellArea
#NAME: get_rgba
#PARENT: Gtk.ColorChooser
#COMMENT: Gets the currently-selected color.
#NAME: new
#PARENT: Gtk.RcStyle
#COMMENT: Creates a new #GtkRcStyle with no fields set and
a reference count of 1.
#NAME: widget
#PARENT: Gtk.Widget.set_clip.none
#COMMENT: a #GtkWidget
#NAME: entry
#PARENT: Gtk.Entry.get_icon_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: A #GtkEntry
#NAME: invalid_signal
#PARENT: Gtk.BuilderError
#COMMENT: The specified signal is unknown for the object class.
#NAME: signal_id
#PARENT: Gtk.Widget.can_activate_accel.gboolean
#COMMENT: the ID of a signal installed on @widget
#NAME: widget
#PARENT: Gtk.Widget.get_margin_start.gint
#COMMENT: a #GtkWidget
#NAME: set_focus_on_click
#PARENT: Gtk.FileChooserButton
#COMMENT: Sets whether the button will grab focus when it is clicked with the mouse.
Making mouse clicks not grab focus is useful in places like toolbars where
you don’t want the keyboard focus removed from the main area of the
application.
#NAME: add_application
#PARENT: Gtk.RecentFilter
#COMMENT: Adds a rule that allows resources based on the name of the application
that has registered them.
#NAME: modifier
#PARENT: Gtk.StockItem
#COMMENT: Modifier type for keyboard accelerator
#NAME: anchor
#PARENT: Gtk.TextChildAnchor.get_deleted.gboolean
#COMMENT: a #GtkTextChildAnchor
#NAME: args
#PARENT: Gtk.ThemingEngine.get_style_valist.none
#COMMENT: va_list of property name/return location pairs, followed by %NULL
#NAME: detail
#PARENT: Gtk.paint_diamond.none
#COMMENT: a style detail
#NAME: context
#PARENT: Gtk.StyleContext.get_style.none
#COMMENT: a #GtkStyleContext
#NAME: setting
#PARENT: Gtk.Window.set_skip_taskbar_hint.none
#COMMENT: %TRUE to keep this window from appearing in the task bar
#NAME: get_top_margin
#PARENT: Gtk.PageSetup.get_top_margin
#COMMENT: the top margin
#NAME: name
#PARENT: Gtk.Stack.add_named.none
#COMMENT: the name for @child
#NAME: new_alpha
#PARENT: Gtk.SymbolicColor.new_alpha
#COMMENT: A newly created #GtkSymbolicColor
#NAME: spacing
#PARENT: Gtk.Table.set_row_spacings.none
#COMMENT: the number of pixels of space to place between every row in the table.
#NAME: set_vadjustment
#PARENT: Gtk.ScrolledWindow
#COMMENT: Sets the #GtkAdjustment for the vertical scrollbar.
#NAME: set_digits
#PARENT: Gtk.SpinButton
#COMMENT: Set the precision to be displayed by @spin_button. Up to 20 digit precision
is allowed.
#NAME: binding_entry_remove
#PARENT: Gtk
#COMMENT: Remove a binding previously installed via
gtk_binding_entry_add_signal() on @binding_set.
#NAME: left
#PARENT: Gtk.Justification
#COMMENT: The text is placed at the left edge of the label.
#NAME: menu_item
#PARENT: Gtk.MenuItem.select.none
#COMMENT: the menu item
#NAME: xalign
#PARENT: Gtk.Button
#COMMENT: If the child of the button is a #GtkMisc or #GtkAlignment, this property
can be used to control its horizontal alignment. 0.0 is left aligned,
1.0 is right aligned.
#NAME: child
#PARENT: Gtk.Grid.attach_next_to.none
#COMMENT: the widget to add
#NAME: child
#PARENT: Gtk.HeaderBar.pack_start.none
#COMMENT: the #GtkWidget to be added to @bar
#NAME: actionable
#PARENT: Gtk.Actionable.get_action_target_value.GLib.Variant
#COMMENT: a #GtkActionable widget
#NAME: get_submenu
#PARENT: Gtk.MenuItem.get_submenu
#COMMENT: submenu for this menu item, or %NULL if none
#NAME: get_plus_button
#PARENT: Gtk.ScaleButton
#COMMENT: Retrieves the plus button of the #GtkScaleButton.
#NAME: set_exclusive
#PARENT: Gtk.GestureSingle
#COMMENT: Sets whether @gesture is exclusive. An exclusive gesture will
only handle pointer and "pointer emulated" touch events, so at
any given time, there is only one sequence able to interact with
those.
#NAME: event_box
#PARENT: Gtk.EventBox.get_visible_window.gboolean
#COMMENT: a #GtkEventBox
#NAME: data
#PARENT: Gtk.FontFilterFunc.gboolean
#COMMENT: user data passed to gtk_font_chooser_set_filter_func()
#NAME: RcFlags
#PARENT: Gtk
#COMMENT: Deprecated
#NAME: path
#PARENT: Gtk.WidgetPath.iter_set_state.none
#COMMENT: a #GtkWidgetPath
#NAME: modal
#PARENT: Gtk.DialogFlags
#COMMENT: Make the constructed dialog modal,
    see gtk_window_set_modal()
#NAME: left
#PARENT: Gtk.DirectionType
#COMMENT: Move left.
#NAME: markup-column
#PARENT: Gtk.IconView
#COMMENT: The ::markup-column property contains the number of the model column
containing markup information to be displayed. The markup column must be
of type #G_TYPE_STRING. If this property and the :text-column property
are both set to column numbers, it overrides the text column.
If both are set to -1, no texts are displayed.
#NAME: parent_class
#PARENT: Gtk.ListBoxRowClass
#COMMENT: The parent class.
#NAME: iter
#PARENT: Gtk.TextBuffer.get_start_iter.none
#COMMENT: iterator to initialize
#NAME: row_changed
#PARENT: Gtk.TreeModel
#COMMENT: Emits the #GtkTreeModel::row-changed signal on @tree_model.
#NAME: action
#PARENT: Gtk.Action.unblock_activate.none
#COMMENT: a #GtkAction
#NAME: set_visible_child_full
#PARENT: Gtk.Stack
#COMMENT: Makes the child with the given name visible.

Note that the child widget has to be visible itself
(see gtk_widget_show()) in order to become the visible
child of @stack.
#NAME: get_name
#PARENT: Gtk.TextMark
#COMMENT: Returns the mark name; returns NULL for anonymous marks.
#NAME: get_title
#PARENT: Gtk.HeaderBar
#COMMENT: Retrieves the title of the header. See gtk_header_bar_set_title().
#NAME: icon_theme
#PARENT: Gtk.IconTheme.choose_icon_for_scale.IconInfo
#COMMENT: a #GtkIconTheme
#NAME: self
#PARENT: Gtk.LevelBar.get_max_value.gdouble
#COMMENT: a #GtkLevelBar
#NAME: find_func
#PARENT: Gtk.AccelGroup.find.AccelKey
#COMMENT: a function to filter the entries
   of @accel_group with
#NAME: widget
#PARENT: Gtk.CellArea.activate.gboolean
#COMMENT: the #GtkWidget that @area is rendering on
#NAME: size
#PARENT: Gtk.TextView.set_border_window_size.none
#COMMENT: width or height of the window
#NAME: size
#PARENT: Gtk.Tooltip.set_icon_from_icon_name.none
#COMMENT: a stock icon size
#NAME: selection
#PARENT: Gtk.TreeSelection.unselect_all.none
#COMMENT: A #GtkTreeSelection.
#NAME: accelerator_key
#PARENT: Gtk.accelerator_get_label.utf8
#COMMENT: accelerator keyval
#NAME: set_show_dialog_item
#PARENT: Gtk.AppChooserButton
#COMMENT: Sets whether the dropdown menu of this button should show an
entry to trigger a #GtkAppChooserDialog.
#NAME: MenuToolButton
#PARENT: Gtk
#COMMENT: A #GtkMenuToolButton is a #GtkToolItem that contains a button and
a small additional button with an arrow. When clicked, the arrow
button pops up a dropdown menu.

Use gtk_menu_tool_button_new() to create a new
#GtkMenuToolButton.

# GtkMenuToolButton as GtkBuildable

The GtkMenuToolButton implementation of the GtkBuildable interface
supports adding a menu by specifying “menu” as the “type” attribute
of a <child> element.

An example for a UI definition fragment with menus:
|[
<object class="GtkMenuToolButton">
  <child type="menu">
    <object class="GtkMenu"/>
  </child>
</object>
]|
#NAME: selection
#PARENT: Gtk.TreeSelection.selected_foreach.none
#COMMENT: A #GtkTreeSelection.
#NAME: set_column_spacing
#PARENT: Gtk.FlowBox
#COMMENT: Sets the horizontal space to add between children.
See the #GtkFlowBox:column-spacing property.
#NAME: value
#PARENT: Gtk.Container.child_get_property.none
#COMMENT: a location to return the value
#NAME: drag_highlight_row
#PARENT: Gtk.ListBox
#COMMENT: This is a helper function for implementing DnD onto a #GtkListBox.
The passed in @row will be highlighted via gtk_drag_highlight(),
and any previously highlighted row will be unhighlighted.

The row will also be unhighlighted when the widget gets
a drag leave event.
#NAME: new_from_gicon
#PARENT: Gtk.StatusIcon.new_from_gicon
#COMMENT: a new #GtkStatusIcon
#NAME: hover
#PARENT: Gtk.TreeView.set_hover_selection.none
#COMMENT: %TRUE to enable hover selection mode
#NAME: get_valign_with_baseline
#PARENT: Gtk.Widget
#COMMENT: Gets the value of the #GtkWidget:valign property, including
%GTK_ALIGN_BASELINE.
#NAME: get_row_separator_func
#PARENT: Gtk.ComboBox
#COMMENT: Returns the current row separator function.
#NAME: accumulative-margin
#PARENT: Gtk.TextTag
#COMMENT: Whether the margins accumulate or override each other.

When set to %TRUE the margins of this tag are added to the margins
of any other non-accumulative margins present. When set to %FALSE
the margins override one another (the default).
#NAME: filename
#PARENT: Gtk.FileFilterFlags
#COMMENT: the filename of the file being tested
#NAME: size
#PARENT: Gtk.PaperSize.get_default_top_margin.gdouble
#COMMENT: a #GtkPaperSize object
#NAME: get_stock_id
#PARENT: Gtk.ToolButton
#COMMENT: Returns the name of the stock item. See gtk_tool_button_set_stock_id().
The returned string is owned by GTK+ and must not be freed or modifed.
#NAME: AboutDialog
#PARENT: Gtk
#COMMENT: The GtkAboutDialog offers a simple way to display information about
a program like its logo, name, copyright, website and license. It is
also possible to give credits to the authors, documenters, translators
and artists who have worked on the program. An about dialog is typically
opened when the user selects the `About` option from the `Help` menu.
All parts of the dialog are optional.

About dialogs often contain links and email addresses. GtkAboutDialog
displays these as clickable links. By default, it calls gtk_show_uri()
when a user clicks one. The behaviour can be overridden with the
#GtkAboutDialog::activate-link signal.

To specify a person with an email address, use a string like
"Edgar Allan Poe <edgar@poe.com>". To specify a website with a title,
use a string like "GTK+ team http://www.gtk.org".

To make constructing a GtkAboutDialog as convenient as possible, you can
use the function gtk_show_about_dialog() which constructs and shows a dialog
and keeps it around so that it can be shown again.

Note that GTK+ sets a default title of `_("About %s")` on the dialog
window (where \%s is replaced by the name of the application, but in
order to ensure proper translation of the title, applications should
set the title property explicitly when constructing a GtkAboutDialog,
as shown in the following example:
|[<!-- language="C" -->
gtk_show_about_dialog (NULL,
                       "program-name", "ExampleCode",
                       "logo", example_logo,
                       "title" _("About ExampleCode"),
                       NULL);
]|

It is also possible to show a #GtkAboutDialog like any other #GtkDialog,
e.g. using gtk_dialog_run(). In this case, you might need to know that
the “Close” button returns the #GTK_RESPONSE_CANCEL response id.
#NAME: new
#PARENT: Gtk.AccelLabel.new
#COMMENT: a new #GtkAccelLabel.
#NAME: nonexistent
#PARENT: Gtk.FileChooserError
#COMMENT: Indicates that a file does not exist.
#NAME: sort_new_with_model
#PARENT: Gtk.TreeModel
#COMMENT: Creates a new #GtkTreeModel, with @child_model as the child model.
#NAME: iter
#PARENT: Gtk.TreeModelIface.unref_node.unref_node.none
#COMMENT: the #GtkTreeIter-struct
#NAME: sort_column_id
#PARENT: Gtk.TreeSortableIface.set_sort_column_id.set_sort_column_id.none
#COMMENT: the sort column id to set
#NAME: pixbuf
#PARENT: Gtk.TextBuffer.insert_pixbuf.none
#COMMENT: a #GdkPixbuf
#NAME: force_deactivate
#PARENT: Gtk.MenuShell.activate_item.none
#COMMENT: if %TRUE, force the deactivation of the
    menu shell after the menu item is activated
#NAME: context
#PARENT: Gtk.Widget.drag_dest_find_target.Gdk.Atom
#COMMENT: drag context
#NAME: widget
#PARENT: Gtk.WidgetClass.mnemonic_activate.mnemonic_activate.gboolean
#COMMENT: a #GtkWidget
#NAME: func
#PARENT: Gtk.EntryCompletion.set_match_func.none
#COMMENT: the #GtkEntryCompletionMatchFunc to use
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_visible.none
#COMMENT: a #GtkStatusIcon
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_margin.none
#COMMENT: a #GtkThemingEngine
#NAME: expander
#PARENT: Gtk.Expander.get_resize_toplevel.gboolean
#COMMENT: a #GtkExpander
#NAME: label
#PARENT: Gtk.AspectFrame.new.Widget
#COMMENT: Label text.
#NAME: get_gicon
#PARENT: Gtk.RecentInfo.get_gicon
#COMMENT: a #GIcon containing the icon, or %NULL.
  Use g_object_unref() when finished using the icon
#NAME: push
#PARENT: Gtk.Statusbar
#COMMENT: Pushes a new message onto a statusbar’s stack.
#NAME: iter
#PARENT: Gtk.TextIter.get_child_anchor.TextChildAnchor
#COMMENT: an iterator
#NAME: entry
#PARENT: Gtk.Entry.get_icon_tooltip_text.utf8
#COMMENT: a #GtkEntry
#NAME: prepend_page_menu
#PARENT: Gtk.Notebook.prepend_page_menu
#COMMENT: the index (starting from 0) of the prepended
    page in the notebook, or -1 if function fails
#NAME: name
#PARENT: Gtk.UIManager.add_ui.none
#COMMENT: the name for the added UI element
#NAME: range
#PARENT: Gtk.Range.set_min_slider_size.none
#COMMENT: a #GtkRange
#NAME: application
#PARENT: Gtk.Application.add_accelerator.none
#COMMENT: a #GtkApplication
#NAME: continuous
#PARENT: Gtk.LevelBarMode
#COMMENT: the bar has a continuous mode
#NAME: widget
#PARENT: Gtk.Widget.set_parent_window.none
#COMMENT: a #GtkWidget.
#NAME: icon_view
#PARENT: Gtk.IconView.path_is_selected.gboolean
#COMMENT: A #GtkIconView.
#NAME: fsd
#PARENT: Gtk.FontSelectionDialog.get_cancel_button.Widget
#COMMENT: a #GtkFontSelectionDialog
#NAME: label
#PARENT: Gtk.RadioButton.new_with_mnemonic_from_widget.Widget
#COMMENT: the text of the button, with an underscore in front of the
        mnemonic character
#NAME: label
#PARENT: Gtk.Label.get_selection_bounds.gboolean
#COMMENT: a #GtkLabel
#NAME: spread
#PARENT: Gtk.ButtonBoxStyle
#COMMENT: Buttons are evenly spread across the box.
#NAME: group
#PARENT: Gtk.RadioToolButton
#COMMENT: Sets a new group for a radio tool button.
#NAME: editable
#PARENT: Gtk.CellRenderer.editing-started.none
#COMMENT: the #GtkCellEditable
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_row_span_column.none
#COMMENT: A #GtkComboBox.
#NAME: get_paper_sizes
#PARENT: Gtk.PaperSize
#COMMENT: Creates a list of known paper sizes.
#NAME: no
#PARENT: Gtk.ResponseType
#COMMENT: Returned by No buttons in GTK+ dialogs
#NAME: set_gravity
#PARENT: Gtk.Window
#COMMENT: Window gravity defines the meaning of coordinates passed to
gtk_window_move(). See gtk_window_move() and #GdkGravity for
more details.

The default window gravity is #GDK_GRAVITY_NORTH_WEST which will
typically “do what you mean.”
#NAME: box
#PARENT: Gtk.ListBox.set_selection_mode.none
#COMMENT: a #GtkListBox
#NAME: text_view
#PARENT: Gtk.TextView.im_context_filter_keypress.gboolean
#COMMENT: a #GtkTextView
#NAME: xalign
#PARENT: Gtk.Entry.set_alignment.none
#COMMENT: The horizontal alignment, from 0 (left) to 1 (right).
         Reversed for RTL layouts
#NAME: model
#PARENT: Gtk.EntryCompletion.match-selected.gboolean
#COMMENT: the #GtkTreeModel containing the matches
#NAME: default-page-setup
#PARENT: Gtk.PrintOperation
#COMMENT: The #GtkPageSetup used by default.

This page setup will be used by gtk_print_operation_run(),
but it can be overridden on a per-page basis by connecting
to the #GtkPrintOperation::request-page-setup signal.
#NAME: copy
#PARENT: Gtk.SelectionData.copy
#COMMENT: a pointer to a copy of @data.
#NAME: get_pack_direction
#PARENT: Gtk.MenuBar.get_pack_direction
#COMMENT: the pack direction
#NAME: aligned_area
#PARENT: Gtk.CellRenderer.get_aligned_area.none
#COMMENT: the return location for the space inside @cell_area
               that would acually be used to render.
#NAME: get_margin
#PARENT: Gtk.StyleContext
#COMMENT: Gets the margin for a given state as a #GtkBorder.
See %GTK_STYLE_PROPERTY_MARGIN.
#NAME: rows
#PARENT: Gtk.Table.get_size.none
#COMMENT: return location for the number of
  rows, or %NULL
#NAME: cell_set_property
#PARENT: Gtk.CellArea
#COMMENT: Sets a cell property for @renderer in @area.
#NAME: find_cell_property
#PARENT: Gtk.CellAreaClass.find_cell_property
#COMMENT: the #GParamSpec of the child property
  or %NULL if @aclass has no child property with that name.
#NAME: widget
#PARENT: Gtk.device_grab_add.none
#COMMENT: a #GtkWidget
#NAME: pspec
#PARENT: Gtk.rc_property_parse_border.gboolean
#COMMENT: a #GParamSpec
#NAME: get_current_rgba
#PARENT: Gtk.ColorSelection
#COMMENT: Sets @rgba to be the current color in the GtkColorSelection widget.
#NAME: STOCK_STOP
#PARENT: Gtk
#COMMENT: The “Stop” item and icon.
#NAME: get_mark
#PARENT: Gtk.TextBuffer.get_mark
#COMMENT: a #GtkTextMark, or %NULL
#NAME: popup-menu
#PARENT: Gtk.Widget
#COMMENT: This signal gets emitted whenever a widget should pop up a context
menu. This usually happens through the standard key binding mechanism;
by pressing a certain key while a widget is focused, the user can cause
the widget to pop up a menu.  For example, the #GtkEntry widget creates
a menu with clipboard commands. See the
[Popup Menu Migration Checklist][checklist-popup-menu]
for an example of how to use this signal.
#NAME: STYLE_CLASS_MONOSPACE
#PARENT: Gtk
#COMMENT: A CSS class that is added to text view that should use
a monospace font.
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.ref_node.ref_node.none
#COMMENT: a #GtkTreeModel
#NAME: copy
#PARENT: Gtk.TreeRowReference
#COMMENT: Copies a #GtkTreeRowReference.
#NAME: fontchooser
#PARENT: Gtk.FontChooser.set_font.none
#COMMENT: a #GtkFontChooser
#NAME: size
#PARENT: Gtk.PaperSize.get_height.gdouble
#COMMENT: a #GtkPaperSize object
#NAME: x
#PARENT: Gtk.TextView.get_iter_at_location.none
#COMMENT: x position, in buffer coordinates
#NAME: get_row_spacing
#PARENT: Gtk.Table
#COMMENT: Gets the amount of space between row @row, and
row @row + 1. See gtk_table_set_row_spacing().
#NAME: get_row_spacing
#PARENT: Gtk.Table.get_row_spacing
#COMMENT: the row spacing
#NAME: y
#PARENT: Gtk.TextView.get_iter_at_location.none
#COMMENT: y position, in buffer coordinates
#NAME: icon_name
#PARENT: Gtk.IconTheme.load_icon_for_scale.GdkPixbuf.Pixbuf
#COMMENT: the name of the icon to lookup
#NAME: new
#PARENT: Gtk.Style
#COMMENT: Creates a new #GtkStyle.
#NAME: select-all
#PARENT: Gtk.FlowBox
#COMMENT: The ::select-all signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to select all children of the box, if
the selection mode permits it.

The default bindings for this signal is Ctrl-a.
#NAME: get_pango_fontmap
#PARENT: Gtk.PrintContext.get_pango_fontmap
#COMMENT: the font map of @context
#NAME: buffer
#PARENT: Gtk.TextBuffer.create_tag.TextTag
#COMMENT: a #GtkTextBuffer
#NAME: cell_get_size
#PARENT: Gtk.TreeViewColumn
#COMMENT: Obtains the width and height needed to render the column.  This is used
primarily by the #GtkTreeView.
#NAME: widget
#PARENT: Gtk.Widget.get_preferred_height_and_baseline_for_width.none
#COMMENT: a #GtkWidget instance
#NAME: set_modal
#PARENT: Gtk.Window
#COMMENT: Sets a window modal or non-modal. Modal windows prevent interaction
with other windows in the same application. To keep modal dialogs
on top of main application windows, use
gtk_window_set_transient_for() to make the dialog transient for the
parent; most [window managers][gtk-X11-arch]
will then disallow lowering the dialog below the parent.
#NAME: cut-clipboard
#PARENT: Gtk.Entry
#COMMENT: The ::cut-clipboard signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to cut the selection to the clipboard.

The default bindings for this signal are
Ctrl-x and Shift-Delete.
#NAME: fontchooser
#PARENT: Gtk.FontChooser.set_font_desc.none
#COMMENT: a #GtkFontChooser
#NAME: label
#PARENT: Gtk.RecentAction.new_for_manager.Action
#COMMENT: the label displayed in menu items and on buttons,
  or %NULL
#NAME: state
#PARENT: Gtk.ThemingEngine.get_color.none
#COMMENT: state to retrieve the color for
#NAME: chooser
#PARENT: Gtk.FileChooser.unselect_file.none
#COMMENT: a #GtkFileChooser
#NAME: minimum_height
#PARENT: Gtk.CellAreaContext.get_preferred_height_for_width.none
#COMMENT: location to store the minimum height,
    or %NULL
#NAME: tree_view
#PARENT: Gtk.TreeView.insert_column_with_data_func.gint
#COMMENT: a #GtkTreeView
#NAME: with_separators
#PARENT: Gtk.MenuShell.bind_model.none
#COMMENT: %TRUE if toplevel items in @shell should have
  separators between them
#NAME: STOCK_APPLY
#PARENT: Gtk
#COMMENT: The “Apply” item and icon.
#NAME: iter
#PARENT: Gtk.TreeModel.get_string_from_iter.utf8
#COMMENT: a #GtkTreeIter-struct
#NAME: value
#PARENT: Gtk.Builder.value_from_string_type.gboolean
#COMMENT: the #GValue to store the result in
#NAME: text_view
#PARENT: Gtk.TextView.set_indent.none
#COMMENT: a #GtkTextView
#NAME: widget
#PARENT: Gtk.Widget.get_margin_left.gint
#COMMENT: a #GtkWidget
#NAME: pspec
#PARENT: Gtk.WidgetClass.install_style_property.none
#COMMENT: the #GParamSpec for the property
#NAME: new_custom
#PARENT: Gtk.PaperSize
#COMMENT: Creates a new #GtkPaperSize object with the
given parameters.
#NAME: icon_set
#PARENT: Gtk.IconSet.copy.IconSet
#COMMENT: a #GtkIconSet
#NAME: value
#PARENT: Gtk.Container.child_set_property.none
#COMMENT: the value to set the property to
#NAME: target_value
#PARENT: Gtk.ActionableInterface.set_action_target_value.set_action_target_value.none
#COMMENT: a #GVariant to set as the target value, or %NULL
#NAME: set_min_width
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the minimum width of the @tree_column.  If @min_width is -1, then the
minimum width is unset.
#NAME: icon_view
#PARENT: Gtk.IconView.set_drag_dest_item.none
#COMMENT: a #GtkIconView
#NAME: buffer
#PARENT: Gtk.TextBuffer.insert_interactive.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: klass
#PARENT: Gtk.WidgetClass.install_style_property.none
#COMMENT: a #GtkWidgetClass
#NAME: entry
#PARENT: Gtk.Entry.get_max_length.gint
#COMMENT: a #GtkEntry
#NAME: get_n_columns
#PARENT: Gtk.TreeView.get_n_columns
#COMMENT: The number of columns in the @tree_view
#NAME: gesture
#PARENT: Gtk.GestureMultiPress.set_area.none
#COMMENT: a #GtkGesture
#NAME: new_with_mnemonic
#PARENT: Gtk.ImageMenuItem.new_with_mnemonic
#COMMENT: a new #GtkImageMenuItem
#NAME: list
#PARENT: Gtk.TargetList.unref.none
#COMMENT: a #GtkTargetList
#NAME: reset
#PARENT: Gtk.IMContext
#COMMENT: Notify the input method that a change such as a change in cursor
position has been made. This will typically cause the input
method to clear the preedit state.
#NAME: delete-surrounding
#PARENT: Gtk.IMContext
#COMMENT: The ::delete-surrounding signal is emitted when the input method
needs to delete all or part of the context surrounding the cursor.
#NAME: all
#PARENT: Gtk.PrintPages
#COMMENT: All pages.
#NAME: actions-changed
#PARENT: Gtk.UIManager
#COMMENT: The ::actions-changed signal is emitted whenever the set of actions
changes.
#NAME: widget
#PARENT: Gtk.Widget.grab_focus.none
#COMMENT: a #GtkWidget
#NAME: do_delete_text
#PARENT: Gtk.Editable
#COMMENT: Deletes a sequence of characters. The characters that are deleted are
those characters at positions from @start_pos up to, but not including
@end_pos. If @end_pos is negative, then the characters deleted
are those from @start_pos to the end of the text.

Note that the positions are specified in characters, not bytes.
#NAME: ok
#PARENT: Gtk.ResponseType
#COMMENT: Returned by OK buttons in GTK+ dialogs
#NAME: area
#PARENT: Gtk.CellArea.focus.gboolean
#COMMENT: a #GtkCellArea
#NAME: delete_interactive
#PARENT: Gtk.TextBuffer
#COMMENT: Deletes all editable text in the given range.
Calls gtk_text_buffer_delete() for each editable sub-range of
[@start,@end). @start and @end are revalidated to point to
the location of the last deleted range, or left untouched if
no text was deleted.
#NAME: forward_visible_line
#PARENT: Gtk.TextIter
#COMMENT: Moves @iter to the start of the next visible line. Returns %TRUE if there
was a next line to move to, and %FALSE if @iter was simply moved to
the end of the buffer and is now not dereferenceable, or if @iter was
already at the end of the buffer.
#NAME: height
#PARENT: Gtk.paint_box_gap.none
#COMMENT: width of the rectangle
#NAME: flags
#PARENT: Gtk.CellRendererClass.activate.activate.gboolean
#COMMENT: render flags
#NAME: key
#PARENT: Gtk.PrintSettings.set_double.none
#COMMENT: a key
#NAME: info_bar
#PARENT: Gtk.InfoBar.set_message_type.none
#COMMENT: a #GtkInfoBar
#NAME: pspec
#PARENT: Gtk.rc_property_parse_enum.gboolean
#COMMENT: a #GParamSpec
#NAME: iter
#PARENT: Gtk.TextView.scroll_to_iter.gboolean
#COMMENT: a #GtkTextIter
#NAME: force_svg
#PARENT: Gtk.IconLookupFlags
#COMMENT: Get SVG icons, even if gdk-pixbuf
  doesn’t support them.
  Cannot be used together with %GTK_ICON_LOOKUP_NO_SVG.
#NAME: words
#PARENT: Gtk.DeleteType
#COMMENT: Delete words.
#NAME: SizeRequestMode
#PARENT: Gtk
#COMMENT: Specifies a preference for height-for-width or
width-for-height geometry management.
#NAME: transition
#PARENT: Gtk.Stack.set_visible_child_full.none
#COMMENT: the transition type to use
#NAME: first_callback_symbol
#PARENT: Gtk.Builder.add_callback_symbols.none
#COMMENT: The callback pointer
#NAME: path
#PARENT: Gtk.IconView.get_cursor.gboolean
#COMMENT: Return location for the current
       cursor path, or %NULL
#NAME: inverted
#PARENT: Gtk.LevelBar.set_inverted.none
#COMMENT: %TRUE to invert the level bar
#NAME: prev
#PARENT: Gtk.MenuDirectionType
#COMMENT: To the previous menu item
#NAME: settings
#PARENT: Gtk.PrintSettings.set_number_up_layout.none
#COMMENT: a #GtkPrintSettings
#NAME: cell_layout
#PARENT: Gtk.CellLayoutIface.add_attribute.add_attribute.none
#COMMENT: a #GtkCellLayout
#NAME: height
#PARENT: Gtk.paint_shadow.none
#COMMENT: width of the rectangle
#NAME: changed
#PARENT: Gtk.AccelMap
#COMMENT: Notifies of a change in the global accelerator map.
The path is also used as the detail for the signal,
so it is possible to connect to
changed::`accel_path`.
#NAME: accel_key
#PARENT: Gtk.AccelGroup.query.AccelGroupEntry
#COMMENT: key value of the accelerator
#NAME: get_local_only
#PARENT: Gtk.RecentChooser
#COMMENT: Gets whether only local resources should be shown in the recently used
resources selector.  See gtk_recent_chooser_set_local_only()
#NAME: state
#PARENT: Gtk.Widget.override_color.none
#COMMENT: the state for which to set the color
#NAME: list_store
#PARENT: Gtk.ListStore.set_valist.none
#COMMENT: A #GtkListStore
#NAME: same_app
#PARENT: Gtk.TargetFlags
#COMMENT: If this is set, the target will only be selected
  for drags within a single application.
#NAME: get_group
#PARENT: Gtk.Gesture
#COMMENT: Returns all gestures in the group of @gesture
#NAME: hadjustment
#PARENT: Gtk.ScrolledWindow.set_hadjustment.none
#COMMENT: horizontal scroll adjustment
#NAME: get_drop_index
#PARENT: Gtk.Toolbar
#COMMENT: Returns the position corresponding to the indicated point on
@toolbar. This is useful when dragging items to the toolbar:
this function returns the position a new item should be
inserted.

@x and @y are in @toolbar coordinates.
#NAME: bx
#PARENT: Gtk.TreeView.convert_bin_window_to_widget_coords.none
#COMMENT: bin_window X coordinate
#NAME: cell_view
#PARENT: Gtk.CellView.get_fit_model.gboolean
#COMMENT: a #GtkCellView
#NAME: remove_shortcut_folder_uri
#PARENT: Gtk.FileChooser.remove_shortcut_folder_uri
#COMMENT: %TRUE if the operation succeeds, %FALSE otherwise.
In the latter case, the @error will be set as appropriate.

See also: gtk_file_chooser_add_shortcut_folder_uri()
#NAME: iter
#PARENT: Gtk.TextIter.ends_tag.gboolean
#COMMENT: an iterator
#NAME: by
#PARENT: Gtk.TreeView.convert_bin_window_to_widget_coords.none
#COMMENT: bin_window Y coordinate
#NAME: content_type
#PARENT: Gtk.AppChooserButton.new.Widget
#COMMENT: the content type to show applications for
#NAME: wrap_license
#PARENT: Gtk.AboutDialog.set_wrap_license.none
#COMMENT: whether to wrap the license
#NAME: load_file
#PARENT: Gtk.PageSetup.load_file
#COMMENT: %TRUE on success
#NAME: copy
#PARENT: Gtk.Border
#COMMENT: Copies a #GtkBorder-struct.
#NAME: get_edited_cell
#PARENT: Gtk.CellArea
#COMMENT: Gets the #GtkCellRenderer in @area that is currently
being edited.
#NAME: get_default_page_setup
#PARENT: Gtk.PrintOperation
#COMMENT: Returns the default page setup, see
gtk_print_operation_set_default_page_setup().
#NAME: x
#PARENT: Gtk.ScaleClass.get_layout_offsets.get_layout_offsets.none
#COMMENT: location to store X offset of layout, or %NULL
#NAME: bar
#PARENT: Gtk.HeaderBar.set_subtitle.none
#COMMENT: a #GtkHeaderBar
#NAME: set_inner_border
#PARENT: Gtk.Entry
#COMMENT: Sets %entry’s inner-border property to @border, or clears it if %NULL
is passed. The inner-border is the area around the entry’s text, but
inside its frame.

If set, this property overrides the inner-border style property.
Overriding the style-provided border is useful when you want to do
in-place editing of some text in a canvas or list widget, where
pixel-exact positioning of the entry is important.
#NAME: y
#PARENT: Gtk.ScaleClass.get_layout_offsets.get_layout_offsets.none
#COMMENT: location to store Y offset of layout, or %NULL
#NAME: gtk-auto-mnemonics
#PARENT: Gtk.Settings
#COMMENT: Whether mnemonics should be automatically shown and hidden when the user
presses the mnemonic activator.
#NAME: parent_class
#PARENT: Gtk.ButtonClass
#COMMENT: The parent class.
#NAME: text_view
#PARENT: Gtk.TextView.set_justification.none
#COMMENT: a #GtkTextView
#NAME: create_menu
#PARENT: Gtk.Action.create_menu
#COMMENT: the menu item provided by the
              action, or %NULL.
#NAME: get_section_type
#PARENT: Gtk.CssSection
#COMMENT: Gets the type of information that @section describes.
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_visible_vertical.gboolean
#COMMENT: a #GtkToolItem
#NAME: get_type_hint
#PARENT: Gtk.Window
#COMMENT: Gets the type hint for this window. See gtk_window_set_type_hint().
#NAME: widget
#PARENT: Gtk.WidgetClass.get_accessible.get_accessible.Atk.Object
#COMMENT: a #GtkWidget
#NAME: get_title
#PARENT: Gtk.ComboBox.get_title
#COMMENT: the menu’s title in tearoff mode. This is an internal copy of the
string which must not be freed.
#NAME: icons
#PARENT: Gtk.ToolbarStyle
#COMMENT: Buttons display only icons in the toolbar.
#NAME: get_active_window
#PARENT: Gtk.Application.get_active_window
#COMMENT: the active window
#NAME: cell_get_valist
#PARENT: Gtk.CellArea
#COMMENT: Gets the values of one or more cell properties for @renderer in @area.
#NAME: widget_type
#PARENT: Gtk.Style.get_valist.none
#COMMENT: the #GType of a descendant of #GtkWidget
#NAME: remove_all
#PARENT: Gtk.ComboBoxText
#COMMENT: Removes all the text entries from the combo box.
#NAME: only
#PARENT: Gtk.RegionFlags
#COMMENT: Region is the only one within a set.
#NAME: bar
#PARENT: Gtk.HeaderBar.get_has_subtitle.gboolean
#COMMENT: a #GtkHeaderBar
#NAME: text-column
#PARENT: Gtk.IconView
#COMMENT: The ::text-column property contains the number of the model column
containing the texts which are displayed. The text column must be
of type #G_TYPE_STRING. If this property and the :markup-column
property are both set to -1, no texts are displayed.
#NAME: setup
#PARENT: Gtk.PageSetup.get_top_margin.gdouble
#COMMENT: a #GtkPageSetup
#NAME: get_settings
#PARENT: Gtk.Widget.get_settings
#COMMENT: the relevant #GtkSettings object
#NAME: window
#PARENT: Gtk.Window.resize_to_geometry.none
#COMMENT: a #GtkWindow
#NAME: get_object
#PARENT: Gtk.Builder
#COMMENT: Gets the object named @name. Note that this function does not
increment the reference count of the returned object.
#NAME: tooltip
#PARENT: Gtk.RadioAction.new.RadioAction
#COMMENT: A tooltip for this action, or %NULL
#NAME: list_contexts
#PARENT: Gtk.IconTheme.list_contexts
#COMMENT: a #GList list
    holding the names of all the contexts in the theme. You must first
    free each element in the list with g_free(), then free the list
    itself with g_list_free().
#NAME: flags
#PARENT: Gtk.IconTheme.lookup_icon.IconInfo
#COMMENT: flags modifying the behavior of the icon lookup
#NAME: 
#PARENT: Gtk.ThemingEngine.get.none...
#COMMENT: property name /return value pairs, followed by %NULL
#NAME: set_gicon
#PARENT: Gtk.Action
#COMMENT: Sets the icon of @action.
#NAME: unit
#PARENT: Gtk.PaperSize.get_default_left_margin.gdouble
#COMMENT: the unit for the return value, not %GTK_UNIT_NONE
#NAME: preview
#PARENT: Gtk.PrintOperationPreview.is_selected.gboolean
#COMMENT: a #GtkPrintOperationPreview
#NAME: TreeIter
#PARENT: Gtk
#COMMENT: The #GtkTreeIter is the primary structure
for accessing a #GtkTreeModel. Models are expected to put a unique
integer in the @stamp member, and put
model-specific data in the three @user_data
members.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_fixed_width.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: key-press-event
#PARENT: Gtk.Widget
#COMMENT: The ::key-press-event signal is emitted when a key is pressed. The signal
emission will reoccur at the key-repeat rate when the key is kept pressed.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_KEY_PRESS_MASK mask.

This signal will be sent to the grab widget if there is one.
#NAME: to_string
#PARENT: Gtk.Gradient
#COMMENT: Creates a string representation for @gradient that is suitable
for using in GTK CSS files.
#NAME: parent_class
#PARENT: Gtk.FontChooserDialogClass
#COMMENT: The parent class.
#NAME: top
#PARENT: Gtk.BaselinePosition
#COMMENT: Align the baseline at the top
#NAME: get_micro_version
#PARENT: Gtk.get_micro_version
#COMMENT: the micro version number of the GTK+ library
#NAME: add_accelerator
#PARENT: Gtk.Application
#COMMENT: Installs an accelerator that will cause the named action
to be activated when the key combination specificed by @accelerator
is pressed.

@accelerator must be a string that can be parsed by gtk_accelerator_parse(),
e.g. "<Primary>q" or “<Control><Alt>p”.

@action_name must be the name of an action as it would be used
in the app menu, i.e. actions that have been added to the application
are referred to with an “app.” prefix, and window-specific actions
with a “win.” prefix.

GtkApplication also extracts accelerators out of “accel” attributes
in the #GMenuModels passed to gtk_application_set_app_menu() and
gtk_application_set_menubar(), which is usually more convenient
than calling this function for each accelerator.
#NAME: get_inverted
#PARENT: Gtk.Range
#COMMENT: Gets the value set by gtk_range_set_inverted().
#NAME: search_mode
#PARENT: Gtk.SearchBar.set_search_mode.none
#COMMENT: the new state of the search mode
#NAME: get_tag_table
#PARENT: Gtk.TextBuffer.get_tag_table
#COMMENT: the buffer’s tag table
#NAME: get_current_folder_uri
#PARENT: Gtk.FileChooser
#COMMENT: Gets the current folder of @chooser as an URI.
See gtk_file_chooser_set_current_folder_uri().

Note that this is the folder that the file chooser is currently displaying
(e.g. "file:///home/username/Documents"), which is not the same
as the currently-selected folder if the chooser is in
%GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER mode
(e.g. "file:///home/username/Documents/selected-folder/".  To get the
currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the
usual way to get the selection.
#NAME: get_sort_column_id
#PARENT: Gtk.TreeSortable.get_sort_column_id
#COMMENT: %TRUE if the sort column is not one of the special sort
  column ids.
#NAME: new_with_area
#PARENT: Gtk.TreeViewColumn
#COMMENT: Creates a new #GtkTreeViewColumn using @area to render its cells.
#NAME: queue_draw_region
#PARENT: Gtk.Widget
#COMMENT: Invalidates the area of @widget defined by @region by calling
gdk_window_invalidate_region() on the widget’s window and all its
child windows. Once the main loop becomes idle (after the current
batch of events has been processed, roughly), the window will
receive expose events for the union of all regions that have been
invalidated.

Normally you would only use this function in widget
implementations. You might also use it to schedule a redraw of a
#GtkDrawingArea or some portion thereof.
#NAME: halign
#PARENT: Gtk.WidgetAuxInfo
#COMMENT: the widget’s horizontal alignment
#NAME: application
#PARENT: Gtk.ApplicationWindow.new.Widget
#COMMENT: a #GtkApplication
#NAME: for_window
#PARENT: Gtk.IconSet.render_icon_surface.cairo.Surface
#COMMENT: #GdkWindow to optimize drawing for, or %NULL
#NAME: STOCK_CDROM
#PARENT: Gtk
#COMMENT: The “CD-Rom” item and icon.
#NAME: set_mnemonic_widget
#PARENT: Gtk.Label
#COMMENT: If the label has been set so that it has an mnemonic key (using
i.e. gtk_label_set_markup_with_mnemonic(),
gtk_label_set_text_with_mnemonic(), gtk_label_new_with_mnemonic()
or the “use_underline” property) the label can be associated with a
widget that is the target of the mnemonic. When the label is inside
a widget (like a #GtkButton or a #GtkNotebook tab) it is
automatically associated with the correct widget, but sometimes
(i.e. when the target is a #GtkEntry next to the label) you need to
set it explicitly using this function.

The target widget will be accelerated by emitting the
GtkWidget::mnemonic-activate signal on it. The default handler for
this signal will activate the widget if there are no mnemonic collisions
and toggle focus between the colliding widgets otherwise.
#NAME: new
#PARENT: Gtk.Menu.new
#COMMENT: a new #GtkMenu
#NAME: icon_widget
#PARENT: Gtk.ToolButton.new.ToolItem
#COMMENT: a widget that will be used as the button contents, or %NULL
#NAME: yalign
#PARENT: Gtk.TextView.scroll_to_mark.none
#COMMENT: vertical alignment of mark within visible area
#NAME: cell_is_visible
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns %TRUE if any of the cells packed into the @tree_column are visible.
For this to be meaningful, you must first initialize the cells with
gtk_tree_view_column_cell_set_cell_data()
#NAME: cell_layout
#PARENT: Gtk.CellLayoutIface.reorder.reorder.none
#COMMENT: a #GtkCellLayout
#NAME: TreeViewRowSeparatorFunc
#PARENT: Gtk
#COMMENT: Function type for determining whether the row pointed to by @iter should
be rendered as a separator. A common way to implement this is to have a
boolean column in the model, whose values the #GtkTreeViewRowSeparatorFunc
returns.
#NAME: iter_has_name
#PARENT: Gtk.WidgetPath.iter_has_name
#COMMENT: %TRUE if the widget at @pos has this name
#NAME: lookup
#PARENT: Gtk.IconFactory
#COMMENT: Looks up @stock_id in the icon factory, returning an icon set
if found, otherwise %NULL. For display to the user, you should
use gtk_style_lookup_icon_set() on the #GtkStyle for the
widget that will display the icon, instead of using this
function directly, so that themes are taken into account.
#NAME: drag-drop
#PARENT: Gtk.Widget.drag-drop
#COMMENT: whether the cursor position is in a drop zone
#NAME: new
#PARENT: Gtk.FlowBoxChild
#COMMENT: Creates a new #GtkFlowBoxChild, to be used as a child
of a #GtkFlowBox.
#NAME: get_finishings
#PARENT: Gtk.PrintSettings.get_finishings
#COMMENT: the finishings
#NAME: STOCK_MISSING_IMAGE
#PARENT: Gtk
#COMMENT: The “Missing image” icon.
#NAME: get_border
#PARENT: Gtk.ThemingEngine
#COMMENT: Gets the border for a given state as a #GtkBorder.
#NAME: spin_button
#PARENT: Gtk.SpinButton.get_digits.guint
#COMMENT: a #GtkSpinButton
#NAME: get_show_arrow
#PARENT: Gtk.Toolbar
#COMMENT: Returns whether the toolbar has an overflow menu.
See gtk_toolbar_set_show_arrow().
#NAME: get_page_header_image
#PARENT: Gtk.Assistant.get_page_header_image
#COMMENT: the header image for @page,
    or %NULL if there’s no header image for the page
#NAME: style
#PARENT: Gtk.paint_shadow.none
#COMMENT: a #GtkStyle
#NAME: get_window
#PARENT: Gtk.Gesture.get_window
#COMMENT: the user defined window, or %NULL if none
#NAME: get_screen
#PARENT: Gtk.Invisible
#COMMENT: Returns the #GdkScreen object associated with @invisible
#NAME: granularity
#PARENT: Gtk.TextView.extend-selection.gboolean
#COMMENT: the granularity type
#NAME: main_do_event
#PARENT: Gtk
#COMMENT: Processes a single GDK event.

This is public only to allow filtering of events between GDK and GTK+.
You will not usually need to call this function directly.

While you should not call this function directly, you might want to
know how exactly events are handled. So here is what this function
does with the event:

1. Compress enter/leave notify events. If the event passed build an
   enter/leave pair together with the next event (peeked from GDK), both
   events are thrown away. This is to avoid a backlog of (de-)highlighting
   widgets crossed by the pointer.

2. Find the widget which got the event. If the widget can’t be determined
   the event is thrown away unless it belongs to a INCR transaction.

3. Then the event is pushed onto a stack so you can query the currently
   handled event with gtk_get_current_event().

4. The event is sent to a widget. If a grab is active all events for widgets
   that are not in the contained in the grab widget are sent to the latter
   with a few exceptions:
   - Deletion and destruction events are still sent to the event widget for
     obvious reasons.
   - Events which directly relate to the visual representation of the event
     widget.
   - Leave events are delivered to the event widget if there was an enter
     event delivered to it before without the paired leave event.
   - Drag events are not redirected because it is unclear what the semantics
     of that would be.
   Another point of interest might be that all key events are first passed
   through the key snooper functions if there are any. Read the description
   of gtk_key_snooper_install() if you need this feature.

5. After finishing the delivery the event is popped from the event stack.
#NAME: is_activatable
#PARENT: Gtk.CellRenderer.is_activatable
#COMMENT: %TRUE if the cell renderer can do anything when activated
#NAME: unit
#PARENT: Gtk.PageSetup.get_paper_height.gdouble
#COMMENT: the unit for the return value
#NAME: over_right
#PARENT: Gtk.StackTransitionType
#COMMENT: Cover the old page by sliding to the right. Since: 3.12
#NAME: remove_class
#PARENT: Gtk.StyleContext
#COMMENT: Removes @class_name from @context.
#NAME: get_direction
#PARENT: Gtk.StyleContext.get_direction
#COMMENT: the widget direction
#NAME: group
#PARENT: Gtk.ToolItemGroup.get_label_widget.Widget
#COMMENT: a #GtkToolItemGroup
#NAME: attach
#PARENT: Gtk.Style.attach
#COMMENT: Either @style, or a newly-created #GtkStyle.
  If the style is newly created, the style parameter
  will be unref'ed, and the new style will have
  a reference count belonging to the caller.
#NAME: count
#PARENT: Gtk.TextIter.backward_cursor_positions.gboolean
#COMMENT: number of positions to move
#NAME: bottom
#PARENT: Gtk.TextWindowType
#COMMENT: Bottom border window.
#NAME: ruleset
#PARENT: Gtk.CssSectionType
#COMMENT: The section defines a CSS ruleset.
#NAME: size
#PARENT: Gtk.Image.new_from_icon_name.Widget
#COMMENT: a stock icon size
#NAME: tree_model
#PARENT: Gtk.TreeModel.rows_reordered.none
#COMMENT: a #GtkTreeModel
#NAME: grid
#PARENT: Gtk.Grid.get_row_spacing.guint
#COMMENT: a #GtkGrid
#NAME: text
#PARENT: Gtk.EntryCompletion.insert_action_text.none
#COMMENT: text of the item to insert
#NAME: expose_object
#PARENT: Gtk.Builder
#COMMENT: Add @object to the @builder object pool so it can be referenced just like any
other object built by builder.
#NAME: step-increment
#PARENT: Gtk.Adjustment
#COMMENT: The step increment of the adjustment.
#NAME: buffer
#PARENT: Gtk.TextBuffer.backspace.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.cell_get_size.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: parent_class
#PARENT: Gtk.AppChooserWidgetClass
#COMMENT: The parent class.
#NAME: widget
#PARENT: Gtk.Widget.get_toplevel.Widget
#COMMENT: a #GtkWidget
#NAME: window
#PARENT: Gtk.Window.set_has_resize_grip.none
#COMMENT: a #GtkWindow
#NAME: set_has_palette
#PARENT: Gtk.ColorSelection
#COMMENT: Shows and hides the palette based upon the value of @has_palette.
#NAME: menu
#PARENT: Gtk.Menu.set_reserve_toggle_size.none
#COMMENT: a #GtkMenu
#NAME: new
#PARENT: Gtk.SeparatorMenuItem
#COMMENT: Creates a new #GtkSeparatorMenuItem.
#NAME: drag_dest_set
#PARENT: Gtk.Widget
#COMMENT: Sets a widget as a potential drop destination, and adds default behaviors.

The default behaviors listed in @flags have an effect similar
to installing default handlers for the widget’s drag-and-drop signals
(#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
sufficient to connect to the widget’s #GtkWidget::drag-data-received
signal to get primitive, but consistent drag-and-drop support.

Things become more complicated when you try to preview the dragged data,
as described in the documentation for #GtkWidget::drag-motion. The default
behaviors described by @flags make some assumptions, that can conflict
with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
Especially the later is dramatic, when your own #GtkWidget::drag-motion
handler calls gtk_drag_get_data() to inspect the dragged data.

There’s no way to set a default action here, you can use the
#GtkWidget::drag-motion callback for that. Here’s an example which selects
the action to use depending on whether the control key is pressed or not:
|[<!-- language="C" -->
static void
drag_motion (GtkWidget *widget,
             GdkDragContext *context,
             gint x,
             gint y,
             guint time)
{
  GdkModifierType mask;

  gdk_window_get_pointer (gtk_widget_get_window (widget),
                          NULL, NULL, &mask);
  if (mask & GDK_CONTROL_MASK)
    gdk_drag_status (context, GDK_ACTION_COPY, time);
  else
    gdk_drag_status (context, GDK_ACTION_MOVE, time);
}
]|
#NAME: set_title
#PARENT: Gtk.Menu
#COMMENT: Sets the title string for the menu.

The title is displayed when the menu is shown as a tearoff
menu. If @title is %NULL, the menu will see if it is attached
to a parent menu item, and if so it will try to use the same
text as that menu item’s label.
#NAME: get_modifier_mask
#PARENT: Gtk.Widget.get_modifier_mask
#COMMENT: the modifier mask used for @intent.
#NAME: setup
#PARENT: Gtk.PageSetup.load_key_file.gboolean
#COMMENT: a #GtkPageSetup
#NAME: new_from_file
#PARENT: Gtk.PrintSettings
#COMMENT: Reads the print settings from @file_name. Returns a new #GtkPrintSettings
object with the restored settings, or %NULL if an error occurred. If the
file could not be loaded then error is set to either a #GFileError or
#GKeyFileError.  See gtk_print_settings_to_file().
#NAME: RecentManagerClass
#PARENT: Gtk
#COMMENT: #GtkRecentManagerClass contains only private data.
#NAME: rows
#PARENT: Gtk.Table.resize.none
#COMMENT: The new number of rows.
#NAME: queue_draw_area
#PARENT: Gtk.Widget
#COMMENT: Convenience function that calls gtk_widget_queue_draw_region() on
the region created from the given coordinates.

The region here is specified in widget coordinates.
Widget coordinates are a bit odd; for historical reasons, they are
defined as @widget->window coordinates for widgets that return %TRUE for
gtk_widget_get_has_window(), and are relative to @widget->allocation.x,
@widget->allocation.y otherwise.

@width or @height may be 0, in this case this function does
nothing. Negative values for @width and @height are not allowed.
#NAME: target
#PARENT: Gtk.TargetEntry
#COMMENT: a string representation of the target type
#NAME: tool_item
#PARENT: Gtk.ToolItem.retrieve_proxy_menu_item.Widget
#COMMENT: a #GtkToolItem
#NAME: set_fixed_height_mode
#PARENT: Gtk.TreeView
#COMMENT: Enables or disables the fixed height mode of @tree_view.
Fixed height mode speeds up #GtkTreeView by assuming that all
rows have the same height.
Only enable this option if all rows are the same height and all
columns are of type %GTK_TREE_VIEW_COLUMN_FIXED.
#NAME: get_action
#PARENT: Gtk.ActionGroup.get_action
#COMMENT: the action, or %NULL if no action by that name exists
#NAME: gesture
#PARENT: Gtk.GestureSingle.set_touch_only.none
#COMMENT: a #GtkGestureSingle
#NAME: fsd
#PARENT: Gtk.FontSelectionDialog.get_ok_button.Widget
#COMMENT: a #GtkFontSelectionDialog
#NAME: foreground-rgba
#PARENT: Gtk.CellRendererText
#COMMENT: Foreground color as a #GdkRGBA
#NAME: child
#PARENT: Gtk.Stack.add_named.none
#COMMENT: the widget to add
#NAME: ThemingEngineClass
#PARENT: Gtk
#COMMENT: Base class for theming engines.
#NAME: use_label
#PARENT: Gtk.FileChooser.set_use_preview_label.none
#COMMENT: whether to display a stock label with the name of the previewed file
#NAME: area
#PARENT: Gtk.CellArea.add_with_properties.none
#COMMENT: a #GtkCellArea
#NAME: main_level
#PARENT: Gtk.main_level
#COMMENT: the nesting level of the current invocation
    of the main loop
#NAME: month
#PARENT: Gtk.CalendarDetailFunc.utf8
#COMMENT: the month for which details are needed.
#NAME: adjustment
#PARENT: Gtk.Adjustment.changed.none
#COMMENT: a #GtkAdjustment
#NAME: icon_set
#PARENT: Gtk.IconSet.ref.IconSet
#COMMENT: a #GtkIconSet.
#NAME: setting
#PARENT: Gtk.AppChooserWidget.set_show_fallback.none
#COMMENT: the new value for #GtkAppChooserWidget:show-fallback
#NAME: icon_view
#PARENT: Gtk.IconView.get_columns.gint
#COMMENT: a #GtkIconView
#NAME: get_visible
#PARENT: Gtk.StatusIcon
#COMMENT: Returns whether the status icon is visible or not.
Note that being visible does not guarantee that
the user can actually see the icon, see also
gtk_status_icon_is_embedded().
#NAME: get_modified
#PARENT: Gtk.TextBuffer
#COMMENT: Indicates whether the buffer has been modified since the last call
to gtk_text_buffer_set_modified() set the modification flag to
%FALSE. Used for example to enable a “save” function in a text
editor.
#NAME: new_with_model
#PARENT: Gtk.ComboBox
#COMMENT: Creates a new #GtkComboBox with the model initialized to @model.
#NAME: offscreen
#PARENT: Gtk.OffscreenWindow.get_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: the #GtkOffscreenWindow contained widget.
#NAME: radio
#PARENT: Gtk.CellRendererToggle.set_radio.none
#COMMENT: %TRUE to make the toggle look like a radio button
#NAME: new
#PARENT: Gtk.RadioButton
#COMMENT: Creates a new #GtkRadioButton. To be of any practical value, a widget should
then be packed into the radio button.
#NAME: group
#PARENT: Gtk.RadioMenuItem.new_with_label_from_widget.Widget
#COMMENT: an existing #GtkRadioMenuItem
#NAME: button-press-event
#PARENT: Gtk.StatusIcon.button-press-event
#COMMENT: %TRUE to stop other handlers from being invoked
for the event. %FALSE to propagate the event further.
#NAME: enter-notify-event
#PARENT: Gtk.Widget
#COMMENT: The ::enter-notify-event will be emitted when the pointer enters
the @widget's window.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_ENTER_NOTIFY_MASK mask.

This signal will be sent to the grab widget if there is one.
#NAME: invalid
#PARENT: Gtk.IconSize
#COMMENT: Invalid size.
#NAME: action-activated
#PARENT: Gtk.EntryCompletion
#COMMENT: Gets emitted when an action is activated.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_page_set.none
#COMMENT: a #GtkPrintSettings
#NAME: path
#PARENT: Gtk.TreeView.test-expand-row.gboolean
#COMMENT: a tree path that points to the row
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.pack_start.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: get_title
#PARENT: Gtk.Window
#COMMENT: Retrieves the title of the window. See gtk_window_set_title().
#NAME: main_level
#PARENT: Gtk
#COMMENT: Asks for the current nesting level of the main loop.
#NAME: child
#PARENT: Gtk.Buildable.custom_tag_end.none
#COMMENT: child object or %NULL for non-child tags
#NAME: test-expand-row
#PARENT: Gtk.TreeView
#COMMENT: The given row is about to be expanded (show its children nodes). Use this
signal if you need to control the expandability of individual rows.
#NAME: activate
#PARENT: Gtk.CellRendererClass.activate.activate
#COMMENT: %TRUE if the event was consumed/handled
#NAME: set_editable
#PARENT: Gtk.Editable
#COMMENT: Determines if the user can edit the text in the editable
widget or not.
#NAME: get_surface
#PARENT: Gtk.OffscreenWindow
#COMMENT: Retrieves a snapshot of the contained widget in the form of
a #cairo_surface_t.  If you need to keep this around over window
resizes then you should add a reference to it.
#NAME: new_from_widget
#PARENT: Gtk.RadioButton
#COMMENT: Creates a new #GtkRadioButton, adding it to the same group as
@radio_group_member. As with gtk_radio_button_new(), a widget
should be packed into the radio button.
#NAME: backward_chars
#PARENT: Gtk.TextIter.backward_chars
#COMMENT: whether @iter moved and is dereferenceable
#NAME: data_destroy
#PARENT: Gtk.RecentFilter.add_custom.none
#COMMENT: function to call to free @data when it is no longer needed.
#NAME: context
#PARENT: Gtk.CellAreaContext.get_area.CellArea
#COMMENT: a #GtkCellAreaContext
#NAME: iter
#PARENT: Gtk.TextBuffer.backspace.gboolean
#COMMENT: a position in @buffer
#NAME: new
#PARENT: Gtk.Viewport
#COMMENT: Creates a new #GtkViewport with the given adjustments, or with default
adjustments if none are given.
#NAME: damage-event
#PARENT: Gtk.Widget.damage-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: newv
#PARENT: Gtk.TreeStore.newv
#COMMENT: a new #GtkTreeStore
#NAME: action_group
#PARENT: Gtk.ActionGroup.get_visible.gboolean
#COMMENT: the action group
#NAME: get_needed
#PARENT: Gtk.RecentFilter
#COMMENT: Gets the fields that need to be filled in for the #GtkRecentFilterInfo
passed to gtk_recent_filter_filter()

This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkRecentChooser.
#NAME: flags
#PARENT: Gtk.TextIter.backward_search.gboolean
#COMMENT: bitmask of flags affecting the search
#NAME: path
#PARENT: Gtk.TreeModel.row-inserted.none
#COMMENT: a #GtkTreePath-struct identifying the new row
#NAME: set_next
#PARENT: Gtk.BindingEntry
#COMMENT: linked list of entries maintained by binding set
#NAME: get_application_info
#PARENT: Gtk.RecentInfo.get_application_info
#COMMENT: %TRUE if an application with @app_name has registered this
  resource inside the recently used list, or %FALSE otherwise. The
  @app_exec string is owned by the #GtkRecentInfo and should not be
  modified or freed
#NAME: background-rgba
#PARENT: Gtk.CellView
#COMMENT: The background color as a #GdkRGBA
#NAME: rgba
#PARENT: Gtk.CellView.set_background_rgba.none
#COMMENT: the new background color
#NAME: range
#PARENT: Gtk.Range.get_range_rect.none
#COMMENT: a #GtkRange
#NAME: set_headers_visible
#PARENT: Gtk.TreeView
#COMMENT: Sets the visibility state of the headers.
#NAME: height
#PARENT: Gtk.paint_slider.none
#COMMENT: the height of the rectangle in which to draw a slider
#NAME: filename
#PARENT: Gtk.Builder.add_objects_from_file.guint
#COMMENT: the name of the file to parse
#NAME: allocation
#PARENT: Gtk.MenuItem.toggle_size_allocate.none
#COMMENT: the allocation to use as signal data.
#NAME: menu_shell
#PARENT: Gtk.MenuShellClass.cancel.cancel.none
#COMMENT: a #GtkMenuShell
#NAME: column
#PARENT: Gtk.TreeView.set_expander_column.none
#COMMENT: %NULL, or the column to draw the expander arrow at.
#NAME: targets
#PARENT: Gtk.Widget.drag_source_set.none
#COMMENT: the table of targets
    that the drag will support, may be %NULL
#NAME: get_pixel_size
#PARENT: Gtk.Image.get_pixel_size
#COMMENT: the pixel size used for named icons.
#NAME: set_rgba
#PARENT: Gtk.ColorChooser
#COMMENT: Sets the color.
#NAME: lower
#PARENT: Gtk.Adjustment
#COMMENT: The minimum value of the adjustment.
#NAME: gesture
#PARENT: Gtk.Gesture.get_last_updated_sequence.Gdk.EventSequence
#COMMENT: a #GtkGesture
#NAME: new_from_model
#PARENT: Gtk.Popover
#COMMENT: Creates a #GtkPopover and populates it according to
@model. The popover is pointed to the @relative_to widget.

The created buttons are connected to actions found in the
#GtkApplicationWindow to which the popover belongs - typically
by means of being attached to a widget that is contained within
the #GtkApplicationWindows widget hierarchy.

Actions can also be added using gtk_widget_insert_action_group()
on the menus attach widget or on any of its parent widgets.
#NAME: settings
#PARENT: Gtk.PrintSettings.get_int_with_default.gint
#COMMENT: a #GtkPrintSettings
#NAME: index_
#PARENT: Gtk.TreeModel.get_column_type.GType
#COMMENT: the column index
#NAME: hot_x
#PARENT: Gtk.drag_set_icon_stock.none
#COMMENT: the X offset within the icon of the hotspot
#NAME: detail
#PARENT: Gtk.paint_resize_grip.none
#COMMENT: a style detail
#NAME: set_keep_above
#PARENT: Gtk.Window
#COMMENT: Asks to keep @window above, so that it stays on top. Note that
you shouldn’t assume the window is definitely above afterward,
because other entities (e.g. the user or
[window manager][gtk-X11-arch]) could not keep it above,
and not all window managers support keeping windows above. But
normally the window will end kept above. Just don’t write code
that crashes if not.

It’s permitted to call this function before showing a window,
in which case the window will be kept above when it appears onscreen
initially.

You can track the above state via the “window-state-event” signal
on #GtkWidget.

Note that, according to the
[Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec),
the above state is mainly meant for user preferences and should not
be used by applications e.g. for drawing attention to their
dialogs.
#NAME: hot_y
#PARENT: Gtk.drag_set_icon_stock.none
#COMMENT: the Y offset within the icon of the hotspot
#NAME: entry
#PARENT: Gtk.Entry.set_invisible_char.none
#COMMENT: a #GtkEntry
#NAME: default-text
#PARENT: Gtk.AppChooserWidget
#COMMENT: The #GtkAppChooserWidget:default-text property determines the text
that appears in the widget when there are no applications for the
given content type.
See also gtk_app_chooser_widget_set_default_text().
#NAME: link_button
#PARENT: Gtk.LinkButton.set_visited.none
#COMMENT: a #GtkLinkButton
#NAME: sibling
#PARENT: Gtk.ListStore.insert_after.none
#COMMENT: A valid #GtkTreeIter, or %NULL
#NAME: focus-home-or-end
#PARENT: Gtk.Toolbar.focus-home-or-end
#COMMENT: %TRUE if the signal was handled, %FALSE if not
#NAME: width
#PARENT: Gtk.render_background.none
#COMMENT: rectangle width
#NAME: filename
#PARENT: Gtk.FileFilterInfo
#COMMENT: the filename of the file being tested
#NAME: set_n_copies
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_N_COPIES.
#NAME: item
#PARENT: Gtk.ToolItemGroup.get_item_position.gint
#COMMENT: a #GtkToolItem
#NAME: tree_store
#PARENT: Gtk.TreeStore.insert_with_values.none
#COMMENT: A #GtkTreeStore
#NAME: source
#PARENT: Gtk.IconSource.set_pixbuf.none
#COMMENT: a #GtkIconSource
#NAME: get_item_orientation
#PARENT: Gtk.IconView.get_item_orientation
#COMMENT: the relative position of texts and icons
#NAME: ref
#PARENT: Gtk.RecentInfo
#COMMENT: Increases the reference count of @recent_info by one.
#NAME: assistant
#PARENT: Gtk.Assistant.get_n_pages.gint
#COMMENT: a #GtkAssistant
#NAME: Buildable
#PARENT: Gtk
#COMMENT: GtkBuildable allows objects to extend and customize their deserialization
from [GtkBuilder UI descriptions][BUILDER-UI].
The interface includes methods for setting names and properties of objects,
parsing custom tags and constructing child objects.

The GtkBuildable interface is implemented by all widgets and
many of the non-widget objects that are provided by GTK+. The
main user of this interface is #GtkBuilder. There should be
very little need for applications to call any of these functions directly.

An object only needs to implement this interface if it needs to extend the
#GtkBuilder format or run any extra routines at deserialization time.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_add_region.none
#COMMENT: position to modify, -1 for the path head
#NAME: str
#PARENT: Gtk.Label.set_markup_with_mnemonic.none
#COMMENT: a markup string (see
    [Pango markup format][PangoMarkupFormat])
#NAME: context
#PARENT: Gtk.PrintContext.create_pango_context.Pango.Context
#COMMENT: a #GtkPrintContext
#NAME: settings
#PARENT: Gtk.PrintSettings.get_resolution.gint
#COMMENT: a #GtkPrintSettings
#NAME: get_accel_widget
#PARENT: Gtk.AccelLabel
#COMMENT: Fetches the widget monitored by this accelerator label. See
gtk_accel_label_set_accel_widget().
#NAME: set_show_connect_to_server
#PARENT: Gtk.PlacesSidebar
#COMMENT: Sets whether the @sidebar should show an item for connecting to a network server; this is off by default.
An application may want to turn this on if it implements a way for the user to connect
to network servers directly.
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_iter_at_line_offset.none
#COMMENT: a #GtkTextBuffer
#NAME: parent_class
#PARENT: Gtk.WindowClass
#COMMENT: The parent class.
#NAME: row_expanded
#PARENT: Gtk.TreeView.row_expanded
#COMMENT: %TRUE if #path is expanded.
#NAME: context
#PARENT: Gtk.StyleContext.get_style_valist.none
#COMMENT: a #GtkStyleContext
#NAME: mode
#PARENT: Gtk.FlowBox.set_selection_mode.none
#COMMENT: the new selection mode
#NAME: new
#PARENT: Gtk.FlowBoxChild.new
#COMMENT: a new #GtkFlowBoxChild
#NAME: unit
#PARENT: Gtk.PageSetup.get_right_margin.gdouble
#COMMENT: the unit for the return value
#NAME: get_label
#PARENT: Gtk.Expander.get_label
#COMMENT: The text of the label widget. This string is owned
    by the widget and must not be modified or freed.
#NAME: groups
#PARENT: Gtk.RecentFilterInfo
#COMMENT: The groups to which
   the file belongs to.
#NAME: has-resize-grip
#PARENT: Gtk.Window
#COMMENT: Whether the window has a corner resize grip.

Note that the resize grip is only shown if the window is
actually resizable and not maximized. Use
#GtkWindow:resize-grip-visible to find out if the resize
grip is currently shown.
#NAME: year
#PARENT: Gtk.Calendar
#COMMENT: The selected year.
This property gets initially set to the current year.
#NAME: len
#PARENT: Gtk.IMContextClass.set_surrounding.set_surrounding.none
#COMMENT: the length of @text, or -1 if @text is nul-terminated
#NAME: lookup_by_gicon_for_scale
#PARENT: Gtk.IconTheme
#COMMENT: Looks up an icon and returns a #GtkIconInfo containing information
such as the filename of the icon. The icon can then be rendered into
a pixbuf using gtk_icon_info_load_icon().
#NAME: width
#PARENT: Gtk.PaperSize.new_from_ipp.PaperSize
#COMMENT: the paper width, in points
#NAME: data
#PARENT: Gtk.AccelMap.foreach.none
#COMMENT: data to be passed into @foreach_func
#NAME: fill
#PARENT: Gtk.Box.pack_start.none
#COMMENT: %TRUE if space given to @child by the @expand option is
    actually allocated to @child, rather than just padding it.  This
    parameter has no effect if @expand is set to %FALSE.  A child is
    always allocated the full height of a horizontal #GtkBox and the full width
    of a vertical #GtkBox. This option affects the other dimension
#NAME: menu_item
#PARENT: Gtk.MenuItem.get_right_justified.gboolean
#COMMENT: a #GtkMenuItem
#NAME: preparing
#PARENT: Gtk.PrintStatus
#COMMENT: This status is set while the begin-print
    signal is emitted and during pagination.
#NAME: get_size
#PARENT: Gtk.StatusIcon.get_size
#COMMENT: the size that is available for the image
#NAME: get_search_position_func
#PARENT: Gtk.TreeView
#COMMENT: Returns the positioning function currently in use.
#NAME: sibling
#PARENT: Gtk.CellArea.remove_focus_sibling.none
#COMMENT: the #GtkCellRenderer to remove from @renderer’s focus area
#NAME: set_icon_from_gicon
#PARENT: Gtk.Entry
#COMMENT: Sets the icon shown in the entry at the specified position
from the current icon theme.
If the icon isn’t known, a “broken image” icon will be displayed
instead.

If @icon is %NULL, no icon will be shown in the specified position.
#NAME: prefix
#PARENT: Gtk.EntryCompletion.insert-prefix.gboolean
#COMMENT: the common prefix of all possible completions
#NAME: get_select_multiple
#PARENT: Gtk.FileChooser.get_select_multiple
#COMMENT: %TRUE if multiple files can be selected.
#NAME: stack
#PARENT: Gtk.Stack.add_named.none
#COMMENT: a #GtkStack
#NAME: apply-tag
#PARENT: Gtk.TextBuffer
#COMMENT: The ::apply-tag signal is emitted to apply a tag to a
range of text in a #GtkTextBuffer.
Applying actually occurs in the default handler.

Note that if your handler runs before the default handler it must not
invalidate the @start and @end iters (or has to revalidate them).

See also:
gtk_text_buffer_apply_tag(),
gtk_text_buffer_insert_with_tags(),
gtk_text_buffer_insert_range().
#NAME: new_order
#PARENT: Gtk.TreeRowReference.reordered.none
#COMMENT: the new order of rows
#NAME: page-removed
#PARENT: Gtk.Notebook
#COMMENT: the ::page-removed signal is emitted in the notebook
right after a page is removed from the notebook.
#NAME: new
#PARENT: Gtk.RecentFilter
#COMMENT: Creates a new #GtkRecentFilter with no rules added to it.
Such filter does not accept any recently used resources, so is not
particularly useful until you add rules with
gtk_recent_filter_add_pattern(), gtk_recent_filter_add_mime_type(),
gtk_recent_filter_add_application(), gtk_recent_filter_add_age().
To create a filter that accepts any recently used resource, use:
|[<!-- language="C" -->
GtkRecentFilter *filter = gtk_recent_filter_new ();
gtk_recent_filter_add_pattern (filter, "*");
]|
#NAME: widget
#PARENT: Gtk.Widget.override_color.none
#COMMENT: a #GtkWidget
#NAME: fill
#PARENT: Gtk.AttachOptions
#COMMENT: the widget should fill the space allocated to it.
#NAME: label
#PARENT: Gtk.ToggleButton.new_with_label.Widget
#COMMENT: a string containing the message to be placed in the toggle button.
#NAME: get_halign
#PARENT: Gtk.Widget.get_halign
#COMMENT: the horizontal alignment of @widget
#NAME: grid
#PARENT: Gtk.Grid.set_row_homogeneous.none
#COMMENT: a #GtkGrid
#NAME: new
#PARENT: Gtk.FlowBox
#COMMENT: Creates a GtkFlowBox.
#NAME: get_slider_size_fixed
#PARENT: Gtk.Range.get_slider_size_fixed
#COMMENT: whether the range’s slider has a fixed size.
#NAME: AssistantPageFunc
#PARENT: Gtk
#COMMENT: A function used by gtk_assistant_set_forward_page_func() to know which
is the next page given a current one. It’s called both for computing the
next page when the user presses the “forward” button and for handling
the behavior of the “last” button.
#NAME: cell_area
#PARENT: Gtk.CellRendererClass.start_editing.start_editing.CellEditable
#COMMENT: cell area as passed to gtk_cell_renderer_render()
#NAME: set_row_span_column
#PARENT: Gtk.ComboBox
#COMMENT: Sets the column with row span information for @combo_box to be @row_span.
The row span column contains integers which indicate how many rows
an item should span.
#NAME: delete-from-cursor
#PARENT: Gtk.TextView
#COMMENT: The ::delete-from-cursor signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates a text deletion.

If the @type is %GTK_DELETE_CHARS, GTK+ deletes the selection
if there is one, otherwise it deletes the requested number
of characters.

The default bindings for this signal are
Delete for deleting a character, Ctrl-Delete for
deleting a word and Ctrl-Backspace for deleting a word
backwords.
#NAME: widget
#PARENT: Gtk.Widget.set_margin_right.none
#COMMENT: a #GtkWidget
#NAME: slide_left_right
#PARENT: Gtk.StackTransitionType
#COMMENT: Slide from left or right according to the children order
#NAME: set_vadjustment
#PARENT: Gtk.TreeView
#COMMENT: Sets the #GtkAdjustment for the current vertical aspect.
#NAME: test_widget_click
#PARENT: Gtk
#COMMENT: This function will generate a @button click (button press and button
release event) in the middle of the first GdkWindow found that belongs
to @widget.
For windowless widgets like #GtkButton (which returns %FALSE from
gtk_widget_get_has_window()), this will often be an
input-only event window. For other widgets, this is usually widget->window.
Certain caveats should be considered when using this function, in
particular because the mouse pointer is warped to the button click
location, see gdk_test_simulate_button() for details.
#NAME: builder
#PARENT: Gtk.BuildableIface.add_child.add_child.none
#COMMENT: a #GtkBuilder
#NAME: menu_shell
#PARENT: Gtk.MenuShell.prepend.none
#COMMENT: a #GtkMenuShell
#NAME: right_attach
#PARENT: Gtk.Table.attach.none
#COMMENT: the column number to attach the right side of a child widget to.
#NAME: selection_clear_targets
#PARENT: Gtk
#COMMENT: Remove all targets registered for the given selection for the
widget.
#NAME: lookup_color
#PARENT: Gtk.ThemingEngine.lookup_color
#COMMENT: %TRUE if @color_name was found and resolved, %FALSE otherwise
#NAME: tree_view
#PARENT: Gtk.TreeView.get_search_position_func.TreeViewSearchPositionFunc
#COMMENT: A #GtkTreeView
#NAME: get_alignment
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns the current x alignment of @tree_column.  This value can range
between 0.0 and 1.0.
#NAME: tooltip-markup
#PARENT: Gtk.Widget
#COMMENT: Sets the text of tooltip to be the given string, which is marked up
with the [Pango text markup language][PangoMarkupFormat].
Also see gtk_tooltip_set_markup().

This is a convenience property which will take care of getting the
tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
will automatically be set to %TRUE and there will be taken care of
#GtkWidget::query-tooltip in the default signal handler.

Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
are set, the last one wins.
#NAME: shadow_type
#PARENT: Gtk.paint_box.none
#COMMENT: the type of shadow to draw
#NAME: destroy_with_parent
#PARENT: Gtk.DialogFlags
#COMMENT: Destroy the dialog when its
    parent is destroyed, see gtk_window_set_destroy_with_parent()
#NAME: x
#PARENT: Gtk.GestureLongPress.pressed.none
#COMMENT: the X coordinate where the press happened, relative to the widget allocation
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.get_show_desktop.gboolean
#COMMENT: a places sidebar
#NAME: chooser
#PARENT: Gtk.RecentChooser.set_show_tips.none
#COMMENT: a #GtkRecentChooser
#NAME: y
#PARENT: Gtk.GestureLongPress.pressed.none
#COMMENT: the Y coordinate where the press happened, relative to the widget allocation
#NAME: tag
#PARENT: Gtk.TextTagTable.tag-changed.none
#COMMENT: the changed tag.
#NAME: context_id
#PARENT: Gtk.IMMulticontext.set_context_id.none
#COMMENT: the id to use
#NAME: box
#PARENT: Gtk.FlowBoxClass.unselect_all.unselect_all.none
#COMMENT: a #GtkFlowBox
#NAME: animation
#PARENT: Gtk.Image.set_from_animation.none
#COMMENT: the #GdkPixbufAnimation
#NAME: response_id
#PARENT: Gtk.InfoBar.set_default_response.none
#COMMENT: a response ID
#NAME: scrollable
#PARENT: Gtk.ScrollableInterface.get_border.get_border.gboolean
#COMMENT: a #GtkScrollable
#NAME: rc_get_module_dir
#PARENT: Gtk
#COMMENT: Returns a directory in which GTK+ looks for theme engines.
For full information about the search for theme engines,
see the docs for `GTK_PATH` in [Running GTK+ Applications][gtk-running].
#NAME: set_duplex
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_DUPLEX.
#NAME: set_icon
#PARENT: Gtk.Tooltip
#COMMENT: Sets the icon of the tooltip (which is in front of the text) to be
@pixbuf.  If @pixbuf is %NULL, the image will be hidden.
#NAME: new
#PARENT: Gtk.UIManager.new
#COMMENT: a new ui manager object.
#NAME: resource_path
#PARENT: Gtk.UIManager.add_ui_from_resource.guint
#COMMENT: the resource path of the file to parse
#NAME: set_tooltip_item
#PARENT: Gtk.IconView
#COMMENT: Sets the tip area of @tooltip to be the area covered by the item at @path.
See also gtk_icon_view_set_tooltip_column() for a simpler alternative.
See also gtk_tooltip_set_tip_area().
#NAME: user_data
#PARENT: Gtk.FontChooser.set_filter_func.none
#COMMENT: data to pass to @filter
#NAME: calendar
#PARENT: Gtk.Calendar.clear_marks.none
#COMMENT: a #GtkCalendar
#NAME: set_pixel_size
#PARENT: Gtk.Image
#COMMENT: Sets the pixel size to use for named icons. If the pixel size is set
to a value != -1, it is used instead of the icon size set by
gtk_image_set_from_icon_name().
#NAME: set_parent
#PARENT: Gtk.MountOperation
#COMMENT: Sets the transient parent for windows shown by the
#GtkMountOperation.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_cursor_on_cell.none
#COMMENT: A #GtkTreeView
#NAME: decoration-layout-set
#PARENT: Gtk.HeaderBar
#COMMENT: Set to %TRUE if #GtkHeaderBar:decoration-layout is set.
#NAME: group
#PARENT: Gtk.ToolItemGroup.get_n_items.guint
#COMMENT: a #GtkToolItemGroup
#NAME: signal_id
#PARENT: Gtk.WidgetClass.can_activate_accel.can_activate_accel.gboolean
#COMMENT: the ID of a signal installed on @widget
#NAME: cell_area
#PARENT: Gtk.CellRendererClass.get_size.get_size.none
#COMMENT: The area a cell will be allocated, or %NULL
#NAME: get_license_type
#PARENT: Gtk.AboutDialog.get_license_type
#COMMENT: a #GtkLicense value
#NAME: box
#PARENT: Gtk.ListBox.selected_foreach.none
#COMMENT: a #GtkListBox
#NAME: widget
#PARENT: Gtk.Overlay.add_overlay.none
#COMMENT: a #GtkWidget to be added to the container
#NAME: preview
#PARENT: Gtk.PrintOperationPreview.end_preview.none
#COMMENT: a #GtkPrintOperationPreview
#NAME: chooser
#PARENT: Gtk.RecentChooser.add_filter.none
#COMMENT: a #GtkRecentChooser
#NAME: Clipboard
#PARENT: Gtk
#COMMENT: The #GtkClipboard object represents a clipboard of data shared
between different processes or between different widgets in
the same process. Each clipboard is identified by a name encoded as a
#GdkAtom. (Conversion to and from strings can be done with
gdk_atom_intern() and gdk_atom_name().) The default clipboard
corresponds to the “CLIPBOARD” atom; another commonly used clipboard
is the “PRIMARY” clipboard, which, in X, traditionally contains
the currently selected text.

To support having a number of different formats on the clipboard
at the same time, the clipboard mechanism allows providing
callbacks instead of the actual data.  When you set the contents
of the clipboard, you can either supply the data directly (via
functions like gtk_clipboard_set_text()), or you can supply a
callback to be called at a later time when the data is needed (via
gtk_clipboard_set_with_data() or gtk_clipboard_set_with_owner().)
Providing a callback also avoids having to make copies of the data
when it is not needed.

gtk_clipboard_set_with_data() and gtk_clipboard_set_with_owner()
are quite similar; the choice between the two depends mostly on
which is more convenient in a particular situation.
The former is most useful when you want to have a blob of data
with callbacks to convert it into the various data types that you
advertise. When the @clear_func you provided is called, you
simply free the data blob. The latter is more useful when the
contents of clipboard reflect the internal state of a #GObject
(As an example, for the PRIMARY clipboard, when an entry widget
provides the clipboard’s contents the contents are simply the
text within the selected region.) If the contents change, the
entry widget can call gtk_clipboard_set_with_owner() to update
the timestamp for clipboard ownership, without having to worry
about @clear_func being called.

Requesting the data from the clipboard is essentially
asynchronous. If the contents of the clipboard are provided within
the same process, then a direct function call will be made to
retrieve the data, but if they are provided by another process,
then the data needs to be retrieved from the other process, which
may take some time. To avoid blocking the user interface, the call
to request the selection, gtk_clipboard_request_contents() takes a
callback that will be called when the contents are received (or
when the request fails.) If you don’t want to deal with providing
a separate callback, you can also use gtk_clipboard_wait_for_contents().
What this does is run the GLib main loop recursively waiting for
the contents. This can simplify the code flow, but you still have
to be aware that other callbacks in your program can be called
while this recursive mainloop is running.

Along with the functions to get the clipboard contents as an
arbitrary data chunk, there are also functions to retrieve
it as text, gtk_clipboard_request_text() and
gtk_clipboard_wait_for_text(). These functions take care of
determining which formats are advertised by the clipboard
provider, asking for the clipboard in the best available format
and converting the results into the UTF-8 encoding. (The standard
form for representing strings in GTK+.)
#NAME: Orientation
#PARENT: Gtk
#COMMENT: Represents the orientation of widgets and other objects which can be switched
between horizontal and vertical orientation on the fly, like #GtkToolbar or
#GtkGesturePan.
#NAME: is_active
#PARENT: Gtk.ToggleButton.set_active.none
#COMMENT: %TRUE or %FALSE.
#NAME: get_icon_tooltip_markup
#PARENT: Gtk.Entry.get_icon_tooltip_markup
#COMMENT: the tooltip text, or %NULL. Free the returned
    string with g_free() when done.
#NAME: widget
#PARENT: Gtk.Widget.get_pointer.none
#COMMENT: a #GtkWidget
#NAME: new
#PARENT: Gtk.Expander.new
#COMMENT: a new #GtkExpander widget.
#NAME: backward_cursor_position
#PARENT: Gtk.TextIter.backward_cursor_position
#COMMENT: %TRUE if we moved
#NAME: insert_after
#PARENT: Gtk.TreeStore
#COMMENT: Inserts a new row after @sibling.  If @sibling is %NULL, then the row will be
prepended to @parent ’s children.  If @parent and @sibling are %NULL, then
the row will be prepended to the toplevel.  If both @sibling and @parent are
set, then @parent must be the parent of @sibling.  When @sibling is set,
@parent is optional.

@iter will be changed to point to this new row.  The row will be empty after
this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().
#NAME: path
#PARENT: Gtk.TreeView.create_row_drag_icon.cairo.Surface
#COMMENT: a #GtkTreePath in @tree_view
#NAME: size
#PARENT: Gtk.render_icon_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: the size to render the icon at. A size of (GtkIconSize) -1
       means render at the size of the source and don’t scale.
#NAME: path
#PARENT: Gtk.CellRenderer.start_editing.CellEditable
#COMMENT: widget-dependent string representation of the event location;
   e.g. for #GtkTreeView, a string representation of #GtkTreePath
#NAME: STOCK_CUT
#PARENT: Gtk
#COMMENT: The “Cut” item and icon.
#NAME: path_is_selected
#PARENT: Gtk.TreeSelection
#COMMENT: Returns %TRUE if the row pointed to by @path is currently selected.  If @path
does not point to a valid location, %FALSE is returned
#NAME: render_option
#PARENT: Gtk
#COMMENT: Renders an option mark (as in a #GtkRadioButton), the %GTK_STATE_FLAG_CHECKED
state will determine whether the option is on or off, and
%GTK_STATE_FLAG_INCONSISTENT whether it should be marked as undefined.

Typical option mark rendering:

![](options.png)
#NAME: modifiers
#PARENT: Gtk.binding_entry_skip.none
#COMMENT: key modifier of binding to skip
#NAME: AppChooserButton
#PARENT: Gtk
#COMMENT: The #GtkAppChooserButton is a widget that lets the user select
an application. It implements the #GtkAppChooser interface.

Initially, a #GtkAppChooserButton selects the first application
in its list, which will either be the most-recently used application
or, if #GtkAppChooserButton:show-default-item is %TRUE, the
default application.

The list of applications shown in a #GtkAppChooserButton includes
the recommended applications for the given content type. When
#GtkAppChooserButton:show-default-item is set, the default application
is also included. To let the user chooser other applications,
you can set the #GtkAppChooserButton:show-dialog-item property,
which allows to open a full #GtkAppChooserDialog.

It is possible to add custom items to the list, using
gtk_app_chooser_button_append_custom_item(). These items cause
the #GtkAppChooserButton::custom-item-activated signal to be
emitted when they are selected.

To track changes in the selected application, use the
#GtkComboBox::changed signal.
#NAME: set_flippable
#PARENT: Gtk.Range
#COMMENT: If a range is flippable, it will switch its direction if it is
horizontal and its direction is %GTK_TEXT_DIR_RTL.

See gtk_widget_get_direction().
#NAME: iter
#PARENT: Gtk.TextIter.toggles_tag.gboolean
#COMMENT: an iterator
#NAME: window
#PARENT: Gtk.WindowGroup.remove_window.none
#COMMENT: the #GtkWindow to remove
#NAME: focus-in-event
#PARENT: Gtk.Widget
#COMMENT: The ::focus-in-event signal will be emitted when the keyboard focus
enters the @widget's window.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_FOCUS_CHANGE_MASK mask.
#NAME: gtk-toolbar-style
#PARENT: Gtk.Settings
#COMMENT: The size of icons in default toolbars.
#NAME: start
#PARENT: Gtk.TextIter.get_visible_slice.utf8
#COMMENT: iterator at start of range
#NAME: set_right_margin
#PARENT: Gtk.TextView
#COMMENT: Sets the default right margin for text in the text view.
Tags in the buffer may override the default.
#NAME: cr
#PARENT: Gtk.render_arrow.none
#COMMENT: a #cairo_t
#NAME: begin_user_action
#PARENT: Gtk.TextBuffer
#COMMENT: Called to indicate that the buffer operations between here and a
call to gtk_text_buffer_end_user_action() are part of a single
user-visible operation. The operations between
gtk_text_buffer_begin_user_action() and
gtk_text_buffer_end_user_action() can then be grouped when creating
an undo stack. #GtkTextBuffer maintains a count of calls to
gtk_text_buffer_begin_user_action() that have not been closed with
a call to gtk_text_buffer_end_user_action(), and emits the
“begin-user-action” and “end-user-action” signals only for the
outermost pair of calls. This allows you to build user actions
from other user actions.

The “interactive” buffer mutation functions, such as
gtk_text_buffer_insert_interactive(), automatically call begin/end
user action around the buffer operations they perform, so there's
no need to add extra calls if you user action consists solely of a
single call to one of those functions.
#NAME: xy1_gap
#PARENT: Gtk.render_frame_gap.none
#COMMENT: end coordinate (X or Y depending on @gap_side) for the gap
#NAME: get_accel_width
#PARENT: Gtk.AccelLabel.get_accel_width
#COMMENT: the width needed to display the accelerator key(s).
#NAME: context
#PARENT: Gtk.CellAreaContext.get_allocation.none
#COMMENT: a #GtkCellAreaContext
#NAME: extend_selection
#PARENT: Gtk.Label.move-cursor.none
#COMMENT: %TRUE if the move should extend the selection
#NAME: ntargets
#PARENT: Gtk.selection_add_targets.none
#COMMENT: number of entries in @targets
#NAME: always_show
#PARENT: Gtk.Action.set_always_show_image.none
#COMMENT: %TRUE if menuitem proxies should always show their image
#NAME: new_from_file
#PARENT: Gtk.Builder.new_from_file
#COMMENT: a #GtkBuilder containing the described interface
#NAME: text_column
#PARENT: Gtk.ComboBox.set_entry_text_column.none
#COMMENT: A column in @model to get the strings from for
    the internal entry
#NAME: get_for_screen
#PARENT: Gtk.IconTheme.get_for_screen
#COMMENT: A unique #GtkIconTheme associated with
 the given screen. This icon theme is associated with
 the screen and can be used as long as the screen
 is open. Do not ref or unref it.
#NAME: frame_clock
#PARENT: Gtk.StyleContext.set_frame_clock.none
#COMMENT: a #GdkFrameClock
#NAME: keynav_failed
#PARENT: Gtk.Widget.keynav_failed
#COMMENT: %TRUE if stopping keyboard navigation is fine, %FALSE
              if the emitting widget should try to handle the keyboard
              navigation attempt in its parent container(s).
#NAME: name
#PARENT: Gtk.Widget.get_template_child.GObject.Object
#COMMENT: The “id” of the child defined in the template XML
#NAME: gesture
#PARENT: Gtk.Gesture.get_bounding_box.gboolean
#COMMENT: a #GtkGesture
#NAME: get_default
#PARENT: Gtk.Clipboard.get_default
#COMMENT: the default clipboard object.
#NAME: theme
#PARENT: Gtk.PathPriorityType
#COMMENT: Deprecated
#NAME: STYLE_CLASS_PROGRESSBAR
#PARENT: Gtk
#COMMENT: A CSS class to use when rendering activity as a progressbar.

This is used in #GtkProgressBar and when drawing progress
inside a #GtkEntry or in #GtkCellRendererProgress.
#NAME: get_search_mode
#PARENT: Gtk.SearchBar
#COMMENT: Returns whether the search mode is on or off.
#NAME: add_signal_from_string
#PARENT: Gtk.BindingEntry
#COMMENT: Parses a signal description from @signal_desc and incorporates
it into @binding_set.

Signal descriptions may either bind a key combination to
one or more signals:
|[
  bind "key" {
    "signalname" (param, ...)
    ...
  }
]|

Or they may also unbind a key combination:
|[
  unbind "key"
]|

Key combinations must be in a format that can be parsed by
gtk_accelerator_parse().
#NAME: number
#PARENT: Gtk.InputPurpose
#COMMENT: Edited field expects numbers
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_relief_style.ReliefStyle
#COMMENT: a #GtkToolItem
#NAME: focus
#PARENT: Gtk.Window.set_focus.none
#COMMENT: widget to be the new focus widget, or %NULL to unset
  any focus widget for the toplevel window.
#NAME: setting
#PARENT: Gtk.AppChooserButton.set_show_default_item.none
#COMMENT: the new value for #GtkAppChooserButton:show-default-item
#NAME: page_nr
#PARENT: Gtk.PrintOperationPreviewIface.render_page.render_page.none
#COMMENT: the page to render
#NAME: 
#PARENT: Gtk.StyleProperties.set.none...
#COMMENT: property name/value pairs, followed by %NULL
#NAME: destroy
#PARENT: Gtk.TreeModelFilter.set_modify_func.none
#COMMENT: Destroy notifier of @data, or %NULL.
#NAME: flags
#PARENT: Gtk.Application.inhibit.guint
#COMMENT: what types of actions should be inhibited
#NAME: set_line_wrap
#PARENT: Gtk.Label
#COMMENT: Toggles line wrapping within the #GtkLabel widget. %TRUE makes it break
lines if text exceeds the widget’s size. %FALSE lets the text get cut off
by the edge of the widget if it exceeds the widget size.

Note that setting line wrapping to %TRUE does not make the label
wrap at its parent container’s width, because GTK+ widgets
conceptually can’t make their requisition depend on the parent
container’s size. For a label that wraps at a specific position,
set the label’s width using gtk_widget_set_size_request().
#NAME: get_overlay_scrolling
#PARENT: Gtk.ScrolledWindow.get_overlay_scrolling
#COMMENT: %TRUE if overlay scrolling is enabled
#NAME: stock_id
#PARENT: Gtk.ActionEntry
#COMMENT: The stock id for the action, or the name of an icon from the
 icon theme.
#NAME: path_string
#PARENT: Gtk.CellRendererAccel.accel-edited.none
#COMMENT: the path identifying the row of the edited cell
#NAME: child
#PARENT: Gtk.FlowBoxFilterFunc.gboolean
#COMMENT: a #GtkFlowBoxChild that may be filtered
#NAME: get_window
#PARENT: Gtk.TextView
#COMMENT: Retrieves the #GdkWindow corresponding to an area of the text view;
possible windows include the overall widget window, child windows
on the left, right, top, bottom, and the window that displays the
text buffer. Windows are %NULL and nonexistent if their width or
height is 0, and are nonexistent before the widget has been
realized.
#NAME: event
#PARENT: Gtk.Widget.drag_begin.Gdk.DragContext
#COMMENT: The event that triggered the start of the drag
#NAME: label
#PARENT: Gtk.Expander.set_label.none
#COMMENT: a string
#NAME: h
#PARENT: Gtk.HSV.set_color.none
#COMMENT: Hue
#NAME: get_show_text
#PARENT: Gtk.ProgressBar.get_show_text
#COMMENT: %TRUE if text is shown in the progress bar
#NAME: get_display_name
#PARENT: Gtk.RecentInfo
#COMMENT: Gets the name of the resource. If none has been defined, the basename
of the resource is obtained.
#NAME: TreeViewColumnDropFunc
#PARENT: Gtk
#COMMENT: Function type for determining whether @column can be dropped in a
particular spot (as determined by @prev_column and @next_column).  In
left to right locales, @prev_column is on the left of the potential drop
spot, and @next_column is on the right.  In right to left mode, this is
reversed.  This function should return %TRUE if the spot is a valid drop
spot.  Please note that returning %TRUE does not actually indicate that
the column drop was made, but is meant only to indicate a possible drop
spot to the user.
#NAME: spacing
#PARENT: Gtk.FlowBox.set_column_spacing.none
#COMMENT: the spacing to use
#NAME: get_icon
#PARENT: Gtk.Window.get_icon
#COMMENT: icon for window
#NAME: device
#PARENT: Gtk.Menu.popup_for_device.none
#COMMENT: a #GdkDevice
#NAME: set_homogeneous
#PARENT: Gtk.Table
#COMMENT: Changes the homogenous property of table cells, ie. whether all cells are
an equal size or not.
#NAME: modify_font
#PARENT: Gtk.Widget
#COMMENT: Sets the font to use for a widget.

All other style values are left untouched.
See also gtk_widget_modify_style().
#NAME: action
#PARENT: Gtk.Action.set_visible_horizontal.none
#COMMENT: a #GtkAction
#NAME: icon
#PARENT: Gtk.Widget.drag_source_set_icon_gicon.none
#COMMENT: A #GIcon
#NAME: accelerator_name
#PARENT: Gtk
#COMMENT: Converts an accelerator keyval and modifier mask into a string
parseable by gtk_accelerator_parse(). For example, if you pass in
#GDK_KEY_q and #GDK_CONTROL_MASK, this function returns “<Control>q”.

If you need to display accelerators in the user interface,
see gtk_accelerator_get_label().
#NAME: colorsel
#PARENT: Gtk.ColorSelection.set_current_color.none
#COMMENT: a #GtkColorSelection
#NAME: set_app_paintable
#PARENT: Gtk.Widget
#COMMENT: Sets whether the application intends to draw on the widget in
an #GtkWidget::draw handler.

This is a hint to the widget and does not affect the behavior of
the GTK+ core; many widgets ignore this flag entirely. For widgets
that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
the effect is to suppress default themed drawing of the widget's
background. (Children of the widget will still be drawn.) The application
is then entirely responsible for drawing the widget background.

Note that the background is still drawn when the widget is mapped.
#NAME: button
#PARENT: Gtk.GestureSingle.set_button.none
#COMMENT: button number to listen to, or 0 for any button
#NAME: chooser
#PARENT: Gtk.ColorChooserInterface.set_rgba.set_rgba.none
#COMMENT: a #GtkColorChooser
#NAME: get_cell_area
#PARENT: Gtk.TreeView
#COMMENT: Fills the bounding rectangle in bin_window coordinates for the cell at the
row specified by @path and the column specified by @column.  If @path is
%NULL, or points to a path not currently displayed, the @y and @height fields
of the rectangle will be filled with 0. If @column is %NULL, the @x and @width
fields will be filled with 0.  The sum of all cell rects does not cover the
entire tree; there are extra pixels in between rows, for example. The
returned rectangle is equivalent to the @cell_area passed to
gtk_cell_renderer_render().  This function is only valid if @tree_view is
realized.
#NAME: widget
#PARENT: Gtk.Widget.drag_dest_add_image_targets.none
#COMMENT: a #GtkWidget that’s a drag destination
#NAME: BINARY_AGE
#PARENT: Gtk
#COMMENT: Like gtk_get_binary_age(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
#NAME: email
#PARENT: Gtk.InputPurpose
#COMMENT: Edited field expects email address
#NAME: STOCK_DND_MULTIPLE
#PARENT: Gtk
#COMMENT: The “Drag-And-Drop multiple” icon.
#NAME: get_buffer
#PARENT: Gtk.TextMark
#COMMENT: Gets the buffer this mark is located inside,
or %NULL if the mark is deleted.
#NAME: grab_remove
#PARENT: Gtk.Widget
#COMMENT: Removes the grab from the given widget.

You have to pair calls to gtk_grab_add() and gtk_grab_remove().

If @widget does not have the grab, this function does nothing.
#NAME: new_with_label
#PARENT: Gtk.ImageMenuItem.new_with_label
#COMMENT: a new #GtkImageMenuItem.
#NAME: label
#PARENT: Gtk.Label.set_ellipsize.none
#COMMENT: a #GtkLabel
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_selection_bound.TextMark
#COMMENT: a #GtkTextBuffer
#NAME: viewport
#PARENT: Gtk.Viewport.get_hadjustment.Adjustment
#COMMENT: a #GtkViewport.
#NAME: popover
#PARENT: Gtk.Popover.set_position.none
#COMMENT: a #GtkPopover
#NAME: widget
#PARENT: Gtk.Widget.style_get.none
#COMMENT: a #GtkWidget
#NAME: s
#PARENT: Gtk.HSV.set_color.none
#COMMENT: Saturation
#NAME: list_contexts
#PARENT: Gtk.IconTheme
#COMMENT: Gets the list of contexts available within the current
hierarchy of icon themes.
See gtk_icon_theme_list_icons() for details about contexts.
#NAME: activate
#PARENT: Gtk.MenuItem
#COMMENT: Emitted when the item is activated.
#NAME: context
#PARENT: Gtk.NumerableIcon.new_with_style_context.Gio.Icon
#COMMENT: a #GtkStyleContext
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_icon_size.gint
#COMMENT: a #GtkToolItem
#NAME: convert_widget_to_tree_coords
#PARENT: Gtk.TreeView
#COMMENT: Converts widget coordinates to coordinates for the
tree (the full scrollable area of the tree).
#NAME: flags
#PARENT: Gtk.Widget.drag_dest_set.none
#COMMENT: which types of default drag behavior to use
#NAME: get_use_stock
#PARENT: Gtk.Button.get_use_stock
#COMMENT: %TRUE if the button label is used to
              select a stock item instead of being
              used directly as the label text.
#NAME: insert_page
#PARENT: Gtk.Assistant.insert_page
#COMMENT: the index (starting from 0) of the inserted page
#NAME: append_page
#PARENT: Gtk.Notebook
#COMMENT: Appends a page to @notebook.
#NAME: get_text
#PARENT: Gtk.SelectionData.get_text
#COMMENT: if the selection data contained a
  recognized text type and it could be converted to UTF-8, a newly
  allocated string containing the converted text, otherwise %NULL.
  If the result is non-%NULL it must be freed with g_free().
#NAME: ToggleActionEntry
#PARENT: Gtk
#COMMENT: #GtkToggleActionEntry structs are used with
gtk_action_group_add_toggle_actions() to construct toggle actions.
#NAME: state_type
#PARENT: Gtk.paint_extension.none
#COMMENT: a state
#NAME: v
#PARENT: Gtk.HSV.set_color.none
#COMMENT: Value
#NAME: get_adjustment
#PARENT: Gtk.Range
#COMMENT: Get the #GtkAdjustment which is the “model” object for #GtkRange.
See gtk_range_set_adjustment() for details.
The return value does not have a reference added, so should not
be unreferenced.
#NAME: widget
#PARENT: Gtk.CellArea.activate_cell.gboolean
#COMMENT: the #GtkWidget that @area is rendering onto
#NAME: homogeneous
#PARENT: Gtk.Table.set_homogeneous.none
#COMMENT: Set to %TRUE to ensure all table cells are the same size. Set
  to %FALSE if this is not your desired behaviour.
#NAME: display
#PARENT: Gtk.accelerator_name_with_keycode.utf8
#COMMENT: a #GdkDisplay or %NULL to use the default display
#NAME: get_inconsistent
#PARENT: Gtk.CheckMenuItem
#COMMENT: Retrieves the value set by gtk_check_menu_item_set_inconsistent().
#NAME: get_resolution_x
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_X.
#NAME: destroy
#PARENT: Gtk.TreeModelFilter.set_visible_func.none
#COMMENT: Destroy notifier of @data, or %NULL
#NAME: close
#PARENT: Gtk.Assistant
#COMMENT: The ::close signal is emitted either when the close button of
a summary page is clicked, or when the apply button in the last
page in the flow (of type %GTK_ASSISTANT_PAGE_CONFIRM) is clicked.
#NAME: value
#PARENT: Gtk.Adjustment
#COMMENT: The value of the adjustment.
#NAME: property_name
#PARENT: Gtk.Container.child_set_property.none
#COMMENT: the name of the property to set
#NAME: get_resolution_y
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_Y.
#NAME: get_resize_mode
#PARENT: Gtk.Container.get_resize_mode
#COMMENT: the current resize mode
#NAME: new_order
#PARENT: Gtk.ListStore.reorder.none
#COMMENT: an array of integers mapping the new
     position of each child to its old position before the re-ordering,
     i.e. @new_order`[newpos] = oldpos`. It must have
     exactly as many items as the list store’s length.
#NAME: sorted_iter
#PARENT: Gtk.TreeModelSort.convert_iter_to_child_iter.none
#COMMENT: A valid #GtkTreeIter pointing to a row on @tree_model_sort.
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.add_with_viewport.none
#COMMENT: a #GtkScrolledWindow
#NAME: get_expand
#PARENT: Gtk.ToolItem.get_expand
#COMMENT: %TRUE if @tool_item is allocated extra space.
#NAME: get_attributes
#PARENT: Gtk.TextIter.get_attributes
#COMMENT: %TRUE if @values was modified
#NAME: self
#PARENT: Gtk.AppChooser.refresh.none
#COMMENT: a #GtkAppChooser
#NAME: set_transition_type
#PARENT: Gtk.Revealer
#COMMENT: Sets the type of animation that will be used for
transitions in @revealer. Available types include
various kinds of fades and slides.
#NAME: render_line
#PARENT: Gtk
#COMMENT: Renders a line from (x0, y0) to (x1, y1).
#NAME: CalendarDetailFunc
#PARENT: Gtk
#COMMENT: This kind of functions provide Pango markup with detail information for the
specified day. Examples for such details are holidays or appointments. The
function returns %NULL when no information is available.
#NAME: gtk-dialogs-use-header
#PARENT: Gtk.Settings
#COMMENT: Whether builtin GTK+ dialogs such as the file chooser, the
color chooser or the font chooser will use a header bar at
the top to show action widgets, or an action area at the bottom.

This setting does not affect custom dialogs using GtkDialog
directly, or message dialogs.
#NAME: set_search_column
#PARENT: Gtk.TreeView
#COMMENT: Sets @column as the column where the interactive search code should
search in for the current model.

If the search column is set, users can use the “start-interactive-search”
key binding to bring up search popup. The enable-search property controls
whether simply typing text will also start an interactive search.

Note that @column refers to a column of the current model. The search
column is reset to -1 when the model is changed.
#NAME: disable_setlocale
#PARENT: Gtk
#COMMENT: Prevents gtk_init(), gtk_init_check(), gtk_init_with_args() and
gtk_parse_args() from automatically
calling `setlocale (LC_ALL, "")`. You would
want to use this function if you wanted to set the locale for
your program to something other than the user’s locale, or if
you wanted to set different values for different locale categories.

Most programs should not need to call this function.
#NAME: paper_size_get_default
#PARENT: Gtk.paper_size_get_default
#COMMENT: the name of the default paper size. The string
is owned by GTK+ and should not be modified.
#NAME: include_custom
#PARENT: Gtk.paper_size_get_paper_sizes.PaperSize
#COMMENT: whether to include custom paper sizes
    as defined in the page setup dialog
#NAME: target
#PARENT: Gtk.Clipboard.wait_is_target_available.gboolean
#COMMENT: A #GdkAtom indicating which target to look for.
#NAME: id
#PARENT: Gtk.Application.get_window_by_id.Window
#COMMENT: an identifier number
#NAME: root
#PARENT: Gtk.TreeModel.filter_new.TreeModel
#COMMENT: A #GtkTreePath or %NULL.
#NAME: image
#PARENT: Gtk.Image.get_animation.GdkPixbuf.PixbufAnimation
#COMMENT: a #GtkImage
#NAME: get_style
#PARENT: Gtk.StyleProvider
#COMMENT: Returns the style settings affecting a widget defined by @path, or %NULL if
@provider doesn’t contemplate styling @path.
#NAME: accel_path
#PARENT: Gtk.AccelMap.change_entry.gboolean
#COMMENT: a valid accelerator path
#NAME: right-justified
#PARENT: Gtk.MenuItem
#COMMENT: Sets whether the menu item appears justified
at the right side of a menu bar.
#NAME: enable-debugging
#PARENT: Gtk.Window.enable-debugging
#COMMENT: %TRUE if the key binding was handled
#NAME: align
#PARENT: Gtk.CellAreaBox.pack_start.none
#COMMENT: whether @renderer should be aligned in adjacent rows
#NAME: self
#PARENT: Gtk.AppChooserWidget.set_show_recommended.none
#COMMENT: a #GtkAppChooserWidget
#NAME: load_symbolic
#PARENT: Gtk.IconInfo.load_symbolic
#COMMENT: a #GdkPixbuf representing the loaded icon
#NAME: get_max_value
#PARENT: Gtk.LevelBar
#COMMENT: Returns the value of the #GtkLevelBar:max-value property.
#NAME: context
#PARENT: Gtk.StyleContext.get_border_color.none
#COMMENT: a #GtkStyleContext
#NAME: mark
#PARENT: Gtk.TextBuffer.get_iter_at_mark.none
#COMMENT: a #GtkTextMark in @buffer
#NAME: get_n_items
#PARENT: Gtk.ToolItemGroup.get_n_items
#COMMENT: the number of tool items in @group
#NAME: toolbar-style
#PARENT: Gtk.ToolPalette
#COMMENT: The style of items in the tool palette.
#NAME: new
#PARENT: Gtk.FileFilter
#COMMENT: Creates a new #GtkFileFilter with no rules added to it.
Such a filter doesn’t accept any files, so is not
particularly useful until you add rules with
gtk_file_filter_add_mime_type(), gtk_file_filter_add_pattern(),
or gtk_file_filter_add_custom(). To create a filter
that accepts any file, use:
|[<!-- language="C" -->
GtkFileFilter *filter = gtk_file_filter_new ();
gtk_file_filter_add_pattern (filter, "*");
]|
#NAME: detach_tab
#PARENT: Gtk.Notebook
#COMMENT: Removes the child from the notebook.

This function is very similar to gtk_container_remove(),
but additionally informs the notebook that the removal
is happening as part of a tab DND operation, which should
not be cancelled.
#NAME: get_minor_version
#PARENT: Gtk
#COMMENT: Returns the minor version number of the GTK+ library.
(e.g. in GTK+ version 3.1.5 this is 1.)

This function is in the library, so it represents the GTK+ library
your code is are running against. Contrast with the
#GTK_MINOR_VERSION macro, which represents the minor version of the
GTK+ headers you have included when compiling your code.
#NAME: iter
#PARENT: Gtk.TextIter.get_visible_line_index.gint
#COMMENT: a #GtkTextIter
#NAME: inside_sentence
#PARENT: Gtk.TextIter
#COMMENT: Determines whether @iter is inside a sentence (as opposed to in
between two sentences, e.g. after a period and before the first
letter of the next sentence).  Sentence boundaries are determined
by Pango and should be correct for nearly any language (if not, the
correct fix would be to the Pango text boundary algorithms).
#NAME: get_child
#PARENT: Gtk.Bin
#COMMENT: Gets the child of the #GtkBin, or %NULL if the bin contains
no child widget. The returned widget does not have a reference
added, so you do not need to unref it.
#NAME: window
#PARENT: Gtk.Gesture.set_window.none
#COMMENT: a #GdkWindow, or %NULL
#NAME: get_text_column
#PARENT: Gtk.IconView.get_text_column
#COMMENT: the text column, or -1 if it’s unset.
#NAME: icon_view
#PARENT: Gtk.IconView.set_cursor.none
#COMMENT: A #GtkIconView
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.iter_n_children.iter_n_children.gint
#COMMENT: a #GtkTreeModel
#NAME: event
#PARENT: Gtk.CellAreaClass.event.event
#COMMENT: %TRUE if the event was handled by @area.
#NAME: get_width
#PARENT: Gtk.PrintContext.get_width
#COMMENT: the width of @context
#NAME: new_uri
#PARENT: Gtk.RecentManager.move_item.gboolean
#COMMENT: the new URI of the recently used resource, or
   %NULL to remove the item pointed by @uri in the list
#NAME: start
#PARENT: Gtk.TextIter.get_slice.utf8
#COMMENT: iterator at start of a range
#NAME: unstick
#PARENT: Gtk.Window
#COMMENT: Asks to unstick @window, which means that it will appear on only
one of the user’s desktops. Note that you shouldn’t assume the
window is definitely unstuck afterward, because other entities
(e.g. the user or [window manager][gtk-X11-arch]) could
stick it again. But normally the window will
end up stuck. Just don’t write code that crashes if not.

You can track stickiness via the “window-state-event” signal
on #GtkWidget.
#NAME: align_widget
#PARENT: Gtk.MenuButton.set_align_widget.none
#COMMENT: a #GtkWidget
#NAME: get_editable
#PARENT: Gtk.TextView
#COMMENT: Returns the default editability of the #GtkTextView. Tags in the
buffer may override this setting for some ranges of text.
#NAME: state_is_running
#PARENT: Gtk.ThemingEngine
#COMMENT: Returns %TRUE if there is a transition animation running for the
current region (see gtk_style_context_push_animatable_region()).

If @progress is not %NULL, the animation progress will be returned
there, 0.0 means the state is closest to being %FALSE, while 1.0 means
it’s closest to being %TRUE. This means transition animations will
run from 0 to 1 when @state is being set to %TRUE and from 1 to 0 when
it’s being set to %FALSE.
#NAME: first_property_name
#PARENT: Gtk.Widget.style_get_valist.none
#COMMENT: the name of the first property to get
#NAME: accel-activate
#PARENT: Gtk.AccelGroup
#COMMENT: The accel-activate signal is an implementation detail of
#GtkAccelGroup and not meant to be used by applications.
#NAME: get_line_count
#PARENT: Gtk.TextBuffer.get_line_count
#COMMENT: number of lines in the buffer
#NAME: drag_get_data
#PARENT: Gtk.Widget
#COMMENT: Gets the data associated with a drag. When the data
is received or the retrieval fails, GTK+ will emit a
#GtkWidget::drag-data-received signal. Failure of the retrieval
is indicated by the length field of the @selection_data
signal parameter being negative. However, when gtk_drag_get_data()
is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
then the widget will not receive notification of failed
drops.
#NAME: assistant
#PARENT: Gtk.Assistant.set_page_header_image.none
#COMMENT: a #GtkAssistant
#NAME: get_attach_points
#PARENT: Gtk.IconInfo.get_attach_points
#COMMENT: %FALSE
#NAME: icon_pos
#PARENT: Gtk.Entry.set_icon_from_icon_name.none
#COMMENT: The position at which to set the icon
#NAME: activate_time
#PARENT: Gtk.Menu.popup_for_device.none
#COMMENT: the time at which the activation event occurred
#NAME: changed
#PARENT: Gtk.TreeSelection
#COMMENT: Emitted whenever the selection has (possibly) changed. Please note that
this signal is mostly a hint.  It may only be emitted once when a range
of rows are selected, and it may occasionally be emitted when nothing
has happened.
#NAME: atoms
#PARENT: Gtk.ClipboardTargetsReceivedFunc.none
#COMMENT: the supported targets,
  as array of #GdkAtom, or %NULL if retrieving the data failed.
#NAME: self
#PARENT: Gtk.AppChooserWidget.get_show_other.gboolean
#COMMENT: a #GtkAppChooserWidget
#NAME: label
#PARENT: Gtk.Label.set_use_markup.none
#COMMENT: a #GtkLabel
#NAME: minimum-width
#PARENT: Gtk.CellAreaContext
#COMMENT: The minimum width for the #GtkCellArea in this context
for all #GtkTreeModel rows that this context was requested
for using gtk_cell_area_get_preferred_width().
#NAME: ypos
#PARENT: Gtk.TextView.add_child_in_window.none
#COMMENT: Y position of child in window coordinates
#NAME: ToolItem
#PARENT: Gtk
#COMMENT: #GtkToolItems are widgets that can appear on a toolbar. To
create a toolbar item that contain something else than a button, use
gtk_tool_item_new(). Use gtk_container_add() to add a child
widget to the tool item.

For toolbar items that contain buttons, see the #GtkToolButton,
#GtkToggleToolButton and #GtkRadioToolButton classes.

See the #GtkToolbar class for a description of the toolbar widget, and
#GtkToolShell for a description of the tool shell interface.
#NAME: get_path_for_child
#PARENT: Gtk.Container
#COMMENT: Returns a newly created widget path representing all the widget hierarchy
from the toplevel down to and including @child.
#NAME: window
#PARENT: Gtk.Window.activate_default.gboolean
#COMMENT: a #GtkWindow
#NAME: g_iface
#PARENT: Gtk.BuildableIface
#COMMENT: the parent class
#NAME: pspec
#PARENT: Gtk.StyleProperties.register_property.none
#COMMENT: the #GParamSpec for the new property
#NAME: get_height
#PARENT: Gtk.PaperSize.get_height
#COMMENT: the paper height
#NAME: insert_with_values
#PARENT: Gtk.TreeStore
#COMMENT: Creates a new row at @position. @iter will be changed to point to this
new row. If @position is -1, or larger than the number of rows on the list, then
the new row will be appended to the list. The row will be filled with
the values given to this function.

Calling
`gtk_tree_store_insert_with_values (tree_store, iter, position, ...)`
has the same effect as calling
|[<!-- language="C" -->
gtk_tree_store_insert (tree_store, iter, position);
gtk_tree_store_set (tree_store, iter, ...);
]|
with the different that the former will only emit a row_inserted signal,
while the latter will emit row_inserted, row_changed and if the tree store
is sorted, rows_reordered.  Since emitting the rows_reordered signal
repeatedly can affect the performance of the program,
gtk_tree_store_insert_with_values() should generally be preferred when
inserting rows in a sorted tree store.
#NAME: path
#PARENT: Gtk.TreeView.collapse_row.gboolean
#COMMENT: path to a row in the @tree_view
#NAME: handle_event
#PARENT: Gtk.SearchBar
#COMMENT: This function should be called when the top-level
window which contains the search bar received a key event.

If the key event is handled by the search bar, the bar will
be shown, the entry populated with the entered text and %GDK_EVENT_STOP
will be returned. The caller should ensure that events are
not propagated further.

If no entry has been connected to the search bar, using
gtk_search_bar_connect_entry(), this function will return
immediately with a warning.

## Showing the search bar on key presses

|[<!-- language="C" -->
static gboolean
on_key_press_event (GtkWidget *widget,
                    GdkEvent  *event,
                    gpointer   user_data)
{
  GtkSearchBar *bar = GTK_SEARCH_BAR (user_data);
  return gtk_search_bar_handle_event (bar, event);
}

g_signal_connect (window,
                 "key-press-event",
                  G_CALLBACK (on_key_press_event),
                  search_bar);
]|
#NAME: current-folder-changed
#PARENT: Gtk.FileChooser
#COMMENT: This signal is emitted when the current folder in a #GtkFileChooser
changes.  This can happen due to the user performing some action that
changes folders, such as selecting a bookmark or visiting a folder on the
file list.  It can also happen as a result of calling a function to
explicitly change the current folder in a file chooser.

Normally you do not need to connect to this signal, unless you need to keep
track of which folder a file chooser is showing.

See also:  gtk_file_chooser_set_current_folder(),
gtk_file_chooser_get_current_folder(),
gtk_file_chooser_set_current_folder_uri(),
gtk_file_chooser_get_current_folder_uri().
#NAME: buildable
#PARENT: Gtk.BuildableIface.custom_finished.custom_finished.none
#COMMENT: a #GtkBuildable
#NAME: message_format
#PARENT: Gtk.MessageDialog.new_with_markup.Widget
#COMMENT: printf()-style format string, or %NULL
#NAME: reversed
#PARENT: Gtk.Paned.cycle-child-focus.gboolean
#COMMENT: whether cycling backward or forward
#NAME: accelerator_key
#PARENT: Gtk.AccelLabel.get_accel.none
#COMMENT: return location for the keyval
#NAME: get_margin
#PARENT: Gtk.IconView.get_margin
#COMMENT: the space at the borders
#NAME: menu_label
#PARENT: Gtk.Notebook.prepend_page_menu.gint
#COMMENT: the widget to use as a label for the
    page-switch menu, if that is enabled. If %NULL, and @tab_label
    is a #GtkLabel or %NULL, then the menu label will be a newly
    created label with the same text as @tab_label; if @tab_label
    is not a #GtkLabel, @menu_label must be specified if the
    page-switch menu is to be used.
#NAME: needed
#PARENT: Gtk.RecentFilter.add_custom.none
#COMMENT: bitfield of flags indicating the information that the custom
         filter function needs.
#NAME: empty
#PARENT: Gtk.ImageType
#COMMENT: there is no image displayed by the widget
#NAME: width-chars
#PARENT: Gtk.CellRendererText
#COMMENT: The desired width of the cell, in characters. If this property is set to
-1, the width will be calculated automatically, otherwise the cell will
request either 3 characters or the property value, whichever is greater.
#NAME: get_selected_row
#PARENT: Gtk.ListBox
#COMMENT: Gets the selected row.

Note that the box may allow multiple selection, in which
case you should use gtk_list_box_selected_foreach() to
find all selected rows.
#NAME: sidebar
#PARENT: Gtk.StackSidebar.set_stack.none
#COMMENT: a #GtkStackSidebar
#NAME: sides
#PARENT: Gtk.StyleContext.set_junction_sides.none
#COMMENT: sides where rendered elements are visually connected to
    other elements
#NAME: TextIter
#PARENT: Gtk
#COMMENT: You may wish to begin by reading the
[text widget conceptual overview][TextWidget]
which gives an overview of all the objects and data
types related to the text widget and how they work together.
#NAME: rebuild_menu
#PARENT: Gtk.ToolItem
#COMMENT: Calling this function signals to the toolbar that the
overflow menu item for @tool_item has changed. If the
overflow menu is visible when this function it called,
the menu will be rebuilt.

The function must be called when the tool item changes what it
will do in response to the #GtkToolItem::create-menu-proxy signal.
#NAME: container
#PARENT: Gtk.ContainerClass.add.add.none
#COMMENT: a #GtkContainer
#NAME: struct_offset
#PARENT: Gtk.WidgetClass.bind_template_child_full.none
#COMMENT: The structure offset into the composite widget’s instance public or private structure
                where the automated child pointer should be set, or 0 to not assign the pointer.
#NAME: new
#PARENT: Gtk.EntryBuffer.new
#COMMENT: A new GtkEntryBuffer object.
#NAME: icon_theme
#PARENT: Gtk.IconTheme.get_search_path.none
#COMMENT: a #GtkIconTheme
#NAME: page
#PARENT: Gtk.SpinButton.set_increments.none
#COMMENT: increment applied for a button 2 press.
#NAME: len
#PARENT: Gtk.TextBuffer.insert_markup.none
#COMMENT: length of @markup in bytes, or -1
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_show_not_found.gboolean
#COMMENT: a #GtkRecentChooser
#NAME: step
#PARENT: Gtk.SpinButton.new_with_range.Widget
#COMMENT: Increment added or subtracted by spinning the widget
#NAME: setting
#PARENT: Gtk.TreeViewColumn.set_sort_indicator.none
#COMMENT: %TRUE to display an indicator that the column is sorted
#NAME: char
#PARENT: Gtk.WrapMode
#COMMENT: wrap text, breaking lines anywhere the cursor can
    appear (between characters, usually - if you want to be technical,
    between graphemes, see pango_get_log_attrs())
#NAME: highlight
#PARENT: Gtk.DestDefaults
#COMMENT: If set for a widget, GTK+ will draw a highlight on
  this widget as long as a drag is over this widget and the widget drag format
  and action are acceptable.
#NAME: iter
#PARENT: Gtk.TextIter.get_marks.TextMark
#COMMENT: an iterator
#NAME: is_visible
#PARENT: Gtk.Widget.is_visible
#COMMENT: %TRUE if the widget and all its parents are visible
#NAME: get_base_size
#PARENT: Gtk.IconInfo
#COMMENT: Gets the base size for the icon. The base size
is a size for the icon that was specified by
the icon theme creator. This may be different
than the actual size of image; an example of
this is small emblem icons that can be attached
to a larger icon. These icons will be given
the same base size as the larger icons to which
they are attached.

Note that for scaled icons the base size does
not include the base scale.
#NAME: child
#PARENT: Gtk.Paned.add2.none
#COMMENT: the child to add
#NAME: group
#PARENT: Gtk.ToolPalette.get_exclusive.gboolean
#COMMENT: a #GtkToolItemGroup which is a child of palette
#NAME: start_button_mask
#PARENT: Gtk.Widget.drag_source_set.none
#COMMENT: the bitmask of buttons that can start the drag
#NAME: iter
#PARENT: Gtk.TextIter.inside_word.gboolean
#COMMENT: a #GtkTextIter
#NAME: natural_width
#PARENT: Gtk.WidgetClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: location for storing the natural width, or %NULL
#NAME: x
#PARENT: Gtk.paint_extension.none
#COMMENT: x origin of the extension
#NAME: renderer
#PARENT: Gtk.CellArea.attribute_get_column.gint
#COMMENT: a #GtkCellRenderer
#NAME: new_with_context
#PARENT: Gtk.CellView.new_with_context
#COMMENT: A newly created #GtkCellView widget.
#NAME: y
#PARENT: Gtk.paint_extension.none
#COMMENT: y origin of the extension
#NAME: set_take_focus
#PARENT: Gtk.MenuShell
#COMMENT: If @take_focus is %TRUE (the default) the menu shell will take
the keyboard focus so that it will receive all keyboard events
which is needed to enable keyboard navigation in menus.

Setting @take_focus to %FALSE is useful only for special applications
like virtual keyboard implementations which should not take keyboard
focus.

The @take_focus state of a menu or menu bar is automatically
propagated to submenus whenever a submenu is popped up, so you
don’t have to worry about recursively setting it for your entire
menu hierarchy. Only when programmatically picking a submenu and
popping it up manually, the @take_focus property of the submenu
needs to be set explicitly.

Note that setting it to %FALSE has side-effects:

If the focus is in some other app, it keeps the focus and keynav in
the menu doesn’t work. Consequently, keynav on the menu will only
work if the focus is on some toplevel owned by the onscreen keyboard.

To avoid confusing the user, menus with @take_focus set to %FALSE
should not display mnemonics or accelerators, since it cannot be
guaranteed that they will work.

See also gdk_keyboard_grab()
#NAME: scale
#PARENT: Gtk.StyleContext.set_scale.none
#COMMENT: scale
#NAME: indices
#PARENT: Gtk.TreePath.new_from_indicesv.TreePath
#COMMENT: array of indices
#NAME: property
#PARENT: Gtk.StyleProperties.get_property.gboolean
#COMMENT: style property name
#NAME: get_text_size_group
#PARENT: Gtk.ToolItem.get_text_size_group
#COMMENT: a #GtkSizeGroup
#NAME: new
#PARENT: Gtk.AspectFrame
#COMMENT: Create a new #GtkAspectFrame.
#NAME: length
#PARENT: Gtk.ClipboardRichTextReceivedFunc.none
#COMMENT: Length of the text.
#NAME: set_tooltip_text
#PARENT: Gtk.StatusIcon
#COMMENT: Sets @text as the contents of the tooltip.

This function will take care of setting #GtkStatusIcon:has-tooltip to
%TRUE and of the default handler for the #GtkStatusIcon::query-tooltip
signal.

See also the #GtkStatusIcon:tooltip-text property and
gtk_tooltip_set_text().
#NAME: default_widget
#PARENT: Gtk.Window.set_default.none
#COMMENT: widget to be the default, or %NULL
    to unset the default widget for the toplevel
#NAME: size
#PARENT: Gtk.icon_size_lookup.gboolean
#COMMENT: an icon size
#NAME: insert_range_interactive
#PARENT: Gtk.TextBuffer
#COMMENT: Same as gtk_text_buffer_insert_range(), but does nothing if the
insertion point isn’t editable. The @default_editable parameter
indicates whether the text is editable at @iter if no tags
enclosing @iter affect editability. Typically the result of
gtk_text_view_get_editable() is appropriate here.
#NAME: ltr
#PARENT: Gtk.TextDirection
#COMMENT: Left to right text direction.
#NAME: get_placeholder_text
#PARENT: Gtk.Entry.get_placeholder_text
#COMMENT: a pointer to the placeholder text as a string. This string points to internally allocated
storage in the widget and must not be freed, modified or stored.
#NAME: label
#PARENT: Gtk.Label.get_lines.gint
#COMMENT: a #GtkLabel
#NAME: selection_data
#PARENT: Gtk.SelectionData.targets_include_rich_text.gboolean
#COMMENT: a #GtkSelectionData object
#NAME: text
#PARENT: Gtk.TextBuffer.set_text.none
#COMMENT: UTF-8 text to insert
#NAME: text_view
#PARENT: Gtk.TextView.set_input_hints.none
#COMMENT: a #GtkTextView
#NAME: set_has_user_ref_count
#PARENT: Gtk.Window
#COMMENT: Tells GTK+ whether to drop its extra reference to the window
when gtk_widget_destroy() is called.

This function is only exported for the benefit of language
bindings which may need to keep the window alive until their
wrapper object is garbage collected. There is no justification
for ever calling this function in an application.
#NAME: accel_group
#PARENT: Gtk.AccelGroup.connect.none
#COMMENT: the accelerator group to install an accelerator in
#NAME: widget
#PARENT: Gtk.IconSet.render_icon.GdkPixbuf.Pixbuf
#COMMENT: widget that will display the icon, or %NULL.
         The only use that is typically made of this
         is to determine the appropriate #GdkScreen.
#NAME: bar
#PARENT: Gtk.HeaderBar.set_show_close_button.none
#COMMENT: a #GtkHeaderBar
#NAME: source
#PARENT: Gtk.IconSource.set_direction_wildcarded.none
#COMMENT: a #GtkIconSource
#NAME: is_active
#PARENT: Gtk.Switch.set_active.none
#COMMENT: %TRUE if @sw should be active, and %FALSE otherwise
#NAME: get_preview_file
#PARENT: Gtk.FileChooser.get_preview_file
#COMMENT: the #GFile for the file to preview,
    or %NULL if no file is selected. Free with g_object_unref().
#NAME: to_file
#PARENT: Gtk.PrintSettings
#COMMENT: This function saves the print settings from @settings to @file_name. If the
file could not be loaded then error is set to either a #GFileError or
#GKeyFileError.
#NAME: value
#PARENT: Gtk.Range.adjust-bounds.none
#COMMENT: the value before we clamp
#NAME: tag
#PARENT: Gtk.TextBufferClass.remove_tag.remove_tag.none
#COMMENT: a #GtkTextTag
#NAME: forward_word_end
#PARENT: Gtk.TextIter
#COMMENT: Moves forward to the next word end. (If @iter is currently on a
word end, moves forward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).
#NAME: check_menu_item
#PARENT: Gtk.CheckMenuItem.get_draw_as_radio.gboolean
#COMMENT: a #GtkCheckMenuItem
#NAME: event
#PARENT: Gtk.Widget.selection-clear-event.gboolean
#COMMENT: the #GdkEventSelection which triggered
  this signal.
#NAME: label
#PARENT: Gtk.Action.new.Action
#COMMENT: the label displayed in menu items and on buttons,
        or %NULL
#NAME: set_markup
#PARENT: Gtk.Label
#COMMENT: Parses @str which is marked up with the
[Pango text markup language][PangoMarkupFormat], setting the
label’s text and attribute list based on the parse results.

If the @str is external data, you may need to escape it with
g_markup_escape_text() or g_markup_printf_escaped():

|[<!-- language="C" -->
const char *format = "<span style=\"italic\">\%s</span>";
char *markup;

markup = g_markup_printf_escaped (format, str);
gtk_label_set_markup (GTK_LABEL (label), markup);
g_free (markup);
]|

This function will set the #GtkLabel:use-markup property to %TRUE as
a side effect.

If you set the label contents using the #GtkLabel:label property you
should also ensure that you set the #GtkLabel:use-markup property
accordingly.

See also: gtk_label_set_text()
#NAME: STOCK_PRINT_REPORT
#PARENT: Gtk
#COMMENT: The “Print Report” icon.
#NAME: get_popup_accessible
#PARENT: Gtk.ComboBox
#COMMENT: Gets the accessible object corresponding to the combo box’s popup.

This function is mostly intended for use by accessibility technologies;
applications should have little use for it.
#NAME: left-padding
#PARENT: Gtk.Alignment
#COMMENT: The padding to insert at the left of the widget.
#NAME: spacing
#PARENT: Gtk.Table.set_col_spacing.none
#COMMENT: number of pixels that the spacing should take up.
#NAME: save
#PARENT: Gtk.StyleContext
#COMMENT: Saves the @context state, so temporary modifications done through
gtk_style_context_add_class(), gtk_style_context_remove_class(),
gtk_style_context_set_state(), etc. can quickly be reverted
in one go through gtk_style_context_restore().

The matching call to gtk_style_context_restore() must be done
before GTK returns to the main loop.
#NAME: palette
#PARENT: Gtk.ToolPalette.set_group_position.none
#COMMENT: a #GtkToolPalette
#NAME: rebuild_menu
#PARENT: Gtk.ToolShell
#COMMENT: Calling this function signals the tool shell that the overflow menu item for
tool items have changed. If there is an overflow menu and if it is visible
when this function it called, the menu will be rebuilt.

Tool items must not call this function directly, but rely on
gtk_tool_item_rebuild_menu() instead.
#NAME: parent
#PARENT: Gtk.TreeModelIface.iter_children.iter_children.gboolean
#COMMENT: the #GtkTreeIter-struct, or %NULL
#NAME: extend_selection
#PARENT: Gtk.Entry.move-cursor.none
#COMMENT: %TRUE if the move should extend the selection
#NAME: rc_get_theme_dir
#PARENT: Gtk.rc_get_theme_dir
#COMMENT: The directory (must be freed with g_free()).
#NAME: editable
#PARENT: Gtk.Editable.set_position.none
#COMMENT: a #GtkEditable
#NAME: rect
#PARENT: Gtk.GestureMultiPress.set_area.none
#COMMENT: rectangle to receive coordinates on
#NAME: text-column
#PARENT: Gtk.EntryCompletion
#COMMENT: The column of the model containing the strings.
Note that the strings must be UTF-8.
#NAME: get_active
#PARENT: Gtk.ToggleAction
#COMMENT: Returns the checked state of the toggle action.
#NAME: cell
#PARENT: Gtk.CellRenderer.get_sensitive.gboolean
#COMMENT: A #GtkCellRenderer
#NAME: custom
#PARENT: Gtk.RecentSortType
#COMMENT: Sort the returned list using a custom sorting
  function passed using gtk_recent_chooser_set_sort_func().
#NAME: insert_with_valuesv
#PARENT: Gtk.TreeStore
#COMMENT: A variant of gtk_tree_store_insert_with_values() which takes
the columns and values as two arrays, instead of varargs.  This
function is mainly intended for language bindings.
#NAME: rc_get_theme_dir
#PARENT: Gtk
#COMMENT: Returns the standard directory in which themes should
be installed. (GTK+ does not actually use this directory
itself.)
#NAME: sequence
#PARENT: Gtk.Gesture.set_sequence_state.gboolean
#COMMENT: a #GdkEventSequence
#NAME: page
#PARENT: Gtk.Range.set_increments.none
#COMMENT: page size
#NAME: active
#PARENT: Gtk.StateType
#COMMENT: State of a currently active widget, such as a depressed button.
#NAME: set_max_length
#PARENT: Gtk.EntryBuffer
#COMMENT: Sets the maximum allowed length of the contents of the buffer. If
the current contents are longer than the given length, then they
will be truncated to fit.
#NAME: widget
#PARENT: Gtk.Widget.set_state_flags.none
#COMMENT: a #GtkWidget
#NAME: area
#PARENT: Gtk.CellAreaClass.copy_context.copy_context.CellAreaContext
#COMMENT: a #GtkCellArea
#NAME: key
#PARENT: Gtk.PrintSettings.set.none
#COMMENT: a key
#NAME: get_style_property
#PARENT: Gtk.StyleProviderIface.get_style_property.get_style_property
#COMMENT: %TRUE if the property was found and has a value, %FALSE otherwise
#NAME: accel_group
#PARENT: Gtk.Window.add_accel_group.none
#COMMENT: a #GtkAccelGroup
#NAME: text
#PARENT: Gtk.IMContextClass.get_surrounding.get_surrounding.gboolean
#COMMENT: location to store a UTF-8 encoded
       string of text holding context around the insertion point.
       If the function returns %TRUE, then you must free the result
       stored in this location with g_free().
#NAME: set_group_name
#PARENT: Gtk.Notebook
#COMMENT: Sets a group name for @notebook.

Notebooks with the same name will be able to exchange tabs
via drag and drop. A notebook with a %NULL group name will
not be able to exchange tabs with any other notebook.
#NAME: STYLE_CLASS_MARK
#PARENT: Gtk
#COMMENT: A CSS class defining marks in a widget, such as in scales.

Used in #GtkScale.
#NAME: modifiers
#PARENT: Gtk.BindingEntry
#COMMENT: key modifiers to match
#NAME: new
#PARENT: Gtk.CheckButton.new
#COMMENT: a #GtkWidget.
#NAME: path
#PARENT: Gtk.StyleProviderIface.get_icon_factory.get_icon_factory.IconFactory
#COMMENT: #GtkWidgetPath to query
#NAME: scale
#PARENT: Gtk.IconTheme.lookup_icon_for_scale.IconInfo
#COMMENT: the desired scale
#NAME: set_placeholder
#PARENT: Gtk.ListBox
#COMMENT: Sets the placeholder widget that is shown in the list when
it doesn't display any visible children.
#NAME: activate
#PARENT: Gtk.Widget
#COMMENT: For widgets that can be “activated” (buttons, menu items, etc.)
this function activates them. Activation is what happens when you
press Enter on a widget during key navigation. If @widget isn't
activatable, the function returns %FALSE.
#NAME: child
#PARENT: Gtk.Grid.attach.none
#COMMENT: the widget to add
#NAME: buffer
#PARENT: Gtk.TextBuffer.insert_with_tags_by_name.none
#COMMENT: a #GtkTextBuffer
#NAME: iter
#PARENT: Gtk.TreeRowReference.reordered.none
#COMMENT: the iter pointing to the parent of the reordered
#NAME: set_template_from_resource
#PARENT: Gtk.WidgetClass
#COMMENT: A convenience function to call gtk_widget_class_set_template().

Note that any class that installs templates must call gtk_widget_init_template()
in the widget’s instance initializer.
#NAME: new_iter
#PARENT: Gtk.CellRendererCombo.changed.none
#COMMENT: the new iter selected in the combo box
           (relative to the combo box model)
#NAME: paned
#PARENT: Gtk.Paned.get_child1.Widget
#COMMENT: a #GtkPaned widget
#NAME: button
#PARENT: Gtk.Menu.popup.none
#COMMENT: the mouse button which was pressed to initiate the event.
#NAME: unrealize
#PARENT: Gtk.Style
#COMMENT: Emitted when the aspects of the style specific to a particular visual
is being cleaned up. A connection to this signal can be useful
if a widget wants to cache objects as object data on #GtkStyle.
This signal provides a convenient place to free such cached objects.
#NAME: count
#PARENT: Gtk.TextIter.backward_visible_lines.gboolean
#COMMENT: number of lines to move backward
#NAME: path
#PARENT: Gtk.TreeRowReference.new_proxy.TreeRowReference
#COMMENT: a valid #GtkTreePath-struct to monitor
#NAME: popdown
#PARENT: Gtk.ComboBox
#COMMENT: The ::popdown signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to popdown the combo box list.

The default bindings for this signal are Alt+Up and Escape.
#NAME: get_application_info
#PARENT: Gtk.RecentInfo
#COMMENT: Gets the data regarding the application that has registered the resource
pointed by @info.

If the command line contains any escape characters defined inside the
storage specification, they will be expanded.
#NAME: style
#PARENT: Gtk.Style.set_background.none
#COMMENT: a #GtkStyle
#NAME: get_drop_group
#PARENT: Gtk.ToolPalette.get_drop_group
#COMMENT: the #GtkToolItemGroup at position or %NULL
    if there is no such group
#NAME: new
#PARENT: Gtk.Calendar
#COMMENT: Creates a new calendar, with the current date being selected.
#NAME: button
#PARENT: Gtk.Button.set_focus_on_click.none
#COMMENT: a #GtkButton
#NAME: get_use_popover
#PARENT: Gtk.MenuButton.get_use_popover
#COMMENT: %TRUE if using a #GtkPopover
#NAME: text_view
#PARENT: Gtk.TextView.forward_display_line.gboolean
#COMMENT: a #GtkTextView
#NAME: text_view
#PARENT: Gtk.TextView.get_window.Gdk.Window
#COMMENT: a #GtkTextView
#NAME: accelerator_get_label
#PARENT: Gtk
#COMMENT: Converts an accelerator keyval and modifier mask into a string
which can be used to represent the accelerator to the user.
#NAME: apply-attributes
#PARENT: Gtk.CellArea
#COMMENT: This signal is emitted whenever applying attributes to @area from @model
#NAME: set_current_uri
#PARENT: Gtk.RecentChooser.set_current_uri
#COMMENT: %TRUE if the URI was found.
#NAME: get_vadjustment
#PARENT: Gtk.TextView.get_vadjustment
#COMMENT: pointer to the vertical #GtkAdjustment
#NAME: action_group
#PARENT: Gtk.ActionGroup.set_sensitive.none
#COMMENT: the action group
#NAME: reference
#PARENT: Gtk.TreeRowReference.copy.TreeRowReference
#COMMENT: a #GtkTreeRowReference
#NAME: state
#PARENT: Gtk.StyleContext.state_is_running.gboolean
#COMMENT: a widget state
#NAME: show_numbers
#PARENT: Gtk.RecentChooserMenu.set_show_numbers.none
#COMMENT: whether to show numbers
#NAME: allocation
#PARENT: Gtk.Widget.set_allocation.none
#COMMENT: a pointer to a #GtkAllocation to copy from
#NAME: bottom_left
#PARENT: Gtk.CornerType
#COMMENT: Place the scrollbars on the top and right of the
 widget.
#NAME: parse_func
#PARENT: Gtk.StyleProperties.register_property.none
#COMMENT: parsing function to use, or %NULL
#NAME: test_init
#PARENT: Gtk
#COMMENT: This function is used to initialize a GTK+ test program.

It will in turn call g_test_init() and gtk_init() to properly
initialize the testing framework and graphical toolkit. It’ll
also set the program’s locale to “C” and prevent loading of rc
files and Gtk+ modules. This is done to make tets program
environments as deterministic as possible.

Like gtk_init() and g_test_init(), any known arguments will be
processed and stripped from @argc and @argv.
#NAME: state
#PARENT: Gtk.StyleProperties.set_valist.none
#COMMENT: state to set the values for
#NAME: size
#PARENT: Gtk.IconTheme.lookup_icon_for_scale.IconInfo
#COMMENT: desired icon size
#NAME: cell
#PARENT: Gtk.CellRendererClass.render.render.none
#COMMENT: a #GtkCellRenderer
#NAME: get_preferred_height_for_width
#PARENT: Gtk.CellAreaContext
#COMMENT: Gets the accumulative preferred height for @width for all rows
which have been requested for the same said @width with this context.

After gtk_cell_area_context_reset() is called and/or before ever
requesting the size of a #GtkCellArea, the returned values are -1.
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_vscrollbar.Widget
#COMMENT: a #GtkScrolledWindow
#NAME: get_gicon
#PARENT: Gtk.Action
#COMMENT: Gets the gicon of @action.
#NAME: get_shadow_type
#PARENT: Gtk.Frame
#COMMENT: Retrieves the shadow type of the frame. See
gtk_frame_set_shadow_type().
#NAME: button
#PARENT: Gtk.GestureSingle
#COMMENT: Mouse button number to listen to, or 0 to listen for any button.
#NAME: artistic
#PARENT: Gtk.License
#COMMENT: The Artistic License, version 2.0
#NAME: backward_find_char
#PARENT: Gtk.TextIter.backward_find_char
#COMMENT: whether a match was found
#NAME: selection
#PARENT: Gtk.TreeSelection.select_range.none
#COMMENT: A #GtkTreeSelection.
#NAME: area
#PARENT: Gtk.GLArea.set_auto_render.none
#COMMENT: a #GtkGLArea
#NAME: iter
#PARENT: Gtk.TextIter.forward_chars.gboolean
#COMMENT: an iterator
#NAME: old_parent
#PARENT: Gtk.Widget.parent-set.none
#COMMENT: the previous parent, or %NULL if the widget
  just got its initial parent.
#NAME: get_expanded
#PARENT: Gtk.Expander
#COMMENT: Queries a #GtkExpander and returns its current state. Returns %TRUE
if the child widget is revealed.

See gtk_expander_set_expanded().
#NAME: get_activates_default
#PARENT: Gtk.Entry
#COMMENT: Retrieves the value set by gtk_entry_set_activates_default().
#NAME: Dialog
#PARENT: Gtk
#COMMENT: Dialog boxes are a convenient way to prompt the user for a small amount
of input, e.g. to display a message, ask a question, or anything else
that does not require extensive effort on the user’s part.

GTK+ treats a dialog as a window split vertically. The top section is a
#GtkVBox, and is where widgets such as a #GtkLabel or a #GtkEntry should
be packed. The bottom area is known as the
“action area”. This is generally used for
packing buttons into the dialog which may perform functions such as
cancel, ok, or apply.

#GtkDialog boxes are created with a call to gtk_dialog_new() or
gtk_dialog_new_with_buttons(). gtk_dialog_new_with_buttons() is
recommended; it allows you to set the dialog title, some convenient
flags, and add simple buttons.

If “dialog” is a newly created dialog, the two primary areas of the
window can be accessed through gtk_dialog_get_content_area() and
gtk_dialog_get_action_area(), as can be seen from the example below.

A “modal” dialog (that is, one which freezes the rest of the application
from user input), can be created by calling gtk_window_set_modal() on the
dialog. Use the GTK_WINDOW() macro to cast the widget returned from
gtk_dialog_new() into a #GtkWindow. When using gtk_dialog_new_with_buttons()
you can also pass the #GTK_DIALOG_MODAL flag to make a dialog modal.

If you add buttons to #GtkDialog using gtk_dialog_new_with_buttons(),
gtk_dialog_add_button(), gtk_dialog_add_buttons(), or
gtk_dialog_add_action_widget(), clicking the button will emit a signal
called #GtkDialog::response with a response ID that you specified. GTK+
will never assign a meaning to positive response IDs; these are entirely
user-defined. But for convenience, you can use the response IDs in the
#GtkResponseType enumeration (these all have values less than zero). If
a dialog receives a delete event, the #GtkDialog::response signal will
be emitted with a response ID of #GTK_RESPONSE_DELETE_EVENT.

If you want to block waiting for a dialog to return before returning
control flow to your code, you can call gtk_dialog_run(). This function
enters a recursive main loop and waits for the user to respond to the
dialog, returning the response ID corresponding to the button the user
clicked.

For the simple dialog in the following example, in reality you’d probably
use #GtkMessageDialog to save yourself some effort. But you’d need to
create the dialog contents manually if you had more than a simple message
in the dialog.

An example for simple GtkDialog usage:
|[<!-- language="C" -->
// Function to open a dialog box with a message
void
quick_message (GtkWindow *parent, gchar *message)
{
 GtkWidget *dialog, *label, *content_area;
 GtkDialogFlags flags;

 // Create the widgets
 flags = GTK_DIALOG_DESTROY_WITH_PARENT;
 dialog = gtk_dialog_new_with_buttons ("Message",
                                       parent,
                                       flags,
                                       _("_OK"),
                                       GTK_RESPONSE_NONE,
                                       NULL);
 content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
 label = gtk_label_new (message);

 // Ensure that the dialog box is destroyed when the user responds

 g_signal_connect_swapped (dialog,
                           "response",
                           G_CALLBACK (gtk_widget_destroy),
                           dialog);

 // Add the label, and show everything we’ve added

 gtk_container_add (GTK_CONTAINER (content_area), label);
 gtk_widget_show_all (dialog);
}
]|

# GtkDialog as GtkBuildable

The GtkDialog implementation of the #GtkBuildable interface exposes the
@vbox and @action_area as internal children with the names “vbox” and
“action_area”.

GtkDialog supports a custom <action-widgets> element, which can contain
multiple <action-widget> elements. The “response” attribute specifies a
numeric response, and the content of the element is the id of widget
(which should be a child of the dialogs @action_area). To mark a response
as default, set the “default“ attribute of the <action-widget> element
to true.

GtkDialog supports adding action widgets by specifying “action“ as
the “type“ attribute of a <child> element. The widget will be added
either to the action area or the headerbar of the dialog, depending
on the “use-header-bar“ property. The response id has to be associated
with the action widget using the <action-widgets> element.

An example of a #GtkDialog UI definition fragment:
|[
<object class="GtkDialog" id="dialog1">
  <child type="action">
    <object class="GtkButton" id="button_cancel"/>
  </child>
  <child type="action">
    <object class="GtkButton" id="button_ok">
      <property name="can-default">True</property>
    </object>
  </child>
  <action-widgets>
    <action-widget response="cancel">button_cancel</action-widget>
    <action-widget response="ok" default="true">button_ok</action-widget>
  </action-widgets>
</object>
]|
#NAME: type
#PARENT: Gtk.Buildable.add_child.none
#COMMENT: kind of child or %NULL
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_visible_horizontal.gboolean
#COMMENT: a #GtkToolItem
#NAME: tree_view
#PARENT: Gtk.TreeView.get_search_entry.Entry
#COMMENT: A #GtkTreeView
#NAME: ensure_update
#PARENT: Gtk.UIManager
#COMMENT: Makes sure that all pending updates to the UI have been completed.

This may occasionally be necessary, since #GtkUIManager updates the
UI in an idle function. A typical example where this function is
useful is to enforce that the menubar and toolbar have been added to
the main window before showing it:
|[<!-- language="C" -->
gtk_container_add (GTK_CONTAINER (window), vbox);
g_signal_connect (merge, "add-widget",
                  G_CALLBACK (add_widget), vbox);
gtk_ui_manager_add_ui_from_file (merge, "my-menus");
gtk_ui_manager_add_ui_from_file (merge, "my-toolbars");
gtk_ui_manager_ensure_update (merge);
gtk_widget_show (window);
]|
#NAME: image
#PARENT: Gtk.Image.set_from_pixbuf.none
#COMMENT: a #GtkImage
#NAME: last_application
#PARENT: Gtk.RecentInfo
#COMMENT: Gets the name of the last application that have registered the
recently used resource represented by @info.
#NAME: gtk-error-bell
#PARENT: Gtk.Settings
#COMMENT: When %TRUE, keyboard navigation and other input-related errors
will cause a beep. Since the error bell is implemented using
gdk_window_beep(), the windowing system may offer ways to
configure the error bell in many ways, such as flashing the
window or similar visual effects.
#NAME: gtk-tooltip-timeout
#PARENT: Gtk.Settings
#COMMENT: Time, in milliseconds, after which a tooltip could appear if the
cursor is hovering on top of a widget.
#NAME: get_monospace
#PARENT: Gtk.TextView
#COMMENT: Gets the value of the #GtkTextView:monospace property.
#NAME: area
#PARENT: Gtk.CellArea.get_preferred_height.none
#COMMENT: a #GtkCellArea
#NAME: new_with_context
#PARENT: Gtk.CellView
#COMMENT: Creates a new #GtkCellView widget with a specific #GtkCellArea
to layout cells and a specific #GtkCellAreaContext.

Specifying the same context for a handfull of cells lets
the underlying area synchronize the geometry for those cells,
in this way alignments with cellviews for other rows are
possible.
#NAME: get_shadow_type
#PARENT: Gtk.HandleBox.get_shadow_type
#COMMENT: the type of shadow currently drawn around the handle box.
#NAME: menu_item
#PARENT: Gtk.MenuItem.set_right_justified.none
#COMMENT: a #GtkMenuItem.
#NAME: key_snooper_install
#PARENT: Gtk.key_snooper_install
#COMMENT: a unique id for this key snooper for use with
   gtk_key_snooper_remove().
#NAME: parse_requisition
#PARENT: Gtk.RcProperty
#COMMENT: A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a
requisition in the form
`"{ width, height }"` for integers %width and %height.
#NAME: 
#PARENT: Gtk.Container.add_with_properties.none...
#COMMENT: a %NULL-terminated list of property names and values, starting
    with @first_prop_name
#NAME: im_context_filter_keypress
#PARENT: Gtk.Entry.im_context_filter_keypress
#COMMENT: %TRUE if the input method handled the key event.
#NAME: motion-notify-event
#PARENT: Gtk.Widget
#COMMENT: The ::motion-notify-event signal is emitted when the pointer moves
over the widget's #GdkWindow.

To receive this signal, the #GdkWindow associated to the widget
needs to enable the #GDK_POINTER_MOTION_MASK mask.

This signal will be sent to the grab widget if there is one.
#NAME: set_visible_horizontal
#PARENT: Gtk.Action
#COMMENT: Sets whether @action is visible when horizontal
#NAME: chooser
#PARENT: Gtk.RecentChooserIface.set_current_uri.set_current_uri.gboolean
#COMMENT: a #GtkRecentChooser
#NAME: drag_set_icon_surface
#PARENT: Gtk
#COMMENT: Sets @surface as the icon for a given drag. GTK+ retains
references for the arguments, and will release them when
they are no longer needed.

To position the surface relative to the mouse, use
cairo_surface_set_device_offset() on @surface. The mouse
cursor will be positioned at the (0,0) coordinate of the
surface.
#NAME: set_max_width_chars
#PARENT: Gtk.Label
#COMMENT: Sets the desired maximum width in characters of @label to @n_chars.
#NAME: top
#PARENT: Gtk.TextWindowType
#COMMENT: Top border window.
#NAME: columns
#PARENT: Gtk.TreeStore.insert_with_valuesv.none
#COMMENT: an array of column numbers
#NAME: get_current_sequence
#PARENT: Gtk.GestureSingle.get_current_sequence
#COMMENT: the current sequence
#NAME: short-label
#PARENT: Gtk.Action
#COMMENT: A shorter label that may be used on toolbar buttons.

This is an appearance property and thus only applies if
#GtkActivatable:use-action-appearance is %TRUE.
#NAME: value
#PARENT: Gtk.LevelBar
#COMMENT: The #GtkLevelBar:value property determines the currently
filled value of the level bar.
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_deserialize_formats.Gdk.Atom
#COMMENT: a #GtkTextBuffer
#NAME: is_composited
#PARENT: Gtk.Widget
#COMMENT: Whether @widget can rely on having its alpha channel
drawn correctly. On X11 this function returns whether a
compositing manager is running for @widget’s screen.

Please note that the semantics of this call will change
in the future if used on a widget that has a composited
window in its hierarchy (as set by gdk_window_set_composited()).
#NAME: sensitive
#PARENT: Gtk.ActionGroup
#COMMENT: Whether the action group is enabled.
#NAME: get_menu
#PARENT: Gtk.MenuToolButton
#COMMENT: Gets the #GtkMenu associated with #GtkMenuToolButton.
#NAME: get_resize_mode
#PARENT: Gtk.Container
#COMMENT: Returns the resize mode for the container. See
gtk_container_set_resize_mode ().
#NAME: set_double
#PARENT: Gtk.PrintSettings
#COMMENT: Sets @key to a double value.
#NAME: table
#PARENT: Gtk.Table.set_row_spacings.none
#COMMENT: a #GtkTable.
#NAME: underline-rgba-set
#PARENT: Gtk.TextTag
#COMMENT: If the #GtkTextTag:underline-rgba property has been set.
#NAME: large_toolbar
#PARENT: Gtk.IconSize
#COMMENT: Size appropriate for large toolbars (24px)
#NAME: artists
#PARENT: Gtk.AboutDialog.set_artists.none
#COMMENT: a %NULL-terminated array of strings
#NAME: high
#PARENT: Gtk.PrintQuality
#COMMENT: High quality.
#NAME: get_modifier_mask
#PARENT: Gtk.Widget
#COMMENT: Returns the modifier mask the @widget’s windowing system backend
uses for a particular purpose.

See gdk_keymap_get_modifier_mask().
#NAME: widget_class
#PARENT: Gtk.WidgetClass.set_template_from_resource.none
#COMMENT: A #GtkWidgetClass
#NAME: get_mnemonics_visible
#PARENT: Gtk.Window
#COMMENT: Gets the value of the #GtkWindow:mnemonics-visible property.
#NAME: query
#PARENT: Gtk.AccelGroup
#COMMENT: Queries an accelerator group for all entries matching @accel_key
and @accel_mods.
#NAME: open_submenu
#PARENT: Gtk.PopoverMenu
#COMMENT: Opens a submenu of the @popover. The @name
must be one of the names given to the submenus
of @popover with #GtkPopoverMenu:submenu, or
"main" to switch back to the main menu.

#GtkModelButton will open submenus automatically
when the #GtkModelButton:menu-name property is set,
so this function is only needed when you are using
other kinds of widgets to initiate menu changes.
#NAME: get_search_equal_func
#PARENT: Gtk.TreeView
#COMMENT: Returns the compare function currently in use.
#NAME: data
#PARENT: Gtk.TreeViewColumnDropFunc.gboolean
#COMMENT: user data
#NAME: self
#PARENT: Gtk.LevelBar.add_offset_value.none
#COMMENT: a #GtkLevelBar
#NAME: render_icon
#PARENT: Gtk.StyleClass.render_icon.render_icon
#COMMENT: a newly-created #GdkPixbuf
    containing the rendered icon
#NAME: model
#PARENT: Gtk.ComboBox
#COMMENT: The model from which the combo box takes the values shown
in the list.
#NAME: get_offset
#PARENT: Gtk.TextIter
#COMMENT: Returns the character offset of an iterator.
Each character in a #GtkTextBuffer has an offset,
starting with 0 for the first character in the buffer.
Use gtk_text_buffer_get_iter_at_offset() to convert an
offset back into an iterator.
#NAME: info_bar
#PARENT: Gtk.InfoBar.set_default_response.none
#COMMENT: a #GtkInfoBar
#NAME: n_chars
#PARENT: Gtk.Label.set_max_width_chars.none
#COMMENT: the new desired maximum width, in characters.
#NAME: src
#PARENT: Gtk.TextAttributes.copy_values.none
#COMMENT: a #GtkTextAttributes
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_set_object_type.none
#COMMENT: position to modify, -1 for the path head
#NAME: builder
#PARENT: Gtk.Builder.add_objects_from_resource.guint
#COMMENT: a #GtkBuilder
#NAME: inserted-text
#PARENT: Gtk.EntryBuffer
#COMMENT: This signal is emitted after text is inserted into the buffer.
#NAME: types
#PARENT: Gtk.ListStore.set_column_types.none
#COMMENT: An array length n of #GTypes
#NAME: backdrop
#PARENT: Gtk.StateFlags
#COMMENT: Widget is in a background toplevel window.
#NAME: entry
#PARENT: Gtk.Entry.get_icon_area.none
#COMMENT: A #GtkEntry
#NAME: tool_item
#PARENT: Gtk.Toolbar.set_drop_highlight_item.none
#COMMENT: a #GtkToolItem, or %NULL to turn of highlighting
#NAME: tooltip
#PARENT: Gtk.Tooltip.set_text.none
#COMMENT: a #GtkTooltip
#NAME: set_label_widget
#PARENT: Gtk.Frame
#COMMENT: Sets the label widget for the frame. This is the widget that
will appear embedded in the top edge of the frame as a
title.
#NAME: manager
#PARENT: Gtk.UIManager.get_action.Action
#COMMENT: a #GtkUIManager
#NAME: builder
#PARENT: Gtk.Builder.get_type_from_name.GType
#COMMENT: a #GtkBuilder
#NAME: FlowBoxFilterFunc
#PARENT: Gtk.FlowBoxFilterFunc
#COMMENT: %TRUE if the row should be visible, %FALSE otherwise
#NAME: get_media_type
#PARENT: Gtk.PrintSettings.get_media_type
#COMMENT: the media type
#NAME: enable-debugging
#PARENT: Gtk.Window
#COMMENT: The ::enable-debugging signal is a [keybinding signal][GtkBindingSignal]
which gets emitted when the user enables or disables interactive
debugging. When @toggle is %TRUE, interactive debugging is toggled
on or off, when it is %FALSE, the debugger will be pointed at the
widget under the pointer.

The default bindings for this signal are Ctrl-Shift-I
and Ctrl-Shift-D.
#NAME: fill
#PARENT: Gtk.Box.query_child_packing.none
#COMMENT: pointer to return location for fill child
    property
#NAME: area
#PARENT: Gtk.CellView.new_with_context.Widget
#COMMENT: the #GtkCellArea to layout cells
#NAME: event
#PARENT: Gtk.get_event_widget.Widget
#COMMENT: a #GdkEvent
#NAME: get_visible
#PARENT: Gtk.ActionGroup
#COMMENT: Returns %TRUE if the group is visible.  The constituent actions
can only be logically visible (see gtk_action_is_visible()) if
they are visible (see gtk_action_get_visible()) and their group
is visible.
#NAME: accel_mods
#PARENT: Gtk.AccelGroup.query.AccelGroupEntry
#COMMENT: modifier combination of the accelerator
#NAME: use-header-bar
#PARENT: Gtk.Assistant
#COMMENT: %TRUE if the assistant uses a #GtkHeaderBar for action buttons
instead of the action-area.

For technical reasons, this property is declared as an integer
property, but you should only set it to %TRUE or %FALSE.
#NAME: n_colors
#PARENT: Gtk.ColorSelection.palette_to_string.utf8
#COMMENT: length of the array
#NAME: get_title
#PARENT: Gtk.Menu
#COMMENT: Returns the title of the menu. See gtk_menu_set_title().
#NAME: dest_file
#PARENT: Gtk.PlacesSidebar.drag-perform-drop.none
#COMMENT: Destination #GFile.
#NAME: register_buffer
#PARENT: Gtk.TextBuffer.deserialize.gboolean
#COMMENT: the #GtkTextBuffer @format is registered with
#NAME: get_attributes
#PARENT: Gtk.TextIter
#COMMENT: Computes the effect of any tags applied to this spot in the
text. The @values parameter should be initialized to the default
settings you wish to use if no tags are in effect. You’d typically
obtain the defaults from gtk_text_view_get_default_attributes().

gtk_text_iter_get_attributes() will modify @values, applying the
effects of any tags present at @iter. If any tags affected @values,
the function returns %TRUE.
#NAME: height
#PARENT: Gtk.icon_size_register.gint
#COMMENT: the icon height
#NAME: state-set
#PARENT: Gtk.Switch.state-set
#COMMENT: %TRUE to stop the signal emission
#NAME: get_line_offset
#PARENT: Gtk.TextIter
#COMMENT: Returns the character offset of the iterator,
counting from the start of a newline-terminated line.
The first character on the line has offset 0.
#NAME: widget
#PARENT: Gtk.Widget.size_request.none
#COMMENT: a #GtkWidget
#NAME: set_alternative_button_order
#PARENT: Gtk.Dialog
#COMMENT: Sets an alternative button order. If the
#GtkSettings:gtk-alternative-button-order setting is set to %TRUE,
the dialog buttons are reordered according to the order of the
response ids passed to this function.

By default, GTK+ dialogs use the button order advocated by the
[GNOME Human Interface Guidelines](http://library.gnome.org/devel/hig-book/stable/)
with the affirmative button at the far
right, and the cancel button left of it. But the builtin GTK+ dialogs
and #GtkMessageDialogs do provide an alternative button order,
which is more suitable on some platforms, e.g. Windows.

Use this function after adding all the buttons to your dialog, as the
following example shows:

|[<!-- language="C" -->
cancel_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
                                       _("_Cancel"),
                                       GTK_RESPONSE_CANCEL);

ok_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
                                   _("_OK"),
                                   GTK_RESPONSE_OK);

gtk_widget_grab_default (ok_button);

help_button = gtk_dialog_add_button (GTK_DIALOG (dialog),
                                     _("_Help"),
                                     GTK_RESPONSE_HELP);

gtk_dialog_set_alternative_button_order (GTK_DIALOG (dialog),
                                         GTK_RESPONSE_OK,
                                         GTK_RESPONSE_CANCEL,
                                         GTK_RESPONSE_HELP,
                                         -1);
]|
#NAME: get_yalign
#PARENT: Gtk.Label.get_yalign
#COMMENT: the yalign property
#NAME: over_up_down
#PARENT: Gtk.StackTransitionType
#COMMENT: Cover the old page sliding up or uncover the new page sliding down, according to order. Since: 3.12
#NAME: stock_id
#PARENT: Gtk.Image.get_stock.none
#COMMENT: place to store a
    stock icon name, or %NULL
#NAME: default_source
#PARENT: Gtk.PrintSettings.set_default_source.none
#COMMENT: the default source
#NAME: get_hadjustment
#PARENT: Gtk.Viewport
#COMMENT: Returns the horizontal adjustment of the viewport.
#NAME: toggle-cursor-child
#PARENT: Gtk.FlowBox
#COMMENT: The ::toggle-cursor-child signal is a
[keybinding signal][GtkBindingSignal]
which toggles the selection of the child that has the focus.

The default binding for this signal is Ctrl-Space.
#NAME: child
#PARENT: Gtk.InfoBar.add_action_widget.none
#COMMENT: an activatable widget
#NAME: lrbt
#PARENT: Gtk.NumberUpLayout
#COMMENT: ![](layout-lrbt.png)
#NAME: bg_pixmap_name
#PARENT: Gtk.RcStyle
#COMMENT: Pixmap name
#NAME: new
#PARENT: Gtk.StackSwitcher.new
#COMMENT: a new #GtkStackSwitcher.
#NAME: TreeModelFilterVisibleFunc
#PARENT: Gtk
#COMMENT: A function which decides whether the row indicated by @iter is visible.
#NAME: find_cell_property
#PARENT: Gtk.CellAreaClass
#COMMENT: Finds a cell property of a cell area class by name.
#NAME: digits
#PARENT: Gtk.InputPurpose
#COMMENT: Allow only digits
#NAME: get_open_flags
#PARENT: Gtk.PlacesSidebar
#COMMENT: Gets the open flags.
#NAME: scale
#PARENT: Gtk.Scale.get_has_origin.gboolean
#COMMENT: a #GtkScale
#NAME: x
#PARENT: Gtk.Toolbar.get_drop_index.gint
#COMMENT: x coordinate of a point on the toolbar
#NAME: path
#PARENT: Gtk.TreePath.get_indices_with_depth.gint
#COMMENT: a #GtkTreePath-struct
#NAME: style
#PARENT: Gtk.Widget.modify_style.none
#COMMENT: the #GtkRcStyle-struct holding the style modifications
#NAME: set_double_buffered
#PARENT: Gtk.Widget
#COMMENT: Widgets are double buffered by default; you can use this function
to turn off the buffering. “Double buffered” simply means that
gdk_window_begin_paint_region() and gdk_window_end_paint() are called
automatically around expose events sent to the
widget. gdk_window_begin_paint_region() diverts all drawing to a widget's
window to an offscreen buffer, and gdk_window_end_paint() draws the
buffer to the screen. The result is that users see the window
update in one smooth step, and don’t see individual graphics
primitives being rendered.

In very simple terms, double buffered widgets don’t flicker,
so you would only use this function to turn off double buffering
if you had special needs and really knew what you were doing.

Note: if you turn off double-buffering, you have to handle
expose events, since even the clearing to the background color or
pixmap will not happen automatically (as it is done in
gdk_window_begin_paint_region()).

Since 3.10 this function only works for widgets with native
windows.
#NAME: y
#PARENT: Gtk.Toolbar.get_drop_index.gint
#COMMENT: y coordinate of a point on the toolbar
#NAME: first_response_id
#PARENT: Gtk.Dialog.set_alternative_button_order.none
#COMMENT: a response id used by one @dialog’s buttons
#NAME: get_pixbuf
#PARENT: Gtk.IconSource
#COMMENT: Retrieves the source pixbuf, or %NULL if none is set.
In addition, if a filename source is in use, this
function in some cases will return the pixbuf from
loaded from the filename. This is, for example, true
for the GtkIconSource passed to the #GtkStyle render_icon()
virtual function. The reference count on the pixbuf is
not incremented.
#NAME: insert_child_anchor
#PARENT: Gtk.TextBuffer
#COMMENT: Inserts a child widget anchor into the text buffer at @iter. The
anchor will be counted as one character in character counts, and
when obtaining the buffer contents as a string, will be represented
by the Unicode “object replacement character” 0xFFFC. Note that the
“slice” variants for obtaining portions of the buffer as a string
include this character for child anchors, but the “text” variants do
not. E.g. see gtk_text_buffer_get_slice() and
gtk_text_buffer_get_text(). Consider
gtk_text_buffer_create_child_anchor() as a more convenient
alternative to this function. The buffer will add a reference to
the anchor, so you can unref it after insertion.
#NAME: name
#PARENT: Gtk.RadioAction.new.RadioAction
#COMMENT: A unique name for the action
#NAME: vadjustment
#PARENT: Gtk.Scrollable
#COMMENT: Verical #GtkAdjustment of the scrollable widget. This adjustment is shared
between the scrollable widget and its parent.
#NAME: text_view
#PARENT: Gtk.TextView.get_border_window_size.gint
#COMMENT: a #GtkTextView
#NAME: parse_border
#PARENT: Gtk.RcProperty.parse_border
#COMMENT: %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GtkBorder.
#NAME: path
#PARENT: Gtk.TreeView.expand_row.gboolean
#COMMENT: path to a row
#NAME: child-notify
#PARENT: Gtk.Widget
#COMMENT: The ::child-notify signal is emitted for each
[child property][child-properties]  that has
changed on an object. The signal's detail holds the property name.
#NAME: query-tooltip
#PARENT: Gtk.Widget
#COMMENT: Emitted when #GtkWidget:has-tooltip is %TRUE and the hover timeout
has expired with the cursor hovering "above" @widget; or emitted when @widget got
focus in keyboard mode.

Using the given coordinates, the signal handler should determine
whether a tooltip should be shown for @widget. If this is the case
%TRUE should be returned, %FALSE otherwise.  Note that if
@keyboard_mode is %TRUE, the values of @x and @y are undefined and
should not be used.

The signal handler is free to manipulate @tooltip with the therefore
destined function calls.
#NAME: chooser
#PARENT: Gtk.FileChooser.list_filters.FileFilter
#COMMENT: a #GtkFileChooser
#NAME: parent
#PARENT: Gtk.TreeModelIface.iter_nth_child.iter_nth_child.gboolean
#COMMENT: the #GtkTreeIter-struct to get the child from, or %NULL.
#NAME: set_heading
#PARENT: Gtk.AppChooserDialog
#COMMENT: Sets the text to display at the top of the dialog.
If the heading is not set, the dialog displays a default text.
#NAME: get_show_default
#PARENT: Gtk.AppChooserWidget
#COMMENT: Returns the current value of the #GtkAppChooserWidget:show-default
property.
#NAME: popup
#PARENT: Gtk.MenuButton
#COMMENT: The #GtkMenu that will be popped up when the button is clicked.
#NAME: drag_dest_get_target_list
#PARENT: Gtk.Widget
#COMMENT: Returns the list of targets this widget can accept from
drag-and-drop.
#NAME: unselect_child
#PARENT: Gtk.FlowBox
#COMMENT: Unselects a single child of @box, if the selection
mode allows it.
#NAME: child
#PARENT: Gtk.Paned.add1.none
#COMMENT: the child to add
#NAME: set_min_content_width
#PARENT: Gtk.ScrolledWindow
#COMMENT: Sets the minimum width that @scrolled_window should keep visible.
Note that this can and (usually will) be smaller than the minimum
size of the content.
#NAME: get_draw_as_radio
#PARENT: Gtk.ToggleAction.get_draw_as_radio
#COMMENT: whether the action should have proxies like a radio action.
#NAME: iter_is_selected
#PARENT: Gtk.TreeSelection
#COMMENT: Returns %TRUE if the row at @iter is currently selected.
#NAME: rgba
#PARENT: Gtk.ColorButton.get_rgba.none
#COMMENT: a #GdkRGBA to fill in with the current color
#NAME: show-close-button
#PARENT: Gtk.InfoBar
#COMMENT: Whether to include a standard close button.
#NAME: get_title
#PARENT: Gtk.StatusIcon
#COMMENT: Gets the title of this tray icon. See gtk_status_icon_set_title().
#NAME: height
#PARENT: Gtk.Widget.set_size_request.none
#COMMENT: height @widget should request, or -1 to unset
#NAME: get_hover_selection
#PARENT: Gtk.TreeView
#COMMENT: Returns whether hover selection mode is turned on for @tree_view.
#NAME: assistant
#PARENT: Gtk.Assistant.commit.none
#COMMENT: a #GtkAssistant
#NAME: icon_names
#PARENT: Gtk.IconTheme.choose_icon_for_scale.IconInfo
#COMMENT: %NULL-terminated
    array of icon names to lookup
#NAME: set_location
#PARENT: Gtk.PlacesSidebar
#COMMENT: Sets the location that is being shown in the widgets surrounding the
@sidebar, for example, in a folder view in a file manager.  In turn, the
@sidebar will highlight that location if it is being shown in the list of
places, or it will unhighlight everything if the @location is not among the
places in the list.
#NAME: title
#PARENT: Gtk.Stack.add_titled.none
#COMMENT: a human-readable title for @child
#NAME: child_model
#PARENT: Gtk.TreeModel.sort_new_with_model.TreeModel
#COMMENT: A #GtkTreeModel
#NAME: fontchooser
#PARENT: Gtk.FontChooserIface.get_font_family.get_font_family.Pango.FontFamily
#COMMENT: a #GtkFontChooser
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_active.none
#COMMENT: A #GtkComboBox
#NAME: is_selected
#PARENT: Gtk.PrintOperationPreview.is_selected
#COMMENT: %TRUE if the page has been selected for printing
#NAME: TextWindowType
#PARENT: Gtk
#COMMENT: Used to reference the parts of #GtkTextView.
#NAME: context
#PARENT: Gtk.CellArea.get_preferred_height.none
#COMMENT: the #GtkCellAreaContext to perform this request with
#NAME: STOCK_PRINT_ERROR
#PARENT: Gtk
#COMMENT: The “Print Error” icon.
#NAME: get_preview_uri
#PARENT: Gtk.FileChooser
#COMMENT: Gets the URI that should be previewed in a custom preview
widget. See gtk_file_chooser_set_preview_widget().
#NAME: side
#PARENT: Gtk.Grid.insert_next_to.none
#COMMENT: the side of @sibling that @child is positioned next to
#NAME: box
#PARENT: Gtk.Box.get_homogeneous.gboolean
#COMMENT: a #GtkBox
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.iter_has_child.iter_has_child.gboolean
#COMMENT: a #GtkTreeModel
#NAME: x
#PARENT: Gtk.render_focus.none
#COMMENT: X origin of the rectangle
#NAME: set_baseline_row
#PARENT: Gtk.Grid.set_baseline_row
#COMMENT: the row index defining the global baseline
#NAME: border
#PARENT: Gtk.Scrollable.get_border.gboolean
#COMMENT: return location for the results
#NAME: state-flags-changed
#PARENT: Gtk.Widget
#COMMENT: The ::state-flags-changed signal is emitted when the widget state
changes, see gtk_widget_get_state_flags().
#NAME: y
#PARENT: Gtk.render_focus.none
#COMMENT: Y origin of the rectangle
#NAME: editable
#PARENT: Gtk.CellArea.remove-editable.none
#COMMENT: the #GtkCellEditable widget to remove
#NAME: event
#PARENT: Gtk.Clipboard.owner-change.none
#COMMENT: the @GdkEventOwnerChange event
#NAME: area
#PARENT: Gtk.GLArea.get_error.GLib.Error
#COMMENT: a #GtkGLArea
#NAME: get_text_alignment
#PARENT: Gtk.ToolItem
#COMMENT: Returns the text alignment used for @tool_item. Custom subclasses of
#GtkToolItem should call this function to find out how text should
be aligned.
#NAME: toolbar
#PARENT: Gtk.Toolbar.insert.none
#COMMENT: a #GtkToolbar
#NAME: iter_parent
#PARENT: Gtk.TreeModel
#COMMENT: Sets @iter to be the parent of @child.

If @child is at the toplevel, and doesn’t have a parent, then
@iter is set to an invalid iterator and %FALSE is returned.
@child will remain a valid node after this function has been
called.
#NAME: event
#PARENT: Gtk.Widget.damage-event.gboolean
#COMMENT: the #GdkEventExpose event
#NAME: get_wrap_width
#PARENT: Gtk.ComboBox
#COMMENT: Returns the wrap width which is used to determine the number of columns
for the popup menu. If the wrap width is larger than 1, the combo box
is in table mode.
#NAME: get_minimum_increment
#PARENT: Gtk.Adjustment.get_minimum_increment
#COMMENT: the minimum increment of @adjustment
#NAME: label
#PARENT: Gtk.CheckButton.new_with_mnemonic.Widget
#COMMENT: The text of the button, with an underscore in front of the
  mnemonic character
#NAME: image
#PARENT: Gtk.Image.set_from_surface.none
#COMMENT: a #GtkImage
#NAME: TextBufferDeserializeFunc
#PARENT: Gtk
#COMMENT: A function that is called to deserialize rich text that has been
serialized with gtk_text_buffer_serialize(), and insert it at @iter.
#NAME: drag_dest_set_proxy
#PARENT: Gtk.Widget
#COMMENT: Sets this widget as a proxy for drops to another window.
#NAME: set_with_data
#PARENT: Gtk.Clipboard
#COMMENT: Virtually sets the contents of the specified clipboard by providing
a list of supported formats for the clipboard data and a function
to call to get the actual data when it is requested.
#NAME: tree_model_sort
#PARENT: Gtk.TreeModelSort.iter_is_valid.gboolean
#COMMENT: A #GtkTreeModelSort.
#NAME: monitor_num
#PARENT: Gtk.Menu.set_monitor.none
#COMMENT: the number of the monitor on which the menu should
   be popped up
#NAME: unset_style
#PARENT: Gtk.ToolPalette
#COMMENT: Unsets a toolbar style set with gtk_tool_palette_set_style(),
so that user preferences will be used to determine the toolbar style.
#NAME: get_icon_list
#PARENT: Gtk.Window
#COMMENT: Retrieves the list of icons set by gtk_window_set_icon_list().
The list is copied, but the reference count on each
member won’t be incremented.
#NAME: get_version
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the version string.
#NAME: setting
#PARENT: Gtk.AppChooserWidget.set_show_other.none
#COMMENT: the new value for #GtkAppChooserWidget:show-other
#NAME: paned
#PARENT: Gtk.Paned.get_position.gint
#COMMENT: a #GtkPaned widget
#NAME: pressed
#PARENT: Gtk.GestureLongPress
#COMMENT: This signal is emitted whenever a press goes unmoved/unreleased longer than
what the GTK+ defaults tell.
#NAME: props
#PARENT: Gtk.StyleProperties.get_valist.none
#COMMENT: a #GtkStyleProperties
#NAME: forward_char
#PARENT: Gtk.TextIter.forward_char
#COMMENT: whether @iter moved and is dereferenceable
#NAME: grab_add
#PARENT: Gtk.Widget
#COMMENT: Makes @widget the current grabbed widget.

This means that interaction with other widgets in the same
application is blocked and mouse as well as keyboard events
are delivered to this widget.

If @widget is not sensitive, it is not set as the current
grabbed widget and this function does nothing.
#NAME: activate
#PARENT: Gtk.BindingSet.activate
#COMMENT: %TRUE if a binding was found and activated
#NAME: STYLE_CLASS_SPINBUTTON
#PARENT: Gtk
#COMMENT: A CSS class defining an spinbutton.

This is used in #GtkSpinButton.
#NAME: begin-user-action
#PARENT: Gtk.TextBuffer
#COMMENT: The ::begin-user-action signal is emitted at the beginning of a single
user-visible operation on a #GtkTextBuffer.

See also:
gtk_text_buffer_begin_user_action(),
gtk_text_buffer_insert_interactive(),
gtk_text_buffer_insert_range_interactive(),
gtk_text_buffer_delete_interactive(),
gtk_text_buffer_backspace(),
gtk_text_buffer_delete_selection().
#NAME: second
#PARENT: Gtk.TextIter.order.none
#COMMENT: another #GtkTextIter
#NAME: start
#PARENT: Gtk.TextIter.in_range.gboolean
#COMMENT: start of range
#NAME: iter
#PARENT: Gtk.CellArea.apply_attributes.none
#COMMENT: the #GtkTreeIter in @tree_model to apply values for
#NAME: cell_editable
#PARENT: Gtk.CellEditableIface.remove_widget.remove_widget.none
#COMMENT: A #GtkCellEditable
#NAME: box
#PARENT: Gtk.ListBox.prepend.none
#COMMENT: a #GtkListBox
#NAME: targets_include_rich_text
#PARENT: Gtk.SelectionData
#COMMENT: Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide rich text.
#NAME: iter
#PARENT: Gtk.TextIter.begins_tag.gboolean
#COMMENT: an iterator
#NAME: other
#PARENT: Gtk.CellRendererAccelMode
#COMMENT: Other accelerator mode
#NAME: row
#PARENT: Gtk.ListBoxRow.get_activatable.gboolean
#COMMENT: a #GtkListBoxRow
#NAME: get_indices
#PARENT: Gtk.TreePath
#COMMENT: Returns the current indices of @path.

This is an array of integers, each representing a node in a tree.
This value should not be freed.

The length of the array can be obtained with gtk_tree_path_get_depth().
#NAME: show-fallback
#PARENT: Gtk.AppChooserWidget
#COMMENT: The #GtkAppChooserWidget:show-fallback property determines whether
the app chooser should show a section for fallback applications.
If %FALSE, the fallback applications are listed among the other
applications.
#NAME: both_horiz
#PARENT: Gtk.ToolbarStyle
#COMMENT: Buttons display icons and text alongside each
 other, rather than vertically stacked
#NAME: clip
#PARENT: Gtk.Widget.set_clip.none
#COMMENT: a pointer to a #GtkAllocation to copy from
#NAME: area
#PARENT: Gtk.CellArea.get_preferred_height_for_width.none
#COMMENT: a #GtkCellArea
#NAME: track-visited-links
#PARENT: Gtk.Label
#COMMENT: Set this property to %TRUE to make the label track which links
have been visited. It will then apply the #GTK_STATE_FLAG_VISITED
when rendering this link, in addition to #GTK_STATE_FLAG_LINK.
#NAME: iter
#PARENT: Gtk.ListStore.insert.none
#COMMENT: An unset #GtkTreeIter to set to the new row
#NAME: filter
#PARENT: Gtk.FileChooser.add_filter.none
#COMMENT: a #GtkFileFilter
#NAME: new
#PARENT: Gtk.FontChooserDialog.new
#COMMENT: a new #GtkFontChooserDialog
#NAME: GestureSingle
#PARENT: Gtk
#COMMENT: #GtkGestureSingle is a subclass of #GtkGesture, optimized (although
not restricted) for dealing with mouse and single-touch gestures. Under
interaction, these gestures stick to the first interacting sequence, which
is accessible through gtk_gesture_single_get_current_sequence() while the
gesture is being interacted with.

By default gestures react to both %GDK_BUTTON_PRIMARY and touch
events, gtk_gesture_single_set_touch_only() can be used to change the
touch behavior. Callers may also specify a different mouse button number
to interact with through gtk_gesture_single_set_button(), or react to any
mouse button by setting 0. While the gesture is active, the button being
currently pressed can be known through gtk_gesture_single_get_current_button().
#NAME: get_width_chars
#PARENT: Gtk.FileChooserButton.get_width_chars
#COMMENT: an integer width (in characters) that the button will use to size itself.
#NAME: right_attach
#PARENT: Gtk.Table.attach_defaults.none
#COMMENT: The column number to attach the right side of the child widget to.
#NAME: cr
#PARENT: Gtk.draw_insertion_cursor.none
#COMMENT: cairo context to draw to
#NAME: get_attributes
#PARENT: Gtk.Entry
#COMMENT: Gets the attribute list that was set on the entry using
gtk_entry_set_attributes(), if any.
#NAME: get_area
#PARENT: Gtk.GestureMultiPress.get_area
#COMMENT: %TRUE if @rect was filled with the press area
#NAME: page_num
#PARENT: Gtk.Notebook.get_nth_page.Widget
#COMMENT: the index of a page in the notebook, or -1
    to get the last page
#NAME: text
#PARENT: Gtk.FontSelection.set_preview_text.none
#COMMENT: the text to display in the preview area
#NAME: get_page_type
#PARENT: Gtk.Assistant.get_page_type
#COMMENT: the page type of @page
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_has_region.gboolean
#COMMENT: position to query, -1 for the path head
#NAME: get_preferred_height
#PARENT: Gtk.CellRenderer
#COMMENT: Retreives a renderer’s natural size when rendered to @widget.
#NAME: completion
#PARENT: Gtk.EntryCompletion.get_inline_selection.gboolean
#COMMENT: a #GtkEntryCompletion
#NAME: iter_has_child
#PARENT: Gtk.TreeModel
#COMMENT: Returns %TRUE if @iter has children, %FALSE otherwise.
#NAME: iter_is_valid
#PARENT: Gtk.TreeModelSort
#COMMENT: > This function is slow. Only use it for debugging and/or testing
> purposes.

Checks if the given iter is a valid iter for this #GtkTreeModelSort.
#NAME: get_left_gravity
#PARENT: Gtk.TextMark
#COMMENT: Determines whether the mark has left gravity.
#NAME: new_with_buffer
#PARENT: Gtk.Entry.new_with_buffer
#COMMENT: a new #GtkEntry
#NAME: selection
#PARENT: Gtk.TreeSelection.select_all.none
#COMMENT: A #GtkTreeSelection.
#NAME: selection_convert
#PARENT: Gtk
#COMMENT: Requests the contents of a selection. When received,
a “selection-received” signal will be generated.
#NAME: region_id
#PARENT: Gtk.StyleContext.cancel_animations.none
#COMMENT: animatable region to stop, or %NULL.
    See gtk_style_context_push_animatable_region()
#NAME: path
#PARENT: Gtk.TreeDragSource.drag_data_get.gboolean
#COMMENT: row that was dragged
#NAME: get_indices
#PARENT: Gtk.TreePath.get_indices
#COMMENT: The current indices, or %NULL
#NAME: callback
#PARENT: Gtk.IconInfo.load_symbolic_async.none
#COMMENT: a #GAsyncReadyCallback to call when the
    request is satisfied
#NAME: logout
#PARENT: Gtk.ApplicationInhibitFlags
#COMMENT: Inhibit ending the user session
    by logging out or by shutting down the computer
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_add_tearoffs.none
#COMMENT: a #GtkComboBox
#NAME: unselect-all
#PARENT: Gtk.IconView
#COMMENT: A [keybinding signal][GtkBindingSignal]
which gets emitted when the user unselects all items.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control selection
programmatically.

The default binding for this signal is Ctrl-Shift-a.
#NAME: group_name
#PARENT: Gtk.PageSetup.to_key_file.none
#COMMENT: the group to add the settings to in @key_file,
     or %NULL to use the default name “Page Setup”
#NAME: allocate
#PARENT: Gtk.CellAreaContext
#COMMENT: Allocates a width and/or a height for all rows which are to be
rendered with @context.

Usually allocation is performed only horizontally or sometimes
vertically since a group of rows are usually rendered side by
side vertically or horizontally and share either the same width
or the same height. Sometimes they are allocated in both horizontal
and vertical orientations producing a homogeneous effect of the
rows. This is generally the case for #GtkTreeView when
#GtkTreeView:fixed-height-mode is enabled.

Since 3.0
#NAME: location
#PARENT: Gtk.PlacesSidebar.add_shortcut.none
#COMMENT: location to add as an application-specific shortcut
#NAME: preview
#PARENT: Gtk.PrintOperationAction
#COMMENT: Show the print preview.
#NAME: join_group
#PARENT: Gtk.RadioMenuItem
#COMMENT: Joins a #GtkRadioMenuItem object to the group of another #GtkRadioMenuItem
object.

This function should be used by language bindings to avoid the memory
manangement of the opaque #GSList of gtk_radio_menu_item_get_group()
and gtk_radio_menu_item_set_group().

A common way to set up a group of #GtkRadioMenuItem instances is:

|[
  GtkRadioMenuItem *last_item = NULL;

  while ( ...more items to add... )
    {
      GtkRadioMenuItem *radio_item;

      radio_item = gtk_radio_menu_item_new (...);

      gtk_radio_menu_item_join_group (radio_item, last_item);
      last_item = radio_item;
    }
]|
#NAME: within_margin
#PARENT: Gtk.TextView.scroll_to_mark.none
#COMMENT: margin as a [0.0,0.5) fraction of screen size
#NAME: parent
#PARENT: Gtk.show_about_dialog.none
#COMMENT: transient parent, or %NULL for none
#NAME: get_use_font
#PARENT: Gtk.FontButton
#COMMENT: Returns whether the selected font is used in the label.
#NAME: new
#PARENT: Gtk.ColorChooserDialog
#COMMENT: Creates a new #GtkColorChooserDialog.
#NAME: get_group
#PARENT: Gtk.RadioToolButton.get_group
#COMMENT: The group @button belongs to.
#NAME: iter
#PARENT: Gtk.TextBuffer.insert_with_tags_by_name.none
#COMMENT: position in @buffer
#NAME: get_gravity
#PARENT: Gtk.Window.get_gravity
#COMMENT: window gravity
#NAME: button
#PARENT: Gtk.ToolButton.get_use_underline.gboolean
#COMMENT: a #GtkToolButton
#NAME: selection-mode
#PARENT: Gtk.FlowBox
#COMMENT: The selection mode used by the flow  box.
#NAME: set_default_response
#PARENT: Gtk.InfoBar
#COMMENT: Sets the last widget in the info bar’s action area with
the given response_id as the default widget for the dialog.
Pressing “Enter” normally activates the default widget.

Note that this function currently requires @info_bar to
be added to a widget hierarchy.
#NAME: size
#PARENT: Gtk.StyleClass.render_icon.render_icon.GdkPixbuf.Pixbuf
#COMMENT: the size to render the icon at. A size of
    (GtkIconSize)-1 means render at the size of the source and
    don’t scale.
#NAME: lookup_color
#PARENT: Gtk.StyleContext.lookup_color
#COMMENT: %TRUE if @color_name was found and resolved, %FALSE otherwise
#NAME: copy_values
#PARENT: Gtk.TextAttributes
#COMMENT: Copies the values from @src to @dest so that @dest has
the same values as @src. Frees existing values in @dest.
#NAME: user_data
#PARENT: Gtk.TextIter.backward_find_char.gboolean
#COMMENT: user data for @pred
#NAME: get_default_style
#PARENT: Gtk.Widget.get_default_style
#COMMENT: the default style. This #GtkStyle
    object is owned by GTK+ and should not be modified or freed.
#NAME: HPaned
#PARENT: Gtk
#COMMENT: The HPaned widget is a container widget with two
children arranged horizontally. The division between
the two panes is adjustable by the user by dragging
a handle. See #GtkPaned for details.

GtkHPaned has been deprecated, use #GtkPaned instead.
#NAME: get_inconsistent
#PARENT: Gtk.CheckMenuItem.get_inconsistent
#COMMENT: %TRUE if inconsistent
#NAME: set_property
#PARENT: Gtk.StyleProperties
#COMMENT: Sets a styling property in @props.
#NAME: iter
#PARENT: Gtk.TextView.starts_display_line.gboolean
#COMMENT: a #GtkTextIter
#NAME: yalign
#PARENT: Gtk.Frame.get_label_align.none
#COMMENT: location to store X alignment of
    frame’s label, or %NULL
#NAME: completion
#PARENT: Gtk.EntryCompletion.get_popup_set_width.gboolean
#COMMENT: a #GtkEntryCompletion
#NAME: forward_find_char
#PARENT: Gtk.TextIter
#COMMENT: Advances @iter, calling @pred on each character. If
@pred returns %TRUE, returns %TRUE and stops scanning.
If @pred never returns %TRUE, @iter is set to @limit if
@limit is non-%NULL, otherwise to the end iterator.
#NAME: new
#PARENT: Gtk.SpinButton.new
#COMMENT: The new spin button as a #GtkWidget
#NAME: get_char_count
#PARENT: Gtk.TextBuffer.get_char_count
#COMMENT: number of characters in the buffer
#NAME: backward_display_line_start
#PARENT: Gtk.TextView
#COMMENT: Moves the given @iter backward to the next display line start.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view’s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.
#NAME: clipboard
#PARENT: Gtk.ClipboardImageReceivedFunc.none
#COMMENT: the #GtkClipboard
#NAME: use-markup
#PARENT: Gtk.MessageDialog
#COMMENT: %TRUE if the primary text of the dialog includes Pango markup.
See pango_parse_markup().
#NAME: backward_display_line_start
#PARENT: Gtk.TextView.backward_display_line_start
#COMMENT: %TRUE if @iter was moved and is not on the end iterator
#NAME: callback
#PARENT: Gtk.ToggleActionEntry
#COMMENT: The function to call when the action is activated.
#NAME: filter
#PARENT: Gtk.RecentChooser.set_filter.none
#COMMENT: a #GtkRecentFilter
#NAME: set_metrics
#PARENT: Gtk.HSV
#COMMENT: Sets the size and ring width of an HSV color selector.
#NAME: get_touch_only
#PARENT: Gtk.GestureSingle.get_touch_only
#COMMENT: %TRUE if the gesture only handles touch events
#NAME: widget
#PARENT: Gtk.Widget.override_cursor.none
#COMMENT: a #GtkWidget
#NAME: tree_model
#PARENT: Gtk.TreeModel.get_valist.none
#COMMENT: a #GtkTreeModel
#NAME: window
#PARENT: Gtk.cairo_should_draw_window.gboolean
#COMMENT: the window to check. @window may not be an input-only
         window.
#NAME: css_provider
#PARENT: Gtk.CssProvider.load_from_data.gboolean
#COMMENT: a #GtkCssProvider
#NAME: add_attribute
#PARENT: Gtk.CellLayout
#COMMENT: Adds an attribute mapping to the list in @cell_layout.

The @column is the column of the model to get a value from, and the
@attribute is the parameter on @cell to be set from the value. So for
example if column 2 of the model contains strings, you could have the
“text” attribute of a #GtkCellRendererText get its values from column 2.
#NAME: parent
#PARENT: Gtk.TreeStore.insert.none
#COMMENT: A valid #GtkTreeIter, or %NULL
#NAME: get_tree_view
#PARENT: Gtk.TreeViewColumn.get_tree_view
#COMMENT: The tree view wherein @column has
    been inserted if any, %NULL otherwise.
#NAME: display_name
#PARENT: Gtk.RecentFilterInfo
#COMMENT: The string that will be used to display
   the file in the recent chooser.
#NAME: iter_set_state
#PARENT: Gtk.WidgetPath
#COMMENT: Sets the widget name for the widget found at position @pos
in the widget hierarchy defined by @path.

If you want to update just a single state flag, you need to do
this manually, as this function updates all state flags.

## Setting a flag

|[<!-- language="C" -->
gtk_widget_path_iter_set_state (path, pos, gtk_widget_path_iter_get_state (path, pos) | flag);
]|

## Unsetting a flag

|[<!-- language="C" -->
gtk_widget_path_iter_set_state (path, pos, gtk_widget_path_iter_get_state (path, pos) & ~flag);
]|
#NAME: action
#PARENT: Gtk.Action.get_short_label.utf8
#COMMENT: a #GtkAction
#NAME: source
#PARENT: Gtk.IconSource.get_direction.TextDirection
#COMMENT: a #GtkIconSource
#NAME: count
#PARENT: Gtk.TextIter.forward_sentence_ends.gboolean
#COMMENT: number of sentences to move
#NAME: border
#PARENT: Gtk.ThemingEngine.get_border.none
#COMMENT: return value for the border settings
#NAME: widget
#PARENT: Gtk.Widget.set_events.none
#COMMENT: a #GtkWidget
#NAME: relief
#PARENT: Gtk.Button.set_relief.none
#COMMENT: The GtkReliefStyle as described above
#NAME: widget
#PARENT: Gtk.paint_diamond.none
#COMMENT: the widget
#NAME: DeleteType
#PARENT: Gtk
#COMMENT: See also: #GtkEntry::delete-from-cursor.
#NAME: menu_text
#PARENT: Gtk.Notebook.set_menu_label_text.none
#COMMENT: the label text
#NAME: start
#PARENT: Gtk.TextBuffer.get_text.utf8
#COMMENT: start of a range
#NAME: position
#PARENT: Gtk.Editable.insert_text.none
#COMMENT: location of the position text will be inserted at
#NAME: create-menu-proxy
#PARENT: Gtk.ToolItem.create-menu-proxy
#COMMENT: %TRUE if the signal was handled, %FALSE if not
#NAME: get_style
#PARENT: Gtk.ToolShellIface.get_style.get_style
#COMMENT: the current style of @shell
#NAME: set_tearoff_state
#PARENT: Gtk.Menu
#COMMENT: Changes the tearoff state of the menu.  A menu is normally
displayed as drop down menu which persists as long as the menu is
active.  It can also be displayed as a tearoff menu which persists
until it is closed or reattached.
#NAME: set_value
#PARENT: Gtk.Range
#COMMENT: Sets the current value of the range; if the value is outside the
minimum or maximum range values, it will be clamped to fit inside
them. The range emits the #GtkRange::value-changed signal if the
value changes.
#NAME: cycle-focus
#PARENT: Gtk.MenuShell
#COMMENT: A keybinding signal which moves the focus in the
given @direction.
#NAME: get_accepts_tab
#PARENT: Gtk.TextView.get_accepts_tab
#COMMENT: %TRUE if pressing the Tab key inserts a tab character,
  %FALSE if pressing the Tab key moves the keyboard focus.
#NAME: get_attached_to
#PARENT: Gtk.Window.get_attached_to
#COMMENT: the widget where the window is attached,
  or %NULL if the window is not attached to any widget.
#NAME: is_active
#PARENT: Gtk.Window.is_active
#COMMENT: %TRUE if the window part of the current active window.
#NAME: to_key_file
#PARENT: Gtk.PaperSize
#COMMENT: This function adds the paper size from @size to @key_file.
#NAME: get_exclusive
#PARENT: Gtk.ToolPalette
#COMMENT: Gets whether @group is exclusive or not.
See gtk_tool_palette_set_exclusive().
#NAME: get_n_columns
#PARENT: Gtk.TreeView
#COMMENT: Queries the number of columns in the given @tree_view.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_tooltip_column.gint
#COMMENT: a #GtkTreeView
#NAME: LinkButton
#PARENT: Gtk
#COMMENT: A GtkLinkButton is a #GtkButton with a hyperlink, similar to the one
used by web browsers, which triggers an action when clicked. It is useful
to show quick links to resources.

A link button is created by calling either gtk_link_button_new() or
gtk_link_button_new_with_label(). If using the former, the URI you pass
to the constructor is used as a label for the widget.

The URI bound to a GtkLinkButton can be set specifically using
gtk_link_button_set_uri(), and retrieved using gtk_link_button_get_uri().

By default, GtkLinkButton calls gtk_show_uri() when the button is
clicked. This behaviour can be overridden by connecting to the
#GtkLinkButton::activate-link signal and returning %TRUE from the
signal handler.
#NAME: steps
#PARENT: Gtk.ScrollStep
#COMMENT: Scroll in steps.
#NAME: tag
#PARENT: Gtk.TextBuffer.apply_tag.none
#COMMENT: a #GtkTextTag
#NAME: get_text_alignment
#PARENT: Gtk.ToolShell.get_text_alignment
#COMMENT: the current text alignment of @shell
#NAME: widget
#PARENT: Gtk.ButtonBox.get_child_secondary.gboolean
#COMMENT: a #GtkButtonBox
#NAME: new
#PARENT: Gtk.CellRendererToggle.new
#COMMENT: the new cell renderer
#NAME: ref
#PARENT: Gtk.RecentInfo.ref
#COMMENT: the recent info object with its reference count
    increased by one
#NAME: get_modal
#PARENT: Gtk.Window.get_modal
#COMMENT: %TRUE if the window is set to be modal and
              establishes a grab when shown
#NAME: x
#PARENT: Gtk.GestureDrag.get_offset.gboolean
#COMMENT: X offset for the current point
#NAME: get_selected_children
#PARENT: Gtk.FlowBox
#COMMENT: Creates a list of all selected children.
#NAME: get_has_frame
#PARENT: Gtk.Entry
#COMMENT: Gets the value set by gtk_entry_set_has_frame().
#NAME: label
#PARENT: Gtk.RadioMenuItem.new_with_label_from_widget.Widget
#COMMENT: the text for the label
#NAME: get_widget
#PARENT: Gtk.UIManager.get_widget
#COMMENT: the widget found by following the path,
    or %NULL if no widget was found
#NAME: y
#PARENT: Gtk.GestureDrag.get_offset.gboolean
#COMMENT: Y offset for the current point
#NAME: value
#PARENT: Gtk.BuildableIface.set_buildable_property.set_buildable_property.none
#COMMENT: value of property
#NAME: menubar
#PARENT: Gtk.MenuBar.set_pack_direction.none
#COMMENT: a #GtkMenuBar
#NAME: clipboard
#PARENT: Gtk.TextBuffer.paste-done.none
#COMMENT: the #GtkClipboard pasted from
#NAME: tx
#PARENT: Gtk.TreeView.convert_tree_to_bin_window_coords.none
#COMMENT: tree X coordinate
#NAME: icon_size_lookup_for_settings
#PARENT: Gtk.icon_size_lookup_for_settings
#COMMENT: %TRUE if @size was a valid size
#NAME: CellRendererMode
#PARENT: Gtk
#COMMENT: Identifies how the user can interact with a particular cell.
#NAME: path
#PARENT: Gtk.CssProvider.load_from_path.gboolean
#COMMENT: the path of a filename to load, in the GLib filename encoding
#NAME: context_id
#PARENT: Gtk.IMContextInfo
#COMMENT: The unique identification string of the input method.
#NAME: get_heading
#PARENT: Gtk.AppChooserButton
#COMMENT: Returns the text to display at the top of the dialog.
#NAME: ty
#PARENT: Gtk.TreeView.convert_tree_to_bin_window_coords.none
#COMMENT: tree Y coordinate
#NAME: cell_area
#PARENT: Gtk.TreeViewColumn.cell_get_size.none
#COMMENT: The area a cell in the column will be allocated, or %NULL
#NAME: fraction
#PARENT: Gtk.Entry.set_progress_pulse_step.none
#COMMENT: fraction between 0.0 and 1.0
#NAME: get_justify
#PARENT: Gtk.Label.get_justify
#COMMENT: #GtkJustification
#NAME: get_socket_window
#PARENT: Gtk.Plug
#COMMENT: Retrieves the socket the plug is embedded in.
#NAME: spin_button
#PARENT: Gtk.SpinButton.get_range.none
#COMMENT: a #GtkSpinButton
#NAME: has_palette
#PARENT: Gtk.ColorSelection.set_has_palette.none
#COMMENT: %TRUE if palette is to be visible, %FALSE otherwise
#NAME: insert_action_group
#PARENT: Gtk.UIManager
#COMMENT: Inserts an action group into the list of action groups associated
with @manager. Actions in earlier groups hide actions with the same
name in later groups.

If @pos is larger than the number of action groups in @manager, or
negative, @action_group will be inserted at the end of the internal
list.
#NAME: widget
#PARENT: Gtk.Widget.override_symbolic_color.none
#COMMENT: a #GtkWidget
#NAME: value_from_string
#PARENT: Gtk.Builder.value_from_string
#COMMENT: %TRUE on success
#NAME: row_draggable
#PARENT: Gtk.TreeDragSource.row_draggable
#COMMENT: %TRUE if the row can be dragged
#NAME: row-spacing
#PARENT: Gtk.FlowBox
#COMMENT: The amount of vertical space between two children.
#NAME: str
#PARENT: Gtk.MessageDialog.set_markup.none
#COMMENT: markup string (see [Pango markup format][PangoMarkupFormat])
#NAME: state
#PARENT: Gtk.ThemingEngine.get_property.none
#COMMENT: state to retrieve the value for
#NAME: path
#PARENT: Gtk.TreeSelection.select_path.none
#COMMENT: The #GtkTreePath to be selected.
#NAME: n_targets
#PARENT: Gtk.targets_include_rich_text.gboolean
#COMMENT: the length of @targets
#NAME: editable
#PARENT: Gtk.Editable.select_region.none
#COMMENT: a #GtkEditable
#NAME: get_focus_on_click
#PARENT: Gtk.ComboBox.get_focus_on_click
#COMMENT: %TRUE if the combo box grabs focus when it is
    clicked with the mouse.
#NAME: widget
#PARENT: Gtk.Widget.show.none
#COMMENT: a #GtkWidget
#NAME: activate_cell
#PARENT: Gtk.CellArea
#COMMENT: This is used by #GtkCellArea subclasses when handling events
to activate cells, the base #GtkCellArea class activates cells
for keyboard events for free in its own GtkCellArea->activate()
implementation.
#NAME: set_show_close_button
#PARENT: Gtk.SearchBar
#COMMENT: Shows or hides the close button. Applications that
already have a “search” toggle button should not show a close
button in their search bar, as it duplicates the role of the
toggle button.
#NAME: value
#PARENT: Gtk.SpinButton.set_value.none
#COMMENT: the new value
#NAME: area
#PARENT: Gtk.CellArea.get_request_mode.SizeRequestMode
#COMMENT: a #GtkCellArea
#NAME: renderer
#PARENT: Gtk.CellArea.add.none
#COMMENT: the #GtkCellRenderer to add to @area
#NAME: new
#PARENT: Gtk.ToolItem
#COMMENT: Creates a new #GtkToolItem
#NAME: model
#PARENT: Gtk.TreeRowReference.new_proxy.TreeRowReference
#COMMENT: a #GtkTreeModel
#NAME: do_insert_text
#PARENT: Gtk.Editable
#COMMENT: Inserts @new_text_length bytes of @new_text into the contents of the
widget, at position @position.

Note that the position is in characters, not in bytes.
The function updates @position to point after the newly inserted text.
#NAME: fill_level
#PARENT: Gtk.Range.set_fill_level.none
#COMMENT: the new position of the fill level indicator
#NAME: manager
#PARENT: Gtk.RecentManager.lookup_item.RecentInfo
#COMMENT: a #GtkRecentManager
#NAME: scrollable
#PARENT: Gtk.Scrollable.set_vscroll_policy.none
#COMMENT: a #GtkScrollable
#NAME: ActionGroup
#PARENT: Gtk
#COMMENT: Actions are organised into groups. An action group is essentially a
map from names to #GtkAction objects.

All actions that would make sense to use in a particular context
should be in a single group. Multiple action groups may be used for a
particular user interface. In fact, it is expected that most nontrivial
applications will make use of multiple groups. For example, in an
application that can edit multiple documents, one group holding global
actions (e.g. quit, about, new), and one group per document holding
actions that act on that document (eg. save, cut/copy/paste, etc). Each
window’s menus would be constructed from a combination of two action
groups.

## Accelerators ## {#Action-Accel}

Accelerators are handled by the GTK+ accelerator map. All actions are
assigned an accelerator path (which normally has the form
`<Actions>/group-name/action-name`) and a shortcut is associated with
this accelerator path. All menuitems and toolitems take on this accelerator
path. The GTK+ accelerator map code makes sure that the correct shortcut
is displayed next to the menu item.

# GtkActionGroup as GtkBuildable # {#GtkActionGroup-BUILDER-UI}

The #GtkActionGroup implementation of the #GtkBuildable interface accepts
#GtkAction objects as <child> elements in UI definitions.

Note that it is probably more common to define actions and action groups
in the code, since they are directly related to what the code can do.

The GtkActionGroup implementation of the GtkBuildable interface supports
a custom <accelerator> element, which has attributes named “key“ and
“modifiers“ and allows to specify accelerators. This is similar to the
<accelerator> element of #GtkWidget, the main difference is that
it doesn’t allow you to specify a signal.

## A #GtkDialog UI definition fragment. ##
|[
<object class="GtkActionGroup" id="actiongroup">
  <child>
      <object class="GtkAction" id="About">
          <property name="name">About</property>
          <property name="stock_id">gtk-about</property>
          <signal handler="about_activate" name="activate"/>
      </object>
      <accelerator key="F1" modifiers="GDK_CONTROL_MASK | GDK_SHIFT_MASK"/>
  </child>
</object>
]|
#NAME: box
#PARENT: Gtk.FlowBox.get_selection_mode.SelectionMode
#COMMENT: a #GtkFlowBox
#NAME: window
#PARENT: Gtk.Window.move.none
#COMMENT: a #GtkWindow
#NAME: new_for_content_type
#PARENT: Gtk.AppChooserDialog
#COMMENT: Creates a new #GtkAppChooserDialog for the provided content type,
to allow the user to select an application for it.
#NAME: get_nth_page
#PARENT: Gtk.Assistant
#COMMENT: Returns the child widget contained in page number @page_num.
#NAME: fontchooser
#PARENT: Gtk.FontChooser.get_font_size.gint
#COMMENT: a #GtkFontChooser
#NAME: size
#PARENT: Gtk.PageSetup.set_paper_size_and_default_margins.none
#COMMENT: a #GtkPaperSize
#NAME: get_column
#PARENT: Gtk.TreeView.get_column
#COMMENT: The #GtkTreeViewColumn, or %NULL if the
    position is outside the range of columns.
#NAME: set_alignment
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the alignment of the title or custom widget inside the column header.
The alignment determines its location inside the button -- 0.0 for left, 0.5
for center, 1.0 for right.
#NAME: PathType
#PARENT: Gtk
#COMMENT: Widget path types.
See also gtk_binding_set_add_path().
#NAME: new
#PARENT: Gtk.RadioMenuItem
#COMMENT: Creates a new #GtkRadioMenuItem.
#NAME: bind_template_child_full
#PARENT: Gtk.WidgetClass
#COMMENT: Automatically assign an object declared in the class template XML to be set to a location
on a freshly built instance’s private data, or alternatively accessible via gtk_widget_get_template_child().

The struct can point either into the public instance, then you should use G_STRUCT_OFFSET(WidgetType, member)
for @struct_offset,  or in the private struct, then you should use G_PRIVATE_OFFSET(WidgetType, member).

An explicit strong reference will be held automatically for the duration of your
instance’s life cycle, it will be released automatically when #GObjectClass.dispose() runs
on your instance and if a @struct_offset that is != 0 is specified, then the automatic location
in your instance public or private data will be set to %NULL. You can however access an automated child
pointer the first time your classes #GObjectClass.dispose() runs, or alternatively in
#GtkWidgetClass.destroy().

If @internal_child is specified, #GtkBuildableIface.get_internal_child() will be automatically
implemented by the #GtkWidget class so there is no need to implement it manually.

The wrapper macros gtk_widget_class_bind_template_child(), gtk_widget_class_bind_template_child_internal(),
gtk_widget_class_bind_template_child_private() and gtk_widget_class_bind_template_child_internal_private()
might be more convenient to use.

Note that this must be called from a composite widget classes class
initializer after calling gtk_widget_class_set_template().
#NAME: palette
#PARENT: Gtk.ToolPalette.add_drag_dest.none
#COMMENT: a #GtkToolPalette
#NAME: layout
#PARENT: Gtk.Layout.get_hadjustment.Adjustment
#COMMENT: a #GtkLayout
#NAME: toggled
#PARENT: Gtk.ToggleAction
#COMMENT: Should be connected if you wish to perform an action
whenever the #GtkToggleAction state is changed.
#NAME: state
#PARENT: Gtk.Widget.modify_text.none
#COMMENT: the state for which to set the text color
#NAME: get_titlebar
#PARENT: Gtk.Window
#COMMENT: Returns the custom titlebar that has been set with
gtk_window_set_titlebar().
#NAME: delete-text
#PARENT: Gtk.Editable
#COMMENT: This signal is emitted when text is deleted from
the widget by the user. The default handler for
this signal will normally be responsible for deleting
the text, so by connecting to this signal and then
stopping the signal with g_signal_stop_emission(), it
is possible to modify the range of deleted text, or
prevent it from being deleted entirely. The @start_pos
and @end_pos parameters are interpreted as for
gtk_editable_delete_text().
#NAME: entry
#PARENT: Gtk.Entry.set_icon_from_stock.none
#COMMENT: A #GtkEntry
#NAME: context
#PARENT: Gtk.CellArea.get_cell_allocation.none
#COMMENT: the #GtkCellAreaContext used to hold sizes for @area.
#NAME: get_scale_delta
#PARENT: Gtk.GestureZoom
#COMMENT: If @gesture is active, this function returns the zooming difference
since the gesture was recognized (hence the starting point is
considered 1:1). If @gesture is not active, 1 is returned.
#NAME: size
#PARENT: Gtk.PageSetup.set_paper_size.none
#COMMENT: a #GtkPaperSize
#NAME: drag-action-ask
#PARENT: Gtk.PlacesSidebar.drag-action-ask
#COMMENT: the final drag action that the sidebar should pass to the drag side
of the drag-and-drop operation.
#NAME: delete_selection
#PARENT: Gtk.TextBuffer
#COMMENT: Deletes the range between the “insert” and “selection_bound” marks,
that is, the currently-selected text. If @interactive is %TRUE,
the editability of the selection will be considered (users can’t delete
uneditable text).
#NAME: path
#PARENT: Gtk.Widget
#COMMENT: Obtains the full path to @widget. The path is simply the name of a
widget and all its parents in the container hierarchy, separated by
periods. The name of a widget comes from
gtk_widget_get_name(). Paths are used to apply styles to a widget
in gtkrc configuration files. Widget names are the type of the
widget by default (e.g. “GtkButton”) or can be set to an
application-specific value with gtk_widget_set_name(). By setting
the name of a widget, you allow users or theme authors to apply
styles to that specific widget in their gtkrc
file. @path_reversed_p fills in the path in reverse order,
i.e. starting with @widget’s name instead of starting with the name
of @widget’s outermost ancestor.
#NAME: entries
#PARENT: Gtk.BindingSet
#COMMENT: the key binding entries in this binding set
#NAME: buildable
#PARENT: Gtk.Buildable.custom_tag_start.gboolean
#COMMENT: a #GtkBuildable
#NAME: context
#PARENT: Gtk.CellAreaClass.event.event.gint
#COMMENT: the #GtkCellAreaContext for this row of data.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_name.none
#COMMENT: a #GtkStatusIcon
#NAME: context
#PARENT: Gtk.Widget.drag-motion.gboolean
#COMMENT: the drag context
#NAME: user_data
#PARENT: Gtk.ActionGroup.add_toggle_actions.none
#COMMENT: data to pass to the action callbacks
#NAME: add_window
#PARENT: Gtk.Application
#COMMENT: Adds a window to @application.

This call is equivalent to setting the #GtkWindow:application
property of @window to @application.

Normally, the connection between the application and the window
will remain until the window is destroyed, but you can explicitly
remove it with gtk_application_remove_window().

GTK+ will keep the application running as long as it has
any windows.
#NAME: resource_path
#PARENT: Gtk.Builder.add_from_resource.guint
#COMMENT: the path of the resource file to parse
#NAME: has_class
#PARENT: Gtk.StyleContext
#COMMENT: Returns %TRUE if @context currently has defined the
given class name
#NAME: lhs
#PARENT: Gtk.TextIter.equal.gboolean
#COMMENT: a #GtkTextIter
#NAME: tree_model
#PARENT: Gtk.TreeModelSort.get_model.TreeModel
#COMMENT: a #GtkTreeModelSort
#NAME: year
#PARENT: Gtk.CalendarDetailFunc.utf8
#COMMENT: the year for which details are needed.
#NAME: height
#PARENT: Gtk.CellRenderer.get_preferred_width_for_height.none
#COMMENT: the size which is available for allocation
#NAME: new
#PARENT: Gtk.PrintSettings.new
#COMMENT: a new #GtkPrintSettings object
#NAME: name
#PARENT: Gtk.WidgetPath.iter_add_class.none
#COMMENT: a class name
#NAME: bindings_activate_event
#PARENT: Gtk
#COMMENT: Looks up key bindings for @object to find one matching
@event, and if one was found, activate it.
#NAME: height
#PARENT: Gtk.paint_handle.none
#COMMENT: height of the handle
#NAME: user_data
#PARENT: Gtk.ActionGroup.add_actions.none
#COMMENT: data to pass to the action callbacks
#NAME: box
#PARENT: Gtk.Box.get_baseline_position.BaselinePosition
#COMMENT: a #GtkBox
#NAME: set_pattern
#PARENT: Gtk.Label
#COMMENT: The pattern of underlines you want under the existing text within the
#GtkLabel widget.  For example if the current text of the label says
“FooBarBaz” passing a pattern of “___   ___” will underline
“Foo” and “Baz” but not “Bar”.
#NAME: display
#PARENT: Gtk.Plug.new_for_display.Widget
#COMMENT: the #GdkDisplay on which @socket_id is displayed
#NAME: cr
#PARENT: Gtk.render_option.none
#COMMENT: a #cairo_t
#NAME: icon_name
#PARENT: Gtk.Button.new_from_icon_name.Widget
#COMMENT: an icon name
#NAME: visible_window
#PARENT: Gtk.EventBox.set_visible_window.none
#COMMENT: %TRUE to make the event box have a visible window
#NAME: unit
#PARENT: Gtk.PageSetup.set_left_margin.none
#COMMENT: the units for @margin
#NAME: context
#PARENT: Gtk.PrintOperationPreview.ready.none
#COMMENT: the current #GtkPrintContext
#NAME: start
#PARENT: Gtk.Label.get_selection_bounds.gboolean
#COMMENT: return location for start of selection, as a character offset
#NAME: relative_to
#PARENT: Gtk.Popover.new_from_model.Widget
#COMMENT: #GtkWidget the popover is related to
#NAME: set_focus
#PARENT: Gtk.Window
#COMMENT: If @focus is not the current focus widget, and is focusable, sets
it as the focus widget for the window. If @focus is %NULL, unsets
the focus widget for this window. To set the focus to a particular
widget in the toplevel, it is usually more convenient to use
gtk_widget_grab_focus() instead of this function.
#NAME: button-release-event
#PARENT: Gtk.StatusIcon.button-release-event
#COMMENT: %TRUE to stop other handlers from being invoked
for the event. %FALSE to propagate the event further.
#NAME: height
#PARENT: Gtk.icon_size_lookup.gboolean
#COMMENT: location to store icon height
#NAME: style
#PARENT: Gtk.rc_parse_color_full.guint
#COMMENT: a #GtkRcStyle, or %NULL
#NAME: container
#PARENT: Gtk.Container.child_get_valist.none
#COMMENT: a #GtkContainer
#NAME: area
#PARENT: Gtk.CellArea.remove_focus_sibling.none
#COMMENT: a #GtkCellArea
#NAME: get_tooltip_text
#PARENT: Gtk.Widget.get_tooltip_text
#COMMENT: the tooltip text, or %NULL. You should free the
  returned string with g_free() when done.
#NAME: WidgetPath
#PARENT: Gtk
#COMMENT: GtkWidgetPath is a boxed type that represents a widget hierarchy from
the topmost widget, typically a toplevel, to any child. This widget
path abstraction is used in #GtkStyleContext on behalf of the real
widget in order to query style information.

If you are using GTK+ widgets, you probably will not need to use
this API directly, as there is gtk_widget_get_path(), and the style
context returned by gtk_widget_get_style_context() will be automatically
updated on widget hierarchy changes.

The widget path generation is generally simple:

## Defining a button within a window

|[<!-- language="C" -->
{
  GtkWidgetPath *path;

  path = gtk_widget_path_new ();
  gtk_widget_path_append_type (path, GTK_TYPE_WINDOW);
  gtk_widget_path_append_type (path, GTK_TYPE_BUTTON);
}
]|

Although more complex information, such as widget names, or
different classes (property that may be used by other widget
types) and intermediate regions may be included:

## Defining the first tab widget in a notebook

|[<!-- language="C" -->
{
  GtkWidgetPath *path;
  guint pos;

  path = gtk_widget_path_new ();

  pos = gtk_widget_path_append_type (path, GTK_TYPE_NOTEBOOK);
  gtk_widget_path_iter_add_region (path, pos, "tab", GTK_REGION_EVEN | GTK_REGION_FIRST);

  pos = gtk_widget_path_append_type (path, GTK_TYPE_LABEL);
  gtk_widget_path_iter_set_name (path, pos, "first tab label");
}
]|

All this information will be used to match the style information
that applies to the described widget.
#NAME: event
#PARENT: Gtk.Entry.icon-press.none
#COMMENT: the button press event
#NAME: step_down
#PARENT: Gtk.ScrollType
#COMMENT: Step down.
#NAME: toolbar
#PARENT: Gtk.Toolbar.get_item_index.gint
#COMMENT: a #GtkToolbar
#NAME: x
#PARENT: Gtk.paint_expander.none
#COMMENT: the x position to draw the expander at
#NAME: colorsel
#PARENT: Gtk.ColorSelection.get_current_rgba.none
#COMMENT: a #GtkColorSelection
#NAME: get_activate_on_single_click
#PARENT: Gtk.IconView
#COMMENT: Gets the setting set by gtk_icon_view_set_activate_on_single_click().
#NAME: set_reorderable
#PARENT: Gtk.IconView
#COMMENT: This function is a convenience function to allow you to reorder models that
support the #GtkTreeDragSourceIface and the #GtkTreeDragDestIface.  Both
#GtkTreeStore and #GtkListStore support these.  If @reorderable is %TRUE, then
the user can reorder the model by dragging and dropping rows.  The
developer can listen to these changes by connecting to the model's
row_inserted and row_deleted signals. The reordering is implemented by setting up
the icon view as a drag source and destination. Therefore, drag and
drop can not be used in a reorderable view for any other purpose.

This function does not give you any degree of control over the order -- any
reordering is allowed.  If more control is needed, you should probably
handle drag and drop manually.
#NAME: create_row_drag_icon
#PARENT: Gtk.TreeView.create_row_drag_icon
#COMMENT: a newly-allocated surface of the drag icon.
#NAME: event
#PARENT: Gtk.Widget.drag_begin_with_coordinates.Gdk.DragContext
#COMMENT: The event that triggered the start of the drag
#NAME: y
#PARENT: Gtk.paint_expander.none
#COMMENT: the y position to draw the expander at
#NAME: gicon
#PARENT: Gtk.CellRendererPixbuf
#COMMENT: The GIcon representing the icon to display.
If the icon theme is changed, the image will be updated
automatically.
#NAME: pspec
#PARENT: Gtk.RcProperty.parse_flags.gboolean
#COMMENT: a #GParamSpec
#NAME: orientation
#PARENT: Gtk.Orientable
#COMMENT: The orientation of the orientable.
#NAME: hexpand-set
#PARENT: Gtk.Widget
#COMMENT: Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
#NAME: filter
#PARENT: Gtk.FileFilter.add_mime_type.none
#COMMENT: A #GtkFileFilter
#NAME: new_from_pixbuf
#PARENT: Gtk.Image
#COMMENT: Creates a new #GtkImage displaying @pixbuf.
The #GtkImage does not assume a reference to the
pixbuf; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.

Note that this function just creates an #GtkImage from the pixbuf. The
#GtkImage created will not react to state changes. Should you want that,
you should use gtk_image_new_from_icon_name().
#NAME: width
#PARENT: Gtk.render_frame_gap.none
#COMMENT: rectangle width
#NAME: gtk-enable-input-feedback-sounds
#PARENT: Gtk.Settings
#COMMENT: Whether to play event sounds as feedback to user input.

See the [Sound Theme Specifications](http://www.freedesktop.org/wiki/Specifications/sound-theme-spec)
for more information on event sounds and sound themes.

GTK+ itself does not support event sounds, you have to use a loadable
module like the one that comes with libcanberra.
#NAME: 
#PARENT: Gtk.TreeStore.insert_with_values.none...
#COMMENT: pairs of column number and value, terminated with -1
#NAME: hot_x
#PARENT: Gtk.drag_set_icon_pixbuf.none
#COMMENT: the X offset within @widget of the hotspot
#NAME: set_with_owner
#PARENT: Gtk.Clipboard
#COMMENT: Virtually sets the contents of the specified clipboard by providing
a list of supported formats for the clipboard data and a function
to call to get the actual data when it is requested.

The difference between this function and gtk_clipboard_set_with_data()
is that instead of an generic @user_data pointer, a #GObject is passed
in.
#NAME: new_with_buttons
#PARENT: Gtk.InfoBar
#COMMENT: Creates a new #GtkInfoBar with buttons. Button text/response ID
pairs should be listed, with a %NULL pointer ending the list.
Button text can be either a stock ID such as %GTK_STOCK_OK, or
some arbitrary text. A response ID can be any positive number,
or one of the values in the #GtkResponseType enumeration. If the
user clicks one of these dialog buttons, GtkInfoBar will emit
the “response” signal with the corresponding response ID.
#NAME: hot_y
#PARENT: Gtk.drag_set_icon_pixbuf.none
#COMMENT: the Y offset within @widget of the hotspot
#NAME: render_extension
#PARENT: Gtk
#COMMENT: Renders a extension (as in a #GtkNotebook tab) in the rectangle
defined by @x, @y, @width, @height. The side where the extension
connects to is defined by @gap_side.

Typical extension rendering:

![](extensions.png)
#NAME: callback_data
#PARENT: Gtk.Container.foreach.none
#COMMENT: callback user data
#NAME: text
#PARENT: Gtk.IMContext.get_surrounding.gboolean
#COMMENT: location to store a UTF-8 encoded
       string of text holding context around the insertion point.
       If the function returns %TRUE, then you must free the result
       stored in this location with g_free().
#NAME: has-selection
#PARENT: Gtk.TextBuffer
#COMMENT: Whether the buffer has some text currently selected.
#NAME: dest
#PARENT: Gtk.TreeDragDest.drag_data_received.gboolean
#COMMENT: row to drop in front of
#NAME: emit_inserted_text
#PARENT: Gtk.EntryBuffer
#COMMENT: Used when subclassing #GtkEntryBuffer
#NAME: bind
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: get_group
#PARENT: Gtk.Window
#COMMENT: Returns the group for @window or the default group, if
@window is %NULL or if @window does not have an explicit
window group.
#NAME: minimum_width
#PARENT: Gtk.CellAreaContext.get_preferred_width_for_height.none
#COMMENT: location to store the minimum width,
    or %NULL
#NAME: get_use_underline
#PARENT: Gtk.MenuItem.get_use_underline
#COMMENT: %TRUE if an embedded underline in the label
    indicates the mnemonic accelerator key.
#NAME: hexpand
#PARENT: Gtk.Widget
#COMMENT: Whether to expand horizontally. See gtk_widget_set_hexpand().
#NAME: state_type
#PARENT: Gtk.paint_option.none
#COMMENT: a state
#NAME: inner-border
#PARENT: Gtk.Entry
#COMMENT: Sets the text area's border between the text and the frame.
#NAME: year
#PARENT: Gtk.Calendar.get_date.none
#COMMENT: location to store the year as a decimal
    number (e.g. 2011), or %NULL
#NAME: new_with_range
#PARENT: Gtk.VScale.new_with_range
#COMMENT: a new #GtkVScale
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_active_iter.gboolean
#COMMENT: A #GtkComboBox
#NAME: get_copyright
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the copyright string.
#NAME: end
#PARENT: Gtk.TextBuffer.get_bounds.none
#COMMENT: iterator to initialize with the end iterator
#NAME: 
#PARENT: Gtk.Dialog.new_with_buttons.Widget...
#COMMENT: response ID for first button, then additional buttons, ending with %NULL
#NAME: confirm
#PARENT: Gtk.AssistantPageType
#COMMENT: The page lets the user confirm or deny the
 changes. The Back and Apply buttons will be shown.
#NAME: tag
#PARENT: Gtk.TextIter.begins_tag.gboolean
#COMMENT: a #GtkTextTag, or %NULL
#NAME: icon_view
#PARENT: Gtk.IconView.get_cursor.gboolean
#COMMENT: A #GtkIconView
#NAME: size
#PARENT: Gtk.PaperSize.get_name.utf8
#COMMENT: a #GtkPaperSize object
#NAME: get_visible_line_index
#PARENT: Gtk.TextIter
#COMMENT: Returns the number of bytes from the start of the
line to the given @iter, not counting bytes that
are invisible due to tags with the “invisible” flag
toggled on.
#NAME: path
#PARENT: Gtk.TreePath.copy.TreePath
#COMMENT: a #GtkTreePath-struct
#NAME: widget
#PARENT: Gtk.Widget.get_style_context.StyleContext
#COMMENT: a #GtkWidget
#NAME: icon_pos
#PARENT: Gtk.Entry.get_icon_tooltip_markup.utf8
#COMMENT: the icon position
#NAME: area
#PARENT: Gtk.CellArea.attribute_get_column.gint
#COMMENT: a #GtkCellArea
#NAME: get_opacity
#PARENT: Gtk.Window
#COMMENT: Fetches the requested opacity for this window. See
gtk_window_set_opacity().
#NAME: mime_type
#PARENT: Gtk.FileFilter.add_mime_type.none
#COMMENT: name of a MIME type
#NAME: horizontal_pages
#PARENT: Gtk.ScrollStep
#COMMENT: Scroll by horizontal pages.
#NAME: placeholder-text
#PARENT: Gtk.CellRendererText
#COMMENT: The text that will be displayed in the #GtkCellRenderer if
#GtkCellRendererText:editable is %TRUE and the cell is empty.

Since 3.6
#NAME: popdown
#PARENT: Gtk.ScaleButton
#COMMENT: The ::popdown signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to popdown the scale widget.

The default binding for this signal is Escape.
#NAME: move-viewport
#PARENT: Gtk.TextView
#COMMENT: The ::move-viewport signal is a
[keybinding signal][GtkBindingSignal]
which can be bound to key combinations to allow the user
to move the viewport, i.e. change what part of the text view
is visible in a containing scrolled window.

There are no default bindings for this signal.
#NAME: get_title
#PARENT: Gtk.HeaderBar.get_title
#COMMENT: the title of the header, or %NULL if none has
   been set explicitly. The returned string is owned by the widget
   and must not be modified or freed.
#NAME: set_model
#PARENT: Gtk.IconView
#COMMENT: Sets the model for a #GtkIconView.
If the @icon_view already has a model set, it will remove
it before setting the new model.  If @model is %NULL, then
it will unset the old model.
#NAME: get_digits
#PARENT: Gtk.Scale.get_digits
#COMMENT: the number of decimal places that are displayed
#NAME: delete-event
#PARENT: Gtk.Widget
#COMMENT: The ::delete-event signal is emitted if a user requests that
a toplevel window is closed. The default handler for this signal
destroys the window. Connecting gtk_widget_hide_on_delete() to
this signal will cause the window to be hidden instead, so that
it can later be shown again without reconstructing it.
#NAME: cell
#PARENT: Gtk.IconView.get_cell_rect.gboolean
#COMMENT: a #GtkCellRenderer or %NULL
#NAME: get_use_alpha
#PARENT: Gtk.ColorChooser.get_use_alpha
#COMMENT: %TRUE if the color chooser uses the alpha channel,
    %FALSE if not
#NAME: gtk-visible-focus
#PARENT: Gtk.Settings
#COMMENT: Whether 'focus rectangles' should be always visible, never visible,
or hidden until the user starts to use the keyboard.
#NAME: switcher
#PARENT: Gtk.StackSwitcher.set_stack.none
#COMMENT: a #GtkStackSwitcher
#NAME: group_cycling
#PARENT: Gtk.Widget.mnemonic_activate.gboolean
#COMMENT: %TRUE if there are other widgets with the same mnemonic
#NAME: get_has_opacity_control
#PARENT: Gtk.ColorSelection.get_has_opacity_control
#COMMENT: %TRUE if the @colorsel has an opacity control,
    %FALSE if it does't
#NAME: EventBox
#PARENT: Gtk
#COMMENT: The #GtkEventBox widget is a subclass of #GtkBin which also has its
own window. It is useful since it allows you to catch events for widgets
which do not have their own window.
#NAME: info
#PARENT: Gtk.RecentInfo.unref.none
#COMMENT: a #GtkRecentInfo
#NAME: model
#PARENT: Gtk.TreeViewSearchEqualFunc.gboolean
#COMMENT: the #GtkTreeModel being searched
#NAME: EntryCompletionMatchFunc
#PARENT: Gtk
#COMMENT: A function which decides whether the row indicated by @iter matches
a given @key, and should be displayed as a possible completion for @key.
Note that @key is normalized and case-folded (see g_utf8_normalize()
and g_utf8_casefold()). If this is not appropriate, match functions
have access to the unmodified key via
`gtk_entry_get_text (GTK_ENTRY (gtk_entry_completion_get_entry ()))`.
#NAME: set_sort_column_id
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the logical @sort_column_id that this column sorts on when this column
is selected for sorting.  Doing so makes the column header clickable.
#NAME: data
#PARENT: Gtk.Callback.none
#COMMENT: user-supplied data
#NAME: rect
#PARENT: Gtk.Popover.set_pointing_to.none
#COMMENT: rectangle to point to
#NAME: settings
#PARENT: Gtk.PrintSettings.get_duplex.PrintDuplex
#COMMENT: a #GtkPrintSettings
#NAME: get_inverted
#PARENT: Gtk.ProgressBar
#COMMENT: Gets the value set by gtk_progress_bar_set_inverted().
#NAME: path
#PARENT: Gtk.TreeSelection.path_is_selected.gboolean
#COMMENT: A #GtkTreePath to check selection on.
#NAME: parent
#PARENT: Gtk.print_run_page_setup_dialog_async.none
#COMMENT: transient parent, or %NULL
#NAME: xalign
#PARENT: Gtk.CellRenderer.get_alignment.none
#COMMENT: location to fill in with the x alignment of the cell, or %NULL
#NAME: minimum_height
#PARENT: Gtk.CellRenderer.get_preferred_height_for_width.none
#COMMENT: location for storing the minimum size, or %NULL
#NAME: get_item_index
#PARENT: Gtk.Toolbar.get_item_index
#COMMENT: the position of item on the toolbar.
#NAME: get_support_selection
#PARENT: Gtk.PrintOperation
#COMMENT: Gets the value of #GtkPrintOperation:support-selection property.
#NAME: selection_data
#PARENT: Gtk.TreeDragSource.drag_data_get.gboolean
#COMMENT: a #GtkSelectionData to fill with data
                 from the dragged row
#NAME: group_cycling
#PARENT: Gtk.WidgetClass.mnemonic_activate.mnemonic_activate.gboolean
#COMMENT: %TRUE if there are other widgets with the same mnemonic
#NAME: icon_info
#PARENT: Gtk.IconInfo.get_display_name.utf8
#COMMENT: a #GtkIconInfo
#NAME: iter
#PARENT: Gtk.ListStore.append.none
#COMMENT: An unset #GtkTreeIter to set to the appended row
#NAME: context
#PARENT: Gtk.CellAreaContext.push_preferred_width.none
#COMMENT: a #GtkCellAreaContext
#NAME: set_count
#PARENT: Gtk.NumerableIcon
#COMMENT: Sets the currently displayed value of @self to @count.

The numeric value is always clamped to make it two digits, i.e.
between -99 and 99. Setting a count of zero removes the emblem.
If this method is called, and a label was already set on the icon,
it will automatically be reset to %NULL before rendering the number,
i.e. the last method called between gtk_numerable_icon_set_count()
and gtk_numerable_icon_set_label() has always priority.
#NAME: path
#PARENT: Gtk.TreeView.get_cell_area.none
#COMMENT: a #GtkTreePath for the row, or %NULL to get only horizontal coordinates
#NAME: device
#PARENT: Gtk.Widget.set_device_enabled.none
#COMMENT: a #GdkDevice
#NAME: property_name
#PARENT: Gtk.Widget.style_get_property.none
#COMMENT: the name of a style property
#NAME: builder
#PARENT: Gtk.Buildable.set_buildable_property.none
#COMMENT: a #GtkBuilder
#NAME: order
#PARENT: Gtk.TextIter
#COMMENT: Swaps the value of @first and @second if @second comes before
@first in the buffer. That is, ensures that @first and @second are
in sequence. Most text buffer functions that take a range call this
automatically on your behalf, so there’s no real reason to call it yourself
in those cases. There are some exceptions, such as gtk_text_iter_in_range(),
that expect a pre-sorted range.
#NAME: editable
#PARENT: Gtk.EditableInterface.do_insert_text.do_insert_text.none
#COMMENT: a #GtkEditable
#NAME: pixels_below_lines
#PARENT: Gtk.TextAttributes
#COMMENT: Pixels of blank space below paragraphs.
#NAME: check_menu_item
#PARENT: Gtk.CheckMenuItem.set_active.none
#COMMENT: a #GtkCheckMenuItem.
#NAME: already_exists
#PARENT: Gtk.FileChooserError
#COMMENT: Indicates a duplicate path (e.g. when
 adding a bookmark).
#NAME: uri
#PARENT: Gtk.FileChooser.add_shortcut_folder_uri.gboolean
#COMMENT: URI of the folder to add
#NAME: builder
#PARENT: Gtk.BuilderConnectFunc.none
#COMMENT: a #GtkBuilder
#NAME: child
#PARENT: Gtk.Notebook.reorder_child.none
#COMMENT: the child to move
#NAME: get_page_height
#PARENT: Gtk.PageSetup.get_page_height
#COMMENT: the page height.
#NAME: was_symbolic
#PARENT: Gtk.IconInfo.load_symbolic_for_context.GdkPixbuf.Pixbuf
#COMMENT: a #gboolean, returns whether the
    loaded icon was a symbolic one and whether the @fg color was
    applied to it.
#NAME: new
#PARENT: Gtk.HButtonBox.new
#COMMENT: a new button box #GtkWidget.
#NAME: set_filter
#PARENT: Gtk.FileChooser
#COMMENT: Sets the current filter; only the files that pass the
filter will be displayed. If the user-selectable list of filters
is non-empty, then the filter should be one of the filters
in that list. Setting the current filter when the list of
filters is empty is useful if you want to restrict the displayed
set of files without letting the user change it.
#NAME: get_group
#PARENT: Gtk.RadioAction.get_group
#COMMENT: the list representing the radio group for this object
#NAME: widget
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: set_center_widget
#PARENT: Gtk.ActionBar
#COMMENT: Sets the center widget for the #GtkActionBar.
#NAME: handle_box
#PARENT: Gtk.HandleBox.set_handle_position.none
#COMMENT: a #GtkHandleBox
#NAME: FileChooserButton
#PARENT: Gtk
#COMMENT: The #GtkFileChooserButton is a widget that lets the user select a
file.  It implements the #GtkFileChooser interface.  Visually, it is a
file name with a button to bring up a #GtkFileChooserDialog.
The user can then use that dialog to change the file associated with
that button.  This widget does not support setting the
#GtkFileChooser:select-multiple property to %TRUE.

## Create a button to let the user select a file in /etc

|[<!-- language="C" -->
{
  GtkWidget *button;

  button = gtk_file_chooser_button_new (_("Select a file"),
                                        GTK_FILE_CHOOSER_ACTION_OPEN);
  gtk_file_chooser_set_current_folder (GTK_FILE_CHOOSER (button),
                                       "/etc");
}
]|

The #GtkFileChooserButton supports the #GtkFileChooserActions
%GTK_FILE_CHOOSER_ACTION_OPEN and %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.

> The #GtkFileChooserButton will ellipsize the label, and will thus
> request little horizontal space.  To give the button more space,
> you should call gtk_widget_get_preferred_size(),
> gtk_file_chooser_button_set_width_chars(), or pack the button in
> such a way that other interface elements give space to the
> widget.
#NAME: lookup_icon_for_scale
#PARENT: Gtk.IconTheme
#COMMENT: Looks up a named icon for a particular window scale and returns a
#GtkIconInfo containing information such as the filename of the
icon. The icon can then be rendered into a pixbuf using
gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon() combines
these two steps if all you need is the pixbuf.)
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_limit.gint
#COMMENT: a #GtkRecentChooser
#NAME: get_context_id
#PARENT: Gtk.IMMulticontext.get_context_id
#COMMENT: the id of the currently active slave
#NAME: hsv
#PARENT: Gtk.HSV.get_metrics.none
#COMMENT: An HSV color selector
#NAME: widget
#PARENT: Gtk.Widget.realize.none
#COMMENT: a #GtkWidget
#NAME: rc_find_pixmap_in_path
#PARENT: Gtk.rc_find_pixmap_in_path
#COMMENT: the filename.
#NAME: get_display_name
#PARENT: Gtk.IconInfo
#COMMENT: This function is deprecated and always returns %NULL.
#NAME: id
#PARENT: Gtk.ComboBoxText.prepend.none
#COMMENT: a string ID for this value, or %NULL
#NAME: get_buffer
#PARENT: Gtk.TextView
#COMMENT: Returns the #GtkTextBuffer being displayed by this text view.
The reference count on the buffer is not incremented; the caller
of this function won’t own a new reference.
#NAME: device
#PARENT: Gtk.Widget.set_device_events.none
#COMMENT: a #GdkDevice
#NAME: use_preedit
#PARENT: Gtk.IMContext.set_use_preedit.none
#COMMENT: whether the IM context should use the preedit string.
#NAME: get_decorated
#PARENT: Gtk.Window.get_decorated
#COMMENT: %TRUE if the window has been set to have decorations
#NAME: get_child_at_index
#PARENT: Gtk.FlowBox.get_child_at_index
#COMMENT: the child widget, which will
    always be a #GtkFlowBoxChild
#NAME: object_ids
#PARENT: Gtk.Builder.add_objects_from_string.guint
#COMMENT: nul-terminated array of objects to build
#NAME: AppChooser
#PARENT: Gtk
#COMMENT: #GtkAppChooser is an interface that can be implemented by widgets which
allow the user to choose an application (typically for the purpose of
opening a file). The main objects that implement this interface are
#GtkAppChooserWidget, #GtkAppChooserDialog and #GtkAppChooserButton.

Applications are represented by GIO #GAppInfo objects here.
GIO has a concept of recommended and fallback applications for a
given content type. Recommended applications are those that claim
to handle the content type itself, while fallback also includes
applications that handle a more generic content type. GIO also
knows the default and last-used application for a given content
type. The #GtkAppChooserWidget provides detailed control over
whether the shown list of applications should include default,
recommended or fallback applications.

To obtain the application that has been selected in a #GtkAppChooser,
use gtk_app_chooser_get_app_info().
#NAME: event
#PARENT: Gtk.CellRenderer.start_editing.CellEditable
#COMMENT: a #GdkEvent
#NAME: get_relief
#PARENT: Gtk.Button.get_relief
#COMMENT: The current #GtkReliefStyle
#NAME: cell_editable
#PARENT: Gtk.CellEditableIface.start_editing.start_editing.none
#COMMENT: A #GtkCellEditable
#NAME: new_with_label
#PARENT: Gtk.CheckMenuItem
#COMMENT: Creates a new #GtkCheckMenuItem with a label.
#NAME: get_number_up_layout
#PARENT: Gtk.PrintSettings.get_number_up_layout
#COMMENT: layout of page in number-up mode
#NAME: values
#PARENT: Gtk.TreeStore.insert_with_valuesv.none
#COMMENT: an array of GValues
#NAME: get_title
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns the title of the widget.
#NAME: add_window
#PARENT: Gtk.WindowGroup
#COMMENT: Adds a window to a #GtkWindowGroup.
#NAME: attach_next_to
#PARENT: Gtk.Grid
#COMMENT: Adds a widget to the grid.

The widget is placed next to @sibling, on the side determined by
@side. When @sibling is %NULL, the widget is placed in row (for
left or right placement) or column 0 (for top or bottom placement),
at the end indicated by @side.

Attaching widgets labeled [1], [2], [3] with @sibling == %NULL and
@side == %GTK_POS_LEFT yields a layout of [3][2][1].
#NAME: show-week-numbers
#PARENT: Gtk.Calendar
#COMMENT: Determines whether week numbers are displayed.
#NAME: insert_page_menu
#PARENT: Gtk.Notebook.insert_page_menu
#COMMENT: the index (starting from 0) of the inserted
    page in the notebook
#NAME: state
#PARENT: Gtk.Widget.state-changed.none
#COMMENT: the previous state
#NAME: binding_entry_add_signal_from_string
#PARENT: Gtk
#COMMENT: Parses a signal description from @signal_desc and incorporates
it into @binding_set.

Signal descriptions may either bind a key combination to
one or more signals:
|[
  bind "key" {
    "signalname" (param, ...)
    ...
  }
]|

Or they may also unbind a key combination:
|[
  unbind "key"
]|

Key combinations must be in a format that can be parsed by
gtk_accelerator_parse().
#NAME: widget
#PARENT: Gtk.GestureMultiPress.new.Gesture
#COMMENT: a #GtkWidget
#NAME: load_icon_for_scale
#PARENT: Gtk.IconTheme.load_icon_for_scale
#COMMENT: the rendered icon; this may be
    a newly created icon or a new reference to an internal icon, so
    you must not modify the icon. Use g_object_unref() to release
    your reference to the icon. %NULL if the icon isn’t found.
#NAME: new
#PARENT: Gtk.CssProvider
#COMMENT: Returns a newly created #GtkCssProvider.
#NAME: insert_text
#PARENT: Gtk.EntryBuffer.insert_text
#COMMENT: The number of characters actually inserted.
#NAME: start_editing
#PARENT: Gtk.IconView.set_cursor.none
#COMMENT: %TRUE if the specified cell should start being edited.
#NAME: window
#PARENT: Gtk.Window.set_geometry_hints.none
#COMMENT: a #GtkWindow
#NAME: dialog
#PARENT: Gtk.Dialog.set_default_response.none
#COMMENT: a #GtkDialog
#NAME: buffer
#PARENT: Gtk.TextBuffer.insert_at_cursor.none
#COMMENT: a #GtkTextBuffer
#NAME: set_model
#PARENT: Gtk.TreeView
#COMMENT: Sets the model for a #GtkTreeView.  If the @tree_view already has a model
set, it will remove it before setting the new model.  If @model is %NULL,
then it will unset the old model.
#NAME: minimum_width
#PARENT: Gtk.CellAreaContextClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: location to store the minimum width,
    or %NULL
#NAME: get_last_updated_sequence
#PARENT: Gtk.Gesture
#COMMENT: Returns the #GdkEventSequence that was last updated on @gesture.
#NAME: entry
#PARENT: Gtk.Entry.set_max_width_chars.none
#COMMENT: a #GtkEntry
#NAME: reserve_toggle_size
#PARENT: Gtk.Menu.set_reserve_toggle_size.none
#COMMENT: whether to reserve size for toggles
#NAME: revealer
#PARENT: Gtk.Revealer.get_child_revealed.gboolean
#COMMENT: a #GtkRevealer
#NAME: selection
#PARENT: Gtk.selection_add_targets.none
#COMMENT: the selection
#NAME: font-activated
#PARENT: Gtk.FontChooser
#COMMENT: Emitted when a font is activated.
This usually happens when the user double clicks an item,
or an item is selected and the user presses one of the keys
Space, Shift+Space, Return or Enter.
#NAME: natural_width
#PARENT: Gtk.CellAreaContextClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: location to store the natural width,
    or %NULL
#NAME: first_button_text
#PARENT: Gtk.FileChooserDialog.new.Widget
#COMMENT: stock ID or text to go in the first button, or %NULL
#NAME: get_row_spacing
#PARENT: Gtk.IconView
#COMMENT: Returns the value of the ::row-spacing property.
#NAME: parent
#PARENT: Gtk.TreeStore.append.none
#COMMENT: A valid #GtkTreeIter, or %NULL
#NAME: STOCK_MEDIA_NEXT
#PARENT: Gtk
#COMMENT: The “Media Next” item and icon. The icon has an RTL variant.
#NAME: set_value
#PARENT: Gtk.TreeStore
#COMMENT: Sets the data in the cell specified by @iter and @column.
The type of @value must be convertible to the type of the
column.
#NAME: parent_class
#PARENT: Gtk.SeparatorMenuItemClass
#COMMENT: The parent class.
#NAME: end-user-action
#PARENT: Gtk.TextBuffer
#COMMENT: The ::end-user-action signal is emitted at the end of a single
user-visible operation on the #GtkTextBuffer.

See also:
gtk_text_buffer_end_user_action(),
gtk_text_buffer_insert_interactive(),
gtk_text_buffer_insert_range_interactive(),
gtk_text_buffer_delete_interactive(),
gtk_text_buffer_backspace(),
gtk_text_buffer_delete_selection(),
gtk_text_buffer_backspace().
#NAME: refetch
#PARENT: Gtk.AccelLabel.refetch
#COMMENT: always returns %FALSE.
#NAME: argc
#PARENT: Gtk.ModuleInitFunc.none
#COMMENT: GTK+ always passes %NULL for this argument
#NAME: get_section
#PARENT: Gtk.StyleContext.get_section
#COMMENT: %NULL or the section where value was defined
#NAME: n_properties
#PARENT: Gtk.ContainerClass.list_child_properties.GObject.ParamSpec
#COMMENT: location to return the number of child properties found
#NAME: accel-changed
#PARENT: Gtk.AccelGroup
#COMMENT: The accel-changed signal is emitted when an entry
is added to or removed from the accel group.

Widgets like #GtkAccelLabel which display an associated
accelerator should connect to this signal, and rebuild
their visual representation if the @accel_closure is theirs.
#NAME: new_with_mnemonic
#PARENT: Gtk.CheckButton
#COMMENT: Creates a new #GtkCheckButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the check button.
#NAME: item-padding
#PARENT: Gtk.IconView
#COMMENT: The item-padding property specifies the padding around each
of the icon view's item.
#NAME: path
#PARENT: Gtk.TreeRowReference.reordered.none
#COMMENT: the parent path of the reordered signal
#NAME: STOCK_INDEX
#PARENT: Gtk
#COMMENT: The “Index” item and icon.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_headers_clickable.gboolean
#COMMENT: A #GtkTreeView.
#NAME: new
#PARENT: Gtk.CellRendererPixbuf
#COMMENT: Creates a new #GtkCellRendererPixbuf. Adjust rendering
parameters using object properties. Object properties can be set
globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
can bind a property to a value in a #GtkTreeModel. For example, you
can bind the “pixbuf” property on the cell renderer to a pixbuf value
in the model, thus rendering a different image in each row of the
#GtkTreeView.
#NAME: get_stack
#PARENT: Gtk.StackSwitcher.get_stack
#COMMENT: the stack, or %NULL if
   none has been set explicitly.
#NAME: time
#PARENT: Gtk.Widget.drag-motion.gboolean
#COMMENT: the timestamp of the motion event
#NAME: foreach_func
#PARENT: Gtk.AccelMap.foreach_unfiltered.none
#COMMENT: function to be executed for each accel
               map entry
#NAME: set_page_increment
#PARENT: Gtk.Adjustment
#COMMENT: Sets the page increment of the adjustment.

See gtk_adjustment_set_lower() about how to compress multiple
emissions of the #GtkAdjustment::changed signal when setting multiple adjustment
properties.
#NAME: has-subtitle
#PARENT: Gtk.HeaderBar
#COMMENT: If %TRUE, reserve space for a subtitle, even if none
is currently set.
#NAME: str
#PARENT: Gtk.Label.set_text.none
#COMMENT: The text you want to set
#NAME: pop_animatable_region
#PARENT: Gtk.StyleContext
#COMMENT: Pops an animatable region from @context.
See gtk_style_context_push_animatable_region().
#NAME: filter
#PARENT: Gtk.FileFilter.filter
#COMMENT: %TRUE if the file should be displayed
#NAME: bar
#PARENT: Gtk.HeaderBar.get_title.utf8
#COMMENT: a #GtkHeaderBar
#NAME: get_snap_to_ticks
#PARENT: Gtk.SpinButton.get_snap_to_ticks
#COMMENT: %TRUE if values are snapped to the nearest step
#NAME: domain
#PARENT: Gtk.IMContextInfo
#COMMENT: Translation domain to be used with dgettext()
#NAME: iter
#PARENT: Gtk.TextIter.backward_word_starts.gboolean
#COMMENT: a #GtkTextIter
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.unref_node.unref_node.none
#COMMENT: a #GtkTreeModel
#NAME: device_is_shadowed
#PARENT: Gtk.Widget.device_is_shadowed
#COMMENT: %TRUE if there is an ongoing grab on @device
         by another #GtkWidget than @widget.
#NAME: get_frame_clock
#PARENT: Gtk.StyleContext
#COMMENT: Returns the #GdkFrameClock to which @context is attached.
#NAME: scroll_to_iter
#PARENT: Gtk.TextView.scroll_to_iter
#COMMENT: %TRUE if scrolling occurred
#NAME: x
#PARENT: Gtk.Widget.get_pointer.none
#COMMENT: return location for the X coordinate, or %NULL
#NAME: container
#PARENT: Gtk.ContainerClass.remove.remove.none
#COMMENT: a #GtkContainer
#NAME: start
#PARENT: Gtk.TextBufferClass.remove_tag.remove_tag.none
#COMMENT: one bound of range to be untagged
#NAME: widget
#PARENT: Gtk.Widget.get_app_paintable.gboolean
#COMMENT: a #GtkWidget
#NAME: y
#PARENT: Gtk.Widget.get_pointer.none
#COMMENT: return location for the Y coordinate, or %NULL
#NAME: chars
#PARENT: Gtk.DeleteType
#COMMENT: Delete characters.
#NAME: set_show_other
#PARENT: Gtk.AppChooserWidget
#COMMENT: Sets whether the app chooser should show applications
which are unrelated to the content type.
#NAME: shadow_type
#PARENT: Gtk.paint_flat_box.none
#COMMENT: the type of shadow to draw
#NAME: set_detail_func
#PARENT: Gtk.Calendar
#COMMENT: Installs a function which provides Pango markup with detail information
for each day. Examples for such details are holidays or appointments. That
information is shown below each day when #GtkCalendar:show-details is set.
A tooltip containing with full detail information is provided, if the entire
text should not fit into the details area, or if #GtkCalendar:show-details
is not set.

The size of the details area can be restricted by setting the
#GtkCalendar:detail-width-chars and #GtkCalendar:detail-height-rows
properties.
#NAME: set_image
#PARENT: Gtk.ImageMenuItem
#COMMENT: Sets the image of @image_menu_item to the given widget.
Note that it depends on the show-menu-images setting whether
the image will be displayed or not.
#NAME: get_icon_at_pos
#PARENT: Gtk.Entry
#COMMENT: Finds the icon at the given position and return its index. The
position’s coordinates are relative to the @entry’s top left corner.
If @x, @y doesn’t lie inside an icon, -1 is returned.
This function is intended for use in a #GtkWidget::query-tooltip
signal handler.
#NAME: tree_view
#PARENT: Gtk.TreeView.enable_model_drag_source.none
#COMMENT: a #GtkTreeView
#NAME: get_pango_fontmap
#PARENT: Gtk.PrintContext
#COMMENT: Returns a #PangoFontMap that is suitable for use
with the #GtkPrintContext.
#NAME: new
#PARENT: Gtk.Switch
#COMMENT: Creates a new #GtkSwitch widget.
#NAME: menu_button
#PARENT: Gtk.MenuButton.get_use_popover.gboolean
#COMMENT: a #GtkMenuButton
#NAME: overlay-scrolling
#PARENT: Gtk.ScrolledWindow
#COMMENT: Whether overlay scrolling is enabled or not. If it is, the
scrollbars are only added as traditional widgets when a mouse
is present. Otherwise, they are overlayed on top of the content,
as narrow indicators.
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_text.utf8
#COMMENT: a #GtkSelectionData
#NAME: buildable
#PARENT: Gtk.BuildableIface.custom_tag_start.custom_tag_start.gboolean
#COMMENT: a #GtkBuildable
#NAME: parent_class
#PARENT: Gtk.HandleBoxClass
#COMMENT: The parent class.
#NAME: renderer
#PARENT: Gtk.CellArea.remove_focus_sibling.none
#COMMENT: the #GtkCellRenderer expected to have focus
#NAME: dest_path
#PARENT: Gtk.TreeDragDestIface.row_drop_possible.row_drop_possible.gboolean
#COMMENT: destination row
#NAME: path
#PARENT: Gtk.IconTheme.add_resource_path.none
#COMMENT: a resource path
#NAME: iter
#PARENT: Gtk.TextIter.forward_to_tag_toggle.gboolean
#COMMENT: a #GtkTextIter
#NAME: widget_pointer
#PARENT: Gtk.Widget.destroyed.none
#COMMENT: address of a variable that contains @widget
#NAME: builder
#PARENT: Gtk.Builder.get_object.GObject.Object
#COMMENT: a #GtkBuilder
#NAME: single
#PARENT: Gtk.SelectionMode
#COMMENT: Zero or one element may be selected.
#NAME: argv
#PARENT: Gtk.ModuleInitFunc.none
#COMMENT: GTK+ always passes %NULL for this argument
#NAME: selection
#PARENT: Gtk.Widget.get_clipboard.Clipboard
#COMMENT: a #GdkAtom which identifies the clipboard
            to use. %GDK_SELECTION_CLIPBOARD gives the
            default clipboard. Another common value
            is %GDK_SELECTION_PRIMARY, which gives
            the primary X selection.
#NAME: set_local_only
#PARENT: Gtk.FileChooser
#COMMENT: Sets whether only local files can be selected in the
file selector. If @local_only is %TRUE (the default),
then the selected file or files are guaranteed to be
accessible through the operating systems native file
system and therefore the application only
needs to worry about the filename functions in
#GtkFileChooser, like gtk_file_chooser_get_filename(),
rather than the URI functions like
gtk_file_chooser_get_uri(),

On some systems non-native files may still be
available using the native filesystem via a userspace
filesystem (FUSE).
#NAME: get_style
#PARENT: Gtk.StyleProviderIface.get_style.get_style
#COMMENT: a #GtkStyleProperties containing the
style settings affecting @path
#NAME: window
#PARENT: Gtk.IMContextClass.set_client_window.set_client_window.none
#COMMENT: the client window. This may be %NULL to indicate
          that the previous client window no longer exists.
#NAME: title
#PARENT: Gtk.FontSelectionDialog.new.Widget
#COMMENT: the title of the dialog window
#NAME: label_widget
#PARENT: Gtk.Frame.set_label_widget.none
#COMMENT: the new label widget
#NAME: 
#PARENT: Gtk.MessageDialog.new_with_markup.Widget...
#COMMENT: arguments for @message_format
#NAME: parse_enum
#PARENT: Gtk.RcProperty.parse_enum
#COMMENT: %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GEnumValue.
#NAME: revealer
#PARENT: Gtk.Revealer.set_transition_duration.none
#COMMENT: a #GtkRevealer
#NAME: TreeIterCompareFunc
#PARENT: Gtk.TreeIterCompareFunc
#COMMENT: a negative integer, zero or a positive integer depending on whether
  @a sorts before, with or after @b
#NAME: x
#PARENT: Gtk.paint_option.none
#COMMENT: x origin of the rectangle to draw the option in
#NAME: fill
#PARENT: Gtk.Align
#COMMENT: stretch to fill all space if possible, center if
    no meaningful way to stretch
#NAME: aspect_frame
#PARENT: Gtk.AspectFrame.set.none
#COMMENT: a #GtkAspectFrame
#NAME: y
#PARENT: Gtk.paint_option.none
#COMMENT: y origin of the rectangle to draw the option in
#NAME: entry
#PARENT: Gtk.Entry.set_progress_pulse_step.none
#COMMENT: a #GtkEntry
#NAME: value
#PARENT: Gtk.TreeModelIface.get_value.get_value.none
#COMMENT: an empty #GValue to set
#NAME: x
#PARENT: Gtk.paint_diamond.none
#COMMENT: x origin of the rectangle to draw the diamond in
#NAME: top
#PARENT: Gtk.JunctionSides
#COMMENT: Element connects on the top side.
#NAME: y
#PARENT: Gtk.paint_diamond.none
#COMMENT: y origin of the rectangle to draw the diamond in
#NAME: icon_info
#PARENT: Gtk.IconInfo.is_symbolic.gboolean
#COMMENT: a #GtkIconInfo
#NAME: exists
#PARENT: Gtk.RecentInfo.exists
#COMMENT: %TRUE if the resource exists
#NAME: revealer
#PARENT: Gtk.Revealer.get_transition_duration.guint
#COMMENT: a #GtkRevealer
#NAME: set_direction
#PARENT: Gtk.StyleContext
#COMMENT: Sets the reading direction for rendering purposes.

If you are using a #GtkStyleContext returned from
gtk_widget_get_style_context(), you do not need to
call this yourself.
#NAME: new_from_file
#PARENT: Gtk.Builder
#COMMENT: Builds the [GtkBuilder UI definition][BUILDER-UI]
in the file @filename.

If there is an error opening the file or parsing the description then
the program will be aborted.  You should only ever attempt to parse
user interface descriptions that are shipped as part of your program.
#NAME: set_child_non_homogeneous
#PARENT: Gtk.ButtonBox
#COMMENT: Sets whether the child is exempted from homogeous sizing.
#NAME: select_filename
#PARENT: Gtk.FileChooser.select_filename
#COMMENT: Not useful.

See also: gtk_file_chooser_set_filename()
#NAME: new_merge_id
#PARENT: Gtk.UIManager.new_merge_id
#COMMENT: an unused merge id.
#NAME: clipboard
#PARENT: Gtk.ClipboardRichTextReceivedFunc.none
#COMMENT: the #GtkClipboard
#NAME: ClipboardImageReceivedFunc
#PARENT: Gtk
#COMMENT: A function to be called when the results of gtk_clipboard_request_image()
are received, or when the request fails.
#NAME: append_column
#PARENT: Gtk.TreeView
#COMMENT: Appends @column to the list of columns. If @tree_view has “fixed_height”
mode enabled, then @column must have its “sizing” property set to be
GTK_TREE_VIEW_COLUMN_FIXED.
#NAME: action_group
#PARENT: Gtk.ActionGroup.add_action_with_accel.none
#COMMENT: the action group
#NAME: render
#PARENT: Gtk.GLArea
#COMMENT: The ::render signal is emitted every time the contents
of the #GtkGLArea should be redrawn.

The @context is bound to the @area prior to emitting this function,
and the buffers are painted to the window once the emission terminates.
#NAME: notebook
#PARENT: Gtk.Notebook.append_page_menu.gint
#COMMENT: a #GtkNotebook
#NAME: spin_button
#PARENT: Gtk.SpinButton.get_value_as_int.gint
#COMMENT: a #GtkSpinButton
#NAME: buffer
#PARENT: Gtk.TextBuffer.delete_mark_by_name.none
#COMMENT: a #GtkTextBuffer
#NAME: FontFilterFunc
#PARENT: Gtk.FontFilterFunc
#COMMENT: %TRUE if the font should be displayed
#NAME: get_current_item
#PARENT: Gtk.RecentChooser
#COMMENT: Gets the #GtkRecentInfo currently selected by @chooser.
#NAME: iter
#PARENT: Gtk.TreeStore.is_ancestor.gboolean
#COMMENT: A valid #GtkTreeIter
#NAME: path
#PARENT: Gtk.WidgetPath.prepend_type.none
#COMMENT: a #GtkWidgetPath
#NAME: get_min_content_height
#PARENT: Gtk.ScrolledWindow.get_min_content_height
#COMMENT: the minimal content height
#NAME: color_name
#PARENT: Gtk.ThemingEngine.lookup_color.gboolean
#COMMENT: color name to lookup
#NAME: group
#PARENT: Gtk.ToolItemGroup.set_label_widget.none
#COMMENT: a #GtkToolItemGroup
#NAME: get_clipboard
#PARENT: Gtk.Widget
#COMMENT: Returns the clipboard object for the given selection to
be used with @widget. @widget must have a #GdkDisplay
associated with it, so must be attached to a toplevel
window.
#NAME: secondary_cursor
#PARENT: Gtk.Widget.override_cursor.none
#COMMENT: the color to use for secondary cursor (does not
    need to be allocated), or %NULL to undo the effect of previous
    calls to of gtk_widget_override_cursor().
#NAME: window
#PARENT: Gtk.Window.set_skip_taskbar_hint.none
#COMMENT: a #GtkWindow
#NAME: STYLE_CLASS_IMAGE
#PARENT: Gtk
#COMMENT: A CSS class defining an image, such as the icon in an entry.

This is used when rendering icons in #GtkEntry.
#NAME: child_property
#PARENT: Gtk.Widget.child-notify.none
#COMMENT: the #GParamSpec of the changed child property
#NAME: pack_start
#PARENT: Gtk.CellAreaBox
#COMMENT: Adds @renderer to @box, packed with reference to the start of @box.

The @renderer is packed after any other #GtkCellRenderer packed
with reference to the start of @box.
#NAME: buffer
#PARENT: Gtk.EntryBuffer.get_max_length.gint
#COMMENT: a #GtkEntryBuffer
#NAME: accel_group
#PARENT: Gtk.AccelGroup.disconnect_key.gboolean
#COMMENT: the accelerator group to install an accelerator in
#NAME: STOCK_MEDIA_PAUSE
#PARENT: Gtk
#COMMENT: The “Media Pause” item and icon.
#NAME: get_has_selection
#PARENT: Gtk.TextBuffer.get_has_selection
#COMMENT: %TRUE if the there is text selected
#NAME: cr
#PARENT: Gtk.render_icon.none
#COMMENT: a #cairo_t
#NAME: double
#PARENT: Gtk.BorderStyle
#COMMENT: Two parallel lines with some space between them
#NAME: new_with_style_context
#PARENT: Gtk.NumerableIcon
#COMMENT: Creates a new #GtkNumerableIcon which will themed according
to the passed #GtkStyleContext. This is a convenience constructor
that calls gtk_numerable_icon_set_style_context() internally.
#NAME: keyval
#PARENT: Gtk.accelerator_valid.gboolean
#COMMENT: a GDK keyval
#NAME: tree_model_sort
#PARENT: Gtk.TreeModelSort.reset_default_sort_func.none
#COMMENT: A #GtkTreeModelSort
#NAME: widget
#PARENT: Gtk.Widget.reset_rc_styles.none
#COMMENT: a #GtkWidget.
#NAME: set_text
#PARENT: Gtk.Entry
#COMMENT: Sets the text in the widget to the given
value, replacing the current contents.

See gtk_entry_buffer_set_text().
#NAME: remove_page
#PARENT: Gtk.Notebook
#COMMENT: Removes a page from the notebook given its index
in the notebook.
#NAME: get_vadjustment
#PARENT: Gtk.ScrolledWindow
#COMMENT: Returns the vertical scrollbar’s adjustment, used to connect the
vertical scrollbar to the child widget’s vertical scroll functionality.
#NAME: bound
#PARENT: Gtk.TextBuffer.select_range.none
#COMMENT: where to put the “selection_bound” mark
#NAME: lookup_icon
#PARENT: Gtk.IconTheme.lookup_icon
#COMMENT: a #GtkIconInfo object
    containing information about the icon, or %NULL if the
    icon wasn’t found.
#NAME: top
#PARENT: Gtk.UIManager.add_ui.none
#COMMENT: if %TRUE, the UI element is added before its siblings, otherwise it
  is added after its siblings.
#NAME: widget
#PARENT: Gtk.Widget.get_has_tooltip.gboolean
#COMMENT: a #GtkWidget
#NAME: drag-failed
#PARENT: Gtk.Widget
#COMMENT: The ::drag-failed signal is emitted on the drag source when a drag has
failed. The signal handler may hook custom code to handle a failed DND
operation based on the type of error, it returns %TRUE is the failure has
been already handled (not showing the default "drag operation failed"
animation), otherwise it returns %FALSE.
#NAME: update_buttons_state
#PARENT: Gtk.Assistant
#COMMENT: Forces @assistant to recompute the buttons state.

GTK+ automatically takes care of this in most situations,
e.g. when the user goes to a different page, or when the
visibility or completeness of a page changes.

One situation where it can be necessary to call this
function is when changing a value on the current page
affects the future page flow of the assistant.
#NAME: other_widget
#PARENT: Gtk.TargetFlags
#COMMENT: If this is set, the target will not be selected
  for drags withing a single widget.
#NAME: load_symbolic_async
#PARENT: Gtk.IconInfo
#COMMENT: Asynchronously load, render and scale a symbolic icon previously looked up
from the icon theme using gtk_icon_theme_lookup_icon().

For more details, see gtk_icon_info_load_symbolic() which is the synchronous
version of this call.
#NAME: add_button
#PARENT: Gtk.InfoBar.add_button
#COMMENT: the #GtkButton widget
that was added
#NAME: get_sort_type
#PARENT: Gtk.RecentChooser
#COMMENT: Gets the value set by gtk_recent_chooser_set_sort_type().
#NAME: set_resolution_xy
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
%GTK_PRINT_SETTINGS_RESOLUTION_X and
%GTK_PRINT_SETTINGS_RESOLUTION_Y.
#NAME: hadjustment
#PARENT: Gtk.ScrolledWindow.new.Widget
#COMMENT: horizontal adjustment
#NAME: is_rubber_banding_active
#PARENT: Gtk.TreeView.is_rubber_banding_active
#COMMENT: %TRUE if a rubber banding operation is currently being
done in @tree_view.
#NAME: sequence
#PARENT: Gtk.Gesture.get_last_event.Gdk.Event
#COMMENT: a #GdkEventSequence
#NAME: new_radial
#PARENT: Gtk.Gradient
#COMMENT: Creates a new radial gradient along the two circles defined by (x0, y0, radius0) and
(x1, y1, radius1). Before using the gradient a number of stop colors must be added
through gtk_gradient_add_color_stop().
#NAME: load_symbolic_for_context
#PARENT: Gtk.IconInfo.load_symbolic_for_context
#COMMENT: a #GdkPixbuf representing the loaded icon
#NAME: state
#PARENT: Gtk.ThemingEngine.get_padding.none
#COMMENT: state to retrieve the padding for
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_x11_window_id.guint32
#COMMENT: a #GtkStatusIcon
#NAME: rtl
#PARENT: Gtk.TextDirection
#COMMENT: Right to left text direction.
#NAME: context
#PARENT: Gtk.GLArea
#COMMENT: The #GdkGLContext used by the #GtkGLArea widget.

The #GtkGLArea widget is responsible for creating the #GdkGLContext
instance. If you need to render with other kinds of buffers (stencil,
depth, etc), use render buffers.
#NAME: quark
#PARENT: Gtk.FileChooserError
#COMMENT: Registers an error quark for #GtkFileChooser if necessary.
#NAME: child_property
#PARENT: Gtk.Container.child_notify.none
#COMMENT: the name of a child property installed on
    the class of @container
#NAME: add_with_properties
#PARENT: Gtk.Container
#COMMENT: Adds @widget to @container, setting child properties at the same time.
See gtk_container_add() and gtk_container_child_set() for more details.
#NAME: KeySnoopFunc
#PARENT: Gtk.KeySnoopFunc
#COMMENT: %TRUE to stop further processing of @event, %FALSE to continue.
#NAME: gicon
#PARENT: Gtk.StatusIcon
#COMMENT: The #GIcon displayed in the #GtkStatusIcon. For themed icons,
the image will be updated automatically if the theme changes.
#NAME: is_toplevel
#PARENT: Gtk.Widget
#COMMENT: Determines whether @widget is a toplevel widget.

Currently only #GtkWindow and #GtkInvisible (and out-of-process
#GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
widget.
#NAME: event
#PARENT: Gtk.CellEditableIface.start_editing.start_editing.none
#COMMENT: A #GdkEvent, or %NULL
#NAME: notebook
#PARENT: Gtk.Notebook.append_page.gint
#COMMENT: a #GtkNotebook
#NAME: text
#PARENT: Gtk.Tooltip.set_text.none
#COMMENT: a text string or %NULL
#NAME: buffer
#PARENT: Gtk.EntryBufferClass.insert_text.insert_text.guint
#COMMENT: a #GtkEntryBuffer
#NAME: color
#PARENT: Gtk.Gradient.add_color_stop.none
#COMMENT: color to use
#NAME: size_group
#PARENT: Gtk.SizeGroup.set_ignore_hidden.none
#COMMENT: a #GtkSizeGroup
#NAME: start_pos
#PARENT: Gtk.Editable.set_selection_bounds.none
#COMMENT: start of region
#NAME: drag_dest_get_track_motion
#PARENT: Gtk.Widget
#COMMENT: Returns whether the widget has been configured to always
emit #GtkWidget::drag-motion signals.
#NAME: touch_only
#PARENT: Gtk.GestureSingle.set_touch_only.none
#COMMENT: whether @gesture handles only touch events
#NAME: button
#PARENT: Gtk.Button.get_relief.ReliefStyle
#COMMENT: The #GtkButton you want the #GtkReliefStyle from.
#NAME: property_id
#PARENT: Gtk.ContainerClass.install_child_property.none
#COMMENT: the id for the property
#NAME: Justification
#PARENT: Gtk
#COMMENT: Used for justifying the text inside a #GtkLabel widget. (See also
#GtkAlignment).
#NAME: palette
#PARENT: Gtk.ToolPalette.set_expand.none
#COMMENT: a #GtkToolPalette
#NAME: window
#PARENT: Gtk.Window.get_size.none
#COMMENT: a #GtkWindow
#NAME: fontchooser
#PARENT: Gtk.FontChooser.get_font.utf8
#COMMENT: a #GtkFontChooser
#NAME: cell
#PARENT: Gtk.CellRenderer.get_state.StateFlags
#COMMENT: a #GtkCellRenderer, or %NULL
#NAME: group_name
#PARENT: Gtk.PaperSize.new_from_key_file.PaperSize
#COMMENT: the name ofthe group in the key file to read,
    or %NULL to read the first group
#NAME: set_hide_titlebar_when_maximized
#PARENT: Gtk.Window
#COMMENT: If @setting is %TRUE, then @window will request that it’s titlebar
should be hidden when maximized.
This is useful for windows that don’t convey any information other
than the application name in the titlebar, to put the available
screen space to better use. If the underlying window system does not
support the request, the setting will not have any effect.

Note that custom titlebars set with gtk_window_set_titlebar() are
not affected by this. The application is in full control of their
content and visibility anyway.
#NAME: display_name
#PARENT: Gtk.FileFilterFlags
#COMMENT: the string that will be used to
  display the file in the file chooser
#NAME: unit
#PARENT: Gtk.PaperSize.get_width.gdouble
#COMMENT: the unit for the return value, not %GTK_UNIT_NONE
#NAME: pixbuf
#PARENT: Gtk.IconInfo.new_for_pixbuf.IconInfo
#COMMENT: the pixbuf to wrap in a #GtkIconInfo
#NAME: buffer
#PARENT: Gtk.EntryBuffer.delete_text.guint
#COMMENT: a #GtkEntryBuffer
#NAME: notebook
#PARENT: Gtk.Notebook.popup_enable.none
#COMMENT: a #GtkNotebook
#NAME: copy
#PARENT: Gtk.TextIter.copy
#COMMENT: a copy of the @iter, free with gtk_text_iter_free()
#NAME: color
#PARENT: Gtk.ColorChooserInterface.set_rgba.set_rgba.none
#COMMENT: the new color
#NAME: get_selected_item
#PARENT: Gtk.MenuShell
#COMMENT: Gets the currently selected item.
#NAME: STOCK_ZOOM_IN
#PARENT: Gtk
#COMMENT: The “Zoom In” item and icon.
#NAME: set_screen
#PARENT: Gtk.StatusIcon
#COMMENT: Sets the #GdkScreen where @status_icon is displayed; if
the icon is already mapped, it will be unmapped, and
then remapped on the new screen.
#NAME: get_spacing
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns the spacing of @tree_column.
#NAME: Border
#PARENT: Gtk
#COMMENT: A struct that specifies a border around a rectangular area
that can be of different width on each side.
#NAME: get_nth_page
#PARENT: Gtk.Assistant.get_nth_page
#COMMENT: the child widget, or %NULL
    if @page_num is out of bounds
#NAME: stock_id
#PARENT: Gtk.StatusIcon.new_from_stock.StatusIcon
#COMMENT: a stock icon id
#NAME: direction
#PARENT: Gtk.Style.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a text direction
#NAME: set_template
#PARENT: Gtk.WidgetClass
#COMMENT: This should be called at class initialization time to specify
the GtkBuilder XML to be used to extend a widget.

For convenience, gtk_widget_class_set_template_from_resource() is also provided.

Note that any class that installs templates must call gtk_widget_init_template()
in the widget’s instance initializer.
#NAME: controller
#PARENT: Gtk.EventController.handle_event.gboolean
#COMMENT: a #GtkEventController
#NAME: new
#PARENT: Gtk.CheckMenuItem
#COMMENT: Creates a new #GtkCheckMenuItem.
#NAME: automatic
#PARENT: Gtk.PolicyType
#COMMENT: The scrollbar will appear and disappear as necessary.
 For example, when all of a #GtkTreeView can not be seen.
#NAME: set_monospace
#PARENT: Gtk.TextView
#COMMENT: Sets the #GtkTextView:monospace property, which
indicates that the text view should use monospace
fonts.
#NAME: ThemingEngine
#PARENT: Gtk
#COMMENT: #GtkThemingEngine was the object used for rendering themed content
in GTK+ widgets. It used to allow overriding GTK+'s default
implementation of rendering functions by allowing engines to be
loaded as modules.

#GtkThemingEngine has been deprecated in GTK+ 3.14 and will be
ignored for rendering. The advancements in CSS theming are good
enough to allow themers to achieve their goals without the need
to modify source code.
#NAME: iter_get_sibling_index
#PARENT: Gtk.WidgetPath
#COMMENT: Returns the index into the list of siblings for the element at @pos as
returned by gtk_widget_path_iter_get_siblings(). If that function would
return %NULL because the element at @pos has no siblings, this function
will return 0.
#NAME: check_menu_item
#PARENT: Gtk.CheckMenuItem.get_inconsistent.gboolean
#COMMENT: a #GtkCheckMenuItem
#NAME: assistant
#PARENT: Gtk.Assistant.get_page_side_image.GdkPixbuf.Pixbuf
#COMMENT: a #GtkAssistant
#NAME: get_iter_at_line_offset
#PARENT: Gtk.TextBuffer
#COMMENT: Obtains an iterator pointing to @char_offset within the given
line. The @char_offset must exist, offsets off the end of the line
are not allowed. Note characters, not bytes;
UTF-8 may encode one character as multiple bytes.
#NAME: end
#PARENT: Gtk.TextBuffer.remove_all_tags.none
#COMMENT: other bound of range to be untagged
#NAME: get_headers_clickable
#PARENT: Gtk.TreeView.get_headers_clickable
#COMMENT: %TRUE if all header columns are clickable, otherwise %FALSE
#NAME: window-state-event
#PARENT: Gtk.Widget.window-state-event
#COMMENT: %TRUE to stop other handlers from being invoked for the
  event. %FALSE to propagate the event further.
#NAME: cell_area
#PARENT: Gtk.CellArea.activate.gboolean
#COMMENT: the size and location of @area relative to @widget’s allocation
#NAME: flags
#PARENT: Gtk.CellArea.activate_cell.gboolean
#COMMENT: the #GtkCellRendererState for @renderer
#NAME: width
#PARENT: Gtk.PaperSize.set_size.none
#COMMENT: the new width in units of @unit
#NAME: path_length
#PARENT: Gtk.Widget.class_path.none
#COMMENT: location to store the length of the
    class path, or %NULL
#NAME: set_tooltip_markup
#PARENT: Gtk.Widget
#COMMENT: Sets @markup as the contents of the tooltip, which is marked up with
 the [Pango text markup language][PangoMarkupFormat].

This function will take care of setting #GtkWidget:has-tooltip to %TRUE
and of the default handler for the #GtkWidget::query-tooltip signal.

See also the #GtkWidget:tooltip-markup property and
gtk_tooltip_set_markup().
#NAME: get_active
#PARENT: Gtk.CellRendererToggle.get_active
#COMMENT: %TRUE if the cell renderer is active.
#NAME: application
#PARENT: Gtk.AppChooserWidget.populate-popup.none
#COMMENT: the current #GAppInfo
#NAME: scrollable
#PARENT: Gtk.Scrollable.get_vadjustment.Adjustment
#COMMENT: a #GtkScrollable
#NAME: climb_rate
#PARENT: Gtk.SpinButton.configure.none
#COMMENT: the new climb rate
#NAME: format
#PARENT: Gtk.TextBuffer.deserialize.gboolean
#COMMENT: the rich text format to use for deserializing
#NAME: len
#PARENT: Gtk.TextBuffer.insert_interactive.gboolean
#COMMENT: length of text in bytes, or -1
#NAME: iter
#PARENT: Gtk.TextIter.get_line_offset.gint
#COMMENT: an iterator
#NAME: use_align
#PARENT: Gtk.TextView.scroll_to_iter.gboolean
#COMMENT: whether to use alignment arguments (if %FALSE,
   just get the mark onscreen)
#NAME: get_model
#PARENT: Gtk.TreeModelSort
#COMMENT: Returns the model the #GtkTreeModelSort is sorting.
#NAME: context
#PARENT: Gtk.render_slider.none
#COMMENT: a #GtkStyleContext
#NAME: drag_source_add_image_targets
#PARENT: Gtk.Widget
#COMMENT: Add the writable image targets supported by #GtkSelectionData to
the target list of the drag source. The targets
are added with @info = 0. If you need another value,
use gtk_target_list_add_image_targets() and
gtk_drag_source_set_target_list().
#NAME: set_current_folder_uri
#PARENT: Gtk.FileChooser.set_current_folder_uri
#COMMENT: %TRUE if the folder could be changed successfully, %FALSE
otherwise.
#NAME: icon_view
#PARENT: Gtk.IconView.get_text_column.gint
#COMMENT: A #GtkIconView.
#NAME: entry
#PARENT: Gtk.Entry.get_inner_border.Border
#COMMENT: a #GtkEntry
#NAME: get_activatable
#PARENT: Gtk.ListBoxRow.get_activatable
#COMMENT: %TRUE if the row is activatable
#NAME: get_no_show_all
#PARENT: Gtk.Widget.get_no_show_all
#COMMENT: the current value of the “no-show-all” property.
#NAME: leave-notify-event
#PARENT: Gtk.Widget
#COMMENT: The ::leave-notify-event will be emitted when the pointer leaves
the @widget's window.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_LEAVE_NOTIFY_MASK mask.

This signal will be sent to the grab widget if there is one.
#NAME: x
#PARENT: Gtk.paint_resize_grip.none
#COMMENT: the x origin of the rectangle in which to draw the resize grip
#NAME: xpad
#PARENT: Gtk.CellRenderer.set_padding.none
#COMMENT: the x padding of the cell renderer
#NAME: chooser
#PARENT: Gtk.FileChooser.get_do_overwrite_confirmation.gboolean
#COMMENT: a #GtkFileChooser
#NAME: new_literal
#PARENT: Gtk.SymbolicColor.new_literal
#COMMENT: a newly created #GtkSymbolicColor
#NAME: set_style
#PARENT: Gtk.Widget
#COMMENT: Used to set the #GtkStyle for a widget (@widget->style). Since
GTK 3, this function does nothing, the passed in style is ignored.
#NAME: y
#PARENT: Gtk.paint_resize_grip.none
#COMMENT: the y origin of the rectangle in which to draw the resize grip
#NAME: value
#PARENT: Gtk.RcProperty
#COMMENT: field similar to one found in #GtkSettingsValue
#NAME: margin-right
#PARENT: Gtk.Widget
#COMMENT: Margin on right side of widget.

This property adds margin outside of the widget's normal size
request, the margin will be added in addition to the size from
gtk_widget_set_size_request() for example.
#NAME: uninhibit
#PARENT: Gtk.Application
#COMMENT: Removes an inhibitor that has been established with gtk_application_inhibit().
Inhibitors are also cleared when the application exits.
#NAME: needs_redraws
#PARENT: Gtk.Container.set_reallocate_redraws.none
#COMMENT: the new value for the container’s @reallocate_redraws flag
#NAME: get_drop_index
#PARENT: Gtk.Toolbar.get_drop_index
#COMMENT: The position corresponding to the point (@x, @y) on the toolbar.
#NAME: valid
#PARENT: Gtk.TreeRowReference.valid
#COMMENT: %TRUE if @reference points to a valid path
#NAME: get_location
#PARENT: Gtk.PlacesSidebar.get_location
#COMMENT: a GFile with the selected location, or #NULL if nothing is visually
selected.
#NAME: title
#PARENT: Gtk.StatusIcon.set_title.none
#COMMENT: the title
#NAME: iter_get_name
#PARENT: Gtk.WidgetPath
#COMMENT: Returns the name corresponding to the widget found at
the position @pos in the widget hierarchy defined by
@path
#NAME: new_with_area
#PARENT: Gtk.IconView
#COMMENT: Creates a new #GtkIconView widget using the
specified @area to layout cells inside the icons.
#NAME: get_window
#PARENT: Gtk.TextView.get_window
#COMMENT: a #GdkWindow, or %NULL
#NAME: buffer
#PARENT: Gtk.targets_include_rich_text.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: child
#PARENT: Gtk.MenuShell.prepend.none
#COMMENT: The #GtkMenuItem to add
#NAME: key_file
#PARENT: Gtk.PaperSize.new_from_key_file.PaperSize
#COMMENT: the #GKeyFile to retrieve the papersize from
#NAME: popup
#PARENT: Gtk.ScaleButton
#COMMENT: The ::popup signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to popup the scale widget.

The default bindings for this signal are Space, Enter and Return.
#NAME: table
#PARENT: Gtk.Table.get_col_spacing.guint
#COMMENT: a #GtkTable
#NAME: action
#PARENT: Gtk.ActionGroup.connect-proxy.none
#COMMENT: the action
#NAME: new_with_area_and_entry
#PARENT: Gtk.ComboBox
#COMMENT: Creates a new empty #GtkComboBox with an entry.

The new combo box will use @area to layout cells.
#NAME: get_path
#PARENT: Gtk.Widget
#COMMENT: Returns the #GtkWidgetPath representing @widget, if the widget
is not connected to a toplevel widget, a partial path will be
created.
#NAME: set_accessible_role
#PARENT: Gtk.WidgetClass
#COMMENT: Sets the default #AtkRole to be set on accessibles created for
widgets of @widget_class. Accessibles may decide to not honor this
setting if their role reporting is more refined. Calls to
gtk_widget_class_set_accessible_type() will reset this value.

In cases where you want more fine-grained control over the role of
accessibles created for @widget_class, you should provide your own
accessible type and use gtk_widget_class_set_accessible_type()
instead.

If @role is #ATK_ROLE_INVALID, the default role will not be changed
and the accessible’s default role will be used instead.

This function should only be called from class init functions of widgets.
#NAME: new_first
#PARENT: Gtk.TreePath
#COMMENT: Creates a new #GtkTreePath-struct.

The string representation of this path is “0”.
#NAME: width
#PARENT: Gtk.render_slider.none
#COMMENT: rectangle width
#NAME: area
#PARENT: Gtk.CellArea.get_edit_widget.CellEditable
#COMMENT: a #GtkCellArea
#NAME: remove_offset_value
#PARENT: Gtk.LevelBar
#COMMENT: Removes an offset marker previously added with
gtk_level_bar_add_offset_value().
#NAME: set_export_filename
#PARENT: Gtk.PrintOperation
#COMMENT: Sets up the #GtkPrintOperation to generate a file instead
of showing the print dialog. The indended use of this function
is for implementing “Export to PDF” actions. Currently, PDF
is the only supported format.

“Print to PDF” support is independent of this and is done
by letting the user pick the “Print to PDF” item from the list
of printers in the print dialog.
#NAME: uri
#PARENT: Gtk.RecentFilterFlags
#COMMENT: the URI of the file being tested
#NAME: tree_model_sort
#PARENT: Gtk.TreeModelSort.convert_child_path_to_path.TreePath
#COMMENT: A #GtkTreeModelSort
#NAME: title
#PARENT: Gtk.TreeViewColumn.set_title.none
#COMMENT: The title of the @tree_column.
#NAME: CalendarDetailFunc
#PARENT: Gtk.CalendarDetailFunc
#COMMENT: Newly allocated string with Pango markup with details
for the specified day, or %NULL.
#NAME: no_spellcheck
#PARENT: Gtk.InputHints
#COMMENT: Suggest not checking for typos
#NAME: group
#PARENT: Gtk.RadioMenuItem.new_with_mnemonic_from_widget.Widget
#COMMENT: An existing #GtkRadioMenuItem
#NAME: x
#PARENT: Gtk.Widget.drag-drop.gboolean
#COMMENT: the x coordinate of the current cursor position
#NAME: output_bin
#PARENT: Gtk.PrintSettings.set_output_bin.none
#COMMENT: the output bin
#NAME: paragraph-background-rgba
#PARENT: Gtk.TextTag
#COMMENT: The paragraph background color as a #GdkRGBA.
#NAME: y
#PARENT: Gtk.Widget.drag-drop.gboolean
#COMMENT: the y coordinate of the current cursor position
#NAME: ring_width
#PARENT: Gtk.HSV.get_metrics.none
#COMMENT: Return value for the width of the hue ring
#NAME: settings
#PARENT: Gtk.PrintSettings.set_output_bin.none
#COMMENT: a #GtkPrintSettings
#NAME: widget
#PARENT: Gtk.Widget.get_hexpand_set.gboolean
#COMMENT: the widget
#NAME: new
#PARENT: Gtk.GestureMultiPress.new
#COMMENT: a newly created #GtkGestureMultiPress
#NAME: row-deleted
#PARENT: Gtk.TreeModel
#COMMENT: This signal is emitted when a row has been deleted.

Note that no iterator is passed to the signal handler,
since the row is already deleted.

This should be called by models after a row has been removed.
The location pointed to by @path should be the location that
the row previously was at. It may not be a valid location anymore.
#NAME: filter
#PARENT: Gtk.RecentFilter.add_custom.none
#COMMENT: a #GtkRecentFilter
#NAME: new
#PARENT: Gtk.CheckButton
#COMMENT: Creates a new #GtkCheckButton.
#NAME: new_from_icon_name
#PARENT: Gtk.Image.new_from_icon_name
#COMMENT: a new #GtkImage displaying the themed icon
#NAME: group
#PARENT: Gtk.RadioMenuItem.set_group.none
#COMMENT: the new group, or %NULL.
#NAME: transition
#PARENT: Gtk.Stack.set_transition_type.none
#COMMENT: the new transition type
#NAME: parent
#PARENT: Gtk.TreeStore.reorder.none
#COMMENT: A #GtkTreeIter, or %NULL
#NAME: set_attached_to
#PARENT: Gtk.Window
#COMMENT: Marks @window as attached to @attach_widget. This creates a logical binding
between the window and the widget it belongs to, which is used by GTK+ to
propagate information such as styling or accessibility to @window as if it
was a children of @attach_widget.

Examples of places where specifying this relation is useful are for instance
a #GtkMenu created by a #GtkComboBox, a completion popup window
created by #GtkEntry or a typeahead search entry created by #GtkTreeView.

Note that this function should not be confused with
gtk_window_set_transient_for(), which specifies a window manager relation
between two toplevels instead.

Passing %NULL for @attach_widget detaches the window.
#NAME: detail
#PARENT: Gtk.paint_extension.none
#COMMENT: a style detail
#NAME: background_area
#PARENT: Gtk.CellRendererClass.activate.activate.gboolean
#COMMENT: background area as passed to gtk_cell_renderer_render()
#NAME: direction
#PARENT: Gtk.TextAttributes
#COMMENT: #GtkTextDirection for text.
#NAME: get_text
#PARENT: Gtk.EntryBuffer
#COMMENT: Retrieves the contents of the buffer.

The memory pointer returned by this call will not change
unless this object emits a signal, or is finalized.
#NAME: new_with_style_context
#PARENT: Gtk.NumerableIcon.new_with_style_context
#COMMENT: a new #GIcon
#NAME: sort_func
#PARENT: Gtk.RecentChooserIface.set_sort_func.set_sort_func.none
#COMMENT: the comparison function
#NAME: STOCK_HELP
#PARENT: Gtk
#COMMENT: The “Help” item and icon.
#NAME: window
#PARENT: Gtk.Window.get_default_widget.Widget
#COMMENT: a #GtkWindow
#NAME: buildable
#PARENT: Gtk.BuildableIface.get_name.get_name.utf8
#COMMENT: a #GtkBuildable
#NAME: set_window
#PARENT: Gtk.Gesture
#COMMENT: Sets a specific window to receive events about, so @gesture
will effectively handle only events targeting @window, or
a child of it. @window must pertain to gtk_event_controller_get_widget().
#NAME: Builder
#PARENT: Gtk
#COMMENT: A GtkBuilder is an auxiliary object that reads textual descriptions
of a user interface and instantiates the described objects. To create
a GtkBuilder from a user interface description, call
gtk_builder_new_from_file(), gtk_builder_new_from_resource() or
gtk_builder_new_from_string().

In the (unusual) case that you want to add user interface
descriptions from multiple sources to the same GtkBuilder you can
call gtk_builder_new() to get an empty builder and populate it by
(multiple) calls to gtk_builder_add_from_file(),
gtk_builder_add_from_resource() or gtk_builder_add_from_string().

A GtkBuilder holds a reference to all objects that it has constructed
and drops these references when it is finalized. This finalization can
cause the destruction of non-widget objects or widgets which are not
contained in a toplevel window. For toplevel windows constructed by a
builder, it is the responsibility of the user to call gtk_widget_destroy()
to get rid of them and all the widgets they contain.

The functions gtk_builder_get_object() and gtk_builder_get_objects()
can be used to access the widgets in the interface by the names assigned
to them inside the UI description. Toplevel windows returned by these
functions will stay around until the user explicitly destroys them
with gtk_widget_destroy(). Other widgets will either be part of a
larger hierarchy constructed by the builder (in which case you should
not have to worry about their lifecycle), or without a parent, in which
case they have to be added to some container to make use of them.
Non-widget objects need to be reffed with g_object_ref() to keep them
beyond the lifespan of the builder.

The function gtk_builder_connect_signals() and variants thereof can be
used to connect handlers to the named signals in the description.

# GtkBuilder UI Definitions # {#BUILDER-UI}

GtkBuilder parses textual descriptions of user interfaces which are
specified in an XML format which can be roughly described by the
RELAX NG schema below. We refer to these descriptions as “GtkBuilder
UI definitions” or just “UI definitions” if the context is clear.
Do not confuse GtkBuilder UI Definitions with
[GtkUIManager UI Definitions][XML-UI], which are more limited in scope.
It is common to use `.ui` as the filename extension for files containing
GtkBuilder UI definitions.

[RELAX NG Compact Syntax](https://git.gnome.org/browse/gtk+/tree/gtk/gtkbuilder.rnc)

The toplevel element is <interface>. It optionally takes a “domain”
attribute, which will make the builder look for translated strings
using dgettext() in the domain specified. This can also be done by
calling gtk_builder_set_translation_domain() on the builder.
Objects are described by <object> elements, which can contain
<property> elements to set properties, <signal> elements which
connect signals to handlers, and <child> elements, which describe
child objects (most often widgets inside a container, but also e.g.
actions in an action group, or columns in a tree model). A <child>
element contains an <object> element which describes the child object.
The target toolkit version(s) are described by <requires> elements,
the “lib” attribute specifies the widget library in question (currently
the only supported value is “gtk+”) and the “version” attribute specifies
the target version in the form “<major>.<minor>”. The builder will error
out if the version requirements are not met.

Typically, the specific kind of object represented by an <object>
element is specified by the “class” attribute. If the type has not
been loaded yet, GTK+ tries to find the get_type() function from the
class name by applying heuristics. This works in most cases, but if
necessary, it is possible to specify the name of the get_type() function
explictly with the "type-func" attribute. As a special case, GtkBuilder
allows to use an object that has been constructed by a #GtkUIManager in
another part of the UI definition by specifying the id of the #GtkUIManager
in the “constructor” attribute and the name of the object in the “id”
attribute.

Objects may be given a name with the “id” attribute, which allows the
application to retrieve them from the builder with gtk_builder_get_object().
An id is also necessary to use the object as property value in other
parts of the UI definition. GTK+ reserves ids starting and ending
with ___ (3 underscores) for its own purposes.

Setting properties of objects is pretty straightforward with the
<property> element: the “name” attribute specifies the name of the
property, and the content of the element specifies the value.
If the “translatable” attribute is set to a true value, GTK+ uses
gettext() (or dgettext() if the builder has a translation domain set)
to find a translation for the value. This happens before the value
is parsed, so it can be used for properties of any type, but it is
probably most useful for string properties. It is also possible to
specify a context to disambiguate short strings, and comments which
may help the translators.

GtkBuilder can parse textual representations for the most common
property types: characters, strings, integers, floating-point numbers,
booleans (strings like “TRUE”, “t”, “yes”, “y”, “1” are interpreted
as %TRUE, strings like “FALSE”, “f”, “no”, “n”, “0” are interpreted
as %FALSE), enumerations (can be specified by their name, nick or
integer value), flags (can be specified by their name, nick, integer
value, optionally combined with “|”, e.g. “GTK_VISIBLE|GTK_REALIZED”)
and colors (in a format understood by gdk_rgba_parse()). Pixbufs can
be specified as a filename of an image file to load. Objects can be
referred to by their name and by default refer to objects declared
in the local xml fragment and objects exposed via
gtk_builder_expose_object().

In general, GtkBuilder allows forward references to objects —
declared in the local xml; an object doesn’t have to be constructed
before it can be referred to. The exception to this rule is that an
object has to be constructed before it can be used as the value of
a construct-only property.

It is also possible to bind a property value to another object's
property value using the attributes
"bind-source" to specify the source object of the binding,
"bind-property" to specify the source property and optionally
"bind-flags" to specify the binding flags
Internally builder implement this using GBinding objects.
For more information see g_object_bind_property()

Signal handlers are set up with the <signal> element. The “name”
attribute specifies the name of the signal, and the “handler” attribute
specifies the function to connect to the signal. By default, GTK+ tries
to find the handler using g_module_symbol(), but this can be changed by
passing a custom #GtkBuilderConnectFunc to
gtk_builder_connect_signals_full(). The remaining attributes, “after”,
“swapped” and “object”, have the same meaning as the corresponding
parameters of the g_signal_connect_object() or
g_signal_connect_data() functions. A “last_modification_time”
attribute is also allowed, but it does not have a meaning to the
builder.

Sometimes it is necessary to refer to widgets which have implicitly
been constructed by GTK+ as part of a composite widget, to set
properties on them or to add further children (e.g. the @vbox of
a #GtkDialog). This can be achieved by setting the “internal-child”
propery of the <child> element to a true value. Note that GtkBuilder
still requires an <object> element for the internal child, even if it
has already been constructed.

A number of widgets have different places where a child can be added
(e.g. tabs vs. page content in notebooks). This can be reflected in
a UI definition by specifying the “type” attribute on a <child>
The possible values for the “type” attribute are described in the
sections describing the widget-specific portions of UI definitions.

# A GtkBuilder UI Definition

|[
<interface>
  <object class="GtkDialog" id="dialog1">
    <child internal-child="vbox">
      <object class="GtkBox" id="vbox1">
        <property name="border-width">10</property>
        <child internal-child="action_area">
          <object class="GtkButtonBox" id="hbuttonbox1">
            <property name="border-width">20</property>
            <child>
              <object class="GtkButton" id="ok_button">
                <property name="label">gtk-ok</property>
                <property name="use-stock">TRUE</property>
                <signal name="clicked" handler="ok_button_clicked"/>
              </object>
            </child>
          </object>
        </child>
      </object>
    </child>
  </object>
</interface>
]|

Beyond this general structure, several object classes define their
own XML DTD fragments for filling in the ANY placeholders in the DTD
above. Note that a custom element in a <child> element gets parsed by
the custom tag handler of the parent object, while a custom element in
an <object> element gets parsed by the custom tag handler of the object.

These XML fragments are explained in the documentation of the
respective objects.

Additionally, since 3.10 a special <template> tag has been added
to the format allowing one to define a widget class’s components.
See the [GtkWidget documentation][composite-templates] for details.
#NAME: new_with_markup
#PARENT: Gtk.CellView.new_with_markup
#COMMENT: A newly created #GtkCellView widget.
#NAME: get_min_value
#PARENT: Gtk.LevelBar
#COMMENT: Returns the value of the #GtkLevelBar:min-value property.
#NAME: OffscreenWindow
#PARENT: Gtk
#COMMENT: GtkOffscreenWindow is strictly intended to be used for obtaining
snapshots of widgets that are not part of a normal widget hierarchy.
Since #GtkOffscreenWindow is a toplevel widget you cannot obtain
snapshots of a full window with it since you cannot pack a toplevel
widget in another toplevel.

The idea is to take a widget and manually set the state of it,
add it to a GtkOffscreenWindow and then retrieve the snapshot
as a #cairo_surface_t or #GdkPixbuf.

GtkOffscreenWindow derives from #GtkWindow only as an implementation
detail.  Applications should not use any API specific to #GtkWindow
to operate on this object.  It should be treated as a #GtkBin that
has no parent widget.

When contained offscreen widgets are redrawn, GtkOffscreenWindow
will emit a #GtkWidget::damage-event signal.
#NAME: path
#PARENT: Gtk.Widget.class_path.none
#COMMENT: location to store the class path as an
    allocated string, or %NULL
#NAME: attribute
#PARENT: Gtk.CellArea.attribute_disconnect.none
#COMMENT: the attribute name
#NAME: set_state
#PARENT: Gtk.Gesture
#COMMENT: Sets the state of all sequences that @gesture is currently
interacting with. See gtk_gesture_set_sequence_state()
for more details on sequence states.
#NAME: minimum_size
#PARENT: Gtk.CellArea.request_renderer.none
#COMMENT: location to store the minimum size, or %NULL
#NAME: insert_interactive_at_cursor
#PARENT: Gtk.TextBuffer
#COMMENT: Calls gtk_text_buffer_insert_interactive() at the cursor
position.

@default_editable indicates the editability of text that doesn't
have a tag affecting editability applied to it. Typically the
result of gtk_text_view_get_editable() is appropriate here.
#NAME: set_with_owner
#PARENT: Gtk.Clipboard.set_with_owner
#COMMENT: %TRUE if setting the clipboard data succeeded.
    If setting the clipboard data failed the provided callback
    functions will be ignored.
#NAME: title_widget
#PARENT: Gtk.HeaderBar.set_custom_title.none
#COMMENT: a custom widget to use for a title
#NAME: insert_column_with_data_func
#PARENT: Gtk.TreeView.insert_column_with_data_func
#COMMENT: number of columns in the tree view post-insert
#NAME: column
#PARENT: Gtk.Table.get_col_spacing.guint
#COMMENT: a column in the table, 0 indicates the first column
#NAME: ypos
#PARENT: Gtk.TextView.move_child.none
#COMMENT: new Y position in window coordinates
#NAME: get_visible
#PARENT: Gtk.Action
#COMMENT: Returns whether the action itself is visible. Note that this doesn’t
necessarily mean effective visibility. See gtk_action_is_sensitive()
for that.
#NAME: box
#PARENT: Gtk.ListBox.set_adjustment.none
#COMMENT: a #GtkListBox
#NAME: get_ppd_name
#PARENT: Gtk.PaperSize.get_ppd_name
#COMMENT: the PPD name of @size
#NAME: RevealerTransitionType
#PARENT: Gtk
#COMMENT: These enumeration values describe the possible transitions
when the child of a #GtkRevealer widget is shown or hidden.
#NAME: action
#PARENT: Gtk.UIManager.pre-activate.none
#COMMENT: the action
#NAME: get_icon_name
#PARENT: Gtk.Action
#COMMENT: Gets the icon name of @action.
#NAME: get_tab_reorderable
#PARENT: Gtk.Notebook.get_tab_reorderable
#COMMENT: %TRUE if the tab is reorderable.
#NAME: STOCK_PREFERENCES
#PARENT: Gtk
#COMMENT: The “Preferences” item and icon.
#NAME: set_numeric
#PARENT: Gtk.SpinButton
#COMMENT: Sets the flag that determines if non-numeric text can be typed
into the spin button.
#NAME: get_base_size
#PARENT: Gtk.IconInfo.get_base_size
#COMMENT: the base size, or 0, if no base
    size is known for the icon.
#NAME: widget
#PARENT: Gtk.SizeGroup.add_widget.none
#COMMENT: the #GtkWidget to add
#NAME: items
#PARENT: Gtk.ToolPaletteDragTargets
#COMMENT: Support drag of items.
#NAME: drag_dest_add_text_targets
#PARENT: Gtk.Widget
#COMMENT: Add the text targets supported by #GtkSelectionData to
the target list of the drag destination. The targets
are added with @info = 0. If you need another value,
use gtk_target_list_add_text_targets() and
gtk_drag_dest_set_target_list().
#NAME: toolbar_reconfigured
#PARENT: Gtk.ToolItem
#COMMENT: Emits the signal #GtkToolItem::toolbar_reconfigured on @tool_item.
#GtkToolbar and other #GtkToolShell implementations use this function
to notify children, when some aspect of their configuration changes.
#NAME: scroll_to_cell
#PARENT: Gtk.TreeView
#COMMENT: Moves the alignments of @tree_view to the position specified by @column and
@path.  If @column is %NULL, then no horizontal scrolling occurs.  Likewise,
if @path is %NULL no vertical scrolling occurs.  At a minimum, one of @column
or @path need to be non-%NULL.  @row_align determines where the row is
placed, and @col_align determines where @column is placed.  Both are expected
to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means
right/bottom alignment, 0.5 means center.

If @use_align is %FALSE, then the alignment arguments are ignored, and the
tree does the minimum amount of work to scroll the cell onto the screen.
This means that the cell will be scrolled to the edge closest to its current
position.  If the cell is currently visible on the screen, nothing is done.

This function only works if the model is set, and @path is a valid row on the
model.  If the model changes before the @tree_view is realized, the centered
path will be modified to reflect this change.
#NAME: clipboard
#PARENT: Gtk.ClipboardGetFunc.none
#COMMENT: the #GtkClipboard
#NAME: add_actions
#PARENT: Gtk.ActionGroup
#COMMENT: This is a convenience function to create a number of actions and add them
to the action group.

The “activate” signals of the actions are connected to the callbacks
and their accel paths are set to `<Actions>/group-name/action-name`.
#NAME: iter
#PARENT: Gtk.ListStore.insert_after.none
#COMMENT: An unset #GtkTreeIter to set to the new row
#NAME: STOCK_COPY
#PARENT: Gtk
#COMMENT: The “Copy” item and icon.
#NAME: title
#PARENT: Gtk.TreeView.insert_column_with_attributes.gint
#COMMENT: The title to set the header to
#NAME: widget
#PARENT: Gtk.Widget.is_toplevel.gboolean
#COMMENT: a #GtkWidget
#NAME: menu
#PARENT: Gtk.Menu.get_title.utf8
#COMMENT: a #GtkMenu
#NAME: button
#PARENT: Gtk.ColorButton.set_rgba.none
#COMMENT: a #GtkColorButton
#NAME: scale
#PARENT: Gtk.ScaleClass.get_layout_offsets.get_layout_offsets.none
#COMMENT: a #GtkScale
#NAME: iter_depth
#PARENT: Gtk.TreeStore
#COMMENT: Returns the depth of @iter.  This will be 0 for anything on the root level, 1
for anything down a level, etc.
#NAME: add-tearoffs
#PARENT: Gtk.UIManager
#COMMENT: The "add-tearoffs" property controls whether generated menus
have tearoff menu items.

Note that this only affects regular menus. Generated popup
menus never have tearoff menu items.
#NAME: overlay
#PARENT: Gtk.Overlay.add_overlay.none
#COMMENT: a #GtkOverlay
#NAME: iter_get_siblings
#PARENT: Gtk.WidgetPath.iter_get_siblings
#COMMENT: %NULL or the list of siblings for the element at @pos.
#NAME: get_action_area
#PARENT: Gtk.Dialog
#COMMENT: Returns the action area of @dialog.
#NAME: scale
#PARENT: Gtk.Scale.set_has_origin.none
#COMMENT: a #GtkScale
#NAME: set_propagation_phase
#PARENT: Gtk.EventController
#COMMENT: Sets the propagation phase at which a controller handles events.

If @phase is %GTK_PHASE_NONE, no automatic event handling will be
performed, but other additional gesture maintenance will. In that phase,
the events can be managed by calling gtk_event_controller_handle_event().
#NAME: name
#PARENT: Gtk.Stack.set_visible_child_full.none
#COMMENT: the name of the child to make visible
#NAME: get_expand
#PARENT: Gtk.ToolPalette
#COMMENT: Gets whether group should be given extra space.
See gtk_tool_palette_set_expand().
#NAME: wrap-width
#PARENT: Gtk.ComboBox
#COMMENT: If wrap-width is set to a positive value, the list will be
displayed in multiple columns, the number of columns is
determined by wrap-width.
#NAME: use_markup
#PARENT: Gtk.Expander.set_use_markup.none
#COMMENT: %TRUE if the label’s text should be parsed for markup
#NAME: box
#PARENT: Gtk.ListBox.get_activate_on_single_click.gboolean
#COMMENT: a #GtkListBox
#NAME: get_active
#PARENT: Gtk.ToggleButton
#COMMENT: Queries a #GtkToggleButton and returns its current state. Returns %TRUE if
the toggle button is pressed in and %FALSE if it is raised.
#NAME: background_area
#PARENT: Gtk.CellArea.foreach_alloc.none
#COMMENT: the @widget relative coordinates of the background area
#NAME: status
#PARENT: Gtk.PrintOperation
#COMMENT: The status of the print operation.
#NAME: get_toggled_tags
#PARENT: Gtk.TextIter
#COMMENT: Returns a list of #GtkTextTag that are toggled on or off at this
point.  (If @toggled_on is %TRUE, the list contains tags that are
toggled on.) If a tag is toggled on at @iter, then some non-empty
range of characters following @iter has that tag applied to it.  If
a tag is toggled off, then some non-empty range following @iter
does not have the tag applied to it.
#NAME: get_mapped
#PARENT: Gtk.Widget.get_mapped
#COMMENT: %TRUE if the widget is mapped, %FALSE otherwise.
#NAME: set_icon_list
#PARENT: Gtk.Window
#COMMENT: Sets up the icon representing a #GtkWindow. The icon is used when
the window is minimized (also known as iconified).  Some window
managers or desktop environments may also place it in the window
frame, or display it in other contexts.

gtk_window_set_icon_list() allows you to pass in the same icon in
several hand-drawn sizes. The list should contain the natural sizes
your icon is available in; that is, don’t scale the image before
passing it to GTK+. Scaling is postponed until the last minute,
when the desired final size is known, to allow best quality.

By passing several sizes, you may improve the final image quality
of the icon, by reducing or eliminating automatic image scaling.

Recommended sizes to provide: 16x16, 32x32, 48x48 at minimum, and
larger images (64x64, 128x128) if you have them.

See also gtk_window_set_default_icon_list() to set the icon
for all windows in your application in one go.

Note that transient windows (those who have been set transient for another
window using gtk_window_set_transient_for()) will inherit their
icon from their transient parent. So there’s no need to explicitly
set the icon on transient windows.
#NAME: is_activatable
#PARENT: Gtk.CellAreaClass.is_activatable.is_activatable
#COMMENT: whether @area can do anything when activated.
#NAME: get_selectable
#PARENT: Gtk.ListBoxRow.get_selectable
#COMMENT: %TRUE if the row is selectable
#NAME: new
#PARENT: Gtk.Border
#COMMENT: Allocates a new #GtkBorder-struct and initializes its elements to zero.
#NAME: action
#PARENT: Gtk.FileChooserWidget.new.Widget
#COMMENT: Open or save mode for the widget
#NAME: delete_text
#PARENT: Gtk.EntryBufferClass.delete_text.delete_text
#COMMENT: The number of characters deleted.
#NAME: get
#PARENT: Gtk.ThemingEngine
#COMMENT: Retrieves several style property values that apply to the currently
rendered element.
#NAME: box
#PARENT: Gtk.ListBox.set_activate_on_single_click.none
#COMMENT: a #GtkListBox
#NAME: get_value
#PARENT: Gtk.Range
#COMMENT: Gets the current value of the range.
#NAME: tool_item
#PARENT: Gtk.ToolItem.set_is_important.none
#COMMENT: a #GtkToolItem
#NAME: search_user_data
#PARENT: Gtk.TreeView.set_search_equal_func.none
#COMMENT: user data to pass to @search_equal_func, or %NULL
#NAME: display
#PARENT: Gtk.accelerator_get_label_with_keycode.utf8
#COMMENT: a #GdkDisplay or %NULL to use the default display
#NAME: entries
#PARENT: Gtk.ActionGroup.add_radio_actions.none
#COMMENT: an array of radio action descriptions
#NAME: new
#PARENT: Gtk.RecentChooserMenu.new
#COMMENT: a new #GtkRecentChooserMenu
#NAME: get_tooltip_markup
#PARENT: Gtk.StatusIcon.get_tooltip_markup
#COMMENT: the tooltip text, or %NULL. You should free the
  returned string with g_free() when done.
#NAME: step
#PARENT: Gtk.TextView.move-viewport.none
#COMMENT: the granularity of the move, as a #GtkMovementStep
#NAME: active
#PARENT: Gtk.ToggleAction
#COMMENT: Whether the toggle action should be active.
#NAME: fontname
#PARENT: Gtk.FontChooser.font-activated.none
#COMMENT: the font name
#NAME: new
#PARENT: Gtk.MenuButton.new
#COMMENT: The newly created #GtkMenuButton widget
#NAME: source
#PARENT: Gtk.IconSource.get_filename.filename
#COMMENT: a #GtkIconSource
#NAME: create_tool_item
#PARENT: Gtk.Action
#COMMENT: Creates a toolbar item widget that proxies for the given action.
#NAME: get_width
#PARENT: Gtk.PrintContext
#COMMENT: Obtains the width of the #GtkPrintContext, in pixels.
#NAME: iter
#PARENT: Gtk.TextBuffer.get_iter_at_line_index.none
#COMMENT: iterator to initialize
#NAME: starts_word
#PARENT: Gtk.TextIter
#COMMENT: Determines whether @iter begins a natural-language word.  Word
breaks are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_row_span_column.gint
#COMMENT: A #GtkComboBox
#NAME: get_relative_to
#PARENT: Gtk.Popover
#COMMENT: Returns the widget @popover is currently attached to
#NAME: add_custom
#PARENT: Gtk.FileFilter
#COMMENT: Adds rule to a filter that allows files based on a custom callback
function. The bitfield @needed which is passed in provides information
about what sorts of information that the filter function needs;
this allows GTK+ to avoid retrieving expensive information when
it isn’t needed by the filter.
#NAME: get_applications
#PARENT: Gtk.RecentInfo
#COMMENT: Retrieves the list of applications that have registered this resource.
#NAME: ttb
#PARENT: Gtk.PackDirection
#COMMENT: Widgets are packed top-to-bottom
#NAME: step
#PARENT: Gtk.FlowBox.move-cursor.none
#COMMENT: the granularity fo the move, as a #GtkMovementStep
#NAME: colors
#PARENT: Gtk.ColorChooserInterface.add_palette.add_palette.none
#COMMENT: the colors of the palette, or %NULL
#NAME: widget
#PARENT: Gtk.CellArea.get_preferred_width_for_height.none
#COMMENT: the #GtkWidget where @area will be rendering
#NAME: state_type
#PARENT: Gtk.paint_diamond.none
#COMMENT: a state
#NAME: flags
#PARENT: Gtk.Widget.set_state_flags.none
#COMMENT: State flags to turn on
#NAME: whats_this
#PARENT: Gtk.WidgetHelpType
#COMMENT: What’s this.
#NAME: get_mnemonics_visible
#PARENT: Gtk.Window.get_mnemonics_visible
#COMMENT: %TRUE if mnemonics are supposed to be visible
in this window.
#NAME: accel_key
#PARENT: Gtk.AccelGroup.disconnect_key.gboolean
#COMMENT: key value of the accelerator
#NAME: chooser
#PARENT: Gtk.RecentChooserIface.get_items.get_items.RecentInfo
#COMMENT: a #GtkRecentChooser
#NAME: context
#PARENT: Gtk.CellAreaClass.foreach_alloc.foreach_alloc.none
#COMMENT: the #GtkCellAreaContext for this row of data.
#NAME: parent_class
#PARENT: Gtk.FontChooserWidgetClass
#COMMENT: The parent class.
#NAME: get_plus_button
#PARENT: Gtk.ScaleButton.get_plus_button
#COMMENT: the plus button of the #GtkScaleButton
#NAME: bg_full_height
#PARENT: Gtk.TextAttributes
#COMMENT: Background is fit to full line height rather than
   baseline +/- ascent/descent (font height).
#NAME: popup_set_width
#PARENT: Gtk.EntryCompletion.set_popup_set_width.none
#COMMENT: %TRUE to make the width of the popup the same as the entry
#NAME: upper
#PARENT: Gtk.Adjustment
#COMMENT: The maximum value of the adjustment.
Note that values will be restricted by
`upper - page-size` if the page-size
property is nonzero.
#NAME: adjustment
#PARENT: Gtk.ListBox.set_adjustment.none
#COMMENT: the adjustment, or %NULL
#NAME: get_text
#PARENT: Gtk.ProgressBar.get_text
#COMMENT: text, or %NULL; this string is owned by the widget
and should not be modified or freed.
#NAME: group
#PARENT: Gtk.RadioMenuItem
#COMMENT: The radio menu item whose group this widget belongs to.
#NAME: setting
#PARENT: Gtk.MenuItem.set_use_underline.none
#COMMENT: %TRUE if underlines in the text indicate mnemonics
#NAME: set_printer
#PARENT: Gtk.PrintSettings
#COMMENT: Convenience function to set %GTK_PRINT_SETTINGS_PRINTER
to @printer.
#NAME: event
#PARENT: Gtk.Window.propagate_key_event.gboolean
#COMMENT: a #GdkEventKey
#NAME: settings
#PARENT: Gtk.PrintSettings.set_reverse.none
#COMMENT: a #GtkPrintSettings
#NAME: new
#PARENT: Gtk.Requisition
#COMMENT: Allocates a new #GtkRequisition-struct and initializes its elements to zero.
#NAME: first_property_name
#PARENT: Gtk.CellArea.cell_get_valist.none
#COMMENT: the name of the first property to get
#NAME: url
#PARENT: Gtk.InputPurpose
#COMMENT: Edited field expects URL
#NAME: path
#PARENT: Gtk.WidgetPath.iter_get_sibling_index.guint
#COMMENT: a #GtkWidgetPath
#NAME: box
#PARENT: Gtk.FlowBoxClass.select_all.select_all.none
#COMMENT: a #GtkFlowBox
#NAME: insert_text
#PARENT: Gtk.EntryBuffer
#COMMENT: Inserts @n_chars characters of @chars into the contents of the
buffer, at position @position.

If @n_chars is negative, then characters from chars will be inserted
until a null-terminator is found. If @position or @n_chars are out of
bounds, or the maximum buffer text length is exceeded, then they are
coerced to sane values.

Note that the position and length are in characters, not in bytes.
#NAME: image_menu_item
#PARENT: Gtk.ImageMenuItem.set_use_stock.none
#COMMENT: a #GtkImageMenuItem
#NAME: menu_item
#PARENT: Gtk.MenuItem.deselect.none
#COMMENT: the menu item
#NAME: chooser
#PARENT: Gtk.RecentChooser.set_sort_func.none
#COMMENT: a #GtkRecentChooser
#NAME: backward_char
#PARENT: Gtk.TextIter.backward_char
#COMMENT: whether movement was possible
#NAME: new
#PARENT: Gtk.AppChooserWidget
#COMMENT: Creates a new #GtkAppChooserWidget for applications
that can handle content of the given type.
#NAME: icon_view
#PARENT: Gtk.IconView.get_path_at_pos.TreePath
#COMMENT: A #GtkIconView.
#NAME: popup_enable
#PARENT: Gtk.Notebook
#COMMENT: Enables the popup menu: if the user clicks with the right
mouse button on the tab labels, a menu with all the pages
will be popped up.
#NAME: new
#PARENT: Gtk.TextAttributes.new
#COMMENT: a new #GtkTextAttributes,
    free with gtk_text_attributes_unref().
#NAME: icon_set
#PARENT: Gtk.Image.set_from_icon_set.none
#COMMENT: a #GtkIconSet
#NAME: intersect
#PARENT: Gtk.Widget
#COMMENT: Computes the intersection of a @widget’s area and @area, storing
the intersection in @intersection, and returns %TRUE if there was
an intersection.  @intersection may be %NULL if you’re only
interested in whether there was an intersection.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_size.gint
#COMMENT: a #GtkStatusIcon
#NAME: starts_display_line
#PARENT: Gtk.TextView.starts_display_line
#COMMENT: %TRUE if @iter begins a wrapped line
#NAME: tree_model
#PARENT: Gtk.TreeModel.row_inserted.none
#COMMENT: a #GtkTreeModel
#NAME: x
#PARENT: Gtk.render_icon_surface.none
#COMMENT: X position for the @icon
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_active_id.gboolean
#COMMENT: a #GtkComboBox
#NAME: use-underline
#PARENT: Gtk.MenuItem
#COMMENT: %TRUE if underlines in the text indicate mnemonics.
#NAME: new_from_stock
#PARENT: Gtk.RadioToolButton.new_from_stock
#COMMENT: The new #GtkRadioToolButton
#NAME: y
#PARENT: Gtk.render_icon_surface.none
#COMMENT: Y position for the @incon
#NAME: get_velocity
#PARENT: Gtk.GestureSwipe.get_velocity
#COMMENT: whether velocity could be calculated
#NAME: list_action_descriptions
#PARENT: Gtk.Application
#COMMENT: Lists the detailed action names which have associated accelerators.
See gtk_application_set_accels_for_action().
#NAME: set_sort_func
#PARENT: Gtk.RecentChooser
#COMMENT: Sets the comparison function used when sorting to be @sort_func.  If
the @chooser has the sort type set to #GTK_RECENT_SORT_CUSTOM then
the chooser will sort using this function.

To the comparison function will be passed two #GtkRecentInfo structs and
@sort_data;  @sort_func should return a positive integer if the first
item comes before the second, zero if the two items are equal and
a negative integer if the first item comes after the second.
#NAME: new_with_range
#PARENT: Gtk.SpinButton
#COMMENT: This is a convenience constructor that allows creation of a numeric
#GtkSpinButton without manually creating an adjustment. The value is
initially set to the minimum value and a page increment of 10 * @step
is the default. The precision of the spin button is equivalent to the
precision of @step.

Note that the way in which the precision is derived works best if @step
is a power of ten. If the resulting precision is not suitable for your
needs, use gtk_spin_button_set_digits() to correct it.
#NAME: spin_button
#PARENT: Gtk.SpinButton.set_digits.none
#COMMENT: a #GtkSpinButton
#NAME: icon_name
#PARENT: Gtk.StatusIcon.set_from_icon_name.none
#COMMENT: an icon name
#NAME: data
#PARENT: Gtk.Buildable.custom_finished.none
#COMMENT: user data created in custom_tag_start
#NAME: get_path_at_pos
#PARENT: Gtk.IconView.get_path_at_pos
#COMMENT: The #GtkTreePath corresponding to the icon or %NULL
if no icon exists at that position.
#NAME: STOCK_UNINDENT
#PARENT: Gtk
#COMMENT: The “Unindent” item and icon. The icon has an RTL variant.
#NAME: position_menu
#PARENT: Gtk.StatusIcon
#COMMENT: Menu positioning function to use with gtk_menu_popup()
to position @menu aligned to the status icon @user_data.
#NAME: move-cursor
#PARENT: Gtk.Label
#COMMENT: The ::move-cursor signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates a cursor movement.
If the cursor is not visible in @entry, this signal causes
the viewport to be moved instead.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically.

The default bindings for this signal come in two variants,
the variant with the Shift modifier extends the selection,
the variant without the Shift modifer does not.
There are too many key combinations to list them all here.
- Arrow keys move by individual characters/lines
- Ctrl-arrow key combinations move by words/paragraphs
- Home/End keys move to the ends of the buffer
#NAME: homogeneous
#PARENT: Gtk.Table.new.Widget
#COMMENT: If set to %TRUE, all table cells are resized to the size of
  the cell containing the largest widget.
#NAME: label
#PARENT: Gtk.Label.get_angle.gdouble
#COMMENT: a #GtkLabel
#NAME: range
#PARENT: Gtk.Range.get_slider_range.none
#COMMENT: a #GtkRange
#NAME: get_vadjustment
#PARENT: Gtk.TextView
#COMMENT: Gets the vertical-scrolling #GtkAdjustment.
#NAME: label_pattern
#PARENT: Gtk.test_find_label.Widget
#COMMENT: Shell-glob pattern to match a label string.
#NAME: primary
#PARENT: Gtk.EntryIconPosition
#COMMENT: At the beginning of the entry (depending on the text direction).
#NAME: up-folder
#PARENT: Gtk.FileChooserWidget
#COMMENT: The ::up-folder signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

This is used to make the file chooser go to the parent of
the current folder in the file hierarchy.

The default binding for this signal is `Alt + Up`.
#NAME: get_visibility
#PARENT: Gtk.Entry.get_visibility
#COMMENT: %TRUE if the text is currently visible
#NAME: def
#PARENT: Gtk.PrintSettings.get_int_with_default.gint
#COMMENT: the default value
#NAME: get_padding
#PARENT: Gtk.Alignment
#COMMENT: Gets the padding on the different sides of the widget.
See gtk_alignment_set_padding ().
#NAME: get_label_widget
#PARENT: Gtk.Frame.get_label_widget
#COMMENT: the label widget, or %NULL if
there is none.
#NAME: handle_box
#PARENT: Gtk.HandleBox.get_handle_position.PositionType
#COMMENT: a #GtkHandleBox
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.row_has_child_toggled.row_has_child_toggled.none
#COMMENT: a #GtkTreeModel
#NAME: completion
#PARENT: Gtk.EntryCompletion.insert_action_markup.none
#COMMENT: a #GtkEntryCompletion
#NAME: entry
#PARENT: Gtk.Entry.get_progress_pulse_step.gdouble
#COMMENT: a #GtkEntry
#NAME: format_secondary_markup
#PARENT: Gtk.MessageDialog
#COMMENT: Sets the secondary text of the message dialog to be @message_format (with
printf()-style), which is marked up with the
[Pango text markup language][PangoMarkupFormat].

Due to an oversight, this function does not escape special XML characters
like gtk_message_dialog_new_with_markup() does. Thus, if the arguments
may contain special XML characters, you should use g_markup_printf_escaped()
to escape it.

|[<!-- language="C" -->
gchar *msg;

msg = g_markup_printf_escaped (message_format, ...);
gtk_message_dialog_format_secondary_markup (message_dialog,
                                            "%s", msg);
g_free (msg);
]|
#NAME: x
#PARENT: Gtk.Scale.get_layout_offsets.none
#COMMENT: location to store X offset of layout, or %NULL
#NAME: test_slider_set_perc
#PARENT: Gtk
#COMMENT: This function will adjust the slider position of all GtkRange
based widgets, such as scrollbars or scales, it’ll also adjust
spin buttons. The adjustment value of these widgets is set to
a value between the lower and upper limits, according to the
@percentage argument.
#NAME: label
#PARENT: Gtk.Label.get_mnemonic_widget.Widget
#COMMENT: a #GtkLabel
#NAME: y
#PARENT: Gtk.Scale.get_layout_offsets.none
#COMMENT: location to store Y offset of layout, or %NULL
#NAME: iter
#PARENT: Gtk.TextIter.backward_visible_word_starts.gboolean
#COMMENT: a #GtkTextIter
#NAME: get_language
#PARENT: Gtk.TextIter
#COMMENT: A convenience wrapper around gtk_text_iter_get_attributes(),
which returns the language in effect at @iter. If no tags affecting
language apply to @iter, the return value is identical to that of
gtk_get_default_language().
#NAME: tree_view
#PARENT: Gtk.TreeView.set_grid_lines.none
#COMMENT: a #GtkTreeView
#NAME: x
#PARENT: Gtk.render_icon.none
#COMMENT: X position for the @pixbuf
#NAME: get_current_folder_uri
#PARENT: Gtk.FileChooser.get_current_folder_uri
#COMMENT: the URI for the current folder.  Free with g_free().  This
function will also return %NULL if the file chooser was unable to load the
last folder that was requested from it; for example, as would be for calling
gtk_file_chooser_set_current_folder_uri() on a nonexistent folder.
#NAME: get_column_span_column
#PARENT: Gtk.ComboBox.get_column_span_column
#COMMENT: the column span column.
#NAME: activate-current-link
#PARENT: Gtk.Label
#COMMENT: A [keybinding signal][GtkBindingSignal]
which gets emitted when the user activates a link in the label.

Applications may also emit the signal with g_signal_emit_by_name()
if they need to control activation of URIs programmatically.

The default bindings for this signal are all forms of the Enter key.
#NAME: get_tab_pos
#PARENT: Gtk.Notebook
#COMMENT: Gets the edge at which the tabs for switching pages in the
notebook are drawn.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.clear_attributes.none
#COMMENT: a #GtkTreeViewColumn
#NAME: y
#PARENT: Gtk.render_icon.none
#COMMENT: Y position for the @pixbuf
#NAME: placeholder
#PARENT: Gtk.ListBox.set_placeholder.none
#COMMENT: a #GtkWidget or %NULL
#NAME: climb_rate
#PARENT: Gtk.SpinButton.new.Widget
#COMMENT: specifies how much the spin button changes when an arrow
    is clicked on
#NAME: step
#PARENT: Gtk.TextView.move-cursor.none
#COMMENT: the granularity of the move, as a #GtkMovementStep
#NAME: get_has_palette
#PARENT: Gtk.ColorSelection
#COMMENT: Determines whether the color selector has a color palette.
#NAME: create-window
#PARENT: Gtk.Notebook
#COMMENT: The ::create-window signal is emitted when a detachable
tab is dropped on the root window.

A handler for this signal can create a window containing
a notebook where the tab will be attached. It is also
responsible for moving/resizing the window and adding the
necessary properties to the notebook (e.g. the
#GtkNotebook:group-name ).
#NAME: binding_set
#PARENT: Gtk.CssSectionType
#COMMENT: The section defines a binding set. This
  is a GTK extension to CSS.
#NAME: child-activated
#PARENT: Gtk.FlowBox
#COMMENT: The ::child-activated signal is emitted when a child has been
activated by the user.
#NAME: icon_info
#PARENT: Gtk.IconInfo.load_icon_finish.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconInfo from gtk_icon_theme_lookup_icon()
#NAME: user_data
#PARENT: Gtk.RecentFilterFunc.gboolean
#COMMENT: user data passed to gtk_recent_filter_add_custom()
#NAME: set_current_name
#PARENT: Gtk.FileChooser
#COMMENT: Sets the current name in the file selector, as if entered
by the user. Note that the name passed in here is a UTF-8
string rather than a filename. This function is meant for
such uses as a suggested name in a “Save As...” dialog.  You can
pass “Untitled.doc” or a similarly suitable suggestion for the @name.

If you want to preselect a particular existing file, you should use
gtk_file_chooser_set_filename() or gtk_file_chooser_set_uri() instead.
Please see the documentation for those functions for an example of using
gtk_file_chooser_set_current_name() as well.
#NAME: accel_signal
#PARENT: Gtk.Widget.add_accelerator.none
#COMMENT: widget signal to emit on accelerator activation
#NAME: widget
#PARENT: Gtk.Widget.set_app_paintable.none
#COMMENT: a #GtkWidget
#NAME: context
#PARENT: Gtk.CellAreaContextClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: a #GtkCellAreaContext
#NAME: get_adjustment
#PARENT: Gtk.ListBox.get_adjustment
#COMMENT: the adjustment
#NAME: op
#PARENT: Gtk.MountOperation.get_screen.Gdk.Screen
#COMMENT: a #GtkMountOperation
#NAME: set_exclusive
#PARENT: Gtk.ToolPalette
#COMMENT: Sets whether the group should be exclusive or not.
If an exclusive group is expanded all other groups are collapsed.
#NAME: get_sensitive
#PARENT: Gtk.Widget
#COMMENT: Returns the widget’s sensitivity (in the sense of returning
the value that has been set using gtk_widget_set_sensitive()).

The effective sensitivity of a widget is however determined by both its
own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
#NAME: position
#PARENT: Gtk.Window.set_position.none
#COMMENT: a position constraint.
#NAME: notebook
#PARENT: Gtk.Notebook.get_show_tabs.gboolean
#COMMENT: a #GtkNotebook
#NAME: get_hscrollbar
#PARENT: Gtk.ScrolledWindow
#COMMENT: Returns the horizontal scrollbar of @scrolled_window.
#NAME: text_view
#PARENT: Gtk.TextView.add_child_in_window.none
#COMMENT: a #GtkTextView
#NAME: get_area
#PARENT: Gtk.CellAreaContext.get_area
#COMMENT: the #GtkCellArea this context was created by.
#NAME: invisible
#PARENT: Gtk.Invisible.get_screen.Gdk.Screen
#COMMENT: a #GtkInvisible.
#NAME: get_hadjustment
#PARENT: Gtk.Scrollable
#COMMENT: Retrieves the #GtkAdjustment used for horizontal scrolling.
#NAME: none
#PARENT: Gtk.TreeViewGridLines
#COMMENT: No grid lines.
#NAME: both
#PARENT: Gtk.TreeViewGridLines
#COMMENT: Horizontal and vertical grid lines.
#NAME: window
#PARENT: Gtk.Window.set_icon_list.none
#COMMENT: a #GtkWindow
#NAME: filename
#PARENT: Gtk.Builder.add_from_file.guint
#COMMENT: the name of the file to parse
#NAME: get_previous_color
#PARENT: Gtk.ColorSelection
#COMMENT: Fills @color in with the original color value.
#NAME: renderer
#PARENT: Gtk.CellAreaClass.remove.remove.none
#COMMENT: the #GtkCellRenderer to remove from @area
#NAME: sibling
#PARENT: Gtk.TreeStore.insert_after.none
#COMMENT: A valid #GtkTreeIter, or %NULL
#NAME: signals
#PARENT: Gtk.BindingEntry
#COMMENT: action signals of this entry
#NAME: set_has_selection
#PARENT: Gtk.PrintOperation
#COMMENT: Sets whether there is a selection to print.

Application has to set number of pages to which the selection
will draw by gtk_print_operation_set_n_pages() in a callback of
#GtkPrintOperation::begin-print.
#NAME: uri
#PARENT: Gtk.RecentFilterInfo
#COMMENT: The URI of the file being tested.
#NAME: match_end
#PARENT: Gtk.TextIter.forward_search.gboolean
#COMMENT: return location for end of match, or %NULL
#NAME: drag_source_set_icon_name
#PARENT: Gtk.Widget
#COMMENT: Sets the icon that will be used for drags from a particular source
to a themed icon. See the docs for #GtkIconTheme for more details.
#NAME: button
#PARENT: Gtk.Button.set_use_stock.none
#COMMENT: a #GtkButton
#NAME: tree_view
#PARENT: Gtk.TreeView.get_rules_hint.gboolean
#COMMENT: a #GtkTreeView
#NAME: title
#PARENT: Gtk.TreeView.insert_column_with_data_func.gint
#COMMENT: column title
#NAME: post-activate
#PARENT: Gtk.UIManager
#COMMENT: The ::post-activate signal is emitted just after the @action
is activated.

This is intended for applications to get notification
just after any action is activated.
#NAME: destroy
#PARENT: Gtk.FontChooser.set_filter_func.none
#COMMENT: function to call to free @data when it is no longer needed
#NAME: entry
#PARENT: Gtk.Entry.get_current_icon_drag_source.gint
#COMMENT: a #GtkEntry
#NAME: normal
#PARENT: Gtk.StateFlags
#COMMENT: State during normal operation.
#NAME: context
#PARENT: Gtk.StyleContext.lookup_color.gboolean
#COMMENT: a #GtkStyleContext
#NAME: tree_view
#PARENT: Gtk.TreeView.get_cell_area.none
#COMMENT: a #GtkTreeView
#NAME: start_path
#PARENT: Gtk.TreeView.get_visible_range.gboolean
#COMMENT: Return location for start of region,
             or %NULL.
#NAME: border
#PARENT: Gtk.Entry.set_inner_border.none
#COMMENT: a #GtkBorder, or %NULL
#NAME: get_active
#PARENT: Gtk.CellRendererToggle
#COMMENT: Returns whether the cell renderer is active. See
gtk_cell_renderer_toggle_set_active().
#NAME: get_restrict_to_fill_level
#PARENT: Gtk.Range.get_restrict_to_fill_level
#COMMENT: %TRUE if @range is restricted to the fill level.
#NAME: selection_data
#PARENT: Gtk.SelectionData.set_text.gboolean
#COMMENT: a #GtkSelectionData
#NAME: start
#PARENT: Gtk.TextBuffer.get_selection_bounds.gboolean
#COMMENT: iterator to initialize with selection start
#NAME: menuitem
#PARENT: Gtk.UIManagerItemType
#COMMENT: Create a menuitem.
#NAME: get_transient_for
#PARENT: Gtk.Window
#COMMENT: Fetches the transient parent for this window. See
gtk_window_set_transient_for().
#NAME: accelerator_valid
#PARENT: Gtk.accelerator_valid
#COMMENT: %TRUE if the accelerator is valid
#NAME: self
#PARENT: Gtk.AppChooserButton.set_show_default_item.none
#COMMENT: a #GtkAppChooserButton
#NAME: not_found
#PARENT: Gtk.RecentChooserError
#COMMENT: Indicates that a file does not exist
#NAME: visible_rect
#PARENT: Gtk.TreeView.get_visible_rect.none
#COMMENT: rectangle to fill
#NAME: WindowPosition
#PARENT: Gtk
#COMMENT: Window placement can be influenced using this enumeration. Note that
using #GTK_WIN_POS_CENTER_ALWAYS is almost always a bad idea.
It won’t necessarily work well with all window managers or on all windowing systems.
#NAME: get_focus_on_click
#PARENT: Gtk.Button
#COMMENT: Returns whether the button grabs focus when it is clicked with the mouse.
See gtk_button_set_focus_on_click().
#NAME: get_width
#PARENT: Gtk.PaperSize
#COMMENT: Gets the paper width of the #GtkPaperSize, in
units of @unit.
#NAME: get_left_margin
#PARENT: Gtk.TextView
#COMMENT: Gets the default left margin size of paragraphs in the @text_view.
Tags in the buffer may override the default.
#NAME: set_visible
#PARENT: Gtk.Widget
#COMMENT: Sets the visibility state of @widget. Note that setting this to
%TRUE doesn’t mean the widget is actually viewable, see
gtk_widget_get_visible().

This function simply calls gtk_widget_show() or gtk_widget_hide()
but is nicer to use when the visibility of the widget depends on
some condition.
#NAME: icon_view
#PARENT: Gtk.IconView.unset_model_drag_dest.none
#COMMENT: a #GtkIconView
#NAME: close
#PARENT: Gtk.ButtonsType
#COMMENT: a Close button
#NAME: set_scrollable
#PARENT: Gtk.Notebook
#COMMENT: Sets whether the tab label area will have arrows for
scrolling if there are too many tabs to fit in the area.
#NAME: app_name
#PARENT: Gtk.RecentData
#COMMENT: the name of the application that is registering this recently
  used resource;
#NAME: remove_item
#PARENT: Gtk.RecentManager.remove_item
#COMMENT: %TRUE if the item pointed by @uri has been successfully
  removed by the recently used resources list, and %FALSE otherwise
#NAME: size
#PARENT: Gtk.RecentManager
#COMMENT: The size of the recently used resources list.
#NAME: compare
#PARENT: Gtk.TextIter.compare
#COMMENT: -1 if @lhs is less than @rhs, 1 if @lhs is greater, 0 if they are equal
#NAME: notebook
#PARENT: Gtk.Notebook.prev_page.none
#COMMENT: a #GtkNotebook
#NAME: set_current_alpha
#PARENT: Gtk.ColorSelection
#COMMENT: Sets the current opacity to be @alpha.

The first time this is called, it will also set
the original opacity to be @alpha too.
#NAME: get_model
#PARENT: Gtk.IconView
#COMMENT: Returns the model the #GtkIconView is based on.  Returns %NULL if the
model is unset.
#NAME: MenuPositionFunc
#PARENT: Gtk
#COMMENT: A user function supplied when calling gtk_menu_popup() which
controls the positioning of the menu when it is displayed.  The
function sets the @x and @y parameters to the coordinates where the
menu is to be drawn.  To make the menu appear on a different
monitor than the mouse pointer, gtk_menu_set_monitor() must be
called.
#NAME: format-value
#PARENT: Gtk.Scale.format-value
#COMMENT: allocated string representing @value
#NAME: secondary-icon-storage-type
#PARENT: Gtk.Entry
#COMMENT: The representation which is used for the secondary icon of the entry.
#NAME: right_justified
#PARENT: Gtk.MenuItem.set_right_justified.none
#COMMENT: if %TRUE the menu item will appear at the
  far right if added to a menu bar
#NAME: get_show_numbers
#PARENT: Gtk.RecentChooserMenu
#COMMENT: Returns the value set by gtk_recent_chooser_menu_set_show_numbers().
#NAME: get_default
#PARENT: Gtk.Settings.get_default
#COMMENT: a #GtkSettings object. If there is no default
 screen, then returns %NULL.
#NAME: get_tree_view
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns the #GtkTreeView wherein @tree_column has been inserted.
If @column is currently not inserted in any tree view, %NULL is
returned.
#NAME: none
#PARENT: Gtk.ScrollType
#COMMENT: No scrolling.
#NAME: get_max_children_per_line
#PARENT: Gtk.FlowBox
#COMMENT: Gets the maximum number of children per line.
#NAME: set_halign
#PARENT: Gtk.Widget
#COMMENT: Sets the horizontal alignment of @widget.
See the #GtkWidget:halign property.
#NAME: get_bytes
#PARENT: Gtk.EntryBuffer
#COMMENT: Retrieves the length in bytes of the buffer.
See gtk_entry_buffer_get_length().
#NAME: resize_mode
#PARENT: Gtk.Container.set_resize_mode.none
#COMMENT: the new resize mode
#NAME: activate
#PARENT: Gtk.StatusIcon
#COMMENT: Gets emitted when the user activates the status icon.
If and how status icons can activated is platform-dependent.

Unlike most G_SIGNAL_ACTION signals, this signal is meant to
be used by applications and should be wrapped by language bindings.
#NAME: yalign
#PARENT: Gtk.Frame.set_label_align.none
#COMMENT: The y alignment of the label. A value of 0.0 aligns under
  the frame; 1.0 aligns above the frame. If the values are exactly
  0.0 or 1.0 the gap in the frame won’t be painted because the label
  will be completely above or below the frame.
#NAME: copy
#PARENT: Gtk.IconSet.copy
#COMMENT: a new #GtkIconSet identical to the first.
#NAME: fill
#PARENT: Gtk.Box.pack_end.none
#COMMENT: %TRUE if space given to @child by the @expand option is
  actually allocated to @child, rather than just padding it.  This
  parameter has no effect if @expand is set to %FALSE.  A child is
  always allocated the full height of a horizontal #GtkBox and the full width
  of a vertical #GtkBox.  This option affects the other dimension
#NAME: button
#PARENT: Gtk.Button.get_use_underline.gboolean
#COMMENT: a #GtkButton
#NAME: is_sensitive
#PARENT: Gtk.Action.is_sensitive
#COMMENT: %TRUE if the action and its associated action group
are both sensitive.
#NAME: markup
#PARENT: Gtk.MenuToolButton.set_arrow_tooltip_markup.none
#COMMENT: markup text to be used as tooltip text for button’s arrow button
#NAME: set_overlay_scrolling
#PARENT: Gtk.ScrolledWindow
#COMMENT: Enables or disables overlay scrolling for this scrolled window.
#NAME: prelight
#PARENT: Gtk.StateType
#COMMENT: State indicating that the mouse pointer is over
                     the widget and the widget will respond to mouse clicks.
#NAME: tree_model
#PARENT: Gtk.TreeCellDataFunc.none
#COMMENT: The #GtkTreeModel being rendered
#NAME: hint
#PARENT: Gtk.Window.set_type_hint.none
#COMMENT: the window type
#NAME: chooser
#PARENT: Gtk.FileChooser.get_file.Gio.File
#COMMENT: a #GtkFileChooser
#NAME: calendar
#PARENT: Gtk.Calendar.get_detail_width_chars.gint
#COMMENT: a #GtkCalendar.
#NAME: new
#PARENT: Gtk.InfoBar.new
#COMMENT: a new #GtkInfoBar object
#NAME: new_order
#PARENT: Gtk.tree_row_reference_reordered.none
#COMMENT: the new order of rows
#NAME: path
#PARENT: Gtk.IconView.set_tooltip_item.none
#COMMENT: a #GtkTreePath
#NAME: widget
#PARENT: Gtk.Widget.has_rc_style.gboolean
#COMMENT: a #GtkWidget
#NAME: get_always_show_image
#PARENT: Gtk.ImageMenuItem
#COMMENT: Returns whether the menu item will ignore the #GtkSettings:gtk-menu-images
setting and always show the image, if available.
#NAME: get_count
#PARENT: Gtk.NumerableIcon
#COMMENT: Returns the value currently displayed by @self.
#NAME: group_name
#PARENT: Gtk.RecentInfo.has_group.gboolean
#COMMENT: name of a group
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.cell_set_cell_data.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: setting
#PARENT: Gtk.Window.set_focus_on_map.none
#COMMENT: %TRUE to let this window receive input focus on map
#NAME: rc_get_style
#PARENT: Gtk
#COMMENT: Finds all matching RC styles for a given widget,
composites them together, and then creates a
#GtkStyle representing the composite appearance.
(GTK+ actually keeps a cache of previously
created styles, so a new style may not be
created.)
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.set_show_connect_to_server.none
#COMMENT: a places sidebar
#NAME: foreach
#PARENT: Gtk.TextTagTable
#COMMENT: Calls @func on each tag in @table, with user data @data.
Note that the table may not be modified while iterating
over it (you can’t add/remove tags).
#NAME: chooser
#PARENT: Gtk.FileChooser.unselect_uri.none
#COMMENT: a #GtkFileChooser
#NAME: changed
#PARENT: Gtk.RecentManager
#COMMENT: Emitted when the current recently used resources manager changes
its contents, either by calling gtk_recent_manager_add_item() or
by another application.
#NAME: actions
#PARENT: Gtk.Widget.drag_source_set.none
#COMMENT: the bitmask of possible actions for a drag from this widget
#NAME: GestureDrag
#PARENT: Gtk
#COMMENT: #GtkGestureDrag is a #GtkGesture implementation that recognizes drag
operations. The drag operation itself can be tracked throught the
#GtkGestureDrag:drag-begin, #GtkGestureDrag:drag-update and
#GtkGestureDrag:drag-end signals, or the relevant coordinates be
extracted through gtk_gesture_drag_get_offset() and
gtk_gesture_drag_get_start_point().
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_model.TreeModel
#COMMENT: A #GtkComboBox
#NAME: get_draw
#PARENT: Gtk.SeparatorToolItem.get_draw
#COMMENT: %TRUE if @item is drawn as a line, or just blank.
#NAME: action
#PARENT: Gtk.ToggleAction.get_draw_as_radio.gboolean
#COMMENT: the action object
#NAME: group
#PARENT: Gtk.ToolItemGroup.set_ellipsize.none
#COMMENT: a #GtkToolItemGroup
#NAME: get_reorderable
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns %TRUE if the @tree_column can be reordered by the user.
#NAME: context_id
#PARENT: Gtk.Statusbar.text-pushed.none
#COMMENT: the context id of the relevant message/statusbar
#NAME: paint_hline
#PARENT: Gtk
#COMMENT: Draws a horizontal line from (@x1, @y) to (@x2, @y) in @cr
using the given style and state.
#NAME: cell_area
#PARENT: Gtk.CellRendererClass.get_aligned_area.get_aligned_area.none
#COMMENT: cell area which would be passed to gtk_cell_renderer_render()
#NAME: get_value
#PARENT: Gtk.LevelBar
#COMMENT: Returns the value of the #GtkLevelBar:value property.
#NAME: set_pixbuf
#PARENT: Gtk.SelectionData.set_pixbuf
#COMMENT: %TRUE if the selection was successfully set,
  otherwise %FALSE.
#NAME: pixmap_file
#PARENT: Gtk.rc_find_pixmap_in_path.filename
#COMMENT: name of the pixmap file to locate.
#NAME: set_show_preview_entry
#PARENT: Gtk.FontChooser
#COMMENT: Shows or hides the editable preview entry.
#NAME: prepend_page
#PARENT: Gtk.Assistant.prepend_page
#COMMENT: the index (starting at 0) of the inserted page
#NAME: renderer
#PARENT: Gtk.CellArea.cell_get.none
#COMMENT: a #GtkCellRenderer which is inside @area
#NAME: assistant
#PARENT: Gtk.Assistant.add_action_widget.none
#COMMENT: a #GtkAssistant
#NAME: size
#PARENT: Gtk.IconTheme.lookup_by_gicon_for_scale.IconInfo
#COMMENT: desired icon size
#NAME: toggled
#PARENT: Gtk.ToggleButton
#COMMENT: Should be connected if you wish to perform an action whenever the
#GtkToggleButton's state is changed.
#NAME: down
#PARENT: Gtk.PanDirection
#COMMENT: panned downwards
#NAME: get_printer
#PARENT: Gtk.PrintSettings.get_printer
#COMMENT: the printer name
#NAME: content_buffer
#PARENT: Gtk.TextBuffer.deserialize.gboolean
#COMMENT: the #GtkTextBuffer to deserialize into
#NAME: drag_dest
#PARENT: Gtk.TreeDragDest.row_drop_possible.gboolean
#COMMENT: a #GtkTreeDragDest
#NAME: sequence
#PARENT: Gtk.Gesture.begin.none
#COMMENT: the #GdkEventSequence that made the gesture to be recognized
#NAME: settings
#PARENT: Gtk.PrintSettings.get_resolution_x.gint
#COMMENT: a #GtkPrintSettings
#NAME: shell
#PARENT: Gtk.ToolShellIface.get_orientation.get_orientation.Orientation
#COMMENT: a #GtkToolShell
#NAME: is_type
#PARENT: Gtk.WidgetPath.is_type
#COMMENT: %TRUE if the widget represented by @path is of type @type
#NAME: set_show_recommended
#PARENT: Gtk.AppChooserWidget
#COMMENT: Sets whether the app chooser should show recommended applications
for the content type in a separate section.
#NAME: child
#PARENT: Gtk.ButtonBox.get_child_non_homogeneous.gboolean
#COMMENT: a child of @widget
#NAME: sort_new_with_model
#PARENT: Gtk.TreeModel.sort_new_with_model
#COMMENT: A new #GtkTreeModel.
#NAME: iter
#PARENT: Gtk.TextBuffer.insert_interactive.gboolean
#COMMENT: a position in @buffer
#NAME: text_view
#PARENT: Gtk.TextView.set_right_margin.none
#COMMENT: a #GtkTextView
#NAME: font_desc
#PARENT: Gtk.Style
#COMMENT: #PangoFontDescription
#NAME: Widget
#PARENT: Gtk
#COMMENT: GtkWidget is the base class all widgets in GTK+ derive from. It manages the
widget lifecycle, states and style.

# Height-for-width Geometry Management # {#geometry-management}

GTK+ uses a height-for-width (and width-for-height) geometry management
system. Height-for-width means that a widget can change how much
vertical space it needs, depending on the amount of horizontal space
that it is given (and similar for width-for-height). The most common
example is a label that reflows to fill up the available width, wraps
to fewer lines, and therefore needs less height.

Height-for-width geometry management is implemented in GTK+ by way
of five virtual methods:

- #GtkWidgetClass.get_request_mode()
- #GtkWidgetClass.get_preferred_width()
- #GtkWidgetClass.get_preferred_height()
- #GtkWidgetClass.get_preferred_height_for_width()
- #GtkWidgetClass.get_preferred_width_for_height()
- #GtkWidgetClass.get_preferred_height_and_baseline_for_width()

There are some important things to keep in mind when implementing
height-for-width and when using it in container implementations.

The geometry management system will query a widget hierarchy in
only one orientation at a time. When widgets are initially queried
for their minimum sizes it is generally done in two initial passes
in the #GtkSizeRequestMode chosen by the toplevel.

For example, when queried in the normal
%GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH mode:
First, the default minimum and natural width for each widget
in the interface will be computed using gtk_widget_get_preferred_width().
Because the preferred widths for each container depend on the preferred
widths of their children, this information propagates up the hierarchy,
and finally a minimum and natural width is determined for the entire
toplevel. Next, the toplevel will use the minimum width to query for the
minimum height contextual to that width using
gtk_widget_get_preferred_height_for_width(), which will also be a highly
recursive operation. The minimum height for the minimum width is normally
used to set the minimum size constraint on the toplevel
(unless gtk_window_set_geometry_hints() is explicitly used instead).

After the toplevel window has initially requested its size in both
dimensions it can go on to allocate itself a reasonable size (or a size
previously specified with gtk_window_set_default_size()). During the
recursive allocation process it’s important to note that request cycles
will be recursively executed while container widgets allocate their children.
Each container widget, once allocated a size, will go on to first share the
space in one orientation among its children and then request each child's
height for its target allocated width or its width for allocated height,
depending. In this way a #GtkWidget will typically be requested its size
a number of times before actually being allocated a size. The size a
widget is finally allocated can of course differ from the size it has
requested. For this reason, #GtkWidget caches a  small number of results
to avoid re-querying for the same sizes in one allocation cycle.

See
[GtkContainer’s geometry management section][container-geometry-management]
to learn more about how height-for-width allocations are performed
by container widgets.

If a widget does move content around to intelligently use up the
allocated size then it must support the request in both
#GtkSizeRequestModes even if the widget in question only
trades sizes in a single orientation.

For instance, a #GtkLabel that does height-for-width word wrapping
will not expect to have #GtkWidgetClass.get_preferred_height() called
because that call is specific to a width-for-height request. In this
case the label must return the height required for its own minimum
possible width. By following this rule any widget that handles
height-for-width or width-for-height requests will always be allocated
at least enough space to fit its own content.

Here are some examples of how a %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH widget
generally deals with width-for-height requests, for #GtkWidgetClass.get_preferred_height()
it will do:

|[<!-- language="C" -->
static void
foo_widget_get_preferred_height (GtkWidget *widget,
                                 gint *min_height,
                                 gint *nat_height)
{
   if (i_am_in_height_for_width_mode)
     {
       gint min_width, nat_width;

       GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
                                                           &min_width,
                                                           &nat_width);
       GTK_WIDGET_GET_CLASS (widget)->get_preferred_height_for_width
                                                          (widget,
                                                           min_width,
                                                           min_height,
                                                           nat_height);
     }
   else
     {
        ... some widgets do both. For instance, if a GtkLabel is
        rotated to 90 degrees it will return the minimum and
        natural height for the rotated label here.
     }
}
]|

And in #GtkWidgetClass.get_preferred_width_for_height() it will simply return
the minimum and natural width:
|[<!-- language="C" -->
static void
foo_widget_get_preferred_width_for_height (GtkWidget *widget,
                                           gint for_height,
                                           gint *min_width,
                                           gint *nat_width)
{
   if (i_am_in_height_for_width_mode)
     {
       GTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget,
                                                           min_width,
                                                           nat_width);
     }
   else
     {
        ... again if a widget is sometimes operating in
        width-for-height mode (like a rotated GtkLabel) it can go
        ahead and do its real width for height calculation here.
     }
}
]|

Often a widget needs to get its own request during size request or
allocation. For example, when computing height it may need to also
compute width. Or when deciding how to use an allocation, the widget
may need to know its natural size. In these cases, the widget should
be careful to call its virtual methods directly, like this:

|[<!-- language="C" -->
GTK_WIDGET_GET_CLASS(widget)->get_preferred_width (widget,
                                                   &min,
                                                   &natural);
]|

It will not work to use the wrapper functions, such as
gtk_widget_get_preferred_width() inside your own size request
implementation. These return a request adjusted by #GtkSizeGroup
and by the #GtkWidgetClass.adjust_size_request() virtual method. If a
widget used the wrappers inside its virtual method implementations,
then the adjustments (such as widget margins) would be applied
twice. GTK+ therefore does not allow this and will warn if you try
to do it.

Of course if you are getting the size request for
another widget, such as a child of a
container, you must use the wrapper APIs.
Otherwise, you would not properly consider widget margins,
#GtkSizeGroup, and so forth.

Since 3.10 Gtk+ also supports baseline vertical alignment of widgets. This
means that widgets are positioned such that the typographical baseline of
widgets in the same row are aligned. This happens if a widget supports baselines,
has a vertical alignment of %GTK_ALIGN_BASELINE, and is inside a container
that supports baselines and has a natural “row” that it aligns to the baseline,
or a baseline assigned to it by the grandparent.

Baseline alignment support for a widget is done by the #GtkWidgetClass.get_preferred_height_and_baseline_for_width()
virtual function. It allows you to report a baseline in combination with the
minimum and natural height. If there is no baseline you can return -1 to indicate
this. The default implementation of this virtual function calls into the
#GtkWidgetClass.get_preferred_height() and #GtkWidgetClass.get_preferred_height_for_width(),
so if baselines are not supported it doesn’t need to be implemented.

If a widget ends up baseline aligned it will be allocated all the space in the parent
as if it was %GTK_ALIGN_FILL, but the selected baseline can be found via gtk_widget_get_allocated_baseline().
If this has a value other than -1 you need to align the widget such that the baseline
appears at the position.

# Style Properties

#GtkWidget introduces “style
properties” - these are basically object properties that are stored
not on the object, but in the style object associated to the widget. Style
properties are set in [resource files][gtk3-Resource-Files].
This mechanism is used for configuring such things as the location of the
scrollbar arrows through the theme, giving theme authors more control over the
look of applications without the need to write a theme engine in C.

Use gtk_widget_class_install_style_property() to install style properties for
a widget class, gtk_widget_class_find_style_property() or
gtk_widget_class_list_style_properties() to get information about existing
style properties and gtk_widget_style_get_property(), gtk_widget_style_get() or
gtk_widget_style_get_valist() to obtain the value of a style property.

# GtkWidget as GtkBuildable

The GtkWidget implementation of the GtkBuildable interface supports a
custom <accelerator> element, which has attributes named ”key”, ”modifiers”
and ”signal” and allows to specify accelerators.

An example of a UI definition fragment specifying an accelerator:
|[
<object class="GtkButton">
  <accelerator key="q" modifiers="GDK_CONTROL_MASK" signal="clicked"/>
</object>
]|

In addition to accelerators, GtkWidget also support a custom <accessible>
element, which supports actions and relations. Properties on the accessible
implementation of an object can be set by accessing the internal child
“accessible” of a #GtkWidget.

An example of a UI definition fragment specifying an accessible:
|[
<object class="GtkButton" id="label1"/>
  <property name="label">I am a Label for a Button</property>
</object>
<object class="GtkButton" id="button1">
  <accessibility>
    <action action_name="click" translatable="yes">Click the button.</action>
    <relation target="label1" type="labelled-by"/>
  </accessibility>
  <child internal-child="accessible">
    <object class="AtkObject" id="a11y-button1">
      <property name="accessible-name">Clickable Button</property>
    </object>
  </child>
</object>
]|

Finally, GtkWidget allows style information such as style classes to
be associated with widgets, using the custom <style> element:
|[
<object class="GtkButton" id="button1">
  <style>
    <class name="my-special-button-class"/>
    <class name="dark-button"/>
  </style>
</object>
]|

# Building composite widgets from template XML ## {#composite-templates}

GtkWidget exposes some facilities to automate the proceedure
of creating composite widgets using #GtkBuilder interface description
language.

To create composite widgets with #GtkBuilder XML, one must associate
the interface description with the widget class at class initialization
time using gtk_widget_class_set_template().

The interface description semantics expected in composite template descriptions
is slightly different from regulare #GtkBuilder XML.

Unlike regular interface descriptions, gtk_widget_class_set_template() will
expect a <template> tag as a direct child of the toplevel <interface>
tag. The <template> tag must specify the “class” attribute which must be
the type name of the widget. Optionally, the “parent” attribute may be
specified to specify the direct parent type of the widget type, this is
ignored by the GtkBuilder but required for Glade to introspect what kind
of properties and internal children exist for a given type when the actual
type does not exist.

The XML which is contained inside the <template> tag behaves as if it were
added to the <object> tag defining @widget itself. You may set properties
on @widget by inserting <property> tags into the <template> tag, and also
add <child> tags to add children and extend @widget in the normal way you
would with <object> tags.

Additionally, <object> tags can also be added before and after the initial
<template> tag in the normal way, allowing one to define auxilary objects
which might be referenced by other widgets declared as children of the
<template> tag.

An example of a GtkBuilder Template Definition:
|[
<interface>
  <template class="FooWidget" parent="GtkBox">
    <property name="orientation">GTK_ORIENTATION_HORIZONTAL</property>
    <property name="spacing">4</property>
    <child>
      <object class="GtkButton" id="hello_button">
        <property name="label">Hello World</property>
        <signal name="clicked" handler="hello_button_clicked" object="FooWidget" swapped="yes"/>
      </object>
    </child>
    <child>
      <object class="GtkButton" id="goodbye_button">
        <property name="label">Goodbye World</property>
      </object>
    </child>
  </template>
</interface>
]|

Typically, you'll place the template fragment into a file that is
bundled with your project, using #GResource. In order to load the
template, you need to call gtk_widget_class_set_template_from_resource()
from the class initialization of your #GtkWidget type:

|[<!-- language="C" -->
static void
foo_widget_class_init (FooWidgetClass *klass)
{
  // ...

  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
                                               "/com/example/ui/foowidget.ui");
}
]|

You will also need to call gtk_widget_init_template() from the instance
initialization function:

|[<!-- language="C" -->
static void
foo_widget_init (FooWidget *self)
{
  // ...
  gtk_widget_init_template (GTK_WIDGET (self));
}
]|

You can access widgets defined in the template using the
gtk_widget_get_template_child() function, but you will typically declare
a pointer in the instance private data structure of your type using the same
name as the widget in the template definition, and call
gtk_widget_class_bind_template_child_private() with that name, e.g.

|[<!-- language="C" -->
typedef struct {
  GtkWidget *hello_button;
  GtkWidget *goodbye_button;
} FooWidgetPrivate;

G_DEFINE_TYPE_WITH_PRIVATE (FooWidget, foo_widget, GTK_TYPE_BOX)

static void
foo_widget_class_init (FooWidgetClass *klass)
{
  // ...
  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
                                               "/com/example/ui/foowidget.ui");
  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),
                                                FooWidget, hello_button);
  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),
                                                FooWidget, goodbye_button);
}
]|

You can also use gtk_widget_class_bind_template_callback() to connect a signal
callback defined in the template with a function visible in the scope of the
class, e.g.

|[<!-- language="C" -->
// the signal handler has the instance and user data swapped
// because of the swapped="yes" attribute in the template XML
static void
hello_button_clicked (FooWidget *self,
                      GtkButton *button)
{
  g_print ("Hello, world!\n");
}

static void
foo_widget_class_init (FooWidgetClass *klass)
{
  // ...
  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
                                               "/com/example/ui/foowidget.ui");
  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), hello_button_clicked);
}
]|
#NAME: new
#PARENT: Gtk.OffscreenWindow.new
#COMMENT: A pointer to a #GtkWidget
#NAME: free
#PARENT: Gtk.WidgetPath
#COMMENT: Decrements the reference count on @path, freeing the structure
if the reference count reaches 0.
#NAME: get_sizes
#PARENT: Gtk.IconSet
#COMMENT: Obtains a list of icon sizes this icon set can render. The returned
array must be freed with g_free().
#NAME: get_tab_label_text
#PARENT: Gtk.Notebook.get_tab_label_text
#COMMENT: the text of the tab label, or %NULL if the
    tab label widget is not a #GtkLabel. The string is owned
    by the widget and must not be freed.
#NAME: iter
#PARENT: Gtk.TextIter.starts_line.gboolean
#COMMENT: an iterator
#NAME: widget
#PARENT: Gtk.Widget.size_allocate.none
#COMMENT: a #GtkWidget
#NAME: flags
#PARENT: Gtk.MessageDialog.new.Widget
#COMMENT: flags
#NAME: message-area
#PARENT: Gtk.MessageDialog
#COMMENT: The #GtkBox that corresponds to the message area of this dialog.  See
gtk_message_dialog_get_message_area() for a detailed description of this
area.
#NAME: get_icon_widget
#PARENT: Gtk.ToolButton.get_icon_widget
#COMMENT: The widget used as icon
    on @button, or %NULL.
#NAME: get_text_alignment
#PARENT: Gtk.ToolItem.get_text_alignment
#COMMENT: a #gfloat indicating the horizontal text alignment
used for @tool_item
#NAME: proxy
#PARENT: Gtk.tree_row_reference_reordered.none
#COMMENT: a #GObject
#NAME: get_style
#PARENT: Gtk.ToolPalette.get_style
#COMMENT: the #GtkToolbarStyle of items in the tool palette.
#NAME: get_vadjustment
#PARENT: Gtk.TreeView
#COMMENT: Gets the #GtkAdjustment currently being used for the vertical aspect.
#NAME: tree_get_row_drag_data
#PARENT: Gtk.tree_get_row_drag_data
#COMMENT: %TRUE if @selection_data had target type %GTK_TREE_MODEL_ROW and
 is otherwise valid
#NAME: parent_class
#PARENT: Gtk.TextBufferClass
#COMMENT: The object class structure needs to be the first.
#NAME: set_device_enabled
#PARENT: Gtk.Widget
#COMMENT: Enables or disables a #GdkDevice to interact with @widget
and all its children.

It does so by descending through the #GdkWindow hierarchy
and enabling the same mask that is has for core events
(i.e. the one that gdk_window_get_events() returns).
#NAME: gesture
#PARENT: Gtk.Gesture.get_bounding_box_center.gboolean
#COMMENT: a #GtkGesture
#NAME: new
#PARENT: Gtk.ColorChooserDialog.new
#COMMENT: a new #GtkColorChooserDialog
#NAME: get_model
#PARENT: Gtk.TreeView
#COMMENT: Returns the model the #GtkTreeView is based on.  Returns %NULL if the
model is unset.
#NAME: accelerator_parse_with_keycode
#PARENT: Gtk
#COMMENT: Parses a string representing an accelerator, similarly to
gtk_accelerator_parse() but handles keycodes as well. This is only
useful for system-level components, applications should use
gtk_accelerator_parse() instead.

If @accelerator_codes is given and the result stored in it is non-%NULL,
the result must be freed with g_free().

If a keycode is present in the accelerator and no @accelerator_codes
is given, the parse will fail.

If the parse fails, @accelerator_key, @accelerator_mods and
@accelerator_codes will be set to 0 (zero).
#NAME: do-overwrite-confirmation
#PARENT: Gtk.FileChooser
#COMMENT: Whether a file chooser in %GTK_FILE_CHOOSER_ACTION_SAVE mode
will present an overwrite confirmation dialog if the user
selects a file name that already exists.
#NAME: pixbuf
#PARENT: Gtk.IconSet.new_from_pixbuf.IconSet
#COMMENT: a #GdkPixbuf
#NAME: action
#PARENT: Gtk.Action.connect_accelerator.none
#COMMENT: a #GtkAction
#NAME: get_shadow_type
#PARENT: Gtk.Frame.get_shadow_type
#COMMENT: the current shadow type of the frame.
#NAME: rhs
#PARENT: Gtk.TextIter.equal.gboolean
#COMMENT: another #GtkTextIter
#NAME: context
#PARENT: Gtk.render_arrow.none
#COMMENT: a #GtkStyleContext
#NAME: Expander
#PARENT: Gtk
#COMMENT: A #GtkExpander allows the user to hide or show its child by clicking
on an expander triangle similar to the triangles used in a #GtkTreeView.

Normally you use an expander as you would use any other descendant
of #GtkBin; you create the child widget and use gtk_container_add()
to add it to the expander. When the expander is toggled, it will take
care of showing and hiding the child automatically.

# Special Usage

There are situations in which you may prefer to show and hide the
expanded widget yourself, such as when you want to actually create
the widget at expansion time. In this case, create a #GtkExpander
but do not add a child to it. The expander widget has an
#GtkExpander:expanded property which can be used to monitor
its expansion state. You should watch this property with a signal
connection as follows:

|[<!-- language="C" -->
expander = gtk_expander_new_with_mnemonic ("_More Options");
g_signal_connect (expander, "notify::expanded",
                  G_CALLBACK (expander_callback), NULL);

...

static void
expander_callback (GObject    *object,
                   GParamSpec *param_spec,
                   gpointer    user_data)
{
  GtkExpander *expander;

  expander = GTK_EXPANDER (object);

  if (gtk_expander_get_expanded (expander))
    {
      // Show or create widgets
    }
  else
    {
      // Hide or destroy widgets
    }
}
]|

# GtkExpander as GtkBuildable

The GtkExpander implementation of the GtkBuildable interface supports
placing a child in the label position by specifying “label” as the
“type” attribute of a <child> element. A normal content child can be
specified without specifying a <child> type attribute.

An example of a UI definition fragment with GtkExpander:
|[
<object class="GtkExpander">
  <child type="label">
    <object class="GtkLabel" id="expander-label"/>
  </child>
  <child>
    <object class="GtkEntry" id="expander-content"/>
  </child>
</object>
]|
#NAME: class
#PARENT: Gtk.PathType
#COMMENT: Deprecated
#NAME: drag_source_add_uri_targets
#PARENT: Gtk.Widget
#COMMENT: Add the URI targets supported by #GtkSelectionData to
the target list of the drag source.  The targets
are added with @info = 0. If you need another value,
use gtk_target_list_add_uri_targets() and
gtk_drag_source_set_target_list().
#NAME: context
#PARENT: Gtk.CellArea.get_cell_at_position.CellRenderer
#COMMENT: the #GtkCellAreaContext used to hold sizes for @area.
#NAME: action
#PARENT: Gtk.Action.set_label.none
#COMMENT: a #GtkAction
#NAME: custom-widget-apply
#PARENT: Gtk.PrintOperation
#COMMENT: Emitted right before #GtkPrintOperation::begin-print if you added
a custom widget in the #GtkPrintOperation::create-custom-widget handler.
When you get this signal you should read the information from the
custom widgets, as the widgets are not guaraneed to be around at a
later time.
#NAME: set_file
#PARENT: Gtk.FileChooser.set_file
#COMMENT: Not useful.
#NAME: get_selected_rows
#PARENT: Gtk.ListBox.get_selected_rows
#COMMENT: 
    A #GList containing the #GtkWidget for each selected child.
    Free with g_list_free() when done.
#NAME: backward_visible_word_start
#PARENT: Gtk.TextIter
#COMMENT: Moves backward to the previous visible word start. (If @iter is currently
on a word start, moves backward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).
#NAME: get_flags
#PARENT: Gtk.TreeModel
#COMMENT: Returns a set of flags supported by this interface.

The flags are a bitwise combination of #GtkTreeModelFlags.
The flags supported should not change during the lifetime
of the @tree_model.
#NAME: button
#PARENT: Gtk.ButtonClass.leave.leave.none
#COMMENT: The #GtkButton you want to send the signal to.
#NAME: get_show_enter_location
#PARENT: Gtk.PlacesSidebar
#COMMENT: Returns the value previously set with gtk_places_sidebar_set_show_enter_location()
#NAME: STYLE_CLASS_DESTRUCTIVE_ACTION
#PARENT: Gtk
#COMMENT: A CSS class used when an action (usually a button) is
one that is expected to remove or destroy something visible
to the user.
#NAME: actionable
#PARENT: Gtk.Actionable.set_action_target.none
#COMMENT: a #GtkActionable widget
#NAME: groups
#PARENT: Gtk.RecentData
#COMMENT: a vector of strings containing
  groups names;
#NAME: filter_info
#PARENT: Gtk.RecentFilter.filter.gboolean
#COMMENT: a #GtkRecentFilterInfo containing information
  about a recently used resource
#NAME: STOCK_FLOPPY
#PARENT: Gtk
#COMMENT: The “Floppy” item and icon.
#NAME: cell_area
#PARENT: Gtk.CellArea.inner_cell_area.none
#COMMENT: the @widget relative coordinates where one of @area’s cells
            is to be placed
#NAME: child
#PARENT: Gtk.ButtonBox.set_child_non_homogeneous.none
#COMMENT: a child of @widget
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_end_iter.none
#COMMENT: a #GtkTextBuffer
#NAME: text_view
#PARENT: Gtk.TextView.get_default_attributes.TextAttributes
#COMMENT: a #GtkTextView
#NAME: expand
#PARENT: Gtk.TreeView.set_hover_expand.none
#COMMENT: %TRUE to enable hover selection mode
#NAME: accelerator_codes
#PARENT: Gtk.accelerator_parse_with_keycode.none
#COMMENT: 
    return location for accelerator keycodes, or %NULL
#NAME: editable
#PARENT: Gtk.EditableInterface.get_selection_bounds.get_selection_bounds.gboolean
#COMMENT: a #GtkEditable
#NAME: get_name
#PARENT: Gtk.IconSize
#COMMENT: Gets the canonical name of the given icon size. The returned string
is statically allocated and should not be freed.
#NAME: colors_per_line
#PARENT: Gtk.ColorChooser.add_palette.none
#COMMENT: the number of colors to show in each row/column
#NAME: new
#PARENT: Gtk.CellAreaBox
#COMMENT: Creates a new #GtkCellAreaBox.
#NAME: direction
#PARENT: Gtk.MenuButton.set_direction.none
#COMMENT: a #GtkArrowType
#NAME: get_range
#PARENT: Gtk.SpinButton
#COMMENT: Gets the range allowed for @spin_button.
See gtk_spin_button_set_range().
#NAME: embedded
#PARENT: Gtk.StatusIcon
#COMMENT: %TRUE if the statusicon is embedded in a notification area.
#NAME: direction
#PARENT: Gtk.MenuButton
#COMMENT: The #GtkArrowType representing the direction in which the
menu or popover will be popped out.
#NAME: get_border
#PARENT: Gtk.Scrollable.get_border
#COMMENT: %TRUE if @border has been set
#NAME: rules-hint
#PARENT: Gtk.TreeView
#COMMENT: Sets a hint to the theme to draw rows in alternating colors.
#NAME: box
#PARENT: Gtk.Box.set_baseline_position.none
#COMMENT: a #GtkBox
#NAME: map_color
#PARENT: Gtk.StyleProperties
#COMMENT: Maps @color so it can be referenced by @name. See
gtk_style_properties_lookup_color()
#NAME: button
#PARENT: Gtk.Button.get_focus_on_click.gboolean
#COMMENT: a #GtkButton
#NAME: ColorChooser
#PARENT: Gtk
#COMMENT: #GtkColorChooser is an interface that is implemented by widgets
for choosing colors. Depending on the situation, colors may be
allowed to have alpha (translucency).

In GTK+, the main widgets that implement this interface are
#GtkColorChooserWidget, #GtkColorChooserDialog and #GtkColorButton.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_list_classes.utf8
#COMMENT: position to query, -1 for the path head
#NAME: set_text_column
#PARENT: Gtk.EntryCompletion
#COMMENT: Convenience function for setting up the most used case of this code: a
completion list with just strings. This function will set up @completion
to have a list displaying all (and just) strings in the completion list,
and to get those strings from @column in the model of @completion.

This functions creates and adds a #GtkCellRendererText for the selected
column. If you need to set the text column, but don't want the cell
renderer, use g_object_set() to set the #GtkEntryCompletion:text-column
property directly.
#NAME: STOCK_GOTO_LAST
#PARENT: Gtk
#COMMENT: The “Last” item and icon. The icon has an RTL variant.
#NAME: upper
#PARENT: Gtk.Adjustment.set_upper.none
#COMMENT: the new maximum value
#NAME: application
#PARENT: Gtk.Application.set_app_menu.none
#COMMENT: a #GtkApplication
#NAME: get_nth_item
#PARENT: Gtk.ToolItemGroup.get_nth_item
#COMMENT: the #GtkToolItem at index
#NAME: closure
#PARENT: Gtk.AccelGroup.from_accel_closure.AccelGroup
#COMMENT: a #GClosure
#NAME: image
#PARENT: Gtk.Image.get_icon_set.none
#COMMENT: a #GtkImage
#NAME: get_child_revealed
#PARENT: Gtk.Revealer.get_child_revealed
#COMMENT: %TRUE if the child is fully revealed
#NAME: group
#PARENT: Gtk.ToolPalette.get_expand.gboolean
#COMMENT: a #GtkToolItemGroup which is a child of palette
#NAME: color
#PARENT: Gtk.SymbolicColor.ref.SymbolicColor
#COMMENT: a #GtkSymbolicColor
#NAME: settings
#PARENT: Gtk.PrintSettings.get_length.gdouble
#COMMENT: a #GtkPrintSettings
#NAME: set_hexpand
#PARENT: Gtk.Widget
#COMMENT: Sets whether the widget would like any available extra horizontal
space. When a user resizes a #GtkWindow, widgets with expand=TRUE
generally receive the extra space. For example, a list or
scrollable area or document in your window would often be set to
expand.

Call this function to set the expand flag if you would like your
widget to become larger horizontally when the window has extra
room.

By default, widgets automatically expand if any of their children
want to expand. (To see if a widget will automatically expand given
its current children and state, call gtk_widget_compute_expand(). A
container can decide how the expandability of children affects the
expansion of the container by overriding the compute_expand virtual
method on #GtkWidget.).

Setting hexpand explicitly with this function will override the
automatic expand behavior.

This function forces the widget to expand or not to expand,
regardless of children.  The override occurs because
gtk_widget_set_hexpand() sets the hexpand-set property (see
gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
value to be used, rather than looking at children and widget state.
#NAME: new
#PARENT: Gtk.IconSet.new
#COMMENT: a new #GtkIconSet
#NAME: iter
#PARENT: Gtk.TextIter.forward_search.gboolean
#COMMENT: start of search
#NAME: style
#PARENT: Gtk.paint_vline.none
#COMMENT: a #GtkStyle
#NAME: StatusIcon
#PARENT: Gtk
#COMMENT: The “system tray” or notification area is normally used for transient icons
that indicate some special state. For example, a system tray icon might
appear to tell the user that they have new mail, or have an incoming instant
message, or something along those lines. The basic idea is that creating an
icon in the notification area is less annoying than popping up a dialog.

A #GtkStatusIcon object can be used to display an icon in a “system tray”.
The icon can have a tooltip, and the user can interact with it by
activating it or popping up a context menu. Critical information should
not solely be displayed in a #GtkStatusIcon, since it may not be
visible (e.g. when the user doesn’t have a notification area on his panel).
This can be checked with gtk_status_icon_is_embedded().

On X11, the implementation follows the
[FreeDesktop System Tray Specification](http://www.freedesktop.org/wiki/Specifications/systemtray-spec).
Implementations of the “tray” side of this specification can
be found e.g. in the GNOME 2 and KDE panel applications.

Note that a GtkStatusIcon is not a widget, but just
a #GObject. Making it a widget would be impractical, since the system tray
on Win32 doesn’t allow to embed arbitrary widgets.

GtkStatusIcon has been deprecated in 3.14. You should consider using
notifications or more modern platform-specific APIs instead. GLib provides
the #GNotification API which works well with #GtkApplication. Also see this
[HowDoI](https://wiki.gnome.org/HowDoI/GNotification).
#NAME: is_visible
#PARENT: Gtk.Widget.set_child_visible.none
#COMMENT: if %TRUE, @widget should be mapped along with its parent.
#NAME: window
#PARENT: Gtk.Window.is_maximized.gboolean
#COMMENT: a #GtkWindow
#NAME: get_dither
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_DITHER.
#NAME: len
#PARENT: Gtk.TextBuffer.insert_at_cursor.none
#COMMENT: length of text, in bytes
#NAME: width
#PARENT: Gtk.paint_tab.none
#COMMENT: the width of the rectangle to draw the tab in
#NAME: get_drag_target_group
#PARENT: Gtk.ToolPalette.get_drag_target_group
#COMMENT: the #GtkTargetEntry for a dragged group
#NAME: get_sort_column_id
#PARENT: Gtk.TreeSortableIface.get_sort_column_id.get_sort_column_id
#COMMENT: %TRUE if the sort column is not one of the special sort
  column ids.
#NAME: unref
#PARENT: Gtk.WidgetPath
#COMMENT: Decrements the reference count on @path, freeing the structure
if the reference count reaches 0.
#NAME: get_insert
#PARENT: Gtk.TextBuffer
#COMMENT: Returns the mark that represents the cursor (insertion point).
Equivalent to calling gtk_text_buffer_get_mark() to get the mark
named “insert”, but very slightly more efficient, and involves less
typing.
#NAME: fg
#PARENT: Gtk.IconInfo.load_symbolic_async.none
#COMMENT: a #GdkRGBA representing the foreground color of the icon
#NAME: action
#PARENT: Gtk.ActionGroup.disconnect-proxy.none
#COMMENT: the action
#NAME: class_branch_pspecs
#PARENT: Gtk.BindingSet
#COMMENT: unused
#NAME: set_show_border
#PARENT: Gtk.Notebook
#COMMENT: Sets whether a bevel will be drawn around the notebook pages.
This only has a visual effect when the tabs are not shown.
See gtk_notebook_set_show_tabs().
#NAME: settings
#PARENT: Gtk.PrintSettings.set_resolution.none
#COMMENT: a #GtkPrintSettings
#NAME: get_selectable
#PARENT: Gtk.ListBoxRow
#COMMENT: Gets the value of the #GtkListBoxRow:selectable property
for this row.
#NAME: toggle_button
#PARENT: Gtk.ToggleButton.set_mode.none
#COMMENT: a #GtkToggleButton
#NAME: widget
#PARENT: Gtk.Widget.get_allocation.none
#COMMENT: a #GtkWidget
#NAME: path
#PARENT: Gtk.WidgetPath.iter_get_siblings.WidgetPath
#COMMENT: a #GtkWidgetPath
#NAME: new
#PARENT: Gtk.CellRendererCombo.new
#COMMENT: the new cell renderer
#NAME: widget
#PARENT: Gtk.CellRendererClass.get_preferred_width.get_preferred_width.none
#COMMENT: the #GtkWidget this cell will be rendering to
#NAME: scale
#PARENT: Gtk.IconTheme.load_icon_for_scale.GdkPixbuf.Pixbuf
#COMMENT: desired scale
#NAME: value
#PARENT: Gtk.Range.change-value.gboolean
#COMMENT: the new value resulting from the scroll action
#NAME: box
#PARENT: Gtk.FlowBox.set_min_children_per_line.none
#COMMENT: a #GtkFlowBox
#NAME: STYLE_CLASS_TROUGH
#PARENT: Gtk
#COMMENT: A CSS class to match troughs, as in scrollbars and progressbars.

This is used in #GtkRange and its subclasses, #GtkProgressBar
and #GtkSwitch.
#NAME: tree_view
#PARENT: Gtk.TreeView.map_expanded_rows.none
#COMMENT: A #GtkTreeView
#NAME: container
#PARENT: Gtk.Container.child_get.none
#COMMENT: a #GtkContainer
#NAME: get_is_locked
#PARENT: Gtk.AccelGroup
#COMMENT: Locks are added and removed using gtk_accel_group_lock() and
gtk_accel_group_unlock().
#NAME: im_context_filter_keypress
#PARENT: Gtk.Entry
#COMMENT: Allow the #GtkEntry input method to internally handle key press
and release events. If this function returns %TRUE, then no further
processing should be done for this key event. See
gtk_im_context_filter_keypress().

Note that you are expected to call this function from your handler
when overriding key event handling. This is needed in the case when
you need to insert your own key handling between the input method
and the default key event handling of the #GtkEntry.
See gtk_text_view_reset_im_context() for an example of use.
#NAME: columns
#PARENT: Gtk.Table.new.Widget
#COMMENT: The number of columns the new table should have.
#NAME: get_homogeneous
#PARENT: Gtk.Table
#COMMENT: Returns whether the table cells are all constrained to the same
width and height. (See gtk_table_set_homogeneous ())
#NAME: success
#PARENT: Gtk.DragResult
#COMMENT: The drag operation was successful.
#NAME: homogeneous
#PARENT: Gtk.FlowBox
#COMMENT: Determines whether all children should be allocated the
same size.
#NAME: widget
#PARENT: Gtk.Widget.set_receives_default.none
#COMMENT: a #GtkWidget
#NAME: label
#PARENT: Gtk.Label.set_line_wrap_mode.none
#COMMENT: a #GtkLabel
#NAME: forward_line
#PARENT: Gtk.TextIter.forward_line
#COMMENT: whether @iter can be dereferenced
#NAME: context
#PARENT: Gtk.IMMulticontext.get_context_id.utf8
#COMMENT: a #GtkIMMulticontext
#NAME: has_default_sort_func
#PARENT: Gtk.TreeSortable.has_default_sort_func
#COMMENT: %TRUE, if the model has a default sort function
#NAME: padding_right
#PARENT: Gtk.Alignment.set_padding.none
#COMMENT: the padding at the right of the widget.
#NAME: accelerator_mods
#PARENT: Gtk.AccelLabel.get_accel.none
#COMMENT: return location for the modifier mask
#NAME: right
#PARENT: Gtk.PositionType
#COMMENT: The feature is at the right edge.
#NAME: delete-range
#PARENT: Gtk.TextBuffer
#COMMENT: The ::delete-range signal is emitted to delete a range
from a #GtkTextBuffer.

Note that if your handler runs before the default handler it must not
invalidate the @start and @end iters (or has to revalidate them).
The default signal handler revalidates the @start and @end iters to
both point to the location where text was deleted. Handlers
which run after the default handler (see g_signal_connect_after())
do not have access to the deleted text.

See also: gtk_text_buffer_delete().
#NAME: entry
#PARENT: Gtk.Entry.set_overwrite_mode.none
#COMMENT: a #GtkEntry
#NAME: settings
#PARENT: Gtk.PrintSettings.get_page_ranges.PageRange
#COMMENT: a #GtkPrintSettings
#NAME: get_adjustment
#PARENT: Gtk.SpinButton
#COMMENT: Get the adjustment associated with a #GtkSpinButton
#NAME: set_markup
#PARENT: Gtk.Tooltip
#COMMENT: Sets the text of the tooltip to be @markup, which is marked up
with the [Pango text markup language][PangoMarkupFormat].
If @markup is %NULL, the label will be hidden.
#NAME: fill
#PARENT: Gtk.Box.set_child_packing.none
#COMMENT: the new value of the fill child property
#NAME: tab_label
#PARENT: Gtk.Notebook.append_page.gint
#COMMENT: the #GtkWidget to be used as the label
    for the page, or %NULL to use the default label, “page N”
#NAME: set_paper_size
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
%GTK_PRINT_SETTINGS_PAPER_WIDTH and
%GTK_PRINT_SETTINGS_PAPER_HEIGHT.
#NAME: item_width
#PARENT: Gtk.IconView.set_item_width.none
#COMMENT: the width for each item
#NAME: button
#PARENT: Gtk.ScaleButton.set_value.none
#COMMENT: a #GtkScaleButton
#NAME: widget
#PARENT: Gtk.WidgetClass.child_notify.child_notify.none
#COMMENT: a #GtkWidget
#NAME: n-points
#PARENT: Gtk.Gesture
#COMMENT: The number of touch points that trigger recognition on this gesture,
#NAME: path
#PARENT: Gtk.CellRendererToggle.toggled.none
#COMMENT: string representation of #GtkTreePath describing the
       event location
#NAME: set_border_width
#PARENT: Gtk.Container
#COMMENT: Sets the border width of the container.

The border width of a container is the amount of space to leave
around the outside of the container. The only exception to this is
#GtkWindow; because toplevel windows can’t leave space outside,
they leave the space inside. The border is added on all sides of
the container. To add space to only one side, use a specific
#GtkWidget:margin property on the child widget, for example
#GtkWidget:margin-top.
#NAME: BuilderError
#PARENT: Gtk
#COMMENT: Error codes that identify various errors that can occur while using
#GtkBuilder.
#NAME: context
#PARENT: Gtk.StyleContext.get_junction_sides.JunctionSides
#COMMENT: a #GtkStyleContext
#NAME: add_ui_from_string
#PARENT: Gtk.UIManager.add_ui_from_string
#COMMENT: The merge id for the merged UI. The merge id can be used
  to unmerge the UI with gtk_ui_manager_remove_ui(). If an error occurred,
  the return value is 0.
#NAME: previous_page
#PARENT: Gtk.Assistant
#COMMENT: Navigate to the previous visited page.

It is a programming error to call this function when
no previous page is available.

This function is for use when creating pages of the
#GTK_ASSISTANT_PAGE_CUSTOM type.
#NAME: user_data
#PARENT: Gtk.MenuPositionFunc.none
#COMMENT: the data supplied by the user in the gtk_menu_popup()
    @data parameter.
#NAME: orientation
#PARENT: Gtk.Paned.new.Widget
#COMMENT: the paned’s orientation.
#NAME: move-focus-out
#PARENT: Gtk.ScrolledWindow
#COMMENT: The ::move-focus-out signal is a
[keybinding signal][GtkBindingSignal] which gets
emitted when focus is moved away from the scrolled window by a
keybinding. The #GtkWidget::move-focus signal is emitted with
@direction_type on this scrolled windows toplevel parent in the
container hierarchy. The default bindings for this signal are
`Tab + Ctrl` and `Tab + Ctrl + Shift`.
#NAME: toggle
#PARENT: Gtk.Window.enable-debugging.gboolean
#COMMENT: toggle the debugger
#NAME: cell_area
#PARENT: Gtk.CellArea.get_cell_allocation.none
#COMMENT: the whole allocated area for @area in @widget
            for this row
#NAME: set_show_enter_location
#PARENT: Gtk.PlacesSidebar
#COMMENT: Sets whether the @sidebar should show an item for connecting to a network server; this is off by default.
An application may want to turn this on if it implements a way for the user to connect
to network servers directly.
#NAME: tooltip
#PARENT: Gtk.RecentAction.new.Action
#COMMENT: a tooltip for the action, or %NULL
#NAME: wx
#PARENT: Gtk.TreeView.convert_bin_window_to_widget_coords.none
#COMMENT: return location for widget X coordinate
#NAME: get_sensitive
#PARENT: Gtk.CellRenderer.get_sensitive
#COMMENT: %TRUE if the cell renderer is sensitive
#NAME: set_custom_tab_label
#PARENT: Gtk.PrintOperation
#COMMENT: Sets the label for the tab holding custom widgets.
#NAME: markup
#PARENT: Gtk.StatusIcon.set_tooltip_markup.none
#COMMENT: the contents of the tooltip for @status_icon, or %NULL
#NAME: wy
#PARENT: Gtk.TreeView.convert_bin_window_to_widget_coords.none
#COMMENT: return location for widget Y coordinate
#NAME: insert_column_with_attributes
#PARENT: Gtk.TreeView
#COMMENT: Creates a new #GtkTreeViewColumn and inserts it into the @tree_view at
@position.  If @position is -1, then the newly created column is inserted at
the end.  The column is initialized with the attributes given. If @tree_view
has “fixed_height” mode enabled, then the new column will have its sizing
property set to be GTK_TREE_VIEW_COLUMN_FIXED.
#NAME: new_from_gicon
#PARENT: Gtk.Image
#COMMENT: Creates a #GtkImage displaying an icon from the current icon theme.
If the icon name isn’t known, a “broken image” icon will be
displayed instead.  If the current icon theme is changed, the icon
will be updated appropriately.
#NAME: get_widgets
#PARENT: Gtk.SizeGroup.get_widgets
#COMMENT: a #GSList of
  widgets. The list is owned by GTK+ and should not be modified.
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_has_selection.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: import
#PARENT: Gtk.CssProviderError
#COMMENT: Import error.
#NAME: icon_info
#PARENT: Gtk.IconInfo.get_base_size.gint
#COMMENT: a #GtkIconInfo
#NAME: has_class
#PARENT: Gtk.ThemingEngine
#COMMENT: Returns %TRUE if the currently rendered contents have
defined the given class name.
#NAME: new_with_label
#PARENT: Gtk.LinkButton
#COMMENT: Creates a new #GtkLinkButton containing a label.
#NAME: cell-area
#PARENT: Gtk.CellView
#COMMENT: The #GtkCellArea rendering cells

If no area is specified when creating the cell view with gtk_cell_view_new_with_context()
a horizontally oriented #GtkCellAreaBox will be used.

since 3.0
#NAME: direction
#PARENT: Gtk.MenuShell.move-current.none
#COMMENT: the direction to move
#NAME: get_accels_for_action
#PARENT: Gtk.Application.get_accels_for_action
#COMMENT: accelerators for @detailed_action_name, as
    a %NULL-terminated array. Free with g_strfreev() when no longer needed
#NAME: preview
#PARENT: Gtk.PrintOperationPreviewIface.is_selected.is_selected.gboolean
#COMMENT: a #GtkPrintOperationPreview
#NAME: stick
#PARENT: Gtk.Window
#COMMENT: Asks to stick @window, which means that it will appear on all user
desktops. Note that you shouldn’t assume the window is definitely
stuck afterward, because other entities (e.g. the user or
[window manager][gtk-X11-arch] could unstick it
again, and some window managers do not support sticking
windows. But normally the window will end up stuck. Just don't
write code that crashes if not.

It’s permitted to call this function before showing a window.

You can track stickiness via the “window-state-event” signal
on #GtkWidget.
#NAME: data
#PARENT: Gtk.print_run_page_setup_dialog_async.none
#COMMENT: user data to pass to @done_cb
#NAME: visible-horizontal
#PARENT: Gtk.Action
#COMMENT: Whether the toolbar item is visible when the toolbar is in a horizontal orientation.
#NAME: populate-popup
#PARENT: Gtk.Entry
#COMMENT: The ::populate-popup signal gets emitted before showing the
context menu of the entry.

If you need to add items to the context menu, connect
to this signal and append your items to the @widget, which
will be a #GtkMenu in this case.

If #GtkEntry:populate-all is %TRUE, this signal will
also be emitted to populate touch popups. In this case,
@widget will be a different container, e.g. a #GtkToolbar.
The signal handler should not make assumptions about the
type of @widget.
#NAME: set_drop_highlight_item
#PARENT: Gtk.Toolbar
#COMMENT: Highlights @toolbar to give an idea of what it would look like
if @item was added to @toolbar at the position indicated by @index_.
If @item is %NULL, highlighting is turned off. In that case @index_
is ignored.

The @tool_item passed to this function must not be part of any widget
hierarchy. When an item is set as drop highlight item it can not
added to any widget hierarchy or used as highlight item for another
toolbar.
#NAME: height
#PARENT: Gtk.TreeViewColumn.cell_get_size.none
#COMMENT: location to return height needed to render a cell, or %NULL
#NAME: icon_info
#PARENT: Gtk.IconInfo.get_filename.filename
#COMMENT: a #GtkIconInfo
#NAME: RecentChooserMenu
#PARENT: Gtk
#COMMENT: #GtkRecentChooserMenu is a widget suitable for displaying recently used files
inside a menu.  It can be used to set a sub-menu of a #GtkMenuItem using
gtk_menu_item_set_submenu(), or as the menu of a #GtkMenuToolButton.

Note that #GtkRecentChooserMenu does not have any methods of its own. Instead,
you should use the functions that work on a #GtkRecentChooser.

Note also that #GtkRecentChooserMenu does not support multiple filters, as it
has no way to let the user choose between them as the #GtkRecentChooserWidget
and #GtkRecentChooserDialog widgets do. Thus using gtk_recent_chooser_add_filter()
on a #GtkRecentChooserMenu widget will yield the same effects as using
gtk_recent_chooser_set_filter(), replacing any currently set filter
with the supplied filter; gtk_recent_chooser_remove_filter() will remove
any currently set #GtkRecentFilter object and will unset the current filter;
gtk_recent_chooser_list_filters() will return a list containing a single
#GtkRecentFilter object.

Recently used files are supported since GTK+ 2.10.
#NAME: background-gdk
#PARENT: Gtk.CellView
#COMMENT: The background color as a #GdkColor
#NAME: yalign
#PARENT: Gtk.AspectFrame.set.none
#COMMENT: Vertical alignment of the child within the allocation of
 the #GtkAspectFrame. This ranges from 0.0 (top aligned)
 to 1.0 (bottom aligned)
#NAME: widget
#PARENT: Gtk.EventController
#COMMENT: The widget receiving the #GdkEvents that the controller will handle.
#NAME: column_spacing
#PARENT: Gtk.IconView.set_column_spacing.none
#COMMENT: the column spacing
#NAME: cell
#PARENT: Gtk.IconView.set_tooltip_cell.none
#COMMENT: a #GtkCellRenderer or %NULL
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.set_min_content_height.none
#COMMENT: a #GtkScrolledWindow
#NAME: selection
#PARENT: Gtk.TreeSelection.unselect_path.none
#COMMENT: A #GtkTreeSelection.
#NAME: clipboard
#PARENT: Gtk.Clipboard.set_text.none
#COMMENT: a #GtkClipboard object
#NAME: cell_layout
#PARENT: Gtk.CellLayout.pack_start.none
#COMMENT: a #GtkCellLayout
#NAME: set_shadow_type
#PARENT: Gtk.HandleBox
#COMMENT: Sets the type of shadow to be drawn around the border
of the handle box.
#NAME: get-child-position
#PARENT: Gtk.Overlay.get-child-position
#COMMENT: %TRUE if the @allocation has been filled
#NAME: step_forward
#PARENT: Gtk.ScrollType
#COMMENT: Step forward.
#NAME: iter
#PARENT: Gtk.TextIter.forward_visible_word_end.gboolean
#COMMENT: a #GtkTextIter
#NAME: get_toolbar_style
#PARENT: Gtk.ToolItem
#COMMENT: Returns the toolbar style used for @tool_item. Custom subclasses of
#GtkToolItem should call this function in the handler of the
GtkToolItem::toolbar_reconfigured signal to find out in what style
the toolbar is displayed and change themselves accordingly

Possibilities are:
- %GTK_TOOLBAR_BOTH, meaning the tool item should show
  both an icon and a label, stacked vertically
- %GTK_TOOLBAR_ICONS, meaning the toolbar shows only icons
- %GTK_TOOLBAR_TEXT, meaning the tool item should only show text
- %GTK_TOOLBAR_BOTH_HORIZ, meaning the tool item should show
  both an icon and a label, arranged horizontally
#NAME: selection
#PARENT: Gtk.TreeSelection.unselect_iter.none
#COMMENT: A #GtkTreeSelection.
#NAME: even
#PARENT: Gtk.PageSet
#COMMENT: Even pages.
#NAME: set_paper_height
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT.
#NAME: add
#PARENT: Gtk.TextTagTable
#COMMENT: Add a tag to the table. The tag is assigned the highest priority
in the table.

@tag must not be in a tag table already, and may not have
the same name as an already-added tag.
#NAME: set_inline_selection
#PARENT: Gtk.EntryCompletion
#COMMENT: Sets whether it is possible to cycle through the possible completions
inside the entry.
#NAME: get_priority
#PARENT: Gtk.TextTag.get_priority
#COMMENT: The tag’s priority.
#NAME: markup
#PARENT: Gtk.Tooltip.set_markup.none
#COMMENT: a markup string (see [Pango markup format][PangoMarkupFormat]) or %NULL
#NAME: row_inserted
#PARENT: Gtk.TreeModel
#COMMENT: Emits the #GtkTreeModel::row-inserted signal on @tree_model.
#NAME: color
#PARENT: Gtk.ColorButton
#COMMENT: The selected color.
#NAME: cell_area
#PARENT: Gtk.CellAreaClass.foreach_alloc.foreach_alloc.none
#COMMENT: the @widget relative coordinates and size for @area
#NAME: data
#PARENT: Gtk.SelectionData.free.none
#COMMENT: a pointer to a #GtkSelectionData-struct.
#NAME: iter_children
#PARENT: Gtk.TreeModelIface.iter_children.iter_children
#COMMENT: %TRUE, if @child has been set to the first child
#NAME: window
#PARENT: Gtk.Window.get_focus_on_map.gboolean
#COMMENT: a #GtkWindow
#NAME: natural_height
#PARENT: Gtk.CellArea.get_preferred_height_for_width.none
#COMMENT: location to store the natural height, or %NULL
#NAME: get_group
#PARENT: Gtk.Gesture.get_group
#COMMENT: The list
  of #GtkGestures, free with g_list_free()
#NAME: set_left_margin
#PARENT: Gtk.PageSetup
#COMMENT: Sets the left margin of the #GtkPageSetup.
#NAME: count
#PARENT: Gtk.TextIter.forward_word_ends.gboolean
#COMMENT: number of times to move
#NAME: get_use_font
#PARENT: Gtk.FontButton.get_use_font
#COMMENT: whether the selected font is used in the label.
#NAME: test_display_button_window
#PARENT: Gtk
#COMMENT: Create a window with window title @window_title, text contents @dialog_text,
and a number of buttons, according to the paired argument list given
as @... parameters.
Each button is created with a @label and a ::clicked signal handler that
incremrents the integer stored in @nump.
The window will be automatically shown with gtk_widget_show_now() after
creation, so when this function returns it has already been mapped,
resized and positioned on screen.
The window will quit any running gtk_main()-loop when destroyed, and it
will automatically be destroyed upon test function teardown.
#NAME: inverted
#PARENT: Gtk.ProgressBar.set_inverted.none
#COMMENT: %TRUE to invert the progress bar
#NAME: uri
#PARENT: Gtk.RecentChooser.select_uri.gboolean
#COMMENT: a URI
#NAME: get_vscrollbar
#PARENT: Gtk.ScrolledWindow
#COMMENT: Returns the vertical scrollbar of @scrolled_window.
#NAME: tag
#PARENT: Gtk.TextBuffer.remove-tag.none
#COMMENT: the tag to be removed
#NAME: group
#PARENT: Gtk.ToolPalette.set_exclusive.none
#COMMENT: a #GtkToolItemGroup which is a child of palette
#NAME: widget
#PARENT: Gtk.Fixed.move.none
#COMMENT: the child widget.
#NAME: get_preview_file
#PARENT: Gtk.FileChooser
#COMMENT: Gets the #GFile that should be previewed in a custom preview
Internal function, see gtk_file_chooser_get_preview_uri().
#NAME: flags
#PARENT: Gtk.IconTheme.lookup_by_gicon_for_scale.IconInfo
#COMMENT: flags modifying the behavior of the icon lookup
#NAME: context
#PARENT: Gtk.StyleContext.notify_state_change.none
#COMMENT: a #GtkStyleContext
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_reorderable.gboolean
#COMMENT: A #GtkTreeViewColumn
#NAME: window
#PARENT: Gtk.Window.fullscreen.none
#COMMENT: a #GtkWindow
#NAME: n_press
#PARENT: Gtk.GestureMultiPress.pressed.none
#COMMENT: how many touch/button presses happened with this one
#NAME: set_baseline_position
#PARENT: Gtk.Box
#COMMENT: Sets the baseline position of a box. This affects
only horizontal boxes with at least one baseline aligned
child. If there is more vertical space available than requested,
and the baseline is not allocated by the parent then
@position is used to allocate the baseline wrt the
extra space available.
#NAME: icon_area
#PARENT: Gtk.Entry.get_icon_area.none
#COMMENT: Return location for the icon’s area
#NAME: license_type
#PARENT: Gtk.AboutDialog.set_license_type.none
#COMMENT: the type of license
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_active_iter.none
#COMMENT: A #GtkComboBox
#NAME: get_toplevels
#PARENT: Gtk.UIManager
#COMMENT: Obtains a list of all toplevel widgets of the requested types.
#NAME: unset_focus_chain
#PARENT: Gtk.Container
#COMMENT: Removes a focus chain explicitly set with gtk_container_set_focus_chain().
#NAME: setting
#PARENT: Gtk.TreeView.set_rules_hint.none
#COMMENT: %TRUE if the tree requires reading across rows
#NAME: requisition
#PARENT: Gtk.MenuItemClass.toggle_size_request.toggle_size_request.none
#COMMENT: the requisition to use as signal data.
#NAME: props
#PARENT: Gtk.StyleProperties.set_property.none
#COMMENT: a #GtkStyleProperties
#NAME: attach
#PARENT: Gtk.Table
#COMMENT: Adds a widget to a table. The number of “cells” that a widget will occupy is
specified by @left_attach, @right_attach, @top_attach and @bottom_attach.
These each represent the leftmost, rightmost, uppermost and lowest column
and row numbers of the table. (Columns and rows are indexed from zero).

To make a button occupy the lower right cell of a 2x2 table, use
|[
gtk_table_attach (table, button,
                  1, 2, // left, right attach
                  1, 2, // top, bottom attach
                  xoptions, yoptions,
                  xpadding, ypadding);
]|
If you want to make the button span the entire bottom row, use @left_attach == 0 and @right_attach = 2 instead.
#NAME: tag
#PARENT: Gtk.TextIter.has_tag.gboolean
#COMMENT: a #GtkTextTag
#NAME: get_realized
#PARENT: Gtk.Widget
#COMMENT: Determines whether @widget is realized.
#NAME: widget
#PARENT: Gtk.Widget.render_icon_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: a #GtkWidget
#NAME: get_default
#PARENT: Gtk.Clipboard
#COMMENT: Returns the default clipboard object for use with cut/copy/paste menu items
and keyboard shortcuts.
#NAME: IMContext
#PARENT: Gtk
#COMMENT: #GtkIMContext defines the interface for GTK+ input methods. An input method
is used by GTK+ text input widgets like #GtkEntry to map from key events to
Unicode character strings.

The default input method can be set programmatically via the
#GtkSettings:gtk-im-module GtkSettings property. Alternatively, you may set
the GTK_IM_MODULE environment variable as documented in
[Running GTK+ Applications][gtk-running].

The #GtkEntry #GtkEntry:im-module and #GtkTextView #GtkTextView:im-module
properties may also be used to set input methods for specific widget
instances. For instance, a certain entry widget might be expected to contain
certain characters which would be easier to input with a certain input
method.

An input method may consume multiple key events in sequence and finally
output the composed result. This is called preediting, and an input method
may provide feedback about this process by displaying the intermediate
composition states as preedit text. For instance, the default GTK+ input
method implements the input of arbitrary Unicode code points by holding down
the Control and Shift keys and then typing “U” followed by the hexadecimal
digits of the code point.  When releasing the Control and Shift keys,
preediting ends and the character is inserted as text. Ctrl+Shift+u20AC for
example results in the € sign.

Additional input methods can be made available for use by GTK+ widgets as
loadable modules. An input method module is a small shared library which
implements a subclass of #GtkIMContext or #GtkIMContextSimple and exports
these four functions:

|[<!-- language="C" -->
void im_module_init(#GTypeModule *module);
]|
This function should register the #GType of the #GtkIMContext subclass which
implements the input method by means of g_type_module_register_type(). Note
that g_type_register_static() cannot be used as the type needs to be
registered dynamically.

|[<!-- language="C" -->
void im_module_exit(void);
]|
Here goes any cleanup code your input method might require on module unload.

|[<!-- language="C" -->
void im_module_list(const #GtkIMContextInfo ***contexts, int *n_contexts)
{
  *contexts = info_list;
  *n_contexts = G_N_ELEMENTS (info_list);
}
]|
This function returns the list of input methods provided by the module. The
example implementation above shows a common solution and simply returns a
pointer to statically defined array of #GtkIMContextInfo items for each
provided input method.

|[<!-- language="C" -->
#GtkIMContext * im_module_create(const #gchar *context_id);
]|
This function should return a pointer to a newly created instance of the
#GtkIMContext subclass identified by @context_id. The context ID is the same
as specified in the #GtkIMContextInfo array returned by im_module_list().

After a new loadable input method module has been installed on the system,
the configuration file `gtk.immodules` needs to be
regenerated by [gtk-query-immodules-3.0][gtk-query-immodules-3.0],
in order for the new input method to become available to GTK+ applications.
#NAME: SearchEntry
#PARENT: Gtk
#COMMENT: #GtkSearchEntry is a subclass of #GtkEntry that has been
tailored for use as a search entry.

It will show an inactive symbolic “find” icon when the search
entry is empty, and a symbolic “clear” icon when there is text.
Clicking on the “clear” icon will empty the search entry.

Note that the search/clear icon is shown using a secondary
icon, and thus does not work if you are using the secondary
icon position for some other purpose.

To make filtering appear more reactive, it is a good idea to
not react to every change in the entry text immediately, but
only after a short delay. To support this, #GtkSearchEntry
emits the #GtkSearchEntry::search-changed signal which can
be used instead of the #GtkEditable::changed signal.

The #GtkSearchEntry::previous-match, #GtkSearchEntry::next-match
and #GtkSearchEntry::stop-search signals can be uesd to implement
moving between search results and ending the search.

Often, GtkSearchEntry will be fed events by means of being
placed inside a #GtkSearchBar. If that is not the case,
you can use gtk_search_entry_handle_event() to pass events.
#NAME: window
#PARENT: Gtk.StyleClass.set_background.set_background.none
#COMMENT: a #GdkWindow
#NAME: buffer
#PARENT: Gtk.TextBuffer.remove_tag_by_name.none
#COMMENT: a #GtkTextBuffer
#NAME: state
#PARENT: Gtk.WidgetPath.iter_set_state.none
#COMMENT: state flags
#NAME: label
#PARENT: Gtk.AppChooserButton.append_custom_item.none
#COMMENT: the label for the custom item
#NAME: page_backward
#PARENT: Gtk.ScrollType
#COMMENT: Page backward.
#NAME: name
#PARENT: Gtk.TextBuffer.remove_tag_by_name.none
#COMMENT: name of a #GtkTextTag
#NAME: valid
#PARENT: Gtk.TreeRowReference
#COMMENT: Returns %TRUE if the @reference is non-%NULL and refers to
a current valid path.
#NAME: menu_item
#PARENT: Gtk.MenuItem.get_label.utf8
#COMMENT: a #GtkMenuItem
#NAME: tree_model_sort
#PARENT: Gtk.TreeModelSort.convert_path_to_child_path.TreePath
#COMMENT: A #GtkTreeModelSort
#NAME: get_style_valist
#PARENT: Gtk.StyleContext
#COMMENT: Retrieves several widget style properties from @context according to the
current style.
#NAME: targets
#PARENT: Gtk.Clipboard.wait_for_targets.gboolean
#COMMENT: location
          to store an array of targets. The result stored here must
          be freed with g_free().
#NAME: get_id
#PARENT: Gtk.Plug
#COMMENT: Gets the window ID of a #GtkPlug widget, which can then
be used to embed this window inside another window, for
instance with gtk_socket_add_id().
#NAME: x
#PARENT: Gtk.Fixed.put.none
#COMMENT: the horizontal position to place the widget at.
#NAME: direction
#PARENT: Gtk.GesturePan.pan.none
#COMMENT: current direction of the pan gesture
#NAME: resize
#PARENT: Gtk.Paned.pack1.none
#COMMENT: should this child expand when the paned widget is resized.
#NAME: reveal_child
#PARENT: Gtk.Revealer.set_reveal_child.none
#COMMENT: %TRUE to reveal the child
#NAME: y
#PARENT: Gtk.Fixed.put.none
#COMMENT: the vertical position to place the widget at.
#NAME: custom-tab-label
#PARENT: Gtk.PrintOperation
#COMMENT: Used as the label of the tab containing custom widgets.
Note that this property may be ignored on some platforms.

If this is %NULL, GTK+ uses a default label.
#NAME: get_size
#PARENT: Gtk.FontSelection.get_size
#COMMENT: A n integer representing the selected font size,
    or -1 if no font size is selected.
#NAME: cell-area
#PARENT: Gtk.ComboBox
#COMMENT: The #GtkCellArea used to layout cell renderers for this combo box.

If no area is specified when creating the combo box with gtk_combo_box_new_with_area()
a horizontally oriented #GtkCellAreaBox will be used.
#NAME: area
#PARENT: Gtk.CellAreaClass.add.add.none
#COMMENT: a #GtkCellArea
#NAME: WindowGroup
#PARENT: Gtk
#COMMENT: A #GtkWindowGroup restricts the effect of grabs to windows
in the same group, thereby making window groups almost behave
like separate applications.

A window can be a member in at most one window group at a time.
Windows that have not been explicitly assigned to a group are
implicitly treated like windows of the default window group.

GtkWindowGroup objects are referenced by each window in the group,
so once you have added all windows to a GtkWindowGroup, you can drop
the initial reference to the window group with g_object_unref(). If the
windows in the window group are subsequently destroyed, then they will
be removed from the window group and drop their references on the window
group; when all window have been removed, the window group will be
freed.
#NAME: get_show_default_item
#PARENT: Gtk.AppChooserButton
#COMMENT: Returns the current value of the #GtkAppChooserButton:show-default-item
property.
#NAME: new_with_mnemonic
#PARENT: Gtk.ToggleButton
#COMMENT: Creates a new #GtkToggleButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the button.
#NAME: target_table_free
#PARENT: Gtk
#COMMENT: This function frees a target table as returned by
gtk_target_table_new_from_list()
#NAME: size
#PARENT: Gtk.RecentInfo.get_icon.GdkPixbuf.Pixbuf
#COMMENT: the size of the icon in pixels
#NAME: detail
#PARENT: Gtk.paint_arrow.none
#COMMENT: a style detail
#NAME: action_group
#PARENT: Gtk.ActionGroup.translate_string.utf8
#COMMENT: a #GtkActionGroup
#NAME: clipboard
#PARENT: Gtk.Clipboard.wait_for_targets.gboolean
#COMMENT: a #GtkClipboard
#NAME: step
#PARENT: Gtk.IconView.move-cursor.gboolean
#COMMENT: the granularity of the move, as a #GtkMovementStep
#NAME: pos
#PARENT: Gtk.Toolbar.insert.none
#COMMENT: the position of the new item
#NAME: icon_info
#PARENT: Gtk.IconInfo.load_symbolic_async.none
#COMMENT: a #GtkIconInfo from gtk_icon_theme_lookup_icon()
#NAME: get_embed_page_setup
#PARENT: Gtk.PrintOperation.get_embed_page_setup
#COMMENT: whether page setup selection combos are embedded
#NAME: set_visible_line_offset
#PARENT: Gtk.TextIter
#COMMENT: Like gtk_text_iter_set_line_offset(), but the offset is in visible
characters, i.e. text with a tag making it invisible is not
counted in the offset.
#NAME: Plug
#PARENT: Gtk
#COMMENT: Together with #GtkSocket, #GtkPlug provides the ability to embed
widgets from one process into another process in a fashion that is
transparent to the user. One process creates a #GtkSocket widget
and passes the ID of that widget’s window to the other process,
which then creates a #GtkPlug with that window ID. Any widgets
contained in the #GtkPlug then will appear inside the first
application’s window.

The communication between a #GtkSocket and a #GtkPlug follows the
[XEmbed Protocol](http://www.freedesktop.org/Standards/xembed-spec).
This protocol has also been implemented in other toolkits,
e.g. Qt, allowing the same level of
integration when embedding a Qt widget
in GTK+ or vice versa.

The #GtkPlug and #GtkSocket widgets are only available when GTK+
is compiled for the X11 platform and %GDK_WINDOWING_X11 is defined.
They can only be used on a #GdkX11Display. To use #GtkPlug and
#GtkSocket, you need to include the `gtk/gtkx.h`
header.
#NAME: backward_word_starts
#PARENT: Gtk.TextIter
#COMMENT: Calls gtk_text_iter_backward_word_start() up to @count times.
#NAME: iter
#PARENT: Gtk.ListStore.iter_is_valid.gboolean
#COMMENT: A #GtkTreeIter.
#NAME: get_child_pack_direction
#PARENT: Gtk.MenuBar
#COMMENT: Retrieves the current child pack direction of the menubar.
See gtk_menu_bar_set_child_pack_direction().
#NAME: deserialize_get_can_create_tags
#PARENT: Gtk.TextBuffer
#COMMENT: This functions returns the value set with
gtk_text_buffer_deserialize_set_can_create_tags()
#NAME: base_column
#PARENT: Gtk.TreeView.move_column_after.none
#COMMENT: The #GtkTreeViewColumn to be moved relative to, or %NULL.
#NAME: get_activate_on_single_click
#PARENT: Gtk.ListBox.get_activate_on_single_click
#COMMENT: %TRUE if rows are activated on single click, %FALSE otherwise
#NAME: set_slider_size_fixed
#PARENT: Gtk.Range
#COMMENT: Sets whether the range’s slider has a fixed size, or a size that
depends on its adjustment’s page size.

This function is useful mainly for #GtkRange subclasses.
#NAME: SearchBar
#PARENT: Gtk
#COMMENT: #GtkSearchBar is a container made to have a search entry (possibly
with additional connex widgets, such as drop-down menus, or buttons)
built-in. The search bar would appear when a search is started through
typing on the keyboard, or the application’s search mode is toggled on.

For keyboard presses to start a search, events will need to be
forwarded from the top-level window that contains the search bar.
See gtk_search_bar_handle_event() for example code. Common shortcuts
such as Ctrl+F should be handled as an application action, or through
the menu items.

You will also need to tell the search bar about which entry you
are using as your search entry using gtk_search_bar_connect_entry().
The following example shows you how to create a more complex search
entry.

## Creating a search bar

[A simple example](https://git.gnome.org/browse/gtk+/tree/examples/search-bar.c)
#NAME: get_vadjustment
#PARENT: Gtk.ToolPalette
#COMMENT: Gets the vertical adjustment of the tool palette.
#NAME: get_fixed_height_mode
#PARENT: Gtk.TreeView.get_fixed_height_mode
#COMMENT: %TRUE if @tree_view is in fixed height mode
#NAME: direction
#PARENT: Gtk.Widget.keynav_failed.gboolean
#COMMENT: direction of focus movement
#NAME: get_cell_allocation
#PARENT: Gtk.CellArea
#COMMENT: Derives the allocation of @renderer inside @area if @area
were to be renderered in @cell_area.
#NAME: label
#PARENT: Gtk.Label.set_selectable.none
#COMMENT: a #GtkLabel
#NAME: transitions-enabled
#PARENT: Gtk.Popover
#COMMENT: Whether show/hide transitions are enabled for this popover.
#NAME: get_uris
#PARENT: Gtk.RecentChooser.get_uris
#COMMENT: 
    A newly allocated, %NULL-terminated array of strings. Use
    g_strfreev() to free it.
#NAME: forward_word_end
#PARENT: Gtk.TextIter.forward_word_end
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: set_alignment
#PARENT: Gtk.CellRenderer
#COMMENT: Sets the renderer’s alignment within its available space.
#NAME: start
#PARENT: Gtk.PackType
#COMMENT: The child is packed into the start of the box
#NAME: RcStyle
#PARENT: Gtk
#COMMENT: The #GtkRcStyle-struct is used to represent a set
of information about the appearance of a widget.
This can later be composited together with other
#GtkRcStyle-struct<!-- -->s to form a #GtkStyle.
#NAME: window
#PARENT: Gtk.Window.close.none
#COMMENT: a #GtkWindow
#NAME: xscale
#PARENT: Gtk.Alignment.new.Widget
#COMMENT: the amount that the child widget expands horizontally to fill up
 unused space, from 0 to 1.
 A value of 0 indicates that the child widget should never expand.
 A value of 1 indicates that the child widget will expand to fill all of the
 space allocated for the #GtkAlignment.
#NAME: set_from_gicon
#PARENT: Gtk.Image
#COMMENT: See gtk_image_new_from_gicon() for details.
#NAME: PlacesOpenFlags
#PARENT: Gtk
#COMMENT: These flags serve two purposes.  First, the application can call gtk_places_sidebar_set_open_flags()
using these flags as a bitmask.  This tells the sidebar that the application is able to open
folders selected from the sidebar in various ways, for example, in new tabs or in new windows in
addition to the normal mode.

Second, when one of these values gets passed back to the application in the
#GtkPlacesSidebar::open-location signal, it means that the application should
open the selected location in the normal way, in a new tab, or in a new
window.  The sidebar takes care of determining the desired way to open the location,
based on the modifier keys that the user is pressing at the time the selection is made.

If the application never calls gtk_places_sidebar_set_open_flags(), then the sidebar will only
use #GTK_PLACES_OPEN_NORMAL in the #GtkPlacesSidebar::open-location signal.  This is the
default mode of operation.
#NAME: prepare
#PARENT: Gtk.Assistant
#COMMENT: The ::prepare signal is emitted when a new page is set as the
assistant's current page, before making the new page visible.

A handler for this signal can do any preparations which are
necessary before showing @page.
#NAME: get_text
#PARENT: Gtk.TextBuffer
#COMMENT: Returns the text in the range [@start,@end). Excludes undisplayed
text (text marked with tags that set the invisibility attribute) if
@include_hidden_chars is %FALSE. Does not include characters
representing embedded images, so byte and character indexes into
the returned string do not correspond to byte
and character indexes into the buffer. Contrast with
gtk_text_buffer_get_slice().
#NAME: widget
#PARENT: Gtk.Widget.get_accessible.Atk.Object
#COMMENT: a #GtkWidget
#NAME: get_completion
#PARENT: Gtk.Entry
#COMMENT: Returns the auxiliary completion object currently in use by @entry.
#NAME: clear
#PARENT: Gtk.Clipboard
#COMMENT: Clears the contents of the clipboard. Generally this should only
be called between the time you call gtk_clipboard_set_with_owner()
or gtk_clipboard_set_with_data(),
and when the @clear_func you supplied is called. Otherwise, the
clipboard may be owned by someone else.
#NAME: custom
#PARENT: Gtk.AssistantPageType
#COMMENT: Used for when other page types are not
 appropriate. No buttons will be shown, and the application must
 add its own buttons through gtk_assistant_add_action_widget().
#NAME: label
#PARENT: Gtk.Label.set_markup_with_mnemonic.none
#COMMENT: a #GtkLabel
#NAME: set_kinetic_scrolling
#PARENT: Gtk.ScrolledWindow
#COMMENT: Turns kinetic scrolling on or off.
Kinetic scrolling only applies to devices with source
%GDK_SOURCE_TOUCHSCREEN.
#NAME: action_name
#PARENT: Gtk.ActionGroupClass.get_action.get_action.Action
#COMMENT: the name of the action
#NAME: tree_view
#PARENT: Gtk.TreeView.get_hadjustment.Adjustment
#COMMENT: A #GtkTreeView
#NAME: get_visible_range
#PARENT: Gtk.TreeView
#COMMENT: Sets @start_path and @end_path to be the first and last visible path.
Note that there may be invisible paths in between.

The paths should be freed with gtk_tree_path_free() after use.
#NAME: tree_model
#PARENT: Gtk.tree_set_row_drag_data.gboolean
#COMMENT: a #GtkTreeModel
#NAME: get_previous_rgba
#PARENT: Gtk.ColorSelection
#COMMENT: Fills @rgba in with the original color value.
#NAME: cr
#PARENT: Gtk.render_line.none
#COMMENT: a #cairo_t
#NAME: invalid_id
#PARENT: Gtk.BuilderError
#COMMENT: An object id is unknown
#NAME: icon
#PARENT: Gtk.IconTheme.lookup_by_gicon.IconInfo
#COMMENT: the #GIcon to look up
#NAME: get_mark
#PARENT: Gtk.TextBuffer
#COMMENT: Returns the mark named @name in buffer @buffer, or %NULL if no such
mark exists in the buffer.
#NAME: get_tooltip_column
#PARENT: Gtk.TreeView.get_tooltip_column
#COMMENT: the index of the tooltip column that is currently being
used, or -1 if this is disabled.
#NAME: font
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: get_section
#PARENT: Gtk.StyleContext
#COMMENT: Queries the location in the CSS where @property was defined for the
current @context. Note that the state to be queried is taken from
gtk_style_context_get_state().

If the location is not available, %NULL will be returned. The
location might not be available for various reasons, such as the
property being overridden, @property not naming a supported CSS
property or tracking of definitions being disabled for performance
reasons.

Shorthand CSS properties cannot be queried for a location and will
always return %NULL.
#NAME: set_col_spacings
#PARENT: Gtk.Table
#COMMENT: Sets the space between every column in @table equal to @spacing.
#NAME: unregister_serialize_format
#PARENT: Gtk.TextBuffer
#COMMENT: This function unregisters a rich text format that was previously
registered using gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_serialize_tagset()
#NAME: get_sort_column_id
#PARENT: Gtk.TreeSortable
#COMMENT: Fills in @sort_column_id and @order with the current sort column and the
order. It returns %TRUE unless the @sort_column_id is
%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or
%GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.
#NAME: child
#PARENT: Gtk.Stack.add_titled.none
#COMMENT: the widget to add
#NAME: popup-menu
#PARENT: Gtk.StatusIcon
#COMMENT: Gets emitted when the user brings up the context menu
of the status icon. Whether status icons can have context
menus and how these are activated is platform-dependent.

The @button and @activate_time parameters should be
passed as the last to arguments to gtk_menu_popup().

Unlike most G_SIGNAL_ACTION signals, this signal is meant to
be used by applications and should be wrapped by language bindings.
#NAME: cursor-changed
#PARENT: Gtk.TreeView
#COMMENT: The position of the cursor (focused cell) has changed.
#NAME: selection_data
#PARENT: Gtk.tree_get_row_drag_data.gboolean
#COMMENT: a #GtkSelectionData
#NAME: n_chars
#PARENT: Gtk.EntryBuffer.delete_text.guint
#COMMENT: number of characters to delete
#NAME: start
#PARENT: Gtk.TextBuffer.delete.none
#COMMENT: a position in @buffer
#NAME: backward_cursor_positions
#PARENT: Gtk.TextIter.backward_cursor_positions
#COMMENT: %TRUE if we moved and the new position is dereferenceable
#NAME: get_model
#PARENT: Gtk.EntryCompletion
#COMMENT: Returns the model the #GtkEntryCompletion is using as data source.
Returns %NULL if the model is unset.
#NAME: rgba
#PARENT: Gtk.ColorButton
#COMMENT: The RGBA color.
#NAME: xpadding
#PARENT: Gtk.Table.attach.none
#COMMENT: An integer value specifying the padding on the left and right of the widget being added to the table.
#NAME: get_input_purpose
#PARENT: Gtk.Entry
#COMMENT: Gets the value of the #GtkEntry:input-purpose property.
#NAME: pending
#PARENT: Gtk.PrintStatus
#COMMENT: The print job has been sent to the printer,
    but is not printed for some reason, e.g. the printer may be stopped.
#NAME: cell_area
#PARENT: Gtk.CellRenderer.start_editing.CellEditable
#COMMENT: cell area as passed to gtk_cell_renderer_render()
#NAME: get_direction
#PARENT: Gtk.MenuButton
#COMMENT: Returns the direction the popup will be pointing at when popped up.
#NAME: applications
#PARENT: Gtk.RecentFilterInfo
#COMMENT: The list of
   applications that have registered the file.
#NAME: primary-icon-pixbuf
#PARENT: Gtk.Entry
#COMMENT: A pixbuf to use as the primary icon for the entry.
#NAME: intro
#PARENT: Gtk.AssistantPageType
#COMMENT: The page contains an introduction to the
 assistant task. Only the Forward button will be shown if there is a
  next page.
#NAME: single
#PARENT: Gtk.FlowBox.set_activate_on_single_click.none
#COMMENT: %TRUE to emit child-activated on a single click
#NAME: get_open_flags
#PARENT: Gtk.PlacesSidebar.get_open_flags
#COMMENT: the #GtkPlacesOpenFlags of @sidebar
#NAME: input
#PARENT: Gtk.SpinButton
#COMMENT: The ::input signal can be used to influence the conversion of
the users input into a double value. The signal handler is
expected to use gtk_entry_get_text() to retrieve the text of
the entry and set @new_value to the new value.

The default conversion uses g_strtod().
#NAME: get_item_position
#PARENT: Gtk.ToolItemGroup.get_item_position
#COMMENT: the index of @item in @group or -1 if @item is no child of @group
#NAME: end
#PARENT: Gtk.TextBuffer.remove_tag_by_name.none
#COMMENT: other bound of range to be untagged
#NAME: get_overwrite_mode
#PARENT: Gtk.Entry
#COMMENT: Gets the value set by gtk_entry_set_overwrite_mode().
#NAME: get_default
#PARENT: Gtk.CssProvider.get_default
#COMMENT: The provider used for fallback styling.
         This memory is owned by GTK+, and you must not free it.
#NAME: iter
#PARENT: Gtk.CellArea.apply-attributes.none
#COMMENT: the #GtkTreeIter indicating which row to apply the attributes of
#NAME: use-size
#PARENT: Gtk.FontButton
#COMMENT: If this property is set to %TRUE, the label will be drawn
with the selected font size.
#NAME: area
#PARENT: Gtk.IconView.new_with_area.Widget
#COMMENT: the #GtkCellArea to use to layout cells
#NAME: range
#PARENT: Gtk.Range.get_inverted.gboolean
#COMMENT: a #GtkRange
#NAME: connect_func
#PARENT: Gtk.WidgetClass.set_connect_func.none
#COMMENT: The #GtkBuilderConnectFunc to use when connecting signals in the class template
#NAME: chooser
#PARENT: Gtk.FileChooser.unselect_all.none
#COMMENT: a #GtkFileChooser
#NAME: content-type
#PARENT: Gtk.AppChooser
#COMMENT: The content type of the #GtkAppChooser object.

See [GContentType][gio-GContentType]
for more information about content types.
#NAME: font_desc
#PARENT: Gtk.Widget.modify_font.none
#COMMENT: the font description to use, or %NULL
    to undo the effect of previous calls to gtk_widget_modify_font()
#NAME: reset
#PARENT: Gtk.CellAreaContext
#COMMENT: Resets any previously cached request and allocation
data.

When underlying #GtkTreeModel data changes its
important to reset the context if the content
size is allowed to shrink. If the content size
is only allowed to grow (this is usually an option
for views rendering large data stores as a measure
of optimization), then only the row that changed
or was inserted needs to be (re)requested with
gtk_cell_area_get_preferred_width().

When the new overall size of the context requires
that the allocated size changes (or whenever this
allocation changes at all), the variable row
sizes need to be re-requested for every row.

For instance, if the rows are displayed all with
the same width from top to bottom then a change
in the allocated width necessitates a recalculation
of all the displayed row heights using
gtk_cell_area_get_preferred_height_for_width().

Since 3.0
#NAME: get_column_homogeneous
#PARENT: Gtk.Grid
#COMMENT: Returns whether all columns of @grid have the same width.
#NAME: label_widget
#PARENT: Gtk.Expander.set_label_widget.none
#COMMENT: the new label widget
#NAME: use_align
#PARENT: Gtk.IconView.scroll_to_path.none
#COMMENT: whether to use alignment arguments, or %FALSE.
#NAME: range
#PARENT: Gtk.Range.get_lower_stepper_sensitivity.SensitivityType
#COMMENT: a #GtkRange
#NAME: shadow_type
#PARENT: Gtk.paint_option.none
#COMMENT: the type of shadow to draw
#NAME: adjustment
#PARENT: Gtk.Scale.new.Widget
#COMMENT: the #GtkAdjustment which sets the range
             of the scale, or %NULL to create a new adjustment.
#NAME: width
#PARENT: Gtk.CellRenderer.set_fixed_size.none
#COMMENT: the width of the cell renderer, or -1
#NAME: has_default_sort_func
#PARENT: Gtk.TreeSortableIface.has_default_sort_func.has_default_sort_func
#COMMENT: %TRUE, if the model has a default sort function
#NAME: present_with_time
#PARENT: Gtk.Window
#COMMENT: Presents a window to the user in response to a user interaction.
If you need to present a window without a timestamp, use
gtk_window_present(). See gtk_window_present() for details.
#NAME: page_num
#PARENT: Gtk.Assistant.remove_page.none
#COMMENT: the index of a page in the @assistant,
    or -1 to remove the last page
#NAME: filter_func
#PARENT: Gtk.FlowBox.set_filter_func.none
#COMMENT: callback that
    lets you filter which children to show
#NAME: size
#PARENT: Gtk.IconSize.lookup.gboolean
#COMMENT: an icon size
#NAME: context
#PARENT: Gtk.PrintOperation.begin-print.none
#COMMENT: the #GtkPrintContext for the current operation
#NAME: cell_layout
#PARENT: Gtk.CellLayout.reorder.none
#COMMENT: a #GtkCellLayout
#NAME: rgba
#PARENT: Gtk.ColorSelection.get_current_rgba.none
#COMMENT: a #GdkRGBA to fill in with the current color
#NAME: corner_bottomleft
#PARENT: Gtk.JunctionSides
#COMMENT: Element connects on the bottom-left corner.
#NAME: toolbar
#PARENT: Gtk.Toolbar.set_style.none
#COMMENT: a #GtkToolbar.
#NAME: get_focus
#PARENT: Gtk.Window.get_focus
#COMMENT: the currently focused widget, or %NULL if there is none.
#NAME: file-activated
#PARENT: Gtk.FileChooser
#COMMENT: This signal is emitted when the user "activates" a file in the file
chooser.  This can happen by double-clicking on a file in the file list, or
by pressing `Enter`.

Normally you do not need to connect to this signal.  It is used internally
by #GtkFileChooserDialog to know when to activate the default button in the
dialog.

See also: gtk_file_chooser_get_filename(),
gtk_file_chooser_get_filenames(), gtk_file_chooser_get_uri(),
gtk_file_chooser_get_uris().
#NAME: new_from_stock
#PARENT: Gtk.Image.new_from_stock
#COMMENT: a new #GtkImage displaying the stock icon
#NAME: info_bar
#PARENT: Gtk.InfoBar.add_button.Button
#COMMENT: a #GtkInfoBar
#NAME: menu
#PARENT: Gtk.Menu.set_accel_group.none
#COMMENT: a #GtkMenu
#NAME: props
#PARENT: Gtk.StyleProperties.get_property.gboolean
#COMMENT: a #GtkStyleProperties
#NAME: MenuDetachFunc
#PARENT: Gtk
#COMMENT: A user function supplied when calling gtk_menu_attach_to_widget() which
will be called when the menu is later detached from the widget.
#NAME: Stack
#PARENT: Gtk
#COMMENT: The GtkStack widget is a container which only shows
one of its children at a time. In contrast to GtkNotebook,
GtkStack does not provide a means for users to change the
visible child. Instead, the #GtkStackSwitcher widget can be
used with GtkStack to provide this functionality.

Transitions between pages can be animated as slides or
fades. This can be controlled with gtk_stack_set_transition_type().
These animations respect the #GtkSettings:gtk-enable-animations
setting.

The GtkStack widget was added in GTK+ 3.10.
#NAME: get_selection_bounds
#PARENT: Gtk.TextBuffer.get_selection_bounds
#COMMENT: whether the selection has nonzero length
#NAME: items
#PARENT: Gtk.stock_add.none
#COMMENT: a #GtkStockItem or array of items
#NAME: object
#PARENT: Gtk.BuilderConnectFunc.none
#COMMENT: object to connect a signal to
#NAME: byte_on_line
#PARENT: Gtk.TextIter.set_visible_line_index.none
#COMMENT: a byte index
#NAME: path
#PARENT: Gtk.TreeView.row_expanded.gboolean
#COMMENT: A #GtkTreePath to test expansion state.
#NAME: get_icon_name
#PARENT: Gtk.Window
#COMMENT: Returns the name of the themed icon for the window,
see gtk_window_set_icon_name().
#NAME: get_text
#PARENT: Gtk.Label.get_text
#COMMENT: the text in the label widget. This is the internal
  string used by the label, and must not be modified.
#NAME: palette
#PARENT: Gtk.ToolPalette.set_drag_source.none
#COMMENT: a #GtkToolPalette
#NAME: insert_column
#PARENT: Gtk.TreeView
#COMMENT: This inserts the @column into the @tree_view at @position.  If @position is
-1, then the column is inserted at the end. If @tree_view has
“fixed_height” mode enabled, then @column must have its “sizing” property
set to be GTK_TREE_VIEW_COLUMN_FIXED.
#NAME: widget
#PARENT: Gtk.Widget.drag_source_get_target_list.TargetList
#COMMENT: a #GtkWidget
#NAME: sort_data
#PARENT: Gtk.RecentChooserIface.set_sort_func.set_sort_func.none
#COMMENT: user data to pass to @sort_func, or %NULL
#NAME: STYLE_CLASS_RADIO
#PARENT: Gtk
#COMMENT: A CSS class to match radio buttons.

This is used in #GtkRadioButton, #GtkRadioMenuItem and
#GtkCellRendererToggle.
#NAME: get_end_line
#PARENT: Gtk.CssSection
#COMMENT: Returns the line in the CSS document where this section end.
The line number is 0-indexed, so the first line of the document
will return 0.
This value may change in future invocations of this function if
@section is not yet parsed completely. This will for example
happen in the GtkCssProvider::parsing-error signal.
The end position and line may be identical to the start
position and line for sections which failed to parse anything
successfully.
#NAME: get_day_is_marked
#PARENT: Gtk.Calendar.get_day_is_marked
#COMMENT: whether the day is marked.
#NAME: MenuItem
#PARENT: Gtk
#COMMENT: The #GtkMenuItem widget and the derived widgets are the only valid
children for menus. Their function is to correctly handle highlighting,
alignment, events and submenus.

As a GtkMenuItem derives from #GtkBin it can hold any valid child widget,
although only a few are really useful.

By default, a GtkMenuItem sets a #GtkAccelLabel as its child.
GtkMenuItem has direct functions to set the label and its mnemonic.
For more advanced label settings, you can fetch the child widget from the GtkBin.

An example for setting markup and accelerator on a MenuItem:
|[<!-- language="C" -->
GtkWidget *child = gtk_bin_get_child (GTK_BIN (menu_item));
gtk_label_set_markup (GTK_LABEL (child), "<i>new label</i> with <b>markup</b>");
gtk_accel_label_set_accel (GTK_ACCEL_LABEL (child), GDK_KEY_1, 0);
]|

# GtkMenuItem as GtkBuildable

The GtkMenuItem implementation of the #GtkBuildable interface supports
adding a submenu by specifying “submenu” as the “type” attribute of
a <child> element.

An example of UI definition fragment with submenus:
|[
<object class="GtkMenuItem">
  <child type="submenu">
    <object class="GtkMenu"/>
  </child>
</object>
]|
#NAME: get_icon_name
#PARENT: Gtk.Window.get_icon_name
#COMMENT: the icon name or %NULL if the window has
no themed icon
#NAME: completion
#PARENT: Gtk.EntryCompletion.set_match_func.none
#COMMENT: a #GtkEntryCompletion
#NAME: custom_tag_end
#PARENT: Gtk.Buildable
#COMMENT: This is called at the end of each custom element handled by
the buildable.
#NAME: retrieve_proxy_menu_item
#PARENT: Gtk.ToolItem
#COMMENT: Returns the #GtkMenuItem that was last set by
gtk_tool_item_set_proxy_menu_item(), ie. the #GtkMenuItem
that is going to appear in the overflow menu.
#NAME: drag_source_set_icon_stock
#PARENT: Gtk.Widget
#COMMENT: Sets the icon that will be used for drags from a particular source
to a stock icon.
#NAME: accel_mods
#PARENT: Gtk.AccelMap.change_entry.gboolean
#COMMENT: the new accelerator modifiers
#NAME: renderer
#PARENT: Gtk.CellAllocCallback.gboolean
#COMMENT: the cell renderer to operate on
#NAME: label
#PARENT: Gtk.LinkButton.new_with_label.Widget
#COMMENT: the text of the button
#NAME: pixbuf
#PARENT: Gtk.SelectionData.set_pixbuf.gboolean
#COMMENT: a #GdkPixbuf
#NAME: attribute
#PARENT: Gtk.TreeViewColumn.add_attribute.none
#COMMENT: An attribute on the renderer
#NAME: direction
#PARENT: Gtk.Widget.keynav-failed.gboolean
#COMMENT: the direction of movement
#NAME: window
#PARENT: Gtk.Window.get_group.WindowGroup
#COMMENT: a #GtkWindow, or %NULL
#NAME: get_n_pages_to_print
#PARENT: Gtk.PrintOperation.get_n_pages_to_print
#COMMENT: the number of pages that will be printed
#NAME: set_sort_func
#PARENT: Gtk.FlowBox
#COMMENT: By setting a sort function on the @box, one can dynamically
reorder the children of the box, based on the contents of
the children.

The @sort_func will be called for each child after the call,
and will continue to be called each time a child changes (via
gtk_flow_box_child_changed()) and when gtk_flow_box_invalidate_sort()
is called.
#NAME: get_size_list
#PARENT: Gtk.FontSelection.get_size_list
#COMMENT: A #GtkWidget that is part of @fontsel
#NAME: new
#PARENT: Gtk.Dialog.new
#COMMENT: the new dialog as a #GtkWidget
#NAME: STYLE_PROPERTY_BORDER_STYLE
#PARENT: Gtk
#COMMENT: A property holding the element’s border style as a #GtkBorderStyle.
#NAME: lookup_color
#PARENT: Gtk.StyleContext
#COMMENT: Looks up and resolves a color name in the @context color map.
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_style_valist.none
#COMMENT: a #GtkThemingEngine
#NAME: end_path
#PARENT: Gtk.TreeView.get_visible_range.gboolean
#COMMENT: Return location for end of region, or %NULL.
#NAME: new
#PARENT: Gtk.MenuBar.new
#COMMENT: the new menu bar, as a #GtkWidget
#NAME: notebook
#PARENT: Gtk.Notebook.set_tab_label.none
#COMMENT: a #GtkNotebook
#NAME: can_create_tags
#PARENT: Gtk.TextBuffer.deserialize_set_can_create_tags.none
#COMMENT: whether deserializing this format may create tags
#NAME: get_type_hint
#PARENT: Gtk.Window.get_type_hint
#COMMENT: the type hint for @window.
#NAME: window
#PARENT: Gtk.Window.iconify.none
#COMMENT: a #GtkWindow
#NAME: editable
#PARENT: Gtk.Editable.set_editable.none
#COMMENT: a #GtkEditable
#NAME: submenu
#PARENT: Gtk.MenuItem
#COMMENT: The submenu attached to the menu item, or %NULL if it has none.
#NAME: box
#PARENT: Gtk.FlowBox.set_hadjustment.none
#COMMENT: a #GtkFlowBox
#NAME: table
#PARENT: Gtk.Table.attach.none
#COMMENT: The #GtkTable to add a new widget to.
#NAME: get_parent
#PARENT: Gtk.Widget.get_parent
#COMMENT: the parent container of @widget, or %NULL
#NAME: get_focus_from_sibling
#PARENT: Gtk.CellArea.get_focus_from_sibling
#COMMENT: the #GtkCellRenderer for which @renderer
   is a sibling, or %NULL.
#NAME: STYLE_REGION_TAB
#PARENT: Gtk
#COMMENT: A widget region name to define a notebook tab.
#NAME: get_action_area
#PARENT: Gtk.InfoBar.get_action_area
#COMMENT: the action area
#NAME: set_icon_name
#PARENT: Gtk.Action
#COMMENT: Sets the icon name on @action
#NAME: previous_screen
#PARENT: Gtk.Widget.screen-changed.none
#COMMENT: the previous screen, or %NULL if the
  widget was not associated with a screen before
#NAME: remove_shortcut_folder
#PARENT: Gtk.FileChooser.remove_shortcut_folder
#COMMENT: %TRUE if the operation succeeds, %FALSE otherwise.
In the latter case, the @error will be set as appropriate.

See also: gtk_file_chooser_add_shortcut_folder()
#NAME: action_group
#PARENT: Gtk.ActionGroup.get_accel_group.AccelGroup
#COMMENT: a #GtkActionGroup
#NAME: flags
#PARENT: Gtk.StyleContext.set_state.none
#COMMENT: state to represent
#NAME: row-selected
#PARENT: Gtk.ListBox
#COMMENT: The ::row-selected signal is emitted when a new row is selected, or
(with a %NULL @row) when the selection is cleared.

When the @box is using #GTK_SELECTION_MULTIPLE, this signal will not
give you the full picture of selection changes, and you should use
the #GtkListBox::selected-rows-changed signal instead.
#NAME: win
#PARENT: Gtk.TextView.window_to_buffer_coords.none
#COMMENT: a #GtkTextWindowType except #GTK_TEXT_WINDOW_PRIVATE
#NAME: get_style
#PARENT: Gtk.ToolShell
#COMMENT: Retrieves whether the tool shell has text, icons, or both. Tool items must
not call this function directly, but rely on gtk_tool_item_get_toolbar_style()
instead.
#NAME: window
#PARENT: Gtk.Window.set_urgency_hint.none
#COMMENT: a #GtkWindow
#NAME: get_uris
#PARENT: Gtk.FileChooser.get_uris
#COMMENT: a #GSList containing the URIs of all selected
  files and subfolders in the current folder. Free the returned list
  with g_slist_free(), and the filenames with g_free().
#NAME: icon_theme
#PARENT: Gtk.IconTheme.set_custom_theme.none
#COMMENT: a #GtkIconTheme
#NAME: stack
#PARENT: Gtk.Stack.add_titled.none
#COMMENT: a #GtkStack
#NAME: context
#PARENT: Gtk.StyleContext.remove_provider.none
#COMMENT: a #GtkStyleContext
#NAME: parent_class
#PARENT: Gtk.ToolItemGroupClass
#COMMENT: The parent class.
#NAME: has_toplevel_focus
#PARENT: Gtk.Window.has_toplevel_focus
#COMMENT: %TRUE if the input focus is within this GtkWindow
#NAME: parent
#PARENT: Gtk.Dialog.new_with_buttons.Widget
#COMMENT: Transient parent of the dialog, or %NULL
#NAME: adjustment
#PARENT: Gtk.Adjustment.get_step_increment.gdouble
#COMMENT: a #GtkAdjustment
#NAME: manager
#PARENT: Gtk.UIManager.get_toplevels.Widget
#COMMENT: a #GtkUIManager
#NAME: widget
#PARENT: Gtk.Widget.get_mapped.gboolean
#COMMENT: a #GtkWidget
#NAME: set_current_page
#PARENT: Gtk.Notebook
#COMMENT: Switches to the page number @page_num.

Note that due to historical reasons, GtkNotebook refuses
to switch to a page unless the child widget is visible.
Therefore, it is recommended to show child widgets before
adding them to a notebook.
#NAME: deserialize_get_can_create_tags
#PARENT: Gtk.TextBuffer.deserialize_get_can_create_tags
#COMMENT: whether deserializing this format may create tags
#NAME: set_margin_right
#PARENT: Gtk.Widget
#COMMENT: Sets the right margin of @widget.
See the #GtkWidget:margin-right property.
#NAME: gesture
#PARENT: Gtk.GestureZoom.get_scale_delta.gdouble
#COMMENT: a #GtkGestureZoom
#NAME: size_group
#PARENT: Gtk.SizeGroup.set_mode.none
#COMMENT: a #GtkSizeGroup
#NAME: tree_store
#PARENT: Gtk.TreeStore.insert_before.none
#COMMENT: A #GtkTreeStore
#NAME: get_bounding_box
#PARENT: Gtk.Gesture
#COMMENT: If there are touch sequences being currently handled by @gesture,
this function returns %TRUE and fills in @rect with the bounding
box containing all active touches. Otherwise, %FALSE will be
returned.
#NAME: get_width_chars
#PARENT: Gtk.Label.get_width_chars
#COMMENT: the width of the label in characters.
#NAME: iter
#PARENT: Gtk.TreeModelIface.iter_previous.iter_previous.gboolean
#COMMENT: the #GtkTreeIter-struct
#NAME: get_request_mode
#PARENT: Gtk.WidgetClass.get_request_mode.get_request_mode
#COMMENT: The #GtkSizeRequestMode preferred by @widget.
#NAME: context
#PARENT: Gtk.CellAreaClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: the #GtkCellAreaContext which has already been requested for widths.
#NAME: hide_on_activate
#PARENT: Gtk.MenuItemClass
#COMMENT: If %TRUE, then we should always
   hide the menu when the %GtkMenuItem is activated. Otherwise,
   it is up to the caller.
#NAME: get_valist
#PARENT: Gtk.StyleProperties
#COMMENT: Retrieves several style property values from @props for a given state.
#NAME: inner_cell_area
#PARENT: Gtk.CellArea
#COMMENT: This is a convenience function for #GtkCellArea implementations
to get the inner area where a given #GtkCellRenderer will be
rendered. It removes any padding previously added by gtk_cell_area_request_renderer().
#NAME: label
#PARENT: Gtk.RadioMenuItem.new_with_mnemonic_from_widget.Widget
#COMMENT: the text of the button, with an underscore in front of the
        mnemonic character
#NAME: get
#PARENT: Gtk.PrintSettings.get
#COMMENT: the string value for @key
#NAME: size
#PARENT: Gtk.ScaleButton.new.Widget
#COMMENT: a stock icon size
#NAME: print_run_page_setup_dialog
#PARENT: Gtk.print_run_page_setup_dialog
#COMMENT: a new #GtkPageSetup
#NAME: parent_class
#PARENT: Gtk.CellViewClass
#COMMENT: The parent class.
#NAME: new
#PARENT: Gtk.Label.new
#COMMENT: the new #GtkLabel
#NAME: register_serialize_format
#PARENT: Gtk.TextBuffer
#COMMENT: This function registers a rich text serialization @function along with
its @mime_type with the passed @buffer.
#NAME: expand_to_path
#PARENT: Gtk.TreeView
#COMMENT: Expands the row at @path. This will also expand all parent rows of
@path as necessary.
#NAME: wait_for_image
#PARENT: Gtk.Clipboard.wait_for_image
#COMMENT: a newly-allocated #GdkPixbuf
    object which must be disposed with g_object_unref(), or
    %NULL if retrieving the selection data failed. (This could
    happen for various reasons, in particular if the clipboard
    was empty or if the contents of the clipboard could not be
    converted into an image.)
#NAME: button
#PARENT: Gtk.Widget.drag_begin.Gdk.DragContext
#COMMENT: The button the user clicked to start the drag
#NAME: sequence-state-changed
#PARENT: Gtk.Gesture
#COMMENT: This signal is emitted whenever a sequence state changes. See
gtk_gesture_set_sequence_state() to know more about the expectable
sequence lifetimes.
#NAME: button
#PARENT: Gtk.Button.clicked.none
#COMMENT: The #GtkButton you want to send the signal to.
#NAME: targets
#PARENT: Gtk.Clipboard.set_with_owner.gboolean
#COMMENT: array containing information
    about the available forms for the clipboard data
#NAME: height
#PARENT: Gtk.CellRendererClass.get_size.get_size.none
#COMMENT: location to return height needed to render a cell, or %NULL
#NAME: menu
#PARENT: Gtk.Menu.get_monitor.gint
#COMMENT: a #GtkMenu
#NAME: size
#PARENT: Gtk.PaperSize.set_size.none
#COMMENT: a custom #GtkPaperSize object
#NAME: get_widget
#PARENT: Gtk.AppChooserDialog
#COMMENT: Returns the #GtkAppChooserWidget of this dialog.
#NAME: create_menu_item
#PARENT: Gtk.Action.create_menu_item
#COMMENT: a menu item connected to the action.
#NAME: item_padding
#PARENT: Gtk.IconView.set_item_padding.none
#COMMENT: the item padding
#NAME: context
#PARENT: Gtk.IMContextClass.set_surrounding.set_surrounding.none
#COMMENT: a #GtkIMContext
#NAME: primary-icon-name
#PARENT: Gtk.Entry
#COMMENT: The icon name to use for the primary icon for the entry.
#NAME: match
#PARENT: Gtk.RecentInfo.match
#COMMENT: %TRUE if both #GtkRecentInfo-struct point to the same
  resource, %FALSE otherwise
#NAME: ascending
#PARENT: Gtk.SortType
#COMMENT: Sorting is in ascending order.
#NAME: widget
#PARENT: Gtk.UIManager.add-widget.none
#COMMENT: the added widget
#NAME: self
#PARENT: Gtk.NumerableIcon.set_background_icon_name.none
#COMMENT: a #GtkNumerableIcon
#NAME: add_shortcut_folder_uri
#PARENT: Gtk.FileChooser.add_shortcut_folder_uri
#COMMENT: %TRUE if the folder could be added successfully, %FALSE
otherwise.  In the latter case, the @error will be set as appropriate.
#NAME: lookup_by_gicon
#PARENT: Gtk.IconTheme
#COMMENT: Looks up an icon and returns a #GtkIconInfo containing information
such as the filename of the icon. The icon can then be rendered
into a pixbuf using gtk_icon_info_load_icon().
#NAME: manager
#PARENT: Gtk.RecentManager.add_item.gboolean
#COMMENT: a #GtkRecentManager
#NAME: jump
#PARENT: Gtk.ScrollType
#COMMENT: Jump to new location.
#NAME: widget
#PARENT: Gtk.CellArea.get_preferred_width.none
#COMMENT: the #GtkWidget where @area will be rendering
#NAME: connect_accelerator
#PARENT: Gtk.Action
#COMMENT: Installs the accelerator for @action if @action has an
accel path and group. See gtk_action_set_accel_path() and
gtk_action_set_accel_group()

Since multiple proxies may independently trigger the installation
of the accelerator, the @action counts the number of times this
function has been called and doesn’t remove the accelerator until
gtk_action_disconnect_accelerator() has been called as many times.
#NAME: win
#PARENT: Gtk.TextView.buffer_to_window_coords.none
#COMMENT: a #GtkTextWindowType except #GTK_TEXT_WINDOW_PRIVATE
#NAME: state_type
#PARENT: Gtk.paint_handle.none
#COMMENT: a state
#NAME: get_text
#PARENT: Gtk.ProgressBar
#COMMENT: Retrieves the text displayed superimposed on the progress bar,
if any, otherwise %NULL. The return value is a reference
to the text, not a copy of it, so will become invalid
if you change the text in the progress bar.
#NAME: max
#PARENT: Gtk.ScaleButton.new.Widget
#COMMENT: the maximum value of the scale (usually 100)
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_text_alignment.gfloat
#COMMENT: a #GtkToolItem:
#NAME: accessible
#PARENT: Gtk.AccessibleClass.connect_widget_destroyed.connect_widget_destroyed.none
#COMMENT: a #GtkAccessible
#NAME: get_label
#PARENT: Gtk.Label.get_label
#COMMENT: the text of the label widget. This string is
  owned by the widget and must not be modified or freed.
#NAME: horizontal_ends
#PARENT: Gtk.ScrollStep
#COMMENT: Scroll to the horizontal ends.
#NAME: get_placement
#PARENT: Gtk.ScrolledWindow.get_placement
#COMMENT: the current placement value.

See also gtk_scrolled_window_set_placement() and
gtk_scrolled_window_unset_placement().
#NAME: gtk-menu-bar-accel
#PARENT: Gtk.Settings
#COMMENT: Keybinding to activate the menu bar.
#NAME: buffer
#PARENT: Gtk.EntryBuffer.get_length.guint
#COMMENT: a #GtkEntryBuffer
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_background_color.none
#COMMENT: a #GtkThemingEngine
#NAME: sort_column_id
#PARENT: Gtk.TreeSortable.get_sort_column_id.gboolean
#COMMENT: The sort column id to be filled in
#NAME: parse_geometry
#PARENT: Gtk.Window.parse_geometry
#COMMENT: %TRUE if string was parsed successfully
#NAME: icon_name
#PARENT: Gtk.ImageType
#COMMENT: the widget contains a named icon.
 This image type was added in GTK+ 2.6
#NAME: response_id
#PARENT: Gtk.InfoBar.add_button.Button
#COMMENT: response ID for the button
#NAME: get_progress_fraction
#PARENT: Gtk.Entry.get_progress_fraction
#COMMENT: a fraction from 0.0 to 1.0
#NAME: activate_focus
#PARENT: Gtk.Window.activate_focus
#COMMENT: %TRUE if a widget got activated.
#NAME: set_image
#PARENT: Gtk.Button
#COMMENT: Set the image of @button to the given widget. The image will be
displayed if the label text is %NULL or if
#GtkButton:always-show-image is %TRUE. You don’t have to call
gtk_widget_show() on @image yourself.
#NAME: dialog
#PARENT: Gtk.Dialog.get_header_bar.Widget
#COMMENT: a #GtkDialog
#NAME: set_has_tooltip
#PARENT: Gtk.Widget
#COMMENT: Sets the has-tooltip property on @widget to @has_tooltip.  See
#GtkWidget:has-tooltip for more information.
#NAME: modifiers
#PARENT: Gtk.bindings_activate.gboolean
#COMMENT: key modifier of the binding
#NAME: natural_width
#PARENT: Gtk.CellAreaContext.get_preferred_width.none
#COMMENT: location to store the natural width,
    or %NULL
#NAME: notebook
#PARENT: Gtk.Notebook.set_current_page.none
#COMMENT: a #GtkNotebook
#NAME: table
#PARENT: Gtk.Table.get_default_col_spacing.guint
#COMMENT: a #GtkTable
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_selection_bounds.gboolean
#COMMENT: a #GtkTextBuffer a #GtkTextBuffer
#NAME: set_no_show_all
#PARENT: Gtk.Widget
#COMMENT: Sets the #GtkWidget:no-show-all property, which determines whether
calls to gtk_widget_show_all() will affect this widget.

This is mostly for use in constructing widget hierarchies with externally
controlled visibility, see #GtkUIManager.
#NAME: drag_finish
#PARENT: Gtk
#COMMENT: Informs the drag source that the drop is finished, and
that the data of the drag will no longer be required.
#NAME: allow_async
#PARENT: Gtk.PrintOperation.set_allow_async.none
#COMMENT: %TRUE to allow asynchronous operation
#NAME: register_deserialize_format
#PARENT: Gtk.TextBuffer.register_deserialize_format
#COMMENT: the #GdkAtom that corresponds to the
              newly registered format’s mime-type.
#NAME: get_selected_rows
#PARENT: Gtk.TreeSelection
#COMMENT: Creates a list of path of all selected rows. Additionally, if you are
planning on modifying the model after calling this function, you may
want to convert the returned list into a list of #GtkTreeRowReferences.
To do this, you can use gtk_tree_row_reference_new().

To free the return value, use:
|[<!-- language="C" -->
g_list_free_full (list, (GDestroyNotify) gtk_tree_path_free);
]|
#NAME: create_tool_item
#PARENT: Gtk.Action.create_tool_item
#COMMENT: a toolbar item connected to the action.
#NAME: iter
#PARENT: Gtk.TreeModelFilterVisibleFunc.gboolean
#COMMENT: a #GtkTreeIter pointing to the row in @model whose visibility
  is determined
#NAME: get_current_event_time
#PARENT: Gtk
#COMMENT: If there is a current event and it has a timestamp,
return that timestamp, otherwise return %GDK_CURRENT_TIME.
#NAME: clipboard
#PARENT: Gtk.Clipboard.set_with_owner.gboolean
#COMMENT: a #GtkClipboard
#NAME: pbar
#PARENT: Gtk.ProgressBar.set_pulse_step.none
#COMMENT: a #GtkProgressBar
#NAME: iter_next
#PARENT: Gtk.TreeModel
#COMMENT: Sets @iter to point to the node following it at the current level.

If there is no next @iter, %FALSE is returned and @iter is set
to be invalid.
#NAME: new
#PARENT: Gtk.EventBox.new
#COMMENT: a new #GtkEventBox
#NAME: fontchooser
#PARENT: Gtk.FontChooser.get_font_desc.Pango.FontDescription
#COMMENT: a #GtkFontChooser
#NAME: create_child_anchor
#PARENT: Gtk.TextBuffer
#COMMENT: This is a convenience function which simply creates a child anchor
with gtk_text_child_anchor_new() and inserts it into the buffer
with gtk_text_buffer_insert_child_anchor(). The new anchor is
owned by the buffer; no reference count is returned to
the caller of gtk_text_buffer_create_child_anchor().
#NAME: window
#PARENT: Gtk.Window.get_icon_list.GdkPixbuf.Pixbuf
#COMMENT: a #GtkWindow
#NAME: attribute_disconnect
#PARENT: Gtk.CellArea
#COMMENT: Disconnects @attribute for the @renderer in @area so that
attribute will no longer be updated with values from the
model.
#NAME: height
#PARENT: Gtk.Widget.get_size_request.none
#COMMENT: return location for height, or %NULL
#NAME: get_handle_position
#PARENT: Gtk.HandleBox.get_handle_position
#COMMENT: the current handle position.
#NAME: set_yalign
#PARENT: Gtk.Label
#COMMENT: Sets the #GtkLabel:yalign property for @label.
#NAME: pulse
#PARENT: Gtk.ProgressBar
#COMMENT: Indicates that some progress has been made, but you don’t know how much.
Causes the progress bar to enter “activity mode,” where a block
bounces back and forth. Each call to gtk_progress_bar_pulse()
causes the block to move by a little bit (the amount of movement
per pulse is determined by gtk_progress_bar_set_pulse_step()).
#NAME: new_order
#PARENT: Gtk.TreeModel.rows_reordered_with_length.none
#COMMENT: an array of integers
    mapping the current position of each child to its old
    position before the re-ordering,
    i.e. @new_order`[newpos] = oldpos`
#NAME: get_display
#PARENT: Gtk.Widget.get_display
#COMMENT: the #GdkDisplay for the toplevel for this widget.
#NAME: adjustment
#PARENT: Gtk.Adjustment.get_value.gdouble
#COMMENT: a #GtkAdjustment
#NAME: remove_provider
#PARENT: Gtk.StyleContext
#COMMENT: Removes @provider from the style providers list in @context.
#NAME: data
#PARENT: Gtk.TreeModelFilterVisibleFunc.gboolean
#COMMENT: user data given to gtk_tree_model_filter_set_visible_func()
#NAME: get_state
#PARENT: Gtk.Widget.get_state
#COMMENT: the state of @widget.
#NAME: motion-notify-event
#PARENT: Gtk.Widget.motion-notify-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: compute_expand
#PARENT: Gtk.Widget
#COMMENT: Computes whether a container should give this widget extra space
when possible. Containers should check this, rather than
looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().

This function already checks whether the widget is visible, so
visibility does not need to be checked separately. Non-visible
widgets are not expanded.

The computed expand value uses either the expand setting explicitly
set on the widget itself, or, if none has been explicitly set,
the widget may expand if some of its children do.
#NAME: widget
#PARENT: Gtk.paint_check.none
#COMMENT: the widget
#NAME: HeaderBar
#PARENT: Gtk
#COMMENT: GtkHeaderBar is similar to a horizontal #GtkBox. It allows children to
be placed at the start or the end. In addition, it allows a title and
subtitle to be displayed. The title will be centered with respect to
the width of the box, even if the children at either side take up
different amounts of space. The height of the titlebar will be
set to provide sufficient space for the subtitle, even if none is
currently set. If a subtitle is not needed, the space reservation
can be turned off with gtk_header_bar_set_has_subtitle().

GtkHeaderBar can add typical window frame controls, such as minimize,
maximize and close buttons, or the window icon.
#NAME: get_columns
#PARENT: Gtk.TreeView.get_columns
#COMMENT: A list of #GtkTreeViewColumn s
#NAME: query_child_packing
#PARENT: Gtk.Box
#COMMENT: Obtains information about how @child is packed into @box.
#NAME: buildable
#PARENT: Gtk.BuildableIface.construct_child.construct_child.GObject.Object
#COMMENT: A #GtkBuildable
#NAME: area
#PARENT: Gtk.CellArea.get_edited_cell.CellRenderer
#COMMENT: a #GtkCellArea
#NAME: get_filename
#PARENT: Gtk.FileChooser
#COMMENT: Gets the filename for the currently selected file in
the file selector. The filename is returned as an absolute path. If
multiple files are selected, one of the filenames will be returned at
random.

If the file chooser is in folder mode, this function returns the selected
folder.
#NAME: warning_color
#PARENT: Gtk.IconInfo.load_symbolic.GdkPixbuf.Pixbuf
#COMMENT: a #GdkRGBA representing the warning color
    of the icon or %NULL to use the default color
#NAME: relative-to
#PARENT: Gtk.Popover
#COMMENT: Sets the attached widget.
#NAME: get_uri
#PARENT: Gtk.RecentInfo.get_uri
#COMMENT: the URI of the resource. The returned string is
  owned by the recent manager, and should not be freed.
#NAME: uri
#PARENT: Gtk.RecentManager.add_item.gboolean
#COMMENT: a valid URI
#NAME: widget
#PARENT: Gtk.Widget.has_visible_focus.gboolean
#COMMENT: a #GtkWidget
#NAME: get_widget
#PARENT: Gtk.AppChooserDialog.get_widget
#COMMENT: the #GtkAppChooserWidget of @self
#NAME: text_view
#PARENT: Gtk.TextView.place_cursor_onscreen.gboolean
#COMMENT: a #GtkTextView
#NAME: new
#PARENT: Gtk.VSeparator
#COMMENT: Creates a new #GtkVSeparator.
#NAME: tree_view
#PARENT: Gtk.TreeView.convert_widget_to_bin_window_coords.none
#COMMENT: a #GtkTreeView
#NAME: drag_dest_find_target
#PARENT: Gtk.Widget.drag_dest_find_target
#COMMENT: first target that the source offers
    and the dest can accept, or %GDK_NONE
#NAME: type
#PARENT: Gtk.WidgetPath.has_parent.gboolean
#COMMENT: widget type to check in parents
#NAME: completion
#PARENT: Gtk.EntryCompletion.get_popup_single_match.gboolean
#COMMENT: a #GtkEntryCompletion
#NAME: backward_char
#PARENT: Gtk.TextIter
#COMMENT: Moves backward by one character offset. Returns %TRUE if movement
was possible; if @iter was the first in the buffer (character
offset 0), gtk_text_iter_backward_char() returns %FALSE for convenience when
writing loops.
#NAME: set_tooltip_text
#PARENT: Gtk.Widget
#COMMENT: Sets @text as the contents of the tooltip. This function will take
care of setting #GtkWidget:has-tooltip to %TRUE and of the default
handler for the #GtkWidget::query-tooltip signal.

See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
#NAME: list_action_descriptions
#PARENT: Gtk.Application.list_action_descriptions
#COMMENT: a %NULL-terminated array of strings,
    free with g_strfreev() when done
#NAME: lrtb
#PARENT: Gtk.NumberUpLayout
#COMMENT: ![](layout-lrtb.png)
#NAME: new_with_mnemonic_from_widget
#PARENT: Gtk.RadioMenuItem.new_with_mnemonic_from_widget
#COMMENT: The new #GtkRadioMenuItem
#NAME: tooltip
#PARENT: Gtk.ToggleActionEntry
#COMMENT: The tooltip for the action. This field should typically be
 marked for translation, see gtk_action_group_set_translation_domain().
#NAME: uri
#PARENT: Gtk.FileFilterFlags
#COMMENT: the URI for the file being tested
#NAME: get_direction
#PARENT: Gtk.IconSource.get_direction
#COMMENT: text direction this source matches
#NAME: PrintDuplex
#PARENT: Gtk
#COMMENT: See also gtk_print_settings_set_duplex().
#NAME: changed
#PARENT: Gtk.AccelMapForeach.none
#COMMENT: Changed flag of the accelerator (if %TRUE, accelerator has changed
 during runtime and would need to be saved during an accelerator dump)
#NAME: x_offset
#PARENT: Gtk.CellRendererClass.get_size.get_size.none
#COMMENT: location to return x offset of cell relative to @cell_area, or %NULL
#NAME: data
#PARENT: Gtk.Buildable.custom_tag_start.gboolean
#COMMENT: return location for user data that will be passed in
  to parser functions
#NAME: set_active_id
#PARENT: Gtk.ComboBox
#COMMENT: Changes the active row of @combo_box to the one that has an ID equal to
@active_id, or unsets the active row if @active_id is %NULL.  Rows having
a %NULL ID string cannot be made active by this function.

If the #GtkComboBox:id-column property of @combo_box is unset or if no
row has the given ID then the function does nothing and returns %FALSE.
#NAME: get_expander_column
#PARENT: Gtk.TreeView.get_expander_column
#COMMENT: The expander column.
#NAME: tooltip
#PARENT: Gtk.TreeView.set_tooltip_cell.none
#COMMENT: a #GtkTooltip
#NAME: path
#PARENT: Gtk.WidgetPath.unref.none
#COMMENT: a #GtkWidgetPath
#NAME: icon_set
#PARENT: Gtk.IconSet.get_sizes.none
#COMMENT: a #GtkIconSet
#NAME: anchor
#PARENT: Gtk.TextBufferClass.insert_child_anchor.insert_child_anchor.none
#COMMENT: a #GtkTextChildAnchor
#NAME: filter
#PARENT: Gtk.TreeModelFilter.convert_child_path_to_path.TreePath
#COMMENT: A #GtkTreeModelFilter.
#NAME: set_sensitive
#PARENT: Gtk.Widget
#COMMENT: Sets the sensitivity of a widget. A widget is sensitive if the user
can interact with it. Insensitive widgets are “grayed out” and the
user can’t interact with them. Insensitive widgets are known as
“inactive”, “disabled”, or “ghosted” in some other toolkits.
#NAME: get_destroy_with_parent
#PARENT: Gtk.Window
#COMMENT: Returns whether the window will be destroyed with its transient parent. See
gtk_window_set_destroy_with_parent ().
#NAME: tooltip
#PARENT: Gtk.Entry.set_icon_tooltip_text.none
#COMMENT: the contents of the tooltip for the icon, or %NULL
#NAME: SizeGroupMode
#PARENT: Gtk
#COMMENT: The mode of the size group determines the directions in which the size
group affects the requested sizes of its component widgets.
#NAME: child_type
#PARENT: Gtk.Container
#COMMENT: Returns the type of the children supported by the container.

Note that this may return %G_TYPE_NONE to indicate that no more
children can be added, e.g. for a #GtkPaned which already has two
children.
#NAME: STOCK_FULLSCREEN
#PARENT: Gtk
#COMMENT: The “Fullscreen” item and icon.
#NAME: top_left
#PARENT: Gtk.CornerType
#COMMENT: Place the scrollbars on the right and bottom of the
 widget (default behaviour).
#NAME: get_default
#PARENT: Gtk.IconTheme.get_default
#COMMENT: A unique #GtkIconTheme associated with
    the default screen. This icon theme is associated with
    the screen and can be used as long as the screen
    is open. Do not ref or unref it.
#NAME: take_focus
#PARENT: Gtk.MenuShell.set_take_focus.none
#COMMENT: %TRUE if the menu shell should take the keyboard
    focus on popup
#NAME: iter
#PARENT: Gtk.TextIter.get_char.gunichar
#COMMENT: an iterator
#NAME: unset_invisible_char
#PARENT: Gtk.Entry
#COMMENT: Unsets the invisible char previously set with
gtk_entry_set_invisible_char(). So that the
default invisible char is used again.
#NAME: STYLE_CLASS_VIEW
#PARENT: Gtk
#COMMENT: A CSS class defining a view, such as iconviews or treeviews.

This is used in #GtkTreeView, #GtkIconView, #GtkTextView,
as well as #GtkCalendar.
#NAME: set_margin_top
#PARENT: Gtk.Widget
#COMMENT: Sets the top margin of @widget.
See the #GtkWidget:margin-top property.
#NAME: new
#PARENT: Gtk.ToggleAction.new
#COMMENT: a new #GtkToggleAction
#NAME: set_tooltip_markup
#PARENT: Gtk.ToolItem
#COMMENT: Sets the markup text to be displayed as tooltip on the item.
See gtk_widget_set_tooltip_markup().
#NAME: provider
#PARENT: Gtk.StyleContext.add_provider.none
#COMMENT: a #GtkStyleProvider
#NAME: xalign
#PARENT: Gtk.Button.set_alignment.none
#COMMENT: the horizontal position of the child, 0.0 is left aligned,
  1.0 is right aligned
#NAME: chooser
#PARENT: Gtk.RecentChooserIface.unselect_all.unselect_all.none
#COMMENT: a #GtkRecentChooser
#NAME: get_frame_clock
#PARENT: Gtk.Widget.get_frame_clock
#COMMENT: a #GdkFrameClock (or #NULL if widget is unrealized)
#NAME: widget
#PARENT: Gtk.CellRenderer.get_preferred_size.none
#COMMENT: the #GtkWidget this cell will be rendering to
#NAME: get_request_mode
#PARENT: Gtk.CellAreaClass.get_request_mode.get_request_mode
#COMMENT: The #GtkSizeRequestMode preferred by @area.
#NAME: get_label
#PARENT: Gtk.ToolItemGroup.get_label
#COMMENT: the label of @group. The label is an internal string of @group
    and must not be modified. Note that %NULL is returned if a custom
    label has been set with gtk_tool_item_group_set_label_widget()
#NAME: editable
#PARENT: Gtk.Editable.do_delete_text.none
#COMMENT: a #GtkEditable
#NAME: pack_end
#PARENT: Gtk.Box
#COMMENT: Adds @child to @box, packed with reference to the end of @box.
The @child is packed after (away from end of) any other child
packed with reference to the end of @box.
#NAME: set_drag_source
#PARENT: Gtk.ToolPalette
#COMMENT: Sets the tool palette as a drag source.
Enables all groups and items in the tool palette as drag sources
on button 1 and button 3 press with copy and move actions.
See gtk_drag_source_set().
#NAME: set_expand
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the column to take available extra space.  This space is shared equally
amongst all columns that have the expand set to %TRUE.  If no column has this
option set, then the last column gets all extra space.  By default, every
column is created with this %FALSE.

Along with “fixed-width”, the “expand” property changes when the column is
resized by the user.
#NAME: Label
#PARENT: Gtk
#COMMENT: The #GtkLabel widget displays a small amount of text. As the name
implies, most labels are used to label another widget such as a
#GtkButton, a #GtkMenuItem, or a #GtkComboBox.

# GtkLabel as GtkBuildable

The GtkLabel implementation of the GtkBuildable interface supports a
custom <attributes> element, which supports any number of <attribute>
elements. The <attribute> element has attributes named “name“, “value“,
“start“ and “end“ and allows you to specify #PangoAttribute values for
this label.

An example of a UI definition fragment specifying Pango attributes:
|[
<object class="GtkLabel">
  <attributes>
    <attribute name="weight" value="PANGO_WEIGHT_BOLD"/>
    <attribute name="background" value="red" start="5" end="10"/>"
  </attributes>
</object>
]|

The start and end attributes specify the range of characters to which the
Pango attribute applies. If start and end are not specified, the attribute is
applied to the whole text. Note that specifying ranges does not make much
sense with translatable attributes. Use markup embedded in the translatable
content instead.

# Mnemonics

Labels may contain “mnemonics”. Mnemonics are
underlined characters in the label, used for keyboard navigation.
Mnemonics are created by providing a string with an underscore before
the mnemonic character, such as `"_File"`, to the
functions gtk_label_new_with_mnemonic() or
gtk_label_set_text_with_mnemonic().

Mnemonics automatically activate any activatable widget the label is
inside, such as a #GtkButton; if the label is not inside the
mnemonic’s target widget, you have to tell the label about the target
using gtk_label_set_mnemonic_widget(). Here’s a simple example where
the label is inside a button:

|[<!-- language="C" -->
  // Pressing Alt+H will activate this button
  button = gtk_button_new ();
  label = gtk_label_new_with_mnemonic ("_Hello");
  gtk_container_add (GTK_CONTAINER (button), label);
]|

There’s a convenience function to create buttons with a mnemonic label
already inside:

|[<!-- language="C" -->
  // Pressing Alt+H will activate this button
  button = gtk_button_new_with_mnemonic ("_Hello");
]|

To create a mnemonic for a widget alongside the label, such as a
#GtkEntry, you have to point the label at the entry with
gtk_label_set_mnemonic_widget():

|[<!-- language="C" -->
  // Pressing Alt+H will focus the entry
  entry = gtk_entry_new ();
  label = gtk_label_new_with_mnemonic ("_Hello");
  gtk_label_set_mnemonic_widget (GTK_LABEL (label), entry);
]|

# Markup (styled text)

To make it easy to format text in a label (changing colors,
fonts, etc.), label text can be provided in a simple
[markup format][PangoMarkupFormat].

Here’s how to create a label with a small font:
|[<!-- language="C" -->
  label = gtk_label_new (NULL);
  gtk_label_set_markup (GTK_LABEL (label), "<small>Small text</small>");
]|

(See [complete documentation][PangoMarkupFormat] of available
tags in the Pango manual.)

The markup passed to gtk_label_set_markup() must be valid; for example,
literal <, > and & characters must be escaped as &lt;, &gt;, and &amp;.
If you pass text obtained from the user, file, or a network to
gtk_label_set_markup(), you’ll want to escape it with
g_markup_escape_text() or g_markup_printf_escaped().

Markup strings are just a convenient way to set the #PangoAttrList on
a label; gtk_label_set_attributes() may be a simpler way to set
attributes in some cases. Be careful though; #PangoAttrList tends to
cause internationalization problems, unless you’re applying attributes
to the entire string (i.e. unless you set the range of each attribute
to [0, %G_MAXINT)). The reason is that specifying the start_index and
end_index for a #PangoAttribute requires knowledge of the exact string
being displayed, so translations will cause problems.

# Selectable labels

Labels can be made selectable with gtk_label_set_selectable().
Selectable labels allow the user to copy the label contents to
the clipboard. Only labels that contain useful-to-copy information
— such as error messages — should be made selectable.

# Text layout # {#label-text-layout}

A label can contain any number of paragraphs, but will have
performance problems if it contains more than a small number.
Paragraphs are separated by newlines or other paragraph separators
understood by Pango.

Labels can automatically wrap text if you call
gtk_label_set_line_wrap().

gtk_label_set_justify() sets how the lines in a label align
with one another. If you want to set how the label as a whole
aligns in its available space, see the #GtkWidget::halign and
#GtkWidget:valign properties.

The #GtkLabel:width-chars and #GtkLabel:max-width-chars properties
can be used to control the size allocation of ellipsized or wrapped
labels. For ellipsizing labels, if either is specified (and less
than the actual text size), it is used as the minimum width, and the actual
text size is used as the natural width of the label. For wrapping labels,
width-chars is used as the minimum width, if specified, and max-width-chars
is used as the natural width. Even if max-width-chars specified, wrapping
labels will be rewrapped to use all of the available width.

Note that the interpretation of #GtkLabel:width-chars and
#GtkLabel:max-width-chars has changed a bit with the introduction of
[width-for-height geometry management.][geometry-management]

# Links

Since 2.18, GTK+ supports markup for clickable hyperlinks in addition
to regular Pango markup. The markup for links is borrowed from HTML,
using the `<a>` with “href“ and “title“ attributes. GTK+ renders links
similar to the way they appear in web browsers, with colored, underlined
text. The “title“ attribute is displayed as a tooltip on the link.

An example looks like this:

|[<!-- language="C" -->
const gchar *text =
"Go to the"
"<a href=\"http://www.gtk.org title="&lt;i&gt;Our&lt;/i&gt; website\">"
"GTK+ website</a> for more...";
gtk_label_set_markup (label, text);
]|

It is possible to implement custom handling for links and their tooltips with
the #GtkLabel::activate-link signal and the gtk_label_get_current_uri() function.
#NAME: info
#PARENT: Gtk.RecentInfo.get_short_name.utf8
#COMMENT: an #GtkRecentInfo
#NAME: reverse_portrait
#PARENT: Gtk.PageOrientation
#COMMENT: Reverse portrait mode.
#NAME: plug
#PARENT: Gtk.Plug.get_id.xlib.Window
#COMMENT: a #GtkPlug.
#NAME: self
#PARENT: Gtk.LevelBar.get_inverted.gboolean
#COMMENT: a #GtkLevelBar
#NAME: render
#PARENT: Gtk.CellArea
#COMMENT: Renders @area’s cells according to @area’s layout onto @widget at
the given coordinates.
#NAME: install_child_property
#PARENT: Gtk.ContainerClass
#COMMENT: Installs a child property on a container class.
#NAME: gesture
#PARENT: Gtk.Gesture.is_active.gboolean
#COMMENT: a #GtkGesture
#NAME: accel-path
#PARENT: Gtk.MenuItem
#COMMENT: Sets the accelerator path of the menu item, through which runtime
changes of the menu item's accelerator caused by the user can be
identified and saved to persistant storage.
#NAME: op
#PARENT: Gtk.MountOperation.is_showing.gboolean
#COMMENT: a #GtkMountOperation
#NAME: STYLE_CLASS_ARROW
#PARENT: Gtk
#COMMENT: A CSS class used when rendering an arrow element.

Note that #gtk_render_arrow automatically adds this style class
to the style context when rendering an arrow element.
#NAME: add_filter
#PARENT: Gtk.FileChooser
#COMMENT: Adds @filter to the list of filters that the user can select between.
When a filter is selected, only files that are passed by that
filter are displayed.

Note that the @chooser takes ownership of the filter, so you have to
ref and sink it if you want to keep a reference.
#NAME: icon_set
#PARENT: Gtk.Image.new_from_icon_set.Widget
#COMMENT: a #GtkIconSet
#NAME: popup
#PARENT: Gtk.Menu
#COMMENT: Displays a menu and makes it available for selection.

Applications can use this function to display context-sensitive
menus, and will typically supply %NULL for the @parent_menu_shell,
@parent_menu_item, @func and @data parameters. The default menu
positioning function will position the menu at the current mouse
cursor position.

The @button parameter should be the mouse button pressed to initiate
the menu popup. If the menu popup was initiated by something other
than a mouse button press, such as a mouse button release or a keypress,
@button should be 0.

The @activate_time parameter is used to conflict-resolve initiation
of concurrent requests for mouse/keyboard grab requests. To function
properly, this needs to be the timestamp of the user event (such as
a mouse click or key press) that caused the initiation of the popup.
Only if no such event is available, gtk_get_current_event_time() can
be used instead.
#NAME: icon-size
#PARENT: Gtk.Toolbar
#COMMENT: The size of the icons in a toolbar is normally determined by
the toolbar-icon-size setting. When this property is set, it
overrides the setting.

This should only be used for special-purpose toolbars, normal
application toolbars should respect the user preferences for the
size of icons.
#NAME: cell
#PARENT: Gtk.TreeView.set_tooltip_cell.none
#COMMENT: a #GtkCellRenderer or %NULL
#NAME: attach_widget
#PARENT: Gtk.Window.set_attached_to.none
#COMMENT: a #GtkWidget, or %NULL
#NAME: emit_deleted_text
#PARENT: Gtk.EntryBuffer
#COMMENT: Used when subclassing #GtkEntryBuffer
#NAME: print_dialog
#PARENT: Gtk.PrintOperationAction
#COMMENT: Show the print dialog.
#NAME: buffer
#PARENT: Gtk.TextBuffer.delete_mark.none
#COMMENT: a #GtkTextBuffer
#NAME: model
#PARENT: Gtk.TreeModelForeachFunc.gboolean
#COMMENT: the #GtkTreeModel being iterated
#NAME: parent_window
#PARENT: Gtk.Widget.set_parent_window.none
#COMMENT: the new parent window.
#NAME: arrow_type
#PARENT: Gtk.paint_arrow.none
#COMMENT: the type of arrow to draw
#NAME: filter_info
#PARENT: Gtk.FileFilter.filter.gboolean
#COMMENT: a #GtkFileFilterInfo containing information
 about a file.
#NAME: disconnect
#PARENT: Gtk.AccelGroup.disconnect
#COMMENT: %TRUE if the closure was found and got disconnected
#NAME: has-stencil-buffer
#PARENT: Gtk.GLArea
#COMMENT: If set to %TRUE the widget will allocate and enable a stencil buffer for the
target framebuffer.
#NAME: icon_info
#PARENT: Gtk.IconInfo.load_symbolic_for_context.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconInfo
#NAME: page_num
#PARENT: Gtk.Notebook.set_current_page.none
#COMMENT: index of the page to switch to, starting from 0.
    If negative, the last page will be used. If greater
    than the number of pages in the notebook, nothing
    will be done.
#NAME: area
#PARENT: Gtk.CellArea.stop_editing.none
#COMMENT: a #GtkCellArea
#NAME: new
#PARENT: Gtk.TargetEntry
#COMMENT: Makes a new #GtkTargetEntry.
#NAME: default_editability
#PARENT: Gtk.TextIter.can_insert.gboolean
#COMMENT: %TRUE if text is editable by default
#NAME: STYLE_CLASS_POPUP
#PARENT: Gtk
#COMMENT: A CSS class that is added to the toplevel windows used for menus.
#NAME: func_notify
#PARENT: Gtk.EntryCompletion.set_match_func.none
#COMMENT: destroy notify for @func_data.
#NAME: window
#PARENT: Gtk.Window.propagate_key_event.gboolean
#COMMENT: a #GtkWindow
#NAME: page_num
#PARENT: Gtk.Assistant.get_nth_page.Widget
#COMMENT: the index of a page in the @assistant,
    or -1 to get the last page
#NAME: parent_class
#PARENT: Gtk.AppChooserDialogClass
#COMMENT: The parent class.
#NAME: rows_reordered
#PARENT: Gtk.TreeModel
#COMMENT: Emits the #GtkTreeModel::rows-reordered signal on @tree_model.

This should be called by models when their rows have been
reordered.
#NAME: columns-changed
#PARENT: Gtk.TreeView
#COMMENT: The number of columns of the treeview has changed.
#NAME: has_focus
#PARENT: Gtk.Widget.has_focus
#COMMENT: %TRUE if the widget has the global input focus.
#NAME: new
#PARENT: Gtk.AppChooserDialog.new
#COMMENT: a newly created #GtkAppChooserDialog
#NAME: lookup_default
#PARENT: Gtk.IconFactory.lookup_default
#COMMENT: a #GtkIconSet, or %NULL
#NAME: get_show_not_found
#PARENT: Gtk.RecentChooser.get_show_not_found
#COMMENT: %TRUE if the resources not found should be displayed, and
  %FALSE otheriwse.
#NAME: set_hhomogeneous
#PARENT: Gtk.Stack
#COMMENT: Sets the #GtkStack to be horizontally homogeneous or not.
If it is homogeneous, the #GtkStack will request the same
width for all its children. If it isn't, the stack
may change width when a different child becomes visible.
#NAME: ApplicationWindow
#PARENT: Gtk
#COMMENT: GtkApplicationWindow is a #GtkWindow subclass that offers some
extra functionality for better integration with #GtkApplication
features.  Notably, it can handle both the application menu as well
as the menubar. See gtk_application_set_app_menu() and
gtk_application_set_menubar().

This class implements the #GActionGroup and #GActionMap interfaces,
to let you add window-specific actions that will be exported by the
associated #GtkApplication, together with its application-wide
actions.  Window-specific actions are prefixed with the “win.”
prefix and application-wide actions are prefixed with the “app.”
prefix.  Actions must be addressed with the prefixed name when
referring to them from a #GMenuModel.

Note that widgets that are placed inside a GtkApplicationWindow
can also activate these actions, if they implement the
GtkActionable interface.

As with #GtkApplication, the GDK lock will be acquired when
processing actions arriving from other processes and should therefore
be held when activating actions locally (if GDK threads are enabled).

The settings #GtkSettings:gtk-shell-shows-app-menu and
#GtkSettings:gtk-shell-shows-menubar tell GTK+ whether the
desktop environment is showing the application menu and menubar
models outside the application as part of the desktop shell.
For instance, on OS X, both menus will be displayed remotely;
on Windows neither will be. gnome-shell (starting with version 3.4)
will display the application menu, but not the menubar.

If the desktop environment does not display the menubar, then
#GtkApplicationWindow will automatically show a #GtkMenuBar for it.
(see the #GtkApplication docs for some screenshots of how this
looks on different platforms).
This behaviour can be overridden with the #GtkApplicationWindow:show-menubar
property. If the desktop environment does not display the application
menu, then it will automatically be included in the menubar. It can
also be shown as part of client-side window decorations, e.g. by
using gtk_header_bar_set_show_close_button().

## A GtkApplicationWindow with a menubar

|[<!-- language="C" -->
app = gtk_application_new ();

builder = gtk_builder_new_from_string (
    "<interface>"
    "  <menu id='menubar'>"
    "    <submenu label='_Edit'>"
    "      <item label='_Copy' action='win.copy'/>"
    "      <item label='_Paste' action='win.paste'/>"
    "    </submenu>"
    "  </menu>"
    "</interface>",
    -1);

menubar = G_MENU_MODEL (gtk_builder_get_object (builder,
                                                "menubar"));
gtk_application_set_menubar (G_APPLICATION (app), menubar);
g_object_unref (builder);

...

window = gtk_application_window_new (app);
]|

## Handling fallback yourself

[A simple example](https://git.gnome.org/browse/gtk+/tree/examples/sunny.c)

The XML format understood by #GtkBuilder for #GMenuModel consists
of a toplevel `<menu>` element, which contains one or more `<item>`
elements. Each `<item>` element contains `<attribute>` and `<link>`
elements with a mandatory name attribute. `<link>` elements have the
same content model as `<menu>`.

Attribute values can be translated using gettext, like other #GtkBuilder
content. `<attribute>` elements can be marked for translation with a
`translatable="yes"` attribute. It is also possible to specify message
context and translator comments, using the context and comments attributes.
To make use of this, the #GtkBuilder must have been given the gettext
domain to use.
#NAME: set_use_preedit
#PARENT: Gtk.IMContext
#COMMENT: Sets whether the IM context should use the preedit string
to display feedback. If @use_preedit is FALSE (default
is TRUE), then the IM context may use some other method to display
feedback, such as displaying it in a child of the root window.
#NAME: set_client_window
#PARENT: Gtk.IMContext
#COMMENT: Set the client window for the input context; this is the
#GdkWindow in which the input appears. This window is
used in order to correctly position status windows, and may
also be used for purposes internal to the input method.
#NAME: set_restrict_to_fill_level
#PARENT: Gtk.Range
#COMMENT: Sets whether the slider is restricted to the fill level. See
gtk_range_set_fill_level() for a general description of the fill
level concept.
#NAME: new_with_mnemonic
#PARENT: Gtk.CheckButton.new_with_mnemonic
#COMMENT: a new #GtkCheckButton
#NAME: self
#PARENT: Gtk.NumerableIcon.set_style_context.none
#COMMENT: a #GtkNumerableIcon
#NAME: gesture
#PARENT: Gtk.Gesture.is_recognized.gboolean
#COMMENT: a #GtkGesture
#NAME: chooser
#PARENT: Gtk.FileChooser.set_preview_widget.none
#COMMENT: a #GtkFileChooser
#NAME: get_message_type
#PARENT: Gtk.InfoBar
#COMMENT: Returns the message type of the message area.
#NAME: min_size
#PARENT: Gtk.Range.set_min_slider_size.none
#COMMENT: The slider’s minimum size
#NAME: accel_mods
#PARENT: Gtk.AccelGroup.activate.gboolean
#COMMENT: keyboard state mask from a key event
#NAME: to_string
#PARENT: Gtk.SymbolicColor.to_string
#COMMENT: a new string representing @color
#NAME: win
#PARENT: Gtk.TextView.get_window.Gdk.Window
#COMMENT: window to get
#NAME: render_slider
#PARENT: Gtk
#COMMENT: Renders a slider (as in #GtkScale) in the rectangle defined by @x, @y,
@width, @height. @orientation defines whether the slider is vertical
or horizontal.

Typical slider rendering:

![](sliders.png)
#NAME: area
#PARENT: Gtk.CellAreaClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: a #GtkCellArea
#NAME: TreeViewSearchEqualFunc
#PARENT: Gtk.TreeViewSearchEqualFunc
#COMMENT: %FALSE if the row matches, %TRUE otherwise.
#NAME: get_use_size
#PARENT: Gtk.FontButton.get_use_size
#COMMENT: whether the selected size is used in the label.
#NAME: label
#PARENT: Gtk.Label.set_attributes.none
#COMMENT: a #GtkLabel
#NAME: new
#PARENT: Gtk.ScrolledWindow.new
#COMMENT: a new scrolled window
#NAME: get_homogeneous
#PARENT: Gtk.Stack
#COMMENT: Gets whether @stack is homogeneous.
See gtk_stack_set_homogeneous().
#NAME: text
#PARENT: Gtk.TextBuffer.insert_interactive_at_cursor.gboolean
#COMMENT: text in UTF-8 format
#NAME: iter
#PARENT: Gtk.TextIter.set_visible_line_offset.none
#COMMENT: a #GtkTextIter
#NAME: accelerator_key
#PARENT: Gtk.accelerator_parse.none
#COMMENT: return location for accelerator
    keyval, or %NULL
#NAME: clear_marks
#PARENT: Gtk.Calendar
#COMMENT: Remove all visual markers.
#NAME: get_stock
#PARENT: Gtk.Image
#COMMENT: Gets the stock icon name and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_STOCK (see gtk_image_get_storage_type()).
The returned string is owned by the #GtkImage and should not
be freed.
#NAME: user_data
#PARENT: Gtk.TreeSortableIface.set_sort_func.set_sort_func.none
#COMMENT: User data to pass to @sort_func, or %NULL
#NAME: bar
#PARENT: Gtk.HeaderBar.get_show_close_button.gboolean
#COMMENT: a #GtkHeaderBar
#NAME: toolbar
#PARENT: Gtk.Toolbar.set_show_arrow.none
#COMMENT: a #GtkToolbar
#NAME: grab_get_current
#PARENT: Gtk.grab_get_current
#COMMENT: The widget which currently
    has the grab or %NULL if no grab is active
#NAME: preedit-changed
#PARENT: Gtk.Entry
#COMMENT: If an input method is used, the typed text will not immediately
be committed to the buffer. So if you are interested in the text,
connect to this signal.
#NAME: klass
#PARENT: Gtk.ContainerClass.handle_border_width.none
#COMMENT: the class struct of a #GtkContainer subclass
#NAME: set_unit
#PARENT: Gtk.PrintOperation
#COMMENT: Sets up the transformation for the cairo context obtained from
#GtkPrintContext in such a way that distances are measured in
units of @unit.
#NAME: RecentManagerError
#PARENT: Gtk
#COMMENT: Error codes for #GtkRecentManager operations
#NAME: font_button
#PARENT: Gtk.FontButton.set_title.none
#COMMENT: a #GtkFontButton
#NAME: widget
#PARENT: Gtk.Widget.drag_source_set.none
#COMMENT: a #GtkWidget
#NAME: get_allocated_height
#PARENT: Gtk.Widget
#COMMENT: Returns the height that has currently been allocated to @widget.
This function is intended to be used when implementing handlers
for the #GtkWidget::draw function.
#NAME: FlowBox
#PARENT: Gtk
#COMMENT: A GtkFlowBox positions child widgets in sequence according to its
orientation.

For instance, with the horizontal orientation, the widgets will be
arranged from left to right, starting a new row under the previous
row when necessary. Reducing the width in this case will require more
rows, so a larger height will be requested.

Likewise, with the vertical orientation, the widgets will be arranged
from top to bottom, starting a new column to the right when necessary.
Reducing the height will require more columns, so a larger width will
be requested.

The children of a GtkFlowBox can be dynamically sorted and filtered.

Although a GtkFlowBox must have only #GtkFlowBoxChild children,
you can add any kind of widget to it via gtk_container_add(), and
a GtkFlowBoxChild widget will automatically be inserted between
the box and the widget.

Also see #GtkListBox.

GtkFlowBox was added in GTK+ 3.12.
#NAME: selection
#PARENT: Gtk.ToolPalette.get_drag_item.Widget
#COMMENT: a #GtkSelectionData
#NAME: test-collapse-row
#PARENT: Gtk.TreeView
#COMMENT: The given row is about to be collapsed (hide its children nodes). Use this
signal if you need to control the collapsibility of individual rows.
#NAME: entry
#PARENT: Gtk.Entry.get_completion.EntryCompletion
#COMMENT: A #GtkEntry
#NAME: filter
#PARENT: Gtk.RecentFilter.add_mime_type.none
#COMMENT: a #GtkRecentFilter
#NAME: paint_check
#PARENT: Gtk
#COMMENT: Draws a check button indicator in the given rectangle on @cr with
the given parameters.
#NAME: new
#PARENT: Gtk.IMMulticontext.new
#COMMENT: a new #GtkIMMulticontext.
#NAME: unit
#PARENT: Gtk.PaperSize.new_custom.PaperSize
#COMMENT: the unit for @width and @height. not %GTK_UNIT_NONE.
#NAME: x
#PARENT: Gtk.render_option.none
#COMMENT: X origin of the rectangle
#NAME: y
#PARENT: Gtk.render_option.none
#COMMENT: Y origin of the rectangle
#NAME: get_cancel_button
#PARENT: Gtk.FontSelectionDialog
#COMMENT: Gets the “Cancel” button.
#NAME: cell
#PARENT: Gtk.IconView.set_cursor.none
#COMMENT: One of the cell renderers of @icon_view, or %NULL
#NAME: parent
#PARENT: Gtk.PrintOperation.run.PrintOperationResult
#COMMENT: Transient parent of the dialog
#NAME: text_view
#PARENT: Gtk.TextView.get_justification.Justification
#COMMENT: a #GtkTextView
#NAME: start_x
#PARENT: Gtk.Widget.drag_check_threshold.gboolean
#COMMENT: X coordinate of start of drag
#NAME: is_ipp
#PARENT: Gtk.PaperSize
#COMMENT: Returns %TRUE if @size is an IPP standard paper size.
#NAME: forward_visible_word_ends
#PARENT: Gtk.TextIter
#COMMENT: Calls gtk_text_iter_forward_visible_word_end() up to @count times.
#NAME: start_y
#PARENT: Gtk.Widget.drag_check_threshold.gboolean
#COMMENT: Y coordinate of start of drag
#NAME: pbar
#PARENT: Gtk.ProgressBar.set_text.none
#COMMENT: a #GtkProgressBar
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_clickable.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: get_dpi_x
#PARENT: Gtk.PrintContext.get_dpi_x
#COMMENT: the horizontal resolution of @context
#NAME: set_adjustment
#PARENT: Gtk.ScaleButton
#COMMENT: Sets the #GtkAdjustment to be used as a model
for the #GtkScaleButton’s scale.
See gtk_range_set_adjustment() for details.
#NAME: stock_id
#PARENT: Gtk.Action.set_stock_id.none
#COMMENT: the stock id
#NAME: get_object
#PARENT: Gtk.Builder.get_object
#COMMENT: the object named @name or %NULL if
   it could not be found in the object tree.
#NAME: drag_set_icon_widget
#PARENT: Gtk
#COMMENT: Changes the icon for a widget to a given widget.
GTK+ will not destroy the icon, so if you don’t want
it to persist, you should connect to the “drag-end”
signal and destroy it yourself.

GTK+ will, however, change the opacity and position of
the window as part of the drag animation. If you want
to reuse the window, you have to restore these to
the values you need after each drag operation.
#NAME: context
#PARENT: Gtk.render_extension.none
#COMMENT: a #GtkStyleContext
#NAME: set_use_stock
#PARENT: Gtk.ImageMenuItem
#COMMENT: If %TRUE, the label set in the menuitem is used as a
stock id to select the stock item for the item.
#NAME: new_order
#PARENT: Gtk.TreeStore.reorder.none
#COMMENT: an array of integers mapping the new position of each child
     to its old position before the re-ordering,
     i.e. @new_order`[newpos] = oldpos`.
#NAME: set_vadjustment
#PARENT: Gtk.Viewport
#COMMENT: Sets the vertical adjustment of the viewport.
#NAME: configure-event
#PARENT: Gtk.Widget
#COMMENT: The ::configure-event signal will be emitted when the size, position or
stacking of the @widget's window has changed.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask
automatically for all new windows.
#NAME: accel_label
#PARENT: Gtk.AccelLabel.get_accel.none
#COMMENT: a #GtkAccelLabel
#NAME: path
#PARENT: Gtk.FileChooserWidget.location-popup.none
#COMMENT: a string that gets put in the text entry for the file
name.
#NAME: cancellable
#PARENT: Gtk.IconInfo.load_symbolic_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: reset
#PARENT: Gtk.EventController
#COMMENT: Resets the @controller to a clean state. Every interaction
the controller did through #GtkEventController::handle-event
will be dropped at this point.
#NAME: changed
#PARENT: Gtk.ListBoxRow
#COMMENT: Marks @row as changed, causing any state that depends on this
to be updated. This affects sorting, filtering and headers.

Note that calls to this method must be in sync with the data
used for the row functions. For instance, if the list is
mirroring some external data set, and *two* rows changed in the
external data set then when you call gtk_list_box_row_changed()
on the first row the sort function must only read the new data
for the first of the two changed rows, otherwise the resorting
of the rows will be wrong.

This generally means that if you don’t fully control the data
model you have to duplicate the data that affects the listbox
row functions into the row widgets themselves. Another alternative
is to call gtk_list_box_invalidate_sort() on any model change,
but that is more expensive.
#NAME: set_cursor
#PARENT: Gtk.TreeView
#COMMENT: Sets the current keyboard focus to be at @path, and selects it.  This is
useful when you want to focus the user’s attention on a particular row.  If
@focus_column is not %NULL, then focus is given to the column specified by
it. Additionally, if @focus_column is specified, and @start_editing is
%TRUE, then editing should be started in the specified cell.
This function is often followed by @gtk_widget_grab_focus (@tree_view)
in order to give keyboard focus to the widget.  Please note that editing
can only happen when the widget is realized.

If @path is invalid for @model, the current cursor (if any) will be unset
and the function will return without failing.
#NAME: viewport
#PARENT: Gtk.Viewport.set_hadjustment.none
#COMMENT: a #GtkViewport.
#NAME: height
#PARENT: Gtk.render_slider.none
#COMMENT: rectangle height
#NAME: grid
#PARENT: Gtk.Grid.set_row_baseline_position.none
#COMMENT: a #GtkGrid
#NAME: detail
#PARENT: Gtk.paint_spinner.none
#COMMENT: a style detail (may be %NULL)
#NAME: get_icon_storage_type
#PARENT: Gtk.Entry
#COMMENT: Gets the type of representation being used by the icon
to store image data. If the icon has no image data,
the return value will be %GTK_IMAGE_EMPTY.
#NAME: first_button_text
#PARENT: Gtk.InfoBar.add_buttons.none
#COMMENT: button text or stock ID
#NAME: under_right
#PARENT: Gtk.StackTransitionType
#COMMENT: Uncover the new page by sliding to the right. Since: 3.12
#NAME: drag_dest_get_track_motion
#PARENT: Gtk.Widget.drag_dest_get_track_motion
#COMMENT: %TRUE if the widget always emits
  #GtkWidget::drag-motion events
#NAME: iter_has_qclass
#PARENT: Gtk.WidgetPath.iter_has_qclass
#COMMENT: %TRUE if the widget at @pos has the class defined.
#NAME: setting
#PARENT: Gtk.Entry.set_activates_default.none
#COMMENT: %TRUE to activate window’s default widget on Enter keypress
#NAME: color
#PARENT: Gtk.StyleContext.get_border_color.none
#COMMENT: return value for the border color
#NAME: 
#PARENT: Gtk.StyleContext.get_style.none...
#COMMENT: property name /return value pairs, followed by %NULL
#NAME: state
#PARENT: Gtk.Widget.override_background_color.none
#COMMENT: the state for which to set the background color
#NAME: get_previous_alpha
#PARENT: Gtk.ColorSelection.get_previous_alpha
#COMMENT: an integer between 0 and 65535
#NAME: invisible-char
#PARENT: Gtk.Entry
#COMMENT: The invisible character is used when masking entry contents (in
\"password mode\")"). When it is not explicitly set with the
#GtkEntry:invisible-char property, GTK+ determines the character
to use from a list of possible candidates, depending on availability
in the current font.

This style property allows the theme to prepend a character
to the list of candidates.
#NAME: new_from_ipp
#PARENT: Gtk.PaperSize
#COMMENT: Creates a new #GtkPaperSize object by using
IPP information.

If @ipp_name is not a recognized paper name,
@width and @height are used to
construct a custom #GtkPaperSize object.
#NAME: capture_button_press
#PARENT: Gtk.ScrolledWindow.set_capture_button_press.none
#COMMENT: %TRUE to capture button presses
#NAME: line_top
#PARENT: Gtk.TextView.get_line_at_y.none
#COMMENT: return location for top coordinate of the line
#NAME: get_chars
#PARENT: Gtk.Editable.get_chars
#COMMENT: a pointer to the contents of the widget as a
     string. This string is allocated by the #GtkEditable
     implementation and should be freed by the caller.
#NAME: rescan_if_needed
#PARENT: Gtk.IconTheme.rescan_if_needed
#COMMENT: %TRUE if the icon theme has changed and needed
    to be reloaded.
#NAME: new
#PARENT: Gtk.CellRendererAccel
#COMMENT: Creates a new #GtkCellRendererAccel.
#NAME: get_use_underline
#PARENT: Gtk.Label
#COMMENT: Returns whether an embedded underline in the label indicates a
mnemonic. See gtk_label_set_use_underline().
#NAME: insert_page
#PARENT: Gtk.Notebook.insert_page
#COMMENT: the index (starting from 0) of the inserted
    page in the notebook, or -1 if function fails
#NAME: get_label_widget
#PARENT: Gtk.ToolItemGroup
#COMMENT: Gets the label widget of @group.
See gtk_tool_item_group_set_label_widget().
#NAME: menu
#PARENT: Gtk.RecentChooserMenu.get_show_numbers.gboolean
#COMMENT: a #GtkRecentChooserMenu
#NAME: widget
#PARENT: Gtk.CellArea.render.none
#COMMENT: the #GtkWidget that @area is rendering to
#NAME: get_model
#PARENT: Gtk.TreeModelFilter.get_model
#COMMENT: A pointer to a #GtkTreeModel.
#NAME: get_action
#PARENT: Gtk.UIManager.get_action
#COMMENT: the action whose proxy widget is found by following the path,
    or %NULL if no widget was found.
#NAME: new_with_rgba
#PARENT: Gtk.ColorButton
#COMMENT: Creates a new color button.
#NAME: get_start_point
#PARENT: Gtk.GestureDrag.get_start_point
#COMMENT: %TRUE if the gesture is active
#NAME: get_reorderable
#PARENT: Gtk.IconView
#COMMENT: Retrieves whether the user can reorder the list via drag-and-drop.
See gtk_icon_view_set_reorderable().
#NAME: editable
#PARENT: Gtk.Editable.get_selection_bounds.gboolean
#COMMENT: a #GtkEditable
#NAME: settings
#PARENT: Gtk.PrintSettings.set_printer_lpi.none
#COMMENT: a #GtkPrintSettings
#NAME: set_upper_stepper_sensitivity
#PARENT: Gtk.Range
#COMMENT: Sets the sensitivity policy for the stepper that points to the
'upper' end of the GtkRange’s adjustment.
#NAME: get_hadjustment
#PARENT: Gtk.ToolPalette.get_hadjustment
#COMMENT: the horizontal adjustment of @palette
#NAME: window
#PARENT: Gtk.Window.set_default_geometry.none
#COMMENT: a #GtkWindow
#NAME: set_resolution
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
%GTK_PRINT_SETTINGS_RESOLUTION_X and
%GTK_PRINT_SETTINGS_RESOLUTION_Y.
#NAME: minimum_size
#PARENT: Gtk.RequestedSize
#COMMENT: The minimum size needed for allocation in a given orientation
#NAME: new_merge_id
#PARENT: Gtk.UIManager
#COMMENT: Returns an unused merge id, suitable for use with
gtk_ui_manager_add_ui().
#NAME: FileChooserError
#PARENT: Gtk
#COMMENT: These identify the various errors that can occur while calling
#GtkFileChooser functions.
#NAME: set_use_stock
#PARENT: Gtk.Button
#COMMENT: If %TRUE, the label set on the button is used as a
stock id to select the stock item for the button.
#NAME: num_ranges
#PARENT: Gtk.PrintSettings.get_page_ranges.PageRange
#COMMENT: return location for the length of the returned array
#NAME: spin_button
#PARENT: Gtk.SpinButton.get_value.gdouble
#COMMENT: a #GtkSpinButton
#NAME: style
#PARENT: Gtk.Toolbar.set_style.none
#COMMENT: the new style for @toolbar.
#NAME: binding_set
#PARENT: Gtk.binding_entry_add_signal_from_string.GLib.TokenType
#COMMENT: a #GtkBindingSet
#NAME: notebook
#PARENT: Gtk.Notebook.get_tab_detachable.gboolean
#COMMENT: a #GtkNotebook
#NAME: visible
#PARENT: Gtk.ActionGroup
#COMMENT: Whether the action group is visible.
#NAME: has_alpha
#PARENT: Gtk.GLArea.set_has_alpha.none
#COMMENT: %TRUE to add an alpha component
#NAME: width
#PARENT: Gtk.paint_extension.none
#COMMENT: width of the extension
#NAME: action
#PARENT: Gtk.PlacesSidebar.drag-perform-drop.none
#COMMENT: Drop action to perform.
#NAME: new
#PARENT: Gtk.TreeRowReference
#COMMENT: Creates a row reference based on @path.

This reference will keep pointing to the node pointed to
by @path, so long as it exists. Any changes that occur on @model are
propagated, and the path is updated appropriately. If
@path isn’t a valid path in @model, then %NULL is returned.
#NAME: detail
#PARENT: Gtk.Widget.render_icon.GdkPixbuf.Pixbuf
#COMMENT: render detail to pass to theme engine
#NAME: widget
#PARENT: Gtk.WidgetClass.keynav_failed.keynav_failed.gboolean
#COMMENT: a #GtkWidget
#NAME: set_urgency_hint
#PARENT: Gtk.Window
#COMMENT: Windows may set a hint asking the desktop environment to draw
the users attention to the window. This function sets this hint.
#NAME: set_has_stencil_buffer
#PARENT: Gtk.GLArea
#COMMENT: If @has_stencil_buffer is %TRUE the widget will allocate and
enable a stencil buffer for the target framebuffer. Otherwise
there will be none.
#NAME: editing-canceled
#PARENT: Gtk.CellRenderer
#COMMENT: This signal gets emitted when the user cancels the process of editing a
cell.  For example, an editable cell renderer could be written to cancel
editing when the user presses Escape.

See also: gtk_cell_renderer_stop_editing().
#NAME: uri
#PARENT: Gtk.RecentChooser.unselect_uri.none
#COMMENT: a URI
#NAME: info
#PARENT: Gtk.TargetList.add_rich_text_targets.none
#COMMENT: an ID that will be passed back to the application
#NAME: populate-popup
#PARENT: Gtk.TextView
#COMMENT: The ::populate-popup signal gets emitted before showing the
context menu of the text view.

If you need to add items to the context menu, connect
to this signal and append your items to the @popup, which
will be a #GtkMenu in this case.

If #GtkTextView:populate-all is %TRUE, this signal will
also be emitted to populate touch popups. In this case,
@popup will be a different container, e.g. a #GtkToolbar.

The signal handler should not make assumptions about the
type of @widget, but check whether @popup is a #GtkMenu
or #GtkToolbar or another kind of container.
#NAME: stock_id
#PARENT: Gtk.ToggleActionEntry
#COMMENT: The stock id for the action, or the name of an icon from the
 icon theme.
#NAME: get_inconsistent
#PARENT: Gtk.ToggleButton.get_inconsistent
#COMMENT: %TRUE if the button is displayed as inconsistent, %FALSE otherwise
#NAME: palette_to_string
#PARENT: Gtk.ColorSelection
#COMMENT: Encodes a palette as a string, useful for persistent storage.
#NAME: fontsel
#PARENT: Gtk.FontSelection.get_preview_text.utf8
#COMMENT: a #GtkFontSelection
#NAME: region_intersect
#PARENT: Gtk.Widget.region_intersect
#COMMENT: A newly allocated region holding the intersection of @widget
    and @region.
#NAME: window
#PARENT: Gtk.Window.get_role.utf8
#COMMENT: a #GtkWindow
#NAME: get_menu_by_id
#PARENT: Gtk.Application.get_menu_by_id
#COMMENT: Gets the menu with the
    given id from the automatically loaded resources
#NAME: get_preedit_string
#PARENT: Gtk.IMContext
#COMMENT: Retrieve the current preedit string for the input context,
and a list of attributes to apply to the string.
This string should be displayed inserted at the insertion
point.
#NAME: get_length
#PARENT: Gtk.EntryBuffer.get_length
#COMMENT: The number of characters in the buffer.
#NAME: load_icon
#PARENT: Gtk.IconTheme.load_icon
#COMMENT: the rendered icon; this may be
    a newly created icon or a new reference to an internal icon, so
    you must not modify the icon. Use g_object_unref() to release
    your reference to the icon. %NULL if the icon isn’t found.
#NAME: settings
#PARENT: Gtk.PrintSettings.get_orientation.PageOrientation
#COMMENT: a #GtkPrintSettings
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_sort_type.RecentSortType
#COMMENT: a #GtkRecentChooser
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_from_stock.none
#COMMENT: a #GtkStatusIcon
#NAME: widget
#PARENT: Gtk.Widget.grab_add.none
#COMMENT: The widget that grabs keyboard and pointer events
#NAME: get_application
#PARENT: Gtk.Window.get_application
#COMMENT: a #GtkApplication, or %NULL
#NAME: entries
#PARENT: Gtk.ActionGroup.add_actions_full.none
#COMMENT: an array of action descriptions
#NAME: set_pointing_to
#PARENT: Gtk.Popover
#COMMENT: Sets the rectangle that @popover will point to, in the
coordinate space of the widget @popover is attached to,
see gtk_popover_set_relative_to().
#NAME: queue_resize
#PARENT: Gtk.Widget
#COMMENT: This function is only for use in widget implementations.
Flags a widget to have its size renegotiated; should
be called when a widget for some reason has a new size request.
For example, when you change the text in a #GtkLabel, #GtkLabel
queues a resize to ensure there’s enough space for the new text.

Note that you cannot call gtk_widget_queue_resize() on a widget
from inside its implementation of the GtkWidgetClass::size_allocate
virtual method. Calls to gtk_widget_queue_resize() from inside
GtkWidgetClass::size_allocate will be silently ignored.
#NAME: get_label_align
#PARENT: Gtk.Frame
#COMMENT: Retrieves the X and Y alignment of the frame’s label. See
gtk_frame_set_label_align().
#NAME: menu_item
#PARENT: Gtk.MenuShell.activate_item.none
#COMMENT: the #GtkMenuItem to activate
#NAME: backward_line
#PARENT: Gtk.TextIter
#COMMENT: Moves @iter to the start of the previous line. Returns %TRUE if
@iter could be moved; i.e. if @iter was at character offset 0, this
function returns %FALSE. Therefore if @iter was already on line 0,
but not at the start of the line, @iter is snapped to the start of
the line and the function returns %TRUE. (Note that this implies that
in a loop calling this function, the line number may not change on
every iteration, if your first iteration is on line 0.)
#NAME: target
#PARENT: Gtk.Window.add_mnemonic.none
#COMMENT: the widget that gets activated by the mnemonic
#NAME: icon_size_lookup_for_settings
#PARENT: Gtk
#COMMENT: Obtains the pixel size of a semantic icon size, possibly
modified by user preferences for a particular
#GtkSettings. Normally @size would be
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
isn’t normally needed, gtk_widget_render_icon_pixbuf() is the usual
way to get an icon for rendering, then just look at the size of
the rendered pixbuf. The rendered pixbuf may not even correspond to
the width/height returned by gtk_icon_size_lookup(), because themes
are free to render the pixbuf however they like, including changing
the usual size.
#NAME: set_padding
#PARENT: Gtk.CellRenderer
#COMMENT: Sets the renderer’s padding.
#NAME: syntax
#PARENT: Gtk.CssProviderError
#COMMENT: Syntax error.
#NAME: set_ellipsize
#PARENT: Gtk.ProgressBar
#COMMENT: Sets the mode used to ellipsize (add an ellipsis: "...") the text
if there is not enough space to render the entire string.
#NAME: get_mime_type
#PARENT: Gtk.RecentInfo.get_mime_type
#COMMENT: the MIME type of the resource. The returned string
  is owned by the recent manager, and should not be freed.
#NAME: widget
#PARENT: Gtk.paint_extension.none
#COMMENT: the widget
#NAME: button
#PARENT: Gtk.Button.set_alignment.none
#COMMENT: a #GtkButton
#NAME: popup_with_accels
#PARENT: Gtk.UIManagerItemType
#COMMENT: Same as %GTK_UI_MANAGER_POPUP, but the
  actions’ accelerators are shown.
#NAME: fontchooser
#PARENT: Gtk.FontChooser.get_show_preview_entry.gboolean
#COMMENT: a #GtkFontChooser
#NAME: step_forward
#PARENT: Gtk.SpinType
#COMMENT: Increment by the adjustments step increment.
#NAME: get_tooltip_context
#PARENT: Gtk.TreeView
#COMMENT: This function is supposed to be used in a #GtkWidget::query-tooltip
signal handler for #GtkTreeView.  The @x, @y and @keyboard_tip values
which are received in the signal handler, should be passed to this
function without modification.

The return value indicates whether there is a tree view row at the given
coordinates (%TRUE) or not (%FALSE) for mouse tooltips.  For keyboard
tooltips the row returned will be the cursor row.  When %TRUE, then any of
@model, @path and @iter which have been provided will be set to point to
that row and the corresponding model.  @x and @y will always be converted
to be relative to @tree_view’s bin_window if @keyboard_tooltip is %FALSE.
#NAME: add_mnemonic_label
#PARENT: Gtk.Widget
#COMMENT: Adds a widget to the list of mnemonic labels for
this widget. (See gtk_widget_list_mnemonic_labels()). Note the
list of mnemonic labels for the widget is cleared when the
widget is destroyed, so the caller must make sure to update
its internal state at this point as well, by using a connection
to the #GtkWidget::destroy signal or a weak notifier.
#NAME: chooser
#PARENT: Gtk.ColorChooserInterface.get_rgba.get_rgba.none
#COMMENT: a #GtkColorChooser
#NAME: label
#PARENT: Gtk.Label.set_use_underline.none
#COMMENT: a #GtkLabel
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_paste_target_list.TargetList
#COMMENT: a #GtkTextBuffer
#NAME: widget
#PARENT: Gtk.Widget.has_grab.gboolean
#COMMENT: a #GtkWidget
#NAME: editable
#PARENT: Gtk.Editable.set_selection_bounds.none
#COMMENT: a #GtkEditable
#NAME: natural_size
#PARENT: Gtk.CellRendererClass.get_preferred_width.get_preferred_width.none
#COMMENT: location to store the natural size, or %NULL
#NAME: n_columns
#PARENT: Gtk.ListStore.newv.ListStore
#COMMENT: number of columns in the list store
#NAME: RecentManager
#PARENT: Gtk
#COMMENT: #GtkRecentManager provides a facility for adding, removing and
looking up recently used files. Each recently used file is
identified by its URI, and has meta-data associated to it, like
the names and command lines of the applications that have
registered it, the number of time each application has registered
the same file, the mime type of the file and whether the file
should be displayed only by the applications that have
registered it.

The recently used files list is per user.

The #GtkRecentManager acts like a database of all the recently
used files. You can create new #GtkRecentManager objects, but
it is more efficient to use the default manager created by GTK+.

Adding a new recently used file is as simple as:

|[<!-- language="C" -->
GtkRecentManager *manager;

manager = gtk_recent_manager_get_default ();
gtk_recent_manager_add_item (manager, file_uri);
]|

The #GtkRecentManager will try to gather all the needed information
from the file itself through GIO.

Looking up the meta-data associated with a recently used file
given its URI requires calling gtk_recent_manager_lookup_item():

|[<!-- language="C" -->
GtkRecentManager *manager;
GtkRecentInfo *info;
GError *error = NULL;

manager = gtk_recent_manager_get_default ();
info = gtk_recent_manager_lookup_item (manager, file_uri, &error);
if (error)
  {
    g_warning ("Could not find the file: %s", error->message);
    g_error_free (error);
  }
else
 {
   // Use the info object
   gtk_recent_info_unref (info);
 }
]|

In order to retrieve the list of recently used files, you can use
gtk_recent_manager_get_items(), which returns a list of #GtkRecentInfo-structs.

A #GtkRecentManager is the model used to populate the contents of
one, or more #GtkRecentChooser implementations.

Note that the maximum age of the recently used files list is
controllable through the #GtkSettings:gtk-recent-files-max-age
property.

Recently used files are supported since GTK+ 2.10.
#NAME: visible_vertical
#PARENT: Gtk.Action.set_visible_vertical.none
#COMMENT: whether the action is visible vertically
#NAME: cell_view
#PARENT: Gtk.CellView.set_model.none
#COMMENT: a #GtkCellView
#NAME: get_logo
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the pixbuf displayed as logo in the about dialog.
#NAME: get_page_complete
#PARENT: Gtk.Assistant
#COMMENT: Gets whether @page is complete.
#NAME: label
#PARENT: Gtk.RadioActionEntry
#COMMENT: The label for the action. This field should typically be marked
 for translation, see gtk_action_group_set_translation_domain().
#NAME: engine
#PARENT: Gtk.ThemingEngine.state_is_running.gboolean
#COMMENT: a #GtkThemingEngine
#NAME: widget
#PARENT: Gtk.WidgetClass.unmap.unmap.none
#COMMENT: a #GtkWidget
#NAME: get_proxies
#PARENT: Gtk.Action
#COMMENT: Returns the proxy widgets for an action.
See also gtk_activatable_get_related_action().
#NAME: get_buffer
#PARENT: Gtk.Entry.get_buffer
#COMMENT: A #GtkEntryBuffer object.
#NAME: select_multiple
#PARENT: Gtk.RecentChooser.set_select_multiple.none
#COMMENT: %TRUE if @chooser can select more than one item
#NAME: use_underline
#PARENT: Gtk.Button.set_use_underline.none
#COMMENT: %TRUE if underlines in the text indicate mnemonics
#NAME: misc
#PARENT: Gtk.Misc.get_padding.none
#COMMENT: a #GtkMisc
#NAME: accept-position
#PARENT: Gtk.Paned
#COMMENT: The ::accept-position signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to accept the current position of the handle when
moving it using key bindings.

The default binding for this signal is Return or Space.
#NAME: page_set
#PARENT: Gtk.PrintSettings.set_page_set.none
#COMMENT: a #GtkPageSet value
#NAME: set_enable_tree_lines
#PARENT: Gtk.TreeView
#COMMENT: Sets whether to draw lines interconnecting the expanders in @tree_view.
This does not have any visible effects for lists.
#NAME: set_can_default
#PARENT: Gtk.Widget
#COMMENT: Specifies whether @widget can be a default widget. See
gtk_widget_grab_default() for details about the meaning of
“default”.
#NAME: get_local_only
#PARENT: Gtk.FileChooser.get_local_only
#COMMENT: %TRUE if only local files can be selected.
#NAME: gesture
#PARENT: Gtk.Gesture.get_window.Gdk.Window
#COMMENT: a #GtkGesture
#NAME: new
#PARENT: Gtk.ProgressBar
#COMMENT: Creates a new #GtkProgressBar.
#NAME: accelerator
#PARENT: Gtk.ActionGroup.add_action_with_accel.none
#COMMENT: the accelerator for the action, in
  the format understood by gtk_accelerator_parse(), or "" for no accelerator, or
  %NULL to use the stock accelerator
#NAME: image_menu_item
#PARENT: Gtk.ImageMenuItem.set_image.none
#COMMENT: a #GtkImageMenuItem.
#NAME: shell
#PARENT: Gtk.ToolShell.get_relief_style.ReliefStyle
#COMMENT: a #GtkToolShell
#NAME: container
#PARENT: Gtk.ContainerCellAccessible.get_children.CellAccessible
#COMMENT: the container
#NAME: fill-level
#PARENT: Gtk.Range
#COMMENT: The fill level (e.g. prebuffering of a network stream).
See gtk_range_set_fill_level().
#NAME: filter
#PARENT: Gtk.FileFilter.get_name.utf8
#COMMENT: a #GtkFileFilter
#NAME: get_action_area
#PARENT: Gtk.InfoBar
#COMMENT: Returns the action area of @info_bar.
#NAME: cut-clipboard
#PARENT: Gtk.TextView
#COMMENT: The ::cut-clipboard signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to cut the selection to the clipboard.

The default bindings for this signal are
Ctrl-x and Shift-Delete.
#NAME: popup
#PARENT: Gtk.WindowType
#COMMENT: A special window such as a tooltip.
#NAME: location-popup-on-paste
#PARENT: Gtk.FileChooserWidget
#COMMENT: The ::location-popup-on-paste signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

This is used to make the file chooser show a "Location"
prompt when the user pastes into a #GtkFileChooserWidget.

The default binding for this signal is `Control + V`.
#NAME: child
#PARENT: Gtk.Buildable.custom_tag_start.gboolean
#COMMENT: child object or %NULL for non-child tags
#NAME: insert-text
#PARENT: Gtk.TextBuffer
#COMMENT: The ::insert-text signal is emitted to insert text in a #GtkTextBuffer.
Insertion actually occurs in the default handler.

Note that if your handler runs before the default handler it must not
invalidate the @location iter (or has to revalidate it).
The default signal handler revalidates it to point to the end of the
inserted text.

See also:
gtk_text_buffer_insert(),
gtk_text_buffer_insert_range().
#NAME: sortable
#PARENT: Gtk.TreeSortableIface.set_default_sort_func.set_default_sort_func.none
#COMMENT: A #GtkTreeSortable
#NAME: widget
#PARENT: Gtk.Widget.reparent.none
#COMMENT: a #GtkWidget
#NAME: uri
#PARENT: Gtk.AboutDialog.activate-link.gboolean
#COMMENT: the URI that is activated
#NAME: new
#PARENT: Gtk.FontSelection.new
#COMMENT: a new #GtkFontSelection
#NAME: tooltip
#PARENT: Gtk.IconView.set_tooltip_cell.none
#COMMENT: a #GtkTooltip
#NAME: box
#PARENT: Gtk.ListBoxForeachFunc.none
#COMMENT: a #GtkListBox
#NAME: get_widget
#PARENT: Gtk.TreeViewColumn.get_widget
#COMMENT: The #GtkWidget in the column
    header, or %NULL
#NAME: get_minimum_key_length
#PARENT: Gtk.EntryCompletion
#COMMENT: Returns the minimum key length as set for @completion.
#NAME: colors
#PARENT: Gtk.ColorChooser.add_palette.none
#COMMENT: the colors of the palette, or %NULL
#NAME: chooser
#PARENT: Gtk.RecentChooserIface.list_filters.list_filters.RecentFilter
#COMMENT: a #GtkRecentChooser
#NAME: new
#PARENT: Gtk.SpinButton
#COMMENT: Creates a new #GtkSpinButton.
#NAME: strikethrough-rgba
#PARENT: Gtk.TextTag
#COMMENT: This property modifies the color of strikeouts. If not set, strikeouts
will use the forground color.
#NAME: left
#PARENT: Gtk.TextWindowType
#COMMENT: Left side border window.
#NAME: group
#PARENT: Gtk.ToolItemGroup.set_collapsed.none
#COMMENT: a #GtkToolItemGroup
#NAME: tree_view
#PARENT: Gtk.TreeView.get_vadjustment.Adjustment
#COMMENT: A #GtkTreeView
#NAME: new_from_ppd
#PARENT: Gtk.PaperSize.new_from_ppd
#COMMENT: a new #GtkPaperSize, use gtk_paper_size_free()
to free it
#NAME: get_ellipsize
#PARENT: Gtk.ProgressBar.get_ellipsize
#COMMENT: #PangoEllipsizeMode
#NAME: buffer
#PARENT: Gtk.TextBuffer.insert_markup.none
#COMMENT: a #GtkTextBuffer
#NAME: setting
#PARENT: Gtk.Window.set_keep_above.none
#COMMENT: whether to keep @window above other windows
#NAME: new
#PARENT: Gtk.GesturePan
#COMMENT: Returns a newly created #GtkGesture that recognizes pan gestures.
#NAME: palette_from_string
#PARENT: Gtk.ColorSelection
#COMMENT: Parses a color palette string; the string is a colon-separated
list of color names readable by gdk_color_parse().
#NAME: margin
#PARENT: Gtk.StyleContext.get_margin.none
#COMMENT: return value for the margin settings
#NAME: cell
#PARENT: Gtk.CellLayoutDataFunc.none
#COMMENT: the cell renderer whose value is to be set
#NAME: get_bin_window
#PARENT: Gtk.Layout.get_bin_window
#COMMENT: a #GdkWindow
#NAME: STOCK_DND
#PARENT: Gtk
#COMMENT: The “Drag-And-Drop” icon.
#NAME: context
#PARENT: Gtk.StyleContext.add_region.none
#COMMENT: a #GtkStyleContext
#NAME: event
#PARENT: Gtk.Widget.visibility-notify-event.gboolean
#COMMENT: the #GdkEventVisibility which
  triggered this signal.
#NAME: get_tab_detachable
#PARENT: Gtk.Notebook.get_tab_detachable
#COMMENT: %TRUE if the tab is detachable.
#NAME: add_callback_symbols
#PARENT: Gtk.Builder
#COMMENT: A convenience function to add many callbacks instead of calling
gtk_builder_add_callback_symbol() for each symbol.
#NAME: get_n_copies
#PARENT: Gtk.PrintSettings.get_n_copies
#COMMENT: the number of copies to print
#NAME: window
#PARENT: Gtk.Window.get_resizable.gboolean
#COMMENT: a #GtkWindow
#NAME: menu
#PARENT: Gtk.Menu.get_reserve_toggle_size.gboolean
#COMMENT: a #GtkMenu
#NAME: STYLE_CLASS_SCALE_HAS_MARKS_BELOW
#PARENT: Gtk
#COMMENT: A CSS class to match scale widgets with marks attached,
all the marks are below for horizontal #GtkScale,
right for vertical #GtkScale.
#NAME: widget
#PARENT: Gtk.Widget.get_root_window.Gdk.Window
#COMMENT: a #GtkWidget
#NAME: action_group
#PARENT: Gtk.ActionGroup.set_visible.none
#COMMENT: the action group
#NAME: check
#PARENT: Gtk.ButtonRole
#COMMENT: A check button
#NAME: callback_data
#PARENT: Gtk.CellArea.foreach_alloc.none
#COMMENT: user provided data pointer
#NAME: id-column
#PARENT: Gtk.ComboBox
#COMMENT: The column in the combo box's model that provides string
IDs for the values in the model, if != -1.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_enable_tree_lines.gboolean
#COMMENT: a #GtkTreeView.
#NAME: reset_default_sort_func
#PARENT: Gtk.TreeModelSort
#COMMENT: This resets the default sort function to be in the “unsorted” state.  That
is, it is in the same order as the child model. It will re-sort the model
to be in the same order as the child model only if the #GtkTreeModelSort
is in “unsorted” state.
#NAME: get_use_underline
#PARENT: Gtk.Expander
#COMMENT: Returns whether an embedded underline in the expander label
indicates a mnemonic. See gtk_expander_set_use_underline().
#NAME: get_content_area
#PARENT: Gtk.Dialog
#COMMENT: Returns the content area of @dialog.
#NAME: get_use_underline
#PARENT: Gtk.Button.get_use_underline
#COMMENT: %TRUE if an embedded underline in the button label
              indicates the mnemonic accelerator keys.
#NAME: get_parent
#PARENT: Gtk.Widget
#COMMENT: Returns the parent container of @widget.
#NAME: get_icon_factory
#PARENT: Gtk.StyleProvider
#COMMENT: Returns the #GtkIconFactory defined to be in use for @path, or %NULL if none
is defined.
#NAME: lookup_entry
#PARENT: Gtk.AccelMap.lookup_entry
#COMMENT: %TRUE if @accel_path is known, %FALSE otherwise
#NAME: frame
#PARENT: Gtk.Frame.get_shadow_type.ShadowType
#COMMENT: a #GtkFrame
#NAME: window_x
#PARENT: Gtk.TextView.buffer_to_window_coords.none
#COMMENT: window x coordinate return location or %NULL
#NAME: window_y
#PARENT: Gtk.TextView.buffer_to_window_coords.none
#COMMENT: window y coordinate return location or %NULL
#NAME: render_icon_surface
#PARENT: Gtk.IconSet.render_icon_surface
#COMMENT: a #cairo_surface_t to be displayed
#NAME: ReliefStyle
#PARENT: Gtk
#COMMENT: Indicated the relief to be drawn around a #GtkButton.
#NAME: has_region
#PARENT: Gtk.StyleContext.has_region
#COMMENT: %TRUE if region is defined
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_line_count.gint
#COMMENT: a #GtkTextBuffer
#NAME: get_x_offset
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns the current X offset of @tree_column in pixels.
#NAME: new
#PARENT: Gtk.CellRendererText
#COMMENT: Creates a new #GtkCellRendererText. Adjust how text is drawn using
object properties. Object properties can be
set globally (with g_object_set()). Also, with #GtkTreeViewColumn,
you can bind a property to a value in a #GtkTreeModel. For example,
you can bind the “text” property on the cell renderer to a string
value in the model, thus rendering a different string in each row
of the #GtkTreeView
#NAME: add_source
#PARENT: Gtk.IconSet
#COMMENT: Icon sets have a list of #GtkIconSource, which they use as base
icons for rendering icons in different states and sizes. Icons are
scaled, made to look insensitive, etc. in
gtk_icon_set_render_icon(), but #GtkIconSet needs base images to
work with. The base images and when to use them are described by
a #GtkIconSource.

This function copies @source, so you can reuse the same source immediately
without affecting the icon set.

An example of when you’d use this function: a web browser’s "Back
to Previous Page" icon might point in a different direction in
Hebrew and in English; it might look different when insensitive;
and it might change size depending on toolbar mode (small/large
icons). So a single icon set would contain all those variants of
the icon, and you might add a separate source for each one.

You should nearly always add a “default” icon source with all
fields wildcarded, which will be used as a fallback if no more
specific source matches. #GtkIconSet always prefers more specific
icon sources to more generic icon sources. The order in which you
add the sources to the icon set does not matter.

gtk_icon_set_new_from_pixbuf() creates a new icon set with a
default icon source based on the given pixbuf.
#NAME: get_current_icon_drag_source
#PARENT: Gtk.Entry.get_current_icon_drag_source
#COMMENT: index of the icon which is the source of the current
         DND operation, or -1.
#NAME: get_titlebar
#PARENT: Gtk.Window.get_titlebar
#COMMENT: the custom titlebar, or %NULL
#NAME: minimum_size
#PARENT: Gtk.CellRendererClass.get_preferred_height.get_preferred_height.none
#COMMENT: location to store the minimum size, or %NULL
#NAME: length
#PARENT: Gtk.RecentChooser.get_uris.utf8
#COMMENT: return location for a the length of the
    URI list, or %NULL
#NAME: pspec
#PARENT: Gtk.rc_property_parse_requisition.gboolean
#COMMENT: a #GParamSpec
#NAME: get_position
#PARENT: Gtk.Editable.get_position
#COMMENT: the cursor position
#NAME: set_activatable
#PARENT: Gtk.ListBoxRow
#COMMENT: Set the #GtkListBoxRow:activatable property for this row.
#NAME: set_use_popover
#PARENT: Gtk.MenuButton
#COMMENT: Sets whether to construct a #GtkPopover instead of #GtkMenu
when gtk_menu_button_set_menu_model() is called. Note that
this property is only consulted when a new menu model is set.
#NAME: page_nr
#PARENT: Gtk.PrintOperation.draw-page.none
#COMMENT: the number of the currently printed page (0-based)
#NAME: row
#PARENT: Gtk.Table.set_row_spacing.none
#COMMENT: row number whose spacing will be changed.
#NAME: pixbuf
#PARENT: Gtk.Image.new_from_pixbuf.Widget
#COMMENT: a #GdkPixbuf, or %NULL
#NAME: list_classes
#PARENT: Gtk.StyleContext
#COMMENT: Returns the list of classes currently defined in @context.
#NAME: is_focus
#PARENT: Gtk.Widget
#COMMENT: Determines if the widget is the focus widget within its
toplevel. (This does not mean that the #GtkWidget:has-focus property is
necessarily set; #GtkWidget:has-focus will only be set if the
toplevel widget additionally has the global input focus.)
#NAME: renderer
#PARENT: Gtk.CellArea.get_focus_siblings.CellRenderer
#COMMENT: the #GtkCellRenderer expected to have focus
#NAME: color_flags
#PARENT: Gtk.RcStyle
#COMMENT: #GtkRcFlags
#NAME: button
#PARENT: Gtk.ToolButton.set_label_widget.none
#COMMENT: a #GtkToolButton
#NAME: context
#PARENT: Gtk.PrintOperationPreview.got-page-size.none
#COMMENT: the current #GtkPrintContext
#NAME: set_quality
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_QUALITY.
#NAME: focus-in-event
#PARENT: Gtk.Widget.focus-in-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: new
#PARENT: Gtk.Plug
#COMMENT: Creates a new plug widget inside the #GtkSocket identified
by @socket_id. If @socket_id is 0, the plug is left “unplugged” and
can later be plugged into a #GtkSocket by  gtk_socket_add_id().
#NAME: under_down
#PARENT: Gtk.StackTransitionType
#COMMENT: Uncover the new page by sliding down. Since: 3.12
#NAME: rc_get_im_module_file
#PARENT: Gtk
#COMMENT: Obtains the path to the IM modules file. See the documentation
of the `GTK_IM_MODULE_FILE`
environment variable for more details.
#NAME: width
#PARENT: Gtk.CellRenderer.get_size.none
#COMMENT: location to return width needed to render a cell, or %NULL
#NAME: page_size
#PARENT: Gtk.Adjustment.configure.none
#COMMENT: the new page size
#NAME: push_in
#PARENT: Gtk.StatusIcon.position_menu.none
#COMMENT: whether the first menu item should be offset
          (pushed in) to be aligned with the menu popup position
          (only useful for GtkOptionMenu).
#NAME: get_selection_bounds
#PARENT: Gtk.Label
#COMMENT: Gets the selected range of characters in the label, returning %TRUE
if there’s a selection.
#NAME: get_has_tooltip
#PARENT: Gtk.StatusIcon
#COMMENT: Returns the current value of the has-tooltip property.
See #GtkStatusIcon:has-tooltip for more information.
#NAME: get_chars
#PARENT: Gtk.Editable
#COMMENT: Retrieves a sequence of characters. The characters that are retrieved
are those characters at positions from @start_pos up to, but not
including @end_pos. If @end_pos is negative, then the characters
retrieved are those characters from @start_pos to the end of the text.

Note that positions are specified in characters, not bytes.
#NAME: child
#PARENT: Gtk.BuildableIface.add_child.add_child.none
#COMMENT: child to add
#NAME: BindingArg
#PARENT: Gtk
#COMMENT: A #GtkBindingArg holds the data associated with
an argument for a key binding signal emission as
stored in #GtkBindingSignal.
#NAME: op
#PARENT: Gtk.PrintOperation.draw_page_finish.none
#COMMENT: a #GtkPrintOperation
#NAME: new
#PARENT: Gtk.ToolPalette.new
#COMMENT: a new #GtkToolPalette
#NAME: shadow_type
#PARENT: Gtk.paint_diamond.none
#COMMENT: the type of shadow to draw
#NAME: get_clip
#PARENT: Gtk.Widget
#COMMENT: Retrieves the widget’s clip area.

The clip area is the area in which all of @widget's drawing will
happen. Other toolkits call it the bounding box.

Historically, in GTK+ the clip area has been equal to the allocation
retrieved via gtk_widget_get_allocation().
#NAME: widget
#PARENT: Gtk.Widget.modify_cursor.none
#COMMENT: a #GtkWidget
#NAME: MenuButton
#PARENT: Gtk
#COMMENT: The #GtkMenuButton widget is used to display a popup when clicked on.
This popup can be provided either as a #GtkMenu, a #GtkPopover or an
abstract #GMenuModel.

The #GtkMenuButton widget can hold any valid child widget. That is, it
can hold almost any other standard #GtkWidget. The most commonly used
child is #GtkImage. If no widget is explicitely added to the #GtkMenuButton,
a #GtkImage is automatically created, using an arrow image oriented
according to #GtkMenuButton:direction or the generic "view-context-menu"
icon if the direction is not set.

The positioning of the popup is determined by the #GtkMenuButton:direction
property of the menu button.

For menus, the #GtkWidget:halign and #GtkWidget:valign properties of the
menu are also taken into account. For example, when the direction is
%GTK_ARROW_DOWN and the horizontal alignment is %GTK_ALIGN_START, the
menu will be positioned below the button, with the starting edge
(depending on the text direction) of the menu aligned with the starting
edge of the button. If there is not enough space below the button, the
menu is popped up above the button instead. If the alignment would move
part of the menu offscreen, it is “pushed in”.

## Direction = Down

- halign = start

    ![](down-start.png)

- halign = center

    ![](down-center.png)

- halign = end

    ![](down-end.png)

## Direction = Up

- halign = start

    ![](up-start.png)

- halign = center

    ![](up-center.png)

- halign = end

    ![](up-end.png)

## Direction = Left

- valign = start

    ![](left-start.png)

- valign = center

    ![](left-center.png)

- valign = end

    ![](left-end.png)

## Direction = Right

- valign = start

    ![](right-start.png)

- valign = center

    ![](right-center.png)

- valign = end

    ![](right-end.png)
#NAME: get_value
#PARENT: Gtk.SpinButton.get_value
#COMMENT: the value of @spin_button
#NAME: get_chars_in_line
#PARENT: Gtk.TextIter
#COMMENT: Returns the number of characters in the line containing @iter,
including the paragraph delimiters.
#NAME: modifiers
#PARENT: Gtk.binding_entry_add_signall.none
#COMMENT: key modifier
#NAME: list_store
#PARENT: Gtk.ListStore.insert_after.none
#COMMENT: A #GtkListStore
#NAME: chooser
#PARENT: Gtk.FileChooser.add_shortcut_folder.gboolean
#COMMENT: a #GtkFileChooser
#NAME: op
#PARENT: Gtk.PrintOperation.cancel.none
#COMMENT: a #GtkPrintOperation
#NAME: immediate
#PARENT: Gtk.ResizeMode
#COMMENT: Resize immediately. Deprecated.
#NAME: name
#PARENT: Gtk.TextBuffer.apply_tag_by_name.none
#COMMENT: name of a named #GtkTextTag
#NAME: indent
#PARENT: Gtk.TextAttributes
#COMMENT: Amount to indent the paragraph, in pixels.
#NAME: get_files
#PARENT: Gtk.FileChooser.get_files
#COMMENT: a #GSList
  containing a #GFile for each selected file and subfolder in the
  current folder.  Free the returned list with g_slist_free(), and
  the files with g_object_unref().
#NAME: simplex
#PARENT: Gtk.PrintDuplex
#COMMENT: No duplex.
#NAME: get_parent_window
#PARENT: Gtk.Widget
#COMMENT: Gets @widget’s parent window.
#NAME: events
#PARENT: Gtk.Widget.set_device_events.none
#COMMENT: event mask
#NAME: Window
#PARENT: Gtk
#COMMENT: A GtkWindow is a toplevel window which can contain other widgets.
Windows normally have decorations that are under the control
of the windowing system and allow the user to manipulate the window
(resize it, move it, close it,...).

# GtkWindow as GtkBuildable

The GtkWindow implementation of the GtkBuildable interface supports a
custom <accel-groups> element, which supports any number of <group>
elements representing the #GtkAccelGroup objects you want to add to
your window (synonymous with gtk_window_add_accel_group().

It also supports the <initial-focus> element, whose name property names
the widget to receive the focus when the window is mapped.

An example of a UI definition fragment with accel groups:
|[
<object class="GtkWindow">
  <accel-groups>
    <group name="accelgroup1"/>
  </accel-groups>
  <initial-focus name="thunderclap"/>
</object>

...

<object class="GtkAccelGroup" id="accelgroup1"/>
]|

The GtkWindow implementation of the GtkBuildable interface supports
setting a child as the titlebar by specifying “titlebar” as the “type”
attribute of a <child> element.
#NAME: get_hide_titlebar_when_maximized
#PARENT: Gtk.Window
#COMMENT: Returns whether the window has requested to have its titlebar hidden
when maximized. See gtk_window_set_hide_titlebar_when_maximized ().
#NAME: handle_box
#PARENT: Gtk.HandleBox.set_shadow_type.none
#COMMENT: a #GtkHandleBox
#NAME: engine
#PARENT: Gtk.ThemingEngine.lookup_color.gboolean
#COMMENT: a #GtkThemingEngine
#NAME: uri
#PARENT: Gtk.LinkButton.new.Widget
#COMMENT: a valid URI
#NAME: clicked
#PARENT: Gtk.ToolButton
#COMMENT: This signal is emitted when the tool button is clicked with the mouse
or activated with the keyboard.
#NAME: new_from_gicon
#PARENT: Gtk.StatusIcon
#COMMENT: Creates a status icon displaying a #GIcon. If the icon is a
themed icon, it will be updated when the theme changes.
#NAME: application
#PARENT: Gtk.Application.is_inhibited.gboolean
#COMMENT: the #GtkApplication
#NAME: x
#PARENT: Gtk.IconView.get_item_at_pos.gboolean
#COMMENT: The x position to be identified
#NAME: icons
#PARENT: Gtk.ScaleButton.new.Widget
#COMMENT: a %NULL-terminated
        array of icon names, or %NULL if you want to set the list
        later with gtk_scale_button_set_icons()
#NAME: y
#PARENT: Gtk.IconView.get_item_at_pos.gboolean
#COMMENT: The y position to be identified
#NAME: new
#PARENT: Gtk.Invisible
#COMMENT: Creates a new #GtkInvisible.
#NAME: popup_for_device
#PARENT: Gtk.Menu
#COMMENT: Displays a menu and makes it available for selection.

Applications can use this function to display context-sensitive menus,
and will typically supply %NULL for the @parent_menu_shell,
@parent_menu_item, @func, @data and @destroy parameters. The default
menu positioning function will position the menu at the current position
of @device (or its corresponding pointer).

The @button parameter should be the mouse button pressed to initiate
the menu popup. If the menu popup was initiated by something other than
a mouse button press, such as a mouse button release or a keypress,
@button should be 0.

The @activate_time parameter is used to conflict-resolve initiation of
concurrent requests for mouse/keyboard grab requests. To function
properly, this needs to be the time stamp of the user event (such as
a mouse click or key press) that caused the initiation of the popup.
Only if no such event is available, gtk_get_current_event_time() can
be used instead.
#NAME: expand_row
#PARENT: Gtk.TreeView.expand_row
#COMMENT: %TRUE if the row existed and had children
#NAME: action_bar
#PARENT: Gtk.ActionBar.set_center_widget.none
#COMMENT: a #GtkActionBar
#NAME: action
#PARENT: Gtk.Action.set_always_show_image.none
#COMMENT: a #GtkAction
#NAME: iter
#PARENT: Gtk.TextIter.backward_visible_lines.gboolean
#COMMENT: a #GtkTextIter
#NAME: background_area
#PARENT: Gtk.CellArea.render.none
#COMMENT: the @widget relative coordinates for @area’s background
#NAME: first_button_text
#PARENT: Gtk.Dialog.add_buttons.none
#COMMENT: button text
#NAME: insert_page_menu
#PARENT: Gtk.Notebook
#COMMENT: Insert a page into @notebook at the given position, specifying
the widget to use as the label in the popup menu.
#NAME: name
#PARENT: Gtk.Widget.override_symbolic_color.none
#COMMENT: the name of the symbolic color to modify
#NAME: get_decoration_layout
#PARENT: Gtk.HeaderBar
#COMMENT: Gets the decoration layout set with
gtk_header_bar_set_decoration_layout().
#NAME: manager
#PARENT: Gtk.RecentManager.purge_items.gint
#COMMENT: a #GtkRecentManager
#NAME: natural_width
#PARENT: Gtk.CellRendererClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: location for storing the preferred size, or %NULL
#NAME: move-cursor
#PARENT: Gtk.TreeView
#COMMENT: The #GtkTreeView::move-cursor signal is a [keybinding
signal][GtkBindingSignal] which gets emitted when the user
presses one of the cursor keys.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically. In contrast to gtk_tree_view_set_cursor() and
gtk_tree_view_set_cursor_on_cell() when moving horizontally
#GtkTreeView::move-cursor does not reset the current selection.
#NAME: get_label
#PARENT: Gtk.Expander
#COMMENT: Fetches the text from a label widget including any embedded
underlines indicating mnemonics and Pango markup, as set by
gtk_expander_set_label(). If the label text has not been set the
return value will be %NULL. This will be the case if you create an
empty button with gtk_button_new() to use as a container.

Note that this function behaved differently in versions prior to
2.14 and used to return the label text stripped of embedded
underlines indicating mnemonics and Pango markup. This problem can
be avoided by fetching the label text directly from the label
widget.
#NAME: byte_on_line
#PARENT: Gtk.TextIter.set_line_index.none
#COMMENT: a byte index relative to the start of @iter’s current line
#NAME: remove_accelerator
#PARENT: Gtk.Widget
#COMMENT: Removes an accelerator from @widget, previously installed with
gtk_widget_add_accelerator().
#NAME: colorsel
#PARENT: Gtk.ColorSelection.get_current_alpha.guint16
#COMMENT: a #GtkColorSelection
#NAME: PRIORITY_RESIZE
#PARENT: Gtk
#COMMENT: Use this priority for functionality related to size allocation.

It is used internally by GTK+ to compute the sizes of widgets.
This priority is higher than %GDK_PRIORITY_REDRAW to avoid
resizing a widget which was just redrawn.
#NAME: button
#PARENT: Gtk.ToolButton.get_icon_widget.Widget
#COMMENT: a #GtkToolButton
#NAME: position
#PARENT: Gtk.TreeView.insert_column_with_attributes.gint
#COMMENT: The position to insert the new column in
#NAME: snooper
#PARENT: Gtk.key_snooper_install.guint
#COMMENT: a #GtkKeySnoopFunc
#NAME: target
#PARENT: Gtk.IconSize.register_alias.none
#COMMENT: an existing icon size
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_items.RecentInfo
#COMMENT: a #GtkRecentChooser
#NAME: register_deserialize_tagset
#PARENT: Gtk.TextBuffer
#COMMENT: This function registers GTK+’s internal rich text serialization
format with the passed @buffer. See
gtk_text_buffer_register_serialize_tagset() for details.
#NAME: cell_set_valist
#PARENT: Gtk.CellArea
#COMMENT: Sets one or more cell properties for @renderer in @area.
#NAME: connect_data
#PARENT: Gtk.WidgetClass.set_connect_func.none
#COMMENT: The data to pass to @connect_func
#NAME: Activatable
#PARENT: Gtk
#COMMENT: Activatable widgets can be connected to a #GtkAction and reflects
the state of its action. A #GtkActivatable can also provide feedback
through its action, as they are responsible for activating their
related actions.

# Implementing GtkActivatable

When extending a class that is already #GtkActivatable; it is only
necessary to implement the #GtkActivatable->sync_action_properties()
and #GtkActivatable->update() methods and chain up to the parent
implementation, however when introducing
a new #GtkActivatable class; the #GtkActivatable:related-action and
#GtkActivatable:use-action-appearance properties need to be handled by
the implementor. Handling these properties is mostly a matter of installing
the action pointer and boolean flag on your instance, and calling
gtk_activatable_do_set_related_action() and
gtk_activatable_sync_action_properties() at the appropriate times.

## A class fragment implementing #GtkActivatable

|[<!-- language="C" -->

enum {
...

PROP_ACTIVATABLE_RELATED_ACTION,
PROP_ACTIVATABLE_USE_ACTION_APPEARANCE
}

struct _FooBarPrivate
{

  ...

  GtkAction      *action;
  gboolean        use_action_appearance;
};

...

static void foo_bar_activatable_interface_init         (GtkActivatableIface  *iface);
static void foo_bar_activatable_update                 (GtkActivatable       *activatable,
						           GtkAction            *action,
						           const gchar          *property_name);
static void foo_bar_activatable_sync_action_properties (GtkActivatable       *activatable,
						           GtkAction            *action);
...


static void
foo_bar_class_init (FooBarClass *klass)
{

  ...

  g_object_class_override_property (gobject_class, PROP_ACTIVATABLE_RELATED_ACTION, "related-action");
  g_object_class_override_property (gobject_class, PROP_ACTIVATABLE_USE_ACTION_APPEARANCE, "use-action-appearance");

  ...
}


static void
foo_bar_activatable_interface_init (GtkActivatableIface  *iface)
{
  iface->update = foo_bar_activatable_update;
  iface->sync_action_properties = foo_bar_activatable_sync_action_properties;
}

... Break the reference using gtk_activatable_do_set_related_action()...

static void
foo_bar_dispose (GObject *object)
{
  FooBar *bar = FOO_BAR (object);
  FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);

  ...

  if (priv->action)
    {
      gtk_activatable_do_set_related_action (GTK_ACTIVATABLE (bar), NULL);
      priv->action = NULL;
    }
  G_OBJECT_CLASS (foo_bar_parent_class)->dispose (object);
}

... Handle the “related-action” and “use-action-appearance” properties ...

static void
foo_bar_set_property (GObject         *object,
                      guint            prop_id,
                      const GValue    *value,
                      GParamSpec      *pspec)
{
  FooBar *bar = FOO_BAR (object);
  FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);

  switch (prop_id)
    {

      ...

    case PROP_ACTIVATABLE_RELATED_ACTION:
      foo_bar_set_related_action (bar, g_value_get_object (value));
      break;
    case PROP_ACTIVATABLE_USE_ACTION_APPEARANCE:
      foo_bar_set_use_action_appearance (bar, g_value_get_boolean (value));
      break;
    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
      break;
    }
}

static void
foo_bar_get_property (GObject         *object,
                         guint            prop_id,
                         GValue          *value,
                         GParamSpec      *pspec)
{
  FooBar *bar = FOO_BAR (object);
  FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);

  switch (prop_id)
    {

      ...

    case PROP_ACTIVATABLE_RELATED_ACTION:
      g_value_set_object (value, priv->action);
      break;
    case PROP_ACTIVATABLE_USE_ACTION_APPEARANCE:
      g_value_set_boolean (value, priv->use_action_appearance);
      break;
    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
      break;
    }
}


static void
foo_bar_set_use_action_appearance (FooBar   *bar,
				   gboolean  use_appearance)
{
  FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);

  if (priv->use_action_appearance != use_appearance)
    {
      priv->use_action_appearance = use_appearance;
      
      gtk_activatable_sync_action_properties (GTK_ACTIVATABLE (bar), priv->action);
    }
}

... call gtk_activatable_do_set_related_action() and then assign the action pointer,
no need to reference the action here since gtk_activatable_do_set_related_action() already
holds a reference here for you...
static void
foo_bar_set_related_action (FooBar    *bar,
			    GtkAction *action)
{
  FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (bar);

  if (priv->action == action)
    return;

  gtk_activatable_do_set_related_action (GTK_ACTIVATABLE (bar), action);

  priv->action = action;
}

... Selectively reset and update activatable depending on the use-action-appearance property ...
static void
gtk_button_activatable_sync_action_properties (GtkActivatable       *activatable,
		                                  GtkAction            *action)
{
  GtkButtonPrivate *priv = GTK_BUTTON_GET_PRIVATE (activatable);

  if (!action)
    return;

  if (gtk_action_is_visible (action))
    gtk_widget_show (GTK_WIDGET (activatable));
  else
    gtk_widget_hide (GTK_WIDGET (activatable));
  
  gtk_widget_set_sensitive (GTK_WIDGET (activatable), gtk_action_is_sensitive (action));

  ...
  
  if (priv->use_action_appearance)
    {
      if (gtk_action_get_stock_id (action))
	foo_bar_set_stock (button, gtk_action_get_stock_id (action));
      else if (gtk_action_get_label (action))
	foo_bar_set_label (button, gtk_action_get_label (action));

      ...

    }
}

static void
foo_bar_activatable_update (GtkActivatable       *activatable,
			       GtkAction            *action,
			       const gchar          *property_name)
{
  FooBarPrivate *priv = FOO_BAR_GET_PRIVATE (activatable);

  if (strcmp (property_name, "visible") == 0)
    {
      if (gtk_action_is_visible (action))
	gtk_widget_show (GTK_WIDGET (activatable));
      else
	gtk_widget_hide (GTK_WIDGET (activatable));
    }
  else if (strcmp (property_name, "sensitive") == 0)
    gtk_widget_set_sensitive (GTK_WIDGET (activatable), gtk_action_is_sensitive (action));

  ...

  if (!priv->use_action_appearance)
    return;

  if (strcmp (property_name, "stock-id") == 0)
    foo_bar_set_stock (button, gtk_action_get_stock_id (action));
  else if (strcmp (property_name, "label") == 0)
    foo_bar_set_label (button, gtk_action_get_label (action));

  ...
}
]|
#NAME: in_range
#PARENT: Gtk.TextIter
#COMMENT: Checks whether @iter falls in the range [@start, @end).
@start and @end must be in ascending order.
#NAME: scroll_mark_onscreen
#PARENT: Gtk.TextView
#COMMENT: Scrolls @text_view the minimum distance such that @mark is contained
within the visible area of the widget.
#NAME: iter
#PARENT: Gtk.TreeView.test-collapse-row.gboolean
#COMMENT: the tree iter of the row to collapse
#NAME: row
#PARENT: Gtk.ListBoxRow.get_index.gint
#COMMENT: a #GtkListBoxRow
#NAME: foreach
#PARENT: Gtk.PrintSettings
#COMMENT: Calls @func for each key-value pair of @settings.
#NAME: get_local_only
#PARENT: Gtk.RecentChooser.get_local_only
#COMMENT: %TRUE if only local resources should be shown.
#NAME: alignment
#PARENT: Gtk.Alignment.set.none
#COMMENT: a #GtkAlignment.
#NAME: combo_box
#PARENT: Gtk.ComboBoxText.insert_text.none
#COMMENT: A #GtkComboBoxText
#NAME: filter
#PARENT: Gtk.RecentChooser.add_filter.none
#COMMENT: a #GtkRecentFilter
#NAME: get_left_margin
#PARENT: Gtk.TextView.get_left_margin
#COMMENT: left margin in pixels
#NAME: self
#PARENT: Gtk.AppChooserButton.set_active_custom_item.none
#COMMENT: a #GtkAppChooserButton
#NAME: lookup_icon
#PARENT: Gtk.IconTheme
#COMMENT: Looks up a named icon and returns a #GtkIconInfo containing
information such as the filename of the icon. The icon
can then be rendered into a pixbuf using
gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
combines these two steps if all you need is the pixbuf.)
#NAME: angle
#PARENT: Gtk.Label.set_angle.none
#COMMENT: the angle that the baseline of the label makes with
  the horizontal, in degrees, measured counterclockwise
#NAME: paned
#PARENT: Gtk.Paned.set_position.none
#COMMENT: a #GtkPaned widget
#NAME: size
#PARENT: Gtk.Image.get_gicon.none
#COMMENT: place to store an icon size,
    or %NULL
#NAME: parent
#PARENT: Gtk.MountOperation.set_parent.none
#COMMENT: transient parent of the window, or %NULL
#NAME: snap_to_ticks
#PARENT: Gtk.SpinButton.set_snap_to_ticks.none
#COMMENT: a flag indicating if invalid values should be corrected
#NAME: rect
#PARENT: Gtk.Tooltip.set_tip_area.none
#COMMENT: a #GdkRectangle
#NAME: user_data
#PARENT: Gtk.TreeSortableIface.set_default_sort_func.set_default_sort_func.none
#COMMENT: User data to pass to @sort_func, or %NULL
#NAME: set_icon_tooltip_markup
#PARENT: Gtk.Entry
#COMMENT: Sets @tooltip as the contents of the tooltip for the icon at
the specified position. @tooltip is assumed to be marked up with
the [Pango text markup language][PangoMarkupFormat].

Use %NULL for @tooltip to remove an existing tooltip.

See also gtk_widget_set_tooltip_markup() and
gtk_entry_set_icon_tooltip_text().
#NAME: popover
#PARENT: Gtk.Popover.get_position.PositionType
#COMMENT: a #GtkPopover
#NAME: backward_word_starts
#PARENT: Gtk.TextIter.backward_word_starts
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: get_page_ranges
#PARENT: Gtk.PrintSettings.get_page_ranges
#COMMENT: an array
    of #GtkPageRanges.  Use g_free() to free the array when
    it is no longer needed.
#NAME: get_private_hint
#PARENT: Gtk.RecentInfo.get_private_hint
#COMMENT: %TRUE if the private flag was found, %FALSE otherwise
#NAME: window
#PARENT: Gtk.Window.get_screen.Gdk.Screen
#COMMENT: a #GtkWindow.
#NAME: transient-for
#PARENT: Gtk.Window
#COMMENT: The transient parent of the window. See gtk_window_set_transient_for() for
more details about transient windows.
#NAME: text-column
#PARENT: Gtk.CellRendererCombo
#COMMENT: Specifies the model column which holds the possible values for the
combo box.

Note that this refers to the model specified in the model property,
not the model backing the tree view to which
this cell renderer is attached.

#GtkCellRendererCombo automatically adds a text cell renderer for
this column to its combo box.
#NAME: left_gravity
#PARENT: Gtk.TextMark.new.TextMark
#COMMENT: whether the mark should have left gravity
#NAME: widget
#PARENT: Gtk.Widget.add_events.none
#COMMENT: a #GtkWidget
#NAME: requisition
#PARENT: Gtk.Widget.get_child_requisition.none
#COMMENT: a #GtkRequisition to be filled in
#NAME: parent
#PARENT: Gtk.MessageDialog.new.Widget
#COMMENT: transient parent, or %NULL for none
#NAME: menubar
#PARENT: Gtk.UIManagerItemType
#COMMENT: Create a menubar.
#NAME: test_widget_send_key
#PARENT: Gtk.test_widget_send_key
#COMMENT: whether all actions neccessary for the key event simulation were carried out successfully.
#NAME: delete-surrounding
#PARENT: Gtk.IMContext.delete-surrounding
#COMMENT: %TRUE if the signal was handled.
#NAME: prefers_app_menu
#PARENT: Gtk.Application.prefers_app_menu
#COMMENT: %TRUE if you should set an app menu
#NAME: get_page_side_image
#PARENT: Gtk.Assistant
#COMMENT: Gets the side image for @page.
#NAME: accel_flags
#PARENT: Gtk.AccelGroup.connect.none
#COMMENT: a flag mask to configure this accelerator
#NAME: minimum_height
#PARENT: Gtk.CellRendererClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: location for storing the minimum size, or %NULL
#NAME: step
#PARENT: Gtk.Label.move-cursor.none
#COMMENT: the granularity of the move, as a #GtkMovementStep
#NAME: completion
#PARENT: Gtk.EntryCompletion.get_completion_prefix.utf8
#COMMENT: a #GtkEntryCompletion
#NAME: spacing
#PARENT: Gtk.Box.new.Widget
#COMMENT: the number of pixels to place by default between children.
#NAME: area
#PARENT: Gtk.CellArea.add_focus_sibling.none
#COMMENT: a #GtkCellArea
#NAME: get_label_widget
#PARENT: Gtk.ToolItemGroup.get_label_widget
#COMMENT: the label widget of @group
#NAME: new
#PARENT: Gtk.TreeView.new
#COMMENT: A newly created #GtkTreeView widget.
#NAME: Tooltip
#PARENT: Gtk
#COMMENT: Basic tooltips can be realized simply by using gtk_widget_set_tooltip_text()
or gtk_widget_set_tooltip_markup() without any explicit tooltip object.

When you need a tooltip with a little more fancy contents, like adding an
image, or you want the tooltip to have different contents per #GtkTreeView
row or cell, you will have to do a little more work:

- Set the #GtkWidget:has-tooltip property to %TRUE, this will make GTK+
  monitor the widget for motion and related events which are needed to
  determine when and where to show a tooltip.

- Connect to the #GtkWidget::query-tooltip signal.  This signal will be
  emitted when a tooltip is supposed to be shown. One of the arguments passed
  to the signal handler is a GtkTooltip object. This is the object that we
  are about to display as a tooltip, and can be manipulated in your callback
  using functions like gtk_tooltip_set_icon(). There are functions for setting
  the tooltip’s markup, setting an image from a named icon, or even putting in
  a custom widget.

  Return %TRUE from your query-tooltip handler. This causes the tooltip to be
  show. If you return %FALSE, it will not be shown.

In the probably rare case where you want to have even more control over the
tooltip that is about to be shown, you can set your own #GtkWindow which
will be used as tooltip window.  This works as follows:

- Set #GtkWidget:has-tooltip and connect to #GtkWidget::query-tooltip as before.
  Use gtk_widget_set_tooltip_window() to set a #GtkWindow created by you as
  tooltip window.

- In the #GtkWidget::query-tooltip callback you can access your window using
  gtk_widget_get_tooltip_window() and manipulate as you wish. The semantics of
  the return value are exactly as before, return %TRUE to show the window,
  %FALSE to not show it.
#NAME: height
#PARENT: Gtk.WidgetClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: the height which is available for allocation
#NAME: get_row_homogeneous
#PARENT: Gtk.Grid.get_row_homogeneous
#COMMENT: whether all rows of @grid have the same height.
#NAME: PageSet
#PARENT: Gtk
#COMMENT: See also gtk_print_job_set_page_set().
#NAME: modify_bg
#PARENT: Gtk.Widget
#COMMENT: Sets the background color for a widget in a particular state.

All other style values are left untouched.
See also gtk_widget_modify_style().

> Note that “no window” widgets (which have the %GTK_NO_WINDOW
> flag set) draw on their parent container’s window and thus may
> not draw any background themselves. This is the case for e.g.
> #GtkLabel.
>
> To modify the background of such widgets, you have to set the
> background color on their parent; if you want to set the background
> of a rectangular area around a label, try placing the label in
> a #GtkEventBox widget and setting the background color on that.
#NAME: role
#PARENT: Gtk.Window.set_role.none
#COMMENT: unique identifier for the window to be used when restoring a session
#NAME: application
#PARENT: Gtk.Application.get_window_by_id.Window
#COMMENT: a #GtkApplication
#NAME: event
#PARENT: Gtk.TextTagClass.event.event
#COMMENT: result of signal emission (whether the event was handled)
#NAME: string
#PARENT: Gtk.TextView.insert-at-cursor.none
#COMMENT: the string to insert
#NAME: indent
#PARENT: Gtk.TextView.set_indent.none
#COMMENT: indentation in pixels
#NAME: set_margin_bottom
#PARENT: Gtk.Widget
#COMMENT: Sets the bottom margin of @widget.
See the #GtkWidget:margin-bottom property.
#NAME: cr
#PARENT: Gtk.paint_slider.none
#COMMENT: a #cairo_t
#NAME: targets_include_text
#PARENT: Gtk
#COMMENT: Determines if any of the targets in @targets can be used to
provide text.
#NAME: add_from_file
#PARENT: Gtk.Builder
#COMMENT: Parses a file containing a [GtkBuilder UI definition][BUILDER-UI]
and merges it with the current contents of @builder.

Most users will probably want to use gtk_builder_new_from_file().

If an error occurs, 0 will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_FILE_ERROR
domain.

It’s not really reasonable to attempt to handle failures of this
call. You should not use this function with untrusted files (ie:
files that are not part of your application). Broken #GtkBuilder
files can easily crash your program, and it’s possible that memory
was leaked leading up to the reported failure. The only reasonable
thing to do when an error is detected is to call g_error().
#NAME: get_left_gravity
#PARENT: Gtk.TextMark.get_left_gravity
#COMMENT: %TRUE if the mark has left gravity, %FALSE otherwise
#NAME: get_mnemonic_modifier
#PARENT: Gtk.Window.get_mnemonic_modifier
#COMMENT: the modifier mask used to activate
              mnemonics on this window.
#NAME: set_icon_name
#PARENT: Gtk.Window
#COMMENT: Sets the icon for the window from a named themed icon. See
the docs for #GtkIconTheme for more details.

Note that this has nothing to do with the WM_ICON_NAME
property which is mentioned in the ICCCM.
#NAME: new
#PARENT: Gtk.ColorSelection.new
#COMMENT: a new #GtkColorSelection
#NAME: get_cursor_hadjustment
#PARENT: Gtk.Entry.get_cursor_hadjustment
#COMMENT: the horizontal cursor adjustment, or %NULL
  if none has been set.
#NAME: activate_key
#PARENT: Gtk.Window
#COMMENT: Activates mnemonics and accelerators for this #GtkWindow. This is normally
called by the default ::key_press_event handler for toplevel windows,
however in some cases it may be useful to call this directly when
overriding the standard key handling for a toplevel window.
#NAME: set_screen
#PARENT: Gtk.Invisible
#COMMENT: Sets the #GdkScreen where the #GtkInvisible object will be displayed.
#NAME: application
#PARENT: Gtk.Application.prefers_app_menu.gboolean
#COMMENT: a #GtkApplication
#NAME: minimum_size
#PARENT: Gtk.CellRenderer.get_preferred_width.none
#COMMENT: location to store the minimum size, or %NULL
#NAME: is_embedded
#PARENT: Gtk.StatusIcon
#COMMENT: Returns whether the status icon is embedded in a notification
area.
#NAME: depth
#PARENT: Gtk.TreePath.get_indices_with_depth.gint
#COMMENT: return location for number of elements
    returned in the integer array, or %NULL
#NAME: top
#PARENT: Gtk.Grid.get_child_at.Widget
#COMMENT: the top edge of the cell
#NAME: LEVEL_BAR_OFFSET_LOW
#PARENT: Gtk
#COMMENT: The name used for the stock low offset included by #GtkLevelBar.
#NAME: parent_class
#PARENT: Gtk.OverlayClass
#COMMENT: The parent class.
#NAME: iter
#PARENT: Gtk.TreeModel.rows_reordered.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the node whose children
    have been reordered, or %NULL if the depth of @path is 0
#NAME: direction
#PARENT: Gtk.WidgetClass.keynav_failed.keynav_failed.gboolean
#COMMENT: direction of focus movement
#NAME: draw-as-radio
#PARENT: Gtk.ToggleAction
#COMMENT: Whether the proxies for this action look like radio action proxies.

This is an appearance property and thus only applies if
#GtkActivatable:use-action-appearance is %TRUE.
#NAME: move_column_after
#PARENT: Gtk.TreeView
#COMMENT: Moves @column to be after to @base_column.  If @base_column is %NULL, then
@column is placed in the first position.
#NAME: page_increment
#PARENT: Gtk.Adjustment.configure.none
#COMMENT: the new page increment
#NAME: cell_area
#PARENT: Gtk.CellAreaClass.event.event.gint
#COMMENT: the @widget relative coordinates for @area
#NAME: new_from_resource
#PARENT: Gtk.Image.new_from_resource
#COMMENT: a new #GtkImage
#NAME: get_storage_type
#PARENT: Gtk.Image.get_storage_type
#COMMENT: image representation being used
#NAME: to_string
#PARENT: Gtk.TreePath
#COMMENT: Generates a string representation of the path.

This string is a “:” separated list of numbers.
For example, “4:10:0:3” would be an acceptable
return value for this string.
#NAME: margin
#PARENT: Gtk.Widget.set_margin_right.none
#COMMENT: the right margin
#NAME: factor
#PARENT: Gtk.SymbolicColor.new_shade.SymbolicColor
#COMMENT: shading factor to apply to @color
#NAME: get_button
#PARENT: Gtk.GestureSingle.get_button
#COMMENT: The button number, or 0 for any button
#NAME: path
#PARENT: Gtk.TreeView.set_drag_dest_row.none
#COMMENT: The path of the row to highlight, or %NULL
#NAME: iter_clear_regions
#PARENT: Gtk.WidgetPath
#COMMENT: Removes all regions from the widget at position @pos in the
hierarchy defined in @path.
#NAME: cell_area
#PARENT: Gtk.CellRenderer.render.none
#COMMENT: area normally rendered by a cell renderer
#NAME: icon_theme
#PARENT: Gtk.IconTheme.get_icon_sizes.gint
#COMMENT: a #GtkIconTheme
#NAME: STYLE_CLASS_BOTTOM
#PARENT: Gtk
#COMMENT: A CSS class to indicate an area at the bottom of a widget.

This is used by widgets that can render an area in different
positions, such as tabs in a #GtkNotebook.
#NAME: new
#PARENT: Gtk.SearchBar.new
#COMMENT: a new #GtkSearchBar
#NAME: selection
#PARENT: Gtk.TreeSelection.count_selected_rows.gint
#COMMENT: A #GtkTreeSelection.
#NAME: icon_theme
#PARENT: Gtk.IconTheme.choose_icon.IconInfo
#COMMENT: a #GtkIconTheme
#NAME: context
#PARENT: Gtk.StyleContext.set_direction.none
#COMMENT: a #GtkStyleContext
#NAME: context
#PARENT: Gtk.IMContext.filter_keypress.gboolean
#COMMENT: a #GtkIMContext
#NAME: resource_path
#PARENT: Gtk.Image.new_from_resource.Widget
#COMMENT: a resource path
#NAME: tab_label
#PARENT: Gtk.Notebook.prepend_page.gint
#COMMENT: the #GtkWidget to be used as the label
    for the page, or %NULL to use the default label, “page N”
#NAME: vadjustment
#PARENT: Gtk.Layout.new.Widget
#COMMENT: vertical scroll adjustment, or %NULL
#NAME: size
#PARENT: Gtk.IconSet.render_icon_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: icon size. A size of (GtkIconSize)-1
       means render at the size of the source and don’t scale.
#NAME: get_pointing_to
#PARENT: Gtk.Popover.get_pointing_to
#COMMENT: %TRUE if a rectangle to point to was set.
#NAME: is_activatable
#PARENT: Gtk.CellRenderer
#COMMENT: Checks whether the cell renderer can do something when activated.
#NAME: new
#PARENT: Gtk.PlacesSidebar.new
#COMMENT: a newly created #GtkPlacesSidebar
#NAME: x
#PARENT: Gtk.render_check.none
#COMMENT: X origin of the rectangle
#NAME: end_pos
#PARENT: Gtk.EditableInterface.get_chars.get_chars.utf8
#COMMENT: end of text
#NAME: new
#PARENT: Gtk.CellRendererSpin
#COMMENT: Creates a new #GtkCellRendererSpin.
#NAME: STOCK_COLOR_PICKER
#PARENT: Gtk
#COMMENT: The “Color Picker” item and icon.
#NAME: STOCK_GOTO_BOTTOM
#PARENT: Gtk
#COMMENT: The “Bottom” item and icon.
#NAME: y
#PARENT: Gtk.render_check.none
#COMMENT: Y origin of the rectangle
#NAME: menu
#PARENT: Gtk.Label.populate-popup.none
#COMMENT: the menu that is being populated
#NAME: state_type
#PARENT: Gtk.paint_flat_box.none
#COMMENT: a state
#NAME: remove
#PARENT: Gtk.ComboBoxText
#COMMENT: Removes the string at @position from @combo_box.
#NAME: get_detail_width_chars
#PARENT: Gtk.Calendar.get_detail_width_chars
#COMMENT: The width of detail cells, in characters.
#NAME: page-added
#PARENT: Gtk.Notebook
#COMMENT: the ::page-added signal is emitted in the notebook
right after a page is added to the notebook.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_screen.Gdk.Screen
#COMMENT: a #GtkStatusIcon
#NAME: rc_parse_color
#PARENT: Gtk
#COMMENT: Parses a color in the format expected
in a RC file.

Note that theme engines should use gtk_rc_parse_color_full() in
order to support symbolic colors.
#NAME: get_id_column
#PARENT: Gtk.ComboBox.get_id_column
#COMMENT: A column in the data source model of @combo_box.
#NAME: has_opacity
#PARENT: Gtk.ColorSelection.set_has_opacity_control.none
#COMMENT: %TRUE if @colorsel can set the opacity, %FALSE otherwise
#NAME: context
#PARENT: Gtk.IMContextClass.set_use_preedit.set_use_preedit.none
#COMMENT: a #GtkIMContext
#NAME: is_recognized
#PARENT: Gtk.Gesture.is_recognized
#COMMENT: %TRUE if gesture is recognized
#NAME: func
#PARENT: Gtk.Menu.popup_for_device.none
#COMMENT: a user supplied function used to position the menu,
    or %NULL
#NAME: set_style
#PARENT: Gtk.Toolbar
#COMMENT: Alters the view of @toolbar to display either icons only, text only, or both.
#NAME: Unit
#PARENT: Gtk
#COMMENT: See also gtk_print_settings_set_paper_width().
#NAME: domain
#PARENT: Gtk.Builder.set_translation_domain.none
#COMMENT: the translation domain or %NULL
#NAME: get_header
#PARENT: Gtk.ListBoxRow
#COMMENT: Returns the current header of the @row. This can be used
in a #GtkListBoxUpdateHeaderFunc to see if there is a header
set already, and if so to update the state of it.
#NAME: new
#PARENT: Gtk.Viewport.new
#COMMENT: a new #GtkViewport
#NAME: accel_group
#PARENT: Gtk.Widget.add_accelerator.none
#COMMENT: accel group for this widget, added to its toplevel
#NAME: get_row_spacing
#PARENT: Gtk.Grid
#COMMENT: Returns the amount of space between the rows of @grid.
#NAME: page
#PARENT: Gtk.SpinButton.get_increments.none
#COMMENT: location to store page increment, or %NULL
#NAME: move_visually
#PARENT: Gtk.TextView.move_visually
#COMMENT: %TRUE if @iter moved and is not on the end iterator
#NAME: stock_id
#PARENT: Gtk.IconFactory.add.none
#COMMENT: icon name
#NAME: cr
#PARENT: Gtk.render_frame.none
#COMMENT: a #cairo_t
#NAME: edge
#PARENT: Gtk.HandleBox.set_snap_edge.none
#COMMENT: the snap edge, or -1 to unset the value; in which
  case GTK+ will try to guess an appropriate value
  in the future.
#NAME: get_use_markup
#PARENT: Gtk.Label.get_use_markup
#COMMENT: %TRUE if the label’s text will be parsed for markup.
#NAME: link_button
#PARENT: Gtk.LinkButton.get_visited.gboolean
#COMMENT: a #GtkLinkButton
#NAME: get_layout
#PARENT: Gtk.Label
#COMMENT: Gets the #PangoLayout used to display the label.
The layout is useful to e.g. convert text positions to
pixel positions, in combination with gtk_label_get_layout_offsets().
The returned layout is owned by the @label so need not be
freed by the caller. The @label is free to recreate its layout at
any time, so it should be considered read-only.
#NAME: get_upper_stepper_sensitivity
#PARENT: Gtk.Range
#COMMENT: Gets the sensitivity policy for the stepper that points to the
'upper' end of the GtkRange’s adjustment.
#NAME: get_transition_duration
#PARENT: Gtk.Stack.get_transition_duration
#COMMENT: the transition duration
#NAME: user_data
#PARENT: Gtk.Widget.add_tick_callback.guint
#COMMENT: data to pass to @callback
#NAME: accelerator_key
#PARENT: Gtk.accelerator_name.utf8
#COMMENT: accelerator keyval
#NAME: xalign
#PARENT: Gtk.Alignment.new.Widget
#COMMENT: the horizontal alignment of the child widget, from 0 (left) to 1
 (right).
#NAME: iter
#PARENT: Gtk.TreeStore.move_before.none
#COMMENT: A #GtkTreeIter.
#NAME: end_path
#PARENT: Gtk.IconView.get_visible_range.gboolean
#COMMENT: Return location for end of region, or %NULL
#NAME: base
#PARENT: Gtk.RcStyle
#COMMENT: Base colors
#NAME: height
#PARENT: Gtk.paint_focus.none
#COMMENT: the height of the rectangle around which to draw a focus indicator
#NAME: state
#PARENT: Gtk.StyleContext.get_background_color.none
#COMMENT: state to retrieve the color for
#NAME: list_shortcut_folder_uris
#PARENT: Gtk.FileChooser.list_shortcut_folder_uris
#COMMENT: A list of
folder URIs, or %NULL if there are no shortcut folders.  Free the
returned list with g_slist_free(), and the URIs with g_free().
#NAME: parse_color
#PARENT: Gtk.RcProperty.parse_color
#COMMENT: %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GdkColor.
#NAME: name
#PARENT: Gtk.RcStyle
#COMMENT: Name
#NAME: backward_find_char
#PARENT: Gtk.TextIter
#COMMENT: Same as gtk_text_iter_forward_find_char(), but goes backward from @iter.
#NAME: min_width
#PARENT: Gtk.TreeViewColumn.set_min_width.none
#COMMENT: The minimum width of the column in pixels, or -1.
#NAME: test_find_widget
#PARENT: Gtk
#COMMENT: This function will search the descendants of @widget for a widget
of type @widget_type that has a label matching @label_pattern next
to it. This is most useful for automated GUI testing, e.g. to find
the “OK” button in a dialog and synthesize clicks on it.
However see gtk_test_find_label(), gtk_test_find_sibling() and
gtk_test_widget_click() for possible caveats involving the search of
such widgets and synthesizing widget events.
#NAME: min
#PARENT: Gtk.ScaleButton.new.Widget
#COMMENT: the minimum value of the scale (usually 0)
#NAME: ends_sentence
#PARENT: Gtk.TextIter.ends_sentence
#COMMENT: %TRUE if @iter is at the end of a sentence.
#NAME: menubar
#PARENT: Gtk.MenuBar.set_child_pack_direction.none
#COMMENT: a #GtkMenuBar
#NAME: show-menu
#PARENT: Gtk.MenuToolButton
#COMMENT: The ::show-menu signal is emitted before the menu is shown.

It can be used to populate the menu on demand, using
gtk_menu_tool_button_set_menu().

Note that even if you populate the menu dynamically in this way,
you must set an empty menu on the #GtkMenuToolButton beforehand,
since the arrow is made insensitive if the menu is not set.
#NAME: domain
#PARENT: Gtk.stock_set_translate_func.none
#COMMENT: the translation domain for which @func shall be used
#NAME: widget
#PARENT: Gtk.Widget.get_allocated_baseline.gint
#COMMENT: the widget to query
#NAME: get_font_face
#PARENT: Gtk.FontChooserIface.get_font_face.get_font_face
#COMMENT: A #PangoFontFace representing the
    selected font group details, or %NULL. The returned object is owned by
    @fontchooser and must not be modified or freed.
#NAME: get_context_id
#PARENT: Gtk.IMMulticontext
#COMMENT: Gets the id of the currently active slave of the @context.
#NAME: filter_keypress
#PARENT: Gtk.IMContextClass.filter_keypress.filter_keypress
#COMMENT: %TRUE if the input method handled the key event.
#NAME: set_filter_func
#PARENT: Gtk.FlowBox
#COMMENT: By setting a filter function on the @box one can decide dynamically
which of the children to show. For instance, to implement a search
function that only shows the children matching the search terms.

The @filter_func will be called for each child after the call, and
it will continue to be called each time a child changes (via
gtk_flow_box_child_changed()) or when gtk_flow_box_invalidate_filter()
is called.
#NAME: widget
#PARENT: Gtk.Widget.compute_expand.gboolean
#COMMENT: the widget
#NAME: entry
#PARENT: Gtk.Entry.get_layout.Pango.Layout
#COMMENT: a #GtkEntry
#NAME: load_from_path
#PARENT: Gtk.CssProvider.load_from_path
#COMMENT: %TRUE. The return value is deprecated and %FALSE will only be
    returned for backwards compatibility reasons if an @error is not
    %NULL and a loading error occured. To track errors while loading
    CSS, connect to the #GtkCssProvider::parsing-error signal.
#NAME: new
#PARENT: Gtk.ListBoxRow
#COMMENT: Creates a new #GtkListBoxRow, to be used as a child of a #GtkListBox.
#NAME: child
#PARENT: Gtk.Paned.pack2.none
#COMMENT: the child to add
#NAME: toplevel
#PARENT: Gtk.WindowType
#COMMENT: A regular window, such as a dialog.
#NAME: get_spacing
#PARENT: Gtk.Box.get_spacing
#COMMENT: spacing between children
#NAME: next
#PARENT: Gtk.BindingSignal
#COMMENT: implementation detail
#NAME: pin
#PARENT: Gtk.InputPurpose
#COMMENT: Like @GTK_INPUT_PURPOSE_DIGITS, but characters are hidden
#NAME: set_icon_activatable
#PARENT: Gtk.Entry
#COMMENT: Sets whether the icon is activatable.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_title.utf8
#COMMENT: A #GtkTreeViewColumn.
#NAME: new
#PARENT: Gtk.Builder
#COMMENT: Creates a new empty builder object.

This function is only useful if you intend to make multiple calls
to gtk_builder_add_from_file(), gtk_builder_add_from_resource()
or gtk_builder_add_from_string() in order to merge multiple UI
descriptions into a single builder.

Most users will probably want to use gtk_builder_new_from_file(),
gtk_builder_new_from_resource() or gtk_builder_new_from_string().
#NAME: renderer
#PARENT: Gtk.CellArea.add-editable.none
#COMMENT: the #GtkCellRenderer that started the edited
#NAME: MountOperation
#PARENT: Gtk
#COMMENT: This should not be accessed directly. Use the accessor functions below.
#NAME: selection_data
#PARENT: Gtk.SelectionData.set_uris.gboolean
#COMMENT: a #GtkSelectionData
#NAME: item
#PARENT: Gtk.ToolItemGroup.insert.none
#COMMENT: the #GtkToolItem to insert into @group
#NAME: screen
#PARENT: Gtk.alternative_dialog_button_order.gboolean
#COMMENT: a #GdkScreen, or %NULL to use the default screen
#NAME: size
#PARENT: Gtk.Tooltip.set_icon_from_stock.none
#COMMENT: a stock icon size
#NAME: get_iter_first
#PARENT: Gtk.TreeModel
#COMMENT: Initializes @iter with the first iterator in the tree
(the one at the path "0") and returns %TRUE. Returns
%FALSE if the tree is empty.
#NAME: backward_sentence_starts
#PARENT: Gtk.TextIter
#COMMENT: Calls gtk_text_iter_backward_sentence_start() up to @count times,
or until it returns %FALSE. If @count is negative, moves forward
instead of backward.
#NAME: new
#PARENT: Gtk.WidgetPath
#COMMENT: Returns an empty widget path.
#NAME: STYLE_CLASS_CELL
#PARENT: Gtk
#COMMENT: A CSS class to match content rendered in cell views.

This is used by cell renderers, e.g. in #GtkIconView
and #GtkTreeView.
#NAME: tree_view
#PARENT: Gtk.TreeViewClass.row_activated.row_activated.none
#COMMENT: A #GtkTreeView
#NAME: area
#PARENT: Gtk.CellArea.activate_cell.gboolean
#COMMENT: a #GtkCellArea
#NAME: ppd_name
#PARENT: Gtk.PaperSize.new_from_ppd.PaperSize
#COMMENT: a PPD paper name
#NAME: cancel
#PARENT: Gtk.PrintOperation
#COMMENT: Cancels a running print operation. This function may
be called from a #GtkPrintOperation::begin-print,
#GtkPrintOperation::paginate or #GtkPrintOperation::draw-page
signal handler to stop the currently running print
operation.
#NAME: cell_renderer
#PARENT: Gtk.TreeViewColumn.set_cell_data_func.none
#COMMENT: A #GtkCellRenderer
#NAME: new
#PARENT: Gtk.GesturePan.new
#COMMENT: a newly created #GtkGesturePan
#NAME: current-value
#PARENT: Gtk.RadioAction
#COMMENT: The value property of the currently active member of the group to which
this action belongs.
#NAME: xalign
#PARENT: Gtk.AspectFrame.new.Widget
#COMMENT: Horizontal alignment of the child within the allocation of
 the #GtkAspectFrame. This ranges from 0.0 (left aligned)
 to 1.0 (right aligned)
#NAME: secondary-icon-activatable
#PARENT: Gtk.Entry
#COMMENT: Whether the secondary icon is activatable.

GTK+ emits the #GtkEntry::icon-press and #GtkEntry::icon-release
signals only on sensitive, activatable icons.

Sensitive, but non-activatable icons can be used for purely
informational purposes.
#NAME: xalign
#PARENT: Gtk.Label
#COMMENT: The xalign property determines the horizontal aligment of the label text
inside the labels size allocation. Compare this to #GtkWidget:halign,
which determines how the labels size allocation is positioned in the
space available for the label.
#NAME: pbar
#PARENT: Gtk.ProgressBar.get_show_text.gboolean
#COMMENT: a #GtkProgressBar
#NAME: group
#PARENT: Gtk.RadioButton.new.Widget
#COMMENT: an existing
        radio button group, or %NULL if you are creating a new group.
#NAME: cr
#PARENT: Gtk.render_background.none
#COMMENT: a #cairo_t
#NAME: new_linear
#PARENT: Gtk.Gradient.new_linear
#COMMENT: A newly created #GtkGradient
#NAME: mark
#PARENT: Gtk.TextBuffer.mark-deleted.none
#COMMENT: The mark that was deleted
#NAME: func
#PARENT: Gtk.ComboBox.set_row_separator_func.none
#COMMENT: a #GtkTreeViewRowSeparatorFunc
#NAME: render_icon
#PARENT: Gtk.Style.render_icon
#COMMENT: a newly-created #GdkPixbuf
    containing the rendered icon
#NAME: dest_widget
#PARENT: Gtk.Widget.translate_coordinates.gboolean
#COMMENT: a #GtkWidget
#NAME: window
#PARENT: Gtk.Window.maximize.none
#COMMENT: a #GtkWindow
#NAME: normal
#PARENT: Gtk.ReliefStyle
#COMMENT: Draw a normal relief.
#NAME: get_data_type
#PARENT: Gtk.SelectionData
#COMMENT: Retrieves the data type of the selection.
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_data_with_length.guint8
#COMMENT: a pointer to a #GtkSelectionData-struct.
#NAME: get_filename
#PARENT: Gtk.FileChooser.get_filename
#COMMENT: The currently selected filename, or %NULL
 if no file is selected, or the selected file can't
 be represented with a local filename. Free with g_free().
#NAME: new
#PARENT: Gtk.FontSelectionDialog.new
#COMMENT: a new #GtkFontSelectionDialog
#NAME: new_with_label_from_widget
#PARENT: Gtk.RadioMenuItem
#COMMENT: Creates a new GtkRadioMenuItem whose child is a simple GtkLabel.
The new #GtkRadioMenuItem is added to the same group as @group.
#NAME: screen
#PARENT: Gtk.StyleContext.add_provider_for_screen.none
#COMMENT: a #GdkScreen
#NAME: drag_dest_unset
#PARENT: Gtk.Widget
#COMMENT: Clears information about a drop destination set with
gtk_drag_dest_set(). The widget will no longer receive
notification of drags.
#NAME: area
#PARENT: Gtk.CellArea.foreach_alloc.none
#COMMENT: a #GtkCellArea
#NAME: insert_page
#PARENT: Gtk.Assistant
#COMMENT: Inserts a page in the @assistant at a given position.
#NAME: container
#PARENT: Gtk.ContainerClass.forall.forall.none
#COMMENT: a #GtkContainer
#NAME: get_menu_model
#PARENT: Gtk.MenuButton
#COMMENT: Returns the #GMenuModel used to generate the popup.
#NAME: internal_error
#PARENT: Gtk.PrintError
#COMMENT: An internal error occurred.
#NAME: get_accel_path
#PARENT: Gtk.Action.get_accel_path
#COMMENT: the accel path for this action, or %NULL
  if none is set. The returned string is owned by GTK+
  and must not be freed or modified.
#NAME: is_end
#PARENT: Gtk.TextIter.is_end
#COMMENT: whether @iter is the end iterator
#NAME: minimum_size
#PARENT: Gtk.CellRendererClass.get_preferred_width.get_preferred_width.none
#COMMENT: location to store the minimum size, or %NULL
#NAME: completion
#PARENT: Gtk.EntryCompletion.get_inline_completion.gboolean
#COMMENT: a #GtkEntryCompletion
#NAME: label
#PARENT: Gtk.NumerableIcon.set_label.none
#COMMENT: a short label, or %NULL
#NAME: ClipboardTargetsReceivedFunc
#PARENT: Gtk
#COMMENT: A function to be called when the results of gtk_clipboard_request_targets()
are received, or when the request fails.
#NAME: key
#PARENT: Gtk.PrintSettings.get_double_with_default.gdouble
#COMMENT: a key
#NAME: set_row_spacing
#PARENT: Gtk.FlowBox
#COMMENT: Sets the vertical space to add between children.
See the #GtkFlowBox:row-spacing property.
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_text_orientation.Orientation
#COMMENT: a #GtkToolItem
#NAME: path
#PARENT: Gtk.UIManager.get_widget.Widget
#COMMENT: a path
#NAME: binding_set_find
#PARENT: Gtk
#COMMENT: Find a binding set by its globally unique name.

The @set_name can either be a name used for gtk_binding_set_new()
or the type name of a class used in gtk_binding_set_by_class().
#NAME: refresh
#PARENT: Gtk.AppChooser
#COMMENT: Reloads the list of applications.
#NAME: height
#PARENT: Gtk.IconSize.lookup_for_settings.gboolean
#COMMENT: location to store icon height
#NAME: action
#PARENT: Gtk.RecentAction.get_show_numbers.gboolean
#COMMENT: a #GtkRecentAction
#NAME: get_style_property
#PARENT: Gtk.StyleContext
#COMMENT: Gets the value for a widget style property.

When @value is no longer needed, g_value_unset() must be called
to free any allocated memory.
#NAME: user_data
#PARENT: Gtk.TextBufferSerializeFunc.guint8
#COMMENT: user data that was specified when registering the format
#NAME: set_default
#PARENT: Gtk.Window
#COMMENT: The default widget is the widget that’s activated when the user
presses Enter in a dialog (for example). This function sets or
unsets the default widget for a #GtkWindow. When setting (rather
than unsetting) the default widget it’s generally easier to call
gtk_widget_grab_default() on the widget. Before making a widget
the default widget, you must call gtk_widget_set_can_default() on
the widget you’d like to make the default.
#NAME: get_min_children_per_line
#PARENT: Gtk.FlowBox.get_min_children_per_line
#COMMENT: the minimum number of children per line
#NAME: set_label_widget
#PARENT: Gtk.ToolButton
#COMMENT: Sets @label_widget as the widget that will be used as the label
for @button. If @label_widget is %NULL the “label” property is used
as label. If “label” is also %NULL, the label in the stock item
determined by the “stock_id” property is used as label. If
“stock_id” is also %NULL, @button does not have a label.
#NAME: actionable
#PARENT: Gtk.ActionableInterface.get_action_name.get_action_name.utf8
#COMMENT: a #GtkActionable widget
#NAME: activatable
#PARENT: Gtk.CellRendererMode
#COMMENT: The cell can be clicked.
#NAME: has_context
#PARENT: Gtk.Style
#COMMENT: Returns whether @style has an associated #GtkStyleContext.
#NAME: event
#PARENT: Gtk.TextTagClass.event.event.gboolean
#COMMENT: the event
#NAME: unset_icon_size
#PARENT: Gtk.ToolPalette
#COMMENT: Unsets the tool palette icon size set with gtk_tool_palette_set_icon_size(),
so that user preferences will be used to determine the icon size.
#NAME: path
#PARENT: Gtk.TreeView.set_tooltip_row.none
#COMMENT: a #GtkTreePath
#NAME: destroy
#PARENT: Gtk.TreeViewColumn.set_cell_data_func.none
#COMMENT: The destroy notification for @func_data
#NAME: cursor
#PARENT: Gtk.Widget.override_cursor.none
#COMMENT: the color to use for primary cursor (does not need to be
    allocated), or %NULL to undo the effect of previous calls to
    of gtk_widget_override_cursor().
#NAME: translate_string
#PARENT: Gtk.ActionGroup.translate_string
#COMMENT: the translation of @string
#NAME: append_page_menu
#PARENT: Gtk.Notebook
#COMMENT: Appends a page to @notebook, specifying the widget to use as the
label in the popup menu.
#NAME: targets_include_rich_text
#PARENT: Gtk.targets_include_rich_text
#COMMENT: %TRUE if @targets include a suitable target for rich text,
              otherwise %FALSE.
#NAME: get_show_tabs
#PARENT: Gtk.Notebook
#COMMENT: Returns whether the tabs of the notebook are shown.
See gtk_notebook_set_show_tabs().
#NAME: buffer
#PARENT: Gtk.TextBuffer.apply_tag_by_name.none
#COMMENT: a #GtkTextBuffer
#NAME: chars
#PARENT: Gtk.Calendar.set_detail_width_chars.none
#COMMENT: detail width in characters.
#NAME: failed
#PARENT: Gtk.CssProviderError
#COMMENT: Failed.
#NAME: window
#PARENT: Gtk.Window.get_destroy_with_parent.gboolean
#COMMENT: a #GtkWindow
#NAME: new
#PARENT: Gtk.RadioAction
#COMMENT: Creates a new #GtkRadioAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().
#NAME: iter
#PARENT: Gtk.TextBuffer.insert_markup.none
#COMMENT: location to insert the markup
#NAME: keynav-failed
#PARENT: Gtk.Widget
#COMMENT: Gets emitted if keyboard navigation fails.
See gtk_widget_keynav_failed() for details.
#NAME: allocation
#PARENT: Gtk.CellArea.get_cell_allocation.none
#COMMENT: where to store the allocation for @renderer
#NAME: self
#PARENT: Gtk.AppChooserButton.set_heading.none
#COMMENT: a #GtkAppChooserButton
#NAME: iter
#PARENT: Gtk.TreeModel.row_inserted.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the inserted row
#NAME: get_style_context
#PARENT: Gtk.Widget
#COMMENT: Returns the style context associated to @widget.
#NAME: expander
#PARENT: Gtk.Expander.get_use_underline.gboolean
#COMMENT: a #GtkExpander
#NAME: child
#PARENT: Gtk.Menu.attach.none
#COMMENT: a #GtkMenuItem
#NAME: context
#PARENT: Gtk.StyleContext.remove_region.none
#COMMENT: a #GtkStyleContext
#NAME: starts_line
#PARENT: Gtk.TextIter.starts_line
#COMMENT: whether @iter begins a line
#NAME: get_bin_window
#PARENT: Gtk.TreeView.get_bin_window
#COMMENT: A #GdkWindow, or %NULL when @tree_view
    hasn’t been realized yet
#NAME: new
#PARENT: Gtk.InfoBar
#COMMENT: Creates a new #GtkInfoBar object.
#NAME: Switch
#PARENT: Gtk
#COMMENT: #GtkSwitch is a widget that has two states: on or off. The user can control
which state should be active by clicking the empty area, or by dragging the
handle.

GtkSwitch can also handle situations where the underlying state changes with
a delay. See #GtkSwitch::state-set for details.
#NAME: parent
#PARENT: Gtk.Window.set_transient_for.none
#COMMENT: parent window, or %NULL
#NAME: full_page
#PARENT: Gtk.PrintOperation.set_use_full_page.none
#COMMENT: %TRUE to set up the #GtkPrintContext for the full page
#NAME: unset_icon_size
#PARENT: Gtk.Toolbar
#COMMENT: Unsets toolbar icon size set with gtk_toolbar_set_icon_size(), so that
user preferences will be used to determine the icon size.
#NAME: find_child_property
#PARENT: Gtk.ContainerClass.find_child_property
#COMMENT: the #GParamSpec of the child
    property or %NULL if @class has no child property with that
    name.
#NAME: get_focus_on_map
#PARENT: Gtk.Window.get_focus_on_map
#COMMENT: %TRUE if window should receive the input focus when
mapped.
#NAME: is_focus_sibling
#PARENT: Gtk.CellArea
#COMMENT: Returns whether @sibling is one of @renderer’s focus siblings
(see gtk_cell_area_add_focus_sibling()).
#NAME: size1
#PARENT: Gtk.PaperSize.is_equal.gboolean
#COMMENT: a #GtkPaperSize object
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_sort_order.SortType
#COMMENT: a #GtkTreeViewColumn
#NAME: size2
#PARENT: Gtk.PaperSize.is_equal.gboolean
#COMMENT: another #GtkPaperSize object
#NAME: get_media_type
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.

The set of media types is defined in PWG 5101.1-2002 PWG.
#NAME: get_icon_name
#PARENT: Gtk.StatusIcon
#COMMENT: Gets the name of the icon being displayed by the #GtkStatusIcon.
The storage type of the status icon must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ICON_NAME (see gtk_status_icon_get_storage_type()).
The returned string is owned by the #GtkStatusIcon and should not
be freed or modified.
#NAME: iter_next
#PARENT: Gtk.TreeModelIface.iter_next.iter_next
#COMMENT: %TRUE if @iter has been changed to the next node
#NAME: uri
#PARENT: Gtk.FileChooser.remove_shortcut_folder_uri.gboolean
#COMMENT: URI of the folder to remove
#NAME: get_selection_bound
#PARENT: Gtk.TextBuffer
#COMMENT: Returns the mark that represents the selection bound.  Equivalent
to calling gtk_text_buffer_get_mark() to get the mark named
“selection_bound”, but very slightly more efficient, and involves
less typing.

The currently-selected text in @buffer is the region between the
“selection_bound” and “insert” marks. If “selection_bound” and
“insert” are in the same place, then there is no current selection.
gtk_text_buffer_get_selection_bounds() is another convenient function
for handling the selection, if you just want to know whether there’s a
selection and what its bounds are.
#NAME: display_name
#PARENT: Gtk.FileFilterInfo
#COMMENT: the string that will be used to display the file
  in the file chooser
#NAME: put
#PARENT: Gtk.Fixed
#COMMENT: Adds a widget to a #GtkFixed container at the given position.
#NAME: get_paper_height
#PARENT: Gtk.PageSetup
#COMMENT: Returns the paper height in units of @unit.

Note that this function takes orientation, but
not margins into consideration.
See gtk_page_setup_get_page_height().
#NAME: width
#PARENT: Gtk.IconSize.register.gint
#COMMENT: the icon width
#NAME: iter
#PARENT: Gtk.ListStore.insert_before.none
#COMMENT: An unset #GtkTreeIter to set to the new row
#NAME: lookup_item
#PARENT: Gtk.RecentManager
#COMMENT: Searches for a URI inside the recently used resources list, and
returns a #GtkRecentInfo-struct containing informations about the resource
like its MIME type, or its display name.
#NAME: icon_widget
#PARENT: Gtk.MenuToolButton.new.ToolItem
#COMMENT: a widget that will be used as icon widget, or %NULL
#NAME: Orientable
#PARENT: Gtk
#COMMENT: The #GtkOrientable interface is implemented by all widgets that can be
oriented horizontally or vertically. Historically, such widgets have been
realized as subclasses of a common base class (e.g #GtkBox/#GtkHBox/#GtkVBox
or #GtkScale/#GtkHScale/#GtkVScale). #GtkOrientable is more flexible in that
it allows the orientation to be changed at runtime, allowing the widgets
to “flip”.

#GtkOrientable was introduced in GTK+ 2.16.
#NAME: TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID
#PARENT: Gtk
#COMMENT: The GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID can be used to make a
#GtkTreeSortable use no sorting.

See also gtk_tree_sortable_set_sort_column_id()
#NAME: state
#PARENT: Gtk.ThemingEngine.get.none
#COMMENT: state to retrieve values for
#NAME: get_drop_group
#PARENT: Gtk.ToolPalette
#COMMENT: Gets the group at position (x, y).
#NAME: rect
#PARENT: Gtk.TreeView.get_cell_area.none
#COMMENT: rectangle to fill with cell rect
#NAME: heading
#PARENT: Gtk.AppChooserButton.set_heading.none
#COMMENT: a string containing Pango markup
#NAME: n_children
#PARENT: Gtk.FlowBox.set_max_children_per_line.none
#COMMENT: the maximum number of children per line
#NAME: width-chars
#PARENT: Gtk.Label
#COMMENT: The desired width of the label, in characters. If this property is set to
-1, the width will be calculated automatically.

See the section on [text layout][label-text-layout]
for details of how #GtkLabel:width-chars and #GtkLabel:max-width-chars
determine the width of ellipsized and wrapped labels.
#NAME: xthickness
#PARENT: Gtk.Style
#COMMENT: Thickness in X direction
#NAME: get_state_flags
#PARENT: Gtk.Widget.get_state_flags
#COMMENT: The state flags for widget
#NAME: add
#PARENT: Gtk.Container
#COMMENT: Adds @widget to @container. Typically used for simple containers
such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
layout containers such as #GtkBox or #GtkGrid, this function will
pick default packing parameters that may not be correct.  So
consider functions such as gtk_box_pack_start() and
gtk_grid_attach() as an alternative to gtk_container_add() in
those cases. A widget may be added to only one container at a time;
you can’t place the same widget inside two different containers.

Note that some containers, such as #GtkScrolledWindow or #GtkListBox,
may add intermediate children between the added widget and the
container.
#NAME: remove_ui
#PARENT: Gtk.UIManager
#COMMENT: Unmerges the part of @manager's content identified by @merge_id.
#NAME: accelerator
#PARENT: Gtk.ToggleActionEntry
#COMMENT: The accelerator for the action, in the format understood by
 gtk_accelerator_parse().
#NAME: set_spacing
#PARENT: Gtk.Expander
#COMMENT: Sets the spacing field of @expander, which is the number of
pixels to place between expander and the child.
#NAME: is_local
#PARENT: Gtk.RecentInfo.is_local
#COMMENT: %TRUE if the resource is local
#NAME: new
#PARENT: Gtk.ToggleButton.new
#COMMENT: a new toggle button.
#NAME: group
#PARENT: Gtk.ToolItemGroup.get_drop_item.ToolItem
#COMMENT: a #GtkToolItemGroup
#NAME: action
#PARENT: Gtk.Action.get_visible_horizontal.gboolean
#COMMENT: a #GtkAction
#NAME: get_reserve_toggle_size
#PARENT: Gtk.Menu.get_reserve_toggle_size
#COMMENT: Whether the menu reserves toggle space
#NAME: name
#PARENT: Gtk.WidgetClass.bind_template_child_full.none
#COMMENT: The “id” of the child defined in the template XML
#NAME: retrieve-surrounding
#PARENT: Gtk.IMContext.retrieve-surrounding
#COMMENT: %TRUE if the signal was handled.
#NAME: new
#PARENT: Gtk.CellRendererSpinner.new
#COMMENT: a new #GtkCellRenderer
#NAME: y
#PARENT: Gtk.TextView.get_line_at_y.none
#COMMENT: a y coordinate
#NAME: connect-proxy
#PARENT: Gtk.UIManager
#COMMENT: The ::connect-proxy signal is emitted after connecting a proxy to
an action in the group.

This is intended for simple customizations for which a custom action
class would be too clumsy, e.g. showing tooltips for menuitems in the
statusbar.
#NAME: get_popup_fixed_width
#PARENT: Gtk.ComboBox
#COMMENT: Gets whether the popup uses a fixed width matching
the allocated width of the combo box.
#NAME: STOCK_DIALOG_INFO
#PARENT: Gtk
#COMMENT: The “Information” item and icon.
#NAME: priority
#PARENT: Gtk.StyleContext.add_provider_for_screen.none
#COMMENT: the priority of the style provider. The lower
           it is, the earlier it will be used in the style
           construction. Typically this will be in the range
           between %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK and
           %GTK_STYLE_PROVIDER_PRIORITY_USER
#NAME: iter
#PARENT: Gtk.TextBuffer.insert_range.none
#COMMENT: a position in @buffer
#NAME: get_size
#PARENT: Gtk.Window
#COMMENT: Obtains the current size of @window. If @window is not onscreen,
it returns the size GTK+ will suggest to the
[window manager][gtk-X11-arch]
for the initial window
size (but this is not reliably the same as the size the window
manager will actually select). The size obtained by
gtk_window_get_size() is the last size received in a
#GdkEventConfigure, that is, GTK+ uses its locally-stored size,
rather than querying the X server for the size. As a result, if you
call gtk_window_resize() then immediately call
gtk_window_get_size(), the size won’t have taken effect yet. After
the window manager processes the resize request, GTK+ receives
notification that the size has changed via a configure event, and
the size of the window gets updated.

Note 1: Nearly any use of this function creates a race condition,
because the size of the window may change between the time that you
get the size and the time that you perform some action assuming
that size is the current size. To avoid race conditions, connect to
“configure-event” on the window and adjust your size-dependent
state to match the size delivered in the #GdkEventConfigure.

Note 2: The returned size does not include the
size of the window manager decorations (aka the window frame or
border). Those are not drawn by GTK+ and GTK+ has no reliable
method of determining their size.

Note 3: If you are getting a window size in order to position
the window onscreen, there may be a better way. The preferred
way is to simply set the window’s semantic type with
gtk_window_set_type_hint(), which allows the window manager to
e.g. center dialogs. Also, if you set the transient parent of
dialogs with gtk_window_set_transient_for() window managers
will often center the dialog over its parent window. It's
much preferred to let the window manager handle these
things rather than doing it yourself, because all apps will
behave consistently and according to user prefs if the window
manager handles it. Also, the window manager can take the size
of the window decorations/border into account, while your
application cannot.

In any case, if you insist on application-specified window
positioning, there’s still a better way than
doing it yourself - gtk_window_set_position() will frequently
handle the details for you.
#NAME: xy0_gap
#PARENT: Gtk.render_frame_gap.none
#COMMENT: initial coordinate (X or Y depending on @gap_side) for the gap
#NAME: sibling
#PARENT: Gtk.CellArea.add_focus_sibling.none
#COMMENT: the #GtkCellRenderer to add to @renderer’s focus area
#NAME: order
#PARENT: Gtk.TreeSortableIface.set_sort_column_id.set_sort_column_id.none
#COMMENT: The sort order of the column
#NAME: src_widget
#PARENT: Gtk.Widget.translate_coordinates.gboolean
#COMMENT: a #GtkWidget
#NAME: load_icon
#PARENT: Gtk.IconInfo
#COMMENT: Renders an icon previously looked up in an icon theme using
gtk_icon_theme_lookup_icon(); the size will be based on the size
passed to gtk_icon_theme_lookup_icon(). Note that the resulting
pixbuf may not be exactly this size; an icon theme may have icons
that differ slightly from their nominal sizes, and in addition GTK+
will avoid scaling icons that it considers sufficiently close to the
requested size or for which the source image would have to be scaled
up too far. (This maintains sharpness.). This behaviour can be changed
by passing the %GTK_ICON_LOOKUP_FORCE_SIZE flag when obtaining
the #GtkIconInfo. If this flag has been specified, the pixbuf
returned by this function will be scaled to the exact size.
#NAME: get_app_menu
#PARENT: Gtk.Application
#COMMENT: Returns the menu model that has been set with
gtk_application_set_app_menu().
#NAME: set_resize_toplevel
#PARENT: Gtk.Expander
#COMMENT: Sets whether the expander will resize the toplevel widget
containing the expander upon resizing and collpasing.
#NAME: load_fd
#PARENT: Gtk.AccelMap
#COMMENT: Filedescriptor variant of gtk_accel_map_load().

Note that the file descriptor will not be closed by this function.
#NAME: info
#PARENT: Gtk.RecentInfo.is_local.gboolean
#COMMENT: a #GtkRecentInfo
#NAME: set_focus_chain
#PARENT: Gtk.Container
#COMMENT: Sets a focus chain, overriding the one computed automatically by GTK+.

In principle each widget in the chain should be a descendant of the
container, but this is not enforced by this method, since it’s allowed
to set the focus chain before you pack the widgets, or have a widget
in the chain that isn’t always packed. The necessary checks are done
when the focus chain is actually traversed.
#NAME: PrintOperation
#PARENT: Gtk
#COMMENT: GtkPrintOperation is the high-level, portable printing API.
It looks a bit different than other GTK+ dialogs such as the
#GtkFileChooser, since some platforms don’t expose enough
infrastructure to implement a good print dialog. On such
platforms, GtkPrintOperation uses the native print dialog.
On platforms which do not provide a native print dialog, GTK+
uses its own, see #GtkPrintUnixDialog.

The typical way to use the high-level printing API is to create
a GtkPrintOperation object with gtk_print_operation_new() when
the user selects to print. Then you set some properties on it,
e.g. the page size, any #GtkPrintSettings from previous print
operations, the number of pages, the current page, etc.

Then you start the print operation by calling gtk_print_operation_run().
It will then show a dialog, let the user select a printer and
options. When the user finished the dialog various signals will
be emitted on the #GtkPrintOperation, the main one being
#GtkPrintOperation::draw-page, which you are supposed to catch
and render the page on the provided #GtkPrintContext using Cairo.

# The high-level printing API

|[<!-- language="C" -->
static GtkPrintSettings *settings = NULL;

static void
do_print (void)
{
  GtkPrintOperation *print;
  GtkPrintOperationResult res;

  print = gtk_print_operation_new ();

  if (settings != NULL)
    gtk_print_operation_set_print_settings (print, settings);

  g_signal_connect (print, "begin_print", G_CALLBACK (begin_print), NULL);
  g_signal_connect (print, "draw_page", G_CALLBACK (draw_page), NULL);

  res = gtk_print_operation_run (print, GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
                                 GTK_WINDOW (main_window), NULL);

  if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
    {
      if (settings != NULL)
        g_object_unref (settings);
      settings = g_object_ref (gtk_print_operation_get_print_settings (print));
    }

  g_object_unref (print);
}
]|

By default GtkPrintOperation uses an external application to do
print preview. To implement a custom print preview, an application
must connect to the preview signal. The functions
gtk_print_operation_preview_render_page(),
gtk_print_operation_preview_end_preview() and
gtk_print_operation_preview_is_selected()
are useful when implementing a print preview.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_title.utf8
#COMMENT: a #GtkStatusIcon
#NAME: gesture
#PARENT: Gtk.GestureRotate.get_angle_delta.gdouble
#COMMENT: a #GtkGestureRotate
#NAME: state
#PARENT: Gtk.StyleContext.get_margin.none
#COMMENT: state to retrieve the border for
#NAME: swap
#PARENT: Gtk.TreeStore
#COMMENT: Swaps @a and @b in the same level of @tree_store. Note that this function
only works with unsorted stores.
#NAME: object
#PARENT: Gtk.accel_groups_activate.gboolean
#COMMENT: the #GObject, usually a #GtkWindow, on which
    to activate the accelerator
#NAME: values
#PARENT: Gtk.ListStore.set_valuesv.none
#COMMENT: an array of GValues
#NAME: get_paper_size
#PARENT: Gtk.PageSetup
#COMMENT: Gets the paper size of the #GtkPageSetup.
#NAME: start_path
#PARENT: Gtk.TreeSelection.select_range.none
#COMMENT: The initial node of the range.
#NAME: accel_path
#PARENT: Gtk.AccelMap.lookup_entry.gboolean
#COMMENT: a valid accelerator path
#NAME: popdown
#PARENT: Gtk.Menu
#COMMENT: Removes the menu from the screen.
#NAME: text_view
#PARENT: Gtk.TextView.get_right_margin.gint
#COMMENT: a #GtkTextView
#NAME: ratio
#PARENT: Gtk.AspectFrame.new.Widget
#COMMENT: The desired aspect ratio.
#NAME: set_surrounding
#PARENT: Gtk.IMContext
#COMMENT: Sets surrounding context around the insertion point and preedit
string. This function is expected to be called in response to the
GtkIMContext::retrieve_surrounding signal, and will likely have no
effect if called at other times.
#NAME: PageOrientation
#PARENT: Gtk
#COMMENT: See also gtk_print_settings_set_orientation().
#NAME: column
#PARENT: Gtk.Table.set_col_spacing.none
#COMMENT: the column whose spacing should be changed.
#NAME: ref
#PARENT: Gtk.TextAttributes.ref
#COMMENT: the #GtkTextAttributes that were passed in
#NAME: context
#PARENT: Gtk.render_icon_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: a #GtkStyleContext
#NAME: CellCallback
#PARENT: Gtk
#COMMENT: The type of the callback functions used for iterating over
the cell renderers of a #GtkCellArea, see gtk_cell_area_foreach().
#NAME: info_bar
#PARENT: Gtk.InfoBar.set_show_close_button.none
#COMMENT: a #GtkInfoBar
#NAME: digits
#PARENT: Gtk.Scale.set_digits.none
#COMMENT: the number of decimal places to display,
    e.g. use 1 to display 1.0, 2 to display 1.00, etc
#NAME: button-press-event
#PARENT: Gtk.StatusIcon
#COMMENT: The ::button-press-event signal will be emitted when a button
(typically from a mouse) is pressed.

Whether this event is emitted is platform-dependent.  Use the ::activate
and ::popup-menu signals in preference.
#NAME: forward_sentence_end
#PARENT: Gtk.TextIter
#COMMENT: Moves forward to the next sentence end. (If @iter is at the end of
a sentence, moves to the next end of sentence.)  Sentence
boundaries are determined by Pango and should be correct for nearly
any language (if not, the correct fix would be to the Pango text
boundary algorithms).
#NAME: sort_func
#PARENT: Gtk.TreeSortableIface.set_sort_func.set_sort_func.none
#COMMENT: The comparison function
#NAME: filter
#PARENT: Gtk.FileFilter.add_pattern.none
#COMMENT: a #GtkFileFilter
#NAME: copy
#PARENT: Gtk.IconInfo.copy
#COMMENT: the new GtkIconInfo
#NAME: size
#PARENT: Gtk.IconSet.render_icon.GdkPixbuf.Pixbuf
#COMMENT: icon size. A size of (GtkIconSize)-1
       means render at the size of the source and don’t scale.
#NAME: quark
#PARENT: Gtk.PrintError.quark
#COMMENT: The error quark used for #GtkPrintOperation errors.
#NAME: has_group
#PARENT: Gtk.RecentInfo
#COMMENT: Checks whether @group_name appears inside the groups
registered for the recently used item @info.
#NAME: get_icon_name
#PARENT: Gtk.ToolButton
#COMMENT: Returns the name of the themed icon for the tool button,
see gtk_tool_button_set_icon_name().
#NAME: argc
#PARENT: Gtk.parse_args.gboolean
#COMMENT: a pointer to the number of command line arguments
#NAME: n_targets
#PARENT: Gtk.targets_include_image.gboolean
#COMMENT: the length of @targets
#NAME: renderer
#PARENT: Gtk.CellArea.focus-changed.none
#COMMENT: the #GtkCellRenderer that has focus
#NAME: offset
#PARENT: Gtk.Gradient.add_color_stop.none
#COMMENT: offset for the color stop
#NAME: actionable
#PARENT: Gtk.ActionableInterface.set_action_target_value.set_action_target_value.none
#COMMENT: a #GtkActionable widget
#NAME: chooser
#PARENT: Gtk.FileChooser.get_preview_file.Gio.File
#COMMENT: a #GtkFileChooser
#NAME: vertical
#PARENT: Gtk.SizeGroupMode
#COMMENT: group affects vertical requisition
#NAME: row_expanded
#PARENT: Gtk.TreeView
#COMMENT: Returns %TRUE if the node pointed to by @path is expanded in @tree_view.
#NAME: event
#PARENT: Gtk.Widget.event.gboolean
#COMMENT: the #GdkEvent which triggered this signal
#NAME: row_drop_possible
#PARENT: Gtk.TreeDragDestIface.row_drop_possible.row_drop_possible
#COMMENT: %TRUE if a drop is possible before @dest_path
#NAME: intent
#PARENT: Gtk.Widget.get_modifier_mask.Gdk.ModifierType
#COMMENT: the use case for the modifier mask
#NAME: add_toggle_actions
#PARENT: Gtk.ActionGroup
#COMMENT: This is a convenience function to create a number of toggle actions and add them
to the action group.

The “activate” signals of the actions are connected to the callbacks
and their accel paths are set to `<Actions>/group-name/action-name`.
#NAME: collapsed
#PARENT: Gtk.ToolItemGroup.set_collapsed.none
#COMMENT: whether the @group should be collapsed or expanded
#NAME: sortable
#PARENT: Gtk.TreeSortableIface.has_default_sort_func.has_default_sort_func.gboolean
#COMMENT: A #GtkTreeSortable
#NAME: post-activate
#PARENT: Gtk.ActionGroup
#COMMENT: The ::post-activate signal is emitted just after the @action in the
@action_group is activated

This is intended for #GtkUIManager to proxy the signal and provide global
notification just after any action is activated.
#NAME: run
#PARENT: Gtk.PrintOperation
#COMMENT: Runs the print operation, by first letting the user modify
print settings in the print dialog, and then print the document.

Normally that this function does not return until the rendering of all
pages is complete. You can connect to the
#GtkPrintOperation::status-changed signal on @op to obtain some
information about the progress of the print operation.
Furthermore, it may use a recursive mainloop to show the print dialog.

If you call gtk_print_operation_set_allow_async() or set the
#GtkPrintOperation:allow-async property the operation will run
asynchronously if this is supported on the platform. The
#GtkPrintOperation::done signal will be emitted with the result of the
operation when the it is done (i.e. when the dialog is canceled, or when
the print succeeds or fails).
|[<!-- language="C" -->
if (settings != NULL)
  gtk_print_operation_set_print_settings (print, settings);
  
if (page_setup != NULL)
  gtk_print_operation_set_default_page_setup (print, page_setup);
  
g_signal_connect (print, "begin-print",
                  G_CALLBACK (begin_print), &data);
g_signal_connect (print, "draw-page",
                  G_CALLBACK (draw_page), &data);
 
res = gtk_print_operation_run (print,
                               GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
                               parent,
                               &error);
 
if (res == GTK_PRINT_OPERATION_RESULT_ERROR)
 {
   error_dialog = gtk_message_dialog_new (GTK_WINDOW (parent),
  			                     GTK_DIALOG_DESTROY_WITH_PARENT,
					     GTK_MESSAGE_ERROR,
					     GTK_BUTTONS_CLOSE,
					     "Error printing file:\n%s",
					     error->message);
   g_signal_connect (error_dialog, "response",
                     G_CALLBACK (gtk_widget_destroy), NULL);
   gtk_widget_show (error_dialog);
   g_error_free (error);
 }
else if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
 {
   if (settings != NULL)
g_object_unref (settings);
   settings = g_object_ref (gtk_print_operation_get_print_settings (print));
 }
]|

Note that gtk_print_operation_run() can only be called once on a
given #GtkPrintOperation.
#NAME: begins_tag
#PARENT: Gtk.TextIter
#COMMENT: Returns %TRUE if @tag is toggled on at exactly this point. If @tag
is %NULL, returns %TRUE if any tag is toggled on at this point.

Note that if gtk_text_iter_begins_tag() returns %TRUE, it means that @iter is
at the beginning of the tagged range, and that the
character at @iter is inside the tagged range. In other
words, unlike gtk_text_iter_ends_tag(), if gtk_text_iter_begins_tag() returns
%TRUE, gtk_text_iter_has_tag() will also return %TRUE for the same
parameters.
#NAME: CellRendererProgress
#PARENT: Gtk
#COMMENT: #GtkCellRendererProgress renders a numeric value as a progress par in a cell.
Additionally, it can display a text on top of the progress bar.

The #GtkCellRendererProgress cell renderer was added in GTK+ 2.6.
#NAME: end_pos
#PARENT: Gtk.Editable.get_selection_bounds.gboolean
#COMMENT: location to store the end position, or %NULL
#NAME: get_border_width
#PARENT: Gtk.Container.get_border_width
#COMMENT: the current border width
#NAME: get_icon_name
#PARENT: Gtk.IconSource.get_icon_name
#COMMENT: icon name. This string must not be modified or freed.
#NAME: get_value
#PARENT: Gtk.SpinButton
#COMMENT: Get the value in the @spin_button.
#NAME: property
#PARENT: Gtk.StyleContext.get_section.CssSection
#COMMENT: style property name
#NAME: filter_iter
#PARENT: Gtk.TreeModelFilter.convert_iter_to_child_iter.none
#COMMENT: A valid #GtkTreeIter pointing to a row on @filter.
#NAME: set_forward_page_func
#PARENT: Gtk.Assistant
#COMMENT: Sets the page forwarding function to be @page_func.

This function will be used to determine what will be
the next page when the user presses the forward button.
Setting @page_func to %NULL will make the assistant to
use the default forward function, which just goes to the
next visible page.
#NAME: window
#PARENT: Gtk.Application.window-removed.none
#COMMENT: the #GtkWindow that is being removed
#NAME: STOCK_NETWORK
#PARENT: Gtk
#COMMENT: The “Network” item and icon.
#NAME: TreeViewMappingFunc
#PARENT: Gtk
#COMMENT: Function used for gtk_tree_view_map_expanded_rows().
#NAME: property_value
#PARENT: Gtk.rc_property_parse_color.gboolean
#COMMENT: a #GValue which must hold #GdkColor values.
#NAME: get_visible_child_name
#PARENT: Gtk.Stack
#COMMENT: Returns the name of the currently visible child of @stack, or
%NULL if there is no visible child.
#NAME: chooser
#PARENT: Gtk.FileChooser.get_current_folder.filename
#COMMENT: a #GtkFileChooser
#NAME: load_symbolic_finish
#PARENT: Gtk.IconInfo
#COMMENT: Finishes an async icon load, see gtk_icon_info_load_symbolic_async().
#NAME: dialog
#PARENT: Gtk.Dialog.add_button.Widget
#COMMENT: a #GtkDialog
#NAME: context
#PARENT: Gtk.render_focus.none
#COMMENT: a #GtkStyleContext
#NAME: section
#PARENT: Gtk.CssSection.get_start_position.guint
#COMMENT: the section
#NAME: cell_area
#PARENT: Gtk.CellArea.activate_cell.gboolean
#COMMENT: the #GdkRectangle in @widget relative coordinates
            of @renderer for the current row.
#NAME: info
#PARENT: Gtk.TargetEntry.new.TargetEntry
#COMMENT: an ID that will be passed back to the application
#NAME: modify_fg
#PARENT: Gtk.Widget
#COMMENT: Sets the foreground color for a widget in a particular state.

All other style values are left untouched.
See also gtk_widget_modify_style().
#NAME: buffer
#PARENT: Gtk.EntryBuffer.get_text.utf8
#COMMENT: a #GtkEntryBuffer
#NAME: expanded
#PARENT: Gtk.Expander.set_expanded.none
#COMMENT: whether the child widget is revealed
#NAME: prepend_index
#PARENT: Gtk.TreePath
#COMMENT: Prepends a new index to a path.

As a result, the depth of the path is increased.
#NAME: area
#PARENT: Gtk.GLArea.get_required_version.none
#COMMENT: a #GtkGLArea
#NAME: secondary-icon-name
#PARENT: Gtk.Entry
#COMMENT: The icon name to use for the secondary icon for the entry.
#NAME: draw-sensitive
#PARENT: Gtk.CellView
#COMMENT: Whether all cells should be draw as sensitive for this view regardless
of the actual cell properties (used to make menus with submenus appear
sensitive when the items in submenus might be insensitive).

since 3.0
#NAME: set_adjustment
#PARENT: Gtk.ListBox
#COMMENT: Sets the adjustment (if any) that the widget uses to
for vertical scrolling. For instance, this is used
to get the page size for PageUp/Down key handling.

In the normal case when the @box is packed inside
a #GtkScrolledWindow the adjustment from that will
be picked up automatically, so there is no need
to manually do that.
#NAME: child
#PARENT: Gtk.Paned.pack1.none
#COMMENT: the child to add
#NAME: iter
#PARENT: Gtk.TreeModel.iter_children.gboolean
#COMMENT: the new #GtkTreeIter-struct to be set to the child
#NAME: section
#PARENT: Gtk.CssProvider.parsing-error.none
#COMMENT: section the error happened in
#NAME: wait_for_rich_text
#PARENT: Gtk.Clipboard.wait_for_rich_text
#COMMENT: a
              newly-allocated binary block of data which must be
              freed with g_free(), or %NULL if retrieving the
              selection data failed. (This could happen for various
              reasons, in particular if the clipboard was empty or
              if the contents of the clipboard could not be
              converted into text form.)
#NAME: top
#PARENT: Gtk.Border
#COMMENT: The width of the top border
#NAME: prepend
#PARENT: Gtk.ComboBoxText
#COMMENT: Prepends @text to the list of strings stored in @combo_box.
If @id is non-%NULL then it is used as the ID of the row.

This is the same as calling gtk_combo_box_text_insert() with a
position of 0.
#NAME: spin_button
#PARENT: Gtk.SpinButton.set_increments.none
#COMMENT: a #GtkSpinButton
#NAME: get_accessible
#PARENT: Gtk.Widget.get_accessible
#COMMENT: the #AtkObject associated with @widget
#NAME: insert_text
#PARENT: Gtk.ComboBoxText
#COMMENT: Inserts @text at @position in the list of strings stored in @combo_box.

If @position is negative then @text is appended.

This is the same as calling gtk_combo_box_text_insert() with a %NULL
ID string.
#NAME: name
#PARENT: Gtk.FileFilter.set_name.none
#COMMENT: the human-readable-name for the filter, or %NULL
  to remove any existing name.
#NAME: start_editing
#PARENT: Gtk.TreeView.set_cursor_on_cell.none
#COMMENT: %TRUE if the specified cell should start being edited.
#NAME: set_name
#PARENT: Gtk.StatusIcon
#COMMENT: Sets the name of this tray icon.
This should be a string identifying this icon. It is may be
used for sorting the icons in the tray and will not be shown to
the user.
#NAME: box
#PARENT: Gtk.FlowBox.invalidate_sort.none
#COMMENT: a #GtkFlowBox
#NAME: uri
#PARENT: Gtk.FileChooser.set_current_folder_uri.gboolean
#COMMENT: the URI for the new current folder
#NAME: argv
#PARENT: Gtk.parse_args.gboolean
#COMMENT: a pointer to the array of
    command line arguments
#NAME: widget
#PARENT: Gtk.Widget.set_visual.none
#COMMENT: a #GtkWidget
#NAME: pbar
#PARENT: Gtk.ProgressBar.set_show_text.none
#COMMENT: a #GtkProgressBar
#NAME: setting
#PARENT: Gtk.Window.set_accept_focus.none
#COMMENT: %TRUE to let this window receive input focus
#NAME: position
#PARENT: Gtk.EntryBuffer.insert_text.guint
#COMMENT: the position at which to insert text.
#NAME: get_id_column
#PARENT: Gtk.ComboBox
#COMMENT: Returns the column which @combo_box is using to get string IDs
for values from.
#NAME: logo-icon-name
#PARENT: Gtk.AboutDialog
#COMMENT: A named icon to use as the logo for the about box. This property
overrides the #GtkAboutDialog:logo property.
#NAME: len
#PARENT: Gtk.TextBuffer.set_text.none
#COMMENT: length of @text in bytes
#NAME: get_mode
#PARENT: Gtk.TreeSelection.get_mode
#COMMENT: the current selection mode
#NAME: user_data
#PARENT: Gtk.TreeSortable.set_default_sort_func.none
#COMMENT: User data to pass to @sort_func, or %NULL
#NAME: get_ancestor
#PARENT: Gtk.Widget
#COMMENT: Gets the first ancestor of @widget with type @widget_type. For example,
`gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
the first #GtkBox that’s an ancestor of @widget. No reference will be
added to the returned widget; it should not be unreferenced. See note
about checking for a toplevel #GtkWindow in the docs for
gtk_widget_get_toplevel().

Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
considers @widget to be an ancestor of itself.
#NAME: grab-notify
#PARENT: Gtk.Widget
#COMMENT: The ::grab-notify signal is emitted when a widget becomes
shadowed by a GTK+ grab (not a pointer or keyboard grab) on
another widget, or when it becomes unshadowed due to a grab
being removed.

A widget is shadowed by a gtk_grab_add() when the topmost
grab widget in the grab stack of its window group is not
its ancestor.
#NAME: handle_event
#PARENT: Gtk.EventController.handle_event
#COMMENT: %TRUE if the event was potentially useful to trigger the
         controller action
#NAME: get_vadjustment
#PARENT: Gtk.Layout
#COMMENT: This function should only be called after the layout has been
placed in a #GtkScrolledWindow or otherwise configured for
scrolling. It returns the #GtkAdjustment used for communication
between the vertical scrollbar and @layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.
#NAME: icon_pos
#PARENT: Gtk.Entry.get_icon_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: Icon position
#NAME: targets_include_text
#PARENT: Gtk.SelectionData.targets_include_text
#COMMENT: %TRUE if @selection_data holds a list of targets,
  and a suitable target for text is included, otherwise %FALSE.
#NAME: expander
#PARENT: Gtk.Expander.set_expanded.none
#COMMENT: a #GtkExpander
#NAME: start_pos
#PARENT: Gtk.Editable.get_chars.utf8
#COMMENT: start of text
#NAME: delete_surrounding
#PARENT: Gtk.IMContext.delete_surrounding
#COMMENT: %TRUE if the signal was handled.
#NAME: DialogFlags
#PARENT: Gtk
#COMMENT: Flags used to influence dialog construction.
#NAME: expand
#PARENT: Gtk.ButtonBoxStyle
#COMMENT: Buttons expand to fill the box. Since 3.12.
#NAME: draw_insertion_cursor
#PARENT: Gtk
#COMMENT: Draws a text caret on @cr at @location. This is not a style function
but merely a convenience function for drawing the standard cursor shape.
#NAME: DrawingArea
#PARENT: Gtk
#COMMENT: The #GtkDrawingArea widget is used for creating custom user interface
elements. It’s essentially a blank widget; you can draw on it. After
creating a drawing area, the application may want to connect to:

- Mouse and button press signals to respond to input from
  the user. (Use gtk_widget_add_events() to enable events
  you wish to receive.)

- The #GtkWidget::realize signal to take any necessary actions
  when the widget is instantiated on a particular display.
  (Create GDK resources in response to this signal.)

- The #GtkWidget::size-allocate signal to take any necessary
  actions when the widget changes size.

- The #GtkWidget::draw signal to handle redrawing the
  contents of the widget.

The following code portion demonstrates using a drawing
area to display a circle in the normal widget foreground
color.

Note that GDK automatically clears the exposed area to the
background color before sending the expose event, and that
drawing is implicitly clipped to the exposed area.

## Simple GtkDrawingArea usage

|[<!-- language="C" -->
gboolean
draw_callback (GtkWidget *widget, cairo_t *cr, gpointer data)
{
  guint width, height;
  GdkRGBA color;

  width = gtk_widget_get_allocated_width (widget);
  height = gtk_widget_get_allocated_height (widget);
  cairo_arc (cr,
             width / 2.0, height / 2.0,
             MIN (width, height) / 2.0,
             0, 2 * G_PI);

  gtk_style_context_get_color (gtk_widget_get_style_context (widget),
                               0,
                               &color);
  gdk_cairo_set_source_rgba (cr, &color);

  cairo_fill (cr);

 return FALSE;
}
[...]
  GtkWidget *drawing_area = gtk_drawing_area_new ();
  gtk_widget_set_size_request (drawing_area, 100, 100);
  g_signal_connect (G_OBJECT (drawing_area), "draw",
                    G_CALLBACK (draw_callback), NULL);
]|

Draw signals are normally delivered when a drawing area first comes
onscreen, or when it’s covered by another window and then uncovered.
You can also force an expose event by adding to the “damage region”
of the drawing area’s window; gtk_widget_queue_draw_area() and
gdk_window_invalidate_rect() are equally good ways to do this.
You’ll then get a draw signal for the invalid region.

The available routines for drawing are documented on the
[GDK Drawing Primitives][gdk3-Cairo-Interaction] page
and the cairo documentation.

To receive mouse events on a drawing area, you will need to enable
them with gtk_widget_add_events(). To receive keyboard events, you
will need to set the “can-focus” property on the drawing area, and you
should probably draw some user-visible indication that the drawing
area is focused. Use gtk_widget_has_focus() in your expose event
handler to decide whether to draw the focus indicator. See
gtk_render_focus() for one way to draw focus.
#NAME: set_accessible_type
#PARENT: Gtk.CellRendererClass
#COMMENT: Sets the type to be used for creating accessibles for cells rendered by
cell renderers of @renderer_class. Note that multiple accessibles will
be created.

This function should only be called from class init functions of cell
renderers.
#NAME: event
#PARENT: Gtk.propagate_event.none
#COMMENT: an event
#NAME: chars
#PARENT: Gtk.EntryBufferClass.insert_text.insert_text.guint
#COMMENT: the text to insert into the buffer.
#NAME: completion
#PARENT: Gtk.EntryCompletion.insert_action_text.none
#COMMENT: a #GtkEntryCompletion
#NAME: n_pages
#PARENT: Gtk.PrintOperation.set_n_pages.none
#COMMENT: the number of pages
#NAME: chooser
#PARENT: Gtk.FileChooser.get_filename.filename
#COMMENT: a #GtkFileChooser
#NAME: gtk-print-preview-command
#PARENT: Gtk.Settings
#COMMENT: A command to run for displaying the print preview. The command
should contain a `%f` placeholder, which will get replaced by
the path to the pdf file. The command may also contain a `%s`
placeholder, which will get replaced by the path to a file
containing the print settings in the format produced by
gtk_print_settings_to_file().

The preview application is responsible for removing the pdf file
and the print settings file when it is done.
#NAME: set_tabs
#PARENT: Gtk.TextView
#COMMENT: Sets the default tab stops for paragraphs in @text_view.
Tags in the buffer may override the default.
#NAME: remove
#PARENT: Gtk.ListStore
#COMMENT: Removes the given row from the list store.  After being removed,
@iter is set to be the next valid row, or invalidated if it pointed
to the last row in @list_store.
#NAME: setup
#PARENT: Gtk.PageSetup.get_bottom_margin.gdouble
#COMMENT: a #GtkPageSetup
#NAME: add_filter
#PARENT: Gtk.RecentChooser
#COMMENT: Adds @filter to the list of #GtkRecentFilter objects held by @chooser.

If no previous filter objects were defined, this function will call
gtk_recent_chooser_set_filter().
#NAME: append_column
#PARENT: Gtk.TreeView.append_column
#COMMENT: The number of columns in @tree_view after appending.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.clicked.none
#COMMENT: a #GtkTreeViewColumn
#NAME: get_dpi_x
#PARENT: Gtk.PrintContext
#COMMENT: Obtains the horizontal resolution of the #GtkPrintContext,
in dots per inch.
#NAME: get_ellipsize
#PARENT: Gtk.ToolItemGroup
#COMMENT: Gets the ellipsization mode of @group.
#NAME: palette
#PARENT: Gtk.ToolPalette.get_drop_item.ToolItem
#COMMENT: a #GtkToolPalette
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_sort_indicator.gboolean
#COMMENT: a #GtkTreeViewColumn
#NAME: flags
#PARENT: Gtk.Calendar.set_display_options.none
#COMMENT: the display options to set
#NAME: var_args
#PARENT: Gtk.Container.child_set_valist.none
#COMMENT: a %NULL-terminated list of property names and values, starting
          with @first_prop_name
#NAME: get_dpi_y
#PARENT: Gtk.PrintContext
#COMMENT: Obtains the vertical resolution of the #GtkPrintContext,
in dots per inch.
#NAME: column
#PARENT: Gtk.IconView.set_text_column.none
#COMMENT: A column in the currently used model, or -1 to display no text
#NAME: stack
#PARENT: Gtk.Stack.set_transition_duration.none
#COMMENT: a #GtkStack
#NAME: width
#PARENT: Gtk.icon_size_lookup.gboolean
#COMMENT: location to store icon width
#NAME: scroll_to_point
#PARENT: Gtk.TreeView
#COMMENT: Scrolls the tree view such that the top-left corner of the visible
area is @tree_x, @tree_y, where @tree_x and @tree_y are specified
in tree coordinates.  The @tree_view must be realized before
this function is called.  If it isn't, you probably want to be
using gtk_tree_view_scroll_to_cell().

If either @tree_x or @tree_y are -1, then that direction isn’t scrolled.
#NAME: new
#PARENT: Gtk.Statusbar.new
#COMMENT: the new #GtkStatusbar
#NAME: target_table_new_from_list
#PARENT: Gtk
#COMMENT: This function creates an #GtkTargetEntry array that contains the
same targets as the passed %list. The returned table is newly
allocated and should be freed using gtk_target_table_free() when no
longer needed.
#NAME: res
#PARENT: Gtk.IconInfo.load_symbolic_finish.GdkPixbuf.Pixbuf
#COMMENT: a #GAsyncResult
#NAME: STYLE_CLASS_PANE_SEPARATOR
#PARENT: Gtk
#COMMENT: A CSS class for a pane separator, such as those in #GtkPaned.

Used in #GtkPaned.
#NAME: tree_store
#PARENT: Gtk.TreeStore.move_before.none
#COMMENT: A #GtkTreeStore.
#NAME: max_width
#PARENT: Gtk.TreeViewColumn.set_max_width.none
#COMMENT: The maximum width of the column in pixels, or -1.
#NAME: select_uri
#PARENT: Gtk.RecentChooser.select_uri
#COMMENT: %TRUE if @uri was found.
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_select_multiple.gboolean
#COMMENT: a #GtkRecentChooser
#NAME: iter
#PARENT: Gtk.TreeModel.get.none
#COMMENT: a row in @tree_model
#NAME: range
#PARENT: Gtk.Range.set_value.none
#COMMENT: a #GtkRange
#NAME: value-changed
#PARENT: Gtk.ScaleButton
#COMMENT: The ::value-changed signal is emitted when the value field has
changed.
#NAME: data
#PARENT: Gtk.SelectionData.set.none
#COMMENT: pointer to the data (will be copied)
#NAME: set_active
#PARENT: Gtk.Switch
#COMMENT: Changes the state of @sw to the desired one.
#NAME: cell_get
#PARENT: Gtk.CellArea
#COMMENT: Gets the values of one or more cell properties for @renderer in @area.
#NAME: get_iter_at_position
#PARENT: Gtk.TextView
#COMMENT: Retrieves the iterator pointing to the character at buffer
coordinates @x and @y. Buffer coordinates are coordinates for
the entire buffer, not just the currently-displayed portion.
If you have coordinates from an event, you have to convert
those to buffer coordinates with
gtk_text_view_window_to_buffer_coords().

Note that this is different from gtk_text_view_get_iter_at_location(),
which returns cursor locations, i.e. positions between
characters.
#NAME: keynav-failed
#PARENT: Gtk.Widget.keynav-failed
#COMMENT: %TRUE if stopping keyboard navigation is fine, %FALSE
         if the emitting widget should try to handle the keyboard
         navigation attempt in its parent container(s).
#NAME: get_cells
#PARENT: Gtk.CellLayout.get_cells
#COMMENT: 
    a list of cell renderers. The list, but not the renderers has
    been newly allocated and should be freed with g_list_free()
    when no longer needed.
#NAME: get_dest_item_at_pos
#PARENT: Gtk.IconView
#COMMENT: Determines the destination item for a given position.
#NAME: ref
#PARENT: Gtk.TargetList
#COMMENT: Increases the reference count of a #GtkTargetList by one.
#NAME: gstring
#PARENT: Gtk.rc_property_parse_flags.gboolean
#COMMENT: the #GString to be parsed
#NAME: icon_view
#PARENT: Gtk.IconView.set_reorderable.none
#COMMENT: A #GtkIconView.
#NAME: fontsel
#PARENT: Gtk.FontSelection.get_size_entry.Widget
#COMMENT: a #GtkFontSelection
#NAME: get_tab_label_text
#PARENT: Gtk.Notebook
#COMMENT: Retrieves the text of the tab label for the page containing
@child.
#NAME: forward_word_ends
#PARENT: Gtk.TextIter.forward_word_ends
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: new
#PARENT: Gtk.GestureLongPress.new
#COMMENT: a newly created #GtkGestureLongPress
#NAME: n_targets
#PARENT: Gtk.targets_include_text.gboolean
#COMMENT: the length of @targets
#NAME: path
#PARENT: Gtk.IconView.get_cell_rect.gboolean
#COMMENT: a #GtkTreePath
#NAME: edge
#PARENT: Gtk.ButtonBoxStyle
#COMMENT: Buttons are placed at the edges of the box.
#NAME: get_padding
#PARENT: Gtk.ThemingEngine
#COMMENT: Gets the padding for a given state as a #GtkBorder.
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.set_kinetic_scrolling.none
#COMMENT: a #GtkScrolledWindow
#NAME: layout
#PARENT: Gtk.paint_layout.none
#COMMENT: the layout to draw
#NAME: chooser
#PARENT: Gtk.ColorChooser.get_rgba.none
#COMMENT: a #GtkColorChooser
#NAME: get_tooltip_context
#PARENT: Gtk.IconView.get_tooltip_context
#COMMENT: whether or not the given tooltip context points to a item
#NAME: reverse_landscape
#PARENT: Gtk.PageOrientation
#COMMENT: Reverse landscape mode.
#NAME: copy
#PARENT: Gtk.TreePath
#COMMENT: Creates a new #GtkTreePath-struct as a copy of @path.
#NAME: get_hide_titlebar_when_maximized
#PARENT: Gtk.Window.get_hide_titlebar_when_maximized
#COMMENT: %TRUE if the window has requested to have its titlebar
              hidden when maximized
#NAME: resize_grip_is_visible
#PARENT: Gtk.Window
#COMMENT: Determines whether a resize grip is visible for the specified window.
#NAME: title
#PARENT: Gtk.FontChooserDialog.new.Widget
#COMMENT: Title of the dialog, or %NULL
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_spacing.gint
#COMMENT: A #GtkTreeViewColumn.
#NAME: widget
#PARENT: Gtk.WidgetClass.get_preferred_width.get_preferred_width.none
#COMMENT: a #GtkWidget instance
#NAME: action
#PARENT: Gtk.Action.set_stock_id.none
#COMMENT: a #GtkAction
#NAME: right
#PARENT: Gtk.JunctionSides
#COMMENT: Element connects on the right side.
#NAME: unit
#PARENT: Gtk.PrintSettings.set_paper_height.none
#COMMENT: the units of @height
#NAME: function
#PARENT: Gtk.TextBuffer.register_deserialize_format.Gdk.Atom
#COMMENT: the deserialize function to register
#NAME: value
#PARENT: Gtk.ThemingEngine.get_property.none
#COMMENT: return location for the property value,
        you must free this memory using g_value_unset() once you are
        done with it.
#NAME: new
#PARENT: Gtk.RecentChooserWidget
#COMMENT: Creates a new #GtkRecentChooserWidget object.  This is an embeddable widget
used to access the recently used resources list.
#NAME: set_active
#PARENT: Gtk.ToggleAction
#COMMENT: Sets the checked state on the toggle action.
#NAME: get_text_column
#PARENT: Gtk.EntryCompletion
#COMMENT: Returns the column in the model of @completion to get strings from.
#NAME: renderer
#PARENT: Gtk.CellArea.request_renderer.none
#COMMENT: the #GtkCellRenderer to request size for
#NAME: cell
#PARENT: Gtk.CellRenderer.get_request_mode.SizeRequestMode
#COMMENT: a #GtkCellRenderer    instance
#NAME: groups
#PARENT: Gtk.ToolPaletteDragTargets
#COMMENT: Support drag of groups.
#NAME: tree_store
#PARENT: Gtk.TreeStore.insert_with_valuesv.none
#COMMENT: A #GtkTreeStore
#NAME: format
#PARENT: Gtk.TextBuffer.unregister_serialize_format.none
#COMMENT: a #GdkAtom representing a registered rich text format.
#NAME: set_state_flags
#PARENT: Gtk.Widget
#COMMENT: This function is for use in widget implementations. Turns on flag
values in the current widget state (insensitive, prelighted, etc.).

This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
%GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
direction, use gtk_widget_set_direction().

It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
will be propagated down to all non-internal children if @widget is a
#GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
down to all #GtkContainer children by different means than turning on the
state flag down the hierarchy, both gtk_widget_get_state_flags() and
gtk_widget_is_sensitive() will make use of these.
#NAME: touch-only
#PARENT: Gtk.GestureSingle
#COMMENT: Whether the gesture handles only touch events.
#NAME: action
#PARENT: Gtk.ActionGroup.add_action.none
#COMMENT: an action
#NAME: set_use_markup
#PARENT: Gtk.Expander
#COMMENT: Sets whether the text of the label contains markup in
[Pango’s text markup language][PangoMarkupFormat].
See gtk_label_set_markup().
#NAME: create_pango_context
#PARENT: Gtk.PrintContext
#COMMENT: Creates a new #PangoContext that can be used with the
#GtkPrintContext.
#NAME: get_char_count
#PARENT: Gtk.TextBuffer
#COMMENT: Gets the number of characters in the buffer; note that characters
and bytes are not the same, you can’t e.g. expect the contents of
the buffer in string form to be this many bytes long. The character
count is cached, so this function is very fast.
#NAME: TreeSelectionForeachFunc
#PARENT: Gtk
#COMMENT: A function used by gtk_tree_selection_selected_foreach() to map all
selected rows.  It will be called on every selected row in the view.
#NAME: get_tearoff_state
#PARENT: Gtk.Menu.get_tearoff_state
#COMMENT: %TRUE if the menu is currently torn off.
#NAME: property
#PARENT: Gtk.StyleProperties.set_property.none
#COMMENT: styling property to set
#NAME: group
#PARENT: Gtk.ToolItemGroup.set_label.none
#COMMENT: a #GtkToolItemGroup
#NAME: context
#PARENT: Gtk.Widget.drag-failed.gboolean
#COMMENT: the drag context
#NAME: set_page_set
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_PAGE_SET.
#NAME: get_visible_horizontal
#PARENT: Gtk.ToolItem.get_visible_horizontal
#COMMENT: %TRUE if @tool_item is visible on toolbars that are
docked horizontally.
#NAME: order
#PARENT: Gtk.TreeSortable.set_sort_column_id.none
#COMMENT: The sort order of the column
#NAME: get_base_scale
#PARENT: Gtk.IconInfo.get_base_scale
#COMMENT: the base scale
#NAME: widget
#PARENT: Gtk.Widget.get_valign.Align
#COMMENT: a #GtkWidget
#NAME: text
#PARENT: Gtk.TextBuffer.insert.none
#COMMENT: text in UTF-8 format
#NAME: set_title
#PARENT: Gtk.Window
#COMMENT: Sets the title of the #GtkWindow. The title of a window will be
displayed in its title bar; on the X Window System, the title bar
is rendered by the [window manager][gtk-X11-arch],
so exactly how the title appears to users may vary
according to a user’s exact configuration. The title should help a
user distinguish this window from other windows they may have
open. A good title might include the application name and current
document filename, for example.
#NAME: get_locale_direction
#PARENT: Gtk.get_locale_direction
#COMMENT: the #GtkTextDirection of the current locale
#NAME: set_previous_color
#PARENT: Gtk.ColorSelection
#COMMENT: Sets the “previous” color to be @color.

This function should be called with some hesitations,
as it might seem confusing to have that color change.
Calling gtk_color_selection_set_current_color() will also
set this color the first time it is called.
#NAME: get_selected_rows
#PARENT: Gtk.ListBox
#COMMENT: Creates a list of all selected children.
#NAME: gtk-decoration-layout
#PARENT: Gtk.Settings
#COMMENT: This setting determines which buttons should be put in the
titlebar of client-side decorated windows, and whether they
should be placed at the left of right.

The format of the string is button names, separated by commas.
A colon separates the buttons that should appear on the left
from those on the right. Recognized button names are minimize,
maximize, close, icon (the window icon) and menu (a menu button
for the fallback app menu).

For example, "menu:minimize,maximize,close" specifies a menu
on the left, and minimize, maximize and close buttons on the right.

Note that buttons will only be shown when they are meaningful.
E.g. a menu button only appears when the desktop shell does not
show the app menu, and a close button only appears on a window
that can be closed.

Also note that the setting can be overridden with the
#GtkHeaderBar:decoration-layout property.
#NAME: natural_width
#PARENT: Gtk.CellArea.get_preferred_width_for_height.none
#COMMENT: location to store the natural width, or %NULL
#NAME: childname
#PARENT: Gtk.BuildableIface.get_internal_child.get_internal_child.GObject.Object
#COMMENT: name of child
#NAME: new
#PARENT: Gtk.Scrollbar.new
#COMMENT: the new #GtkScrollbar.
#NAME: position
#PARENT: Gtk.EditableInterface.do_insert_text.do_insert_text.none
#COMMENT: location of the position text will be inserted at
#NAME: position
#PARENT: Gtk.Notebook.insert_page.gint
#COMMENT: the index (starting at 0) at which to insert the page,
    or -1 to append the page after all other pages
#NAME: markup
#PARENT: Gtk.Scale.add_mark.none
#COMMENT: Text to be shown at the mark, using [Pango markup][PangoMarkupFormat], or %NULL
#NAME: path
#PARENT: Gtk.TreeView.test-collapse-row.gboolean
#COMMENT: a tree path that points to the row
#NAME: get_short_label
#PARENT: Gtk.Action
#COMMENT: Gets the short label text of @action.
#NAME: icon_name
#PARENT: Gtk.IconTheme.lookup_icon.IconInfo
#COMMENT: the name of the icon to lookup
#NAME: key_file
#PARENT: Gtk.PaperSize.to_key_file.none
#COMMENT: the #GKeyFile to save the paper size to
#NAME: provider
#PARENT: Gtk.StyleContext.remove_provider_for_screen.none
#COMMENT: a #GtkStyleProvider
#NAME: get_tabs
#PARENT: Gtk.TextView.get_tabs
#COMMENT: copy of default tab array, or %NULL if “standard”
   tabs are used; must be freed with pango_tab_array_free().
#NAME: parent_class
#PARENT: Gtk.ToolPaletteClass
#COMMENT: The parent class.
#NAME: has_default
#PARENT: Gtk.Widget.has_default
#COMMENT: %TRUE if @widget is the current default widget within
    its toplevel, %FALSE otherwise
#NAME: visible
#PARENT: Gtk.CellRenderer.set_visible.none
#COMMENT: the visibility of the cell
#NAME: get_position
#PARENT: Gtk.Popover
#COMMENT: Returns the preferred position of @popover.
#NAME: spacing
#PARENT: Gtk.VBox.new.Widget
#COMMENT: the number of pixels to place by default between children.
#NAME: accelerator_key
#PARENT: Gtk.accelerator_name_with_keycode.utf8
#COMMENT: accelerator keyval
#NAME: width
#PARENT: Gtk.PaperSize.new_custom.PaperSize
#COMMENT: the paper width, in units of @unit
#NAME: new
#PARENT: Gtk.PopoverMenu
#COMMENT: Creates a new popover menu.
#NAME: settings
#PARENT: Gtk.PrintSettings.has_key.gboolean
#COMMENT: a #GtkPrintSettings
#NAME: user_data
#PARENT: Gtk.Clipboard.request_text.none
#COMMENT: user data to pass to @callback.
#NAME: new_with_label
#PARENT: Gtk.Button.new_with_label
#COMMENT: The newly created #GtkButton widget.
#NAME: iter
#PARENT: Gtk.TextIter.assign.none
#COMMENT: a #GtkTextIter
#NAME: tree_view
#PARENT: Gtk.TreeView.get_n_columns.guint
#COMMENT: a #GtkTreeView
#NAME: new
#PARENT: Gtk.IMContextSimple
#COMMENT: Creates a new #GtkIMContextSimple.
#NAME: add_default
#PARENT: Gtk.IconFactory
#COMMENT: Adds an icon factory to the list of icon factories searched by
gtk_style_lookup_icon_set(). This means that, for example,
gtk_image_new_from_stock() will be able to find icons in @factory.
There will normally be an icon factory added for each library or
application that comes with icons. The default icon factories
can be overridden by themes.
#NAME: set_focus_on_click
#PARENT: Gtk.Button
#COMMENT: Sets whether the button will grab focus when it is clicked with the mouse.
Making mouse clicks not grab focus is useful in places like toolbars where
you don’t want the keyboard focus removed from the main area of the
application.
#NAME: group
#PARENT: Gtk.RadioButton.new_with_mnemonic.Widget
#COMMENT: the radio button
        group, or %NULL
#NAME: get_focus_chain
#PARENT: Gtk.Container.get_focus_chain
#COMMENT: %TRUE if the focus chain of the container
has been set explicitly.
#NAME: n_targets
#PARENT: Gtk.IconView.enable_model_drag_source.none
#COMMENT: the number of items in @targets
#NAME: set_vadjustment
#PARENT: Gtk.Scrollable
#COMMENT: Sets the vertical adjustment of the #GtkScrollable.
#NAME: values
#PARENT: Gtk.TextAttributes.unref.none
#COMMENT: a #GtkTextAttributes
#NAME: size
#PARENT: Gtk.IconSet.render_icon_surface.cairo.Surface
#COMMENT: icon size. A size of (GtkIconSize)-1
       means render at the size of the source and don’t scale.
#NAME: append_for_widget
#PARENT: Gtk.WidgetPath.append_for_widget
#COMMENT: the position where the data was inserted
#NAME: get_cursor_hadjustment
#PARENT: Gtk.Entry
#COMMENT: Retrieves the horizontal cursor adjustment for the entry.
See gtk_entry_set_cursor_hadjustment().
#NAME: ref
#PARENT: Gtk.IconSet.ref
#COMMENT: @icon_set.
#NAME: get_pixbuf
#PARENT: Gtk.OffscreenWindow.get_pixbuf
#COMMENT: A #GdkPixbuf pointer, or %NULL.
#NAME: STYLE_CLASS_BUTTON
#PARENT: Gtk
#COMMENT: A CSS class to match buttons.

This is used by #GtkButton and its subclasses, as well
as various other widget pieces that appear like buttons,
e.g. the arrows in a #GtkCalendar.
#NAME: get_gicon
#PARENT: Gtk.StatusIcon
#COMMENT: Retrieves the #GIcon being displayed by the #GtkStatusIcon.
The storage type of the status icon must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_GICON (see gtk_status_icon_get_storage_type()).
The caller of this function does not own a reference to the
returned #GIcon.

If this function fails, @icon is left unchanged;
#NAME: get_baseline_row
#PARENT: Gtk.Grid
#COMMENT: Returns which row defines the global baseline of @grid.
#NAME: set_selectable
#PARENT: Gtk.Label
#COMMENT: Selectable labels allow the user to select text from the label, for
copy-and-paste.
#NAME: set_response_sensitive
#PARENT: Gtk.Dialog
#COMMENT: Calls `gtk_widget_set_sensitive (widget, @setting)`
for each widget in the dialog’s action area with the given @response_id.
A convenient way to sensitize/desensitize dialog buttons.
#NAME: primary-icon-tooltip-text
#PARENT: Gtk.Entry
#COMMENT: The contents of the tooltip on the primary icon.

Also see gtk_entry_set_icon_tooltip_text().
#NAME: get_error
#PARENT: Gtk.PrintOperation
#COMMENT: Call this when the result of a print operation is
%GTK_PRINT_OPERATION_RESULT_ERROR, either as returned by
gtk_print_operation_run(), or in the #GtkPrintOperation::done signal
handler. The returned #GError will contain more details on what went wrong.
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_target.Gdk.Atom
#COMMENT: a pointer to a #GtkSelectionData-struct.
#NAME: file
#PARENT: Gtk.FileChooser.set_file.gboolean
#COMMENT: the #GFile to set as current
#NAME: chooser
#PARENT: Gtk.FileChooser.set_local_only.none
#COMMENT: a #GtkFileChooser
#NAME: box
#PARENT: Gtk.ListBox.get_adjustment.Adjustment
#COMMENT: a #GtkListBox
#NAME: drag_data_received
#PARENT: Gtk.TreeDragDest
#COMMENT: Asks the #GtkTreeDragDest to insert a row before the path @dest,
deriving the contents of the row from @selection_data. If @dest is
outside the tree so that inserting before it is impossible, %FALSE
will be returned. Also, %FALSE may be returned if the new row is
not created for some model-specific reason.  Should robustly handle
a @dest no longer found in the model!
#NAME: menu_shell
#PARENT: Gtk.MenuShell.set_take_focus.none
#COMMENT: a #GtkMenuShell
#NAME: iter
#PARENT: Gtk.TextIter.set_line.none
#COMMENT: a #GtkTextIter
#NAME: set_column_drag_function
#PARENT: Gtk.TreeView
#COMMENT: Sets a user function for determining where a column may be dropped when
dragged.  This function is called on every column pair in turn at the
beginning of a column drag to determine where a drop can take place.  The
arguments passed to @func are: the @tree_view, the #GtkTreeViewColumn being
dragged, the two #GtkTreeViewColumn s determining the drop spot, and
@user_data.  If either of the #GtkTreeViewColumn arguments for the drop spot
are %NULL, then they indicate an edge.  If @func is set to be %NULL, then
@tree_view reverts to the default behavior of allowing all columns to be
dropped everywhere.
#NAME: requisition
#PARENT: Gtk.MenuItem.toggle_size_request.none
#COMMENT: the requisition to use as signal data.
#NAME: STYLE_CLASS_LIST_ROW
#PARENT: Gtk
#COMMENT: A CSS class to match list rowss.

This is used by #GtkListBoxRow.
#NAME: register_serialize_tagset
#PARENT: Gtk.TextBuffer.register_serialize_tagset
#COMMENT: the #GdkAtom that corresponds to the
              newly registered format’s mime-type.
#NAME: func_data
#PARENT: Gtk.EntryCompletion.set_match_func.none
#COMMENT: user data for @func
#NAME: new_from_key_file
#PARENT: Gtk.PageSetup
#COMMENT: Reads the page setup from the group @group_name in the key file
@key_file. Returns a new #GtkPageSetup object with the restored
page setup, or %NULL if an error occurred.
#NAME: tree_store
#PARENT: Gtk.TreeStore.iter_depth.gint
#COMMENT: A #GtkTreeStore
#NAME: icon_pos
#PARENT: Gtk.Entry.set_icon_activatable.none
#COMMENT: Icon position
#NAME: store
#PARENT: Gtk.ListStore.reorder.none
#COMMENT: A #GtkListStore.
#NAME: select
#PARENT: Gtk.TextView.select-all.none
#COMMENT: %TRUE to select, %FALSE to unselect
#NAME: window
#PARENT: Gtk.Window.is_active.gboolean
#COMMENT: a #GtkWindow
#NAME: id_column
#PARENT: Gtk.ComboBox.set_id_column.none
#COMMENT: A column in @model to get string IDs for values from
#NAME: month
#PARENT: Gtk.Calendar.get_date.none
#COMMENT: location to store the month number
    (between 0 and 11), or %NULL
#NAME: window
#PARENT: Gtk.Window.unmaximize.none
#COMMENT: a #GtkWindow
#NAME: widget
#PARENT: Gtk.GestureZoom.new.Gesture
#COMMENT: a #GtkWidget
#NAME: table
#PARENT: Gtk.Table.attach_defaults.none
#COMMENT: The table to add a new child widget to.
#NAME: path
#PARENT: Gtk.TreeModel.rows_reordered.none
#COMMENT: a #GtkTreePath-struct pointing to the tree node whose children
    have been reordered
#NAME: fill
#PARENT: Gtk.Justification
#COMMENT: The text is placed is distributed across the label.
#NAME: builder
#PARENT: Gtk.Builder.add_objects_from_string.guint
#COMMENT: a #GtkBuilder
#NAME: get_icon_tooltip_text
#PARENT: Gtk.Entry.get_icon_tooltip_text
#COMMENT: the tooltip text, or %NULL. Free the returned
    string with g_free() when done.
#NAME: version_mismatch
#PARENT: Gtk.BuilderError
#COMMENT: The input file requires a newer version
 of GTK+.
#NAME: pack_dir
#PARENT: Gtk.MenuBar.set_pack_direction.none
#COMMENT: a new #GtkPackDirection
#NAME: get_state_wildcarded
#PARENT: Gtk.IconSource
#COMMENT: Gets the value set by gtk_icon_source_set_state_wildcarded().
#NAME: set_offset
#PARENT: Gtk.TextIter
#COMMENT: Sets @iter to point to @char_offset. @char_offset counts from the start
of the entire text buffer, starting with 0.
#NAME: context
#PARENT: Gtk.IMContext.delete_surrounding.gboolean
#COMMENT: a #GtkIMContext
#NAME: max-width-chars
#PARENT: Gtk.Label
#COMMENT: The desired maximum width of the label, in characters. If this property
is set to -1, the width will be calculated automatically.

See the section on [text layout][label-text-layout]
for details of how #GtkLabel:width-chars and #GtkLabel:max-width-chars
determine the width of ellipsized and wrapped labels.
#NAME: load_key_file
#PARENT: Gtk.PrintSettings.load_key_file
#COMMENT: %TRUE on success
#NAME: gap_width
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: width of the gap
#NAME: pulse
#PARENT: Gtk.CellRendererSpinner
#COMMENT: Pulse of the spinner. Increment this value to draw the next frame of the
spinner animation. Usually, you would update this value in a timeout.

By default, the #GtkSpinner widget draws one full cycle of the animation,
consisting of 12 frames, in 750 milliseconds.
#NAME: get_shadow_type
#PARENT: Gtk.HandleBox
#COMMENT: Gets the type of shadow drawn around the handle box. See
gtk_handle_box_set_shadow_type().
#NAME: title
#PARENT: Gtk.ColorButton.set_title.none
#COMMENT: String containing new window title
#NAME: user_data
#PARENT: Gtk.Clipboard.request_targets.none
#COMMENT: user data to pass to @callback.
#NAME: append_separator
#PARENT: Gtk.AppChooserButton
#COMMENT: Appends a separator to the list of applications that is shown
in the popup.
#NAME: set_arrow_tooltip_text
#PARENT: Gtk.MenuToolButton
#COMMENT: Sets the tooltip text to be used as tooltip for the arrow button which
pops up the menu.  See gtk_tool_item_set_tooltip_text() for setting a tooltip
on the whole #GtkMenuToolButton.
#NAME: targets
#PARENT: Gtk.TargetList.new.TargetList
#COMMENT: Pointer to an array
  of #GtkTargetEntry
#NAME: scroll-event
#PARENT: Gtk.Widget.scroll-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: new
#PARENT: Gtk.ColorSelection
#COMMENT: Creates a new GtkColorSelection.
#NAME: get_parent_shell
#PARENT: Gtk.MenuShell.get_parent_shell
#COMMENT: the parent #GtkMenuShell
#NAME: orientation
#PARENT: Gtk.Scale.new.Widget
#COMMENT: the scale’s orientation.
#NAME: height
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: width of the rectangle
#NAME: wait_for_uris
#PARENT: Gtk.Clipboard.wait_for_uris
#COMMENT: 
    a newly-allocated %NULL-terminated array of strings which must
    be freed with g_strfreev(), or %NULL if retrieving the
    selection data failed. (This could happen for various reasons,
    in particular if the clipboard was empty or if the contents of
    the clipboard could not be converted into URI form.)
#NAME: set_displayed_row
#PARENT: Gtk.CellView
#COMMENT: Sets the row of the model that is currently displayed
by the #GtkCellView. If the path is unset, then the
contents of the cellview “stick” at their last value;
this is not normally a desired result, but may be
a needed intermediate state if say, the model for
the #GtkCellView becomes temporarily empty.
#NAME: black
#PARENT: Gtk.Style
#COMMENT: #GdkColor to use for black
#NAME: get_pixels_inside_wrap
#PARENT: Gtk.TextView
#COMMENT: Gets the value set by gtk_text_view_set_pixels_inside_wrap().
#NAME: x
#PARENT: Gtk.ToolPalette.get_drop_item.ToolItem
#COMMENT: the x position
#NAME: search_destroy
#PARENT: Gtk.TreeView.set_search_equal_func.none
#COMMENT: Destroy notifier for @search_user_data, or %NULL
#NAME: destroy
#PARENT: Gtk.Widget
#COMMENT: Signals that all holders of a reference to the widget should release
the reference that they hold. May result in finalization of the widget
if all references are released.

This signal is not suitable for saving widget state.
#NAME: drag_unhighlight
#PARENT: Gtk.Widget
#COMMENT: Removes a highlight set by gtk_drag_highlight() from
a widget.
#NAME: y
#PARENT: Gtk.ToolPalette.get_drop_item.ToolItem
#COMMENT: the y position
#NAME: gap_side
#PARENT: Gtk.render_extension.none
#COMMENT: side where the gap is
#NAME: n_targets
#PARENT: Gtk.targets_include_uri.gboolean
#COMMENT: the length of @targets
#NAME: cancelled
#PARENT: Gtk.GestureLongPress
#COMMENT: This signal is emitted whenever a press moved too far, or was released
before #GtkGestureLongPress:pressed happened.
#NAME: RecentFilterFunc
#PARENT: Gtk.RecentFilterFunc
#COMMENT: %TRUE if the file should be displayed
#NAME: scrollable
#PARENT: Gtk.Notebook.set_scrollable.none
#COMMENT: %TRUE if scroll arrows should be added
#NAME: widget
#PARENT: Gtk.propagate_event.none
#COMMENT: a #GtkWidget
#NAME: rc_property_parse_requisition
#PARENT: Gtk
#COMMENT: A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a
requisition in the form
`"{ width, height }"` for integers %width and %height.
#NAME: free
#PARENT: Gtk.TextIter
#COMMENT: Free an iterator allocated on the heap. This function
is intended for use in language bindings, and is not
especially useful for applications, because iterators can
simply be allocated on the stack.
#NAME: rc_get_style_by_paths
#PARENT: Gtk
#COMMENT: Creates up a #GtkStyle from styles defined in a RC file by providing
the raw components used in matching. This function may be useful
when creating pseudo-widgets that should be themed like widgets but
don’t actually have corresponding GTK+ widgets. An example of this
would be items inside a GNOME canvas widget.

The action of gtk_rc_get_style() is similar to:
|[<!-- language="C" -->
 gtk_widget_path (widget, NULL, &path, NULL);
 gtk_widget_class_path (widget, NULL, &class_path, NULL);
 gtk_rc_get_style_by_paths (gtk_widget_get_settings (widget),
                            path, class_path,
                            G_OBJECT_TYPE (widget));
]|
#NAME: cell
#PARENT: Gtk.CellRenderer.get_alignment.none
#COMMENT: A #GtkCellRenderer
#NAME: box
#PARENT: Gtk.ListBox.get_selected_rows.ListBoxRow
#COMMENT: a #GtkListBox
#NAME: tree_view
#PARENT: Gtk.TreeView.set_search_equal_func.none
#COMMENT: A #GtkTreeView
#NAME: is_rubber_banding_active
#PARENT: Gtk.TreeView
#COMMENT: Returns whether a rubber banding operation is currently being done
in @tree_view.
#NAME: size
#PARENT: Gtk.Widget.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a stock size. A size of (GtkIconSize)-1 means
    render at the size of the source and don’t scale (if there are
    multiple source sizes, GTK+ picks one of the available sizes).
#NAME: path
#PARENT: Gtk.TreePath.new_from_string.TreePath
#COMMENT: The string representation of a path
#NAME: new
#PARENT: Gtk.HPaned
#COMMENT: Create a new #GtkHPaned
#NAME: set_pixbuf
#PARENT: Gtk.IconSource
#COMMENT: Sets a pixbuf to use as a base image when creating icon variants
for #GtkIconSet.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_tooltip_markup.utf8
#COMMENT: a #GtkStatusIcon
#NAME: get_center_widget
#PARENT: Gtk.Box
#COMMENT: Retrieves the center widget of the box.
#NAME: context
#PARENT: Gtk.CellArea.activate.gboolean
#COMMENT: the #GtkCellAreaContext in context with the current row data
#NAME: sort_func
#PARENT: Gtk.TreeSortableIface.set_default_sort_func.set_default_sort_func.none
#COMMENT: The comparison function
#NAME: about
#PARENT: Gtk.AboutDialog.add_credit_section.none
#COMMENT: A #GtkAboutDialog
#NAME: get_direction
#PARENT: Gtk.MenuButton.get_direction
#COMMENT: a #GtkArrowType value
#NAME: parent_class
#PARENT: Gtk.SearchBarClass
#COMMENT: The parent class.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_visible.gboolean
#COMMENT: a #GtkStatusIcon
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_iter_at_offset.none
#COMMENT: a #GtkTextBuffer
#NAME: convert_iter_to_child_iter
#PARENT: Gtk.TreeModelSort
#COMMENT: Sets @child_iter to point to the row pointed to by @sorted_iter.
#NAME: has-frame
#PARENT: Gtk.ComboBox
#COMMENT: The has-frame property controls whether a frame
is drawn around the entry.
#NAME: get_filter
#PARENT: Gtk.RecentChooser.get_filter
#COMMENT: a #GtkRecentFilter object.
#NAME: get_style
#PARENT: Gtk.Toolbar
#COMMENT: Retrieves whether the toolbar has text, icons, or both . See
gtk_toolbar_set_style().
#NAME: name
#PARENT: Gtk.WidgetPath.iter_add_region.none
#COMMENT: region name
#NAME: WindowType
#PARENT: Gtk
#COMMENT: A #GtkWindow can be one of these types. Most things you’d consider a
“window” should have type #GTK_WINDOW_TOPLEVEL; windows with this type
are managed by the window manager and have a frame by default (call
gtk_window_set_decorated() to toggle the frame).  Windows with type
#GTK_WINDOW_POPUP are ignored by the window manager; window manager
keybindings won’t work on them, the window manager won’t decorate the
window with a frame, many GTK+ features that rely on the window
manager will not work (e.g. resize grips and
maximization/minimization). #GTK_WINDOW_POPUP is used to implement
widgets such as #GtkMenu or tooltips that you normally don’t think of
as windows per se. Nearly all windows should be #GTK_WINDOW_TOPLEVEL.
In particular, do not use #GTK_WINDOW_POPUP just to turn off
the window borders; use gtk_window_set_decorated() for that.
#NAME: new
#PARENT: Gtk.HButtonBox
#COMMENT: Creates a new horizontal button box.
#NAME: parent_class
#PARENT: Gtk.SwitchClass
#COMMENT: The parent class.
#NAME: area
#PARENT: Gtk.GLArea.get_context.Gdk.GLContext
#COMMENT: a #GtkGLArea
#NAME: current
#PARENT: Gtk.RadioAction.changed.none
#COMMENT: the member of @action's group which has just been activated
#NAME: new_for_manager
#PARENT: Gtk.RecentChooserMenu.new_for_manager
#COMMENT: a new #GtkRecentChooserMenu, bound to @manager.
#NAME: object
#PARENT: Gtk.accel_groups_from_object.AccelGroup
#COMMENT: a #GObject, usually a #GtkWindow
#NAME: width
#PARENT: Gtk.paint_focus.none
#COMMENT: the width of the rectangle around which to draw a focus indicator
#NAME: dialog
#PARENT: Gtk.Dialog.response.none
#COMMENT: a #GtkDialog
#NAME: page_num
#PARENT: Gtk.Notebook.page-removed.none
#COMMENT: the @child page number
#NAME: opacity
#PARENT: Gtk.Widget
#COMMENT: The requested opacity of the widget. See gtk_widget_set_opacity() for
more details about window opacity.

Before 3.8 this was only available in GtkWindow
#NAME: drag_set_icon_stock
#PARENT: Gtk
#COMMENT: Sets the icon for a given drag from a stock ID.
#NAME: get_state_wildcarded
#PARENT: Gtk.IconSource.get_state_wildcarded
#COMMENT: %TRUE if this icon source is a base for any widget state variant
#NAME: get_selection_mode
#PARENT: Gtk.ListBox
#COMMENT: Gets the selection mode of the listbox.
#NAME: popup_disable
#PARENT: Gtk.Notebook
#COMMENT: Disables the popup menu.
#NAME: set_role
#PARENT: Gtk.Window
#COMMENT: This function is only useful on X11, not with other GTK+ targets.

In combination with the window title, the window role allows a
[window manager][gtk-X11-arch] to identify "the
same" window when an application is restarted. So for example you
might set the “toolbox” role on your app’s toolbox window, so that
when the user restarts their session, the window manager can put
the toolbox back in the same place.

If a window already has a unique title, you don’t need to set the
role, since the WM can use the title to identify the window when
restoring the session.
#NAME: lookup_entry
#PARENT: Gtk.AccelMap
#COMMENT: Looks up the accelerator entry for @accel_path and fills in @key.
#NAME: new
#PARENT: Gtk.StyleContext
#COMMENT: Creates a standalone #GtkStyleContext, this style context
won’t be attached to any widget, so you may want
to call gtk_style_context_set_path() yourself.

This function is only useful when using the theming layer
separated from GTK+, if you are using #GtkStyleContext to
theme #GtkWidgets, use gtk_widget_get_style_context()
in order to get a style context ready to theme the widget.
#NAME: proximity-in-event
#PARENT: Gtk.Widget
#COMMENT: To receive this signal the #GdkWindow associated to the widget needs
to enable the #GDK_PROXIMITY_IN_MASK mask.

This signal will be sent to the grab widget if there is one.
#NAME: cell
#PARENT: Gtk.CellRenderer.set_sensitive.none
#COMMENT: A #GtkCellRenderer
#NAME: STOCK_FIND_AND_REPLACE
#PARENT: Gtk
#COMMENT: The “Find and Replace” item and icon.
#NAME: default_locales
#PARENT: Gtk.IMContextInfo
#COMMENT: A colon-separated list of locales where this input method
  should be the default. The asterisk “*” sets the default for all locales.
#NAME: message_id
#PARENT: Gtk.Statusbar.remove.none
#COMMENT: a message identifier, as returned by gtk_statusbar_push()
#NAME: cr
#PARENT: Gtk.render_handle.none
#COMMENT: a #cairo_t
#NAME: context
#PARENT: Gtk.IMContextClass.focus_out.focus_out.none
#COMMENT: a #GtkIMContext
#NAME: get_icon_factory
#PARENT: Gtk.StyleProvider.get_icon_factory
#COMMENT: The icon factory to use for @path, or %NULL
#NAME: grab_focus
#PARENT: Gtk.Widget
#COMMENT: Causes @widget to have the keyboard focus for the #GtkWindow it's
inside. @widget must be a focusable widget, such as a #GtkEntry;
something like #GtkFrame won’t work.

More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
gtk_widget_set_can_focus() to modify that flag.

The widget also needs to be realized and mapped. This is indicated by the
related signals. Grabbing the focus immediately after creating the widget
will likely fail and cause critical warnings.
#NAME: title
#PARENT: Gtk.ComboBox.set_title.none
#COMMENT: a title for the menu in tearoff mode
#NAME: get_paper_height
#PARENT: Gtk.PageSetup.get_paper_height
#COMMENT: the paper height.
#NAME: into_or_before
#PARENT: Gtk.TreeViewDropPosition
#COMMENT: dropped row becomes a child or is inserted before
#NAME: get_display
#PARENT: Gtk.Widget
#COMMENT: Get the #GdkDisplay for the toplevel window associated with
this widget. This function can only be called after the widget
has been added to a widget hierarchy with a #GtkWindow at the top.

In general, you should only create display specific
resources when a widget has been realized, and you should
free those resources when the widget is unrealized.
#NAME: setting
#PARENT: Gtk.Window.set_keep_below.none
#COMMENT: whether to keep @window below other windows
#NAME: screen
#PARENT: Gtk.show_uri.gboolean
#COMMENT: screen to show the uri on
    or %NULL for the default screen
#NAME: expander
#PARENT: Gtk.Expander.set_use_markup.none
#COMMENT: a #GtkExpander
#NAME: icon_name
#PARENT: Gtk.IconTheme.get_icon_sizes.gint
#COMMENT: the name of an icon
#NAME: set_background
#PARENT: Gtk.Style
#COMMENT: Sets the background of @window to the background color or pixmap
specified by @style for the given state.
#NAME: iter
#PARENT: Gtk.TextIter.backward_visible_line.gboolean
#COMMENT: an iterator
#NAME: add_button
#PARENT: Gtk.Dialog
#COMMENT: Adds a button with the given text and sets things up so that
clicking the button will emit the #GtkDialog::response signal with
the given @response_id. The button is appended to the end of the
dialog’s action area. The button widget is returned, but usually
you don’t need it.
#NAME: state_is_running
#PARENT: Gtk.StyleContext.state_is_running
#COMMENT: %TRUE if there is a running transition animation for @state.
#NAME: position
#PARENT: Gtk.TreeStore.insert_with_values.none
#COMMENT: position to insert the new row, or -1 to append after existing rows
#NAME: new
#PARENT: Gtk.Frame.new
#COMMENT: a new #GtkFrame widget
#NAME: iter
#PARENT: Gtk.ListStore.prepend.none
#COMMENT: An unset #GtkTreeIter to set to the prepend row
#NAME: get_widgets
#PARENT: Gtk.SizeGroup
#COMMENT: Returns the list of widgets associated with @size_group.
#NAME: get_max_length
#PARENT: Gtk.Entry
#COMMENT: Retrieves the maximum allowed length of the text in
@entry. See gtk_entry_set_max_length().

This is equivalent to:

|[<!-- language="C" -->
GtkEntryBuffer *buffer;
buffer = gtk_entry_get_buffer (entry);
gtk_entry_buffer_get_max_length (buffer);
]|
#NAME: get_local_only
#PARENT: Gtk.PlacesSidebar
#COMMENT: Returns the value previously set with gtk_places_sidebar_set_local_only().
#NAME: set_text_column
#PARENT: Gtk.IconView
#COMMENT: Sets the column with text for @icon_view to be @column. The text
column must be of type #G_TYPE_STRING.
#NAME: child_pack_dir
#PARENT: Gtk.MenuBar.set_child_pack_direction.none
#COMMENT: a new #GtkPackDirection
#NAME: image
#PARENT: Gtk.Image.get_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: a #GtkImage
#NAME: icon
#PARENT: Gtk.StatusIcon.set_from_gicon.none
#COMMENT: a GIcon
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_slice.utf8
#COMMENT: a #GtkTextBuffer
#NAME: area
#PARENT: Gtk.CellArea.cell_get_property.none
#COMMENT: a #GtkCellArea
#NAME: ref_node
#PARENT: Gtk.TreeModel
#COMMENT: Lets the tree ref the node.

This is an optional method for models to implement.
To be more specific, models may ignore this call as it exists
primarily for performance reasons.

This function is primarily meant as a way for views to let
caching models know when nodes are being displayed (and hence,
whether or not to cache that node). Being displayed means a node
is in an expanded branch, regardless of whether the node is currently
visible in the viewport. For example, a file-system based model
would not want to keep the entire file-hierarchy in memory,
just the sections that are currently being displayed by
every current view.

A model should be expected to be able to get an iter independent
of its reffed state.
#NAME: missing_property_value
#PARENT: Gtk.BuilderError
#COMMENT: A required property value was
 missing.
#NAME: get_is_locked
#PARENT: Gtk.AccelGroup.get_is_locked
#COMMENT: %TRUE if there are 1 or more locks on the @accel_group,
    %FALSE otherwise.
#NAME: get_point
#PARENT: Gtk.Gesture
#COMMENT: If @sequence is currently being interpreted by @gesture, this
function returns %TRUE and fills in @x and @y with the last coordinates
stored for that event sequence. The coordinates are always relative to the
widget allocation.
#NAME: inhibit
#PARENT: Gtk.Application.inhibit
#COMMENT: A non-zero cookie that is used to uniquely identify this
    request. It should be used as an argument to gtk_application_uninhibit()
    in order to remove the request. If the platform does not support
    inhibiting or the request failed for some reason, 0 is returned.
#NAME: about
#PARENT: Gtk.AboutDialog.set_license.none
#COMMENT: a #GtkAboutDialog
#NAME: normal
#PARENT: Gtk.PlacesOpenFlags
#COMMENT: This is the default mode that #GtkPlacesSidebar uses if no other flags
 are specified.  It indicates that the calling application should open the selected location
 in the normal way, for example, in the folder view beside the sidebar.
#NAME: mark
#PARENT: Gtk.TextMark.get_buffer.TextBuffer
#COMMENT: a #GtkTextMark
#NAME: iter
#PARENT: Gtk.TreeStore.set_valist.none
#COMMENT: A valid #GtkTreeIter for the row being modified
#NAME: margin-start
#PARENT: Gtk.Widget
#COMMENT: Margin on start of widget, horizontally. This property supports
left-to-right and right-to-left text directions.

This property adds margin outside of the widget's normal size
request, the margin will be added in addition to the size from
gtk_widget_set_size_request() for example.
#NAME: get_use_preview_label
#PARENT: Gtk.FileChooser
#COMMENT: Gets whether a stock label should be drawn with the name of the previewed
file.  See gtk_file_chooser_set_use_preview_label().
#NAME: insert-prefix
#PARENT: Gtk.EntryCompletion
#COMMENT: Gets emitted when the inline autocompletion is triggered.
The default behaviour is to make the entry display the
whole prefix and select the newly inserted part.

Applications may connect to this signal in order to insert only a
smaller part of the @prefix into the entry - e.g. the entry used in
the #GtkFileChooser inserts only the part of the prefix up to the
next '/'.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_title.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: widget
#PARENT: Gtk.Widget.drag_dest_add_text_targets.none
#COMMENT: a #GtkWidget that’s a drag destination
#NAME: flippable
#PARENT: Gtk.Range.set_flippable.none
#COMMENT: %TRUE to make the range flippable
#NAME: str
#PARENT: Gtk.TextIter.forward_search.gboolean
#COMMENT: a search string
#NAME: frame
#PARENT: Gtk.Frame.set_label_align.none
#COMMENT: a #GtkFrame
#NAME: new
#PARENT: Gtk.ToolItemGroup.new
#COMMENT: a new #GtkToolItemGroup.
#NAME: get_show_hidden
#PARENT: Gtk.FileChooser
#COMMENT: Gets whether hidden files and folders are displayed in the file selector.
See gtk_file_chooser_set_show_hidden().
#NAME: targets_include_rich_text
#PARENT: Gtk.SelectionData.targets_include_rich_text
#COMMENT: %TRUE if @selection_data holds a list of targets,
              and a suitable target for rich text is included,
              otherwise %FALSE.
#NAME: size
#PARENT: Gtk.PaperSize.is_ipp.gboolean
#COMMENT: a #GtkPaperSize object
#NAME: accel_path
#PARENT: Gtk.Widget.set_accel_path.none
#COMMENT: path used to look up the accelerator
#NAME: plug
#PARENT: Gtk.Plug.construct_for_display.none
#COMMENT: a #GtkPlug.
#NAME: buffer_contents
#PARENT: Gtk.TextBufferTargetInfo
#COMMENT: Buffer contents
#NAME: screen
#PARENT: Gtk.Window.set_screen.none
#COMMENT: a #GdkScreen.
#NAME: bottom
#PARENT: Gtk.JunctionSides
#COMMENT: Element connects on the bottom side.
#NAME: attach_widget
#PARENT: Gtk.Menu.attach_to_widget.none
#COMMENT: the #GtkWidget that the menu will be attached to
#NAME: get_length
#PARENT: Gtk.SelectionData.get_length
#COMMENT: the length of the data of the selection.
#NAME: is_start
#PARENT: Gtk.TextIter.is_start
#COMMENT: whether @iter is the first in the buffer
#NAME: colorsel
#PARENT: Gtk.ColorSelection.get_previous_color.none
#COMMENT: a #GtkColorSelection
#NAME: widget
#PARENT: Gtk.Widget.mnemonic_activate.gboolean
#COMMENT: a #GtkWidget
#NAME: data
#PARENT: Gtk.Menu.popup_for_device.none
#COMMENT: user supplied data to be passed to @func
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_screen.none
#COMMENT: a #GtkStatusIcon
#NAME: get_value_pos
#PARENT: Gtk.Scale.get_value_pos
#COMMENT: the position in which the current value is displayed
#NAME: assign
#PARENT: Gtk.TextIter
#COMMENT: Assigns the value of @other to @iter.  This function
is not useful in applications, because iterators can be assigned
with `GtkTextIter i = j;`. The
function is used by language bindings.
#NAME: background-rgba
#PARENT: Gtk.CellRendererText
#COMMENT: Background color as a #GdkRGBA
#NAME: cell
#PARENT: Gtk.CellRenderer.set_alignment.none
#COMMENT: A #GtkCellRenderer
#NAME: window
#PARENT: Gtk.Window.set_startup_id.none
#COMMENT: a #GtkWindow
#NAME: container
#PARENT: Gtk.Container.child_set.none
#COMMENT: a #GtkContainer
#NAME: uris
#PARENT: Gtk.SelectionData.set_uris.gboolean
#COMMENT: a %NULL-terminated array of
    strings holding URIs
#NAME: len
#PARENT: Gtk.Clipboard.set_text.none
#COMMENT: length of @text, in bytes, or -1, in which case
            the length will be determined with strlen().
#NAME: activatable
#PARENT: Gtk.Activatable.do_set_related_action.none
#COMMENT: a #GtkActivatable
#NAME: import
#PARENT: Gtk.CssSectionType
#COMMENT: The section defines an import rule.
#NAME: assistant
#PARENT: Gtk.Assistant.set_page_type.none
#COMMENT: a #GtkAssistant
#NAME: CheckButton
#PARENT: Gtk
#COMMENT: A #GtkCheckButton places a discrete #GtkToggleButton next to a widget,
(usually a #GtkLabel). See the section on #GtkToggleButton widgets for
more information about toggle/check buttons.

The important signal ( #GtkToggleButton::toggled ) is also inherited from
#GtkToggleButton.
#NAME: get_item_orientation
#PARENT: Gtk.IconView
#COMMENT: Returns the value of the ::item-orientation property which determines
whether the labels are drawn beside the icons instead of below.
#NAME: label
#PARENT: Gtk.MenuToolButton.new.ToolItem
#COMMENT: a string that will be used as label, or %NULL
#NAME: action_group
#PARENT: Gtk.ActionGroup.add_toggle_actions_full.none
#COMMENT: the action group
#NAME: cancellable
#PARENT: Gtk.IconInfo.load_icon_async.none
#COMMENT: optional #GCancellable object, %NULL to ignore
#NAME: binding_set
#PARENT: Gtk.BindingSet.add_path.none
#COMMENT: a #GtkBindingSet to add a path to
#NAME: rect
#PARENT: Gtk.Popover.get_pointing_to.gboolean
#COMMENT: location to store the rectangle
#NAME: focused
#PARENT: Gtk.StateFlags
#COMMENT: Widget has the keyboard focus.
#NAME: TextSearchFlags
#PARENT: Gtk
#COMMENT: Flags affecting how a search is done.

If neither #GTK_TEXT_SEARCH_VISIBLE_ONLY nor #GTK_TEXT_SEARCH_TEXT_ONLY are
enabled, the match must be exact; the special 0xFFFC character will match
embedded pixbufs or child widgets.
#NAME: get_events
#PARENT: Gtk.Widget
#COMMENT: Returns the event mask (see #GdkEventMask) for the widget. These are the
events that the widget will receive.

Note: Internally, the widget event mask will be the logical OR of the event
mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
event mask necessary to cater for every #GtkEventController created for the
widget.
#NAME: get_context
#PARENT: Gtk.GLArea.get_context
#COMMENT: the #GdkGLContext
#NAME: icon
#PARENT: Gtk.Window.set_default_icon.none
#COMMENT: the icon
#NAME: pixbuf
#PARENT: Gtk.render_icon.none
#COMMENT: a #GdkPixbuf containing the icon to draw
#NAME: set_always_show_image
#PARENT: Gtk.Button
#COMMENT: If %TRUE, the button will ignore the #GtkSettings:gtk-button-images
setting and always show the image, if available.

Use this property if the button  would be useless or hard to use
without the image.
#NAME: get_show_connect_to_server
#PARENT: Gtk.PlacesSidebar
#COMMENT: Returns the value previously set with gtk_places_sidebar_set_show_connect_to_server()
#NAME: iter
#PARENT: Gtk.TextIter.forward_visible_cursor_positions.gboolean
#COMMENT: a #GtkTextIter
#NAME: new
#PARENT: Gtk.TreePath.new
#COMMENT: A newly created #GtkTreePath-struct.
#NAME: str
#PARENT: Gtk.Label.set_label.none
#COMMENT: the new text to set for the label
#NAME: set_search_equal_func
#PARENT: Gtk.TreeView
#COMMENT: Sets the compare function for the interactive search capabilities; note
that somewhat like strcmp() returning 0 for equality
#GtkTreeViewSearchEqualFunc returns %FALSE on matches.
#NAME: minimum_height
#PARENT: Gtk.CellAreaClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: location to store the minimum height, or %NULL
#NAME: get_menu_label_text
#PARENT: Gtk.Notebook.get_menu_label_text
#COMMENT: the text of the tab label, or %NULL if the
    widget does not have a menu label other than the default
    menu label, or the menu label widget is not a #GtkLabel.
    The string is owned by the widget and must not be freed.
#NAME: select_range
#PARENT: Gtk.TextBuffer
#COMMENT: This function moves the “insert” and “selection_bound” marks
simultaneously.  If you move them in two steps
with gtk_text_buffer_move_mark(), you will temporarily select a
region in between their old and new locations, which can be pretty
inefficient since the temporarily-selected region will force stuff
to be recalculated. This function moves them as a unit, which can
be optimized.
#NAME: context
#PARENT: Gtk.Widget.drag-data-get.none
#COMMENT: the drag context
#NAME: cell_area
#PARENT: Gtk.CellArea.add-editable.none
#COMMENT: the #GtkWidget relative #GdkRectangle coordinates
            where @editable should be added
#NAME: ColorChooserDialog
#PARENT: Gtk
#COMMENT: The #GtkColorChooserDialog widget is a dialog for choosing
a color. It implements the #GtkColorChooser interface.
#NAME: icon_view
#PARENT: Gtk.IconView.get_pixbuf_column.gint
#COMMENT: A #GtkIconView.
#NAME: type
#PARENT: Gtk.TreeViewColumn.set_sizing.none
#COMMENT: The #GtkTreeViewColumnSizing.
#NAME: uri
#PARENT: Gtk.Label.activate-link.gboolean
#COMMENT: the URI that is activated
#NAME: insert_interactive
#PARENT: Gtk.TextBuffer.insert_interactive
#COMMENT: whether text was actually inserted
#NAME: new
#PARENT: Gtk.Entry.new
#COMMENT: a new #GtkEntry.
#NAME: push_animatable_region
#PARENT: Gtk.StyleContext
#COMMENT: Pushes an animatable region, so all further gtk_render_*() calls between
this call and the following gtk_style_context_pop_animatable_region()
will potentially show transition animations for this region if
gtk_style_context_notify_state_change() is called for a given state,
and the current theme/style defines transition animations for state
changes.

The @region_id used must be unique in @context so the themes
can uniquely identify rendered elements subject to a state transition.
#NAME: get_text
#PARENT: Gtk.TextIter
#COMMENT: Returns text in the given range.  If the range
contains non-text elements such as images, the character and byte
offsets in the returned string will not correspond to character and
byte offsets in the buffer. If you want offsets to correspond, see
gtk_text_iter_get_slice().
#NAME: parent
#PARENT: Gtk.TreeModel.iter_children.gboolean
#COMMENT: the #GtkTreeIter-struct, or %NULL
#NAME: window
#PARENT: Gtk.Window.get_accept_focus.gboolean
#COMMENT: a #GtkWindow
#NAME: widget
#PARENT: Gtk.paint_spinner.none
#COMMENT: the widget (may be %NULL)
#NAME: tree_view
#PARENT: Gtk.TreeView.enable_model_drag_dest.none
#COMMENT: a #GtkTreeView
#NAME: path
#PARENT: Gtk.StyleProvider.get_icon_factory.IconFactory
#COMMENT: #GtkWidgetPath to query
#NAME: get_indices_with_depth
#PARENT: Gtk.TreePath.get_indices_with_depth
#COMMENT: The current
    indices, or %NULL
#NAME: word_char
#PARENT: Gtk.WrapMode
#COMMENT: wrap text, breaking lines in between words, or if
    that is not enough, also between graphemes
#NAME: icon_view
#PARENT: Gtk.IconView.get_column_spacing.gint
#COMMENT: a #GtkIconView
#NAME: label
#PARENT: Gtk.Label.get_max_width_chars.gint
#COMMENT: a #GtkLabel
#NAME: get_position
#PARENT: Gtk.Popover.get_position
#COMMENT: The preferred position.
#NAME: info
#PARENT: Gtk.TargetList.find.gboolean
#COMMENT: a pointer to the location to store
       application info for target, or %NULL
#NAME: GestureZoom
#PARENT: Gtk
#COMMENT: #GtkGestureZoom is a #GtkGesture implementation able to recognize
pinch/zoom gestures, whenever the distance between both tracked
sequences changes, the #GtkGestureZoom::scale-changed signal is
emitted to report the scale factor.
#NAME: combo
#PARENT: Gtk.ComboBox.set_focus_on_click.none
#COMMENT: a #GtkComboBox
#NAME: text_view
#PARENT: Gtk.TextView.set_editable.none
#COMMENT: a #GtkTextView
#NAME: get_rubber_banding
#PARENT: Gtk.TreeView
#COMMENT: Returns whether rubber banding is turned on for @tree_view.  If the
selection mode is #GTK_SELECTION_MULTIPLE, rubber banding will allow the
user to select multiple rows by dragging the mouse.
#NAME: set_focus_visible
#PARENT: Gtk.Window
#COMMENT: Sets the #GtkWindow:focus-visible property.
#NAME: stock_lookup
#PARENT: Gtk.stock_lookup
#COMMENT: %TRUE if @item was initialized
#NAME: list_store
#PARENT: Gtk.ListStore.remove.gboolean
#COMMENT: A #GtkListStore
#NAME: get_style_context
#PARENT: Gtk.NumerableIcon
#COMMENT: Returns the #GtkStyleContext used by the icon for theming,
or %NULL if there’s none.
#NAME: prepend_search_path
#PARENT: Gtk.IconTheme
#COMMENT: Prepends a directory to the search path.
See gtk_icon_theme_set_search_path().
#NAME: sortable
#PARENT: Gtk.TreeSortable.set_sort_func.none
#COMMENT: A #GtkTreeSortable
#NAME: lookup_by_gicon
#PARENT: Gtk.IconTheme.lookup_by_gicon
#COMMENT: a #GtkIconInfo containing
    information about the icon, or %NULL if the icon wasn’t
    found. Unref with g_object_unref()
#NAME: user_data_destroy
#PARENT: Gtk.TextBuffer.register_deserialize_format.Gdk.Atom
#COMMENT: a function to call when @user_data is no longer needed
#NAME: selection_data
#PARENT: Gtk.TreeDragDest.row_drop_possible.gboolean
#COMMENT: the data being dragged
#NAME: path
#PARENT: Gtk.TreeModel.row_inserted.none
#COMMENT: a #GtkTreePath-struct pointing to the inserted row
#NAME: path
#PARENT: Gtk.WidgetPath.iter_get_name.utf8
#COMMENT: a #GtkWidgetPath
#NAME: is_adjusting
#PARENT: Gtk.HSV
#COMMENT: An HSV color selector can be said to be adjusting if multiple rapid
changes are being made to its value, for example, when the user is
adjusting the value with the mouse. This function queries whether
the HSV color selector is being adjusted or not.
#NAME: choose_icon
#PARENT: Gtk.IconTheme.choose_icon
#COMMENT: a #GtkIconInfo object
containing information about the icon, or %NULL if the icon wasn’t
found.
#NAME: add_signal
#PARENT: Gtk.BindingEntry
#COMMENT: Override or install a new key binding for @keyval with @modifiers on
@binding_set. When the binding is activated, @signal_name will be
emitted on the target widget, with @n_args @Varargs used as
arguments.
#NAME: pos
#PARENT: Gtk.Grid.set_row_baseline_position.none
#COMMENT: a #GtkBaselinePosition
#NAME: adjustment
#PARENT: Gtk.Adjustment.set_lower.none
#COMMENT: a #GtkAdjustment
#NAME: cr
#PARENT: Gtk.paint_diamond.none
#COMMENT: a #cairo_t
#NAME: data
#PARENT: Gtk.FileFilterFunc.gboolean
#COMMENT: user data passed to gtk_file_filter_add_custom()
#NAME: invalidate_sort
#PARENT: Gtk.ListBox
#COMMENT: Update the sorting for all rows. Call this when result
of the sort function on the @box is changed due
to an external factor.
#NAME: get_group
#PARENT: Gtk.RadioMenuItem
#COMMENT: Returns the group to which the radio menu item belongs, as a #GList of
#GtkRadioMenuItem. The list belongs to GTK+ and should not be freed.
#NAME: startup_id
#PARENT: Gtk.Window.set_startup_id.none
#COMMENT: a string with startup-notification identifier
#NAME: selected_foreach
#PARENT: Gtk.ListBox
#COMMENT: Calls a function for each selected child.

Note that the selection cannot be modified from within this function.
#NAME: selected_volume
#PARENT: Gtk.PlacesSidebar.populate-popup.none
#COMMENT: #GVolume if the selected item is a volume, or #NULL if it is a file.
#NAME: paste-done
#PARENT: Gtk.TextBuffer
#COMMENT: The paste-done signal is emitted after paste operation has been completed.
This is useful to properly scroll the view to the end of the pasted text.
See gtk_text_buffer_paste_clipboard() for more details.
#NAME: is_finished
#PARENT: Gtk.PrintOperation
#COMMENT: A convenience function to find out if the print operation
is finished, either successfully (%GTK_PRINT_STATUS_FINISHED)
or unsuccessfully (%GTK_PRINT_STATUS_FINISHED_ABORTED).

Note: when you enable print status tracking the print operation
can be in a non-finished state even after done has been called, as
the operation status then tracks the print job status on the printer.
#NAME: set_snap_to_ticks
#PARENT: Gtk.SpinButton
#COMMENT: Sets the policy as to whether values are corrected to the
nearest step increment when a spin button is activated after
providing an invalid value.
#NAME: set_current_folder_file
#PARENT: Gtk.FileChooser.set_current_folder_file
#COMMENT: %TRUE if the folder could be changed successfully, %FALSE
otherwise.
#NAME: alloc_area
#PARENT: Gtk.CellArea.get_cell_at_position.CellRenderer
#COMMENT: where to store the inner allocated area of the
                                 returned cell renderer, or %NULL.
#NAME: background_area
#PARENT: Gtk.CellRenderer.activate.gboolean
#COMMENT: background area as passed to gtk_cell_renderer_render()
#NAME: new_for_display
#PARENT: Gtk.Plug.new_for_display
#COMMENT: the new #GtkPlug widget.
#NAME: start
#PARENT: Gtk.TextBuffer.get_slice.utf8
#COMMENT: start of a range
#NAME: widget
#PARENT: Gtk.selection_add_targets.none
#COMMENT: a #GtkWidget
#NAME: stack
#PARENT: Gtk.Stack.get_homogeneous.gboolean
#COMMENT: a #GtkStack
#NAME: set_icon_size
#PARENT: Gtk.Toolbar
#COMMENT: This function sets the size of stock icons in the toolbar. You
can call it both before you add the icons and after they’ve been
added. The size you set will override user preferences for the default
icon size.

This should only be used for special-purpose toolbars, normal
application toolbars should respect the user preferences for the
size of icons.
#NAME: get_action
#PARENT: Gtk.UIManager
#COMMENT: Looks up an action by following a path. See gtk_ui_manager_get_widget()
for more information about paths.
#NAME: start_editing
#PARENT: Gtk.CellRenderer
#COMMENT: Passes an activate event to the cell renderer for possible processing.
#NAME: layout_index
#PARENT: Gtk.Entry.layout_index_to_text_index.gint
#COMMENT: byte index into the entry layout text
#NAME: data
#PARENT: Gtk.ComboBox.set_row_separator_func.none
#COMMENT: user data to pass to @func, or %NULL
#NAME: icon_info
#PARENT: Gtk.IconInfo.load_surface.cairo.Surface
#COMMENT: a #GtkIconInfo from gtk_icon_theme_lookup_icon()
#NAME: right
#PARENT: Gtk.PanDirection
#COMMENT: panned towards the right
#NAME: widget
#PARENT: Gtk.Widget.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a #GtkWidget
#NAME: box
#PARENT: Gtk.FlowBox.get_row_spacing.guint
#COMMENT: a #GtkFlowBox
#NAME: new
#PARENT: Gtk.Alignment.new
#COMMENT: the new #GtkAlignment
#NAME: Notebook
#PARENT: Gtk
#COMMENT: The #GtkNotebook widget is a #GtkContainer whose children are pages that
can be switched between using tab labels along one edge.

There are many configuration options for GtkNotebook. Among other
things, you can choose on which edge the tabs appear
(see gtk_notebook_set_tab_pos()), whether, if there are too many
tabs to fit the notebook should be made bigger or scrolling
arrows added (see gtk_notebook_set_scrollable()), and whether there
will be a popup menu allowing the users to switch pages.
(see gtk_notebook_popup_enable(), gtk_notebook_popup_disable())

# GtkNotebook as GtkBuildable

The GtkNotebook implementation of the #GtkBuildable interface
supports placing children into tabs by specifying “tab” as the
“type” attribute of a <child> element. Note that the content
of the tab must be created before the tab can be filled.
A tab child can be specified without specifying a <child>
type attribute.

To add a child widget in the notebooks action area, specify
"action-start" or “action-end” as the “type” attribute of the
<child> element.

An example of a UI definition fragment with GtkNotebook:
|[
<object class="GtkNotebook">
  <child>
    <object class="GtkLabel" id="notebook-content">
      <property name="label">Content</property>
    </object>
  </child>
  <child type="tab">
    <object class="GtkLabel" id="notebook-tab">
      <property name="label">Tab</property>
    </object>
  </child>
</object>
]|
#NAME: get_dither
#PARENT: Gtk.PrintSettings.get_dither
#COMMENT: the dithering that is used
#NAME: color
#PARENT: Gtk.Style.lookup_color.gboolean
#COMMENT: the #GdkColor to fill in
#NAME: col_align
#PARENT: Gtk.TreeView.scroll_to_cell.none
#COMMENT: The horizontal alignment of the column specified by @column.
#NAME: icon_set
#PARENT: Gtk.IconSet.add_source.none
#COMMENT: a #GtkIconSet
#NAME: table
#PARENT: Gtk.Table.set_homogeneous.none
#COMMENT: The #GtkTable you wish to set the homogeneous properties of.
#NAME: label
#PARENT: Gtk.Label.set_line_wrap.none
#COMMENT: a #GtkLabel
#NAME: flags
#PARENT: Gtk.CellArea.render.none
#COMMENT: the #GtkCellRendererState for @area in this row.
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.set_policy.none
#COMMENT: a #GtkScrolledWindow
#NAME: get
#PARENT: Gtk.PrintSettings
#COMMENT: Looks up the string value associated with @key.
#NAME: draw_value
#PARENT: Gtk.Scale.set_draw_value.none
#COMMENT: %TRUE to draw the value
#NAME: buffer
#PARENT: Gtk.TextBuffer.create_child_anchor.TextChildAnchor
#COMMENT: a #GtkTextBuffer
#NAME: stock_id
#PARENT: Gtk.StatusIcon.set_from_stock.none
#COMMENT: a stock icon id
#NAME: xthickness
#PARENT: Gtk.RcStyle
#COMMENT: X thickness
#NAME: engine
#PARENT: Gtk.ThemingEngine.has_class.gboolean
#COMMENT: a #GtkThemingEngine
#NAME: name
#PARENT: Gtk.WidgetPath.iter_has_name.gboolean
#COMMENT: a widget name
#NAME: set_wmclass
#PARENT: Gtk.Window
#COMMENT: Don’t use this function. It sets the X Window System “class” and
“name” hints for a window.  According to the ICCCM, you should
always set these to the same value for all windows in an
application, and GTK+ sets them to that value by default, so calling
this function is sort of pointless. However, you may want to call
gtk_window_set_role() on each window in your application, for the
benefit of the session manager. Setting the role allows the window
manager to restore window positions when loading a saved session.
#NAME: has-tooltip
#PARENT: Gtk.StatusIcon
#COMMENT: Enables or disables the emission of #GtkStatusIcon::query-tooltip on
@status_icon.  A value of %TRUE indicates that @status_icon can have a
tooltip, in this case the status icon will be queried using
#GtkStatusIcon::query-tooltip to determine whether it will provide a
tooltip or not.

Note that setting this property to %TRUE for the first time will change
the event masks of the windows of this status icon to include leave-notify
and motion-notify events. This will not be undone when the property is set
to %FALSE again.

Whether this property is respected is platform dependent.
For plain text tooltips, use #GtkStatusIcon:tooltip-text in preference.
#NAME: new
#PARENT: Gtk.HBox
#COMMENT: Creates a new #GtkHBox.
#NAME: model
#PARENT: Gtk.IconView.set_model.none
#COMMENT: The model.
#NAME: image_menu_item
#PARENT: Gtk.ImageMenuItem.get_image.Widget
#COMMENT: a #GtkImageMenuItem
#NAME: row
#PARENT: Gtk.ListBox.drag_highlight_row.none
#COMMENT: a #GtkListBoxRow
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_title.none
#COMMENT: a #GtkStatusIcon
#NAME: progress
#PARENT: Gtk.ThemingEngine.state_is_running.gboolean
#COMMENT: return location for the transition progress
#NAME: width
#PARENT: Gtk.Window.get_default_size.none
#COMMENT: location to store the default width, or %NULL
#NAME: widget
#PARENT: Gtk.test_slider_get_value.gdouble
#COMMENT: valid widget pointer.
#NAME: child
#PARENT: Gtk.FlowBoxChild.is_selected.gboolean
#COMMENT: a #GtkFlowBoxChild
#NAME: new_with_label_from_widget
#PARENT: Gtk.RadioButton
#COMMENT: Creates a new #GtkRadioButton with a text label, adding it to
the same group as @radio_group_member.
#NAME: iter
#PARENT: Gtk.TextIter.forward_cursor_positions.gboolean
#COMMENT: a #GtkTextIter
#NAME: event
#PARENT: Gtk.Widget.leave-notify-event.gboolean
#COMMENT: the #GdkEventCrossing which triggered
  this signal.
#NAME: name
#PARENT: Gtk.StyleProperties.map_color.none
#COMMENT: color name
#NAME: get_modified
#PARENT: Gtk.TextBuffer.get_modified
#COMMENT: %TRUE if the buffer has been modified
#NAME: backward_sentence_starts
#PARENT: Gtk.TextIter.backward_sentence_starts
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: model
#PARENT: Gtk.TreeModel.foreach.none
#COMMENT: a #GtkTreeModel
#NAME: pos
#PARENT: Gtk.TreeView.get_dest_row_at_pos.gboolean
#COMMENT: Return location for the drop position, or
  %NULL
#NAME: misc
#PARENT: Gtk.Misc.get_alignment.none
#COMMENT: a #GtkMisc
#NAME: column
#PARENT: Gtk.TreeViewColumnDropFunc.gboolean
#COMMENT: The #GtkTreeViewColumn being dragged
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_wrap_width.none
#COMMENT: A #GtkComboBox
#NAME: binding_set
#PARENT: Gtk.BindingSet.activate.gboolean
#COMMENT: a #GtkBindingSet set to activate
#NAME: index_
#PARENT: Gtk.ListBox.get_row_at_index.ListBoxRow
#COMMENT: the index of the row
#NAME: pack_start
#PARENT: Gtk.TreeViewColumn
#COMMENT: Packs the @cell into the beginning of the column. If @expand is %FALSE, then
the @cell is allocated no more space than it needs. Any unused space is divided
evenly between cells for which @expand is %TRUE.
#NAME: event
#PARENT: Gtk.Widget.send_expose.gint
#COMMENT: a expose #GdkEvent
#NAME: action
#PARENT: Gtk.Action.set_is_important.none
#COMMENT: the action object
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_junction_sides.JunctionSides
#COMMENT: a #GtkThemingEngine
#NAME: free
#PARENT: Gtk.TreeIter
#COMMENT: Frees an iterator that has been allocated by gtk_tree_iter_copy().

This function is mainly used for language bindings.
#NAME: widget
#PARENT: Gtk.Widget.add_tick_callback.guint
#COMMENT: a #GtkWidget
#NAME: get_max_width_chars
#PARENT: Gtk.Label.get_max_width_chars
#COMMENT: the maximum width of the label in characters.
#NAME: new
#PARENT: Gtk.RadioToolButton.new
#COMMENT: The new #GtkRadioToolButton
#NAME: new
#PARENT: Gtk.StyleProperties.new
#COMMENT: a new #GtkStyleProperties
#NAME: callback
#PARENT: Gtk.Clipboard.request_contents.none
#COMMENT: A function to call when the results are received
    (or the retrieval fails). If the retrieval fails the length field of
    @selection_data will be negative.
#NAME: get_authors
#PARENT: Gtk.AboutDialog.get_authors
#COMMENT: A
 %NULL-terminated string array containing the authors. The array is
 owned by the about dialog and must not be modified.
#NAME: prepend_page
#PARENT: Gtk.Notebook
#COMMENT: Prepends a page to @notebook.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_reorderable.none
#COMMENT: A #GtkTreeView.
#NAME: show-default-item
#PARENT: Gtk.AppChooserButton
#COMMENT: The #GtkAppChooserButton:show-default-item property determines
whether the dropdown menu should show the default application
on top for the provided content type.
#NAME: action_group
#PARENT: Gtk.ActionGroup.get_action.Action
#COMMENT: the action group
#NAME: entry
#PARENT: Gtk.SearchEntry.handle_event.gboolean
#COMMENT: a #GtkSearchEntry
#NAME: text_view
#PARENT: Gtk.TextView.get_pixels_below_lines.gint
#COMMENT: a #GtkTextView
#NAME: application-activated
#PARENT: Gtk.AppChooserWidget
#COMMENT: Emitted when an application item is activated from the widget's list.

This usually happens when the user double clicks an item, or an item
is selected and the user presses one of the keys Space, Shift+Space,
Return or Enter.
#NAME: set_connect_func
#PARENT: Gtk.WidgetClass
#COMMENT: For use in lanuage bindings, this will override the default #GtkBuilderConnectFunc to be
used when parsing GtkBuilder xml from this class’s template data.

Note that this must be called from a composite widget classes class
initializer after calling gtk_widget_class_set_template().
#NAME: menu_item
#PARENT: Gtk.MenuItem.get_use_underline.gboolean
#COMMENT: a #GtkMenuItem
#NAME: buffer
#PARENT: Gtk.TextBuffer.set_modified.none
#COMMENT: a #GtkTextBuffer
#NAME: title
#PARENT: Gtk.Menu.set_title.none
#COMMENT: a string containing the title for the menu
#NAME: add_path
#PARENT: Gtk.BindingSet
#COMMENT: This function was used internally by the GtkRC parsing mechanism
to assign match patterns to #GtkBindingSet structures.

In GTK+ 3, these match patterns are unused.
#NAME: set_show_tabs
#PARENT: Gtk.Notebook
#COMMENT: Sets whether to show the tabs for the notebook or not.
#NAME: application
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: expanded
#PARENT: Gtk.CellRendererState
#COMMENT: The cell is in a row that is expanded. Since 3.4
#NAME: CellRendererAccel
#PARENT: Gtk
#COMMENT: #GtkCellRendererAccel displays a keyboard accelerator (i.e. a key
combination like `Control + a`). If the cell renderer is editable,
the accelerator can be changed by simply typing the new combination.

The #GtkCellRendererAccel cell renderer was added in GTK+ 2.10.
#NAME: text-xalign
#PARENT: Gtk.CellRendererProgress
#COMMENT: The "text-xalign" property controls the horizontal alignment of the
text in the progress bar.  Valid values range from 0 (left) to 1
(right).  Reserved for RTL layouts.
#NAME: set_entry_text_column
#PARENT: Gtk.ComboBox
#COMMENT: Sets the model column which @combo_box should use to get strings from
to be @text_column. The column @text_column in the model of @combo_box
must be of type %G_TYPE_STRING.

This is only relevant if @combo_box has been created with
#GtkComboBox:has-entry as %TRUE.
#NAME: label
#PARENT: Gtk.Label.get_xalign.gfloat
#COMMENT: a #GtkLabel
#NAME: set_default_sort_func
#PARENT: Gtk.TreeSortable
#COMMENT: Sets the default comparison function used when sorting to be @sort_func.
If the current sort column id of @sortable is
%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the model will sort using
this function.

If @sort_func is %NULL, then there will be no default comparison function.
This means that once the model  has been sorted, it can’t go back to the
default state. In this case, when the current sort column id of @sortable
is %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.
#NAME: get_preferred_height_for_width
#PARENT: Gtk.CellRenderer
#COMMENT: Retreives a cell renderers’s minimum and natural height if it were rendered to
@widget with the specified @width.
#NAME: device_grab_remove
#PARENT: Gtk
#COMMENT: Removes a device grab from the given widget.

You have to pair calls to gtk_device_grab_add() and
gtk_device_grab_remove().
#NAME: buffer
#PARENT: Gtk.EntryBuffer.get_bytes.gsize
#COMMENT: a #GtkEntryBuffer
#NAME: copy
#PARENT: Gtk.PaperSize
#COMMENT: Copies an existing #GtkPaperSize.
#NAME: cell
#PARENT: Gtk.CellRenderer.is_activatable.gboolean
#COMMENT: A #GtkCellRenderer
#NAME: wait_for_contents
#PARENT: Gtk.Clipboard.wait_for_contents
#COMMENT: a newly-allocated #GtkSelectionData object or %NULL
              if retrieving the given target failed. If non-%NULL,
              this value must be freed with gtk_selection_data_free()
              when you are finished with it.
#NAME: source_file_list
#PARENT: Gtk.PlacesSidebar.drag-action-requested.gint
#COMMENT: 
  List of #GFile that are being dragged
#NAME: context
#PARENT: Gtk.StyleContext.get_parent.StyleContext
#COMMENT: a #GtkStyleContext
#NAME: new_text_length
#PARENT: Gtk.Editable.insert_text.none
#COMMENT: the length of the text in bytes, or -1
#NAME: include_custom
#PARENT: Gtk.PaperSize.get_paper_sizes.PaperSize
#COMMENT: whether to include custom paper sizes
    as defined in the page setup dialog
#NAME: get_has_tooltip
#PARENT: Gtk.Widget
#COMMENT: Returns the current value of the has-tooltip property.  See
#GtkWidget:has-tooltip for more information.
#NAME: is_grouped_with
#PARENT: Gtk.Gesture.is_grouped_with
#COMMENT: whether the gestures are grouped
#NAME: completion
#PARENT: Gtk.EntryCompletion.set_text_column.none
#COMMENT: a #GtkEntryCompletion
#NAME: chooser
#PARENT: Gtk.FileChooser.list_shortcut_folder_uris.utf8
#COMMENT: a #GtkFileChooser
#NAME: widget
#PARENT: Gtk.Widget.set_can_focus.none
#COMMENT: a #GtkWidget
#NAME: background-rgba
#PARENT: Gtk.TextTag
#COMMENT: Background color as a #GdkRGBA.
#NAME: get_no_show_all
#PARENT: Gtk.Widget
#COMMENT: Returns the current value of the #GtkWidget:no-show-all property,
which determines whether calls to gtk_widget_show_all()
will affect this widget.
#NAME: render_activity
#PARENT: Gtk
#COMMENT: Renders an activity indicator (such as in #GtkSpinner).
The state %GTK_STATE_FLAG_CHECKED determines whether there is
activity going on.
#NAME: state
#PARENT: Gtk.Style.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a state
#NAME: state-changed
#PARENT: Gtk.Widget
#COMMENT: The ::state-changed signal is emitted when the widget state changes.
See gtk_widget_get_state().
#NAME: get_icon_gicon
#PARENT: Gtk.Entry.get_icon_gicon
#COMMENT: A #GIcon, or %NULL if no icon is set
    or if the icon is not a #GIcon
#NAME: color
#PARENT: Gtk.CellView.set_background_color.none
#COMMENT: the new background color
#NAME: path
#PARENT: Gtk.StyleProviderIface.get_style_property.get_style_property.gboolean
#COMMENT: #GtkWidgetPath to query
#NAME: widget
#PARENT: Gtk.Widget.is_composited.gboolean
#COMMENT: a #GtkWidget
#NAME: minimum_height
#PARENT: Gtk.WidgetClass.get_preferred_height.get_preferred_height.none
#COMMENT: location to store the minimum height, or %NULL
#NAME: always-show-image
#PARENT: Gtk.Button
#COMMENT: If %TRUE, the button will ignore the #GtkSettings:gtk-button-images
setting and always show the image, if available.

Use this property if the button would be useless or hard to use
without the image.
#NAME: begin_move_drag
#PARENT: Gtk.Window
#COMMENT: Starts moving a window. This function is used if an application has
window movement grips. When GDK can support it, the window movement
will be done using the standard mechanism for the
[window manager][gtk-X11-arch] or windowing
system. Otherwise, GDK will try to emulate window movement,
potentially not all that well, depending on the windowing system.
#NAME: window_group
#PARENT: Gtk.WindowGroup.remove_window.none
#COMMENT: a #GtkWindowGroup
#NAME: notify
#PARENT: Gtk.FileFilter.add_custom.none
#COMMENT: function to call to free @data when it is no longer needed.
#NAME: selection_data
#PARENT: Gtk.SelectionData.targets_include_text.gboolean
#COMMENT: a #GtkSelectionData object
#NAME: user_data
#PARENT: Gtk.TextBufferDeserializeFunc.gboolean
#COMMENT: user data that was specified when registering the format
#NAME: set_sort_column_id
#PARENT: Gtk.TreeSortable
#COMMENT: Sets the current sort column to be @sort_column_id. The @sortable will
resort itself to reflect this change, after emitting a
#GtkTreeSortable::sort-column-changed signal. @sort_column_id may either be
a regular column id, or one of the following special values:

- %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: the default sort function
  will be used, if it is set

- %GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: no sorting will occur
#NAME: apply_attributes
#PARENT: Gtk.CellArea
#COMMENT: Applies any connected attributes to the renderers in
@area by pulling the values from @tree_model.
#NAME: yscale
#PARENT: Gtk.Alignment.set.none
#COMMENT: the amount that the child widget expands vertically to fill up
 unused space, from 0 to 1. The values are similar to @xscale.
#NAME: x0
#PARENT: Gtk.render_line.none
#COMMENT: X coordinate for the origin of the line
#NAME: x1
#PARENT: Gtk.render_line.none
#COMMENT: X coordinate for the end of the line
#NAME: set_sequence_state
#PARENT: Gtk.Gesture
#COMMENT: Sets the state of @sequence in @gesture. Sequences start
in state #GTK_EVENT_SEQUENCE_NONE, and whenever they change
state, they can never go back to that state. Likewise,
sequences in state #GTK_EVENT_SEQUENCE_DENIED cannot turn
back to a not denied state. With these rules, the lifetime
of an event sequence is constrained to the next four:

* None
* None → Denied
* None → Claimed
* None → Claimed → Denied

Note: Due to event handling ordering, it may be unsafe to
set the state on another gesture within a #GtkGesture::begin
signal handler, as the callback might be executed before
the other gesture knows about the sequence. A safe way to
perform this could be:

|[
static void
first_gesture_begin_cb (GtkGesture       *first_gesture,
                        GdkEventSequence *sequence,
                        gpointer          user_data)
{
  gtk_gesture_set_sequence_state (first_gesture, sequence, GTK_EVENT_SEQUENCE_ACCEPTED);
  gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
}

static void
second_gesture_begin_cb (GtkGesture       *second_gesture,
                         GdkEventSequence *sequence,
                         gpointer          user_data)
{
  if (gtk_gesture_get_sequence_state (first_gesture, sequence) == GTK_EVENT_SEQUENCE_ACCEPTED)
    gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
}
]|

If both gestures are in the same group, just set the state on
the gesture emitting the event, the sequence will be already
be initialized to the group's global state when the second
gesture processes the event.
#NAME: theme_class
#PARENT: Gtk.SymbolicColor.new_win32.SymbolicColor
#COMMENT: The theme class to pull color from
#NAME: create_tags
#PARENT: Gtk.TextBufferDeserializeFunc.gboolean
#COMMENT: %TRUE if deserializing may create tags
#NAME: down-folder
#PARENT: Gtk.FileChooserWidget
#COMMENT: The ::down-folder signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

This is used to make the file chooser go to a child of the
current folder in the file hierarchy.  The subfolder that
will be used is displayed in the path bar widget of the file
chooser.  For example, if the path bar is showing
"/foo/bar/baz", with bar currently displayed, then this will cause
the file chooser to switch to the "baz" subfolder.

The default binding for this signal is `Alt + Down`.
#NAME: new_with_stock_from_widget
#PARENT: Gtk.RadioToolButton
#COMMENT: Creates a new #GtkRadioToolButton adding it to the same group as @group.
The new #GtkRadioToolButton will contain an icon and label from the
stock item indicated by @stock_id.
#NAME: toolitem
#PARENT: Gtk.UIManagerItemType
#COMMENT: Create a toolitem.
#NAME: clipboard
#PARENT: Gtk.Clipboard.request_image.none
#COMMENT: a #GtkClipboard
#NAME: get_page_height
#PARENT: Gtk.PageSetup
#COMMENT: Returns the page height in units of @unit.

Note that this function takes orientation and
margins into consideration.
See gtk_page_setup_get_paper_height().
#NAME: new
#PARENT: Gtk.PrintOperation.new
#COMMENT: a new #GtkPrintOperation
#NAME: adjustment
#PARENT: Gtk.FlowBox.set_hadjustment.none
#COMMENT: an adjustment which should be adjusted
   when the focus is moved among the descendents of @container
#NAME: select_range
#PARENT: Gtk.TreeSelection
#COMMENT: Selects a range of nodes, determined by @start_path and @end_path inclusive.
@selection must be set to #GTK_SELECTION_MULTIPLE mode.
#NAME: resource_name
#PARENT: Gtk.WidgetClass.set_template_from_resource.none
#COMMENT: The name of the resource to load the template from
#NAME: set_overwrite_mode
#PARENT: Gtk.Entry
#COMMENT: Sets whether the text is overwritten when typing in the #GtkEntry.
#NAME: height
#PARENT: Gtk.PaperSize.new_from_ppd.PaperSize
#COMMENT: the paper height in points
#NAME: VScale
#PARENT: Gtk
#COMMENT: The #GtkVScale widget is used to allow the user to select a value using
a vertical slider. To create one, use gtk_hscale_new_with_range().

The position to show the current value, and the number of decimal places
shown can be set using the parent #GtkScale class’s functions.

GtkVScale has been deprecated, use #GtkScale instead.
#NAME: hadjustment
#PARENT: Gtk.Viewport.new.Widget
#COMMENT: horizontal adjustment
#NAME: rc_add_default_file
#PARENT: Gtk
#COMMENT: Adds a file to the list of files to be parsed at the
end of gtk_init().
#NAME: actionable
#PARENT: Gtk.ActionableInterface.set_action_name.set_action_name.none
#COMMENT: a #GtkActionable widget
#NAME: iter_is_valid
#PARENT: Gtk.ListStore
#COMMENT: > This function is slow. Only use it for debugging and/or testing
> purposes.

Checks if the given iter is a valid iter for this #GtkListStore.
#NAME: insert
#PARENT: Gtk.Toolbar
#COMMENT: Insert a #GtkToolItem into the toolbar at position @pos. If @pos is
0 the item is prepended to the start of the toolbar. If @pos is
negative, the item is appended to the end of the toolbar.
#NAME: action
#PARENT: Gtk.FileChooserDialog.new.Widget
#COMMENT: Open or save mode for the dialog
#NAME: page_backward
#PARENT: Gtk.SpinType
#COMMENT: Decrement by the adjustments page increment.
#NAME: add_objects_from_string
#PARENT: Gtk.Builder.add_objects_from_string
#COMMENT: A positive value on success, 0 if an error occurred
#NAME: icon_names
#PARENT: Gtk.IconTheme.choose_icon.IconInfo
#COMMENT: %NULL-terminated array of
    icon names to lookup
#NAME: last
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: copy
#PARENT: Gtk.TextAttributes.copy
#COMMENT: a copy of @src,
    free with gtk_text_attributes_unref()
#NAME: vhomogeneous
#PARENT: Gtk.Stack.set_vhomogeneous.none
#COMMENT: %TRUE to make @stack vertically homogeneous
#NAME: add
#PARENT: Gtk.TargetList
#COMMENT: Appends another target to a #GtkTargetList.
#NAME: init
#PARENT: Gtk
#COMMENT: Call this function before using any other GTK+ functions in your GUI
applications.  It will initialize everything needed to operate the
toolkit and parses some standard command line options.

Although you are expected to pass the @argc, @argv parameters from main() to
this function, it is possible to pass %NULL if @argv is not available or
commandline handling is not required.

@argc and @argv are adjusted accordingly so your own code will
never see those standard arguments.

Note that there are some alternative ways to initialize GTK+:
if you are calling gtk_parse_args(), gtk_init_check(),
gtk_init_with_args() or g_option_context_parse() with
the option group returned by gtk_get_option_group(),
you don’t have to call gtk_init().

And if you are using #GtkApplication, you don't have to call any of the
initialization functions either; the #GtkApplication::startup handler
does it for you.

This function will terminate your program if it was unable to
initialize the windowing system for some reason. If you want
your program to fall back to a textual interface you want to
call gtk_init_check() instead.

Since 2.18, GTK+ calls `signal (SIGPIPE, SIG_IGN)`
during initialization, to ignore SIGPIPE signals, since these are
almost never wanted in graphical applications. If you do need to
handle SIGPIPE for some reason, reset the handler after gtk_init(),
but notice that other libraries (e.g. libdbus or gvfs) might do
similar things.
#NAME: builder
#PARENT: Gtk.Builder.add_objects_from_file.guint
#COMMENT: a #GtkBuilder
#NAME: website
#PARENT: Gtk.AboutDialog.set_website.none
#COMMENT: a URL string starting with "http://"
#NAME: name
#PARENT: Gtk.ActionGroup
#COMMENT: A name for the action.
#NAME: ref
#PARENT: Gtk.CssSection.ref
#COMMENT: @section itself.
#NAME: range
#PARENT: Gtk.Range.get_fill_level.gdouble
#COMMENT: A #GtkRange
#NAME: position
#PARENT: Gtk.ComboBoxText.insert_text.none
#COMMENT: An index to insert @text
#NAME: add_shortcut_folder_uri
#PARENT: Gtk.FileChooser
#COMMENT: Adds a folder URI to be displayed with the shortcut folders in a file
chooser.  Note that shortcut folders do not get saved, as they are provided
by the application.  For example, you can use this to add a
“file:///usr/share/mydrawprogram/Clipart” folder to the volume list.
#NAME: show-close-button
#PARENT: Gtk.HeaderBar
#COMMENT: Whether to show window decorations.

Which buttons are actually shown and where is determined
by the #GtkHeaderBar:decoration-layout property, and by
the state of the window (e.g. a close button will not be
shown if the window can't be closed).
#NAME: start
#PARENT: Gtk.ScrollType
#COMMENT: Scroll to start.
#NAME: double_buffered
#PARENT: Gtk.Widget.set_double_buffered.none
#COMMENT: %TRUE to double-buffer a widget
#NAME: orientation
#PARENT: Gtk.PageSetup.set_orientation.none
#COMMENT: a #GtkPageOrientation value
#NAME: first
#PARENT: Gtk.RegionFlags
#COMMENT: Region is the first one within a set.
#NAME: gap_side
#PARENT: Gtk.paint_extension.none
#COMMENT: the side on to which the extension is attached
#NAME: text
#PARENT: Gtk.EntryBuffer
#COMMENT: The contents of the buffer.
#NAME: child
#PARENT: Gtk.Notebook.prepend_page.gint
#COMMENT: the #GtkWidget to use as the contents of the page
#NAME: gtk-enable-accels
#PARENT: Gtk.Settings
#COMMENT: Whether menu items should have visible accelerators which can be
activated.
#NAME: screen
#PARENT: Gtk.StyleContext.set_screen.none
#COMMENT: a #GdkScreen
#NAME: settings
#PARENT: Gtk.PrintSettings.get_paper_width.gdouble
#COMMENT: a #GtkPrintSettings
#NAME: notebook
#PARENT: Gtk.Notebook.get_group_name.utf8
#COMMENT: a #GtkNotebook
#NAME: user_data
#PARENT: Gtk.Clipboard.request_uris.none
#COMMENT: user data to pass to @callback.
#NAME: set_change_palette_with_screen_hook
#PARENT: Gtk.ColorSelection
#COMMENT: Installs a global function to be called whenever the user
tries to modify the palette in a color selection.

This function should save the new palette contents, and update
the #GtkSettings:gtk-color-palette GtkSettings property so all
GtkColorSelection widgets will be modified.
#NAME: button
#PARENT: Gtk.Button.get_event_window.Gdk.Window
#COMMENT: a #GtkButton
#NAME: HScrollbar
#PARENT: Gtk
#COMMENT: The #GtkHScrollbar widget is a widget arranged horizontally creating a
scrollbar. See #GtkScrollbar for details on
scrollbars. #GtkAdjustment pointers may be added to handle the
adjustment of the scrollbar or it may be left %NULL in which case one
will be created for you. See #GtkScrollbar for a description of what the
fields in an adjustment represent for a scrollbar.

GtkHScrollbar has been deprecated, use #GtkScrollbar instead.
#NAME: buffer
#PARENT: Gtk.TextBuffer.insert.none
#COMMENT: a #GtkTextBuffer
#NAME: y_offset
#PARENT: Gtk.TreeViewColumn.cell_get_size.none
#COMMENT: location to return y offset of a cell relative to @cell_area, or %NULL
#NAME: target_list
#PARENT: Gtk.Widget.drag_dest_find_target.Gdk.Atom
#COMMENT: list of droppable targets, or %NULL to use
   gtk_drag_dest_get_target_list (@widget).
#NAME: scroll
#PARENT: Gtk.SpinButton.change-value.none
#COMMENT: a #GtkScrollType to specify the speed and amount of change
#NAME: new
#PARENT: Gtk.VScrollbar.new
#COMMENT: the new #GtkVScrollbar
#NAME: data
#PARENT: Gtk.ClipboardImageReceivedFunc.none
#COMMENT: the @user_data supplied to
  gtk_clipboard_request_image().
#NAME: area
#PARENT: Gtk.GLArea.set_error.none
#COMMENT: a #GtkGLArea
#NAME: new
#PARENT: Gtk.ListStore.new
#COMMENT: a new #GtkListStore
#NAME: chooser
#PARENT: Gtk.RecentChooser.set_current_uri.gboolean
#COMMENT: a #GtkRecentChooser
#NAME: data
#PARENT: Gtk.TargetEntry.copy.TargetEntry
#COMMENT: a pointer to a #GtkTargetEntry
#NAME: model
#PARENT: Gtk.ComboBox.set_model.none
#COMMENT: A #GtkTreeModel
#NAME: device
#PARENT: Gtk.device_grab_remove.none
#COMMENT: a #GdkDevice
#NAME: new
#PARENT: Gtk.CellView
#COMMENT: Creates a new #GtkCellView widget.
#NAME: focus-on-click
#PARENT: Gtk.FileChooserButton
#COMMENT: Whether the #GtkFileChooserButton button grabs focus when it is clicked
with the mouse.
#NAME: container
#PARENT: Gtk.Container.propagate_draw.none
#COMMENT: a #GtkContainer
#NAME: page_forward
#PARENT: Gtk.SpinType
#COMMENT: Increment by the adjustments page increment.
#NAME: buildable
#PARENT: Gtk.BuildableIface.custom_tag_end.custom_tag_end.none
#COMMENT: A #GtkBuildable
#NAME: activate-on-single-click
#PARENT: Gtk.IconView
#COMMENT: The activate-on-single-click property specifies whether the "item-activated" signal
will be emitted after a single click.
#NAME: button
#PARENT: Gtk.Toolbar.popup-context-menu.gboolean
#COMMENT: the mouse button the user pressed, or -1
#NAME: value
#PARENT: Gtk.TreeModel.get_value.none
#COMMENT: an empty #GValue to set
#NAME: visual
#PARENT: Gtk.Widget.set_visual.none
#COMMENT: visual to be used or %NULL to unset a previous one
#NAME: remove_filter
#PARENT: Gtk.RecentChooser
#COMMENT: Removes @filter from the list of #GtkRecentFilter objects held by @chooser.
#NAME: filter
#PARENT: Gtk.TreeModelFilter.convert_path_to_child_path.TreePath
#COMMENT: A #GtkTreeModelFilter.
#NAME: get_settings
#PARENT: Gtk.Widget
#COMMENT: Gets the settings object holding the settings used for this widget.

Note that this function can only be called when the #GtkWidget
is attached to a toplevel, since the settings object is specific
to a particular #GdkScreen.
#NAME: shadow_type
#PARENT: Gtk.Arrow.new.Widget
#COMMENT: a valid #GtkShadowType.
#NAME: label
#PARENT: Gtk.Label.get_mnemonic_keyval.guint
#COMMENT: a #GtkLabel
#NAME: new_text_length
#PARENT: Gtk.Editable.insert-text.none
#COMMENT: the length of the new text, in bytes,
    or -1 if new_text is nul-terminated
#NAME: iter
#PARENT: Gtk.TreeIter.copy.TreeIter
#COMMENT: a #GtkTreeIter-struct
#NAME: y0
#PARENT: Gtk.render_line.none
#COMMENT: Y coordinate for the origin of the line
#NAME: state
#PARENT: Gtk.Gesture.sequence-state-changed.none
#COMMENT: the new sequence state
#NAME: scale
#PARENT: Gtk.Scale.clear_marks.none
#COMMENT: a #GtkScale
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_width.gint
#COMMENT: A #GtkTreeViewColumn.
#NAME: set_tooltip_window
#PARENT: Gtk.Widget
#COMMENT: Replaces the default, usually yellow, window used for displaying
tooltips with @custom_window. GTK+ will take care of showing and
hiding @custom_window at the right moment, to behave likewise as
the default tooltip window. If @custom_window is %NULL, the default
tooltip window will be used.

If the custom window should have the default theming it needs to
have the name “gtk-tooltip”, see gtk_widget_set_name().
#NAME: parser
#PARENT: Gtk.WidgetClass.install_style_property_parser.none
#COMMENT: the parser for the style property
#NAME: y1
#PARENT: Gtk.render_line.none
#COMMENT: Y coordinate for the end of the line
#NAME: set_add_tearoffs
#PARENT: Gtk.ComboBox
#COMMENT: Sets whether the popup menu should have a tearoff
menu item.
#NAME: get_digits
#PARENT: Gtk.SpinButton.get_digits
#COMMENT: the current precision
#NAME: cell
#PARENT: Gtk.CellLayoutIface.pack_start.pack_start.none
#COMMENT: a #GtkCellRenderer
#NAME: track_links
#PARENT: Gtk.Label.set_track_visited_links.none
#COMMENT: %TRUE to track visited links
#NAME: context
#PARENT: Gtk.PrintContext.get_cairo_context.cairo.Context
#COMMENT: a #GtkPrintContext
#NAME: cell_renderer
#PARENT: Gtk.TreeViewColumn.clear_attributes.none
#COMMENT: a #GtkCellRenderer to clear the attribute mapping on.
#NAME: get_shadow_type
#PARENT: Gtk.Viewport
#COMMENT: Gets the shadow type of the #GtkViewport. See
gtk_viewport_set_shadow_type().
#NAME: ActionEntry
#PARENT: Gtk
#COMMENT: #GtkActionEntry structs are used with gtk_action_group_add_actions() to
construct actions.
#NAME: scanner
#PARENT: Gtk.AccelMap.load_scanner.none
#COMMENT: a #GScanner which has already been provided with an input file
#NAME: get_background_gicon
#PARENT: Gtk.NumerableIcon.get_background_gicon
#COMMENT: a #GIcon, or %NULL
#NAME: cclass
#PARENT: Gtk.ContainerClass.list_child_properties.GObject.ParamSpec
#COMMENT: a #GtkContainerClass
#NAME: new
#PARENT: Gtk.SeparatorMenuItem.new
#COMMENT: a new #GtkSeparatorMenuItem.
#NAME: clipboard
#PARENT: Gtk.TextBuffer.add_selection_clipboard.none
#COMMENT: a #GtkClipboard
#NAME: get_color
#PARENT: Gtk.ThemingEngine
#COMMENT: Gets the foreground color for a given state.
#NAME: model
#PARENT: Gtk.TreeSelectionForeachFunc.none
#COMMENT: The #GtkTreeModel being viewed
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_alignment.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: get_output_bin
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.
#NAME: surface
#PARENT: Gtk.render_icon_surface.none
#COMMENT: a #cairo_surface_t containing the icon to draw
#NAME: copy
#PARENT: Gtk.Requisition.copy
#COMMENT: a copy of @requisition
#NAME: padding_bottom
#PARENT: Gtk.Alignment.set_padding.none
#COMMENT: the padding at the bottom of the widget
#NAME: set_select_multiple
#PARENT: Gtk.FileChooser
#COMMENT: Sets whether multiple files can be selected in the file selector.  This is
only relevant if the action is set to be %GTK_FILE_CHOOSER_ACTION_OPEN or
%GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.
#NAME: label
#PARENT: Gtk.Label.set_pattern.none
#COMMENT: The #GtkLabel you want to set the pattern to.
#NAME: button
#PARENT: Gtk.ToolButton.set_use_underline.none
#COMMENT: a #GtkToolButton
#NAME: tree_view
#PARENT: Gtk.TreeView.convert_bin_window_to_tree_coords.none
#COMMENT: a #GtkTreeView
#NAME: get_micro_version
#PARENT: Gtk
#COMMENT: Returns the micro version number of the GTK+ library.
(e.g. in GTK+ version 3.1.5 this is 5.)

This function is in the library, so it represents the GTK+ library
your code is are running against. Contrast with the
#GTK_MICRO_VERSION macro, which represents the micro version of the
GTK+ headers you have included when compiling your code.
#NAME: type
#PARENT: Gtk.Frame.set_shadow_type.none
#COMMENT: the new #GtkShadowType
#NAME: entry-text-column
#PARENT: Gtk.ComboBox
#COMMENT: The column in the combo box's model to associate with strings from the entry
if the combo was created with #GtkComboBox:has-entry = %TRUE.
#NAME: free
#PARENT: Gtk.TargetEntry
#COMMENT: Frees a #GtkTargetEntry returned from
gtk_target_entry_new() or gtk_target_entry_copy().
#NAME: get_group_position
#PARENT: Gtk.ToolPalette.get_group_position
#COMMENT: the index of group or -1 if @group is not a child of @palette
#NAME: insert
#PARENT: Gtk.TreeStore
#COMMENT: Creates a new row at @position.  If parent is non-%NULL, then the row will be
made a child of @parent.  Otherwise, the row will be created at the toplevel.
If @position is -1 or is larger than the number of rows at that level, then
the new row will be inserted to the end of the list.  @iter will be changed
to point to this new row.  The row will be empty after this function is
called.  To fill in values, you need to call gtk_tree_store_set() or
gtk_tree_store_set_value().
#NAME: child_focus
#PARENT: Gtk.Widget
#COMMENT: This function is used by custom widget implementations; if you're
writing an app, you’d use gtk_widget_grab_focus() to move the focus
to a particular widget, and gtk_container_set_focus_chain() to
change the focus tab order. So you may want to investigate those
functions instead.

gtk_widget_child_focus() is called by containers as the user moves
around the window using keyboard shortcuts. @direction indicates
what kind of motion is taking place (up, down, left, right, tab
forward, tab backward). gtk_widget_child_focus() emits the
#GtkWidget::focus signal; widgets override the default handler
for this signal in order to implement appropriate focus behavior.

The default ::focus handler for a widget should return %TRUE if
moving in @direction left the focus on a focusable location inside
that widget, and %FALSE if moving in @direction moved the focus
outside the widget. If returning %TRUE, widgets normally
call gtk_widget_grab_focus() to place the focus accordingly;
if returning %FALSE, they don’t modify the current focus location.
#NAME: STYLE_CLASS_INFO
#PARENT: Gtk
#COMMENT: A CSS class for an area displaying an informational message,
such as those in infobars.

This is used by #GtkInfoBar.
#NAME: selection_data
#PARENT: Gtk.TreeDragDest.drag_data_received.gboolean
#COMMENT: data to drop
#NAME: minimum_size
#PARENT: Gtk.CellRenderer.get_preferred_size.none
#COMMENT: location for storing the minimum size, or %NULL
#NAME: text_index_to_layout_index
#PARENT: Gtk.Entry
#COMMENT: Converts from a position in the entry’s #PangoLayout (returned by
gtk_entry_get_layout()) to a position in the entry contents
(returned by gtk_entry_get_text()).
#NAME: stock_id
#PARENT: Gtk.Widget.render_icon_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: a stock ID
#NAME: accel_label
#PARENT: Gtk.AccelLabel.get_accel_widget.Widget
#COMMENT: a #GtkAccelLabel
#NAME: settings
#PARENT: Gtk.PrintSettings.get.utf8
#COMMENT: a #GtkPrintSettings
#NAME: spin_button
#PARENT: Gtk.SpinButton.set_adjustment.none
#COMMENT: a #GtkSpinButton
#NAME: child
#PARENT: Gtk.FlowBox.child-activated.none
#COMMENT: the child that is activated
#NAME: new
#PARENT: Gtk.IconView.new
#COMMENT: A newly created #GtkIconView widget
#NAME: value
#PARENT: Gtk.RadioAction
#COMMENT: The value is an arbitrary integer which can be used as a
convenient way to determine which action in the group is
currently active in an ::activate or ::changed signal handler.
See gtk_radio_action_get_current_value() and #GtkRadioActionEntry
for convenient ways to get and set this property.
#NAME: color
#PARENT: Gtk.StyleContext.get_color.none
#COMMENT: return value for the foreground color
#NAME: lookup
#PARENT: Gtk.IconFactory.lookup
#COMMENT: icon set of @stock_id.
#NAME: filename
#PARENT: Gtk.Builder.new_from_file.Builder
#COMMENT: filename of user interface description file
#NAME: MenuBar
#PARENT: Gtk
#COMMENT: The #GtkMenuBar is a subclass of #GtkMenuShell which contains one or
more #GtkMenuItems. The result is a standard menu bar which can hold
many menu items.
#NAME: get_transition_running
#PARENT: Gtk.Stack.get_transition_running
#COMMENT: %TRUE if the transition is currently running, %FALSE otherwise.
#NAME: has-entry
#PARENT: Gtk.CellRendererCombo
#COMMENT: If %TRUE, the cell renderer will include an entry and allow to enter
values other than the ones in the popup list.
#NAME: filter
#PARENT: Gtk.FileChooser.remove_filter.none
#COMMENT: a #GtkFileFilter
#NAME: none
#PARENT: Gtk.JunctionSides
#COMMENT: No junctions.
#NAME: iter_remove_region
#PARENT: Gtk.WidgetPath
#COMMENT: Removes the region @name from the widget at position @pos in
the hierarchy defined in @path.
#NAME: widget
#PARENT: Gtk.Widget.reset_style.none
#COMMENT: a #GtkWidget
#NAME: set_visible_horizontal
#PARENT: Gtk.ToolItem
#COMMENT: Sets whether @tool_item is visible when the toolbar is docked horizontally.
#NAME: is_focus
#PARENT: Gtk.Widget.is_focus
#COMMENT: %TRUE if the widget is the focus widget.
#NAME: whitespace
#PARENT: Gtk.DeleteType
#COMMENT: Delete only whitespace. Like M-\ in Emacs.
#NAME: title
#PARENT: Gtk.ColorButton
#COMMENT: The title of the color selection dialog
#NAME: factory
#PARENT: Gtk.IconFactory.add.none
#COMMENT: a #GtkIconFactory
#NAME: box
#PARENT: Gtk.FlowBox.get_min_children_per_line.guint
#COMMENT: a #GtkFlowBox
#NAME: uri
#PARENT: Gtk.LinkButton.new_with_label.Widget
#COMMENT: a valid URI
#NAME: item_activated
#PARENT: Gtk.IconView
#COMMENT: Activates the item determined by @path.
#NAME: exclusive
#PARENT: Gtk.GestureSingle.set_exclusive.none
#COMMENT: %TRUE to make @gesture exclusive
#NAME: menu_shell
#PARENT: Gtk.MenuShellClass.insert.insert.none
#COMMENT: a #GtkMenuShell
#NAME: notebook
#PARENT: Gtk.Notebook.prepend_page_menu.gint
#COMMENT: a #GtkNotebook
#NAME: plug-removed
#PARENT: Gtk.Socket.plug-removed
#COMMENT: %TRUE to stop other handlers from being invoked.
#NAME: spin_button
#PARENT: Gtk.SpinButton.update.none
#COMMENT: a #GtkSpinButton
#NAME: backward_word_start
#PARENT: Gtk.TextIter
#COMMENT: Moves backward to the previous word start. (If @iter is currently on a
word start, moves backward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).
#NAME: widget
#PARENT: Gtk.Widget.map.none
#COMMENT: a #GtkWidget
#NAME: BindingSet
#PARENT: Gtk
#COMMENT: A binding set maintains a list of activatable key bindings.
A single binding set can match multiple types of widgets.
Similar to style contexts, can be matched by any information contained
in a widgets #GtkWidgetPath. When a binding within a set is matched upon
activation, an action signal is emitted on the target widget to carry out
the actual activation.
#NAME: start_x
#PARENT: Gtk.GestureDrag.drag-begin.none
#COMMENT: X coordinate, relative to the widget allocation
#NAME: icon_name
#PARENT: Gtk.IconTheme.add_builtin_icon.none
#COMMENT: the name of the icon to register
#NAME: inconsistent
#PARENT: Gtk.StateFlags
#COMMENT: Widget is inconsistent.
#NAME: list
#PARENT: Gtk.Window.set_icon_list.none
#COMMENT: list of #GdkPixbuf
#NAME: select_file
#PARENT: Gtk.FileChooser.select_file
#COMMENT: Not useful.
#NAME: start_y
#PARENT: Gtk.GestureDrag.drag-begin.none
#COMMENT: Y coordinate, relative to the widget allocation
#NAME: MAJOR_VERSION
#PARENT: Gtk
#COMMENT: Like gtk_get_major_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
#NAME: draw_arrow
#PARENT: Gtk.draw_insertion_cursor.none
#COMMENT: %TRUE to draw a directional arrow on the
       cursor. Should be %FALSE unless the cursor is split.
#NAME: get_short_name
#PARENT: Gtk.RecentInfo.get_short_name
#COMMENT: A newly-allocated string in UTF-8 encoding
  free it with g_free()
#NAME: get_id
#PARENT: Gtk.ApplicationWindow
#COMMENT: Returns the unique ID of the window. If the window has not yet been added to
a #GtkApplication, returns `0`.
#NAME: child
#PARENT: Gtk.Notebook.page-added.none
#COMMENT: the child #GtkWidget affected
#NAME: get_icon_size
#PARENT: Gtk.ToolItem
#COMMENT: Returns the icon size used for @tool_item. Custom subclasses of
#GtkToolItem should call this function to find out what size icons
they should use.
#NAME: set_fixed_width
#PARENT: Gtk.TreeViewColumn
#COMMENT: If @fixed_width is not -1, sets the fixed width of @tree_column; otherwise
unsets it.  The effective value of @fixed_width is clamped between the
minumum and maximum width of the column; however, the value stored in the
“fixed-width” property is not clamped.  If the column sizing is
#GTK_TREE_VIEW_COLUMN_GROW_ONLY or #GTK_TREE_VIEW_COLUMN_AUTOSIZE, setting a
fixed width overrides the automatically calculated width.  Note that
@fixed_width is only a hint to GTK+; the width actually allocated to the
column may be greater or less than requested.

Along with “expand”, the “fixed-width” property changes when the column is
resized by the user.
#NAME: set_icon_from_icon_name
#PARENT: Gtk.Entry
#COMMENT: Sets the icon shown in the entry at the specified position
from the current icon theme.

If the icon name isn’t known, a “broken image” icon will be displayed
instead.

If @icon_name is %NULL, no icon will be shown in the specified position.
#NAME: dialog
#PARENT: Gtk.Dialog.get_response_for_widget.gint
#COMMENT: a #GtkDialog
#NAME: get_direction
#PARENT: Gtk.ThemingEngine.get_direction
#COMMENT: the widget direction
#NAME: get_value
#PARENT: Gtk.TreeModel
#COMMENT: Initializes and sets @value to that at @column.

When done with @value, g_value_unset() needs to be called
to free any allocated memory.
#NAME: get_uri
#PARENT: Gtk.LinkButton.get_uri
#COMMENT: a valid URI.  The returned string is owned by the link button
  and should not be modified or freed.
#NAME: set_title
#PARENT: Gtk.StatusIcon
#COMMENT: Sets the title of this tray icon.
This should be a short, human-readable, localized string
describing the tray icon. It may be used by tools like screen
readers to render the tray icon.
#NAME: get_visible
#PARENT: Gtk.TreeViewColumn.get_visible
#COMMENT: whether the column is visible or not.  If it is visible, then
the tree will show the column.
#NAME: set_auto_startup_notification
#PARENT: Gtk.Window
#COMMENT: By default, after showing the first #GtkWindow, GTK+ calls
gdk_notify_startup_complete().  Call this function to disable
the automatic startup notification. You might do this if your
first window is a splash screen, and you want to delay notification
until after your real main window has been shown, for example.

In that example, you would disable startup notification
temporarily, show your splash screen, then re-enable it so that
showing the main window would automatically result in notification.
#NAME: detail
#PARENT: Gtk.paint_box.none
#COMMENT: a style detail
#NAME: new_from_widget
#PARENT: Gtk.RadioButton.new_from_widget
#COMMENT: a new radio button.
#NAME: set_show_icons
#PARENT: Gtk.RecentChooser
#COMMENT: Sets whether @chooser should show an icon near the resource when
displaying it.
#NAME: set_draw_value
#PARENT: Gtk.Scale
#COMMENT: Specifies whether the current value is displayed as a string next
to the slider.
#NAME: get_resizable
#PARENT: Gtk.Window
#COMMENT: Gets the value set by gtk_window_set_resizable().
#NAME: insert-prefix
#PARENT: Gtk.EntryCompletion.insert-prefix
#COMMENT: %TRUE if the signal has been handled
#NAME: fontchooser
#PARENT: Gtk.FontChooser.set_show_preview_entry.none
#COMMENT: a #GtkFontChooser
#NAME: set_inconsistent
#PARENT: Gtk.ToggleButton
#COMMENT: If the user has selected a range of elements (such as some text or
spreadsheet cells) that are affected by a toggle button, and the
current values in that range are inconsistent, you may want to
display the toggle in an “in between” state. This function turns on
“in between” display.  Normally you would turn off the inconsistent
state again if the user toggles the toggle button. This has to be
done manually, gtk_toggle_button_set_inconsistent() only affects
visual appearance, it doesn’t affect the semantics of the button.
#NAME: get_vexpand_set
#PARENT: Gtk.Widget.get_vexpand_set
#COMMENT: whether vexpand has been explicitly set
#NAME: path
#PARENT: Gtk.WidgetPath.iter_remove_class.none
#COMMENT: a #GtkWidgetPath
#NAME: activate_default
#PARENT: Gtk.Window
#COMMENT: Activates the default widget for the window, unless the current
focused widget has been configured to receive the default action
(see gtk_widget_set_receives_default()), in which case the
focused widget is activated.
#NAME: set_paper_size_and_default_margins
#PARENT: Gtk.PageSetup
#COMMENT: Sets the paper size of the #GtkPageSetup and modifies
the margins according to the new paper size.
#NAME: row-collapsed
#PARENT: Gtk.TreeView
#COMMENT: The given row has been collapsed (child nodes are hidden).
#NAME: visited
#PARENT: Gtk.LinkButton
#COMMENT: The 'visited' state of this button. A visited link is drawn in a
different color.
#NAME: new
#PARENT: Gtk.ModelButton
#COMMENT: Creates a new GtkModelButton.
#NAME: remove_all_tags
#PARENT: Gtk.TextBuffer
#COMMENT: Removes all tags in the range between @start and @end.  Be careful
with this function; it could remove tags added in code unrelated to
the code you’re currently writing. That is, using this function is
probably a bad idea if you have two or more unrelated code sections
that add tags.
#NAME: selection_owner_set_for_display
#PARENT: Gtk.selection_owner_set_for_display
#COMMENT: TRUE if the operation succeeded
#NAME: image_menu_item
#PARENT: Gtk.ImageMenuItem.get_use_stock.gboolean
#COMMENT: a #GtkImageMenuItem
#NAME: new
#PARENT: Gtk.OffscreenWindow
#COMMENT: Creates a toplevel container widget that is used to retrieve
snapshots of widgets without showing them on the screen.
#NAME: get_icon_name
#PARENT: Gtk.Entry
#COMMENT: Retrieves the icon name used for the icon, or %NULL if there is
no icon or if the icon was set by some other method (e.g., by
pixbuf, stock or gicon).
#NAME: new
#PARENT: Gtk.FontSelection
#COMMENT: Creates a new #GtkFontSelection.
#NAME: display_name
#PARENT: Gtk.RecentFilterFlags
#COMMENT: the string that will be used to
 display the file in the recent chooser
#NAME: new
#PARENT: Gtk.Requisition.new
#COMMENT: a new empty #GtkRequisition. The newly allocated #GtkRequisition should
  be freed with gtk_requisition_free().
#NAME: rows
#PARENT: Gtk.Table.new.Widget
#COMMENT: The number of rows the new table should have.
#NAME: TextBufferSerializeFunc
#PARENT: Gtk.TextBufferSerializeFunc
#COMMENT: a newly-allocated array of guint8 which contains the serialized
  data, or %NULL if an error occurred
#NAME: cell_renderer
#PARENT: Gtk.TreeViewColumn.cell_get_position.gboolean
#COMMENT: a #GtkCellRenderer
#NAME: editable
#PARENT: Gtk.EditableInterface.delete_text.delete_text.none
#COMMENT: a #GtkEditable
#NAME: parent_class
#PARENT: Gtk.TreeSelectionClass
#COMMENT: The parent class.
#NAME: get_search_entry
#PARENT: Gtk.TreeView
#COMMENT: Returns the #GtkEntry which is currently in use as interactive search
entry for @tree_view.  In case the built-in entry is being used, %NULL
will be returned.
#NAME: get_default_attributes
#PARENT: Gtk.TextView.get_default_attributes
#COMMENT: a new #GtkTextAttributes
#NAME: button
#PARENT: Gtk.Button.get_use_stock.gboolean
#COMMENT: a #GtkButton
#NAME: current
#PARENT: Gtk.PrintPages
#COMMENT: Current page.
#NAME: cancel
#PARENT: Gtk.ButtonsType
#COMMENT: a Cancel button
#NAME: get_actions_for_accel
#PARENT: Gtk.Application.get_actions_for_accel
#COMMENT: a %NULL-terminated array of actions for @accel
#NAME: PlacesSidebar
#PARENT: Gtk
#COMMENT: #GtkPlacesSidebar is a widget that displays a list of frequently-used places in the
file system:  the user’s home directory, the user’s bookmarks, and volumes and drives.
This widget is used as a sidebar in #GtkFileChooser and may be used by file managers
and similar programs.

The places sidebar displays drives and volumes, and will automatically mount
or unmount them when the user selects them.

Applications can hook to various signals in the places sidebar to customize
its behavior.  For example, they can add extra commands to the context menu
of the sidebar.

While bookmarks are completely in control of the user, the places sidebar also
allows individual applications to provide extra shortcut folders that are unique
to each application.  For example, a Paint program may want to add a shortcut
for a Clipart folder.  You can do this with gtk_places_sidebar_add_shortcut().

To make use of the places sidebar, an application at least needs to connect
to the #GtkPlacesSidebar::open-location signal.  This is emitted when the
user selects in the sidebar a location to open.  The application should also
call gtk_places_sidebar_set_location() when it changes the currently-viewed
location.
#NAME: set_font_name
#PARENT: Gtk.FontButton
#COMMENT: Sets or updates the currently-displayed font in font picker dialog.
#NAME: get_active
#PARENT: Gtk.ComboBox
#COMMENT: Returns the index of the currently active item, or -1 if there’s no
active item. If the model is a non-flat treemodel, and the active item
is not an immediate child of the root of the tree, this function returns
`gtk_tree_path_get_indices (path)[0]`, where
`path` is the #GtkTreePath of the active item.
#NAME: set_screen
#PARENT: Gtk.IconTheme
#COMMENT: Sets the screen for an icon theme; the screen is used
to track the user’s currently configured icon theme,
which might be different for different screens.
#NAME: retrieve-surrounding
#PARENT: Gtk.IMContext
#COMMENT: The ::retrieve-surrounding signal is emitted when the input method
requires the context surrounding the cursor.  The callback should set
the input method surrounding context by calling the
gtk_im_context_set_surrounding() method.
#NAME: icon_theme
#PARENT: Gtk.IconTheme.set_search_path.none
#COMMENT: a #GtkIconTheme
#NAME: start
#PARENT: Gtk.TextBuffer.insert_range_interactive.gboolean
#COMMENT: a position in a #GtkTextBuffer
#NAME: confirm-overwrite
#PARENT: Gtk.FileChooser
#COMMENT: This signal gets emitted whenever it is appropriate to present a
confirmation dialog when the user has selected a file name that
already exists.  The signal only gets emitted when the file
chooser is in %GTK_FILE_CHOOSER_ACTION_SAVE mode.

Most applications just need to turn on the
#GtkFileChooser:do-overwrite-confirmation property (or call the
gtk_file_chooser_set_do_overwrite_confirmation() function), and
they will automatically get a stock confirmation dialog.
Applications which need to customize this behavior should do
that, and also connect to the #GtkFileChooser::confirm-overwrite
signal.

A signal handler for this signal must return a
#GtkFileChooserConfirmation value, which indicates the action to
take.  If the handler determines that the user wants to select a
different filename, it should return
%GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN.  If it determines
that the user is satisfied with his choice of file name, it
should return %GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME.
On the other hand, if it determines that the stock confirmation
dialog should be used, it should return
%GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM. The following example
illustrates this.

## Custom confirmation ## {#gtkfilechooser-confirmation}

|[<!-- language="C" -->
static GtkFileChooserConfirmation
confirm_overwrite_callback (GtkFileChooser *chooser, gpointer data)
{
  char *uri;

  uri = gtk_file_chooser_get_uri (chooser);

  if (is_uri_read_only (uri))
    {
      if (user_wants_to_replace_read_only_file (uri))
        return GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME;
      else
        return GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN;
    } else
      return GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM; // fall back to the default dialog
}

...

chooser = gtk_file_chooser_dialog_new (...);

gtk_file_chooser_set_do_overwrite_confirmation (GTK_FILE_CHOOSER (dialog), TRUE);
g_signal_connect (chooser, "confirm-overwrite",
                  G_CALLBACK (confirm_overwrite_callback), NULL);

if (gtk_dialog_run (chooser) == GTK_RESPONSE_ACCEPT)
        save_to_file (gtk_file_chooser_get_filename (GTK_FILE_CHOOSER (chooser));

gtk_widget_destroy (chooser);
]|
#NAME: STOCK_OPEN
#PARENT: Gtk
#COMMENT: The “Open” item and icon.
#NAME: buffer_x
#PARENT: Gtk.TextView.window_to_buffer_coords.none
#COMMENT: buffer x coordinate return location or %NULL
#NAME: quality
#PARENT: Gtk.PrintSettings.set_quality.none
#COMMENT: a #GtkPrintQuality value
#NAME: get_default
#PARENT: Gtk.RecentManager.get_default
#COMMENT: A unique #GtkRecentManager. Do not ref or
  unref it.
#NAME: buffer_y
#PARENT: Gtk.TextView.window_to_buffer_coords.none
#COMMENT: buffer y coordinate return location or %NULL
#NAME: TextViewLayer
#PARENT: Gtk
#COMMENT: Used to reference the layers of #GtkTextView for the purpose of customized
drawing with the ::draw_layer vfunc.
#NAME: name
#PARENT: Gtk.Window.set_default_icon_name.none
#COMMENT: the name of the themed icon
#NAME: response
#PARENT: Gtk.InfoBar
#COMMENT: Emitted when an action widget is clicked or the application programmer
calls gtk_dialog_response(). The @response_id depends on which action
widget was clicked.
#NAME: x
#PARENT: Gtk.StatusIcon.query-tooltip.gboolean
#COMMENT: the x coordinate of the cursor position where the request has been
    emitted, relative to @status_icon
#NAME: margin
#PARENT: Gtk.PageSetup.set_top_margin.none
#COMMENT: the new top margin in units of @unit
#NAME: get_display_name
#PARENT: Gtk.PaperSize
#COMMENT: Gets the human-readable name of the #GtkPaperSize.
#NAME: get_paper_sizes
#PARENT: Gtk.PaperSize.get_paper_sizes
#COMMENT: a newly allocated list of newly
   allocated #GtkPaperSize objects
#NAME: y
#PARENT: Gtk.StatusIcon.query-tooltip.gboolean
#COMMENT: the y coordinate of the cursor position where the request has been
    emitted, relative to @status_icon
#NAME: widget_type
#PARENT: Gtk.Widget.get_ancestor.Widget
#COMMENT: ancestor type
#NAME: menu_item
#PARENT: Gtk.MenuItem.set_submenu.none
#COMMENT: a #GtkMenuItem
#NAME: stock_lookup
#PARENT: Gtk
#COMMENT: Fills @item with the registered values for @stock_id, returning %TRUE
if @stock_id was known.
#NAME: list_filters
#PARENT: Gtk.RecentChooserIface.list_filters.list_filters
#COMMENT: A singly linked list
  of #GtkRecentFilter objects.  You
  should just free the returned list using g_slist_free().
#NAME: limit
#PARENT: Gtk.TextIter.forward_search.gboolean
#COMMENT: location of last possible @match_end, or %NULL for the end of the buffer
#NAME: tree_view
#PARENT: Gtk.TreeView.row_activated.none
#COMMENT: A #GtkTreeView
#NAME: new
#PARENT: Gtk.MenuToolButton
#COMMENT: Creates a new #GtkMenuToolButton using @icon_widget as icon and
@label as label.
#NAME: cr
#PARENT: Gtk.render_expander.none
#COMMENT: a #cairo_t
#NAME: op
#PARENT: Gtk.PrintOperation.get_n_pages_to_print.gint
#COMMENT: a #GtkPrintOperation
#NAME: get_accels_for_action
#PARENT: Gtk.Application
#COMMENT: Gets the accelerators that are currently associated with
the given action.
#NAME: get_icon_sizes
#PARENT: Gtk.IconTheme.get_icon_sizes
#COMMENT: An newly
allocated array describing the sizes at which the icon is
available. The array should be freed with g_free() when it is no
longer needed.
#NAME: widget
#PARENT: Gtk.CellRendererClass.render.render.none
#COMMENT: the widget owning @window
#NAME: ltr
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: label
#PARENT: Gtk.ToolButton.new.ToolItem
#COMMENT: a string that will be used as label, or %NULL
#NAME: get_app_menu
#PARENT: Gtk.Application.get_app_menu
#COMMENT: the application menu of @application
#NAME: compute_prefix
#PARENT: Gtk.EntryCompletion
#COMMENT: Computes the common prefix that is shared by all rows in @completion
that start with @key. If no row matches @key, %NULL will be returned.
Note that a text column must have been set for this function to work,
see gtk_entry_completion_set_text_column() for details.
#NAME: hscrollbar_policy
#PARENT: Gtk.ScrolledWindow.set_policy.none
#COMMENT: policy for horizontal bar
#NAME: set_alpha
#PARENT: Gtk.ColorButton
#COMMENT: Sets the current opacity to be @alpha.
#NAME: iter
#PARENT: Gtk.TextIter.forward_to_line_end.gboolean
#COMMENT: a #GtkTextIter
#NAME: descendant
#PARENT: Gtk.TreePath.is_ancestor.gboolean
#COMMENT: another #GtkTreePath-struct
#NAME: n_colors
#PARENT: Gtk.ColorChooser.add_palette.none
#COMMENT: the total number of elements in @colors
#NAME: get_line_wrap_mode
#PARENT: Gtk.Label.get_line_wrap_mode
#COMMENT: %TRUE if the lines of the label are automatically wrapped.
#NAME: get_start_iter
#PARENT: Gtk.TextBuffer
#COMMENT: Initialized @iter with the first position in the text buffer. This
is the same as using gtk_text_buffer_get_iter_at_offset() to get
the iter at character offset 0.
#NAME: forward_chars
#PARENT: Gtk.TextIter
#COMMENT: Moves @count characters if possible (if @count would move past the
start or end of the buffer, moves to the start or end of the
buffer). The return value indicates whether the new position of
@iter is different from its original position, and dereferenceable
(the last iterator in the buffer is not dereferenceable). If @count
is 0, the function does nothing and returns %FALSE.
#NAME: accel_group
#PARENT: Gtk.AccelGroup.lock.none
#COMMENT: a #GtkAccelGroup
#NAME: overlay_scrolling
#PARENT: Gtk.ScrolledWindow.set_overlay_scrolling.none
#COMMENT: whether to enable overlay scrolling
#NAME: get_alpha
#PARENT: Gtk.ColorButton.get_alpha
#COMMENT: an integer between 0 and 65535
#NAME: callback
#PARENT: Gtk.Widget.add_tick_callback.guint
#COMMENT: function to call for updating animations
#NAME: is_maximized
#PARENT: Gtk.Window
#COMMENT: Retrieves the current maximized state of @window.

Note that since maximization is ultimately handled by the window
manager and happens asynchronously to an application request, you
shouldn’t assume the return value of this function changing
immediately (or at all), as an effect of calling
gtk_window_maximize() or gtk_window_unmaximize().
#NAME: get_row_spacing
#PARENT: Gtk.FlowBox.get_row_spacing
#COMMENT: the vertical spacing
#NAME: get_row_homogeneous
#PARENT: Gtk.Grid
#COMMENT: Returns whether all rows of @grid have the same height.
#NAME: create_pango_layout
#PARENT: Gtk.PrintContext
#COMMENT: Creates a new #PangoLayout that is suitable for use
with the #GtkPrintContext.
#NAME: entry
#PARENT: Gtk.Entry.set_input_hints.none
#COMMENT: a #GtkEntry
#NAME: var_args
#PARENT: Gtk.CellArea.cell_get_valist.none
#COMMENT: return location for the first property, followed
    optionally by more name/return location pairs, followed by %NULL
#NAME: has_depth_buffer
#PARENT: Gtk.GLArea.set_has_depth_buffer.none
#COMMENT: %TRUE to add a depth buffer
#NAME: context
#PARENT: Gtk.CellAreaContext.get_preferred_width.none
#COMMENT: a #GtkCellAreaContext
#NAME: props
#PARENT: Gtk.StyleProperties.set.none
#COMMENT: a #GtkStyleProperties
#NAME: label
#PARENT: Gtk.ToolButton.set_label.none
#COMMENT: a string that will be used as label, or %NULL.
#NAME: cr
#PARENT: Gtk.paint_tab.none
#COMMENT: a #cairo_t
#NAME: new
#PARENT: Gtk.IconFactory
#COMMENT: Creates a new #GtkIconFactory. An icon factory manages a collection
of #GtkIconSets; a #GtkIconSet manages a set of variants of a
particular icon (i.e. a #GtkIconSet contains variants for different
sizes and widget states). Icons in an icon factory are named by a
stock ID, which is a simple string identifying the icon. Each
#GtkStyle has a list of #GtkIconFactorys derived from the current
theme; those icon factories are consulted first when searching for
an icon. If the theme doesn’t set a particular icon, GTK+ looks for
the icon in a list of default icon factories, maintained by
gtk_icon_factory_add_default() and
gtk_icon_factory_remove_default(). Applications with icons should
add a default icon factory with their icons, which will allow
themes to override the icons for the application.
#NAME: get_pointing_to
#PARENT: Gtk.Popover
#COMMENT: If a rectangle to point to has been set, this function will
return %TRUE and fill in @rect with such rectangle, otherwise
it will return %FALSE and fill in @rect with the attached
widget coordinates.
#NAME: tooltip-text
#PARENT: Gtk.StatusIcon
#COMMENT: Sets the text of tooltip to be the given string.

Also see gtk_tooltip_set_text().

This is a convenience property which will take care of getting the
tooltip shown if the given string is not %NULL.
#GtkStatusIcon:has-tooltip will automatically be set to %TRUE and
the default handler for the #GtkStatusIcon::query-tooltip signal
will take care of displaying the tooltip.

Note that some platforms have limitations on the length of tooltips
that they allow on status icons, e.g. Windows only shows the first
64 characters.
#NAME: buffer
#PARENT: Gtk.TextBufferClass.end_user_action.end_user_action.none
#COMMENT: a #GtkTextBuffer
#NAME: get_visible_vertical
#PARENT: Gtk.ToolItem.get_visible_vertical
#COMMENT: Whether @tool_item is visible when the toolbar is docked vertically
#NAME: get_text_alignment
#PARENT: Gtk.ToolShell
#COMMENT: Retrieves the current text alignment for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_text_alignment()
instead.
#NAME: page
#PARENT: Gtk.Assistant.get_page_complete.gboolean
#COMMENT: a page of @assistant
#NAME: set_authors
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the strings which are displayed in the authors tab
of the secondary credits dialog.
#NAME: ModuleInitFunc
#PARENT: Gtk
#COMMENT: Each GTK+ module must have a function gtk_module_init() with this prototype.
This function is called after loading the module.
#NAME: icon_size_register
#PARENT: Gtk
#COMMENT: Registers a new icon size, along the same lines as #GTK_ICON_SIZE_MENU,
etc. Returns the integer value for the size.
#NAME: selection_convert
#PARENT: Gtk.selection_convert
#COMMENT: %TRUE if requested succeeded. %FALSE if we could not process
         request. (e.g., there was already a request in process for
         this widget).
#NAME: use_alpha
#PARENT: Gtk.ColorChooser.set_use_alpha.none
#COMMENT: %TRUE if color chooser should use alpha channel, %FALSE if not
#NAME: get_slice
#PARENT: Gtk.TextBuffer.get_slice
#COMMENT: an allocated UTF-8 string
#NAME: state_is_running
#PARENT: Gtk.ThemingEngine.state_is_running
#COMMENT: %TRUE if there is a running transition animation for @state.
#NAME: construct_child
#PARENT: Gtk.BuildableIface.construct_child.construct_child
#COMMENT: the constructed child
#NAME: assistant
#PARENT: Gtk.Assistant.append_page.gint
#COMMENT: a #GtkAssistant
#NAME: op
#PARENT: Gtk.PrintOperation.set_job_name.none
#COMMENT: a #GtkPrintOperation
#NAME: focus_home
#PARENT: Gtk.Toolbar.focus-home-or-end.gboolean
#COMMENT: %TRUE if the first item should be focused
#NAME: Calendar
#PARENT: Gtk
#COMMENT: #GtkCalendar is a widget that displays a Gregorian calendar, one month
at a time. It can be created with gtk_calendar_new().

The month and year currently displayed can be altered with
gtk_calendar_select_month(). The exact day can be selected from the
displayed month using gtk_calendar_select_day().

To place a visual marker on a particular day, use gtk_calendar_mark_day()
and to remove the marker, gtk_calendar_unmark_day(). Alternative, all
marks can be cleared with gtk_calendar_clear_marks().

The way in which the calendar itself is displayed can be altered using
gtk_calendar_set_display_options().

The selected date can be retrieved from a #GtkCalendar using
gtk_calendar_get_date().

Users should be aware that, although the Gregorian calendar is the
legal calendar in most countries, it was adopted progressively
between 1582 and 1929. Display before these dates is likely to be
historically incorrect.
#NAME: load_icon_async
#PARENT: Gtk.IconInfo
#COMMENT: Asynchronously load, render and scale an icon previously looked up
from the icon theme using gtk_icon_theme_lookup_icon().

For more details, see gtk_icon_info_load_icon() which is the synchronous
version of this call.
#NAME: set_spacing
#PARENT: Gtk.Box
#COMMENT: Sets the #GtkBox:spacing property of @box, which is the
number of pixels to place between children of @box.
#NAME: ends_tag
#PARENT: Gtk.TextIter.ends_tag
#COMMENT: whether @iter is the end of a range tagged with @tag
#NAME: column
#PARENT: Gtk.TreeViewColumn.add_attribute.none
#COMMENT: The column position on the model to get the attribute from.
#NAME: height
#PARENT: Gtk.render_check.none
#COMMENT: rectangle height
#NAME: get_state
#PARENT: Gtk.StyleContext
#COMMENT: Returns the state used when rendering.
#NAME: rc_reparse_all
#PARENT: Gtk
#COMMENT: If the modification time on any previously read file for the
default #GtkSettings has changed, discard all style information
and then reread all previously read RC files.
#NAME: get_spacing
#PARENT: Gtk.Expander.get_spacing
#COMMENT: spacing between the expander and child
#NAME: paint_extension
#PARENT: Gtk
#COMMENT: Draws an extension, i.e. a notebook tab.
#NAME: new_text
#PARENT: Gtk.CellRendererText.edited.none
#COMMENT: the new text
#NAME: CellRendererToggle
#PARENT: Gtk
#COMMENT: #GtkCellRendererToggle renders a toggle button in a cell. The
button is drawn as a radio or a checkbutton, depending on the
#GtkCellRendererToggle:radio property.
When activated, it emits the #GtkCellRendererToggle::toggled signal.
#NAME: get_can_default
#PARENT: Gtk.Widget
#COMMENT: Determines whether @widget can be a default widget. See
gtk_widget_set_can_default().
#NAME: get_root_window
#PARENT: Gtk.Widget
#COMMENT: Get the root window where this widget is located. This function can
only be called after the widget has been added to a widget
hierarchy with #GtkWindow at the top.

The root window is useful for such purposes as creating a popup
#GdkWindow associated with the window. In general, you should only
create display specific resources when a widget has been realized,
and you should free those resources when the widget is unrealized.
#NAME: mark
#PARENT: Gtk.TextMark.set_visible.none
#COMMENT: a #GtkTextMark
#NAME: menu_item_id
#PARENT: Gtk.ToolItem.get_proxy_menu_item.Widget
#COMMENT: a string used to identify the menu item
#NAME: tree_view
#PARENT: Gtk.TreeView.set_hadjustment.none
#COMMENT: A #GtkTreeView
#NAME: iter_has_class
#PARENT: Gtk.WidgetPath.iter_has_class
#COMMENT: %TRUE if the class @name is defined for the widget at @pos
#NAME: get_tab_vborder
#PARENT: Gtk.Notebook.get_tab_vborder
#COMMENT: vertical width of a tab border
#NAME: required_minor
#PARENT: Gtk.check_version.utf8
#COMMENT: the required minor version
#NAME: delete_mark
#PARENT: Gtk.TextBuffer
#COMMENT: Deletes @mark, so that it’s no longer located anywhere in the
buffer. Removes the reference the buffer holds to the mark, so if
you haven’t called g_object_ref() on the mark, it will be freed. Even
if the mark isn’t freed, most operations on @mark become
invalid, until it gets added to a buffer again with
gtk_text_buffer_add_mark(). Use gtk_text_mark_get_deleted() to
find out if a mark has been removed from its buffer.
The #GtkTextBuffer::mark-deleted signal will be emitted as notification after
the mark is deleted.
#NAME: widget
#PARENT: Gtk.Widget.remove_tick_callback.none
#COMMENT: a #GtkWidget
#NAME: parent_class
#PARENT: Gtk.ActionClass
#COMMENT: The parent class.
#NAME: get_start_line
#PARENT: Gtk.CssSection.get_start_line
#COMMENT: the line number
#NAME: action_bar
#PARENT: Gtk.ActionBar.pack_start.none
#COMMENT: A #GtkActionBar
#NAME: use-alpha
#PARENT: Gtk.ColorChooser
#COMMENT: When ::use-alpha is %TRUE, colors may have alpha (translucency)
information. When it is %FALSE, the #GdkRGBA struct obtained
via the #GtkColorChooser:rgba property will be forced to have
alpha == 1.

Implementations are expected to show alpha by rendering the color
over a non-uniform background (like a checkerboard pattern).
#NAME: message-type
#PARENT: Gtk.InfoBar
#COMMENT: The type of the message.

The type may be used to determine the appearance of the info bar.
#NAME: icon_widget
#PARENT: Gtk.ToolButton.set_icon_widget.none
#COMMENT: the widget used as icon, or %NULL
#NAME: pack_start
#PARENT: Gtk.HeaderBar
#COMMENT: Adds @child to @bar, packed with reference to the
start of the @bar.
#NAME: icon_pos
#PARENT: Gtk.Entry.icon-press.none
#COMMENT: The position of the clicked icon
#NAME: cell_view
#PARENT: Gtk.CellView.get_draw_sensitive.gboolean
#COMMENT: a #GtkCellView
#NAME: area
#PARENT: Gtk.CellArea.get_cell_allocation.none
#COMMENT: a #GtkCellArea
#NAME: icon_view
#PARENT: Gtk.IconView.get_model.TreeModel
#COMMENT: a #GtkIconView
#NAME: icon_view
#PARENT: Gtk.IconViewClass.select_all.select_all.none
#COMMENT: A #GtkIconView.
#NAME: get_label
#PARENT: Gtk.ToolItemGroup
#COMMENT: Gets the label of @group.
#NAME: column
#PARENT: Gtk.TreeView.append_column.gint
#COMMENT: The #GtkTreeViewColumn to add.
#NAME: widget
#PARENT: Gtk.Widget.list_action_prefixes.utf8
#COMMENT: A #GtkWidget
#NAME: page
#PARENT: Gtk.Assistant.set_page_header_image.none
#COMMENT: a page of @assistant
#NAME: label
#PARENT: Gtk.ToolItemGroup.set_label.none
#COMMENT: the new human-readable label of of the group
#NAME: child_path
#PARENT: Gtk.TreeModelFilter.convert_child_path_to_path.TreePath
#COMMENT: A #GtkTreePath to convert.
#NAME: clear
#PARENT: Gtk.Widget.set_state_flags.none
#COMMENT: Whether to clear state before turning on @flags
#NAME: day
#PARENT: Gtk.Calendar.get_date.none
#COMMENT: location to store the day number (between
    1 and 31), or %NULL
#NAME: reorder_child
#PARENT: Gtk.Notebook
#COMMENT: Reorders the page containing @child, so that it appears in position
@position. If @position is greater than or equal to the number of
children in the list or negative, @child will be moved to the end
of the list.
#NAME: get_selected
#PARENT: Gtk.TreeSelection
#COMMENT: Sets @iter to the currently selected node if @selection is set to
#GTK_SELECTION_SINGLE or #GTK_SELECTION_BROWSE.  @iter may be NULL if you
just want to test if @selection has any selected nodes.  @model is filled
with the current model as a convenience.  This function will not work if you
use @selection is #GTK_SELECTION_MULTIPLE.
#NAME: set_headers_clickable
#PARENT: Gtk.TreeView
#COMMENT: Allow the column title buttons to be clicked.
#NAME: context
#PARENT: Gtk.StyleContext.set_screen.none
#COMMENT: a #GtkStyleContext
#NAME: get_snap_edge
#PARENT: Gtk.HandleBox.get_snap_edge
#COMMENT: the edge used for determining reattachment, or
  (GtkPositionType)-1 if this is determined (as per default)
  from the handle position.
#NAME: move_after
#PARENT: Gtk.ListStore
#COMMENT: Moves @iter in @store to the position after @position. Note that this
function only works with unsorted stores. If @position is %NULL, @iter
will be moved to the start of the list.
#NAME: menu_item
#PARENT: Gtk.ToolItem.set_proxy_menu_item.none
#COMMENT: a #GtkMenuItem to be used in the overflow menu
#NAME: ToolShellIface
#PARENT: Gtk
#COMMENT: Virtual function table for the #GtkToolShell interface.
#NAME: direction
#PARENT: Gtk.CellAreaClass.focus.focus.gboolean
#COMMENT: the #GtkDirectionType
#NAME: assistant
#PARENT: Gtk.Assistant.insert_page.gint
#COMMENT: a #GtkAssistant
#NAME: op
#PARENT: Gtk.PrintOperation.get_embed_page_setup.gboolean
#COMMENT: a #GtkPrintOperation
#NAME: widget
#PARENT: Gtk.Widget.destroyed.none
#COMMENT: a #GtkWidget
#NAME: send_focus_change
#PARENT: Gtk.Widget
#COMMENT: Sends the focus change @event to @widget

This function is not meant to be used by applications. The only time it
should be used is when it is necessary for a #GtkWidget to assign focus
to a widget that is semantically owned by the first widget even though
it’s not a direct child - for instance, a search entry in a floating
window similar to the quick search in #GtkTreeView.

An example of its usage is:

|[<!-- language="C" -->
  GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);

  fevent->focus_change.type = GDK_FOCUS_CHANGE;
  fevent->focus_change.in = TRUE;
  fevent->focus_change.window = gtk_widget_get_window (widget);
  if (fevent->focus_change.window != NULL)
    g_object_ref (fevent->focus_change.window);

  gtk_widget_send_focus_change (widget, fevent);

  gdk_event_free (event);
]|
#NAME: get_visited
#PARENT: Gtk.RecentInfo
#COMMENT: Gets the timestamp (seconds from system’s Epoch) when the meta-data
for the resource was last visited.
#NAME: scroll
#PARENT: Gtk.ScrolledWindow.scroll-child.gboolean
#COMMENT: a #GtkScrollType describing how much to scroll
#NAME: window
#PARENT: Gtk.Window.get_transient_for.Window
#COMMENT: a #GtkWindow
#NAME: STYLE_CLASS_ACCELERATOR
#PARENT: Gtk
#COMMENT: A CSS class to match an accelerator.

This is used for the accelerator in #GtkAccelLabel.
#NAME: start_path
#PARENT: Gtk.TreeSelection.unselect_range.none
#COMMENT: The initial node of the range.
#NAME: unselect_all
#PARENT: Gtk.FileChooser
#COMMENT: Unselects all the files in the current folder of a file chooser.
#NAME: error_color
#PARENT: Gtk.IconInfo.load_symbolic_async.none
#COMMENT: a #GdkRGBA representing the error color
    of the icon or %NULL to use the default color (allow-none)
#NAME: set_pixbuf_column
#PARENT: Gtk.IconView
#COMMENT: Sets the column with pixbufs for @icon_view to be @column. The pixbuf
column must be of type #GDK_TYPE_PIXBUF
#NAME: get_mime_type
#PARENT: Gtk.RecentInfo
#COMMENT: Gets the MIME type of the resource.
#NAME: set_mode
#PARENT: Gtk.ToggleButton
#COMMENT: Sets whether the button is displayed as a separate indicator and label.
You can call this function on a checkbutton or a radiobutton with
@draw_indicator = %FALSE to make the button look like a normal button

This function only affects instances of classes like #GtkCheckButton
and #GtkRadioButton that derive from #GtkToggleButton,
not instances of #GtkToggleButton itself.
#NAME: hidden
#PARENT: Gtk.BorderStyle
#COMMENT: Same as @GTK_BORDER_STYLE_NONE
#NAME: RequestedSize
#PARENT: Gtk
#COMMENT: Represents a request of a screen object in a given orientation. These
are primarily used in container implementations when allocating a natural
size for children calling. See gtk_distribute_natural_allocation().
#NAME: get_hadjustment
#PARENT: Gtk.TreeView.get_hadjustment
#COMMENT: A #GtkAdjustment object, or %NULL
    if none is currently being used.
#NAME: new
#PARENT: Gtk.FileChooserButton.new
#COMMENT: a new button widget.
#NAME: FontChooserDialog
#PARENT: Gtk
#COMMENT: The #GtkFontChooserDialog widget is a dialog for selecting a font.
It implements the #GtkFontChooser interface.

# GtkFontChooserDialog as GtkBuildable

The GtkFontChooserDialog implementation of the #GtkBuildable
interface exposes the buttons with the names “select_button”
and “cancel_button”.
#NAME: select-multiple
#PARENT: Gtk.RecentChooser
#COMMENT: Allow the user to select multiple resources.
#NAME: popover
#PARENT: Gtk.Popover.get_pointing_to.gboolean
#COMMENT: a #GtkPopover
#NAME: modifier
#PARENT: Gtk.AccelGroup.accel-changed.none
#COMMENT: the modifier combination of the accelerator
#NAME: set_filename
#PARENT: Gtk.IconSource
#COMMENT: Sets the name of an image file to use as a base image when creating
icon variants for #GtkIconSet. The filename must be absolute.
#NAME: path
#PARENT: Gtk.IconView.set_tooltip_cell.none
#COMMENT: a #GtkTreePath
#NAME: cookie
#PARENT: Gtk.Application.uninhibit.none
#COMMENT: a cookie that was returned by gtk_application_inhibit()
#NAME: GesturePan
#PARENT: Gtk
#COMMENT: #GtkGesturePan is a #GtkGesture implementation able to recognize
pan gestures, those are drags that are locked to happen along one
axis. The axis that a #GtkGesturePan handles is defined at
construct time, and can be changed through
gtk_gesture_pan_set_orientation().

When the gesture starts to be recognized, #GtkGesturePan will
attempt to determine as early as possible whether the sequence
is moving in the expected direction, and denying the sequence if
this does not happen.

Once a panning gesture along the expected axis is recognized,
the #GtkGesturePan::pan signal will be emitted as input events
are received, containing the offset in the given axis.
#NAME: accel_group
#PARENT: Gtk.AccelGroup.connect_by_path.none
#COMMENT: the accelerator group to install an accelerator in
#NAME: plug-added
#PARENT: Gtk.Socket
#COMMENT: This signal is emitted when a client is successfully
added to the socket.
#NAME: forward_display_line_end
#PARENT: Gtk.TextView.forward_display_line_end
#COMMENT: %TRUE if @iter was moved and is not on the end iterator
#NAME: get_child
#PARENT: Gtk.Bin.get_child
#COMMENT: pointer to child of the #GtkBin
#NAME: rgba
#PARENT: Gtk.ColorButton.new_with_rgba.Widget
#COMMENT: A #GdkRGBA to set the current color with
#NAME: label
#PARENT: Gtk.RadioButton.new_with_mnemonic.Widget
#COMMENT: the text of the button, with an underscore in front of the
        mnemonic character
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.set_overlay_scrolling.none
#COMMENT: a #GtkScrolledWindow
#NAME: get_tooltip_context
#PARENT: Gtk.TreeView.get_tooltip_context
#COMMENT: whether or not the given tooltip context points to a row.
#NAME: clipboard
#PARENT: Gtk.Clipboard.set_with_data.gboolean
#COMMENT: a #GtkClipboard
#NAME: manager
#PARENT: Gtk.UIManager.insert_action_group.none
#COMMENT: a #GtkUIManager object
#NAME: VScrollbar
#PARENT: Gtk
#COMMENT: The #GtkVScrollbar widget is a widget arranged vertically creating a
scrollbar. See #GtkScrollbar for details on
scrollbars. #GtkAdjustment pointers may be added to handle the
adjustment of the scrollbar or it may be left %NULL in which case one
will be created for you. See #GtkScrollbar for a description of what the
fields in an adjustment represent for a scrollbar.

GtkVScrollbar has been deprecated, use #GtkScrollbar instead.
#NAME: natural_height
#PARENT: Gtk.Widget.get_preferred_height_and_baseline_for_width.none
#COMMENT: location for storing the natural height, or %NULL
#NAME: assistant
#PARENT: Gtk.Assistant.remove_action_widget.none
#COMMENT: a #GtkAssistant
#NAME: size
#PARENT: Gtk.Image.set_from_gicon.none
#COMMENT: an icon size
#NAME: size
#PARENT: Gtk.Image.set_from_icon_set.none
#COMMENT: a stock icon size
#NAME: active
#PARENT: Gtk.StateFlags
#COMMENT: Widget is active.
#NAME: propagate_key_event
#PARENT: Gtk.Window.propagate_key_event
#COMMENT: %TRUE if a widget in the focus chain handled the event.
#NAME: action
#PARENT: Gtk.Action.set_accel_path.none
#COMMENT: the action object
#NAME: primary-icon-sensitive
#PARENT: Gtk.Entry
#COMMENT: Whether the primary icon is sensitive.

An insensitive icon appears grayed out. GTK+ does not emit the
#GtkEntry::icon-press and #GtkEntry::icon-release signals and
does not allow DND from insensitive icons.

An icon should be set insensitive if the action that would trigger
when clicked is currently not available.
#NAME: render
#PARENT: Gtk.CellRenderer
#COMMENT: Invokes the virtual render function of the #GtkCellRenderer. The three
passed-in rectangles are areas in @cr. Most renderers will draw within
@cell_area; the xalign, yalign, xpad, and ypad fields of the #GtkCellRenderer
should be honored with respect to @cell_area. @background_area includes the
blank space around the cell, and also the area containing the tree expander;
so the @background_area rectangles for all cells tile to cover the entire
@window.
#NAME: STOCK_ZOOM_OUT
#PARENT: Gtk
#COMMENT: The “Zoom Out” item and icon.
#NAME: get_allocated_width
#PARENT: Gtk.Widget
#COMMENT: Returns the width that has currently been allocated to @widget.
This function is intended to be used when implementing handlers
for the #GtkWidget::draw function.
#NAME: set_sensitive
#PARENT: Gtk.CellRenderer
#COMMENT: Sets the cell renderer’s sensitivity.
#NAME: load_symbolic
#PARENT: Gtk.IconInfo
#COMMENT: Loads an icon, modifying it to match the system colours for the foreground,
success, warning and error colors provided. If the icon is not a symbolic
one, the function will return the result from gtk_icon_info_load_icon().

This allows loading symbolic icons that will match the system theme.

Unless you are implementing a widget, you will want to use
g_themed_icon_new_with_default_fallbacks() to load the icon.

As implementation details, the icon loaded needs to be of SVG type,
contain the “symbolic” term as the last component of the icon name,
and use the “fg”, “success”, “warning” and “error” CSS styles in the
SVG file itself.

See the [Symbolic Icons Specification](http://www.freedesktop.org/wiki/SymbolicIcons)
for more information about symbolic icons.
#NAME: iter
#PARENT: Gtk.TreeStore.insert_with_values.none
#COMMENT: An unset #GtkTreeIter to set the new row, or %NULL.
#NAME: get_skip_taskbar_hint
#PARENT: Gtk.Window.get_skip_taskbar_hint
#COMMENT: %TRUE if window shouldn’t be in taskbar
#NAME: get_use_popover
#PARENT: Gtk.MenuButton
#COMMENT: Returns whether a #GtkPopover or a #GtkMenu will be constructed
from the menu model.
#NAME: get_is_important
#PARENT: Gtk.ToolItem.get_is_important
#COMMENT: %TRUE if @tool_item is considered important.
#NAME: get_action_target_value
#PARENT: Gtk.ActionableInterface.get_action_target_value.get_action_target_value
#COMMENT: the current target value
#NAME: get_auto_render
#PARENT: Gtk.GLArea.get_auto_render
#COMMENT: %TRUE if the @area is auto rendering, %FALSE otherwise
#NAME: get_has_tooltip
#PARENT: Gtk.StatusIcon.get_has_tooltip
#COMMENT: current value of has-tooltip on @status_icon.
#NAME: adjustment
#PARENT: Gtk.TreeView.set_hadjustment.none
#COMMENT: The #GtkAdjustment to set, or %NULL
#NAME: register_window
#PARENT: Gtk.Widget
#COMMENT: Registers a #GdkWindow with the widget and sets it up so that
the widget receives events for it. Call gtk_widget_unregister_window()
when destroying the window.

Before 3.8 you needed to call gdk_window_set_user_data() directly to set
this up. This is now deprecated and you should use gtk_widget_register_window()
instead. Old code will keep working as is, although some new features like
transparency might not work perfectly.
#NAME: widget
#PARENT: Gtk.CellRendererClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: the #GtkWidget this cell will be rendering to
#NAME: stock_id
#PARENT: Gtk.RecentAction.new.Action
#COMMENT: the stock icon to display in widgets representing
  the action, or %NULL
#NAME: pixels_above_lines
#PARENT: Gtk.TextView.set_pixels_above_lines.none
#COMMENT: pixels above paragraphs
#NAME: get_drag_target_group
#PARENT: Gtk.ToolPalette
#COMMENT: Get the target entry for a dragged #GtkToolItemGroup.
#NAME: icon_view
#PARENT: Gtk.IconViewClass.unselect_all.unselect_all.none
#COMMENT: A #GtkIconView.
#NAME: path
#PARENT: Gtk.TreeView.is_blank_at_pos.gboolean
#COMMENT: A pointer to a #GtkTreePath pointer to be filled in, or %NULL
#NAME: get_has_alpha
#PARENT: Gtk.GLArea.get_has_alpha
#COMMENT: %TRUE if the @area has an alpha component, %FALSE otherwise
#NAME: setup
#PARENT: Gtk.PageSetup.get_page_height.gdouble
#COMMENT: a #GtkPageSetup
#NAME: use-full-page
#PARENT: Gtk.PrintOperation
#COMMENT: If %TRUE, the transformation for the cairo context obtained
from #GtkPrintContext puts the origin at the top left corner
of the page (which may not be the top left corner of the sheet,
depending on page orientation and the number of pages per sheet).
Otherwise, the origin is at the top left corner of the imageable
area (i.e. inside the margins).
#NAME: expander_style
#PARENT: Gtk.paint_expander.none
#COMMENT: the style to draw the expander in; determines
  whether the expander is collapsed, expanded, or in an
  intermediate state.
#NAME: insert
#PARENT: Gtk.ToolItemGroup
#COMMENT: Inserts @item at @position in the list of children of @group.
#NAME: spacing
#PARENT: Gtk.HBox.new.Widget
#COMMENT: the number of pixels to place by default between children.
#NAME: set_n_pages
#PARENT: Gtk.PrintOperation
#COMMENT: Sets the number of pages in the document.

This must be set to a positive number
before the rendering starts. It may be set in a
#GtkPrintOperation::begin-print signal hander.

Note that the page numbers passed to the
#GtkPrintOperation::request-page-setup
and #GtkPrintOperation::draw-page signals are 0-based, i.e. if
the user chooses to print all pages, the last ::draw-page signal
will be for page @n_pages - 1.
#NAME: parent_class
#PARENT: Gtk.IconFactoryClass
#COMMENT: The parent class.
#NAME: get_data_type
#PARENT: Gtk.SelectionData.get_data_type
#COMMENT: the data type of the selection.
#NAME: iter_children
#PARENT: Gtk.TreeModel
#COMMENT: Sets @iter to point to the first child of @parent.

If @parent has no children, %FALSE is returned and @iter is
set to be invalid. @parent will remain a valid node after this
function has been called.

If @parent is %NULL returns the first node, equivalent to
`gtk_tree_model_get_iter_first (tree_model, iter);`
#NAME: TreeSortable
#PARENT: Gtk
#COMMENT: #GtkTreeSortable is an interface to be implemented by tree models which
support sorting. The #GtkTreeView uses the methods provided by this interface
to sort the model.
#NAME: color
#PARENT: Gtk.Widget.modify_fg.none
#COMMENT: the color to assign (does not need to be allocated),
    or %NULL to undo the effect of previous calls to
    of gtk_widget_modify_fg().
#NAME: focus_in
#PARENT: Gtk.IMContext
#COMMENT: Notify the input method that the widget to which this
input context corresponds has gained focus. The input method
may, for example, change the displayed feedback to reflect
this change.
#NAME: insert_with_values
#PARENT: Gtk.ListStore
#COMMENT: Creates a new row at @position. @iter will be changed to point to this new
row. If @position is -1, or larger than the number of rows in the list, then
the new row will be appended to the list. The row will be filled with the
values given to this function.

Calling
`gtk_list_store_insert_with_values (list_store, iter, position...)`
has the same effect as calling
|[<!-- language="C" -->
gtk_list_store_insert (list_store, iter, position);
gtk_list_store_set (list_store, iter, ...);
]|
with the difference that the former will only emit a row_inserted signal,
while the latter will emit row_inserted, row_changed and, if the list store
is sorted, rows_reordered. Since emitting the rows_reordered signal
repeatedly can affect the performance of the program,
gtk_list_store_insert_with_values() should generally be preferred when
inserting rows in a sorted list store.
#NAME: x
#PARENT: Gtk.paint_shadow.none
#COMMENT: x origin of the rectangle
#NAME: get_n_items
#PARENT: Gtk.ToolItemGroup
#COMMENT: Gets the number of tool items in @group.
#NAME: y
#PARENT: Gtk.paint_shadow.none
#COMMENT: y origin of the rectangle
#NAME: list_store
#PARENT: Gtk.ListStore.iter_is_valid.gboolean
#COMMENT: A #GtkListStore.
#NAME: get_gicon
#PARENT: Gtk.RecentInfo
#COMMENT: Retrieves the icon associated to the resource MIME type.
#NAME: get_pixbuf
#PARENT: Gtk.Image.get_pixbuf
#COMMENT: the displayed pixbuf, or %NULL if
the image is empty
#NAME: restrict_to_fill_level
#PARENT: Gtk.Range.set_restrict_to_fill_level.none
#COMMENT: Whether the fill level restricts slider movement.
#NAME: name_space
#PARENT: Gtk.ThemingEngine.register_property.none
#COMMENT: namespace for the property name
#NAME: buffer_ends
#PARENT: Gtk.MovementStep
#COMMENT: Move to ends of the buffer
#NAME: search_equal_func
#PARENT: Gtk.TreeView.set_search_equal_func.none
#COMMENT: the compare function to use during the search
#NAME: STYLE_CLASS_RUBBERBAND
#PARENT: Gtk
#COMMENT: A CSS class to match the rubberband selection rectangle.

This is used in #GtkIconView and #GtkTreeView.
#NAME: chooser
#PARENT: Gtk.FileChooser.get_uri.utf8
#COMMENT: a #GtkFileChooser
#NAME: set_do_overwrite_confirmation
#PARENT: Gtk.FileChooser
#COMMENT: Sets whether a file chooser in %GTK_FILE_CHOOSER_ACTION_SAVE mode will present
a confirmation dialog if the user types a file name that already exists.  This
is %FALSE by default.

If set to %TRUE, the @chooser will emit the
#GtkFileChooser::confirm-overwrite signal when appropriate.

If all you need is the stock confirmation dialog, set this property to %TRUE.
You can override the way confirmation is done by actually handling the
#GtkFileChooser::confirm-overwrite signal; please refer to its documentation
for the details.
#NAME: gradient
#PARENT: Gtk.Gradient.resolve.gboolean
#COMMENT: a #GtkGradient
#NAME: set_width_chars
#PARENT: Gtk.FileChooserButton
#COMMENT: Sets the width (in characters) that @button will use to @n_chars.
#NAME: accel
#PARENT: Gtk.Application.get_actions_for_accel.utf8
#COMMENT: an accelerator that can be parsed by gtk_accelerator_parse()
#NAME: new
#PARENT: Gtk.NumerableIcon
#COMMENT: Creates a new unthemed #GtkNumerableIcon.
#NAME: event
#PARENT: Gtk.IMContext.filter_keypress.gboolean
#COMMENT: the key event
#NAME: builder
#PARENT: Gtk.Builder.connect_signals.none
#COMMENT: a #GtkBuilder
#NAME: icon_pos
#PARENT: Gtk.Entry.get_icon_stock.utf8
#COMMENT: Icon position
#NAME: get_child_visible
#PARENT: Gtk.Widget
#COMMENT: Gets the value set with gtk_widget_set_child_visible().
If you feel a need to use this function, your code probably
needs reorganization.

This function is only useful for container implementations and
never should be called by an application.
#NAME: window
#PARENT: Gtk.Window.set_skip_pager_hint.none
#COMMENT: a #GtkWindow
#NAME: iter_n_children
#PARENT: Gtk.TreeModel
#COMMENT: Returns the number of children that @iter has.

As a special case, if @iter is %NULL, then the number
of toplevel nodes is returned.
#NAME: changed
#PARENT: Gtk.Adjustment
#COMMENT: Emitted when one or more of the #GtkAdjustment properties have been
changed, other than the #GtkAdjustment:value property.
#NAME: use-symbolic
#PARENT: Gtk.VolumeButton
#COMMENT: Whether to use symbolic icons as the icons. Note that
if the symbolic icons are not available in your installed
theme, then the normal (potentially colorful) icons will
be used.
#NAME: target
#PARENT: Gtk.Clipboard.request_contents.none
#COMMENT: an atom representing the form into which the clipboard
    owner should convert the selection.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_paper_height.none
#COMMENT: a #GtkPrintSettings
#NAME: forward_to_end
#PARENT: Gtk.TextIter
#COMMENT: Moves @iter forward to the “end iterator,” which points one past the last
valid character in the buffer. gtk_text_iter_get_char() called on the
end iterator returns 0, which is convenient for writing loops.
#NAME: context
#PARENT: Gtk.render_icon.none
#COMMENT: a #GtkStyleContext
#NAME: pattern
#PARENT: Gtk.FileFilter.add_pattern.none
#COMMENT: a shell style glob
#NAME: cell
#PARENT: Gtk.CellRenderer.get_padding.none
#COMMENT: A #GtkCellRenderer
#NAME: STOCK_UNDELETE
#PARENT: Gtk
#COMMENT: The “Undelete” item and icon. The icon has an RTL variant.
#NAME: has_tooltip
#PARENT: Gtk.StatusIcon.set_has_tooltip.none
#COMMENT: whether or not @status_icon has a tooltip
#NAME: get_use_underline
#PARENT: Gtk.ToolButton
#COMMENT: Returns whether underscores in the label property are used as mnemonics
on menu items on the overflow menu. See gtk_tool_button_set_use_underline().
#NAME: clear
#PARENT: Gtk.TreeViewColumn
#COMMENT: Unsets all the mappings on all renderers on the @tree_column.
#NAME: list_icons
#PARENT: Gtk.IconTheme
#COMMENT: Lists the icons in the current icon theme. Only a subset
of the icons can be listed by providing a context string.
The set of values for the context string is system dependent,
but will typically include such values as “Applications” and
“MimeTypes”. Contexts are explained in the
[Icon Theme Specification](http://www.freedesktop.org/wiki/Specifications/icon-theme-spec).
The standard contexts are listed in the
[Icon Naming Specification](http://www.freedesktop.org/wiki/Specifications/icon-naming-spec).
Also see gtk_icon_theme_list_contexts().
#NAME: text
#PARENT: Gtk.ToolItem.set_tooltip_text.none
#COMMENT: text to be used as tooltip for @tool_item
#NAME: set_expand
#PARENT: Gtk.ToolPalette
#COMMENT: Sets whether the group should be given extra space.
#NAME: iter_is_valid
#PARENT: Gtk.TreeStore
#COMMENT: WARNING: This function is slow. Only use it for debugging and/or testing
purposes.

Checks if the given iter is a valid iter for this #GtkTreeStore.
#NAME: type
#PARENT: Gtk.WidgetPath.prepend_type.none
#COMMENT: widget type to prepend
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_iter_at_mark.none
#COMMENT: a #GtkTextBuffer
#NAME: tag
#PARENT: Gtk.TextTagTable.add.gboolean
#COMMENT: a #GtkTextTag
#NAME: set_active
#PARENT: Gtk.ToggleButton
#COMMENT: Sets the status of the toggle button. Set to %TRUE if you want the
GtkToggleButton to be “pressed in”, and %FALSE to raise it.
This action causes the #GtkToggleButton::toggled signal and the
#GtkButton::clicked signal to be emitted.
#NAME: iter
#PARENT: Gtk.TreeModel.get_path.TreePath
#COMMENT: the #GtkTreeIter-struct
#NAME: id
#PARENT: Gtk.ComboBoxText.insert.none
#COMMENT: a string ID for this value, or %NULL
#NAME: detach
#PARENT: Gtk.Style
#COMMENT: Detaches a style from a window. If the style is not attached
to any windows anymore, it is unrealized. See gtk_style_attach().
#NAME: iter
#PARENT: Gtk.TreeStore.insert_before.none
#COMMENT: An unset #GtkTreeIter to set to the new row
#NAME: buffer
#PARENT: Gtk.EntryBuffer.emit_deleted_text.none
#COMMENT: a #GtkEntryBuffer
#NAME: func_data
#PARENT: Gtk.CellLayoutIface.set_cell_data_func.set_cell_data_func.none
#COMMENT: user data for @func
#NAME: set_column_span_column
#PARENT: Gtk.ComboBox
#COMMENT: Sets the column with column span information for @combo_box to be
@column_span. The column span column contains integers which indicate
how many columns an item should span.
#NAME: get_max_length
#PARENT: Gtk.EntryBuffer.get_max_length
#COMMENT: the maximum allowed number of characters
              in #GtkEntryBuffer, or 0 if there is no maximum.
#NAME: tree_view
#PARENT: Gtk.TreeView.is_rubber_banding_active.gboolean
#COMMENT: a #GtkTreeView
#NAME: accel_path
#PARENT: Gtk.AccelMap.changed.none
#COMMENT: the path of the accelerator that changed
#NAME: iter
#PARENT: Gtk.CellLayoutDataFunc.none
#COMMENT: a #GtkTreeIter indicating the row to set the value for
#NAME: remove_tag
#PARENT: Gtk.TextBuffer
#COMMENT: Emits the “remove-tag” signal. The default handler for the signal
removes all occurrences of @tag from the given range. @start and
@end don’t have to be in order.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_cursor.none
#COMMENT: A #GtkTreeView
#NAME: parse_args
#PARENT: Gtk
#COMMENT: Parses command line arguments, and initializes global
attributes of GTK+, but does not actually open a connection
to a display. (See gdk_display_open(), gdk_get_display_arg_name())

Any arguments used by GTK+ or GDK are removed from the array and
@argc and @argv are updated accordingly.

There is no need to call this function explicitly if you are using
gtk_init(), or gtk_init_check().
#NAME: length
#PARENT: Gtk.EntryCompletion.set_minimum_key_length.none
#COMMENT: the minimum length of the key in order to start completing
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_has_qregion.gboolean
#COMMENT: position to query, -1 for the path head
#NAME: natural-width
#PARENT: Gtk.CellAreaContext
#COMMENT: The natural width for the #GtkCellArea in this context
for all #GtkTreeModel rows that this context was requested
for using gtk_cell_area_get_preferred_width().
#NAME: visible
#PARENT: Gtk.Action.set_visible.none
#COMMENT: %TRUE to make the action visible
#NAME: get_size_wildcarded
#PARENT: Gtk.IconSource
#COMMENT: Gets the value set by gtk_icon_source_set_size_wildcarded().
#NAME: row_spacing
#PARENT: Gtk.IconView.set_row_spacing.none
#COMMENT: the row spacing
#NAME: new
#PARENT: Gtk.WindowGroup
#COMMENT: Creates a new #GtkWindowGroup object. Grabs added with
gtk_grab_add() only affect windows within the same #GtkWindowGroup.
#NAME: new
#PARENT: Gtk.GestureRotate
#COMMENT: Returns a newly created #GtkGesture that recognizes 2-touch
rotation gestures.
#NAME: step_left
#PARENT: Gtk.ScrollType
#COMMENT: Step to the left.
#NAME: func
#PARENT: Gtk.TreeViewColumn.set_cell_data_func.none
#COMMENT: The #GtkTreeCellDataFunc to use.
#NAME: new_with_label
#PARENT: Gtk.Button
#COMMENT: Creates a #GtkButton widget with a #GtkLabel child containing the given
text.
#NAME: type
#PARENT: Gtk.Builder.value_from_string_type.gboolean
#COMMENT: the #GType of the value
#NAME: STOCK_DISCONNECT
#PARENT: Gtk
#COMMENT: The “Disconnect” icon.
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.unset_placement.none
#COMMENT: a #GtkScrolledWindow
#NAME: icon-size-set
#PARENT: Gtk.Toolbar
#COMMENT: Is %TRUE if the icon-size property has been set.
#NAME: 
#PARENT: Gtk.show_about_dialog.none...
#COMMENT: value of first property, followed by more properties, %NULL-terminated
#NAME: data
#PARENT: Gtk.CellLayoutDataFunc.none
#COMMENT: user data passed to gtk_cell_layout_set_cell_data_func()
#NAME: source
#PARENT: Gtk.IconSource.set_size_wildcarded.none
#COMMENT: a #GtkIconSource
#NAME: icon_name
#PARENT: Gtk.IconTheme.load_surface.cairo.Surface
#COMMENT: the name of the icon to lookup
#NAME: menu_item
#PARENT: Gtk.MenuItem.set_use_underline.none
#COMMENT: a #GtkMenuItem
#NAME: left_attach
#PARENT: Gtk.Table.attach.none
#COMMENT: the column number to attach the left side of a child widget to.
#NAME: minimum_height
#PARENT: Gtk.CellAreaContext.get_preferred_height.none
#COMMENT: location to store the minimum height,
    or %NULL
#NAME: chars
#PARENT: Gtk.EntryBuffer.inserted-text.none
#COMMENT: The text that was inserted.
#NAME: vexpand-set
#PARENT: Gtk.Widget
#COMMENT: Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
#NAME: style
#PARENT: Gtk.paint_handle.none
#COMMENT: a #GtkStyle
#NAME: action_group
#PARENT: Gtk.ActionGroup.set_translation_domain.none
#COMMENT: a #GtkActionGroup
#NAME: cell_editable
#PARENT: Gtk.CellEditable.start_editing.none
#COMMENT: A #GtkCellEditable
#NAME: text_aa
#PARENT: Gtk.Style
#COMMENT: Color halfway between text/base
#NAME: set_opacity
#PARENT: Gtk.Widget
#COMMENT: Request the @widget to be rendered partially transparent,
with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
are clamped to the [0,1] range.).
This works on both toplevel widget, and child widgets, although there
are some limitations:

For toplevel widgets this depends on the capabilities of the windowing
system. On X11 this has any effect only on X screens with a compositing manager
running. See gtk_widget_is_composited(). On Windows it should work
always, although setting a window’s opacity after the window has been
shown causes it to flicker once on Windows.

For child widgets it doesn’t work if any affected widget has a native window, or
disables double buffering.
#NAME: expander
#PARENT: Gtk.Expander.get_use_markup.gboolean
#COMMENT: a #GtkExpander
#NAME: get_drop_item
#PARENT: Gtk.ToolItemGroup.get_drop_item
#COMMENT: the #GtkToolItem at position (x, y)
#NAME: values
#PARENT: Gtk.TreeStore.set_valuesv.none
#COMMENT: an array of GValues
#NAME: entries
#PARENT: Gtk.ActionGroup.add_toggle_actions_full.none
#COMMENT: an array of toggle action descriptions
#NAME: size
#PARENT: Gtk.Image.new_from_icon_set.Widget
#COMMENT: a stock icon size
#NAME: get_resolution_x
#PARENT: Gtk.PrintSettings.get_resolution_x
#COMMENT: the horizontal resolution in dpi
#NAME: set_text
#PARENT: Gtk.SelectionData.set_text
#COMMENT: %TRUE if the selection was successfully set,
  otherwise %FALSE.
#NAME: widget
#PARENT: Gtk.Widget.set_margin_bottom.none
#COMMENT: a #GtkWidget
#NAME: image
#PARENT: Gtk.Image.set_from_resource.none
#COMMENT: a #GtkImage
#NAME: get_reorderable
#PARENT: Gtk.IconView.get_reorderable
#COMMENT: %TRUE if the list can be reordered.
#NAME: cr
#PARENT: Gtk.paint_check.none
#COMMENT: a #cairo_t
#NAME: path
#PARENT: Gtk.tree_row_reference_inserted.none
#COMMENT: the row position that was inserted
#NAME: remove_focus_sibling
#PARENT: Gtk.CellArea
#COMMENT: Removes @sibling from @renderer’s focus sibling list
(see gtk_cell_area_add_focus_sibling()).
#NAME: stock-id
#PARENT: Gtk.Action
#COMMENT: The stock icon displayed in widgets representing this action.

This is an appearance property and thus only applies if
#GtkActivatable:use-action-appearance is %TRUE.
#NAME: iter
#PARENT: Gtk.TextIter.forward_to_end.none
#COMMENT: a #GtkTextIter
#NAME: group_name
#PARENT: Gtk.Notebook.set_group_name.none
#COMMENT: the name of the notebook group,
    or %NULL to unset it
#NAME: value
#PARENT: Gtk.Builder.value_from_string.gboolean
#COMMENT: the #GValue to store the result in
#NAME: get_current_button
#PARENT: Gtk.GestureSingle.get_current_button
#COMMENT: The current button number
#NAME: new_from_animation
#PARENT: Gtk.Image
#COMMENT: Creates a #GtkImage displaying the given animation.
The #GtkImage does not assume a reference to the
animation; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.

Note that the animation frames are shown using a timeout with
#G_PRIORITY_DEFAULT. When using animations to indicate busyness,
keep in mind that the animation will only be shown if the main loop
is not busy with something that has a higher priority.
#NAME: property_name
#PARENT: Gtk.CellArea.cell_set_property.none
#COMMENT: the name of the cell property to set
#NAME: active
#PARENT: Gtk.ModelButton
#COMMENT: The state of the button. This is reflecting the state of the associated
#GAction.
#NAME: icon-name
#PARENT: Gtk.Window
#COMMENT: The :icon-name property specifies the name of the themed icon to
use as the window icon. See #GtkIconTheme for more details.
#NAME: cell_area
#PARENT: Gtk.CellArea.get_cell_at_position.CellRenderer
#COMMENT: the whole allocated area for @area in @widget
            for this row
#NAME: show-editor
#PARENT: Gtk.ColorChooserWidget
#COMMENT: The ::show-editor property is %TRUE when the color chooser
is showing the single-color editor. It can be set to switch
the color chooser into single-color editing mode.
#NAME: prev-month
#PARENT: Gtk.Calendar
#COMMENT: Emitted when the user switched to the previous month.
#NAME: format
#PARENT: Gtk.SelectionData.set.none
#COMMENT: format (number of bits in a unit)
#NAME: size-changed
#PARENT: Gtk.StatusIcon
#COMMENT: Gets emitted when the size available for the image
changes, e.g. because the notification area got resized.
#NAME: add_region
#PARENT: Gtk.StyleContext
#COMMENT: Adds a region to @context, so posterior calls to
gtk_style_context_get() or any of the gtk_render_*()
functions will make use of this new region for styling.

In the CSS file format, a #GtkTreeView defining a “row”
region, would be matched by:

|[
GtkTreeView row { ... }
]|

Pseudo-classes are used for matching @flags, so the two
following rules:
|[
GtkTreeView row:nth-child(even) { ... }
GtkTreeView row:nth-child(odd) { ... }
]|

would apply to even and odd rows, respectively.

Region names must only contain lowercase letters
and “-”, starting always with a lowercase letter.
#NAME: ancestor
#PARENT: Gtk.TreePath.is_descendant.gboolean
#COMMENT: another #GtkTreePath-struct
#NAME: start_pos
#PARENT: Gtk.Editable.delete-text.none
#COMMENT: the starting position
#NAME: ImageMenuItem
#PARENT: Gtk
#COMMENT: A GtkImageMenuItem is a menu item which has an icon next to the text label.

This is functionally equivalent to:

|[<!-- language="C" -->
  GtkWidget *box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
  GtkWidget *icon = gtk_image_new_from_icon_name ("folder-music-symbolic", GTK_ICON_SIZE_MENU);
  GtkWidget *label = gtk_label_new ("Music");
  GtkWidget *menu_item = gtk_menu_item_new ();

  gtk_container_add (GTK_CONTAINER (box), icon);
  gtk_container_add (GTK_CONTAINER (box), label);

  gtk_container_add (GTK_CONTAINER (menu_item), box);

  gtk_widget_show_all (menu_item);
]|

Note that the user may disable display of menu icons using
the #GtkSettings:gtk-menu-images setting, so make sure to still
fill in the text label. If you want to ensure that your menu items
show an icon you are strongly encouraged to use a #GtkMenuItem
with a #GtkImage instead.

#GtkImageMenuItem has been deprecated since GTK+ 3.10. If you want to
display an icon in a menu item, you should use #GtkMenuItem and pack a
#GtkBox with a #GtkImage and a #GtkLabel instead. You should also consider
using #GtkBuilder and the XML #GMenu description for creating menus, by
following the [GMenu guide][https://developer.gnome.org/GMenu/]. You should
consider using icons in menu items only sparingly, and for "objects" (or
"nouns") elements only, like bookmarks, files, and links; "actions" (or
"verbs") should not have icons.
#NAME: widget
#PARENT: Gtk.Widget.keynav_failed.gboolean
#COMMENT: a #GtkWidget
#NAME: path
#PARENT: Gtk.tree_row_reference_deleted.none
#COMMENT: the path position that was deleted
#NAME: group_gesture
#PARENT: Gtk.Gesture.group.none
#COMMENT: #GtkGesture to group @gesture with
#NAME: tagname
#PARENT: Gtk.Buildable.custom_tag_start.gboolean
#COMMENT: name of tag
#NAME: new
#PARENT: Gtk.ListBox.new
#COMMENT: a new #GtkListBox
#NAME: widget_class
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: stock_id
#PARENT: Gtk.Tooltip.set_icon_from_stock.none
#COMMENT: a stock id, or %NULL
#NAME: self
#PARENT: Gtk.LevelBar.get_value.gdouble
#COMMENT: a #GtkLevelBar
#NAME: child
#PARENT: Gtk.Notebook.append_page_menu.gint
#COMMENT: the #GtkWidget to use as the contents of the page
#NAME: weak
#PARENT: Gtk.TextView.get_cursor_locations.none
#COMMENT: location to store the weak
    cursor position (may be %NULL)
#NAME: get_tooltip_column
#PARENT: Gtk.TreeView
#COMMENT: Returns the column of @tree_view’s model which is being used for
displaying tooltips on @tree_view’s rows.
#NAME: get_version
#PARENT: Gtk.AboutDialog.get_version
#COMMENT: The version string. The string is owned by the about
 dialog and must not be modified.
#NAME: has_visible_focus
#PARENT: Gtk.Widget
#COMMENT: Determines if the widget should show a visible indication that
it has the global input focus. This is a convenience function for
use in ::draw handlers that takes into account whether focus
indication should currently be shown in the toplevel window of
@widget. See gtk_window_get_focus_visible() for more information
about focus indication.

To find out if the widget has the global input focus, use
gtk_widget_has_focus().
#NAME: widget
#PARENT: Gtk.Widget.is_sensitive.gboolean
#COMMENT: a #GtkWidget
#NAME: get_detail_width_chars
#PARENT: Gtk.Calendar
#COMMENT: Queries the width of detail cells, in characters.
See #GtkCalendar:detail-width-chars.
#NAME: columns
#PARENT: Gtk.ListStore.set_valuesv.none
#COMMENT: an array of column numbers
#NAME: uri
#PARENT: Gtk.RecentManager.lookup_item.RecentInfo
#COMMENT: a URI
#NAME: statusbar
#PARENT: Gtk.Statusbar.push.guint
#COMMENT: a #GtkStatusbar
#NAME: set_margin_start
#PARENT: Gtk.Widget
#COMMENT: Sets the start margin of @widget.
See the #GtkWidget:margin-start property.
#NAME: get_column_spacing
#PARENT: Gtk.Grid
#COMMENT: Returns the amount of space between the columns of @grid.
#NAME: scrollable
#PARENT: Gtk.Scrollable.get_vscroll_policy.ScrollablePolicy
#COMMENT: a #GtkScrollable
#NAME: path
#PARENT: Gtk.TreePath.is_ancestor.gboolean
#COMMENT: a #GtkTreePath-struct
#NAME: allocation
#PARENT: Gtk.Widget.size-allocate.none
#COMMENT: the region which has been
  allocated to the widget.
#NAME: width
#PARENT: Gtk.CellRenderer.get_preferred_height_for_width.none
#COMMENT: the size which is available for allocation
#NAME: icon_view
#PARENT: Gtk.IconView.set_selection_mode.none
#COMMENT: A #GtkIconView.
#NAME: grab_default
#PARENT: Gtk.Widget
#COMMENT: Causes @widget to become the default widget. @widget must be able to be
a default widget; typically you would ensure this yourself
by calling gtk_widget_set_can_default() with a %TRUE value.
The default widget is activated when
the user presses Enter in a window. Default widgets must be
activatable, that is, gtk_widget_activate() should affect them. Note
that #GtkEntry widgets require the “activates-default” property
set to %TRUE before they activate the default widget when Enter
is pressed and the #GtkEntry is focused.
#NAME: intersect
#PARENT: Gtk.Widget.intersect
#COMMENT: %TRUE if there was an intersection
#NAME: propagation-phase
#PARENT: Gtk.EventController
#COMMENT: The propagation phase at which this controller will handle events.
#NAME: page_size
#PARENT: Gtk.Adjustment.new.Adjustment
#COMMENT: the page size.
#NAME: get_angle
#PARENT: Gtk.Label.get_angle
#COMMENT: the angle of rotation for the label
#NAME: enable_search
#PARENT: Gtk.TreeView.set_enable_search.none
#COMMENT: %TRUE, if the user can search interactively
#NAME: direction
#PARENT: Gtk.draw_insertion_cursor.none
#COMMENT: whether the cursor is left-to-right or
            right-to-left. Should never be #GTK_TEXT_DIR_NONE
#NAME: completion
#PARENT: Gtk.EntryCompletion.insert_prefix.none
#COMMENT: a #GtkEntryCompletion
#NAME: delete_text
#PARENT: Gtk.EntryBuffer
#COMMENT: Deletes a sequence of characters from the buffer. @n_chars characters are
deleted starting at @position. If @n_chars is negative, then all characters
until the end of the text are deleted.

If @position or @n_chars are out of bounds, then they are coerced to sane
values.

Note that the positions are specified in characters, not bytes.
#NAME: action
#PARENT: Gtk.Action.set_sensitive.none
#COMMENT: the action object
#NAME: notebook
#PARENT: Gtk.Notebook.get_scrollable.gboolean
#COMMENT: a #GtkNotebook
#NAME: chooser
#PARENT: Gtk.RecentChooser.select_all.none
#COMMENT: a #GtkRecentChooser
#NAME: get_popup
#PARENT: Gtk.ScaleButton.get_popup
#COMMENT: the popup of the #GtkScaleButton
#NAME: set_title
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the title of the @tree_column.  If a custom widget has been set, then
this value is ignored.
#NAME: menu_button
#PARENT: Gtk.MenuButton.get_direction.ArrowType
#COMMENT: a #GtkMenuButton
#NAME: text_view
#PARENT: Gtk.TextView.get_monospace.gboolean
#COMMENT: a #GtkTextView
#NAME: get_property
#PARENT: Gtk.ThemingEngine
#COMMENT: Gets a property value as retrieved from the style settings that apply
to the currently rendered element.
#NAME: chooser
#PARENT: Gtk.RecentChooser.list_filters.RecentFilter
#COMMENT: a #GtkRecentChooser
#NAME: lookup_icon_for_scale
#PARENT: Gtk.IconTheme.lookup_icon_for_scale
#COMMENT: a #GtkIconInfo object
    containing information about the icon, or %NULL if the
    icon wasn’t found.
#NAME: get_ellipsize
#PARENT: Gtk.Label.get_ellipsize
#COMMENT: #PangoEllipsizeMode
#NAME: get_minus_button
#PARENT: Gtk.ScaleButton
#COMMENT: Retrieves the minus button of the #GtkScaleButton.
#NAME: widget
#PARENT: Gtk.Widget.unrealize.none
#COMMENT: a #GtkWidget
#NAME: device
#PARENT: Gtk.ComboBox.popup_for_device.none
#COMMENT: a #GdkDevice
#NAME: widget
#PARENT: Gtk.Accessible.set_widget.none
#COMMENT: a #GtkWidget or %NULL to unset
#NAME: set_defer_drawing
#PARENT: Gtk.PrintOperation
#COMMENT: Sets up the #GtkPrintOperation to wait for calling of
gtk_print_operation_draw_page_finish() from application. It can
be used for drawing page in another thread.

This function must be called in the callback of “draw-page” signal.
#NAME: button
#PARENT: Gtk.FileChooserButton.get_title.utf8
#COMMENT: the button widget to examine.
#NAME: button_text
#PARENT: Gtk.InfoBar.add_button.Button
#COMMENT: text of button
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.remove_shortcut.none
#COMMENT: a places sidebar
#NAME: xthickness
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: size
#PARENT: Gtk.IconSource.set_size.none
#COMMENT: icon size this source applies to
#NAME: group_name
#PARENT: Gtk.PrintSettings.new_from_key_file.PrintSettings
#COMMENT: the name of the group to use, or %NULL to use
    the default “Print Settings”
#NAME: get_related_action
#PARENT: Gtk.Activatable
#COMMENT: Gets the related #GtkAction for @activatable.
#NAME: parent_class
#PARENT: Gtk.ColorSelectionClass
#COMMENT: The parent class.
#NAME: wrap-width
#PARENT: Gtk.CellRendererText
#COMMENT: Specifies the minimum width at which the text is wrapped. The wrap-mode property can
be used to influence at what character positions the line breaks can be placed.
Setting wrap-width to -1 turns wrapping off.
#NAME: get_indent
#PARENT: Gtk.TextView
#COMMENT: Gets the default indentation of paragraphs in @text_view.
Tags in the view’s buffer may override the default.
The indentation may be negative.
#NAME: set_spacing
#PARENT: Gtk.CellAreaBox
#COMMENT: Sets the spacing to add between cell renderers in @box.
#NAME: deserialize
#PARENT: Gtk.TextBuffer.deserialize
#COMMENT: %TRUE on success, %FALSE otherwise.
#NAME: get_preferred_width
#PARENT: Gtk.CellAreaContext
#COMMENT: Gets the accumulative preferred width for all rows which have been
requested with this context.

After gtk_cell_area_context_reset() is called and/or before ever
requesting the size of a #GtkCellArea, the returned values are 0.
#NAME: get_stack
#PARENT: Gtk.StackSidebar.get_stack
#COMMENT: the associated #GtkStack or
    %NULL if none has been set explicitly
#NAME: property_value
#PARENT: Gtk.rc_property_parse_requisition.gboolean
#COMMENT: a #GValue which must hold boxed values.
#NAME: custom_tag_start
#PARENT: Gtk.Buildable.custom_tag_start
#COMMENT: %TRUE if a object has a custom implementation, %FALSE
         if it doesn't.
#NAME: free
#PARENT: Gtk.IconInfo
#COMMENT: Free a #GtkIconInfo and associated information
#NAME: scrollable
#PARENT: Gtk.Scrollable.get_hscroll_policy.ScrollablePolicy
#COMMENT: a #GtkScrollable
#NAME: action
#PARENT: Gtk.ToggleAction.get_active.gboolean
#COMMENT: the action object
#NAME: get_has_window
#PARENT: Gtk.Widget
#COMMENT: Determines whether @widget has a #GdkWindow of its own. See
gtk_widget_set_has_window().
#NAME: get_license_type
#PARENT: Gtk.AboutDialog
#COMMENT: Retrieves the license set using gtk_about_dialog_set_license_type()
#NAME: start_iter
#PARENT: Gtk.TextBuffer.delete_interactive.gboolean
#COMMENT: start of range to delete
#NAME: widget
#PARENT: Gtk.Widget.event.gboolean
#COMMENT: a #GtkWidget
#NAME: swipe
#PARENT: Gtk.GestureSwipe
#COMMENT: This signal is emitted when the recognized gesture is finished, velocity
and direction are a product of previously recorded events.
#NAME: button
#PARENT: Gtk.FileChooserButton.set_width_chars.none
#COMMENT: the button widget to examine.
#NAME: set_active
#PARENT: Gtk.CellRendererToggle
#COMMENT: Activates or deactivates a cell renderer.
#NAME: button
#PARENT: Gtk.Button.set_label.none
#COMMENT: a #GtkButton
#NAME: cr
#PARENT: Gtk.paint_resize_grip.none
#COMMENT: a #cairo_t
#NAME: buildable
#PARENT: Gtk.Buildable.parser_finished.none
#COMMENT: a #GtkBuildable
#NAME: im_module_file
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: callback
#PARENT: Gtk.IMPreeditStyle
#COMMENT: Deprecated
#NAME: get_flippable
#PARENT: Gtk.Range.get_flippable
#COMMENT: %TRUE if the range is flippable
#NAME: activatable
#PARENT: Gtk.Entry.set_icon_activatable.none
#COMMENT: %TRUE if the icon should be activatable
#NAME: end
#PARENT: Gtk.TextBuffer.get_slice.utf8
#COMMENT: end of a range
#NAME: widget
#PARENT: Gtk.Widget.drag_dest_set_proxy.none
#COMMENT: a #GtkWidget
#NAME: expand
#PARENT: Gtk.Box.query_child_packing.none
#COMMENT: pointer to return location for expand child
    property
#NAME: widget
#PARENT: Gtk.Widget.drag_dest_get_track_motion.gboolean
#COMMENT: a #GtkWidget that’s a drag destination
#NAME: no_svg
#PARENT: Gtk.IconLookupFlags
#COMMENT: Never get SVG icons, even if gdk-pixbuf
  supports them. Cannot be used together with %GTK_ICON_LOOKUP_FORCE_SVG.
#NAME: reference
#PARENT: Gtk.TreeRowReference.valid.gboolean
#COMMENT: a #GtkTreeRowReference, or %NULL
#NAME: parse_geometry
#PARENT: Gtk.Window
#COMMENT: Parses a standard X Window System geometry string - see the
manual page for X (type “man X”) for details on this.
gtk_window_parse_geometry() does work on all GTK+ ports
including Win32 but is primarily intended for an X environment.

If either a size or a position can be extracted from the
geometry string, gtk_window_parse_geometry() returns %TRUE
and calls gtk_window_set_default_size() and/or gtk_window_move()
to resize/move the window.

If gtk_window_parse_geometry() returns %TRUE, it will also
set the #GDK_HINT_USER_POS and/or #GDK_HINT_USER_SIZE hints
indicating to the window manager that the size/position of
the window was user-specified. This causes most window
managers to honor the geometry.

Note that for gtk_window_parse_geometry() to work as expected, it has
to be called when the window has its “final” size, i.e. after calling
gtk_widget_show_all() on the contents and gtk_window_set_geometry_hints()
on the window.
|[<!-- language="C" -->
#include <gtk/gtk.h>

static void
fill_with_content (GtkWidget *vbox)
{
  // fill with content...
}

int
main (int argc, char *argv[])
{
  GtkWidget *window, *vbox;
  GdkGeometry size_hints = {
    100, 50, 0, 0, 100, 50, 10,
    10, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST
  };

  gtk_init (&argc, &argv);

  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  vbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);

  gtk_container_add (GTK_CONTAINER (window), vbox);
  fill_with_content (vbox);
  gtk_widget_show_all (vbox);

  gtk_window_set_geometry_hints (GTK_WINDOW (window),
	  			    window,
				    &size_hints,
				    GDK_HINT_MIN_SIZE |
				    GDK_HINT_BASE_SIZE |
				    GDK_HINT_RESIZE_INC);

  if (argc > 1)
    {
      gboolean res;
      res = gtk_window_parse_geometry (GTK_WINDOW (window),
                                       argv[1]);
      if (! res)
        fprintf (stderr,
                 "Failed to parse “%s”\n",
                 argv[1]);
    }

  gtk_widget_show_all (window);
  gtk_main ();

  return 0;
}
]|
#NAME: colorsel
#PARENT: Gtk.ColorSelection.get_has_opacity_control.gboolean
#COMMENT: a #GtkColorSelection
#NAME: info
#PARENT: Gtk.TargetList.add_uri_targets.none
#COMMENT: an ID that will be passed back to the application
#NAME: context
#PARENT: Gtk.drag_set_icon_default.none
#COMMENT: the context for a drag (This must be called
    with a  context for the source side of a drag)
#NAME: menu_shell
#PARENT: Gtk.MenuShellClass.deactivate.deactivate.none
#COMMENT: a #GtkMenuShell
#NAME: modal
#PARENT: Gtk.Popover
#COMMENT: Sets whether the popover is modal (so other elements in the window do not
receive input while the popover is visible).
#NAME: get_bounds
#PARENT: Gtk.TextBuffer
#COMMENT: Retrieves the first and last iterators in the buffer, i.e. the
entire buffer lies within the range [@start,@end).
#NAME: secondary
#PARENT: Gtk.EntryIconPosition
#COMMENT: At the end of the entry (depending on the text direction).
#NAME: action
#PARENT: Gtk.ActivatableIface.sync_action_properties.sync_action_properties.none
#COMMENT: the related #GtkAction or %NULL
#NAME: actionable
#PARENT: Gtk.Actionable.get_action_name.utf8
#COMMENT: a #GtkActionable widget
#NAME: get_current_value
#PARENT: Gtk.RadioAction
#COMMENT: Obtains the value property of the currently active member of
the group to which @action belongs.
#NAME: widget
#PARENT: Gtk.Widget.unregister_window.none
#COMMENT: a #GtkWidget
#NAME: new_text
#PARENT: Gtk.Editable.insert-text.none
#COMMENT: the new text to insert
#NAME: link
#PARENT: Gtk.StateFlags
#COMMENT: Widget is a link. Since 3.12
#NAME: get_col_spacing
#PARENT: Gtk.Table.get_col_spacing
#COMMENT: the column spacing
#NAME: get_row_separator_func
#PARENT: Gtk.TreeView
#COMMENT: Returns the current row separator function.
#NAME: grid
#PARENT: Gtk.Grid.attach_next_to.none
#COMMENT: a #GtkGrid
#NAME: user_data
#PARENT: Gtk.PrintSettings.foreach.none
#COMMENT: user data for @func
#NAME: context
#PARENT: Gtk.StyleContext.push_animatable_region.none
#COMMENT: a #GtkStyleContext
#NAME: width
#PARENT: Gtk.render_expander.none
#COMMENT: rectangle width
#NAME: window
#PARENT: Gtk.Window.add_accel_group.none
#COMMENT: window to attach accelerator group to
#NAME: new
#PARENT: Gtk.FontChooserDialog
#COMMENT: Creates a new #GtkFontChooserDialog.
#NAME: iter
#PARENT: Gtk.ComboBox.set_active_iter.none
#COMMENT: The #GtkTreeIter, or %NULL
#NAME: props
#PARENT: Gtk.StyleProperties.map_color.none
#COMMENT: a #GtkStyleProperties
#NAME: group
#PARENT: Gtk.ToolItemGroup.get_header_relief.ReliefStyle
#COMMENT: a #GtkToolItemGroup
#NAME: dialog
#PARENT: Gtk.Dialog.add_action_widget.none
#COMMENT: a #GtkDialog
#NAME: left
#PARENT: Gtk.Grid.attach.none
#COMMENT: the column number to attach the left side of @child to
#NAME: FlowBoxFilterFunc
#PARENT: Gtk
#COMMENT: A function that will be called whenrever a child changes
or is added. It lets you control if the child should be
visible or not.
#NAME: get_copyright
#PARENT: Gtk.AboutDialog.get_copyright
#COMMENT: The copyright string. The string is owned by the about
 dialog and must not be modified.
#NAME: get_mnemonic_modifier
#PARENT: Gtk.Window
#COMMENT: Returns the mnemonic modifier for this window. See
gtk_window_set_mnemonic_modifier().
#NAME: generating_data
#PARENT: Gtk.PrintStatus
#COMMENT: This status is set while the
    pages are being rendered.
#NAME: widget
#PARENT: Gtk.WidgetClass.get_preferred_height.get_preferred_height.none
#COMMENT: a #GtkWidget instance
#NAME: ungroup
#PARENT: Gtk.Gesture
#COMMENT: Separates @gesture into an isolated group.
#NAME: count
#PARENT: Gtk.NumerableIcon.set_count.none
#COMMENT: a number between -99 and 99
#NAME: get_displayed_row
#PARENT: Gtk.CellView.get_displayed_row
#COMMENT: the currently displayed row or %NULL
#NAME: about
#PARENT: Gtk.AboutDialog.set_wrap_license.none
#COMMENT: a #GtkAboutDialog
#NAME: set_preview_text
#PARENT: Gtk.FontChooser
#COMMENT: Sets the text displayed in the preview area.
The @text is used to show how the selected font looks.
#NAME: set_current_page
#PARENT: Gtk.PrintOperation
#COMMENT: Sets the current page.

If this is called before gtk_print_operation_run(),
the user will be able to select to print only the current page.

Note that this only makes sense for pre-paginated documents.
#NAME: add_accelerator
#PARENT: Gtk.Widget
#COMMENT: Installs an accelerator for this @widget in @accel_group that causes
@accel_signal to be emitted if the accelerator is activated.
The @accel_group needs to be added to the widget’s toplevel via
gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
Accelerators added through this function are not user changeable during
runtime. If you want to support accelerators that can be changed by the
user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
gtk_menu_item_set_accel_path() instead.
#NAME: box
#PARENT: Gtk.Box.get_center_widget.Widget
#COMMENT: a #GtkBox
#NAME: get_layout_offsets
#PARENT: Gtk.Scale
#COMMENT: Obtains the coordinates where the scale will draw the
#PangoLayout representing the text in the scale. Remember
when using the #PangoLayout function you need to convert to
and from pixels using PANGO_PIXELS() or #PANGO_SCALE.

If the #GtkScale:draw-value property is %FALSE, the return
values are undefined.
#NAME: iter
#PARENT: Gtk.TextBufferDeserializeFunc.gboolean
#COMMENT: insertion point for the deserialized text
#NAME: scale-factor
#PARENT: Gtk.Widget
#COMMENT: The scale factor of the widget. See gtk_widget_get_scale_factor() for
more details about widget scaling.
#NAME: get_surrounding
#PARENT: Gtk.IMContextClass.get_surrounding.get_surrounding
#COMMENT: %TRUE if surrounding text was provided; in this case
   you must free the result stored in *text.
#NAME: end_pos
#PARENT: Gtk.Editable.select_region.none
#COMMENT: end of region
#NAME: 
#PARENT: Gtk.ListStore.new.ListStore...
#COMMENT: all #GType types for the columns, from first to last
#NAME: vertical
#PARENT: Gtk.PrintDuplex
#COMMENT: Vertical duplex.
#NAME: iter
#PARENT: Gtk.TreeStore.prepend.none
#COMMENT: An unset #GtkTreeIter to set to the prepended row
#NAME: location
#PARENT: Gtk.PlacesSidebar.open-location.none
#COMMENT: #GFile to which the caller should switch.
#NAME: iter
#PARENT: Gtk.TextBuffer.get_iter_at_mark.none
#COMMENT: iterator to initialize
#NAME: preedit-changed
#PARENT: Gtk.TextView
#COMMENT: If an input method is used, the typed text will not immediately
be committed to the buffer. So if you are interested in the text,
connect to this signal.

This signal is only emitted if the text at the given position
is actually editable.
#NAME: error
#PARENT: Gtk.CssProvider.parsing-error.none
#COMMENT: The parsing error
#NAME: settings
#PARENT: Gtk.PrintSettings.get_default_source.utf8
#COMMENT: a #GtkPrintSettings
#NAME: get_show_arrow
#PARENT: Gtk.Toolbar.get_show_arrow
#COMMENT: %TRUE if the toolbar has an overflow menu.
#NAME: row
#PARENT: Gtk.ListBox.select_row.none
#COMMENT: The row to select or %NULL
#NAME: new_alpha
#PARENT: Gtk.SymbolicColor
#COMMENT: Creates a symbolic color by modifying the relative alpha
value of @color. A factor < 1.0 would resolve to a more
transparent color, while > 1.0 would resolve to a more
opaque color.
#NAME: cell
#PARENT: Gtk.CellLayout.clear_attributes.none
#COMMENT: a #GtkCellRenderer to clear the attribute mapping on
#NAME: group
#PARENT: Gtk.RadioToolButton.set_group.none
#COMMENT: an existing radio button group, or %NULL
#NAME: clear
#PARENT: Gtk.StyleProperties
#COMMENT: Clears all style information from @props.
#NAME: data
#PARENT: Gtk.TextBufferDeserializeFunc.gboolean
#COMMENT: data to deserialize
#NAME: get_toggled_tags
#PARENT: Gtk.TextIter.get_toggled_tags
#COMMENT: tags toggled at this point
#NAME: hash_next
#PARENT: Gtk.BindingEntry
#COMMENT: implementation detail
#NAME: chooser
#PARENT: Gtk.RecentChooser.set_show_private.none
#COMMENT: a #GtkRecentChooser
#NAME: translate_coordinates
#PARENT: Gtk.Widget
#COMMENT: Translate coordinates relative to @src_widget’s allocation to coordinates
relative to @dest_widget’s allocations. In order to perform this
operation, both widgets must be realized, and must share a common
toplevel.
#NAME: true
#PARENT: Gtk
#COMMENT: All this function does it to return %TRUE.

This can be useful for example if you want to inhibit the deletion
of a window. Of course you should not do this as the user expects
a reaction from clicking the close icon of the window...

## A persistent window

|[<!-- language="C" -->
#include <gtk/gtk.h>

int
main (int argc, char **argv)
{
  GtkWidget *win, *but;
  const char *text = "Close yourself. I mean it!";

  gtk_init (&argc, &argv);

  win = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  g_signal_connect (win,
                    "delete-event",
                    G_CALLBACK (gtk_true),
                    NULL);
  g_signal_connect (win, "destroy",
                    G_CALLBACK (gtk_main_quit),
                    NULL);

  but = gtk_button_new_with_label (text);
  g_signal_connect_swapped (but, "clicked",
                            G_CALLBACK (gtk_object_destroy),
                            win);
  gtk_container_add (GTK_CONTAINER (win), but);

  gtk_widget_show_all (win);

  gtk_main ();

  return 0;
}
]|
#NAME: minor
#PARENT: Gtk.GLArea.get_required_version.none
#COMMENT: return location for the required minor version
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_hscrollbar.Widget
#COMMENT: a #GtkScrolledWindow
#NAME: pixbuf
#PARENT: Gtk.StatusIcon.new_from_pixbuf.StatusIcon
#COMMENT: a #GdkPixbuf
#NAME: justification
#PARENT: Gtk.TextAttributes
#COMMENT: #GtkJustification for text.
#NAME: set_pixels_above_lines
#PARENT: Gtk.TextView
#COMMENT: Sets the default number of blank pixels above paragraphs in @text_view.
Tags in the buffer for @text_view may override the defaults.
#NAME: scale
#PARENT: Gtk.Scale.get_draw_value.gboolean
#COMMENT: a #GtkScale
#NAME: screen
#PARENT: Gtk.StyleContext.reset_widgets.none
#COMMENT: a #GdkScreen
#NAME: page
#PARENT: Gtk.Assistant.get_page_type.AssistantPageType
#COMMENT: a page of @assistant
#NAME: pixbuf
#PARENT: Gtk.Assistant.set_page_header_image.none
#COMMENT: the new header image @page
#NAME: tree_view
#PARENT: Gtk.TreeView.set_tooltip_cell.none
#COMMENT: a #GtkTreeView
#NAME: AssistantPageType
#PARENT: Gtk
#COMMENT: An enum for determining the page role inside the #GtkAssistant. It's
used to handle buttons sensitivity and visibility.

Note that an assistant needs to end its page flow with a page of type
%GTK_ASSISTANT_PAGE_CONFIRM, %GTK_ASSISTANT_PAGE_SUMMARY or
%GTK_ASSISTANT_PAGE_PROGRESS to be correct.

The Cancel button will only be shown if the page isn’t “committed”.
See gtk_assistant_commit() for details.
#NAME: calendar
#PARENT: Gtk.Calendar.select_month.none
#COMMENT: a #GtkCalendar
#NAME: notebook
#PARENT: Gtk.Notebook.set_tab_pos.none
#COMMENT: a #GtkNotebook.
#NAME: op
#PARENT: Gtk.PrintOperation.run.PrintOperationResult
#COMMENT: a #GtkPrintOperation
#NAME: x
#PARENT: Gtk.TreeView.is_blank_at_pos.gboolean
#COMMENT: The x position to be identified (relative to bin_window)
#NAME: path
#PARENT: Gtk.WidgetPath.iter_set_object_type.none
#COMMENT: a #GtkWidgetPath
#NAME: notebook
#PARENT: Gtk.Notebook.get_nth_page.Widget
#COMMENT: a #GtkNotebook
#NAME: set_wrap
#PARENT: Gtk.SpinButton
#COMMENT: Sets the flag that determines if a spin button value wraps
around to the opposite limit when the upper or lower limit
of the range is exceeded.
#NAME: y
#PARENT: Gtk.TreeView.is_blank_at_pos.gboolean
#COMMENT: The y position to be identified (relative to bin_window)
#NAME: down
#PARENT: Gtk.ArrowType
#COMMENT: Represents a downward pointing arrow.
#NAME: none
#PARENT: Gtk.EventSequenceState
#COMMENT: The sequence is handled, but not grabbed.
#NAME: area
#PARENT: Gtk.CellAreaClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: a #GtkCellArea
#NAME: func_data
#PARENT: Gtk.KeySnoopFunc.gint
#COMMENT: data supplied to gtk_key_snooper_install()
#NAME: set_tabs
#PARENT: Gtk.Entry
#COMMENT: Sets a #PangoTabArray; the tabstops in the array are applied to the entry
text.
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.add_shortcut.none
#COMMENT: a places sidebar
#NAME: value
#PARENT: Gtk.ScaleButton.value-changed.none
#COMMENT: the new value
#NAME: context
#PARENT: Gtk.CellAreaContextClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: a #GtkCellAreaContext
#NAME: new
#PARENT: Gtk.IconSet
#COMMENT: Creates a new #GtkIconSet. A #GtkIconSet represents a single icon
in various sizes and widget states. It can provide a #GdkPixbuf
for a given size and state on request, and automatically caches
some of the rendered #GdkPixbuf objects.

Normally you would use gtk_widget_render_icon_pixbuf() instead of
using #GtkIconSet directly. The one case where you’d use
#GtkIconSet is to create application-specific icon sets to place in
a #GtkIconFactory.
#NAME: get_do_overwrite_confirmation
#PARENT: Gtk.FileChooser.get_do_overwrite_confirmation
#COMMENT: %TRUE if the file chooser will present a confirmation dialog;
%FALSE otherwise.
#NAME: paragraph-background-gdk
#PARENT: Gtk.TextTag
#COMMENT: The paragraph background color as a #GdkColor.
#NAME: filename
#PARENT: Gtk.rc_parse.none
#COMMENT: the filename of a file to parse. If @filename is not absolute, it
 is searched in the current directory.
#NAME: unselect_filename
#PARENT: Gtk.FileChooser
#COMMENT: Unselects a currently selected filename. If the filename
is not in the current directory, does not exist, or
is otherwise not currently selected, does nothing.
#NAME: n_targets
#PARENT: Gtk.IconView.enable_model_drag_dest.none
#COMMENT: the number of items in @targets
#NAME: STOCK_GOTO_TOP
#PARENT: Gtk
#COMMENT: The “Top” item and icon.
#NAME: state_type
#PARENT: Gtk.Style.set_background.none
#COMMENT: a state
#NAME: Entry
#PARENT: Gtk
#COMMENT: The #GtkEntry widget is a single line text entry
widget. A fairly large set of key bindings are supported
by default. If the entered text is longer than the allocation
of the widget, the widget will scroll so that the cursor
position is visible.

When using an entry for passwords and other sensitive information,
it can be put into “password mode” using gtk_entry_set_visibility().
In this mode, entered text is displayed using a “invisible” character.
By default, GTK+ picks the best invisible character that is available
in the current font, but it can be changed with
gtk_entry_set_invisible_char(). Since 2.16, GTK+ displays a warning
when Caps Lock or input methods might interfere with entering text in
a password entry. The warning can be turned off with the
#GtkEntry:caps-lock-warning property.

Since 2.16, GtkEntry has the ability to display progress or activity
information behind the text. To make an entry display such information,
use gtk_entry_set_progress_fraction() or gtk_entry_set_progress_pulse_step().

Additionally, GtkEntry can show icons at either side of the entry. These
icons can be activatable by clicking, can be set up as drag source and
can have tooltips. To add an icon, use gtk_entry_set_icon_from_gicon() or
one of the various other functions that set an icon from a stock id, an
icon name or a pixbuf. To trigger an action when the user clicks an icon,
connect to the #GtkEntry::icon-press signal. To allow DND operations
from an icon, use gtk_entry_set_icon_drag_source(). To set a tooltip on
an icon, use gtk_entry_set_icon_tooltip_text() or the corresponding function
for markup.

Note that functionality or information that is only available by clicking
on an icon in an entry may not be accessible at all to users which are not
able to use a mouse or other pointing device. It is therefore recommended
that any such functionality should also be available by other means, e.g.
via the context menu of the entry.
#NAME: end_user_action
#PARENT: Gtk.TextBuffer
#COMMENT: Should be paired with a call to gtk_text_buffer_begin_user_action().
See that function for a full explanation.
#NAME: backward_search
#PARENT: Gtk.TextIter
#COMMENT: Same as gtk_text_iter_forward_search(), but moves backward.

@match_end will never be set to a #GtkTextIter located after @iter, even if
there is a possible @match_start before or at @iter.
#NAME: entry
#PARENT: Gtk.Entry.get_activates_default.gboolean
#COMMENT: a #GtkEntry
#NAME: STYLE_PROPERTY_BACKGROUND_COLOR
#PARENT: Gtk
#COMMENT: A property holding the background color of rendered elements as a #GdkRGBA.
#NAME: sequence
#PARENT: Gtk.Gesture.cancel.none
#COMMENT: the #GdkEventSequence that was cancelled
#NAME: path_string
#PARENT: Gtk.TreeModel.get_iter_from_string.gboolean
#COMMENT: a string representation of a #GtkTreePath-struct
#NAME: append
#PARENT: Gtk.TreeStore
#COMMENT: Appends a new row to @tree_store.  If @parent is non-%NULL, then it will append the
new row after the last child of @parent, otherwise it will append a row to
the top level.  @iter will be changed to point to this new row.  The row will
be empty after this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().
#NAME: set_type_hint
#PARENT: Gtk.Window
#COMMENT: By setting the type hint for the window, you allow the window
manager to decorate and handle the window in a way which is
suitable to the function of the window in your application.

This function should be called before the window becomes visible.

gtk_dialog_new_with_buttons() and other convenience functions in GTK+
will sometimes call gtk_window_set_type_hint() on your behalf.
#NAME: set_accel_group
#PARENT: Gtk.Action
#COMMENT: Sets the #GtkAccelGroup in which the accelerator for this action
will be installed.
#NAME: track_motion
#PARENT: Gtk.Widget.drag_dest_set_track_motion.none
#COMMENT: whether to accept all targets
#NAME: column-spacing
#PARENT: Gtk.FlowBox
#COMMENT: The amount of horizontal space between two children.
#NAME: convert_child_iter_to_iter
#PARENT: Gtk.TreeModelFilter.convert_child_iter_to_iter
#COMMENT: %TRUE, if @filter_iter was set, i.e. if @child_iter is a
valid iterator pointing to a visible row in child model.
#NAME: sortable
#PARENT: Gtk.TreeSortableIface.set_sort_func.set_sort_func.none
#COMMENT: A #GtkTreeSortable
#NAME: widget
#PARENT: Gtk.Widget.set_device_enabled.none
#COMMENT: a #GtkWidget
#NAME: width
#PARENT: Gtk.Window.set_default_size.none
#COMMENT: width in pixels, or -1 to unset the default width
#NAME: x
#PARENT: Gtk.Gesture.get_point.gboolean
#COMMENT: return location for X axis of the sequence coordinates
#NAME: text-pushed
#PARENT: Gtk.Statusbar
#COMMENT: Is emitted whenever a new message gets pushed onto a statusbar's stack.
#NAME: underline
#PARENT: Gtk.TextAppearance
#COMMENT: #PangoUnderline
#NAME: y
#PARENT: Gtk.Gesture.get_point.gboolean
#COMMENT: return location for Y axis of the sequence coordinates
#NAME: box
#PARENT: Gtk.ListBox.set_filter_func.none
#COMMENT: a #GtkListBox
#NAME: get_show_numbers
#PARENT: Gtk.RecentChooserMenu.get_show_numbers
#COMMENT: %TRUE if numbers should be shown.
#NAME: pos
#PARENT: Gtk.UIManager.insert_action_group.none
#COMMENT: the position at which the group will be inserted.
#NAME: get_composite_name
#PARENT: Gtk.Widget.get_composite_name
#COMMENT: the composite name of @widget, or %NULL if @widget is not
  a composite child. The string should be freed when it is no
  longer needed.
#NAME: is_expanded
#PARENT: Gtk.CellAreaClass.apply_attributes.apply_attributes.none
#COMMENT: whether @iter is expanded in the view and
              children are visible
#NAME: Scrollable
#PARENT: Gtk
#COMMENT: #GtkScrollable is an interface that is implemented by widgets with native
scrolling ability.

To implement this interface you should override the
#GtkScrollable:hadjustment and #GtkScrollable:vadjustment properties.

## Creating a scrollable widget

All scrollable widgets should do the following.

- When a parent widget sets the scrollable child widget’s adjustments,
  the widget should populate the adjustments’
  #GtkAdjustment:lower, #GtkAdjustment:upper,
  #GtkAdjustment:step-increment, #GtkAdjustment:page-increment and
  #GtkAdjustment:page-size properties and connect to the
  #GtkAdjustment::value-changed signal.

- Because its preferred size is the size for a fully expanded widget,
  the scrollable widget must be able to cope with underallocations.
  This means that it must accept any value passed to its
  #GtkWidgetClass.size_allocate() function.

- When the parent allocates space to the scrollable child widget,
  the widget should update the adjustments’ properties with new values.

- When any of the adjustments emits the #GtkAdjustment::value-changed signal,
  the scrollable widget should scroll its contents.
#NAME: cell_editable
#PARENT: Gtk.CellEditableIface.editing_done.editing_done.none
#COMMENT: A #GtkCellEditable
#NAME: set_cursor_location
#PARENT: Gtk.IMContext
#COMMENT: Notify the input method that a change in cursor
position has been made. The location is relative to the client
window.
#NAME: info_bar
#PARENT: Gtk.InfoBar.get_show_close_button.gboolean
#COMMENT: a #GtkInfoBar
#NAME: ellipsize
#PARENT: Gtk.ProgressBar
#COMMENT: The preferred place to ellipsize the string, if the progress bar does
not have enough room to display the entire string, specified as a
#PangoEllipsizeMode.

Note that setting this property to a value other than
%PANGO_ELLIPSIZE_NONE has the side-effect that the progress bar requests
only enough space to display the ellipsis ("..."). Another means to set a
progress bar's width is gtk_widget_set_size_request().
#NAME: context
#PARENT: Gtk.StyleContext.get_section.CssSection
#COMMENT: a #GtkStyleContext
#NAME: set_default_icon
#PARENT: Gtk.Window
#COMMENT: Sets an icon to be used as fallback for windows that haven't
had gtk_window_set_icon() called on them from a pixbuf.
#NAME: set_default_response
#PARENT: Gtk.Dialog
#COMMENT: Sets the last widget in the dialog’s action area with the given @response_id
as the default widget for the dialog. Pressing “Enter” normally activates
the default widget.
#NAME: has_item
#PARENT: Gtk.RecentManager
#COMMENT: Checks whether there is a recently used resource registered
with @uri inside the recent manager.
#NAME: get_hscroll_policy
#PARENT: Gtk.Scrollable
#COMMENT: Gets the horizontal #GtkScrollablePolicy.
#NAME: first_button_text
#PARENT: Gtk.Dialog.new_with_buttons.Widget
#COMMENT: text to go in first button, or %NULL
#NAME: track-print-status
#PARENT: Gtk.PrintOperation
#COMMENT: If %TRUE, the print operation will try to continue report on
the status of the print job in the printer queues and printer.
This can allow your application to show things like “out of paper”
issues, and when the print job actually reaches the printer.
However, this is often implemented using polling, and should
not be enabled unless needed.
#NAME: value
#PARENT: Gtk.PrintSettings.set_length.none
#COMMENT: a length
#NAME: style
#PARENT: Gtk.StyleClass.set_background.set_background.none
#COMMENT: a #GtkStyle
#NAME: get_visible_text
#PARENT: Gtk.TextIter.get_visible_text
#COMMENT: string containing visible text in the
range
#NAME: toggled
#PARENT: Gtk.ToggleToolButton
#COMMENT: Emitted whenever the toggle tool button changes state.
#NAME: icon_set
#PARENT: Gtk.IconSet.render_icon_surface.cairo.Surface
#COMMENT: a #GtkIconSet
#NAME: keyboard_mode
#PARENT: Gtk.Widget.query-tooltip.gboolean
#COMMENT: %TRUE if the tooltip was trigged using the keyboard
#NAME: iter
#PARENT: Gtk.TextView.forward_display_line_end.gboolean
#COMMENT: a #GtkTextIter
#NAME: toggle_button
#PARENT: Gtk.ToggleButton.get_mode.gboolean
#COMMENT: a #GtkToggleButton
#NAME: builder
#PARENT: Gtk.Builder.add_callback_symbol.none
#COMMENT: a #GtkBuilder
#NAME: scale
#PARENT: Gtk.IconTheme.lookup_by_gicon_for_scale.IconInfo
#COMMENT: the desired scale
#NAME: cell_x
#PARENT: Gtk.TreeView.is_blank_at_pos.gboolean
#COMMENT: A pointer where the X coordinate relative to the cell can be placed, or %NULL
#NAME: dir
#PARENT: Gtk.Widget.set_direction.none
#COMMENT: the new direction
#NAME: window
#PARENT: Gtk.Window.get_icon_name.utf8
#COMMENT: a #GtkWindow
#NAME: use_preedit
#PARENT: Gtk.IMContextClass.set_use_preedit.set_use_preedit.none
#COMMENT: whether the IM context should use the preedit string.
#NAME: visible
#PARENT: Gtk.AccelFlags
#COMMENT: Accelerator is visible
#NAME: filter_keypress
#PARENT: Gtk.IMContext
#COMMENT: Allow an input method to internally handle key press and release
events. If this function returns %TRUE, then no further processing
should be done for this key event.
#NAME: iter
#PARENT: Gtk.EntryCompletionMatchFunc.gboolean
#COMMENT: a #GtkTreeIter indicating the row to match
#NAME: set_stock_id
#PARENT: Gtk.ToolButton
#COMMENT: Sets the name of the stock item. See gtk_tool_button_new_from_stock().
The stock_id property only has an effect if not
overridden by non-%NULL “label” and “icon_widget” properties.
#NAME: cell_y
#PARENT: Gtk.TreeView.is_blank_at_pos.gboolean
#COMMENT: A pointer where the Y coordinate relative to the cell can be placed, or %NULL
#NAME: 
#PARENT: Gtk.RecentChooserDialog.new.Widget...
#COMMENT: response ID for the first button, then additional (button, id)
  pairs, ending with %NULL
#NAME: widget
#PARENT: Gtk.Widget.set_device_events.none
#COMMENT: a #GtkWidget
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_has_class.gboolean
#COMMENT: position to query, -1 for the path head
#NAME: single_line_mode
#PARENT: Gtk.Label.set_single_line_mode.none
#COMMENT: %TRUE if the label should be in single line mode
#NAME: get_align_widget
#PARENT: Gtk.MenuButton
#COMMENT: Returns the parent #GtkWidget to use to line up with menu.
#NAME: ListBoxSortFunc
#PARENT: Gtk
#COMMENT: Compare two rows to determine which should be first.
#NAME: window
#PARENT: Gtk.TextView.get_window_type.TextWindowType
#COMMENT: a window type
#NAME: is_expander
#PARENT: Gtk.CellAreaClass.apply_attributes.apply_attributes.none
#COMMENT: whether @iter has children
#NAME: parse_flags
#PARENT: Gtk.RcProperty.parse_flags
#COMMENT: %TRUE if @gstring could be parsed and @property_value
has been set to the resulting flags value.
#NAME: shell
#PARENT: Gtk.ToolShell.get_orientation.Orientation
#COMMENT: a #GtkToolShell
#NAME: container
#PARENT: Gtk.ContainerClass.child_type.child_type.GType
#COMMENT: a #GtkContainer
#NAME: render_check
#PARENT: Gtk
#COMMENT: Renders a checkmark (as in a #GtkCheckButton).

The %GTK_STATE_FLAG_CHECKED state determines whether the check is
on or off, and %GTK_STATE_FLAG_INCONSISTENT determines whether it
should be marked as undefined.

Typical checkmark rendering:

![](checks.png)
#NAME: file
#PARENT: Gtk.CssProvider.load_from_file.gboolean
#COMMENT: #GFile pointing to a file to load
#NAME: size-changed
#PARENT: Gtk.StatusIcon.size-changed
#COMMENT: %TRUE if the icon was updated for the new
size. Otherwise, GTK+ will scale the icon as necessary.
#NAME: window
#PARENT: Gtk.Style.set_background.none
#COMMENT: a #GdkWindow
#NAME: get_page_complete
#PARENT: Gtk.Assistant.get_page_complete
#COMMENT: %TRUE if @page is complete.
#NAME: get_draw_as_radio
#PARENT: Gtk.CheckMenuItem.get_draw_as_radio
#COMMENT: Whether @check_menu_item looks like a #GtkRadioMenuItem
#NAME: get_markup_column
#PARENT: Gtk.IconView
#COMMENT: Returns the column with markup text for @icon_view.
#NAME: tab_label
#PARENT: Gtk.Notebook.set_tab_label.none
#COMMENT: the tab label widget to use, or %NULL
    for default tab label
#NAME: to_file
#PARENT: Gtk.PageSetup.to_file
#COMMENT: %TRUE on success
#NAME: prelight
#PARENT: Gtk.StateFlags
#COMMENT: Widget has a mouse pointer over it.
#NAME: orientation
#PARENT: Gtk.paint_handle.none
#COMMENT: the orientation of the handle
#NAME: forward_visible_word_end
#PARENT: Gtk.TextIter
#COMMENT: Moves forward to the next visible word end. (If @iter is currently on a
word end, moves forward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).
#NAME: new_from_string
#PARENT: Gtk.Builder.new_from_string
#COMMENT: a #GtkBuilder containing the interface described by @string
#NAME: angle-changed
#PARENT: Gtk.GestureRotate
#COMMENT: This signal is emitted when the angle between both tracked points
changes.
#NAME: window
#PARENT: Gtk.Window.set_destroy_with_parent.none
#COMMENT: a #GtkWindow
#NAME: CellAreaContext
#PARENT: Gtk
#COMMENT: The #GtkCellAreaContext object is created by a given #GtkCellArea
implementation via its #GtkCellAreaClass.create_context() virtual
method and is used to store cell sizes and alignments for a series of
#GtkTreeModel rows that are requested and rendered in the same context.

#GtkCellLayout widgets can create any number of contexts in which to
request and render groups of data rows. However, it’s important that the
same context which was used to request sizes for a given #GtkTreeModel
row also be used for the same row when calling other #GtkCellArea APIs
such as gtk_cell_area_render() and gtk_cell_area_event().
#NAME: active
#PARENT: Gtk.FileChooser.set_preview_widget_active.none
#COMMENT: whether to display the user-specified preview widget
#NAME: path
#PARENT: Gtk.IconTheme.get_search_path.none
#COMMENT: 
    location to store a list of icon theme path directories or %NULL.
    The stored value should be freed with g_strfreev().
#NAME: set_dither
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_DITHER.
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_format.gint
#COMMENT: a pointer to a #GtkSelectionData-struct.
#NAME: unit
#PARENT: Gtk.PageSetup.get_bottom_margin.gdouble
#COMMENT: the unit for the return value
#NAME: set_pixels_below_lines
#PARENT: Gtk.TextView
#COMMENT: Sets the default number of pixels of blank space
to put below paragraphs in @text_view. May be overridden
by tags applied to @text_view’s buffer.
#NAME: colors_per_line
#PARENT: Gtk.ColorChooserInterface.add_palette.add_palette.none
#COMMENT: the number of colors to show in each row/column
#NAME: path
#PARENT: Gtk.IconViewClass.item_activated.item_activated.none
#COMMENT: The #GtkTreePath to be activated
#NAME: new_from_key_file
#PARENT: Gtk.PaperSize.new_from_key_file
#COMMENT: a new #GtkPaperSize object with the restored
    paper size, or %NULL if an error occurred
#NAME: builder
#PARENT: Gtk.Buildable.custom_tag_start.gboolean
#COMMENT: a #GtkBuilder used to construct this object
#NAME: cell_area
#PARENT: Gtk.CellRenderer.get_aligned_area.none
#COMMENT: cell area which would be passed to gtk_cell_renderer_render()
#NAME: title
#PARENT: Gtk.FileChooserButton.set_title.none
#COMMENT: the new browse dialog title.
#NAME: clipboard
#PARENT: Gtk.ClipboardReceivedFunc.none
#COMMENT: the #GtkClipboard
#NAME: STYLE_PROPERTY_MARGIN
#PARENT: Gtk
#COMMENT: A property holding the rendered element’s margin as a #GtkBorder. The
margin is defined as the spacing between the border of the element
and its surrounding elements. It is external to #GtkWidget's
size allocations, and the most external spacing property of the
padding/border/margin series.
#NAME: activatable
#PARENT: Gtk.Activatable.set_use_action_appearance.none
#COMMENT: a #GtkActivatable
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_current_item.RecentInfo
#COMMENT: a #GtkRecentChooser
#NAME: list_regions
#PARENT: Gtk.StyleContext.list_regions
#COMMENT: a #GList of
         strings with the currently defined regions. The contents
         of the list are owned by GTK+, but you must free the list
         itself with g_list_free() when you are done with it.
#NAME: reference
#PARENT: Gtk.TreeRowReference.free.none
#COMMENT: a #GtkTreeRowReference, or %NULL
#NAME: path
#PARENT: Gtk.TreeView.set_tooltip_cell.none
#COMMENT: a #GtkTreePath or %NULL
#NAME: receives_default
#PARENT: Gtk.Widget.set_receives_default.none
#COMMENT: whether or not @widget can be a default widget.
#NAME: event
#PARENT: Gtk.CellAreaClass.event.event.gint
#COMMENT: the #GdkEvent to handle
#NAME: delete_text
#PARENT: Gtk.EntryBuffer.delete_text
#COMMENT: The number of characters deleted.
#NAME: insert_at_cursor
#PARENT: Gtk.TextBuffer
#COMMENT: Simply calls gtk_text_buffer_insert(), using the current
cursor position as the insertion point.
#NAME: model
#PARENT: Gtk.ComboBox.new_with_model_and_entry.Widget
#COMMENT: A #GtkTreeModel
#NAME: widget
#PARENT: Gtk.Widget.get_vexpand.gboolean
#COMMENT: the widget
#NAME: is_visible
#PARENT: Gtk.Widget
#COMMENT: Determines whether the widget and all its parents are marked as
visible.

This function does not check if the widget is obscured in any way.

See also gtk_widget_get_visible() and gtk_widget_set_visible()
#NAME: set_startup_id
#PARENT: Gtk.Window
#COMMENT: Startup notification identifiers are used by desktop environment to
track application startup, to provide user feedback and other
features. This function changes the corresponding property on the
underlying GdkWindow. Normally, startup identifier is managed
automatically and you should only use this function in special cases
like transferring focus from other processes. You should use this
function before calling gtk_window_present() or any equivalent
function generating a window map event.

This function is only useful on X11, not with other GTK+ targets.
#NAME: get_do_overwrite_confirmation
#PARENT: Gtk.FileChooser
#COMMENT: Queries whether a file chooser is set to confirm for overwriting when the user
types a file name that already exists.
#NAME: icon_info
#PARENT: Gtk.IconInfo.copy.IconInfo
#COMMENT: a #GtkIconInfo
#NAME: widget
#PARENT: Gtk.Widget.get_vexpand_set.gboolean
#COMMENT: the widget
#NAME: connect-proxy
#PARENT: Gtk.ActionGroup
#COMMENT: The ::connect-proxy signal is emitted after connecting a proxy to
an action in the group. Note that the proxy may have been connected
to a different action before.

This is intended for simple customizations for which a custom action
class would be too clumsy, e.g. showing tooltips for menuitems in the
statusbar.

#GtkUIManager proxies the signal and provides global notification
just before any action is connected to a proxy, which is probably more
convenient to use.
#NAME: text
#PARENT: Gtk.TextWindowType
#COMMENT: Scrollable text window.
#NAME: combo_box
#PARENT: Gtk.ComboBoxText.prepend.none
#COMMENT: A #GtkComboBox
#NAME: get_pixbuf
#PARENT: Gtk.StatusIcon.get_pixbuf
#COMMENT: the displayed pixbuf,
    or %NULL if the image is empty.
#NAME: tool_item
#PARENT: Gtk.ToolItem.toolbar_reconfigured.none
#COMMENT: a #GtkToolItem
#NAME: parent_class
#PARENT: Gtk.ColorChooserWidgetClass
#COMMENT: The parent class.
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_row_separator_func.TreeViewRowSeparatorFunc
#COMMENT: a #GtkComboBox
#NAME: context
#PARENT: Gtk.PrintContext.get_page_setup.PageSetup
#COMMENT: a #GtkPrintContext
#NAME: preedit
#PARENT: Gtk.TextView.preedit-changed.none
#COMMENT: the current preedit string
#NAME: path_is_selected
#PARENT: Gtk.IconView.path_is_selected
#COMMENT: %TRUE if @path is selected.
#NAME: direction
#PARENT: Gtk.StyleClass.render_icon.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a text direction
#NAME: STYLE_CLASS_BACKGROUND
#PARENT: Gtk
#COMMENT: A CSS class to match the window background.
#NAME: inline-completion
#PARENT: Gtk.EntryCompletion
#COMMENT: Determines whether the common prefix of the possible completions
should be inserted automatically in the entry. Note that this
requires text-column to be set, even if you are using a custom
match function.
#NAME: response_id
#PARENT: Gtk.InfoBarClass.response.response.none
#COMMENT: a response ID
#NAME: box
#PARENT: Gtk.ListBox.bind_model.none
#COMMENT: a #GtkListBox
#NAME: dialog
#PARENT: Gtk.Dialog.get_widget_for_response.Widget
#COMMENT: a #GtkDialog
#NAME: get_alpha
#PARENT: Gtk.ColorButton
#COMMENT: Returns the current alpha value.
#NAME: get_has_entry
#PARENT: Gtk.ComboBox.get_has_entry
#COMMENT: whether there is an entry in @combo_box.
#NAME: value
#PARENT: Gtk.Range.set_value.none
#COMMENT: new value of the range
#NAME: Range
#PARENT: Gtk
#COMMENT: #GtkRange is the common base class for widgets which visualize an
adjustment, e.g #GtkScale or #GtkScrollbar.

Apart from signals for monitoring the parameters of the adjustment,
#GtkRange provides properties and methods for influencing the sensitivity
of the “steppers”. It also provides properties and methods for setting a
“fill level” on range widgets. See gtk_range_set_fill_level().
#NAME: text_view
#PARENT: Gtk.TextView.set_cursor_visible.none
#COMMENT: a #GtkTextView
#NAME: row-changed
#PARENT: Gtk.TreeModel
#COMMENT: This signal is emitted when a row in the model has changed.
#NAME: get_visible_line_index
#PARENT: Gtk.TextIter.get_visible_line_index
#COMMENT: byte index of @iter with respect to the start of the line
#NAME: func
#PARENT: Gtk.Builder.connect_signals_full.none
#COMMENT: the function used to connect the signals
#NAME: up
#PARENT: Gtk.TreePath
#COMMENT: Moves the @path to point to its parent node, if it has a parent.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.queue_resize.none
#COMMENT: A #GtkTreeViewColumn
#NAME: label
#PARENT: Gtk.Label
#COMMENT: The contents of the label.

If the string contains [Pango XML markup][PangoMarkupFormat], you will
have to set the #GtkLabel:use-markup property to %TRUE in order for the
label to display the markup attributes. See also gtk_label_set_markup()
for a convenience function that sets both this property and the
#GtkLabel:use-markup property at the same time.

If the string contains underlines acting as mnemonics, you will have to
set the #GtkLabel:use-underline property to %TRUE in order for the label
to display them.
#NAME: show_not_found
#PARENT: Gtk.RecentChooser.set_show_not_found.none
#COMMENT: whether to show the local items we didn’t find
#NAME: get_selection_bound
#PARENT: Gtk.TextBuffer.get_selection_bound
#COMMENT: selection bound mark
#NAME: end
#PARENT: Gtk.Align
#COMMENT: snap to right or bottom side, leaving space on left
    or top
#NAME: RecentAction
#PARENT: Gtk
#COMMENT: A #GtkRecentAction represents a list of recently used files, which
can be shown by widgets such as #GtkRecentChooserDialog or
#GtkRecentChooserMenu.

To construct a submenu showing recently used files, use a #GtkRecentAction
as the action for a <menuitem>. To construct a menu toolbutton showing
the recently used files in the popup menu, use a #GtkRecentAction as the
action for a <toolitem> element.
#NAME: model
#PARENT: Gtk.TreeModelFilterVisibleFunc.gboolean
#COMMENT: the child model of the #GtkTreeModelFilter
#NAME: accelerator_mods
#PARENT: Gtk.accelerator_name_with_keycode.utf8
#COMMENT: accelerator modifier mask
#NAME: get_request_mode
#PARENT: Gtk.CellRenderer.get_request_mode
#COMMENT: The #GtkSizeRequestMode preferred by this renderer.
#NAME: yalign
#PARENT: Gtk.Alignment.set.none
#COMMENT: the vertical alignment of the child widget, from 0 (top) to 1
 (bottom).
#NAME: color-set
#PARENT: Gtk.ColorButton
#COMMENT: The ::color-set signal is emitted when the user selects a color.
When handling this signal, use gtk_color_button_get_rgba() to
find out which color was just selected.

Note that this signal is only emitted when the user
changes the color. If you need to react to programmatic color changes
as well, use the notify::color signal.
#NAME: pack_end
#PARENT: Gtk.CellLayout
#COMMENT: Adds the @cell to the end of @cell_layout. If @expand is %FALSE, then the
@cell is allocated no more space than it needs. Any unused space is
divided evenly between cells for which @expand is %TRUE.

Note that reusing the same cell renderer is not supported.
#NAME: n_targets
#PARENT: Gtk.Clipboard.wait_for_targets.gboolean
#COMMENT: location to store number of items in @targets.
#NAME: show-size
#PARENT: Gtk.FontButton
#COMMENT: If this property is set to %TRUE, the selected font size will be shown
in the label. For a more WYSIWYG way to show the selected size, see the
::use-size property.
#NAME: cell
#PARENT: Gtk.CellRenderer.get_preferred_width_for_height.none
#COMMENT: a #GtkCellRenderer instance
#NAME: visual_positions
#PARENT: Gtk.MovementStep
#COMMENT: Move left or right by graphemes
#NAME: chooser
#PARENT: Gtk.RecentChooser.set_filter.none
#COMMENT: a #GtkRecentChooser
#NAME: item
#PARENT: Gtk.ToolItemGroup.set_item_position.none
#COMMENT: the #GtkToolItem to move to a new position, should
    be a child of @group.
#NAME: builder
#PARENT: Gtk.Builder.get_application.Application
#COMMENT: a #GtkBuilder
#NAME: adjustment
#PARENT: Gtk.SpinButton.configure.none
#COMMENT: a #GtkAdjustment
#NAME: writable
#PARENT: Gtk.TargetList.add_image_targets.none
#COMMENT: whether to add only targets for which GTK+ knows
  how to convert a pixbuf into the format
#NAME: get_visible_rect
#PARENT: Gtk.TreeView
#COMMENT: Fills @visible_rect with the currently-visible region of the
buffer, in tree coordinates. Convert to bin_window coordinates with
gtk_tree_view_convert_tree_to_bin_window_coords().
Tree coordinates start at 0,0 for row 0 of the tree, and cover the entire
scrollable area of the tree.
#NAME: queue_compute_expand
#PARENT: Gtk.Widget
#COMMENT: Mark @widget as needing to recompute its expand flags. Call
this function when setting legacy expand child properties
on the child of a container.

See gtk_widget_compute_expand().
#NAME: get_text
#PARENT: Gtk.Entry
#COMMENT: Retrieves the contents of the entry widget.
See also gtk_editable_get_chars().

This is equivalent to:

|[<!-- language="C" -->
GtkEntryBuffer *buffer;
buffer = gtk_entry_get_buffer (entry);
gtk_entry_buffer_get_text (buffer);
]|
#NAME: gesture
#PARENT: Gtk.GestureSingle.get_button.guint
#COMMENT: a #GtkGestureSingle
#NAME: response_id
#PARENT: Gtk.Dialog.set_default_response.none
#COMMENT: a response ID
#NAME: set_resizable
#PARENT: Gtk.Window
#COMMENT: Sets whether the user can resize a window. Windows are user resizable
by default.
#NAME: icon_pos
#PARENT: Gtk.Entry.get_icon_storage_type.ImageType
#COMMENT: Icon position
#NAME: color_name
#PARENT: Gtk.StyleContext.lookup_color.gboolean
#COMMENT: color name to lookup
#NAME: tree_view
#PARENT: Gtk.TreeView.get_dest_row_at_pos.gboolean
#COMMENT: a #GtkTreeView
#NAME: new
#PARENT: Gtk.ComboBox
#COMMENT: Creates a new empty #GtkComboBox.
#NAME: day
#PARENT: Gtk.Calendar
#COMMENT: The selected day (as a number between 1 and 31, or 0
to unselect the currently selected day).
This property gets initially set to the current day.
#NAME: chooser
#PARENT: Gtk.FileChooser.get_use_preview_label.gboolean
#COMMENT: a #GtkFileChooser
#NAME: widget
#PARENT: Gtk.CellRenderer.get_preferred_height_for_width.none
#COMMENT: the #GtkWidget this cell will be rendering to
#NAME: get_child_pack_direction
#PARENT: Gtk.MenuBar.get_child_pack_direction
#COMMENT: the child pack direction
#NAME: new
#PARENT: Gtk.TargetList.new
#COMMENT: the new #GtkTargetList.
#NAME: builder
#PARENT: Gtk.Builder.add_from_file.guint
#COMMENT: a #GtkBuilder
#NAME: width
#PARENT: Gtk.Layout.set_size.none
#COMMENT: width of entire scrollable area
#NAME: region_id
#PARENT: Gtk.StyleContext.push_animatable_region.none
#COMMENT: unique identifier for the animatable region
#NAME: x
#PARENT: Gtk.GestureMultiPress.pressed.none
#COMMENT: The X coordinate, in widget allocation coordinates
#NAME: natural
#PARENT: Gtk.ScrollablePolicy
#COMMENT: Scrollable adjustments are based on the natural size
#NAME: override_font
#PARENT: Gtk.Widget
#COMMENT: Sets the font to use for a widget. All other style values are
left untouched. See gtk_widget_override_color().
#NAME: y
#PARENT: Gtk.GestureMultiPress.pressed.none
#COMMENT: The Y coordinate, in widget allocation coordinates
#NAME: path
#PARENT: Gtk.IconView.set_cursor.none
#COMMENT: A #GtkTreePath
#NAME: is_ipp
#PARENT: Gtk.PaperSize.is_ipp
#COMMENT: whether @size is not an IPP custom paper size.
#NAME: get_fill_level
#PARENT: Gtk.Range
#COMMENT: Gets the current position of the fill level indicator.
#NAME: STYLE_PROVIDER_PRIORITY_USER
#PARENT: Gtk
#COMMENT: The priority used for the style information from
`~/.gtk-3.0.css`.

You should not use priorities higher than this, to
give the user the last word.
#NAME: 
#PARENT: Gtk.MessageDialog.format_secondary_text.none...
#COMMENT: arguments for @message_format
#NAME: buffer
#PARENT: Gtk.UIManager.add_ui_from_string.guint
#COMMENT: the string to parse
#NAME: combo_box
#PARENT: Gtk.ComboBoxText.prepend_text.none
#COMMENT: A #GtkComboBox
#NAME: alpha
#PARENT: Gtk.ColorButton.set_alpha.none
#COMMENT: an integer between 0 and 65535
#NAME: settings
#PARENT: Gtk.PrintSettings.get_paper_height.gdouble
#COMMENT: a #GtkPrintSettings
#NAME: get_quality
#PARENT: Gtk.PrintSettings.get_quality
#COMMENT: the print quality
#NAME: get_value
#PARENT: Gtk.ScaleButton.get_value
#COMMENT: current value of the scale button
#NAME: natural_height
#PARENT: Gtk.Widget.get_preferred_height_for_width.none
#COMMENT: location for storing the natural height, or %NULL
#NAME: accel_path
#PARENT: Gtk.AccelGroup.connect_by_path.none
#COMMENT: path used for determining key and modifiers
#NAME: chooser
#PARENT: Gtk.RecentChooser.unselect_all.none
#COMMENT: a #GtkRecentChooser
#NAME: accelerator_get_label_with_keycode
#PARENT: Gtk
#COMMENT: Converts an accelerator keyval and modifier mask
into a (possibly translated) string that can be displayed to
a user, similarly to gtk_accelerator_get_label(), but handling
keycodes.

This is only useful for system-level components, applications
should use gtk_accelerator_parse() instead.
#NAME: context_id
#PARENT: Gtk.Statusbar.text-popped.none
#COMMENT: the context id of the relevant message/statusbar
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.add_attribute.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: render_layout
#PARENT: Gtk
#COMMENT: Renders @layout on the coordinates @x, @y
#NAME: widget
#PARENT: Gtk.test_widget_click.gboolean
#COMMENT: Widget to generate a button click on.
#NAME: entry
#PARENT: Gtk.Entry.get_icon_activatable.gboolean
#COMMENT: a #GtkEntry
#NAME: action_group
#PARENT: Gtk.ActionGroup.set_accel_group.none
#COMMENT: a #GtkActionGroup
#NAME: new
#PARENT: Gtk.SeparatorToolItem
#COMMENT: Create a new #GtkSeparatorToolItem
#NAME: file_name
#PARENT: Gtk.PrintSettings.load_file.gboolean
#COMMENT: the filename to read the settings from
#NAME: new
#PARENT: Gtk.CellRendererAccel.new
#COMMENT: the new cell renderer
#NAME: get_model
#PARENT: Gtk.TreeView.get_model
#COMMENT: A #GtkTreeModel, or %NULL if
none is currently being used.
#NAME: show_preview_entry
#PARENT: Gtk.FontChooser.set_show_preview_entry.none
#COMMENT: whether to show the editable preview entry or not
#NAME: color-changed
#PARENT: Gtk.ColorSelection
#COMMENT: This signal is emitted when the color changes in the #GtkColorSelection
according to its update policy.
#NAME: STOCK_FILE
#PARENT: Gtk
#COMMENT: The “File” item and icon.

Since 3.0, this item has a label, before it only had an icon.
#NAME: create_context
#PARENT: Gtk.CellArea
#COMMENT: Creates a #GtkCellAreaContext to be used with @area for
all purposes. #GtkCellAreaContext stores geometry information
for rows for which it was operated on, it is important to use
the same context for the same row of data at all times (i.e.
one should render and handle events with the same #GtkCellAreaContext
which was used to request the size of those rows of data).
#NAME: func
#PARENT: Gtk.TreeModelFilter.set_visible_func.none
#COMMENT: A #GtkTreeModelFilterVisibleFunc, the visible function
#NAME: get_columns
#PARENT: Gtk.TreeView
#COMMENT: Returns a #GList of all the #GtkTreeViewColumn s currently in @tree_view.
The returned list must be freed with g_list_free ().
#NAME: range
#PARENT: Gtk.Range.set_lower_stepper_sensitivity.none
#COMMENT: a #GtkRange
#NAME: xpos
#PARENT: Gtk.TextView.add_child_in_window.none
#COMMENT: X position of child in window coordinates
#NAME: has_default
#PARENT: Gtk.Widget
#COMMENT: Determines whether @widget is the current default widget within its
toplevel. See gtk_widget_set_can_default().
#NAME: filter_info
#PARENT: Gtk.FileFilterFunc.gboolean
#COMMENT: a #GtkFileFilterInfo that is filled according
  to the @needed flags passed to gtk_file_filter_add_custom()
#NAME: binding
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: visible
#PARENT: Gtk.TreeViewColumn.set_visible.none
#COMMENT: %TRUE if the @tree_column is visible.
#NAME: parent
#PARENT: Gtk.print_run_page_setup_dialog.PageSetup
#COMMENT: transient parent
#NAME: context
#PARENT: Gtk.IMContext.set_cursor_location.none
#COMMENT: a #GtkIMContext
#NAME: args
#PARENT: Gtk.StyleProperties.get_valist.none
#COMMENT: va_list of property name/return location pairs, followed by %NULL
#NAME: widget
#PARENT: Gtk.WidgetClass.hide.hide.none
#COMMENT: a #GtkWidget
#NAME: application
#PARENT: Gtk.Application.get_menubar.Gio.MenuModel
#COMMENT: a #GtkApplication
#NAME: label
#PARENT: Gtk.Label.set_width_chars.none
#COMMENT: a #GtkLabel
#NAME: fontsel
#PARENT: Gtk.FontSelection.get_size.gint
#COMMENT: a #GtkFontSelection
#NAME: new
#PARENT: Gtk.Arrow.new
#COMMENT: the new #GtkArrow widget.
#NAME: op
#PARENT: Gtk.PrintOperation.set_show_progress.none
#COMMENT: a #GtkPrintOperation
#NAME: get_accel_path
#PARENT: Gtk.Action
#COMMENT: Returns the accel path for this action.
#NAME: keyval
#PARENT: Gtk.BindingEntry
#COMMENT: key value to match
#NAME: get_tab_hborder
#PARENT: Gtk.Notebook
#COMMENT: Returns the horizontal width of a tab border.
#NAME: widget
#PARENT: Gtk.Widget.queue_resize.none
#COMMENT: a #GtkWidget
#NAME: cr
#PARENT: Gtk.render_frame_gap.none
#COMMENT: a #cairo_t
#NAME: source
#PARENT: Gtk.IconSource.get_icon_name.utf8
#COMMENT: a #GtkIconSource
#NAME: new
#PARENT: Gtk.Paned.new
#COMMENT: a new #GtkPaned.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_tooltip_markup.none
#COMMENT: a #GtkStatusIcon
#NAME: context
#PARENT: Gtk.drag_set_icon_pixbuf.none
#COMMENT: the context for a drag (This must be called
           with a  context for the source side of a drag)
#NAME: new
#PARENT: Gtk.ActionBar
#COMMENT: Creates a new #GtkActionBar widget.
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: a #GtkSelectionData
#NAME: widget
#PARENT: Gtk.Widget.freeze_child_notify.none
#COMMENT: a #GtkWidget
#NAME: set_background
#PARENT: Gtk.StyleContext
#COMMENT: Sets the background of @window to the background pattern or
color specified in @context for its current state.
#NAME: index_
#PARENT: Gtk.Toolbar.set_drop_highlight_item.none
#COMMENT: a position on @toolbar
#NAME: backward_visible_line
#PARENT: Gtk.TextIter
#COMMENT: Moves @iter to the start of the previous visible line. Returns %TRUE if
@iter could be moved; i.e. if @iter was at character offset 0, this
function returns %FALSE. Therefore if @iter was already on line 0,
but not at the start of the line, @iter is snapped to the start of
the line and the function returns %TRUE. (Note that this implies that
in a loop calling this function, the line number may not change on
every iteration, if your first iteration is on line 0.)
#NAME: secondary-icon-stock
#PARENT: Gtk.Entry
#COMMENT: The stock id to use for the secondary icon for the entry.
#NAME: position
#PARENT: Gtk.Paned.set_position.none
#COMMENT: pixel position of divider, a negative value means that the position
           is unset.
#NAME: ranges
#PARENT: Gtk.PrintPages
#COMMENT: Range of pages.
#NAME: new
#PARENT: Gtk.Style.new
#COMMENT: a new #GtkStyle.
#NAME: new
#PARENT: Gtk.ApplicationWindow.new
#COMMENT: a newly created #GtkApplicationWindow
#NAME: get_label
#PARENT: Gtk.Button.get_label
#COMMENT: The text of the label widget. This string is owned
by the widget and must not be modified or freed.
#NAME: context
#PARENT: Gtk.CellArea.copy_context.CellAreaContext
#COMMENT: the #GtkCellAreaContext to copy
#NAME: get_deserialize_formats
#PARENT: Gtk.TextBuffer
#COMMENT: This function returns the rich text deserialize formats registered
with @buffer using gtk_text_buffer_register_deserialize_format() or
gtk_text_buffer_register_deserialize_tagset()
#NAME: add_ui_from_string
#PARENT: Gtk.UIManager
#COMMENT: Parses a string containing a [UI definition][XML-UI] and merges it with
the current contents of @manager. An enclosing <ui> element is added if
it is missing.
#NAME: location
#PARENT: Gtk.draw_insertion_cursor.none
#COMMENT: location where to draw the cursor (@location->width is ignored)
#NAME: override_location
#PARENT: Gtk.TextBuffer.paste_clipboard.none
#COMMENT: location to insert pasted text, or %NULL
#NAME: ClipboardClearFunc
#PARENT: Gtk
#COMMENT: A function that will be called when the contents of the clipboard are changed
or cleared. Once this has called, the @user_data_or_owner argument
will not be used again.
#NAME: style
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: device
#PARENT: Gtk.WindowGroup.get_current_device_grab.Widget
#COMMENT: a #GdkDevice
#NAME: drag_source_set_target_list
#PARENT: Gtk.Widget
#COMMENT: Changes the target types that this widget offers for drag-and-drop.
The widget must first be made into a drag source with
gtk_drag_source_set().
#NAME: EventSequenceState
#PARENT: Gtk
#COMMENT: Describes the state of a #GdkEventSequence in a #GtkGesture.
#NAME: get_current_folder
#PARENT: Gtk.FileChooser
#COMMENT: Gets the current folder of @chooser as a local filename.
See gtk_file_chooser_set_current_folder().

Note that this is the folder that the file chooser is currently displaying
(e.g. "/home/username/Documents"), which is not the same
as the currently-selected folder if the chooser is in
%GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER mode
(e.g. "/home/username/Documents/selected-folder/".  To get the
currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the
usual way to get the selection.
#NAME: icon_view
#PARENT: Gtk.IconView.set_text_column.none
#COMMENT: A #GtkIconView.
#NAME: model
#PARENT: Gtk.ListBox.bind_model.none
#COMMENT: the #GListModel to be bound to @box
#NAME: settings
#PARENT: Gtk.PrintSettings.get_reverse.gboolean
#COMMENT: a #GtkPrintSettings
#NAME: max
#PARENT: Gtk.Range.set_range.none
#COMMENT: maximum range value
#NAME: end
#PARENT: Gtk.ArrowPlacement
#COMMENT: Place both arrows at the bottom of the menu.
#NAME: buttons
#PARENT: Gtk.MessageDialog.new.Widget
#COMMENT: set of buttons to use
#NAME: str
#PARENT: Gtk.IMContext.get_preedit_string.none
#COMMENT: location to store the retrieved
             string. The string retrieved must be freed with g_free().
#NAME: iter
#PARENT: Gtk.TextIter.forward_line.gboolean
#COMMENT: an iterator
#NAME: get_tags
#PARENT: Gtk.TextIter.get_tags
#COMMENT: list of #GtkTextTag
#NAME: chooser
#PARENT: Gtk.FileChooser.list_shortcut_folders.filename
#COMMENT: a #GtkFileChooser
#NAME: user_data
#PARENT: Gtk.ListBox.set_filter_func.none
#COMMENT: user data passed to @filter_func
#NAME: unit
#PARENT: Gtk.PrintSettings.get_paper_width.gdouble
#COMMENT: the unit for the return value
#NAME: widget
#PARENT: Gtk.CellRenderer.render.none
#COMMENT: the widget owning @window
#NAME: get_orientation
#PARENT: Gtk.GesturePan.get_orientation
#COMMENT: the expected orientation for pan gestures
#NAME: width
#PARENT: Gtk.CellAreaContextClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: a proposed width for allocation
#NAME: set_response_sensitive
#PARENT: Gtk.InfoBar
#COMMENT: Calls gtk_widget_set_sensitive (widget, setting) for each
widget in the info bars’s action area with the given response_id.
A convenient way to sensitize/desensitize dialog buttons.
#NAME: pixels_above_lines
#PARENT: Gtk.TextAttributes
#COMMENT: Pixels of blank space above paragraphs.
#NAME: grow_only
#PARENT: Gtk.TreeViewColumnSizing
#COMMENT: Columns only get bigger in reaction to changes in the model
#NAME: render_icon
#PARENT: Gtk.Widget.render_icon
#COMMENT: a new pixbuf, or %NULL if the
    stock ID wasn’t known
#NAME: get_uris
#PARENT: Gtk.SelectionData.get_uris
#COMMENT: if
  the selection data contains a list of
  URIs, a newly allocated %NULL-terminated string array
  containing the URIs, otherwise %NULL. If the result is
  non-%NULL it must be freed with g_strfreev().
#NAME: iter
#PARENT: Gtk.TreeModel.row_changed.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the changed row
#NAME: test_widget_wait_for_draw
#PARENT: Gtk
#COMMENT: Enters the main loop and waits for @widget to be “drawn”. In this
context that means it waits for the frame clock of @widget to have
run a full styling, layout and drawing cycle.

This function is intended to be used for syncing with actions that
depend on @widget relayouting or on interaction with the display
server.
#NAME: insert_column
#PARENT: Gtk.Grid
#COMMENT: Inserts a column at the specified position.

Children which are attached at or to the right of this position
are moved one column to the right. Children which span across this
position are grown to span the new column.
#NAME: new
#PARENT: Gtk.FontButton.new
#COMMENT: a new font picker widget.
#NAME: socket_
#PARENT: Gtk.Socket.get_plug_window.Gdk.Window
#COMMENT: a #GtkSocket.
#NAME: button
#PARENT: Gtk.ScaleButton.set_icons.none
#COMMENT: a #GtkScaleButton
#NAME: cursor_index
#PARENT: Gtk.IMContext.set_surrounding.none
#COMMENT: the byte index of the insertion cursor within @text.
#NAME: set_name
#PARENT: Gtk.Buildable
#COMMENT: Sets the name of the @buildable object.
#NAME: modified-changed
#PARENT: Gtk.TextBuffer
#COMMENT: The ::modified-changed signal is emitted when the modified bit of a
#GtkTextBuffer flips.

See also:
gtk_text_buffer_set_modified().
#NAME: name
#PARENT: Gtk.BuildableIface.construct_child.construct_child.GObject.Object
#COMMENT: name of child to construct
#NAME: get_show_close_button
#PARENT: Gtk.InfoBar
#COMMENT: Returns whether the widget will display a standard close button.
#NAME: rtl
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: flags
#PARENT: Gtk.TargetEntry
#COMMENT: #GtkTargetFlags for DND
#NAME: register_serialize_format
#PARENT: Gtk.TextBuffer.register_serialize_format
#COMMENT: the #GdkAtom that corresponds to the
              newly registered format’s mime-type.
#NAME: iter
#PARENT: Gtk.TextIter.inside_sentence.gboolean
#COMMENT: a #GtkTextIter
#NAME: widget
#PARENT: Gtk.Widget.get_screen.Gdk.Screen
#COMMENT: a #GtkWidget
#NAME: get_frame_clock
#PARENT: Gtk.Widget
#COMMENT: Obtains the frame clock for a widget. The frame clock is a global
“ticker” that can be used to drive animations and repaints.  The
most common reason to get the frame clock is to call
gdk_frame_clock_get_frame_time(), in order to get a time to use for
animating. For example you might record the start of the animation
with an initial value from gdk_frame_clock_get_frame_time(), and
then update the animation by calling
gdk_frame_clock_get_frame_time() again during each repaint.

gdk_frame_clock_request_phase() will result in a new frame on the
clock, but won’t necessarily repaint any widgets. To repaint a
widget, you have to use gtk_widget_queue_draw() which invalidates
the widget (thus scheduling it to receive a draw on the next
frame). gtk_widget_queue_draw() will also end up requesting a frame
on the appropriate frame clock.

A widget’s frame clock will not change while the widget is
mapped. Reparenting a widget (which implies a temporary unmap) can
change the widget’s frame clock.

Unrealized widgets do not have a frame clock.
#NAME: natural_height
#PARENT: Gtk.WidgetClass.get_preferred_height_and_baseline_for_width.get_preferred_height_and_baseline_for_width.none
#COMMENT: location for storing the natural height, or %NULL
#NAME: widget
#PARENT: Gtk.CellRenderer.get_preferred_height.none
#COMMENT: the #GtkWidget this cell will be rendering to
#NAME: visible-overflown
#PARENT: Gtk.Action
#COMMENT: When %TRUE, toolitem proxies for this action are represented in the
toolbar overflow menu.
#NAME: populate-popup
#PARENT: Gtk.PlacesSidebar
#COMMENT: The places sidebar emits this signal when the user invokes a contextual
menu on one of its items.  In the signal handler, the application may
add extra items to the menu as appropriate.  For example, a file manager
may want to add a "Properties" command to the menu.

It is not necessary to store the @selected_item for each menu item;
during their GtkMenuItem::activate callbacks, the application can use
gtk_places_sidebar_get_location() to get the file to which the item
refers.

The @selected_item argument may be #NULL in case the selection refers to
a volume.  In this case, @selected_volume will be non-NULL.  In this case,
the calling application will have to g_object_ref() the @selected_volume and
keep it around for the purposes of its menu item's "activate" callback.

The @menu and all its menu items are destroyed after the user
dismisses the menu.  The menu is re-created (and thus, this signal is
emitted) every time the user activates the contextual menu.
#NAME: child
#PARENT: Gtk.Container.child_get.none
#COMMENT: a widget which is a child of @container
#NAME: button
#PARENT: Gtk.ColorButton.get_title.utf8
#COMMENT: a #GtkColorButton
#NAME: parent_class
#PARENT: Gtk.AssistantClass
#COMMENT: The parent class.
#NAME: unit
#PARENT: Gtk.PaperSize.get_default_top_margin.gdouble
#COMMENT: the unit for the return value, not %GTK_UNIT_NONE
#NAME: info
#PARENT: Gtk.TargetList.add_text_targets.none
#COMMENT: an ID that will be passed back to the application
#NAME: color
#PARENT: Gtk.ColorButton.set_color.none
#COMMENT: A #GdkColor to set the current color with
#NAME: ListBoxForeachFunc
#PARENT: Gtk
#COMMENT: A function used by gtk_list_box_selected_foreach().
It will be called on every selected child of the @box.
#NAME: get_screen
#PARENT: Gtk.StatusIcon.get_screen
#COMMENT: a #GdkScreen.
#NAME: get_proxy_menu_item
#PARENT: Gtk.ToolItem.get_proxy_menu_item
#COMMENT: The #GtkMenuItem passed to
    gtk_tool_item_set_proxy_menu_item(), if the @menu_item_ids
    match.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_printer.none
#COMMENT: a #GtkPrintSettings
#NAME: row-inserted
#PARENT: Gtk.TreeModel
#COMMENT: This signal is emitted when a new row has been inserted in
the model.

Note that the row may still be empty at this point, since
it is a common pattern to first insert an empty row, and
then fill it with the desired values.
#NAME: default_editable
#PARENT: Gtk.TextBuffer.insert_interactive_at_cursor.gboolean
#COMMENT: default editability of buffer
#NAME: x
#PARENT: Gtk.Widget.drag_begin_with_coordinates.Gdk.DragContext
#COMMENT: The initial x coordinate to start dragging from, in the coordinate space
   of @widget. If -1 is passed, the coordinates are retrieved from @event or
   the current pointer position
#NAME: InputPurpose
#PARENT: Gtk
#COMMENT: Describes primary purpose of the input widget. This information is
useful for on-screen keyboards and similar input methods to decide
which keys should be presented to the user.

Note that the purpose is not meant to impose a totally strict rule
about allowed characters, and does not replace input validation.
It is fine for an on-screen keyboard to let the user override the
character set restriction that is expressed by the purpose. The
application is expected to validate the entry contents, even if
it specified a purpose.

The difference between @GTK_INPUT_PURPOSE_DIGITS and
@GTK_INPUT_PURPOSE_NUMBER is that the former accepts only digits
while the latter also some punctuation (like commas or points, plus,
minus) and “e” or “E” as in 3.14E+000.

This enumeration may be extended in the future; input methods should
interpret unknown values as “free form”.
#NAME: chooser
#PARENT: Gtk.RecentChooserIface.select_uri.select_uri.gboolean
#COMMENT: a #GtkRecentChooser
#NAME: add_titled
#PARENT: Gtk.Stack
#COMMENT: Adds a child to @stack.
The child is identified by the @name. The @title
will be used by #GtkStackSwitcher to represent
@child in a tab bar, so it should be short.
#NAME: get_bytes_in_line
#PARENT: Gtk.TextIter.get_bytes_in_line
#COMMENT: number of bytes in the line
#NAME: y
#PARENT: Gtk.Widget.drag_begin_with_coordinates.Gdk.DragContext
#COMMENT: The initial y coordinate to start dragging from, in the coordinate space
   of @widget. If -1 is passed, the coordinates are retrieved from @event or
   the current pointer position
#NAME: show_week_numbers
#PARENT: Gtk.CalendarDisplayOptions
#COMMENT: Displays each week numbers of the current year, down the
left side of the calendar.
#NAME: sorted_path
#PARENT: Gtk.TreeModelSort.convert_path_to_child_path.TreePath
#COMMENT: A #GtkTreePath to convert
#NAME: tooltip
#PARENT: Gtk.Entry.set_icon_tooltip_markup.none
#COMMENT: the contents of the tooltip for the icon, or %NULL
#NAME: white
#PARENT: Gtk.Style
#COMMENT: #GdkColor to use for white
#NAME: natural_width
#PARENT: Gtk.CellAreaContext.get_preferred_width_for_height.none
#COMMENT: location to store the natural width,
    or %NULL
#NAME: self
#PARENT: Gtk.AppChooser.get_app_info.Gio.AppInfo
#COMMENT: a #GtkAppChooser
#NAME: x
#PARENT: Gtk.GestureMultiPress.released.none
#COMMENT: The X coordinate, in widget allocation coordinates
#NAME: data_destroy
#PARENT: Gtk.RecentChooser.set_sort_func.none
#COMMENT: destroy notifier for @sort_data, or %NULL
#NAME: list
#PARENT: Gtk.TargetList.add_image_targets.none
#COMMENT: a #GtkTargetList
#NAME: y
#PARENT: Gtk.GestureMultiPress.released.none
#COMMENT: The Y coordinate, in widget allocation coordinates
#NAME: set_default_icon_list
#PARENT: Gtk.Window
#COMMENT: Sets an icon list to be used as fallback for windows that haven't
had gtk_window_set_icon_list() called on them to set up a
window-specific icon list. This function allows you to set up the
icon for all windows in your app at once.

See gtk_window_set_icon_list() for more details.
#NAME: test_create_widget
#PARENT: Gtk
#COMMENT: This function wraps g_object_new() for widget types.
It’ll automatically show all created non window widgets, also
g_object_ref_sink() them (to keep them alive across a running test)
and set them up for destruction during the next test teardown phase.
#NAME: new
#PARENT: Gtk.ColorSelectionDialog
#COMMENT: Creates a new #GtkColorSelectionDialog.
#NAME: width
#PARENT: Gtk.CellRendererClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: the size which is available for allocation
#NAME: child-attached
#PARENT: Gtk.HandleBox
#COMMENT: This signal is emitted when the contents of the
handlebox are reattached to the main window.
#NAME: get_title
#PARENT: Gtk.Window.get_title
#COMMENT: the title of the window, or %NULL if none has
   been set explicitly. The returned string is owned by the widget
   and must not be modified or freed.
#NAME: container
#PARENT: Gtk.Container.resize_children.none
#COMMENT: a #GtkContainer
#NAME: setup
#PARENT: Gtk.PageSetup.set_right_margin.none
#COMMENT: a #GtkPageSetup
#NAME: cell_set
#PARENT: Gtk.CellArea
#COMMENT: Sets one or more cell properties for @cell in @area.
#NAME: flags
#PARENT: Gtk.IconTheme.lookup_by_gicon.IconInfo
#COMMENT: flags modifying the behavior of the icon lookup
#NAME: get_line_index
#PARENT: Gtk.TextIter
#COMMENT: Returns the byte index of the iterator, counting
from the start of a newline-terminated line.
Remember that #GtkTextBuffer encodes text in
UTF-8, and that characters can require a variable
number of bytes to represent.
#NAME: role
#PARENT: Gtk.WidgetClass.set_accessible_role.none
#COMMENT: The role to use for accessibles created for @widget_class
#NAME: new
#PARENT: Gtk.RadioMenuItem.new
#COMMENT: a new #GtkRadioMenuItem
#NAME: image
#PARENT: Gtk.Button
#COMMENT: The child widget to appear next to the button text.
#NAME: set_focus_vadjustment
#PARENT: Gtk.Container
#COMMENT: Hooks up an adjustment to focus handling in a container, so when a
child of the container is focused, the adjustment is scrolled to
show that widget. This function sets the vertical alignment. See
gtk_scrolled_window_get_vadjustment() for a typical way of obtaining
the adjustment and gtk_container_set_focus_hadjustment() for setting
the horizontal adjustment.

The adjustments have to be in pixel units and in the same coordinate
system as the allocation for immediate children of the container.
#NAME: gradient
#PARENT: Gtk.Gradient.add_color_stop.none
#COMMENT: a #GtkGradient
#NAME: VBox
#PARENT: Gtk
#COMMENT: A #GtkVBox is a container that organizes child widgets into a single column.

Use the #GtkBox packing interface to determine the arrangement,
spacing, height, and alignment of #GtkVBox children.

All children are allocated the same width.

GtkVBox has been deprecated. You can use #GtkBox instead, which is a
very quick and easy change. If you have derived your own classes from
GtkVBox, you can simply change the inheritance to derive directly
from #GtkBox, and set the #GtkOrientable:orientation property to
%GTK_ORIENTATION_VERTICAL in your instance init function, with a
call like:
|[<!-- language="C" -->
  gtk_orientable_set_orientation (GTK_ORIENTABLE (object),
                                  GTK_ORIENTATION_VERTICAL);
]|
If you don’t need first-child or last-child styling and want your code
to be future-proof, the recommendation is to switch to #GtkGrid instead
of nested boxes. For more information about migrating to #GtkGrid,
see [Migrating from other containers to GtkGrid][gtk-migrating-GtkGrid].
#NAME: new_with_mnemonic
#PARENT: Gtk.CheckMenuItem.new_with_mnemonic
#COMMENT: a new #GtkCheckMenuItem
#NAME: menu_model
#PARENT: Gtk.MenuButton.set_menu_model.none
#COMMENT: a #GMenuModel
#NAME: get_has_resize_grip
#PARENT: Gtk.Window
#COMMENT: Determines whether the window may have a resize grip.
#NAME: detailed_action_name
#PARENT: Gtk.Application.set_accels_for_action.none
#COMMENT: a detailed action name, specifying an action
    and target to associate accelerators with
#NAME: set_right_justified
#PARENT: Gtk.MenuItem
#COMMENT: Sets whether the menu item appears justified at the right
side of a menu bar. This was traditionally done for “Help”
menu items, but is now considered a bad idea. (If the widget
layout is reversed for a right-to-left language like Hebrew
or Arabic, right-justified-menu-items appear at the left.)
#NAME: forward_char
#PARENT: Gtk.TextIter
#COMMENT: Moves @iter forward by one character offset. Note that images
embedded in the buffer occupy 1 character slot, so
gtk_text_iter_forward_char() may actually move onto an image instead
of a character, if you have images in your buffer.  If @iter is the
end iterator or one character before it, @iter will now point at
the end iterator, and gtk_text_iter_forward_char() returns %FALSE for
convenience when writing loops.
#NAME: gstring
#PARENT: Gtk.RcProperty.parse_color.gboolean
#COMMENT: the #GString to be parsed
#NAME: get_select_function
#PARENT: Gtk.TreeSelection
#COMMENT: Returns the current selection function.
#NAME: keyval
#PARENT: Gtk.binding_entry_add_signall.none
#COMMENT: key value
#NAME: row
#PARENT: Gtk.ListBoxRow.set_selectable.none
#COMMENT: a #GTkListBoxrow
#NAME: get_entry
#PARENT: Gtk.EntryCompletion.get_entry
#COMMENT: The entry @completion has been attached to
#NAME: STYLE_CLASS_POPOVER
#PARENT: Gtk
#COMMENT: A CSS class that matches popovers. Used by #GtkPopover.
#NAME: label
#PARENT: Gtk.ToggleAction.new.ToggleAction
#COMMENT: The label displayed in menu items and on buttons,
        or %NULL
#NAME: pressed
#PARENT: Gtk.Button
#COMMENT: Emitted when the button is pressed.
#NAME: unit
#PARENT: Gtk.PaperSize.get_height.gdouble
#COMMENT: the unit for the return value, not %GTK_UNIT_NONE
#NAME: get_embedded
#PARENT: Gtk.Plug.get_embedded
#COMMENT: %TRUE if the plug is embedded in a socket
#NAME: entry
#PARENT: Gtk.Entry.get_icon_at_pos.gint
#COMMENT: a #GtkEntry
#NAME: STOCK_FIND
#PARENT: Gtk
#COMMENT: The “Find” item and icon.
#NAME: get_vadjustment
#PARENT: Gtk.Scrollable
#COMMENT: Retrieves the #GtkAdjustment used for vertical scrolling.
#NAME: get_visible
#PARENT: Gtk.Widget
#COMMENT: Determines whether the widget is visible. If you want to
take into account whether the widget’s parent is also marked as
visible, use gtk_widget_is_visible() instead.

This function does not check if the widget is obscured in any way.

See gtk_widget_set_visible().
#NAME: window
#PARENT: Gtk.Window.set_role.none
#COMMENT: a #GtkWindow
#NAME: ButtonsType
#PARENT: Gtk
#COMMENT: Prebuilt sets of buttons for the dialog. If
none of these choices are appropriate, simply use %GTK_BUTTONS_NONE
then call gtk_dialog_add_buttons().

> Please note that %GTK_BUTTONS_OK, %GTK_BUTTONS_YES_NO
> and %GTK_BUTTONS_OK_CANCEL are discouraged by the
> [GNOME Human Interface Guidelines](http://library.gnome.org/devel/hig-book/stable/).
#NAME: icon_info
#PARENT: Gtk.IconInfo.load_icon.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconInfo from gtk_icon_theme_lookup_icon()
#NAME: key_file
#PARENT: Gtk.PrintSettings.new_from_key_file.PrintSettings
#COMMENT: the #GKeyFile to retrieve the settings from
#NAME: text_view
#PARENT: Gtk.TextView.move_child.none
#COMMENT: a #GtkTextView
#NAME: get_default_left_margin
#PARENT: Gtk.PaperSize
#COMMENT: Gets the default left margin for the #GtkPaperSize.
#NAME: adjustment
#PARENT: Gtk.SpinButton.new.Widget
#COMMENT: the #GtkAdjustment object that this spin
    button should use, or %NULL
#NAME: lookup
#PARENT: Gtk.TextTagTable.lookup
#COMMENT: The tag, or %NULL if none by that name is in the table.
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.row_deleted.row_deleted.none
#COMMENT: a #GtkTreeModel
#NAME: set_sort_func
#PARENT: Gtk.TreeSortable
#COMMENT: Sets the comparison function used when sorting to be @sort_func. If the
current sort column id of @sortable is the same as @sort_column_id, then
the model will sort using this function.
#NAME: expand
#PARENT: Gtk.CellLayout.pack_end.none
#COMMENT: %TRUE if @cell is to be given extra space allocated to @cell_layout
#NAME: chooser
#PARENT: Gtk.FileChooser.set_show_hidden.none
#COMMENT: a #GtkFileChooser
#NAME: get_action_target_value
#PARENT: Gtk.Actionable.get_action_target_value
#COMMENT: the current target value
#NAME: angle_delta
#PARENT: Gtk.GestureRotate.angle-changed.none
#COMMENT: Difference with the starting angle, in radians
#NAME: get_display_options
#PARENT: Gtk.Calendar
#COMMENT: Returns the current display options of @calendar.
#NAME: accel_groups_activate
#PARENT: Gtk
#COMMENT: Finds the first accelerator in any #GtkAccelGroup attached
to @object that matches @accel_key and @accel_mods, and
activates that accelerator.
#NAME: n_targets
#PARENT: Gtk.Clipboard.set_with_owner.gboolean
#COMMENT: number of elements in @targets
#NAME: get_type_from_name
#PARENT: Gtk.BuilderClass.get_type_from_name.get_type_from_name
#COMMENT: the #GType found for @type_name or #G_TYPE_INVALID
  if no type was found
#NAME: get_pack_direction
#PARENT: Gtk.MenuBar
#COMMENT: Retrieves the current pack direction of the menubar.
See gtk_menu_bar_set_pack_direction().
#NAME: handle_event
#PARENT: Gtk.SearchBar.handle_event
#COMMENT: %GDK_EVENT_STOP if the key press event resulted
    in text being entered in the search entry (and revealing
    the search bar if necessary), %GDK_EVENT_PROPAGATE otherwise.
#NAME: widget
#PARENT: Gtk.Widget.set_hexpand.none
#COMMENT: the widget
#NAME: list_style_properties
#PARENT: Gtk.WidgetClass.list_style_properties
#COMMENT: a
    newly allocated array of #GParamSpec*. The array must be
    freed with g_free().
#NAME: length
#PARENT: Gtk.WidgetPath
#COMMENT: Returns the number of #GtkWidget #GTypes between the represented
widget and its topmost container.
#NAME: menu_shell
#PARENT: Gtk.MenuShell.get_take_focus.gboolean
#COMMENT: a #GtkMenuShell
#NAME: shell
#PARENT: Gtk.ToolShell.get_text_orientation.Orientation
#COMMENT: a #GtkToolShell
#NAME: get_n_items
#PARENT: Gtk.Toolbar
#COMMENT: Returns the number of items on the toolbar.
#NAME: property_id
#PARENT: Gtk.CellAreaClass.install_cell_property.none
#COMMENT: the id for the property
#NAME: response_id
#PARENT: Gtk.Dialog.set_response_sensitive.none
#COMMENT: a response ID
#NAME: start
#PARENT: Gtk.TextIter.get_visible_text.utf8
#COMMENT: iterator at start of range
#NAME: tree_model
#PARENT: Gtk.TreeModel.get_value.none
#COMMENT: a #GtkTreeModel
#NAME: fixed-height-mode
#PARENT: Gtk.TreeView
#COMMENT: Setting the ::fixed-height-mode property to %TRUE speeds up
#GtkTreeView by assuming that all rows have the same height.
Only enable this option if all rows are the same height.
Please see gtk_tree_view_set_fixed_height_mode() for more
information on this option.
#NAME: parent
#PARENT: Gtk.FontChooserDialog.new.Widget
#COMMENT: Transient parent of the dialog, or %NULL
#NAME: container
#PARENT: Gtk.ContainerClass.set_focus_child.set_focus_child.none
#COMMENT: a #GtkContainer
#NAME: entry
#PARENT: Gtk.Entry.get_layout_offsets.none
#COMMENT: a #GtkEntry
#NAME: set_value
#PARENT: Gtk.LevelBar
#COMMENT: Sets the value of the #GtkLevelBar:value property.
#NAME: icon_theme
#PARENT: Gtk.IconTheme.load_surface.cairo.Surface
#COMMENT: a #GtkIconTheme
#NAME: set_max_value
#PARENT: Gtk.LevelBar
#COMMENT: Sets the value of the #GtkLevelBar:max-value property.
#NAME: get_resize_grip_area
#PARENT: Gtk.Window
#COMMENT: If a window has a resize grip, this will retrieve the grip
position, width and height into the specified #GdkRectangle.
#NAME: insert_before
#PARENT: Gtk.ListStore
#COMMENT: Inserts a new row before @sibling. If @sibling is %NULL, then the row will
be appended to the end of the list. @iter will be changed to point to this
new row. The row will be empty after this function is called. To fill in
values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
#NAME: right_margin
#PARENT: Gtk.TextView.set_right_margin.none
#COMMENT: right margin in pixels
#NAME: a
#PARENT: Gtk.TreePath.compare.gint
#COMMENT: a #GtkTreePath-struct
#NAME: accel_flags
#PARENT: Gtk.AccelKey
#COMMENT: The accelerator flags
#NAME: b
#PARENT: Gtk.TreePath.compare.gint
#COMMENT: a #GtkTreePath-struct to compare with
#NAME: child
#PARENT: Gtk.Notebook.set_tab_label_text.none
#COMMENT: the page
#NAME: new
#PARENT: Gtk.Table
#COMMENT: Used to create a new table widget. An initial size must be given by
specifying how many rows and columns the table should have, although
this can be changed later with gtk_table_resize().  @rows and @columns
must both be in the range 1 .. 65535. For historical reasons, 0 is accepted
as well and is silently interpreted as 1.
#NAME: path
#PARENT: Gtk.WidgetPath.append_type.gint
#COMMENT: a #GtkWidgetPath
#NAME: new
#PARENT: Gtk.Fixed.new
#COMMENT: a new #GtkFixed.
#NAME: filter
#PARENT: Gtk.FileFilter.set_name.none
#COMMENT: a #GtkFileFilter
#NAME: get_width_chars
#PARENT: Gtk.Label
#COMMENT: Retrieves the desired width of @label, in characters. See
gtk_label_set_width_chars().
#NAME: position
#PARENT: Gtk.ListBox.insert.none
#COMMENT: the position to insert @child in
#NAME: button
#PARENT: Gtk.ToolButton.get_icon_name.utf8
#COMMENT: a #GtkToolButton
#NAME: insert_action_group
#PARENT: Gtk.Widget
#COMMENT: Inserts @group into @widget. Children of @widget that implement
#GtkActionable can then be associated with actions in @group by
setting their “action-name” to
@prefix.`action-name`.

If @group is %NULL, a previously inserted group for @name is removed
from @widget.
#NAME: delete_surrounding
#PARENT: Gtk.IMContext
#COMMENT: Asks the widget that the input context is attached to to delete
characters around the cursor position by emitting the
GtkIMContext::delete_surrounding signal. Note that @offset and @n_chars
are in characters not in bytes which differs from the usage other
places in #GtkIMContext.

In order to use this function, you should first call
gtk_im_context_get_surrounding() to get the current context, and
call this function immediately afterwards to make sure that you
know what you are deleting. You should also account for the fact
that even if the signal was handled, the input context might not
have deleted all the characters that were requested to be deleted.

This function is used by an input method that wants to make
subsitutions in the existing text in response to new input. It is
not useful for applications.
#NAME: get_selection_bounds
#PARENT: Gtk.Editable.get_selection_bounds
#COMMENT: %TRUE if an area is selected, %FALSE otherwise
#NAME: new
#PARENT: Gtk.TreeStore.new
#COMMENT: a new #GtkTreeStore
#NAME: text
#PARENT: Gtk.ComboBoxText.prepend_text.none
#COMMENT: A string
#NAME: set_reallocate_redraws
#PARENT: Gtk.Container
#COMMENT: Sets the @reallocate_redraws flag of the container to the given value.

Containers requesting reallocation redraws get automatically
redrawn if any of their children changed allocation.
#NAME: get_uri_display
#PARENT: Gtk.RecentInfo.get_uri_display
#COMMENT: a newly allocated UTF-8 string containing the
  resource’s URI or %NULL. Use g_free() when done using it.
#NAME: list
#PARENT: Gtk.TargetList.add.none
#COMMENT: a #GtkTargetList
#NAME: events_pending
#PARENT: Gtk
#COMMENT: Checks if any events are pending.

This can be used to update the UI and invoke timeouts etc.
while doing some time intensive computation.

## Updating the UI during a long computation

|[<!-- language="C" -->
 // computation going on...

 while (gtk_events_pending ())
   gtk_main_iteration ();

 // ...computation continued
]|
#NAME: context
#PARENT: Gtk.render_check.none
#COMMENT: a #GtkStyleContext
#NAME: select_all
#PARENT: Gtk.FileChooser
#COMMENT: Selects all the files in the current folder of a file chooser.
#NAME: context
#PARENT: Gtk.StyleContext.get_valist.none
#COMMENT: a #GtkStyleContext
#NAME: set_name
#PARENT: Gtk.BindingSet.new.BindingSet
#COMMENT: unique name of this binding set
#NAME: toolbar
#PARENT: Gtk.Toolbar.get_drop_index.gint
#COMMENT: a #GtkToolbar
#NAME: tree_model
#PARENT: Gtk.CellLayoutDataFunc.none
#COMMENT: the model
#NAME: get_duplex
#PARENT: Gtk.PrintSettings.get_duplex
#COMMENT: whether to print the output in duplex.
#NAME: natural_height
#PARENT: Gtk.WidgetClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: location for storing the natural height, or %NULL
#NAME: height
#PARENT: Gtk.paint_check.none
#COMMENT: the height of the rectangle to draw the check in
#NAME: next_page
#PARENT: Gtk.Notebook
#COMMENT: Switches to the next page. Nothing happens if the current page is
the last page.
#NAME: new_from_stock
#PARENT: Gtk.StatusIcon.new_from_stock
#COMMENT: a new #GtkStatusIcon
#NAME: is_ancestor
#PARENT: Gtk.TreeStore
#COMMENT: Returns %TRUE if @iter is an ancestor of @descendant.  That is, @iter is the
parent (or grandparent or great-grandparent) of @descendant.
#NAME: minimum_width
#PARENT: Gtk.WidgetClass.get_preferred_width.get_preferred_width.none
#COMMENT: location to store the minimum width, or %NULL
#NAME: paint_shadow
#PARENT: Gtk
#COMMENT: Draws a shadow around the given rectangle in @cr
using the given style and state and shadow type.
#NAME: xoptions
#PARENT: Gtk.Table.attach.none
#COMMENT: Used to specify the properties of the child widget when the table is resized.
#NAME: iter
#PARENT: Gtk.TextBuffer.insert_range_interactive.gboolean
#COMMENT: a position in @buffer
#NAME: length
#PARENT: Gtk.TreeModel.rows_reordered_with_length.none
#COMMENT: length of @new_order array
#NAME: cursor-on-match
#PARENT: Gtk.EntryCompletion.cursor-on-match
#COMMENT: %TRUE if the signal has been handled
#NAME: TreeViewColumn
#PARENT: Gtk
#COMMENT: The GtkTreeViewColumn object represents a visible column in a #GtkTreeView widget.
It allows to set properties of the column header, and functions as a holding pen for
the cell renderers which determine how the data in the column is displayed.

Please refer to the [tree widget conceptual overview][TreeWidget]
for an overview of all the objects and data types related to the tree widget and how
they work together.
#NAME: set_homogeneous
#PARENT: Gtk.FlowBox
#COMMENT: Sets the #GtkFlowBox:homogeneous property of @box, controlling
whether or not all children of @box are given equal space
in the box.
#NAME: sequence
#PARENT: Gtk.Gesture.sequence-state-changed.none
#COMMENT: the #GdkEventSequence that was cancelled
#NAME: tree_model
#PARENT: Gtk.TreeModel.row_has_child_toggled.none
#COMMENT: a #GtkTreeModel
#NAME: activatable
#PARENT: Gtk.Activatable.get_related_action.Action
#COMMENT: a #GtkActivatable
#NAME: set_can_store
#PARENT: Gtk.Clipboard
#COMMENT: Hints that the clipboard data should be stored somewhere when the
application exits or when gtk_clipboard_store () is called.

This value is reset when the clipboard owner changes.
Where the clipboard data is stored is platform dependent,
see gdk_display_store_clipboard () for more information.
#NAME: new
#PARENT: Gtk.Image.new
#COMMENT: a newly created #GtkImage widget.
#NAME: filter
#PARENT: Gtk.RecentChooser
#COMMENT: The #GtkRecentFilter object to be used when displaying
the recently used resources.
#NAME: app_exec
#PARENT: Gtk.RecentData
#COMMENT: command line used to launch this resource; may contain the
  “&percnt;f” and “&percnt;u” escape characters which will be expanded
  to the resource file path and URI respectively when the command line
  is retrieved;
#NAME: show_connect_to_server
#PARENT: Gtk.PlacesSidebar.set_show_connect_to_server.none
#COMMENT: whether to show an item for the Connect to Server command
#NAME: accel-edited
#PARENT: Gtk.CellRendererAccel
#COMMENT: Gets emitted when the user has selected a new accelerator.
#NAME: enabled
#PARENT: Gtk.Widget.set_device_enabled.none
#COMMENT: whether to enable the device
#NAME: column
#PARENT: Gtk.TreeView.set_tooltip_cell.none
#COMMENT: a #GtkTreeViewColumn or %NULL
#NAME: to_string
#PARENT: Gtk.WidgetPath.to_string
#COMMENT: A new string describing @path.
#NAME: unref
#PARENT: Gtk.CssSection
#COMMENT: Decrements the reference count on @section, freeing the
structure if the reference count reaches 0.
#NAME: object
#PARENT: Gtk.BindingSet.activate.gboolean
#COMMENT: object to activate when binding found
#NAME: get_n_pages
#PARENT: Gtk.Notebook
#COMMENT: Gets the number of pages in a notebook.
#NAME: widget
#PARENT: Gtk.Widget.set_realized.none
#COMMENT: a #GtkWidget
#NAME: get_translator_credits
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the translator credits string which is displayed
in the translators tab of the secondary credits dialog.
#NAME: get_preferred_width
#PARENT: Gtk.CellArea
#COMMENT: Retrieves a cell area’s initial minimum and natural width.

@area will store some geometrical information in @context along the way;
when requesting sizes over an arbitrary number of rows, it’s not important
to check the @minimum_width and @natural_width of this call but rather to
consult gtk_cell_area_context_get_preferred_width() after a series of
requests.
#NAME: grab_focus_without_selecting
#PARENT: Gtk.Entry
#COMMENT: Causes @entry to have keyboard focus.

It behaves like gtk_widget_grab_focus(),
except that it doesn't select the contents of the entry.
You only want to call this on some special entries
which the user usually doesn't want to replace all text in,
such as search-as-you-type entries.
#NAME: left
#PARENT: Gtk.PanDirection
#COMMENT: panned towards the left
#NAME: get_socket_window
#PARENT: Gtk.Plug.get_socket_window
#COMMENT: the window of the socket, or %NULL
#NAME: iter
#PARENT: Gtk.TextIter.backward_lines.gboolean
#COMMENT: a #GtkTextIter
#NAME: get_screen
#PARENT: Gtk.ThemingEngine.get_screen
#COMMENT: a #GdkScreen, or %NULL.
#NAME: set_touch_only
#PARENT: Gtk.GestureSingle
#COMMENT: If @touch_only is %TRUE, @gesture will only handle events of type
#GDK_TOUCH_BEGIN, #GDK_TOUCH_UPDATE or #GDK_TOUCH_END. If %FALSE,
mouse events will be handled too.
#NAME: copy-clipboard
#PARENT: Gtk.Label
#COMMENT: The ::copy-clipboard signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to copy the selection to the clipboard.

The default binding for this signal is Ctrl-c.
#NAME: scale
#PARENT: Gtk.PrintSettings.set_scale.none
#COMMENT: the scale in percent
#NAME: iter
#PARENT: Gtk.TreeModelFilterModifyFunc.none
#COMMENT: a #GtkTreeIter pointing to the row whose display values are determined
#NAME: set_range
#PARENT: Gtk.SpinButton
#COMMENT: Sets the minimum and maximum allowable values for @spin_button.

If the current value is outside this range, it will be adjusted
to fit within the range, otherwise it will remain unchanged.
#NAME: render_icon_pixbuf
#PARENT: Gtk.Widget.render_icon_pixbuf
#COMMENT: a new pixbuf, or %NULL if the
    stock ID wasn’t known
#NAME: get_item_padding
#PARENT: Gtk.IconView.get_item_padding
#COMMENT: the padding around items
#NAME: get_tooltip_context
#PARENT: Gtk.IconView
#COMMENT: This function is supposed to be used in a #GtkWidget::query-tooltip
signal handler for #GtkIconView.  The @x, @y and @keyboard_tip values
which are received in the signal handler, should be passed to this
function without modification.

The return value indicates whether there is an icon view item at the given
coordinates (%TRUE) or not (%FALSE) for mouse tooltips. For keyboard
tooltips the item returned will be the cursor item. When %TRUE, then any of
@model, @path and @iter which have been provided will be set to point to
that row and the corresponding model. @x and @y will always be converted
to be relative to @icon_view’s bin_window if @keyboard_tooltip is %FALSE.
#NAME: column
#PARENT: Gtk.TreeView.is_blank_at_pos.gboolean
#COMMENT: A pointer to a #GtkTreeViewColumn pointer to be filled in, or %NULL
#NAME: get_window_type
#PARENT: Gtk.Window.get_window_type
#COMMENT: the type of the window
#NAME: get_name
#PARENT: Gtk.ActionGroup
#COMMENT: Gets the name of the action group.
#NAME: set_increments
#PARENT: Gtk.Range
#COMMENT: Sets the step and page sizes for the range.
The step size is used when the user clicks the #GtkScrollbar
arrows or moves #GtkScale via arrow keys. The page size
is used for example when moving via Page Up or Page Down keys.
#NAME: widget
#PARENT: Gtk.GestureDrag.new.Gesture
#COMMENT: a #GtkWidget
#NAME: get_preferred_height
#PARENT: Gtk.CellAreaContext
#COMMENT: Gets the accumulative preferred height for all rows which have been
requested with this context.

After gtk_cell_area_context_reset() is called and/or before ever
requesting the size of a #GtkCellArea, the returned values are 0.
#NAME: get_cells
#PARENT: Gtk.CellLayout
#COMMENT: Returns the cell renderers which have been added to @cell_layout.
#NAME: icon_view
#PARENT: Gtk.IconView.get_tooltip_column.gint
#COMMENT: a #GtkIconView
#NAME: set_tab_label_text
#PARENT: Gtk.Notebook
#COMMENT: Creates a new label and sets it as the tab label for the page
containing @child.
#NAME: get_deleted
#PARENT: Gtk.TextChildAnchor
#COMMENT: Determines whether a child anchor has been deleted from
the buffer. Keep in mind that the child anchor will be
unreferenced when removed from the buffer, so you need to
hold your own reference (with g_object_ref()) if you plan
to use this function — otherwise all deleted child anchors
will also be finalized.
#NAME: drag_begin
#PARENT: Gtk.Widget.drag_begin
#COMMENT: the context for this drag
#NAME: n_chars
#PARENT: Gtk.FileChooserButton.set_width_chars.none
#COMMENT: the new width, in characters.
#NAME: icon_view
#PARENT: Gtk.IconView.get_tooltip_context.gboolean
#COMMENT: an #GtkIconView
#NAME: set_from_file
#PARENT: Gtk.StatusIcon
#COMMENT: Makes @status_icon display the file @filename.
See gtk_status_icon_new_from_file() for details.
#NAME: set_priority
#PARENT: Gtk.TextTag
#COMMENT: Sets the priority of a #GtkTextTag. Valid priorities
start at 0 and go to one less than gtk_text_tag_table_get_size().
Each tag in a table has a unique priority; setting the priority
of one tag shifts the priorities of all the other tags in the
table to maintain a unique priority for each tag. Higher priority
tags “win” if two tags both set the same text attribute. When adding
a tag to a tag table, it will be assigned the highest priority in
the table by default; so normally the precedence of a set of tags
is the order in which they were added to the table, or created with
gtk_text_buffer_create_tag(), which adds the tag to the buffer’s table
automatically.
#NAME: palette
#PARENT: Gtk.ToolPalette.get_drag_item.Widget
#COMMENT: a #GtkToolPalette
#NAME: get_named
#PARENT: Gtk.CssProvider
#COMMENT: Loads a theme from the usual theme paths
#NAME: set_preview_text
#PARENT: Gtk.FontSelection
#COMMENT: Sets the text displayed in the preview area.
The @text is used to show how the selected font looks.
#NAME: data
#PARENT: Gtk.TreeModelFilterModifyFunc.none
#COMMENT: user data given to gtk_tree_model_filter_set_modify_func()
#NAME: paste_clipboard
#PARENT: Gtk.Editable
#COMMENT: Pastes the content of the clipboard to the current position of the
cursor in the editable.
#NAME: sort-type
#PARENT: Gtk.RecentChooser
#COMMENT: Sorting order to be used when displaying the recently used resources.
#NAME: accelerator_valid
#PARENT: Gtk
#COMMENT: Determines whether a given keyval and modifier mask constitute
a valid keyboard accelerator. For example, the #GDK_KEY_a keyval
plus #GDK_CONTROL_MASK is valid - this is a “Ctrl+a” accelerator.
But, you can't, for instance, use the #GDK_KEY_Control_L keyval
as an accelerator.
#NAME: modifiers
#PARENT: Gtk.BindingSet.activate.gboolean
#COMMENT: key modifier of the binding
#NAME: format
#PARENT: Gtk.TextBuffer.unregister_deserialize_format.none
#COMMENT: a #GdkAtom representing a registered rich text format.
#NAME: iter
#PARENT: Gtk.TextIter.backward_search.gboolean
#COMMENT: a #GtkTextIter where the search begins
#NAME: last_application
#PARENT: Gtk.RecentInfo.last_application
#COMMENT: an application name. Use g_free() to free it.
#NAME: entry
#PARENT: Gtk.Entry.progress_pulse.none
#COMMENT: a #GtkEntry
#NAME: get_create_folders
#PARENT: Gtk.FileChooser.get_create_folders
#COMMENT: %TRUE if the Create Folder button should be displayed.
#NAME: data
#PARENT: Gtk.CellCallback.gboolean
#COMMENT: user-supplied data
#NAME: user_data
#PARENT: Gtk.ListBoxForeachFunc.none
#COMMENT: user data
#NAME: over_up
#PARENT: Gtk.StackTransitionType
#COMMENT: Cover the old page by sliding up. Since 3.12
#NAME: widget
#PARENT: Gtk.Widget.modify_style.none
#COMMENT: a #GtkWidget
#NAME: iter_has_name
#PARENT: Gtk.WidgetPath
#COMMENT: Returns %TRUE if the widget at position @pos has the name @name,
%FALSE otherwise.
#NAME: set_active_id
#PARENT: Gtk.ComboBox.set_active_id
#COMMENT: %TRUE if a row with a matching ID was found.  If a %NULL
         @active_id was given to unset the active row, the function
         always returns %TRUE.
#NAME: get_name
#PARENT: Gtk.Action
#COMMENT: Returns the name of the action.
#NAME: set_icon_from_stock
#PARENT: Gtk.Tooltip
#COMMENT: Sets the icon of the tooltip (which is in front of the text) to be
the stock item indicated by @stock_id with the size indicated
by @size.  If @stock_id is %NULL, the image will be hidden.
#NAME: shadow_type
#PARENT: Gtk.paint_extension.none
#COMMENT: type of shadow to draw
#NAME: string
#PARENT: Gtk.test_text_set.none
#COMMENT: a 0-terminated C string
#NAME: get_active_iter
#PARENT: Gtk.ComboBox.get_active_iter
#COMMENT: %TRUE, if @iter was set
#NAME: target_iter
#PARENT: Gtk.TextView.get_line_at_y.none
#COMMENT: a #GtkTextIter
#NAME: widget
#PARENT: Gtk.Widget.is_visible.gboolean
#COMMENT: a #GtkWidget
#NAME: text
#PARENT: Gtk.CellView.new_with_text.Widget
#COMMENT: the text to display in the cell view
#NAME: paste-clipboard
#PARENT: Gtk.Entry
#COMMENT: The ::paste-clipboard signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to paste the contents of the clipboard
into the text view.

The default bindings for this signal are
Ctrl-v and Shift-Insert.
#NAME: set_rules_hint
#PARENT: Gtk.TreeView
#COMMENT: Sets a hint for the theme to draw even/odd rows in the @tree_view
with different colors, also known as "zebra striping".

This function tells the GTK+ theme that the user interface for your
application requires users to read across tree rows and associate
cells with one another.

Do not use it just because you prefer the appearance of the ruled
tree; that’s a question for the theme. Some themes will draw tree
rows in alternating colors even when rules are turned off, and
users who prefer that appearance all the time can choose those
themes. You should call this function only as a semantic hint to
the theme engine that your tree makes alternating colors useful
from a functional standpoint (since it has lots of columns,
generally).
#NAME: accel_path
#PARENT: Gtk.AccelMapForeach.none
#COMMENT: Accel path of the current accelerator
#NAME: over_down_up
#PARENT: Gtk.StackTransitionType
#COMMENT: Cover the old page sliding down or uncover the new page sliding up, according to order. Since: 3.14
#NAME: visible_rect
#PARENT: Gtk.TextView.get_visible_rect.none
#COMMENT: rectangle to fill
#NAME: get_bin_window
#PARENT: Gtk.Viewport.get_bin_window
#COMMENT: a #GdkWindow
#NAME: target
#PARENT: Gtk.Window.remove_mnemonic.none
#COMMENT: the widget that gets activated by the mnemonic
#NAME: get_marks
#PARENT: Gtk.TextIter.get_marks
#COMMENT: list of #GtkTextMark
#NAME: wmclass_class
#PARENT: Gtk.Window.set_wmclass.none
#COMMENT: window class hint
#NAME: file_name
#PARENT: Gtk.PageSetup.load_file.gboolean
#COMMENT: the filename to read the page setup from
#NAME: TickCallback
#PARENT: Gtk.TickCallback
#COMMENT: %G_SOURCE_CONTINUE if the tick callback should continue to be called,
 %G_SOURCE_REMOVE if the tick callback should be removed.
#NAME: get_active
#PARENT: Gtk.ToggleAction.get_active
#COMMENT: the checked state of the toggle action
#NAME: new
#PARENT: Gtk.ColorSelectionDialog.new
#COMMENT: a #GtkColorSelectionDialog.
#NAME: widget
#PARENT: Gtk.Dialog.get_response_for_widget.gint
#COMMENT: a widget in the action area of @dialog
#NAME: page_num
#PARENT: Gtk.Notebook.switch-page.none
#COMMENT: the index of the page
#NAME: rc_property_parse_border
#PARENT: Gtk
#COMMENT: A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses
borders in the form
`"{ left, right, top, bottom }"` for integers
left, right, top and bottom.
#NAME: get_show_hidden
#PARENT: Gtk.FileChooser.get_show_hidden
#COMMENT: %TRUE if hidden files and folders are displayed.
#NAME: frame
#PARENT: Gtk.Frame.set_label_widget.none
#COMMENT: a #GtkFrame
#NAME: is_editable
#PARENT: Gtk.Editable.set_editable.none
#COMMENT: %TRUE if the user is allowed to edit the text
  in the widget
#NAME: statusbar
#PARENT: Gtk.Statusbar.get_context_id.guint
#COMMENT: a #GtkStatusbar
#NAME: get_parent
#PARENT: Gtk.StyleContext.get_parent
#COMMENT: the parent context or %NULL
#NAME: len
#PARENT: Gtk.TextBuffer.insert-text.none
#COMMENT: length of the inserted text in bytes
#NAME: get_deleted
#PARENT: Gtk.TextMark
#COMMENT: Returns %TRUE if the mark has been removed from its buffer
with gtk_text_buffer_delete_mark(). See gtk_text_buffer_add_mark()
for a way to add it to a buffer again.
#NAME: get_group
#PARENT: Gtk.Window.get_group
#COMMENT: the #GtkWindowGroup for a window or the default group
#NAME: container
#PARENT: Gtk.Container.child_get_property.none
#COMMENT: a #GtkContainer
#NAME: drag_cancel
#PARENT: Gtk
#COMMENT: Cancels an ongoing drag operation on the source side.

If you want to be able to cancel a drag operation in this way,
you need to keep a pointer to the drag context, either from an
explicit call to gtk_drag_begin_with_coordinates(), or by
connecting to #GtkWidget::drag-begin.

If @context does not refer to an ongoing drag operation, this
function does nothing.

If a drag is cancelled in this way, the @result argument of
#GtkWidget::drag-failed is set to @GTK_DRAG_RESULT_ERROR.
#NAME: flags
#PARENT: Gtk.WidgetPath.iter_add_region.none
#COMMENT: flags affecting the region
#NAME: cell_layout
#PARENT: Gtk.CellLayoutIface.set_cell_data_func.set_cell_data_func.none
#COMMENT: a #GtkCellLayout
#NAME: get_text_length
#PARENT: Gtk.Entry.get_text_length
#COMMENT: the current number of characters
              in #GtkEntry, or 0 if there are none.
#NAME: flags
#PARENT: Gtk.TargetList.add.none
#COMMENT: the flags for this target
#NAME: button
#PARENT: Gtk.Button.pressed.none
#COMMENT: The #GtkButton you want to send the signal to.
#NAME: user_data_or_owner
#PARENT: Gtk.ClipboardGetFunc.none
#COMMENT: the @user_data argument passed to
  gtk_clipboard_set_with_data(), or the @owner argument passed to
  gtk_clipboard_set_with_owner()
#NAME: bottom-padding
#PARENT: Gtk.Alignment
#COMMENT: The padding to insert at the bottom of the widget.
#NAME: get_has_frame
#PARENT: Gtk.Entry.get_has_frame
#COMMENT: whether the entry has a beveled frame
#NAME: get_paper_width
#PARENT: Gtk.PrintSettings.get_paper_width
#COMMENT: the paper width, in units of @unit
#NAME: child
#PARENT: Gtk.Box.set_child_packing.none
#COMMENT: the #GtkWidget of the child to set
#NAME: get_face_list
#PARENT: Gtk.FontSelection.get_face_list
#COMMENT: A #GtkWidget that is part of @fontsel
#NAME: bottom_attach
#PARENT: Gtk.Table.attach.none
#COMMENT: the row number to attach the bottom of a child widget to.
#NAME: iter_list_classes
#PARENT: Gtk.WidgetPath.iter_list_classes
#COMMENT: The list of
         classes, This is a list of strings, the #GSList contents
         are owned by GTK+, but you should use g_slist_free() to
         free the list itself.
#NAME: get_margin_right
#PARENT: Gtk.Widget.get_margin_right
#COMMENT: The right margin of @widget
#NAME: widget
#PARENT: Gtk.paint_box.none
#COMMENT: the widget
#NAME: sensitive
#PARENT: Gtk.Action.set_sensitive.none
#COMMENT: %TRUE to make the action sensitive
#NAME: set_area
#PARENT: Gtk.GestureMultiPress
#COMMENT: If @rect is non-%NULL, the press area will be checked to be
confined within the rectangle, otherwise the button count
will be reset so the press is seen as being the first one.
If @rect is #NULL, the area will be reset to an unrestricted
state.

Note: The rectangle is only used to determine whether any
non-first click falls within the expected area. This is not
akin to an input shape.
#NAME: get_selection
#PARENT: Gtk.SelectionData.get_selection
#COMMENT: the selection #GdkAtom of the selection data.
#NAME: iter
#PARENT: Gtk.TextIter.free.none
#COMMENT: a dynamically-allocated iterator
#NAME: actionable
#PARENT: Gtk.Actionable.set_action_target_value.none
#COMMENT: a #GtkActionable widget
#NAME: section
#PARENT: Gtk.CssSection.get_parent.CssSection
#COMMENT: the section
#NAME: box
#PARENT: Gtk.ListBox.invalidate_headers.none
#COMMENT: a #GtkListBox
#NAME: filter
#PARENT: Gtk.RecentFilter.add_pattern.none
#COMMENT: a #GtkRecentFilter
#NAME: get_show_close_button
#PARENT: Gtk.HeaderBar
#COMMENT: Returns whether this header bar shows the standard window
decorations.
#NAME: set_action_name
#PARENT: Gtk.Actionable
#COMMENT: Specifies the name of the action with which this widget should be
associated.  If @action_name is %NULL then the widget will be
unassociated from any previous action.

Usually this function is used when the widget is located (or will be
located) within the hierarchy of a #GtkApplicationWindow.

Names are of the form “win.save” or “app.quit” for actions on the
containing #GtkApplicationWindow or its associated #GtkApplication,
respectively.  This is the same form used for actions in the #GMenu
associated with the window.
#NAME: iter
#PARENT: Gtk.TextIter.get_tags.TextTag
#COMMENT: a #GtkTextIter
#NAME: push_composite_child
#PARENT: Gtk.Widget
#COMMENT: Makes all newly-created widgets as composite children until
the corresponding gtk_widget_pop_composite_child() call.

A composite child is a child that’s an implementation detail of the
container it’s inside and should not be visible to people using the
container. Composite children aren’t treated differently by GTK (but
see gtk_container_foreach() vs. gtk_container_forall()), but e.g. GUI
builders might want to treat them in a different way.
#NAME: list_shortcut_folders
#PARENT: Gtk.FileChooser.list_shortcut_folders
#COMMENT: A list
of folder filenames, or %NULL if there are no shortcut folders.
Free the returned list with g_slist_free(), and the filenames with
g_free().
#NAME: get_page_side_image
#PARENT: Gtk.Assistant.get_page_side_image
#COMMENT: the side image for @page,
    or %NULL if there’s no side image for the page
#NAME: filter
#PARENT: Gtk.RecentChooserIface.add_filter.add_filter.none
#COMMENT: a #GtkRecentFilter
#NAME: path
#PARENT: Gtk.TreePath.prev.gboolean
#COMMENT: a #GtkTreePath-struct
#NAME: lookup
#PARENT: Gtk.IconSize
#COMMENT: Obtains the pixel size of a semantic icon size @size:
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
isn’t normally needed, gtk_icon_theme_load_icon() is the usual
way to get an icon for rendering, then just look at the size of
the rendered pixbuf. The rendered pixbuf may not even correspond to
the width/height returned by gtk_icon_size_lookup(), because themes
are free to render the pixbuf however they like, including changing
the usual size.
#NAME: get_inline_selection
#PARENT: Gtk.EntryCompletion.get_inline_selection
#COMMENT: %TRUE if inline-selection mode is on
#NAME: License
#PARENT: Gtk
#COMMENT: The type of license for an application.

This enumeration can be expanded at later date.
#NAME: has_key
#PARENT: Gtk.PrintSettings
#COMMENT: Returns %TRUE, if a value is associated with @key.
#NAME: model
#PARENT: Gtk.TreeView.get_tooltip_context.gboolean
#COMMENT: a pointer to
        receive a #GtkTreeModel or %NULL
#NAME: icon_size_register
#PARENT: Gtk.icon_size_register
#COMMENT: integer value representing the size
#NAME: editable
#PARENT: Gtk.EditableInterface.get_chars.get_chars.utf8
#COMMENT: a #GtkEditable
#NAME: get_group_name
#PARENT: Gtk.Notebook.get_group_name
#COMMENT: the group name,
    or %NULL if none is set.
#NAME: stack
#PARENT: Gtk.Stack.get_visible_child.Widget
#COMMENT: a #GtkStack
#NAME: wait_for_text
#PARENT: Gtk.Clipboard.wait_for_text
#COMMENT: a newly-allocated UTF-8 string which must
              be freed with g_free(), or %NULL if retrieving
              the selection data failed. (This could happen
              for various reasons, in particular if the
              clipboard was empty or if the contents of the
              clipboard could not be converted into text form.)
#NAME: size
#PARENT: Gtk.HSV.get_metrics.none
#COMMENT: Return value for the diameter of the hue ring
#NAME: get_layout
#PARENT: Gtk.Entry
#COMMENT: Gets the #PangoLayout used to display the entry.
The layout is useful to e.g. convert text positions to
pixel positions, in combination with gtk_entry_get_layout_offsets().
The returned layout is owned by the entry and must not be
modified or freed by the caller.

Keep in mind that the layout text may contain a preedit string, so
gtk_entry_layout_index_to_text_index() and
gtk_entry_text_index_to_layout_index() are needed to convert byte
indices in the layout to byte indices in the entry contents.
#NAME: get_visible_range
#PARENT: Gtk.TreeView.get_visible_range
#COMMENT: %TRUE, if valid paths were placed in @start_path and @end_path.
#NAME: stock_id
#PARENT: Gtk.Widget.drag_source_set_icon_stock.none
#COMMENT: the ID of the stock icon to use
#NAME: widget
#PARENT: Gtk.paint_resize_grip.none
#COMMENT: the widget
#NAME: primary-icon-gicon
#PARENT: Gtk.Entry
#COMMENT: The #GIcon to use for the primary icon for the entry.
#NAME: editable
#PARENT: Gtk.Editable.delete_selection.none
#COMMENT: a #GtkEditable
#NAME: spin_button
#PARENT: Gtk.SpinButton.spin.none
#COMMENT: a #GtkSpinButton
#NAME: tree_view
#PARENT: Gtk.TreeView.set_enable_tree_lines.none
#COMMENT: a #GtkTreeView
#NAME: proxy
#PARENT: Gtk.ActionGroup.disconnect-proxy.none
#COMMENT: the proxy
#NAME: info
#PARENT: Gtk.RecentInfo.get_modified.glong
#COMMENT: a #GtkRecentInfo
#NAME: STYLE_CLASS_STATUSBAR
#PARENT: Gtk
#COMMENT: A CSS class to match statusbars.

This is used in #GtkStatusbar.
#NAME: 
#PARENT: Gtk.ThemingEngine.get_style.none...
#COMMENT: property name /return value pairs, followed by %NULL
#NAME: get_default_icon_list
#PARENT: Gtk.Window.get_default_icon_list
#COMMENT: copy of default icon list
#NAME: chooser
#PARENT: Gtk.FileChooser.add_filter.none
#COMMENT: a #GtkFileChooser
#NAME: unit
#PARENT: Gtk.PageSetup.get_paper_width.gdouble
#COMMENT: the unit for the return value
#NAME: label
#PARENT: Gtk.RadioAction.new.RadioAction
#COMMENT: The label displayed in menu items and on buttons,
  or %NULL
#NAME: focus-on-map
#PARENT: Gtk.Window
#COMMENT: Whether the window should receive the input focus when mapped.
#NAME: tooltip
#PARENT: Gtk.RecentAction.new_for_manager.Action
#COMMENT: a tooltip for the action, or %NULL
#NAME: forward_line
#PARENT: Gtk.TextIter
#COMMENT: Moves @iter to the start of the next line. If the iter is already on the
last line of the buffer, moves the iter to the end of the current line.
If after the operation, the iter is at the end of the buffer and not
dereferencable, returns %FALSE. Otherwise, returns %TRUE.
#NAME: event
#PARENT: Gtk.Window.activate_key.gboolean
#COMMENT: a #GdkEventKey
#NAME: get_selected_children
#PARENT: Gtk.FlowBox.get_selected_children
#COMMENT: 
    A #GList containing the #GtkWidget for each selected child.
    Free with g_list_free() when done.
#NAME: chooser
#PARENT: Gtk.FileChooser.set_file.gboolean
#COMMENT: a #GtkFileChooser
#NAME: accel_path
#PARENT: Gtk.Menu.set_accel_path.none
#COMMENT: a valid accelerator path
#NAME: widget
#PARENT: Gtk.Widget.modify_bg.none
#COMMENT: a #GtkWidget
#NAME: accel_key
#PARENT: Gtk.AccelGroup.activate.gboolean
#COMMENT: accelerator keyval from a key event
#NAME: binding_set
#PARENT: Gtk.BindingEntry.skip.none
#COMMENT: a #GtkBindingSet to skip an entry of
#NAME: was_symbolic
#PARENT: Gtk.IconInfo.load_symbolic_finish.GdkPixbuf.Pixbuf
#COMMENT: a #gboolean, returns whether the
    loaded icon was a symbolic one and whether the @fg color was
    applied to it.
#NAME: parse_func
#PARENT: Gtk.ThemingEngine.register_property.none
#COMMENT: parsing function to use, or %NULL
#NAME: get_child_visible
#PARENT: Gtk.Widget.get_child_visible
#COMMENT: %TRUE if the widget is mapped with the parent.
#NAME: bar
#PARENT: Gtk.HeaderBar.get_decoration_layout.utf8
#COMMENT: a #GtkHeaderBar
#NAME: compare
#PARENT: Gtk.TreePath.compare
#COMMENT: the relative positions of @a and @b
#NAME: signal_name
#PARENT: Gtk.binding_entry_add_signall.none
#COMMENT: signal name to be bound
#NAME: action_group
#PARENT: Gtk.ActionGroupClass.get_action.get_action.Action
#COMMENT: the action group
#NAME: pack_type
#PARENT: Gtk.Box.set_child_packing.none
#COMMENT: the new value of the pack-type child property
#NAME: image
#PARENT: Gtk.Image.get_stock.none
#COMMENT: a #GtkImage
#NAME: tooltip
#PARENT: Gtk.RadioActionEntry
#COMMENT: The tooltip for the action. This field should typically be
 marked for translation, see gtk_action_group_set_translation_domain().
#NAME: get_font
#PARENT: Gtk.FontChooser.get_font
#COMMENT: A string with the name
    of the current font, or %NULL if  no font is selected. You must
    free this string with g_free().
#NAME: radio_group_member
#PARENT: Gtk.RadioButton.new_with_label_from_widget.Widget
#COMMENT: widget to get radio group from or %NULL
#NAME: shell
#PARENT: Gtk.ToolShellIface.get_text_orientation.get_text_orientation.Orientation
#COMMENT: a #GtkToolShell
#NAME: is_blank_at_pos
#PARENT: Gtk.TreeView
#COMMENT: Determine whether the point (@x, @y) in @tree_view is blank, that is no
cell content nor an expander arrow is drawn at the location. If so, the
location can be considered as the background. You might wish to take
special action on clicks on the background, such as clearing a current
selection, having a custom context menu or starting rubber banding.

The @x and @y coordinate that are provided must be relative to bin_window
coordinates.  That is, @x and @y must come from an event on @tree_view
where `event->window == gtk_tree_view_get_bin_window ()`.

For converting widget coordinates (eg. the ones you get from
GtkWidget::query-tooltip), please see
gtk_tree_view_convert_widget_to_bin_window_coords().

The @path, @column, @cell_x and @cell_y arguments will be filled in
likewise as for gtk_tree_view_get_path_at_pos().  Please see
gtk_tree_view_get_path_at_pos() for more information.
#NAME: distribute_natural_allocation
#PARENT: Gtk
#COMMENT: Distributes @extra_space to child @sizes by bringing smaller
children up to natural size first.

The remaining space will be added to the @minimum_size member of the
GtkRequestedSize struct. If all sizes reach their natural size then
the remaining space is returned.
#NAME: minimum_height
#PARENT: Gtk.CellArea.get_preferred_height.none
#COMMENT: location to store the minimum height, or %NULL
#NAME: list_store
#PARENT: Gtk.ListStore.set_value.none
#COMMENT: A #GtkListStore
#NAME: new
#PARENT: Gtk.Action
#COMMENT: Creates a new #GtkAction object. To add the action to a
#GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().
See the [UI Definition section][XML-UI] for information on allowed action
names.
#NAME: list_filters
#PARENT: Gtk.RecentChooser
#COMMENT: Gets the #GtkRecentFilter objects held by @chooser.
#NAME: accel_flags
#PARENT: Gtk.Widget.add_accelerator.none
#COMMENT: flag accelerators, e.g. %GTK_ACCEL_VISIBLE
#NAME: get_can_focus
#PARENT: Gtk.Widget.get_can_focus
#COMMENT: %TRUE if @widget can own the input focus, %FALSE otherwise
#NAME: tree_store
#PARENT: Gtk.TreeStore.set_value.none
#COMMENT: a #GtkTreeStore
#NAME: key
#PARENT: Gtk.EntryCompletion.compute_prefix.utf8
#COMMENT: The text to complete for
#NAME: event
#PARENT: Gtk.CellRendererClass.start_editing.start_editing.CellEditable
#COMMENT: a #GdkEvent
#NAME: icon_view
#PARENT: Gtk.IconView.get_markup_column.gint
#COMMENT: A #GtkIconView.
#NAME: get_pixbuf
#PARENT: Gtk.OffscreenWindow
#COMMENT: Retrieves a snapshot of the contained widget in the form of
a #GdkPixbuf.  This is a new pixbuf with a reference count of 1,
and the application should unreference it once it is no longer
needed.
#NAME: set_editable
#PARENT: Gtk.TextView
#COMMENT: Sets the default editability of the #GtkTextView. You can override
this default setting with tags in the buffer, using the “editable”
attribute of tags.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_row_separator_func.TreeViewRowSeparatorFunc
#COMMENT: a #GtkTreeView
#NAME: get_track_visited_links
#PARENT: Gtk.Label.get_track_visited_links
#COMMENT: %TRUE if clicked links are remembered
#NAME: tree_view
#PARENT: Gtk.TreeView.unset_rows_drag_dest.none
#COMMENT: a #GtkTreeView
#NAME: func
#PARENT: Gtk.RecentFilter.add_custom.none
#COMMENT: callback function; if the function returns %TRUE, then
  the file will be displayed.
#NAME: place_cursor_onscreen
#PARENT: Gtk.TextView
#COMMENT: Moves the cursor to the currently visible region of the
buffer, it it isn’t there already.
#NAME: cr
#PARENT: Gtk.Widget.draw.none
#COMMENT: a cairo context to draw to
#NAME: get_radio
#PARENT: Gtk.CellRendererToggle.get_radio
#COMMENT: %TRUE if we’re rendering radio toggles rather than checkboxes
#NAME: get_monitor
#PARENT: Gtk.Menu.get_monitor
#COMMENT: the number of the monitor on which the menu should
   be popped up or -1, if no monitor has been set
#NAME: push
#PARENT: Gtk.Statusbar.push
#COMMENT: a message id that can be used with
         gtk_statusbar_remove().
#NAME: get_fraction
#PARENT: Gtk.ProgressBar.get_fraction
#COMMENT: a fraction from 0.0 to 1.0
#NAME: string
#PARENT: Gtk.Builder.value_from_string_type.gboolean
#COMMENT: the string representation of the value
#NAME: fontchooser
#PARENT: Gtk.FontChooserIface.get_font_size.get_font_size.gint
#COMMENT: a #GtkFontChooser
#NAME: load_symbolic_for_context_finish
#PARENT: Gtk.IconInfo
#COMMENT: Finishes an async icon load, see gtk_icon_info_load_symbolic_for_context_async().
#NAME: create-window
#PARENT: Gtk.Notebook.create-window
#COMMENT: a #GtkNotebook that @page should be
    added to, or %NULL.
#NAME: set_justification
#PARENT: Gtk.TextView
#COMMENT: Sets the default justification of text in @text_view.
Tags in the view’s buffer may override the default.
#NAME: window_group
#PARENT: Gtk.WindowGroup.list_windows.Window
#COMMENT: a #GtkWindowGroup
#NAME: destroy
#PARENT: Gtk.ActionGroup.add_actions_full.none
#COMMENT: destroy notification callback for @user_data
#NAME: proxy_window
#PARENT: Gtk.Widget.drag_dest_set_proxy.none
#COMMENT: the window to which to forward drag events
#NAME: box
#PARENT: Gtk.FlowBox.unselect_all.none
#COMMENT: a #GtkFlowBox
#NAME: velocity_x
#PARENT: Gtk.GestureSwipe.get_velocity.gboolean
#COMMENT: return value for the velocity in the X axis, in pixels/sec
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_title.none
#COMMENT: a #GtkComboBox
#NAME: context
#PARENT: Gtk.CellAreaContext.get_preferred_height.none
#COMMENT: a #GtkCellAreaContext
#NAME: show-recommended
#PARENT: Gtk.AppChooserWidget
#COMMENT: The #GtkAppChooserWidget:show-recommended property determines
whether the app chooser should show a section for recommended
applications. If %FALSE, the recommended applications are listed
among the other applications.
#NAME: get_surface
#PARENT: Gtk.OffscreenWindow.get_surface
#COMMENT: A #cairo_surface_t pointer to the offscreen
    surface, or %NULL.
#NAME: window
#PARENT: Gtk.Socket.add_id.none
#COMMENT: the Window of a client participating in the XEMBED protocol.
#NAME: set_cursor_on_cell
#PARENT: Gtk.TreeView
#COMMENT: Sets the current keyboard focus to be at @path, and selects it.  This is
useful when you want to focus the user’s attention on a particular row.  If
@focus_column is not %NULL, then focus is given to the column specified by
it. If @focus_column and @focus_cell are not %NULL, and @focus_column
contains 2 or more editable or activatable cells, then focus is given to
the cell specified by @focus_cell. Additionally, if @focus_column is
specified, and @start_editing is %TRUE, then editing should be started in
the specified cell.  This function is often followed by
@gtk_widget_grab_focus (@tree_view) in order to give keyboard focus to the
widget.  Please note that editing can only happen when the widget is
realized.

If @path is invalid for @model, the current cursor (if any) will be unset
and the function will return without failing.
#NAME: velocity_y
#PARENT: Gtk.GestureSwipe.get_velocity.gboolean
#COMMENT: return value for the velocity in the Y axis, in pixels/sec
#NAME: invalid_encoding
#PARENT: Gtk.RecentManagerError
#COMMENT: the supplied string is not
  UTF-8 encoded.
#NAME: accelerator_name_with_keycode
#PARENT: Gtk
#COMMENT: Converts an accelerator keyval and modifier mask
into a string parseable by gtk_accelerator_parse_with_keycode(),
similarly to gtk_accelerator_name() but handling keycodes.
This is only useful for system-level components, applications
should use gtk_accelerator_parse() instead.
#NAME: combo_box
#PARENT: Gtk.ComboBoxText.remove.none
#COMMENT: A #GtkComboBox
#NAME: width
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: width of the rectangle
#NAME: get_cell_rect
#PARENT: Gtk.IconView.get_cell_rect
#COMMENT: %FALSE if there is no such item, %TRUE otherwise
#NAME: new_from_file
#PARENT: Gtk.PageSetup.new_from_file
#COMMENT: the restored #GtkPageSetup
#NAME: preview
#PARENT: Gtk.PrintOperation.preview
#COMMENT: %TRUE if the listener wants to take over control of the preview
#NAME: widget
#PARENT: Gtk.Widget.modify_font.none
#COMMENT: a #GtkWidget
#NAME: get_icon_pixbuf
#PARENT: Gtk.Entry
#COMMENT: Retrieves the image used for the icon.

Unlike the other methods of setting and getting icon data, this
method will work regardless of whether the icon was set using a
#GdkPixbuf, a #GIcon, a stock item, or an icon name.
#NAME: attach_widget
#PARENT: Gtk.MenuDetachFunc.none
#COMMENT: the #GtkWidget that the menu is being detached from.
#NAME: set_row_spacings
#PARENT: Gtk.Table
#COMMENT: Sets the space between every row in @table equal to @spacing.
#NAME: get_xalign
#PARENT: Gtk.Label
#COMMENT: Gets the #GtkLabel:xalign property for @label.
#NAME: TreeCellDataFunc
#PARENT: Gtk
#COMMENT: A function to set the properties of a cell instead of just using the
straight mapping between the cell and the model.  This is useful for
customizing the cell renderer.  For example, a function might get an
integer from the @tree_model, and render it to the “text” attribute of
“cell” by converting it to its written equivilent.  This is set by
calling gtk_tree_view_column_set_cell_data_func()
#NAME: scrollable
#PARENT: Gtk.Scrollable.get_hadjustment.Adjustment
#COMMENT: a #GtkScrollable
#NAME: icon_name
#PARENT: Gtk.IconTheme.has_icon.gboolean
#COMMENT: the name of an icon
#NAME: get_item_row
#PARENT: Gtk.IconView.get_item_row
#COMMENT: The row in which the item is displayed
#NAME: new
#PARENT: Gtk.PageSetup
#COMMENT: Creates a new #GtkPageSetup.
#NAME: get_fixed_size
#PARENT: Gtk.CellRenderer
#COMMENT: Fills in @width and @height with the appropriate size of @cell.
#NAME: tree_set_row_drag_data
#PARENT: Gtk.tree_set_row_drag_data
#COMMENT: %TRUE if the #GtkSelectionData had the proper target type to allow us to set a tree row
#NAME: column
#PARENT: Gtk.TreeView.row-activated.none
#COMMENT: the #GtkTreeViewColumn in which the activation occurred
#NAME: targets
#PARENT: Gtk.targets_include_rich_text.gboolean
#COMMENT: an array of #GdkAtoms
#NAME: minimum_width
#PARENT: Gtk.CellAreaClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: location to store the minimum width, or %NULL
#NAME: ListStore
#PARENT: Gtk
#COMMENT: The #GtkListStore object is a list model for use with a #GtkTreeView
widget.  It implements the #GtkTreeModel interface, and consequentialy,
can use all of the methods available there.  It also implements the
#GtkTreeSortable interface so it can be sorted by the view.
Finally, it also implements the tree
[drag and drop][gtk3-GtkTreeView-drag-and-drop]
interfaces.

The #GtkListStore can accept most GObject types as a column type, though
it can’t accept all custom types.  Internally, it will keep a copy of
data passed in (such as a string or a boxed pointer).  Columns that
accept #GObjects are handled a little differently.  The
#GtkListStore will keep a reference to the object instead of copying the
value.  As a result, if the object is modified, it is up to the
application writer to call gtk_tree_model_row_changed() to emit the
#GtkTreeModel::row_changed signal.  This most commonly affects lists with
#GdkPixbufs stored.

An example for creating a simple list store:
|[<!-- language="C" -->
enum {
  COLUMN_STRING,
  COLUMN_INT,
  COLUMN_BOOLEAN,
  N_COLUMNS
};

{
  GtkListStore *list_store;
  GtkTreePath *path;
  GtkTreeIter iter;
  gint i;

  list_store = gtk_list_store_new (N_COLUMNS,
                                   G_TYPE_STRING,
                                   G_TYPE_INT,
                                   G_TYPE_BOOLEAN);

  for (i = 0; i < 10; i++)
    {
      gchar *some_data;

      some_data = get_some_data (i);

      // Add a new row to the model
      gtk_list_store_append (list_store, &iter);
      gtk_list_store_set (list_store, &iter,
                          COLUMN_STRING, some_data,
                          COLUMN_INT, i,
                          COLUMN_BOOLEAN,  FALSE,
                          -1);

      // As the store will keep a copy of the string internally,
      // we free some_data.
      g_free (some_data);
    }

  // Modify a particular row
  path = gtk_tree_path_new_from_string ("4");
  gtk_tree_model_get_iter (GTK_TREE_MODEL (list_store),
                           &iter,
                           path);
  gtk_tree_path_free (path);
  gtk_list_store_set (list_store, &iter,
                      COLUMN_BOOLEAN, TRUE,
                      -1);
}
]|

# Performance Considerations

Internally, the #GtkListStore was implemented with a linked list with
a tail pointer prior to GTK+ 2.6.  As a result, it was fast at data
insertion and deletion, and not fast at random data access.  The
#GtkListStore sets the #GTK_TREE_MODEL_ITERS_PERSIST flag, which means
that #GtkTreeIters can be cached while the row exists.  Thus, if
access to a particular row is needed often and your code is expected to
run on older versions of GTK+, it is worth keeping the iter around.

# Atomic Operations

It is important to note that only the methods
gtk_list_store_insert_with_values() and gtk_list_store_insert_with_valuesv()
are atomic, in the sense that the row is being appended to the store and the
values filled in in a single operation with regard to #GtkTreeModel signaling.
In contrast, using e.g. gtk_list_store_append() and then gtk_list_store_set()
will first create a row, which triggers the #GtkTreeModel::row-inserted signal
on #GtkListStore. The row, however, is still empty, and any signal handler
connecting to #GtkTreeModel::row-inserted on this particular store should be prepared
for the situation that the row might be empty. This is especially important
if you are wrapping the #GtkListStore inside a #GtkTreeModelFilter and are
using a #GtkTreeModelFilterVisibleFunc. Using any of the non-atomic operations
to append rows to the #GtkListStore will cause the
#GtkTreeModelFilterVisibleFunc to be visited with an empty row first; the
function must be prepared for that.

# GtkListStore as GtkBuildable

The GtkListStore implementation of the GtkBuildable interface allows
to specify the model columns with a <columns> element that may contain
multiple <column> elements, each specifying one model column. The “type”
attribute specifies the data type for the column.

Additionally, it is possible to specify content for the list store
in the UI definition, with the <data> element. It can contain multiple
<row> elements, each specifying to content for one row of the list model.
Inside a <row>, the <col> elements specify the content for individual cells.

Note that it is probably more common to define your models in the code,
and one might consider it a layering violation to specify the content of
a list store in a UI definition, data, not presentation, and common wisdom
is to separate the two, as far as possible.

An example of a UI Definition fragment for a list store:
|[<!-- language="C" -->
<object class="GtkListStore">
  <columns>
    <column type="gchararray"/>
    <column type="gchararray"/>
    <column type="gint"/>
  </columns>
  <data>
    <row>
      <col id="0">John</col>
      <col id="1">Doe</col>
      <col id="2">25</col>
    </row>
    <row>
      <col id="0">Johan</col>
      <col id="1">Dahlin</col>
      <col id="2">50</col>
    </row>
  </data>
</object>
]|
#NAME: tag
#PARENT: Gtk.TextTagTable.tag-removed.none
#COMMENT: the removed tag.
#NAME: forward_display_line
#PARENT: Gtk.TextView.forward_display_line
#COMMENT: %TRUE if @iter was moved and is not on the end iterator
#NAME: get_parent_window
#PARENT: Gtk.Widget.get_parent_window
#COMMENT: the parent window of @widget.
#NAME: reparent
#PARENT: Gtk.Widget
#COMMENT: Moves a widget from one #GtkContainer to another, handling reference
count issues to avoid destroying the widget.
#NAME: draw
#PARENT: Gtk.Widget.draw
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
   % %FALSE to propagate the event further.
#NAME: has_toplevel_focus
#PARENT: Gtk.Window
#COMMENT: Returns whether the input focus is within this GtkWindow.
For real toplevel windows, this is identical to gtk_window_is_active(),
but for embedded windows, like #GtkPlug, the results will differ.
#NAME: get_current_button
#PARENT: Gtk.GestureSingle
#COMMENT: Returns the button number currently interacting with @gesture, or 0 if there
is none.
#NAME: item
#PARENT: Gtk.ListBoxCreateWidgetFunc.Widget
#COMMENT: the item from the model for which to create a widget for
#NAME: application
#PARENT: Gtk.Application.add_window.none
#COMMENT: a #GtkApplication
#NAME: label
#PARENT: Gtk.Label.get_layout.Pango.Layout
#COMMENT: a #GtkLabel
#NAME: move-cursor
#PARENT: Gtk.TextView
#COMMENT: The ::move-cursor signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates a cursor movement.
If the cursor is not visible in @text_view, this signal causes
the viewport to be moved instead.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically.

The default bindings for this signal come in two variants,
the variant with the Shift modifier extends the selection,
the variant without the Shift modifer does not.
There are too many key combinations to list them all here.
- Arrow keys move by individual characters/lines
- Ctrl-arrow key combinations move by words/paragraphs
- Home/End keys move to the ends of the buffer
- PageUp/PageDown keys move vertically by pages
- Ctrl-PageUp/PageDown keys move horizontally by pages
#NAME: failed
#PARENT: Gtk.IconThemeError
#COMMENT: An unspecified error occurred.
#NAME: image
#PARENT: Gtk.Image.set_from_animation.none
#COMMENT: a #GtkImage
#NAME: gtk-color-scheme
#PARENT: Gtk.Settings
#COMMENT: A palette of named colors for use in themes. The format of the string is
|[
name1: color1
name2: color2
...
]|
Color names must be acceptable as identifiers in the
[gtkrc][gtk3-Resource-Files] syntax, and
color specifications must be in the format accepted by
gdk_color_parse().

Note that due to the way the color tables from different sources are
merged, color specifications will be converted to hexadecimal form
when getting this property.

Starting with GTK+ 2.12, the entries can alternatively be separated
by ';' instead of newlines:
|[
name1: color1; name2: color2; ...
]|
#NAME: new
#PARENT: Gtk.Statusbar
#COMMENT: Creates a new #GtkStatusbar ready for messages.
#NAME: orientation
#PARENT: Gtk.GesturePan
#COMMENT: The expected orientation of pan gestures.
#NAME: event-after
#PARENT: Gtk.Widget
#COMMENT: After the emission of the #GtkWidget::event signal and (optionally)
the second more specific signal, ::event-after will be emitted
regardless of the previous two signals handlers return values.
#NAME: table
#PARENT: Gtk.TextTagTable.add.gboolean
#COMMENT: a #GtkTextTagTable
#NAME: get_cursor_visible
#PARENT: Gtk.TextView
#COMMENT: Find out whether the cursor is being displayed.
#NAME: action
#PARENT: Gtk.Action.is_visible.gboolean
#COMMENT: the action object
#NAME: column
#PARENT: Gtk.IconView.set_tooltip_column.none
#COMMENT: an integer, which is a valid column number for @icon_view’s model
#NAME: out
#PARENT: Gtk.ShadowType
#COMMENT: The outline is bevelled outwards like a button.
#NAME: property
#PARENT: Gtk.ThemingEngine.get_property.none
#COMMENT: the property name
#NAME: context
#PARENT: Gtk.drag_get_source_widget.Widget
#COMMENT: a (destination side) drag context
#NAME: FontChooserWidget
#PARENT: Gtk
#COMMENT: The #GtkFontChooserWidget widget lists the available fonts,
styles and sizes, allowing the user to select a font. It is
used in the #GtkFontChooserDialog widget to provide a
dialog box for selecting fonts.

To set the font which is initially selected, use
gtk_font_chooser_set_font() or gtk_font_chooser_set_font_desc().

To get the selected font use gtk_font_chooser_get_font() or
gtk_font_chooser_get_font_desc().

To change the text which is shown in the preview area, use
gtk_font_chooser_set_preview_text().
#NAME: plug
#PARENT: Gtk.Plug.get_embedded.gboolean
#COMMENT: a #GtkPlug
#NAME: get_visible_text
#PARENT: Gtk.TextIter
#COMMENT: Like gtk_text_iter_get_text(), but invisible text is not included.
Invisible text is usually invisible because a #GtkTextTag with the
“invisible” attribute turned on has been applied to it.
#NAME: get_status
#PARENT: Gtk.PrintOperation.get_status
#COMMENT: the status of the print operation
#NAME: get_pixbuf
#PARENT: Gtk.SelectionData
#COMMENT: Gets the contents of the selection data as a #GdkPixbuf.
#NAME: text_view
#PARENT: Gtk.TextView.add_child_at_anchor.none
#COMMENT: a #GtkTextView
#NAME: child
#PARENT: Gtk.FlowBoxChild.get_index.gint
#COMMENT: a #GtkFlowBoxChild
#NAME: str
#PARENT: Gtk.Label.new_with_mnemonic.Widget
#COMMENT: The text of the label, with an underscore in front of the
      mnemonic character
#NAME: requisition
#PARENT: Gtk.Widget.size_request.none
#COMMENT: a #GtkRequisition to be filled in
#NAME: icon_pos
#PARENT: Gtk.Entry.get_icon_sensitive.gboolean
#COMMENT: Icon position
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_entry_text_column.none
#COMMENT: A #GtkComboBox
#NAME: set_radio
#PARENT: Gtk.CellRendererToggle
#COMMENT: If @radio is %TRUE, the cell renderer renders a radio toggle
(i.e. a toggle in a group of mutually-exclusive toggles).
If %FALSE, it renders a check toggle (a standalone boolean option).
This can be set globally for the cell renderer, or changed just
before rendering each cell in the model (for #GtkTreeView, you set
up a per-row setting using #GtkTreeViewColumn to associate model
columns with cell renderer properties).
#NAME: set_extra_widget
#PARENT: Gtk.FileChooser
#COMMENT: Sets an application-supplied widget to provide extra options to the user.
#NAME: show-day-names
#PARENT: Gtk.Calendar
#COMMENT: Determines whether day names are displayed.
#NAME: set_model
#PARENT: Gtk.EntryCompletion
#COMMENT: Sets the model for a #GtkEntryCompletion. If @completion already has
a model set, it will remove it before setting the new model.
If model is %NULL, then it will unset the model.
#NAME: get_digits
#PARENT: Gtk.Scale
#COMMENT: Gets the number of decimal places that are displayed in the value.
#NAME: max
#PARENT: Gtk.Entry.set_max_length.none
#COMMENT: the maximum length of the entry, or 0 for no maximum.
  (other than the maximum length of entries.) The value passed in will
  be clamped to the range 0-65536.
#NAME: new_with_label
#PARENT: Gtk.MenuItem.new_with_label
#COMMENT: the newly created #GtkMenuItem
#NAME: drag-perform-drop
#PARENT: Gtk.PlacesSidebar
#COMMENT: The places sidebar emits this signal when the user completes a
drag-and-drop operation and one of the sidebar's items is the
destination.  This item is in the @dest_file, and the
@source_file_list has the list of files that are dropped into it and
which should be copied/moved/etc. based on the specified @action.
#NAME: group
#PARENT: Gtk.RadioAction.set_group.none
#COMMENT: a list representing a radio group, or %NULL
#NAME: path
#PARENT: Gtk.WidgetPath.iter_has_qregion.gboolean
#COMMENT: a #GtkWidgetPath
#NAME: n_elements
#PARENT: Gtk.IconTheme.set_search_path.none
#COMMENT: number of elements in @path.
#NAME: rect
#PARENT: Gtk.IconView.get_cell_rect.gboolean
#COMMENT: rectangle to fill with cell rect
#NAME: set
#PARENT: Gtk.PrintSettings
#COMMENT: Associates @value with @key.
#NAME: new
#PARENT: Gtk.Application.new
#COMMENT: a new #GtkApplication instance
#NAME: backward_chars
#PARENT: Gtk.TextIter
#COMMENT: Moves @count characters backward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn’t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE.
#NAME: inside_word
#PARENT: Gtk.TextIter.inside_word
#COMMENT: %TRUE if @iter is inside a word
#NAME: order
#PARENT: Gtk.TreeViewColumn.set_sort_order.none
#COMMENT: sort order that the sort indicator should indicate
#NAME: new
#PARENT: Gtk.UIManager
#COMMENT: Creates a new ui manager object.
#NAME: icon_view
#PARENT: Gtk.IconView.set_columns.none
#COMMENT: a #GtkIconView
#NAME: box
#PARENT: Gtk.ListBox.select_all.none
#COMMENT: a #GtkListBox
#NAME: settings
#PARENT: Gtk.PrintSettings.get_int.gint
#COMMENT: a #GtkPrintSettings
#NAME: get_default_col_spacing
#PARENT: Gtk.Table
#COMMENT: Gets the default column spacing for the table. This is
the spacing that will be used for newly added columns.
(See gtk_table_set_col_spacings())
#NAME: has_grab
#PARENT: Gtk.Widget.has_grab
#COMMENT: %TRUE if the widget is in the grab_widgets stack
#NAME: get_preferred_width_for_height
#PARENT: Gtk.CellArea
#COMMENT: Retrieves a cell area’s minimum and natural width if it would be given
the specified @height.

@area stores some geometrical information in @context along the way
while calling gtk_cell_area_get_preferred_height(). It’s important to
perform a series of gtk_cell_area_get_preferred_height() requests with
@context first and then call gtk_cell_area_get_preferred_width_for_height()
on each cell area individually to get the height for width of each
fully requested row.

If at some point, the height of a single row changes, it should be
requested with gtk_cell_area_get_preferred_height() again and then
the full height of the requested rows checked again with
gtk_cell_area_context_get_preferred_height().
#NAME: get
#PARENT: Gtk.Clipboard
#COMMENT: Returns the clipboard object for the given selection.
See gtk_clipboard_get_for_display() for complete details.
#NAME: get_bounding_box_center
#PARENT: Gtk.Gesture.get_bounding_box_center
#COMMENT: %FALSE if no active touches are present, %TRUE otherwise
#NAME: new
#PARENT: Gtk.FileChooserButton
#COMMENT: Creates a new file-selecting button widget.
#NAME: test_create_simple_window
#PARENT: Gtk.test_create_simple_window
#COMMENT: a widget pointer to the newly created GtkWindow.
#NAME: tree_view
#PARENT: Gtk.TreeView.convert_widget_to_tree_coords.none
#COMMENT: a #GtkTreeView
#NAME: iter
#PARENT: Gtk.TextIter.is_start.gboolean
#COMMENT: an iterator
#NAME: window_group
#PARENT: Gtk.WindowGroup.get_current_device_grab.Widget
#COMMENT: a #GtkWindowGroup
#NAME: buildable
#PARENT: Gtk.BuildableIface.set_buildable_property.set_buildable_property.none
#COMMENT: a #GtkBuildable
#NAME: create_pango_context
#PARENT: Gtk.Widget.create_pango_context
#COMMENT: the new #PangoContext
#NAME: border_width
#PARENT: Gtk.Container.set_border_width.none
#COMMENT: amount of blank space to leave outside
  the container. Valid values are in the range 0-65535 pixels.
#NAME: set_round_digits
#PARENT: Gtk.Range
#COMMENT: Sets the number of digits to round the value to when
it changes. See #GtkRange::change-value.
#NAME: new
#PARENT: Gtk.Scale
#COMMENT: Creates a new #GtkScale.
#NAME: Accessible
#PARENT: Gtk
#COMMENT: The #GtkAccessible class is the base class for accessible
implementations for #GtkWidget subclasses. It is a thin
wrapper around #AtkObject, which adds facilities for associating
a widget with its accessible object.

An accessible implementation for a third-party widget should
derive from #GtkAccessible and implement the suitable interfaces
from ATK, such as #AtkText or #AtkSelection. To establish
the connection between the widget class and its corresponding
acccessible implementation, override the get_accessible vfunc
in #GtkWidgetClass.
#NAME: button
#PARENT: Gtk.MenuToolButton.get_menu.Widget
#COMMENT: a #GtkMenuToolButton
#NAME: ypad
#PARENT: Gtk.Misc.get_padding.none
#COMMENT: location to store padding in the Y
       direction, or %NULL
#NAME: show_uri
#PARENT: Gtk.show_uri
#COMMENT: %TRUE on success, %FALSE on error
#NAME: get_name
#PARENT: Gtk.BuildableIface.get_name.get_name
#COMMENT: the name set with gtk_buildable_set_name()
#NAME: visible
#PARENT: Gtk.ActionGroup.set_visible.none
#COMMENT: new visiblity
#NAME: 
#PARENT: Gtk.CellLayout.set_attributes.none...
#COMMENT: a %NULL-terminated list of attributes
#NAME: set_receives_default
#PARENT: Gtk.Widget
#COMMENT: Specifies whether @widget will be treated as the default widget
within its toplevel when it has the focus, even if another widget
is the default.

See gtk_widget_grab_default() for details about the meaning of
“default”.
#NAME: self
#PARENT: Gtk.LevelBar.set_mode.none
#COMMENT: a #GtkLevelBar
#NAME: got-page-size
#PARENT: Gtk.PrintOperationPreview
#COMMENT: The ::got-page-size signal is emitted once for each page
that gets rendered to the preview.

A handler for this signal should update the @context
according to @page_setup and set up a suitable cairo
context, using gtk_print_context_set_cairo_context().
#NAME: display_name
#PARENT: Gtk.RecentData
#COMMENT: a UTF-8 encoded string, containing the name of the recently
  used resource to be displayed, or %NULL;
#NAME: group
#PARENT: Gtk.ToolItemGroup.get_nth_item.ToolItem
#COMMENT: a #GtkToolItemGroup
#NAME: get_program_name
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the program name displayed in the about dialog.
#NAME: widget
#PARENT: Gtk.WidgetClass.unrealize.unrealize.none
#COMMENT: a #GtkWidget
#NAME: get_hscrollbar
#PARENT: Gtk.ScrolledWindow.get_hscrollbar
#COMMENT: the horizontal scrollbar of the scrolled window.
#NAME: get_allocated_height
#PARENT: Gtk.Widget.get_allocated_height
#COMMENT: the height of the @widget
#NAME: update-preview
#PARENT: Gtk.FileChooser
#COMMENT: This signal is emitted when the preview in a file chooser should be
regenerated.  For example, this can happen when the currently selected file
changes.  You should use this signal if you want your file chooser to have
a preview widget.

Once you have installed a preview widget with
gtk_file_chooser_set_preview_widget(), you should update it when this
signal is emitted.  You can use the functions
gtk_file_chooser_get_preview_filename() or
gtk_file_chooser_get_preview_uri() to get the name of the file to preview.
Your widget may not be able to preview all kinds of files; your callback
must call gtk_file_chooser_set_preview_widget_active() to inform the file
chooser about whether the preview was generated successfully or not.

Please see the example code in
[Using a Preview Widget][gtkfilechooser-preview].

See also: gtk_file_chooser_set_preview_widget(),
gtk_file_chooser_set_preview_widget_active(),
gtk_file_chooser_set_use_preview_label(),
gtk_file_chooser_get_preview_filename(),
gtk_file_chooser_get_preview_uri().
#NAME: types
#PARENT: Gtk.TreeStore.set_column_types.none
#COMMENT: An array of #GType types, one for each column
#NAME: STOCK_BOLD
#PARENT: Gtk
#COMMENT: The “Bold” item and icon.
#NAME: surface
#PARENT: Gtk.Image.set_from_surface.none
#COMMENT: a cairo_surface_t
#NAME: get_language
#PARENT: Gtk.TextIter.get_language
#COMMENT: language in effect at @iter
#NAME: get_visible
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns %TRUE if @tree_column is visible.
#NAME: chooser
#PARENT: Gtk.FileChooser.get_uris.utf8
#COMMENT: a #GtkFileChooser
#NAME: nothing
#PARENT: Gtk.IMStatusStyle
#COMMENT: Deprecated
#NAME: menu
#PARENT: Gtk.MenuToolButton.set_menu.none
#COMMENT: the #GtkMenu associated with #GtkMenuToolButton
#NAME: values
#PARENT: Gtk.TextAttributes.ref.TextAttributes
#COMMENT: a #GtkTextAttributes
#NAME: get_focus_cell
#PARENT: Gtk.CellArea.get_focus_cell
#COMMENT: the currently focused cell in @area.
#NAME: get_column_homogeneous
#PARENT: Gtk.Grid.get_column_homogeneous
#COMMENT: whether all columns of @grid have the same width.
#NAME: new_with_mnemonic
#PARENT: Gtk.MenuItem.new_with_mnemonic
#COMMENT: a new #GtkMenuItem
#NAME: add_action_widget
#PARENT: Gtk.Assistant
#COMMENT: Adds a widget to the action area of a #GtkAssistant.
#NAME: wait_is_text_available
#PARENT: Gtk.Clipboard
#COMMENT: Test to see if there is text available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains any of the supported text targets. This function
waits for the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.

This function is a little faster than calling
gtk_clipboard_wait_for_text() since it doesn’t need to retrieve
the actual text.
#NAME: Layout
#PARENT: Gtk
#COMMENT: #GtkLayout is similar to #GtkDrawingArea in that it’s a “blank slate”
and doesn’t do anything but paint a blank background by default. It's
different in that it supports scrolling natively (you can add it to a
#GtkScrolledWindow), and it can contain child widgets, since it’s a
#GtkContainer. However if you’re just going to draw, a #GtkDrawingArea
is a better choice since it has lower overhead.

When handling expose events on a #GtkLayout, you must draw to
GTK_LAYOUT (layout)->bin_window, rather than to
GTK_WIDGET (layout)->window, as you would for a drawing
area.
#NAME: data
#PARENT: Gtk.TreeSelectionFunc.gboolean
#COMMENT: user data
#NAME: path_is_selected
#PARENT: Gtk.IconView
#COMMENT: Returns %TRUE if the icon pointed to by @path is currently
selected. If @path does not point to a valid location, %FALSE is returned.
#NAME: row
#PARENT: Gtk.ListBoxRow.is_selected.gboolean
#COMMENT: a #GtkListBoxRow
#NAME: get_selection_bounds
#PARENT: Gtk.Editable
#COMMENT: Retrieves the selection bound of the editable. start_pos will be filled
with the start of the selection and @end_pos with end. If no text was
selected both will be identical and %FALSE will be returned.

Note that positions are specified in characters, not bytes.
#NAME: iter
#PARENT: Gtk.TextIter.get_visible_line_offset.gint
#COMMENT: a #GtkTextIter
#NAME: width
#PARENT: Gtk.paint_box.none
#COMMENT: the width of the box
#NAME: add-widget
#PARENT: Gtk.UIManager
#COMMENT: The ::add-widget signal is emitted for each generated menubar and toolbar.
It is not emitted for generated popup menus, which can be obtained by
gtk_ui_manager_get_widget().
#NAME: accelerator_mods
#PARENT: Gtk.accelerator_get_label_with_keycode.utf8
#COMMENT: accelerator modifier mask
#NAME: modifier
#PARENT: Gtk.AccelGroup.accel-activate.gboolean
#COMMENT: the modifier combination of the accelerator
#NAME: copy_context
#PARENT: Gtk.CellArea.copy_context
#COMMENT: a newly created #GtkCellAreaContext copy of @context.
#NAME: paint_focus
#PARENT: Gtk.CellArea.render.none
#COMMENT: whether @area should paint focus on focused cells for focused rows or not.
#NAME: clear_cache
#PARENT: Gtk.TreeModelSort
#COMMENT: This function should almost never be called.  It clears the @tree_model_sort
of any cached iterators that haven’t been reffed with
gtk_tree_model_ref_node().  This might be useful if the child model being
sorted is static (and doesn’t change often) and there has been a lot of
unreffed access to nodes.  As a side effect of this function, all unreffed
iters will be invalid.
#NAME: tagname
#PARENT: Gtk.Buildable.custom_finished.none
#COMMENT: the name of the tag
#NAME: iter
#PARENT: Gtk.TextBuffer.get_iter_at_line_offset.none
#COMMENT: iterator to initialize
#NAME: text_view
#PARENT: Gtk.TextView.set_border_window_size.none
#COMMENT: a #GtkTextView
#NAME: set_rubber_banding
#PARENT: Gtk.TreeView
#COMMENT: Enables or disables rubber banding in @tree_view.  If the selection mode
is #GTK_SELECTION_MULTIPLE, rubber banding will allow the user to select
multiple rows by dragging the mouse.
#NAME: get_toplevel
#PARENT: Gtk.Widget.get_toplevel
#COMMENT: the topmost ancestor of @widget, or @widget itself
   if there’s no ancestor.
#NAME: year
#PARENT: Gtk.Calendar.select_month.none
#COMMENT: the year the month is in.
#NAME: get_show_text
#PARENT: Gtk.ProgressBar
#COMMENT: Gets the value of the #GtkProgressBar:show-text property.
See gtk_progress_bar_set_show_text().
#NAME: count
#PARENT: Gtk.TextIter.backward_visible_word_starts.gboolean
#COMMENT: number of times to move
#NAME: minimum_width
#PARENT: Gtk.CellAreaClass.get_preferred_width.get_preferred_width.none
#COMMENT: location to store the minimum width, or %NULL
#NAME: orientation
#PARENT: Gtk.IconView.set_item_orientation.none
#COMMENT: the relative position of texts and icons
#NAME: xalign
#PARENT: Gtk.Misc.set_alignment.none
#COMMENT: the horizontal alignment, from 0 (left) to 1 (right).
#NAME: copy
#PARENT: Gtk.TargetEntry.copy
#COMMENT: a pointer to a copy of @data.
    Free with gtk_target_entry_free()
#NAME: editable
#PARENT: Gtk.EditableInterface.insert_text.insert_text.none
#COMMENT: a #GtkEditable
#NAME: self
#PARENT: Gtk.AppChooserWidget.set_show_all.none
#COMMENT: a #GtkAppChooserWidget
#NAME: path
#PARENT: Gtk.WidgetPath.to_string.utf8
#COMMENT: the path
#NAME: setting
#PARENT: Gtk.Window.set_focus_visible.none
#COMMENT: the new value
#NAME: get_name
#PARENT: Gtk.Buildable.get_name
#COMMENT: the name set with gtk_buildable_set_name()
#NAME: set_expanded
#PARENT: Gtk.Expander
#COMMENT: Sets the state of the expander. Set to %TRUE, if you want
the child widget to be revealed, and %FALSE if you want the
child widget to be hidden.
#NAME: get_tab_label
#PARENT: Gtk.Notebook.get_tab_label
#COMMENT: the tab label
#NAME: duration
#PARENT: Gtk.Stack.set_transition_duration.none
#COMMENT: the new duration, in milliseconds
#NAME: lookup_icon_set
#PARENT: Gtk.Style
#COMMENT: Looks up @stock_id in the icon factories associated with @style
and the default icon factory, returning an icon set if found,
otherwise %NULL.
#NAME: get_update_policy
#PARENT: Gtk.SpinButton
#COMMENT: Gets the update behavior of a spin button.
See gtk_spin_button_set_update_policy().
#NAME: iter
#PARENT: Gtk.TreeModelSort.iter_is_valid.gboolean
#COMMENT: A #GtkTreeIter.
#NAME: set_destroy_count_func
#PARENT: Gtk.TreeView
#COMMENT: This function should almost never be used.  It is meant for private use by
ATK for determining the number of visible children that are removed when the
user collapses a row, or a row is deleted.
#NAME: path
#PARENT: Gtk.WidgetPath.iter_remove_region.none
#COMMENT: a #GtkWidgetPath
#NAME: filter
#PARENT: Gtk.FontChooser.set_filter_func.none
#COMMENT: a #GtkFontFilterFunc, or %NULL
#NAME: draw-page
#PARENT: Gtk.PrintOperation
#COMMENT: Emitted for every page that is printed. The signal handler
must render the @page_nr's page onto the cairo context obtained
from @context using gtk_print_context_get_cairo_context().
|[<!-- language="C" -->
static void
draw_page (GtkPrintOperation *operation,
           GtkPrintContext   *context,
           gint               page_nr,
           gpointer           user_data)
{
  cairo_t *cr;
  PangoLayout *layout;
  gdouble width, text_height;
  gint layout_height;
  PangoFontDescription *desc;
  
  cr = gtk_print_context_get_cairo_context (context);
  width = gtk_print_context_get_width (context);
  
  cairo_rectangle (cr, 0, 0, width, HEADER_HEIGHT);
  
  cairo_set_source_rgb (cr, 0.8, 0.8, 0.8);
  cairo_fill (cr);
  
  layout = gtk_print_context_create_pango_layout (context);
  
  desc = pango_font_description_from_string ("sans 14");
  pango_layout_set_font_description (layout, desc);
  pango_font_description_free (desc);
  
  pango_layout_set_text (layout, "some text", -1);
  pango_layout_set_width (layout, width * PANGO_SCALE);
  pango_layout_set_alignment (layout, PANGO_ALIGN_CENTER);
     		      
  pango_layout_get_size (layout, NULL, &layout_height);
  text_height = (gdouble)layout_height / PANGO_SCALE;
  
  cairo_move_to (cr, width / 2,  (HEADER_HEIGHT - text_height) / 2);
  pango_cairo_show_layout (cr, layout);
  
  g_object_unref (layout);
}
]|

Use gtk_print_operation_set_use_full_page() and
gtk_print_operation_set_unit() before starting the print operation
to set up the transformation of the cairo context according to your
needs.
#NAME: destroyed
#PARENT: Gtk.BindingEntry
#COMMENT: implementation detail
#NAME: rows
#PARENT: Gtk.Calendar.set_detail_height_rows.none
#COMMENT: detail height in rows.
#NAME: set_size
#PARENT: Gtk.Layout
#COMMENT: Sets the size of the scrollable area of the layout.
#NAME: insert_before
#PARENT: Gtk.TreeStore
#COMMENT: Inserts a new row before @sibling.  If @sibling is %NULL, then the row will
be appended to @parent ’s children.  If @parent and @sibling are %NULL, then
the row will be appended to the toplevel.  If both @sibling and @parent are
set, then @parent must be the parent of @sibling.  When @sibling is set,
@parent is optional.

@iter will be changed to point to this new row.  The row will be empty after
this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().
#NAME: apply
#PARENT: Gtk.ResponseType
#COMMENT: Returned by Apply buttons in GTK+ dialogs
#NAME: STOCK_SAVE_AS
#PARENT: Gtk
#COMMENT: The “Save As” item and icon.
#NAME: notify_state_change
#PARENT: Gtk.StyleContext
#COMMENT: Notifies a state change on @context, so if the current style makes use
of transition animations, one will be started so all rendered elements
under @region_id are animated for state @state being set to value
@state_value.

The @window parameter is used in order to invalidate the rendered area
as the animation runs, so make sure it is the same window that is being
rendered on by the gtk_render_*() functions.

If @region_id is %NULL, all rendered elements using @context will be
affected by this state transition.

As a practical example, a #GtkButton notifying a state transition on
the prelight state:
|[<!-- language="C" -->
gtk_style_context_notify_state_change (context,
                                       gtk_widget_get_window (widget),
                                       NULL,
                                       GTK_STATE_PRELIGHT,
                                       button->in_button);
]|

Can be handled in the CSS file like this:
|[
GtkButton {
    background-color: #f00
}

GtkButton:hover {
    background-color: #fff;
    transition: 200ms linear
}
]|

This combination will animate the button background from red to white
if a pointer enters the button, and back to red if the pointer leaves
the button.

Note that @state is used when finding the transition parameters, which
is why the style places the transition under the :hover pseudo-class.
#NAME: get_justification
#PARENT: Gtk.TextView.get_justification
#COMMENT: default justification
#NAME: accel_key
#PARENT: Gtk.AccelMap.changed.none
#COMMENT: the key value for the new accelerator
#NAME: menu_item
#PARENT: Gtk.MenuItemClass.select.select.none
#COMMENT: the menu item
#NAME: info
#PARENT: Gtk.Widget.drag-data-received.none
#COMMENT: the info that has been registered with the target in the
       #GtkTargetList
#NAME: width
#PARENT: Gtk.WidgetAuxInfo
#COMMENT: the widget’s width
#NAME: area
#PARENT: Gtk.CellAreaClass.apply_attributes.apply_attributes.none
#COMMENT: a #GtkCellArea
#NAME: path
#PARENT: Gtk.TreeModel.row_changed.none
#COMMENT: a #GtkTreePath-struct pointing to the changed row
#NAME: widget
#PARENT: Gtk.Widget.override_font.none
#COMMENT: a #GtkWidget
#NAME: label_pattern
#PARENT: Gtk.test_find_widget.Widget
#COMMENT: Shell-glob pattern to match a label string.
#NAME: accelerator_mods
#PARENT: Gtk.AccelLabel.set_accel.none
#COMMENT: the modifier mask for the accel
#NAME: op
#PARENT: Gtk.MountOperation.get_parent.Window
#COMMENT: a #GtkMountOperation
#NAME: get_homogeneous
#PARENT: Gtk.Stack.get_homogeneous
#COMMENT: whether @stack is homogeneous.
#NAME: buffer
#PARENT: Gtk.TextBuffer.unregister_serialize_format.none
#COMMENT: a #GtkTextBuffer
#NAME: column
#PARENT: Gtk.TreeView.get_cell_area.none
#COMMENT: a #GtkTreeViewColumn for the column, or %NULL to get only vertical coordinates
#NAME: paint_resize_grip
#PARENT: Gtk
#COMMENT: Draws a resize grip in the given rectangle on @cr using the given
parameters.
#NAME: proxy
#PARENT: Gtk.tree_row_reference_inserted.none
#COMMENT: a #GObject
#NAME: insert_with_valuesv
#PARENT: Gtk.ListStore
#COMMENT: A variant of gtk_list_store_insert_with_values() which
takes the columns and values as two arrays, instead of
varargs. This function is mainly intended for
language-bindings.
#NAME: get_position
#PARENT: Gtk.Paned.get_position
#COMMENT: position of the divider
#NAME: get_layout
#PARENT: Gtk.Label.get_layout
#COMMENT: the #PangoLayout for this label
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_storage_type.ImageType
#COMMENT: a #GtkStatusIcon
#NAME: data
#PARENT: Gtk.TreeModelFilter.set_visible_func.none
#COMMENT: User data to pass to the visible function, or %NULL
#NAME: IMStatusStyle
#PARENT: Gtk
#COMMENT: Style for input method status. See also
#GtkSettings:gtk-im-status-style
#NAME: entry
#PARENT: Gtk.Entry.grab_focus_without_selecting.none
#COMMENT: a #GtkEntry
#NAME: get_edit_widget
#PARENT: Gtk.CellArea
#COMMENT: Gets the #GtkCellEditable widget currently used
to edit the currently edited cell.
#NAME: always_show
#PARENT: Gtk.ImageMenuItem.set_always_show_image.none
#COMMENT: %TRUE if the menuitem should always show the image
#NAME: bind_model
#PARENT: Gtk.Popover
#COMMENT: Establishes a binding between a #GtkPopover and a #GMenuModel.

The contents of @popover are removed and then refilled with menu items
according to @model.  When @model changes, @popover is updated.
Calling this function twice on @popover with different @model will
cause the first binding to be replaced with a binding to the new
model. If @model is %NULL then any previous binding is undone and
all children are removed.

If @action_namespace is non-%NULL then the effect is as if all
actions mentioned in the @model have their names prefixed with the
namespace, plus a dot.  For example, if the action “quit” is
mentioned and @action_namespace is “app” then the effective action
name is “app.quit”.

This function uses #GtkActionable to define the action name and
target values on the created menu items.  If you want to use an
action group other than “app” and “win”, or if you want to use a
#GtkMenuShell outside of a #GtkApplicationWindow, then you will need
to attach your own action group to the widget hierarchy using
gtk_widget_insert_action_group().  As an example, if you created a
group with a “quit” action and inserted it with the name “mygroup”
then you would use the action name “mygroup.quit” in your
#GMenuModel.
#NAME: update-custom-widget
#PARENT: Gtk.PrintOperation
#COMMENT: Emitted after change of selected printer. The actual page setup and
print settings are passed to the custom widget, which can actualize
itself according to this change.
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_homogeneous.gboolean
#COMMENT: a #GtkToolItem
#NAME: set_parent
#PARENT: Gtk.Widget
#COMMENT: This function is useful only when implementing subclasses of
#GtkContainer.
Sets the container as the parent of @widget, and takes care of
some details such as updating the state and style of the child
to reflect its new location. The opposite function is
gtk_widget_unparent().
#NAME: window
#PARENT: Gtk.Widget.unregister_window.none
#COMMENT: a #GdkWindow
#NAME: new
#PARENT: Gtk.Grid.new
#COMMENT: the new #GtkGrid
#NAME: calendar
#PARENT: Gtk.Calendar.unmark_day.none
#COMMENT: a #GtkCalendar.
#NAME: ListBox
#PARENT: Gtk
#COMMENT: A GtkListBox is a vertical container that contains GtkListBoxRow
children. These rows can by dynamically sorted and filtered, and
headers can be added dynamically depending on the row content.
It also allows keyboard and mouse navigation and selection like
a typical list.

Using GtkListBox is often an alternative to #GtkTreeView, especially
when the list contents has a more complicated layout than what is allowed
by a #GtkCellRenderer, or when the contents is interactive (i.e. has a
button in it).

Although a #GtkListBox must have only #GtkListBoxRow children you can
add any kind of widget to it via gtk_container_add(), and a #GtkListBoxRow
widget will automatically be inserted between the list and the widget.

#GtkListBoxRows can be marked as activatable or selectable. If a row
is activatable, #GtkListBox::row-activated will be emitted for it when
the user tries to activate it. If it is selectable, the row will be marked
as selected when the user tries to select it.

The GtkListBox widget was added in GTK+ 3.10.
#NAME: get_text_orientation
#PARENT: Gtk.ToolShellIface.get_text_orientation.get_text_orientation
#COMMENT: the current text orientation of @shell
#NAME: drag-motion
#PARENT: Gtk.Widget
#COMMENT: The ::drag-motion signal is emitted on the drop site when the user
moves the cursor over the widget during a drag. The signal handler
must determine whether the cursor position is in a drop zone or not.
If it is not in a drop zone, it returns %FALSE and no further processing
is necessary. Otherwise, the handler returns %TRUE. In this case, the
handler is responsible for providing the necessary information for
displaying feedback to the user, by calling gdk_drag_status().

If the decision whether the drop will be accepted or rejected can't be
made based solely on the cursor position and the type of the data, the
handler may inspect the dragged data by calling gtk_drag_get_data() and
defer the gdk_drag_status() call to the #GtkWidget::drag-data-received
handler. Note that you cannot not pass #GTK_DEST_DEFAULT_DROP,
#GTK_DEST_DEFAULT_MOTION or #GTK_DEST_DEFAULT_ALL to gtk_drag_dest_set()
when using the drag-motion signal that way.

Also note that there is no drag-enter signal. The drag receiver has to
keep track of whether he has received any drag-motion signals since the
last #GtkWidget::drag-leave and if not, treat the drag-motion signal as
an "enter" signal. Upon an "enter", the handler will typically highlight
the drop site with gtk_drag_highlight().
|[<!-- language="C" -->
static void
drag_motion (GtkWidget      *widget,
             GdkDragContext *context,
             gint            x,
             gint            y,
             guint           time)
{
  GdkAtom target;

  PrivateData *private_data = GET_PRIVATE_DATA (widget);

  if (!private_data->drag_highlight)
   {
     private_data->drag_highlight = 1;
     gtk_drag_highlight (widget);
   }

  target = gtk_drag_dest_find_target (widget, context, NULL);
  if (target == GDK_NONE)
    gdk_drag_status (context, 0, time);
  else
   {
     private_data->pending_status
        = gdk_drag_context_get_suggested_action (context);
     gtk_drag_get_data (widget, context, target, time);
   }

  return TRUE;
}

static void
drag_data_received (GtkWidget        *widget,
                    GdkDragContext   *context,
                    gint              x,
                    gint              y,
                    GtkSelectionData *selection_data,
                    guint             info,
                    guint             time)
{
  PrivateData *private_data = GET_PRIVATE_DATA (widget);

  if (private_data->suggested_action)
   {
     private_data->suggested_action = 0;

     // We are getting this data due to a request in drag_motion,
     // rather than due to a request in drag_drop, so we are just
     // supposed to call gdk_drag_status(), not actually paste in
     // the data.

     str = gtk_selection_data_get_text (selection_data);
     if (!data_is_acceptable (str))
       gdk_drag_status (context, 0, time);
     else
       gdk_drag_status (context,
                        private_data->suggested_action,
                        time);
   }
  else
   {
     // accept the drop
   }
}
]|
#NAME: get_valist
#PARENT: Gtk.ThemingEngine
#COMMENT: Retrieves several style property values that apply to the currently
rendered element.
#NAME: font_button
#PARENT: Gtk.FontButton.set_use_font.none
#COMMENT: a #GtkFontButton
#NAME: adjustment
#PARENT: Gtk.VScrollbar.new.Widget
#COMMENT: the #GtkAdjustment to use, or %NULL to create a new adjustment
#NAME: secondary-icon-tooltip-text
#PARENT: Gtk.Entry
#COMMENT: The contents of the tooltip on the secondary icon.

Also see gtk_entry_set_icon_tooltip_text().
#NAME: area
#PARENT: Gtk.CellAreaClass.event.event.gint
#COMMENT: a #GtkCellArea
#NAME: chooser
#PARENT: Gtk.FileChooser.get_create_folders.gboolean
#COMMENT: a #GtkFileChooser
#NAME: iter
#PARENT: Gtk.TextIter.forward_visible_lines.gboolean
#COMMENT: a #GtkTextIter
#NAME: event_box
#PARENT: Gtk.EventBox.get_above_child.gboolean
#COMMENT: a #GtkEventBox
#NAME: previous_toplevel
#PARENT: Gtk.Widget.hierarchy-changed.none
#COMMENT: the previous toplevel ancestor, or %NULL
  if the widget was previously unanchored
#NAME: rc_parse_state
#PARENT: Gtk.rc_parse_state
#COMMENT: %G_TOKEN_NONE if parsing succeeded, otherwise the token
  that was expected but not found.
#NAME: get_page_size
#PARENT: Gtk.Adjustment
#COMMENT: Retrieves the page size of the adjustment.
#NAME: set_from_stock
#PARENT: Gtk.StatusIcon
#COMMENT: Makes @status_icon display the stock icon with the id @stock_id.
See gtk_status_icon_new_from_stock() for details.
#NAME: get_n_columns
#PARENT: Gtk.TreeModelIface.get_n_columns.get_n_columns
#COMMENT: the number of columns
#NAME: icon_size
#PARENT: Gtk.Action.create_icon.Widget
#COMMENT: the size of the icon that should be created.
#NAME: get_ellipsize
#PARENT: Gtk.Label
#COMMENT: Returns the ellipsizing position of the label. See gtk_label_set_ellipsize().
#NAME: manager
#PARENT: Gtk.UIManager.get_widget.Widget
#COMMENT: a #GtkUIManager
#NAME: get_has_stencil_buffer
#PARENT: Gtk.GLArea.get_has_stencil_buffer
#COMMENT: %TRUE if the @area has a stencil buffer, %FALSE otherwise
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_popup_accessible.Atk.Object
#COMMENT: a #GtkComboBox
#NAME: unset_model_drag_source
#PARENT: Gtk.IconView
#COMMENT: Undoes the effect of gtk_icon_view_enable_model_drag_source(). Calling this
method sets #GtkIconView:reorderable to %FALSE.
#NAME: drag_source
#PARENT: Gtk.TreeDragSourceIface.drag_data_delete.drag_data_delete.gboolean
#COMMENT: a #GtkTreeDragSource
#NAME: button
#PARENT: Gtk.MenuToolButton.set_arrow_tooltip_text.none
#COMMENT: a #GtkMenuToolButton
#NAME: key
#PARENT: Gtk.PrintSettings.get_int_with_default.gint
#COMMENT: a key
#NAME: get_related_action
#PARENT: Gtk.Activatable.get_related_action
#COMMENT: the related #GtkAction if one is set.
#NAME: set_has_frame
#PARENT: Gtk.Entry
#COMMENT: Sets whether the entry has a beveled frame around it.
#NAME: data
#PARENT: Gtk.Assistant.set_forward_page_func.none
#COMMENT: user data for @page_func
#NAME: delete_selection
#PARENT: Gtk.TextBuffer.delete_selection
#COMMENT: whether there was a non-empty selection to delete
#NAME: buffer_to_window_coords
#PARENT: Gtk.TextView
#COMMENT: Converts coordinate (@buffer_x, @buffer_y) to coordinates for the window
@win, and stores the result in (@window_x, @window_y).

Note that you can’t convert coordinates for a nonexisting window (see
gtk_text_view_set_border_window_size()).
#NAME: set_current_uri
#PARENT: Gtk.RecentChooser
#COMMENT: Sets @uri as the current URI for @chooser.
#NAME: drag_set_icon_default
#PARENT: Gtk
#COMMENT: Sets the icon for a particular drag to the default
icon.
#NAME: clipboard
#PARENT: Gtk.Clipboard.request_rich_text.none
#COMMENT: a #GtkClipboard
#NAME: HSV
#PARENT: Gtk
#COMMENT: #GtkHSV is the “color wheel” part of a complete color selector widget.
It allows to select a color by determining its HSV components in an
intuitive way. Moving the selection around the outer ring changes the hue,
and moving the selection point inside the inner triangle changes value and
saturation.

#GtkHSV has been deprecated together with #GtkColorSelection, where
it was used.
#NAME: reorderable
#PARENT: Gtk.IconView
#COMMENT: The reorderable property specifies if the items can be reordered
by DND.
#NAME: get_completion_prefix
#PARENT: Gtk.EntryCompletion.get_completion_prefix
#COMMENT: the prefix for the current completion
#NAME: path
#PARENT: Gtk.TreeViewMappingFunc.none
#COMMENT: The path that’s expanded
#NAME: widget
#PARENT: Gtk.Widget.get_hexpand.gboolean
#COMMENT: the widget
#NAME: assistant
#PARENT: Gtk.Assistant.get_page_title.utf8
#COMMENT: a #GtkAssistant
#NAME: color
#PARENT: Gtk.ThemingEngine.get_background_color.none
#COMMENT: return value for the background color
#NAME: preview_widget
#PARENT: Gtk.FileChooser.set_preview_widget.none
#COMMENT: widget for displaying preview.
#NAME: var_args
#PARENT: Gtk.CellArea.cell_set_valist.none
#COMMENT: a %NULL-terminated list of property names and values, starting
          with @first_prop_name
#NAME: action
#PARENT: Gtk.Action.get_gicon.Gio.Icon
#COMMENT: a #GtkAction
#NAME: get_homogeneous
#PARENT: Gtk.Box.get_homogeneous
#COMMENT: %TRUE if the box is homogeneous.
#NAME: get_valign
#PARENT: Gtk.Widget
#COMMENT: Gets the value of the #GtkWidget:valign property.

For backwards compatibility reasons this method will never return
%GTK_ALIGN_BASELINE, but instead it will convert it to
%GTK_ALIGN_FILL. If your widget want to support baseline aligned
children it must use gtk_widget_get_valign_with_baseline(), or
`g_object_get (widget, "valign", &value, NULL)`, which will
also report the true value.
#NAME: center
#PARENT: Gtk.BaselinePosition
#COMMENT: Center the baseline
#NAME: get_face_list
#PARENT: Gtk.FontSelection
#COMMENT: This returns the #GtkTreeView which lists all styles available for
the selected font. For example, “Regular”, “Bold”, etc.
#NAME: page
#PARENT: Gtk.Assistant.get_page_side_image.GdkPixbuf.Pixbuf
#COMMENT: a page of @assistant
#NAME: BindingSignal
#PARENT: Gtk
#COMMENT: A GtkBindingSignal stores the necessary information to
activate a widget in response to a key press via a signal
emission.
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_border_color.none
#COMMENT: a #GtkThemingEngine
#NAME: image-position
#PARENT: Gtk.Button
#COMMENT: The position of the image relative to the text inside the button.
#NAME: y
#PARENT: Gtk.paint_hline.none
#COMMENT: the y coordinate
#NAME: props
#PARENT: Gtk.StyleProperties.unset_property.none
#COMMENT: a #GtkStyleProperties
#NAME: width
#PARENT: Gtk.WidgetClass.get_preferred_height_and_baseline_for_width.get_preferred_height_and_baseline_for_width.none
#COMMENT: the width which is available for allocation, or -1 if none
#NAME: keycode
#PARENT: Gtk.accelerator_name_with_keycode.utf8
#COMMENT: accelerator keycode
#NAME: digits
#PARENT: Gtk.CellRendererSpin
#COMMENT: The number of decimal places to display.
#NAME: self
#PARENT: Gtk.NumerableIcon.set_count.none
#COMMENT: a #GtkNumerableIcon
#NAME: min
#PARENT: Gtk.Range.set_range.none
#COMMENT: minimum range value
#NAME: get_proxy_menu_item
#PARENT: Gtk.ToolItem
#COMMENT: If @menu_item_id matches the string passed to
gtk_tool_item_set_proxy_menu_item() return the corresponding #GtkMenuItem.

Custom subclasses of #GtkToolItem should use this function to
update their menu item when the #GtkToolItem changes. That the
@menu_item_ids must match ensures that a #GtkToolItem
will not inadvertently change a menu item that they did not create.
#NAME: child
#PARENT: Gtk.FlowBoxForeachFunc.none
#COMMENT: a #GtkFlowBoxChild
#NAME: set_max_width_chars
#PARENT: Gtk.Entry
#COMMENT: Sets the desired maximum width in characters of @entry.
#NAME: action
#PARENT: Gtk.Action.set_tooltip.none
#COMMENT: a #GtkAction
#NAME: pixbuf
#PARENT: Gtk.IconTheme.add_builtin_icon.none
#COMMENT: #GdkPixbuf that contains the image to use for @icon_name
#NAME: move_mark_onscreen
#PARENT: Gtk.TextView.move_mark_onscreen
#COMMENT: %TRUE if the mark moved (wasn’t already onscreen)
#NAME: STYLE_CLASS_HIGHLIGHT
#PARENT: Gtk
#COMMENT: A CSS class defining a highlighted area, such as headings in
assistants and calendars.

This is used in #GtkAssistant and #GtkCalendar.
#NAME: TreeStore
#PARENT: Gtk
#COMMENT: The #GtkTreeStore object is a list model for use with a #GtkTreeView
widget.  It implements the #GtkTreeModel interface, and consequentialy,
can use all of the methods available there.  It also implements the
#GtkTreeSortable interface so it can be sorted by the view.  Finally,
it also implements the tree
[drag and drop][gtk3-GtkTreeView-drag-and-drop]
interfaces.

# GtkTreeStore as GtkBuildable

The GtkTreeStore implementation of the #GtkBuildable interface allows
to specify the model columns with a <columns> element that may contain
multiple <column> elements, each specifying one model column. The “type”
attribute specifies the data type for the column.

An example of a UI Definition fragment for a tree store:
|[
<object class="GtkTreeStore">
  <columns>
    <column type="gchararray"/>
    <column type="gchararray"/>
    <column type="gint"/>
  </columns>
</object>
]|
#NAME: get_x_offset
#PARENT: Gtk.TreeViewColumn.get_x_offset
#COMMENT: The current X offset of @tree_column.
#NAME: str
#PARENT: Gtk.Label.set_markup.none
#COMMENT: a markup string (see [Pango markup format][PangoMarkupFormat])
#NAME: parent
#PARENT: Gtk.PrintOperation.preview.gboolean
#COMMENT: the #GtkWindow to use as window parent, or %NULL
#NAME: label
#PARENT: Gtk.Action.set_label.none
#COMMENT: the label text to set
#NAME: cell_layout
#PARENT: Gtk.CellLayout.clear.none
#COMMENT: a #GtkCellLayout
#NAME: cell_area
#PARENT: Gtk.CellAllocCallback.gboolean
#COMMENT: the area allocated to @renderer inside the rectangle
    provided to gtk_cell_area_foreach_alloc().
#NAME: add_button
#PARENT: Gtk.InfoBar
#COMMENT: Adds a button with the given text and sets things up so that
clicking the button will emit the “response” signal with the given
response_id. The button is appended to the end of the info bars's
action area. The button widget is returned, but usually you don't
need it.
#NAME: button-press-event
#PARENT: Gtk.Widget.button-press-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: window
#PARENT: Gtk.Window.set_titlebar.none
#COMMENT: a #GtkWindow
#NAME: natural_height
#PARENT: Gtk.CellAreaContextClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: location to store the natural height,
    or %NULL
#NAME: filename
#PARENT: Gtk.StatusIcon.set_from_file.none
#COMMENT: a filename
#NAME: table
#PARENT: Gtk.Table.set_row_spacing.none
#COMMENT: a #GtkTable containing the row whose properties you wish to change.
#NAME: get_text
#PARENT: Gtk.TextBuffer.get_text
#COMMENT: an allocated UTF-8 string
#NAME: accelerator
#PARENT: Gtk.accelerator_parse.none
#COMMENT: string representing an accelerator
#NAME: right
#PARENT: Gtk.Border
#COMMENT: The width of the right border
#NAME: new_for_manager
#PARENT: Gtk.RecentAction
#COMMENT: Creates a new #GtkRecentAction object. To add the action to
a #GtkActionGroup and set the accelerator for the action,
call gtk_action_group_add_action_with_accel().
#NAME: height
#PARENT: Gtk.paint_tab.none
#COMMENT: the height of the rectangle to draw the tab in
#NAME: select_item
#PARENT: Gtk.MenuShell
#COMMENT: Selects the menu item from the menu shell.
#NAME: get_pixbuf
#PARENT: Gtk.TextIter.get_pixbuf
#COMMENT: the pixbuf at @iter
#NAME: append_index
#PARENT: Gtk.TreePath
#COMMENT: Appends a new index to a path.

As a result, the depth of the path is increased.
#NAME: model
#PARENT: Gtk.TreeSelection.get_selected.gboolean
#COMMENT: A pointer to set to the #GtkTreeModel, or NULL.
#NAME: model
#PARENT: Gtk.TreeSelection.get_selected_rows.TreePath
#COMMENT: A pointer to set to the #GtkTreeModel, or %NULL.
#NAME: event
#PARENT: Gtk.Widget.proximity-in-event.gboolean
#COMMENT: the #GdkEventProximity which triggered
  this signal.
#NAME: window
#PARENT: Gtk.Gesture
#COMMENT: If non-%NULL, the gesture will only listen for events that happen on
this #GdkWindow, or a child of it.
#NAME: get_tab_pos
#PARENT: Gtk.Notebook.get_tab_pos
#COMMENT: the edge at which the tabs are drawn
#NAME: position
#PARENT: Gtk.ToolPalette.set_group_position.none
#COMMENT: a new index for group
#NAME: drag-end
#PARENT: Gtk.Widget
#COMMENT: The ::drag-end signal is emitted on the drag source when a drag is
finished.  A typical reason to connect to this signal is to undo
things done in #GtkWidget::drag-begin.
#NAME: radio
#PARENT: Gtk.ButtonRole
#COMMENT: A radio button
#NAME: CssProviderError
#PARENT: Gtk
#COMMENT: Error codes for %GTK_CSS_PROVIDER_ERROR.
#NAME: icon_name
#PARENT: Gtk.IconTheme.load_icon.GdkPixbuf.Pixbuf
#COMMENT: the name of the icon to lookup
#NAME: set_top_margin
#PARENT: Gtk.PageSetup
#COMMENT: Sets the top margin of the #GtkPageSetup.
#NAME: action
#PARENT: Gtk.ToggleActionClass.toggled.toggled.none
#COMMENT: the action object
#NAME: get_max_children_per_line
#PARENT: Gtk.FlowBox.get_max_children_per_line
#COMMENT: the maximum number of children per line
#NAME: bar
#PARENT: Gtk.SearchBar.set_search_mode.none
#COMMENT: a #GtkSearchBar
#NAME: window
#PARENT: Gtk.Window.get_mnemonic_modifier.Gdk.ModifierType
#COMMENT: a #GtkWindow
#NAME: get_screen
#PARENT: Gtk.StyleContext
#COMMENT: Returns the #GdkScreen to which @context is attached.
#NAME: count
#PARENT: Gtk.TextIter.forward_cursor_positions.gboolean
#COMMENT: number of positions to move
#NAME: get_tooltip_column
#PARENT: Gtk.IconView
#COMMENT: Returns the column of @icon_view’s model which is being used for
displaying tooltips on @icon_view’s rows.
#NAME: set_item_padding
#PARENT: Gtk.IconView
#COMMENT: Sets the #GtkIconView:item-padding property which specifies the padding
around each of the icon view’s items.
#NAME: has_group
#PARENT: Gtk.Window
#COMMENT: Returns whether @window has an explicit window group.
#NAME: drag_source_set
#PARENT: Gtk.Widget
#COMMENT: Sets up a widget so that GTK+ will start a drag operation when the user
clicks and drags on the widget. The widget must have a window.
#NAME: cr
#PARENT: Gtk.render_check.none
#COMMENT: a #cairo_t
#NAME: buffer
#PARENT: Gtk.EntryBuffer.set_text.none
#COMMENT: a #GtkEntryBuffer
#NAME: height
#PARENT: Gtk.Window.resize_to_geometry.none
#COMMENT: height in resize increments to resize the window to
#NAME: manager
#PARENT: Gtk.RecentAction.new_for_manager.Action
#COMMENT: a #GtkRecentManager, or %NULL for using the default
  #GtkRecentManager
#NAME: get_image
#PARENT: Gtk.MessageDialog.get_image
#COMMENT: the dialog’s image
#NAME: use-font
#PARENT: Gtk.FontButton
#COMMENT: If this property is set to %TRUE, the label will be drawn
in the selected font.
#NAME: get_user_data
#PARENT: Gtk.TreeSelection.get_user_data
#COMMENT: The user data.
#NAME: path
#PARENT: Gtk.TreeView.get_cursor.none
#COMMENT: A pointer to be
  filled with the current cursor path, or %NULL
#NAME: TreeViewDropPosition
#PARENT: Gtk
#COMMENT: An enum for determining where a dropped row goes.
#NAME: load_surface
#PARENT: Gtk.IconTheme.load_surface
#COMMENT: the rendered icon; this may be
    a newly created icon or a new reference to an internal icon, so
    you must not modify the icon. Use cairo_surface_destroy() to
    release your reference to the icon. %NULL if the icon isn’t
    found.
#NAME: get_active
#PARENT: Gtk.ToggleToolButton
#COMMENT: Queries a #GtkToggleToolButton and returns its current state.
Returns %TRUE if the toggle button is pressed in and %FALSE if it is raised.
#NAME: test_find_widget
#PARENT: Gtk.test_find_widget
#COMMENT: a valid widget if any is found or %NULL.
#NAME: set_right_margin
#PARENT: Gtk.PageSetup
#COMMENT: Sets the right margin of the #GtkPageSetup.
#NAME: Separator
#PARENT: Gtk
#COMMENT: GtkSeparator is a horizontal or vertical separator widget, depending on the
value of the #GtkOrientable:orientation property, used to group the widgets
within a window. It displays a line with a shadow to make it appear sunken
into the interface.
#NAME: binding_set
#PARENT: Gtk.BindingEntry.add_signal.none
#COMMENT: a #GtkBindingSet to install an entry for
#NAME: tooltip
#PARENT: Gtk.Tooltip.set_icon_from_icon_name.none
#COMMENT: a #GtkTooltip
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.rows_reordered.rows_reordered.none
#COMMENT: a #GtkTreeModel
#NAME: auto
#PARENT: Gtk.UIManagerItemType
#COMMENT: Pick the type of the UI element according to context.
#NAME: value
#PARENT: Gtk.CellRendererProgress
#COMMENT: The "value" property determines the percentage to which the
progress bar will be "filled in".
#NAME: device_is_shadowed
#PARENT: Gtk.Widget
#COMMENT: Returns %TRUE if @device has been shadowed by a GTK+
device grab on another widget, so it would stop sending
events to @widget. This may be used in the
#GtkWidget::grab-notify signal to check for specific
devices. See gtk_device_grab_add().
#NAME: set_copyright
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the copyright string to display in the about dialog.
This should be a short string of one or two lines.
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_active_id.utf8
#COMMENT: a #GtkComboBox
#NAME: start_editing
#PARENT: Gtk.CellRenderer.start_editing
#COMMENT: A new #GtkCellEditable, or %NULL
#NAME: deactivate
#PARENT: Gtk.MenuShell
#COMMENT: This signal is emitted when a menu shell is deactivated.
#NAME: embed
#PARENT: Gtk.PrintOperation.set_embed_page_setup.none
#COMMENT: %TRUE to embed page setup selection in the #GtkPrintUnixDialog
#NAME: n_chars
#PARENT: Gtk.EntryBufferClass.delete_text.delete_text.guint
#COMMENT: number of characters to delete
#NAME: get_drag_target_item
#PARENT: Gtk.ToolPalette.get_drag_target_item
#COMMENT: the #GtkTargetEntry for a dragged item.
#NAME: layout
#PARENT: Gtk.render_insertion_cursor.none
#COMMENT: the #PangoLayout of the text
#NAME: widget
#PARENT: Gtk.CellArea.get_cell_allocation.none
#COMMENT: the #GtkWidget that @area is rendering on
#NAME: STOCK_SELECT_FONT
#PARENT: Gtk
#COMMENT: The “Font” item and icon.
#NAME: activate
#PARENT: Gtk.CellRenderer.activate
#COMMENT: %TRUE if the event was consumed/handled
#NAME: new_from_stock
#PARENT: Gtk.ToggleToolButton
#COMMENT: Creates a new #GtkToggleToolButton containing the image and text from a
stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
and #GTK_STOCK_APPLY.

It is an error if @stock_id is not a name of a stock item.
#NAME: result
#PARENT: Gtk.Widget.drag-failed.gboolean
#COMMENT: the result of the drag operation
#NAME: iter_has_qregion
#PARENT: Gtk.WidgetPath
#COMMENT: See gtk_widget_path_iter_has_region(). This is a version that operates
with GQuarks.
#NAME: get_style_context
#PARENT: Gtk.NumerableIcon.get_style_context
#COMMENT: a #GtkStyleContext, or %NULL.
    This object is internal to GTK+ and should not be unreffed.
    Use g_object_ref() if you want to keep it around
#NAME: gtk-file-chooser-backend
#PARENT: Gtk.Settings
#COMMENT: Name of the GtkFileChooser backend to use by default.
#NAME: provider
#PARENT: Gtk.StyleContext.remove_provider.none
#COMMENT: a #GtkStyleProvider
#NAME: box
#PARENT: Gtk.FlowBox.insert.none
#COMMENT: a #GtkFlowBox
#NAME: get_paper_height
#PARENT: Gtk.PrintSettings.get_paper_height
#COMMENT: the paper height, in units of @unit
#NAME: add_pattern
#PARENT: Gtk.RecentFilter
#COMMENT: Adds a rule that allows resources based on a pattern matching their
display name.
#NAME: set_tooltip_row
#PARENT: Gtk.TreeView
#COMMENT: Sets the tip area of @tooltip to be the area covered by the row at @path.
See also gtk_tree_view_set_tooltip_column() for a simpler alternative.
See also gtk_tooltip_set_tip_area().
#NAME: cairo_should_draw_window
#PARENT: Gtk.cairo_should_draw_window
#COMMENT: %TRUE if @window should be drawn
#NAME: paint_arrow
#PARENT: Gtk
#COMMENT: Draws an arrow in the given rectangle on @cr using the given
parameters. @arrow_type determines the direction of the arrow.
#NAME: expander
#PARENT: Gtk.Expander.get_spacing.gint
#COMMENT: a #GtkExpander
#NAME: cell
#PARENT: Gtk.IconView.get_item_at_pos.gboolean
#COMMENT: Return location for the renderer
  responsible for the cell at (@x, @y), or %NULL
#NAME: get_decorated
#PARENT: Gtk.Window
#COMMENT: Returns whether the window has been set to have decorations
such as a title bar via gtk_window_set_decorated().
#NAME: where
#PARENT: Gtk.TextBuffer.add_mark.none
#COMMENT: location to place mark
#NAME: natural-height
#PARENT: Gtk.CellAreaContext
#COMMENT: The natural height for the #GtkCellArea in this context
for all #GtkTreeModel rows that this context was requested
for using gtk_cell_area_get_preferred_height().
#NAME: iter
#PARENT: Gtk.TreeStore.move_after.none
#COMMENT: A #GtkTreeIter.
#NAME: get_single_line_mode
#PARENT: Gtk.Label.get_single_line_mode
#COMMENT: %TRUE when the label is in single line mode.
#NAME: get_items
#PARENT: Gtk.RecentManager.get_items
#COMMENT: a list of
  newly allocated #GtkRecentInfo objects. Use
  gtk_recent_info_unref() on each item inside the list, and then
  free the list itself using g_list_free().
#NAME: table
#PARENT: Gtk.TextTagTable.remove.none
#COMMENT: a #GtkTextTagTable
#NAME: cell
#PARENT: Gtk.CellRendererClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: a #GtkCellRenderer instance
#NAME: center_on_parent
#PARENT: Gtk.WindowPosition
#COMMENT: Center the window on its transient
 parent (see gtk_window_set_transient_for()).
#NAME: template_mismatch
#PARENT: Gtk.BuilderError
#COMMENT: The wrong type was specified in a composite class’s template XML
#NAME: Misc
#PARENT: Gtk
#COMMENT: The #GtkMisc widget is an abstract widget which is not useful itself, but
is used to derive subclasses which have alignment and padding attributes.

The horizontal and vertical padding attributes allows extra space to be
added around the widget.

The horizontal and vertical alignment attributes enable the widget to be
positioned within its allocated area. Note that if the widget is added to
a container in such a way that it expands automatically to fill its
allocated area, the alignment settings will not alter the widget's position.

Note that the desired effect can in most cases be achieved by using the
#GtkWidget:halign, #GtkWidget:valign and #GtkWidget:margin properties
on the child widget, so GtkMisc should not be used in new code. To reflect
this fact, all #GtkMisc API has been deprecated.
#NAME: entry
#PARENT: Gtk.Entry.set_icon_tooltip_markup.none
#COMMENT: a #GtkEntry
#NAME: Grid
#PARENT: Gtk
#COMMENT: GtkGrid is a container which arranges its child widgets in
rows and columns. It is a very similar to #GtkTable and #GtkBox,
but it consistently uses #GtkWidget’s #GtkWidget:margin and #GtkWidget:expand
properties instead of custom child properties, and it fully supports
[height-for-width geometry management][geometry-management].

Children are added using gtk_grid_attach(). They can span multiple
rows or columns. It is also possible to add a child next to an
existing child, using gtk_grid_attach_next_to(). The behaviour of
GtkGrid when several children occupy the same grid cell is undefined.

GtkGrid can be used like a #GtkBox by just using gtk_container_add(),
which will place children next to each other in the direction determined
by the #GtkOrientable:orientation property.
#NAME: inside_word
#PARENT: Gtk.TextIter
#COMMENT: Determines whether the character pointed by @iter is part of a
natural-language word (as opposed to say inside some whitespace).  Word
breaks are determined by Pango and should be correct for nearly any language
(if not, the correct fix would be to the Pango word break algorithms).

Note that if gtk_text_iter_starts_word() returns %TRUE, then this function
returns %TRUE too, since @iter points to the first character of the word.
#NAME: get_preferred_height
#PARENT: Gtk.Widget
#COMMENT: Retrieves a widget’s initial minimum and natural height.

This call is specific to width-for-height requests.

The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroups that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.
#NAME: drag_data_get
#PARENT: Gtk.TreeDragSourceIface.drag_data_get.drag_data_get
#COMMENT: %TRUE if data of the required type was provided
#NAME: new_with_color
#PARENT: Gtk.ColorButton
#COMMENT: Creates a new color button.
#NAME: get_show_preview_entry
#PARENT: Gtk.FontChooser.get_show_preview_entry
#COMMENT: %TRUE if the preview entry is shown
    or %FALSE if it is hidden.
#NAME: forward_visible_line
#PARENT: Gtk.TextIter.forward_visible_line
#COMMENT: whether @iter can be dereferenced
#NAME: shell
#PARENT: Gtk.ToolShellIface.get_text_alignment.get_text_alignment.gfloat
#COMMENT: a #GtkToolShell
#NAME: minimum_width
#PARENT: Gtk.Widget.get_preferred_width_for_height.none
#COMMENT: location for storing the minimum width, or %NULL
#NAME: paint_flat_box
#PARENT: Gtk
#COMMENT: Draws a flat box on @cr with the given parameters.
#NAME: context
#PARENT: Gtk.render_background.none
#COMMENT: a #GtkStyleContext
#NAME: set_visibility
#PARENT: Gtk.Entry
#COMMENT: Sets whether the contents of the entry are visible or not.
When visibility is set to %FALSE, characters are displayed
as the invisible char, and will also appear that way when
the text in the entry widget is copied elsewhere.

By default, GTK+ picks the best invisible character available
in the current font, but it can be changed with
gtk_entry_set_invisible_char().

Note that you probably want to set #GtkEntry:input-purpose
to %GTK_INPUT_PURPOSE_PASSWORD or %GTK_INPUT_PURPOSE_PIN to
inform input methods about the purpose of this entry,
in addition to setting visibility to %FALSE.
#NAME: IconViewForeachFunc
#PARENT: Gtk
#COMMENT: A function used by gtk_icon_view_selected_foreach() to map all
selected rows.  It will be called on every selected row in the view.
#NAME: new
#PARENT: Gtk.ToggleToolButton
#COMMENT: Returns a new #GtkToggleToolButton
#NAME: widget
#PARENT: Gtk.Widget.modify_text.none
#COMMENT: a #GtkWidget
#NAME: override_color
#PARENT: Gtk.Widget
#COMMENT: Sets the color to use for a widget.

All other style values are left untouched.

This function does not act recursively. Setting the color of a
container does not affect its children. Note that some widgets that
you may not think of as containers, for instance #GtkButtons,
are actually containers.

This API is mostly meant as a quick way for applications to
change a widget appearance. If you are developing a widgets
library and intend this change to be themeable, it is better
done by setting meaningful CSS classes and regions in your
widget/container implementation through gtk_style_context_add_class()
and gtk_style_context_add_region().

This way, your widget library can install a #GtkCssProvider
with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
to provide a default styling for those widgets that need so, and
this theming may fully overridden by the user’s theme.

Note that for complex widgets this may bring in undesired
results (such as uniform background color everywhere), in
these cases it is better to fully style such widgets through a
#GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
priority.
#NAME: pixel_size
#PARENT: Gtk.Image.set_pixel_size.none
#COMMENT: the new pixel size
#NAME: layout
#PARENT: Gtk.render_layout.none
#COMMENT: the #PangoLayout to render
#NAME: about
#PARENT: Gtk.AboutDialog.get_license_type.License
#COMMENT: a #GtkAboutDialog
#NAME: width
#PARENT: Gtk.Window.resize.none
#COMMENT: width in pixels to resize the window to
#NAME: new
#PARENT: Gtk.ListBox
#COMMENT: Creates a new #GtkListBox container.
#NAME: focusable_widgets
#PARENT: Gtk.Container.get_focus_chain.gboolean
#COMMENT: location
                    to store the focus chain of the
                    container, or %NULL. You should free this list
                    using g_list_free() when you are done with it, however
                    no additional reference count is added to the
                    individual widgets in the focus chain.
#NAME: value
#PARENT: Gtk.Style.get_style_property.none
#COMMENT: a #GValue where the value of the property being
    queried will be stored
#NAME: set_translate_func
#PARENT: Gtk.ActionGroup
#COMMENT: Sets a function to be used for translating the @label and @tooltip of
#GtkActionEntrys added by gtk_action_group_add_actions().

If you’re using gettext(), it is enough to set the translation domain
with gtk_action_group_set_translation_domain().
#NAME: builder
#PARENT: Gtk.Buildable.custom_finished.none
#COMMENT: a #GtkBuilder
#NAME: grid
#PARENT: Gtk.Grid.set_column_spacing.none
#COMMENT: a #GtkGrid
#NAME: title
#PARENT: Gtk.FileChooserButton
#COMMENT: Title to put on the #GtkFileChooserDialog associated with the button.
#NAME: get_embedded_rect
#PARENT: Gtk.IconInfo.get_embedded_rect
#COMMENT: %FALSE
#NAME: get_permission
#PARENT: Gtk.LockButton
#COMMENT: Obtains the #GPermission object that controls @button.
#NAME: set_interactive_debugging
#PARENT: Gtk.Window
#COMMENT: Opens or closes the [interactive debugger][interactive-debugging],
which offers access to the widget hierarchy of the application
and to useful debugging tools.
#NAME: frame
#PARENT: Gtk.Frame.set_label.none
#COMMENT: a #GtkFrame
#NAME: add_focus_sibling
#PARENT: Gtk.CellArea
#COMMENT: Adds @sibling to @renderer’s focusable area, focus will be drawn
around @renderer and all of its siblings if @renderer can
focus for a given row.

Events handled by focus siblings can also activate the given
focusable @renderer.
#NAME: user_data
#PARENT: Gtk.ListBox.bind_model.none
#COMMENT: user data passed to @create_widget_func
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_reorderable.none
#COMMENT: A #GtkTreeViewColumn
#NAME: length
#PARENT: Gtk.Builder.add_objects_from_string.guint
#COMMENT: the length of @buffer (may be -1 if @buffer is nul-terminated)
#NAME: tblr
#PARENT: Gtk.NumberUpLayout
#COMMENT: ![](layout-tblr.png)
#NAME: len
#PARENT: Gtk.SelectionData.set_text.gboolean
#COMMENT: the length of @str, or -1 if @str is nul-terminated.
#NAME: tree_store
#PARENT: Gtk.TreeStore.remove.gboolean
#COMMENT: A #GtkTreeStore
#NAME: get_font_name
#PARENT: Gtk.FontButton.get_font_name
#COMMENT: an internal copy of the font name which must not be freed.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_columns.TreeViewColumn
#COMMENT: A #GtkTreeView
#NAME: tree_view
#PARENT: Gtk.TreeView.get_model.TreeModel
#COMMENT: a #GtkTreeView
#NAME: model
#PARENT: Gtk.MenuShell.bind_model.none
#COMMENT: the #GMenuModel to bind to or %NULL to remove
  binding
#NAME: label
#PARENT: Gtk.Label.set_lines.none
#COMMENT: a #GtkLabel
#NAME: next
#PARENT: Gtk.MenuDirectionType
#COMMENT: To the next menu item
#NAME: base
#PARENT: Gtk.Style
#COMMENT: Set of base #GdkColor
#NAME: target
#PARENT: Gtk.selection_convert.gboolean
#COMMENT: Form of information desired (e.g., STRING)
#NAME: local_only
#PARENT: Gtk.RecentChooser.set_local_only.none
#COMMENT: %TRUE if only local files can be shown
#NAME: tool_item
#PARENT: Gtk.ToolItem.set_tooltip_markup.none
#COMMENT: a #GtkToolItem
#NAME: event
#PARENT: Gtk.Widget.focus-in-event.gboolean
#COMMENT: the #GdkEventFocus which triggered
  this signal.
#NAME: size
#PARENT: Gtk.Button.new_from_icon_name.Widget
#COMMENT: an icon size
#NAME: get_page_title
#PARENT: Gtk.Assistant
#COMMENT: Gets the title for @page.
#NAME: add_objects_from_file
#PARENT: Gtk.Builder
#COMMENT: Parses a file containing a [GtkBuilder UI definition][BUILDER-UI]
building only the requested objects and merges
them with the current contents of @builder.

Upon errors 0 will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_FILE_ERROR
domain.

If you are adding an object that depends on an object that is not
its child (for instance a #GtkTreeView that depends on its
#GtkTreeModel), you have to explicitly list all of them in @object_ids.
#NAME: self
#PARENT: Gtk.AppChooserWidget.set_show_default.none
#COMMENT: a #GtkAppChooserWidget
#NAME: set_header
#PARENT: Gtk.ListBoxRow
#COMMENT: Sets the current header of the @row. This is only allowed to be called
from a #GtkListBoxUpdateHeaderFunc. It will replace any existing
header in the row, and be shown in front of the row in the listbox.
#NAME: get_iter
#PARENT: Gtk.TreeModel.get_iter
#COMMENT: %TRUE, if @iter was set
#NAME: add_buttons
#PARENT: Gtk.InfoBar
#COMMENT: Adds more buttons, same as calling gtk_info_bar_add_button()
repeatedly. The variable argument list should be %NULL-terminated
as with gtk_info_bar_new_with_buttons(). Each button must have both
text and response ID.
#NAME: buffer
#PARENT: Gtk.TextBufferClass.insert_pixbuf.insert_pixbuf.none
#COMMENT: a #GtkTextBuffer
#NAME: new_from_stock
#PARENT: Gtk.ToolButton
#COMMENT: Creates a new #GtkToolButton containing the image and text from a
stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
and #GTK_STOCK_APPLY.

It is an error if @stock_id is not a name of a stock item.
#NAME: action
#PARENT: Gtk.Action.set_icon_name.none
#COMMENT: a #GtkAction
#NAME: action_name
#PARENT: Gtk.ActionGroup.get_action.Action
#COMMENT: the name of the action
#NAME: item
#PARENT: Gtk.Toolbar.get_item_index.gint
#COMMENT: a #GtkToolItem that is a child of @toolbar
#NAME: new_from_stock
#PARENT: Gtk.ImageMenuItem
#COMMENT: Creates a new #GtkImageMenuItem containing the image and text from a
stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK
and #GTK_STOCK_APPLY.

If you want this menu item to have changeable accelerators, then pass in
%NULL for accel_group. Next call gtk_menu_item_set_accel_path() with an
appropriate path for the menu item, use gtk_stock_lookup() to look up the
standard accelerator for the stock item, and if one is found, call
gtk_accel_map_add_entry() to register it.
#NAME: handle_event
#PARENT: Gtk.SearchEntry.handle_event
#COMMENT: %GDK_EVENT_STOP if the key press event resulted
    in a search beginning or continuing, %GDK_EVENT_PROPAGATE
    otherwise.
#NAME: window
#PARENT: Gtk.Window.deiconify.none
#COMMENT: a #GtkWindow
#NAME: color-activated
#PARENT: Gtk.ColorChooser
#COMMENT: Emitted when a color is activated from the color chooser.
This usually happens when the user clicks a color swatch,
or a color is selected and the user presses one of the keys
Space, Shift+Space, Return or Enter.
#NAME: get_line_wrap_mode
#PARENT: Gtk.Label
#COMMENT: Returns line wrap mode used by the label. See gtk_label_set_line_wrap_mode().
#NAME: get_style_property
#PARENT: Gtk.ThemingEngine
#COMMENT: Gets the value for a widget style property.
#NAME: get_func
#PARENT: Gtk.Clipboard.set_with_data.gboolean
#COMMENT: function to call to get the actual clipboard data
#NAME: widget
#PARENT: Gtk.CellArea.get_preferred_height.none
#COMMENT: the #GtkWidget where @area will be rendering
#NAME: tool_item
#PARENT: Gtk.ToolItem.set_visible_vertical.none
#COMMENT: a #GtkToolItem
#NAME: double-buffered
#PARENT: Gtk.Widget
#COMMENT: Whether the widget is double buffered.
#NAME: scroll-event
#PARENT: Gtk.Widget
#COMMENT: The ::scroll-event signal is emitted when a button in the 4 to 7
range is pressed. Wheel mice are usually configured to generate
button press events for buttons 4 and 5 when the wheel is turned.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_SCROLL_MASK mask.

This signal will be sent to the grab widget if there is one.
#NAME: get_title
#PARENT: Gtk.Menu.get_title
#COMMENT: the title of the menu, or %NULL if the menu
    has no title set on it. This string is owned by GTK+
    and should not be modified or freed.
#NAME: new_from_surface
#PARENT: Gtk.Image.new_from_surface
#COMMENT: a new #GtkImage
#NAME: window
#PARENT: Gtk.Window.set_mnemonic_modifier.none
#COMMENT: a #GtkWindow
#NAME: var_args
#PARENT: Gtk.Container.child_get_valist.none
#COMMENT: return location for the first property, followed
    optionally by more name/return location pairs, followed by %NULL
#NAME: forall
#PARENT: Gtk.Container
#COMMENT: Invokes @callback on each child of @container, including children
that are considered “internal” (implementation details of the
container). “Internal” children generally weren’t added by the user
of the container, but were added by the container implementation
itself.  Most applications should use gtk_container_foreach(),
rather than gtk_container_forall().
#NAME: box
#PARENT: Gtk.ListBox.set_header_func.none
#COMMENT: a #GtkListBox
#NAME: hints
#PARENT: Gtk.TextView.set_input_hints.none
#COMMENT: the hints
#NAME: natural_baseline
#PARENT: Gtk.WidgetClass.get_preferred_height_and_baseline_for_width.get_preferred_height_and_baseline_for_width.none
#COMMENT: location for storing the baseline for the natural height, or %NULL
#NAME: widget
#PARENT: Gtk.Widget.queue_draw_area.none
#COMMENT: a #GtkWidget
#NAME: application
#PARENT: Gtk.Application.list_action_descriptions.utf8
#COMMENT: a #GtkApplication
#NAME: get_property
#PARENT: Gtk.StyleProperties.get_property
#COMMENT: %TRUE if the property exists in @props, %FALSE otherwise
#NAME: TextBuffer
#PARENT: Gtk
#COMMENT: You may wish to begin by reading the
[text widget conceptual overview][TextWidget]
which gives an overview of all the objects and data
types related to the text widget and how they work together.
#NAME: set_drag_dest_row
#PARENT: Gtk.TreeView
#COMMENT: Sets the row that is highlighted for feedback.
If @path is %NULL, an existing highlight is removed.
#NAME: get_text_area
#PARENT: Gtk.Entry
#COMMENT: Gets the area where the entry’s text is drawn. This function is
useful when drawing something to the entry in a draw callback.

If the entry is not realized, @text_area is filled with zeros.

See also gtk_entry_get_icon_area().
#NAME: icon_view
#PARENT: Gtk.IconView.get_item_column.gint
#COMMENT: a #GtkIconView
#NAME: get_spacing
#PARENT: Gtk.TreeViewColumn.get_spacing
#COMMENT: the spacing of @tree_column.
#NAME: STYLE_CLASS_TOOLBAR
#PARENT: Gtk
#COMMENT: A CSS class to match toolbars.

This is used in #GtkToolbar.
#NAME: scroll-child
#PARENT: Gtk.ScrolledWindow
#COMMENT: The ::scroll-child signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when a keybinding that scrolls is pressed.
The horizontal or vertical adjustment is updated which triggers a
signal that the scrolled windows child may listen to and scroll itself.
#NAME: info
#PARENT: Gtk.RecentInfo.get_description.utf8
#COMMENT: a #GtkRecentInfo
#NAME: set_column_types
#PARENT: Gtk.TreeStore
#COMMENT: This function is meant primarily for #GObjects that inherit from
#GtkTreeStore, and should only be used when constructing a new
#GtkTreeStore.  It will not function after a row has been added,
or a method on the #GtkTreeModel interface is called.
#NAME: progress_pulse
#PARENT: Gtk.Entry
#COMMENT: Indicates that some progress is made, but you don’t know how much.
Causes the entry’s progress indicator to enter “activity mode,”
where a block bounces back and forth. Each call to
gtk_entry_progress_pulse() causes the block to move by a little bit
(the amount of movement per pulse is determined by
gtk_entry_set_progress_pulse_step()).
#NAME: expander
#PARENT: Gtk.Expander.get_expanded.gboolean
#COMMENT: a #GtkExpander
#NAME: completion
#PARENT: Gtk.EntryCompletion.compute_prefix.utf8
#COMMENT: the entry completion
#NAME: list_store
#PARENT: Gtk.ListStore.set.none
#COMMENT: a #GtkListStore
#NAME: TextChildAnchor
#PARENT: Gtk
#COMMENT: A #GtkTextChildAnchor is a spot in the buffer where child widgets can
be “anchored” (inserted inline, as if they were characters). The anchor
can have multiple widgets anchored, to allow for multiple views.
#NAME: get_website_label
#PARENT: Gtk.AboutDialog.get_website_label
#COMMENT: The label used for the website link. The string is
    owned by the about dialog and must not be modified.
#NAME: arrow_type
#PARENT: Gtk.Arrow.set.none
#COMMENT: a valid #GtkArrowType.
#NAME: style
#PARENT: Gtk.Style.get_style_property.none
#COMMENT: a #GtkStyle
#NAME: lookup_callback_symbol
#PARENT: Gtk.Builder
#COMMENT: Fetches a symbol previously added to @builder
with gtk_builder_add_callback_symbols()

This function is intended for possible use in language bindings
or for any case that one might be cusomizing signal connections
using gtk_builder_connect_signals_full()
#NAME: user_data
#PARENT: Gtk.Builder.connect_signals.none
#COMMENT: user data to pass back with all signals
#NAME: STOCK_ABOUT
#PARENT: Gtk
#COMMENT: The “About” item.
![](help-about.png)
#NAME: x
#PARENT: Gtk.paint_arrow.none
#COMMENT: x origin of the rectangle to draw the arrow in
#NAME: rc_find_pixmap_in_path
#PARENT: Gtk
#COMMENT: Looks up a file in pixmap path for the specified #GtkSettings.
If the file is not found, it outputs a warning message using
g_warning() and returns %NULL.
#NAME: load_from_file
#PARENT: Gtk.CssProvider
#COMMENT: Loads the data contained in @file into @css_provider, making it
clear any previously loaded information.
#NAME: setting
#PARENT: Gtk.AppChooserWidget.set_show_default.none
#COMMENT: the new value for #GtkAppChooserWidget:show-default
#NAME: drag_unhighlight_row
#PARENT: Gtk.ListBox
#COMMENT: If a row has previously been highlighted via gtk_list_box_drag_highlight_row()
it will have the highlight removed.
#NAME: window
#PARENT: Gtk.Window.reshow_with_initial_size.none
#COMMENT: a #GtkWindow
#NAME: y
#PARENT: Gtk.paint_arrow.none
#COMMENT: y origin of the rectangle to draw the arrow in
#NAME: icon_set
#PARENT: Gtk.IconSet.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconSet
#NAME: tree_view
#PARENT: Gtk.TreeView.get_visible_range.gboolean
#COMMENT: A #GtkTreeView
#NAME: set_titlebar
#PARENT: Gtk.Window
#COMMENT: Sets a custom titlebar for @window.

If you set a custom titlebar, GTK+ will do its best to convince
the window manager not to put its own titlebar on the window.
Depending on the system, this function may not work for a window
that is already visible, so you set the titlebar before calling
gtk_widget_show().
#NAME: pack-direction
#PARENT: Gtk.MenuBar
#COMMENT: The pack direction of the menubar. It determines how
menuitems are arranged in the menubar.
#NAME: filter
#PARENT: Gtk.FileFilter
#COMMENT: Tests whether a file should be displayed according to @filter.
The #GtkFileFilterInfo @filter_info should include
the fields returned from gtk_file_filter_get_needed().

This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkFileChooser.
#NAME: newv
#PARENT: Gtk.ListStore.newv
#COMMENT: a new #GtkListStore
#NAME: inline-selection
#PARENT: Gtk.EntryCompletion
#COMMENT: Determines whether the possible completions on the popup
will appear in the entry as you navigate through them.
#NAME: get_parent
#PARENT: Gtk.CssSection.get_parent
#COMMENT: the parent section or %NULL if none
#NAME: text_view
#PARENT: Gtk.TextView.get_buffer.TextBuffer
#COMMENT: a #GtkTextView
#NAME: get_selected
#PARENT: Gtk.TreeSelection.get_selected
#COMMENT: TRUE, if there is a selected node.
#NAME: icon_info
#PARENT: Gtk.IconInfo.load_symbolic.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconInfo
#NAME: paste_clipboard
#PARENT: Gtk.TextBuffer
#COMMENT: Pastes the contents of a clipboard. If @override_location is %NULL, the
pasted text will be inserted at the cursor position, or the buffer selection
will be replaced if the selection is non-empty.

Note: pasting is asynchronous, that is, we’ll ask for the paste data and
return, and at some point later after the main loop runs, the paste data will
be inserted.
#NAME: priority
#PARENT: Gtk.BindingSet
#COMMENT: unused
#NAME: end
#PARENT: Gtk.TextBufferClass.apply_tag.apply_tag.none
#COMMENT: other bound of range to be tagged
#NAME: rc_get_im_module_path
#PARENT: Gtk
#COMMENT: Obtains the path in which to look for IM modules. See the documentation
of the `GTK_PATH`
environment variable for more details about looking up modules. This
function is useful solely for utilities supplied with GTK+ and should
not be used by applications under normal circumstances.
#NAME: get_flags
#PARENT: Gtk.TreeModel.get_flags
#COMMENT: the flags supported by this interface
#NAME: box
#PARENT: Gtk.FlowBox.get_child_at_index.FlowBoxChild
#COMMENT: a #GtkFlowBox
#NAME: gesture
#PARENT: Gtk.Gesture.get_sequences.Gdk.EventSequence
#COMMENT: a #GtkGesture
#NAME: authors
#PARENT: Gtk.AboutDialog
#COMMENT: The authors of the program, as a %NULL-terminated array of strings.
Each string may contain email addresses and URLs, which will be displayed
as links, see the introduction for more details.
#NAME: start_pos
#PARENT: Gtk.EditableInterface.do_delete_text.do_delete_text.none
#COMMENT: start position
#NAME: icon_theme
#PARENT: Gtk.IconTheme.set_screen.none
#COMMENT: a #GtkIconTheme
#NAME: xpos
#PARENT: Gtk.TextView.move_child.none
#COMMENT: new X position in window coordinates
#NAME: time_
#PARENT: Gtk.selection_convert.gboolean
#COMMENT: Time of request (usually of triggering event)
       In emergency, you could use #GDK_CURRENT_TIME
#NAME: reorderable
#PARENT: Gtk.IconView.set_reorderable.none
#COMMENT: %TRUE, if the list of items can be reordered.
#NAME: label
#PARENT: Gtk.Label.select_region.none
#COMMENT: a #GtkLabel
#NAME: path
#PARENT: Gtk.TreeView.get_path_at_pos.gboolean
#COMMENT: A pointer to a #GtkTreePath
  pointer to be filled in, or %NULL
#NAME: menu
#PARENT: Gtk.MenuPositionFunc.none
#COMMENT: a #GtkMenu.
#NAME: end
#PARENT: Gtk.PackType
#COMMENT: The child is packed into the end of the box
#NAME: send_expose
#PARENT: Gtk.Widget
#COMMENT: Very rarely-used function. This function is used to emit
an expose event on a widget. This function is not normally used
directly. The only time it is used is when propagating an expose
event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
and that is normally done using gtk_container_propagate_draw().

If you want to force an area of a window to be redrawn,
use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
To cause the redraw to be done immediately, follow that call
with a call to gdk_window_process_updates().
#NAME: widget
#PARENT: Gtk.Widget.trigger_tooltip_query.none
#COMMENT: a #GtkWidget
#NAME: builder
#PARENT: Gtk.Buildable.custom_tag_end.none
#COMMENT: #GtkBuilder used to construct this object
#NAME: get_bottom_margin
#PARENT: Gtk.PageSetup.get_bottom_margin
#COMMENT: the bottom margin
#NAME: get_dpi_y
#PARENT: Gtk.PrintContext.get_dpi_y
#COMMENT: the vertical resolution of @context
#NAME: plug-removed
#PARENT: Gtk.Socket
#COMMENT: This signal is emitted when a client is removed from the socket.
The default action is to destroy the #GtkSocket widget, so if you
want to reuse it you must add a signal handler that returns %TRUE.
#NAME: state
#PARENT: Gtk.StyleContext.notify_state_change.none
#COMMENT: state to trigger transition for
#NAME: filename
#PARENT: Gtk.FileChooser.set_filename.gboolean
#COMMENT: the filename to set as current
#NAME: get_can_focus
#PARENT: Gtk.Widget
#COMMENT: Determines whether @widget can own the input focus. See
gtk_widget_set_can_focus().
#NAME: name
#PARENT: Gtk.Widget.set_composite_name.none
#COMMENT: the name to set
#NAME: accel_group
#PARENT: Gtk.Action.set_accel_group.none
#COMMENT: a #GtkAccelGroup or %NULL
#NAME: parameter
#PARENT: Gtk.Application.add_accelerator.none
#COMMENT: parameter to pass when activating the action,
  or %NULL if the action does not accept an activation parameter
#NAME: get_line_offset
#PARENT: Gtk.TextIter.get_line_offset
#COMMENT: offset from start of line
#NAME: iter
#PARENT: Gtk.TreeStore.iter_depth.gint
#COMMENT: A valid #GtkTreeIter
#NAME: add_ui_from_file
#PARENT: Gtk.UIManager
#COMMENT: Parses a file containing a [UI definition][XML-UI] and
merges it with the current contents of @manager.
#NAME: get_width_chars
#PARENT: Gtk.FileChooserButton
#COMMENT: Retrieves the width in characters of the @button widget’s entry and/or label.
#NAME: string
#PARENT: Gtk.Builder.value_from_string.gboolean
#COMMENT: the string representation of the value
#NAME: TargetList
#PARENT: Gtk
#COMMENT: A #GtkTargetList-struct is a reference counted list
of #GtkTargetPair and should be treated as
opaque.
#NAME: find
#PARENT: Gtk.TargetList.find
#COMMENT: %TRUE if the target was found, otherwise %FALSE
#NAME: a
#PARENT: Gtk.TreeIterCompareFunc.gint
#COMMENT: A #GtkTreeIter in @model
#NAME: font
#PARENT: Gtk.FontChooser
#COMMENT: The font description as a string, e.g. "Sans Italic 12".
#NAME: set_scale
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_SCALE.
#NAME: include_hidden_chars
#PARENT: Gtk.TextBuffer.get_slice.utf8
#COMMENT: whether to include invisible text
#NAME: b
#PARENT: Gtk.TreeIterCompareFunc.gint
#COMMENT: Another #GtkTreeIter in @model
#NAME: natural_height
#PARENT: Gtk.CellAreaContext.push_preferred_height.none
#COMMENT: the proposed new natural height for @context
#NAME: end_pos
#PARENT: Gtk.EditableInterface.get_selection_bounds.get_selection_bounds.gboolean
#COMMENT: location to store the end position, or %NULL
#NAME: about
#PARENT: Gtk.AboutDialog.get_program_name.utf8
#COMMENT: a #GtkAboutDialog
#NAME: response
#PARENT: Gtk.Dialog
#COMMENT: Emitted when an action widget is clicked, the dialog receives a
delete event, or the application programmer calls gtk_dialog_response().
On a delete event, the response ID is #GTK_RESPONSE_DELETE_EVENT.
Otherwise, it depends on which action widget was clicked.
#NAME: iter
#PARENT: Gtk.ListStore.set_valuesv.none
#COMMENT: A valid #GtkTreeIter for the row being modified
#NAME: tab_label
#PARENT: Gtk.Notebook.insert_page.gint
#COMMENT: the #GtkWidget to be used as the label
    for the page, or %NULL to use the default label, “page N”
#NAME: STYLE_REGION_COLUMN
#PARENT: Gtk
#COMMENT: A widget region name to define a treeview column.
#NAME: start
#PARENT: Gtk.TextBufferClass.apply_tag.apply_tag.none
#COMMENT: one bound of range to be tagged
#NAME: xalign
#PARENT: Gtk.TextView.scroll_to_mark.none
#COMMENT: horizontal alignment of mark within visible area
#NAME: single
#PARENT: Gtk.TreeView.set_activate_on_single_click.none
#COMMENT: %TRUE to emit row-activated on a single click
#NAME: in_progress
#PARENT: Gtk.PrintOperationResult
#COMMENT: The print operation is not complete
    yet. This value will only be returned when running asynchronously.
#NAME: tree_model
#PARENT: Gtk.TreeModel.unref_node.none
#COMMENT: a #GtkTreeModel
#NAME: gravity
#PARENT: Gtk.Window.set_gravity.none
#COMMENT: window gravity
#NAME: renderer
#PARENT: Gtk.CellArea.set_focus_cell.none
#COMMENT: the #GtkCellRenderer to give focus to
#NAME: create_drag_icon
#PARENT: Gtk.IconView.create_drag_icon
#COMMENT: a newly-allocated surface of the drag icon.
#NAME: ToggleToolButton
#PARENT: Gtk
#COMMENT: A #GtkToggleToolButton is a #GtkToolItem that contains a toggle
button.

Use gtk_toggle_tool_button_new() to create a new
#GtkToggleToolButton.
#NAME: get_iter_from_string
#PARENT: Gtk.TreeModel
#COMMENT: Sets @iter to a valid iterator pointing to @path_string, if it
exists. Otherwise, @iter is left invalid and %FALSE is returned.
#NAME: attached-to
#PARENT: Gtk.Window
#COMMENT: The widget to which this window is attached.
See gtk_window_set_attached_to().

Examples of places where specifying this relation is useful are
for instance a #GtkMenu created by a #GtkComboBox, a completion
popup window created by #GtkEntry or a typeahead search entry
created by #GtkTreeView.
#NAME: get_layout
#PARENT: Gtk.ButtonBox
#COMMENT: Retrieves the method being used to arrange the buttons in a button box.
#NAME: info
#PARENT: Gtk.MessageType
#COMMENT: Informational message
#NAME: context
#PARENT: Gtk.PrintContext.set_cairo_context.none
#COMMENT: a #GtkPrintContext
#NAME: set_row_separator_func
#PARENT: Gtk.ComboBox
#COMMENT: Sets the row separator function, which is used to determine
whether a row should be drawn as a separator. If the row separator
function is %NULL, no separators are drawn. This is the default value.
#NAME: pulse
#PARENT: Gtk.CellRendererProgress
#COMMENT: Setting this to a non-negative value causes the cell renderer to
enter "activity mode", where a block bounces back and forth to
indicate that some progress is made, without specifying exactly how
much.

Each increment of the property causes the block to move by a little
bit.

To indicate that the activity has not started yet, set the property
to zero. To indicate completion, set the property to %G_MAXINT.
#NAME: get_search_position_func
#PARENT: Gtk.TreeView.get_search_position_func
#COMMENT: the currently used function for positioning the search dialog.
#NAME: get_artists
#PARENT: Gtk.AboutDialog.get_artists
#COMMENT: A
 %NULL-terminated string array containing the artists. The array is
 owned by the about dialog and must not be modified.
#NAME: drag-leave
#PARENT: Gtk.Widget
#COMMENT: The ::drag-leave signal is emitted on the drop site when the cursor
leaves the widget. A typical reason to connect to this signal is to
undo things done in #GtkWidget::drag-motion, e.g. undo highlighting
with gtk_drag_unhighlight().


Likewise, the #GtkWidget::drag-leave signal is also emitted before the
::drag-drop signal, for instance to allow cleaning up of a preview item
created in the #GtkWidget::drag-motion signal handler.
#NAME: pspec
#PARENT: Gtk.StyleProperties.lookup_property.gboolean
#COMMENT: return location for the #GParamSpec
#NAME: keyval
#PARENT: Gtk.Window.add_mnemonic.none
#COMMENT: the mnemonic
#NAME: argc
#PARENT: Gtk.init.none
#COMMENT: Address of the `argc` parameter of
    your main() function (or 0 if @argv is %NULL). This will be changed if
    any arguments were handled.
#NAME: get_window_by_id
#PARENT: Gtk.Application
#COMMENT: Returns the #GtkApplicationWindow with the given ID.
#NAME: new
#PARENT: Gtk.LinkButton
#COMMENT: Creates a new #GtkLinkButton with the URI as its text.
#NAME: add_button
#PARENT: Gtk.Dialog.add_button
#COMMENT: the #GtkButton widget that was added
#NAME: page-reordered
#PARENT: Gtk.Notebook
#COMMENT: the ::page-reordered signal is emitted in the notebook
right after a page has been reordered.
#NAME: new_win32
#PARENT: Gtk.SymbolicColor.new_win32
#COMMENT: A newly created #GtkSymbolicColor
#NAME: get_preferred_height_for_width
#PARENT: Gtk.Widget
#COMMENT: Retrieves a widget’s minimum and natural height if it would be given
the specified @width.

The returned request will be modified by the
GtkWidgetClass::adjust_size_request virtual method and by any
#GtkSizeGroups that have been applied. That is, the returned request
is the one that should be used for layout, not necessarily the one
returned by the widget itself.
#NAME: get_accessible
#PARENT: Gtk.WidgetClass.get_accessible.get_accessible
#COMMENT: the #AtkObject associated with @widget
#NAME: get_skip_pager_hint
#PARENT: Gtk.Window.get_skip_pager_hint
#COMMENT: %TRUE if window shouldn’t be in pager
#NAME: accelerator_key
#PARENT: Gtk.accelerator_get_label_with_keycode.utf8
#COMMENT: accelerator keyval
#NAME: parser
#PARENT: Gtk.BuildableIface.custom_tag_start.custom_tag_start.gboolean
#COMMENT: a #GMarkupParser to fill in
#NAME: accel-cleared
#PARENT: Gtk.CellRendererAccel
#COMMENT: Gets emitted when the user has removed the accelerator.
#NAME: modifiers
#PARENT: Gtk.BindingEntry.add_signall.none
#COMMENT: key modifier
#NAME: get_display_name
#PARENT: Gtk.PaperSize.get_display_name
#COMMENT: the human-readable name of @size
#NAME: new
#PARENT: Gtk.HSeparator.new
#COMMENT: a new #GtkHSeparator.
#NAME: buffer
#PARENT: Gtk.TextBuffer.register_serialize_tagset.Gdk.Atom
#COMMENT: a #GtkTextBuffer
#NAME: search_sensitive
#PARENT: Gtk.MenuShell.select_first.none
#COMMENT: if %TRUE, search for the first selectable
                   menu item, otherwise select nothing if
                   the first item isn’t sensitive. This
                   should be %FALSE if the menu is being
                   popped up initially.
#NAME: get_pixels_inside_wrap
#PARENT: Gtk.TextView.get_pixels_inside_wrap
#COMMENT: default number of pixels of blank space between wrapped lines
#NAME: filter
#PARENT: Gtk.TreeModelFilter.clear_cache.none
#COMMENT: A #GtkTreeModelFilter.
#NAME: renderer
#PARENT: Gtk.CellArea.add_with_properties.none
#COMMENT: a #GtkCellRenderer to be placed inside @area
#NAME: file_name
#PARENT: Gtk.PageSetup.new_from_file.PageSetup
#COMMENT: the filename to read the page setup from
#NAME: style-changed
#PARENT: Gtk.Toolbar
#COMMENT: Emitted when the style of the toolbar changes.
#NAME: required_micro
#PARENT: Gtk.check_version.utf8
#COMMENT: the required micro version
#NAME: find_style_property
#PARENT: Gtk.WidgetClass
#COMMENT: Finds a style property of a widget class by name.
#NAME: unset_model_drag_dest
#PARENT: Gtk.IconView
#COMMENT: Undoes the effect of gtk_icon_view_enable_model_drag_dest(). Calling this
method sets #GtkIconView:reorderable to %FALSE.
#NAME: get_for_screen
#PARENT: Gtk.Settings
#COMMENT: Gets the #GtkSettings object for @screen, creating it if necessary.
#NAME: copyright
#PARENT: Gtk.AboutDialog
#COMMENT: Copyright information for the program.
#NAME: scrollable
#PARENT: Gtk.Scrollable.get_border.gboolean
#COMMENT: a #GtkScrollable
#NAME: get_overwrite
#PARENT: Gtk.TextView
#COMMENT: Returns whether the #GtkTextView is in overwrite mode or not.
#NAME: get_owner
#PARENT: Gtk.Clipboard
#COMMENT: If the clipboard contents callbacks were set with
gtk_clipboard_set_with_owner(), and the gtk_clipboard_set_with_data() or
gtk_clipboard_clear() has not subsequently called, returns the owner set
by gtk_clipboard_set_with_owner().
#NAME: get_restrict_to_fill_level
#PARENT: Gtk.Range
#COMMENT: Gets whether the range is restricted to the fill level.
#NAME: text
#PARENT: Gtk.Statusbar.text-popped.none
#COMMENT: the message that was just popped
#NAME: use_align
#PARENT: Gtk.TextView.scroll_to_mark.none
#COMMENT: whether to use alignment arguments (if %FALSE, just
   get the mark onscreen)
#NAME: callback_symbol
#PARENT: Gtk.Builder.add_callback_symbol.none
#COMMENT: The callback pointer
#NAME: spin_button
#PARENT: Gtk.SpinButton.configure.none
#COMMENT: a #GtkSpinButton
#NAME: backward_cursor_position
#PARENT: Gtk.TextIter
#COMMENT: Like gtk_text_iter_forward_cursor_position(), but moves backward.
#NAME: widget
#PARENT: Gtk.Widget.can_activate_accel.gboolean
#COMMENT: a #GtkWidget
#NAME: factory
#PARENT: Gtk.IconFactory.add_default.none
#COMMENT: a #GtkIconFactory
#NAME: get_pulse_step
#PARENT: Gtk.ProgressBar.get_pulse_step
#COMMENT: a fraction from 0.0 to 1.0
#NAME: set_sort_type
#PARENT: Gtk.RecentChooser
#COMMENT: Changes the sorting order of the recently used resources list displayed by
@chooser.
#NAME: new_from_pixbuf
#PARENT: Gtk.StatusIcon.new_from_pixbuf
#COMMENT: a new #GtkStatusIcon
#NAME: populate-all
#PARENT: Gtk.Entry
#COMMENT: If :populate-all is %TRUE, the #GtkEntry::populate-popup
signal is also emitted for touch popups.
#NAME: get_font_family
#PARENT: Gtk.FontChooser
#COMMENT: Gets the #PangoFontFamily representing the selected font family.
Font families are a collection of font faces.

If the selected font is not installed, returns %NULL.
#NAME: get_focus_on_click
#PARENT: Gtk.Button.get_focus_on_click
#COMMENT: %TRUE if the button grabs focus when it is clicked with
              the mouse.
#NAME: set_show_desktop
#PARENT: Gtk.PlacesSidebar
#COMMENT: Sets whether the @sidebar should show an item for the Desktop folder.
The default value for this option is determined by the desktop
environment and the user’s configuration, but this function can be
used to override it on a per-application basis.
#NAME: chooser
#PARENT: Gtk.RecentChooserIface.set_sort_func.set_sort_func.none
#COMMENT: a #GtkRecentChooser
#NAME: save
#PARENT: Gtk.FileChooserAction
#COMMENT: Indicates save mode.  The file chooser
 will let the user pick an existing file, or type in a new
 filename.
#NAME: set_inverted
#PARENT: Gtk.ProgressBar
#COMMENT: Progress bars normally grow from top to bottom or left to right.
Inverted progress bars grow in the opposite direction.
#NAME: orientation
#PARENT: Gtk.StatusIcon.get_geometry.gboolean
#COMMENT: return location for the
   orientation of the panel in which the status icon is embedded,
   or %NULL. A panel at the top or bottom of the screen is
   horizontal, a panel at the left or right is vertical.
#NAME: inhibit
#PARENT: Gtk.Application
#COMMENT: Inform the session manager that certain types of actions should be
inhibited. This is not guaranteed to work on all platforms and for
all types of actions.

Applications should invoke this method when they begin an operation
that should not be interrupted, such as creating a CD or DVD. The
types of actions that may be blocked are specified by the @flags
parameter. When the application completes the operation it should
call gtk_application_uninhibit() to remove the inhibitor. Note that
an application can have multiple inhibitors, and all of the must
be individually removed. Inhibitors are also cleared when the
application exits.

Applications should not expect that they will always be able to block
the action. In most cases, users will be given the option to force
the action to take place.

Reasons should be short and to the point.

If @window is given, the session manager may point the user to
this window to find out more about why the action is inhibited.
#NAME: style
#PARENT: Gtk.Style.attach.Style
#COMMENT: a #GtkStyle.
#NAME: child
#PARENT: Gtk.Container.child_notify.none
#COMMENT: the child widget
#NAME: argv
#PARENT: Gtk.init.none
#COMMENT: Address of the
    `argv` parameter of main(), or %NULL. Any options
    understood by GTK+ are stripped before return.
#NAME: h
#PARENT: Gtk.HSV.get_color.none
#COMMENT: Return value for the hue
#NAME: entry
#PARENT: Gtk.Entry.get_cursor_hadjustment.Adjustment
#COMMENT: a #GtkEntry
#NAME: alignment
#PARENT: Gtk.Alignment.set_padding.none
#COMMENT: a #GtkAlignment
#NAME: item-orientation
#PARENT: Gtk.IconView
#COMMENT: The item-orientation property specifies how the cells (i.e. the icon and
the text) of the item are positioned relative to each other.
#NAME: done_cb
#PARENT: Gtk.print_run_page_setup_dialog_async.none
#COMMENT: a function to call when the user saves
          the modified page setup
#NAME: fraction
#PARENT: Gtk.ProgressBar.set_fraction.none
#COMMENT: fraction of the task that’s been completed
#NAME: state_type
#PARENT: Gtk.paint_vline.none
#COMMENT: a state
#NAME: child
#PARENT: Gtk.Box.pack_start.none
#COMMENT: the #GtkWidget to be added to @box
#NAME: select_all
#PARENT: Gtk.RecentChooser
#COMMENT: Selects all the items inside @chooser, if the @chooser supports
multiple selection.
#NAME: set_expander_column
#PARENT: Gtk.TreeView
#COMMENT: Sets the column to draw the expander arrow at. It must be in @tree_view.
If @column is %NULL, then the expander arrow is always at the first
visible column.

If you do not want expander arrow to appear in your tree, set the
expander column to a hidden column.
#NAME: get_menu_label_text
#PARENT: Gtk.Notebook
#COMMENT: Retrieves the text of the menu label for the page containing
@child.
#NAME: type_name
#PARENT: Gtk.RcProperty
#COMMENT: quark-ified type identifier
#NAME: info_a
#PARENT: Gtk.RecentInfo.match.gboolean
#COMMENT: a #GtkRecentInfo
#NAME: name
#PARENT: Gtk.StatusIcon.set_name.none
#COMMENT: the name
#NAME: backward_display_line
#PARENT: Gtk.TextView
#COMMENT: Moves the given @iter backward by one display (wrapped) line.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view’s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.
#NAME: get_popup_single_match
#PARENT: Gtk.EntryCompletion
#COMMENT: Returns whether the completion popup window will appear even if there is
only a single match.
#NAME: info_b
#PARENT: Gtk.RecentInfo.match.gboolean
#COMMENT: a #GtkRecentInfo
#NAME: binding_set
#PARENT: Gtk.BindingEntry.add_signall.none
#COMMENT: a #GtkBindingSet to add a signal to
#NAME: get_default_top_margin
#PARENT: Gtk.PaperSize.get_default_top_margin
#COMMENT: the default top margin
#NAME: tab_label
#PARENT: Gtk.Notebook.append_page_menu.gint
#COMMENT: the #GtkWidget to be used as the label
    for the page, or %NULL to use the default label, “page N”
#NAME: icon_name
#PARENT: Gtk.NumerableIcon.set_background_icon_name.none
#COMMENT: an icon name, or %NULL
#NAME: widget
#PARENT: Gtk.TickCallback.gboolean
#COMMENT: the widget
#NAME: path
#PARENT: Gtk.TreeView.get_drag_dest_row.none
#COMMENT: Return location for the path of the highlighted row, or %NULL.
#NAME: allocation
#PARENT: Gtk.Widget.size_allocate.none
#COMMENT: position and size to be allocated to @widget
#NAME: about
#PARENT: Gtk.AboutDialog.set_version.none
#COMMENT: a #GtkAboutDialog
#NAME: attributes
#PARENT: Gtk.Entry
#COMMENT: A list of Pango attributes to apply to the text of the entry.

This is mainly useful to change the size or weight of the text.
#NAME: widget
#PARENT: Gtk.Widget.child_focus.gboolean
#COMMENT: a #GtkWidget
#NAME: cell
#PARENT: Gtk.CellRenderer.render.none
#COMMENT: a #GtkCellRenderer
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_path.WidgetPath
#COMMENT: a #GtkThemingEngine
#NAME: get_popup_single_match
#PARENT: Gtk.EntryCompletion.get_popup_single_match
#COMMENT: %TRUE if the popup window will appear regardless of the
   number of matches
#NAME: new_with_font
#PARENT: Gtk.FontButton.new_with_font
#COMMENT: a new font picker widget.
#NAME: info
#PARENT: Gtk.RecentInfo.get_uri_display.utf8
#COMMENT: a #GtkRecentInfo
#NAME: mode
#PARENT: Gtk.SizeGroup.new.SizeGroup
#COMMENT: the mode for the new size group.
#NAME: create_row_drag_icon
#PARENT: Gtk.TreeView
#COMMENT: Creates a #cairo_surface_t representation of the row at @path.
This image is used for a drag icon.
#NAME: alternative_dialog_button_order
#PARENT: Gtk.alternative_dialog_button_order
#COMMENT: Whether the alternative button order should be used
#NAME: changed
#PARENT: Gtk.RadioAction
#COMMENT: The ::changed signal is emitted on every member of a radio group when the
active member is changed. The signal gets emitted after the ::activate signals
for the previous and current active members.
#NAME: install_style_property_parser
#PARENT: Gtk.WidgetClass
#COMMENT: Installs a style property on a widget class.
#NAME: s
#PARENT: Gtk.HSV.get_color.none
#COMMENT: Return value for the saturation
#NAME: was_symbolic
#PARENT: Gtk.IconInfo.load_symbolic.GdkPixbuf.Pixbuf
#COMMENT: a #gboolean, returns whether the
    loaded icon was a symbolic one and whether the @fg color was
    applied to it.
#NAME: buffer
#PARENT: Gtk.TargetList.add_rich_text_targets.none
#COMMENT: a #GtkTextBuffer.
#NAME: enabled
#PARENT: Gtk.TreeView.set_enable_tree_lines.none
#COMMENT: %TRUE to enable tree line drawing, %FALSE otherwise.
#NAME: child_get_valist
#PARENT: Gtk.Container
#COMMENT: Gets the values of one or more child properties for @child and @container.
#NAME: init_check
#PARENT: Gtk.init_check
#COMMENT: %TRUE if the windowing system has been successfully
    initialized, %FALSE otherwise
#NAME: get_name
#PARENT: Gtk.PaperSize
#COMMENT: Gets the name of the #GtkPaperSize.
#NAME: data
#PARENT: Gtk.RecentFilter.add_custom.none
#COMMENT: data to pass to @func
#NAME: spinner
#PARENT: Gtk.Spinner.stop.none
#COMMENT: a #GtkSpinner
#NAME: start
#PARENT: Gtk.TextBuffer.remove_all_tags.none
#COMMENT: one bound of range to be untagged
#NAME: toolbar
#PARENT: Gtk.UIManagerItemType
#COMMENT: Create a toolbar.
#NAME: v
#PARENT: Gtk.HSV.get_color.none
#COMMENT: Return value for the value
#NAME: device
#PARENT: Gtk.Widget.add_device_events.none
#COMMENT: a #GdkDevice
#NAME: entries
#PARENT: Gtk.ActionGroup.add_radio_actions_full.none
#COMMENT: an array of radio action descriptions
#NAME: valign
#PARENT: Gtk.Widget
#COMMENT: How to distribute vertical space if widget gets extra space, see #GtkAlign
#NAME: get_iter_at_offset
#PARENT: Gtk.TextBuffer
#COMMENT: Initializes @iter to a position @char_offset chars from the start
of the entire buffer. If @char_offset is -1 or greater than the number
of characters in the buffer, @iter is initialized to the end iterator,
the iterator one past the last valid character in the buffer.
#NAME: get_radio
#PARENT: Gtk.CellRendererToggle
#COMMENT: Returns whether we’re rendering radio toggles rather than checkboxes.
#NAME: RecentFilterInfo
#PARENT: Gtk
#COMMENT: A GtkRecentFilterInfo struct is used
to pass information about the tested file to gtk_recent_filter_filter().
#NAME: selection_data
#PARENT: Gtk.ClipboardGetFunc.none
#COMMENT: a #GtkSelectionData argument in which the requested
  data should be stored.
#NAME: yalign
#PARENT: Gtk.Button.get_alignment.none
#COMMENT: return location for vertical alignment
#NAME: menu_button
#PARENT: Gtk.MenuButton.set_popover.none
#COMMENT: a #GtkMenuButton
#NAME: frame_clock
#PARENT: Gtk.TickCallback.gboolean
#COMMENT: the frame clock for the widget (same as calling gtk_widget_get_frame_clock())
#NAME: image_menu_item
#PARENT: Gtk.ImageMenuItem.get_always_show_image.gboolean
#COMMENT: a #GtkImageMenuItem
#NAME: color
#PARENT: Gtk.ColorChooser.set_rgba.none
#COMMENT: the new color
#NAME: text
#PARENT: Gtk.ComboBoxText.insert.none
#COMMENT: A string to display
#NAME: PrintOperationAction
#PARENT: Gtk
#COMMENT: The @action parameter to gtk_print_operation_run()
determines what action the print operation should perform.
#NAME: position
#PARENT: Gtk.Grid.remove_column.none
#COMMENT: the position of the column to remove
#NAME: container
#PARENT: Gtk.Container.child_set_property.none
#COMMENT: a #GtkContainer
#NAME: trailing
#PARENT: Gtk.TextView.get_iter_at_position.none
#COMMENT: if non-%NULL, location to store an integer indicating where
   in the grapheme the user clicked. It will either be
   zero, or the number of characters in the grapheme.
   0 represents the trailing edge of the grapheme.
#NAME: new
#PARENT: Gtk.Toolbar.new
#COMMENT: the newly-created toolbar.
#NAME: set_item_width
#PARENT: Gtk.IconView
#COMMENT: Sets the ::item-width property which specifies the width
to use for each item. If it is set to -1, the icon view will
automatically determine a suitable item size.
#NAME: list_store
#PARENT: Gtk.ListStore.insert_before.none
#COMMENT: A #GtkListStore
#NAME: window
#PARENT: Gtk.Window.present.none
#COMMENT: a #GtkWindow
#NAME: combo_box
#PARENT: Gtk.ComboBox.popdown.none
#COMMENT: a #GtkComboBox
#NAME: title
#PARENT: Gtk.Dialog.new_with_buttons.Widget
#COMMENT: Title of the dialog, or %NULL
#NAME: get_active
#PARENT: Gtk.CheckMenuItem.get_active
#COMMENT: %TRUE if the menu item is checked.
#NAME: get_visible_range
#PARENT: Gtk.IconView.get_visible_range
#COMMENT: %TRUE, if valid paths were placed in @start_path and @end_path
#NAME: is_custom
#PARENT: Gtk.PaperSize.is_custom
#COMMENT: whether @size is a custom paper size.
#NAME: length
#PARENT: Gtk.Clipboard.wait_for_rich_text.guint8
#COMMENT: return location for the length of the returned data
#NAME: width
#PARENT: Gtk.Requisition
#COMMENT: the widget’s desired width
#NAME: get_invisible_char
#PARENT: Gtk.Entry
#COMMENT: Retrieves the character displayed in place of the real characters
for entries with visibility set to false. See gtk_entry_set_invisible_char().
#NAME: assistant
#PARENT: Gtk.Assistant.set_forward_page_func.none
#COMMENT: a #GtkAssistant
#NAME: spacing
#PARENT: Gtk.TreeViewColumn.set_spacing.none
#COMMENT: distance between cell renderers in pixels.
#NAME: box
#PARENT: Gtk.FlowBox.get_homogeneous.gboolean
#COMMENT: a #GtkFlowBox
#NAME: buildable
#PARENT: Gtk.BuildableIface.parser_finished.parser_finished.none
#COMMENT: a #GtkBuildable
#NAME: cell
#PARENT: Gtk.TreeView.insert_column_with_attributes.gint
#COMMENT: The #GtkCellRenderer
#NAME: use_coordinates
#PARENT: Gtk.Widget.drag_dest_set_proxy.none
#COMMENT: If %TRUE, send the same coordinates to the
  destination, because it is an embedded
  subwindow.
#NAME: get_adjustment
#PARENT: Gtk.SpinButton.get_adjustment
#COMMENT: the #GtkAdjustment of @spin_button
#NAME: set_item_position
#PARENT: Gtk.ToolItemGroup
#COMMENT: Sets the position of @item in the list of children of @group.
#NAME: convert_child_path_to_path
#PARENT: Gtk.TreeModelSort.convert_child_path_to_path
#COMMENT: A newly allocated #GtkTreePath, or %NULL
#NAME: path
#PARENT: Gtk.TreeView.get_dest_row_at_pos.gboolean
#COMMENT: Return location for the path of
  the highlighted row, or %NULL.
#NAME: set_name
#PARENT: Gtk.Widget
#COMMENT: Widgets can be named, which allows you to refer to them from a
CSS file. You can apply a style to widgets with a particular name
in the CSS file. See the documentation for the CSS syntax (on the
same page as the docs for #GtkStyleContext).

Note that the CSS syntax has certain special characters to delimit
and represent elements in a selector (period, #, >, *...), so using
these will make your widget impossible to match by name. Any combination
of alphanumeric symbols, dashes and underscores will suffice.
#NAME: end
#PARENT: Gtk.Gesture
#COMMENT: This signal is emitted when @gesture either stopped recognizing the event
sequences as something to be handled (the #GtkGesture::check handler returned
%FALSE), or the number of touch sequences became higher or lower than
#GtkGesture:n-points.

Note: @sequence might not pertain to the group of sequences that were
previously triggering recognition on @gesture (ie. a just pressed touch
sequence that exceeds #GtkGesture:n-points). This situation may be detected
by checking through gtk_gesture_handles_sequence().
#NAME: new
#PARENT: Gtk.Label
#COMMENT: Creates a new label with the given text inside it. You can
pass %NULL to get an empty label widget.
#NAME: get_right_margin
#PARENT: Gtk.PageSetup.get_right_margin
#COMMENT: the right margin
#NAME: page_right
#PARENT: Gtk.ScrollType
#COMMENT: Page to the right.
#NAME: detail
#PARENT: Gtk.paint_hline.none
#COMMENT: a style detail
#NAME: path
#PARENT: Gtk.TreeSelectionFunc.gboolean
#COMMENT: The #GtkTreePath of the row in question
#NAME: other
#PARENT: Gtk.PaperSize.copy.PaperSize
#COMMENT: a #GtkPaperSize
#NAME: settings
#PARENT: Gtk.PrintSettings.get_scale.gdouble
#COMMENT: a #GtkPrintSettings
#NAME: RecentFilterFunc
#PARENT: Gtk
#COMMENT: The type of function that is used with custom filters,
see gtk_recent_filter_add_custom().
#NAME: get_show_menubar
#PARENT: Gtk.ApplicationWindow.get_show_menubar
#COMMENT: %TRUE if @window will display a menubar when needed
#NAME: new
#PARENT: Gtk.ToggleToolButton.new
#COMMENT: a newly created #GtkToggleToolButton
#NAME: get_path
#PARENT: Gtk.TreeModelIface.get_path.get_path
#COMMENT: a newly-created #GtkTreePath-struct
#NAME: container
#PARENT: Gtk.Container.set_focus_child.none
#COMMENT: a #GtkContainer
#NAME: set_show_style
#PARENT: Gtk.FontButton
#COMMENT: If @show_style is %TRUE, the font style will be displayed along with name of the selected font.
#NAME: current_page
#PARENT: Gtk.AssistantPageFunc.gint
#COMMENT: The page number used to calculate the next page.
#NAME: get_border_color
#PARENT: Gtk.StyleContext
#COMMENT: Gets the border color for a given state.
#NAME: drag_x
#PARENT: Gtk.TreeView.get_dest_row_at_pos.gboolean
#COMMENT: the position to determine the destination row for
#NAME: commit
#PARENT: Gtk.Assistant
#COMMENT: Erases the visited page history so the back button is not
shown on the current page, and removes the cancel button
from subsequent pages.

Use this when the information provided up to the current
page is hereafter deemed permanent and cannot be modified
or undone. For example, showing a progress page to track
a long-running, unreversible operation after the user has
clicked apply on a confirmation page.
#NAME: drag_y
#PARENT: Gtk.TreeView.get_dest_row_at_pos.gboolean
#COMMENT: the position to determine the destination row for
#NAME: selected
#PARENT: Gtk.CellRendererState
#COMMENT: The cell is currently selected, and
 probably has a selection colored background to render to.
#NAME: row
#PARENT: Gtk.ListBoxRow.set_activatable.none
#COMMENT: a #GtkListBoxRow
#NAME: new_from_ipp
#PARENT: Gtk.PaperSize.new_from_ipp
#COMMENT: a new #GtkPaperSize, use gtk_paper_size_free()
to free it
#NAME: orientation
#PARENT: Gtk.Separator.new.Widget
#COMMENT: the separator’s orientation.
#NAME: object_class
#PARENT: Gtk.binding_set_by_class.BindingSet
#COMMENT: a valid #GObject class
#NAME: file
#PARENT: Gtk.FileChooser.set_current_folder_file.gboolean
#COMMENT: the #GFile for the new folder
#NAME: get_direction_wildcarded
#PARENT: Gtk.IconSource
#COMMENT: Gets the value set by gtk_icon_source_set_direction_wildcarded().
#NAME: width_for_height
#PARENT: Gtk.SizeRequestMode
#COMMENT: Prefer width-for-height geometry management
#NAME: end
#PARENT: Gtk.TextBuffer.remove_tag.none
#COMMENT: other bound of range to be untagged
#NAME: iter
#PARENT: Gtk.TextView.move_visually.gboolean
#COMMENT: a #GtkTextIter
#NAME: set_default_page_setup
#PARENT: Gtk.PrintOperation
#COMMENT: Makes @default_page_setup the default page setup for @op.

This page setup will be used by gtk_print_operation_run(),
but it can be overridden on a per-page basis by connecting
to the #GtkPrintOperation::request-page-setup signal.
#NAME: 
#PARENT: Gtk.TreeViewColumn.set_attributes.none...
#COMMENT: A %NULL-terminated list of attributes
#NAME: min-children-per-line
#PARENT: Gtk.FlowBox
#COMMENT: The minimum number of children to allocate consecutively
in the given orientation.

Setting the minimum children per line ensures
that a reasonably small height will be requested
for the overall minimum width of the box.
#NAME: has_item
#PARENT: Gtk.RecentManager.has_item
#COMMENT: %TRUE if the resource was found, %FALSE otherwise
#NAME: end_pos
#PARENT: Gtk.Editable.delete-text.none
#COMMENT: the end position
#NAME: data
#PARENT: Gtk.BuildableIface.custom_tag_start.custom_tag_start.gboolean
#COMMENT: return location for user data that will be passed in
  to parser functions
#NAME: widget
#PARENT: Gtk.CellRenderer.get_preferred_width.none
#COMMENT: the #GtkWidget this cell will be rendering to
#NAME: set_use_size
#PARENT: Gtk.FontButton
#COMMENT: If @use_size is %TRUE, the font name will be written using the selected size.
#NAME: text
#PARENT: Gtk.TextBuffer
#COMMENT: The text content of the buffer. Without child widgets and images,
see gtk_text_buffer_get_text() for more information.
#NAME: func
#PARENT: Gtk.TreeModel.foreach.none
#COMMENT: a function to be called on each row
#NAME: style
#PARENT: Gtk.paint_resize_grip.none
#COMMENT: a #GtkStyle
#NAME: ClipboardTextReceivedFunc
#PARENT: Gtk
#COMMENT: A function to be called when the results of gtk_clipboard_request_text()
are received, or when the request fails.
#NAME: has_icon
#PARENT: Gtk.IconTheme.has_icon
#COMMENT: %TRUE if @icon_theme includes an
 icon for @icon_name.
#NAME: columns
#PARENT: Gtk.Table.get_size.none
#COMMENT: return location for the number
  of columns, or %NULL
#NAME: prev_column
#PARENT: Gtk.TreeViewColumnDropFunc.gboolean
#COMMENT: A #GtkTreeViewColumn on one side of @column
#NAME: area
#PARENT: Gtk.IMContext.set_cursor_location.none
#COMMENT: new location
#NAME: socket-window
#PARENT: Gtk.Plug
#COMMENT: The window of the socket the plug is embedded in.
#NAME: uri
#PARENT: Gtk.RecentChooser.set_current_uri.gboolean
#COMMENT: a URI
#NAME: new_from_key_file
#PARENT: Gtk.PaperSize
#COMMENT: Reads a paper size from the group @group_name in the key file
@key_file.
#NAME: flags
#PARENT: Gtk.AppChooserDialog.new.Widget
#COMMENT: flags for this dialog
#NAME: sorted
#PARENT: Gtk.CellRendererState
#COMMENT: The cell is in a sorted row
#NAME: mode
#PARENT: Gtk.Label.set_ellipsize.none
#COMMENT: a #PangoEllipsizeMode
#NAME: button
#PARENT: Gtk.RadioToolButton.get_group.RadioButton
#COMMENT: a #GtkRadioToolButton
#NAME: get_draw_as_radio
#PARENT: Gtk.ToggleAction
#COMMENT: Returns whether the action should have proxies like a radio action.
#NAME: hide
#PARENT: Gtk.Widget
#COMMENT: The ::hide signal is emitted when @widget is hidden, for example with
gtk_widget_hide().
#NAME: adjustment
#PARENT: Gtk.Adjustment.get_upper.gdouble
#COMMENT: a #GtkAdjustment
#NAME: set_capture_button_press
#PARENT: Gtk.ScrolledWindow
#COMMENT: Changes the behaviour of @scrolled_window wrt. to the initial
event that possibly starts kinetic scrolling. When @capture_button_press
is set to %TRUE, the event is captured by the scrolled window, and
then later replayed if it is meant to go to the child widget.

This should be enabled if any child widgets perform non-reversible
actions on #GtkWidget::button-press-event. If they don't, and handle
additionally handle #GtkWidget::grab-broken-event, it might be better
to set @capture_button_press to %FALSE.

This setting only has an effect if kinetic scrolling is enabled.
#NAME: new_from_model
#PARENT: Gtk.Popover.new_from_model
#COMMENT: the new #GtkPopover
#NAME: iter_parent
#PARENT: Gtk.TreeModel.iter_parent
#COMMENT: %TRUE, if @iter is set to the parent of @child
#NAME: set_min_value
#PARENT: Gtk.LevelBar
#COMMENT: Sets the value of the #GtkLevelBar:min-value property.
#NAME: buffer
#PARENT: Gtk.TextBuffer.insert_child_anchor.none
#COMMENT: a #GtkTextBuffer
#NAME: palette
#PARENT: Gtk.ToolPalette.get_hadjustment.Adjustment
#COMMENT: a #GtkToolPalette
#NAME: combo_box
#PARENT: Gtk.ComboBoxText.get_active_text.utf8
#COMMENT: A #GtkComboBoxText
#NAME: set_label
#PARENT: Gtk.Expander
#COMMENT: Sets the text of the label of the expander to @label.

This will also clear any previously set labels.
#NAME: find
#PARENT: Gtk.BindingSet.find
#COMMENT: %NULL or the specified binding set
#NAME: ignore-hidden
#PARENT: Gtk.SizeGroup
#COMMENT: If %TRUE, unmapped widgets are ignored when determining
the size of the group.
#NAME: numeric
#PARENT: Gtk.SpinButton.set_numeric.none
#COMMENT: flag indicating if only numeric entry is allowed
#NAME: uri
#PARENT: Gtk.show_uri.gboolean
#COMMENT: the uri to show
#NAME: window_title
#PARENT: Gtk.test_create_simple_window.Widget
#COMMENT: Title of the window to be displayed.
#NAME: text_view
#PARENT: Gtk.TextView.buffer_to_window_coords.none
#COMMENT: a #GtkTextView
#NAME: under_left
#PARENT: Gtk.StackTransitionType
#COMMENT: Uncover the new page by sliding to the left. Since: 3.12
#NAME: ends_word
#PARENT: Gtk.TextIter.ends_word
#COMMENT: %TRUE if @iter is at the end of a word
#NAME: render_handle
#PARENT: Gtk
#COMMENT: Renders a handle (as in #GtkHandleBox, #GtkPaned and
#GtkWindow’s resize grip), in the rectangle
determined by @x, @y, @width, @height.

Handles rendered for the paned and grip classes:

![](handles.png)
#NAME: start_pos
#PARENT: Gtk.EditableInterface.get_chars.get_chars.utf8
#COMMENT: start of text
#NAME: accels
#PARENT: Gtk.Application.set_accels_for_action.none
#COMMENT: a list of accelerators in the format
    understood by gtk_accelerator_parse()
#NAME: child_iter
#PARENT: Gtk.TreeModelSort.convert_child_iter_to_iter.gboolean
#COMMENT: A valid #GtkTreeIter pointing to a row on the child model
#NAME: time
#PARENT: Gtk.Widget.drag-drop.gboolean
#COMMENT: the timestamp of the motion event
#NAME: switcher
#PARENT: Gtk.StackSwitcher.get_stack.Stack
#COMMENT: a #GtkStackSwitcher
#NAME: backward_word_start
#PARENT: Gtk.TextIter.backward_word_start
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: colorsel
#PARENT: Gtk.ColorSelection.set_previous_color.none
#COMMENT: a #GtkColorSelection
#NAME: key_snooper_remove
#PARENT: Gtk
#COMMENT: Removes the key snooper function with the given id.
#NAME: gtk
#PARENT: Gtk.CellRendererAccelMode
#COMMENT: GTK+ accelerators mode
#NAME: set_current_folder_uri
#PARENT: Gtk.FileChooser
#COMMENT: Sets the current folder for @chooser from an URI.
The user will be shown the full contents of the current folder,
plus user interface elements for navigating to other folders.

In general, you should not use this function.  See the
[section on setting up a file chooser dialog][gtkfilechooserdialog-setting-up]
for the rationale behind this.
#NAME: set_paper_width
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH.
#NAME: not_registered
#PARENT: Gtk.RecentManagerError
#COMMENT: no application has registered
  the specified item.
#NAME: set_wrap_license
#PARENT: Gtk.AboutDialog
#COMMENT: Sets whether the license text in @about is
automatically wrapped.
#NAME: allocation
#PARENT: Gtk.MenuItemClass.toggle_size_allocate.toggle_size_allocate.none
#COMMENT: the allocation to use as signal data.
#NAME: set_is_important
#PARENT: Gtk.ToolItem
#COMMENT: Sets whether @tool_item should be considered important. The #GtkToolButton
class uses this property to determine whether to show or hide its label
when the toolbar style is %GTK_TOOLBAR_BOTH_HORIZ. The result is that
only tool buttons with the “is_important” property set have labels, an
effect known as “priority text”
#NAME: accel_mods
#PARENT: Gtk.AccelMap.changed.none
#COMMENT: the modifier mask for the new accelerator
#NAME: self
#PARENT: Gtk.AppChooserButton.get_show_dialog_item.gboolean
#COMMENT: a #GtkAppChooserButton
#NAME: label
#PARENT: Gtk.MenuItemClass.set_label.set_label.none
#COMMENT: the text you want to set
#NAME: get_text_size_group
#PARENT: Gtk.ToolItem
#COMMENT: Returns the size group used for labels in @tool_item.
Custom subclasses of #GtkToolItem should call this function
and use the size group for labels.
#NAME: window
#PARENT: Gtk.Window.set_default_size.none
#COMMENT: a #GtkWindow
#NAME: func
#PARENT: Gtk.ColorSelection.set_change_palette_with_screen_hook.ColorSelectionChangePaletteWithScreenFunc
#COMMENT: a function to call when the custom palette needs saving
#NAME: show-all
#PARENT: Gtk.AppChooserWidget
#COMMENT: If the #GtkAppChooserWidget:show-all property is %TRUE, the app
chooser presents all applications in a single list, without
subsections for default, recommended or related applications.
#NAME: selection
#PARENT: Gtk.TreeSelection.unselect_range.none
#COMMENT: A #GtkTreeSelection.
#NAME: completion
#PARENT: Gtk.EntryCompletion.set_popup_single_match.none
#COMMENT: a #GtkEntryCompletion
#NAME: get_tooltip
#PARENT: Gtk.Action.get_tooltip
#COMMENT: the tooltip text
#NAME: list_action_prefixes
#PARENT: Gtk.Widget
#COMMENT: Retrieves a %NULL-terminated array of strings containing the prefixes of
#GActionGroup's available to @widget.
#NAME: style-set
#PARENT: Gtk.Widget
#COMMENT: The ::style-set signal is emitted when a new style has been set
on a widget. Note that style-modifying functions like
gtk_widget_modify_base() also cause this signal to be emitted.

Note that this signal is emitted for changes to the deprecated
#GtkStyle. To track changes to the #GtkStyleContext associated
with a widget, use the #GtkWidget::style-updated signal.
#NAME: test_spin_button_click
#PARENT: Gtk.test_spin_button_click
#COMMENT: whether all actions neccessary for the button click simulation were carried out successfully.
#NAME: button-release-event
#PARENT: Gtk.Widget.button-release-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: family
#PARENT: Gtk.FontFilterFunc.gboolean
#COMMENT: a #PangoFontFamily
#NAME: mark_name
#PARENT: Gtk.TextBuffer.create_mark.TextMark
#COMMENT: name for mark, or %NULL
#NAME: type
#PARENT: Gtk.TextView.get_border_window_size.gint
#COMMENT: window to return size from
#NAME: documenters
#PARENT: Gtk.AboutDialog
#COMMENT: The people documenting the program, as a %NULL-terminated array of strings.
Each string may contain email addresses and URLs, which will be displayed
as links, see the introduction for more details.
#NAME: headers_visible
#PARENT: Gtk.TreeView.set_headers_visible.none
#COMMENT: %TRUE if the headers are visible
#NAME: drag_data_received
#PARENT: Gtk.TreeDragDest.drag_data_received
#COMMENT: whether a new row was created before position @dest
#NAME: set_use_underline
#PARENT: Gtk.Label
#COMMENT: If true, an underline in the text indicates the next character should be
used for the mnemonic accelerator key.
#NAME: buffer
#PARENT: Gtk.TextBuffer.cut_clipboard.none
#COMMENT: a #GtkTextBuffer
#NAME: accel_group
#PARENT: Gtk.Widget.remove_accelerator.gboolean
#COMMENT: accel group for this widget
#NAME: new
#PARENT: Gtk.CssProvider.new
#COMMENT: A new #GtkCssProvider
#NAME: widget
#PARENT: Gtk.CellRenderer.get_size.none
#COMMENT: the widget the renderer is rendering to
#NAME: place_cursor_onscreen
#PARENT: Gtk.TextView.place_cursor_onscreen
#COMMENT: %TRUE if the cursor had to be moved.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_icon_name.utf8
#COMMENT: a #GtkStatusIcon
#NAME: position
#PARENT: Gtk.ComboBoxText.insert.none
#COMMENT: An index to insert @text
#NAME: provider
#PARENT: Gtk.CssProvider.to_string.utf8
#COMMENT: the provider to write to a string
#NAME: get_logo
#PARENT: Gtk.AboutDialog.get_logo
#COMMENT: the pixbuf displayed as logo. The
  pixbuf is owned by the about dialog. If you want to keep a
  reference to it, you have to call g_object_ref() on it.
#NAME: bindings_activate
#PARENT: Gtk
#COMMENT: Find a key binding matching @keyval and @modifiers and activate the
binding on @object.
#NAME: lgpl_2_1_only
#PARENT: Gtk.License
#COMMENT: The GNU Lesser General Public License, version 2.1 only. Since 3.12.
#NAME: iter_set_object_type
#PARENT: Gtk.WidgetPath
#COMMENT: Sets the object type for a given position in the widget hierarchy
defined by @path.
#NAME: colorsel
#PARENT: Gtk.ColorSelection.is_adjusting.gboolean
#COMMENT: a #GtkColorSelection
#NAME: prev_page
#PARENT: Gtk.Notebook
#COMMENT: Switches to the previous page. Nothing happens if the current page
is the first page.
#NAME: settings
#PARENT: Gtk.PrintSettings.get_double.gdouble
#COMMENT: a #GtkPrintSettings
#NAME: button
#PARENT: Gtk.ScaleButton.set_adjustment.none
#COMMENT: a #GtkScaleButton
#NAME: 
#PARENT: Gtk.TreeStore.new.TreeStore...
#COMMENT: all #GType types for the columns, from first to last
#NAME: modifiers
#PARENT: Gtk.test_widget_send_key.gboolean
#COMMENT: Keyboard modifiers the event is setup with.
#NAME: entry
#PARENT: Gtk.Entry.set_max_length.none
#COMMENT: a #GtkEntry
#NAME: application
#PARENT: Gtk.Application.get_accels_for_action.utf8
#COMMENT: a #GtkApplication
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.get_open_flags.PlacesOpenFlags
#COMMENT: a #GtkPlacesSidebar
#NAME: yalign
#PARENT: Gtk.TextView.scroll_to_iter.gboolean
#COMMENT: vertical alignment of mark within visible area
#NAME: row-expanded
#PARENT: Gtk.TreeView
#COMMENT: The given row has been expanded (child nodes are shown).
#NAME: cell
#PARENT: Gtk.CellRenderer.get_preferred_height_for_width.none
#COMMENT: a #GtkCellRenderer instance
#NAME: copy
#PARENT: Gtk.RcStyle
#COMMENT: Makes a copy of the specified #GtkRcStyle. This function
will correctly copy an RC style that is a member of a class
derived from #GtkRcStyle.
#NAME: link_button
#PARENT: Gtk.LinkButton.get_uri.utf8
#COMMENT: a #GtkLinkButton
#NAME: widget
#PARENT: Gtk.Widget.get_child_visible.gboolean
#COMMENT: a #GtkWidget
#NAME: clipboard
#PARENT: Gtk.Clipboard.wait_is_rich_text_available.gboolean
#COMMENT: a #GtkClipboard
#NAME: width
#PARENT: Gtk.CellAreaContext.allocate.none
#COMMENT: the allocated width for all #GtkTreeModel rows rendered
    with @context, or -1.
#NAME: accel-group
#PARENT: Gtk.ImageMenuItem
#COMMENT: The Accel Group to use for stock accelerator keys
#NAME: accel_group
#PARENT: Gtk.ActionGroup.set_accel_group.none
#COMMENT: a #GtkAccelGroup to set or %NULL
#NAME: widget
#PARENT: Gtk.CellArea.get_cell_at_position.CellRenderer
#COMMENT: the #GtkWidget that @area is rendering on
#NAME: scanner
#PARENT: Gtk.rc_parse_priority.guint
#COMMENT: a #GScanner (must be initialized for parsing an RC file)
#NAME: is_active
#PARENT: Gtk.CheckMenuItem.set_active.none
#COMMENT: boolean value indicating whether the check box is active.
#NAME: iter
#PARENT: Gtk.TextView.get_cursor_locations.none
#COMMENT: a #GtkTextIter
#NAME: start
#PARENT: Gtk.Align
#COMMENT: snap to left or top side, leaving space on right
    or bottom
#NAME: FileFilterInfo
#PARENT: Gtk
#COMMENT: A #GtkFileFilterInfo-struct is used to pass information about the
tested file to gtk_file_filter_filter().
#NAME: shrink
#PARENT: Gtk.Paned.pack2.none
#COMMENT: can this child be made smaller than its requisition.
#NAME: context_id
#PARENT: Gtk.Statusbar.remove.none
#COMMENT: a context identifier
#NAME: new
#PARENT: Gtk.VButtonBox
#COMMENT: Creates a new vertical button box.
#NAME: get_policy
#PARENT: Gtk.ScrolledWindow
#COMMENT: Retrieves the current policy values for the horizontal and vertical
scrollbars. See gtk_scrolled_window_set_policy().
#NAME: spin_button
#PARENT: Gtk.SpinButton.set_value.none
#COMMENT: a #GtkSpinButton
#NAME: set_tooltip_column
#PARENT: Gtk.TreeView
#COMMENT: If you only plan to have simple (text-only) tooltips on full rows, you
can use this function to have #GtkTreeView handle these automatically
for you. @column should be set to the column in @tree_view’s model
containing the tooltip texts, or -1 to disable this feature.

When enabled, #GtkWidget:has-tooltip will be set to %TRUE and
@tree_view will connect a #GtkWidget::query-tooltip signal handler.

Note that the signal handler sets the text with gtk_tooltip_set_markup(),
so &, <, etc have to be escaped in the text.
#NAME: get_menubar
#PARENT: Gtk.Application.get_menubar
#COMMENT: the menubar for windows of @application
#NAME: icon_pos
#PARENT: Gtk.Entry.set_icon_tooltip_text.none
#COMMENT: the icon position
#NAME: stamp
#PARENT: Gtk.TreeIter
#COMMENT: a unique stamp to catch invalid iterators
#NAME: set_accessible_type
#PARENT: Gtk.WidgetClass
#COMMENT: Sets the type to be used for creating accessibles for widgets of
@widget_class. The given @type must be a subtype of the type used for
accessibles of the parent class.

This function should only be called from class init functions of widgets.
#NAME: entry
#PARENT: Gtk.Entry.set_width_chars.none
#COMMENT: a #GtkEntry
#NAME: forward_to_tag_toggle
#PARENT: Gtk.TextIter.forward_to_tag_toggle
#COMMENT: whether we found a tag toggle after @iter
#NAME: set_column_spacing
#PARENT: Gtk.Grid
#COMMENT: Sets the amount of space between columns of @grid.
#NAME: get_storage_type
#PARENT: Gtk.StatusIcon
#COMMENT: Gets the type of representation being used by the #GtkStatusIcon
to store image data. If the #GtkStatusIcon has no image data,
the return value will be %GTK_IMAGE_EMPTY.
#NAME: get_model
#PARENT: Gtk.TreeRowReference.get_model
#COMMENT: the model
#NAME: widget
#PARENT: Gtk.Widget.drag_source_add_image_targets.none
#COMMENT: a #GtkWidget that’s is a drag source
#NAME: buildable
#PARENT: Gtk.Buildable.add_child.none
#COMMENT: a #GtkBuildable
#NAME: get_layout
#PARENT: Gtk.ButtonBox.get_layout
#COMMENT: the method used to lay out buttons in @widget.
#NAME: new
#PARENT: Gtk.Button
#COMMENT: Creates a new #GtkButton widget. To add a child widget to the button,
use gtk_container_add().
#NAME: get_fixed_width
#PARENT: Gtk.TreeViewColumn.get_fixed_width
#COMMENT: The fixed width of the column.
#NAME: setting
#PARENT: Gtk.Window.set_has_user_ref_count.none
#COMMENT: the new value
#NAME: center
#PARENT: Gtk.WindowPosition
#COMMENT: Windows should be placed in the center of the screen.
#NAME: accel_groups_from_object
#PARENT: Gtk.accel_groups_from_object
#COMMENT: a list of
    all accel groups which are attached to @object
#NAME: sensitive
#PARENT: Gtk.Action
#COMMENT: Whether the action is enabled.
#NAME: builder
#PARENT: Gtk.Builder.add_callback_symbols.none
#COMMENT: a #GtkBuilder
#NAME: widget
#PARENT: Gtk.Widget.get_child_requisition.none
#COMMENT: a #GtkWidget
#NAME: label
#PARENT: Gtk.Label.set_label.none
#COMMENT: a #GtkLabel
#NAME: render_icon_pixbuf
#PARENT: Gtk
#COMMENT: Renders the icon specified by @source at the given @size, returning the result
in a pixbuf.
#NAME: user_data
#PARENT: Gtk.TreeIterCompareFunc.gint
#COMMENT: Data passed when the compare func is assigned e.g. by
 gtk_tree_sortable_set_sort_func()
#NAME: get_resize_grip_area
#PARENT: Gtk.Window.get_resize_grip_area
#COMMENT: %TRUE if the resize grip’s area was retrieved
#NAME: offset
#PARENT: Gtk.IMContext.delete-surrounding.gboolean
#COMMENT: the character offset from the cursor position of the text
          to be deleted. A negative value indicates a position before
          the cursor.
#NAME: set_page_complete
#PARENT: Gtk.Assistant
#COMMENT: Sets whether @page contents are complete.

This will make @assistant update the buttons state
to be able to continue the task.
#NAME: source
#PARENT: Gtk.IconSet.add_source.none
#COMMENT: a #GtkIconSource
#NAME: row
#PARENT: Gtk.ListBoxRow.changed.none
#COMMENT: a #GtkListBoxRow
#NAME: STYLE_CLASS_DEFAULT
#PARENT: Gtk
#COMMENT: A CSS class to match the default widget.

This is used by #GtkButton.
#NAME: Style
#PARENT: Gtk
#COMMENT: A #GtkStyle object encapsulates the information that provides the look and
feel for a widget.

> In GTK+ 3.0, GtkStyle has been deprecated and replaced by
> #GtkStyleContext.

Each #GtkWidget has an associated #GtkStyle object that is used when
rendering that widget. Also, a #GtkStyle holds information for the five
possible widget states though not every widget supports all five
states; see #GtkStateType.

Usually the #GtkStyle for a widget is the same as the default style that
is set by GTK+ and modified the theme engine.

Usually applications should not need to use or modify the #GtkStyle of
their widgets.
#NAME: create_pango_layout
#PARENT: Gtk.Widget
#COMMENT: Creates a new #PangoLayout with the appropriate font map,
font description, and base direction for drawing text for
this widget.

If you keep a #PangoLayout created in this way around, you need
to re-create it when the widget #PangoContext is replaced.
This can be tracked by using the #GtkWidget::screen-changed signal
on the widget.
#NAME: new
#PARENT: Gtk.Window.new
#COMMENT: a new #GtkWindow.
#NAME: get_website
#PARENT: Gtk.AboutDialog.get_website
#COMMENT: The website URL. The string is owned by the about
 dialog and must not be modified.
#NAME: gtk-menu-bar-popup-delay
#PARENT: Gtk.Settings
#COMMENT: Delay before the submenus of a menu bar appear.
#NAME: screen
#PARENT: Gtk.StyleContext.remove_provider_for_screen.none
#COMMENT: a #GdkScreen
#NAME: page
#PARENT: Gtk.Assistant.prepare.none
#COMMENT: the current page
#NAME: height
#PARENT: Gtk.IconSize.register.gint
#COMMENT: the icon height
#NAME: get_adjustment
#PARENT: Gtk.Range.get_adjustment
#COMMENT: a #GtkAdjustment
#NAME: get_tag_table
#PARENT: Gtk.TextBuffer
#COMMENT: Get the #GtkTextTagTable associated with this buffer.
#NAME: drag_set_icon_name
#PARENT: Gtk
#COMMENT: Sets the icon for a given drag from a named themed icon. See
the docs for #GtkIconTheme for more details. Note that the
size of the icon depends on the icon theme (the icon is
loaded at the symbolic size #GTK_ICON_SIZE_DND), thus
@hot_x and @hot_y have to be used with care.
#NAME: STYLE_CLASS_FRAME
#PARENT: Gtk
#COMMENT: A CSS class defining a frame delimiting content, such as
#GtkFrame or the scrolled window frame around the
scrollable area.

This is used in #GtkFrame and #GtkScrollbar.
#NAME: widget
#PARENT: Gtk.Widget.get_preferred_height.none
#COMMENT: a #GtkWidget instance
#NAME: get_visual
#PARENT: Gtk.Widget
#COMMENT: Gets the visual that will be used to render @widget.
#NAME: FileFilterFunc
#PARENT: Gtk
#COMMENT: The type of function that is used with custom filters, see
gtk_file_filter_add_custom().
#NAME: text_view
#PARENT: Gtk.TextView.get_input_purpose.InputPurpose
#COMMENT: a #GtkTextView
#NAME: width
#PARENT: Gtk.paint_slider.none
#COMMENT: the width of the rectangle in which to draw a slider
#NAME: tool_item
#PARENT: Gtk.ToolItem.set_expand.none
#COMMENT: a #GtkToolItem
#NAME: get_fit_model
#PARENT: Gtk.CellView
#COMMENT: Gets whether @cell_view is configured to request space
to fit the entire #GtkTreeModel.
#NAME: set_related_action
#PARENT: Gtk.Activatable
#COMMENT: Sets the related action on the @activatable object.

> #GtkActivatable implementors need to handle the #GtkActivatable:related-action
> property and call gtk_activatable_do_set_related_action() when it changes.
#NAME: set_website
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the URL to use for the website link.
#NAME: format
#PARENT: Gtk.ClipboardRichTextReceivedFunc.none
#COMMENT: The format of the rich text
#NAME: get_fraction
#PARENT: Gtk.ProgressBar
#COMMENT: Returns the current fraction of the task that’s been completed.
#NAME: min-content-height
#PARENT: Gtk.ScrolledWindow
#COMMENT: The minimum content height of @scrolled_window, or -1 if not set.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_search_column.none
#COMMENT: A #GtkTreeView
#NAME: get_composite_name
#PARENT: Gtk.Widget
#COMMENT: Obtains the composite name of a widget.
#NAME: cr
#PARENT: Gtk.paint_box_gap.none
#COMMENT: a #cairo_t
#NAME: is_expanded
#PARENT: Gtk.CellArea.apply_attributes.none
#COMMENT: whether @iter is expanded in the view and
              children are visible
#NAME: get_show_not_found
#PARENT: Gtk.RecentChooser
#COMMENT: Retrieves whether @chooser should show the recently used resources that
were not found.
#NAME: get_preview_widget
#PARENT: Gtk.FileChooser
#COMMENT: Gets the current preview widget; see
gtk_file_chooser_set_preview_widget().
#NAME: menu-name
#PARENT: Gtk.ModelButton
#COMMENT: The name of a submenu to open when the button is activated.
If this is set, the button should not have an action associated with it.
#NAME: get_allocated_baseline
#PARENT: Gtk.Widget.get_allocated_baseline
#COMMENT: the baseline of the @widget, or -1 if none
#NAME: data
#PARENT: Gtk.Widget.drag-data-received.none
#COMMENT: the received data
#NAME: set_icon
#PARENT: Gtk.Window
#COMMENT: Sets up the icon representing a #GtkWindow. This icon is used when
the window is minimized (also known as iconified).  Some window
managers or desktop environments may also place it in the window
frame, or display it in other contexts.

The icon should be provided in whatever size it was naturally
drawn; that is, don’t scale the image before passing it to
GTK+. Scaling is postponed until the last minute, when the desired
final size is known, to allow best quality.

If you have your icon hand-drawn in multiple sizes, use
gtk_window_set_icon_list(). Then the best size will be used.

This function is equivalent to calling gtk_window_set_icon_list()
with a 1-element list.

See also gtk_window_set_default_icon_list() to set the icon
for all windows in your application in one go.
#NAME: match-selected
#PARENT: Gtk.EntryCompletion
#COMMENT: Gets emitted when a match from the list is selected.
The default behaviour is to replace the contents of the
entry with the contents of the text column in the row
pointed to by @iter.

Note that @model is the model that was passed to
gtk_entry_completion_set_model().
#NAME: shell
#PARENT: Gtk.ToolShell.get_style.ToolbarStyle
#COMMENT: a #GtkToolShell
#NAME: get_scale_factor
#PARENT: Gtk.Widget.get_scale_factor
#COMMENT: the scale factor for @widget
#NAME: FlowBoxForeachFunc
#PARENT: Gtk
#COMMENT: A function used by gtk_flow_box_selected_foreach().
It will be called on every selected child of the @box.
#NAME: dialog_text
#PARENT: Gtk.test_create_simple_window.Widget
#COMMENT: Text inside the window to be displayed.
#NAME: move_mark_by_name
#PARENT: Gtk.TextBuffer
#COMMENT: Moves the mark named @name (which must exist) to location @where.
See gtk_text_buffer_move_mark() for details.
#NAME: get_current_event_state
#PARENT: Gtk
#COMMENT: If there is a current event and it has a state field, place
that state field in @state and return %TRUE, otherwise return
%FALSE.
#NAME: row-span-column
#PARENT: Gtk.ComboBox
#COMMENT: If this is set to a non-negative value, it must be the index of a column
of type %G_TYPE_INT in the model.

The values of that column are used to determine how many rows a value in
the list will span. Therefore, the values in the model column pointed to
by this property must be greater than zero and not larger than wrap-width.
#NAME: type_name
#PARENT: Gtk.Builder.get_type_from_name.GType
#COMMENT: type name to lookup
#NAME: get_column_spacing
#PARENT: Gtk.IconView.get_column_spacing
#COMMENT: the space between columns
#NAME: populate-popup
#PARENT: Gtk.AppChooserWidget
#COMMENT: Emitted when a context menu is about to popup over an application item.
Clients can insert menu items into the provided #GtkMenu object in the
callback of this signal; the context menu will be shown over the item
if at least one item has been added to the menu.
#NAME: get_text_orientation
#PARENT: Gtk.ToolShell
#COMMENT: Retrieves the current text orientation for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_text_orientation()
instead.
#NAME: parent_class
#PARENT: Gtk.WidgetClass
#COMMENT: The object class structure needs to be the first
  element in the widget class structure in order for the class mechanism
  to work correctly. This allows a GtkWidgetClass pointer to be cast to
  a GObjectClass pointer.
#NAME: state_type
#PARENT: Gtk.paint_tab.none
#COMMENT: a state
#NAME: length
#PARENT: Gtk.EntryBuffer
#COMMENT: The length (in characters) of the text in buffer.
#NAME: active
#PARENT: Gtk.ToggleToolButton
#COMMENT: If the toggle tool button should be pressed in.
#NAME: path
#PARENT: Gtk.UIManagerClass.get_action.get_action.Action
#COMMENT: a path
#NAME: save_fd
#PARENT: Gtk.AccelMap
#COMMENT: Filedescriptor variant of gtk_accel_map_save().

Note that the file descriptor will not be closed by this function.
#NAME: set_page_size
#PARENT: Gtk.Adjustment
#COMMENT: Sets the page size of the adjustment.

See gtk_adjustment_set_lower() about how to compress multiple
emissions of the GtkAdjustment::changed signal when setting multiple adjustment
properties.
#NAME: margin
#PARENT: Gtk.ThemingEngine.get_margin.none
#COMMENT: return value for the margin settings
#NAME: event
#PARENT: Gtk.StatusIcon.button-release-event.gboolean
#COMMENT: the #GdkEventButton which triggered
                                this signal
#NAME: widget
#PARENT: Gtk.Widget.get_template_child.GObject.Object
#COMMENT: A #GtkWidget
#NAME: set_font
#PARENT: Gtk.FontChooser
#COMMENT: Sets the currently-selected font.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_rubber_banding.none
#COMMENT: a #GtkTreeView
#NAME: get_current_alpha
#PARENT: Gtk.ColorSelection.get_current_alpha
#COMMENT: an integer between 0 and 65535
#NAME: new
#PARENT: Gtk.ComboBoxText
#COMMENT: Creates a new #GtkComboBoxText, which is a #GtkComboBox just displaying
strings.
#NAME: set_label
#PARENT: Gtk.Label
#COMMENT: Sets the text of the label. The label is interpreted as
including embedded underlines and/or Pango markup depending
on the values of the #GtkLabel:use-underline and
#GtkLabel:use-markup properties.
#NAME: table
#PARENT: Gtk.Table.set_col_spacing.none
#COMMENT: a #GtkTable.
#NAME: tree_view
#PARENT: Gtk.TreeView.unset_rows_drag_source.none
#COMMENT: a #GtkTreeView
#NAME: widget
#PARENT: Gtk.Widget.ensure_style.none
#COMMENT: a #GtkWidget
#NAME: use_text
#PARENT: Gtk.paint_layout.none
#COMMENT: whether to use the text or foreground
           graphics context of @style
#NAME: is_expander
#PARENT: Gtk.CellArea.apply_attributes.none
#COMMENT: whether @iter has children
#NAME: set_int
#PARENT: Gtk.PrintSettings
#COMMENT: Sets @key to an integer value.
#NAME: add_full
#PARENT: Gtk.RecentManager.add_full
#COMMENT: %TRUE if the new item was successfully added to the
    recently used resources list, %FALSE otherwise
#NAME: CalendarDisplayOptions
#PARENT: Gtk
#COMMENT: These options can be used to influence the display and behaviour of a #GtkCalendar.
#NAME: uri
#PARENT: Gtk.RecentChooserIface.unselect_uri.unselect_uri.none
#COMMENT: a URI
#NAME: targets_include_rich_text
#PARENT: Gtk
#COMMENT: Determines if any of the targets in @targets can be used to
provide rich text.
#NAME: TextAttributes
#PARENT: Gtk
#COMMENT: Using #GtkTextAttributes directly should rarely be necessary.
It’s primarily useful with gtk_text_iter_get_attributes().
As with most GTK+ structs, the fields in this struct should only
be read, never modified directly.
#NAME: is_cursor_position
#PARENT: Gtk.TextIter
#COMMENT: See gtk_text_iter_forward_cursor_position() or #PangoLogAttr or
pango_break() for details on what a cursor position is.
#NAME: remove
#PARENT: Gtk.ListStore.remove
#COMMENT: %TRUE if @iter is valid, %FALSE if not.
#NAME: child
#PARENT: Gtk.Notebook.set_tab_label.none
#COMMENT: the page
#NAME: top_attach
#PARENT: Gtk.Table.attach_defaults.none
#COMMENT: The row number to attach the top of the child widget to.
#NAME: label
#PARENT: Gtk.ToggleButton.new_with_mnemonic.Widget
#COMMENT: the text of the button, with an underscore in front of the
        mnemonic character
#NAME: get_pango_context
#PARENT: Gtk.Widget.get_pango_context
#COMMENT: the #PangoContext for the widget.
#NAME: context
#PARENT: Gtk.StyleContext.set_background.none
#COMMENT: a #GtkStyleContext
#NAME: get_accel_group
#PARENT: Gtk.UIManager.get_accel_group
#COMMENT: the #GtkAccelGroup.
#NAME: application-selected
#PARENT: Gtk.AppChooserWidget
#COMMENT: Emitted when an application item is selected from the widget's list.
#NAME: set_license
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the license information to be displayed in the secondary
license dialog. If @license is %NULL, the license button is
hidden.
#NAME: tbrl
#PARENT: Gtk.NumberUpLayout
#COMMENT: ![](layout-tbrl.png)
#NAME: get_scale
#PARENT: Gtk.PrintSettings.get_scale
#COMMENT: the scale in percent
#NAME: info
#PARENT: Gtk.RecentInfo.get_icon.GdkPixbuf.Pixbuf
#COMMENT: a #GtkRecentInfo
#NAME: location-toggle-popup
#PARENT: Gtk.FileChooserWidget
#COMMENT: The ::location-toggle-popup signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

This is used to toggle the visibility of a "Location"
prompt which the user can use to manually type the name of
the file he wishes to select.

The default binding for this signal is `Control + L`.
#NAME: destroy
#PARENT: Gtk.Assistant.set_forward_page_func.none
#COMMENT: destroy notifier for @data
#NAME: export
#PARENT: Gtk.PrintOperationAction
#COMMENT: Export to a file. This requires
    the export-filename property to be set.
#NAME: text
#PARENT: Gtk.ComboBoxText.append.none
#COMMENT: A string
#NAME: get_align_widget
#PARENT: Gtk.MenuButton.get_align_widget
#COMMENT: a #GtkWidget value or %NULL
#NAME: builder
#PARENT: Gtk.Buildable.get_internal_child.GObject.Object
#COMMENT: a #GtkBuilder
#NAME: sensitive
#PARENT: Gtk.ActionGroup.set_sensitive.none
#COMMENT: new sensitivity
#NAME: flags
#PARENT: Gtk.TextIter.forward_search.gboolean
#COMMENT: flags affecting how the search is done
#NAME: foreground-gdk
#PARENT: Gtk.TextTag
#COMMENT: Foreground color as a #GdkColor.
#NAME: state
#PARENT: Gtk.ThemingEngine.get_valist.none
#COMMENT: state to retrieve values for
#NAME: get_completion_prefix
#PARENT: Gtk.EntryCompletion
#COMMENT: Get the original text entered by the user that triggered
the completion or %NULL if there’s no completion ongoing.
#NAME: icon_view
#PARENT: Gtk.IconView.get_selected_items.TreePath
#COMMENT: A #GtkIconView.
#NAME: spin_button
#PARENT: Gtk.SpinButton.set_wrap.none
#COMMENT: a #GtkSpinButton
#NAME: set_default_icon_name
#PARENT: Gtk.Window
#COMMENT: Sets an icon to be used as fallback for windows that haven't
had gtk_window_set_icon_list() called on them from a named
themed icon, see gtk_window_set_icon_name().
#NAME: get_label_widget
#PARENT: Gtk.Frame
#COMMENT: Retrieves the label widget for the frame. See
gtk_frame_set_label_widget().
#NAME: vscrollbar_policy
#PARENT: Gtk.ScrolledWindow.set_policy.none
#COMMENT: policy for vertical bar
#NAME: set_child_packing
#PARENT: Gtk.Box
#COMMENT: Sets the way @child is packed into @box.
#NAME: op
#PARENT: Gtk.PrintOperation.set_n_pages.none
#COMMENT: a #GtkPrintOperation
#NAME: event
#PARENT: Gtk.SearchBar.handle_event.gboolean
#COMMENT: a #GdkEvent containing key press events
#NAME: is_sensitive
#PARENT: Gtk.Widget
#COMMENT: Returns the widget’s effective sensitivity, which means
it is sensitive itself and also its parent widget is sensitive
#NAME: selection_remove_all
#PARENT: Gtk
#COMMENT: Removes all handlers and unsets ownership of all
selections for a widget. Called when widget is being
destroyed. This function will not generally be
called by applications.
#NAME: flags
#PARENT: Gtk.CellAreaClass.activate.activate.gboolean
#COMMENT: the #GtkCellRendererState flags for @area for this row of data.
#NAME: bg
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: region_id
#PARENT: Gtk.StyleContext.notify_state_change.none
#COMMENT: animatable region to notify on, or %NULL.
    See gtk_style_context_push_animatable_region()
#NAME: widget
#PARENT: Gtk.Widget.set_sensitive.none
#COMMENT: a #GtkWidget
#NAME: get_display
#PARENT: Gtk.Clipboard
#COMMENT: Gets the #GdkDisplay associated with @clipboard
#NAME: mask
#PARENT: Gtk.AccelFlags
#COMMENT: Mask
#NAME: set_popup_set_width
#PARENT: Gtk.EntryCompletion
#COMMENT: Sets whether the completion popup window will be resized to be the same
width as the entry.
#NAME: starts_sentence
#PARENT: Gtk.TextIter
#COMMENT: Determines whether @iter begins a sentence.  Sentence boundaries are
determined by Pango and should be correct for nearly any language
(if not, the correct fix would be to the Pango text boundary
algorithms).
#NAME: widget
#PARENT: Gtk.Widget.get_allocated_width.gint
#COMMENT: the widget to query
#NAME: menu_item
#PARENT: Gtk.MenuItem.activate.none
#COMMENT: the menu item
#NAME: toggle_size_request
#PARENT: Gtk.MenuItem
#COMMENT: Emits the #GtkMenuItem::toggle-size-request signal on the given item.
#NAME: visible
#PARENT: Gtk.Widget.set_visible.none
#COMMENT: whether the widget should be shown or not
#NAME: accelerator_parse
#PARENT: Gtk
#COMMENT: Parses a string representing an accelerator. The format looks like
“<Control>a” or “<Shift><Alt>F1” or “<Release>z” (the last one is
for key release).

The parser is fairly liberal and allows lower or upper case, and also
abbreviations such as “<Ctl>” and “<Ctrl>”. Key names are parsed using
gdk_keyval_from_name(). For character keys the name is not the symbol,
but the lowercase name, e.g. one would use “<Ctrl>minus” instead of
“<Ctrl>-”.

If the parse fails, @accelerator_key and @accelerator_mods will
be set to 0 (zero).
#NAME: position
#PARENT: Gtk.CellLayout.reorder.none
#COMMENT: new position to insert @cell at
#NAME: parsing-error
#PARENT: Gtk.CssProvider
#COMMENT: Signals that a parsing error occured. the @path, @line and @position
describe the actual location of the error as accurately as possible.

Parsing errors are never fatal, so the parsing will resume after
the error. Errors may however cause parts of the given
data or even all of it to not be parsed at all. So it is a useful idea
to check that the parsing succeeds by connecting to this signal.

Note that this signal may be emitted at any time as the css provider
may opt to defer parsing parts or all of the input to a later time
than when a loading function was called.
#NAME: class_name
#PARENT: Gtk.StyleContext.remove_class.none
#COMMENT: class name to remove
#NAME: convert_child_path_to_path
#PARENT: Gtk.TreeModelFilter
#COMMENT: Converts @child_path to a path relative to @filter. That is, @child_path
points to a path in the child model. The rerturned path will point to the
same row in the filtered model. If @child_path isn’t a valid path on the
child model or points to a row which is not visible in @filter, then %NULL
is returned.
#NAME: iter
#PARENT: Gtk.TreeModelIface.get_iter.get_iter.gboolean
#COMMENT: the uninitialized #GtkTreeIter-struct
#NAME: cell
#PARENT: Gtk.CellRenderer.activate.gboolean
#COMMENT: a #GtkCellRenderer
#NAME: add_offset_value
#PARENT: Gtk.LevelBar
#COMMENT: Adds a new offset marker on @self at the position specified by @value.
When the bar value is in the interval topped by @value (or between @value
and #GtkLevelBar:max-value in case the offset is the last one on the bar)
a style class named `level-`@name will be applied
when rendering the level bar fill.
If another offset marker named @name exists, its value will be
replaced by @value.
#NAME: get_print_pages
#PARENT: Gtk.PrintSettings.get_print_pages
#COMMENT: which pages to print
#NAME: iter
#PARENT: Gtk.TextBuffer.create_child_anchor.TextChildAnchor
#COMMENT: location in the buffer
#NAME: setting
#PARENT: Gtk.HeaderBar.set_show_close_button.none
#COMMENT: %TRUE to show standard widow decorations
#NAME: new
#PARENT: Gtk.MenuItem.new
#COMMENT: the newly created #GtkMenuItem
#NAME: provider
#PARENT: Gtk.StyleProvider.get_icon_factory.IconFactory
#COMMENT: a #GtkStyleProvider
#NAME: name
#PARENT: Gtk.TextTagTable.lookup.TextTag
#COMMENT: name of a tag
#NAME: clicked
#PARENT: Gtk.TreeViewColumn
#COMMENT: Emits the “clicked” signal on the column.  This function will only work if
@tree_column is clickable.
#NAME: widget
#PARENT: Gtk.Widget.path.none
#COMMENT: a #GtkWidget
#NAME: rc_get_style_by_paths
#PARENT: Gtk.rc_get_style_by_paths
#COMMENT: A style created by matching
    with the supplied paths, or %NULL if nothing matching was
    specified and the default style should be used. The returned
    value is owned by GTK+ as part of an internal cache, so you
    must call g_object_ref() on the returned value if you want to
    keep a reference to it.
#NAME: clipboard
#PARENT: Gtk.Clipboard.set_image.none
#COMMENT: a #GtkClipboard object
#NAME: load_icon
#PARENT: Gtk.IconInfo.load_icon
#COMMENT: the rendered icon; this may be a newly
    created icon or a new reference to an internal icon, so you must
    not modify the icon. Use g_object_unref() to release your reference
    to the icon.
#NAME: message_dialog
#PARENT: Gtk.MessageDialog.format_secondary_text.none
#COMMENT: a #GtkMessageDialog
#NAME: style
#PARENT: Gtk.Style.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a #GtkStyle
#NAME: controller
#PARENT: Gtk.EventController.reset.none
#COMMENT: a #GtkEventController
#NAME: filter_pattern
#PARENT: Gtk.AccelMap.add_filter.none
#COMMENT: a pattern (see #GPatternSpec)
#NAME: path
#PARENT: Gtk.CellArea.add-editable.none
#COMMENT: the #GtkTreePath string this edit was initiated for
#NAME: new
#PARENT: Gtk.ScaleButton
#COMMENT: Creates a #GtkScaleButton, with a range between @min and @max, with
a stepping of @step.
#NAME: child
#PARENT: Gtk.Table.attach.none
#COMMENT: The widget to add.
#NAME: widget
#PARENT: Gtk.Widget.in_destruction.gboolean
#COMMENT: a #GtkWidget
#NAME: width
#PARENT: Gtk.Window.set_default_geometry.none
#COMMENT: width in resize increments, or -1 to unset the default width
#NAME: name
#PARENT: Gtk.FileChooser.set_current_name.none
#COMMENT: the filename to use, as a UTF-8 string
#NAME: rc_get_style
#PARENT: Gtk.rc_get_style
#COMMENT: the resulting style. No refcount is added
  to the returned style, so if you want to save this style around,
  you should add a reference yourself.
#NAME: display
#PARENT: Gtk.selection_owner_set_for_display.gboolean
#COMMENT: the #GdkDisplay where the selection is set
#NAME: new_radial
#PARENT: Gtk.Gradient.new_radial
#COMMENT: A newly created #GtkGradient
#NAME: builder
#PARENT: Gtk.BuildableIface.get_internal_child.get_internal_child.GObject.Object
#COMMENT: a #GtkBuilder
#NAME: dialog
#PARENT: Gtk.MessageDialog.get_image.Widget
#COMMENT: a #GtkMessageDialog
#NAME: buffer
#PARENT: Gtk.TextBuffer.copy_clipboard.none
#COMMENT: a #GtkTextBuffer
#NAME: iter
#PARENT: Gtk.TextIter.backward_sentence_starts.gboolean
#COMMENT: a #GtkTextIter
#NAME: is_descendant
#PARENT: Gtk.TreePath
#COMMENT: Returns %TRUE if @path is a descendant of @ancestor.
#NAME: area
#PARENT: Gtk.CellArea.attribute_disconnect.none
#COMMENT: a #GtkCellArea
#NAME: buffer
#PARENT: Gtk.TextBuffer.delete_interactive.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: modify_style
#PARENT: Gtk.Widget
#COMMENT: Modifies style values on the widget.

Modifications made using this technique take precedence over
style values set via an RC file, however, they will be overridden
if a style is explicitly set on the widget using gtk_widget_set_style().
The #GtkRcStyle-struct is designed so each field can either be
set or unset, so it is possible, using this function, to modify some
style values and leave the others unchanged.

Note that modifications made with this function are not cumulative
with previous calls to gtk_widget_modify_style() or with such
functions as gtk_widget_modify_fg(). If you wish to retain
previous values, you must first call gtk_widget_get_modifier_style(),
make your modifications to the returned style, then call
gtk_widget_modify_style() with that style. On the other hand,
if you first call gtk_widget_modify_style(), subsequent calls
to such functions gtk_widget_modify_fg() will have a cumulative
effect with the initial modifications.
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.iter_nth_child.iter_nth_child.gboolean
#COMMENT: a #GtkTreeModel
#NAME: add_child
#PARENT: Gtk.Buildable
#COMMENT: Adds a child to @buildable. @type is an optional string
describing how the child should be added.
#NAME: delete_selection
#PARENT: Gtk.Editable
#COMMENT: Deletes the currently selected text of the editable.
This call doesn’t do anything if there is no selected text.
#NAME: get_item_at_pos
#PARENT: Gtk.IconView.get_item_at_pos
#COMMENT: %TRUE if an item exists at the specified position
#NAME: value
#PARENT: Gtk.RadioActionEntry
#COMMENT: The value to set on the radio action. See
 gtk_radio_action_get_current_value().
#NAME: range
#PARENT: Gtk.Range.set_slider_size_fixed.none
#COMMENT: a #GtkRange
#NAME: gtk
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: convert_child_iter_to_iter
#PARENT: Gtk.TreeModelSort.convert_child_iter_to_iter
#COMMENT: %TRUE, if @sort_iter was set, i.e. if @sort_iter is a
valid iterator pointer to a visible row in the child model.
#NAME: get_tree_view
#PARENT: Gtk.TreeSelection.get_tree_view
#COMMENT: A #GtkTreeView
#NAME: callback
#PARENT: Gtk.Clipboard.request_uris.none
#COMMENT: a function to call when the URIs are received,
    or the retrieval fails. (It will always be called one way or the other.)
#NAME: about
#PARENT: Gtk.AboutDialog.set_website_label.none
#COMMENT: a #GtkAboutDialog
#NAME: points
#PARENT: Gtk.IconInfo.get_attach_points.gboolean
#COMMENT: location to store pointer
    to an array of points, or %NULL free the array of points with g_free().
#NAME: set_row_baseline_position
#PARENT: Gtk.Grid
#COMMENT: Sets how the baseline should be positioned on @row of the
grid, in case that row is assigned more space than is requested.
#NAME: new_from_file
#PARENT: Gtk.PageSetup
#COMMENT: Reads the page setup from the file @file_name. Returns a
new #GtkPageSetup object with the restored page setup,
or %NULL if an error occurred. See gtk_page_setup_to_file().
#NAME: new_with_entry
#PARENT: Gtk.ComboBoxText.new_with_entry
#COMMENT: a new #GtkComboBoxText
#NAME: get_icon_tooltip_text
#PARENT: Gtk.Entry
#COMMENT: Gets the contents of the tooltip on the icon at the specified
position in @entry.
#NAME: icon_theme
#PARENT: Gtk.IconTheme.lookup_icon_for_scale.IconInfo
#COMMENT: a #GtkIconTheme
#NAME: ref
#PARENT: Gtk.TargetList.ref
#COMMENT: the passed in #GtkTargetList.
#NAME: get_action_area
#PARENT: Gtk.Dialog.get_action_area
#COMMENT: the action area
#NAME: backward_sentence_start
#PARENT: Gtk.TextIter.backward_sentence_start
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: window-placement-set
#PARENT: Gtk.ScrolledWindow
#COMMENT: Whether "window-placement" should be used to determine the location
of the contents with respect to the scrollbars.
#NAME: set_destroy_with_parent
#PARENT: Gtk.Window
#COMMENT: If @setting is %TRUE, then destroying the transient parent of @window
will also destroy @window itself. This is useful for dialogs that
shouldn’t persist beyond the lifetime of the main window they're
associated with, for example.
#NAME: get_show_border
#PARENT: Gtk.Notebook.get_show_border
#COMMENT: %TRUE if the bevel is drawn
#NAME: type
#PARENT: Gtk.CellRendererClass.set_accessible_type.none
#COMMENT: The object type that implements the accessible for @widget_class.
    The type must be a subtype of #GtkRendererCellAccessible
#NAME: set_raw_coordinates
#PARENT: Gtk.IconInfo
#COMMENT: Sets whether the coordinates returned by gtk_icon_info_get_embedded_rect()
and gtk_icon_info_get_attach_points() should be returned in their
original form as specified in the icon theme, instead of scaled
appropriately for the pixbuf returned by gtk_icon_info_load_icon().

Raw coordinates are somewhat strange; they are specified to be with
respect to the unscaled pixmap for PNG and XPM icons, but for SVG
icons, they are in a 1000x1000 coordinate space that is scaled
to the final size of the icon.  You can determine if the icon is an SVG
icon by using gtk_icon_info_get_filename(), and seeing if it is non-%NULL
and ends in “.svg”.

This function is provided primarily to allow compatibility wrappers
for older API's, and is not expected to be useful for applications.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_activate_on_single_click.none
#COMMENT: a #GtkTreeView
#NAME: state_type
#PARENT: Gtk.paint_hline.none
#COMMENT: a state
#NAME: action
#PARENT: Gtk.ActionGroup.pre-activate.none
#COMMENT: the action
#NAME: margin
#PARENT: Gtk.IconView
#COMMENT: The margin property specifies the space which is inserted
at the edges of the icon view.
#NAME: resource_path
#PARENT: Gtk.Builder.new_from_resource.Builder
#COMMENT: a #GResource resource path
#NAME: popup
#PARENT: Gtk.UIManagerItemType
#COMMENT: Create a popup menu.
#NAME: set_hscroll_policy
#PARENT: Gtk.Scrollable
#COMMENT: Sets the #GtkScrollablePolicy to determine whether
horizontal scrolling should start below the minimum width or
below the natural width.
#NAME: get_slice
#PARENT: Gtk.TextIter
#COMMENT: Returns the text in the given range. A “slice” is an array of
characters encoded in UTF-8 format, including the Unicode “unknown”
character 0xFFFC for iterable non-character elements in the buffer,
such as images.  Because images are encoded in the slice, byte and
character offsets in the returned array will correspond to byte
offsets in the text buffer. Note that 0xFFFC can occur in normal
text as well, so it is not a reliable indicator that a pixbuf or
widget is in the buffer.
#NAME: child_focus
#PARENT: Gtk.Widget.child_focus
#COMMENT: %TRUE if focus ended up inside @widget
#NAME: get_current_grab
#PARENT: Gtk.WindowGroup
#COMMENT: Gets the current grab widget of the given group,
see gtk_grab_add().
#NAME: action
#PARENT: Gtk.Action.get_tooltip.utf8
#COMMENT: a #GtkAction
#NAME: new_from_ppd
#PARENT: Gtk.PaperSize
#COMMENT: Creates a new #GtkPaperSize object by using
PPD information.

If @ppd_name is not a recognized PPD paper name,
@ppd_display_name, @width and @height are used to
construct a custom #GtkPaperSize object.
#NAME: reorder_child
#PARENT: Gtk.Menu
#COMMENT: Moves @child to a new @position in the list of @menu
children.
#NAME: parent_class
#PARENT: Gtk.ToolItemClass
#COMMENT: The parent class.
#NAME: get_search_entry
#PARENT: Gtk.TreeView.get_search_entry
#COMMENT: the entry currently in use as search entry.
#NAME: reorderable
#PARENT: Gtk.TreeViewColumn.set_reorderable.none
#COMMENT: %TRUE, if the column can be reordered.
#NAME: rc_reset_styles
#PARENT: Gtk
#COMMENT: This function recomputes the styles for all widgets that use a
particular #GtkSettings object. (There is one #GtkSettings object
per #GdkScreen, see gtk_settings_get_for_screen()); It is useful
when some global parameter has changed that affects the appearance
of all widgets, because when a widget gets a new style, it will
both redraw and recompute any cached information about its
appearance. As an example, it is used when the default font size
set by the operating system changes. Note that this function
doesn’t affect widgets that have a style set explicitly on them
with gtk_widget_set_style().
#NAME: get_has_tooltip
#PARENT: Gtk.Widget.get_has_tooltip
#COMMENT: current value of has-tooltip on @widget.
#NAME: drop_into
#PARENT: Gtk.IconViewDropPosition
#COMMENT: dropped item replaces the item
#NAME: get_fill_level
#PARENT: Gtk.Range.get_fill_level
#COMMENT: The current fill level
#NAME: rgba
#PARENT: Gtk.ColorButton.set_rgba.none
#COMMENT: a #GdkRGBA to set the current color with
#NAME: get_velocity
#PARENT: Gtk.GestureSwipe
#COMMENT: If the gesture is recognized, this function returns %TRUE and fill in
@velocity_x and @velocity_y with the recorded velocity, as per the
last event(s) processed.
#NAME: iter
#PARENT: Gtk.TreeModel.rows_reordered_with_length.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the node
    whose children have been reordered, or %NULL if the depth
    of @path is 0
#NAME: set_padding
#PARENT: Gtk.Misc
#COMMENT: Sets the amount of space to add around the widget.
#NAME: location
#PARENT: Gtk.PlacesSidebar.remove_shortcut.none
#COMMENT: location to remove
#NAME: child
#PARENT: Gtk.Container.child_set_valist.none
#COMMENT: a widget which is a child of @container
#NAME: STYLE_CLASS_PRIMARY_TOOLBAR
#PARENT: Gtk
#COMMENT: A CSS class to match primary toolbars.

This should be used for the “main” toolbar of an application,
right below its menubar.
#NAME: register_deserialize_tagset
#PARENT: Gtk.TextBuffer.register_deserialize_tagset
#COMMENT: the #GdkAtom that corresponds to the
              newly registered format’s mime-type.
#NAME: drag_source_get_target_list
#PARENT: Gtk.Widget
#COMMENT: Gets the list of targets this widget can provide for
drag-and-drop.
#NAME: set_decorated
#PARENT: Gtk.Window
#COMMENT: By default, windows are decorated with a title bar, resize
controls, etc.  Some [window managers][gtk-X11-arch]
allow GTK+ to disable these decorations, creating a
borderless window. If you set the decorated property to %FALSE
using this function, GTK+ will do its best to convince the window
manager not to decorate the window. Depending on the system, this
function may not have any effect when called on a window that is
already visible, so you should call it before calling gtk_widget_show().

On Windows, this function always works, since there’s no window manager
policy involved.
#NAME: get_bool
#PARENT: Gtk.PrintSettings.get_bool
#COMMENT: %TRUE, if @key maps to a true value.
#NAME: show_all
#PARENT: Gtk.Widget
#COMMENT: Recursively shows a widget, and any child widgets (if the widget is
a container).
#NAME: widget
#PARENT: Gtk.WidgetClass.get_preferred_height_and_baseline_for_width.get_preferred_height_and_baseline_for_width.none
#COMMENT: a #GtkWidget instance
#NAME: child
#PARENT: Gtk.BuildableIface.custom_finished.custom_finished.none
#COMMENT: child object or %NULL for non-child tags
#NAME: first_tag
#PARENT: Gtk.TextBuffer.insert_with_tags.none
#COMMENT: first tag to apply to @text
#NAME: get_drag_item
#PARENT: Gtk.ToolPalette.get_drag_item
#COMMENT: the dragged item in selection
#NAME: next_column
#PARENT: Gtk.TreeViewColumnDropFunc.gboolean
#COMMENT: A #GtkTreeViewColumn on the other side of @column
#NAME: label
#PARENT: Gtk.Frame.new.Widget
#COMMENT: the text to use as the label of the frame
#NAME: new
#PARENT: Gtk.ActionGroup
#COMMENT: Creates a new #GtkActionGroup object. The name of the action group
is used when associating [keybindings][Action-Accel]
with the actions.
#NAME: window
#PARENT: Gtk.Application.window-added.none
#COMMENT: the newly-added #GtkWindow
#NAME: get_cursor_visible
#PARENT: Gtk.TextView.get_cursor_visible
#COMMENT: whether the insertion mark is visible
#NAME: PAPER_NAME_A3
#PARENT: Gtk
#COMMENT: Name for the A3 paper size.
#NAME: get_pixel_size
#PARENT: Gtk.Image
#COMMENT: Gets the pixel size used for named icons.
#NAME: PAPER_NAME_A4
#PARENT: Gtk
#COMMENT: Name for the A4 paper size.
#NAME: TreeViewColumnSizing
#PARENT: Gtk
#COMMENT: The sizing method the column uses to determine its width.  Please note
that @GTK_TREE_VIEW_COLUMN_AUTOSIZE are inefficient for large views, and
can make columns appear choppy.
#NAME: get_use_markup
#PARENT: Gtk.Expander.get_use_markup
#COMMENT: %TRUE if the label’s text will be parsed for markup
#NAME: PAPER_NAME_A5
#PARENT: Gtk
#COMMENT: Name for the A5 paper size.
#NAME: get_ppd_name
#PARENT: Gtk.PaperSize
#COMMENT: Gets the PPD name of the #GtkPaperSize, which
may be %NULL.
#NAME: logo
#PARENT: Gtk.AboutDialog
#COMMENT: A logo for the about box. If it is %NULL, the default window icon
set with gtk_window_set_default_icon() will be used.
#NAME: selection_data
#PARENT: Gtk.SelectionData.set.none
#COMMENT: a pointer to a #GtkSelectionData-struct.
#NAME: group
#PARENT: Gtk.ToolItemGroup.get_collapsed.gboolean
#COMMENT: a GtkToolItemGroup
#NAME: gtk-enable-event-sounds
#PARENT: Gtk.Settings
#COMMENT: Whether to play any event sounds at all.

See the [Sound Theme Specifications](http://www.freedesktop.org/wiki/Specifications/sound-theme-spec)
for more information on event sounds and sound themes.

GTK+ itself does not support event sounds, you have to use a loadable
module like the one that comes with libcanberra.
#NAME: accel_label
#PARENT: Gtk.AccelLabel.set_accel_closure.none
#COMMENT: a #GtkAccelLabel
#NAME: change-value
#PARENT: Gtk.Range.change-value
#COMMENT: %TRUE to prevent other handlers from being invoked for
    the signal, %FALSE to propagate the signal further
#NAME: get_icon_area
#PARENT: Gtk.Entry
#COMMENT: Gets the area where entry’s icon at @icon_pos is drawn.
This function is useful when drawing something to the
entry in a draw callback.

If the entry is not realized or has no icon at the given position,
@icon_area is filled with zeros.

See also gtk_entry_get_text_area()
#NAME: left_attach
#PARENT: Gtk.Menu.attach.none
#COMMENT: The column number to attach the left side of the item to
#NAME: sequence
#PARENT: Gtk.Gesture.get_point.gboolean
#COMMENT: a #GdkEventSequence, or %NULL for pointer events
#NAME: spacing
#PARENT: Gtk.CellAreaBox
#COMMENT: The amount of space to reserve between cells.
#NAME: set_valist
#PARENT: Gtk.TreeStore
#COMMENT: See gtk_tree_store_set(); this version takes a va_list for
use by language bindings.
#NAME: keyval
#PARENT: Gtk.BindingSet.activate.gboolean
#COMMENT: key value of the binding
#NAME: get_action_groups
#PARENT: Gtk.UIManager.get_action_groups
#COMMENT: a #GList of
  action groups. The list is owned by GTK+
  and should not be modified.
#NAME: widget
#PARENT: Gtk.Widget.get_can_default.gboolean
#COMMENT: a #GtkWidget
#NAME: forward_to_line_end
#PARENT: Gtk.TextIter.forward_to_line_end
#COMMENT: %TRUE if we moved and the new location is not the end iterator
#NAME: swap
#PARENT: Gtk.ListStore
#COMMENT: Swaps @a and @b in @store. Note that this function only works with
unsorted stores.
#NAME: detail
#PARENT: Gtk.paint_option.none
#COMMENT: a style detail
#NAME: get_scale
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_SCALE.
#NAME: invalid_uri
#PARENT: Gtk.RecentManagerError
#COMMENT: the URI specified is not valid.
#NAME: wrap_mode
#PARENT: Gtk.TextAttributes
#COMMENT: #GtkWrapMode for text.
#NAME: expand
#PARENT: Gtk.TreeViewColumn.pack_start.none
#COMMENT: %TRUE if @cell is to be given extra space allocated to @tree_column.
#NAME: widget
#PARENT: Gtk.Widget.queue_compute_expand.none
#COMMENT: a #GtkWidget
#NAME: offset_x
#PARENT: Gtk.GestureDrag.drag-end.none
#COMMENT: X offset, relative to the start point
#NAME: setting
#PARENT: Gtk.TextView.set_cursor_visible.none
#COMMENT: whether to show the insertion cursor
#NAME: get_n_columns
#PARENT: Gtk.TreeModel
#COMMENT: Returns the number of columns supported by @tree_model.
#NAME: add_ui_from_resource
#PARENT: Gtk.UIManager
#COMMENT: Parses a resource file containing a [UI definition][XML-UI] and
merges it with the current contents of @manager.
#NAME: info
#PARENT: Gtk.Widget.drag-data-get.none
#COMMENT: the info that has been registered with the target in the
       #GtkTargetList
#NAME: wait_is_uris_available
#PARENT: Gtk.Clipboard.wait_is_uris_available
#COMMENT: %TRUE is there is an URI list available, %FALSE otherwise.
#NAME: grid
#PARENT: Gtk.Grid.insert_row.none
#COMMENT: a #GtkGrid
#NAME: offset_y
#PARENT: Gtk.GestureDrag.drag-end.none
#COMMENT: Y offset, relative to the start point
#NAME: text-popped
#PARENT: Gtk.Statusbar
#COMMENT: Is emitted whenever a new message is popped off a statusbar's stack.
#NAME: new
#PARENT: Gtk.TreeRowReference.new
#COMMENT: a newly allocated #GtkTreeRowReference, or %NULL
#NAME: set_events
#PARENT: Gtk.Widget
#COMMENT: Sets the event mask (see #GdkEventMask) for a widget. The event
mask determines which events a widget will receive. Keep in mind
that different widgets have different default event masks, and by
changing the event mask you may disrupt a widget’s functionality,
so be careful. This function must be called while a widget is
unrealized. Consider gtk_widget_add_events() for widgets that are
already realized, or if you want to preserve the existing event
mask. This function can’t be used with widgets that have no window.
(See gtk_widget_get_has_window()).  To get events on those widgets,
place them inside a #GtkEventBox and receive events on the event
box.
#NAME: widget_class
#PARENT: Gtk.WidgetClass.set_template.none
#COMMENT: A #GtkWidgetClass
#NAME: property_value
#PARENT: Gtk.rc_property_parse_border.gboolean
#COMMENT: a #GValue which must hold boxed values.
#NAME: add_radio_actions_full
#PARENT: Gtk.ActionGroup
#COMMENT: This variant of gtk_action_group_add_radio_actions() adds a
#GDestroyNotify callback for @user_data.
#NAME: self
#PARENT: Gtk.AppChooserWidget.get_show_fallback.gboolean
#COMMENT: a #GtkAppChooserWidget
#NAME: row_drop_possible
#PARENT: Gtk.TreeDragDest
#COMMENT: Determines whether a drop is possible before the given @dest_path,
at the same depth as @dest_path. i.e., can we drop the data in
@selection_data at that location. @dest_path does not have to
exist; the return value will almost certainly be %FALSE if the
parent of @dest_path doesn’t exist, though.
#NAME: event
#PARENT: Gtk.Widget.grab-broken-event.gboolean
#COMMENT: the #GdkEventGrabBroken event
#NAME: about
#PARENT: Gtk.AboutDialog.get_license.utf8
#COMMENT: a #GtkAboutDialog
#NAME: op
#PARENT: Gtk.PrintOperation.get_status.PrintStatus
#COMMENT: a #GtkPrintOperation
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_iter_at_line_index.none
#COMMENT: a #GtkTextBuffer
#NAME: set_accept_focus
#PARENT: Gtk.Window
#COMMENT: Windows may set a hint asking the desktop environment not to receive
the input focus. This function sets this hint.
#NAME: paper_size_get_paper_sizes
#PARENT: Gtk
#COMMENT: Creates a list of known paper sizes.
#NAME: path
#PARENT: Gtk.IconTheme.append_search_path.none
#COMMENT: directory name to append to the icon path
#NAME: set-anchor
#PARENT: Gtk.TextView
#COMMENT: The ::set-anchor signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates setting the "anchor"
mark. The "anchor" mark gets placed at the same position as the
"insert" mark.

This signal has no default bindings.
#NAME: set_device_events
#PARENT: Gtk.Widget
#COMMENT: Sets the device event mask (see #GdkEventMask) for a widget. The event
mask determines which events a widget will receive from @device. Keep
in mind that different widgets have different default event masks, and by
changing the event mask you may disrupt a widget’s functionality,
so be careful. This function must be called while a widget is
unrealized. Consider gtk_widget_add_device_events() for widgets that are
already realized, or if you want to preserve the existing event
mask. This function can’t be used with windowless widgets (which return
%FALSE from gtk_widget_get_has_window());
to get events on those widgets, place them inside a #GtkEventBox
and receive events on the event box.
#NAME: renderer_class
#PARENT: Gtk.CellRendererClass.set_accessible_type.none
#COMMENT: class to set the accessible type for
#NAME: position
#PARENT: Gtk.Menu.reorder_child.none
#COMMENT: the new position to place @child.
    Positions are numbered from 0 to n - 1
#NAME: type
#PARENT: Gtk.TextView.delete-from-cursor.none
#COMMENT: the granularity of the deletion, as a #GtkDeleteType
#NAME: color
#PARENT: Gtk.ThemingEngine.get_border_color.none
#COMMENT: return value for the border color
#NAME: menu_shell
#PARENT: Gtk.MenuShell.insert.none
#COMMENT: a #GtkMenuShell
#NAME: get_rules_hint
#PARENT: Gtk.TreeView.get_rules_hint
#COMMENT: %TRUE if the hint is set
#NAME: cell_area
#PARENT: Gtk.CellArea.foreach_alloc.none
#COMMENT: the @widget relative coordinates and size for @area
#NAME: set_value
#PARENT: Gtk.SpinButton
#COMMENT: Sets the value of @spin_button.
#NAME: iter
#PARENT: Gtk.TreeStore.insert_with_valuesv.none
#COMMENT: An unset #GtkTreeIter to set the new row, or %NULL.
#NAME: accel_key
#PARENT: Gtk.AccelMapForeach.none
#COMMENT: Key of the current accelerator
#NAME: size_fixed
#PARENT: Gtk.Range.set_slider_size_fixed.none
#COMMENT: %TRUE to make the slider size constant
#NAME: new_with_text
#PARENT: Gtk.CellView
#COMMENT: Creates a new #GtkCellView widget, adds a #GtkCellRendererText
to it, and makes it show @text.
#NAME: widget
#PARENT: Gtk.CellArea.foreach_alloc.none
#COMMENT: the #GtkWidget that @area is rendering to
#NAME: get_internal_child
#PARENT: Gtk.Buildable.get_internal_child
#COMMENT: the internal child of the buildable object
#NAME: spin_button
#PARENT: Gtk.SpinButton.get_wrap.gboolean
#COMMENT: a #GtkSpinButton
#NAME: drag_source
#PARENT: Gtk.TreeDragSource.drag_data_get.gboolean
#COMMENT: a #GtkTreeDragSource
#NAME: count_selected_rows
#PARENT: Gtk.TreeSelection.count_selected_rows
#COMMENT: The number of rows selected.
#NAME: add_actions_full
#PARENT: Gtk.ActionGroup
#COMMENT: This variant of gtk_action_group_add_actions() adds a #GDestroyNotify
callback for @user_data.
#NAME: get_layout_offsets
#PARENT: Gtk.Label
#COMMENT: Obtains the coordinates where the label will draw the #PangoLayout
representing the text in the label; useful to convert mouse events
into coordinates inside the #PangoLayout, e.g. to take some action
if some part of the label is clicked. Of course you will need to
create a #GtkEventBox to receive the events, and pack the label
inside it, since labels are windowless (they return %FALSE from
gtk_widget_get_has_window()). Remember
when using the #PangoLayout functions you need to convert to
and from pixels using PANGO_PIXELS() or #PANGO_SCALE.
#NAME: set_size
#PARENT: Gtk.PaperSize
#COMMENT: Changes the dimensions of a @size to @width x @height.
#NAME: iter_get_state
#PARENT: Gtk.WidgetPath.iter_get_state
#COMMENT: The state flags
#NAME: accel-group
#PARENT: Gtk.ActionGroup
#COMMENT: The accelerator group the actions of this group should use.
#NAME: icon_view
#PARENT: Gtk.IconView.get_reorderable.gboolean
#COMMENT: a #GtkIconView
#NAME: set_use_underline
#PARENT: Gtk.MenuItem
#COMMENT: If true, an underline in the text indicates the next character
should be used for the mnemonic accelerator key.
#NAME: event
#PARENT: Gtk.StatusIcon.button-press-event.gboolean
#COMMENT: the #GdkEventButton which triggered
                                this signal
#NAME: in_destruction
#PARENT: Gtk.Widget.in_destruction
#COMMENT: %TRUE if @widget is being destroyed
#NAME: end_pos
#PARENT: Gtk.EditableInterface.delete_text.delete_text.none
#COMMENT: end position
#NAME: n_atoms
#PARENT: Gtk.SelectionData.get_targets.gboolean
#COMMENT: location to store number of items in @targets.
#NAME: chooser
#PARENT: Gtk.FileChooser.get_current_folder_file.Gio.File
#COMMENT: a #GtkFileChooser
#NAME: n_chars
#PARENT: Gtk.EntryBuffer.emit_deleted_text.none
#COMMENT: number of characters deleted
#NAME: page_down
#PARENT: Gtk.ScrollType
#COMMENT: Page down.
#NAME: lookup_color
#PARENT: Gtk.ThemingEngine
#COMMENT: Looks up and resolves a color name in the current style’s color map.
#NAME: direction
#PARENT: Gtk.render_insertion_cursor.none
#COMMENT: the #PangoDirection of the text
#NAME: about
#PARENT: Gtk.AboutDialog.get_copyright.utf8
#COMMENT: a #GtkAboutDialog
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_popup_fixed_width.gboolean
#COMMENT: a #GtkComboBox
#NAME: set_grid_lines
#PARENT: Gtk.TreeView
#COMMENT: Sets which grid lines to draw in @tree_view.
#NAME: new
#PARENT: Gtk.HeaderBar
#COMMENT: Creates a new #GtkHeaderBar widget.
#NAME: above_child
#PARENT: Gtk.EventBox.set_above_child.none
#COMMENT: %TRUE if the event box window is above its child
#NAME: PAPER_NAME_B5
#PARENT: Gtk
#COMMENT: Name for the B5 paper size.
#NAME: get_above_child
#PARENT: Gtk.EventBox.get_above_child
#COMMENT: %TRUE if the event box window is above the
    window of its child
#NAME: size
#PARENT: Gtk.PaperSize.get_default_right_margin.gdouble
#COMMENT: a #GtkPaperSize object
#NAME: scrollable
#PARENT: Gtk.Scrollable.set_hadjustment.none
#COMMENT: a #GtkScrollable
#NAME: get_start_position
#PARENT: Gtk.CssSection
#COMMENT: Returns the offset in bytes from the start of the current line
returned via gtk_css_section_get_start_line().
#NAME: activate_time
#PARENT: Gtk.StatusIcon.popup-menu.none
#COMMENT: the timestamp of the event that
  triggered the signal emission
#NAME: TargetFlags
#PARENT: Gtk
#COMMENT: The #GtkTargetFlags enumeration is used to specify
constraints on a #GtkTargetEntry.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_get_object_type.GType
#COMMENT: position to get the object type for, -1 for the path head
#NAME: button
#PARENT: Gtk.FileChooserButton.set_title.none
#COMMENT: the button widget to modify.
#NAME: about
#PARENT: Gtk.AboutDialog.set_logo.none
#COMMENT: a #GtkAboutDialog
#NAME: constant_size
#PARENT: Gtk.SizeRequestMode
#COMMENT: Don’t trade height-for-width or width-for-height
#NAME: actionable
#PARENT: Gtk.Actionable.set_detailed_action_name.none
#COMMENT: a #GtkActionable widget
#NAME: STYLE_CLASS_SEPARATOR
#PARENT: Gtk
#COMMENT: A CSS class for a separator.

This is used in #GtkSeparator, #GtkSeparatorMenuItem,
#GtkSeparatorToolItem, and when drawing separators in #GtkTreeView.
#NAME: widget
#PARENT: Gtk.Widget.get_support_multidevice.gboolean
#COMMENT: a #GtkWidget
#NAME: get_window
#PARENT: Gtk.Widget
#COMMENT: Returns the widget’s window if it is realized, %NULL otherwise
#NAME: get_object_type
#PARENT: Gtk.WidgetPath
#COMMENT: Returns the topmost object type, that is, the object type this path
is representing.
#NAME: paint_shadow_gap
#PARENT: Gtk
#COMMENT: Draws a shadow around the given rectangle in @cr
using the given style and state and shadow type, leaving a
gap in one side.
#NAME: ProgressBar
#PARENT: Gtk
#COMMENT: The #GtkProgressBar is typically used to display the progress of a long
running operation.  It provides a visual clue that processing
is underway.  The #GtkProgressBar can be used in two different
modes: percentage mode and activity mode.

When an application can determine how much work needs to take place
(e.g. read a fixed number of bytes from a file) and can monitor its
progress, it can use the #GtkProgressBar in percentage mode and the user
sees a growing bar indicating the percentage of the work that has
been completed.  In this mode, the application is required to call
gtk_progress_bar_set_fraction() periodically to update the progress bar.

When an application has no accurate way of knowing the amount of work
to do, it can use the #GtkProgressBar in activity mode, which shows
activity by a block moving back and forth within the progress area. In
this mode, the application is required to call gtk_progress_bar_pulse()
periodically to update the progress bar.

There is quite a bit of flexibility provided to control the appearance
of the #GtkProgressBar.  Functions are provided to control the
orientation of the bar, optional text can be displayed along with
the bar, and the step size used in activity mode can be set.
#NAME: send_focus_change
#PARENT: Gtk.Widget.send_focus_change
#COMMENT: the return value from the event signal emission: %TRUE
  if the event was handled, and %FALSE otherwise
#NAME: license
#PARENT: Gtk.AboutDialog.set_license.none
#COMMENT: the license information or %NULL
#NAME: action_namespace
#PARENT: Gtk.Popover.bind_model.none
#COMMENT: the namespace for actions in @model
#NAME: widget
#PARENT: Gtk.Widget.add_mnemonic_label.none
#COMMENT: a #GtkWidget
#NAME: ContainerClass
#PARENT: Gtk
#COMMENT: Base class for containers.
#NAME: local-only
#PARENT: Gtk.RecentChooser
#COMMENT: Whether this #GtkRecentChooser should display only local (file:)
resources.
#NAME: set_match_func
#PARENT: Gtk.EntryCompletion
#COMMENT: Sets the match function for @completion to be @func. The match function
is used to determine if a row should or should not be in the completion
list.
#NAME: preview
#PARENT: Gtk.PrintOperation
#COMMENT: Gets emitted when a preview is requested from the native dialog.

The default handler for this signal uses an external viewer
application to preview.

To implement a custom print preview, an application must return
%TRUE from its handler for this signal. In order to use the
provided @context for the preview implementation, it must be
given a suitable cairo context with gtk_print_context_set_cairo_context().

The custom preview implementation can use
gtk_print_operation_preview_is_selected() and
gtk_print_operation_preview_render_page() to find pages which
are selected for print and render them. The preview must be
finished by calling gtk_print_operation_preview_end_preview()
(typically in response to the user clicking a close button).
#NAME: STYLE_CLASS_MENUBAR
#PARENT: Gtk
#COMMENT: A CSS class to menubars.

This is used in #GtkMenuBar.
#NAME: color-hash
#PARENT: Gtk.Settings
#COMMENT: Holds a hash table representation of the #GtkSettings:gtk-color-scheme
setting, mapping color names to #GdkColors.
#NAME: adjustment
#PARENT: Gtk.VScale.new.Widget
#COMMENT: the #GtkAdjustment which sets the range of the scale.
#NAME: fontsel
#PARENT: Gtk.FontSelection.get_preview_entry.Widget
#COMMENT: a #GtkFontSelection
#NAME: info
#PARENT: Gtk.RecentInfo.get_gicon.Gio.Icon
#COMMENT: a #GtkRecentInfo
#NAME: widget
#PARENT: Gtk.ToolPalette.add_drag_dest.none
#COMMENT: a #GtkWidget which should be a drag destination for @palette
#NAME: iter
#PARENT: Gtk.TreeSelection.iter_is_selected.gboolean
#COMMENT: A valid #GtkTreeIter
#NAME: width
#PARENT: Gtk.WidgetClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: the width which is available for allocation
#NAME: index_
#PARENT: Gtk.EntryCompletion.insert_action_text.none
#COMMENT: the index of the item to insert
#NAME: to_string
#PARENT: Gtk.Gradient.to_string
#COMMENT: A string representation for @gradient
#NAME: STOCK_INFO
#PARENT: Gtk
#COMMENT: The “Info” item and icon.
#NAME: get_focus_on_map
#PARENT: Gtk.Window
#COMMENT: Gets the value set by gtk_window_set_focus_on_map().
#NAME: cell
#PARENT: Gtk.CellLayoutIface.reorder.reorder.none
#COMMENT: a #GtkCellRenderer to reorder
#NAME: context
#PARENT: Gtk.CellAreaContextClass.reset.reset.none
#COMMENT: a #GtkCellAreaContext
#NAME: group
#PARENT: Gtk.RadioButton
#COMMENT: Sets a new group for a radio button.
#NAME: Scale
#PARENT: Gtk
#COMMENT: A GtkScale is a slider control used to select a numeric value.
To use it, you’ll probably want to investigate the methods on
its base class, #GtkRange, in addition to the methods for GtkScale itself.
To set the value of a scale, you would normally use gtk_range_set_value().
To detect changes to the value, you would normally use the
#GtkRange::value-changed signal.

Note that using the same upper and lower bounds for the #GtkScale (through
the #GtkRange methods) will hide the slider itself. This is useful for
applications that want to show an undeterminate value on the scale, without
changing the layout of the application (such as movie or music players).

# GtkScale as GtkBuildable

GtkScale supports a custom <marks> element, which can contain multiple
<mark> elements. The “value” and “position” attributes have the same
meaning as gtk_scale_add_mark() parameters of the same name. If the
element is not empty, its content is taken as the markup to show at
the mark. It can be translated with the usual ”translatable” and
“context” attributes.
#NAME: set_can_focus
#PARENT: Gtk.Widget
#COMMENT: Specifies whether @widget can own the input focus. See
gtk_widget_grab_focus() for actually setting the input focus on a
widget.
#NAME: LockButton
#PARENT: Gtk
#COMMENT: GtkLockButton is a widget that can be used in control panels or
preference dialogs to allow users to obtain and revoke authorizations
needed to operate the controls. The required authorization is represented
by a #GPermission object. Concrete implementations of #GPermission may use
PolicyKit or some other authorization framework. To obtain a PolicyKit-based
#GPermission, use polkit_permission_new().

If the user is not currently allowed to perform the action, but can obtain
the permission, the widget looks like this:

![](lockbutton-locked.png)

and the user can click the button to request the permission. Depending
on the platform, this may pop up an authentication dialog or ask the user
to authenticate in some other way. Once the user has obtained the permission,
the widget changes to this:

![](lockbutton-unlocked.png)

and the permission can be dropped again by clicking the button. If the user
is not able to obtain the permission at all, the widget looks like this:

![](lockbutton-sorry.png)

If the user has the permission and cannot drop it, the button is hidden.

The text (and tooltips) that are shown in the various cases can be adjusted
with the #GtkLockButton:text-lock, #GtkLockButton:text-unlock,
#GtkLockButton:tooltip-lock, #GtkLockButton:tooltip-unlock and
#GtkLockButton:tooltip-not-authorized properties.
#NAME: rc_get_default_files
#PARENT: Gtk.rc_get_default_files
#COMMENT: 
     A %NULL-terminated array of filenames.  This memory is owned
    by GTK+ and must not be freed by the application.  If you want
    to store this information, you should make a copy.
#NAME: get_embedded_rect
#PARENT: Gtk.IconInfo
#COMMENT: This function is deprecated and always returns %FALSE.
#NAME: set_current_color
#PARENT: Gtk.ColorSelection
#COMMENT: Sets the current color to be @color.

The first time this is called, it will also set
the original color to be @color too.
#NAME: list
#PARENT: Gtk.TargetList.add_table.none
#COMMENT: a #GtkTargetList
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_direction.TextDirection
#COMMENT: a #GtkThemingEngine
#NAME: get
#PARENT: Gtk.AccelMap
#COMMENT: Gets the singleton global #GtkAccelMap object. This object
is useful only for notification of changes to the accelerator
map via the ::changed signal; it isn’t a parameter to the
other accelerator map functions.
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_data.guint8
#COMMENT: a pointer to a
  #GtkSelectionData-struct.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_tooltip_context.gboolean
#COMMENT: a #GtkTreeView
#NAME: width
#PARENT: Gtk.Window.get_size.none
#COMMENT: return location for width, or %NULL
#NAME: horizontal
#PARENT: Gtk.SizeGroupMode
#COMMENT: group affects horizontal requisition
#NAME: markup
#PARENT: Gtk.ToolItem.set_tooltip_markup.none
#COMMENT: markup text to be used as tooltip for @tool_item
#NAME: append_text
#PARENT: Gtk.ComboBoxText
#COMMENT: Appends @text to the list of strings stored in @combo_box.

This is the same as calling gtk_combo_box_text_insert_text() with a
position of -1.
#NAME: length
#PARENT: Gtk.TextBuffer.serialize.guint8
#COMMENT: return location for the length of the serialized data
#NAME: is_blank_at_pos
#PARENT: Gtk.TreeView.is_blank_at_pos
#COMMENT: %TRUE if the area at the given coordinates is blank,
%FALSE otherwise.
#NAME: new
#PARENT: Gtk.SearchEntry
#COMMENT: Creates a #GtkSearchEntry, with a find icon when the search field is
empty, and a clear icon when it isn't.
#NAME: render_icon
#PARENT: Gtk.Widget
#COMMENT: A convenience function that uses the theme settings for @widget
to look up @stock_id and render it to a pixbuf. @stock_id should
be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. @size
should be a size such as #GTK_ICON_SIZE_MENU. @detail should be a
string that identifies the widget or code doing the rendering, so
that theme engines can special-case rendering for that widget or
code.

The pixels in the returned #GdkPixbuf are shared with the rest of
the application and should not be modified. The pixbuf should be
freed after use with g_object_unref().
#NAME: autosize
#PARENT: Gtk.TreeViewColumnSizing
#COMMENT: Columns resize to be the optimal size everytime the model changes.
#NAME: get_comments
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the comments string.
#NAME: contains
#PARENT: Gtk.FileFilterInfo
#COMMENT: Flags indicating which of the following fields need
  are filled
#NAME: STYLE_PROPERTY_FONT
#PARENT: Gtk
#COMMENT: A property holding the font properties used when rendering text
as a #PangoFontDescription.
#NAME: props
#PARENT: Gtk.Gradient.resolve.gboolean
#COMMENT: #GtkStyleProperties to use when resolving named colors
#NAME: args
#PARENT: Gtk.StyleContext.get_valist.none
#COMMENT: va_list of property name/return location pairs, followed by %NULL
#NAME: attribute
#PARENT: Gtk.CellLayout.add_attribute.none
#COMMENT: an attribute on the renderer
#NAME: size
#PARENT: Gtk.IconTheme.choose_icon_for_scale.IconInfo
#COMMENT: desired icon size
#NAME: none
#PARENT: Gtk.InputHints
#COMMENT: No special behaviour suggested
#NAME: store
#PARENT: Gtk.ListStore.move_after.none
#COMMENT: A #GtkListStore.
#NAME: iter
#PARENT: Gtk.TextIter.set_visible_line_index.none
#COMMENT: a #GtkTextIter
#NAME: decorated
#PARENT: Gtk.Window
#COMMENT: Whether the window should be decorated by the window manager.
#NAME: set_visited
#PARENT: Gtk.LinkButton
#COMMENT: Sets the “visited” state of the URI where the #GtkLinkButton
points.  See gtk_link_button_get_visited() for more details.
#NAME: clipboard
#PARENT: Gtk.TextBuffer.copy_clipboard.none
#COMMENT: the #GtkClipboard object to copy to
#NAME: reference
#PARENT: Gtk.TreeRowReference.get_model.TreeModel
#COMMENT: a #GtkTreeRowReference
#NAME: get_dest_row_at_pos
#PARENT: Gtk.TreeView
#COMMENT: Determines the destination row for a given position.  @drag_x and
@drag_y are expected to be in widget coordinates.  This function is only
meaningful if @tree_view is realized.  Therefore this function will always
return %FALSE if @tree_view is not realized or does not have a model.
#NAME: child
#PARENT: Gtk.Buildable.custom_finished.none
#COMMENT: child object or %NULL for non-child tags
#NAME: chooser
#PARENT: Gtk.FileChooser.set_use_preview_label.none
#COMMENT: a #GtkFileChooser
#NAME: get_buffer
#PARENT: Gtk.TextMark.get_buffer
#COMMENT: the mark’s #GtkTextBuffer
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.iter_next.iter_next.gboolean
#COMMENT: a #GtkTreeModel
#NAME: icon_view
#PARENT: Gtk.IconView.get_drag_dest_item.none
#COMMENT: a #GtkIconView
#NAME: page_num
#PARENT: Gtk.Notebook.page-added.none
#COMMENT: the new page number for @child
#NAME: get_wide_handle
#PARENT: Gtk.Paned.get_wide_handle
#COMMENT: %TRUE if the paned should have a wide handle
#NAME: end
#PARENT: Gtk.SpinType
#COMMENT: Go to the adjustments upper bound.
#NAME: get_relief_style
#PARENT: Gtk.ToolItem.get_relief_style
#COMMENT: a #GtkReliefStyle indicating the relief style used
for @tool_item.
#NAME: level-indentation
#PARENT: Gtk.TreeView
#COMMENT: Extra indentation for each level.
#NAME: set_icon_from_file
#PARENT: Gtk.Window
#COMMENT: Sets the icon for @window.
Warns on failure if @err is %NULL.

This function is equivalent to calling gtk_window_set_icon()
with a pixbuf created by loading the image from @filename.
#NAME: load_symbolic_for_style
#PARENT: Gtk.IconInfo
#COMMENT: Loads an icon, modifying it to match the system colours for the foreground,
success, warning and error colors provided. If the icon is not a symbolic
one, the function will return the result from gtk_icon_info_load_icon().

This allows loading symbolic icons that will match the system theme.

See gtk_icon_info_load_symbolic() for more details.
#NAME: property_value
#PARENT: Gtk.RcProperty.parse_flags.gboolean
#COMMENT: a #GValue which must hold flags values.
#NAME: clear_attributes
#PARENT: Gtk.TreeViewColumn
#COMMENT: Clears all existing attributes previously set with
gtk_tree_view_column_set_attributes().
#NAME: string
#PARENT: Gtk.ActionGroup.translate_string.utf8
#COMMENT: a string
#NAME: STYLE_CLASS_CURSOR_HANDLE
#PARENT: Gtk
#COMMENT: A CSS class used when rendering a drag handle for
text selection.
#NAME: tag
#PARENT: Gtk.TextTagTableForeach.none
#COMMENT: the #GtkTextTag
#NAME: idle
#PARENT: Gtk.ApplicationInhibitFlags
#COMMENT: Inhibit the session being
    marked as idle (and possibly locked)
#NAME: set_current_folder
#PARENT: Gtk.FileChooser
#COMMENT: Sets the current folder for @chooser from a local filename.
The user will be shown the full contents of the current folder,
plus user interface elements for navigating to other folders.

In general, you should not use this function.  See the
[section on setting up a file chooser dialog][gtkfilechooserdialog-setting-up]
for the rationale behind this.
#NAME: get_visible_window
#PARENT: Gtk.EventBox
#COMMENT: Returns whether the event box has a visible window.
See gtk_event_box_set_visible_window() for details.
#NAME: new
#PARENT: Gtk.IconTheme
#COMMENT: Creates a new icon theme object. Icon theme objects are used
to lookup up an icon by name in a particular icon theme.
Usually, you’ll want to use gtk_icon_theme_get_default()
or gtk_icon_theme_get_for_screen() rather than creating
a new icon theme object for scratch.
#NAME: success_color
#PARENT: Gtk.IconInfo.load_symbolic.GdkPixbuf.Pixbuf
#COMMENT: a #GdkRGBA representing the warning color
    of the icon or %NULL to use the default color
#NAME: set_increments
#PARENT: Gtk.SpinButton
#COMMENT: Sets the step and page increments for spin_button.  This affects how
quickly the value changes when the spin button’s arrows are activated.
#NAME: widget
#PARENT: Gtk.Widget.get_margin_right.gint
#COMMENT: a #GtkWidget
#NAME: get_status_string
#PARENT: Gtk.PrintOperation.get_status_string
#COMMENT: a string representation of the status
   of the print operation
#NAME: func
#PARENT: Gtk.TreeSelection.set_select_function.none
#COMMENT: The selection function. May be %NULL
#NAME: modifier
#PARENT: Gtk.Window.set_mnemonic_modifier.none
#COMMENT: the modifier mask used to activate
              mnemonics on this window.
#NAME: get_title
#PARENT: Gtk.FileChooserButton.get_title
#COMMENT: a pointer to the browse dialog’s title.
#NAME: func
#PARENT: Gtk.TreeModelFilter.set_modify_func.none
#COMMENT: A #GtkTreeModelFilterModifyFunc
#NAME: window
#PARENT: Gtk.Window.get_type_hint.Gdk.WindowTypeHint
#COMMENT: a #GtkWindow
#NAME: menu_shell
#PARENT: Gtk.MenuShell.cancel.none
#COMMENT: a #GtkMenuShell
#NAME: gtk-enable-mnemonics
#PARENT: Gtk.Settings
#COMMENT: Whether labels and menu items should have visible mnemonics which
can be activated.
#NAME: context
#PARENT: Gtk.render_icon_surface.none
#COMMENT: a #GtkStyleContext
#NAME: page
#PARENT: Gtk.Assistant.append_page.gint
#COMMENT: a #GtkWidget
#NAME: get_sort_order
#PARENT: Gtk.TreeViewColumn
#COMMENT: Gets the value set by gtk_tree_view_column_set_sort_order().
#NAME: widget_class
#PARENT: Gtk.WidgetClass.set_accessible_type.none
#COMMENT: class to set the accessible type for
#NAME: get_length
#PARENT: Gtk.EntryBufferClass.get_length.get_length
#COMMENT: The number of characters in the buffer.
#NAME: get_style
#PARENT: Gtk.StyleContext
#COMMENT: Retrieves several widget style properties from @context according to the
current style.
#NAME: group-changed
#PARENT: Gtk.RadioButton
#COMMENT: Emitted when the group of radio buttons that a radio button belongs
to changes. This is emitted when a radio button switches from
being alone to being part of a group of 2 or more buttons, or
vice-versa, and when a button is moved from one group of 2 or
more buttons to a different one, but not when the composition
of the group that a button belongs to changes.
#NAME: filter
#PARENT: Gtk.RecentChooser.remove_filter.none
#COMMENT: a #GtkRecentFilter
#NAME: get_size_request
#PARENT: Gtk.Widget
#COMMENT: Gets the size request that was explicitly set for the widget using
gtk_widget_set_size_request(). A value of -1 stored in @width or
@height indicates that that dimension has not been set explicitly
and the natural requisition of the widget will be used intead. See
gtk_widget_set_size_request(). To get the size a widget will
actually request, call gtk_widget_get_preferred_size() instead of
this function.
#NAME: op
#PARENT: Gtk.PrintOperation.get_status_string.utf8
#COMMENT: a #GtkPrintOperation
#NAME: width
#PARENT: Gtk.PrintSettings.set_paper_width.none
#COMMENT: the paper width
#NAME: find_style_property
#PARENT: Gtk.WidgetClass.find_style_property
#COMMENT: the #GParamSpec of the style property or
  %NULL if @class has no style property with that name.
#NAME: position
#PARENT: Gtk.EntryBuffer.emit_inserted_text.none
#COMMENT: position at which text was inserted
#NAME: icon_view
#PARENT: Gtk.IconView.get_row_spacing.gint
#COMMENT: a #GtkIconView
#NAME: icon_name
#PARENT: Gtk.Image.get_icon_name.none
#COMMENT: place to store an
    icon name, or %NULL
#NAME: add_with_viewport
#PARENT: Gtk.ScrolledWindow
#COMMENT: Used to add children without native scrolling capabilities. This
is simply a convenience function; it is equivalent to adding the
unscrollable child to a viewport, then adding the viewport to the
scrolled window. If a child has native scrolling, use
gtk_container_add() instead of this function.

The viewport scrolls the child by moving its #GdkWindow, and takes
the size of the child to be the size of its toplevel #GdkWindow.
This will be very wrong for most widgets that support native scrolling;
for example, if you add a widget such as #GtkTreeView with a viewport,
the whole widget will scroll, including the column headings. Thus,
widgets with native scrolling support should not be used with the
#GtkViewport proxy.

A widget supports scrolling natively if it implements the
#GtkScrollable interface.
#NAME: geom_mask
#PARENT: Gtk.Window.set_geometry_hints.none
#COMMENT: mask indicating which struct fields should be paid attention to
#NAME: get_widgets
#PARENT: Gtk.TextChildAnchor
#COMMENT: Gets a list of all widgets anchored at this child anchor.
The returned list should be freed with g_list_free().
#NAME: widget
#PARENT: Gtk.Widget.modify_base.none
#COMMENT: a #GtkWidget
#NAME: group
#PARENT: Gtk.ToolItemGroup.set_header_relief.none
#COMMENT: a #GtkToolItemGroup
#NAME: get_take_focus
#PARENT: Gtk.MenuShell
#COMMENT: Returns %TRUE if the menu shell will take the keyboard focus on popup.
#NAME: settings
#PARENT: Gtk.PrintSettings.load_file.gboolean
#COMMENT: a #GtkPrintSettings
#NAME: get_request_mode
#PARENT: Gtk.CellRendererClass.get_request_mode.get_request_mode
#COMMENT: The #GtkSizeRequestMode preferred by this renderer.
#NAME: owner-change
#PARENT: Gtk.Clipboard
#COMMENT: The ::owner-change signal is emitted when GTK+ receives an
event that indicates that the ownership of the selection
associated with @clipboard has changed.
#NAME: get_has_opacity_control
#PARENT: Gtk.ColorSelection
#COMMENT: Determines whether the colorsel has an opacity control.
#NAME: cell
#PARENT: Gtk.CellLayoutIface.clear_attributes.clear_attributes.none
#COMMENT: a #GtkCellRenderer to clear the attribute mapping on
#NAME: fg
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: documenters
#PARENT: Gtk.AboutDialog.set_documenters.none
#COMMENT: a %NULL-terminated array of strings
#NAME: get_item_row
#PARENT: Gtk.IconView
#COMMENT: Gets the row in which the item @path is currently
displayed. Row numbers start at 0.
#NAME: context
#PARENT: Gtk.StyleContext.get_margin.none
#COMMENT: a #GtkStyleContext
#NAME: remove_shortcut_folder_uri
#PARENT: Gtk.FileChooser
#COMMENT: Removes a folder URI from a file chooser’s list of shortcut folders.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_orientation.none
#COMMENT: a #GtkPrintSettings
#NAME: pspec
#PARENT: Gtk.Builder.value_from_string.gboolean
#COMMENT: the #GParamSpec for the property
#NAME: xalign
#PARENT: Gtk.Frame.get_label_align.none
#COMMENT: location to store X alignment of
    frame’s label, or %NULL
#NAME: selection-done
#PARENT: Gtk.MenuShell
#COMMENT: This signal is emitted when a selection has been
completed within a menu shell.
#NAME: set_menu_label
#PARENT: Gtk.Notebook
#COMMENT: Changes the menu label for the page containing @child.
#NAME: x
#PARENT: Gtk.paint_box_gap.none
#COMMENT: x origin of the rectangle
#NAME: has_grab
#PARENT: Gtk.Widget
#COMMENT: Determines whether the widget is currently grabbing events, so it
is the only widget receiving input events (keyboard and mouse).

See also gtk_grab_add().
#NAME: y
#PARENT: Gtk.paint_box_gap.none
#COMMENT: y origin of the rectangle
#NAME: get_cell_rect
#PARENT: Gtk.IconView
#COMMENT: Fills the bounding rectangle in widget coordinates for the cell specified by
@path and @cell. If @cell is %NULL the main cell area is used.

This function is only valid if @icon_view is realized.
#NAME: end_preview
#PARENT: Gtk.PrintOperationPreview
#COMMENT: Ends a preview.

This function must be called to finish a custom print preview.
#NAME: area
#PARENT: Gtk.Widget.intersect.gboolean
#COMMENT: a rectangle
#NAME: style
#PARENT: Gtk.paint_diamond.none
#COMMENT: a #GtkStyle
#NAME: model
#PARENT: Gtk.CellView
#COMMENT: The model for cell view

since 2.10
#NAME: get_animation
#PARENT: Gtk.Image
#COMMENT: Gets the #GdkPixbufAnimation being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ANIMATION (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned animation.
#NAME: user_data
#PARENT: Gtk.EntryCompletionMatchFunc.gboolean
#COMMENT: user data given to gtk_entry_completion_set_match_func()
#NAME: combo_box
#PARENT: Gtk.ComboBox.popup_for_device.none
#COMMENT: a #GtkComboBox
#NAME: object_ids
#PARENT: Gtk.Builder.add_objects_from_resource.guint
#COMMENT: nul-terminated array of objects to build
#NAME: settings
#PARENT: Gtk.PrintOperation.update-custom-widget.none
#COMMENT: actual print settings
#NAME: show-icons
#PARENT: Gtk.RecentChooser
#COMMENT: Whether this #GtkRecentChooser should display an icon near the item.
#NAME: get_slice
#PARENT: Gtk.TextIter.get_slice
#COMMENT: slice of text from the buffer
#NAME: model
#PARENT: Gtk.CellArea.apply-attributes.none
#COMMENT: the #GtkTreeModel to apply the attributes from
#NAME: subtitle
#PARENT: Gtk.HeaderBar.set_subtitle.none
#COMMENT: a subtitle, or %NULL
#NAME: valign
#PARENT: Gtk.WidgetAuxInfo
#COMMENT: the widget’s horizontal alignment
#NAME: begin
#PARENT: Gtk.Gesture
#COMMENT: This signal is emitted when the gesture is recognized. This means the
number of touch sequences matches #GtkGesture:n-points, and the #GtkGesture::check
handler(s) returned #TRUE.

Note: These conditions may also happen when an extra touch (eg. a third touch
on a 2-touches gesture) is lifted, in that situation @sequence won't pertain
to the current set of active touches, so don't rely on this being true.
#NAME: widget
#PARENT: Gtk.Widget.drag_dest_unset.none
#COMMENT: a #GtkWidget
#NAME: set_direction
#PARENT: Gtk.MenuButton
#COMMENT: Sets the direction in which the popup will be popped up, as
well as changing the arrow’s direction. The child will not
be changed to an arrow if it was customized.

If the does not fit in the available space in the given direction,
GTK+ will its best to keep it inside the screen and fully visible.

If you pass %GTK_ARROW_NONE for a @direction, the popup will behave
as if you passed %GTK_ARROW_DOWN (although you won’t see any arrows).
#NAME: socket_id
#PARENT: Gtk.Plug.new_for_display.Widget
#COMMENT: the XID of the socket’s window.
#NAME: drag_data_delete
#PARENT: Gtk.TreeDragSource.drag_data_delete
#COMMENT: %TRUE if the row was successfully deleted
#NAME: copy
#PARENT: Gtk.WidgetPath
#COMMENT: Returns a copy of @path
#NAME: InfoBar
#PARENT: Gtk
#COMMENT: #GtkInfoBar is a widget that can be used to show messages to
the user without showing a dialog. It is often temporarily shown
at the top or bottom of a document. In contrast to #GtkDialog, which
has a action area at the bottom, #GtkInfoBar has an action area
at the side.

The API of #GtkInfoBar is very similar to #GtkDialog, allowing you
to add buttons to the action area with gtk_info_bar_add_button() or
gtk_info_bar_new_with_buttons(). The sensitivity of action widgets
can be controlled with gtk_info_bar_set_response_sensitive().
To add widgets to the main content area of a #GtkInfoBar, use
gtk_info_bar_get_content_area() and add your widgets to the container.

Similar to #GtkMessageDialog, the contents of a #GtkInfoBar can by
classified as error message, warning, informational message, etc,
by using gtk_info_bar_set_message_type(). GTK+ may use the message type
to determine how the message is displayed.

A simple example for using a GtkInfoBar:
|[<!-- language="C" -->
// set up info bar
GtkWidget *widget;
GtkInfoBar *bar;

widget = gtk_info_bar_new ();
bar = GTK_INFO_BAR (bar);

gtk_widget_set_no_show_all (widget, TRUE);
message_label = gtk_label_new ("");
gtk_widget_show (message_label);
content_area = gtk_info_bar_get_content_area (bar);
gtk_container_add (GTK_CONTAINER (content_area),
                   message_label);
gtk_info_bar_add_button (bar,
                         _("_OK"),
                         GTK_RESPONSE_OK);
g_signal_connect (bar,
                  "response",
                  G_CALLBACK (gtk_widget_hide),
                  NULL);
gtk_grid_attach (GTK_GRID (grid),
                 widget,
                 0, 2, 1, 1);

...

// show an error message
gtk_label_set_text (GTK_LABEL (message_label), message);
gtk_info_bar_set_message_type (bar,
                               GTK_MESSAGE_ERROR);
gtk_widget_show (bar);
]|

# GtkInfoBar as GtkBuildable

The GtkInfoBar implementation of the GtkBuildable interface exposes
the content area and action area as internal children with the names
“content_area” and “action_area”.

GtkInfoBar supports a custom <action-widgets> element, which can contain
multiple <action-widget> elements. The “response” attribute specifies a
numeric response, and the content of the element is the id of widget
(which should be a child of the dialogs @action_area).
#NAME: get_upper_stepper_sensitivity
#PARENT: Gtk.Range.get_upper_stepper_sensitivity
#COMMENT: The upper stepper’s sensitivity policy.
#NAME: group
#PARENT: Gtk.RecentFilter.add_group.none
#COMMENT: a group name
#NAME: cairo_should_draw_window
#PARENT: Gtk
#COMMENT: This function is supposed to be called in #GtkWidget::draw
implementations for widgets that support multiple windows.
@cr must be untransformed from invoking of the draw function.
This function will return %TRUE if the contents of the given
@window are supposed to be drawn and %FALSE otherwise. Note
that when the drawing was not initiated by the windowing
system this function will return %TRUE for all windows, so
you need to draw the bottommost window first. Also, do not
use “else if” statements to check which window should be drawn.
#NAME: get_device
#PARENT: Gtk.Gesture.get_device
#COMMENT: a #GdkDevice, or %NULL
#NAME: get_end_position
#PARENT: Gtk.CssSection.get_end_position
#COMMENT: the offset in bytes from the start of the line.
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_selection.Gdk.Atom
#COMMENT: a pointer to a #GtkSelectionData-struct.
#NAME: remove
#PARENT: Gtk.TreeStore.remove
#COMMENT: %TRUE if @iter is still valid, %FALSE if not.
#NAME: set_attributes
#PARENT: Gtk.CellLayout
#COMMENT: Sets the attributes in list as the attributes of @cell_layout.

The attributes should be in attribute/column order, as in
gtk_cell_layout_add_attribute(). All existing attributes are
removed, and replaced with the new attributes.
#NAME: manager
#PARENT: Gtk.RecentManager.add_full.gboolean
#COMMENT: a #GtkRecentManager
#NAME: table
#PARENT: Gtk.Table.get_row_spacing.guint
#COMMENT: a #GtkTable
#NAME: canceled
#PARENT: Gtk.CellRenderer.stop_editing.none
#COMMENT: %TRUE if the editing has been canceled
#NAME: chooser
#PARENT: Gtk.FileChooser.select_uri.gboolean
#COMMENT: a #GtkFileChooser
#NAME: parent_class
#PARENT: Gtk.AlignmentClass
#COMMENT: The parent class.
#NAME: none
#PARENT: Gtk.IMStatusStyle
#COMMENT: Deprecated
#NAME: add_builtin_icon
#PARENT: Gtk.IconTheme
#COMMENT: Registers a built-in icon for icon theme lookups. The idea
of built-in icons is to allow an application or library
that uses themed icons to function requiring files to
be present in the file system. For instance, the default
images for all of GTK+’s stock icons are registered
as built-icons.

In general, if you use gtk_icon_theme_add_builtin_icon()
you should also install the icon in the icon theme, so
that the icon is generally available.

This function will generally be used with pixbufs loaded
via gdk_pixbuf_new_from_inline().
#NAME: get_action_widget
#PARENT: Gtk.Notebook
#COMMENT: Gets one of the action widgets. See gtk_notebook_set_action_widget().
#NAME: realize
#PARENT: Gtk.Style
#COMMENT: Emitted when the style has been initialized for a particular
visual. Connecting to this signal is probably seldom
useful since most of the time applications and widgets only
deal with styles that have been already realized.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_get_name.utf8
#COMMENT: position to get the widget name for, -1 for the path head
#NAME: keycode
#PARENT: Gtk.accelerator_get_label_with_keycode.utf8
#COMMENT: accelerator keycode
#NAME: set_icon_from_stock
#PARENT: Gtk.Entry
#COMMENT: Sets the icon shown in the entry at the specified position from
a stock image.

If @stock_id is %NULL, no icon will be shown in the specified position.
#NAME: image_menu_item
#PARENT: Gtk.ImageMenuItem.set_always_show_image.none
#COMMENT: a #GtkImageMenuItem
#NAME: duration
#PARENT: Gtk.Revealer.set_transition_duration.none
#COMMENT: the new duration, in milliseconds
#NAME: get_style
#PARENT: Gtk.StyleProvider.get_style
#COMMENT: a #GtkStyleProperties containing the
style settings affecting @path
#NAME: n_columns
#PARENT: Gtk.TreeStore.new.TreeStore
#COMMENT: number of columns in the tree store
#NAME: get_max_length
#PARENT: Gtk.EntryBuffer
#COMMENT: Retrieves the maximum allowed length of the text in
@buffer. See gtk_entry_buffer_set_max_length().
#NAME: get_action_name
#PARENT: Gtk.Actionable
#COMMENT: Gets the action name for @actionable.

See gtk_actionable_set_action_name() for more information.
#NAME: get_content_type
#PARENT: Gtk.AppChooser
#COMMENT: Returns the current value of the #GtkAppChooser:content-type property.
#NAME: new
#PARENT: Gtk.Scrollbar
#COMMENT: Creates a new scrollbar with the given orientation.
#NAME: props
#PARENT: Gtk.StyleProperties.merge.none
#COMMENT: a #GtkStyleProperties
#NAME: get_start_point
#PARENT: Gtk.GestureDrag
#COMMENT: If the @gesture is active, this function returns %TRUE
and fills in @x and @y with the drag start coordinates,
in window-relative coordinates.
#NAME: action
#PARENT: Gtk.Action.get_stock_id.utf8
#COMMENT: a #GtkAction
#NAME: get_group_name
#PARENT: Gtk.Notebook
#COMMENT: Gets the current group name for @notebook.
#NAME: manager
#PARENT: Gtk.UIManager.remove_action_group.none
#COMMENT: a #GtkUIManager object
#NAME: get_focus_on_click
#PARENT: Gtk.ComboBox
#COMMENT: Returns whether the combo box grabs focus when it is clicked
with the mouse. See gtk_combo_box_set_focus_on_click().
#NAME: get_allocated_baseline
#PARENT: Gtk.Widget
#COMMENT: Returns the baseline that has currently been allocated to @widget.
This function is intended to be used when implementing handlers
for the #GtkWidget::draw function, and when allocating child
widgets in #GtkWidget::size_allocate.
#NAME: colorsel
#PARENT: Gtk.ColorSelection.get_previous_alpha.guint16
#COMMENT: a #GtkColorSelection
#NAME: color
#PARENT: Gtk.ColorSelection.set_current_color.none
#COMMENT: a #GdkColor to set the current color with
#NAME: editable
#PARENT: Gtk.Editable.paste_clipboard.none
#COMMENT: a #GtkEditable
#NAME: assistant
#PARENT: Gtk.Assistant.get_page_header_image.GdkPixbuf.Pixbuf
#COMMENT: a #GtkAssistant
#NAME: property_name
#PARENT: Gtk.StyleContext.get_style_property.none
#COMMENT: the name of the widget style property
#NAME: context
#PARENT: Gtk.StyleContext.list_regions.utf8
#COMMENT: a #GtkStyleContext
#NAME: column
#PARENT: Gtk.EntryCompletion.set_text_column.none
#COMMENT: the column in the model of @completion to get strings from
#NAME: box
#PARENT: Gtk.FlowBox.get_selected_children.FlowBoxChild
#COMMENT: a #GtkFlowBox
#NAME: accel_closure
#PARENT: Gtk.AccelLabel.set_accel_closure.none
#COMMENT: the closure to monitor for accelerator changes.
#NAME: progress
#PARENT: Gtk.StyleContext.state_is_running.gboolean
#COMMENT: return location for the transition progress
#NAME: strikethrough
#PARENT: Gtk.TextAppearance
#COMMENT: Strikethrough style
#NAME: get_tabs
#PARENT: Gtk.TextView
#COMMENT: Gets the default tabs for @text_view. Tags in the buffer may
override the defaults. The returned array will be %NULL if
“standard” (8-space) tabs are used. Free the return value
with pango_tab_array_free().
#NAME: start
#PARENT: Gtk.TextView.extend-selection.gboolean
#COMMENT: where the selection should start
#NAME: lines
#PARENT: Gtk.Label
#COMMENT: The number of lines to which an ellipsized, wrapping label
should be limited. This property has no effect if the
label is not wrapping or ellipsized. Set this property to
-1 if you don't want to limit the number of lines.
#NAME: logo
#PARENT: Gtk.AboutDialog.set_logo.none
#COMMENT: a #GdkPixbuf, or %NULL
#NAME: gtk-im-preedit-style
#PARENT: Gtk.Settings
#COMMENT: How to draw the input method preedit string.
#NAME: tree_model_sort
#PARENT: Gtk.TreeModelSort.clear_cache.none
#COMMENT: A #GtkTreeModelSort
#NAME: child
#PARENT: Gtk.BuildableIface.custom_tag_start.custom_tag_start.gboolean
#COMMENT: child object or %NULL for non-child tags
#NAME: expand
#PARENT: Gtk.CellLayoutIface.pack_start.pack_start.none
#COMMENT: %TRUE if @cell is to be given extra space allocated to @cell_layout
#NAME: manager
#PARENT: Gtk.RecentChooserDialog.new_for_manager.Widget
#COMMENT: a #GtkRecentManager
#NAME: edge-overshot
#PARENT: Gtk.ScrolledWindow
#COMMENT: The ::edge-overshot signal is emitted whenever user initiated scrolling
makes the scrolledwindow firmly surpass (ie. with some edge resistance)
the lower or upper limits defined by the adjustment in that orientation.

A similar behavior without edge resistance is provided by the
#GtkScrolledWindow::edge-reached signal.

Note: The @pos argument is LTR/RTL aware, so callers should be aware too
if intending to provide behavior on horizontal edges.
#NAME: area
#PARENT: Gtk.CellAreaContext
#COMMENT: The #GtkCellArea this context was created by
#NAME: new
#PARENT: Gtk.VButtonBox.new
#COMMENT: a new button box #GtkWidget.
#NAME: cell_layout
#PARENT: Gtk.CellLayout.set_attributes.none
#COMMENT: a #GtkCellLayout
#NAME: FileChooserAction
#PARENT: Gtk
#COMMENT: Describes whether a #GtkFileChooser is being used to open existing files
or to save to a possibly new file.
#NAME: entry
#PARENT: Gtk.Entry.get_progress_fraction.gdouble
#COMMENT: a #GtkEntry
#NAME: child
#PARENT: Gtk.Box.reorder_child.none
#COMMENT: the #GtkWidget to move
#NAME: unit
#PARENT: Gtk.PageSetup.get_page_height.gdouble
#COMMENT: the unit for the return value
#NAME: get_homogeneous
#PARENT: Gtk.ToolItem.get_homogeneous
#COMMENT: %TRUE if the item is the same size as other homogeneous
items.
#NAME: model
#PARENT: Gtk.TreeModelFilterModifyFunc.none
#COMMENT: the #GtkTreeModelFilter
#NAME: get_path
#PARENT: Gtk.TreeRowReference.get_path
#COMMENT: a current path, or %NULL
#NAME: iter
#PARENT: Gtk.TreeStore.iter_is_valid.gboolean
#COMMENT: A #GtkTreeIter.
#NAME: title
#PARENT: Gtk.ColorChooserDialog.new.Widget
#COMMENT: Title of the dialog, or %NULL
#NAME: default_editable
#PARENT: Gtk.TextBuffer.insert_range_interactive.gboolean
#COMMENT: default editability of the buffer
#NAME: count_selected_rows
#PARENT: Gtk.TreeSelection
#COMMENT: Returns the number of rows that have been selected in @tree.
#NAME: binding_set_new
#PARENT: Gtk
#COMMENT: GTK+ maintains a global list of binding sets. Each binding set has
a unique name which needs to be specified upon creation.
#NAME: parent
#PARENT: Gtk.FileChooserDialog.new.Widget
#COMMENT: Transient parent of the dialog, or %NULL
#NAME: window
#PARENT: Gtk.Window.add_mnemonic.none
#COMMENT: a #GtkWindow
#NAME: accel_path
#PARENT: Gtk.AccelMap.unlock_path.none
#COMMENT: a valid accelerator path
#NAME: widget
#PARENT: Gtk.Widget.drag_source_set_icon_name.none
#COMMENT: a #GtkWidget
#NAME: arrow
#PARENT: Gtk.Arrow.set.none
#COMMENT: a widget of type #GtkArrow.
#NAME: set_mode
#PARENT: Gtk.SizeGroup
#COMMENT: Sets the #GtkSizeGroupMode of the size group. The mode of the size
group determines whether the widgets in the size group should
all have the same horizontal requisition (%GTK_SIZE_GROUP_HORIZONTAL)
all have the same vertical requisition (%GTK_SIZE_GROUP_VERTICAL),
or should all have the same requisition in both directions
(%GTK_SIZE_GROUP_BOTH).
#NAME: iter_n_children
#PARENT: Gtk.TreeModel.iter_n_children
#COMMENT: the number of children of @iter
#NAME: quark
#PARENT: Gtk.FileChooserError.quark
#COMMENT: The error quark used for #GtkFileChooser errors.
#NAME: self
#PARENT: Gtk.NumerableIcon.set_label.none
#COMMENT: a #GtkNumerableIcon
#NAME: store
#PARENT: Gtk.Clipboard
#COMMENT: Stores the current clipboard data somewhere so that it will stay
around after the application has quit.
#NAME: new_with_range
#PARENT: Gtk.Scale
#COMMENT: Creates a new scale widget with the given orientation that lets the
user input a number between @min and @max (including @min and @max)
with the increment @step.  @step must be nonzero; it’s the distance
the slider moves when using the arrow keys to adjust the scale
value.

Note that the way in which the precision is derived works best if @step
is a power of ten. If the resulting precision is not suitable for your
needs, use gtk_scale_set_digits() to correct it.
#NAME: new
#PARENT: Gtk.IconFactory.new
#COMMENT: a new #GtkIconFactory
#NAME: get_int_with_default
#PARENT: Gtk.PrintSettings.get_int_with_default
#COMMENT: the integer value of @key
#NAME: gtk-menu-popdown-delay
#PARENT: Gtk.Settings
#COMMENT: The time before hiding a submenu when the pointer is moving towards the submenu.
#NAME: parent_class
#PARENT: Gtk.AspectFrameClass
#COMMENT: The parent class.
#NAME: unit
#PARENT: Gtk.PrintSettings.set_paper_width.none
#COMMENT: the units of @width
#NAME: get_hexpand
#PARENT: Gtk.Widget.get_hexpand
#COMMENT: whether hexpand flag is set
#NAME: page_num
#PARENT: Gtk.Notebook.remove_page.none
#COMMENT: the index of a notebook page, starting
    from 0. If -1, the last page will be removed.
#NAME: event
#PARENT: Gtk.CellRenderer.activate.gboolean
#COMMENT: a #GdkEvent
#NAME: new
#PARENT: Gtk.TextTagTable
#COMMENT: Creates a new #GtkTextTagTable. The table contains no tags by
default.
#NAME: get_model
#PARENT: Gtk.TreeModelFilter
#COMMENT: Returns a pointer to the child model of @filter.
#NAME: free
#PARENT: Gtk.IconSource
#COMMENT: Frees a dynamically-allocated icon source, along with its
filename, size, and pixbuf fields if those are not %NULL.
#NAME: accel_path
#PARENT: Gtk.MenuItem.set_accel_path.none
#COMMENT: accelerator path, corresponding to this menu
    item’s functionality, or %NULL to unset the current path.
#NAME: get_icon_size
#PARENT: Gtk.ToolShell
#COMMENT: Retrieves the icon size for the tool shell. Tool items must not call this
function directly, but rely on gtk_tool_item_get_icon_size() instead.
#NAME: set_justify
#PARENT: Gtk.Label
#COMMENT: Sets the alignment of the lines in the text of the label relative to
each other. %GTK_JUSTIFY_LEFT is the default value when the widget is
first created with gtk_label_new(). If you instead want to set the
alignment of the label as a whole, use gtk_widget_set_halign() instead.
gtk_label_set_justify() has no effect on labels containing only a
single line.
#NAME: inconsistent
#PARENT: Gtk.StateType
#COMMENT: The widget is inconsistent, such as checkbuttons
                         or radiobuttons that aren’t either set to %TRUE nor %FALSE,
                         or buttons requiring the user attention.
#NAME: join_group
#PARENT: Gtk.RadioAction
#COMMENT: Joins a radio action object to the group of another radio action object.

Use this in language bindings instead of the gtk_radio_action_get_group()
and gtk_radio_action_set_group() methods

A common way to set up a group of radio actions is the following:
|[<!-- language="C" -->
  GtkRadioAction *action;
  GtkRadioAction *last_action;
 
  while ( ...more actions to add... /)
    {
       action = gtk_radio_action_new (...);
       
       gtk_radio_action_join_group (action, last_action);
       last_action = action;
    }
]|
#NAME: iter
#PARENT: Gtk.TextIter.ends_line.gboolean
#COMMENT: an iterator
#NAME: name
#PARENT: Gtk.AppChooserButton.append_custom_item.none
#COMMENT: the name of the custom item
#NAME: is_text
#PARENT: Gtk.TextAppearance
#COMMENT: This are only used when we are actually laying
  out and rendering a paragraph; not when a #GtkTextAppearance is
  part of a #GtkTextAttributes.
#NAME: destroy
#PARENT: Gtk.TreeView.set_row_separator_func.none
#COMMENT: destroy notifier for @data, or %NULL
#NAME: parent_class
#PARENT: Gtk.ScrolledWindowClass
#COMMENT: The parent class.
#NAME: ToggleButton
#PARENT: Gtk
#COMMENT: A #GtkToggleButton is a #GtkButton which will remain “pressed-in” when
clicked. Clicking again will cause the toggle button to return to its
normal state.

A toggle button is created by calling either gtk_toggle_button_new() or
gtk_toggle_button_new_with_label(). If using the former, it is advisable to
pack a widget, (such as a #GtkLabel and/or a #GtkImage), into the toggle
button’s container. (See #GtkButton for more information).

The state of a #GtkToggleButton can be set specifically using
gtk_toggle_button_set_active(), and retrieved using
gtk_toggle_button_get_active().

To simply switch the state of a toggle button, use gtk_toggle_button_toggled().

## Creating two #GtkToggleButton widgets.

|[<!-- language="C" -->
void make_toggles (void) {
   GtkWidget *dialog, *toggle1, *toggle2;
   GtkWidget *content_area;
   const char *text;

   dialog = gtk_dialog_new (text);
   content_area = gtk_dialog_get_content_area ();

   text = "Hi, i’m a toggle button.";
   toggle1 = gtk_toggle_button_new_with_label (text);

   // Makes this toggle button invisible
   gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (toggle1),
                               TRUE);

   g_signal_connect (toggle1, "toggled",
                     G_CALLBACK (output_state),
                     NULL);
   gtk_box_pack_start (GTK_BOX (content_area),
                       toggle1, FALSE, FALSE, 2);

   text = "Hi, i’m a toggle button.";
   toggle2 = gtk_toggle_button_new_with_label (text);
   gtk_toggle_button_set_mode (GTK_TOGGLE_BUTTON (toggle2),
                               FALSE);
   g_signal_connect (toggle2, "toggled",
                     G_CALLBACK (output_state),
                     NULL);
   gtk_box_pack_start (GTK_BOX (content_area),
                       toggle2, FALSE, FALSE, 2);

   gtk_widget_show_all (dialog);
}
]|
#NAME: x
#PARENT: Gtk.paint_slider.none
#COMMENT: the x origin of the rectangle in which to draw a slider
#NAME: editable
#PARENT: Gtk.Editable.do_insert_text.none
#COMMENT: a #GtkEditable
#NAME: section
#PARENT: Gtk.CssSection.get_end_line.guint
#COMMENT: the section
#NAME: context
#PARENT: Gtk.StyleContext.set_state.none
#COMMENT: a #GtkStyleContext
#NAME: y
#PARENT: Gtk.paint_slider.none
#COMMENT: the y origin of the rectangle in which to draw a slider
#NAME: get_icon_name
#PARENT: Gtk.Image
#COMMENT: Gets the icon name and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ICON_NAME (see gtk_image_get_storage_type()).
The returned string is owned by the #GtkImage and should not
be freed.
#NAME: output
#PARENT: Gtk.SpinButton.output
#COMMENT: %TRUE if the value has been displayed
#NAME: tree_view
#PARENT: Gtk.TreeView.set_tooltip_column.none
#COMMENT: a #GtkTreeView
#NAME: widget
#PARENT: Gtk.Widget.set_state.none
#COMMENT: a #GtkWidget
#NAME: start_editing
#PARENT: Gtk.CellEditable
#COMMENT: Begins editing on a @cell_editable. @event is the #GdkEvent that began
the editing process. It may be %NULL, in the instance that editing was
initiated through programatic means.
#NAME: FileChooser
#PARENT: Gtk
#COMMENT: #GtkFileChooser is an interface that can be implemented by file
selection widgets.  In GTK+, the main objects that implement this
interface are #GtkFileChooserWidget, #GtkFileChooserDialog, and
#GtkFileChooserButton.  You do not need to write an object that
implements the #GtkFileChooser interface unless you are trying to
adapt an existing file selector to expose a standard programming
interface.

#GtkFileChooser allows for shortcuts to various places in the filesystem.
In the default implementation these are displayed in the left pane. It
may be a bit confusing at first that these shortcuts come from various
sources and in various flavours, so lets explain the terminology here:

- Bookmarks: are created by the user, by dragging folders from the
  right pane to the left pane, or by using the “Add”. Bookmarks
  can be renamed and deleted by the user.

- Shortcuts: can be provided by the application. For example, a Paint
  program may want to add a shortcut for a Clipart folder. Shortcuts
  cannot be modified by the user.

- Volumes: are provided by the underlying filesystem abstraction. They are
  the “roots” of the filesystem.

# File Names and Encodings

When the user is finished selecting files in a
#GtkFileChooser, your program can get the selected names
either as filenames or as URIs.  For URIs, the normal escaping
rules are applied if the URI contains non-ASCII characters.
However, filenames are always returned in
the character set specified by the
`G_FILENAME_ENCODING` environment variable.
Please see the GLib documentation for more details about this
variable.

This means that while you can pass the result of
gtk_file_chooser_get_filename() to open() or fopen(),
you may not be able to directly set it as the text of a
#GtkLabel widget unless you convert it first to UTF-8,
which all GTK+ widgets expect. You should use g_filename_to_utf8()
to convert filenames into strings that can be passed to GTK+
widgets.

# Adding a Preview Widget

You can add a custom preview widget to a file chooser and then
get notification about when the preview needs to be updated.
To install a preview widget, use
gtk_file_chooser_set_preview_widget().  Then, connect to the
#GtkFileChooser::update-preview signal to get notified when
you need to update the contents of the preview.

Your callback should use
gtk_file_chooser_get_preview_filename() to see what needs
previewing.  Once you have generated the preview for the
corresponding file, you must call
gtk_file_chooser_set_preview_widget_active() with a boolean
flag that indicates whether your callback could successfully
generate a preview.

## Example: Using a Preview Widget ## {#gtkfilechooser-preview}
|[<!-- language="C" -->
{
  GtkImage *preview;

  ...

  preview = gtk_image_new ();

  gtk_file_chooser_set_preview_widget (my_file_chooser, preview);
  g_signal_connect (my_file_chooser, "update-preview",
		    G_CALLBACK (update_preview_cb), preview);
}

static void
update_preview_cb (GtkFileChooser *file_chooser, gpointer data)
{
  GtkWidget *preview;
  char *filename;
  GdkPixbuf *pixbuf;
  gboolean have_preview;

  preview = GTK_WIDGET (data);
  filename = gtk_file_chooser_get_preview_filename (file_chooser);

  pixbuf = gdk_pixbuf_new_from_file_at_size (filename, 128, 128, NULL);
  have_preview = (pixbuf != NULL);
  g_free (filename);

  gtk_image_set_from_pixbuf (GTK_IMAGE (preview), pixbuf);
  if (pixbuf)
    g_object_unref (pixbuf);

  gtk_file_chooser_set_preview_widget_active (file_chooser, have_preview);
}
]|

# Adding Extra Widgets

You can add extra widgets to a file chooser to provide options
that are not present in the default design.  For example, you
can add a toggle button to give the user the option to open a
file in read-only mode.  You can use
gtk_file_chooser_set_extra_widget() to insert additional
widgets in a file chooser.

An example for adding extra widgets:
|[<!-- language="C" -->

  GtkWidget *toggle;

  ...

  toggle = gtk_check_button_new_with_label ("Open file read-only");
  gtk_widget_show (toggle);
  gtk_file_chooser_set_extra_widget (my_file_chooser, toggle);
}
]|

If you want to set more than one extra widget in the file
chooser, you can a container such as a #GtkBox or a #GtkGrid
and include your widgets in it.  Then, set the container as
the whole extra widget.
#NAME: get_font_name
#PARENT: Gtk.FontSelection.get_font_name
#COMMENT: A string with the name of the current font, or %NULL if
    no font is selected. You must free this string with g_free().
#NAME: get_search_equal_func
#PARENT: Gtk.TreeView.get_search_equal_func
#COMMENT: the currently used compare function for the search code.
#NAME: get_child_requisition
#PARENT: Gtk.Widget
#COMMENT: This function is only for use in widget implementations. Obtains
@widget->requisition, unless someone has forced a particular
geometry on the widget (e.g. with gtk_widget_set_size_request()),
in which case it returns that geometry instead of the widget's
requisition.

This function differs from gtk_widget_size_request() in that
it retrieves the last size request value from @widget->requisition,
while gtk_widget_size_request() actually calls the "size_request" method
on @widget to compute the size request and fill in @widget->requisition,
and only then returns @widget->requisition.

Because this function does not call the “size_request” method, it
can only be used when you know that @widget->requisition is
up-to-date, that is, gtk_widget_size_request() has been called
since the last time a resize was queued. In general, only container
implementations have this information; applications should use
gtk_widget_size_request().
#NAME: set_realized
#PARENT: Gtk.Widget
#COMMENT: Marks the widget as being realized. This function must only be
called after all #GdkWindows for the @widget have been created
and registered.

This function should only ever be called in a derived widget's
“realize” or “unrealize” implementation.
#NAME: settings
#PARENT: Gtk.PrintSettings.to_file.gboolean
#COMMENT: a #GtkPrintSettings
#NAME: filter
#PARENT: Gtk.RecentFilter.get_needed.RecentFilterFlags
#COMMENT: a #GtkRecentFilter
#NAME: get_locale_direction
#PARENT: Gtk
#COMMENT: Get the direction of the current locale. This is the expected
reading direction for text and UI.

This function depends on the current locale being set with
setlocale() and will default to setting the %GTK_TEXT_DIR_LTR
direction otherwise. %GTK_TEXT_DIR_NONE will never be returned.

GTK+ sets the default text direction according to the locale
during gtk_init(), and you should normally use
gtk_widget_get_direction() or gtk_widget_get_default_direction()
to obtain the current direcion.

This function is only needed rare cases when the locale is
changed after GTK+ has already been initialized. In this case,
you can use it to update the default text direction as follows:

|[<!-- language="C" -->
setlocale (LC_ALL, new_locale);
direction = gtk_get_locale_direction ();
gtk_widget_set_default_direction (direction);
]|
#NAME: filename
#PARENT: Gtk.Image.set_from_file.none
#COMMENT: a filename or %NULL
#NAME: list_store
#PARENT: Gtk.ListStore.clear.none
#COMMENT: a #GtkListStore.
#NAME: embed-page-setup
#PARENT: Gtk.PrintOperation
#COMMENT: If %TRUE, page size combo box and orientation combo box are embedded into page setup page.
#NAME: released
#PARENT: Gtk.GestureMultiPress
#COMMENT: This signal is emitted when a button or touch is released. @n_press
will report the number of press that is paired to this event, note
that #GtkGestureMultiPress::stopped may have been emitted between the
press and its release, @n_press will only start over at the next press.
#NAME: mark
#PARENT: Gtk.TextBuffer.add_mark.none
#COMMENT: the mark to add
#NAME: buffer
#PARENT: Gtk.TextBuffer.register_deserialize_format.Gdk.Atom
#COMMENT: a #GtkTextBuffer
#NAME: button
#PARENT: Gtk.ColorButton.set_alpha.none
#COMMENT: a #GtkColorButton
#NAME: set_value
#PARENT: Gtk.ListStore
#COMMENT: Sets the data in the cell specified by @iter and @column.
The type of @value must be convertible to the type of the
column.
#NAME: context
#PARENT: Gtk.CellAreaContext.allocate.none
#COMMENT: a #GtkCellAreaContext
#NAME: adjustment
#PARENT: Gtk.Adjustment.get_page_increment.gdouble
#COMMENT: a #GtkAdjustment
#NAME: remove_row
#PARENT: Gtk.Grid
#COMMENT: Removes a row from the grid.

Children that are placed in this row are removed,
spanning children that overlap this row have their
height reduced by one, and children below the row
are moved up.
#NAME: get_cell_at_position
#PARENT: Gtk.CellArea.get_cell_at_position
#COMMENT: the #GtkCellRenderer at @x and @y.
#NAME: model
#PARENT: Gtk.CellView.set_model.none
#COMMENT: a #GtkTreeModel
#NAME: Bin
#PARENT: Gtk
#COMMENT: The #GtkBin widget is a container with just one child.
It is not very useful itself, but it is useful for deriving subclasses,
since it provides common code needed for handling a single child widget.

Many GTK+ widgets are subclasses of #GtkBin, including #GtkWindow,
#GtkButton, #GtkFrame, #GtkHandleBox or #GtkScrolledWindow.
#NAME: word
#PARENT: Gtk.WrapMode
#COMMENT: wrap text, breaking lines in between words
#NAME: remove
#PARENT: Gtk.CellArea
#COMMENT: Removes @renderer from @area.
#NAME: spacing
#PARENT: Gtk.CellAreaBox.set_spacing.none
#COMMENT: the space to add between #GtkCellRenderers
#NAME: cell_layout
#PARENT: Gtk.CellLayout.pack_end.none
#COMMENT: a #GtkCellLayout
#NAME: area
#PARENT: Gtk.CellAreaClass.foreach_alloc.foreach_alloc.none
#COMMENT: a #GtkCellArea
#NAME: renderer
#PARENT: Gtk.CellArea.cell_get_valist.none
#COMMENT: a #GtkCellRenderer inside @area
#NAME: keyboard_tip
#PARENT: Gtk.TreeView.get_tooltip_context.gboolean
#COMMENT: whether this is a keyboard tooltip or not
#NAME: disconnect_accelerator
#PARENT: Gtk.Action
#COMMENT: Undoes the effect of one call to gtk_action_connect_accelerator().
#NAME: length
#PARENT: Gtk.TextBufferDeserializeFunc.gboolean
#COMMENT: length of @data
#NAME: signal_name
#PARENT: Gtk.BuilderConnectFunc.none
#COMMENT: name of the signal
#NAME: about
#PARENT: Gtk.AboutDialog.set_artists.none
#COMMENT: a #GtkAboutDialog
#NAME: get_label
#PARENT: Gtk.Label
#COMMENT: Fetches the text from a label widget including any embedded
underlines indicating mnemonics and Pango markup. (See
gtk_label_get_text()).
#NAME: get_surrounding
#PARENT: Gtk.IMContext.get_surrounding
#COMMENT: %TRUE if surrounding text was provided; in this case
   you must free the result stored in *text.
#NAME: get_uri
#PARENT: Gtk.LinkButton
#COMMENT: Retrieves the URI set using gtk_link_button_set_uri().
#NAME: get_junction_sides
#PARENT: Gtk.ThemingEngine.get_junction_sides
#COMMENT: the widget direction
#NAME: tree_model
#PARENT: Gtk.TreeModel.iter_parent.gboolean
#COMMENT: a #GtkTreeModel
#NAME: get_attached_to
#PARENT: Gtk.Window
#COMMENT: Fetches the attach widget for this window. See
gtk_window_set_attached_to().
#NAME: spacing
#PARENT: Gtk.Grid.set_column_spacing.none
#COMMENT: the amount of space to insert between columns
#NAME: construct
#PARENT: Gtk.Plug
#COMMENT: Finish the initialization of @plug for a given #GtkSocket identified by
@socket_id. This function will generally only be used by classes deriving from #GtkPlug.
#NAME: list_only
#PARENT: Gtk.TreeModelFlags
#COMMENT: the model is a list only, and never
    has children
#NAME: set_active
#PARENT: Gtk.ComboBox
#COMMENT: Sets the active item of @combo_box to be the item at @index.
#NAME: setting
#PARENT: Gtk.InfoBar.set_show_close_button.none
#COMMENT: %TRUE to include a close button
#NAME: icon_info
#PARENT: Gtk.IconInfo.free.none
#COMMENT: a #GtkIconInfo
#NAME: info
#PARENT: Gtk.RecentInfo.get_application_info.gboolean
#COMMENT: a #GtkRecentInfo
#NAME: accel_mods
#PARENT: Gtk.AccelMapForeach.none
#COMMENT: Modifiers of the current accelerator
#NAME: height
#PARENT: Gtk.Grid.attach.none
#COMMENT: the number of rows that @child will span
#NAME: get_min_content_width
#PARENT: Gtk.ScrolledWindow.get_min_content_width
#COMMENT: the minimum content width
#NAME: assistant
#PARENT: Gtk.Assistant.get_page_complete.gboolean
#COMMENT: a #GtkAssistant
#NAME: get_enable_tree_lines
#PARENT: Gtk.TreeView.get_enable_tree_lines
#COMMENT: %TRUE if tree lines are drawn in @tree_view, %FALSE
otherwise.
#NAME: set_hexpand_set
#PARENT: Gtk.Widget
#COMMENT: Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
be used.

The hexpand-set property will be set automatically when you call
gtk_widget_set_hexpand() to set hexpand, so the most likely
reason to use this function would be to unset an explicit expand
flag.

If hexpand is set, then it overrides any computed
expand value based on child widgets. If hexpand is not
set, then the expand value depends on whether any
children of the widget would like to expand.

There are few reasons to use this function, but it’s here
for completeness and consistency.
#NAME: user_data
#PARENT: Gtk.FlowBox.set_filter_func.none
#COMMENT: user data passed to @filter_func
#NAME: get
#PARENT: Gtk.StyleProperties
#COMMENT: Retrieves several style property values from @props for a
given state.
#NAME: iter
#PARENT: Gtk.ListStore.set_value.none
#COMMENT: A valid #GtkTreeIter for the row being modified
#NAME: manager
#PARENT: Gtk.UIManager.add_ui.none
#COMMENT: a #GtkUIManager
#NAME: mnemonic-activate
#PARENT: Gtk.Widget.mnemonic-activate
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
%FALSE to propagate the event further.
#NAME: drag-begin
#PARENT: Gtk.GestureDrag
#COMMENT: This signal is emitted whenever dragging starts.
#NAME: destroy
#PARENT: Gtk.ListBox.set_sort_func.none
#COMMENT: destroy notifier for @user_data
#NAME: menu
#PARENT: Gtk.Menu.get_active.Widget
#COMMENT: a #GtkMenu
#NAME: path
#PARENT: Gtk.TreeModelIface.get_iter.get_iter.gboolean
#COMMENT: the #GtkTreePath-struct
#NAME: get_font_face
#PARENT: Gtk.FontChooser
#COMMENT: Gets the #PangoFontFace representing the selected font group
details (i.e. family, slant, weight, width, etc).

If the selected font is not installed, returns %NULL.
#NAME: exclusive
#PARENT: Gtk.GestureSingle
#COMMENT: Whether the gesture is exclusive. Exclusive gestures only listen to pointer
and pointer emulated events.
#NAME: hscrollbar_policy
#PARENT: Gtk.ScrolledWindow.get_policy.none
#COMMENT: location to store the policy
    for the horizontal scrollbar, or %NULL
#NAME: argc
#PARENT: Gtk.init_check.gboolean
#COMMENT: Address of the `argc` parameter of
    your main() function (or 0 if @argv is %NULL). This will be changed if
    any arguments were handled.
#NAME: get_area
#PARENT: Gtk.CellLayoutIface.get_area.get_area
#COMMENT: the cell area used by @cell_layout.
#NAME: add_signal_from_string
#PARENT: Gtk.BindingEntry.add_signal_from_string
#COMMENT: %G_TOKEN_NONE if the signal was successfully parsed and added,
    the expected token otherwise
#NAME: move
#PARENT: Gtk.Window
#COMMENT: Asks the [window manager][gtk-X11-arch] to move
@window to the given position.  Window managers are free to ignore
this; most window managers ignore requests for initial window
positions (instead using a user-defined placement algorithm) and
honor requests after the window has already been shown.

Note: the position is the position of the gravity-determined
reference point for the window. The gravity determines two things:
first, the location of the reference point in root window
coordinates; and second, which point on the window is positioned at
the reference point.

By default the gravity is #GDK_GRAVITY_NORTH_WEST, so the reference
point is simply the @x, @y supplied to gtk_window_move(). The
top-left corner of the window decorations (aka window frame or
border) will be placed at @x, @y.  Therefore, to position a window
at the top left of the screen, you want to use the default gravity
(which is #GDK_GRAVITY_NORTH_WEST) and move the window to 0,0.

To position a window at the bottom right corner of the screen, you
would set #GDK_GRAVITY_SOUTH_EAST, which means that the reference
point is at @x + the window width and @y + the window height, and
the bottom-right corner of the window border will be placed at that
reference point. So, to place a window in the bottom right corner
you would first set gravity to south east, then write:
`gtk_window_move (window, gdk_screen_width () - window_width,
gdk_screen_height () - window_height)` (note that this
example does not take multi-head scenarios into account).

The [Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec)
has a nice table of gravities in the “implementation notes” section.

The gtk_window_get_position() documentation may also be relevant.
#NAME: ClipboardReceivedFunc
#PARENT: Gtk
#COMMENT: A function to be called when the results of gtk_clipboard_request_contents()
are received, or when the request fails.
#NAME: icon_name
#PARENT: Gtk.Action.set_icon_name.none
#COMMENT: the icon name to set
#NAME: char_offset
#PARENT: Gtk.TextIter.set_offset.none
#COMMENT: a character number
#NAME: direction
#PARENT: Gtk.IconSet.render_icon.GdkPixbuf.Pixbuf
#COMMENT: text direction
#NAME: focused
#PARENT: Gtk.StateType
#COMMENT: The widget has the keyboard focus.
#NAME: drag-failed
#PARENT: Gtk.Widget.drag-failed
#COMMENT: %TRUE if the failed drag operation has been already handled.
#NAME: window
#PARENT: Gtk.Window.get_gravity.Gdk.Gravity
#COMMENT: a #GtkWindow
#NAME: accel_group
#PARENT: Gtk.AccelGroup.disconnect.gboolean
#COMMENT: the accelerator group to remove an accelerator from
#NAME: new
#PARENT: Gtk.Layout
#COMMENT: Creates a new #GtkLayout. Unless you have a specific adjustment
you’d like the layout to use for scrolling, pass %NULL for
@hadjustment and @vadjustment.
#NAME: expand
#PARENT: Gtk.Widget.set_vexpand.none
#COMMENT: whether to expand
#NAME: CellEditable
#PARENT: Gtk
#COMMENT: The #GtkCellEditable interface must be implemented for widgets to be usable
when editing the contents of a #GtkTreeView cell.
#NAME: STOCK_UNDO
#PARENT: Gtk
#COMMENT: The “Undo” item and icon. The icon has an RTL variant.
#NAME: remove_tag_by_name
#PARENT: Gtk.TextBuffer
#COMMENT: Calls gtk_text_tag_table_lookup() on the buffer’s tag table to
get a #GtkTextTag, then calls gtk_text_buffer_remove_tag().
#NAME: strikethrough-rgba-set
#PARENT: Gtk.TextTag
#COMMENT: If the #GtkTextTag:strikethrough-rgba property has been set.
#NAME: uri
#PARENT: Gtk.FileChooser.select_uri.gboolean
#COMMENT: the URI to select
#NAME: count
#PARENT: Gtk.RecentInfo.get_application_info.gboolean
#COMMENT: return location for the number of times this item was registered
#NAME: accept
#PARENT: Gtk.ResponseType
#COMMENT: Generic response id, not used by GTK+ dialogs
#NAME: style
#PARENT: Gtk.paint_box_gap.none
#COMMENT: a #GtkStyle
#NAME: find_child_property
#PARENT: Gtk.ContainerClass
#COMMENT: Finds a child property of a container class by name.
#NAME: set_handle_position
#PARENT: Gtk.HandleBox
#COMMENT: Sets the side of the handlebox where the handle is drawn.
#NAME: type
#PARENT: Gtk.BuildableIface.add_child.add_child.none
#COMMENT: kind of child or %NULL
#NAME: other
#PARENT: Gtk.PageSetup.copy.PageSetup
#COMMENT: the #GtkPageSetup to copy
#NAME: spin_button
#PARENT: Gtk.SpinButton.get_update_policy.SpinButtonUpdatePolicy
#COMMENT: a #GtkSpinButton
#NAME: get_hover_expand
#PARENT: Gtk.TreeView
#COMMENT: Returns whether hover expansion mode is turned on for @tree_view.
#NAME: get_title
#PARENT: Gtk.TreeViewColumn.get_title
#COMMENT: the title of the column. This string should not be
modified or freed.
#NAME: window
#PARENT: Gtk.Widget
#COMMENT: The widget's window if it is realized, %NULL otherwise.
#NAME: window
#PARENT: Gtk.Window.set_transient_for.none
#COMMENT: a #GtkWindow
#NAME: accelerator_name_with_keycode
#PARENT: Gtk.accelerator_name_with_keycode
#COMMENT: a newly allocated accelerator name.
#NAME: builder
#PARENT: Gtk.Builder.add_from_resource.guint
#COMMENT: a #GtkBuilder
#NAME: n_targets
#PARENT: Gtk.Clipboard.set_with_data.gboolean
#COMMENT: number of elements in @targets
#NAME: set_item_orientation
#PARENT: Gtk.IconView
#COMMENT: Sets the ::item-orientation property which determines whether the labels
are drawn beside the icons instead of below.
#NAME: state-set
#PARENT: Gtk.Switch
#COMMENT: The ::state-set signal on GtkSwitch is emitted to change the underlying
state. It is emitted when the user changes the switch position. The
default handler keeps the state in sync with the #GtkState:active
property.

To implement delayed state change, applications can connect to this signal,
initiate the change of the underlying state, and call gtk_switch_set_state()
when the underlying state change is complete. The signal handler should
return %TRUE to prevent the default handler from running.

Visually, the underlying state is represented by the trough color of
the switch, while the #GtkSwitch:active property is represented by the
position of the switch.
#NAME: can_activate_accel
#PARENT: Gtk.WidgetClass.can_activate_accel.can_activate_accel
#COMMENT: %TRUE if the accelerator can be activated.
#NAME: new
#PARENT: Gtk.MenuButton
#COMMENT: Creates a new #GtkMenuButton widget with downwards-pointing
arrow as the only child. You can replace the child widget
with another #GtkWidget should you wish to.
#NAME: create_tag
#PARENT: Gtk.TextBuffer
#COMMENT: Creates a tag and adds it to the tag table for @buffer.
Equivalent to calling gtk_text_tag_new() and then adding the
tag to the buffer’s tag table. The returned tag is owned by
the buffer’s tag table, so the ref count will be equal to one.

If @tag_name is %NULL, the tag is anonymous.

If @tag_name is non-%NULL, a tag called @tag_name must not already
exist in the tag table for this buffer.

The @first_property_name argument and subsequent arguments are a list
of properties to set on the tag, as with g_object_set().
#NAME: window
#PARENT: Gtk.Window.get_skip_taskbar_hint.gboolean
#COMMENT: a #GtkWindow
#NAME: DragResult
#PARENT: Gtk
#COMMENT: Gives an indication why a drag operation failed.
The value can by obtained by connecting to the
#GtkWidget::drag-failed signal.
#NAME: set_reveal_child
#PARENT: Gtk.Revealer
#COMMENT: Tells the #GtkRevealer to reveal or conceal its child.

The transition will be animated with the current
transition type of @revealer.
#NAME: hhomogeneous
#PARENT: Gtk.Stack.set_hhomogeneous.none
#COMMENT: %TRUE to make @stack horizontally homogeneous
#NAME: text_view
#PARENT: Gtk.TextView.window_to_buffer_coords.none
#COMMENT: a #GtkTextView
#NAME: height
#PARENT: Gtk.Window.get_size.none
#COMMENT: return location for height, or %NULL
#NAME: user_data
#PARENT: Gtk.ActionGroup.add_radio_actions.none
#COMMENT: data to pass to the action callbacks
#NAME: get_scrollable
#PARENT: Gtk.Notebook.get_scrollable
#COMMENT: %TRUE if arrows for scrolling are present
#NAME: type
#PARENT: Gtk.SelectionData.set.none
#COMMENT: the type of selection data
#NAME: tag
#PARENT: Gtk.TextTagTable.remove.none
#COMMENT: a #GtkTextTag
#NAME: success
#PARENT: Gtk.drag_finish.none
#COMMENT: a flag indicating whether the drop was successful
#NAME: direction
#PARENT: Gtk.StyleContext.set_direction.none
#COMMENT: the new direction.
#NAME: target
#PARENT: Gtk.TargetList.add.none
#COMMENT: the interned atom representing the target
#NAME: newv
#PARENT: Gtk.TreeStore
#COMMENT: Non vararg creation function.  Used primarily by language bindings.
#NAME: argv
#PARENT: Gtk.init_check.gboolean
#COMMENT: Address of the
    `argv` parameter of main(), or %NULL. Any options
    understood by GTK+ are stripped before return.
#NAME: invalid_attribute
#PARENT: Gtk.BuilderError
#COMMENT: #GtkBuilder found an attribute that
 it doesn’t understand.
#NAME: Socket
#PARENT: Gtk
#COMMENT: Together with #GtkPlug, #GtkSocket provides the ability to embed
widgets from one process into another process in a fashion that
is transparent to the user. One process creates a #GtkSocket widget
and passes that widget’s window ID to the other process, which then
creates a #GtkPlug with that window ID. Any widgets contained in the
#GtkPlug then will appear inside the first application’s window.

The socket’s window ID is obtained by using gtk_socket_get_id().
Before using this function, the socket must have been realized,
and for hence, have been added to its parent.

## Obtaining the window ID of a socket.

|[<!-- language="C" -->
GtkWidget *socket = gtk_socket_new ();
gtk_widget_show (socket);
gtk_container_add (GTK_CONTAINER (parent), socket);

// The following call is only necessary if one of
// the ancestors of the socket is not yet visible.
gtk_widget_realize (socket);
g_print ("The ID of the sockets window is %#x\n",
         gtk_socket_get_id (socket));
]|

Note that if you pass the window ID of the socket to another
process that will create a plug in the socket, you must make
sure that the socket widget is not destroyed until that plug
is created. Violating this rule will cause unpredictable
consequences, the most likely consequence being that the plug
will appear as a separate toplevel window. You can check if
the plug has been created by using gtk_socket_get_plug_window().
If it returns a non-%NULL value, then the plug has been
successfully created inside of the socket.

When GTK+ is notified that the embedded window has been destroyed,
then it will destroy the socket as well. You should always,
therefore, be prepared for your sockets to be destroyed at any
time when the main event loop is running. To prevent this from
happening, you can connect to the #GtkSocket::plug-removed signal.

The communication between a #GtkSocket and a #GtkPlug follows the
[XEmbed Protocol](http://www.freedesktop.org/Standards/xembed-spec).
This protocol has also been implemented in other toolkits,
e.g. Qt, allowing the same level of
integration when embedding a Qt widget
in GTK or vice versa.

The #GtkPlug and #GtkSocket widgets are only available when GTK+
is compiled for the X11 platform and %GDK_WINDOWING_X11 is defined.
They can only be used on a #GdkX11Display. To use #GtkPlug and
#GtkSocket, you need to include the `gtk/gtkx.h`
header.
#NAME: position
#PARENT: Gtk.TreeStore.insert.none
#COMMENT: position to insert the new row, or -1 for last
#NAME: settings
#PARENT: Gtk.PrintSettings.set_n_copies.none
#COMMENT: a #GtkPrintSettings
#NAME: callback
#PARENT: Gtk.Clipboard.request_text.none
#COMMENT: a function to call when the text is received,
    or the retrieval fails. (It will always be called one way or the other.)
#NAME: get_show_enter_location
#PARENT: Gtk.PlacesSidebar.get_show_enter_location
#COMMENT: %TRUE if the sidebar will display an “Enter Location” item.
#NAME: get_items
#PARENT: Gtk.RecentChooserIface.get_items.get_items
#COMMENT: A newly allocated
  list of #GtkRecentInfo objects.  You should
  use gtk_recent_info_unref() on every item of the list, and then free
  the list itself using g_list_free().
#NAME: sw
#PARENT: Gtk.Switch.get_state.gboolean
#COMMENT: a #GtkSwitch
#NAME: get_window_type
#PARENT: Gtk.TextView.get_window_type
#COMMENT: the window type.
#NAME: stock_id
#PARENT: Gtk.drag_set_icon_stock.none
#COMMENT: the ID of the stock icon to use for the drag
#NAME: set_group
#PARENT: Gtk.RadioMenuItem
#COMMENT: Sets the group of a radio menu item, or changes it.
#NAME: row_activated
#PARENT: Gtk.TreeView
#COMMENT: Activates the cell determined by @path and @column.
#NAME: context
#PARENT: Gtk.Widget.drag-end.none
#COMMENT: the drag context
#NAME: gap_x
#PARENT: Gtk.paint_box_gap.none
#COMMENT: starting position of the gap
#NAME: button-sensitivity
#PARENT: Gtk.ComboBox
#COMMENT: Whether the dropdown button is sensitive when
the model is empty.
#NAME: has_group
#PARENT: Gtk.RecentInfo.has_group
#COMMENT: %TRUE if the group was found
#NAME: ImageType
#PARENT: Gtk
#COMMENT: Describes the image data representation used by a #GtkImage. If you
want to get the image from the widget, you can only get the
currently-stored representation. e.g.  if the
gtk_image_get_storage_type() returns #GTK_IMAGE_PIXBUF, then you can
call gtk_image_get_pixbuf() but not gtk_image_get_stock().  For empty
images, you can request any storage type (call any of the "get"
functions), but they will all return %NULL values.
#NAME: rc_parse
#PARENT: Gtk
#COMMENT: Parses a given resource file.
#NAME: get_tooltip_markup
#PARENT: Gtk.Widget.get_tooltip_markup
#COMMENT: the tooltip text, or %NULL. You should free the
  returned string with g_free() when done.
#NAME: translator-credits
#PARENT: Gtk.AboutDialog
#COMMENT: Credits to the translators. This string should be marked as translatable.
The string may contain email addresses and URLs, which will be displayed
as links, see the introduction for more details.
#NAME: STOCK_MEDIA_STOP
#PARENT: Gtk
#COMMENT: The “Media Stop” item and icon.
#NAME: StackSwitcher
#PARENT: Gtk
#COMMENT: The GtkStackSwitcher widget acts as a controller for a
#GtkStack; it shows a row of buttons to switch between
the various pages of the associated stack widget.

All the content for the buttons comes from the child properties
of the #GtkStack.

It is possible to associate multiple #GtkStackSwitcher widgets
with the same stack widget.

The GtkStackSwitcher widget was added in 3.10.
#NAME: iter
#PARENT: Gtk.TextIter.starts_sentence.gboolean
#COMMENT: a #GtkTextIter
#NAME: get_margin
#PARENT: Gtk.ThemingEngine
#COMMENT: Gets the margin for a given state as a #GtkBorder.
#NAME: path
#PARENT: Gtk.TreeModel.rows_reordered_with_length.none
#COMMENT: a #GtkTreePath-struct pointing to the tree node whose children
    have been reordered
#NAME: get_sort_order
#PARENT: Gtk.TreeViewColumn.get_sort_order
#COMMENT: the sort order the sort indicator is indicating
#NAME: list_filters
#PARENT: Gtk.FileChooser.list_filters
#COMMENT: a
 #GSList containing the current set of user selectable filters. The
 contents of the list are owned by GTK+, but you must free the list
 itself with g_slist_free() when you are done with it.
#NAME: homogeneous
#PARENT: Gtk.Grid.set_row_homogeneous.none
#COMMENT: %TRUE to make rows homogeneous
#NAME: get_name
#PARENT: Gtk.IconSize.get_name
#COMMENT: the name of the given icon size.
#NAME: set_accel_path
#PARENT: Gtk.MenuItem
#COMMENT: Set the accelerator path on @menu_item, through which runtime
changes of the menu item’s accelerator caused by the user can be
identified and saved to persistent storage (see gtk_accel_map_save()
on this). To set up a default accelerator for this menu item, call
gtk_accel_map_add_entry() with the same @accel_path. See also
gtk_accel_map_add_entry() on the specifics of accelerator paths,
and gtk_menu_set_accel_path() for a more convenient variant of
this function.

This function is basically a convenience wrapper that handles
calling gtk_widget_set_accel_path() with the appropriate accelerator
group for the menu item.

Note that you do need to set an accelerator on the parent menu with
gtk_menu_set_accel_group() for this to work.

Note that @accel_path string will be stored in a #GQuark.
Therefore, if you pass a static string, you can save some memory
by interning it first with g_intern_static_string().
#NAME: STYLE_PROPERTY_BORDER_RADIUS
#PARENT: Gtk
#COMMENT: A property holding the rendered element’s border radius in pixels as a #gint.
#NAME: gtk-print-backends
#PARENT: Gtk.Settings
#COMMENT: A comma-separated list of print backends to use in the print
dialog. Available print backends depend on the GTK+ installation,
and may include "file", "cups", "lpr" or "papi".
#NAME: first_tag_name
#PARENT: Gtk.TextBuffer.insert_with_tags_by_name.none
#COMMENT: name of a tag to apply to @text
#NAME: action_bar
#PARENT: Gtk.ActionBar.get_center_widget.Widget
#COMMENT: a #GtkActionBar
#NAME: flags
#PARENT: Gtk.CellArea.event.gint
#COMMENT: the #GtkCellRendererState for @area in this row.
#NAME: unknown
#PARENT: Gtk.RecentManagerError
#COMMENT: unspecified error.
#NAME: get_scale
#PARENT: Gtk.StyleContext
#COMMENT: Returns the scale used for assets.
#NAME: widget_path
#PARENT: Gtk.rc_get_style_by_paths.Style
#COMMENT: the widget path to use when looking up the
    style, or %NULL if no matching against the widget path should be done
#NAME: argcp
#PARENT: Gtk.test_init.none
#COMMENT: Address of the `argc` parameter of the
       main() function. Changed if any arguments were handled.
#NAME: none
#PARENT: Gtk.ReliefStyle
#COMMENT: No relief.
#NAME: statusbar
#PARENT: Gtk.Statusbar.get_message_area.Box
#COMMENT: a #GtkStatusbar
#NAME: get_role
#PARENT: Gtk.Window
#COMMENT: Returns the role of the window. See gtk_window_set_role() for
further explanation.
#NAME: set_use_action_appearance
#PARENT: Gtk.Activatable
#COMMENT: Sets whether this activatable should reset its layout and appearance
when setting the related action or when the action changes appearance

> #GtkActivatable implementors need to handle the
> #GtkActivatable:use-action-appearance property and call
> gtk_activatable_sync_action_properties() to update @activatable
> if needed.
#NAME: pack_start
#PARENT: Gtk.CellLayout
#COMMENT: Packs the @cell into the beginning of @cell_layout. If @expand is %FALSE,
then the @cell is allocated no more space than it needs. Any unused space
is divided evenly between cells for which @expand is %TRUE.

Note that reusing the same cell renderer is not supported.
#NAME: get_column_spacing
#PARENT: Gtk.FlowBox.get_column_spacing
#COMMENT: the horizontal spacing
#NAME: get_current_page
#PARENT: Gtk.Notebook.get_current_page
#COMMENT: the index (starting from 0) of the current
    page in the notebook. If the notebook has no pages,
    then -1 will be returned.
#NAME: callback
#PARENT: Gtk.CellArea.foreach.none
#COMMENT: the #GtkCellCallback to call
#NAME: gicon
#PARENT: Gtk.ImageType
#COMMENT: the widget contains a #GIcon.
 This image type was added in GTK+ 2.14
#NAME: margin
#PARENT: Gtk.Widget.set_margin_bottom.none
#COMMENT: the bottom margin
#NAME: get_default_right_margin
#PARENT: Gtk.PaperSize.get_default_right_margin
#COMMENT: the default right margin
#NAME: unmap-event
#PARENT: Gtk.Widget
#COMMENT: The ::unmap-event signal will be emitted when the @widget's window is
unmapped. A window is unmapped when it becomes invisible on the screen.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask
automatically for all new windows.
#NAME: show-dialog-item
#PARENT: Gtk.AppChooserButton
#COMMENT: The #GtkAppChooserButton:show-dialog-item property determines
whether the dropdown menu should show an item that triggers
a #GtkAppChooserDialog when clicked.
#NAME: toggle
#PARENT: Gtk.CellRendererToggle.set_radio.none
#COMMENT: a #GtkCellRendererToggle
#NAME: has_stencil_buffer
#PARENT: Gtk.GLArea.set_has_stencil_buffer.none
#COMMENT: %TRUE to add a stencil buffer
#NAME: page_ranges
#PARENT: Gtk.PrintSettings.set_page_ranges.none
#COMMENT: an array of #GtkPageRanges
#NAME: iter
#PARENT: Gtk.TextIter.backward_cursor_position.gboolean
#COMMENT: a #GtkTextIter
#NAME: new
#PARENT: Gtk.CellAreaBox.new
#COMMENT: a newly created #GtkCellAreaBox
#NAME: im-module
#PARENT: Gtk.TextView
#COMMENT: Which IM (input method) module should be used for this text_view.
See #GtkIMContext.

Setting this to a non-%NULL value overrides the
system-wide IM module setting. See the GtkSettings
#GtkSettings:gtk-im-module property.
#NAME: var_args
#PARENT: Gtk.TreeStore.set_valist.none
#COMMENT: va_list of column/value pairs
#NAME: cell
#PARENT: Gtk.TreeViewColumn.focus_cell.none
#COMMENT: A #GtkCellRenderer
#NAME: queue_resize_no_redraw
#PARENT: Gtk.Widget
#COMMENT: This function works like gtk_widget_queue_resize(),
except that the widget is not invalidated.
#NAME: context_name
#PARENT: Gtk.IMContextInfo
#COMMENT: The human-readable name of the input method.
#NAME: user_data
#PARENT: Gtk.ListBoxCreateWidgetFunc.Widget
#COMMENT: user data
#NAME: get_for_screen
#PARENT: Gtk.Settings.get_for_screen
#COMMENT: a #GtkSettings object.
#NAME: light
#PARENT: Gtk.Style
#COMMENT: Set of light #GdkColor
#NAME: new
#PARENT: Gtk.MessageDialog
#COMMENT: Creates a new message dialog, which is a simple dialog with some text
the user may want to see. When the user clicks a button a “response”
signal is emitted with response IDs from #GtkResponseType. See
#GtkDialog for more details.
#NAME: get_tooltip_markup
#PARENT: Gtk.StatusIcon
#COMMENT: Gets the contents of the tooltip for @status_icon.
#NAME: get_current_folder_file
#PARENT: Gtk.FileChooser.get_current_folder_file
#COMMENT: the #GFile for the current folder.
#NAME: iter
#PARENT: Gtk.TextIter.set_offset.none
#COMMENT: a #GtkTextIter
#NAME: get_gravity
#PARENT: Gtk.Window
#COMMENT: Gets the value set by gtk_window_set_gravity().
#NAME: sort_column_changed
#PARENT: Gtk.TreeSortable
#COMMENT: Emits a #GtkTreeSortable::sort-column-changed signal on @sortable.
#NAME: get_preferred_size
#PARENT: Gtk.Widget
#COMMENT: Retrieves the minimum and natural size of a widget, taking
into account the widget’s preference for height-for-width management.

This is used to retrieve a suitable size by container widgets which do
not impose any restrictions on the child placement. It can be used
to deduce toplevel window and menu sizes as well as child widgets in
free-form containers such as GtkLayout.

Handle with care. Note that the natural height of a height-for-width
widget will generally be a smaller size than the minimum height, since the required
height for the natural width is generally smaller than the required height for
the minimum width.

Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
baseline alignment.
#NAME: range
#PARENT: Gtk.Range.get_min_slider_size.gint
#COMMENT: a #GtkRange
#NAME: convert_path_to_child_path
#PARENT: Gtk.TreeModelSort
#COMMENT: Converts @sorted_path to a path on the child model of @tree_model_sort.
That is, @sorted_path points to a location in @tree_model_sort.  The
returned path will point to the same location in the model not being
sorted.  If @sorted_path does not point to a location in the child model,
%NULL is returned.
#NAME: get
#PARENT: Gtk.AccelMap.get
#COMMENT: the global #GtkAccelMap object
#NAME: get_child_secondary
#PARENT: Gtk.ButtonBox.get_child_secondary
#COMMENT: whether @child should appear in a secondary group of children.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_collate.none
#COMMENT: a #GtkPrintSettings
#NAME: widget
#PARENT: Gtk.Container.add_with_properties.none
#COMMENT: a widget to be placed inside @container
#NAME: box
#PARENT: Gtk.FlowBox.set_homogeneous.none
#COMMENT: a #GtkFlowBox
#NAME: n_chars
#PARENT: Gtk.EntryBufferClass.insert_text.insert_text.guint
#COMMENT: the length of the text in characters, or -1
#NAME: context
#PARENT: Gtk.StyleContext.set_scale.none
#COMMENT: a #GtkStyleContext
#NAME: get_dest_row_at_pos
#PARENT: Gtk.TreeView.get_dest_row_at_pos
#COMMENT: whether there is a row at the given position, %TRUE if this
is indeed the case.
#NAME: value
#PARENT: Gtk.LevelBar.set_max_value.none
#COMMENT: a positive value
#NAME: render_icon
#PARENT: Gtk.Style
#COMMENT: Renders the icon specified by @source at the given @size
according to the given parameters and returns the result in a
pixbuf.
#NAME: destroy
#PARENT: Gtk.ActionGroup.add_toggle_actions_full.none
#COMMENT: destroy notification callback for @user_data
#NAME: stop_editing
#PARENT: Gtk.CellArea
#COMMENT: Explicitly stops the editing of the currently edited cell.

If @canceled is %TRUE, the currently edited cell renderer
will emit the ::editing-canceled signal, otherwise the
the ::editing-done signal will be emitted on the current
edit widget.

See gtk_cell_area_get_edited_cell() and gtk_cell_area_get_edit_widget().
#NAME: TreeViewColumnDropFunc
#PARENT: Gtk.TreeViewColumnDropFunc
#COMMENT: %TRUE, if @column can be dropped in this spot
#NAME: test_widget_click
#PARENT: Gtk.test_widget_click
#COMMENT: whether all actions neccessary for the button click simulation were carried out successfully.
#NAME: groove
#PARENT: Gtk.BorderStyle
#COMMENT: Looks as if it were carved in the canvas
#NAME: user_data
#PARENT: Gtk.ListBoxSortFunc.gint
#COMMENT: user data
#NAME: child_property
#PARENT: Gtk.Widget.child_notify.none
#COMMENT: the name of a child property installed on the
                 class of @widget’s parent
#NAME: entries
#PARENT: Gtk.ActionGroup.add_actions.none
#COMMENT: an array of action descriptions
#NAME: add_from_file
#PARENT: Gtk.Builder.add_from_file
#COMMENT: A positive value on success, 0 if an error occurred
#NAME: user_data
#PARENT: Gtk.FlowBoxForeachFunc.none
#COMMENT: user data
#NAME: entry
#PARENT: Gtk.Entry.set_icon_tooltip_text.none
#COMMENT: a #GtkEntry
#NAME: new_from_animation
#PARENT: Gtk.Image.new_from_animation
#COMMENT: a new #GtkImage widget
#NAME: fontname
#PARENT: Gtk.FontButton.set_font_name.gboolean
#COMMENT: Name of font to display in font chooser dialog
#NAME: push_preferred_width
#PARENT: Gtk.CellAreaContext
#COMMENT: Causes the minimum and/or natural width to grow if the new
proposed sizes exceed the current minimum and natural width.

This is used by #GtkCellAreaContext implementations during
the request process over a series of #GtkTreeModel rows to
progressively push the requested width over a series of
gtk_cell_area_get_preferred_width() requests.
#NAME: frame
#PARENT: Gtk.Frame.get_label_align.none
#COMMENT: a #GtkFrame
#NAME: new
#PARENT: Gtk.PrintOperation
#COMMENT: Creates a new #GtkPrintOperation.
#NAME: get_transition_type
#PARENT: Gtk.Revealer
#COMMENT: Gets the type of animation that will be used
for transitions in @revealer.
#NAME: palette
#PARENT: Gtk.ToolPalette.get_style.ToolbarStyle
#COMMENT: a #GtkToolPalette
#NAME: remove_tick_callback
#PARENT: Gtk.Widget
#COMMENT: Removes a tick callback previously registered with
gtk_widget_add_tick_callback().
#NAME: widget
#PARENT: Gtk.paint_arrow.none
#COMMENT: the widget
#NAME: new_with_mnemonic
#PARENT: Gtk.Button.new_with_mnemonic
#COMMENT: a new #GtkButton
#NAME: modifiers
#PARENT: Gtk.BindingEntry.skip.none
#COMMENT: key modifier of binding to skip
#NAME: 
#PARENT: Gtk.Widget.new.Widget...
#COMMENT: value of first property, followed by more properties,
    %NULL-terminated
#NAME: create_pango_context
#PARENT: Gtk.Widget
#COMMENT: Creates a new #PangoContext with the appropriate font map,
font description, and base direction for drawing text for
this widget. See also gtk_widget_get_pango_context().
#NAME: editing-canceled
#PARENT: Gtk.CellEditable
#COMMENT: Indicates whether editing on the cell has been canceled.
#NAME: request_targets
#PARENT: Gtk.Clipboard
#COMMENT: Requests the contents of the clipboard as list of supported targets.
When the list is later received, @callback will be called.

The @targets parameter to @callback will contain the resulting targets if
the request succeeded, or %NULL if it failed.
#NAME: new_from_stock
#PARENT: Gtk.MenuToolButton
#COMMENT: Creates a new #GtkMenuToolButton.
The new #GtkMenuToolButton will contain an icon and label from
the stock item indicated by @stock_id.
#NAME: get_current_uri
#PARENT: Gtk.RecentChooser
#COMMENT: Gets the URI currently selected by @chooser.
#NAME: tooltip
#PARENT: Gtk.StatusIcon.query-tooltip.gboolean
#COMMENT: a #GtkTooltip
#NAME: path
#PARENT: Gtk.TreeRowReference.inserted.none
#COMMENT: the row position that was inserted
#NAME: shadow_type
#PARENT: Gtk.paint_slider.none
#COMMENT: a shadow
#NAME: orientation
#PARENT: Gtk.ButtonBox.new.Widget
#COMMENT: the box's orientation.
#NAME: day
#PARENT: Gtk.CalendarDetailFunc.utf8
#COMMENT: the day of @month for which details are needed.
#NAME: dither
#PARENT: Gtk.PrintSettings.set_dither.none
#COMMENT: the dithering that is used
#NAME: range
#PARENT: Gtk.Range.get_upper_stepper_sensitivity.SensitivityType
#COMMENT: a #GtkRange
#NAME: iter
#PARENT: Gtk.TreeModel.row-has-child-toggled.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the row
#NAME: flags
#PARENT: Gtk.IconTheme.load_surface.cairo.Surface
#COMMENT: flags modifying the behavior of the icon lookup
#NAME: ComboBoxText
#PARENT: Gtk
#COMMENT: A GtkComboBoxText is a simple variant of #GtkComboBox that hides
the model-view complexity for simple text-only use cases.

To create a GtkComboBoxText, use gtk_combo_box_text_new() or
gtk_combo_box_text_new_with_entry().

You can add items to a GtkComboBoxText with
gtk_combo_box_text_append_text(), gtk_combo_box_text_insert_text()
or gtk_combo_box_text_prepend_text() and remove options with
gtk_combo_box_text_remove().

If the GtkComboBoxText contains an entry (via the “has-entry” property),
its contents can be retrieved using gtk_combo_box_text_get_active_text().
The entry itself can be accessed by calling gtk_bin_get_child() on the
combo box.

You should not call gtk_combo_box_set_model() or attempt to pack more cells
into this combo box via its GtkCellLayout interface.

# GtkComboBoxText as GtkBuildable

The GtkComboBoxText implementation of the GtkBuildable interface supports
adding items directly using the <items> element and specifying <item>
elements for each item. Each <item> element can specify the “id”
corresponding to the appended text and also supports the regular
translation attributes “translatable”, “context” and “comments”.

Here is a UI definition fragment specifying GtkComboBoxText items:
|[
<object class="GtkComboBoxText">
  <items>
    <item translatable="yes" id="factory">Factory</item>
    <item translatable="yes" id="home">Home</item>
    <item translatable="yes" id="subway">Subway</item>
  </items>
</object>
]|
#NAME: get_step_increment
#PARENT: Gtk.Adjustment
#COMMENT: Retrieves the step increment of the adjustment.
#NAME: font_button
#PARENT: Gtk.FontButton.get_font_name.utf8
#COMMENT: a #GtkFontButton
#NAME: op
#PARENT: Gtk.PrintOperation.is_finished.gboolean
#COMMENT: a #GtkPrintOperation
#NAME: render_icon_pixbuf
#PARENT: Gtk.Widget
#COMMENT: A convenience function that uses the theme engine and style
settings for @widget to look up @stock_id and render it to
a pixbuf. @stock_id should be a stock icon ID such as
#GTK_STOCK_OPEN or #GTK_STOCK_OK. @size should be a size
such as #GTK_ICON_SIZE_MENU.

The pixels in the returned #GdkPixbuf are shared with the rest of
the application and should not be modified. The pixbuf should be freed
after use with g_object_unref().
#NAME: window
#PARENT: Gtk.Window.get_mnemonics_visible.gboolean
#COMMENT: a #GtkWindow
#NAME: gtk-titlebar-double-click
#PARENT: Gtk.Settings
#COMMENT: This setting determines the action to take when a double-click
occurs on the titlebar of client-side decorated windows.

Recognized actions are minimize, toggle-maximize, menu, lower
or none.
#NAME: lookup_property
#PARENT: Gtk.StyleProperties.lookup_property
#COMMENT: %TRUE if the property is registered, %FALSE otherwise
#NAME: face
#PARENT: Gtk.FontFilterFunc.gboolean
#COMMENT: a #PangoFontFace belonging to @family
#NAME: model
#PARENT: Gtk.Popover.new_from_model.Widget
#COMMENT: a #GMenuModel
#NAME: parent_class
#PARENT: Gtk.StyleClass
#COMMENT: The parent class.
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_expand.gboolean
#COMMENT: a #GtkToolItem
#NAME: iter_has_region
#PARENT: Gtk.WidgetPath.iter_has_region
#COMMENT: %TRUE if the class @name is defined for the widget at @pos
#NAME: widget
#PARENT: Gtk.Widget.thaw_child_notify.none
#COMMENT: a #GtkWidget
#NAME: target_list
#PARENT: Gtk.Entry.set_icon_drag_source.none
#COMMENT: the targets (data formats) in which the data can be provided
#NAME: path
#PARENT: Gtk.TreePath.prepend_index.none
#COMMENT: a #GtkTreePath-struct
#NAME: get_default_page_setup
#PARENT: Gtk.PrintOperation.get_default_page_setup
#COMMENT: the default page setup
#NAME: flags
#PARENT: Gtk.TargetEntry.new.TargetEntry
#COMMENT: Set of flags, see #GtkTargetFlags
#NAME: get_int
#PARENT: Gtk.PrintSettings
#COMMENT: Returns the integer value of @key, or 0.
#NAME: set_visible_line_index
#PARENT: Gtk.TextIter
#COMMENT: Like gtk_text_iter_set_line_index(), but the index is in visible
bytes, i.e. text with a tag making it invisible is not counted
in the index.
#NAME: state
#PARENT: Gtk.StyleProperties.get.none
#COMMENT: state to retrieve the property values for
#NAME: new
#PARENT: Gtk.TearoffMenuItem
#COMMENT: Creates a new #GtkTearoffMenuItem.
#NAME: callback
#PARENT: Gtk.IconInfo.load_icon_async.none
#COMMENT: a #GAsyncReadyCallback to call when the
    request is satisfied
#NAME: iter_is_valid
#PARENT: Gtk.ListStore.iter_is_valid
#COMMENT: %TRUE if the iter is valid, %FALSE if the iter is invalid.
#NAME: iter
#PARENT: Gtk.TextIter.get_bytes_in_line.gint
#COMMENT: an iterator
#NAME: obey_child
#PARENT: Gtk.AspectFrame.new.Widget
#COMMENT: If %TRUE, @ratio is ignored, and the aspect
 ratio is taken from the requistion of the child.
#NAME: binding_set_find
#PARENT: Gtk.binding_set_find
#COMMENT: %NULL or the specified binding set
#NAME: adjustment
#PARENT: Gtk.FlowBox.set_vadjustment.none
#COMMENT: an adjustment which should be adjusted
   when the focus is moved among the descendents of @container
#NAME: settings
#PARENT: Gtk.PrintSettings.get_print_pages.PrintPages
#COMMENT: a #GtkPrintSettings
#NAME: iter
#PARENT: Gtk.TextBuffer.insert_child_anchor.none
#COMMENT: location to insert the anchor
#NAME: child
#PARENT: Gtk.TextView.add_child_at_anchor.none
#COMMENT: a #GtkWidget
#NAME: which_window
#PARENT: Gtk.TextView.add_child_in_window.none
#COMMENT: which window the child should appear in
#NAME: ToolPaletteDragTargets
#PARENT: Gtk
#COMMENT: Flags used to specify the supported drag targets.
#NAME: func
#PARENT: Gtk.TreeView.map_expanded_rows.none
#COMMENT: A function to be called
#NAME: settings
#PARENT: Gtk.PrintSettings.set_length.none
#COMMENT: a #GtkPrintSettings
#NAME: activate
#PARENT: Gtk.Widget.activate
#COMMENT: %TRUE if the widget was activatable
#NAME: destroy-event
#PARENT: Gtk.Widget
#COMMENT: The ::destroy-event signal is emitted when a #GdkWindow is destroyed.
You rarely get this signal, because most widgets disconnect themselves
from their window before they destroy it, so no widget owns the
window at destroy time.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask
automatically for all new windows.
#NAME: paper_size_get_paper_sizes
#PARENT: Gtk.paper_size_get_paper_sizes
#COMMENT: a newly allocated list of newly
   allocated #GtkPaperSize objects
#NAME: button
#PARENT: Gtk.test_widget_click.gboolean
#COMMENT: Number of the pointer button for the event, usually 1, 2 or 3.
#NAME: cell_view
#PARENT: Gtk.CellView.get_displayed_row.TreePath
#COMMENT: a #GtkCellView
#NAME: notebook
#PARENT: Gtk.Notebook.get_tab_pos.PositionType
#COMMENT: a #GtkNotebook
#NAME: page
#PARENT: Gtk.Notebook.create-window.Notebook
#COMMENT: the tab of @notebook that is being detached
#NAME: region_name
#PARENT: Gtk.StyleContext.add_region.none
#COMMENT: region name to use in styling
#NAME: resolve
#PARENT: Gtk.SymbolicColor
#COMMENT: If @color is resolvable, @resolved_color will be filled in
with the resolved color, and %TRUE will be returned. Generally,
if @color can’t be resolved, it is due to it being defined on
top of a named color that doesn’t exist in @props.

When @props is %NULL, resolving of named colors will fail, so if
your @color is or references such a color, this function will
return %FALSE.
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_font.Pango.FontDescription
#COMMENT: a #GtkThemingEngine
#NAME: height
#PARENT: Gtk.PrintSettings.set_paper_height.none
#COMMENT: the paper height
#NAME: gtk-tooltip-browse-timeout
#PARENT: Gtk.Settings
#COMMENT: Controls the time after which tooltips will appear when
browse mode is enabled, in milliseconds.

Browse mode is enabled when the mouse pointer moves off an object
where a tooltip was currently being displayed. If the mouse pointer
hits another object before the browse mode timeout expires (see
#GtkSettings:gtk-tooltip-browse-mode-timeout), it will take the
amount of milliseconds specified by this setting to popup the tooltip
for the new object.
#NAME: row-has-child-toggled
#PARENT: Gtk.TreeModel
#COMMENT: This signal is emitted when a row has gotten the first child
row or lost its last child row.
#NAME: set_filename
#PARENT: Gtk.FileChooser
#COMMENT: Sets @filename as the current filename for the file chooser, by changing to
the file’s parent folder and actually selecting the file in list; all other
files will be unselected.  If the @chooser is in
%GTK_FILE_CHOOSER_ACTION_SAVE mode, the file’s base name will also appear in
the dialog’s file name entry.

Note that the file must exist, or nothing will be done except
for the directory change.

You should use this function only when implementing a save
dialog for which you already have a file name to which
the user may save.  For example, when the user opens an existing file and
then does Save As... to save a copy or
a modified version.  If you don’t have a file name already — for
example, if the user just created a new file and is saving it for the first
time, do not call this function.  Instead, use something similar to this:
|[<!-- language="C" -->
if (document_is_new)
  {
    // the user just created a new document
    gtk_file_chooser_set_current_name (chooser, "Untitled document");
  }
else
  {
    // the user edited an existing document
    gtk_file_chooser_set_filename (chooser, existing_filename);
  }
]|

In the first case, the file chooser will present the user with useful suggestions
as to where to save his new file.  In the second case, the file’s existing location
is already known, so the file chooser will use it.
#NAME: notebook
#PARENT: Gtk.Notebook.get_n_pages.gint
#COMMENT: a #GtkNotebook
#NAME: resolve
#PARENT: Gtk.SymbolicColor.resolve
#COMMENT: %TRUE if the color has been resolved
#NAME: renderer
#PARENT: Gtk.CellArea.remove-editable.none
#COMMENT: the #GtkCellRenderer that finished editeding
#NAME: context
#PARENT: Gtk.StyleContext.has_class.gboolean
#COMMENT: a #GtkStyleContext
#NAME: color
#PARENT: Gtk.Widget.modify_base.none
#COMMENT: the color to assign (does not need to
    be allocated), or %NULL to undo the effect of previous
    calls to of gtk_widget_modify_base().
#NAME: new_with_entry
#PARENT: Gtk.ComboBox
#COMMENT: Creates a new empty #GtkComboBox with an entry.
#NAME: paint_focus
#PARENT: Gtk.CellAreaClass.render.render.none
#COMMENT: whether @area should paint focus on focused cells for focused rows or not.
#NAME: icon_info
#PARENT: Gtk.IconInfo.get_attach_points.gboolean
#COMMENT: a #GtkIconInfo
#NAME: path
#PARENT: Gtk.IconView.get_dest_item_at_pos.gboolean
#COMMENT: Return location for the path of the item,
   or %NULL.
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_min_content_height.gint
#COMMENT: a #GtkScrolledWindow
#NAME: natural_baseline
#PARENT: Gtk.Widget.get_preferred_height_and_baseline_for_width.none
#COMMENT: location for storing the baseline for the natural height, or %NULL
#NAME: get_margin_start
#PARENT: Gtk.Widget.get_margin_start
#COMMENT: The start margin of @widget
#NAME: page_forward
#PARENT: Gtk.ScrollType
#COMMENT: Page forward.
#NAME: get_string_from_iter
#PARENT: Gtk.TreeModel.get_string_from_iter
#COMMENT: a newly-allocated string.
    Must be freed with g_free().
#NAME: get_serialize_formats
#PARENT: Gtk.TextBuffer
#COMMENT: This function returns the rich text serialize formats registered
with @buffer using gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_serialize_tagset()
#NAME: text_view
#PARENT: Gtk.TextView.get_pixels_inside_wrap.gint
#COMMENT: a #GtkTextView
#NAME: extend-selection
#PARENT: Gtk.TextView.extend-selection
#COMMENT: %GDK_EVENT_STOP to stop other handlers from being invoked for the
  event. %GDK_EVENT_PROPAGATE to propagate the event further.
#NAME: apply
#PARENT: Gtk.PrintOperationResult
#COMMENT: The print settings should be stored.
#NAME: has_screen
#PARENT: Gtk.Widget
#COMMENT: Checks whether there is a #GdkScreen is associated with
this widget. All toplevel widgets have an associated
screen, and all widgets added into a hierarchy with a toplevel
window at the top.
#NAME: widget
#PARENT: Gtk.paint_hline.none
#COMMENT: the widget
#NAME: pspec
#PARENT: Gtk.rc_property_parse_color.gboolean
#COMMENT: a #GParamSpec
#NAME: icon_view
#PARENT: Gtk.IconView.unselect_all.none
#COMMENT: A #GtkIconView.
#NAME: get_n_pages_to_print
#PARENT: Gtk.PrintOperation
#COMMENT: Returns the number of pages that will be printed.

Note that this value is set during print preparation phase
(%GTK_PRINT_STATUS_PREPARING), so this function should never be
called before the data generation phase (%GTK_PRINT_STATUS_GENERATING_DATA).
You can connect to the #GtkPrintOperation::status-changed signal
and call gtk_print_operation_get_n_pages_to_print() when
print status is %GTK_PRINT_STATUS_GENERATING_DATA.
This is typically used to track the progress of print operation.
#NAME: STYLE_CLASS_HORIZONTAL
#PARENT: Gtk
#COMMENT: A CSS class for horizontally layered widgets.

This is used by widgets implementing #GtkOrientable.
#NAME: insert_interactive
#PARENT: Gtk.TextBuffer
#COMMENT: Like gtk_text_buffer_insert(), but the insertion will not occur if
@iter is at a non-editable location in the buffer. Usually you
want to prevent insertions at ineditable locations if the insertion
results from a user action (is interactive).

@default_editable indicates the editability of text that doesn't
have a tag affecting editability applied to it. Typically the
result of gtk_text_view_get_editable() is appropriate here.
#NAME: free_form
#PARENT: Gtk.InputPurpose
#COMMENT: Allow any character
#NAME: cr
#PARENT: Gtk.PrintContext.set_cairo_context.none
#COMMENT: the cairo context
#NAME: region
#PARENT: Gtk.WidgetClass.queue_draw_region.queue_draw_region.none
#COMMENT: region to draw
#NAME: window
#PARENT: Gtk.Window.get_title.utf8
#COMMENT: a #GtkWindow
#NAME: ch
#PARENT: Gtk.Entry.set_invisible_char.none
#COMMENT: a Unicode character
#NAME: mm
#PARENT: Gtk.Unit
#COMMENT: Dimensions in millimeters
#NAME: area
#PARENT: Gtk.CellArea.render.none
#COMMENT: a #GtkCellArea
#NAME: set_show_numbers
#PARENT: Gtk.RecentAction
#COMMENT: Sets whether a number should be added to the items shown by the
widgets representing @action. The numbers are shown to provide
a unique character for a mnemonic to be used inside the menu item's
label. Only the first ten items get a number to avoid clashes.
#NAME: widget
#PARENT: Gtk.Widget.drag_source_set_icon_pixbuf.none
#COMMENT: a #GtkWidget
#NAME: get_type_from_name
#PARENT: Gtk.Builder
#COMMENT: Looks up a type by name, using the virtual function that
#GtkBuilder has for that purpose. This is mainly used when
implementing the #GtkBuildable interface on a type.
#NAME: fontsel
#PARENT: Gtk.FontSelection.get_face_list.Widget
#COMMENT: a #GtkFontSelection
#NAME: low
#PARENT: Gtk.PrintQuality
#COMMENT: Low quality.
#NAME: paste-clipboard
#PARENT: Gtk.TextView
#COMMENT: The ::paste-clipboard signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to paste the contents of the clipboard
into the text view.

The default bindings for this signal are
Ctrl-v and Shift-Insert.
#NAME: drag_source
#PARENT: Gtk.TreeDragSource.row_draggable.gboolean
#COMMENT: a #GtkTreeDragSource
#NAME: state
#PARENT: Gtk.Switch
#COMMENT: The backend state that is controlled by the switch.
See #GtkSwitch::state-set for details.
#NAME: mime_type
#PARENT: Gtk.TextBuffer.register_serialize_format.Gdk.Atom
#COMMENT: the format’s mime-type
#NAME: TextTag
#PARENT: Gtk
#COMMENT: You may wish to begin by reading the
[text widget conceptual overview][TextWidget]
which gives an overview of all the objects and
data types related to the text widget and how they work together.

Tags should be in the #GtkTextTagTable for a given #GtkTextBuffer
before using them with that buffer.

gtk_text_buffer_create_tag() is the best way to create tags.
See “gtk3-demo” for numerous examples.

For each property of #GtkTextTag, there is a “set” property, e.g.
“font-set” corresponds to “font”. These “set” properties reflect
whether a property has been set or not.
They are maintained by GTK+ and you should not set them independently.
#NAME: edge
#PARENT: Gtk.Window.begin_resize_drag.none
#COMMENT: position of the resize control
#NAME: completion
#PARENT: Gtk.Entry
#COMMENT: The auxiliary completion object to use with the entry.
#NAME: get_has_palette
#PARENT: Gtk.ColorSelection.get_has_palette
#COMMENT: %TRUE if the selector has a palette, %FALSE if it hasn't
#NAME: centered
#PARENT: Gtk.ModelButton
#COMMENT: Wether to render the button contents centered instead of left-aligned.
This property should be set for title-like items.
#NAME: widget
#PARENT: Gtk.Widget.get_sensitive.gboolean
#COMMENT: a #GtkWidget
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_clear_regions.none
#COMMENT: position to modify, -1 for the path head
#NAME: set_text
#PARENT: Gtk.Label
#COMMENT: Sets the text within the #GtkLabel widget. It overwrites any text that
was there before.

This function will clear any previously set mnemonic accelerators, and
set the #GtkLabel:use-underline property to %FALSE as a side effect.

This function will set the #GtkLabel:use-markup property to %FALSE
as a side effect.

See also: gtk_label_set_markup()
#NAME: new_with_label
#PARENT: Gtk.RadioButton
#COMMENT: Creates a new #GtkRadioButton with a text label.
#NAME: set_draw
#PARENT: Gtk.SeparatorToolItem
#COMMENT: Whether @item is drawn as a vertical line, or just blank.
Setting this to %FALSE along with gtk_tool_item_set_expand() is useful
to create an item that forces following items to the end of the toolbar.
#NAME: TargetEntry
#PARENT: Gtk
#COMMENT: A #GtkTargetEntry represents a single type of
data than can be supplied for by a widget for a selection
or for supplied or received during drag-and-drop.
#NAME: button
#PARENT: Gtk.FileChooserButton.get_focus_on_click.gboolean
#COMMENT: a #GtkFileChooserButton
#NAME: source
#PARENT: Gtk.IconSource.get_state.StateType
#COMMENT: a #GtkIconSource
#NAME: widget
#PARENT: Gtk.Label.set_mnemonic_widget.none
#COMMENT: the target #GtkWidget
#NAME: get_hover_selection
#PARENT: Gtk.TreeView.get_hover_selection
#COMMENT: %TRUE if @tree_view is in hover selection mode
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_char_count.gint
#COMMENT: a #GtkTextBuffer
#NAME: vadjustment
#PARENT: Gtk.Viewport.new.Widget
#COMMENT: vertical adjustment
#NAME: data
#PARENT: Gtk.Widget.drag-data-get.none
#COMMENT: the #GtkSelectionData to be filled with the dragged data
#NAME: tree_model
#PARENT: Gtk.TreeModel.get_iter.gboolean
#COMMENT: a #GtkTreeModel
#NAME: get_child_secondary
#PARENT: Gtk.ButtonBox
#COMMENT: Returns whether @child should appear in a secondary group of children.
#NAME: image
#PARENT: Gtk.Image.get_icon_name.none
#COMMENT: a #GtkImage
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.get_nth_bookmark.Gio.File
#COMMENT: a places sidebar
#NAME: position
#PARENT: Gtk.Notebook.reorder_child.none
#COMMENT: the new position, or -1 to move to the end
#NAME: settings
#PARENT: Gtk.PrintSettings.get_n_copies.gint
#COMMENT: a #GtkPrintSettings
#NAME: length
#PARENT: Gtk.Builder.add_from_string.guint
#COMMENT: the length of @buffer (may be -1 if @buffer is nul-terminated)
#NAME: get_xalign
#PARENT: Gtk.Label.get_xalign
#COMMENT: the xalign property
#NAME: buffer
#PARENT: Gtk.TextBuffer.unregister_deserialize_format.none
#COMMENT: a #GtkTextBuffer
#NAME: filter
#PARENT: Gtk.TreeModelFilter.set_modify_func.none
#COMMENT: A #GtkTreeModelFilter.
#NAME: TreeRowReference
#PARENT: Gtk
#COMMENT: A GtkTreeRowReference tracks model changes so that it always refers to the
same row (a #GtkTreePath refers to a position, not a fixed row). Create a
new GtkTreeRowReference with gtk_tree_row_reference_new().
#NAME: lower
#PARENT: Gtk.Adjustment.set_lower.none
#COMMENT: the new minimum value
#NAME: end_pos
#PARENT: Gtk.Editable.do_delete_text.none
#COMMENT: end position
#NAME: clear_marks
#PARENT: Gtk.Scale
#COMMENT: Removes any marks that have been added with gtk_scale_add_mark().
#NAME: n_press
#PARENT: Gtk.GestureMultiPress.released.none
#COMMENT: number of press that is paired with this release
#NAME: action
#PARENT: Gtk.Action.create_menu.Widget
#COMMENT: a #GtkAction
#NAME: row
#PARENT: Gtk.Grid.get_row_baseline_position.BaselinePosition
#COMMENT: a row index
#NAME: get_select_multiple
#PARENT: Gtk.RecentChooser
#COMMENT: Gets whether @chooser can select multiple items.
#NAME: get_vscroll_policy
#PARENT: Gtk.Scrollable
#COMMENT: Gets the vertical #GtkScrollablePolicy.
#NAME: context
#PARENT: Gtk.StyleContext.state_is_running.gboolean
#COMMENT: a #GtkStyleContext
#NAME: get_current_name
#PARENT: Gtk.FileChooser
#COMMENT: Gets the current name in the file selector, as entered by the user in the
text entry for “Name”.

This is meant to be used in save dialogs, to get the currently typed filename
when the file itself does not exist yet.  For example, an application that
adds a custom extra widget to the file chooser for “file format” may want to
change the extension of the typed filename based on the chosen format, say,
from “.jpg” to “.png”.
#NAME: get_request_mode
#PARENT: Gtk.CellRenderer
#COMMENT: Gets whether the cell renderer prefers a height-for-width layout
or a width-for-height layout.
#NAME: context
#PARENT: Gtk.StyleContext.remove_class.none
#COMMENT: a #GtkStyleContext
#NAME: revealer
#PARENT: Gtk.Revealer.set_transition_type.none
#COMMENT: a #GtkRevealer
#NAME: child1
#PARENT: Gtk.FlowBoxSortFunc.gint
#COMMENT: the first child
#NAME: filter
#PARENT: Gtk.RecentFilter.filter.gboolean
#COMMENT: a #GtkRecentFilter
#NAME: selection
#PARENT: Gtk.TreeSelectionFunc.gboolean
#COMMENT: A #GtkTreeSelection
#NAME: child2
#PARENT: Gtk.FlowBoxSortFunc.gint
#COMMENT: the second child
#NAME: about
#PARENT: Gtk.AboutDialog.get_comments.utf8
#COMMENT: a #GtkAboutDialog
#NAME: hover-expand
#PARENT: Gtk.TreeView
#COMMENT: Enables or disables the hover expansion mode of @tree_view.
Hover expansion makes rows expand or collapse if the pointer moves
over them.

This mode is primarily intended for treeviews in popups, e.g.
in #GtkComboBox or #GtkEntryCompletion.
#NAME: style
#PARENT: Gtk.paint_option.none
#COMMENT: a #GtkStyle
#NAME: area
#PARENT: Gtk.CellArea.get_focus_from_sibling.CellRenderer
#COMMENT: a #GtkCellArea
#NAME: set_accepts_tab
#PARENT: Gtk.TextView
#COMMENT: Sets the behavior of the text widget when the Tab key is pressed.
If @accepts_tab is %TRUE, a tab character is inserted. If @accepts_tab
is %FALSE the keyboard focus is moved to the next widget in the focus
chain.
#NAME: context
#PARENT: Gtk.CellAreaContext.push_preferred_height.none
#COMMENT: a #GtkCellAreaContext
#NAME: format-entry-text
#PARENT: Gtk.ComboBox.format-entry-text
#COMMENT: a newly allocated string representing @path
for the current GtkComboBox model.
#NAME: confirm-overwrite
#PARENT: Gtk.FileChooser.confirm-overwrite
#COMMENT: a #GtkFileChooserConfirmation value that indicates which
 action to take after emitting the signal.
#NAME: get_selected_items
#PARENT: Gtk.IconView.get_selected_items
#COMMENT: A #GList containing a #GtkTreePath for each selected row.
#NAME: cell_get_position
#PARENT: Gtk.TreeViewColumn
#COMMENT: Obtains the horizontal position and size of a cell in a column. If the
cell is not found in the column, @start_pos and @width are not changed and
%FALSE is returned.
#NAME: new
#PARENT: Gtk.GestureRotate.new
#COMMENT: a newly created #GtkGestureRotate
#NAME: get_buffer
#PARENT: Gtk.Entry
#COMMENT: Get the #GtkEntryBuffer object which holds the text for
this widget.
#NAME: motion
#PARENT: Gtk.DestDefaults
#COMMENT: If set for a widget, GTK+, during a drag over this
  widget will check if the drag matches this widget’s list of possible targets
  and actions.
  GTK+ will then call gdk_drag_status() as appropriate.
#NAME: activate
#PARENT: Gtk.AccelGroup
#COMMENT: Finds the first accelerator in @accel_group that matches
@accel_key and @accel_mods, and activates it.
#NAME: icon_pos
#PARENT: Gtk.Entry.get_icon_tooltip_text.utf8
#COMMENT: the icon position
#NAME: offset-changed
#PARENT: Gtk.LevelBar
#COMMENT: Emitted when an offset specified on the bar changes value as an
effect to gtk_level_bar_add_offset_value() being called.

The signal supports detailed connections; you can connect to the
detailed signal "changed::x" in order to only receive callbacks when
the value of offset "x" changes.
#NAME: forward_sentence_end
#PARENT: Gtk.TextIter.forward_sentence_end
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: get_lower
#PARENT: Gtk.Adjustment
#COMMENT: Retrieves the minimum value of the adjustment.
#NAME: STOCK_CONNECT
#PARENT: Gtk
#COMMENT: The “Connect” icon.
#NAME: delete-event
#PARENT: Gtk.Widget.delete-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: orientable
#PARENT: Gtk.Orientable.get_orientation.Orientation
#COMMENT: a #GtkOrientable
#NAME: data
#PARENT: Gtk.AssistantPageFunc.gint
#COMMENT: user data.
#NAME: button
#PARENT: Gtk.Button.get_image.Widget
#COMMENT: a #GtkButton
#NAME: get_offset
#PARENT: Gtk.TextIter.get_offset
#COMMENT: a character offset
#NAME: widget
#PARENT: Gtk.Widget.unparent.none
#COMMENT: a #GtkWidget
#NAME: gesture
#PARENT: Gtk.Gesture.get_sequence_state.EventSequenceState
#COMMENT: a #GtkGesture
#NAME: settings
#PARENT: Gtk.PrintSettings.get_number_up_layout.NumberUpLayout
#COMMENT: a #GtkPrintSettings
#NAME: get_context_id
#PARENT: Gtk.Statusbar
#COMMENT: Returns a new context identifier, given a description
of the actual context. Note that the description is
not shown in the UI.
#NAME: has_region
#PARENT: Gtk.StyleContext
#COMMENT: Returns %TRUE if @context has the region defined.
If @flags_return is not %NULL, it is set to the flags
affecting the region.
#NAME: direction
#PARENT: Gtk.TreeView.move-cursor.gboolean
#COMMENT: the direction to move: +1 to move forwards;
-1 to move backwards. The resulting movement is
undefined for all other values.
#NAME: widget
#PARENT: Gtk.Widget.get_halign.Align
#COMMENT: a #GtkWidget
#NAME: bookmark_index
#PARENT: Gtk.FileChooserWidget.quick-bookmark.none
#COMMENT: the number of the bookmark to switch to
#NAME: get_current_value
#PARENT: Gtk.RadioAction.get_current_value
#COMMENT: The value of the currently active group member
#NAME: func
#PARENT: Gtk.Menu.popup.none
#COMMENT: a user supplied function used to position
    the menu, or %NULL
#NAME: table
#PARENT: Gtk.TextTagTable.get_size.gint
#COMMENT: a #GtkTextTagTable
#NAME: set_page_ranges
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.
#NAME: iter
#PARENT: Gtk.TextIter.in_range.gboolean
#COMMENT: a #GtkTextIter
#NAME: x
#PARENT: Gtk.Window.move.none
#COMMENT: X coordinate to move window to
#NAME: label
#PARENT: Gtk.Expander.new_with_mnemonic.Widget
#COMMENT: the text of the label with an underscore
    in front of the mnemonic character
#NAME: configure
#PARENT: Gtk.SpinButton
#COMMENT: Changes the properties of an existing spin button. The adjustment,
climb rate, and number of decimal places are all changed accordingly,
after this function call.
#NAME: y
#PARENT: Gtk.Window.move.none
#COMMENT: Y coordinate to move window to
#NAME: action
#PARENT: Gtk.Action.set_gicon.none
#COMMENT: a #GtkAction
#NAME: get_model
#PARENT: Gtk.IconView.get_model
#COMMENT: A #GtkTreeModel, or %NULL if none is
    currently being used.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_print_pages.none
#COMMENT: a #GtkPrintSettings
#NAME: size
#PARENT: Gtk.icon_size_lookup_for_settings.gboolean
#COMMENT: an icon size
#NAME: tooltip
#PARENT: Gtk.Action
#COMMENT: A tooltip for this action.
#NAME: claimed
#PARENT: Gtk.EventSequenceState
#COMMENT: The sequence is handled and grabbed.
#NAME: new_from_widget
#PARENT: Gtk.RadioToolButton
#COMMENT: Creates a new #GtkRadioToolButton adding it to the same group as @gruup
#NAME: parent
#PARENT: Gtk.MessageDialog.new_with_markup.Widget
#COMMENT: transient parent, or %NULL for none
#NAME: get_exclusive
#PARENT: Gtk.ToolPalette.get_exclusive
#COMMENT: %TRUE if @group is exclusive
#NAME: cr
#PARENT: Gtk.render_activity.none
#COMMENT: a #cairo_t
#NAME: pbar
#PARENT: Gtk.ProgressBar.get_inverted.gboolean
#COMMENT: a #GtkProgressBar
#NAME: RadioActionEntry
#PARENT: Gtk
#COMMENT: #GtkRadioActionEntry structs are used with
gtk_action_group_add_radio_actions() to construct groups of radio actions.
#NAME: get_vadjustment
#PARENT: Gtk.Scrollable.get_vadjustment
#COMMENT: vertical #GtkAdjustment.
#NAME: accel_mods
#PARENT: Gtk.Widget.remove_accelerator.gboolean
#COMMENT: modifier key combination of the accelerator
#NAME: get_show_border
#PARENT: Gtk.Notebook
#COMMENT: Returns whether a bevel will be drawn around the notebook pages.
See gtk_notebook_set_show_border().
#NAME: widget
#PARENT: Gtk.WidgetPath.append_for_widget.gint
#COMMENT: the widget to append to the widget path
#NAME: cell_view
#PARENT: Gtk.CellView.set_draw_sensitive.none
#COMMENT: a #GtkCellView
#NAME: assistant
#PARENT: Gtk.Assistant.get_nth_page.Widget
#COMMENT: a #GtkAssistant
#NAME: set_arrow_tooltip_markup
#PARENT: Gtk.MenuToolButton
#COMMENT: Sets the tooltip markup text to be used as tooltip for the arrow button
which pops up the menu.  See gtk_tool_item_set_tooltip_text() for setting
a tooltip on the whole #GtkMenuToolButton.
#NAME: fontname
#PARENT: Gtk.FontSelectionDialog.set_font_name.gboolean
#COMMENT: a font name like “Helvetica 12” or “Times Bold 18”
#NAME: cell
#PARENT: Gtk.CellRenderer.set_padding.none
#COMMENT: A #GtkCellRenderer
#NAME: setup
#PARENT: Gtk.PageSetup.get_paper_height.gdouble
#COMMENT: a #GtkPageSetup
#NAME: get_show_close_button
#PARENT: Gtk.SearchBar.get_show_close_button
#COMMENT: whether the close button is shown
#NAME: create_icon
#PARENT: Gtk.Action
#COMMENT: This function is intended for use by action implementations to
create icons displayed in the proxy widgets.
#NAME: ArrowType
#PARENT: Gtk
#COMMENT: Used to indicate the direction in which an arrow should point.
#NAME: title
#PARENT: Gtk.HeaderBar.set_title.none
#COMMENT: a title, or %NULL
#NAME: get_placement
#PARENT: Gtk.ScrolledWindow
#COMMENT: Gets the placement of the contents with respect to the scrollbars
for the scrolled window. See gtk_scrolled_window_set_placement().
#NAME: n_columns
#PARENT: Gtk.TreeStore.newv.TreeStore
#COMMENT: number of columns in the tree store
#NAME: tree_view
#PARENT: Gtk.TreeView.set_row_separator_func.none
#COMMENT: a #GtkTreeView
#NAME: remove_page
#PARENT: Gtk.Assistant
#COMMENT: Removes the @page_num’s page from @assistant.
#NAME: callback_data
#PARENT: Gtk.ContainerClass.forall.forall.none
#COMMENT: callback user data
#NAME: size
#PARENT: Gtk.IconTheme.add_builtin_icon.none
#COMMENT: the size in pixels at which to register the icon (different
    images can be registered for the same icon name at different sizes.)
#NAME: drag_source_get_target_list
#PARENT: Gtk.Widget.drag_source_get_target_list
#COMMENT: the #GtkTargetList, or %NULL if none
#NAME: application
#PARENT: Gtk.Application.get_windows.Window
#COMMENT: a #GtkApplication
#NAME: activate-link
#PARENT: Gtk.AboutDialog
#COMMENT: The signal which gets emitted to activate a URI.
Applications may connect to it to override the default behaviour,
which is to call gtk_show_uri().
#NAME: set_activate_on_single_click
#PARENT: Gtk.ListBox
#COMMENT: If @single is %TRUE, rows will be activated when you click on them,
otherwise you need to double-click.
#NAME: set_translation_domain
#PARENT: Gtk.Builder
#COMMENT: Sets the translation domain of @builder.
See #GtkBuilder:translation-domain.
#NAME: set_filter_func
#PARENT: Gtk.FontChooser
#COMMENT: Adds a filter function that decides which fonts to display
in the font chooser.
#NAME: get_current_path_string
#PARENT: Gtk.CellArea
#COMMENT: Gets the current #GtkTreePath string for the currently
applied #GtkTreeIter, this is implicitly updated when
gtk_cell_area_apply_attributes() is called and can be
used to interact with renderers from #GtkCellArea
subclasses.
#NAME: menu
#PARENT: Gtk.Menu.popdown.none
#COMMENT: a #GtkMenu
#NAME: size
#PARENT: Gtk.Style.render_icon.GdkPixbuf.Pixbuf
#COMMENT: the size to render the icon at. A size of
    (GtkIconSize)-1 means render at the size of the source and
    don’t scale.
#NAME: set_tip_area
#PARENT: Gtk.Tooltip
#COMMENT: Sets the area of the widget, where the contents of this tooltip apply,
to be @rect (in widget coordinates).  This is especially useful for
properly setting tooltips on #GtkTreeView rows and cells, #GtkIconViews,
etc.

For setting tooltips on #GtkTreeView, please refer to the convenience
functions for this: gtk_tree_view_set_tooltip_row() and
gtk_tree_view_set_tooltip_cell().
#NAME: data
#PARENT: Gtk.TreeSelection.set_select_function.none
#COMMENT: The selection function’s data. May be %NULL
#NAME: accelerator_mods
#PARENT: Gtk.accelerator_name.utf8
#COMMENT: accelerator modifier mask
#NAME: paint_spinner
#PARENT: Gtk
#COMMENT: Draws a spinner on @window using the given parameters.
#NAME: container
#PARENT: Gtk.Container.set_resize_mode.none
#COMMENT: a #GtkContainer
#NAME: get_bottom_margin
#PARENT: Gtk.PageSetup
#COMMENT: Gets the bottom margin in units of @unit.
#NAME: data
#PARENT: Gtk.TreeModelFilter.set_modify_func.none
#COMMENT: User data to pass to the modify function, or %NULL.
#NAME: get_string_from_iter
#PARENT: Gtk.TreeModel
#COMMENT: Generates a string representation of the iter.

This string is a “:” separated list of numbers.
For example, “4:10:0:3” would be an acceptable
return value for this string.
#NAME: widget
#PARENT: Gtk.CellRendererClass.get_preferred_height.get_preferred_height.none
#COMMENT: the #GtkWidget this cell will be rendering to
#NAME: info_bar
#PARENT: Gtk.InfoBar.set_response_sensitive.none
#COMMENT: a #GtkInfoBar
#NAME: get_max_width_chars
#PARENT: Gtk.Label
#COMMENT: Retrieves the desired maximum width of @label, in characters. See
gtk_label_set_width_chars().
#NAME: get_value
#PARENT: Gtk.ScaleButton
#COMMENT: Gets the current value of the scale button.
#NAME: change_entry
#PARENT: Gtk.AccelMap
#COMMENT: Changes the @accel_key and @accel_mods currently associated with @accel_path.
Due to conflicts with other accelerators, a change may not always be possible,
@replace indicates whether other accelerators may be deleted to resolve such
conflicts. A change will only occur if all conflicts could be resolved (which
might not be the case if conflicting accelerators are locked). Successful
changes are indicated by a %TRUE return value.

Note that @accel_path string will be stored in a #GQuark. Therefore, if you
pass a static string, you can save some memory by interning it first with
g_intern_static_string().
#NAME: STYLE_CLASS_EXPANDER
#PARENT: Gtk
#COMMENT: A CSS class defining an expander, such as those in treeviews.

Used for drawing expanders in #GtkTreeView, GtkExpander and
#GtkToolItemGroup.
#NAME: n_values
#PARENT: Gtk.TreeStore.insert_with_valuesv.none
#COMMENT: the length of the @columns and @values arrays
#NAME: get_show_size
#PARENT: Gtk.FontButton.get_show_size
#COMMENT: whether the font size will be shown in the label.
#NAME: unit
#PARENT: Gtk.PaperSize.set_size.none
#COMMENT: the unit for @width and @height
#NAME: edge
#PARENT: Gtk.paint_resize_grip.none
#COMMENT: the edge in which to draw the resize grip
#NAME: user_data
#PARENT: Gtk.ActionGroup.add_toggle_actions_full.none
#COMMENT: data to pass to the action callbacks
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_orientation.Orientation
#COMMENT: a #GtkToolItem
#NAME: get_screen
#PARENT: Gtk.Widget.get_screen
#COMMENT: the #GdkScreen for the toplevel for this widget.
#NAME: new_with_area
#PARENT: Gtk.IconView.new_with_area
#COMMENT: A newly created #GtkIconView widget
#NAME: buffer
#PARENT: Gtk.TextBuffer.paste_clipboard.none
#COMMENT: a #GtkTextBuffer
#NAME: tree_model
#PARENT: Gtk.TreeModel.get_iter_from_string.gboolean
#COMMENT: a #GtkTreeModel
#NAME: widget
#PARENT: Gtk.Widget.get_settings.Settings
#COMMENT: a #GtkWidget
#NAME: AttachOptions
#PARENT: Gtk
#COMMENT: Denotes the expansion properties that a widget will have when it (or its
parent) is resized.
#NAME: get_focus_siblings
#PARENT: Gtk.CellArea.get_focus_siblings
#COMMENT: A #GList of #GtkCellRenderers.
      The returned list is internal and should not be freed.
#NAME: get_for_screen
#PARENT: Gtk.IconTheme
#COMMENT: Gets the icon theme object associated with @screen; if this
function has not previously been called for the given
screen, a new icon theme object will be created and
associated with the screen. Icon theme objects are
fairly expensive to create, so using this function
is usually a better choice than calling than gtk_icon_theme_new()
and setting the screen yourself; by using this function
a single icon theme object will be shared between users.
#NAME: label
#PARENT: Gtk.Label.get_layout_offsets.none
#COMMENT: a #GtkLabel
#NAME: range
#PARENT: Gtk.Range.get_flippable.gboolean
#COMMENT: a #GtkRange
#NAME: info
#PARENT: Gtk.RecentInfo.get_mime_type.utf8
#COMMENT: a #GtkRecentInfo
#NAME: iter_previous
#PARENT: Gtk.TreeModel.iter_previous
#COMMENT: %TRUE if @iter has been changed to the previous node
#NAME: context
#PARENT: Gtk.StyleContext.get_property.none
#COMMENT: a #GtkStyleContext
#NAME: get_app_paintable
#PARENT: Gtk.Widget.get_app_paintable
#COMMENT: %TRUE if the widget is app paintable
#NAME: type
#PARENT: Gtk.Entry.delete-from-cursor.none
#COMMENT: the granularity of the deletion, as a #GtkDeleteType
#NAME: setting
#PARENT: Gtk.Label.set_use_underline.none
#COMMENT: %TRUE if underlines in the text indicate mnemonics
#NAME: props
#PARENT: Gtk.SymbolicColor.resolve.gboolean
#COMMENT: #GtkStyleProperties to use when resolving
   named colors, or %NULL
#NAME: map_expanded_rows
#PARENT: Gtk.TreeView
#COMMENT: Calls @func on all expanded rows.
#NAME: yalign
#PARENT: Gtk.CellRenderer.set_alignment.none
#COMMENT: the y alignment of the cell renderer
#NAME: get_accel_width
#PARENT: Gtk.AccelLabel
#COMMENT: Returns the width needed to display the accelerator key(s).
This is used by menus to align all of the #GtkMenuItem widgets, and shouldn't
be needed by applications.
#NAME: left
#PARENT: Gtk.PositionType
#COMMENT: The feature is at the left edge.
#NAME: add_tearoffs
#PARENT: Gtk.UIManager.set_add_tearoffs.none
#COMMENT: whether tearoff menu items are added
#NAME: user_data
#PARENT: Gtk.FontChooserIface.set_filter_func.set_filter_func.none
#COMMENT: data to pass to @filter
#NAME: IconSize
#PARENT: Gtk
#COMMENT: Built-in stock icon sizes.
#NAME: set_columns
#PARENT: Gtk.IconView
#COMMENT: Sets the ::columns property which determines in how
many columns the icons are arranged. If @columns is
-1, the number of columns will be chosen automatically
to fill the available area.
#NAME: dest
#PARENT: Gtk.TextAttributes.copy_values.none
#COMMENT: another #GtkTextAttributes
#NAME: area
#PARENT: Gtk.CellArea.inner_cell_area.none
#COMMENT: a #GtkCellArea
#NAME: get_header_relief
#PARENT: Gtk.ToolItemGroup.get_header_relief
#COMMENT: the #GtkReliefStyle
#NAME: mouse
#PARENT: Gtk.WindowPosition
#COMMENT: Windows should be placed at the current mouse position.
#NAME: cr
#PARENT: Gtk.cairo_transform_to_window.none
#COMMENT: the cairo context to transform
#NAME: rc_parse_color_full
#PARENT: Gtk.rc_parse_color_full
#COMMENT: %G_TOKEN_NONE if parsing succeeded, otherwise the token
    that was expected but not found
#NAME: user_data
#PARENT: Gtk.IconInfo.load_icon_async.none
#COMMENT: the data to pass to callback function
#NAME: alpha
#PARENT: Gtk.ColorSelection.set_previous_alpha.none
#COMMENT: an integer between 0 and 65535
#NAME: get_use_action_appearance
#PARENT: Gtk.Activatable.get_use_action_appearance
#COMMENT: whether @activatable uses its actions appearance.
#NAME: tabs
#PARENT: Gtk.Entry.set_tabs.none
#COMMENT: a #PangoTabArray
#NAME: set_tooltip_column
#PARENT: Gtk.IconView
#COMMENT: If you only plan to have simple (text-only) tooltips on full items, you
can use this function to have #GtkIconView handle these automatically
for you. @column should be set to the column in @icon_view’s model
containing the tooltip texts, or -1 to disable this feature.

When enabled, #GtkWidget:has-tooltip will be set to %TRUE and
@icon_view will connect a #GtkWidget::query-tooltip signal handler.

Note that the signal handler sets the text with gtk_tooltip_set_markup(),
so &, <, etc have to be escaped in the text.
#NAME: event
#PARENT: Gtk.CellRendererClass.activate.activate.gboolean
#COMMENT: a #GdkEvent
#NAME: func
#PARENT: Gtk.ActionGroup.set_translate_func.none
#COMMENT: a #GtkTranslateFunc
#NAME: get_handle_window
#PARENT: Gtk.Paned.get_handle_window
#COMMENT: the paned’s handle window.
#NAME: 
#PARENT: Gtk.TreeViewColumn.new_with_attributes.TreeViewColumn...
#COMMENT: A %NULL-terminated list of attributes
#NAME: width
#PARENT: Gtk.paint_arrow.none
#COMMENT: width of the rectangle to draw the arrow in
#NAME: colors
#PARENT: Gtk.ColorSelection.palette_to_string.utf8
#COMMENT: an array of colors
#NAME: rows-reordered
#PARENT: Gtk.TreeModel
#COMMENT: This signal is emitted when the children of a node in the
#GtkTreeModel have been reordered.

Note that this signal is not emitted
when rows are reordered by DND, since this is implemented
by removing and then reinserting the row.
#NAME: gesture
#PARENT: Gtk.Gesture.handles_sequence.gboolean
#COMMENT: a #GtkGesture
#NAME: pspec
#PARENT: Gtk.RcProperty.parse_color.gboolean
#COMMENT: a #GParamSpec
#NAME: renderer
#PARENT: Gtk.CellAreaBox.pack_end.none
#COMMENT: the #GtkCellRenderer to add
#NAME: natural_height
#PARENT: Gtk.CellAreaContext.get_preferred_height_for_width.none
#COMMENT: location to store the natural height,
    or %NULL
#NAME: forward_to_tag_toggle
#PARENT: Gtk.TextIter
#COMMENT: Moves forward to the next toggle (on or off) of the
#GtkTextTag @tag, or to the next toggle of any tag if
@tag is %NULL. If no matching tag toggles are found,
returns %FALSE, otherwise %TRUE. Does not return toggles
located at @iter, only toggles after @iter. Sets @iter to
the location of the toggle, or to the end of the buffer
if no toggle is found.
#NAME: iter
#PARENT: Gtk.TextIter.forward_visible_line.gboolean
#COMMENT: an iterator
#NAME: uri
#PARENT: Gtk.FileChooser.set_uri.gboolean
#COMMENT: the URI to set as current
#NAME: declaration
#PARENT: Gtk.CssSectionType
#COMMENT: The section defines the declaration of
  a CSS variable.
#NAME: get_show_fill_level
#PARENT: Gtk.Range.get_show_fill_level
#COMMENT: %TRUE if @range shows the fill level.
#NAME: check_version
#PARENT: Gtk.check_version
#COMMENT: %NULL if the GTK+ library is compatible with the
  given version, or a string describing the version mismatch.
  The returned string is owned by GTK+ and should not be modified
  or freed.
#NAME: SortType
#PARENT: Gtk
#COMMENT: Determines the direction of a sort.
#NAME: set_attributes
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the attributes in the list as the attributes of @tree_column.
The attributes should be in attribute/column order, as in
gtk_tree_view_column_add_attribute(). All existing attributes
are removed, and replaced with the new attributes.
#NAME: event
#PARENT: Gtk.EventController.handle_event.gboolean
#COMMENT: a #GdkEvent
#NAME: group
#PARENT: Gtk.ToolItemGroup.get_ellipsize.Pango.EllipsizeMode
#COMMENT: a #GtkToolItemGroup
#NAME: get_double_buffered
#PARENT: Gtk.Widget
#COMMENT: Determines whether the widget is double buffered.

See gtk_widget_set_double_buffered()
#NAME: flags
#PARENT: Gtk.CellRendererClass.render.render.none
#COMMENT: flags that affect rendering
#NAME: shell
#PARENT: Gtk.ToolShell.rebuild_menu.none
#COMMENT: a #GtkToolShell
#NAME: convert_widget_to_bin_window_coords
#PARENT: Gtk.TreeView
#COMMENT: Converts widget coordinates to coordinates for the bin_window
(see gtk_tree_view_get_bin_window()).
#NAME: box
#PARENT: Gtk.Box.set_center_widget.none
#COMMENT: a #GtkBox
#NAME: accel_widget
#PARENT: Gtk.AccelLabel.set_accel_widget.none
#COMMENT: the widget to be monitored.
#NAME: x
#PARENT: Gtk.IconView.get_tooltip_context.gboolean
#COMMENT: the x coordinate (relative to widget coordinates)
#NAME: default_setting
#PARENT: Gtk.TextIter.editable.gboolean
#COMMENT: %TRUE if text is editable by default
#NAME: widget
#PARENT: Gtk.Widget.drag_check_threshold.gboolean
#COMMENT: a #GtkWidget
#NAME: get_local_only
#PARENT: Gtk.FileChooser
#COMMENT: Gets whether only local files can be selected in the
file selector. See gtk_file_chooser_set_local_only()
#NAME: y
#PARENT: Gtk.IconView.get_tooltip_context.gboolean
#COMMENT: the y coordinate (relative to widget coordinates)
#NAME: get_left_margin
#PARENT: Gtk.PageSetup
#COMMENT: Gets the left margin in units of @unit.
#NAME: chooser
#PARENT: Gtk.RecentChooser.remove_filter.none
#COMMENT: a #GtkRecentChooser
#NAME: widget
#PARENT: Gtk.device_grab_remove.none
#COMMENT: a #GtkWidget
#NAME: load_surface
#PARENT: Gtk.IconInfo
#COMMENT: Renders an icon previously looked up in an icon theme using
gtk_icon_theme_lookup_icon(); the size will be based on the size
passed to gtk_icon_theme_lookup_icon(). Note that the resulting
surface may not be exactly this size; an icon theme may have icons
that differ slightly from their nominal sizes, and in addition GTK+
will avoid scaling icons that it considers sufficiently close to the
requested size or for which the source image would have to be scaled
up too far. (This maintains sharpness.). This behaviour can be changed
by passing the %GTK_ICON_LOOKUP_FORCE_SIZE flag when obtaining
the #GtkIconInfo. If this flag has been specified, the pixbuf
returned by this function will be scaled to the exact size.
#NAME: resizable
#PARENT: Gtk.Window.set_resizable.none
#COMMENT: %TRUE if the user can resize this window
#NAME: target
#PARENT: Gtk.icon_size_register_alias.none
#COMMENT: an existing icon size
#NAME: get_edit_widget
#PARENT: Gtk.CellArea.get_edit_widget
#COMMENT: The currently active #GtkCellEditable widget
#NAME: get_uri
#PARENT: Gtk.RecentInfo
#COMMENT: Gets the URI of the resource.
#NAME: dotted
#PARENT: Gtk.BorderStyle
#COMMENT: A series of round dots
#NAME: is-important
#PARENT: Gtk.Action
#COMMENT: Whether the action is considered important. When TRUE, toolitem
proxies for this action show text in GTK_TOOLBAR_BOTH_HORIZ mode.
#NAME: horizontal
#PARENT: Gtk.Orientation
#COMMENT: The element is in horizontal orientation.
#NAME: SymbolicColor
#PARENT: Gtk
#COMMENT: GtkSymbolicColor is a boxed type that represents a symbolic color.
It is the result of parsing a
[color expression][gtkcssprovider-symbolic-colors].
To obtain the color represented by a GtkSymbolicColor, it has to
be resolved with gtk_symbolic_color_resolve(), which replaces all
symbolic color references by the colors they refer to (in a given
context) and evaluates mix, shade and other expressions, resulting
in a #GdkRGBA value.

It is not normally necessary to deal directly with #GtkSymbolicColors,
since they are mostly used behind the scenes by #GtkStyleContext and
#GtkCssProvider.

#GtkSymbolicColor is deprecated. Symbolic colors are considered an
implementation detail of GTK+.
#NAME: get_tags
#PARENT: Gtk.TextIter
#COMMENT: Returns a list of tags that apply to @iter, in ascending order of
priority (highest-priority tags are last). The #GtkTextTag in the
list don’t have a reference added, but you have to free the list
itself.
#NAME: builder
#PARENT: Gtk.Builder.connect_signals_full.none
#COMMENT: a #GtkBuilder
#NAME: var_args
#PARENT: Gtk.Style.get_valist.none
#COMMENT: a va_list of pairs of property names and
    locations to return the property values, starting with the
    location for @first_property_name.
#NAME: set_state
#PARENT: Gtk.StyleContext
#COMMENT: Sets the state to be used when rendering with any
of the gtk_render_*() functions.
#NAME: parent
#PARENT: Gtk.AppChooserDialog.new.Widget
#COMMENT: a #GtkWindow, or %NULL
#NAME: get_ok_button
#PARENT: Gtk.FontSelectionDialog.get_ok_button
#COMMENT: the #GtkWidget used in the dialog
    for the “OK” button.
#NAME: width
#PARENT: Gtk.render_activity.none
#COMMENT: rectangle width
#NAME: denied
#PARENT: Gtk.EventSequenceState
#COMMENT: The sequence is denied.
#NAME: iter
#PARENT: Gtk.ListStore.set_valist.none
#COMMENT: A valid #GtkTreeIter for the row being modified
#NAME: get_hscroll_policy
#PARENT: Gtk.Scrollable.get_hscroll_policy
#COMMENT: The horizontal #GtkScrollablePolicy.
#NAME: manager
#PARENT: Gtk.UIManager.get_ui.utf8
#COMMENT: a #GtkUIManager
#NAME: get_area
#PARENT: Gtk.CellLayout
#COMMENT: Returns the underlying #GtkCellArea which might be @cell_layout
if called on a #GtkCellArea or might be %NULL if no #GtkCellArea
is used by @cell_layout.
#NAME: Box
#PARENT: Gtk
#COMMENT: The GtkBox widget organizes child widgets into a rectangular area.

The rectangular area of a GtkBox is organized into either a single row
or a single column of child widgets depending upon the orientation.
Thus, all children of a GtkBox are allocated one dimension in common,
which is the height of a row, or the width of a column.

GtkBox uses a notion of packing. Packing refers
to adding widgets with reference to a particular position in a
#GtkContainer. For a GtkBox, there are two reference positions: the
start and the end of the box.
For a vertical #GtkBox, the start is defined as the top of the box and
the end is defined as the bottom. For a horizontal #GtkBox the start
is defined as the left side and the end is defined as the right side.

Use repeated calls to gtk_box_pack_start() to pack widgets into a
GtkBox from start to end. Use gtk_box_pack_end() to add widgets from
end to start. You may intersperse these calls and add widgets from
both ends of the same GtkBox.

Because GtkBox is a #GtkContainer, you may also use gtk_container_add()
to insert widgets into the box, and they will be packed with the default
values for expand and fill child properties. Use gtk_container_remove()
to remove widgets from the GtkBox.

Use gtk_box_set_homogeneous() to specify whether or not all children
of the GtkBox are forced to get the same amount of space.

Use gtk_box_set_spacing() to determine how much space will be
minimally placed between all children in the GtkBox. Note that
spacing is added between the children, while
padding added by gtk_box_pack_start() or gtk_box_pack_end() is added
on either side of the widget it belongs to.

Use gtk_box_reorder_child() to move a GtkBox child to a different
place in the box.

Use gtk_box_set_child_packing() to reset the expand,
fill and padding child properties.
Use gtk_box_query_child_packing() to query these fields.

Note that a single-row or single-column #GtkGrid provides exactly
the same functionality as #GtkBox.
#NAME: is_activatable
#PARENT: Gtk.CellArea.is_activatable
#COMMENT: whether @area can do anything when activated.
#NAME: pbar
#PARENT: Gtk.ProgressBar.get_fraction.gdouble
#COMMENT: a #GtkProgressBar
#NAME: new_with_area
#PARENT: Gtk.TreeViewColumn.new_with_area
#COMMENT: A newly created #GtkTreeViewColumn.
#NAME: rc_find_module_in_path
#PARENT: Gtk
#COMMENT: Searches for a theme engine in the GTK+ search path. This function
is not useful for applications and should not be used.
#NAME: new
#PARENT: Gtk.MenuToolButton.new
#COMMENT: the new #GtkMenuToolButton
#NAME: position
#PARENT: Gtk.TreeStore.insert_with_valuesv.none
#COMMENT: position to insert the new row, or -1 for last
#NAME: res
#PARENT: Gtk.IconInfo.load_icon_finish.GdkPixbuf.Pixbuf
#COMMENT: a #GAsyncResult
#NAME: n_colors
#PARENT: Gtk.ColorChooserInterface.add_palette.add_palette.none
#COMMENT: the total number of elements in @colors
#NAME: lookup_by_gicon_for_scale
#PARENT: Gtk.IconTheme.lookup_by_gicon_for_scale
#COMMENT: a #GtkIconInfo containing
    information about the icon, or %NULL if the icon wasn’t
    found. Unref with g_object_unref()
#NAME: get_authors
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the string which are displayed in the authors tab
of the secondary credits dialog.
#NAME: drag_begin
#PARENT: Gtk.Widget
#COMMENT: This function is equivalent to gtk_drag_begin_with_coordinates(),
passing -1, -1 as coordinates.
#NAME: get_path
#PARENT: Gtk.StyleContext.get_path
#COMMENT: A #GtkWidgetPath
#NAME: text_view
#PARENT: Gtk.TextView.reset_im_context.none
#COMMENT: a #GtkTextView
#NAME: expand
#PARENT: Gtk.TreeViewColumn.pack_end.none
#COMMENT: %TRUE if @cell is to be given extra space allocated to @tree_column.
#NAME: length
#PARENT: Gtk.TextBufferSerializeFunc.guint8
#COMMENT: Return location for the length of the serialized data
#NAME: new_first
#PARENT: Gtk.TreePath.new_first
#COMMENT: A new #GtkTreePath-struct
#NAME: window
#PARENT: Gtk.Window.get_has_resize_grip.gboolean
#COMMENT: a #GtkWindow
#NAME: Align
#PARENT: Gtk
#COMMENT: Controls how a widget deals with extra space in a single (x or y)
dimension.

Alignment only matters if the widget receives a “too large” allocation,
for example if you packed the widget with the #GtkWidget:expand
flag inside a #GtkBox, then the widget might get extra space.  If
you have for example a 16x16 icon inside a 32x32 space, the icon
could be scaled and stretched, it could be centered, or it could be
positioned to one side of the space.

Note that in horizontal context @GTK_ALIGN_START and @GTK_ALIGN_END
are interpreted relative to text direction.

GTK_ALIGN_BASELINE support for it is optional for containers and widgets, and
it is only supported for vertical alignment.  When its not supported by
a child or a container it is treated as @GTK_ALIGN_FILL.
#NAME: stopped
#PARENT: Gtk.GestureMultiPress
#COMMENT: This signal is emitted whenever any time/distance threshold has
been exceeded.
#NAME: set_label
#PARENT: Gtk.ToolItemGroup
#COMMENT: Sets the label of the tool item group. The label is displayed in the header
of the group.
#NAME: get_spacing
#PARENT: Gtk.Box
#COMMENT: Gets the value set by gtk_box_set_spacing().
#NAME: set_direction_wildcarded
#PARENT: Gtk.IconSource
#COMMENT: If the text direction is wildcarded, this source can be used
as the base image for an icon in any #GtkTextDirection.
If the text direction is not wildcarded, then the
text direction the icon source applies to should be set
with gtk_icon_source_set_direction(), and the icon source
will only be used with that text direction.

#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.is_embedded.gboolean
#COMMENT: a #GtkStatusIcon
#NAME: set_cell_data_func
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the #GtkTreeCellDataFunc to use for the column.  This
function is used instead of the standard attributes mapping for
setting the column value, and should set the value of @tree_column's
cell renderer as appropriate.  @func may be %NULL to remove an
older one.
#NAME: widget
#PARENT: Gtk.Widget.send_focus_change.gboolean
#COMMENT: a #GtkWidget
#NAME: heading
#PARENT: Gtk.AppChooserDialog
#COMMENT: The text to show at the top of the dialog.
The string may contain Pango markup.
#NAME: remove_mnemonic
#PARENT: Gtk.Window
#COMMENT: Removes a mnemonic from this window.
#NAME: get_value
#PARENT: Gtk.Adjustment
#COMMENT: Gets the current value of the adjustment. See
gtk_adjustment_set_value ().
#NAME: register_buffer
#PARENT: Gtk.TextBufferDeserializeFunc.gboolean
#COMMENT: the #GtkTextBuffer the format is registered with
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.set_open_flags.none
#COMMENT: a places sidebar
#NAME: mit_x11
#PARENT: Gtk.License
#COMMENT: The MIT/X11 standard license
#NAME: rc_string
#PARENT: Gtk.rc_parse_string.none
#COMMENT: a string to parse.
#NAME: box
#PARENT: Gtk.ListBox.drag_highlight_row.none
#COMMENT: a #GtkListBox
#NAME: anchor
#PARENT: Gtk.TextView.add_child_at_anchor.none
#COMMENT: a #GtkTextChildAnchor in the #GtkTextBuffer for @text_view
#NAME: widget
#PARENT: Gtk.Widget.get_parent_window.Gdk.Window
#COMMENT: a #GtkWidget.
#NAME: iter_get_siblings
#PARENT: Gtk.WidgetPath
#COMMENT: Returns the list of siblings for the element at @pos. If the element
was not added with siblings, %NULL is returned.
#NAME: attrs
#PARENT: Gtk.Label.set_attributes.none
#COMMENT: a #PangoAttrList, or %NULL
#NAME: RcTokenType
#PARENT: Gtk
#COMMENT: The #GtkRcTokenType enumeration represents the tokens
in the RC file. It is exposed so that theme engines
can reuse these tokens when parsing the theme-engine
specific portions of a RC file.
#NAME: left_margin
#PARENT: Gtk.TextAttributes
#COMMENT: Width of the left margin in pixels.
#NAME: new_text_length
#PARENT: Gtk.Editable.do_insert_text.none
#COMMENT: the length of the text in bytes, or -1
#NAME: user_data
#PARENT: Gtk.Clipboard.request_contents.none
#COMMENT: user data to pass to @callback
#NAME: get_filenames
#PARENT: Gtk.FileChooser
#COMMENT: Lists all the selected files and subfolders in the current folder of
@chooser. The returned names are full absolute paths. If files in the current
folder cannot be represented as local filenames they will be ignored. (See
gtk_file_chooser_get_uris())
#NAME: tree_view
#PARENT: Gtk.TreeView.get_show_expanders.gboolean
#COMMENT: a #GtkTreeView.
#NAME: user_data
#PARENT: Gtk.ListBoxUpdateHeaderFunc.none
#COMMENT: user data
#NAME: chars
#PARENT: Gtk.EntryBuffer.emit_inserted_text.none
#COMMENT: text that was inserted
#NAME: new_with_buttons
#PARENT: Gtk.InfoBar.new_with_buttons
#COMMENT: a new #GtkInfoBar
#NAME: property_name
#PARENT: Gtk.RcProperty
#COMMENT: quark-ified property identifier like
  “GtkScrollbar::spacing”
#NAME: buffer
#PARENT: Gtk.TextBuffer.insert_range_interactive.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: widget
#PARENT: Gtk.Widget.set_margin_top.none
#COMMENT: a #GtkWidget
#NAME: new_from_widget
#PARENT: Gtk.RadioMenuItem
#COMMENT: Creates a new #GtkRadioMenuItem adding it to the same group as @group.
#NAME: get_skip_taskbar_hint
#PARENT: Gtk.Window
#COMMENT: Gets the value set by gtk_window_set_skip_taskbar_hint()
#NAME: get_max_width_chars
#PARENT: Gtk.Entry.get_max_width_chars
#COMMENT: the maximum width of the entry, in characters
#NAME: child_notify
#PARENT: Gtk.Container
#COMMENT: Emits a #GtkWidget::child-notify signal for the
[child property][child-properties]
@child_property on widget.

This is an analogue of g_object_notify() for child properties.

Also see gtk_widget_child_notify().
#NAME: iter
#PARENT: Gtk.TreeStore.insert_after.none
#COMMENT: An unset #GtkTreeIter to set to the new row
#NAME: get_events
#PARENT: Gtk.Widget.get_events
#COMMENT: event mask for @widget
#NAME: get_border_width
#PARENT: Gtk.Container
#COMMENT: Retrieves the border width of the container. See
gtk_container_set_border_width().
#NAME: can_insert
#PARENT: Gtk.TextIter.can_insert
#COMMENT: whether text inserted at @iter would be editable
#NAME: set_activates_default
#PARENT: Gtk.Entry
#COMMENT: If @setting is %TRUE, pressing Enter in the @entry will activate the default
widget for the window containing the entry. This usually means that
the dialog box containing the entry will be closed, since the default
widget is usually one of the dialog buttons.

(For experts: if @setting is %TRUE, the entry calls
gtk_window_activate_default() on the window containing the entry, in
the default handler for the #GtkEntry::activate signal.)
#NAME: sibling
#PARENT: Gtk.Grid.attach_next_to.none
#COMMENT: the child of @grid that @child will be placed
    next to, or %NULL to place @child at the beginning or end
#NAME: prepend
#PARENT: Gtk.ListStore
#COMMENT: Prepends a new row to @list_store. @iter will be changed to point to this new
row. The row will be empty after this function is called. To fill in
values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
#NAME: get_widget
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns the #GtkWidget in the button on the column header.
If a custom widget has not been set then %NULL is returned.
#NAME: FileFilter
#PARENT: Gtk
#COMMENT: A GtkFileFilter can be used to restrict the files being shown in a
#GtkFileChooser. Files can be filtered based on their name (with
gtk_file_filter_add_pattern()), on their mime type (with
gtk_file_filter_add_mime_type()), or by a custom filter function
(with gtk_file_filter_add_custom()).

Filtering by mime types handles aliasing and subclassing of mime
types; e.g. a filter for text/plain also matches a file with mime
type application/rtf, since application/rtf is a subclass of
text/plain. Note that #GtkFileFilter allows wildcards for the
subtype of a mime type, so you can e.g. filter for image/\*.

Normally, filters are used by adding them to a #GtkFileChooser,
see gtk_file_chooser_add_filter(), but it is also possible
to manually use a filter on a file with gtk_file_filter_filter().

# GtkFileFilter as GtkBuildable

The GtkFileFilter implementation of the GtkBuildable interface
supports adding rules using the <mime-types>, <patterns> and
<applications> elements and listing the rules within. Specifying
a <mime-type> or <pattern> has the same effect as as calling
gtk_file_filter_add_mime_type() or gtk_file_filter_add_pattern().

An example of a UI definition fragment specifying GtkFileFilter
rules:
|[
<object class="GtkFileFilter">
  <mime-types>
    <mime-type>text/plain</mime-type>
    <mime-type>image/ *</mime-type>
  </mime-types>
  <patterns>
    <pattern>*.txt</pattern>
    <pattern>*.png</pattern>
  </patterns>
</object>
]|
#NAME: color
#PARENT: Gtk.ColorSelection.set_previous_color.none
#COMMENT: a #GdkColor to set the previous color with
#NAME: get_max_length
#PARENT: Gtk.Entry.get_max_length
#COMMENT: the maximum allowed number of characters
              in #GtkEntry, or 0 if there is no maximum.
#NAME: website-label
#PARENT: Gtk.AboutDialog
#COMMENT: The label for the link to the website of the program.
#NAME: xalign
#PARENT: Gtk.Frame.set_label_align.none
#COMMENT: The position of the label along the top edge
  of the widget. A value of 0.0 represents left alignment;
  1.0 represents right alignment.
#NAME: set_line_wrap_mode
#PARENT: Gtk.Label
#COMMENT: If line wrapping is on (see gtk_label_set_line_wrap()) this controls how
the line wrapping is done. The default is %PANGO_WRAP_WORD which means
wrap on word boundaries.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_paper_size.none
#COMMENT: a #GtkPrintSettings
#NAME: new
#PARENT: Gtk.Socket
#COMMENT: Create a new empty #GtkSocket.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_drag_dest_row.none
#COMMENT: a #GtkTreeView
#NAME: widget
#PARENT: Gtk.Widget.get_tooltip_markup.utf8
#COMMENT: a #GtkWidget
#NAME: shadow_type
#PARENT: Gtk.paint_box_gap.none
#COMMENT: type of shadow to draw
#NAME: sort_type
#PARENT: Gtk.RecentChooser.set_sort_type.none
#COMMENT: sort order that the chooser should use
#NAME: entry
#PARENT: Gtk.Entry.set_cursor_hadjustment.none
#COMMENT: a #GtkEntry
#NAME: new
#PARENT: Gtk.Button.new
#COMMENT: The newly created #GtkButton widget.
#NAME: get_needed
#PARENT: Gtk.FileFilter
#COMMENT: Gets the fields that need to be filled in for the #GtkFileFilterInfo
passed to gtk_file_filter_filter()

This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkFileChooser.
#NAME: set_local_only
#PARENT: Gtk.RecentChooser
#COMMENT: Sets whether only local resources, that is resources using the file:// URI
scheme, should be shown in the recently used resources selector.  If
@local_only is %TRUE (the default) then the shown resources are guaranteed
to be accessible through the operating system native file system.
#NAME: filename
#PARENT: Gtk.StatusIcon.new_from_file.StatusIcon
#COMMENT: a filename
#NAME: action_group
#PARENT: Gtk.ActionGroup.add_actions.none
#COMMENT: the action group
#NAME: height
#PARENT: Gtk.paint_diamond.none
#COMMENT: height of the rectangle to draw the diamond in
#NAME: drop_below
#PARENT: Gtk.IconViewDropPosition
#COMMENT: dropped item is inserted below
#NAME: adjustment
#PARENT: Gtk.TreeView.set_vadjustment.none
#COMMENT: The #GtkAdjustment to set, or %NULL
#NAME: VPaned
#PARENT: Gtk
#COMMENT: The VPaned widget is a container widget with two
children arranged vertically. The division between
the two panes is adjustable by the user by dragging
a handle. See #GtkPaned for details.

GtkVPaned has been deprecated, use #GtkPaned instead.
#NAME: menu_item
#PARENT: Gtk.MenuItemClass.deselect.deselect.none
#COMMENT: the menu item
#NAME: iter
#PARENT: Gtk.TextBuffer.insert.none
#COMMENT: a position in the buffer
#NAME: unset_placement
#PARENT: Gtk.ScrolledWindow
#COMMENT: Unsets the placement of the contents with respect to the scrollbars
for the scrolled window. If no window placement is set for a scrolled
window, it defaults to %GTK_CORNER_TOP_LEFT.

See also gtk_scrolled_window_set_placement() and
gtk_scrolled_window_get_placement().
#NAME: sw
#PARENT: Gtk.Switch.get_active.gboolean
#COMMENT: a #GtkSwitch
#NAME: widget
#PARENT: Gtk.Widget.register_window.none
#COMMENT: a #GtkWidget
#NAME: set_mnemonics_visible
#PARENT: Gtk.Window
#COMMENT: Sets the #GtkWindow:mnemonics-visible property.
#NAME: response_id
#PARENT: Gtk.InfoBar.response.none
#COMMENT: the response ID
#NAME: pack_start
#PARENT: Gtk.ActionBar
#COMMENT: Adds @child to @action_bar, packed with reference to the
start of the @action_bar.
#NAME: context
#PARENT: Gtk.IMContext.set_surrounding.none
#COMMENT: a #GtkIMContext
#NAME: support_selection
#PARENT: Gtk.PrintOperation.set_support_selection.none
#COMMENT: %TRUE to support selection
#NAME: set_orientation
#PARENT: Gtk.Orientable
#COMMENT: Sets the orientation of the @orientable.
#NAME: im_module_path
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: use_stock
#PARENT: Gtk.ImageMenuItem.set_use_stock.none
#COMMENT: %TRUE if the menuitem should use a stock item
#NAME: op
#PARENT: Gtk.PrintOperation.set_custom_tab_label.none
#COMMENT: a #GtkPrintOperation
#NAME: get_paper_height
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT,
converted to @unit.
#NAME: RecentFilterFlags
#PARENT: Gtk
#COMMENT: These flags indicate what parts of a #GtkRecentFilterInfo struct
are filled or need to be filled.
#NAME: Requisition
#PARENT: Gtk
#COMMENT: A #GtkRequisition-struct represents the desired size of a widget. See
[GtkWidget’s geometry management section][geometry-management] for
more information.
#NAME: state
#PARENT: Gtk.StyleContext.get_border_color.none
#COMMENT: state to retrieve the color for
#NAME: iter
#PARENT: Gtk.TextView.backward_display_line.gboolean
#COMMENT: a #GtkTextIter
#NAME: name
#PARENT: Gtk.Widget.insert_action_group.none
#COMMENT: the prefix for actions in @group
#NAME: position
#PARENT: Gtk.EntryBuffer.emit_deleted_text.none
#COMMENT: position at which text was deleted
#NAME: wait_for_rich_text
#PARENT: Gtk.Clipboard
#COMMENT: Requests the contents of the clipboard as rich text.  This function
waits for the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.
#NAME: pack_start
#PARENT: Gtk.Box
#COMMENT: Adds @child to @box, packed with reference to the start of @box.
The @child is packed after any other child packed with reference
to the start of @box.
#NAME: buffer
#PARENT: Gtk.TextBuffer.add_mark.none
#COMMENT: a #GtkTextBuffer
#NAME: accept-focus
#PARENT: Gtk.Window
#COMMENT: Whether the window should receive the input focus.
#NAME: unset_style
#PARENT: Gtk.Toolbar
#COMMENT: Unsets a toolbar style set with gtk_toolbar_set_style(), so that
user preferences will be used to determine the toolbar style.
#NAME: cr
#PARENT: Gtk.CellRendererClass.render.render.none
#COMMENT: a cairo context to draw to
#NAME: get_default_size
#PARENT: Gtk.Window
#COMMENT: Gets the default size of the window. A value of -1 for the width or
height indicates that a default size has not been explicitly set
for that dimension, so the “natural” size of the window will be
used.
#NAME: left
#PARENT: Gtk.Grid.get_child_at.Widget
#COMMENT: the left edge of the cell
#NAME: lookup_color
#PARENT: Gtk.StyleProperties.lookup_color
#COMMENT: The mapped color
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_max_width.gint
#COMMENT: A #GtkTreeViewColumn.
#NAME: get_current_grab
#PARENT: Gtk.WindowGroup.get_current_grab
#COMMENT: the current grab widget of the group
#NAME: lgpl_3_0_only
#PARENT: Gtk.License
#COMMENT: The GNU Lesser General Public License, version 3.0 only. Since 3.12.
#NAME: get_family_list
#PARENT: Gtk.FontSelection.get_family_list
#COMMENT: A #GtkWidget that is part of @fontsel
#NAME: items
#PARENT: Gtk.stock_add_static.none
#COMMENT: a #GtkStockItem or array of #GtkStockItem
#NAME: paginate
#PARENT: Gtk.PrintOperation
#COMMENT: Emitted after the #GtkPrintOperation::begin-print signal, but before
the actual rendering starts. It keeps getting emitted until a connected
signal handler returns %TRUE.

The ::paginate signal is intended to be used for paginating a document
in small chunks, to avoid blocking the user interface for a long
time. The signal handler should update the number of pages using
gtk_print_operation_set_n_pages(), and return %TRUE if the document
has been completely paginated.

If you don't need to do pagination in chunks, you can simply do
it all in the ::begin-print handler, and set the number of pages
from there.
#NAME: self
#PARENT: Gtk.LevelBar.set_inverted.none
#COMMENT: a #GtkLevelBar
#NAME: selected
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: new
#PARENT: Gtk.RecentManager.new
#COMMENT: A newly created #GtkRecentManager object
#NAME: table
#PARENT: Gtk.Table.get_default_row_spacing.guint
#COMMENT: a #GtkTable
#NAME: widget
#PARENT: Gtk.draw_insertion_cursor.none
#COMMENT: a #GtkWidget
#NAME: icon_view
#PARENT: Gtk.IconView.convert_widget_to_bin_window_coords.none
#COMMENT: a #GtkIconView
#NAME: select_path
#PARENT: Gtk.IconView
#COMMENT: Selects the row at @path.
#NAME: forward_cursor_positions
#PARENT: Gtk.TextIter
#COMMENT: Moves up to @count cursor positions. See
gtk_text_iter_forward_cursor_position() for details.
#NAME: group
#PARENT: Gtk.ToolItemGroup.insert.none
#COMMENT: a #GtkToolItemGroup
#NAME: data
#PARENT: Gtk.IMContextSimple.add_table.none
#COMMENT: the table
#NAME: setting
#PARENT: Gtk.IconSource.set_state_wildcarded.none
#COMMENT: %TRUE to wildcard the widget state
#NAME: events
#PARENT: Gtk.Widget.add_device_events.none
#COMMENT: an event mask, see #GdkEventMask
#NAME: accessible
#PARENT: Gtk.Accessible.set_widget.none
#COMMENT: a #GtkAccessible
#NAME: progress
#PARENT: Gtk.AssistantPageType
#COMMENT: Used for tasks that take a long time to
 complete, blocks the assistant until the page is marked as complete.
  Only the back button will be shown.
#NAME: get_row_separator_func
#PARENT: Gtk.ComboBox.get_row_separator_func
#COMMENT: the current row separator function.
#NAME: callback
#PARENT: Gtk.IMStatusStyle
#COMMENT: Deprecated
#NAME: size
#PARENT: Gtk.PaperSize.to_key_file.none
#COMMENT: a #GtkPaperSize
#NAME: half
#PARENT: Gtk.ReliefStyle
#COMMENT: A half relief. Deprecated in 3.14, does the same as @GTK_RELIEF_NORMAL
#NAME: get_indices_with_depth
#PARENT: Gtk.TreePath
#COMMENT: Returns the current indices of @path.

This is an array of integers, each representing a node in a tree.
It also returns the number of elements in the array.
The array should not be freed.
#NAME: STOCK_GOTO_FIRST
#PARENT: Gtk
#COMMENT: The “First” item and icon. The icon has an RTL variant.
#NAME: new_with_attributes
#PARENT: Gtk.TreeViewColumn
#COMMENT: Creates a new #GtkTreeViewColumn with a number of default values.
This is equivalent to calling gtk_tree_view_column_set_title(),
gtk_tree_view_column_pack_start(), and
gtk_tree_view_column_set_attributes() on the newly created #GtkTreeViewColumn.

Here’s a simple example:
|[<!-- language="C" -->
 enum { TEXT_COLUMN, COLOR_COLUMN, N_COLUMNS };
 ...
 {
   GtkTreeViewColumn *column;
   GtkCellRenderer   *renderer = gtk_cell_renderer_text_new ();
 
   column = gtk_tree_view_column_new_with_attributes ("Title",
                                                      renderer,
                                                      "text", TEXT_COLUMN,
                                                      "foreground", COLOR_COLUMN,
                                                      NULL);
 }
]|
#NAME: settings
#PARENT: Gtk.print_run_page_setup_dialog_async.none
#COMMENT: a #GtkPrintSettings
#NAME: func
#PARENT: Gtk.TreeView.set_search_position_func.none
#COMMENT: the function to use to position the search dialog, or %NULL
   to use the default search position function
#NAME: new
#PARENT: Gtk.AspectFrame.new
#COMMENT: the new #GtkAspectFrame.
#NAME: focus_on_click
#PARENT: Gtk.FileChooserButton.set_focus_on_click.none
#COMMENT: whether the button grabs focus when clicked with the mouse
#NAME: icon_info
#PARENT: Gtk.IconInfo.load_symbolic_finish.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconInfo from gtk_icon_theme_lookup_icon()
#NAME: get_row_baseline_position
#PARENT: Gtk.Grid.get_row_baseline_position
#COMMENT: the baseline position of @row
#NAME: get_builtin_pixbuf
#PARENT: Gtk.IconInfo.get_builtin_pixbuf
#COMMENT: the built-in image pixbuf, or %NULL.
    No extra reference is added to the returned pixbuf, so if
    you want to keep it around, you must use g_object_ref().
    The returned image must not be modified.
#NAME: color_definition
#PARENT: Gtk.CssSectionType
#COMMENT: The section defines a color. This
  is a GTK extension to CSS.
#NAME: get_default
#PARENT: Gtk.CssProvider
#COMMENT: Returns the provider containing the style settings used as a
fallback for all widgets.
#NAME: type
#PARENT: Gtk.WidgetPath.iter_set_object_type.none
#COMMENT: object type to set
#NAME: window
#PARENT: Gtk.Window.set_resizable.none
#COMMENT: a #GtkWindow
#NAME: get_option_group
#PARENT: Gtk
#COMMENT: Returns a #GOptionGroup for the commandline arguments recognized
by GTK+ and GDK.

You should add this group to your #GOptionContext
with g_option_context_add_group(), if you are using
g_option_context_parse() to parse your commandline arguments.
#NAME: adjust-bounds
#PARENT: Gtk.Range
#COMMENT: Emitted before clamping a value, to give the application a
chance to adjust the bounds.
#NAME: set
#PARENT: Gtk.Widget.set_hexpand_set.none
#COMMENT: value for hexpand-set property
#NAME: widget
#PARENT: Gtk.paint_option.none
#COMMENT: the widget
#NAME: action-group
#PARENT: Gtk.Action
#COMMENT: The GtkActionGroup this GtkAction is associated with, or NULL
(for internal use).
#NAME: get_error
#PARENT: Gtk.GLArea
#COMMENT: Gets the current error set on the @area.
#NAME: width
#PARENT: Gtk.render_handle.none
#COMMENT: rectangle width
#NAME: font_button
#PARENT: Gtk.FontButton.set_show_size.none
#COMMENT: a #GtkFontButton
#NAME: tree_row_reference_inserted
#PARENT: Gtk
#COMMENT: Lets a set of row reference created by
gtk_tree_row_reference_new_proxy() know that the
model emitted the #GtkTreeModel::row-inserted signal.
#NAME: menubar
#PARENT: Gtk.Application.set_menubar.none
#COMMENT: a #GMenuModel, or %NULL
#NAME: text_view
#PARENT: Gtk.TextView.get_window_type.TextWindowType
#COMMENT: a #GtkTextView
#NAME: set_default_geometry
#PARENT: Gtk.Window
#COMMENT: Like gtk_window_set_default_size(), but @width and @height are interpreted
in terms of the base size and increment set with
gtk_window_set_geometry_hints.
#NAME: props_to_merge
#PARENT: Gtk.StyleProperties.merge.none
#COMMENT: a second #GtkStyleProperties
#NAME: string
#PARENT: Gtk.Entry.insert-at-cursor.none
#COMMENT: the string to insert
#NAME: 
#PARENT: Gtk.InfoBar.add_buttons.none...
#COMMENT: response ID for first button, then more text-response_id pairs,
    ending with %NULL
#NAME: STYLE_CLASS_GRIP
#PARENT: Gtk
#COMMENT: A CSS class defining a resize grip.

This is used for the resize grip in #GtkWindow.
#NAME: gtk-recent-files-limit
#PARENT: Gtk.Settings
#COMMENT: The number of recently used files that should be displayed by default by
#GtkRecentChooser implementations and by the #GtkFileChooser. A value of
-1 means every recently used file stored.
#NAME: state
#PARENT: Gtk.StyleContext.get.none
#COMMENT: state to retrieve the property values for
#NAME: selection
#PARENT: Gtk.selection_owner_set_for_display.gboolean
#COMMENT: an interned atom representing the selection to claim.
#NAME: remove_filter
#PARENT: Gtk.FileChooser
#COMMENT: Removes @filter from the list of filters that the user can select between.
#NAME: insert_column
#PARENT: Gtk.TreeView.insert_column
#COMMENT: The number of columns in @tree_view after insertion.
#NAME: selection_owner_set
#PARENT: Gtk.selection_owner_set
#COMMENT: %TRUE if the operation succeeded
#NAME: selection
#PARENT: Gtk.Clipboard.get.Clipboard
#COMMENT: a #GdkAtom which identifies the clipboard to use
#NAME: user_data
#PARENT: Gtk.BuilderConnectFunc.none
#COMMENT: user data
#NAME: override_cursor
#PARENT: Gtk.Widget
#COMMENT: Sets the cursor color to use in a widget, overriding the
cursor-color and secondary-cursor-color
style properties. All other style values are left untouched.
See also gtk_widget_modify_style().

Note that the underlying properties have the #GdkColor type,
so the alpha value in @primary and @secondary will be ignored.
#NAME: calendar
#PARENT: Gtk.Calendar.set_detail_func.none
#COMMENT: a #GtkCalendar.
#NAME: append_custom_item
#PARENT: Gtk.AppChooserButton
#COMMENT: Appends a custom item to the list of applications that is shown
in the popup; the item name must be unique per-widget.
Clients can use the provided name as a detail for the
#GtkAppChooserButton::custom-item-activated signal, to add a
callback for the activation of a particular custom item in the list.
See also gtk_app_chooser_button_append_separator().
#NAME: new
#PARENT: Gtk.PrintSettings
#COMMENT: Creates a new #GtkPrintSettings object.
#NAME: 
#PARENT: Gtk.Widget.style_get.none...
#COMMENT: pairs of property names and locations to return the
    property values, starting with the location for
    @first_property_name, terminated by %NULL.
#NAME: home-folder
#PARENT: Gtk.FileChooserWidget
#COMMENT: The ::home-folder signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

This is used to make the file chooser show the user's home
folder in the file list.

The default binding for this signal is `Alt + Home`.
#NAME: text_view
#PARENT: Gtk.TextView.get_tabs.Pango.TabArray
#COMMENT: a #GtkTextView
#NAME: populate-all
#PARENT: Gtk.TextView
#COMMENT: If :populate-all is %TRUE, the #GtkTextView::populate-popup
signal is also emitted for touch popups.
#NAME: load_key_file
#PARENT: Gtk.PrintSettings
#COMMENT: Reads the print settings from the group @group_name in @key_file. If the
file could not be loaded then error is set to either a #GFileError or
#GKeyFileError.
#NAME: window
#PARENT: Gtk.Window.get_default_size.none
#COMMENT: a #GtkWindow
#NAME: resize_grip_is_visible
#PARENT: Gtk.Window.resize_grip_is_visible
#COMMENT: %TRUE if a resize grip exists and is visible
#NAME: get_show_other
#PARENT: Gtk.AppChooserWidget.get_show_other
#COMMENT: the value of #GtkAppChooserWidget:show-other
#NAME: set_from_animation
#PARENT: Gtk.Image
#COMMENT: Causes the #GtkImage to display the given animation (or display
nothing, if you set the animation to %NULL).
#NAME: get_orientation
#PARENT: Gtk.ToolShell
#COMMENT: Retrieves the current orientation for the tool shell. Tool items must not
call this function directly, but rely on gtk_tool_item_get_orientation()
instead.
#NAME: get_direction
#PARENT: Gtk.Widget
#COMMENT: Gets the reading direction for a particular widget. See
gtk_widget_set_direction().
#NAME: style
#PARENT: Gtk.paint_spinner.none
#COMMENT: a #GtkStyle
#NAME: targets
#PARENT: Gtk.targets_include_text.gboolean
#COMMENT: an array of #GdkAtoms
#NAME: add_color_stop
#PARENT: Gtk.Gradient
#COMMENT: Adds a stop color to @gradient.
#NAME: window
#PARENT: Gtk.Window.set_accept_focus.none
#COMMENT: a #GtkWindow
#NAME: editable
#PARENT: Gtk.CellRendererMode
#COMMENT: The cell can be edited or otherwise modified.
#NAME: button
#PARENT: Gtk.ToolButton.get_label_widget.Widget
#COMMENT: a #GtkToolButton
#NAME: orientation
#PARENT: Gtk.Widget.compute_expand.gboolean
#COMMENT: expand direction
#NAME: composited-changed
#PARENT: Gtk.Widget
#COMMENT: The ::composited-changed signal is emitted when the composited
status of @widgets screen changes.
See gdk_screen_is_composited().
#NAME: set_markup
#PARENT: Gtk.MessageDialog
#COMMENT: Sets the text of the message dialog to be @str, which is marked
up with the [Pango text markup language][PangoMarkupFormat].
#NAME: pending_issue
#PARENT: Gtk.PrintStatus
#COMMENT: Some problem has occurred during
    printing, e.g. a paper jam.
#NAME: gtk-enable-tooltips
#PARENT: Gtk.Settings
#COMMENT: Whether tooltips should be shown on widgets.
#NAME: wrap_mode
#PARENT: Gtk.TextView.set_wrap_mode.none
#COMMENT: a #GtkWrapMode
#NAME: get_mode
#PARENT: Gtk.ToggleButton
#COMMENT: Retrieves whether the button is displayed as a separate indicator
and label. See gtk_toggle_button_set_mode().
#NAME: shell
#PARENT: Gtk.ToolShell.get_ellipsize_mode.Pango.EllipsizeMode
#COMMENT: a #GtkToolShell
#NAME: drag-motion
#PARENT: Gtk.Widget.drag-motion
#COMMENT: whether the cursor position is in a drop zone
#NAME: get_font_selection
#PARENT: Gtk.FontSelectionDialog.get_font_selection
#COMMENT: the embedded #GtkFontSelection
#NAME: paned
#PARENT: Gtk.Paned.get_handle_window.Gdk.Window
#COMMENT: a #GtkPaned
#NAME: forward_display_line
#PARENT: Gtk.TextView
#COMMENT: Moves the given @iter forward by one display (wrapped) line.
A display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph. If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view’s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.
#NAME: iter_get_object_type
#PARENT: Gtk.WidgetPath
#COMMENT: Returns the object #GType that is at position @pos in the widget
hierarchy defined in @path.
#NAME: gesture
#PARENT: Gtk.GestureSingle.get_current_sequence.Gdk.EventSequence
#COMMENT: a #GtkGestureSingle
#NAME: props
#PARENT: Gtk.StyleProperties.set_valist.none
#COMMENT: a #GtkStyleProperties
#NAME: event_object
#PARENT: Gtk.TextTagClass.event.event.gboolean
#COMMENT: object that received the event, such as a widget
#NAME: action
#PARENT: Gtk.Action.create_menu_item.Widget
#COMMENT: the action object
#NAME: entry
#PARENT: Gtk.Entry.get_visibility.gboolean
#COMMENT: a #GtkEntry
#NAME: backward_search
#PARENT: Gtk.TextIter.backward_search
#COMMENT: whether a match was found
#NAME: get_opacity
#PARENT: Gtk.Widget
#COMMENT: Fetches the requested opacity for this widget.
See gtk_widget_set_opacity().
#NAME: create_folder
#PARENT: Gtk.FileChooserAction
#COMMENT: Indicates a mode for creating a
 new folder.  The file chooser will let the user name an existing or
 new folder.
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_local_only.gboolean
#COMMENT: a #GtkRecentChooser
#NAME: writable
#PARENT: Gtk.SelectionData.targets_include_image.gboolean
#COMMENT: whether to accept only targets for which GTK+ knows
  how to convert a pixbuf into the format
#NAME: convert_child_iter_to_iter
#PARENT: Gtk.TreeModelSort
#COMMENT: Sets @sort_iter to point to the row in @tree_model_sort that corresponds to
the row pointed at by @child_iter.  If @sort_iter was not set, %FALSE
is returned.  Note: a boolean is only returned since 2.14.
#NAME: first_callback_name
#PARENT: Gtk.Builder.add_callback_symbols.none
#COMMENT: The name of the callback, as expected in the XML
#NAME: var_args
#PARENT: Gtk.TreeModel.get_valist.none
#COMMENT: va_list of column/return location pairs
#NAME: accel_mods
#PARENT: Gtk.Widget.add_accelerator.none
#COMMENT: modifier key combination of the accelerator
#NAME: load_surface
#PARENT: Gtk.IconInfo.load_surface
#COMMENT: the rendered icon; this may be a newly
    created icon or a new reference to an internal icon, so you must
    not modify the icon. Use cairo_surface_destroy() to release your
    reference to the icon.
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.get_local_only.gboolean
#COMMENT: a places sidebar
#NAME: path
#PARENT: Gtk.TreeModel.row-has-child-toggled.none
#COMMENT: a #GtkTreePath-struct identifying the row
#NAME: get_support_multidevice
#PARENT: Gtk.Widget
#COMMENT: Returns %TRUE if @widget is multiple pointer aware. See
gtk_widget_set_support_multidevice() for more information.
#NAME: generic_fallback
#PARENT: Gtk.IconLookupFlags
#COMMENT: Try to shorten icon name at '-'
  characters before looking at inherited themes. For more general
  fallback, see gtk_icon_theme_choose_icon(). Since 2.12.
#NAME: start
#PARENT: Gtk.ArrowPlacement
#COMMENT: Place both arrows at the top of the menu.
#NAME: set_from_pixbuf
#PARENT: Gtk.Image
#COMMENT: See gtk_image_new_from_pixbuf() for details.
#NAME: delete
#PARENT: Gtk.TextBuffer
#COMMENT: Deletes text between @start and @end. The order of @start and @end
is not actually relevant; gtk_text_buffer_delete() will reorder
them. This function actually emits the “delete-range” signal, and
the default handler of that signal deletes the text. Because the
buffer is modified, all outstanding iterators become invalid after
calling this function; however, the @start and @end will be
re-initialized to point to the location where text was deleted.
#NAME: complete
#PARENT: Gtk.Assistant.set_page_complete.none
#COMMENT: the completeness status of the page
#NAME: chooser
#PARENT: Gtk.FileChooser.get_action.FileChooserAction
#COMMENT: a #GtkFileChooser
#NAME: get_transition_running
#PARENT: Gtk.Stack
#COMMENT: Returns whether the @stack is currently in a transition from one page to
another.
#NAME: widget
#PARENT: Gtk.Widget.get_allocated_height.gint
#COMMENT: the widget to query
#NAME: style
#PARENT: Gtk.paint_check.none
#COMMENT: a #GtkStyle
#NAME: yes_no
#PARENT: Gtk.ButtonsType
#COMMENT: Yes and No buttons
#NAME: backward_lines
#PARENT: Gtk.TextIter.backward_lines
#COMMENT: whether @iter moved and is dereferenceable
#NAME: new_with_label
#PARENT: Gtk.CheckMenuItem.new_with_label
#COMMENT: a new #GtkCheckMenuItem.
#NAME: gesture
#PARENT: Gtk.GestureDrag.get_offset.gboolean
#COMMENT: a #GtkGesture
#NAME: menu_button
#PARENT: Gtk.MenuButton.set_use_popover.none
#COMMENT: a #GtkMenuButton
#NAME: below
#PARENT: Gtk.TextViewLayer
#COMMENT: The layer rendered below the text (but above the background).
#NAME: insert
#PARENT: Gtk.ComboBoxText
#COMMENT: Inserts @text at @position in the list of strings stored in @combo_box.
If @id is non-%NULL then it is used as the ID of the row.  See
#GtkComboBox:id-column.

If @position is negative then @text is appended.
#NAME: draw_indicator
#PARENT: Gtk.ToggleButton.set_mode.none
#COMMENT: if %TRUE, draw the button as a separate indicator
and label; if %FALSE, draw the button like a normal button
#NAME: unmark_day
#PARENT: Gtk.Calendar
#COMMENT: Removes the visual marker from a particular day.
#NAME: toolbar
#PARENT: Gtk.Toolbar.set_drop_highlight_item.none
#COMMENT: a #GtkToolbar
#NAME: entry
#PARENT: Gtk.Entry.get_icon_stock.utf8
#COMMENT: A #GtkEntry
#NAME: change-value
#PARENT: Gtk.Range
#COMMENT: The #GtkRange::change-value signal is emitted when a scroll action is
performed on a range.  It allows an application to determine the
type of scroll event that occurred and the resultant new value.
The application can handle the event itself and return %TRUE to
prevent further processing.  Or, by returning %FALSE, it can pass
the event to other handlers until the default GTK+ handler is
reached.

The value parameter is unrounded.  An application that overrides
the GtkRange::change-value signal is responsible for clamping the
value to the desired number of decimal digits; the default GTK+
handler clamps the value based on #GtkRange:round-digits.

It is not possible to use delayed update policies in an overridden
#GtkRange::change-value handler.
#NAME: get_vadjustment
#PARENT: Gtk.ScrolledWindow.get_vadjustment
#COMMENT: the vertical #GtkAdjustment
#NAME: path
#PARENT: Gtk.WidgetPath.iter_clear_classes.none
#COMMENT: a #GtkWidget
#NAME: user_data
#PARENT: Gtk.TreeView.set_column_drag_function.none
#COMMENT: User data to be passed to @func, or %NULL
#NAME: text
#PARENT: Gtk.Widget.create_pango_layout.Pango.Layout
#COMMENT: text to set on the layout (can be %NULL)
#NAME: context
#PARENT: Gtk.Widget.drag-begin.none
#COMMENT: the drag context
#NAME: fsd
#PARENT: Gtk.FontSelectionDialog.set_font_name.gboolean
#COMMENT: a #GtkFontSelectionDialog
#NAME: flags
#PARENT: Gtk.IconTheme.choose_icon_for_scale.IconInfo
#COMMENT: flags modifying the behavior of the icon lookup
#NAME: clear
#PARENT: Gtk.CellLayout
#COMMENT: Unsets all the mappings on all renderers on @cell_layout and
removes all renderers from @cell_layout.
#NAME: new_from_model
#PARENT: Gtk.Menu
#COMMENT: Creates a #GtkMenu and populates it with menu items and
submenus according to @model.

The created menu items are connected to actions found in the
#GtkApplicationWindow to which the menu belongs - typically
by means of being attached to a widget (see gtk_menu_attach_to_widget())
that is contained within the #GtkApplicationWindows widget hierarchy.

Actions can also be added using gtk_widget_insert_action_group() on the menu's
attach widget or on any of its parent widgets.
#NAME: selection
#PARENT: Gtk.TreeSelection.get_user_data.gpointer
#COMMENT: A #GtkTreeSelection.
#NAME: event
#PARENT: Gtk.Widget.send_focus_change.gboolean
#COMMENT: a #GdkEvent of type GDK_FOCUS_CHANGE
#NAME: unit
#PARENT: Gtk.PrintOperation.set_unit.none
#COMMENT: the unit to use
#NAME: set_show_fill_level
#PARENT: Gtk.Range
#COMMENT: Sets whether a graphical fill level is show on the trough. See
gtk_range_set_fill_level() for a general description of the fill
level concept.
#NAME: name
#PARENT: Gtk.Stack.get_child_by_name.Widget
#COMMENT: the name of the child to find
#NAME: connect_widget_destroyed
#PARENT: Gtk.Accessible
#COMMENT: This function specifies the callback function to be called
when the widget corresponding to a GtkAccessible is destroyed.
#NAME: model
#PARENT: Gtk.EntryCompletion.cursor-on-match.gboolean
#COMMENT: the #GtkTreeModel containing the matches
#NAME: adjustment
#PARENT: Gtk.Scrollbar.new.Widget
#COMMENT: the #GtkAdjustment to use, or %NULL to create a new adjustment.
#NAME: set_uris
#PARENT: Gtk.SelectionData
#COMMENT: Sets the contents of the selection from a list of URIs.
The string is converted to the form determined by
@selection_data->target.
#NAME: get_func
#PARENT: Gtk.Clipboard.set_with_owner.gboolean
#COMMENT: function to call to get the actual clipboard data
#NAME: get_pixbuf
#PARENT: Gtk.Image
#COMMENT: Gets the #GdkPixbuf being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_PIXBUF (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned pixbuf.
#NAME: size
#PARENT: Gtk.render_arrow.none
#COMMENT: square side for render area
#NAME: get_offset_value
#PARENT: Gtk.LevelBar
#COMMENT: Fetches the value specified for the offset marker @name in @self,
returning %TRUE in case an offset named @name was found.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_resizable.gboolean
#COMMENT: A #GtkTreeViewColumn
#NAME: folder
#PARENT: Gtk.FileChooser.remove_shortcut_folder.gboolean
#COMMENT: filename of the folder to remove
#NAME: SpinButtonUpdatePolicy
#PARENT: Gtk
#COMMENT: The spin button update policy determines whether the spin button displays
values even if they are outside the bounds of its adjustment.
See gtk_spin_button_set_update_policy().
#NAME: destroy
#PARENT: Gtk.ListBox.set_filter_func.none
#COMMENT: destroy notifier for @user_data
#NAME: get_state
#PARENT: Gtk.StyleContext.get_state
#COMMENT: the state flags
#NAME: cursor-on-match
#PARENT: Gtk.EntryCompletion
#COMMENT: Gets emitted when a match from the cursor is on a match
of the list. The default behaviour is to replace the contents
of the entry with the contents of the text column in the row
pointed to by @iter.

Note that @model is the model that was passed to
gtk_entry_completion_set_model().
#NAME: child
#PARENT: Gtk.ContainerClass.set_focus_child.set_focus_child.none
#COMMENT: a #GtkWidget, or %NULL
#NAME: accessible
#PARENT: Gtk.Accessible.connect_widget_destroyed.none
#COMMENT: a #GtkAccessible
#NAME: get_context
#PARENT: Gtk.GLArea
#COMMENT: Retrieves the #GdkGLContext used by @area.
#NAME: set_menubar
#PARENT: Gtk.Application
#COMMENT: Sets or unsets the menubar for windows of @application.

This is a menubar in the traditional sense.

This can only be done in the primary instance of the application,
after it has been registered.  #GApplication::startup is a good place
to call this.

Depending on the desktop environment, this may appear at the top of
each window, or at the top of the screen.  In some environments, if
both the application menu and the menubar are set, the application
menu will be presented as if it were the first item of the menubar.
Other environments treat the two as completely separate — for example,
the application menu may be rendered by the desktop shell while the
menubar (if set) remains in each individual window.

Use the base #GActionMap interface to add actions, to respond to the
user selecting these menu items.
#NAME: prev
#PARENT: Gtk.TreePath
#COMMENT: Moves the @path to point to the previous node at the
current depth, if it exists.
#NAME: get_font_desc
#PARENT: Gtk.FontChooser.get_font_desc
#COMMENT: A #PangoFontDescription for the
    current font, or %NULL if  no font is selected.
#NAME: set_spacing
#PARENT: Gtk.IconView
#COMMENT: Sets the ::spacing property which specifies the space
which is inserted between the cells (i.e. the icon and
the text) of an item.
#NAME: add_events
#PARENT: Gtk.Widget
#COMMENT: Adds the events in the bitfield @events to the event mask for
@widget. See gtk_widget_set_events() and the
[input handling overview][event-masks] for details.
#NAME: callback_data
#PARENT: Gtk.CellAreaClass.foreach.foreach.none
#COMMENT: user provided data pointer
#NAME: is_equal
#PARENT: Gtk.PaperSize.is_equal
#COMMENT: %TRUE, if @size1 and @size2
represent the same paper size
#NAME: FileFilterFlags
#PARENT: Gtk
#COMMENT: These flags indicate what parts of a #GtkFileFilterInfo struct
are filled or need to be filled.
#NAME: 
#PARENT: Gtk.MessageDialog.format_secondary_markup.none...
#COMMENT: arguments for @message_format
#NAME: position
#PARENT: Gtk.EditableInterface.insert_text.insert_text.none
#COMMENT: location of the position text will be inserted at
#NAME: lines
#PARENT: Gtk.Label.set_lines.none
#COMMENT: the desired number of lines, or -1
#NAME: xalign
#PARENT: Gtk.AspectFrame.set.none
#COMMENT: Horizontal alignment of the child within the allocation of
 the #GtkAspectFrame. This ranges from 0.0 (left aligned)
 to 1.0 (right aligned)
#NAME: new
#PARENT: Gtk.GLArea
#COMMENT: Creates a new #GtkGLArea widget.
#NAME: layout
#PARENT: Gtk.Layout.put.none
#COMMENT: a #GtkLayout
#NAME: color
#PARENT: Gtk.SymbolicColor.new_shade.SymbolicColor
#COMMENT: another #GtkSymbolicColor
#NAME: set_button_sensitivity
#PARENT: Gtk.ComboBox
#COMMENT: Sets whether the dropdown button of the combo box should be
always sensitive (%GTK_SENSITIVITY_ON), never sensitive (%GTK_SENSITIVITY_OFF)
or only if there is at least one item to display (%GTK_SENSITIVITY_AUTO).
#NAME: row
#PARENT: Gtk.ListBox.row-selected.none
#COMMENT: the selected row
#NAME: parse_args
#PARENT: Gtk.parse_args
#COMMENT: %TRUE if initialization succeeded, otherwise %FALSE
#NAME: get_progress_fraction
#PARENT: Gtk.Entry
#COMMENT: Returns the current fraction of the task that’s been completed.
See gtk_entry_set_progress_fraction().
#NAME: set_invisible_char
#PARENT: Gtk.Entry
#COMMENT: Sets the character to use in place of the actual text when
gtk_entry_set_visibility() has been called to set text visibility
to %FALSE. i.e. this is the character used in “password mode” to
show the user how many characters have been typed. By default, GTK+
picks the best invisible char available in the current font. If you
set the invisible char to 0, then the user will get no feedback
at all; there will be no text on the screen as they type.
#NAME: get_screen
#PARENT: Gtk.Invisible.get_screen
#COMMENT: the associated #GdkScreen.
#NAME: join_group
#PARENT: Gtk.RadioButton
#COMMENT: Joins a #GtkRadioButton object to the group of another #GtkRadioButton object

Use this in language bindings instead of the gtk_radio_button_get_group()
and gtk_radio_button_set_group() methods

A common way to set up a group of radio buttons is the following:
|[<!-- language="C" -->
  GtkRadioButton *radio_button;
  GtkRadioButton *last_button;

  while ( ...more buttons to add... )
    {
       radio_button = gtk_radio_button_new (...);

       gtk_radio_button_join_group (radio_button, last_button);
       last_button = radio_button;
    }
]|
#NAME: selection-changed
#PARENT: Gtk.RecentChooser
#COMMENT: This signal is emitted when there is a change in the set of
selected recently used resources.  This can happen when a user
modifies the selection with the mouse or the keyboard, or when
explicitly calling functions to change the selection.
#NAME: get_background_color
#PARENT: Gtk.StyleContext
#COMMENT: Gets the background color for a given state.

This function is far less useful than it seems, and it should not be used in
newly written code. CSS has no concept of "background color", as a background
can be an image, or a gradient, or any other pattern including solid colors.

The only reason why you would call gtk_style_context_get_background_color() is
to use the returned value to draw the background with it; the correct way to
achieve this result is to use gtk_render_background() instead, along with CSS
style classes to modify the color to be rendered.
#NAME: new
#PARENT: Gtk.VPaned
#COMMENT: Create a new #GtkVPaned
#NAME: has_renderer
#PARENT: Gtk.CellArea
#COMMENT: Checks if @area contains @renderer.
#NAME: file_name
#PARENT: Gtk.AccelMap.save.none
#COMMENT: the name of the file to contain
  accelerator specifications, in the GLib file name encoding
#NAME: event_box
#PARENT: Gtk.EventBox.set_visible_window.none
#COMMENT: a #GtkEventBox
#NAME: new
#PARENT: Gtk.PlacesSidebar
#COMMENT: Creates a new #GtkPlacesSidebar widget.

The application should connect to at least the
#GtkPlacesSidebar::open-location signal to be notified
when the user makes a selection in the sidebar.
#NAME: digits
#PARENT: Gtk.SpinButton.set_digits.none
#COMMENT: the number of digits after the decimal point to be displayed for the spin button’s value
#NAME: drag_source_add_text_targets
#PARENT: Gtk.Widget
#COMMENT: Add the text targets supported by #GtkSelectionData to
the target list of the drag source.  The targets
are added with @info = 0. If you need another value,
use gtk_target_list_add_text_targets() and
gtk_drag_source_set_target_list().
#NAME: skip
#PARENT: Gtk.BindingEntry
#COMMENT: Install a binding on @binding_set which causes key lookups
to be aborted, to prevent bindings from lower priority sets
to be activated.
#NAME: new
#PARENT: Gtk.AppChooserDialog
#COMMENT: Creates a new #GtkAppChooserDialog for the provided #GFile,
to allow the user to select an application for it.
#NAME: get_spacing
#PARENT: Gtk.CellAreaBox
#COMMENT: Gets the spacing added between cell renderers.
#NAME: data
#PARENT: Gtk.BuildableIface.custom_tag_end.custom_tag_end.none
#COMMENT: user data that will be passed in to parser functions
#NAME: fsd
#PARENT: Gtk.FontSelectionDialog.get_font_selection.Widget
#COMMENT: a #GtkFontSelectionDialog
#NAME: move-selected
#PARENT: Gtk.MenuShell
#COMMENT: The ::move-selected signal is emitted to move the selection to
another item.
#NAME: misc
#PARENT: Gtk.Misc.set_alignment.none
#COMMENT: a #GtkMisc.
#NAME: none
#PARENT: Gtk.PropagationPhase
#COMMENT: Events are not delivered automatically. Those can be
  manually fed through gtk_event_controller_handle_event(). This should
  only be used when full control about when, or whether the controller
  handles the event is needed.
#NAME: rc
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: qname
#PARENT: Gtk.WidgetPath.iter_has_qregion.gboolean
#COMMENT: region name as a #GQuark
#NAME: set_change_palette_with_screen_hook
#PARENT: Gtk.ColorSelection.set_change_palette_with_screen_hook
#COMMENT: the previous change palette hook (that was replaced)
#NAME: dialog
#PARENT: Gtk.Dialog.get_action_area.Widget
#COMMENT: a #GtkDialog
#NAME: button
#PARENT: Gtk.ScaleButton.get_value.gdouble
#COMMENT: a #GtkScaleButton
#NAME: edit-widget
#PARENT: Gtk.CellArea
#COMMENT: The widget currently editing the edited cell

This property is read-only and only changes as
a result of a call gtk_cell_area_activate_cell().
#NAME: STYLE_CLASS_CONTEXT_MENU
#PARENT: Gtk
#COMMENT: A CSS class to match context menus.

This style class is useful when you want to prevent
a context menu from inheriting e.g. font changes from
the widget it is attached to.
#NAME: set_translation_domain
#PARENT: Gtk.ActionGroup
#COMMENT: Sets the translation domain and uses g_dgettext() for translating the
@label and @tooltip of #GtkActionEntrys added by
gtk_action_group_add_actions().

If you’re not using gettext() for localization, see
gtk_action_group_set_translate_func().
#NAME: new
#PARENT: Gtk.AppChooserButton.new
#COMMENT: a newly created #GtkAppChooserButton
#NAME: set_from_icon_name
#PARENT: Gtk.Image
#COMMENT: See gtk_image_new_from_icon_name() for details.
#NAME: set_name
#PARENT: Gtk.RecentFilter
#COMMENT: Sets the human-readable name of the filter; this is the string
that will be displayed in the recently used resources selector
user interface if there is a selectable list of filters.
#NAME: callback_symbol
#PARENT: Gtk.WidgetClass.bind_template_callback_full.none
#COMMENT: The callback symbol
#NAME: tagname
#PARENT: Gtk.BuildableIface.custom_finished.custom_finished.none
#COMMENT: the name of the tag
#NAME: get_cursor
#PARENT: Gtk.IconView
#COMMENT: Fills in @path and @cell with the current cursor path and cell.
If the cursor isn’t currently set, then *@path will be %NULL.
If no cell currently has focus, then *@cell will be %NULL.

The returned #GtkTreePath must be freed with gtk_tree_path_free().
#NAME: group
#PARENT: Gtk.RadioToolButton.new_with_stock_from_widget.ToolItem
#COMMENT: An existing #GtkRadioToolButton.
#NAME: get_requisition
#PARENT: Gtk.Widget
#COMMENT: Retrieves the widget’s requisition.

This function should only be used by widget implementations in
order to figure whether the widget’s requisition has actually
changed after some internal state change (so that they can call
gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).

Normally, gtk_widget_size_request() should be used.
#NAME: cell
#PARENT: Gtk.CellLayout.set_cell_data_func.none
#COMMENT: a #GtkCellRenderer
#NAME: start_pos
#PARENT: Gtk.EditableInterface.delete_text.delete_text.none
#COMMENT: start position
#NAME: icon_theme
#PARENT: Gtk.IconTheme.rescan_if_needed.gboolean
#COMMENT: a #GtkIconTheme
#NAME: page_func
#PARENT: Gtk.Assistant.set_forward_page_func.none
#COMMENT: the #GtkAssistantPageFunc, or %NULL
    to use the default one
#NAME: prefers_app_menu
#PARENT: Gtk.Application
#COMMENT: Determines if the desktop environment in which the application is
running would prefer an application menu be shown.

If this function returns %TRUE then the application should call
gtk_application_set_app_menu() with the contents of an application
menu, which will be shown by the desktop environment.  If it returns
%FALSE then you should consider using an alternate approach, such as
a menubar.

The value returned by this function is purely advisory and you are
free to ignore it.  If you call gtk_application_set_app_menu() even
if the desktop environment doesn't support app menus, then a fallback
will be provided.

Applications are similarly free not to set an app menu even if the
desktop environment wants to show one.  In that case, a fallback will
also be created by the desktop environment (GNOME, for example, uses
a menu with only a "Quit" item in it).

The value returned by this function never changes.  Once it returns a
particular value, it is guaranteed to always return the same value.

You may only call this function after the application has been
registered and after the base startup handler has run.  You're most
likely to want to use this from your own startup handler.  It may
also make sense to consult this function while constructing UI (in
activate, open or an action activation handler) in order to determine
if you should show a gear menu or not.

This function will return %FALSE on Mac OS and a default app menu
will be created automatically with the "usual" contents of that menu
typical to most Mac OS applications.  If you call
gtk_application_set_app_menu() anyway, then this menu will be
replaced with your own.
#NAME: new
#PARENT: Gtk.EntryBuffer
#COMMENT: Create a new GtkEntryBuffer object.

Optionally, specify initial text to set in the buffer.
#NAME: x
#PARENT: Gtk.Label.get_layout_offsets.none
#COMMENT: location to store X offset of layout, or %NULL
#NAME: settings
#PARENT: Gtk.PrintSettings.get_dither.utf8
#COMMENT: a #GtkPrintSettings
#NAME: text
#PARENT: Gtk.RcStyle
#COMMENT: Text colors
#NAME: paragraph-background
#PARENT: Gtk.TextTag
#COMMENT: The paragraph background color as a string.
#NAME: set_hover_selection
#PARENT: Gtk.TreeView
#COMMENT: Enables or disables the hover selection mode of @tree_view.
Hover selection makes the selected row follow the pointer.
Currently, this works only for the selection modes
%GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.
#NAME: request_contents
#PARENT: Gtk.Clipboard
#COMMENT: Requests the contents of clipboard as the given target.
When the results of the result are later received the supplied callback
will be called.
#NAME: filename
#PARENT: Gtk.IconSource.set_filename.none
#COMMENT: image file to use
#NAME: y
#PARENT: Gtk.Label.get_layout_offsets.none
#COMMENT: location to store Y offset of layout, or %NULL
#NAME: preview
#PARENT: Gtk.PrintOperationPreviewIface.render_page.render_page.none
#COMMENT: a #GtkPrintOperationPreview
#NAME: get_wrap
#PARENT: Gtk.SpinButton.get_wrap
#COMMENT: %TRUE if the spin button wraps around
#NAME: set_icon_name
#PARENT: Gtk.ToolButton
#COMMENT: Sets the icon for the tool button from a named themed icon.
See the docs for #GtkIconTheme for more details.
The “icon_name” property only has an effect if not
overridden by non-%NULL “label”, “icon_widget” and “stock_id”
properties.
#NAME: get_icon_gicon
#PARENT: Gtk.Entry
#COMMENT: Retrieves the #GIcon used for the icon, or %NULL if there is
no icon or if the icon was set by some other method (e.g., by
stock, pixbuf, or icon name).
#NAME: get_display
#PARENT: Gtk.SelectionData
#COMMENT: Retrieves the display of the selection.
#NAME: margin
#PARENT: Gtk.PageSetup.set_right_margin.none
#COMMENT: the new right margin in units of @unit
#NAME: draft
#PARENT: Gtk.PrintQuality
#COMMENT: Draft quality.
#NAME: spin_button
#PARENT: Gtk.SpinButton.get_adjustment.Adjustment
#COMMENT: a #GtkSpinButton
#NAME: reset_im_context
#PARENT: Gtk.TextView
#COMMENT: Reset the input method context of the text view if needed.

This can be necessary in the case where modifying the buffer
would confuse on-going input method behavior.
#NAME: path
#PARENT: Gtk.WidgetPath.iter_clear_regions.none
#COMMENT: a #GtkWidgetPath
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_entry_text_column.gint
#COMMENT: A #GtkComboBox.
#NAME: get_current_page
#PARENT: Gtk.Notebook
#COMMENT: Returns the page number of the current page.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_hover_expand.none
#COMMENT: a #GtkTreeView
#NAME: get_margin_right
#PARENT: Gtk.Widget
#COMMENT: Gets the value of the #GtkWidget:margin-right property.
#NAME: context
#PARENT: Gtk.StyleContext.add_provider.none
#COMMENT: a #GtkStyleContext
#NAME: area
#PARENT: Gtk.GLArea.attach_buffers.none
#COMMENT: a #GtkGLArea
#NAME: new
#PARENT: Gtk.TreeViewColumn
#COMMENT: Creates a new #GtkTreeViewColumn.
#NAME: widget
#PARENT: Gtk.Widget.is_drawable.gboolean
#COMMENT: a #GtkWidget
#NAME: cell
#PARENT: Gtk.CellRendererClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: a #GtkCellRenderer instance
#NAME: set_reverse
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_REVERSE.
#NAME: chooser
#PARENT: Gtk.RecentChooser.get_current_uri.utf8
#COMMENT: a #GtkRecentChooser
#NAME: button
#PARENT: Gtk.ToggleToolButton.set_active.none
#COMMENT: a #GtkToggleToolButton
#NAME: line_number
#PARENT: Gtk.TextBuffer.get_iter_at_line.none
#COMMENT: line number counting from 0
#NAME: widget
#PARENT: Gtk.Widget.get_realized.gboolean
#COMMENT: a #GtkWidget
#NAME: forward_visible_cursor_position
#PARENT: Gtk.TextIter
#COMMENT: Moves @iter forward to the next visible cursor position. See
gtk_text_iter_forward_cursor_position() for details.
#NAME: iters_persist
#PARENT: Gtk.TreeModelFlags
#COMMENT: iterators survive all signals
    emitted by the tree
#NAME: size
#PARENT: Gtk.icon_size_get_name.utf8
#COMMENT: a #GtkIconSize.
#NAME: data
#PARENT: Gtk.TreeView.map_expanded_rows.none
#COMMENT: User data to be passed to the function.
#NAME: get_widget
#PARENT: Gtk.UIManagerClass.get_widget.get_widget
#COMMENT: the widget found by following the path,
    or %NULL if no widget was found
#NAME: render_expander
#PARENT: Gtk
#COMMENT: Renders an expander (as used in #GtkTreeView and #GtkExpander) in the area
defined by @x, @y, @width, @height. The state %GTK_STATE_FLAG_CHECKED
determines whether the expander is collapsed or expanded.

Typical expander rendering:

![](expanders.png)
#NAME: new_with_pixbuf
#PARENT: Gtk.CellView
#COMMENT: Creates a new #GtkCellView widget, adds a #GtkCellRendererPixbuf
to it, and makes it show @pixbuf.
#NAME: selected-rows-changed
#PARENT: Gtk.ListBox
#COMMENT: The ::selected-rows-changed signal is emitted when the
set of selected rows changes.
#NAME: get_scrollable
#PARENT: Gtk.Notebook
#COMMENT: Returns whether the tab label area has arrows for scrolling.
See gtk_notebook_set_scrollable().
#NAME: set_print_pages
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.
#NAME: new
#PARENT: Gtk.StackSwitcher
#COMMENT: Create a new #GtkStackSwitcher.
#NAME: detail
#PARENT: Gtk.paint_flat_box.none
#COMMENT: a style detail
#NAME: create_drag_icon
#PARENT: Gtk.IconView
#COMMENT: Creates a #cairo_surface_t representation of the item at @path.
This image is used for a drag icon.
#NAME: add_full
#PARENT: Gtk.RecentManager
#COMMENT: Adds a new resource, pointed by @uri, into the recently used
resources list, using the metadata specified inside the
#GtkRecentData-struct passed in @recent_data.

The passed URI will be used to identify this resource inside the
list.

In order to register the new recently used resource, metadata about
the resource must be passed as well as the URI; the metadata is
stored in a #GtkRecentData-struct, which must contain the MIME
type of the resource pointed by the URI; the name of the application
that is registering the item, and a command line to be used when
launching the item.

Optionally, a #GtkRecentData-struct might contain a UTF-8 string
to be used when viewing the item instead of the last component of
the URI; a short description of the item; whether the item should
be considered private - that is, should be displayed only by the
applications that have registered it.
#NAME: set_buffer
#PARENT: Gtk.TextView
#COMMENT: Sets @buffer as the buffer being displayed by @text_view. The previous
buffer displayed by the text view is unreferenced, and a reference is
added to @buffer. If you owned a reference to @buffer before passing it
to this function, you must remove that reference yourself; #GtkTextView
will not “adopt” it.
#NAME: has_tag
#PARENT: Gtk.TextIter
#COMMENT: Returns %TRUE if @iter points to a character that is part of a range tagged
with @tag. See also gtk_text_iter_begins_tag() and gtk_text_iter_ends_tag().
#NAME: filter
#PARENT: Gtk.TreeModelFilter.set_visible_column.none
#COMMENT: A #GtkTreeModelFilter
#NAME: Gradient
#PARENT: Gtk
#COMMENT: GtkGradient is a boxed type that represents a gradient.
It is the result of parsing a
[gradient expression][gtkcssprovider-gradients].
To obtain the gradient represented by a GtkGradient, it has to
be resolved with gtk_gradient_resolve(), which replaces all
symbolic color references by the colors they refer to (in a given
context) and constructs a #cairo_pattern_t value.

It is not normally necessary to deal directly with #GtkGradients,
since they are mostly used behind the scenes by #GtkStyleContext and
#GtkCssProvider.

#GtkGradient is deprecated. It was used internally by GTK’s CSS engine
to represent gradients. As its handling is not conforming to modern
web standards, it is not used anymore. If you want to use gradients in
your own code, please use Cairo directly.
#NAME: editing_done
#PARENT: Gtk.CellEditable
#COMMENT: Emits the #GtkCellEditable::editing-done signal.
#NAME: get_state
#PARENT: Gtk.CellRenderer.get_state
#COMMENT: the widget state flags applying to @cell
#NAME: is_symbolic
#PARENT: Gtk.IconInfo.is_symbolic
#COMMENT: %TRUE if the icon is symbolic, %FALSE otherwise
#NAME: style_class
#PARENT: Gtk.ThemingEngine.has_class.gboolean
#COMMENT: class name to look up
#NAME: column
#PARENT: Gtk.TreeView.set_tooltip_column.none
#COMMENT: an integer, which is a valid column number for @tree_view’s model
#NAME: render_arrow
#PARENT: Gtk
#COMMENT: Renders an arrow pointing to @angle.

Typical arrow rendering at 0, 1&solidus;2 &pi;, &pi; and 3&solidus;2 &pi;:

![](arrows.png)
#NAME: value_from_string_type
#PARENT: Gtk.Builder.value_from_string_type
#COMMENT: %TRUE on success
#NAME: new_with_model_and_entry
#PARENT: Gtk.ComboBox.new_with_model_and_entry
#COMMENT: A new #GtkComboBox
#NAME: get_number_up
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.
#NAME: get_default
#PARENT: Gtk.RecentManager
#COMMENT: Gets a unique instance of #GtkRecentManager, that you can share
in your application without caring about memory management.
#NAME: event_box
#PARENT: Gtk.EventBox.set_above_child.none
#COMMENT: a #GtkEventBox
#NAME: margin
#PARENT: Gtk.PageSetup.set_bottom_margin.none
#COMMENT: the new bottom margin in units of @unit
#NAME: gtk-cursor-blink-timeout
#PARENT: Gtk.Settings
#COMMENT: Time after which the cursor stops blinking, in seconds.
The timer is reset after each user interaction.

Setting this to zero has the same effect as setting
#GtkSettings:gtk-cursor-blink to %FALSE.
#NAME: set_accel_group
#PARENT: Gtk.ActionGroup
#COMMENT: Sets the accelerator group to be used by every action in this group.
#NAME: lower
#PARENT: Gtk.Adjustment.new.Adjustment
#COMMENT: the minimum value.
#NAME: child
#PARENT: Gtk.Notebook.insert_page_menu.gint
#COMMENT: the #GtkWidget to use as the contents of the page
#NAME: sort_func
#PARENT: Gtk.TreeSortable.set_default_sort_func.none
#COMMENT: The comparison function
#NAME: accel_group
#PARENT: Gtk.AccelGroup.get_modifier_mask.Gdk.ModifierType
#COMMENT: a #GtkAccelGroup
#NAME: set_id_column
#PARENT: Gtk.ComboBox
#COMMENT: Sets the model column which @combo_box should use to get string IDs
for values from. The column @id_column in the model of @combo_box
must be of type %G_TYPE_STRING.
#NAME: support-selection
#PARENT: Gtk.PrintOperation
#COMMENT: If %TRUE, the print operation will support print of selection.
This allows the print dialog to show a "Selection" button.
#NAME: position
#PARENT: Gtk.TreeView.insert_column.gint
#COMMENT: The position to insert @column in.
#NAME: file_chooser_error_quark
#PARENT: Gtk.file_chooser_error_quark
#COMMENT: The error quark used for #GtkFileChooser errors.
#NAME: fontchooser
#PARENT: Gtk.FontChooserIface.set_filter_func.set_filter_func.none
#COMMENT: a #GtkFontChooser
#NAME: climb-rate
#PARENT: Gtk.CellRendererSpin
#COMMENT: The acceleration rate when you hold down a button.
#NAME: new_from_key_file
#PARENT: Gtk.PrintSettings.new_from_key_file
#COMMENT: the restored #GtkPrintSettings
#NAME: new
#PARENT: Gtk.Scale.new
#COMMENT: a new #GtkScale
#NAME: policy
#PARENT: Gtk.Scrollable.set_hscroll_policy.none
#COMMENT: the horizontal #GtkScrollablePolicy
#NAME: paint_expander
#PARENT: Gtk
#COMMENT: Draws an expander as used in #GtkTreeView. @x and @y specify the
center the expander. The size of the expander is determined by the
“expander-size” style property of @widget.  (If widget is not
specified or doesn’t have an “expander-size” property, an
unspecified default size will be used, since the caller doesn't
have sufficient information to position the expander, this is
likely not useful.) The expander is expander_size pixels tall
in the collapsed position and expander_size pixels wide in the
expanded position.
#NAME: set_min_children_per_line
#PARENT: Gtk.FlowBox
#COMMENT: Sets the minimum number of children to line up
in @box’s orientation before flowing.
#NAME: x
#PARENT: Gtk.Fixed.move.none
#COMMENT: the horizontal position to move the widget to.
#NAME: context
#PARENT: Gtk.PrintContext.create_pango_layout.Pango.Layout
#COMMENT: a #GtkPrintContext
#NAME: tree_view
#PARENT: Gtk.TreeView.set_fixed_height_mode.none
#COMMENT: a #GtkTreeView
#NAME: y
#PARENT: Gtk.Fixed.move.none
#COMMENT: the vertical position to move the widget to.
#NAME: get_visible_window
#PARENT: Gtk.EventBox.get_visible_window
#COMMENT: %TRUE if the event box window is visible
#NAME: context_id
#PARENT: Gtk.Statusbar.pop.none
#COMMENT: a context identifier
#NAME: widget
#PARENT: Gtk.Widget.set_tooltip_window.none
#COMMENT: a #GtkWidget
#NAME: list_style_properties
#PARENT: Gtk.WidgetClass
#COMMENT: Returns all style properties of a widget class.
#NAME: accel-key
#PARENT: Gtk.CellRendererAccel
#COMMENT: The keyval of the accelerator.
#NAME: toolbar
#PARENT: Gtk.Toolbar.get_icon_size.IconSize
#COMMENT: a #GtkToolbar
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.get_path.get_path.TreePath
#COMMENT: a #GtkTreeModel
#NAME: proxy
#PARENT: Gtk.tree_row_reference_deleted.none
#COMMENT: a #GObject
#NAME: icon_theme
#PARENT: Gtk.IconTheme.list_icons.utf8
#COMMENT: a #GtkIconTheme
#NAME: permission
#PARENT: Gtk.LockButton.set_permission.none
#COMMENT: a #GPermission object, or %NULL
#NAME: value
#PARENT: Gtk.Buildable.set_buildable_property.none
#COMMENT: value of property
#NAME: first_prop_name
#PARENT: Gtk.CellArea.add_with_properties.none
#COMMENT: the name of the first cell property to set
#NAME: set_show_close_button
#PARENT: Gtk.InfoBar
#COMMENT: If true, a standard close button is shown. When clicked it emits
the response %GTK_RESPONSE_CLOSE.
#NAME: menu_button
#PARENT: Gtk.MenuButton.get_popover.Popover
#COMMENT: a #GtkMenuButton
#NAME: use_popover
#PARENT: Gtk.MenuButton.set_use_popover.none
#COMMENT: %TRUE to construct a popover from the menu model
#NAME: iter
#PARENT: Gtk.TextBuffer.get_iter_at_child_anchor.none
#COMMENT: an iterator to be initialized
#NAME: text_only
#PARENT: Gtk.TextSearchFlags
#COMMENT: Search only text. A match may have pixbufs or
child widgets mixed inside the matched range.
#NAME: get_reorderable
#PARENT: Gtk.TreeViewColumn.get_reorderable
#COMMENT: %TRUE if the @tree_column can be reordered by the user.
#NAME: area
#PARENT: Gtk.CellArea.cell_get_valist.none
#COMMENT: a #GtkCellArea
#NAME: lock
#PARENT: Gtk.AccelGroup
#COMMENT: Locks the given accelerator group.

Locking an acelerator group prevents the accelerators contained
within it to be changed during runtime. Refer to
gtk_accel_map_change_entry() about runtime accelerator changes.

If called more than once, @accel_group remains locked until
gtk_accel_group_unlock() has been called an equivalent number
of times.
#NAME: request-page-setup
#PARENT: Gtk.PrintOperation
#COMMENT: Emitted once for every page that is printed, to give
the application a chance to modify the page setup. Any changes
done to @setup will be in force only for printing this page.
#NAME: widget
#PARENT: Gtk.test_widget_wait_for_draw.none
#COMMENT: the widget to wait for
#NAME: TextTagTable
#PARENT: Gtk
#COMMENT: You may wish to begin by reading the
[text widget conceptual overview][TextWidget]
which gives an overview of all the objects and
data types related to the text widget and how they work together.

# GtkTextTagTables as GtkBuildable

The GtkTextTagTable implementation of the GtkBuildable interface
supports adding tags by specifying “tag” as the “type” attribute
of a <child> element.

An example of a UI definition fragment specifying tags:
|[
<object class="GtkTextTagTable">
 <child type="tag">
   <object class="GtkTextTag"/>
 </child>
</object>
]|
#NAME: get_use_underline
#PARENT: Gtk.Label.get_use_underline
#COMMENT: %TRUE whether an embedded underline in the label indicates
              the mnemonic accelerator keys.
#NAME: model
#PARENT: Gtk.Menu.new_from_model.Widget
#COMMENT: a #GMenuModel
#NAME: left
#PARENT: Gtk.ArrowType
#COMMENT: Represents a left pointing arrow.
#NAME: rect
#PARENT: Gtk.Window.get_resize_grip_area.gboolean
#COMMENT: a pointer to a #GdkRectangle which we should store
    the resize grip area
#NAME: detail
#PARENT: Gtk.paint_expander.none
#COMMENT: a style detail
#NAME: color
#PARENT: Gtk.ColorSelection.get_previous_color.none
#COMMENT: a #GdkColor to fill in with the original color value
#NAME: scale
#PARENT: Gtk.Scale.set_digits.none
#COMMENT: a #GtkScale
#NAME: set_above_child
#PARENT: Gtk.EventBox
#COMMENT: Set whether the event box window is positioned above the windows
of its child, as opposed to below it. If the window is above, all
events inside the event box will go to the event box. If the window
is below, events in windows of child widgets will first got to that
widget, and then to its parents.

The default is to keep the window below the child.
#NAME: module_file
#PARENT: Gtk.rc_find_module_in_path.filename
#COMMENT: name of a theme engine
#NAME: context
#PARENT: Gtk.IMContext.set_use_preedit.none
#COMMENT: a #GtkIMContext
#NAME: get_last_event
#PARENT: Gtk.Gesture.get_last_event
#COMMENT: The last event from @sequence
#NAME: accel_key
#PARENT: Gtk.AccelMap.change_entry.gboolean
#COMMENT: the new accelerator key
#NAME: new
#PARENT: Gtk.StyleContext.new
#COMMENT: A newly created #GtkStyleContext.
#NAME: window
#PARENT: Gtk.Window.begin_move_drag.none
#COMMENT: a #GtkWindow
#NAME: selection-changed
#PARENT: Gtk.FileChooser
#COMMENT: This signal is emitted when there is a change in the set of selected files
in a #GtkFileChooser.  This can happen when the user modifies the selection
with the mouse or the keyboard, or when explicitly calling functions to
change the selection.

Normally you do not need to connect to this signal, as it is easier to wait
for the file chooser to finish running, and then to get the list of
selected files using the functions mentioned below.

See also: gtk_file_chooser_select_filename(),
gtk_file_chooser_unselect_filename(), gtk_file_chooser_get_filename(),
gtk_file_chooser_get_filenames(), gtk_file_chooser_select_uri(),
gtk_file_chooser_unselect_uri(), gtk_file_chooser_get_uri(),
gtk_file_chooser_get_uris().
#NAME: set_ellipsize
#PARENT: Gtk.ToolItemGroup
#COMMENT: Sets the ellipsization mode which should be used by labels in @group.
#NAME: get_offset
#PARENT: Gtk.GestureDrag.get_offset
#COMMENT: %TRUE if the gesture is active
#NAME: IconThemeError
#PARENT: Gtk
#COMMENT: Error codes for GtkIconTheme operations.
#NAME: notebook
#PARENT: Gtk.Notebook.set_group_name.none
#COMMENT: a #GtkNotebook
#NAME: remove_accel_group
#PARENT: Gtk.Window
#COMMENT: Reverses the effects of gtk_window_add_accel_group().
#NAME: fontsel
#PARENT: Gtk.FontSelection.set_preview_text.none
#COMMENT: a #GtkFontSelection
#NAME: widget
#PARENT: Gtk.Widget.set_accel_path.none
#COMMENT: a #GtkWidget
#NAME: get_relief
#PARENT: Gtk.Button
#COMMENT: Returns the current relief style of the given #GtkButton.
#NAME: property_name
#PARENT: Gtk.ContainerClass.find_child_property.GObject.ParamSpec
#COMMENT: the name of the child property to find
#NAME: set_color
#PARENT: Gtk.HSV
#COMMENT: Sets the current color in an HSV color selector.
Color component values must be in the [0.0, 1.0] range.
#NAME: new
#PARENT: Gtk.IconSource.new
#COMMENT: a new #GtkIconSource
#NAME: PrintError
#PARENT: Gtk
#COMMENT: Error codes that identify various errors that can occur while
using the GTK+ printing support.
#NAME: iter
#PARENT: Gtk.TextIter.backward_sentence_start.gboolean
#COMMENT: a #GtkTextIter
#NAME: location
#PARENT: Gtk.TextView.extend-selection.gboolean
#COMMENT: the location where to extend the selection
#NAME: get_enable_search
#PARENT: Gtk.TreeView.get_enable_search
#COMMENT: whether or not to let the user search interactively
#NAME: get_heading
#PARENT: Gtk.AppChooserDialog
#COMMENT: Returns the text to display at the top of the dialog.
#NAME: width
#PARENT: Gtk.ComboBox.set_wrap_width.none
#COMMENT: Preferred number of columns
#NAME: backward_sentence_start
#PARENT: Gtk.TextIter
#COMMENT: Moves backward to the previous sentence start; if @iter is already at
the start of a sentence, moves backward to the next one.  Sentence
boundaries are determined by Pango and should be correct for nearly
any language (if not, the correct fix would be to the Pango text
boundary algorithms).
#NAME: model
#PARENT: Gtk.TreeView.set_model.none
#COMMENT: The model.
#NAME: clear_attributes
#PARENT: Gtk.CellLayout
#COMMENT: Clears all existing attributes previously set with
gtk_cell_layout_set_attributes().
#NAME: mark
#PARENT: Gtk.TextMark.get_name.utf8
#COMMENT: a #GtkTextMark
#NAME: get_vadjustment
#PARENT: Gtk.Viewport
#COMMENT: Returns the vertical adjustment of the viewport.
#NAME: position
#PARENT: Gtk.Button.set_image_position.none
#COMMENT: the position
#NAME: window
#PARENT: Gtk.Application.inhibit.guint
#COMMENT: a #GtkWindow, or %NULL
#NAME: statusbar
#PARENT: Gtk.Statusbar.remove_all.none
#COMMENT: a #GtkStatusbar
#NAME: new
#PARENT: Gtk.Adjustment
#COMMENT: Creates a new #GtkAdjustment.
#NAME: get_popover
#PARENT: Gtk.MenuButton.get_popover
#COMMENT: a #GtkPopover or %NULL
#NAME: qname
#PARENT: Gtk.WidgetPath.iter_has_qclass.gboolean
#COMMENT: class name as a #GQuark
#NAME: paint_box
#PARENT: Gtk
#COMMENT: Draws a box on @cr with the given parameters.
#NAME: get_name
#PARENT: Gtk.ActionGroup.get_name
#COMMENT: the name of the action group.
#NAME: parent_class
#PARENT: Gtk.EntryClass
#COMMENT: The parent class.
#NAME: FileChooserConfirmation
#PARENT: Gtk
#COMMENT: Used as a return value of handlers for the
#GtkFileChooser::confirm-overwrite signal of a #GtkFileChooser. This
value determines whether the file chooser will present the stock
confirmation dialog, accept the user’s choice of a filename, or
let the user choose another filename.
#NAME: add_table
#PARENT: Gtk.IMContextSimple
#COMMENT: Adds an additional table to search to the input context.
Each row of the table consists of @max_seq_len key symbols
followed by two #guint16 interpreted as the high and low
words of a #gunicode value. Tables are searched starting
from the last added.

The table must be sorted in dictionary order on the
numeric value of the key symbol fields. (Values beyond
the length of the sequence should be zero.)
#NAME: object
#PARENT: Gtk.Builder.expose_object.none
#COMMENT: the object to expose
#NAME: truncate-multiline
#PARENT: Gtk.Entry
#COMMENT: When %TRUE, pasted multi-line text is truncated to the first line.
#NAME: path
#PARENT: Gtk.IconView.get_item_at_pos.gboolean
#COMMENT: Return location for the path, or %NULL
#NAME: init_check
#PARENT: Gtk
#COMMENT: This function does the same work as gtk_init() with only a single
change: It does not terminate the program if the windowing system
can’t be initialized. Instead it returns %FALSE on failure.

This way the application can fall back to some other means of
communication with the user - for example a curses or command line
interface.
#NAME: height
#PARENT: Gtk.paint_resize_grip.none
#COMMENT: the height of the rectangle in which to draw the resize grip
#NAME: sensitive
#PARENT: Gtk.CellRenderer.set_sensitive.none
#COMMENT: the sensitivity of the cell
#NAME: setting
#PARENT: Gtk.InfoBar.set_response_sensitive.none
#COMMENT: TRUE for sensitive
#NAME: rc_parse_state
#PARENT: Gtk
#COMMENT: Parses a #GtkStateType variable from the format expected
in a RC file.
#NAME: attrs
#PARENT: Gtk.IMContext.get_preedit_string.none
#COMMENT: location to store the retrieved
             attribute list.  When you are done with this list, you
             must unreference it with pango_attr_list_unref().
#NAME: data
#PARENT: Gtk.Menu.popup.none
#COMMENT: user supplied data to be passed to @func.
#NAME: notebook
#PARENT: Gtk.Notebook.popup_disable.none
#COMMENT: a #GtkNotebook
#NAME: get_iter_from_string
#PARENT: Gtk.TreeModel.get_iter_from_string
#COMMENT: %TRUE, if @iter was set
#NAME: accelerator_key
#PARENT: Gtk.accelerator_parse_with_keycode.none
#COMMENT: return location for accelerator
    keyval, or %NULL
#NAME: cr
#PARENT: Gtk.paint_focus.none
#COMMENT: a #cairo_t
#NAME: selection
#PARENT: Gtk.Clipboard.get_for_display.Clipboard
#COMMENT: a #GdkAtom which identifies the clipboard to use.
#NAME: resolve
#PARENT: Gtk.Gradient
#COMMENT: If @gradient is resolvable, @resolved_gradient will be filled in
with the resolved gradient as a cairo_pattern_t, and %TRUE will
be returned. Generally, if @gradient can’t be resolved, it is
due to it being defined on top of a named color that doesn't
exist in @props.
#NAME: widget
#PARENT: Gtk.WidgetClass.queue_draw_region.queue_draw_region.none
#COMMENT: a #GtkWidget
#NAME: STYLE_CLASS_SUGGESTED_ACTION
#PARENT: Gtk
#COMMENT: A CSS class used when an action (usually a button) is the
primary suggested action in a specific context.
#NAME: settings
#PARENT: Gtk.rc_reset_styles.none
#COMMENT: a #GtkSettings
#NAME: flags
#PARENT: Gtk.BuilderConnectFunc.none
#COMMENT: #GConnectFlags to use
#NAME: changed
#PARENT: Gtk.Editable
#COMMENT: The ::changed signal is emitted at the end of a single
user-visible operation on the contents of the #GtkEditable.

E.g., a paste operation that replaces the contents of the
selection will cause only one signal emission (even though it
is implemented by first deleting the selection, then inserting
the new content, and may cause multiple ::notify::text signals
to be emitted).
#NAME: paned
#PARENT: Gtk.Paned.get_wide_handle.gboolean
#COMMENT: a #GtkPaned
#NAME: set_support_selection
#PARENT: Gtk.PrintOperation
#COMMENT: Sets whether selection is supported by #GtkPrintOperation.
#NAME: pbar
#PARENT: Gtk.ProgressBar.get_pulse_step.gdouble
#COMMENT: a #GtkProgressBar
#NAME: name
#PARENT: Gtk.Builder.get_object.GObject.Object
#COMMENT: name of object to get
#NAME: check_menu_item
#PARENT: Gtk.CheckMenuItem.toggled.none
#COMMENT: a #GtkCheckMenuItem.
#NAME: move-cursor
#PARENT: Gtk.TreeView.move-cursor
#COMMENT: %TRUE if @step is supported, %FALSE otherwise.
#NAME: set_preview_widget
#PARENT: Gtk.FileChooser
#COMMENT: Sets an application-supplied widget to use to display a custom preview
of the currently selected file. To implement a preview, after setting the
preview widget, you connect to the #GtkFileChooser::update-preview
signal, and call gtk_file_chooser_get_preview_filename() or
gtk_file_chooser_get_preview_uri() on each change. If you can
display a preview of the new file, update your widget and
set the preview active using gtk_file_chooser_set_preview_widget_active().
Otherwise, set the preview inactive.

When there is no application-supplied preview widget, or the
application-supplied preview widget is not active, the file chooser
will display no preview at all.
#NAME: ntargets
#PARENT: Gtk.TargetList.new.TargetList
#COMMENT: number of entries in @targets.
#NAME: gicon
#PARENT: Gtk.Tooltip.set_icon_from_gicon.none
#COMMENT: a #GIcon representing the icon, or %NULL
#NAME: get_max_width
#PARENT: Gtk.TreeViewColumn
#COMMENT: Returns the maximum width in pixels of the @tree_column, or -1 if no maximum
width is set.
#NAME: sensitive
#PARENT: Gtk.Widget.set_sensitive.none
#COMMENT: %TRUE to make the widget sensitive
#NAME: activate_focus
#PARENT: Gtk.Window
#COMMENT: Activates the current focused widget within the window.
#NAME: widget
#PARENT: Gtk.HandleBox.child-attached.none
#COMMENT: the child widget of the handlebox.
  (this argument provides no extra information
  and is here only for backwards-compatibility)
#NAME: foreach_unfiltered
#PARENT: Gtk.AccelMap
#COMMENT: Loops over all entries in the accelerator map, and execute
@foreach_func on each. The signature of @foreach_func is that of
#GtkAccelMapForeach, the @changed parameter indicates whether
this accelerator was changed during runtime (thus, would need
saving during an accelerator map dump).
#NAME: area
#PARENT: Gtk.GLArea.set_has_stencil_buffer.none
#COMMENT: a #GtkGLArea
#NAME: get_nth_bookmark
#PARENT: Gtk.PlacesSidebar
#COMMENT: This function queries the bookmarks added by the user to the places sidebar,
and returns one of them.  This function is used by #GtkFileChooser to implement
the “Alt-1”, “Alt-2”, etc. shortcuts, which activate the cooresponding bookmark.
#NAME: get_default_icon_name
#PARENT: Gtk.Window.get_default_icon_name
#COMMENT: the fallback icon name for windows
#NAME: renderer
#PARENT: Gtk.CellCallback.gboolean
#COMMENT: the cell renderer to operate on
#NAME: end
#PARENT: Gtk.TextBuffer.insert_range.none
#COMMENT: another position in the same buffer as @start
#NAME: rc_parse_string
#PARENT: Gtk
#COMMENT: Parses resource information directly from a string.
#NAME: about
#PARENT: Gtk.AboutDialog.get_translator_credits.utf8
#COMMENT: a #GtkAboutDialog
#NAME: to_file
#PARENT: Gtk.PrintSettings.to_file
#COMMENT: %TRUE on success
#NAME: box
#PARENT: Gtk.FlowBox.set_vadjustment.none
#COMMENT: a #GtkFlowBox
#NAME: set_app_menu
#PARENT: Gtk.Application
#COMMENT: Sets or unsets the application menu for @application.

This can only be done in the primary instance of the application,
after it has been registered.  #GApplication::startup is a good place
to call this.

The application menu is a single menu containing items that typically
impact the application as a whole, rather than acting on a specific
window or document.  For example, you would expect to see
“Preferences” or “Quit” in an application menu, but not “Save” or
“Print”.

If supported, the application menu will be rendered by the desktop
environment.

Use the base #GActionMap interface to add actions, to respond to the user
selecting these menu items.
#NAME: tree_view
#PARENT: Gtk.TreeView.expand_to_path.none
#COMMENT: A #GtkTreeView.
#NAME: text_view
#PARENT: Gtk.TextView.get_iter_at_position.none
#COMMENT: a #GtkTextView
#NAME: new
#PARENT: Gtk.HandleBox.new
#COMMENT: a new #GtkHandleBox.
#NAME: get_transition_type
#PARENT: Gtk.Stack
#COMMENT: Gets the type of animation that will be used
for transitions between pages in @stack.
#NAME: get_widget
#PARENT: Gtk.Accessible.get_widget
#COMMENT: pointer to the #GtkWidget
    corresponding to the #GtkAccessible, or %NULL.
#NAME: PathPriorityType
#PARENT: Gtk
#COMMENT: Priorities for path lookups.
See also gtk_binding_set_add_path().
#NAME: iter_add_region
#PARENT: Gtk.WidgetPath
#COMMENT: Adds the region @name to the widget at position @pos in
the hierarchy defined in @path. See
gtk_style_context_add_region().

Region names must only contain lowercase letters
and “-”, starting always with a lowercase letter.
#NAME: get_draw_as_radio
#PARENT: Gtk.CheckMenuItem
#COMMENT: Returns whether @check_menu_item looks like a #GtkRadioMenuItem
#NAME: Button
#PARENT: Gtk
#COMMENT: The #GtkButton widget is generally used to trigger a callback function that is
called when the button is pressed.  The various signals and how to use them
are outlined below.

The #GtkButton widget can hold any valid child widget.  That is, it can hold
almost any other standard #GtkWidget.  The most commonly used child is the
#GtkLabel.
#NAME: buildable
#PARENT: Gtk.Buildable.get_internal_child.GObject.Object
#COMMENT: a #GtkBuildable
#NAME: prepend
#PARENT: Gtk.ListBox
#COMMENT: Prepend a widget to the list. If a sort function is set, the widget will
actually be inserted at the calculated position and this function has the
same effect of gtk_container_add().
#NAME: serialize
#PARENT: Gtk.TextBuffer
#COMMENT: This function serializes the portion of text between @start
and @end in the rich text format represented by @format.

@formats to be used must be registered using
gtk_text_buffer_register_serialize_format() or
gtk_text_buffer_register_serialize_tagset() beforehand.
#NAME: get_select_function
#PARENT: Gtk.TreeSelection.get_select_function
#COMMENT: The function.
#NAME: test_spin_button_click
#PARENT: Gtk
#COMMENT: This function will generate a @button click in the upwards or downwards
spin button arrow areas, usually leading to an increase or decrease of
spin button’s value.
#NAME: LinkButtonClass
#PARENT: Gtk
#COMMENT: The #GtkLinkButtonClass contains only
private data.
#NAME: distance
#PARENT: Gtk.MenuShell.move-selected.gboolean
#COMMENT: +1 to move to the next item, -1 to move to the previous
#NAME: n_entries
#PARENT: Gtk.AccelGroup.query.AccelGroupEntry
#COMMENT: location to return the number
    of entries found, or %NULL
#NAME: state
#PARENT: Gtk.StyleProviderIface.get_style_property.get_style_property.gboolean
#COMMENT: state to query the style property for
#NAME: add_tick_callback
#PARENT: Gtk.Widget.add_tick_callback
#COMMENT: an id for the connection of this callback. Remove the callback
    by passing it to gtk_widget_remove_tick_callback()
#NAME: rc_parse_color_full
#PARENT: Gtk
#COMMENT: Parses a color in the format expected
in a RC file. If @style is not %NULL, it will be consulted to resolve
references to symbolic colors.
#NAME: new_with_mnemonic
#PARENT: Gtk.ToggleButton.new_with_mnemonic
#COMMENT: a new #GtkToggleButton
#NAME: auto-render
#PARENT: Gtk.GLArea
#COMMENT: If set to %TRUE the #GtkGLArea::render signal will be emitted every time
the widget draws. This is the default and is useful if drawing the widget
is faster.

If set to %FALSE the data from previous rendering is kept around and will
be used for drawing the widget the next time, unless the window is resized.
In order to force a rendering gtk_gl_area_queue_render() must be called.
This mode is useful when the scene changes seldomly, but takes a long time
to redraw.
#NAME: chooser
#PARENT: Gtk.FileChooser.remove_filter.none
#COMMENT: a #GtkFileChooser
#NAME: chooser
#PARENT: Gtk.FileChooser.get_current_name.utf8
#COMMENT: a #GtkFileChooser
#NAME: get_drag_item
#PARENT: Gtk.ToolPalette
#COMMENT: Get the dragged item from the selection.
This could be a #GtkToolItem or a #GtkToolItemGroup.
#NAME: entry
#PARENT: Gtk.Entry.get_icon_sensitive.gboolean
#COMMENT: a #GtkEntry
#NAME: new
#PARENT: Gtk.Toolbar
#COMMENT: Creates a new toolbar.
#NAME: grid
#PARENT: Gtk.Grid.set_baseline_row.none
#COMMENT: a #GtkGrid
#NAME: get_wrap
#PARENT: Gtk.SpinButton
#COMMENT: Returns whether the spin button’s value wraps around to the
opposite limit when the upper or lower limit of the range is
exceeded. See gtk_spin_button_set_wrap().
#NAME: ExpanderStyle
#PARENT: Gtk
#COMMENT: Used to specify the style of the expanders drawn by a #GtkTreeView.
#NAME: renderer
#PARENT: Gtk.CellArea.activate_cell.gboolean
#COMMENT: the #GtkCellRenderer in @area to activate
#NAME: style_attach
#PARENT: Gtk.Widget
#COMMENT: This function attaches the widget’s #GtkStyle to the widget's
#GdkWindow. It is a replacement for

|[
widget->style = gtk_style_attach (widget->style, widget->window);
]|

and should only ever be called in a derived widget’s “realize”
implementation which does not chain up to its parent class'
“realize” implementation, because one of the parent classes
(finally #GtkWidget) would attach the style itself.
#NAME: center
#PARENT: Gtk.ButtonBoxStyle
#COMMENT: Buttons are centered in the box. Since 2.12.
#NAME: icon_view
#PARENT: Gtk.IconView.set_tooltip_cell.none
#COMMENT: a #GtkIconView
#NAME: selection_data
#PARENT: Gtk.SelectionData.set_pixbuf.gboolean
#COMMENT: a #GtkSelectionData
#NAME: count
#PARENT: Gtk.TextIter.forward_visible_cursor_positions.gboolean
#COMMENT: number of positions to move
#NAME: get_preview_text
#PARENT: Gtk.FontSelectionDialog
#COMMENT: Gets the text displayed in the preview area.
#NAME: cursor_index
#PARENT: Gtk.IMContext.get_surrounding.gboolean
#COMMENT: location to store byte index of the insertion
       cursor within @text.
#NAME: get_tabs
#PARENT: Gtk.Entry
#COMMENT: Gets the tabstops that were set on the entry using gtk_entry_set_tabs(), if
any.
#NAME: add_with_properties
#PARENT: Gtk.CellArea
#COMMENT: Adds @renderer to @area, setting cell properties at the same time.
See gtk_cell_area_add() and gtk_cell_area_cell_set() for more details.
#NAME: expandable
#PARENT: Gtk.CellRendererState
#COMMENT: The cell is in a row that can be expanded. Since 3.4
#NAME: PageSetupDoneFunc
#PARENT: Gtk
#COMMENT: The type of function that is passed to
gtk_print_run_page_setup_dialog_async().

This function will be called when the page setup dialog
is dismissed, and also serves as destroy notify for @data.
#NAME: popover
#PARENT: Gtk.Popover.get_transitions_enabled.gboolean
#COMMENT: a #GtkPopover
#NAME: none
#PARENT: Gtk.RecentSortType
#COMMENT: Do not sort the returned list of recently used
  resources.
#NAME: get_hhomogeneous
#PARENT: Gtk.Stack
#COMMENT: Gets whether @stack is horizontally homogeneous.
See gtk_stack_set_hhomogeneous().
#NAME: grab-broken-event
#PARENT: Gtk.Widget
#COMMENT: Emitted when a pointer or keyboard grab on a window belonging
to @widget gets broken.

On X11, this happens when the grab window becomes unviewable
(i.e. it or one of its ancestors is unmapped), or if the same
application grabs the pointer or keyboard again.
#NAME: add_item
#PARENT: Gtk.RecentManager.add_item
#COMMENT: %TRUE if the new item was successfully added
  to the recently used resources list
#NAME: get_children
#PARENT: Gtk.ToplevelAccessible.get_children
#COMMENT: List of
  children.
#NAME: window
#PARENT: Gtk.Window.set_icon_name.none
#COMMENT: a #GtkWindow
#NAME: get_ignore_hidden
#PARENT: Gtk.SizeGroup.get_ignore_hidden
#COMMENT: %TRUE if invisible widgets are ignored.
#NAME: get_label_widget
#PARENT: Gtk.Expander.get_label_widget
#COMMENT: the label widget,
    or %NULL if there is none
#NAME: CellAllocCallback
#PARENT: Gtk.CellAllocCallback
#COMMENT: %TRUE to stop iterating over cells.
#NAME: new_text
#PARENT: Gtk.Editable.insert_text.none
#COMMENT: the text to append
#NAME: has_parent
#PARENT: Gtk.WidgetPath.has_parent
#COMMENT: %TRUE if any parent is of type @type
#NAME: radio_menu_item
#PARENT: Gtk.RadioMenuItem.join_group.none
#COMMENT: a #GtkRadioMenuItem
#NAME: iter
#PARENT: Gtk.TreeModelIface.iter_has_child.iter_has_child.gboolean
#COMMENT: the #GtkTreeIter-struct to test for children
#NAME: padding_top
#PARENT: Gtk.Alignment.set_padding.none
#COMMENT: the padding at the top of the widget
#NAME: selection
#PARENT: Gtk.TreeSelection.get_tree_view.TreeView
#COMMENT: A #GtkTreeSelection
#NAME: grab_broken
#PARENT: Gtk.DragResult
#COMMENT: The pointer or keyboard grab used
 for the drag operation was broken.
#NAME: builder
#PARENT: Gtk.BuildableIface.custom_finished.custom_finished.none
#COMMENT: a #GtkBuilder
#NAME: destroy
#PARENT: Gtk.TreeSortableIface.set_default_sort_func.set_default_sort_func.none
#COMMENT: Destroy notifier of @user_data, or %NULL
#NAME: bar
#PARENT: Gtk.HeaderBar.set_title.none
#COMMENT: a #GtkHeaderBar
#NAME: get_paper_size
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
converted to a #GtkPaperSize.
#NAME: max-children-per-line
#PARENT: Gtk.FlowBox
#COMMENT: The maximum amount of children to request space for consecutively
in the given orientation.
#NAME: ntargets
#PARENT: Gtk.TargetList.add_table.none
#COMMENT: number of targets in the table
#NAME: widget
#PARENT: Gtk.WidgetClass.can_activate_accel.can_activate_accel.gboolean
#COMMENT: a #GtkWidget
#NAME: new_with_pixbuf
#PARENT: Gtk.CellView.new_with_pixbuf
#COMMENT: A newly created #GtkCellView widget.
#NAME: height
#PARENT: Gtk.CellRenderer.set_fixed_size.none
#COMMENT: the height of the cell renderer, or -1
#NAME: setting
#PARENT: Gtk.TreeView.set_headers_clickable.none
#COMMENT: %TRUE if the columns are clickable.
#NAME: get_sort_column_id
#PARENT: Gtk.TreeViewColumn.get_sort_column_id
#COMMENT: the current @sort_column_id for this column, or -1 if
              this column can’t be used for sorting.
#NAME: cell_renderer
#PARENT: Gtk.TreeViewColumn.set_attributes.none
#COMMENT: the #GtkCellRenderer we’re setting the attributes of
#NAME: box
#PARENT: Gtk.CellAreaBox.pack_end.none
#COMMENT: a #GtkCellAreaBox
#NAME: value
#PARENT: Gtk.Adjustment.new.Adjustment
#COMMENT: the initial value.
#NAME: context_id
#PARENT: Gtk.Statusbar.remove_all.none
#COMMENT: a context identifier
#NAME: column
#PARENT: Gtk.TreeModel.get_value.none
#COMMENT: the column to lookup the value at
#NAME: get_current_event
#PARENT: Gtk.get_current_event
#COMMENT: a copy of the current event, or
    %NULL if there is no current event. The returned event must be
    freed with gdk_event_free().
#NAME: data
#PARENT: Gtk.ActionGroup.set_translate_func.none
#COMMENT: data to be passed to @func and @notify
#NAME: insert
#PARENT: Gtk.ListStore
#COMMENT: Creates a new row at @position.  @iter will be changed to point to this new
row.  If @position is -1 or is larger than the number of rows on the list,
then the new row will be appended to the list. The row will be empty after
this function is called.  To fill in values, you need to call
gtk_list_store_set() or gtk_list_store_set_value().
#NAME: type
#PARENT: Gtk.WidgetPath.append_type.gint
#COMMENT: widget type to append
#NAME: widget
#PARENT: Gtk.selection_owner_set.gboolean
#COMMENT: a #GtkWidget, or %NULL.
#NAME: name
#PARENT: Gtk.LevelBar.get_offset_value.gboolean
#COMMENT: the name of an offset in the bar
#NAME: start
#PARENT: Gtk.TextBuffer.apply-tag.none
#COMMENT: the start of the range the tag is applied to
#NAME: get_use_underline
#PARENT: Gtk.Button
#COMMENT: Returns whether an embedded underline in the button label indicates a
mnemonic. See gtk_button_set_use_underline ().
#NAME: get_metrics
#PARENT: Gtk.HSV
#COMMENT: Queries the size and ring width of an HSV color selector.
#NAME: path
#PARENT: Gtk.CellView.get_size_of_row.gboolean
#COMMENT: a #GtkTreePath
#NAME: tooltip
#PARENT: Gtk.ActionEntry
#COMMENT: The tooltip for the action. This field should typically be
 marked for translation, see gtk_action_group_set_translation_domain().
#NAME: map
#PARENT: Gtk.Widget
#COMMENT: The ::map signal is emitted when @widget is going to be mapped, that is
when the widget is visible (which is controlled with
gtk_widget_set_visible()) and all its parents up to the toplevel widget
are also visible. Once the map has occurred, #GtkWidget::map-event will
be emitted.

The ::map signal can be used to determine whether a widget will be drawn,
for instance it can resume an animation that was stopped during the
emission of #GtkWidget::unmap.
#NAME: invalid_type_function
#PARENT: Gtk.BuilderError
#COMMENT: A type-func attribute didn’t name
 a function that returns a #GType.
#NAME: new
#PARENT: Gtk.Spinner
#COMMENT: Returns a new spinner widget. Not yet started.
#NAME: new_mix
#PARENT: Gtk.SymbolicColor.new_mix
#COMMENT: A newly created #GtkSymbolicColor
#NAME: visibility-notify-event
#PARENT: Gtk.Widget
#COMMENT: The ::visibility-notify-event will be emitted when the @widget's
window is obscured or unobscured.

To receive this signal the #GdkWindow associated to the widget needs
to enable the #GDK_VISIBILITY_NOTIFY_MASK mask.
#NAME: lgpl_2_1
#PARENT: Gtk.License
#COMMENT: The GNU Lesser General Public License, version 2.1 or later
#NAME: remove_window
#PARENT: Gtk.WindowGroup
#COMMENT: Removes a window from a #GtkWindowGroup.
#NAME: callback
#PARENT: Gtk.Clipboard.request_rich_text.none
#COMMENT: a function to call when the text is received,
    or the retrieval fails. (It will always be called one way or the other.)
#NAME: open-location
#PARENT: Gtk.PlacesSidebar
#COMMENT: The places sidebar emits this signal when the user selects a location
in it.  The calling application should display the contents of that
location; for example, a file manager should show a list of files in
the specified location.
#NAME: end
#PARENT: Gtk.TextIter.get_visible_text.utf8
#COMMENT: iterator at end of range
#NAME: tree_model
#PARENT: Gtk.TreeModel.get_string_from_iter.utf8
#COMMENT: a #GtkTreeModel
#NAME: width
#PARENT: Gtk.paint_shadow.none
#COMMENT: width of the rectangle
#NAME: starts_sentence
#PARENT: Gtk.TextIter.starts_sentence
#COMMENT: %TRUE if @iter is at the start of a sentence.
#NAME: is_private
#PARENT: Gtk.RecentData
#COMMENT: whether this resource should be displayed only by the
  applications that have registered it or not.
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_stock.utf8
#COMMENT: a #GtkStatusIcon
#NAME: width
#PARENT: Gtk.Window.resize_to_geometry.none
#COMMENT: width in resize increments to resize the window to
#NAME: chooser
#PARENT: Gtk.FileChooser.set_action.none
#COMMENT: a #GtkFileChooser
#NAME: cr
#PARENT: Gtk.render_slider.none
#COMMENT: a #cairo_t
#NAME: ApplicationInhibitFlags
#PARENT: Gtk
#COMMENT: Types of user actions that may be blocked by gtk_application_inhibit().
#NAME: renderer
#PARENT: Gtk.CellAreaBox.pack_start.none
#COMMENT: the #GtkCellRenderer to add
#NAME: box
#PARENT: Gtk.FlowBox.set_activate_on_single_click.none
#COMMENT: a #GtkFlowBox
#NAME: TreeModelFilterVisibleFunc
#PARENT: Gtk.TreeModelFilterVisibleFunc
#COMMENT: Whether the row indicated by @iter is visible.
#NAME: application
#PARENT: Gtk.Window
#COMMENT: The #GtkApplication associated with the window.

The application will be kept alive for at least as long as it
has any windows associated with it (see g_application_hold()
for a way to keep it alive without windows).

Normally, the connection between the application and the window
will remain until the window is destroyed, but you can explicitly
remove it by setting the ::application property to %NULL.
#NAME: group_name
#PARENT: Gtk.PrintSettings.to_key_file.none
#COMMENT: the group to add the settings to in @key_file, or
    %NULL to use the default “Print Settings”
#NAME: position
#PARENT: Gtk.TreeStore.move_after.none
#COMMENT: A #GtkTreeIter.
#NAME: add-editable
#PARENT: Gtk.CellArea
#COMMENT: Indicates that editing has started on @renderer and that @editable
should be added to the owning cell-layouting widget at @cell_area.
#NAME: size
#PARENT: Gtk.Image.get_icon_set.none
#COMMENT: location to store a stock
    icon size, or %NULL
#NAME: set_xalign
#PARENT: Gtk.Label
#COMMENT: Sets the #GtkLabel:xalign property for @label.
#NAME: bind_model
#PARENT: Gtk.ListBox
#COMMENT: Binds @model to @box.

If @box was already bound to a model, that previous binding is
destroyed.

The contents of @box are cleared and then filled with widgets that
represent items from @model. @box is updated whenever @model changes.
If @model is %NULL, @box is left empty.

It is undefined to add or remove widgets directly (for example, with
gtk_list_box_insert() or gtk_container_add()) while @box is bound to a
model.
#NAME: has-selection
#PARENT: Gtk.PrintOperation
#COMMENT: Determines whether there is a selection in your application.
This can allow your application to print the selection.
This is typically used to make a "Selection" button sensitive.
#NAME: keyval
#PARENT: Gtk.StockItem
#COMMENT: Keyboard accelerator
#NAME: released
#PARENT: Gtk.Button
#COMMENT: Emitted when the button is released.
#NAME: set_activate_on_single_click
#PARENT: Gtk.FlowBox
#COMMENT: If @single is %TRUE, children will be activated when you click
on them, otherwise you need to double-click.
#NAME: get_modifier_style
#PARENT: Gtk.Widget.get_modifier_style
#COMMENT: the modifier style for the widget.
    This rc style is owned by the widget. If you want to keep a
    pointer to value this around, you must add a refcount using
    g_object_ref().
#NAME: about
#PARENT: Gtk.AboutDialog.get_logo_icon_name.utf8
#COMMENT: a #GtkAboutDialog
#NAME: title
#PARENT: Gtk.FileChooserButton.new.Widget
#COMMENT: the title of the browse dialog.
#NAME: input-hints
#PARENT: Gtk.TextView
#COMMENT: Additional hints (beyond #GtkTextView:input-purpose) that
allow input methods to fine-tune their behaviour.
#NAME: version
#PARENT: Gtk.AboutDialog.set_version.none
#COMMENT: the version string
#NAME: gesture
#PARENT: Gtk.Gesture.get_last_event.Gdk.Event
#COMMENT: a #GtkGesture
#NAME: STYLE_CLASS_TOP
#PARENT: Gtk
#COMMENT: A CSS class to indicate an area at the top of a widget.

This is used by widgets that can render an area in different
positions, such as tabs in a #GtkNotebook.
#NAME: get_pixbuf_column
#PARENT: Gtk.IconView.get_pixbuf_column
#COMMENT: the pixbuf column, or -1 if it’s unset.
#NAME: activate-on-single-click
#PARENT: Gtk.TreeView
#COMMENT: The activate-on-single-click property specifies whether the "row-activated" signal
will be emitted after a single click.
#NAME: get_major_version
#PARENT: Gtk.get_major_version
#COMMENT: the major version number of the GTK+ library
#NAME: notebook
#PARENT: Gtk.Notebook.set_scrollable.none
#COMMENT: a #GtkNotebook
#NAME: action
#PARENT: Gtk.RadioAction.get_group.RadioAction
#COMMENT: the action object
#NAME: propagate_key_event
#PARENT: Gtk.Window
#COMMENT: Propagate a key press or release event to the focus widget and
up the focus container chain until a widget handles @event.
This is normally called by the default ::key_press_event and
::key_release_event handlers for toplevel windows,
however in some cases it may be useful to call this directly when
overriding the standard key handling for a toplevel window.
#NAME: new
#PARENT: Gtk.BindingSet
#COMMENT: GTK+ maintains a global list of binding sets. Each binding set has
a unique name which needs to be specified upon creation.
#NAME: get_center_widget
#PARENT: Gtk.Box.get_center_widget
#COMMENT: the center widget
#NAME: timestamp
#PARENT: Gtk.Window.begin_move_drag.none
#COMMENT: timestamp from the click event that initiated the drag
#NAME: fixed
#PARENT: Gtk.CellAreaBox.pack_end.none
#COMMENT: whether @renderer should have the same size in all rows
#NAME: group
#PARENT: Gtk.RadioMenuItem.new_with_mnemonic.Widget
#COMMENT: 
        group the radio menu item is inside, or %NULL
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_has_tooltip.gboolean
#COMMENT: a #GtkStatusIcon
#NAME: test_find_sibling
#PARENT: Gtk.test_find_sibling
#COMMENT: a widget of type @widget_type if any is found.
#NAME: new_from_file
#PARENT: Gtk.Image.new_from_file
#COMMENT: a new #GtkImage
#NAME: get_activatable
#PARENT: Gtk.ListBoxRow
#COMMENT: Gets the value of the #GtkListBoxRow:activatable property
for this row.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.get_fixed_width.gint
#COMMENT: A #GtkTreeViewColumn.
#NAME: row_align
#PARENT: Gtk.IconView.scroll_to_path.none
#COMMENT: The vertical alignment of the item specified by @path.
#NAME: entry
#PARENT: Gtk.Entry.get_icon_storage_type.ImageType
#COMMENT: a #GtkEntry
#NAME: prepend_text
#PARENT: Gtk.ComboBoxText
#COMMENT: Prepends @text to the list of strings stored in @combo_box.

This is the same as calling gtk_combo_box_text_insert_text() with a
position of 0.
#NAME: convert_child_path_to_path
#PARENT: Gtk.TreeModelFilter.convert_child_path_to_path
#COMMENT: A newly allocated #GtkTreePath, or %NULL.
#NAME: get_action_group
#PARENT: Gtk.Widget
#COMMENT: Retrieves the #GActionGroup that was registered using @prefix. The resulting
#GActionGroup may have been registered to @widget or any #GtkWidget in its
ancestry.

If no action group was found matching @prefix, then %NULL is returned.
#NAME: name
#PARENT: Gtk.Buildable.set_name.none
#COMMENT: name to set
#NAME: is_visible
#PARENT: Gtk.Action
#COMMENT: Returns whether the action is effectively visible.
#NAME: get_added
#PARENT: Gtk.RecentInfo.get_added
#COMMENT: the number of seconds elapsed from system’s Epoch when
  the resource was added to the list, or -1 on failure.
#NAME: src_x
#PARENT: Gtk.Widget.translate_coordinates.gboolean
#COMMENT: X position relative to @src_widget
#NAME: activate
#PARENT: Gtk.CellRenderer
#COMMENT: Passes an activate event to the cell renderer for possible processing.
Some cell renderers may use events; for example, #GtkCellRendererToggle
toggles when it gets a mouse click.
#NAME: set_pixbuf
#PARENT: Gtk.SelectionData
#COMMENT: Sets the contents of the selection from a #GdkPixbuf
The pixbuf is converted to the form determined by
@selection_data->target.
#NAME: src_y
#PARENT: Gtk.Widget.translate_coordinates.gboolean
#COMMENT: Y position relative to @src_widget
#NAME: wrap-mode
#PARENT: Gtk.Label
#COMMENT: If line wrapping is on (see the #GtkLabel:wrap property) this controls
how the line wrapping is done. The default is %PANGO_WRAP_WORD, which
means wrap on word boundaries.
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_style_property.none
#COMMENT: a #GtkThemingEngine
#NAME: get_nth_item
#PARENT: Gtk.ToolItemGroup
#COMMENT: Gets the tool item at @index in group.
#NAME: get_for_attach_widget
#PARENT: Gtk.Menu
#COMMENT: Returns a list of the menus which are attached to this widget.
This list is owned by GTK+ and must not be modified.
#NAME: ends_line
#PARENT: Gtk.TextIter
#COMMENT: Returns %TRUE if @iter points to the start of the paragraph
delimiter characters for a line (delimiters will be either a
newline, a carriage return, a carriage return followed by a
newline, or a Unicode paragraph separator character). Note that an
iterator pointing to the \n of a \r\n pair will not be counted as
the end of a line, the line ends before the \r. The end iterator is
considered to be at the end of a line, even though there are no
paragraph delimiter chars there.
#NAME: get_path
#PARENT: Gtk.ThemingEngine.get_path
#COMMENT: A #GtkWidgetPath
#NAME: open_all
#PARENT: Gtk.TreeView.expand_row.gboolean
#COMMENT: whether to recursively expand, or just expand immediate children
#NAME: widget
#PARENT: Gtk.Widget.get_display.Gdk.Display
#COMMENT: a #GtkWidget
#NAME: get_urgency_hint
#PARENT: Gtk.Window
#COMMENT: Gets the value set by gtk_window_set_urgency_hint()
#NAME: get_use_alpha
#PARENT: Gtk.ColorChooser
#COMMENT: Returns whether the color chooser shows the alpha channel.
#NAME: height
#PARENT: Gtk.CellArea.get_preferred_width_for_height.none
#COMMENT: the height for which to check the width of this area
#NAME: set_digits
#PARENT: Gtk.Scale
#COMMENT: Sets the number of decimal places that are displayed in the value.
Also causes the value of the adjustment to be rounded off to this
number of digits, so the retrieved value matches the value the user saw.
#NAME: get_action_groups
#PARENT: Gtk.UIManager
#COMMENT: Returns the list of action groups associated with @manager.
#NAME: keycode
#PARENT: Gtk.CellRendererAccel
#COMMENT: The hardware keycode of the accelerator. Note that the hardware keycode is
only relevant if the key does not have a keyval. Normally, the keyboard
configuration should assign keyvals to all keys.
#NAME: set_column_homogeneous
#PARENT: Gtk.Grid
#COMMENT: Sets whether all columns of @grid will have the same width.
#NAME: menu
#PARENT: Gtk.Menu.get_accel_group.AccelGroup
#COMMENT: a #GtkMenu
#NAME: text_view
#PARENT: Gtk.TextView.get_line_at_y.none
#COMMENT: a #GtkTextView
#NAME: style_get_property
#PARENT: Gtk.Widget
#COMMENT: Gets the value of a style property of @widget.
#NAME: connect_by_path
#PARENT: Gtk.AccelGroup
#COMMENT: Installs an accelerator in this group, using an accelerator path
to look up the appropriate key and modifiers (see
gtk_accel_map_add_entry()). When @accel_group is being activated
in response to a call to gtk_accel_groups_activate(), @closure will
be invoked if the @accel_key and @accel_mods from
gtk_accel_groups_activate() match the key and modifiers for the path.

The signature used for the @closure is that of #GtkAccelGroupActivate.

Note that @accel_path string will be stored in a #GQuark. Therefore,
if you pass a static string, you can save some memory by interning it
first with g_intern_static_string().
#NAME: new_with_label
#PARENT: Gtk.CheckButton
#COMMENT: Creates a new #GtkCheckButton with a #GtkLabel to the right of it.
#NAME: model
#PARENT: Gtk.EntryCompletion.set_model.none
#COMMENT: the #GtkTreeModel
#NAME: convert_widget_to_bin_window_coords
#PARENT: Gtk.IconView
#COMMENT: Converts widget coordinates to coordinates for the bin_window,
as expected by e.g. gtk_icon_view_get_path_at_pos().
#NAME: notebook
#PARENT: Gtk.Notebook.get_current_page.gint
#COMMENT: a #GtkNotebook
#NAME: bar
#PARENT: Gtk.SearchBar.connect_entry.none
#COMMENT: a #GtkSearchBar
#NAME: TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID
#PARENT: Gtk
#COMMENT: The GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID can be used to make a
#GtkTreeSortable use the default sort function.

See also gtk_tree_sortable_set_sort_column_id()
#NAME: height
#PARENT: Gtk.Window.set_default_geometry.none
#COMMENT: height in resize increments, or -1 to unset the default height
#NAME: xalign
#PARENT: Gtk.Entry
#COMMENT: The horizontal alignment, from 0 (left) to 1 (right).
Reversed for RTL layouts.
#NAME: get_paper_width
#PARENT: Gtk.PageSetup
#COMMENT: Returns the paper width in units of @unit.

Note that this function takes orientation, but
not margins into consideration.
See gtk_page_setup_get_page_width().
#NAME: label
#PARENT: Gtk.PrintOperation.set_custom_tab_label.none
#COMMENT: the label to use, or %NULL to use the default label
#NAME: accelerator_get_label_with_keycode
#PARENT: Gtk.accelerator_get_label_with_keycode
#COMMENT: a newly-allocated string representing the accelerator.
#NAME: renderer
#PARENT: Gtk.CellArea.get_focus_from_sibling.CellRenderer
#COMMENT: the #GtkCellRenderer
#NAME: get_minimum_key_length
#PARENT: Gtk.EntryCompletion.get_minimum_key_length
#COMMENT: The currently used minimum key length
#NAME: column
#PARENT: Gtk.ListStore.set_value.none
#COMMENT: column number to modify
#NAME: free
#PARENT: Gtk.Requisition
#COMMENT: Frees a #GtkRequisition.
#NAME: clear_cache
#PARENT: Gtk.TreeModelFilter
#COMMENT: This function should almost never be called. It clears the @filter
of any cached iterators that haven’t been reffed with
gtk_tree_model_ref_node(). This might be useful if the child model
being filtered is static (and doesn’t change often) and there has been
a lot of unreffed access to nodes. As a side effect of this function,
all unreffed iters will be invalid.
#NAME: inverted
#PARENT: Gtk.ModelButton
#COMMENT: Whether to show the submenu indicator at the opposite side than normal.
This property should be set for model buttons that 'go back' to a parent
menu.
#NAME: context
#PARENT: Gtk.render_frame_gap.none
#COMMENT: a #GtkStyleContext
#NAME: active_id
#PARENT: Gtk.ComboBox.set_active_id.gboolean
#COMMENT: the ID of the row to select, or %NULL
#NAME: size
#PARENT: Gtk.HSV.set_metrics.none
#COMMENT: Diameter for the hue ring
#NAME: ScaleButton
#PARENT: Gtk
#COMMENT: #GtkScaleButton provides a button which pops up a scale widget.
This kind of widget is commonly used for volume controls in multimedia
applications, and GTK+ provides a #GtkVolumeButton subclass that
is tailored for this use case.
#NAME: get_style
#PARENT: Gtk.Widget.get_style
#COMMENT: the widget’s #GtkStyle
#NAME: detail
#PARENT: Gtk.paint_vline.none
#COMMENT: a style detail
#NAME: select_all
#PARENT: Gtk.TreeSelection
#COMMENT: Selects all the nodes. @selection must be set to #GTK_SELECTION_MULTIPLE
mode.
#NAME: n_targets
#PARENT: Gtk.TreeView.enable_model_drag_source.none
#COMMENT: the number of items in @targets
#NAME: widget
#PARENT: Gtk.Widget.get_pango_context.Pango.Context
#COMMENT: a #GtkWidget
#NAME: alternative_dialog_button_order
#PARENT: Gtk
#COMMENT: Returns %TRUE if dialogs are expected to use an alternative
button order on the screen @screen. See
gtk_dialog_set_alternative_button_order() for more details
about alternative button order.

If you need to use this function, you should probably connect
to the ::notify:gtk-alternative-button-order signal on the
#GtkSettings object associated to @screen, in order to be
notified if the button order setting changes.
#NAME: n_chars
#PARENT: Gtk.EntryBuffer.inserted-text.none
#COMMENT: The number of characters that were inserted.
#NAME: unselect_all
#PARENT: Gtk.FlowBox
#COMMENT: Unselect all children of @box, if the selection
mode allows it.
#NAME: func
#PARENT: Gtk.ListBox.selected_foreach.none
#COMMENT: the function to call for each selected child
#NAME: entry
#PARENT: Gtk.Entry.set_visibility.none
#COMMENT: a #GtkEntry
#NAME: child
#PARENT: Gtk.Assistant.add_action_widget.none
#COMMENT: a #GtkWidget
#NAME: STOCK_DIALOG_AUTHENTICATION
#PARENT: Gtk
#COMMENT: The “Authentication” item and icon.
#NAME: stock_id
#PARENT: Gtk.MenuToolButton.new_from_stock.ToolItem
#COMMENT: the name of a stock item
#NAME: Statusbar
#PARENT: Gtk
#COMMENT: A #GtkStatusbar is usually placed along the bottom of an application's
main #GtkWindow. It may provide a regular commentary of the application's
status (as is usually the case in a web browser, for example), or may be
used to simply output a message when the status changes, (when an upload
is complete in an FTP client, for example).

Status bars in GTK+ maintain a stack of messages. The message at
the top of the each bar’s stack is the one that will currently be displayed.

Any messages added to a statusbar’s stack must specify a
context id that is used to uniquely identify
the source of a message. This context id can be generated by
gtk_statusbar_get_context_id(), given a message and the statusbar that
it will be added to. Note that messages are stored in a stack, and when
choosing which message to display, the stack structure is adhered to,
regardless of the context identifier of a message.

One could say that a statusbar maintains one stack of messages for
display purposes, but allows multiple message producers to maintain
sub-stacks of the messages they produced (via context ids).

Status bars are created using gtk_statusbar_new().

Messages are added to the bar’s stack with gtk_statusbar_push().

The message at the top of the stack can be removed using
gtk_statusbar_pop(). A message can be removed from anywhere in the
stack if its message id was recorded at the time it was added. This
is done using gtk_statusbar_remove().
#NAME: get_text_size_group
#PARENT: Gtk.ToolShellIface.get_text_size_group.get_text_size_group
#COMMENT: the current text size group of @shell
#NAME: label
#PARENT: Gtk.MenuItem.new_with_mnemonic.Widget
#COMMENT: The text of the button, with an underscore in front of the
    mnemonic character
#NAME: ToolItemGroup
#PARENT: Gtk
#COMMENT: A #GtkToolItemGroup is used together with #GtkToolPalette to add
#GtkToolItems to a palette like container with different
categories and drag and drop support.
#NAME: select_iter
#PARENT: Gtk.TreeSelection
#COMMENT: Selects the specified iterator.
#NAME: is_ancestor
#PARENT: Gtk.TreePath.is_ancestor
#COMMENT: %TRUE if @descendant is contained inside @path
#NAME: SpinType
#PARENT: Gtk
#COMMENT: The values of the GtkSpinType enumeration are used to specify the
change to make in gtk_spin_button_spin().
#NAME: cell
#PARENT: Gtk.TreeViewColumn.pack_end.none
#COMMENT: The #GtkCellRenderer.
#NAME: name
#PARENT: Gtk.icon_size_register.gint
#COMMENT: name of the icon size
#NAME: source
#PARENT: Gtk.render_icon_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: the #GtkIconSource specifying the icon to render
#NAME: size
#PARENT: Gtk.PaperSize.is_custom.gboolean
#COMMENT: a #GtkPaperSize object
#NAME: unselect_uri
#PARENT: Gtk.RecentChooser
#COMMENT: Unselects @uri inside @chooser.
#NAME: KeySnoopFunc
#PARENT: Gtk
#COMMENT: Key snooper functions are called before normal event delivery.
They can be used to implement custom key event handling.
#NAME: state
#PARENT: Gtk.ThemingEngine.state_is_running.gboolean
#COMMENT: a widget state
#NAME: action_name
#PARENT: Gtk.ActionableInterface.set_action_name.set_action_name.none
#COMMENT: an action name, or %NULL
#NAME: source
#PARENT: Gtk.IconSource.set_icon_name.none
#COMMENT: a #GtkIconSource
#NAME: get_path_at_pos
#PARENT: Gtk.TreeView
#COMMENT: Finds the path at the point (@x, @y), relative to bin_window coordinates
(please see gtk_tree_view_get_bin_window()).
That is, @x and @y are relative to an events coordinates. @x and @y must
come from an event on the @tree_view only where `event->window ==
gtk_tree_view_get_bin_window ()`. It is primarily for
things like popup menus. If @path is non-%NULL, then it will be filled
with the #GtkTreePath at that point.  This path should be freed with
gtk_tree_path_free().  If @column is non-%NULL, then it will be filled
with the column at that point.  @cell_x and @cell_y return the coordinates
relative to the cell background (i.e. the @background_area passed to
gtk_cell_renderer_render()).  This function is only meaningful if
@tree_view is realized.  Therefore this function will always return %FALSE
if @tree_view is not realized or does not have a model.

For converting widget coordinates (eg. the ones you get from
GtkWidget::query-tooltip), please see
gtk_tree_view_convert_widget_to_bin_window_coords().
#NAME: name
#PARENT: Gtk.RadioActionEntry
#COMMENT: The name of the action.
#NAME: get_area
#PARENT: Gtk.CellAreaContext
#COMMENT: Fetches the #GtkCellArea this @context was created by.

This is generally unneeded by layouting widgets; however,
it is important for the context implementation itself to
fetch information about the area it is being used for.

For instance at #GtkCellAreaContextClass.allocate() time
it’s important to know details about any cell spacing
that the #GtkCellArea is configured with in order to
compute a proper allocation.
#NAME: table
#PARENT: Gtk.TextBuffer.new.TextBuffer
#COMMENT: a tag table, or %NULL to create a new one
#NAME: set_custom
#PARENT: Gtk.Tooltip
#COMMENT: Replaces the widget packed into the tooltip with
@custom_widget. @custom_widget does not get destroyed when the tooltip goes
away.
By default a box with a #GtkImage and #GtkLabel is embedded in
the tooltip, which can be configured using gtk_tooltip_set_markup()
and gtk_tooltip_set_icon().
#NAME: tree_view
#PARENT: Gtk.TreeView.get_visible_rect.none
#COMMENT: a #GtkTreeView
#NAME: manager
#PARENT: Gtk.UIManager.remove_ui.none
#COMMENT: a #GtkUIManager object
#NAME: get_margin
#PARENT: Gtk.IconView
#COMMENT: Returns the value of the ::margin property.
#NAME: get_text_size_group
#PARENT: Gtk.ToolShell.get_text_size_group
#COMMENT: the current text size group of @shell
#NAME: tree_model
#PARENT: Gtk.TreeModel.iter_nth_child.gboolean
#COMMENT: a #GtkTreeModel
#NAME: tree_view
#PARENT: Gtk.TreeView.set_column_drag_function.none
#COMMENT: A #GtkTreeView.
#NAME: key
#PARENT: Gtk.PrintSettings.get.utf8
#COMMENT: a key
#NAME: hide-if-empty
#PARENT: Gtk.Action
#COMMENT: When TRUE, empty menu proxies for this action are hidden.
#NAME: box
#PARENT: Gtk.ListBox.select_row.none
#COMMENT: a #GtkListBox
#NAME: set_position
#PARENT: Gtk.Popover
#COMMENT: Sets the preferred position for @popover to appear. If the @popover
is currently visible, it will be immediately updated.

This preference will be respected where possible, although
on lack of space (eg. if close to the window edges), the
#GtkPopover may choose to appear on the opposite side
#NAME: base
#PARENT: Gtk.RcFlags
#COMMENT: Deprecated
#NAME: get_orientation
#PARENT: Gtk.ToolShell.get_orientation
#COMMENT: the current orientation of @shell
#NAME: iter_get_object_type
#PARENT: Gtk.WidgetPath.iter_get_object_type
#COMMENT: a widget type
#NAME: attribute_get_column
#PARENT: Gtk.CellArea.attribute_get_column
#COMMENT: the model column, or -1
#NAME: child
#PARENT: Gtk.Notebook.set_tab_detachable.none
#COMMENT: a child #GtkWidget
#NAME: get_group
#PARENT: Gtk.RadioButton
#COMMENT: Retrieves the group assigned to a radio button.
#NAME: stack
#PARENT: Gtk.Stack.get_transition_type.StackTransitionType
#COMMENT: a #GtkStack
#NAME: append_type
#PARENT: Gtk.WidgetPath
#COMMENT: Appends a widget type to the widget hierarchy represented by @path.
#NAME: step_increment
#PARENT: Gtk.Adjustment.set_step_increment.none
#COMMENT: the new step increment
#NAME: window
#PARENT: Gtk.ApplicationWindow.set_show_menubar.none
#COMMENT: a #GtkApplicationWindow
#NAME: iter
#PARENT: Gtk.TextIter.backward_line.gboolean
#COMMENT: an iterator
#NAME: new_with_entry
#PARENT: Gtk.ComboBoxText
#COMMENT: Creates a new #GtkComboBoxText, which is a #GtkComboBox just displaying
strings. The combo box created by this function has an entry.
#NAME: location
#PARENT: Gtk.TextView.get_iter_location.none
#COMMENT: bounds of the character at @iter
#NAME: x_offset
#PARENT: Gtk.TreeViewColumn.cell_get_size.none
#COMMENT: location to return x offset of a cell relative to @cell_area, or %NULL
#NAME: add_signall
#PARENT: Gtk.BindingEntry
#COMMENT: Override or install a new key binding for @keyval with @modifiers on
@binding_set.
#NAME: set_lines
#PARENT: Gtk.Label
#COMMENT: Sets the number of lines to which an ellipsized, wrapping label
should be limited. This has no effect if the label is not wrapping
or ellipsized. Set this to -1 if you don’t want to limit the
number of lines.
#NAME: path
#PARENT: Gtk.WidgetPath.iter_set_name.none
#COMMENT: a #GtkWidgetPath
#NAME: move-cursor
#PARENT: Gtk.FlowBox
#COMMENT: The ::move-cursor signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates a cursor movement.
If the cursor is not visible in @text_view, this signal causes
the viewport to be moved instead.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically.

The default bindings for this signal come in two variants,
the variant with the Shift modifier extends the selection,
the variant without the Shift modifer does not.
There are too many key combinations to list them all here.
- Arrow keys move by individual children
- Home/End keys move to the ends of the box
- PageUp/PageDown keys move vertically by pages
#NAME: user_data
#PARENT: Gtk.IconInfo.load_symbolic_for_context_async.none
#COMMENT: the data to pass to callback function
#NAME: icon
#PARENT: Gtk.IconTheme.lookup_by_gicon_for_scale.IconInfo
#COMMENT: the #GIcon to look up
#NAME: get_line_index
#PARENT: Gtk.TextIter.get_line_index
#COMMENT: distance from start of line, in bytes
#NAME: torn_off
#PARENT: Gtk.Menu.set_tearoff_state.none
#COMMENT: If %TRUE, menu is displayed as a tearoff menu.
#NAME: get_default_text
#PARENT: Gtk.AppChooserWidget
#COMMENT: Returns the text that is shown if there are not applications
that can handle the content type.
#NAME: dialog
#PARENT: Gtk.FileChooserButton
#COMMENT: Instance of the #GtkFileChooserDialog associated with the button.
#NAME: chooser
#PARENT: Gtk.RecentChooser.unselect_uri.none
#COMMENT: a #GtkRecentChooser
#NAME: count
#PARENT: Gtk.TextIter.forward_lines.gboolean
#COMMENT: number of lines to move forward
#NAME: expand
#PARENT: Gtk.Box.set_child_packing.none
#COMMENT: the new value of the expand child property
#NAME: renderer
#PARENT: Gtk.CellArea.cell_set_valist.none
#COMMENT: a #GtkCellRenderer which inside @area
#NAME: IconTheme
#PARENT: Gtk
#COMMENT: #GtkIconTheme provides a facility for looking up icons by name
and size. The main reason for using a name rather than simply
providing a filename is to allow different icons to be used
depending on what “icon theme” is selected
by the user. The operation of icon themes on Linux and Unix
follows the [Icon Theme Specification](http://www.freedesktop.org/Standards/icon-theme-spec)
There is a fallback icon theme, named `hicolor`, where applications
should install their icons, but additional icon themes can be installed
as operating system vendors and users choose.

Named icons are similar to the deprecated [Stock Items][gtkstock],
and the distinction between the two may be a bit confusing.
A few things to keep in mind:

- Stock images usually are used in conjunction with
  [Stock Items][gtkstock], such as %GTK_STOCK_OK or
  %GTK_STOCK_OPEN. Named icons are easier to set up and therefore
  are more useful for new icons that an application wants to
  add, such as application icons or window icons.

- Stock images can only be loaded at the symbolic sizes defined
  by the #GtkIconSize enumeration, or by custom sizes defined
  by gtk_icon_size_register(), while named icons are more flexible
  and any pixel size can be specified.

- Because stock images are closely tied to stock items, and thus
  to actions in the user interface, stock images may come in
  multiple variants for different widget states or writing
  directions.

A good rule of thumb is that if there is a stock image for what
you want to use, use it, otherwise use a named icon. It turns
out that internally stock images are generally defined in
terms of one or more named icons. (An example of the
more than one case is icons that depend on writing direction;
%GTK_STOCK_GO_FORWARD uses the two themed icons
“gtk-stock-go-forward-ltr” and “gtk-stock-go-forward-rtl”.)

In many cases, named themes are used indirectly, via #GtkImage
or stock items, rather than directly, but looking up icons
directly is also simple. The #GtkIconTheme object acts
as a database of all the icons in the current theme. You
can create new #GtkIconTheme objects, but it’s much more
efficient to use the standard icon theme for the #GdkScreen
so that the icon information is shared with other people
looking up icons.
|[<!-- language="C" -->
GError *error = NULL;
GtkIconTheme *icon_theme;
GdkPixbuf *pixbuf;

icon_theme = gtk_icon_theme_get_default ();
pixbuf = gtk_icon_theme_load_icon (icon_theme,
                                   "my-icon-name", // icon name
                                   48, // icon size
                                   0,  // flags
                                   &error);
if (!pixbuf)
  {
    g_warning ("Couldn’t load icon: %s", error->message);
    g_error_free (error);
  }
else
  {
    // Use the pixbuf
    g_object_unref (pixbuf);
  }
]|
#NAME: index_
#PARENT: Gtk.TreePath.append_index.none
#COMMENT: the index
#NAME: entry
#PARENT: Gtk.Entry.set_text.none
#COMMENT: a #GtkEntry
#NAME: color
#PARENT: Gtk.ColorSelection.get_current_color.none
#COMMENT: a #GdkColor to fill in with the current color
#NAME: label
#PARENT: Gtk.Label.get_track_visited_links.gboolean
#COMMENT: a #GtkLabel
#NAME: iter
#PARENT: Gtk.TextIter.forward_char.gboolean
#COMMENT: an iterator
#NAME: load_from_data
#PARENT: Gtk.CssProvider
#COMMENT: Loads @data into @css_provider, making it clear any previously loaded
information.
#NAME: accelerator
#PARENT: Gtk.ActionEntry
#COMMENT: The accelerator for the action, in the format understood by
 gtk_accelerator_parse().
#NAME: aclass
#PARENT: Gtk.CellAreaClass.find_cell_property.GObject.ParamSpec
#COMMENT: a #GtkCellAreaClass
#NAME: get_state
#PARENT: Gtk.ThemingEngine.get_state
#COMMENT: the state flags
#NAME: data
#PARENT: Gtk.TreeView.set_search_position_func.none
#COMMENT: user data to pass to @func, or %NULL
#NAME: get_cairo_context
#PARENT: Gtk.PrintContext
#COMMENT: Obtains the cairo context that is associated with the
#GtkPrintContext.
#NAME: custom_window
#PARENT: Gtk.Widget.set_tooltip_window.none
#COMMENT: a #GtkWindow, or %NULL
#NAME: get_direction
#PARENT: Gtk.IconSource
#COMMENT: Obtains the text direction this icon source applies to. The return
value is only useful/meaningful if the text direction is not
wildcarded.
#NAME: func
#PARENT: Gtk.TreeView.set_row_separator_func.none
#COMMENT: a #GtkTreeViewRowSeparatorFunc
#NAME: filename
#PARENT: Gtk.Window.set_default_icon_from_file.gboolean
#COMMENT: location of icon file
#NAME: background_area
#PARENT: Gtk.CellAreaClass.render.render.none
#COMMENT: the @widget relative coordinates for @area’s background
#NAME: insert_row
#PARENT: Gtk.Grid
#COMMENT: Inserts a row at the specified position.

Children which are attached at or below this position
are moved one row down. Children which span across this
position are grown to span the new row.
#NAME: cell-area
#PARENT: Gtk.TreeViewColumn
#COMMENT: The #GtkCellArea used to layout cell renderers for this column.

If no area is specified when creating the tree view column with gtk_tree_view_column_new_with_area()
a horizontally oriented #GtkCellAreaBox will be used.
#NAME: text
#PARENT: Gtk.CellRendererProgress
#COMMENT: The "text" property determines the label which will be drawn
over the progress bar. Setting this property to %NULL causes the default
label to be displayed. Setting this property to an empty string causes
no label to be displayed.
#NAME: icon_size_get_name
#PARENT: Gtk
#COMMENT: Gets the canonical name of the given icon size. The returned string
is statically allocated and should not be freed.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_set_state.none
#COMMENT: position to modify, -1 for the path head
#NAME: box
#PARENT: Gtk.ListBox.invalidate_filter.none
#COMMENT: a #GtkListBox
#NAME: max-position
#PARENT: Gtk.Paned
#COMMENT: The largest possible value for the position property.
This property is derived from the size and shrinkability
of the widget's children.
#NAME: setting
#PARENT: Gtk.TextView.set_editable.none
#COMMENT: whether it’s editable
#NAME: self
#PARENT: Gtk.AppChooserDialog.set_heading.none
#COMMENT: a #GtkAppChooserDialog
#NAME: set_accel_widget
#PARENT: Gtk.AccelLabel
#COMMENT: Sets the widget to be monitored by this accelerator label.
#NAME: get_is_important
#PARENT: Gtk.Action.get_is_important
#COMMENT: whether @action is important
#NAME: add_shortcut
#PARENT: Gtk.PlacesSidebar
#COMMENT: Applications may want to present some folders in the places sidebar if
they could be immediately useful to users.  For example, a drawing
program could add a “/usr/share/clipart” location when the sidebar is
being used in an “Insert Clipart” dialog box.

This function adds the specified @location to a special place for immutable
shortcuts.  The shortcuts are application-specific; they are not shared
across applications, and they are not persistent.  If this function
is called multiple times with different locations, then they are added
to the sidebar’s list in the same order as the function is called.
#NAME: mode
#PARENT: Gtk.SizeGroup.set_mode.none
#COMMENT: the mode to set for the size group.
#NAME: window
#PARENT: Gtk.Window.get_opacity.gdouble
#COMMENT: a #GtkWindow
#NAME: copy
#PARENT: Gtk.TextAttributes
#COMMENT: Copies @src and returns a new #GtkTextAttributes.
#NAME: from_name
#PARENT: Gtk.IconSize.from_name
#COMMENT: the icon size
#NAME: entry
#PARENT: Gtk.Entry.get_alignment.gfloat
#COMMENT: a #GtkEntry
#NAME: hsv
#PARENT: Gtk.HSV.set_metrics.none
#COMMENT: An HSV color selector
#NAME: socket_id
#PARENT: Gtk.Plug.new.Widget
#COMMENT: the window ID of the socket, or 0.
#NAME: append
#PARENT: Gtk.ComboBoxText
#COMMENT: Appends @text to the list of strings stored in @combo_box.
If @id is non-%NULL then it is used as the ID of the row.

This is the same as calling gtk_combo_box_text_insert() with a
position of -1.
#NAME: area
#PARENT: Gtk.CellAreaClass.create_context.create_context.CellAreaContext
#COMMENT: a #GtkCellArea
#NAME: activate-link
#PARENT: Gtk.Label
#COMMENT: The signal which gets emitted to activate a URI.
Applications may connect to it to override the default behaviour,
which is to call gtk_show_uri().
#NAME: iter
#PARENT: Gtk.TreeModel.iter_n_children.gint
#COMMENT: the #GtkTreeIter-struct, or %NULL
#NAME: FontButton
#PARENT: Gtk
#COMMENT: The #GtkFontButton is a button which displays the currently selected
font an allows to open a font chooser dialog to change the font.
It is suitable widget for selecting a font in a preference dialog.
#NAME: destroy
#PARENT: Gtk.CellLayoutIface.set_cell_data_func.set_cell_data_func.none
#COMMENT: destroy notify for @func_data
#NAME: child-pack-direction
#PARENT: Gtk.MenuBar
#COMMENT: The child pack direction of the menubar. It determines how
the widgets contained in child menuitems are arranged.
#NAME: action_namespace
#PARENT: Gtk.MenuShell.bind_model.none
#COMMENT: the namespace for actions in @model
#NAME: show-connect-to-server
#PARENT: Gtk.PlacesSidebar
#COMMENT: The places sidebar emits this signal when it needs the calling
application to present an way to connect directly to a network server.
For example, the application may bring up a dialog box asking for
a URL like "sftp://ftp.example.com".  It is up to the application to create
the corresponding mount by using, for example, g_file_mount_enclosing_volume().
#NAME: window
#PARENT: Gtk.WindowClass.set_focus.set_focus.none
#COMMENT: a #GtkWindow
#NAME: get_preview_entry
#PARENT: Gtk.FontSelection
#COMMENT: This returns the #GtkEntry used to display the font as a preview.
#NAME: settings
#PARENT: Gtk.IconSize.lookup_for_settings.gboolean
#COMMENT: a #GtkSettings object, used to determine
  which set of user preferences to used.
#NAME: size
#PARENT: Gtk.Image.new_from_gicon.Widget
#COMMENT: a stock icon size
#NAME: reposition
#PARENT: Gtk.Menu
#COMMENT: Repositions the menu according to its position function.
#NAME: widget
#PARENT: Gtk.Widget.get_preferred_size.none
#COMMENT: a #GtkWidget instance
#NAME: baseline
#PARENT: Gtk.Align
#COMMENT: align the widget according to the baseline. Since 3.10.
#NAME: action
#PARENT: Gtk.ActionClass.activate.activate.none
#COMMENT: the action object
#NAME: get_name
#PARENT: Gtk.Buildable
#COMMENT: Gets the name of the @buildable object.

#GtkBuilder sets the name based on the
[GtkBuilder UI definition][BUILDER-UI]
used to construct the @buildable.
#NAME: none
#PARENT: Gtk.StackTransitionType
#COMMENT: No transition
#NAME: test_find_label
#PARENT: Gtk.test_find_label
#COMMENT: a GtkLabel widget if any is found.
#NAME: get_plug_window
#PARENT: Gtk.Socket
#COMMENT: Retrieves the window of the plug. Use this to check if the plug has
been created inside of the socket.
#NAME: width
#PARENT: Gtk.Widget.queue_draw_area.none
#COMMENT: width of region to draw
#NAME: icon_info
#PARENT: Gtk.IconInfo.load_symbolic_for_style.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconInfo
#NAME: parent_class
#PARENT: Gtk.ImageMenuItemClass
#COMMENT: The parent class.
#NAME: gtk-keynav-cursor-only
#PARENT: Gtk.Settings
#COMMENT: When %TRUE, keyboard navigation should be able to reach all widgets
by using the cursor keys only. Tab, Shift etc. keys can't be expected
to be present on the used input device.
#NAME: active
#PARENT: Gtk.Switch
#COMMENT: Whether the #GtkSwitch widget is in its on or off state.
#NAME: count
#PARENT: Gtk.TextView.delete-from-cursor.none
#COMMENT: the number of @type units to delete
#NAME: minimum_height
#PARENT: Gtk.Widget.get_preferred_height.none
#COMMENT: location to store the minimum height, or %NULL
#NAME: context
#PARENT: Gtk.IMContextClass.focus_in.focus_in.none
#COMMENT: a #GtkIMContext
#NAME: count
#PARENT: Gtk.IconView.move-cursor.gboolean
#COMMENT: the number of @step units to move
#NAME: toggles_tag
#PARENT: Gtk.TextIter
#COMMENT: This is equivalent to (gtk_text_iter_begins_tag() ||
gtk_text_iter_ends_tag()), i.e. it tells you whether a range with
@tag applied to it begins or ends at @iter.
#NAME: set_direction
#PARENT: Gtk.Widget
#COMMENT: Sets the reading direction on a particular widget. This direction
controls the primary direction for widgets containing text,
and also the direction in which the children of a container are
packed. The ability to set the direction is present in order
so that correct localization into languages with right-to-left
reading directions can be done. Generally, applications will
let the default reading direction present, except for containers
where the containers are arranged in an order that is explicitly
visual rather than logical (such as buttons for text justification).

If the direction is set to %GTK_TEXT_DIR_NONE, then the value
set by gtk_widget_set_default_direction() will be used.
#NAME: base_widget
#PARENT: Gtk.test_find_sibling.Widget
#COMMENT: Valid widget, part of a widget hierarchy
#NAME: adjustment
#PARENT: Gtk.Adjustment.configure.none
#COMMENT: a #GtkAdjustment
#NAME: screen
#PARENT: Gtk.IconTheme.set_screen.none
#COMMENT: a #GdkScreen
#NAME: multiple
#PARENT: Gtk.SelectionMode
#COMMENT: Any number of elements may be selected.
     The Ctrl key may be used to enlarge the selection, and Shift
     key to select between the focus and the child pointed to.
     Some widgets may also allow Click-drag to select a range of elements.
#NAME: set_valign
#PARENT: Gtk.Widget
#COMMENT: Sets the vertical alignment of @widget.
See the #GtkWidget:valign property.
#NAME: state
#PARENT: Gtk.ThemingEngine.get_border.none
#COMMENT: state to retrieve the border for
#NAME: get_headers_visible
#PARENT: Gtk.TreeView.get_headers_visible
#COMMENT: Whether the headers are visible or not.
#NAME: aligned_area
#PARENT: Gtk.CellRendererClass.get_aligned_area.get_aligned_area.none
#COMMENT: the return location for the space inside @cell_area
               that would acually be used to render.
#NAME: scrollable
#PARENT: Gtk.Scrollable.set_hscroll_policy.none
#COMMENT: a #GtkScrollable
#NAME: fixed_width
#PARENT: Gtk.TreeViewColumn.set_fixed_width.none
#COMMENT: The new fixed width, in pixels, or -1.
#NAME: get_selected_item
#PARENT: Gtk.MenuShell.get_selected_item
#COMMENT: the currently selected item
#NAME: get_format
#PARENT: Gtk.SelectionData.get_format
#COMMENT: the format of the selection.
#NAME: set_visible_window
#PARENT: Gtk.EventBox
#COMMENT: Set whether the event box uses a visible or invisible child
window. The default is to use visible windows.

In an invisible window event box, the window that the
event box creates is a %GDK_INPUT_ONLY window, which
means that it is invisible and only serves to receive
events.

A visible window event box creates a visible (%GDK_INPUT_OUTPUT)
window that acts as the parent window for all the widgets
contained in the event box.

You should generally make your event box invisible if
you just want to trap events. Creating a visible window
may cause artifacts that are visible to the user, especially
if the user is using a theme with gradients or pixmaps.

The main reason to create a non input-only event box is if
you want to set the background to a different color or
draw on it.

There is one unexpected issue for an invisible event box that has its
window below the child. (See gtk_event_box_set_above_child().)
Since the input-only window is not an ancestor window of any windows
that descendent widgets of the event box create, events on these
windows aren’t propagated up by the windowing system, but only by GTK+.
The practical effect of this is if an event isn’t in the event
mask for the descendant window (see gtk_widget_add_events()),
it won’t be received by the event box.

This problem doesn’t occur for visible event boxes, because in
that case, the event box window is actually the ancestor of the
descendant windows, not just at the same place on the screen.
#NAME: entry
#PARENT: Gtk.Entry.set_icon_from_icon_name.none
#COMMENT: A #GtkEntry
#NAME: cell_layout
#PARENT: Gtk.CellLayout.set_cell_data_func.none
#COMMENT: a #GtkCellLayout
#NAME: get_page_header_image
#PARENT: Gtk.Assistant
#COMMENT: Gets the header image for @page.
#NAME: get_stack
#PARENT: Gtk.StackSwitcher
#COMMENT: Retrieves the stack.
See gtk_stack_switcher_set_stack().
#NAME: proxy
#PARENT: Gtk.TreeRowReference.inserted.none
#COMMENT: a #GObject
#NAME: widget
#PARENT: Gtk.Widget.set_can_default.none
#COMMENT: a #GtkWidget
#NAME: ok
#PARENT: Gtk.ButtonsType
#COMMENT: an OK button
#NAME: new
#PARENT: Gtk.Socket.new
#COMMENT: the new #GtkSocket.
#NAME: backspace
#PARENT: Gtk.TextBuffer
#COMMENT: Performs the appropriate action as if the user hit the delete
key with the cursor at the position specified by @iter. In the
normal case a single character will be deleted, but when
combining accents are involved, more than one character can
be deleted, and when precomposed character and accent combinations
are involved, less than one character will be deleted.

Because the buffer is modified, all outstanding iterators become
invalid after calling this function; however, the @iter will be
re-initialized to point to the location where text was deleted.
#NAME: unselect_range
#PARENT: Gtk.TreeSelection
#COMMENT: Unselects a range of nodes, determined by @start_path and @end_path
inclusive.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_grid_lines.TreeViewGridLines
#COMMENT: a #GtkTreeView
#NAME: nothing
#PARENT: Gtk.IMPreeditStyle
#COMMENT: Deprecated
#NAME: iter
#PARENT: Gtk.TreeSelectionForeachFunc.none
#COMMENT: A #GtkTreeIter pointing to a selected row
#NAME: area
#PARENT: Gtk.CellArea.copy_context.CellAreaContext
#COMMENT: a #GtkCellArea
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_toolbar_style.ToolbarStyle
#COMMENT: a #GtkToolItem
#NAME: set_visible_func
#PARENT: Gtk.TreeModelFilter
#COMMENT: Sets the visible function used when filtering the @filter to be @func.
The function should return %TRUE if the given row should be visible and
%FALSE otherwise.

If the condition calculated by the function changes over time (e.g.
because it depends on some global parameters), you must call
gtk_tree_model_filter_refilter() to keep the visibility information
of the model up-to-date.

Note that @func is called whenever a row is inserted, when it may still
be empty. The visible function should therefore take special care of empty
rows, like in the example below.

|[<!-- language="C" -->
static gboolean
visible_func (GtkTreeModel *model,
              GtkTreeIter  *iter,
              gpointer      data)
{
  // Visible if row is non-empty and first column is “HI”
  gchar *str;
  gboolean visible = FALSE;

  gtk_tree_model_get (model, iter, 0, &str, -1);
  if (str && strcmp (str, "HI") == 0)
    visible = TRUE;
  g_free (str);

  return visible;
}
]|

Note that gtk_tree_model_filter_set_visible_func() or
gtk_tree_model_filter_set_visible_column() can only be called
once for a given filter model.
#NAME: pan
#PARENT: Gtk.GesturePan
#COMMENT: This signal is emitted once a panning gesture along the
expected axis is detected.
#NAME: set_accel_group
#PARENT: Gtk.Menu
#COMMENT: Set the #GtkAccelGroup which holds global accelerators for the
menu.  This accelerator group needs to also be added to all windows
that this menu is being used in with gtk_window_add_accel_group(),
in order for those windows to support all the accelerators
contained in this group.
#NAME: left_attach
#PARENT: Gtk.Table.attach_defaults.none
#COMMENT: The column number to attach the left side of the child widget to.
#NAME: new_with_mnemonic_from_widget
#PARENT: Gtk.RadioButton
#COMMENT: Creates a new #GtkRadioButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the button.
#NAME: entry
#PARENT: Gtk.Entry.get_max_width_chars.gint
#COMMENT: a #GtkEntry
#NAME: type
#PARENT: Gtk.TextView.set_border_window_size.none
#COMMENT: window to affect
#NAME: tree_view
#PARENT: Gtk.TreeView.get_headers_visible.gboolean
#COMMENT: A #GtkTreeView.
#NAME: combo_box
#PARENT: Gtk.ComboBoxText.remove_all.none
#COMMENT: A #GtkComboBoxText
#NAME: setup
#PARENT: Gtk.PageSetup.get_left_margin.gdouble
#COMMENT: a #GtkPageSetup
#NAME: group
#PARENT: Gtk.RadioMenuItem.new_from_widget.Widget
#COMMENT: An existing #GtkRadioMenuItem
#NAME: data
#PARENT: Gtk.TreeSelectionForeachFunc.none
#COMMENT: user data
#NAME: drag_dest_find_target
#PARENT: Gtk.Widget
#COMMENT: Looks for a match between the supported targets of @context and the
@dest_target_list, returning the first matching target, otherwise
returning %GDK_NONE. @dest_target_list should usually be the return
value from gtk_drag_dest_get_target_list(), but some widgets may
have different valid targets for different parts of the widget; in
that case, they will have to implement a drag_motion handler that
passes the correct target list to this function.
#NAME: keyval
#PARENT: Gtk.Window.remove_mnemonic.none
#COMMENT: the mnemonic
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_row_separator_func.none
#COMMENT: a #GtkComboBox
#NAME: cell
#PARENT: Gtk.CellRenderer.set_fixed_size.none
#COMMENT: A #GtkCellRenderer
#NAME: parent_class
#PARENT: Gtk.RevealerClass
#COMMENT: The parent class.
#NAME: get_shadow_type
#PARENT: Gtk.ScrolledWindow.get_shadow_type
#COMMENT: the current shadow type
#NAME: buffer
#PARENT: Gtk.TextBuffer.remove_selection_clipboard.none
#COMMENT: a #GtkTextBuffer
#NAME: fontsel
#PARENT: Gtk.FontSelection.get_face.Pango.FontFace
#COMMENT: a #GtkFontSelection
#NAME: new_from_icon_name
#PARENT: Gtk.Image
#COMMENT: Creates a #GtkImage displaying an icon from the current icon theme.
If the icon name isn’t known, a “broken image” icon will be
displayed instead.  If the current icon theme is changed, the icon
will be updated appropriately.
#NAME: get_background_gicon
#PARENT: Gtk.NumerableIcon
#COMMENT: Returns the #GIcon that was set as the base background image, or
%NULL if there’s none. The caller of this function does not own
a reference to the returned #GIcon.
#NAME: radio_group_member
#PARENT: Gtk.RadioButton.new_from_widget.Widget
#COMMENT: an existing #GtkRadioButton.
#NAME: iter
#PARENT: Gtk.TreeModelIface.iter_nth_child.iter_nth_child.gboolean
#COMMENT: the #GtkTreeIter-struct to set to the nth child
#NAME: offset_x
#PARENT: Gtk.GestureDrag.drag-update.none
#COMMENT: X offset, relative to the start point
#NAME: object_type_refused
#PARENT: Gtk.BuilderError
#COMMENT: A specified object type is of the same type or
 derived from the type of the composite class being extended with builder XML.
#NAME: get_content_area
#PARENT: Gtk.InfoBar.get_content_area
#COMMENT: the content area
#NAME: icon_size
#PARENT: Gtk.ToolPalette.set_icon_size.none
#COMMENT: the #GtkIconSize that icons in the tool
    palette shall have
#NAME: iter_add_class
#PARENT: Gtk.WidgetPath
#COMMENT: Adds the class @name to the widget at position @pos in
the hierarchy defined in @path. See
gtk_style_context_add_class().
#NAME: offset_y
#PARENT: Gtk.GestureDrag.drag-update.none
#COMMENT: Y offset, relative to the start point
#NAME: application
#PARENT: Gtk.Application.uninhibit.none
#COMMENT: the #GtkApplication
#NAME: get_use_underline
#PARENT: Gtk.Expander.get_use_underline
#COMMENT: %TRUE if an embedded underline in the expander
    label indicates the mnemonic accelerator keys
#NAME: item
#PARENT: Gtk.StockItem.free.none
#COMMENT: a #GtkStockItem
#NAME: event
#PARENT: Gtk.WidgetClass.event.event.gboolean
#COMMENT: a #GdkEvent
#NAME: accelerator_mods
#PARENT: Gtk.accelerator_parse.none
#COMMENT: return location for accelerator
    modifier mask, %NULL
#NAME: get_height
#PARENT: Gtk.PrintContext.get_height
#COMMENT: the height of @context
#NAME: set_screen
#PARENT: Gtk.StyleContext
#COMMENT: Attaches @context to the given screen.

The screen is used to add style information from “global” style
providers, such as the screens #GtkSettings instance.

If you are using a #GtkStyleContext returned from
gtk_widget_get_style_context(), you do not need to
call this yourself.
#NAME: get_accel_group
#PARENT: Gtk.ActionGroup.get_accel_group
#COMMENT: the accelerator group associated with this action
group or %NULL if there is none.
#NAME: renderer
#PARENT: Gtk.CellArea.has_renderer.gboolean
#COMMENT: the #GtkCellRenderer to check
#NAME: widget
#PARENT: Gtk.CellAreaClass.activate.activate.gboolean
#COMMENT: the #GtkWidget that @area is rendering on
#NAME: model
#PARENT: Gtk.IconView.new_with_model.Widget
#COMMENT: The model.
#NAME: get_nth_page
#PARENT: Gtk.Notebook
#COMMENT: Returns the child widget contained in page number @page_num.
#NAME: STYLE_CLASS_SPINNER
#PARENT: Gtk
#COMMENT: A CSS class to use when rendering activity as a “spinner”.

This is used by #GtkSpinner and #GtkCellRendererSpinner.
#NAME: box
#PARENT: Gtk.FlowBoxForeachFunc.none
#COMMENT: a #GtkFlowBox
#NAME: icon_theme
#PARENT: Gtk.IconTheme.prepend_search_path.none
#COMMENT: a #GtkIconTheme
#NAME: new_from_stock
#PARENT: Gtk.Image
#COMMENT: Creates a #GtkImage displaying a stock icon. Sample stock icon
names are #GTK_STOCK_OPEN, #GTK_STOCK_QUIT. Sample stock sizes
are #GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. If the stock
icon name isn’t known, the image will be empty.
You can register your own stock icon names, see
gtk_icon_factory_add_default() and gtk_icon_factory_add().
#NAME: descendant
#PARENT: Gtk.TreeStore.is_ancestor.gboolean
#COMMENT: A valid #GtkTreeIter
#NAME: stock_set_translate_func
#PARENT: Gtk
#COMMENT: Sets a function to be used for translating the @label of
a stock item.

If no function is registered for a translation domain,
g_dgettext() is used.

The function is used for all stock items whose
@translation_domain matches @domain. Note that it is possible
to use strings different from the actual gettext translation domain
of your application for this, as long as your #GtkTranslateFunc uses
the correct domain when calling dgettext(). This can be useful, e.g.
when dealing with message contexts:

|[<!-- language="C" -->
GtkStockItem items[] = {
 { MY_ITEM1, NC_("odd items", "Item 1"), 0, 0, "odd-item-domain" },
 { MY_ITEM2, NC_("even items", "Item 2"), 0, 0, "even-item-domain" },
};

gchar *
my_translate_func (const gchar *msgid,
                   gpointer     data)
{
  gchar *msgctxt = data;

  return (gchar*)g_dpgettext2 (GETTEXT_PACKAGE, msgctxt, msgid);
}

...

gtk_stock_add (items, G_N_ELEMENTS (items));
gtk_stock_set_translate_func ("odd-item-domain", my_translate_func, "odd items");
gtk_stock_set_translate_func ("even-item-domain", my_translate_func, "even items");
]|
#NAME: select_folder
#PARENT: Gtk.FileChooserAction
#COMMENT: Indicates an Open mode for
 selecting folders.  The file chooser will let the user pick an
 existing folder.
#NAME: index_
#PARENT: Gtk.ComboBox.set_active.none
#COMMENT: An index in the model passed during construction, or -1 to have
no active item
#NAME: toolbar
#PARENT: Gtk.Toolbar.get_nth_item.ToolItem
#COMMENT: a #GtkToolbar
#NAME: value
#PARENT: Gtk.LevelBar.get_offset_value.gboolean
#COMMENT: location where to store the value
#NAME: menu_item
#PARENT: Gtk.MenuShell.select_item.none
#COMMENT: The #GtkMenuItem to select
#NAME: mnemonic_activate
#PARENT: Gtk.Widget
#COMMENT: Emits the #GtkWidget::mnemonic-activate signal.

The default handler for this signal activates the @widget if
@group_cycling is %FALSE, and just grabs the focus if @group_cycling
is %TRUE.
#NAME: attribute
#PARENT: Gtk.CellArea.attribute_get_column.gint
#COMMENT: an attribute on the renderer
#NAME: targets
#PARENT: Gtk.TargetList.add_table.none
#COMMENT: the table of #GtkTargetEntry
#NAME: list
#PARENT: Gtk.TargetList.remove.none
#COMMENT: a #GtkTargetList
#NAME: get_hexpand_set
#PARENT: Gtk.Widget
#COMMENT: Gets whether gtk_widget_set_hexpand() has been used to
explicitly set the expand flag on this widget.

If hexpand is set, then it overrides any computed
expand value based on child widgets. If hexpand is not
set, then the expand value depends on whether any
children of the widget would like to expand.

There are few reasons to use this function, but it’s here
for completeness and consistency.
#NAME: get_show_fallback
#PARENT: Gtk.AppChooserWidget
#COMMENT: Returns the current value of the #GtkAppChooserWidget:show-fallback
property.
#NAME: left_gravity
#PARENT: Gtk.TextBuffer.create_mark.TextMark
#COMMENT: whether the mark has left gravity
#NAME: self
#PARENT: Gtk.AppChooserButton.append_separator.none
#COMMENT: a #GtkAppChooserButton
#NAME: set_active
#PARENT: Gtk.ToggleToolButton
#COMMENT: Sets the status of the toggle tool button. Set to %TRUE if you
want the GtkToggleButton to be “pressed in”, and %FALSE to raise it.
This action causes the toggled signal to be emitted.
#NAME: line
#PARENT: Gtk.ToolbarSpaceStyle
#COMMENT: Use vertical lines for spacers.
#NAME: get_action
#PARENT: Gtk.UIManagerClass.get_action.get_action
#COMMENT: the action whose proxy widget is found by following the path,
    or %NULL if no widget was found.
#NAME: get_parent
#PARENT: Gtk.MountOperation.get_parent
#COMMENT: the transient parent for windows shown by @op
#NAME: new
#PARENT: Gtk.VolumeButton
#COMMENT: Creates a #GtkVolumeButton, with a range between 0.0 and 1.0, with
a stepping of 0.02. Volume values can be obtained and modified using
the functions from #GtkScaleButton.
#NAME: cell_area
#PARENT: Gtk.CellRenderer.get_size.none
#COMMENT: The area a cell will be allocated, or %NULL
#NAME: create-context
#PARENT: Gtk.GLArea
#COMMENT: The ::create-context signal is emitted when the widget is being
realized, and allows you to override how the GL context is
created. This is useful when you want to reuse an existing GL
context, or if you want to try creating different kinds of GL
options.

If context creation fails then the signal handler can use
gtk_gl_area_set_error() to register a more detailed error
of how the construction failed.
#NAME: top_attach
#PARENT: Gtk.Menu.attach.none
#COMMENT: The row number to attach the top of the item to
#NAME: copy
#PARENT: Gtk.TextIter
#COMMENT: Creates a dynamically-allocated copy of an iterator. This function
is not useful in applications, because iterators can be copied with a
simple assignment (`GtkTextIter i = j;`). The
function is used by language bindings.
#NAME: area
#PARENT: Gtk.CellArea.remove.none
#COMMENT: a #GtkCellArea
#NAME: actions
#PARENT: Gtk.Widget.drag_begin.Gdk.DragContext
#COMMENT: A bitmask of the allowed drag actions for this drag
#NAME: enter-notify-event
#PARENT: Gtk.Widget.enter-notify-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: get_baseline_position
#PARENT: Gtk.Box.get_baseline_position
#COMMENT: the baseline position
#NAME: setup
#PARENT: Gtk.PageSetup.get_orientation.PageOrientation
#COMMENT: a #GtkPageSetup
#NAME: context
#PARENT: Gtk.IMMulticontext.set_context_id.none
#COMMENT: a #GtkIMMulticontext
#NAME: n_chars
#PARENT: Gtk.Entry.set_width_chars.none
#COMMENT: width in chars
#NAME: builder
#PARENT: Gtk.BuildableIface.custom_tag_start.custom_tag_start.gboolean
#COMMENT: a #GtkBuilder used to construct this object
#NAME: get_chars_in_line
#PARENT: Gtk.TextIter.get_chars_in_line
#COMMENT: number of characters in the line
#NAME: toggle-overwrite
#PARENT: Gtk.TextView
#COMMENT: The ::toggle-overwrite signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to toggle the overwrite mode of the text view.

The default bindings for this signal is Insert.
#NAME: gesture
#PARENT: Gtk.Gesture.group.none
#COMMENT: a #GtkGesture
#NAME: button
#PARENT: Gtk.FileChooserButton.get_width_chars.gint
#COMMENT: the button widget to examine.
#NAME: TearoffMenuItem
#PARENT: Gtk
#COMMENT: A #GtkTearoffMenuItem is a special #GtkMenuItem which is used to
tear off and reattach its menu.

When its menu is shown normally, the #GtkTearoffMenuItem is drawn as a
dotted line indicating that the menu can be torn off.  Activating it
causes its menu to be torn off and displayed in its own window
as a tearoff menu.

When its menu is shown as a tearoff menu, the #GtkTearoffMenuItem is drawn
as a dotted line which has a left pointing arrow graphic indicating that
the tearoff menu can be reattached.  Activating it will erase the tearoff
menu window.

> #GtkTearoffMenuItem is deprecated and should not be used in newly
> written code. Menus are not meant to be torn around.
#NAME: widget
#PARENT: Gtk.Widget.set_no_show_all.none
#COMMENT: a #GtkWidget
#NAME: finished_aborted
#PARENT: Gtk.PrintStatus
#COMMENT: The printing has been aborted.
#NAME: style
#PARENT: Gtk.paint_expander.none
#COMMENT: a #GtkStyle
#NAME: all
#PARENT: Gtk.PageSet
#COMMENT: All pages.
#NAME: chooser
#PARENT: Gtk.RecentChooserIface.add_filter.add_filter.none
#COMMENT: a #GtkRecentChooser
#NAME: get_row_spacing
#PARENT: Gtk.FlowBox
#COMMENT: Gets the vertical spacing.
#NAME: accel_group
#PARENT: Gtk.AccelGroup.activate.gboolean
#COMMENT: a #GtkAccelGroup
#NAME: get_min_slider_size
#PARENT: Gtk.Range
#COMMENT: This function is useful mainly for #GtkRange subclasses.

See gtk_range_set_min_slider_size().
#NAME: first_property_name
#PARENT: Gtk.Style.get.none
#COMMENT: the name of the first style property to get
#NAME: set_focus_on_click
#PARENT: Gtk.ComboBox
#COMMENT: Sets whether the combo box will grab focus when it is clicked with
the mouse. Making mouse clicks not grab focus is useful in places
like toolbars where you don’t want the keyboard focus removed from
the main area of the application.
#NAME: area
#PARENT: Gtk.CellAreaClass.foreach.foreach.none
#COMMENT: a #GtkCellArea
#NAME: self
#PARENT: Gtk.LevelBar.set_value.none
#COMMENT: a #GtkLevelBar
#NAME: parent_class
#PARENT: Gtk.LockButtonClass
#COMMENT: The parent class.
#NAME: get_style_valist
#PARENT: Gtk.ThemingEngine
#COMMENT: Retrieves several widget style properties from @engine according to the
currently rendered content’s style.
#NAME: get_relief_style
#PARENT: Gtk.ToolShell
#COMMENT: Returns the relief style of buttons on @shell. Tool items must not call this
function directly, but rely on gtk_tool_item_get_relief_style() instead.
#NAME: font_button
#PARENT: Gtk.FontButton.set_use_size.none
#COMMENT: a #GtkFontButton
#NAME: end
#PARENT: Gtk.ScrollType
#COMMENT: Scroll to end.
#NAME: gtk-fallback-icon-theme
#PARENT: Gtk.Settings
#COMMENT: Name of a icon theme to fall back to.
#NAME: new_window
#PARENT: Gtk.PlacesOpenFlags
#COMMENT: Similar to @GTK_PLACES_OPEN_NEW_TAB, but indicates that the application
 can open folders in new windows.
#NAME: origin
#PARENT: Gtk.RcProperty
#COMMENT: field similar to one found in #GtkSettingsValue
#NAME: widget_type
#PARENT: Gtk.Style.get.none
#COMMENT: the #GType of a descendant of #GtkWidget
#NAME: types
#PARENT: Gtk.TreeModelFilter.set_modify_func.none
#COMMENT: The #GTypes of the columns.
#NAME: connect_data_destroy
#PARENT: Gtk.WidgetClass.set_connect_func.none
#COMMENT: The #GDestroyNotify to free @connect_data, this will only be used at
                       class finalization time, when no classes of type @widget_type are in use anymore.
#NAME: accel_closure
#PARENT: Gtk.AccelGroup.accel-changed.none
#COMMENT: the #GClosure of the accelerator
#NAME: key
#PARENT: Gtk.PrintSettings.unset.none
#COMMENT: a key
#NAME: text_view
#PARENT: Gtk.TextView.set_pixels_below_lines.none
#COMMENT: a #GtkTextView
#NAME: label
#PARENT: Gtk.Label.set_text_with_mnemonic.none
#COMMENT: a #GtkLabel
#NAME: new
#PARENT: Gtk.LevelBar
#COMMENT: Creates a new #GtkLevelBar.
#NAME: op
#PARENT: Gtk.PrintOperation.set_current_page.none
#COMMENT: a #GtkPrintOperation
#NAME: container
#PARENT: Gtk.Container.child_notify.none
#COMMENT: the #GtkContainer
#NAME: accelerator
#PARENT: Gtk.UIManagerItemType
#COMMENT: Install an accelerator.
#NAME: translation_domain
#PARENT: Gtk.init_with_args.gboolean
#COMMENT: a translation domain to use for translating
   the `--help` output for the options in @entries
   and the @parameter_string with gettext(), or %NULL
#NAME: range
#PARENT: Gtk.Range.get_adjustment.Adjustment
#COMMENT: a #GtkRange
#NAME: get_capture_button_press
#PARENT: Gtk.ScrolledWindow
#COMMENT: Return whether button presses are captured during kinetic
scrolling. See gtk_scrolled_window_set_capture_button_press().
#NAME: end
#PARENT: Gtk.TextBufferClass.remove_tag.remove_tag.none
#COMMENT: other bound of range to be untagged
#NAME: selection-clear-event
#PARENT: Gtk.Widget.selection-clear-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: get_modifier_mask
#PARENT: Gtk.AccelGroup
#COMMENT: Gets a #GdkModifierType representing the mask for this
@accel_group. For example, #GDK_CONTROL_MASK, #GDK_SHIFT_MASK, etc.
#NAME: max
#PARENT: Gtk.VScale.new_with_range.Widget
#COMMENT: maximum value
#NAME: box
#PARENT: Gtk.Box.query_child_packing.none
#COMMENT: a #GtkBox
#NAME: set
#PARENT: Gtk.StyleProperties
#COMMENT: Sets several style properties on @props.
#NAME: iter
#PARENT: Gtk.TextIter.get_chars_in_line.gint
#COMMENT: an iterator
#NAME: resolve
#PARENT: Gtk.Gradient.resolve
#COMMENT: %TRUE if the gradient has been resolved
#NAME: text-length
#PARENT: Gtk.Entry
#COMMENT: The length of the text in the #GtkEntry.
#NAME: get_margin_top
#PARENT: Gtk.Widget
#COMMENT: Gets the value of the #GtkWidget:margin-top property.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_column.TreeViewColumn
#COMMENT: A #GtkTreeView.
#NAME: get_add_tearoffs
#PARENT: Gtk.UIManager
#COMMENT: Returns whether menus generated by this #GtkUIManager
will have tearoff menu items.
#NAME: vadjustment
#PARENT: Gtk.ScrolledWindow.new.Widget
#COMMENT: vertical adjustment
#NAME: destroy
#PARENT: Gtk.FlowBox.set_filter_func.none
#COMMENT: destroy notifier for @user_data
#NAME: is_active
#PARENT: Gtk.Gesture
#COMMENT: Returns %TRUE if the gesture is currently active.
A gesture is active meanwhile there are touch sequences
interacting with it.
#NAME: get_color
#PARENT: Gtk.HSV
#COMMENT: Queries the current color in an HSV color selector.
Returned values will be in the [0.0, 1.0] range.
#NAME: shrink
#PARENT: Gtk.Paned.pack1.none
#COMMENT: can this child be made smaller than its requisition.
#NAME: rc_reparse_all
#PARENT: Gtk.rc_reparse_all
#COMMENT: %TRUE if the files were reread.
#NAME: 
#PARENT: Gtk.test_create_widget.Widget...
#COMMENT: value to set the first property to, followed by more
   name-value pairs, terminated by %NULL
#NAME: wrap-license
#PARENT: Gtk.AboutDialog
#COMMENT: Whether to wrap the text in the license dialog.
#NAME: set_image
#PARENT: Gtk.Clipboard
#COMMENT: Sets the contents of the clipboard to the given #GdkPixbuf.
GTK+ will take responsibility for responding for requests
for the image, and for converting the image into the
requested format.
#NAME: get_inverted
#PARENT: Gtk.LevelBar
#COMMENT: Return the value of the #GtkLevelBar:inverted property.
#NAME: PrintContext
#PARENT: Gtk
#COMMENT: A GtkPrintContext encapsulates context information that is required when
drawing pages for printing, such as the cairo context and important
parameters like page size and resolution. It also lets you easily
create #PangoLayout and #PangoContext objects that match the font metrics
of the cairo surface.

GtkPrintContext objects gets passed to the #GtkPrintOperation::begin-print,
#GtkPrintOperation::end-print, #GtkPrintOperation::request-page-setup and
#GtkPrintOperation::draw-page signals on the #GtkPrintOperation.

## Using GtkPrintContext in a #GtkPrintOperation::draw-page callback

|[<!-- language="C" -->
static void
draw_page (GtkPrintOperation *operation,
	   GtkPrintContext   *context,
	   int                page_nr)
{
  cairo_t *cr;
  PangoLayout *layout;
  PangoFontDescription *desc;

  cr = gtk_print_context_get_cairo_context (context);

  // Draw a red rectangle, as wide as the paper (inside the margins)
  cairo_set_source_rgb (cr, 1.0, 0, 0);
  cairo_rectangle (cr, 0, 0, gtk_print_context_get_width (context), 50);

  cairo_fill (cr);

  // Draw some lines
  cairo_move_to (cr, 20, 10);
  cairo_line_to (cr, 40, 20);
  cairo_arc (cr, 60, 60, 20, 0, M_PI);
  cairo_line_to (cr, 80, 20);

  cairo_set_source_rgb (cr, 0, 0, 0);
  cairo_set_line_width (cr, 5);
  cairo_set_line_cap (cr, CAIRO_LINE_CAP_ROUND);
  cairo_set_line_join (cr, CAIRO_LINE_JOIN_ROUND);

  cairo_stroke (cr);

  // Draw some text
  layout = gtk_print_context_create_layout (context);
  pango_layout_set_text (layout, "Hello World! Printing is easy", -1);
  desc = pango_font_description_from_string ("sans 28");
  pango_layout_set_font_description (layout, desc);
  pango_font_description_free (desc);

  cairo_move_to (cr, 30, 20);
  pango_cairo_layout_path (cr, layout);

  // Font Outline
  cairo_set_source_rgb (cr, 0.93, 1.0, 0.47);
  cairo_set_line_width (cr, 0.5);
  cairo_stroke_preserve (cr);

  // Font Fill
  cairo_set_source_rgb (cr, 0, 0.0, 1.0);
  cairo_fill (cr);

  g_object_unref (layout);
}
]|

Printing support was added in GTK+ 2.10.
#NAME: get_expand
#PARENT: Gtk.TreeViewColumn.get_expand
#COMMENT: %TRUE if the column expands to fill available space.
#NAME: window
#PARENT: Gtk.Widget.register_window.none
#COMMENT: a #GdkWindow
#NAME: grab-broken-event
#PARENT: Gtk.Widget.grab-broken-event
#COMMENT: %TRUE to stop other handlers from being invoked for
  the event. %FALSE to propagate the event further.
#NAME: get_end_line
#PARENT: Gtk.CssSection.get_end_line
#COMMENT: the line number
#NAME: new_with_buttons
#PARENT: Gtk.Dialog
#COMMENT: Creates a new #GtkDialog with title @title (or %NULL for the default
title; see gtk_window_set_title()) and transient parent @parent (or
%NULL for none; see gtk_window_set_transient_for()). The @flags
argument can be used to make the dialog modal (#GTK_DIALOG_MODAL)
and/or to have it destroyed along with its transient parent
(#GTK_DIALOG_DESTROY_WITH_PARENT). After @flags, button
text/response ID pairs should be listed, with a %NULL pointer ending
the list. Button text can be arbitrary text. A response ID can be
any positive number, or one of the values in the #GtkResponseType
enumeration. If the user clicks one of these dialog buttons,
#GtkDialog will emit the #GtkDialog::response signal with the corresponding
response ID. If a #GtkDialog receives the #GtkWidget::delete-event signal,
it will emit ::response with a response ID of #GTK_RESPONSE_DELETE_EVENT.
However, destroying a dialog does not emit the ::response signal;
so be careful relying on ::response when using the
#GTK_DIALOG_DESTROY_WITH_PARENT flag. Buttons are from left to right,
so the first button in the list will be the leftmost button in the dialog.

Here’s a simple example:
|[<!-- language="C" -->
 GtkWidget *dialog;
 GtkDialogFlags flags = GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT;
 dialog = gtk_dialog_new_with_buttons ("My dialog",
                                       main_app_window,
                                       flags,
                                       _("_OK"),
                                       GTK_RESPONSE_ACCEPT,
                                       _("_Cancel"),
                                       GTK_RESPONSE_REJECT,
                                       NULL);
]|
#NAME: set_icon_from_icon_name
#PARENT: Gtk.Tooltip
#COMMENT: Sets the icon of the tooltip (which is in front of the text) to be
the icon indicated by @icon_name with the size indicated
by @size.  If @icon_name is %NULL, the image will be hidden.
#NAME: rescan_if_needed
#PARENT: Gtk.IconTheme
#COMMENT: Checks to see if the icon theme has changed; if it has, any
currently cached information is discarded and will be reloaded
next time @icon_theme is accessed.
#NAME: parent_class
#PARENT: Gtk.MenuItemClass
#COMMENT: The parent class.
#NAME: new_with_label_from_widget
#PARENT: Gtk.RadioButton.new_with_label_from_widget
#COMMENT: a new radio button.
#NAME: get_x11_window_id
#PARENT: Gtk.StatusIcon.get_x11_window_id
#COMMENT: An 32 bit unsigned integer identifier for the
underlying X11 Window
#NAME: get_reserve_indicator
#PARENT: Gtk.MenuItem
#COMMENT: Returns whether the @menu_item reserves space for
the submenu indicator, regardless if it has a submenu
or not.
#NAME: show_size
#PARENT: Gtk.FontButton.set_show_size.none
#COMMENT: %TRUE if font size should be displayed in dialog.
#NAME: stock
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: set_from_stock
#PARENT: Gtk.Image
#COMMENT: See gtk_image_new_from_stock() for details.
#NAME: iter
#PARENT: Gtk.TreeStore.insert.none
#COMMENT: An unset #GtkTreeIter to set to the new row
#NAME: paint_option
#PARENT: Gtk
#COMMENT: Draws a radio button indicator in the given rectangle on @cr with
the given parameters.
#NAME: insert-at-cursor
#PARENT: Gtk.TextView
#COMMENT: The ::insert-at-cursor signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates the insertion of a
fixed string at the cursor.

This signal has no default bindings.
#NAME: icon_info
#PARENT: Gtk.IconInfo.load_symbolic_for_context_async.none
#COMMENT: a #GtkIconInfo from gtk_icon_theme_lookup_icon()
#NAME: request_renderer
#PARENT: Gtk.CellArea
#COMMENT: This is a convenience function for #GtkCellArea implementations
to request size for cell renderers. It’s important to use this
function to request size and then use gtk_cell_area_inner_cell_area()
at render and event time since this function will add padding
around the cell for focus painting.
#NAME: get_widget
#PARENT: Gtk.Accessible
#COMMENT: Gets the #GtkWidget corresponding to the #GtkAccessible.
The returned widget does not have a reference added, so
you do not need to unref it.
#NAME: n_columns
#PARENT: Gtk.ListStore.set_column_types.none
#COMMENT: Number of columns for the list store
#NAME: set_attributes
#PARENT: Gtk.Label
#COMMENT: Sets a #PangoAttrList; the attributes in the list are applied to the
label text.

The attributes set with this function will be applied
and merged with any other attributes previously effected by way
of the #GtkLabel:use-underline or #GtkLabel:use-markup properties.
While it is not recommended to mix markup strings with manually set
attributes, if you must; know that the attributes will be applied
to the label after the markup string is parsed.
#NAME: property_name
#PARENT: Gtk.Style.get_style_property.none
#COMMENT: the name of the style property to get
#NAME: binding_entry_add_signall
#PARENT: Gtk
#COMMENT: Override or install a new key binding for @keyval with @modifiers on
@binding_set.
#NAME: tree_get_row_drag_data
#PARENT: Gtk
#COMMENT: Obtains a @tree_model and @path from selection data of target type
%GTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.
This function can only be used if @selection_data originates from the same
process that’s calling this function, because a pointer to the tree model
is being passed around. If you aren’t in the same process, then you'll
get memory corruption. In the #GtkTreeDragDest drag_data_received handler,
you can assume that selection data of type %GTK_TREE_MODEL_ROW is
in from the current process. The returned path must be freed with
gtk_tree_path_free().
#NAME: widget
#PARENT: Gtk.Widget.get_tooltip_window.Window
#COMMENT: a #GtkWidget
#NAME: cr
#PARENT: Gtk.paint_box.none
#COMMENT: a #cairo_t
#NAME: path
#PARENT: Gtk.CellRenderer.activate.gboolean
#COMMENT: widget-dependent string representation of the event location;
   e.g. for #GtkTreeView, a string representation of #GtkTreePath
#NAME: set_hadjustment
#PARENT: Gtk.FlowBox
#COMMENT: Hooks up an adjustment to focus handling in @box.
The adjustment is also used for autoscrolling during
rubberband selection. See gtk_scrolled_window_get_hadjustment()
for a typical way of obtaining the adjustment, and
gtk_flow_box_set_vadjustment()for setting the vertical
adjustment.

The adjustments have to be in pixel units and in the same
coordinate system as the allocation for immediate children
of the box.
#NAME: connect_entry
#PARENT: Gtk.SearchBar
#COMMENT: Connects the #GtkEntry widget passed as the one to be used in
this search bar. The entry should be a descendant of the search bar.
This is only required if the entry isn’t the direct child of the
search bar (as in our main example).
#NAME: buildable
#PARENT: Gtk.Buildable.set_buildable_property.none
#COMMENT: a #GtkBuildable
#NAME: TextBufferDeserializeFunc
#PARENT: Gtk.TextBufferDeserializeFunc
#COMMENT: %TRUE on success, %FALSE otherwise
#NAME: margin
#PARENT: Gtk.Widget
#COMMENT: Sets all four sides' margin at once. If read, returns max
margin on any side.
#NAME: get_focus_chain
#PARENT: Gtk.Container
#COMMENT: Retrieves the focus chain of the container, if one has been
set explicitly. If no focus chain has been explicitly
set, GTK+ computes the focus chain based on the positions
of the children. In that case, GTK+ stores %NULL in
@focusable_widgets and returns %FALSE.
#NAME: set_monitor
#PARENT: Gtk.Menu
#COMMENT: Informs GTK+ on which monitor a menu should be popped up.
See gdk_screen_get_monitor_geometry().

This function should be called from a #GtkMenuPositionFunc
if the menu should not appear on the same monitor as the pointer.
This information can’t be reliably inferred from the coordinates
returned by a #GtkMenuPositionFunc, since, for very long menus,
these coordinates may extend beyond the monitor boundaries or even
the screen boundaries.
#NAME: button
#PARENT: Gtk.Button.get_always_show_image.gboolean
#COMMENT: a #GtkButton
#NAME: parent_class
#PARENT: Gtk.DialogClass
#COMMENT: The parent class.
#NAME: Image
#PARENT: Gtk
#COMMENT: The #GtkImage widget displays an image. Various kinds of object
can be displayed as an image; most typically, you would load a
#GdkPixbuf ("pixel buffer") from a file, and then display that.
There’s a convenience function to do this, gtk_image_new_from_file(),
used as follows:
|[<!-- language="C" -->
  GtkWidget *image;
  image = gtk_image_new_from_file ("myfile.png");
]|
If the file isn’t loaded successfully, the image will contain a
“broken image” icon similar to that used in many web browsers.
If you want to handle errors in loading the file yourself,
for example by displaying an error message, then load the image with
gdk_pixbuf_new_from_file(), then create the #GtkImage with
gtk_image_new_from_pixbuf().

The image file may contain an animation, if so the #GtkImage will
display an animation (#GdkPixbufAnimation) instead of a static image.

#GtkImage is a subclass of #GtkMisc, which implies that you can
align it (center, left, right) and add padding to it, using
#GtkMisc methods.

#GtkImage is a “no window” widget (has no #GdkWindow of its own),
so by default does not receive events. If you want to receive events
on the image, such as button clicks, place the image inside a
#GtkEventBox, then connect to the event signals on the event box.

## Handling button press events on a #GtkImage.

|[<!-- language="C" -->
  static gboolean
  button_press_callback (GtkWidget      *event_box,
                         GdkEventButton *event,
                         gpointer        data)
  {
    g_print ("Event box clicked at coordinates %f,%f\n",
             event->x, event->y);

    // Returning TRUE means we handled the event, so the signal
    // emission should be stopped (don’t call any further callbacks
    // that may be connected). Return FALSE to continue invoking callbacks.
    return TRUE;
  }

  static GtkWidget*
  create_image (void)
  {
    GtkWidget *image;
    GtkWidget *event_box;

    image = gtk_image_new_from_file ("myfile.png");

    event_box = gtk_event_box_new ();

    gtk_container_add (GTK_CONTAINER (event_box), image);

    g_signal_connect (G_OBJECT (event_box),
                      "button_press_event",
                      G_CALLBACK (button_press_callback),
                      image);

    return image;
  }
]|

When handling events on the event box, keep in mind that coordinates
in the image may be different from event box coordinates due to
the alignment and padding settings on the image (see #GtkMisc).
The simplest way to solve this is to set the alignment to 0.0
(left/top), and set the padding to zero. Then the origin of
the image will be the same as the origin of the event box.

Sometimes an application will want to avoid depending on external data
files, such as image files. GTK+ comes with a program to avoid this,
called “gdk-pixbuf-csource”. This library
allows you to convert an image into a C variable declaration, which
can then be loaded into a #GdkPixbuf using
gdk_pixbuf_new_from_inline().
#NAME: op
#PARENT: Gtk.PrintOperation.set_export_filename.none
#COMMENT: a #GtkPrintOperation
#NAME: tree_view
#PARENT: Gtk.TreeView.convert_tree_to_bin_window_coords.none
#COMMENT: a #GtkTreeView
#NAME: set_always_show_image
#PARENT: Gtk.ImageMenuItem
#COMMENT: If %TRUE, the menu item will ignore the #GtkSettings:gtk-menu-images
setting and always show the image, if available.

Use this property if the menuitem would be useless or hard to use
without the image.
#NAME: label
#PARENT: Gtk.CheckButton.new_with_label.Widget
#COMMENT: the text for the check button.
#NAME: get_surrounding
#PARENT: Gtk.IMContext
#COMMENT: Retrieves context around the insertion point. Input methods
typically want context in order to constrain input text based on
existing text; this is important for languages such as Thai where
only some sequences of characters are allowed.

This function is implemented by emitting the
GtkIMContext::retrieve_surrounding signal on the input method; in
response to this signal, a widget should provide as much context as
is available, up to an entire paragraph, by calling
gtk_im_context_set_surrounding(). Note that there is no obligation
for a widget to respond to the ::retrieve_surrounding signal, so input
methods must be prepared to function without context.
#NAME: reset_im_context
#PARENT: Gtk.Entry
#COMMENT: Reset the input method context of the entry if needed.

This can be necessary in the case where modifying the buffer
would confuse on-going input method behavior.
#NAME: new_order
#PARENT: Gtk.Dialog.set_alternative_button_order_from_array.none
#COMMENT: an array of response ids of
    @dialog’s buttons
#NAME: get_alignment
#PARENT: Gtk.Misc
#COMMENT: Gets the X and Y alignment of the widget within its allocation.
See gtk_misc_set_alignment().
#NAME: tree_view
#PARENT: Gtk.TreeView.set_enable_search.none
#COMMENT: A #GtkTreeView
#NAME: cell_editable
#PARENT: Gtk.CellEditable.editing_done.none
#COMMENT: A #GtkCellEditable
#NAME: STYLE_CLASS_SIDEBAR
#PARENT: Gtk
#COMMENT: A CSS class defining a sidebar, such as the left side in
a file chooser.

This is used in #GtkFileChooser and in #GtkAssistant.
#NAME: get_date
#PARENT: Gtk.Calendar
#COMMENT: Obtains the selected date from a #GtkCalendar.
#NAME: move
#PARENT: Gtk.Layout
#COMMENT: Moves a current child of @layout to a new position.
#NAME: get_kinetic_scrolling
#PARENT: Gtk.ScrolledWindow.get_kinetic_scrolling
#COMMENT: the scrolling behavior flags.
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_mark.TextMark
#COMMENT: a #GtkTextBuffer
#NAME: gesture
#PARENT: Gtk.GestureSingle.get_current_button.guint
#COMMENT: a #GtkGestureSingle
#NAME: move_mark_onscreen
#PARENT: Gtk.TextView
#COMMENT: Moves a mark within the buffer so that it's
located within the currently-visible text area.
#NAME: get_activate_on_single_click
#PARENT: Gtk.IconView.get_activate_on_single_click
#COMMENT: %TRUE if item-activated will be emitted on a single click
#NAME: STOCK_DIALOG_WARNING
#PARENT: Gtk
#COMMENT: The “Warning” item and icon.
#NAME: get_border_color
#PARENT: Gtk.ThemingEngine
#COMMENT: Gets the border color for a given state.
#NAME: action
#PARENT: Gtk.ToggleAction.toggled.none
#COMMENT: the action object
#NAME: socket_id
#PARENT: Gtk.Plug.construct_for_display.none
#COMMENT: the XID of the socket’s window.
#NAME: action
#PARENT: Gtk.Action.get_accel_path.utf8
#COMMENT: the action object
#NAME: deprecated
#PARENT: Gtk.CssProviderError
#COMMENT: Deprecation error.
#NAME: new
#PARENT: Gtk.CellRendererPixbuf.new
#COMMENT: the new cell renderer
#NAME: STYLE_CLASS_ERROR
#PARENT: Gtk
#COMMENT: A CSS class for an area displaying an error message,
such as those in infobars.

This is used by #GtkInfoBar.
#NAME: none
#PARENT: Gtk.BorderStyle
#COMMENT: No visible border
#NAME: tree_store
#PARENT: Gtk.TreeStore.prepend.none
#COMMENT: A #GtkTreeStore
#NAME: get_day_is_marked
#PARENT: Gtk.Calendar
#COMMENT: Returns if the @day of the @calendar is already marked.
#NAME: get_area
#PARENT: Gtk.GestureMultiPress
#COMMENT: If an area was set through gtk_gesture_multi_press_set_area(),
this function will return %TRUE and fill in @rect with the
press area. See gtk_gesture_multi_press_set_area() for more
details on what the press area represents.
#NAME: range
#PARENT: Gtk.Range.set_upper_stepper_sensitivity.none
#COMMENT: a #GtkRange
#NAME: prepend
#PARENT: Gtk.TreeStore
#COMMENT: Prepends a new row to @tree_store.  If @parent is non-%NULL, then it will prepend
the new row before the first child of @parent, otherwise it will prepend a row
to the top level.  @iter will be changed to point to this new row.  The row
will be empty after this function is called.  To fill in values, you need to
call gtk_tree_store_set() or gtk_tree_store_set_value().
#NAME: get_upper
#PARENT: Gtk.Adjustment
#COMMENT: Retrieves the maximum value of the adjustment.
#NAME: canceled
#PARENT: Gtk.CellArea.stop_editing.none
#COMMENT: whether editing was canceled.
#NAME: background-gdk
#PARENT: Gtk.TextTag
#COMMENT: Background color as a #GdkColor.
#NAME: path_length
#PARENT: Gtk.Widget.path.none
#COMMENT: location to store length of the path,
    or %NULL
#NAME: set_application
#PARENT: Gtk.Builder
#COMMENT: Sets the application associated with @builder.

You only need this function if there is more than one #GApplication
in your process. @application cannot be %NULL.
#NAME: chooser
#PARENT: Gtk.FileChooser.remove_shortcut_folder.gboolean
#COMMENT: a #GtkFileChooser
#NAME: first_index
#PARENT: Gtk.TreePath.new_from_indices.TreePath
#COMMENT: first integer
#NAME: hsv
#PARENT: Gtk.HSV.get_color.none
#COMMENT: An HSV color selector
#NAME: get_required_version
#PARENT: Gtk.GLArea
#COMMENT: Retrieves the required version of OpenGL set
using gtk_gl_area_set_required_version().
#NAME: n
#PARENT: Gtk.PlacesSidebar.get_nth_bookmark.Gio.File
#COMMENT: index of the bookmark to query
#NAME: get_homogeneous
#PARENT: Gtk.Table.get_homogeneous
#COMMENT: %TRUE if the cells are all constrained to the same size
#NAME: buffer
#PARENT: Gtk.TextBuffer.select_range.none
#COMMENT: a #GtkTextBuffer
#NAME: text_view
#PARENT: Gtk.TextView.set_buffer.none
#COMMENT: a #GtkTextView
#NAME: mode
#PARENT: Gtk.LevelBar.set_mode.none
#COMMENT: a #GtkLevelBarMode
#NAME: cancel_animations
#PARENT: Gtk.StyleContext
#COMMENT: Stops all running animations for @region_id and all animatable
regions underneath.

A %NULL @region_id will stop all ongoing animations in @context,
when dealing with a #GtkStyleContext obtained through
gtk_widget_get_style_context(), this is normally done for you
in all circumstances you would expect all widget to be stopped,
so this should be only used in complex widgets with different
animatable regions.
#NAME: window_x
#PARENT: Gtk.TextView.window_to_buffer_coords.none
#COMMENT: window x coordinate
#NAME: destroy
#PARENT: Gtk.ActionGroup.add_radio_actions_full.none
#COMMENT: destroy notification callback for @user_data
#NAME: new
#PARENT: Gtk.CellRendererSpinner
#COMMENT: Returns a new cell renderer which will show a spinner to indicate
activity.
#NAME: window_y
#PARENT: Gtk.TextView.window_to_buffer_coords.none
#COMMENT: window y coordinate
#NAME: event
#PARENT: Gtk.Widget.button-press-event.gboolean
#COMMENT: the #GdkEventButton which triggered
  this signal.
#NAME: add_item
#PARENT: Gtk.RecentManager
#COMMENT: Adds a new resource, pointed by @uri, into the recently used
resources list.

This function automatically retrieves some of the needed
metadata and setting other metadata to common default values;
it then feeds the data to gtk_recent_manager_add_full().

See gtk_recent_manager_add_full() if you want to explicitly
define the metadata for the resource pointed by @uri.
#NAME: format-value
#PARENT: Gtk.Scale
#COMMENT: Signal which allows you to change how the scale value is displayed.
Connect a signal handler which returns an allocated string representing
@value. That string will then be used to display the scale's value.

Here's an example signal handler which displays a value 1.0 as
with "-->1.0<--".
|[<!-- language="C" -->
static gchar*
format_value_callback (GtkScale *scale,
                       gdouble   value)
{
  return g_strdup_printf ("-->\%0.*g<--",
                          gtk_scale_get_digits (scale), value);
 }
]|
#NAME: iter
#PARENT: Gtk.TreeView.get_tooltip_context.gboolean
#COMMENT: a pointer to receive a #GtkTreeIter or %NULL
#NAME: set_layout
#PARENT: Gtk.ButtonBox
#COMMENT: Changes the way buttons are arranged in their container.
#NAME: inline_completion
#PARENT: Gtk.EntryCompletion.set_inline_completion.none
#COMMENT: %TRUE to do inline completion
#NAME: box
#PARENT: Gtk.FlowBox.invalidate_filter.none
#COMMENT: a #GtkFlowBox
#NAME: horizontal_pages
#PARENT: Gtk.MovementStep
#COMMENT: Move horizontally by pages
#NAME: new
#PARENT: Gtk.StackSidebar.new
#COMMENT: the new #GtkStackSidebar
#NAME: widget
#PARENT: Gtk.Widget.get_action_group.Gio.ActionGroup
#COMMENT: A #GtkWidget
#NAME: filter
#PARENT: Gtk.RecentFilter
#COMMENT: Tests whether a file should be displayed according to @filter.
The #GtkRecentFilterInfo @filter_info should include
the fields returned from gtk_recent_filter_get_needed(), and
must set the #GtkRecentFilterInfo.contains field of @filter_info
to indicate which fields have been set.

This function will not typically be used by applications; it
is intended principally for use in the implementation of
#GtkRecentChooser.
#NAME: spin
#PARENT: Gtk.SpinButton
#COMMENT: Increment or decrement a spin button’s value in a specified
direction by a specified amount.
#NAME: get_iter
#PARENT: Gtk.TreeModelIface.get_iter.get_iter
#COMMENT: %TRUE, if @iter was set
#NAME: path
#PARENT: Gtk.TreePath.next.none
#COMMENT: a #GtkTreePath-struct
#NAME: path
#PARENT: Gtk.TreePath.to_string.utf8
#COMMENT: A #GtkTreePath-struct
#NAME: tree_view
#PARENT: Gtk.TreeView.get_selection.TreeSelection
#COMMENT: A #GtkTreeView.
#NAME: editable
#PARENT: Gtk.Editable.get_chars.utf8
#COMMENT: a #GtkEditable
#NAME: writable
#PARENT: Gtk.targets_include_image.gboolean
#COMMENT: whether to accept only targets for which GTK+ knows
  how to convert a pixbuf into the format
#NAME: add_pattern
#PARENT: Gtk.FileFilter
#COMMENT: Adds a rule allowing a shell style glob to a filter.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_default_source.none
#COMMENT: a #GtkPrintSettings
#NAME: get_numeric
#PARENT: Gtk.SpinButton
#COMMENT: Returns whether non-numeric text can be typed into the spin button.
See gtk_spin_button_set_numeric().
#NAME: keyboard_mode
#PARENT: Gtk.StatusIcon.query-tooltip.gboolean
#COMMENT: %TRUE if the tooltip was trigged using the keyboard
#NAME: backward_visible_word_start
#PARENT: Gtk.TextIter.backward_visible_word_start
#COMMENT: %TRUE if @iter moved and is not the end iterator
#NAME: popup-completion
#PARENT: Gtk.EntryCompletion
#COMMENT: Determines whether the possible completions should be
shown in a popup window.
#NAME: container
#PARENT: Gtk.Container.set_focus_hadjustment.none
#COMMENT: a #GtkContainer
#NAME: box
#PARENT: Gtk.FlowBox.unselect_child.none
#COMMENT: a #GtkFlowBox
#NAME: n_entries
#PARENT: Gtk.ActionGroup.add_toggle_actions.none
#COMMENT: the number of entries
#NAME: is_selected
#PARENT: Gtk.ListBoxRow
#COMMENT: Returns whether the child is currently selected in its
#GtkListBox container.
#NAME: widget
#PARENT: Gtk.Widget.drag_source_add_uri_targets.none
#COMMENT: a #GtkWidget that’s is a drag source
#NAME: idx
#PARENT: Gtk.FlowBox.get_child_at_index.FlowBoxChild
#COMMENT: the position of the child
#NAME: factor
#PARENT: Gtk.SymbolicColor.new_alpha.SymbolicColor
#COMMENT: factor to apply to @color alpha
#NAME: n_entries
#PARENT: Gtk.ActionGroup.add_actions.none
#COMMENT: the number of entries
#NAME: get_stack
#PARENT: Gtk.StackSidebar
#COMMENT: Retrieves the stack.
See gtk_stack_sidebar_set_stack().
#NAME: ColorChooserWidget
#PARENT: Gtk
#COMMENT: The #GtkColorChooserWidget widget lets the user select a
color. By default, the chooser presents a predefined palette
of colors, plus a small number of settable custom colors.
It is also possible to select a different color with the
single-color editor. To enter the single-color editing mode,
use the context menu of any color of the palette, or use the
'+' button to add a new custom color.

The chooser automatically remembers the last selection, as well
as custom colors.

To change the initially selected color, use gtk_color_chooser_set_rgba().
To get the selected color use gtk_color_chooser_get_rgba().

The #GtkColorChooserWidget is used in the #GtkColorChooserDialog
to provide a dialog for selecting colors.
#NAME: action
#PARENT: Gtk.ActionGroup.post-activate.none
#COMMENT: the action
#NAME: text
#PARENT: Gtk.ToolbarStyle
#COMMENT: Buttons display only text labels in the toolbar.
#NAME: get_line_count
#PARENT: Gtk.TextBuffer
#COMMENT: Obtains the number of lines in the buffer. This value is cached, so
the function is very fast.
#NAME: iter
#PARENT: Gtk.TextView.get_line_yrange.none
#COMMENT: a #GtkTextIter
#NAME: setting
#PARENT: Gtk.Window.set_auto_startup_notification.none
#COMMENT: %TRUE to automatically do startup notification
#NAME: widget
#PARENT: Gtk.test_find_widget.Widget
#COMMENT: Container widget, usually a GtkWindow.
#NAME: remove-editable
#PARENT: Gtk.CellArea
#COMMENT: Indicates that editing finished on @renderer and that @editable
should be removed from the owning cell-layouting widget.
#NAME: expander
#PARENT: Gtk.Expander.get_label.utf8
#COMMENT: a #GtkExpander
#NAME: get_screen
#PARENT: Gtk.MountOperation
#COMMENT: Gets the screen on which windows of the #GtkMountOperation
will be shown.
#NAME: iter
#PARENT: Gtk.TextIter.get_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: an iterator
#NAME: event
#PARENT: Gtk.TextTag.event.gboolean
#COMMENT: the event which triggered the signal
#NAME: focus-changed
#PARENT: Gtk.CellArea
#COMMENT: Indicates that focus changed on this @area. This signal
is emitted either as a result of focus handling or event
handling.

It's possible that the signal is emitted even if the
currently focused renderer did not change, this is
because focus may change to the same renderer in the
same cell area for a different row of data.
#NAME: context
#PARENT: Gtk.PrintContext.get_pango_fontmap.Pango.FontMap
#COMMENT: a #GtkPrintContext
#NAME: get_default_row_spacing
#PARENT: Gtk.Table
#COMMENT: Gets the default row spacing for the table. This is
the spacing that will be used for newly added rows.
(See gtk_table_set_row_spacings())
#NAME: get_layout
#PARENT: Gtk.Entry.get_layout
#COMMENT: the #PangoLayout for this entry
#NAME: gtk-im-module
#PARENT: Gtk.Settings
#COMMENT: Which IM (input method) module should be used by default. This is the
input method that will be used if the user has not explicitly chosen
another input method from the IM context menu.
This also can be a colon-separated list of input methods, which GTK+
will try in turn until it finds one available on the system.

See #GtkIMContext.
#NAME: child
#PARENT: Gtk.TreeModelIface.iter_parent.iter_parent.gboolean
#COMMENT: the #GtkTreeIter-struct
#NAME: set_application
#PARENT: Gtk.Window
#COMMENT: Sets or unsets the #GtkApplication associated with the window.

The application will be kept alive for at least as long as the window
is open.
#NAME: gesture
#PARENT: Gtk.GestureSwipe.get_velocity.gboolean
#COMMENT: a #GtkGestureSwipe
#NAME: context
#PARENT: Gtk.PrintContext.get_hard_margins.gboolean
#COMMENT: a #GtkPrintContext
#NAME: orientation
#PARENT: Gtk.ColorChooser.add_palette.none
#COMMENT: %GTK_ORIENTATION_HORIZONTAL if the palette should
    be displayed in rows, %GTK_ORIENTATION_VERTICAL for columns
#NAME: set_minimum_key_length
#PARENT: Gtk.EntryCompletion
#COMMENT: Requires the length of the search key for @completion to be at least
@length. This is useful for long lists, where completing using a small
key takes a lot of time and will come up with meaningless results anyway
(ie, a too large dataset).
#NAME: insert_next_to
#PARENT: Gtk.Grid
#COMMENT: Inserts a row or column at the specified position.

The new row or column is placed next to @sibling, on the side
determined by @side. If @side is %GTK_POS_TOP or %GTK_POS_BOTTOM,
a row is inserted. If @side is %GTK_POS_LEFT of %GTK_POS_RIGHT,
a column is inserted.
#NAME: context
#PARENT: Gtk.IMContextClass.filter_keypress.filter_keypress.gboolean
#COMMENT: a #GtkIMContext
#NAME: set_name
#PARENT: Gtk.FileFilter
#COMMENT: Sets the human-readable name of the filter; this is the string
that will be displayed in the file selector user interface if
there is a selectable list of filters.
#NAME: data
#PARENT: Gtk.PageSetupDoneFunc.none
#COMMENT: user data that has been passed to
    gtk_print_run_page_setup_dialog_async()
#NAME: paned
#PARENT: Gtk.Paned.add2.none
#COMMENT: a paned widget
#NAME: action
#PARENT: Gtk.RecentAction.set_show_numbers.none
#COMMENT: a #GtkRecentAction
#NAME: flags
#PARENT: Gtk.Widget.unset_state_flags.none
#COMMENT: State flags to turn off
#NAME: append
#PARENT: Gtk.ListStore
#COMMENT: Appends a new row to @list_store.  @iter will be changed to point to this new
row.  The row will be empty after this function is called.  To fill in
values, you need to call gtk_list_store_set() or gtk_list_store_set_value().
#NAME: adjustment
#PARENT: Gtk.SpinButton.set_adjustment.none
#COMMENT: a #GtkAdjustment to replace the existing adjustment
#NAME: shell
#PARENT: Gtk.ToolShellIface.get_ellipsize_mode.get_ellipsize_mode.Pango.EllipsizeMode
#COMMENT: a #GtkToolShell
#NAME: entry
#PARENT: Gtk.Entry.get_attributes.Pango.AttrList
#COMMENT: a #GtkEntry
#NAME: copy
#PARENT: Gtk.PaperSize.copy
#COMMENT: a copy of @other
#NAME: op
#PARENT: Gtk.PrintOperation.set_support_selection.none
#COMMENT: a #GtkPrintOperation
#NAME: new
#PARENT: Gtk.TargetList
#COMMENT: Creates a new #GtkTargetList from an array of #GtkTargetEntry.
#NAME: context
#PARENT: Gtk.IMContext.focus_out.none
#COMMENT: a #GtkIMContext
#NAME: policy
#PARENT: Gtk.SpinButton.set_update_policy.none
#COMMENT: a #GtkSpinButtonUpdatePolicy value
#NAME: copy
#PARENT: Gtk.TreeIter
#COMMENT: Creates a dynamically allocated tree iterator as a copy of @iter.

This function is not intended for use in applications,
because you can just copy the structs by value
(`GtkTreeIter new_iter = iter;`).
You must free this iter with gtk_tree_iter_free().
#NAME: widget
#PARENT: Gtk.Widget.set_margin_end.none
#COMMENT: a #GtkWidget
#NAME: info
#PARENT: Gtk.selection_add_target.none
#COMMENT: A unsigned integer which will be passed back to the application.
#NAME: button
#PARENT: Gtk.ButtonClass.pressed.pressed.none
#COMMENT: The #GtkButton you want to send the signal to.
#NAME: name
#PARENT: Gtk.Action.new.Action
#COMMENT: A unique name for the action
#NAME: never
#PARENT: Gtk.PolicyType
#COMMENT: The scrollbar should never appear. In this mode the
 content determines the size.
#NAME: get_resolution
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION.
#NAME: area
#PARENT: Gtk.CellArea.has_renderer.gboolean
#COMMENT: a #GtkCellArea
#NAME: get_color_selection
#PARENT: Gtk.ColorSelectionDialog
#COMMENT: Retrieves the #GtkColorSelection widget embedded in the dialog.
#NAME: actionable
#PARENT: Gtk.Actionable.set_action_name.none
#COMMENT: a #GtkActionable widget
#NAME: marks_unbound
#PARENT: Gtk.BindingEntry
#COMMENT: implementation detail
#NAME: action
#PARENT: Gtk.Action.set_visible.none
#COMMENT: the action object
#NAME: wait_for_targets
#PARENT: Gtk.Clipboard.wait_for_targets
#COMMENT: %TRUE if any targets are present on the clipboard,
              otherwise %FALSE.
#NAME: new_with_model
#PARENT: Gtk.TreeView
#COMMENT: Creates a new #GtkTreeView widget with the model initialized to @model.
#NAME: drag-data-received
#PARENT: Gtk.Widget
#COMMENT: The ::drag-data-received signal is emitted on the drop site when the
dragged data has been received. If the data was received in order to
determine whether the drop will be accepted, the handler is expected
to call gdk_drag_status() and not finish the drag.
If the data was received in response to a #GtkWidget::drag-drop signal
(and this is the last target to be received), the handler for this
signal is expected to process the received data and then call
gtk_drag_finish(), setting the @success parameter depending on
whether the data was processed successfully.

Applications must create some means to determine why the signal was emitted
and therefore whether to call gdk_drag_status() or gtk_drag_finish().

The handler may inspect the selected action with
gdk_drag_context_get_selected_action() before calling
gtk_drag_finish(), e.g. to implement %GDK_ACTION_ASK as
shown in the following example:
|[<!-- language="C" -->
void
drag_data_received (GtkWidget          *widget,
                    GdkDragContext     *context,
                    gint                x,
                    gint                y,
                    GtkSelectionData   *data,
                    guint               info,
                    guint               time)
{
  if ((data->length >= 0) && (data->format == 8))
    {
      GdkDragAction action;

      // handle data here

      action = gdk_drag_context_get_selected_action (context);
      if (action == GDK_ACTION_ASK)
        {
          GtkWidget *dialog;
          gint response;

          dialog = gtk_message_dialog_new (NULL,
                                           GTK_DIALOG_MODAL |
                                           GTK_DIALOG_DESTROY_WITH_PARENT,
                                           GTK_MESSAGE_INFO,
                                           GTK_BUTTONS_YES_NO,
                                           "Move the data ?\n");
          response = gtk_dialog_run (GTK_DIALOG (dialog));
          gtk_widget_destroy (dialog);

          if (response == GTK_RESPONSE_YES)
            action = GDK_ACTION_MOVE;
          else
            action = GDK_ACTION_COPY;
         }

      gtk_drag_finish (context, TRUE, action == GDK_ACTION_MOVE, time);
    }
  else
    gtk_drag_finish (context, FALSE, FALSE, time);
 }
]|
#NAME: action
#PARENT: Gtk.Activatable.do_set_related_action.none
#COMMENT: the #GtkAction to set
#NAME: apply
#PARENT: Gtk.Assistant
#COMMENT: The ::apply signal is emitted when the apply button is clicked.

The default behavior of the #GtkAssistant is to switch to the page
after the current page, unless the current page is the last one.

A handler for the ::apply signal should carry out the actions for
which the wizard has collected data. If the action takes a long time
to complete, you might consider putting a page of type
%GTK_ASSISTANT_PAGE_PROGRESS after the confirmation page and handle
this operation within the #GtkAssistant::prepare signal of the progress
page.
#NAME: get_custom_title
#PARENT: Gtk.HeaderBar
#COMMENT: Retrieves the custom title widget of the header. See
gtk_header_bar_set_custom_title().
#NAME: set_col_spacing
#PARENT: Gtk.Table
#COMMENT: Alters the amount of space between a given table column and the following
column.
#NAME: tag
#PARENT: Gtk.TextBuffer.apply-tag.none
#COMMENT: the applied tag
#NAME: column
#PARENT: Gtk.TreeStore.set_value.none
#COMMENT: column number to modify
#NAME: load_from_data
#PARENT: Gtk.CssProvider.load_from_data
#COMMENT: %TRUE. The return value is deprecated and %FALSE will only be
    returned for backwards compatibility reasons if an @error is not
    %NULL and a loading error occured. To track errors while loading
    CSS, connect to the #GtkCssProvider::parsing-error signal.
#NAME: area
#PARENT: Gtk.CellArea.set_focus_cell.none
#COMMENT: a #GtkCellArea
#NAME: set_inverted
#PARENT: Gtk.Range
#COMMENT: Ranges normally move from lower to higher values as the
slider moves from top to bottom or left to right. Inverted
ranges have higher values at the top or on the right rather than
on the bottom or left.
#NAME: Revealer
#PARENT: Gtk
#COMMENT: The GtkRevealer widget is a container which animates
the transition of its child from invisible to visible.

The style of transition can be controlled with
gtk_revealer_set_transition_type().

These animations respect the #GtkSettings:gtk-enable-animations
setting.

The GtkRevealer widget was added in GTK+ 3.10.
#NAME: remove
#PARENT: Gtk.Statusbar
#COMMENT: Forces the removal of a message from a statusbar’s stack.
The exact @context_id and @message_id must be specified.
#NAME: new
#PARENT: Gtk.IMMulticontext
#COMMENT: Creates a new #GtkIMMulticontext.
#NAME: get_chars
#PARENT: Gtk.EditableInterface.get_chars.get_chars
#COMMENT: a pointer to the contents of the widget as a
     string. This string is allocated by the #GtkEditable
     implementation and should be freed by the caller.
#NAME: settings
#PARENT: Gtk.PrintSettings.get_printer.utf8
#COMMENT: a #GtkPrintSettings
#NAME: button
#PARENT: Gtk.ScaleButton.get_plus_button.Widget
#COMMENT: a #GtkScaleButton
#NAME: page_nr
#PARENT: Gtk.PrintOperation.request-page-setup.none
#COMMENT: the number of the currently printed page (0-based)
#NAME: values
#PARENT: Gtk.TextIter.get_attributes.gboolean
#COMMENT: a #GtkTextAttributes to be filled in
#NAME: tree_view
#PARENT: Gtk.TreeView.get_search_column.gint
#COMMENT: A #GtkTreeView
#NAME: entry
#PARENT: Gtk.Entry.unset_invisible_char.none
#COMMENT: a #GtkEntry
#NAME: get_printer
#PARENT: Gtk.PrintSettings
#COMMENT: Convenience function to obtain the value of
%GTK_PRINT_SETTINGS_PRINTER.
#NAME: STOCK_CAPS_LOCK_WARNING
#PARENT: Gtk
#COMMENT: The “Caps Lock Warning” icon.
#NAME: font-desc
#PARENT: Gtk.FontChooser
#COMMENT: The font description as a #PangoFontDescription.
#NAME: CellRendererPixbuf
#PARENT: Gtk
#COMMENT: A #GtkCellRendererPixbuf can be used to render an image in a cell. It allows
to render either a given #GdkPixbuf (set via the
#GtkCellRendererPixbuf:pixbuf property) or a named icon (set via the
#GtkCellRendererPixbuf:icon-name property).

To support the tree view, #GtkCellRendererPixbuf also supports rendering two
alternative pixbufs, when the #GtkCellRenderer:is-expander property is %TRUE.
If the #GtkCellRenderer:is-expanded property is %TRUE and the
#GtkCellRendererPixbuf:pixbuf-expander-open property is set to a pixbuf, it
renders that pixbuf, if the #GtkCellRenderer:is-expanded property is %FALSE
and the #GtkCellRendererPixbuf:pixbuf-expander-closed property is set to a
pixbuf, it renders that one.
#NAME: no-matches
#PARENT: Gtk.EntryCompletion
#COMMENT: Gets emitted when the filter model has zero
number of rows in completion_complete method.
(In other words when GtkEntryCompletion is out of
 suggestions)
#NAME: device_grab_add
#PARENT: Gtk
#COMMENT: Adds a GTK+ grab on @device, so all the events on @device and its
associated pointer or keyboard (if any) are delivered to @widget.
If the @block_others parameter is %TRUE, any other devices will be
unable to interact with @widget during the grab.
#NAME: hot_x
#PARENT: Gtk.drag_set_icon_widget.none
#COMMENT: the X offset within @widget of the hotspot
#NAME: info
#PARENT: Gtk.RecentInfo.get_visited.glong
#COMMENT: a #GtkRecentInfo
#NAME: gtk-recent-files-enabled
#PARENT: Gtk.Settings
#COMMENT: Whether GTK+ should keep track of items inside the recently used
resources list. If set to %FALSE, the list will always be empty.
#NAME: hot_y
#PARENT: Gtk.drag_set_icon_widget.none
#COMMENT: the Y offset within @widget of the hotspot
#NAME: fsd
#PARENT: Gtk.FontSelectionDialog.set_preview_text.none
#COMMENT: a #GtkFontSelectionDialog
#NAME: PAPER_NAME_LEGAL
#PARENT: Gtk
#COMMENT: Name for the Legal paper size.
#NAME: auto
#PARENT: Gtk.SensitivityType
#COMMENT: The arrow is made insensitive if the
  thumb is at the end
#NAME: child_set_valist
#PARENT: Gtk.Container
#COMMENT: Sets one or more child properties for @child and @container.
#NAME: chooser
#PARENT: Gtk.FileChooser.set_current_folder.gboolean
#COMMENT: a #GtkFileChooser
#NAME: selection
#PARENT: Gtk.TreeSelection.set_mode.none
#COMMENT: A #GtkTreeSelection.
#NAME: get_length
#PARENT: Gtk.PrintSettings
#COMMENT: Returns the value associated with @key, interpreted
as a length. The returned value is converted to @units.
#NAME: page-size
#PARENT: Gtk.Adjustment
#COMMENT: The page size of the adjustment.
Note that the page-size is irrelevant and should be set to zero
if the adjustment is used for a simple scalar value, e.g. in a
#GtkSpinButton.
#NAME: ref
#PARENT: Gtk.TextAttributes
#COMMENT: Increments the reference count on @values.
#NAME: get_selection
#PARENT: Gtk.TreeView
#COMMENT: Gets the #GtkTreeSelection associated with @tree_view.
#NAME: style
#PARENT: Gtk.paint_flat_box.none
#COMMENT: a #GtkStyle
#NAME: argvp
#PARENT: Gtk.test_init.none
#COMMENT: Address of the
       `argv` parameter of main().
       Any parameters understood by g_test_init() or gtk_init() are
       stripped before return.
#NAME: get_website_label
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the label used for the website link.
#NAME: func
#PARENT: Gtk.CellLayout.set_cell_data_func.none
#COMMENT: the #GtkCellLayoutDataFunc to use, or %NULL
#NAME: create_tool_item
#PARENT: Gtk.ActionClass.create_tool_item.create_tool_item
#COMMENT: a toolbar item connected to the action.
#NAME: get_ellipsize_mode
#PARENT: Gtk.ToolItem
#COMMENT: Returns the ellipsize mode used for @tool_item. Custom subclasses of
#GtkToolItem should call this function to find out how text should
be ellipsized.
#NAME: spin_button
#PARENT: Gtk.SpinButton.set_numeric.none
#COMMENT: a #GtkSpinButton
#NAME: application
#PARENT: Gtk.Application.remove_window.none
#COMMENT: a #GtkApplication
#NAME: text
#PARENT: Gtk.FontChooser.set_preview_text.none
#COMMENT: the text to display in the preview area
#NAME: set_text
#PARENT: Gtk.SelectionData
#COMMENT: Sets the contents of the selection from a UTF-8 encoded string.
The string is converted to the form determined by
@selection_data->target.
#NAME: range
#PARENT: Gtk.Range.set_adjustment.none
#COMMENT: a #GtkRange
#NAME: get_placeholder_text
#PARENT: Gtk.Entry
#COMMENT: Retrieves the text that will be displayed when @entry is empty and unfocused
#NAME: rc_parse_priority
#PARENT: Gtk.rc_parse_priority
#COMMENT: %G_TOKEN_NONE if parsing succeeded, otherwise the token
  that was expected but not found.
#NAME: icon_view
#PARENT: Gtk.IconView.set_margin.none
#COMMENT: a #GtkIconView
#NAME: child
#PARENT: Gtk.TextView.move_child.none
#COMMENT: child widget already added to the text view
#NAME: box
#PARENT: Gtk.Box.pack_start.none
#COMMENT: a #GtkBox
#NAME: iter
#PARENT: Gtk.ListStore.insert_with_valuesv.none
#COMMENT: An unset #GtkTreeIter to set to the new row, or %NULL.
#NAME: show_arrow
#PARENT: Gtk.Toolbar.set_show_arrow.none
#COMMENT: Whether to show an overflow menu
#NAME: path
#PARENT: Gtk.WidgetPath.iter_list_regions.utf8
#COMMENT: a #GtkWidgetPath
#NAME: set_tooltip_markup
#PARENT: Gtk.StatusIcon
#COMMENT: Sets @markup as the contents of the tooltip, which is marked up with
 the [Pango text markup language][PangoMarkupFormat].

This function will take care of setting #GtkStatusIcon:has-tooltip to %TRUE
and of the default handler for the #GtkStatusIcon::query-tooltip signal.

See also the #GtkStatusIcon:tooltip-markup property and
gtk_tooltip_set_markup().
#NAME: new_with_buffer
#PARENT: Gtk.Entry
#COMMENT: Creates a new entry with the specified text buffer.
#NAME: page
#PARENT: Gtk.Assistant.get_page_title.utf8
#COMMENT: a page of @assistant
#NAME: pointing-to
#PARENT: Gtk.Popover
#COMMENT: Marks a specific rectangle to be pointed.
#NAME: button-release-event
#PARENT: Gtk.StatusIcon
#COMMENT: The ::button-release-event signal will be emitted when a button
(typically from a mouse) is released.

Whether this event is emitted is platform-dependent.  Use the ::activate
and ::popup-menu signals in preference.
#NAME: set_icon_widget
#PARENT: Gtk.ToolButton
#COMMENT: Sets @icon as the widget used as icon on @button. If @icon_widget is
%NULL the icon is determined by the “stock_id” property. If the
“stock_id” property is also %NULL, @button will not have an icon.
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_has_entry.gboolean
#COMMENT: a #GtkComboBox
#NAME: entry
#PARENT: Gtk.Entry.get_icon_gicon.Gio.Icon
#COMMENT: A #GtkEntry
#NAME: test_find_sibling
#PARENT: Gtk
#COMMENT: This function will search siblings of @base_widget and siblings of its
ancestors for all widgets matching @widget_type.
Of the matching widgets, the one that is geometrically closest to
@base_widget will be returned.
The general purpose of this function is to find the most likely “action”
widget, relative to another labeling widget. Such as finding a
button or text entry widget, given its corresponding label widget.
#NAME: source
#PARENT: Gtk.IconSource.get_size.gint
#COMMENT: a #GtkIconSource
#NAME: set_from_file
#PARENT: Gtk.Image
#COMMENT: See gtk_image_new_from_file() for details.
#NAME: selection
#PARENT: Gtk.PrintPages
#COMMENT: Selected pages.
#NAME: new_from_indicesv
#PARENT: Gtk.TreePath.new_from_indicesv
#COMMENT: A newly created #GtkTreePath-struct
#NAME: get_state_flags
#PARENT: Gtk.Widget
#COMMENT: Returns the widget state as a flag set. It is worth mentioning
that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
returned, that is, also based on parent insensitivity, even if
@widget itself is sensitive.
#NAME: new_with_label
#PARENT: Gtk.CheckButton.new_with_label
#COMMENT: a #GtkWidget.
#NAME: set_name
#PARENT: Gtk.BindingSet.find.BindingSet
#COMMENT: unique binding set name
#NAME: get_page_ranges
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.
#NAME: get_icon_size
#PARENT: Gtk.ToolItem.get_icon_size
#COMMENT: a #GtkIconSize indicating the icon size
used for @tool_item
#NAME: state_type
#PARENT: Gtk.paint_box.none
#COMMENT: a state
#NAME: event
#PARENT: Gtk.CellArea.activate_cell.gboolean
#COMMENT: the #GdkEvent for which cell activation should occur
#NAME: about
#PARENT: Gtk.AboutDialog.get_version.utf8
#COMMENT: a #GtkAboutDialog
#NAME: lowercase
#PARENT: Gtk.InputHints
#COMMENT: Suggest to convert all text to lowercase
#NAME: get_active
#PARENT: Gtk.ComboBox.get_active
#COMMENT: An integer which is the index of the currently active item,
    or -1 if there’s no active item.
#NAME: has_renderer
#PARENT: Gtk.CellArea.has_renderer
#COMMENT: %TRUE if @renderer is in the @area.
#NAME: adjustment
#PARENT: Gtk.HScrollbar.new.Widget
#COMMENT: the #GtkAdjustment to use, or %NULL to create a new adjustment
#NAME: menu
#PARENT: Gtk.Menu.get_attach_widget.Widget
#COMMENT: a #GtkMenu
#NAME: get_name
#PARENT: Gtk.TextMark.get_name
#COMMENT: mark name
#NAME: shell
#PARENT: Gtk.ToolShell.get_text_size_group.SizeGroup
#COMMENT: a #GtkToolShell
#NAME: select_path
#PARENT: Gtk.TreeSelection
#COMMENT: Select the row at @path.
#NAME: func_data
#PARENT: Gtk.TreeViewColumn.set_cell_data_func.none
#COMMENT: The user data for @func.
#NAME: wait_for_contents
#PARENT: Gtk.Clipboard
#COMMENT: Requests the contents of the clipboard using the given target.
This function waits for the data to be received using the main
loop, so events, timeouts, etc, may be dispatched during the wait.
#NAME: orientation
#PARENT: Gtk.PrintSettings.set_orientation.none
#COMMENT: a page orientation
#NAME: child
#PARENT: Gtk.Container.propagate_draw.none
#COMMENT: a child of @container
#NAME: source
#PARENT: Gtk.IconSource.free.none
#COMMENT: a #GtkIconSource
#NAME: copy_context
#PARENT: Gtk.CellAreaClass.copy_context.copy_context
#COMMENT: a newly created #GtkCellAreaContext copy of @context.
#NAME: text
#PARENT: Gtk.TextBufferTargetInfo
#COMMENT: Text
#NAME: support_multidevice
#PARENT: Gtk.Widget.set_support_multidevice.none
#COMMENT: %TRUE to support input from multiple devices.
#NAME: load_symbolic_for_style
#PARENT: Gtk.IconInfo.load_symbolic_for_style
#COMMENT: a #GdkPixbuf representing the loaded icon
#NAME: get_offset
#PARENT: Gtk.GestureDrag
#COMMENT: If the @gesture is active, this function returns %TRUE and
fills in @x and @y with the coordinates of the current point,
as an offset to the starting drag point.
#NAME: get_preview_widget_active
#PARENT: Gtk.FileChooser
#COMMENT: Gets whether the preview widget set by gtk_file_chooser_set_preview_widget()
should be shown for the current filename. See
gtk_file_chooser_set_preview_widget_active().
#NAME: font_button
#PARENT: Gtk.FontButton.set_show_style.none
#COMMENT: a #GtkFontButton
#NAME: text
#PARENT: Gtk.ClipboardTextReceivedFunc.none
#COMMENT: the text received, as a UTF-8 encoded string, or
  %NULL if retrieving the data failed.
#NAME: set_modified
#PARENT: Gtk.TextBuffer
#COMMENT: Used to keep track of whether the buffer has been modified since the
last time it was saved. Whenever the buffer is saved to disk, call
gtk_text_buffer_set_modified (@buffer, FALSE). When the buffer is modified,
it will automatically toggled on the modified bit again. When the modified
bit flips, the buffer emits the #GtkTextBuffer::modified-changed signal.
#NAME: tree_store
#PARENT: Gtk.TreeStore.is_ancestor.gboolean
#COMMENT: A #GtkTreeStore
#NAME: iter
#PARENT: Gtk.TreeModelIface.iter_n_children.iter_n_children.gint
#COMMENT: the #GtkTreeIter-struct, or %NULL
#NAME: first_prop_name
#PARENT: Gtk.CellArea.cell_get.none
#COMMENT: the name of the first cell property to get
#NAME: unmap
#PARENT: Gtk.Widget
#COMMENT: The ::unmap signal is emitted when @widget is going to be unmapped, which
means that either it or any of its parents up to the toplevel widget have
been set as hidden.

As ::unmap indicates that a widget will not be shown any longer, it can be
used to, for example, stop an animation on the widget.
#NAME: calendar
#PARENT: Gtk.Calendar.mark_day.none
#COMMENT: a #GtkCalendar
#NAME: get_children
#PARENT: Gtk.Container
#COMMENT: Returns the container’s non-internal children. See
gtk_container_forall() for details on what constitutes an "internal" child.
#NAME: n_chars
#PARENT: Gtk.EntryBuffer.deleted-text.none
#COMMENT: The number of characters that were deleted.
#NAME: set_submenu
#PARENT: Gtk.MenuItem
#COMMENT: Sets or replaces the menu item’s submenu, or removes it when a %NULL
submenu is passed.
#NAME: end
#PARENT: Gtk.TextBuffer.serialize.guint8
#COMMENT: end of block of test to serialize
#NAME: set_step_increment
#PARENT: Gtk.Adjustment
#COMMENT: Sets the step increment of the adjustment.

See gtk_adjustment_set_lower() about how to compress multiple
emissions of the #GtkAdjustment::changed signal when setting multiple adjustment
properties.
#NAME: name
#PARENT: Gtk.ThemingEngine.load.ThemingEngine
#COMMENT: Theme engine name to load
#NAME: iter
#PARENT: Gtk.TreeStore.append.none
#COMMENT: An unset #GtkTreeIter to set to the appended row
#NAME: get_label
#PARENT: Gtk.Frame.get_label
#COMMENT: the text in the label, or %NULL if there
              was no label widget or the lable widget was not
              a #GtkLabel. This string is owned by GTK+ and
              must not be modified or freed.
#NAME: notebook
#PARENT: Gtk.Notebook.insert_page.gint
#COMMENT: a #GtkNotebook
#NAME: new_with_label
#PARENT: Gtk.RadioButton.new_with_label
#COMMENT: a new radio button.
#NAME: text
#PARENT: Gtk.StatusIcon.set_tooltip_text.none
#COMMENT: the contents of the tooltip for @status_icon
#NAME: size_allocate
#PARENT: Gtk.Widget
#COMMENT: This function is only used by #GtkContainer subclasses, to assign a size
and position to their child widgets.

In this function, the allocation may be adjusted. It will be forced
to a 1x1 minimum size, and the adjust_size_allocation virtual
method on the child will be used to adjust the allocation. Standard
adjustments include removing the widget’s margins, and applying the
widget’s #GtkWidget:halign and #GtkWidget:valign properties.

For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
instead.
#NAME: style
#PARENT: Gtk.Style.get.none
#COMMENT: a #GtkStyle
#NAME: backward_visible_cursor_position
#PARENT: Gtk.TextIter
#COMMENT: Moves @iter forward to the previous visible cursor position. See
gtk_text_iter_backward_cursor_position() for details.
#NAME: set_show_default
#PARENT: Gtk.AppChooserWidget
#COMMENT: Sets whether the app chooser should show the default handler
for the content type in a separate section.
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.row_changed.row_changed.none
#COMMENT: a #GtkTreeModel
#NAME: chooser
#PARENT: Gtk.ColorChooser.get_use_alpha.gboolean
#COMMENT: a #GtkColorChooser
#NAME: starts_word
#PARENT: Gtk.TextIter.starts_word
#COMMENT: %TRUE if @iter is at the start of a word
#NAME: get_activate_on_single_click
#PARENT: Gtk.ListBox
#COMMENT: Returns whether rows activate on single clicks.
#NAME: list_accel_closures
#PARENT: Gtk.Widget
#COMMENT: Lists the closures used by @widget for accelerator group connections
with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
The closures can be used to monitor accelerator changes on @widget,
by connecting to the @GtkAccelGroup::accel-changed signal of the
#GtkAccelGroup of a closure which can be found out with
gtk_accel_group_from_accel_closure().
#NAME: chars
#PARENT: Gtk.EntryBuffer.insert_text.guint
#COMMENT: the text to insert into the buffer.
#NAME: builder
#PARENT: Gtk.Buildable.construct_child.GObject.Object
#COMMENT: #GtkBuilder used to construct this object
#NAME: builder
#PARENT: Gtk.BuildableIface.set_buildable_property.set_buildable_property.none
#COMMENT: a #GtkBuilder
#NAME: set_action_target
#PARENT: Gtk.Actionable
#COMMENT: Sets the target of an actionable widget.

This is a convenience function that calls g_variant_new() for
@format_string and uses the result to call
gtk_actionable_set_action_target_value().

If you are setting a string-valued target and want to set the action
name at the same time, you can use
gtk_actionable_set_detailed_action_name ().
#NAME: notebook
#PARENT: Gtk.Notebook.get_show_border.gboolean
#COMMENT: a #GtkNotebook
#NAME: path
#PARENT: Gtk.TreeDragSource.row_draggable.gboolean
#COMMENT: row on which user is initiating a drag
#NAME: attribute
#PARENT: Gtk.CellLayoutIface.add_attribute.add_attribute.none
#COMMENT: an attribute on the renderer
#NAME: set_current_page
#PARENT: Gtk.Assistant
#COMMENT: Switches the page to @page_num.

Note that this will only be necessary in custom buttons,
as the @assistant flow can be set with
gtk_assistant_set_forward_page_func().
#NAME: load_from_path
#PARENT: Gtk.CssProvider
#COMMENT: Loads the data contained in @path into @css_provider, making it clear
any previously loaded information.
#NAME: event
#PARENT: Gtk.WidgetClass.event.event
#COMMENT: return from the event signal emission (%TRUE if
              the event was handled)
#NAME: get_lines
#PARENT: Gtk.Label
#COMMENT: Gets the number of lines to which an ellipsized, wrapping
label should be limited. See gtk_label_set_lines().
#NAME: new
#PARENT: Gtk.Notebook.new
#COMMENT: the newly created #GtkNotebook
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.get_min_content_width.gint
#COMMENT: a #GtkScrolledWindow
#NAME: set_uris
#PARENT: Gtk.SelectionData.set_uris
#COMMENT: %TRUE if the selection was successfully set,
  otherwise %FALSE.
#NAME: set_active_iter
#PARENT: Gtk.ComboBox
#COMMENT: Sets the current active item to be the one referenced by @iter, or
unsets the active item if @iter is %NULL.
#NAME: path
#PARENT: Gtk.TreeViewClass.row_activated.row_activated.none
#COMMENT: The #GtkTreePath to be activated.
#NAME: count
#PARENT: Gtk.TextIter.forward_visible_word_ends.gboolean
#COMMENT: number of times to move
#NAME: list_store
#PARENT: Gtk.ListStore.prepend.none
#COMMENT: A #GtkListStore
#NAME: child
#PARENT: Gtk.MenuShell.insert.none
#COMMENT: the #GtkMenuItem that is being inserted
#NAME: group_name
#PARENT: Gtk.PageSetup.load_key_file.gboolean
#COMMENT: the name of the group in the key_file to read, or %NULL
             to use the default name “Page Setup”
#NAME: get_lower_stepper_sensitivity
#PARENT: Gtk.Range.get_lower_stepper_sensitivity
#COMMENT: The lower stepper’s sensitivity policy.
#NAME: cr
#PARENT: Gtk.paint_vline.none
#COMMENT: a #cairo_t
#NAME: op
#PARENT: Gtk.PrintOperation.set_print_settings.none
#COMMENT: a #GtkPrintOperation
#NAME: get_mapped
#PARENT: Gtk.Widget
#COMMENT: Whether the widget is mapped.
#NAME: value
#PARENT: Gtk.Widget.style_get_property.none
#COMMENT: location to return the property value
#NAME: event
#PARENT: Gtk.CellArea
#COMMENT: Delegates event handling to a #GtkCellArea.
#NAME: widget
#PARENT: Gtk.Container.add.none
#COMMENT: a widget to be placed inside @container
#NAME: rc
#PARENT: Gtk.PathPriorityType
#COMMENT: Deprecated
#NAME: copy
#PARENT: Gtk.TargetEntry
#COMMENT: Makes a copy of a #GtkTargetEntry and its data.
#NAME: completion
#PARENT: Gtk.EntryCompletion.set_inline_completion.none
#COMMENT: a #GtkEntryCompletion
#NAME: data
#PARENT: Gtk.ListBox.selected_foreach.none
#COMMENT: user data to pass to the function
#NAME: STYLE_CLASS_LEVEL_BAR
#PARENT: Gtk
#COMMENT: A CSS class used when rendering a level indicator, such
as a battery charge level, or a password strength.

This is used by #GtkLevelBar.
#NAME: name
#PARENT: Gtk.Stack.add_titled.none
#COMMENT: the name for @child
#NAME: end
#PARENT: Gtk.TextBuffer.apply_tag.none
#COMMENT: other bound of range to be tagged
#NAME: get_selected_rows
#PARENT: Gtk.TreeSelection.get_selected_rows
#COMMENT: A #GList containing a #GtkTreePath for each selected row.
#NAME: iter_clear_classes
#PARENT: Gtk.WidgetPath
#COMMENT: Removes all classes from the widget at position @pos in the
hierarchy defined in @path.
#NAME: set_show_default_item
#PARENT: Gtk.AppChooserButton
#COMMENT: Sets whether the dropdown menu of this button should show the
default application for the given content type at top.
#NAME: expand
#PARENT: Gtk.Box.pack_end.none
#COMMENT: %TRUE if the new child is to be given extra space allocated
  to @box. The extra space will be divided evenly between all children
  of @box that use this option
#NAME: paragraphs
#PARENT: Gtk.DeleteType
#COMMENT: Delete entire line. Like C-k in pico.
#NAME: NumberUpLayout
#PARENT: Gtk
#COMMENT: Used to determine the layout of pages on a sheet when printing
multiple pages per sheet.
#NAME: n_targets
#PARENT: Gtk.Widget.drag_source_set.none
#COMMENT: the number of items in @targets
#NAME: custom
#PARENT: Gtk.License
#COMMENT: A license text is going to be specified by the
  developer
#NAME: widget
#PARENT: Gtk.selection_convert.gboolean
#COMMENT: The widget which acts as requestor
#NAME: show_about_dialog
#PARENT: Gtk
#COMMENT: This is a convenience function for showing an application’s about box.
The constructed dialog is associated with the parent window and
reused for future invocations of this function.
#NAME: get_end_position
#PARENT: Gtk.CssSection
#COMMENT: Returns the offset in bytes from the start of the current line
returned via gtk_css_section_get_end_line().
This value may change in future invocations of this function if
@section is not yet parsed completely. This will for example
happen in the GtkCssProvider::parsing-error signal.
The end position and line may be identical to the start
position and line for sections which failed to parse anything
successfully.
#NAME: area
#PARENT: Gtk.EntryCompletion.new_with_area.EntryCompletion
#COMMENT: the #GtkCellArea used to layout cells
#NAME: copy
#PARENT: Gtk.Style
#COMMENT: Creates a copy of the passed in #GtkStyle object.
#NAME: set_valist
#PARENT: Gtk.StyleProperties
#COMMENT: Sets several style properties on @props.
#NAME: pbar
#PARENT: Gtk.ProgressBar.pulse.none
#COMMENT: a #GtkProgressBar
#NAME: info
#PARENT: Gtk.RecentInfo.get_groups.utf8
#COMMENT: a #GtkRecentInfo
#NAME: get_size
#PARENT: Gtk.Layout
#COMMENT: Gets the size that has been set on the layout, and that determines
the total extents of the layout’s scrollbar area. See
gtk_layout_set_size ().
#NAME: x
#PARENT: Gtk.Layout.put.none
#COMMENT: X position of child widget
#NAME: menu
#PARENT: Gtk.Menu.set_active.none
#COMMENT: a #GtkMenu
#NAME: child
#PARENT: Gtk.Notebook.get_tab_label.Widget
#COMMENT: the page
#NAME: y
#PARENT: Gtk.Layout.put.none
#COMMENT: Y position of child widget
#NAME: sort-column-changed
#PARENT: Gtk.TreeSortable
#COMMENT: The ::sort-column-changed signal is emitted when the sort column
or sort order of @sortable is changed. The signal is emitted before
the contents of @sortable are resorted.
#NAME: widget
#PARENT: Gtk.Widget.get_modifier_style.RcStyle
#COMMENT: a #GtkWidget
#NAME: copy
#PARENT: Gtk.StockItem.copy
#COMMENT: a new #GtkStockItem
#NAME: forward_search
#PARENT: Gtk.TextIter.forward_search
#COMMENT: whether a match was found
#NAME: set_tooltip
#PARENT: Gtk.Action
#COMMENT: Sets the tooltip text on @action
#NAME: cell_is_visible
#PARENT: Gtk.TreeViewColumn.cell_is_visible
#COMMENT: %TRUE, if any of the cells packed into the @tree_column are currently visible
#NAME: grid
#PARENT: Gtk.Grid.get_column_homogeneous.gboolean
#COMMENT: a #GtkGrid
#NAME: application
#PARENT: Gtk.Application.set_menubar.none
#COMMENT: a #GtkApplication
#NAME: portrait
#PARENT: Gtk.PageOrientation
#COMMENT: Portrait mode.
#NAME: ScrollType
#PARENT: Gtk
#COMMENT: Scrolling types.
#NAME: get_request_mode
#PARENT: Gtk.Widget.get_request_mode
#COMMENT: The #GtkSizeRequestMode preferred by @widget.
#NAME: accelerator_key
#PARENT: Gtk.AccelLabel.set_accel.none
#COMMENT: a keyval, or 0
#NAME: item-activated
#PARENT: Gtk.IconView
#COMMENT: The ::item-activated signal is emitted when the method
gtk_icon_view_item_activated() is called, when the user double
clicks an item with the "activate-on-single-click" property set
to %FALSE, or when the user single clicks an item when the
"activate-on-single-click" property set to %TRUE. It is also
emitted when a non-editable item is selected and one of the keys:
Space, Return or Enter is pressed.
#NAME: name
#PARENT: Gtk.LevelBar.remove_offset_value.none
#COMMENT: the name of an offset in the bar
#NAME: local_only
#PARENT: Gtk.PlacesSidebar.set_local_only.none
#COMMENT: whether to show only local files
#NAME: label
#PARENT: Gtk.RadioMenuItem.new_with_mnemonic.Widget
#COMMENT: the text of the button, with an underscore in front of the
        mnemonic character
#NAME: insensitive
#PARENT: Gtk.StateFlags
#COMMENT: Widget is insensitive.
#NAME: delete_action
#PARENT: Gtk.EntryCompletion
#COMMENT: Deletes the action at @index_ from @completion’s action list.
#NAME: natural_width
#PARENT: Gtk.WidgetClass.get_preferred_width.get_preferred_width.none
#COMMENT: location to store the natural width, or %NULL
#NAME: icon_view
#PARENT: Gtk.IconView.get_activate_on_single_click.gboolean
#COMMENT: a #GtkIconView
#NAME: paned
#PARENT: Gtk.Paned.add1.none
#COMMENT: a paned widget
#NAME: value
#PARENT: Gtk.RadioAction.new.RadioAction
#COMMENT: The value which gtk_radio_action_get_current_value() should
  return if this action is selected.
#NAME: dialog
#PARENT: Gtk.IconSize
#COMMENT: Size appropriate for dialogs (48px)
#NAME: sorted
#PARENT: Gtk.RegionFlags
#COMMENT: Region is part of a sorted area.
#NAME: STYLE_CLASS_TOOLTIP
#PARENT: Gtk
#COMMENT: A CSS class to match tooltip windows.
#NAME: lookup_color
#PARENT: Gtk.Style.lookup_color
#COMMENT: %TRUE if the mapping was found.
#NAME: selection
#PARENT: Gtk.selection_owner_set.gboolean
#COMMENT: an interned atom representing the selection to claim
#NAME: get_section_type
#PARENT: Gtk.CssSection.get_section_type
#COMMENT: the type of @section
#NAME: builder
#PARENT: Gtk.Builder.lookup_callback_symbol.GObject.Callback
#COMMENT: a #GtkBuilder
#NAME: menu
#PARENT: Gtk.Menu.set_monitor.none
#COMMENT: a #GtkMenu
#NAME: setting
#PARENT: Gtk.Range.set_inverted.none
#COMMENT: %TRUE to invert the range
#NAME: new
#PARENT: Gtk.GestureSwipe.new
#COMMENT: a newly created #GtkGestureSwipe
#NAME: cell_x
#PARENT: Gtk.TreeView.get_path_at_pos.gboolean
#COMMENT: A pointer where the X coordinate
  relative to the cell can be placed, or %NULL
#NAME: drag-data-delete
#PARENT: Gtk.Widget
#COMMENT: The ::drag-data-delete signal is emitted on the drag source when a drag
with the action %GDK_ACTION_MOVE is successfully completed. The signal
handler is responsible for deleting the data that has been dropped. What
"delete" means depends on the context of the drag operation.
#NAME: combo_box
#PARENT: Gtk.ComboBox.set_id_column.none
#COMMENT: A #GtkComboBox
#NAME: new
#PARENT: Gtk.AboutDialog.new
#COMMENT: a newly created #GtkAboutDialog
#NAME: invisible
#PARENT: Gtk.TextAttributes
#COMMENT: Hide the text.
#NAME: cell_y
#PARENT: Gtk.TreeView.get_path_at_pos.gboolean
#COMMENT: A pointer where the Y coordinate
  relative to the cell can be placed, or %NULL
#NAME: drag_dest_add_image_targets
#PARENT: Gtk.Widget
#COMMENT: Add the image targets supported by #GtkSelectionData to
the target list of the drag destination. The targets
are added with @info = 0. If you need another value,
use gtk_target_list_add_image_targets() and
gtk_drag_dest_set_target_list().
#NAME: cr
#PARENT: Gtk.paint_expander.none
#COMMENT: a #cairo_t
#NAME: wrap-mode
#PARENT: Gtk.CellRendererText
#COMMENT: Specifies how to break the string into multiple lines, if the cell
renderer does not have enough room to display the entire string.
This property has no effect unless the wrap-width property is set.
#NAME: mnemonics-visible
#PARENT: Gtk.Window
#COMMENT: Whether mnemonics are currently visible in this window.

This property is maintained by GTK+ based on user input,
and should not be set by applications.
#NAME: widget
#PARENT: Gtk.CellAreaClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: the #GtkWidget where @area will be rendering
#NAME: chooser
#PARENT: Gtk.FileChooser.get_select_multiple.gboolean
#COMMENT: a #GtkFileChooser
#NAME: new
#PARENT: Gtk.TextMark
#COMMENT: Creates a text mark. Add it to a buffer using gtk_text_buffer_add_mark().
If @name is %NULL, the mark is anonymous; otherwise, the mark can be
retrieved by name using gtk_text_buffer_get_mark(). If a mark has left
gravity, and text is inserted at the mark’s current location, the mark
will be moved to the left of the newly-inserted text. If the mark has
right gravity (@left_gravity = %FALSE), the mark will end up on the
right of newly-inserted text. The standard left-to-right cursor is a
mark with right gravity (when you type, the cursor stays on the right
side of the text you’re typing).
#NAME: b
#PARENT: Gtk.rgb_to_hsv.none
#COMMENT: Blue
#NAME: area
#PARENT: Gtk.ComboBox.new_with_area_and_entry.Widget
#COMMENT: the #GtkCellArea to use to layout cell renderers
#NAME: xalign
#PARENT: Gtk.Label.set_xalign.none
#COMMENT: the new xalign value, between 0 and 1
#NAME: get_custom_title
#PARENT: Gtk.HeaderBar.get_custom_title
#COMMENT: the custom title widget
   of the header, or %NULL if none has been set explicitly.
#NAME: layout
#PARENT: Gtk.Layout.get_size.none
#COMMENT: a #GtkLayout
#NAME: list_store
#PARENT: Gtk.ListStore.insert.none
#COMMENT: A #GtkListStore
#NAME: set_policy
#PARENT: Gtk.ScrolledWindow
#COMMENT: Sets the scrollbar policy for the horizontal and vertical scrollbars.

The policy determines when the scrollbar should appear; it is a value
from the #GtkPolicyType enumeration. If %GTK_POLICY_ALWAYS, the
scrollbar is always present; if %GTK_POLICY_NEVER, the scrollbar is
never present; if %GTK_POLICY_AUTOMATIC, the scrollbar is present only
if needed (that is, if the slider part of the bar would be smaller
than the trough — the display is larger than the page size).
#NAME: over_left_right
#PARENT: Gtk.StackTransitionType
#COMMENT: Cover the old page sliding left or uncover the new page sliding right, according to order. Since: 3.14
#NAME: size_request
#PARENT: Gtk.Widget
#COMMENT: This function is typically used when implementing a #GtkContainer
subclass.  Obtains the preferred size of a widget. The container
uses this information to arrange its child widgets and decide what
size allocations to give them with gtk_widget_size_allocate().

You can also call this function from an application, with some
caveats. Most notably, getting a size request requires the widget
to be associated with a screen, because font information may be
needed. Multihead-aware applications should keep this in mind.

Also remember that the size request is not necessarily the size
a widget will actually be allocated.
#NAME: activate-default
#PARENT: Gtk.Window
#COMMENT: The ::activate-default signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user activates the default widget
of @window.
#NAME: focus_column
#PARENT: Gtk.TreeView.set_cursor_on_cell.none
#COMMENT: A #GtkTreeViewColumn, or %NULL
#NAME: show
#PARENT: Gtk.Widget
#COMMENT: The ::show signal is emitted when @widget is shown, for example with
gtk_widget_show().
#NAME: action
#PARENT: Gtk.FileChooserButton.new.Widget
#COMMENT: the open mode for the widget.
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.set_min_content_width.none
#COMMENT: a #GtkScrolledWindow
#NAME: g
#PARENT: Gtk.rgb_to_hsv.none
#COMMENT: Green
#NAME: set_vscroll_policy
#PARENT: Gtk.Scrollable
#COMMENT: Sets the #GtkScrollablePolicy to determine whether
vertical scrolling should start below the minimum height or
below the natural height.
#NAME: get_state
#PARENT: Gtk.ThemingEngine
#COMMENT: returns the state used when rendering.
#NAME: h
#PARENT: Gtk.rgb_to_hsv.none
#COMMENT: Return value for the hue component
#NAME: STOCK_NO
#PARENT: Gtk
#COMMENT: The “No” item and icon.
#NAME: visible_vertical
#PARENT: Gtk.ToolItem.set_visible_vertical.none
#COMMENT: whether @tool_item is visible when the toolbar
is in vertical mode
#NAME: set_color
#PARENT: Gtk.ColorButton
#COMMENT: Sets the current color to be @color.
#NAME: yes
#PARENT: Gtk.ResponseType
#COMMENT: Returned by Yes buttons in GTK+ dialogs
#NAME: widget
#PARENT: Gtk.paint_flat_box.none
#COMMENT: the widget
#NAME: rlbt
#PARENT: Gtk.NumberUpLayout
#COMMENT: ![](layout-rlbt.png)
#NAME: path
#PARENT: Gtk.TreeSelectionForeachFunc.none
#COMMENT: The #GtkTreePath of a selected row
#NAME: action
#PARENT: Gtk.Action.get_visible.gboolean
#COMMENT: the action object
#NAME: file
#PARENT: Gtk.FileChooser.select_file.gboolean
#COMMENT: the file to select
#NAME: data
#PARENT: Gtk.TreeView.set_row_separator_func.none
#COMMENT: user data to pass to @func, or %NULL
#NAME: list_accel_closures
#PARENT: Gtk.Widget.list_accel_closures
#COMMENT: 
    a newly allocated #GList of closures
#NAME: context
#PARENT: Gtk.StyleContext.get_screen.Gdk.Screen
#COMMENT: a #GtkStyleContext
#NAME: direction
#PARENT: Gtk.CellArea.focus.gboolean
#COMMENT: the #GtkDirectionType
#NAME: image_menu_item
#PARENT: Gtk.ImageMenuItem.set_accel_group.none
#COMMENT: a #GtkImageMenuItem
#NAME: settings
#PARENT: Gtk.PrintSettings.get_media_type.utf8
#COMMENT: a #GtkPrintSettings
#NAME: begin_resize_drag
#PARENT: Gtk.Window
#COMMENT: Starts resizing a window. This function is used if an application
has window resizing controls. When GDK can support it, the resize
will be done using the standard mechanism for the
[window manager][gtk-X11-arch] or windowing
system. Otherwise, GDK will try to emulate window resizing,
potentially not all that well, depending on the windowing system.
#NAME: focus_out
#PARENT: Gtk.IMContext
#COMMENT: Notify the input method that the widget to which this
input context corresponds has lost focus. The input method
may, for example, change the displayed feedback or reset the contexts
state to reflect this change.
#NAME: state
#PARENT: Gtk.StyleContext.get_color.none
#COMMENT: state to retrieve the color for
#NAME: filename
#PARENT: Gtk.UIManager.add_ui_from_file.guint
#COMMENT: the name of the file to parse
#NAME: paint_tab
#PARENT: Gtk
#COMMENT: Draws an option menu tab (i.e. the up and down pointing arrows)
in the given rectangle on @cr using the given parameters.
#NAME: rc_get_im_module_file
#PARENT: Gtk.rc_get_im_module_file
#COMMENT: a newly-allocated string containing the
   name of the file listing the IM modules available for loading
#NAME: set_file
#PARENT: Gtk.FileChooser
#COMMENT: Sets @file as the current filename for the file chooser, by changing
to the file’s parent folder and actually selecting the file in list.  If
the @chooser is in %GTK_FILE_CHOOSER_ACTION_SAVE mode, the file’s base name
will also appear in the dialog’s file name entry.

If the file name isn’t in the current folder of @chooser, then the current
folder of @chooser will be changed to the folder containing @filename. This
is equivalent to a sequence of gtk_file_chooser_unselect_all() followed by
gtk_file_chooser_select_filename().

Note that the file must exist, or nothing will be done except
for the directory change.

If you are implementing a save dialog,
you should use this function if you already have a file name to which the
user may save; for example, when the user opens an existing file and then
does Save As...  If you don’t have
a file name already — for example, if the user just created a new
file and is saving it for the first time, do not call this function.
Instead, use something similar to this:
|[<!-- language="C" -->
if (document_is_new)
  {
    // the user just created a new document
    gtk_file_chooser_set_current_folder_file (chooser, default_file_for_saving);
    gtk_file_chooser_set_current_name (chooser, "Untitled document");
  }
else
  {
    // the user edited an existing document
    gtk_file_chooser_set_file (chooser, existing_file);
  }
]|
#NAME: chooser
#PARENT: Gtk.FileChooser.get_filenames.filename
#COMMENT: a #GtkFileChooser
#NAME: get_left_margin
#PARENT: Gtk.PageSetup.get_left_margin
#COMMENT: the left margin
#NAME: last
#PARENT: Gtk.RegionFlags
#COMMENT: Region is the last one within a set.
#NAME: value
#PARENT: Gtk.ScaleButton.set_value.none
#COMMENT: new value of the scale button
#NAME: status_icon
#PARENT: Gtk.StatusIcon.get_tooltip_text.utf8
#COMMENT: a #GtkStatusIcon
#NAME: group
#PARENT: Gtk.ToolItemGroup.get_label.utf8
#COMMENT: a #GtkToolItemGroup
#NAME: set_visual
#PARENT: Gtk.Widget
#COMMENT: Sets the visual that should be used for by widget and its children for
creating #GdkWindows. The visual must be on the same #GdkScreen as
returned by gtk_widget_get_screen(), so handling the
#GtkWidget::screen-changed signal is necessary.

Setting a new @visual will not cause @widget to recreate its windows,
so you should call this function before @widget is realized.
#NAME: window
#PARENT: Gtk.Window.set_application.none
#COMMENT: a #GtkWindow
#NAME: r
#PARENT: Gtk.rgb_to_hsv.none
#COMMENT: Red
#NAME: get_center_widget
#PARENT: Gtk.ActionBar.get_center_widget
#COMMENT: the center #GtkWidget.
#NAME: get_text_column
#PARENT: Gtk.IconView
#COMMENT: Returns the column with text for @icon_view.
#NAME: notebook
#PARENT: Gtk.Notebook.set_tab_reorderable.none
#COMMENT: a #GtkNotebook
#NAME: s
#PARENT: Gtk.rgb_to_hsv.none
#COMMENT: Return value for the saturation component
#NAME: preedit-end
#PARENT: Gtk.IMContext
#COMMENT: The ::preedit-end signal is emitted when a preediting sequence
has been completed or canceled.
#NAME: start_pos
#PARENT: Gtk.Editable.get_selection_bounds.gboolean
#COMMENT: location to store the starting position, or %NULL
#NAME: area
#PARENT: Gtk.CellArea.cell_get.none
#COMMENT: a #GtkCellArea
#NAME: gtk-cursor-blink
#PARENT: Gtk.Settings
#COMMENT: Whether the cursor should blink.

Also see the #GtkSettings:gtk-cursor-blink-timeout setting,
which allows more flexible control over cursor blinking.
#NAME: get_ignore_hidden
#PARENT: Gtk.SizeGroup
#COMMENT: Returns if invisible widgets are ignored when calculating the size.
#NAME: action
#PARENT: Gtk.RadioAction.set_group.none
#COMMENT: the action object
#NAME: forward_cursor_position
#PARENT: Gtk.TextIter
#COMMENT: Moves @iter forward by a single cursor position. Cursor positions
are (unsurprisingly) positions where the cursor can appear. Perhaps
surprisingly, there may not be a cursor position between all
characters. The most common example for European languages would be
a carriage return/newline sequence. For some Unicode characters,
the equivalent of say the letter “a” with an accent mark will be
represented as two characters, first the letter then a "combining
mark" that causes the accent to be rendered; so the cursor can’t go
between those two characters. See also the #PangoLogAttr-struct and
pango_break() function.
#NAME: set_margin_end
#PARENT: Gtk.Widget
#COMMENT: Sets the end margin of @widget.
See the #GtkWidget:margin-end property.
#NAME: v
#PARENT: Gtk.rgb_to_hsv.none
#COMMENT: Return value for the value component
#NAME: unit
#PARENT: Gtk.PrintOperation
#COMMENT: The transformation for the cairo context obtained from
#GtkPrintContext is set up in such a way that distances
are measured in units of @unit.
#NAME: STOCK_CONVERT
#PARENT: Gtk
#COMMENT: The “Convert” item and icon.
#NAME: spacing
#PARENT: Gtk.Table.set_row_spacing.none
#COMMENT: number of pixels that the spacing should take up.
#NAME: parent_class
#PARENT: Gtk.EventBoxClass
#COMMENT: The parent class.
#NAME: connect_object
#PARENT: Gtk.BuilderConnectFunc.none
#COMMENT: a #GObject, if non-%NULL, use g_signal_connect_object()
#NAME: stock_id
#PARENT: Gtk.ImageMenuItem.new_from_stock.Widget
#COMMENT: the name of the stock item.
#NAME: filter
#PARENT: Gtk.FileFilter.add_pixbuf_formats.none
#COMMENT: a #GtkFileFilter
#NAME: has_selection
#PARENT: Gtk.PrintOperation.set_has_selection.none
#COMMENT: %TRUE indicates that a selection exists
#NAME: layout
#PARENT: Gtk.HeaderBar.set_decoration_layout.none
#COMMENT: a decoration layout, or %NULL to
    unset the layout
#NAME: get_has_origin
#PARENT: Gtk.Scale.get_has_origin
#COMMENT: %TRUE if the scale has an origin.
#NAME: unset_rows_drag_source
#PARENT: Gtk.TreeView
#COMMENT: Undoes the effect of
gtk_tree_view_enable_model_drag_source(). Calling this method sets
#GtkTreeView:reorderable to %FALSE.
#NAME: group_source
#PARENT: Gtk.RadioAction.join_group.none
#COMMENT: a radio action object whos group we are
  joining, or %NULL to remove the radio action from its group
#NAME: screen
#PARENT: Gtk.StatusIcon.get_geometry.gboolean
#COMMENT: return location for
         the screen, or %NULL if the information is not needed
#NAME: size
#PARENT: Gtk.PaperSize.get_default_bottom_margin.gdouble
#COMMENT: a #GtkPaperSize object
#NAME: tree_view
#PARENT: Gtk.TreeView.get_background_area.none
#COMMENT: a #GtkTreeView
#NAME: cr
#PARENT: Gtk.paint_hline.none
#COMMENT: a #caio_t
#NAME: get_hexpand
#PARENT: Gtk.Widget
#COMMENT: Gets whether the widget would like any available extra horizontal
space. When a user resizes a #GtkWindow, widgets with expand=TRUE
generally receive the extra space. For example, a list or
scrollable area or document in your window would often be set to
expand.

Containers should use gtk_widget_compute_expand() rather than
this function, to see whether a widget, or any of its children,
has the expand flag set. If any child of a widget wants to
expand, the parent may ask to expand also.

This function only looks at the widget’s own hexpand flag, rather
than computing whether the entire widget tree rooted at this widget
wants to expand.
#NAME: widget
#PARENT: Gtk.Widget.modify_fg.none
#COMMENT: a #GtkWidget
#NAME: set_input_hints
#PARENT: Gtk.Entry
#COMMENT: Sets the #GtkEntry:input-hints property, which
allows input methods to fine-tune their behaviour.
#NAME: iter_is_selected
#PARENT: Gtk.TreeSelection.iter_is_selected
#COMMENT: %TRUE, if @iter is selected
#NAME: size
#PARENT: Gtk.Widget.render_icon_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: a stock size. A size of (GtkIconSize)-1 means
    render at the size of the source and don’t scale (if there are
    multiple source sizes, GTK+ picks one of the available sizes).
#NAME: replace
#PARENT: Gtk.AccelMap.change_entry.gboolean
#COMMENT: %TRUE if other accelerators may be deleted upon conflicts
#NAME: yalign
#PARENT: Gtk.Misc.get_alignment.none
#COMMENT: location to store Y alignment of @misc, or %NULL
#NAME: box
#PARENT: Gtk.Box.reorder_child.none
#COMMENT: a #GtkBox
#NAME: tag
#PARENT: Gtk.TextTagTable.tag-added.none
#COMMENT: the added tag.
#NAME: popup-single-match
#PARENT: Gtk.EntryCompletion
#COMMENT: Determines whether the completions popup window will shown
for a single possible completion. You probably want to set
this to %FALSE if you are using
[inline completion][GtkEntryCompletion--inline-completion].
#NAME: mark_day
#PARENT: Gtk.Calendar
#COMMENT: Places a visual marker on a particular day.
#NAME: selection-mode
#PARENT: Gtk.IconView
#COMMENT: The ::selection-mode property specifies the selection mode of
icon view. If the mode is #GTK_SELECTION_MULTIPLE, rubberband selection
is enabled, for the other modes, only keyboard selection is possible.
#NAME: get_default_direction
#PARENT: Gtk.Widget
#COMMENT: Obtains the current default reading direction. See
gtk_widget_set_default_direction().
#NAME: widget
#PARENT: Gtk.paint_expander.none
#COMMENT: the widget
#NAME: modifiers
#PARENT: Gtk.BindingEntry.remove.none
#COMMENT: key modifier of binding to remove
#NAME: add_shortcut_folder
#PARENT: Gtk.FileChooser.add_shortcut_folder
#COMMENT: %TRUE if the folder could be added successfully, %FALSE
otherwise.  In the latter case, the @error will be set as appropriate.
#NAME: get_window_by_id
#PARENT: Gtk.Application.get_window_by_id
#COMMENT: the window with ID @id, or
  %NULL if there is no window with this ID
#NAME: parent_class
#PARENT: Gtk.ListBoxClass
#COMMENT: The parent class.
#NAME: widget
#PARENT: Gtk.Widget.remove_mnemonic_label.none
#COMMENT: a #GtkWidget
#NAME: STOCK_OK
#PARENT: Gtk
#COMMENT: The “OK” item and icon.
#NAME: flags
#PARENT: Gtk.CellRendererClass.get_aligned_area.get_aligned_area.none
#COMMENT: render flags
#NAME: icon_pos
#PARENT: Gtk.Entry.set_icon_from_stock.none
#COMMENT: Icon position
#NAME: iter
#PARENT: Gtk.TreeViewSearchEqualFunc.gboolean
#COMMENT: a #GtkTreeIter pointing the row of @model that should be compared
 with @key.
#NAME: n_targets
#PARENT: Gtk.target_table_new_from_list.TargetEntry
#COMMENT: return location for the number ot targets in the table
#NAME: 
#PARENT: Gtk.test_init.none...
#COMMENT: currently unused
#NAME: get_font_name
#PARENT: Gtk.FontSelectionDialog.get_font_name
#COMMENT: A string with the name of the current font, or %NULL if no
    font is selected. You must free this string with g_free().
#NAME: binding_set_new
#PARENT: Gtk.binding_set_new
#COMMENT: new binding set
#NAME: get_action
#PARENT: Gtk.ActionGroupClass.get_action.get_action
#COMMENT: the action, or %NULL if no action by that name exists
#NAME: width
#PARENT: Gtk.IconSize.lookup.gboolean
#COMMENT: location to store icon width
#NAME: kinetic_scrolling
#PARENT: Gtk.ScrolledWindow.set_kinetic_scrolling.none
#COMMENT: %TRUE to enable kinetic scrolling
#NAME: get_icon_stock
#PARENT: Gtk.Entry.get_icon_stock
#COMMENT: A stock id, or %NULL if no icon is set or if the icon
         wasn’t set from a stock id
#NAME: screen
#PARENT: Gtk.MountOperation.set_screen.none
#COMMENT: a #GdkScreen
#NAME: key-release-event
#PARENT: Gtk.Widget.key-release-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: get_has_subtitle
#PARENT: Gtk.HeaderBar
#COMMENT: Retrieves whether the header bar reserves space for
a subtitle, regardless if one is currently set or not.
#NAME: page
#PARENT: Gtk.Assistant.set_page_type.none
#COMMENT: a page of @assistant
#NAME: deserialize_set_can_create_tags
#PARENT: Gtk.TextBuffer
#COMMENT: Use this function to allow a rich text deserialization function to
create new tags in the receiving buffer. Note that using this
function is almost always a bad idea, because the rich text
functions you register should know how to map the rich text format
they handler to your text buffers set of tags.

The ability of creating new (arbitrary!) tags in the receiving buffer
is meant for special rich text formats like the internal one that
is registered using gtk_text_buffer_register_deserialize_tagset(),
because that format is essentially a dump of the internal structure
of the source buffer, including its tag names.

You should allow creation of tags only if you know what you are
doing, e.g. if you defined a tagset name for your application
suite’s text buffers and you know that it’s fine to receive new
tags from these buffers, because you know that your application can
handle the newly created tags.
#NAME: button
#PARENT: Gtk.ToolButton.set_stock_id.none
#COMMENT: a #GtkToolButton
#NAME: buildable
#PARENT: Gtk.Buildable.custom_tag_end.none
#COMMENT: A #GtkBuildable
#NAME: calendar
#PARENT: Gtk.Calendar.get_detail_height_rows.gint
#COMMENT: a #GtkCalendar.
#NAME: actions
#PARENT: Gtk.Widget.drag_begin_with_coordinates.Gdk.DragContext
#COMMENT: A bitmask of the allowed drag actions for this drag
#NAME: get_valign
#PARENT: Gtk.Widget.get_valign
#COMMENT: the vertical alignment of @widget, ignoring baseline alignment
#NAME: widget
#PARENT: Gtk.Widget.set_tooltip_text.none
#COMMENT: a #GtkWidget
#NAME: fd
#PARENT: Gtk.AccelMap.load_fd.none
#COMMENT: a valid readable file descriptor
#NAME: get_orientation
#PARENT: Gtk.Orientable
#COMMENT: Retrieves the orientation of the @orientable.
#NAME: get_window
#PARENT: Gtk.Widget.get_window
#COMMENT: @widget’s window.
#NAME: vscrollbar_policy
#PARENT: Gtk.ScrolledWindow.get_policy.none
#COMMENT: location to store the policy
    for the vertical scrollbar, or %NULL
#NAME: char_on_line
#PARENT: Gtk.TextIter.set_line_offset.none
#COMMENT: a character offset relative to the start of @iter’s current line
#NAME: TextExtendSelection
#PARENT: Gtk
#COMMENT: Granularity types that extend the text selection. Use the
#GtkTextView::extend-selection signal to customize the selection.
#NAME: get_button_sensitivity
#PARENT: Gtk.ComboBox.get_button_sensitivity
#COMMENT: %GTK_SENSITIVITY_ON if the dropdown button
   is sensitive when the model is empty, %GTK_SENSITIVITY_OFF
   if the button is always insensitive or
   %GTK_SENSITIVITY_AUTO if it is only sensitive as long as
   the model has one item to be selected.
#NAME: x0
#PARENT: Gtk.Gradient.new_radial.Gradient
#COMMENT: X coordinate of the start circle
#NAME: size
#PARENT: Gtk.Image.new_from_stock.Widget
#COMMENT: a stock icon size
#NAME: STYLE_CLASS_CSD
#PARENT: Gtk
#COMMENT: A CSS class that gets added to windows which have
client-side decorations.
#NAME: get_context_id
#PARENT: Gtk.Statusbar.get_context_id
#COMMENT: an integer id
#NAME: x1
#PARENT: Gtk.Gradient.new_radial.Gradient
#COMMENT: X coordinate of the end circle
#NAME: widget
#PARENT: Gtk.GesturePan.new.Gesture
#COMMENT: a #GtkWidget
#NAME: box
#PARENT: Gtk.ListBox.invalidate_sort.none
#COMMENT: a #GtkListBox
#NAME: group
#PARENT: Gtk.RadioToolButton.new_from_stock.ToolItem
#COMMENT: an existing radio button
  group, or %NULL if you are creating a new group
#NAME: label_widget
#PARENT: Gtk.ToolItemGroup.set_label_widget.none
#COMMENT: the widget to be displayed in place of the usual label
#NAME: notify
#PARENT: Gtk.stock_set_translate_func.none
#COMMENT: a #GDestroyNotify that is called when @data is
  no longer needed
#NAME: context
#PARENT: Gtk.IMContextClass.get_surrounding.get_surrounding.gboolean
#COMMENT: a #GtkIMContext
#NAME: fg
#PARENT: Gtk.IconInfo.load_symbolic.GdkPixbuf.Pixbuf
#COMMENT: a #GdkRGBA representing the foreground color of the icon
#NAME: row-spacing
#PARENT: Gtk.IconView
#COMMENT: The row-spacing property specifies the space which is inserted between
the rows of the icon view.
#NAME: STYLE_PROVIDER_PRIORITY_SETTINGS
#PARENT: Gtk
#COMMENT: The priority used for style information provided
via #GtkSettings.

This priority is higher than #GTK_STYLE_PROVIDER_PRIORITY_THEME
to let settings override themes.
#NAME: end
#PARENT: Gtk.TextBuffer.get_text.utf8
#COMMENT: end of a range
#NAME: get_default_language
#PARENT: Gtk
#COMMENT: Returns the #PangoLanguage for the default language currently in
effect. (Note that this can change over the life of an
application.) The default language is derived from the current
locale. It determines, for example, whether GTK+ uses the
right-to-left or left-to-right text direction.

This function is equivalent to pango_language_get_default().
See that function for details.
#NAME: add_action_widget
#PARENT: Gtk.Dialog
#COMMENT: Adds an activatable widget to the action area of a #GtkDialog,
connecting a signal handler that will emit the #GtkDialog::response
signal on the dialog when the widget is activated. The widget is
appended to the end of the dialog’s action area. If you want to add a
non-activatable widget, simply pack it into the @action_area field
of the #GtkDialog struct.
#NAME: get_entry
#PARENT: Gtk.EntryCompletion
#COMMENT: Gets the entry @completion has been attached to.
#NAME: position
#PARENT: Gtk.Editable.do_insert_text.none
#COMMENT: location of the position text will be inserted at
#NAME: callback
#PARENT: Gtk.Container.foreach.none
#COMMENT: a callback
#NAME: JunctionSides
#PARENT: Gtk
#COMMENT: Describes how a rendered element connects to adjacent elements.
#NAME: length
#PARENT: Gtk.RecentInfo.get_groups.utf8
#COMMENT: return location for the number of groups returned
#NAME: set_transient_for
#PARENT: Gtk.Window
#COMMENT: Dialog windows should be set transient for the main application
window they were spawned from. This allows
[window managers][gtk-X11-arch] to e.g. keep the
dialog on top of the main window, or center the dialog over the
main window. gtk_dialog_new_with_buttons() and other convenience
functions in GTK+ will sometimes call
gtk_window_set_transient_for() on your behalf.

Passing %NULL for @parent unsets the current transient window.

On Windows, this function puts the child window on top of the parent,
much as the window manager would have done on X.
#NAME: required_major
#PARENT: Gtk.check_version.utf8
#COMMENT: the required major version
#NAME: get_child2
#PARENT: Gtk.Paned.get_child2
#COMMENT: second child, or %NULL if it is not set.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_add_class.none
#COMMENT: position to modify, -1 for the path head
#NAME: add_widget
#PARENT: Gtk.SizeGroup
#COMMENT: Adds a widget to a #GtkSizeGroup. In the future, the requisition
of the widget will be determined as the maximum of its requisition
and the requisition of the other widgets in the size group.
Whether this applies horizontally, vertically, or in both directions
depends on the mode of the size group. See gtk_size_group_set_mode().

When the widget is destroyed or no longer referenced elsewhere, it will
be removed from the size group.
#NAME: copy
#PARENT: Gtk.RcStyle.copy
#COMMENT: the resulting #GtkRcStyle
#NAME: force_regular
#PARENT: Gtk.IconLookupFlags
#COMMENT: Try to always load regular icons, even
  when symbolic icon names are given. Since 3.14.
#NAME: set_border_window_size
#PARENT: Gtk.TextView
#COMMENT: Sets the width of %GTK_TEXT_WINDOW_LEFT or %GTK_TEXT_WINDOW_RIGHT,
or the height of %GTK_TEXT_WINDOW_TOP or %GTK_TEXT_WINDOW_BOTTOM.
Automatically destroys the corresponding window if the size is set
to 0, and creates the window if the size is set to non-zero.  This
function can only be used for the “border windows,” it doesn’t work
with #GTK_TEXT_WINDOW_WIDGET, #GTK_TEXT_WINDOW_TEXT, or
#GTK_TEXT_WINDOW_PRIVATE.
#NAME: push_preferred_height
#PARENT: Gtk.CellAreaContext
#COMMENT: Causes the minimum and/or natural height to grow if the new
proposed sizes exceed the current minimum and natural height.

This is used by #GtkCellAreaContext implementations during
the request process over a series of #GtkTreeModel rows to
progressively push the requested height over a series of
gtk_cell_area_get_preferred_height() requests.
#NAME: button
#PARENT: Gtk.Button.set_use_underline.none
#COMMENT: a #GtkButton
#NAME: homogeneous
#PARENT: Gtk.Box.set_homogeneous.none
#COMMENT: a boolean value, %TRUE to create equal allotments,
  %FALSE for variable allotments
#NAME: is_drawable
#PARENT: Gtk.Widget
#COMMENT: Determines whether @widget can be drawn to. A widget can be drawn
to if it is mapped and visible.
#NAME: cell_area
#PARENT: Gtk.CellAreaClass.render.render.none
#COMMENT: the @widget relative coordinates for @area
#NAME: get_invisible_char
#PARENT: Gtk.Entry.get_invisible_char
#COMMENT: the current invisible char, or 0, if the entry does not
              show invisible text at all.
#NAME: text_view
#PARENT: Gtk.TextView.move_mark_onscreen.gboolean
#COMMENT: a #GtkTextView
#NAME: get_max_width
#PARENT: Gtk.TreeViewColumn.get_max_width
#COMMENT: The maximum width of the @tree_column.
#NAME: ActivatableIface
#PARENT: Gtk
#COMMENT: > This method can be called with a %NULL action at times.
#NAME: changed
#PARENT: Gtk.IconTheme
#COMMENT: Emitted when the current icon theme is switched or GTK+ detects
that a change has occurred in the contents of the current
icon theme.
#NAME: STOCK_CLOSE
#PARENT: Gtk
#COMMENT: The “Close” item and icon.
#NAME: color1
#PARENT: Gtk.SymbolicColor.new_mix.SymbolicColor
#COMMENT: color to mix
#NAME: mode
#PARENT: Gtk.IconView.set_selection_mode.none
#COMMENT: The selection mode
#NAME: 
#PARENT: Gtk.MessageDialog.new.Widget...
#COMMENT: arguments for @message_format
#NAME: color2
#PARENT: Gtk.SymbolicColor.new_mix.SymbolicColor
#COMMENT: another color to mix
#NAME: button
#PARENT: Gtk.ScaleButton.get_popup.Widget
#COMMENT: a #GtkScaleButton
#NAME: Viewport
#PARENT: Gtk
#COMMENT: The #GtkViewport widget acts as an adaptor class, implementing
scrollability for child widgets that lack their own scrolling
capabilities. Use #GtkViewport to scroll child widgets such as
#GtkGrid, #GtkBox, and so on.

If a widget has native scrolling abilities, such as #GtkTextView,
#GtkTreeView or #GtkIconView, it can be added to a #GtkScrolledWindow
with gtk_container_add(). If a widget does not, you must first add the
widget to a #GtkViewport, then add the viewport to the scrolled window.
gtk_container_add() does this automatically if a child that does not
implement #GtkScrollable is added to a #GtkScrolledWindow, so you can
ignore the presence of the viewport.

The #GtkViewport will start scrolling content only if allocated less
than the child widget’s minimum size in a given orientation.
#NAME: get_has_resize_grip
#PARENT: Gtk.Window.get_has_resize_grip
#COMMENT: %TRUE if the window has a resize grip
#NAME: nomem
#PARENT: Gtk.PrintError
#COMMENT: A memory allocation failed.
#NAME: STYLE_CLASS_TITLEBAR
#PARENT: Gtk
#COMMENT: A CSS class used when rendering a titlebar in a toplevel
window.
#NAME: target_table_new_from_list
#PARENT: Gtk.target_table_new_from_list
#COMMENT: the new table.
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_wrap_width.gint
#COMMENT: A #GtkComboBox
#NAME: progress-fraction
#PARENT: Gtk.Entry
#COMMENT: The current fraction of the task that's been completed.
#NAME: show-error-message
#PARENT: Gtk.PlacesSidebar
#COMMENT: The places sidebar emits this signal when it needs the calling
application to present an error message.  Most of these messages
refer to mounting or unmounting media, for example, when a drive
cannot be started for some reason.
#NAME: insert_column_with_data_func
#PARENT: Gtk.TreeView
#COMMENT: Convenience function that inserts a new column into the #GtkTreeView
with the given cell renderer and a #GtkTreeCellDataFunc to set cell renderer
attributes (normally using data from the model). See also
gtk_tree_view_column_set_cell_data_func(), gtk_tree_view_column_pack_start().
If @tree_view has “fixed_height” mode enabled, then the new column will have its
“sizing” property set to be GTK_TREE_VIEW_COLUMN_FIXED.
#NAME: source
#PARENT: Gtk.IconSource.set_filename.none
#COMMENT: a #GtkIconSource
#NAME: screen
#PARENT: Gtk.Invisible.new_for_screen.Widget
#COMMENT: a #GdkScreen which identifies on which
    the new #GtkInvisible will be created.
#NAME: cell
#PARENT: Gtk.CellRenderer.get_size.none
#COMMENT: a #GtkCellRenderer
#NAME: get_baseline_row
#PARENT: Gtk.Grid.get_baseline_row
#COMMENT: the row index defining the global baseline
#NAME: context
#PARENT: Gtk.drag_set_icon_gicon.none
#COMMENT: the context for a drag (This must be called
    with a context for the source side of a drag)
#NAME: alpha
#PARENT: Gtk.InputPurpose
#COMMENT: Allow only alphabetic characters
#NAME: get_show_private
#PARENT: Gtk.RecentChooser.get_show_private
#COMMENT: %TRUE if the recent chooser should show private items,
  %FALSE otherwise.
#NAME: get_text_orientation
#PARENT: Gtk.ToolShell.get_text_orientation
#COMMENT: the current text orientation of @shell
#NAME: accelerator_name
#PARENT: Gtk.accelerator_name
#COMMENT: a newly-allocated accelerator name
#NAME: get_detail_height_rows
#PARENT: Gtk.Calendar
#COMMENT: Queries the height of detail cells, in rows.
See #GtkCalendar:detail-width-chars.
#NAME: primary-icon-activatable
#PARENT: Gtk.Entry
#COMMENT: Whether the primary icon is activatable.

GTK+ emits the #GtkEntry::icon-press and #GtkEntry::icon-release
signals only on sensitive, activatable icons.

Sensitive, but non-activatable icons can be used for purely
informational purposes.
#NAME: editing-done
#PARENT: Gtk.CellEditable
#COMMENT: This signal is a sign for the cell renderer to update its
value from the @cell_editable.

Implementations of #GtkCellEditable are responsible for
emitting this signal when they are done editing, e.g.
#GtkEntry is emitting it when the user presses Enter.

gtk_cell_editable_editing_done() is a convenience method
for emitting #GtkCellEditable::editing-done.
#NAME: paste-target-list
#PARENT: Gtk.TextBuffer
#COMMENT: The list of targets this buffer supports for clipboard pasting
and as DND destination.
#NAME: iter
#PARENT: Gtk.TreeModel.ref_node.none
#COMMENT: the #GtkTreeIter-struct
#NAME: new
#PARENT: Gtk.VBox
#COMMENT: Creates a new #GtkVBox.
#NAME: 
#PARENT: Gtk.TextBuffer.insert_with_tags_by_name.none...
#COMMENT: more tag names
#NAME: has-depth-buffer
#PARENT: Gtk.GLArea
#COMMENT: If set to %TRUE the widget will allocate and enable a depth buffer for the
target framebuffer.
#NAME: collapse_row
#PARENT: Gtk.TreeView.collapse_row
#COMMENT: %TRUE if the row was collapsed.
#NAME: position
#PARENT: Gtk.Box.reorder_child.none
#COMMENT: the new position for @child in the list of children
  of @box, starting from 0. If negative, indicates the end of
  the list
#NAME: settings
#PARENT: Gtk.PrintSettings.get_number_up.gint
#COMMENT: a #GtkPrintSettings
#NAME: setting
#PARENT: Gtk.TextMark.set_visible.none
#COMMENT: visibility of mark
#NAME: widget
#PARENT: Gtk.Widget.create_pango_layout.Pango.Layout
#COMMENT: a #GtkWidget
#NAME: position
#PARENT: Gtk.MenuShell.insert.none
#COMMENT: the position at which the insert occurs
#NAME: context
#PARENT: Gtk.PrintOperation.end-print.none
#COMMENT: the #GtkPrintContext for the current operation
#NAME: parse_color
#PARENT: Gtk.RcProperty
#COMMENT: A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a
color given either by its name or in the form
`{ red, green, blue }` where red, green and
blue are integers between 0 and 65535 or floating-point numbers
between 0 and 1.
#NAME: background
#PARENT: Gtk.Style
#COMMENT: Set of background #cairo_pattern_t
#NAME: shell
#PARENT: Gtk.ToolShell.get_text_alignment.gfloat
#COMMENT: a #GtkToolShell
#NAME: accel_mods
#PARENT: Gtk.accel_groups_activate.gboolean
#COMMENT: keyboard state mask from a key event
#NAME: widget
#PARENT: Gtk.ButtonBox.set_child_secondary.none
#COMMENT: a #GtkButtonBox
#NAME: STYLE_CLASS_MENUITEM
#PARENT: Gtk
#COMMENT: A CSS class to match menu items.

This is used in #GtkMenuItem and its subclasses.
#NAME: free
#PARENT: Gtk.StockItem
#COMMENT: Frees a stock item allocated on the heap, such as one returned by
gtk_stock_item_copy(). Also frees the fields inside the stock item,
if they are not %NULL.
#NAME: y0
#PARENT: Gtk.Gradient.new_radial.Gradient
#COMMENT: Y coordinate of the start circle
#NAME: type
#PARENT: Gtk.rc_get_style_by_paths.Style
#COMMENT: a type that will be used along with parent types of this type
    when matching against class styles, or #G_TYPE_NONE
#NAME: y1
#PARENT: Gtk.Gradient.new_radial.Gradient
#COMMENT: Y coordinate of the end circle
#NAME: get_event_window
#PARENT: Gtk.Button.get_event_window
#COMMENT: @button’s event window.
#NAME: get_owner
#PARENT: Gtk.Clipboard.get_owner
#COMMENT: the owner of the clipboard, if any;
    otherwise %NULL.
#NAME: set_selection_mode
#PARENT: Gtk.ListBox
#COMMENT: Sets how selection works in the listbox.
See #GtkSelectionMode for details.
#NAME: cr
#PARENT: Gtk.render_focus.none
#COMMENT: a #cairo_t
#NAME: renderer
#PARENT: Gtk.CellArea.cell_set.none
#COMMENT: a #GtkCellRenderer which is a cell inside @area
#NAME: show_tabs
#PARENT: Gtk.Notebook.set_show_tabs.none
#COMMENT: %TRUE if the tabs should be shown
#NAME: name
#PARENT: Gtk.ToggleAction.new.ToggleAction
#COMMENT: A unique name for the action
#NAME: tool_item
#PARENT: Gtk.ToolItem.rebuild_menu.none
#COMMENT: a #GtkToolItem
#NAME: get_show_default
#PARENT: Gtk.AppChooserWidget.get_show_default
#COMMENT: the value of #GtkAppChooserWidget:show-default
#NAME: natural_width
#PARENT: Gtk.CellAreaClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: location to store the natural width, or %NULL
#NAME: get_selected_row
#PARENT: Gtk.ListBox.get_selected_row
#COMMENT: the selected row
#NAME: 
#PARENT: Gtk.StyleProperties.get.none...
#COMMENT: property name /return value pairs, followed by %NULL
#NAME: popup-context-menu
#PARENT: Gtk.Toolbar
#COMMENT: Emitted when the user right-clicks the toolbar or uses the
keybinding to display a popup menu.

Application developers should handle this signal if they want
to display a context menu on the toolbar. The context-menu should
appear at the coordinates given by @x and @y. The mouse button
number is given by the @button parameter. If the menu was popped
up using the keybaord, @button is -1.
#NAME: x
#PARENT: Gtk.Toolbar.popup-context-menu.gboolean
#COMMENT: the x coordinate of the point where the menu should appear
#NAME: path
#PARENT: Gtk.WidgetPath.iter_has_region.gboolean
#COMMENT: a #GtkWidgetPath
#NAME: entry
#PARENT: Gtk.Entry.im_context_filter_keypress.gboolean
#COMMENT: a #GtkEntry
#NAME: render_icon
#PARENT: Gtk.IconSet
#COMMENT: Renders an icon using gtk_style_render_icon(). In most cases,
gtk_widget_render_icon() is better, since it automatically provides
most of the arguments from the current widget settings.  This
function never returns %NULL; if the icon can’t be rendered
(perhaps because an image file fails to load), a default "missing
image" icon will be returned instead.
#NAME: changed
#PARENT: Gtk.ComboBox
#COMMENT: The changed signal is emitted when the active
item is changed. The can be due to the user selecting
a different item from the list, or due to a
call to gtk_combo_box_set_active_iter().
It will also be emitted while typing into the entry of a combo box
with an entry.
#NAME: y
#PARENT: Gtk.Toolbar.popup-context-menu.gboolean
#COMMENT: the y coordinate of the point where the menu should appear
#NAME: filter
#PARENT: Gtk.RecentFilter.add_pixbuf_formats.none
#COMMENT: a #GtkRecentFilter
#NAME: flags
#PARENT: Gtk.Dialog.new_with_buttons.Widget
#COMMENT: from #GtkDialogFlags
#NAME: write
#PARENT: Gtk.RecentManagerError
#COMMENT: failure while writing the recently used
  resources file.
#NAME: gap_width
#PARENT: Gtk.paint_box_gap.none
#COMMENT: width of the gap
#NAME: INPUT_ERROR
#PARENT: Gtk
#COMMENT: Constant to return from a signal handler for the #GtkSpinButton::input
signal in case of conversion failure.
#NAME: selection_owner_set_for_display
#PARENT: Gtk
#COMMENT: Claim ownership of a given selection for a particular widget, or,
if @widget is %NULL, release ownership of the selection.
#NAME: get_logo_icon_name
#PARENT: Gtk.AboutDialog.get_logo_icon_name
#COMMENT: the icon name displayed as logo. The string is
  owned by the dialog. If you want to keep a reference
  to it, you have to call g_strdup() on it.
#NAME: ppd_display_name
#PARENT: Gtk.PaperSize.new_from_ppd.PaperSize
#COMMENT: the corresponding human-readable name
#NAME: container
#PARENT: Gtk.Container.add_with_properties.none
#COMMENT: a #GtkContainer
#NAME: row_draggable
#PARENT: Gtk.TreeDragSource
#COMMENT: Asks the #GtkTreeDragSource whether a particular row can be used as
the source of a DND operation. If the source doesn’t implement
this interface, the row is assumed draggable.
#NAME: height
#PARENT: Gtk.paint_extension.none
#COMMENT: width of the extension
#NAME: area
#PARENT: Gtk.CellArea.request_renderer.none
#COMMENT: a #GtkCellArea
#NAME: resizable
#PARENT: Gtk.TreeViewColumn.set_resizable.none
#COMMENT: %TRUE, if the column can be resized
#NAME: menu
#PARENT: Gtk.Menu.get_accel_path.utf8
#COMMENT: a valid #GtkMenu
#NAME: get_expand
#PARENT: Gtk.ToolItem
#COMMENT: Returns whether @tool_item is allocated extra space.
See gtk_tool_item_set_expand().
#NAME: set_visible_column
#PARENT: Gtk.TreeModelFilter
#COMMENT: Sets @column of the child_model to be the column where @filter should
look for visibility information. @columns should be a column of type
%G_TYPE_BOOLEAN, where %TRUE means that a row is visible, and %FALSE
if not.

Note that gtk_tree_model_filter_set_visible_func() or
gtk_tree_model_filter_set_visible_column() can only be called
once for a given filter model.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_level_indentation.none
#COMMENT: a #GtkTreeView
#NAME: min
#PARENT: Gtk.VScale.new_with_range.Widget
#COMMENT: minimum value
#NAME: stop_editing
#PARENT: Gtk.CellRenderer
#COMMENT: Informs the cell renderer that the editing is stopped.
If @canceled is %TRUE, the cell renderer will emit the
#GtkCellRenderer::editing-canceled signal.

This function should be called by cell renderer implementations
in response to the #GtkCellEditable::editing-done signal of
#GtkCellEditable.
#NAME: user_data
#PARENT: Gtk.ActionGroup.add_radio_actions_full.none
#COMMENT: data to pass to the action callbacks
#NAME: get_background_icon_name
#PARENT: Gtk.NumerableIcon.get_background_icon_name
#COMMENT: an icon name, or %NULL
#NAME: get_round_digits
#PARENT: Gtk.Range.get_round_digits
#COMMENT: the number of digits to round to
#NAME: window
#PARENT: Gtk.Window.set_deletable.none
#COMMENT: a #GtkWindow
#NAME: propagate_event
#PARENT: Gtk
#COMMENT: Sends an event to a widget, propagating the event to parent widgets
if the event remains unhandled.

Events received by GTK+ from GDK normally begin in gtk_main_do_event().
Depending on the type of event, existence of modal dialogs, grabs, etc.,
the event may be propagated; if so, this function is used.

gtk_propagate_event() calls gtk_widget_event() on each widget it
decides to send the event to. So gtk_widget_event() is the lowest-level
function; it simply emits the #GtkWidget::event and possibly an
event-specific signal on a widget. gtk_propagate_event() is a bit
higher-level, and gtk_main_do_event() is the highest level.

All that said, you most likely don’t want to use any of these
functions; synthesizing events is rarely needed. There are almost
certainly better ways to achieve your goals. For example, use
gdk_window_invalidate_rect() or gtk_widget_queue_draw() instead
of making up expose events.
#NAME: upper
#PARENT: Gtk.Adjustment.new.Adjustment
#COMMENT: the maximum value.
#NAME: settings
#PARENT: Gtk.PrintSettings.get_page_set.PageSet
#COMMENT: a #GtkPrintSettings
#NAME: type
#PARENT: Gtk.WidgetClass.set_accessible_type.none
#COMMENT: The object type that implements the accessible for @widget_class
#NAME: get_single_line_mode
#PARENT: Gtk.Label
#COMMENT: Returns whether the label is in single line mode.
#NAME: get_model
#PARENT: Gtk.CellView
#COMMENT: Returns the model for @cell_view. If no model is used %NULL is
returned.
#NAME: widget
#PARENT: Gtk.Widget.draw.none
#COMMENT: the widget to draw. It must be drawable (see
  gtk_widget_is_drawable()) and a size must have been allocated.
#NAME: widget
#PARENT: Gtk.Widget.queue_draw.none
#COMMENT: a #GtkWidget
#NAME: selected_item
#PARENT: Gtk.PlacesSidebar.populate-popup.none
#COMMENT: #GFile with the item to which the menu should refer, or #NULL in the case of a @selected_volume.
#NAME: copy
#PARENT: Gtk.WidgetPath.copy
#COMMENT: a copy of @path
#NAME: get_mnemonic_keyval
#PARENT: Gtk.Label.get_mnemonic_keyval
#COMMENT: GDK keyval usable for accelerators, or #GDK_KEY_VoidSymbol
#NAME: label
#PARENT: Gtk.Label.set_track_visited_links.none
#COMMENT: a #GtkLabel
#NAME: get_rgba
#PARENT: Gtk.ColorButton
#COMMENT: Sets @rgba to be the current color in the #GtkColorButton widget.
#NAME: colorsel
#PARENT: Gtk.ColorSelection.set_current_alpha.none
#COMMENT: a #GtkColorSelection
#NAME: label
#PARENT: Gtk.Action
#COMMENT: The label used for menu items and buttons that activate
this action. If the label is %NULL, GTK+ uses the stock
label specified via the stock-id property.

This is an appearance property and thus only applies if
#GtkActivatable:use-action-appearance is %TRUE.
#NAME: get_accel_path
#PARENT: Gtk.Menu.get_accel_path
#COMMENT: the accelerator path set on the menu.
#NAME: load_from_file
#PARENT: Gtk.CssProvider.load_from_file
#COMMENT: %TRUE. The return value is deprecated and %FALSE will only be
    returned for backwards compatibility reasons if an @error is not
    %NULL and a loading error occured. To track errors while loading
    CSS, connect to the #GtkCssProvider::parsing-error signal.
#NAME: get_default_style
#PARENT: Gtk.Widget
#COMMENT: Returns the default style used by all widgets initially.
#NAME: text
#PARENT: Gtk.ClipboardRichTextReceivedFunc.none
#COMMENT: the rich text received, as
  a UTF-8 encoded string, or %NULL if retrieving the data failed.
#NAME: toggle-overwrite
#PARENT: Gtk.Entry
#COMMENT: The ::toggle-overwrite signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to toggle the overwrite mode of the entry.

The default bindings for this signal is Insert.
#NAME: gstring
#PARENT: Gtk.RcProperty.parse_requisition.gboolean
#COMMENT: the #GString to be parsed
#NAME: scroll_to_mark
#PARENT: Gtk.TextView
#COMMENT: Scrolls @text_view so that @mark is on the screen in the position
indicated by @xalign and @yalign. An alignment of 0.0 indicates
left or top, 1.0 indicates right or bottom, 0.5 means center.
If @use_align is %FALSE, the text scrolls the minimal distance to
get the mark onscreen, possibly not scrolling at all. The effective
screen for purposes of this function is reduced by a margin of size
@within_margin.
#NAME: path
#PARENT: Gtk.TreeView.get_tooltip_context.gboolean
#COMMENT: a pointer to receive a #GtkTreePath or %NULL
#NAME: pre-activate
#PARENT: Gtk.UIManager
#COMMENT: The ::pre-activate signal is emitted just before the @action
is activated.

This is intended for applications to get notification
just before any action is activated.
#NAME: pages
#PARENT: Gtk.ScrollStep
#COMMENT: Scroll by pages.
#NAME: tree_row_reference_deleted
#PARENT: Gtk
#COMMENT: Lets a set of row reference created by
gtk_tree_row_reference_new_proxy() know that the
model emitted the #GtkTreeModel::row-deleted signal.
#NAME: area
#PARENT: Gtk.CellArea.attribute_connect.none
#COMMENT: a #GtkCellArea
#NAME: STYLE_CLASS_NOTEBOOK
#PARENT: Gtk
#COMMENT: A CSS class defining a notebook.

Used in #GtkNotebook.
#NAME: provider
#PARENT: Gtk.StyleProviderIface.get_icon_factory.get_icon_factory.IconFactory
#COMMENT: a #GtkStyleProvider
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.get_iter.get_iter.gboolean
#COMMENT: a #GtkTreeModel
#NAME: recent-shortcut
#PARENT: Gtk.FileChooserWidget
#COMMENT: The ::recent-shortcut signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user asks for it.

This is used to make the file chooser show the Recent location.

The default binding for this signal is `Alt + R`.
#NAME: set_visible_child_name
#PARENT: Gtk.Stack
#COMMENT: Makes the child with the given name visible.

If @child is different from the currently
visible child, the transition between the
two will be animated with the current
transition type of @stack.

Note that the child widget has to be visible itself
(see gtk_widget_show()) in order to become the visible
child of @stack.
#NAME: new_from_stock
#PARENT: Gtk.StatusIcon
#COMMENT: Creates a status icon displaying a stock icon. Sample stock icon
names are #GTK_STOCK_OPEN, #GTK_STOCK_QUIT. You can register your
own stock icon names, see gtk_icon_factory_add_default() and
gtk_icon_factory_add().
#NAME: tag
#PARENT: Gtk.TextIter.backward_to_tag_toggle.gboolean
#COMMENT: a #GtkTextTag, or %NULL
#NAME: forward_visible_cursor_position
#PARENT: Gtk.TextIter.forward_visible_cursor_position
#COMMENT: %TRUE if we moved and the new position is dereferenceable
#NAME: path
#PARENT: Gtk.WidgetPath.iter_has_class.gboolean
#COMMENT: a #GtkWidgetPath
#NAME: get_snap_edge
#PARENT: Gtk.HandleBox
#COMMENT: Gets the edge used for determining reattachment of the handle box.
See gtk_handle_box_set_snap_edge().
#NAME: center_always
#PARENT: Gtk.WindowPosition
#COMMENT: Keep window centered as it changes size, etc.
#NAME: paragraph_ends
#PARENT: Gtk.DeleteType
#COMMENT: Delete to the end of the
  paragraph. Like C-k in Emacs (or its reverse).
#NAME: context
#PARENT: Gtk.PlacesSidebar.drag-action-requested.gint
#COMMENT: #GdkDragContext with information about the drag operation
#NAME: window
#PARENT: Gtk.Window.get_resize_grip_area.gboolean
#COMMENT: a #GtkWindow
#NAME: day
#PARENT: Gtk.Calendar.mark_day.none
#COMMENT: the day number to mark between 1 and 31.
#NAME: day
#PARENT: Gtk.Calendar.get_day_is_marked.gboolean
#COMMENT: the day number between 1 and 31.
#NAME: setup
#PARENT: Gtk.PageSetup.set_orientation.none
#COMMENT: a #GtkPageSetup
#NAME: selection_data
#PARENT: Gtk.TreeDragSourceIface.drag_data_get.drag_data_get.gboolean
#COMMENT: a #GtkSelectionData to fill with data
                 from the dragged row
#NAME: widget
#PARENT: Gtk.Widget.create_pango_context.Pango.Context
#COMMENT: a #GtkWidget
#NAME: activate-link
#PARENT: Gtk.LinkButton
#COMMENT: The ::activate-link signal is emitted each time the #GtkLinkButton
has been clicked.

The default handler will call gtk_show_uri() with the URI stored inside
the #GtkLinkButton:uri property.

To override the default behavior, you can connect to the ::activate-link
signal and stop the propagation of the signal by returning %TRUE from
your handler.
#NAME: horizontal
#PARENT: Gtk.PrintDuplex
#COMMENT: Horizontal duplex.
#NAME: cell
#PARENT: Gtk.CellRenderer.get_preferred_width.none
#COMMENT: a #GtkCellRenderer instance
#NAME: value
#PARENT: Gtk.Scale.add_mark.none
#COMMENT: the value at which the mark is placed, must be between
  the lower and upper limits of the scales’ adjustment
#NAME: get_page_increment
#PARENT: Gtk.Adjustment.get_page_increment
#COMMENT: The current page increment of the adjustment.
#NAME: pages
#PARENT: Gtk.MovementStep
#COMMENT: Move by pages
#NAME: tx
#PARENT: Gtk.TreeView.convert_widget_to_tree_coords.none
#COMMENT: return location for tree X coordinate
#NAME: key
#PARENT: Gtk.AccelMap.lookup_entry.gboolean
#COMMENT: the accelerator key to be filled in (optional)
#NAME: context
#PARENT: Gtk.StyleContext.lookup_icon_set.IconSet
#COMMENT: a #GtkStyleContext
#NAME: toolbar-reconfigured
#PARENT: Gtk.ToolItem
#COMMENT: This signal is emitted when some property of the toolbar that the
item is a child of changes. For custom subclasses of #GtkToolItem,
the default handler of this signal use the functions
- gtk_tool_shell_get_orientation()
- gtk_tool_shell_get_style()
- gtk_tool_shell_get_icon_size()
- gtk_tool_shell_get_relief_style()
to find out what the toolbar should look like and change
themselves accordingly.
#NAME: set
#PARENT: Gtk.TreeStore
#COMMENT: Sets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by the value to be set.
The list is terminated by a -1. For example, to set column 0 with type
%G_TYPE_STRING to “Foo”, you would write
`gtk_tree_store_set (store, iter, 0, "Foo", -1)`.

The value will be referenced by the store if it is a %G_TYPE_OBJECT, and it
will be copied if it is a %G_TYPE_STRING or %G_TYPE_BOXED.
#NAME: ty
#PARENT: Gtk.TreeView.convert_widget_to_tree_coords.none
#COMMENT: return location for tree Y coordinate
#NAME: entry
#PARENT: Gtk.Entry.set_activates_default.none
#COMMENT: a #GtkEntry
#NAME: new
#PARENT: Gtk.MountOperation.new
#COMMENT: a new #GtkMountOperation
#NAME: get_hadjustment
#PARENT: Gtk.Viewport.get_hadjustment
#COMMENT: the horizontal adjustment of @viewport.
#NAME: minimum_baseline
#PARENT: Gtk.WidgetClass.get_preferred_height_and_baseline_for_width.get_preferred_height_and_baseline_for_width.none
#COMMENT: location for storing the baseline for the minimum height, or %NULL
#NAME: action_group
#PARENT: Gtk.ActionGroup.add_toggle_actions.none
#COMMENT: the action group
#NAME: quark
#PARENT: Gtk.PrintError
#COMMENT: Registers an error quark for #GtkPrintOperation if necessary.
#NAME: action
#PARENT: Gtk.UIManager.add_ui.none
#COMMENT: the name of the action to be proxied, or %NULL to add a separator
#NAME: window
#PARENT: Gtk.Window.remove_mnemonic.none
#COMMENT: a #GtkWindow
#NAME: child
#PARENT: Gtk.Notebook.insert_page.gint
#COMMENT: the #GtkWidget to use as the contents of the page
#NAME: pixels_below_lines
#PARENT: Gtk.TextView.set_pixels_below_lines.none
#COMMENT: pixels below paragraphs
#NAME: state
#PARENT: Gtk.Widget.modify_fg.none
#COMMENT: the state for which to set the foreground color
#NAME: settings
#PARENT: Gtk.PrintSettings.set_scale.none
#COMMENT: a #GtkPrintSettings
#NAME: RecentSortType
#PARENT: Gtk
#COMMENT: Used to specify the sorting method to be applyed to the recently
used resource list.
#NAME: margin
#PARENT: Gtk.WidgetAuxInfo
#COMMENT: the widget’s #GtkBorder margins
#NAME: destroyed
#PARENT: Gtk.Widget
#COMMENT: This function sets *@widget_pointer to %NULL if @widget_pointer !=
%NULL.  It’s intended to be used as a callback connected to the
“destroy” signal of a widget. You connect gtk_widget_destroyed()
as a signal handler, and pass the address of your widget variable
as user data. Then when the widget is destroyed, the variable will
be set to %NULL. Useful for example to avoid multiple copies
of the same dialog.
#NAME: new
#PARENT: Gtk.StatusIcon
#COMMENT: Creates an empty status icon object.
#NAME: new_with_color
#PARENT: Gtk.ColorButton.new_with_color
#COMMENT: a new color button
#NAME: window
#PARENT: Gtk.Window.set_keep_below.none
#COMMENT: a #GtkWindow
#NAME: callback
#PARENT: Gtk.ContainerClass.forall.forall.none
#COMMENT: a callback
#NAME: buffer
#PARENT: Gtk.TextBufferClass.insert_child_anchor.insert_child_anchor.none
#COMMENT: a #GtkTextBuffer
#NAME: invalid_tag
#PARENT: Gtk.BuilderError
#COMMENT: #GtkBuilder found a tag that
 it doesn’t understand.
#NAME: get_model
#PARENT: Gtk.CellView.get_model
#COMMENT: a #GtkTreeModel used or %NULL
#NAME: get_background_icon_name
#PARENT: Gtk.NumerableIcon
#COMMENT: Returns the icon name used as the base background image,
or %NULL if there’s none.
#NAME: text_view
#PARENT: Gtk.TextView.move_visually.gboolean
#COMMENT: a #GtkTextView
#NAME: x
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: x origin of the rectangle
#NAME: foreach_alloc
#PARENT: Gtk.CellArea
#COMMENT: Calls @callback for every #GtkCellRenderer in @area with the
allocated rectangle inside @cell_area.
#NAME: sensitivity
#PARENT: Gtk.ComboBox.set_button_sensitivity.none
#COMMENT: specify the sensitivity of the dropdown button
#NAME: force_symbolic
#PARENT: Gtk.IconLookupFlags
#COMMENT: Try to always load symbolic icons, even
  when regular icon names are given. Since 3.14.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_max_width.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: y
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: y origin of the rectangle
#NAME: slide_down
#PARENT: Gtk.RevealerTransitionType
#COMMENT: Slide in from the top
#NAME: menu
#PARENT: Gtk.StatusIcon.position_menu.none
#COMMENT: the #GtkMenu
#NAME: get_depth
#PARENT: Gtk.TreePath.get_depth
#COMMENT: The depth of @path
#NAME: selectable
#PARENT: Gtk.ListBoxRow
#COMMENT: The property determines whether this row can be selected.
#NAME: limit
#PARENT: Gtk.RecentChooser
#COMMENT: The maximum number of recently used resources to be displayed,
or -1 to display all items.
#NAME: set_window
#PARENT: Gtk.Widget
#COMMENT: Sets a widget’s window. This function should only be used in a
widget’s #GtkWidget::realize implementation. The %window passed is
usually either new window created with gdk_window_new(), or the
window of its parent widget as returned by
gtk_widget_get_parent_window().

Widgets must indicate whether they will create their own #GdkWindow
by calling gtk_widget_set_has_window(). This is usually done in the
widget’s init() function.

Note that this function does not add any reference to @window.
#NAME: natural_width
#PARENT: Gtk.CellAreaClass.get_preferred_width.get_preferred_width.none
#COMMENT: location to store the natural width, or %NULL
#NAME: foreground-gdk
#PARENT: Gtk.CellRendererText
#COMMENT: Foreground color as a #GdkColor
#NAME: value-changed
#PARENT: Gtk.SpinButton
#COMMENT: The ::value-changed signal is emitted when the value represented by
@spinbutton changes. Also see the #GtkSpinButton::output signal.
#NAME: get_path_for_child
#PARENT: Gtk.ContainerClass.get_path_for_child.get_path_for_child
#COMMENT: A newly created #GtkWidgetPath
#NAME: buffer
#PARENT: Gtk.TextBuffer.move_mark_by_name.none
#COMMENT: a #GtkTextBuffer
#NAME: adjustment
#PARENT: Gtk.Viewport.set_hadjustment.none
#COMMENT: a #GtkAdjustment.
#NAME: key_file
#PARENT: Gtk.PrintSettings.load_key_file.gboolean
#COMMENT: the #GKeyFile to retrieve the settings from
#NAME: icon_view
#PARENT: Gtk.IconView.unselect_path.none
#COMMENT: A #GtkIconView.
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_iter_at_line.none
#COMMENT: a #GtkTextBuffer
#NAME: widget
#PARENT: Gtk.paint_vline.none
#COMMENT: the widget
#NAME: combo_box
#PARENT: Gtk.ComboBox.get_column_span_column.gint
#COMMENT: A #GtkComboBox
#NAME: load_icon_for_scale
#PARENT: Gtk.IconTheme
#COMMENT: Looks up an icon in an icon theme for a particular window scale,
scales it to the given size and renders it into a pixbuf. This is a
convenience function; if more details about the icon are needed,
use gtk_icon_theme_lookup_icon() followed by
gtk_icon_info_load_icon().

Note that you probably want to listen for icon theme changes and
update the icon. This is usually done by connecting to the
GtkWidget::style-set signal. If for some reason you do not want to
update the icon when the icon theme changes, you should consider
using gdk_pixbuf_copy() to make a private copy of the pixbuf
returned by this function. Otherwise GTK+ may need to keep the old
icon theme loaded, which would be a waste of memory.
#NAME: get_position
#PARENT: Gtk.Window
#COMMENT: This function returns the position you need to pass to
gtk_window_move() to keep @window in its current position.
This means that the meaning of the returned value varies with
window gravity. See gtk_window_move() for more details.

If you haven’t changed the window gravity, its gravity will be
#GDK_GRAVITY_NORTH_WEST. This means that gtk_window_get_position()
gets the position of the top-left corner of the window manager
frame for the window. gtk_window_move() sets the position of this
same top-left corner.

gtk_window_get_position() is not 100% reliable because the X Window System
does not specify a way to obtain the geometry of the
decorations placed on a window by the window manager.
Thus GTK+ is using a “best guess” that works with most
window managers.

Moreover, nearly all window managers are historically broken with
respect to their handling of window gravity. So moving a window to
its current position as returned by gtk_window_get_position() tends
to result in moving the window slightly. Window managers are
slowly getting better over time.

If a window has gravity #GDK_GRAVITY_STATIC the window manager
frame is not relevant, and thus gtk_window_get_position() will
always produce accurate results. However you can’t use static
gravity to do things like place a window in a corner of the screen,
because static gravity ignores the window manager decorations.

If you are saving and restoring your application’s window
positions, you should know that it’s impossible for applications to
do this without getting it somewhat wrong because applications do
not have sufficient knowledge of window manager state. The Correct
Mechanism is to support the session management protocol (see the
“GnomeClient” object in the GNOME libraries for example) and allow
the window manager to save your window sizes and positions.
#NAME: insert-at-cursor
#PARENT: Gtk.Entry
#COMMENT: The ::insert-at-cursor signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates the insertion of a
fixed string at the cursor.

This signal has no default bindings.
#NAME: attach
#PARENT: Gtk.Menu
#COMMENT: Adds a new #GtkMenuItem to a (table) menu. The number of “cells” that
an item will occupy is specified by @left_attach, @right_attach,
@top_attach and @bottom_attach. These each represent the leftmost,
rightmost, uppermost and lower column and row numbers of the table.
(Columns and rows are indexed from zero).

Note that this function is not related to gtk_menu_detach().
#NAME: PrintStatus
#PARENT: Gtk
#COMMENT: The status gives a rough indication of the completion of a running
print operation.
#NAME: changed
#PARENT: Gtk.TextBuffer
#COMMENT: The ::changed signal is emitted when the content of a #GtkTextBuffer
has changed.
#NAME: mark-deleted
#PARENT: Gtk.TextBuffer
#COMMENT: The ::mark-deleted signal is emitted as notification
after a #GtkTextMark is deleted.

See also:
gtk_text_buffer_delete_mark().
#NAME: new_from_file
#PARENT: Gtk.StatusIcon
#COMMENT: Creates a status icon displaying the file @filename.

The image will be scaled down to fit in the available
space in the notification area, if necessary.
#NAME: tree_model_sort
#PARENT: Gtk.TreeModelSort.convert_child_iter_to_iter.gboolean
#COMMENT: A #GtkTreeModelSort
#NAME: get_child1
#PARENT: Gtk.Paned.get_child1
#COMMENT: first child, or %NULL if it is not set.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_get_state.StateFlags
#COMMENT: position to get the state for, -1 for the path head
#NAME: key
#PARENT: Gtk.PrintSettings.get_int.gint
#COMMENT: a key
#NAME: region_name
#PARENT: Gtk.StyleContext.has_region.gboolean
#COMMENT: a region name
#NAME: count
#PARENT: Gtk.TextView.move-viewport.none
#COMMENT: the number of @step units to move
#NAME: remove_column
#PARENT: Gtk.TreeView.remove_column
#COMMENT: The number of columns in @tree_view after removing.
#NAME: widget
#PARENT: Gtk.Widget.set_visible.none
#COMMENT: a #GtkWidget
#NAME: ListBoxSortFunc
#PARENT: Gtk.ListBoxSortFunc
#COMMENT: < 0 if @row1 should be before @row2, 0 if they are
    equal and > 0 otherwise
#NAME: window
#PARENT: Gtk.Window.get_attached_to.Widget
#COMMENT: a #GtkWindow
#NAME: child_model
#PARENT: Gtk.TreeModel.filter_new.TreeModel
#COMMENT: A #GtkTreeModel.
#NAME: mark
#PARENT: Gtk.TextView.move_mark_onscreen.gboolean
#COMMENT: a #GtkTextMark
#NAME: natural_size
#PARENT: Gtk.Widget.get_preferred_size.none
#COMMENT: location for storing the natural size, or %NULL
#NAME: path_reversed
#PARENT: Gtk.Widget.path.none
#COMMENT: location to store allocated reverse
    path string, or %NULL
#NAME: text_view
#PARENT: Gtk.TextView.starts_display_line.gboolean
#COMMENT: a #GtkTextView
#NAME: path
#PARENT: Gtk.UIManager.add_ui.none
#COMMENT: a path
#NAME: menu
#PARENT: Gtk.UIManagerItemType
#COMMENT: Create a menu.
#NAME: icon_view
#PARENT: Gtk.IconView.set_tooltip_item.none
#COMMENT: a #GtkIconView
#NAME: flags
#PARENT: Gtk.ToolPalette.add_drag_dest.none
#COMMENT: the flags that specify what actions GTK+ should take for drops
    on that widget
#NAME: page_size
#PARENT: Gtk.Adjustment.set_page_size.none
#COMMENT: the new page size
#NAME: length
#PARENT: Gtk.CssProvider.load_from_data.gboolean
#COMMENT: the length of @data in bytes, or -1 for NUL terminated strings. If
  @length is not -1, the code will assume it is not NUL terminated and will
  potentially do a copy.
#NAME: dnotify
#PARENT: Gtk.TreeView.insert_column_with_data_func.gint
#COMMENT: destroy notifier for @data
#NAME: priority
#PARENT: Gtk.rc_parse_priority.guint
#COMMENT: A pointer to #GtkPathPriorityType variable in which
 to store the result.
#NAME: sync_action_properties
#PARENT: Gtk.Activatable
#COMMENT: This is called to update the activatable completely, this is called
internally when the #GtkActivatable:related-action property is set
or unset and by the implementing class when
#GtkActivatable:use-action-appearance changes.
#NAME: widget_class_pspecs
#PARENT: Gtk.BindingSet
#COMMENT: unused
#NAME: ellipsize
#PARENT: Gtk.Label
#COMMENT: The preferred place to ellipsize the string, if the label does
not have enough room to display the entire string, specified as a
#PangoEllipsizeMode.

Note that setting this property to a value other than
%PANGO_ELLIPSIZE_NONE has the side-effect that the label requests
only enough space to display the ellipsis "...". In particular, this
means that ellipsizing labels do not work well in notebook tabs, unless
the #GtkNotebook tab-expand child property is set to %TRUE. Other ways
to set a label's width are gtk_widget_set_size_request() and
gtk_label_set_width_chars().
#NAME: alignment
#PARENT: Gtk.Alignment.get_padding.none
#COMMENT: a #GtkAlignment
#NAME: new
#PARENT: Gtk.CellRendererText.new
#COMMENT: the new cell renderer
#NAME: n-pages-to-print
#PARENT: Gtk.PrintOperation
#COMMENT: The number of pages that will be printed.

Note that this value is set during print preparation phase
(%GTK_PRINT_STATUS_PREPARING), so this value should never be
get before the data generation phase (%GTK_PRINT_STATUS_GENERATING_DATA).
You can connect to the #GtkPrintOperation::status-changed signal
and call gtk_print_operation_get_n_pages_to_print() when
print status is %GTK_PRINT_STATUS_GENERATING_DATA.
This is typically used to track the progress of print operation.
#NAME: widget
#PARENT: Gtk.drag_set_icon_widget.none
#COMMENT: a toplevel window to use as an icon
#NAME: icon_view
#PARENT: Gtk.IconView.select_path.none
#COMMENT: A #GtkIconView.
#NAME: select_row
#PARENT: Gtk.ListBox
#COMMENT: Make @row the currently selected row.
#NAME: GLAreaClass
#PARENT: Gtk
#COMMENT: The `GtkGLAreaClass` structure contains only private data.
#NAME: get_accel_group
#PARENT: Gtk.ActionGroup
#COMMENT: Gets the accelerator group.
#NAME: icon_view
#PARENT: Gtk.IconView.set_item_padding.none
#COMMENT: a #GtkIconView
#NAME: value
#PARENT: Gtk.TreeStore.set_value.none
#COMMENT: new value for the cell
#NAME: event
#PARENT: Gtk.Widget.destroy-event.gboolean
#COMMENT: the event which triggered this signal
#NAME: copy
#PARENT: Gtk.IconInfo
#COMMENT: Make a copy of a #GtkIconInfo.
#NAME: pixbuf
#PARENT: Gtk.IconSource.set_pixbuf.none
#COMMENT: pixbuf to use as a source
#NAME: MINOR_VERSION
#PARENT: Gtk
#COMMENT: Like gtk_get_minor_version(), but from the headers used at
application compile time, rather than from the library linked
against at application run time.
#NAME: state
#PARENT: Gtk.StyleProvider.get_style_property.gboolean
#COMMENT: state to query the style property for
#NAME: tagset_name
#PARENT: Gtk.TextBuffer.register_serialize_tagset.Gdk.Atom
#COMMENT: an optional tagset name, on %NULL
#NAME: get_show_preview_entry
#PARENT: Gtk.FontChooser
#COMMENT: Returns whether the preview entry is shown or not.
#NAME: context
#PARENT: Gtk.StyleContext.restore.none
#COMMENT: a #GtkStyleContext
#NAME: event_object
#PARENT: Gtk.TextTag.event.gboolean
#COMMENT: object that received the event, such as a widget
#NAME: convert_bin_window_to_widget_coords
#PARENT: Gtk.TreeView
#COMMENT: Converts bin_window coordinates (see gtk_tree_view_get_bin_window())
to widget relative coordinates.
#NAME: end
#PARENT: Gtk.TextBuffer.get_selection_bounds.gboolean
#COMMENT: iterator to initialize with selection end
#NAME: widget
#PARENT: Gtk.CellAreaClass.get_preferred_width.get_preferred_width.none
#COMMENT: the #GtkWidget where @area will be rendering
#NAME: get_show_default_item
#PARENT: Gtk.AppChooserButton.get_show_default_item
#COMMENT: the value of #GtkAppChooserButton:show-default-item
#NAME: label
#PARENT: Gtk.ImageMenuItem.new_with_mnemonic.Widget
#COMMENT: the text of the menu item, with an underscore in front of the
        mnemonic character
#NAME: notebook
#PARENT: Gtk.Notebook.prepend_page.gint
#COMMENT: a #GtkNotebook
#NAME: create_pango_layout
#PARENT: Gtk.PrintContext.create_pango_layout
#COMMENT: a new Pango layout for @context
#NAME: drag-data-get
#PARENT: Gtk.Widget
#COMMENT: The ::drag-data-get signal is emitted on the drag source when the drop
site requests the data which is dragged. It is the responsibility of
the signal handler to fill @data with the data in the format which
is indicated by @info. See gtk_selection_data_set() and
gtk_selection_data_set_text().
#NAME: widget
#PARENT: Gtk.CellRenderer.get_aligned_area.none
#COMMENT: the #GtkWidget this cell will be rendering to
#NAME: copy-clipboard
#PARENT: Gtk.TextView
#COMMENT: The ::copy-clipboard signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to copy the selection to the clipboard.

The default bindings for this signal are
Ctrl-c and Ctrl-Insert.
#NAME: action
#PARENT: Gtk.Action.create_tool_item.Widget
#COMMENT: the action object
#NAME: iter
#PARENT: Gtk.TextIter.set_line_offset.none
#COMMENT: a #GtkTextIter
#NAME: column
#PARENT: Gtk.TreeView.get_path_at_pos.gboolean
#COMMENT: A pointer to
  a #GtkTreeViewColumn pointer to be filled in, or %NULL
#NAME: box
#PARENT: Gtk.CellAreaBox.pack_start.none
#COMMENT: a #GtkCellAreaBox
#NAME: icon_view
#PARENT: Gtk.IconView.get_selection_mode.SelectionMode
#COMMENT: A #GtkIconView.
#NAME: get_wrap_mode
#PARENT: Gtk.TextView
#COMMENT: Gets the line wrapping for the view.
#NAME: tree_model
#PARENT: Gtk.TreeModel.get_iter_first.gboolean
#COMMENT: a #GtkTreeModel
#NAME: render
#PARENT: Gtk.GLArea.render
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: application
#PARENT: Gtk.Window.set_application.none
#COMMENT: a #GtkApplication, or %NULL
#NAME: targets
#PARENT: Gtk.targets_include_uri.gboolean
#COMMENT: an array of #GdkAtoms
#NAME: age
#PARENT: Gtk.RecentFilterFlags
#COMMENT: the number of days elapsed since the file
 has been registered
#NAME: remove
#PARENT: Gtk.TargetList
#COMMENT: Removes a target from a target list.
#NAME: filter
#PARENT: Gtk.TreeModelFilter.get_model.TreeModel
#COMMENT: A #GtkTreeModelFilter.
#NAME: unref
#PARENT: Gtk.IconSet
#COMMENT: Decrements the reference count on @icon_set, and frees memory
if the reference count reaches 0.
#NAME: get_header
#PARENT: Gtk.ListBoxRow.get_header
#COMMENT: the current header, or %NULL if none
#NAME: detail
#PARENT: Gtk.paint_shadow_gap.none
#COMMENT: a style detail
#NAME: get_accel_closure
#PARENT: Gtk.Action.get_accel_closure
#COMMENT: the accel closure for this action. The
         returned closure is owned by GTK+ and must not be unreffed
         or modified.
#NAME: show_style
#PARENT: Gtk.FontButton.set_show_style.none
#COMMENT: %TRUE if font style should be displayed in label.
#NAME: size
#PARENT: Gtk.Image.set_from_icon_name.none
#COMMENT: an icon size
#NAME: index_
#PARENT: Gtk.TreeModelIface.get_column_type.get_column_type.GType
#COMMENT: the column index
#NAME: get_fixed_width
#PARENT: Gtk.TreeViewColumn
#COMMENT: Gets the fixed width of the column.  This may not be the actual displayed
width of the column; for that, use gtk_tree_view_column_get_width().
#NAME: tagname
#PARENT: Gtk.Buildable.custom_tag_end.none
#COMMENT: name of tag
#NAME: create_mark
#PARENT: Gtk.TextBuffer.create_mark
#COMMENT: the new #GtkTextMark object
#NAME: cell_set_cell_data
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the cell renderer based on the @tree_model and @iter.  That is, for
every attribute mapping in @tree_column, it will get a value from the set
column on the @iter, and use that value to set the attribute on the cell
renderer.  This is used primarily by the #GtkTreeView.
#NAME: reshow_with_initial_size
#PARENT: Gtk.Window
#COMMENT: Hides @window, then reshows it, resetting the
default size and position of the window. Used
by GUI builders only.
#NAME: completion
#PARENT: Gtk.EntryCompletion.get_entry.Widget
#COMMENT: a #GtkEntryCompletion
#NAME: get_above_child
#PARENT: Gtk.EventBox
#COMMENT: Returns whether the event box window is above or below the
windows of its child. See gtk_event_box_set_above_child()
for details.
#NAME: container
#PARENT: Gtk.Container.get_focus_child.Widget
#COMMENT: a #GtkContainer
#NAME: get_modified
#PARENT: Gtk.RecentInfo.get_modified
#COMMENT: the number of seconds elapsed from system’s Epoch when
  the resource was last modified, or -1 on failure.
#NAME: is_adjusting
#PARENT: Gtk.ColorSelection
#COMMENT: Gets the current state of the @colorsel.
#NAME: get_translation_domain
#PARENT: Gtk.Builder.get_translation_domain
#COMMENT: the translation domain. This string is owned
by the builder object and must not be modified or freed.
#NAME: builder
#PARENT: Gtk.BuildableIface.parser_finished.parser_finished.none
#COMMENT: a #GtkBuilder
#NAME: BorderStyle
#PARENT: Gtk
#COMMENT: Describes how the border of a UI element should be rendered.
#NAME: drag_dest_set_track_motion
#PARENT: Gtk.Widget
#COMMENT: Tells the widget to emit #GtkWidget::drag-motion and
#GtkWidget::drag-leave events regardless of the targets and the
%GTK_DEST_DEFAULT_MOTION flag.

This may be used when a widget wants to do generic
actions regardless of the targets that the source offers.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_clear_classes.none
#COMMENT: position to modify, -1 for the path head
#NAME: ButtonBoxStyle
#PARENT: Gtk
#COMMENT: Used to dictate the style that a #GtkButtonBox uses to layout the buttons it
contains.
#NAME: set_sort_func
#PARENT: Gtk.ListBox
#COMMENT: By setting a sort function on the @box one can dynamically reorder the rows
of the list, based on the contents of the rows.

The @sort_func will be called for each row after the call, and will continue to
be called each time a row changes (via gtk_list_box_row_changed()) and when
gtk_list_box_invalidate_sort() is called.
#NAME: ref
#PARENT: Gtk.SymbolicColor.ref
#COMMENT: the same @color
#NAME: text
#PARENT: Gtk.IMContextClass.set_surrounding.set_surrounding.none
#COMMENT: text surrounding the insertion point, as UTF-8.
       the preedit string should not be included within
       @text.
#NAME: get_inner_border
#PARENT: Gtk.Entry
#COMMENT: This function returns the entry’s #GtkEntry:inner-border property. See
gtk_entry_set_inner_border() for more information.
#NAME: clipboard
#PARENT: Gtk.Clipboard.wait_for_text.utf8
#COMMENT: a #GtkClipboard
#NAME: 
#PARENT: Gtk.TextBuffer.insert_with_tags.none...
#COMMENT: %NULL-terminated list of tags to apply
#NAME: widget
#PARENT: Gtk.Widget.add_device_events.none
#COMMENT: a #GtkWidget
#NAME: fixed
#PARENT: Gtk.ComboBox.set_popup_fixed_width.none
#COMMENT: whether to use a fixed popup width
#NAME: get_widget
#PARENT: Gtk.UIManager
#COMMENT: Looks up a widget by following a path.
The path consists of the names specified in the XML description of the UI.
separated by “/”. Elements which don’t have a name or action attribute in
the XML (e.g. <popup>) can be addressed by their XML element name
(e.g. "popup"). The root element ("/ui") can be omitted in the path.

Note that the widget found by following a path that ends in a <menu>;
element is the menuitem to which the menu is attached, not the menu it
manages.

Also note that the widgets constructed by a ui manager are not tied to
the lifecycle of the ui manager. If you add the widgets returned by this
function to some container or explicitly ref them, they will survive the
destruction of the ui manager.
#NAME: icon_theme
#PARENT: Gtk.IconTheme.get_example_icon_name.utf8
#COMMENT: a #GtkIconTheme
#NAME: get_max_value
#PARENT: Gtk.LevelBar.get_max_value
#COMMENT: a positive value
#NAME: get_path
#PARENT: Gtk.TreeModel.get_path
#COMMENT: a newly-created #GtkTreePath-struct
#NAME: get_name
#PARENT: Gtk.Widget
#COMMENT: Retrieves the name of a widget. See gtk_widget_set_name() for the
significance of widget names.
#NAME: sibling_index
#PARENT: Gtk.WidgetPath.append_with_siblings.gint
#COMMENT: index into @siblings for where the added element is
  positioned.
#NAME: icon_size_get_name
#PARENT: Gtk.icon_size_get_name
#COMMENT: the name of the given icon size.
#NAME: path_pattern
#PARENT: Gtk.BindingSet.add_path.none
#COMMENT: the actual match pattern
#NAME: new
#PARENT: Gtk.HSV
#COMMENT: Creates a new HSV color selector.
#NAME: widget
#PARENT: Gtk.Widget.get_preferred_width_for_height.none
#COMMENT: a #GtkWidget instance
#NAME: CheckMenuItem
#PARENT: Gtk
#COMMENT: A #GtkCheckMenuItem is a menu item that maintains the state of a boolean
value in addition to a #GtkMenuItem usual role in activating application
code.

A check box indicating the state of the boolean value is displayed
at the left side of the #GtkMenuItem.  Activating the #GtkMenuItem
toggles the value.
#NAME: secondary
#PARENT: Gtk.PlacesSidebar.show-error-message.none
#COMMENT: secondary message with details of the error to show.
#NAME: TreeModel
#PARENT: Gtk
#COMMENT: The #GtkTreeModel interface defines a generic tree interface for
use by the #GtkTreeView widget. It is an abstract interface, and
is designed to be usable with any appropriate data structure. The
programmer just has to implement this interface on their own data
type for it to be viewable by a #GtkTreeView widget.

The model is represented as a hierarchical tree of strongly-typed,
columned data. In other words, the model can be seen as a tree where
every node has different values depending on which column is being
queried. The type of data found in a column is determined by using
the GType system (ie. #G_TYPE_INT, #GTK_TYPE_BUTTON, #G_TYPE_POINTER,
etc). The types are homogeneous per column across all nodes. It is
important to note that this interface only provides a way of examining
a model and observing changes. The implementation of each individual
model decides how and if changes are made.

In order to make life simpler for programmers who do not need to
write their own specialized model, two generic models are provided
— the #GtkTreeStore and the #GtkListStore. To use these, the
developer simply pushes data into these models as necessary. These
models provide the data structure as well as all appropriate tree
interfaces. As a result, implementing drag and drop, sorting, and
storing data is trivial. For the vast majority of trees and lists,
these two models are sufficient.

Models are accessed on a node/column level of granularity. One can
query for the value of a model at a certain node and a certain
column on that node. There are two structures used to reference a
particular node in a model. They are the #GtkTreePath-struct and
the #GtkTreeIter-struct (“iter” is short for iterator). Most of the
interface consists of operations on a #GtkTreeIter-struct.

A path is essentially a potential node. It is a location on a model
that may or may not actually correspond to a node on a specific
model. The #GtkTreePath-struct can be converted into either an
array of unsigned integers or a string. The string form is a list
of numbers separated by a colon. Each number refers to the offset
at that level. Thus, the path `0` refers to the root
node and the path `2:4` refers to the fifth child of
the third node.

By contrast, a #GtkTreeIter-struct is a reference to a specific node on
a specific model. It is a generic struct with an integer and three
generic pointers. These are filled in by the model in a model-specific
way. One can convert a path to an iterator by calling
gtk_tree_model_get_iter(). These iterators are the primary way
of accessing a model and are similar to the iterators used by
#GtkTextBuffer. They are generally statically allocated on the
stack and only used for a short time. The model interface defines
a set of operations using them for navigating the model.

It is expected that models fill in the iterator with private data.
For example, the #GtkListStore model, which is internally a simple
linked list, stores a list node in one of the pointers. The
#GtkTreeModelSort stores an array and an offset in two of the
pointers. Additionally, there is an integer field. This field is
generally filled with a unique stamp per model. This stamp is for
catching errors resulting from using invalid iterators with a model.

The lifecycle of an iterator can be a little confusing at first.
Iterators are expected to always be valid for as long as the model
is unchanged (and doesn’t emit a signal). The model is considered
to own all outstanding iterators and nothing needs to be done to
free them from the user’s point of view. Additionally, some models
guarantee that an iterator is valid for as long as the node it refers
to is valid (most notably the #GtkTreeStore and #GtkListStore).
Although generally uninteresting, as one always has to allow for
the case where iterators do not persist beyond a signal, some very
important performance enhancements were made in the sort model.
As a result, the #GTK_TREE_MODEL_ITERS_PERSIST flag was added to
indicate this behavior.

To help show some common operation of a model, some examples are
provided. The first example shows three ways of getting the iter at
the location `3:2:5`. While the first method shown is
easier, the second is much more common, as you often get paths from
callbacks.

## Acquiring a #GtkTreeIter-struct

|[<!-- language="C" -->
// Three ways of getting the iter pointing to the location
GtkTreePath *path;
GtkTreeIter iter;
GtkTreeIter parent_iter;

// get the iterator from a string
gtk_tree_model_get_iter_from_string (model,
                                     &iter,
                                     "3:2:5");

// get the iterator from a path
path = gtk_tree_path_new_from_string ("3:2:5");
gtk_tree_model_get_iter (model, &iter, path);
gtk_tree_path_free (path);

// walk the tree to find the iterator
gtk_tree_model_iter_nth_child (model, &iter,
                               NULL, 3);
parent_iter = iter;
gtk_tree_model_iter_nth_child (model, &iter,
                               &parent_iter, 2);
parent_iter = iter;
gtk_tree_model_iter_nth_child (model, &iter,
                               &parent_iter, 5);
]|

This second example shows a quick way of iterating through a list
and getting a string and an integer from each row. The
populate_model() function used below is not
shown, as it is specific to the #GtkListStore. For information on
how to write such a function, see the #GtkListStore documentation.

## Reading data from a #GtkTreeModel

|[<!-- language="C" -->
enum
{
  STRING_COLUMN,
  INT_COLUMN,
  N_COLUMNS
};

...

GtkTreeModel *list_store;
GtkTreeIter iter;
gboolean valid;
gint row_count = 0;

// make a new list_store
list_store = gtk_list_store_new (N_COLUMNS,
                                 G_TYPE_STRING,
                                 G_TYPE_INT);

// Fill the list store with data
populate_model (list_store);

// Get the first iter in the list, check it is valid and walk
// through the list, reading each row.

valid = gtk_tree_model_get_iter_first (list_store,
                                       &iter);
while (valid)
 {
   gchar *str_data;
   gint   int_data;

   // Make sure you terminate calls to gtk_tree_model_get() with a “-1” value
   gtk_tree_model_get (list_store, &iter,
                       STRING_COLUMN, &str_data,
                       INT_COLUMN, &int_data,
                       -1);

   // Do something with the data
   g_print ("Row %d: (%s,%d)\n",
            row_count, str_data, int_data);
   g_free (str_data);

   valid = gtk_tree_model_iter_next (list_store,
                                     &iter);
   row_count++;
 }
]|

The #GtkTreeModel interface contains two methods for reference
counting: gtk_tree_model_ref_node() and gtk_tree_model_unref_node().
These two methods are optional to implement. The reference counting
is meant as a way for views to let models know when nodes are being
displayed. #GtkTreeView will take a reference on a node when it is
visible, which means the node is either in the toplevel or expanded.
Being displayed does not mean that the node is currently directly
visible to the user in the viewport. Based on this reference counting
scheme a caching model, for example, can decide whether or not to cache
a node based on the reference count. A file-system based model would
not want to keep the entire file hierarchy in memory, but just the
folders that are currently expanded in every current view.

When working with reference counting, the following rules must be taken
into account:

- Never take a reference on a node without owning a reference on its parent.
  This means that all parent nodes of a referenced node must be referenced
  as well.

- Outstanding references on a deleted node are not released. This is not
  possible because the node has already been deleted by the time the
  row-deleted signal is received.

- Models are not obligated to emit a signal on rows of which none of its
  siblings are referenced. To phrase this differently, signals are only
  required for levels in which nodes are referenced. For the root level
  however, signals must be emitted at all times (however the root level
  is always referenced when any view is attached).
#NAME: rc_get_default_files
#PARENT: Gtk
#COMMENT: Retrieves the current list of RC files that will be parsed
at the end of gtk_init().
#NAME: by_class
#PARENT: Gtk.BindingSet
#COMMENT: This function returns the binding set named after the type name of
the passed in class structure. New binding sets are created on
demand by this function.
#NAME: STOCK_ORIENTATION_PORTRAIT
#PARENT: Gtk
#COMMENT: The “Portrait Orientation” item and icon.
#NAME: tree_view
#PARENT: Gtk.TreeView.scroll_to_cell.none
#COMMENT: A #GtkTreeView.
#NAME: preedit
#PARENT: Gtk.Entry.preedit-changed.none
#COMMENT: the current preedit string
#NAME: pixbuf-column
#PARENT: Gtk.IconView
#COMMENT: The ::pixbuf-column property contains the number of the model column
containing the pixbufs which are displayed. The pixbuf column must be
of type #GDK_TYPE_PIXBUF. Setting this property to -1 turns off the
display of pixbufs.
#NAME: set_shadow_type
#PARENT: Gtk.ScrolledWindow
#COMMENT: Changes the type of shadow drawn around the contents of
@scrolled_window.
#NAME: TreeModelForeachFunc
#PARENT: Gtk
#COMMENT: Type of the callback passed to gtk_tree_model_foreach() to
iterate over the rows in a tree model.
#NAME: get_valign_with_baseline
#PARENT: Gtk.Widget.get_valign_with_baseline
#COMMENT: the vertical alignment of @widget
#NAME: binding_set
#PARENT: Gtk.BindingEntry.remove.none
#COMMENT: a #GtkBindingSet to remove an entry of
#NAME: context
#PARENT: Gtk.render_layout.none
#COMMENT: a #GtkStyleContext
#NAME: query
#PARENT: Gtk.AccelGroup.query
#COMMENT: an array of
    @n_entries #GtkAccelGroupEntry elements, or %NULL. The array
    is owned by GTK+ and must not be freed.
#NAME: colorsel
#PARENT: Gtk.ColorSelection.set_current_rgba.none
#COMMENT: a #GtkColorSelection
#NAME: icon_view
#PARENT: Gtk.IconView.get_margin.gint
#COMMENT: a #GtkIconView
#NAME: focus-home-or-end
#PARENT: Gtk.Toolbar
#COMMENT: A keybinding signal used internally by GTK+. This signal can't
be used in application code
#NAME: child
#PARENT: Gtk.ActionBar.pack_end.none
#COMMENT: the #GtkWidget to be added to @action_bar
#NAME: direction
#PARENT: Gtk.IconSource.set_direction.none
#COMMENT: text direction this source applies to
#NAME: right
#PARENT: Gtk.Justification
#COMMENT: The text is placed at the right edge of the label.
#NAME: label
#PARENT: Gtk.MenuItem.new_with_label.Widget
#COMMENT: the text for the label
#NAME: child_type
#PARENT: Gtk.Container.child_type
#COMMENT: a #GType.
#NAME: bar
#PARENT: Gtk.HeaderBar.get_subtitle.utf8
#COMMENT: a #GtkHeaderBar
#NAME: icon_theme
#PARENT: Gtk.IconTheme.add_resource_path.none
#COMMENT: a #GtkIconTheme
#NAME: new_shade
#PARENT: Gtk.SymbolicColor.new_shade
#COMMENT: A newly created #GtkSymbolicColor
#NAME: settings
#PARENT: Gtk.rc_reparse_all_for_settings.gboolean
#COMMENT: a #GtkSettings
#NAME: new
#PARENT: Gtk.FlowBox.new
#COMMENT: a new #GtkFlowBox container
#NAME: position
#PARENT: Gtk.Scale.add_mark.none
#COMMENT: where to draw the mark. For a horizontal scale, #GTK_POS_TOP
  and %GTK_POS_LEFT are drawn above the scale, anything else below.
  For a vertical scale, #GTK_POS_LEFT and %GTK_POS_TOP are drawn to
  the left of the scale, anything else to the right.
#NAME: column
#PARENT: Gtk.CellLayout.add_attribute.none
#COMMENT: the column position on the model to get the attribute from
#NAME: major
#PARENT: Gtk.GLArea.get_required_version.none
#COMMENT: return location for the required major version
#NAME: get_size
#PARENT: Gtk.IconSource
#COMMENT: Obtains the icon size this source applies to. The return value
is only useful/meaningful if the icon size is not wildcarded.
#NAME: misc
#PARENT: Gtk.Misc.set_padding.none
#COMMENT: a #GtkMisc.
#NAME: scale
#PARENT: Gtk.Scale.set_value_pos.none
#COMMENT: a #GtkScale
#NAME: button
#PARENT: Gtk.MenuToolButton.set_arrow_tooltip_markup.none
#COMMENT: a #GtkMenuToolButton
#NAME: settings
#PARENT: Gtk.PrintSettings.get_collate.gboolean
#COMMENT: a #GtkPrintSettings
#NAME: get_local_only
#PARENT: Gtk.PlacesSidebar.get_local_only
#COMMENT: %TRUE if the sidebar will only show local files.
#NAME: position
#PARENT: Gtk.TreeView.insert_column_with_data_func.gint
#COMMENT: Position to insert, -1 for append
#NAME: set_cursor_hadjustment
#PARENT: Gtk.Entry
#COMMENT: Hooks up an adjustment to the cursor position in an entry, so that when
the cursor is moved, the adjustment is scrolled to show that position.
See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining
the adjustment.

The adjustment has to be in pixel units and in the same coordinate system
as the entry.
#NAME: iter
#PARENT: Gtk.EntryCompletion.cursor-on-match.gboolean
#COMMENT: a #GtkTreeIter positioned at the selected match
#NAME: len
#PARENT: Gtk.TextBuffer.insert.none
#COMMENT: length of text in bytes, or -1
#NAME: row_draggable
#PARENT: Gtk.TreeDragSourceIface.row_draggable.row_draggable
#COMMENT: %TRUE if the row can be dragged
#NAME: get_image_position
#PARENT: Gtk.Button.get_image_position
#COMMENT: the position
#NAME: label
#PARENT: Gtk.Label.get_attributes.Pango.AttrList
#COMMENT: a #GtkLabel
#NAME: box
#PARENT: Gtk.ListBox.drag_unhighlight_row.none
#COMMENT: a #GtkListBox
#NAME: where
#PARENT: Gtk.TextBuffer.move_mark.none
#COMMENT: new location for @mark in @buffer
#NAME: mime_type
#PARENT: Gtk.TextBuffer.register_deserialize_format.Gdk.Atom
#COMMENT: the format’s mime-type
#NAME: action
#PARENT: Gtk.UIManager.connect-proxy.none
#COMMENT: the action
#NAME: get_objects
#PARENT: Gtk.Builder.get_objects
#COMMENT: a newly-allocated #GSList containing all the objects
  constructed by the #GtkBuilder instance. It should be freed by
  g_slist_free()
#NAME: list_shortcut_folder_uris
#PARENT: Gtk.FileChooser
#COMMENT: Queries the list of shortcut folders in the file chooser, as set by
gtk_file_chooser_add_shortcut_folder_uri().
#NAME: column
#PARENT: Gtk.TreeView.move_column_after.none
#COMMENT: The #GtkTreeViewColumn to be moved.
#NAME: box
#PARENT: Gtk.FlowBox.get_column_spacing.guint
#COMMENT: a #GtkFlowBox
#NAME: position
#PARENT: Gtk.Popover.set_position.none
#COMMENT: preferred popover position
#NAME: other
#PARENT: Gtk.PrintSettings.copy.PrintSettings
#COMMENT: a #GtkPrintSettings
#NAME: filter
#PARENT: Gtk.TreeModelFilter.refilter.none
#COMMENT: A #GtkTreeModelFilter.
#NAME: widget
#PARENT: Gtk.Widget.drag_source_set_icon_gicon.none
#COMMENT: a #GtkWidget
#NAME: scanner
#PARENT: Gtk.rc_parse_state.guint
#COMMENT: a #GScanner (must be initialized for parsing an RC file)
#NAME: mime_type
#PARENT: Gtk.FileFilterFlags
#COMMENT: the mime type of the file
#NAME: iter
#PARENT: Gtk.ListStore.move_after.none
#COMMENT: A #GtkTreeIter.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_expander_column.none
#COMMENT: A #GtkTreeView
#NAME: get_has_entry
#PARENT: Gtk.ComboBox
#COMMENT: Returns whether the combo box has an entry.
#NAME: bg
#PARENT: Gtk.RcStyle
#COMMENT: Background colors
#NAME: get_has_origin
#PARENT: Gtk.Scale
#COMMENT: Returns whether the scale has an origin.
#NAME: uppercase_words
#PARENT: Gtk.InputHints
#COMMENT: Suggest to capitalize the first
    character of each word
#NAME: key
#PARENT: Gtk.PrintSettings.get_double.gdouble
#COMMENT: a key
#NAME: event
#PARENT: Gtk.IMContextClass.filter_keypress.filter_keypress.gboolean
#COMMENT: the key event
#NAME: context
#PARENT: Gtk.StyleContext.scroll_animations.none
#COMMENT: a #GtkStyleContext
#NAME: set_previous_rgba
#PARENT: Gtk.ColorSelection
#COMMENT: Sets the “previous” color to be @rgba.

This function should be called with some hesitations,
as it might seem confusing to have that color change.
Calling gtk_color_selection_set_current_rgba() will also
set this color the first time it is called.
#NAME: get_add_tearoffs
#PARENT: Gtk.ComboBox
#COMMENT: Gets the current value of the :add-tearoffs property.
#NAME: drag_dest
#PARENT: Gtk.TreeDragDestIface.row_drop_possible.row_drop_possible.gboolean
#COMMENT: a #GtkTreeDragDest
#NAME: get_accel_path
#PARENT: Gtk.MenuItem.get_accel_path
#COMMENT: the accelerator path corresponding to this menu
    item’s functionality, or %NULL if not set
#NAME: PanDirection
#PARENT: Gtk
#COMMENT: Describes the panning direction of a #GtkGesturePan
#NAME: set_finishings
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_FINISHINGS.
#NAME: range
#PARENT: Gtk.Range.set_range.none
#COMMENT: a #GtkRange
#NAME: name
#PARENT: Gtk.RecentAction.new.Action
#COMMENT: a unique name for the action
#NAME: set_debug_flags
#PARENT: Gtk
#COMMENT: Sets the GTK+ debug flags.
#NAME: get_visible_vertical
#PARENT: Gtk.Action
#COMMENT: Checks whether @action is visible when horizontal
#NAME: wait_is_uris_available
#PARENT: Gtk.Clipboard
#COMMENT: Test to see if there is a list of URIs available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains the URI targets. This function
waits for the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.

This function is a little faster than calling
gtk_clipboard_wait_for_uris() since it doesn’t need to retrieve
the actual URI data.
#NAME: get_use_markup
#PARENT: Gtk.Expander
#COMMENT: Returns whether the label’s text is interpreted as marked up with
the [Pango text markup language][PangoMarkupFormat].
See gtk_expander_set_use_markup().
#NAME: get_subtitle
#PARENT: Gtk.HeaderBar
#COMMENT: Retrieves the subtitle of the header. See gtk_header_bar_set_subtitle().
#NAME: new
#PARENT: Gtk.Overlay
#COMMENT: Creates a new #GtkOverlay.
#NAME: get_value_pos
#PARENT: Gtk.Scale
#COMMENT: Gets the position in which the current value is displayed.
#NAME: begins_tag
#PARENT: Gtk.TextIter.begins_tag
#COMMENT: whether @iter is the start of a range tagged with @tag
#NAME: widget
#PARENT: Gtk.Widget.list_mnemonic_labels.Widget
#COMMENT: a #GtkWidget
#NAME: set_allocation
#PARENT: Gtk.Widget
#COMMENT: Sets the widget’s allocation.  This should not be used
directly, but from within a widget’s size_allocate method.

The allocation set should be the “adjusted” or actual
allocation. If you’re implementing a #GtkContainer, you want to use
gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
allocation inside gtk_widget_size_allocate() to create an adjusted
allocation.
#NAME: get_label
#PARENT: Gtk.Action.get_label
#COMMENT: the label text
#NAME: minimum_height
#PARENT: Gtk.CellAreaClass.get_preferred_height.get_preferred_height.none
#COMMENT: location to store the minimum height, or %NULL
#NAME: rich_text
#PARENT: Gtk.TextBufferTargetInfo
#COMMENT: Rich text
#NAME: parent_class
#PARENT: Gtk.CheckMenuItemClass
#COMMENT: The parent class.
#NAME: is_grouped_with
#PARENT: Gtk.Gesture
#COMMENT: Returns %TRUE if both gestures pertain to the same group.
#NAME: remove_action_widget
#PARENT: Gtk.Assistant
#COMMENT: Removes a widget from the action area of a #GtkAssistant.
#NAME: state
#PARENT: Gtk.ThemingEngine.get_font.Pango.FontDescription
#COMMENT: state to retrieve the font for
#NAME: selection
#PARENT: Gtk.TreeSelection.get_selected.gboolean
#COMMENT: A #GtkTreeSelection.
#NAME: set_input_purpose
#PARENT: Gtk.Entry
#COMMENT: Sets the #GtkEntry:input-purpose property which
can be used by on-screen keyboards and other input
methods to adjust their behaviour.
#NAME: widget
#PARENT: Gtk.Widget.set_vexpand_set.none
#COMMENT: the widget
#NAME: set_activatable
#PARENT: Gtk.CellRendererToggle
#COMMENT: Makes the cell renderer activatable.
#NAME: duplex
#PARENT: Gtk.PrintSettings.set_duplex.none
#COMMENT: a #GtkPrintDuplex value
#NAME: extend-selection
#PARENT: Gtk.TextView
#COMMENT: The ::extend-selection signal is emitted when the selection needs to be
extended at @location.
#NAME: get_active
#PARENT: Gtk.ToggleButton.get_active
#COMMENT: a #gboolean value.
#NAME: destroy
#PARENT: Gtk.ComboBox.set_row_separator_func.none
#COMMENT: destroy notifier for @data, or %NULL
#NAME: end_offset
#PARENT: Gtk.Label.select_region.none
#COMMENT: end offset (in characters not bytes)
#NAME: menu_item
#PARENT: Gtk.MenuItemClass.toggle_size_allocate.toggle_size_allocate.none
#COMMENT: the menu item.
#NAME: dialog
#PARENT: Gtk.Dialog.set_response_sensitive.none
#COMMENT: a #GtkDialog
#NAME: get_default_bottom_margin
#PARENT: Gtk.PaperSize.get_default_bottom_margin
#COMMENT: the default bottom margin
#NAME: get_default_text
#PARENT: Gtk.AppChooserWidget.get_default_text
#COMMENT: the value of #GtkAppChooserWidget:default-text
#NAME: set_use_font
#PARENT: Gtk.FontButton
#COMMENT: If @use_font is %TRUE, the font name will be written using the selected font.
#NAME: get_page_width
#PARENT: Gtk.PageSetup.get_page_width
#COMMENT: the page width.
#NAME: new
#PARENT: Gtk.RecentChooserDialog
#COMMENT: Creates a new #GtkRecentChooserDialog.  This function is analogous to
gtk_dialog_new_with_buttons().
#NAME: set_pixels_inside_wrap
#PARENT: Gtk.TextView
#COMMENT: Sets the default number of pixels of blank space to leave between
display/wrapped lines within a paragraph. May be overridden by
tags in @text_view’s buffer.
#NAME: popup-fixed-width
#PARENT: Gtk.ComboBox
#COMMENT: Whether the popup's width should be a fixed width matching the
allocated width of the combo box.
#NAME: selector
#PARENT: Gtk.CssSectionType
#COMMENT: The section defines a CSS selector.
#NAME: ready
#PARENT: Gtk.PrintOperationPreview
#COMMENT: The ::ready signal gets emitted once per preview operation,
before the first page is rendered.

A handler for this signal can be used for setup tasks.
#NAME: tool_item
#PARENT: Gtk.ToolItem.set_use_drag_window.none
#COMMENT: a #GtkToolItem
#NAME: widget
#PARENT: Gtk.Widget.get_ancestor.Widget
#COMMENT: a #GtkWidget
#NAME: page
#PARENT: Gtk.Assistant.insert_page.gint
#COMMENT: a #GtkWidget
#NAME: end-print
#PARENT: Gtk.PrintOperation
#COMMENT: Emitted after all pages have been rendered.
A handler for this signal can clean up any resources that have
been allocated in the #GtkPrintOperation::begin-print handler.
#NAME: size_group
#PARENT: Gtk.SizeGroup.remove_widget.none
#COMMENT: a #GtkSizeGroup
#NAME: wx
#PARENT: Gtk.TreeView.convert_widget_to_tree_coords.none
#COMMENT: X coordinate relative to the widget
#NAME: 
#PARENT: Gtk.Dialog.set_alternative_button_order.none...
#COMMENT: a list of more response ids of @dialog’s buttons, terminated by -1
#NAME: pos
#PARENT: Gtk.Notebook.set_tab_pos.none
#COMMENT: the edge to draw the tabs at
#NAME: iter
#PARENT: Gtk.TextIter.backward_cursor_positions.gboolean
#COMMENT: a #GtkTextIter
#NAME: wy
#PARENT: Gtk.TreeView.convert_widget_to_tree_coords.none
#COMMENT: Y coordinate relative to the widget
#NAME: height
#PARENT: Gtk.PaperSize.new_from_ipp.PaperSize
#COMMENT: the paper height in points
#NAME: iter
#PARENT: Gtk.TextBufferClass.insert_child_anchor.insert_child_anchor.none
#COMMENT: location to insert the anchor
#NAME: action_bar
#PARENT: Gtk.ActionBar.pack_end.none
#COMMENT: A #GtkActionBar
#NAME: widget
#PARENT: Gtk.Fixed.put.none
#COMMENT: the widget to add.
#NAME: menu
#PARENT: Gtk.Menu.set_accel_path.none
#COMMENT: a valid #GtkMenu
#NAME: get_has_depth_buffer
#PARENT: Gtk.GLArea
#COMMENT: Returns whether the area has a depth buffer.
#NAME: attach
#PARENT: Gtk.Grid
#COMMENT: Adds a widget to the grid.

The position of @child is determined by @left and @top. The
number of “cells” that @child will occupy is determined by
@width and @height.
#NAME: get_enable_search
#PARENT: Gtk.TreeView
#COMMENT: Returns whether or not the tree allows to start interactive searching
by typing in text.
#NAME: x
#PARENT: Gtk.render_arrow.none
#COMMENT: X origin of the render area
#NAME: icon_view
#PARENT: Gtk.IconView.set_column_spacing.none
#COMMENT: a #GtkIconView
#NAME: sortable
#PARENT: Gtk.TreeSortable.has_default_sort_func.gboolean
#COMMENT: A #GtkTreeSortable
#NAME: y
#PARENT: Gtk.render_arrow.none
#COMMENT: Y origin of the render area
#NAME: entry
#PARENT: Gtk.Entry.get_input_purpose.InputPurpose
#COMMENT: a #GtkEntry
#NAME: name
#PARENT: Gtk.ActionEntry
#COMMENT: The name of the action.
#NAME: get_transition_type
#PARENT: Gtk.Revealer.get_transition_type
#COMMENT: the current transition type of @revealer
#NAME: get_use_drag_window
#PARENT: Gtk.ToolItem
#COMMENT: Returns whether @tool_item has a drag window. See
gtk_tool_item_set_use_drag_window().
#NAME: STOCK_ITALIC
#PARENT: Gtk
#COMMENT: The “Italic” item and icon.
#NAME: natural_width
#PARENT: Gtk.Widget.get_preferred_width_for_height.none
#COMMENT: location for storing the natural width, or %NULL
#NAME: padding_top
#PARENT: Gtk.Alignment.get_padding.none
#COMMENT: location to store the padding for
    the top of the widget, or %NULL
#NAME: new_with_mnemonic
#PARENT: Gtk.RadioMenuItem.new_with_mnemonic
#COMMENT: a new #GtkRadioMenuItem
#NAME: scroll
#PARENT: Gtk.Range.change-value.gboolean
#COMMENT: the type of scroll action that was performed
#NAME: event
#PARENT: Gtk.TextTag
#COMMENT: The ::event signal is emitted when an event occurs on a region of the
buffer marked with this tag.
#NAME: first_property_name
#PARENT: Gtk.Widget.new.Widget
#COMMENT: name of first property to set
#NAME: get_device_events
#PARENT: Gtk.Widget.get_device_events
#COMMENT: device event mask for @widget
#NAME: get_color
#PARENT: Gtk.ColorButton
#COMMENT: Sets @color to be the current color in the #GtkColorButton widget.
#NAME: STYLE_CLASS_COMBOBOX_ENTRY
#PARENT: Gtk
#COMMENT: A CSS class to match combobox entries.

This is used by #GtkComboBox.
#NAME: style_get_valist
#PARENT: Gtk.Widget
#COMMENT: Non-vararg variant of gtk_widget_style_get(). Used primarily by language
bindings.
#NAME: path
#PARENT: Gtk.IconView.scroll_to_path.none
#COMMENT: The path of the item to move to.
#NAME: get_selectable
#PARENT: Gtk.Label
#COMMENT: Gets the value set by gtk_label_set_selectable().
#NAME: new_with_label
#PARENT: Gtk.MenuItem
#COMMENT: Creates a new #GtkMenuItem whose child is a #GtkLabel.
#NAME: key
#PARENT: Gtk.PrintSettings.set_int.none
#COMMENT: a key
#NAME: name
#PARENT: Gtk.ToggleActionEntry
#COMMENT: The name of the action.
#NAME: tag
#PARENT: Gtk.TextIter.toggles_tag.gboolean
#COMMENT: a #GtkTextTag, or %NULL
#NAME: new_order
#PARENT: Gtk.TreeModel.rows_reordered.none
#COMMENT: an array of integers mapping the current position of
    each child to its old position before the re-ordering,
    i.e. @new_order`[newpos] = oldpos`
#NAME: sort_column_id
#PARENT: Gtk.TreeViewColumn.set_sort_column_id.none
#COMMENT: The @sort_column_id of the model to sort on.
#NAME: focus-visible
#PARENT: Gtk.Window
#COMMENT: Whether 'focus rectangles' are currently visible in this window.

This property is maintained by GTK+ based on user input
and should not be set by applications.
#NAME: append_search_path
#PARENT: Gtk.IconTheme
#COMMENT: Appends a directory to the search path.
See gtk_icon_theme_set_search_path().
#NAME: get_inconsistent
#PARENT: Gtk.ToggleButton
#COMMENT: Gets the value set by gtk_toggle_button_set_inconsistent().
#NAME: orientation
#PARENT: Gtk.Box.new.Widget
#COMMENT: the box’s orientation.
#NAME: clipboard
#PARENT: Gtk.Clipboard.get_display.Gdk.Display
#COMMENT: a #GtkClipboard
#NAME: activatable
#PARENT: Gtk.Activatable.set_related_action.none
#COMMENT: a #GtkActivatable
#NAME: new
#PARENT: Gtk.GLArea.new
#COMMENT: the newly created #GtkGLArea
#NAME: parent
#PARENT: Gtk.AppChooserDialog.new_for_content_type.Widget
#COMMENT: a #GtkWindow, or %NULL
#NAME: layout
#PARENT: Gtk.Layout.move.none
#COMMENT: a #GtkLayout
#NAME: tooltip
#PARENT: Gtk.Tooltip.set_tip_area.none
#COMMENT: a #GtkTooltip
#NAME: get_state
#PARENT: Gtk.CellRenderer
#COMMENT: Translates the cell renderer state to #GtkStateFlags,
based on the cell renderer and widget sensitivity, and
the given #GtkCellRendererState.
#NAME: end_path
#PARENT: Gtk.TreeSelection.select_range.none
#COMMENT: The final node of the range.
#NAME: custom_finished
#PARENT: Gtk.Buildable
#COMMENT: This is similar to gtk_buildable_parser_finished() but is
called once for each custom tag handled by the @buildable.
#NAME: info_bar
#PARENT: Gtk.InfoBar.get_action_area.Widget
#COMMENT: a #GtkInfoBar
#NAME: input-purpose
#PARENT: Gtk.Entry
#COMMENT: The purpose of this text field.

This property can be used by on-screen keyboards and other input
methods to adjust their behaviour.

Note that setting the purpose to %GTK_INPUT_PURPOSE_PASSWORD or
%GTK_INPUT_PURPOSE_PIN is independent from setting
#GtkEntry:visibility.
#NAME: interactive
#PARENT: Gtk.TextBuffer.delete_selection.gboolean
#COMMENT: whether the deletion is caused by user interaction
#NAME: get_draw_value
#PARENT: Gtk.Scale.get_draw_value
#COMMENT: whether the current value is displayed as a string
#NAME: x
#PARENT: Gtk.paint_tab.none
#COMMENT: x origin of the rectangle to draw the tab in
#NAME: model
#PARENT: Gtk.MenuBar.new_from_model.Widget
#COMMENT: a #GMenuModel
#NAME: get_location
#PARENT: Gtk.PlacesSidebar
#COMMENT: Gets the currently-selected location in the @sidebar.  This can be #NULL when
nothing is selected, for example, when gtk_places_sidebar_set_location() has
been called with a location that is not among the sidebar’s list of places to
show.

You can use this function to get the selection in the @sidebar.  Also, if you
connect to the #GtkPlacesSidebar::populate-popup signal, you can use this
function to get the location that is being referred to during the callbacks
for your menu items.
#NAME: widget
#PARENT: Gtk.TreeViewColumn.set_widget.none
#COMMENT: A child #GtkWidget, or %NULL.
#NAME: y
#PARENT: Gtk.paint_tab.none
#COMMENT: y origin of the rectangle to draw the tab in
#NAME: domain_dirname
#PARENT: Gtk.IMContextInfo
#COMMENT: Name of locale directory for use with bindtextdomain()
#NAME: get_mode
#PARENT: Gtk.SizeGroup.get_mode
#COMMENT: the current mode of the size group.
#NAME: xscale
#PARENT: Gtk.Alignment.set.none
#COMMENT: the amount that the child widget expands horizontally to fill up
 unused space, from 0 to 1.
 A value of 0 indicates that the child widget should never expand.
 A value of 1 indicates that the child widget will expand to fill all of the
 space allocated for the #GtkAlignment.
#NAME: child
#PARENT: Gtk.MenuDirectionType
#COMMENT: To the submenu, if any, associated with the item
#NAME: name
#PARENT: Gtk.InputPurpose
#COMMENT: Edited field expects the name of a person
#NAME: x
#PARENT: Gtk.Notebook.create-window.Notebook
#COMMENT: the X coordinate where the drop happens
#NAME: age
#PARENT: Gtk.RecentFilterInfo
#COMMENT: The number of days elapsed since the file has been
   registered.
#NAME: action_group
#PARENT: Gtk.ActionGroup.set_translate_func.none
#COMMENT: a #GtkActionGroup
#NAME: shadow-type
#PARENT: Gtk.Entry
#COMMENT: Which kind of shadow to draw around the entry when
#GtkEntry:has-frame is set to %TRUE.
#NAME: month-changed
#PARENT: Gtk.Calendar
#COMMENT: Emitted when the user clicks a button to change the selected month on a
calendar.
#NAME: y
#PARENT: Gtk.Notebook.create-window.Notebook
#COMMENT: the Y coordinate where the drop happens
#NAME: get_pixbuf
#PARENT: Gtk.SelectionData.get_pixbuf
#COMMENT: if the selection data
  contained a recognized image type and it could be converted to a
  #GdkPixbuf, a newly allocated pixbuf is returned, otherwise
  %NULL.  If the result is non-%NULL it must be freed with
  g_object_unref().
#NAME: iter
#PARENT: Gtk.TreeView.row-expanded.none
#COMMENT: the tree iter of the expanded row
#NAME: window
#PARENT: Gtk.Window.get_modal.gboolean
#COMMENT: a #GtkWindow
#NAME: application
#PARENT: Gtk.Application.inhibit.guint
#COMMENT: the #GtkApplication
#NAME: is_maximized
#PARENT: Gtk.Window.is_maximized
#COMMENT: whether the window has a maximized state.
#NAME: set_decoration_layout
#PARENT: Gtk.HeaderBar
#COMMENT: Sets the decoration layout for this header bar, overriding
the #GtkSettings:gtk-decoration-layout setting.

There can be valid reasons for overriding the setting, such
as a header bar design that does not allow for buttons to take
room on the right, or only offers room for a single close button.
Split header bars are another example for overriding the
setting.

The format of the string is button names, separated by commas.
A colon separates the buttons that should appear on the left
from those on the right. Recognized button names are minimize,
maximize, close, icon (the window icon) and menu (a menu button
for the fallback app menu).

For example, “menu:minimize,maximize,close” specifies a menu
on the left, and minimize, maximize and close buttons on the right.
#NAME: is_important
#PARENT: Gtk.Action.set_is_important.none
#COMMENT: %TRUE to make the action important
#NAME: get_activate_on_single_click
#PARENT: Gtk.FlowBox
#COMMENT: Returns whether children activate on single clicks.
#NAME: get_display_name
#PARENT: Gtk.IconInfo.get_display_name
#COMMENT: %NULL
#NAME: get_target
#PARENT: Gtk.SelectionData
#COMMENT: Retrieves the target of the selection.
#NAME: pop_composite_child
#PARENT: Gtk.Widget
#COMMENT: Cancels the effect of a previous call to gtk_widget_push_composite_child().
#NAME: calendar
#PARENT: Gtk.Calendar.set_display_options.none
#COMMENT: a #GtkCalendar
#NAME: get_spacing
#PARENT: Gtk.IconView.get_spacing
#COMMENT: the space between cells
#NAME: menu_shell
#PARENT: Gtk.MenuShell.bind_model.none
#COMMENT: a #GtkMenuShell
#NAME: get_iter_at_line
#PARENT: Gtk.TextBuffer
#COMMENT: Initializes @iter to the start of the given line. If @line_number is greater
than the number of lines in the @buffer, the end iterator is returned.
#NAME: new
#PARENT: Gtk.TreePath
#COMMENT: Creates a new #GtkTreePath-struct.
This refers to a row.
#NAME: set_keep_below
#PARENT: Gtk.Window
#COMMENT: Asks to keep @window below, so that it stays in bottom. Note that
you shouldn’t assume the window is definitely below afterward,
because other entities (e.g. the user or
[window manager][gtk-X11-arch]) could not keep it below,
and not all window managers support putting windows below. But
normally the window will be kept below. Just don’t write code
that crashes if not.

It’s permitted to call this function before showing a window,
in which case the window will be kept below when it appears onscreen
initially.

You can track the below state via the “window-state-event” signal
on #GtkWidget.

Note that, according to the
[Extended Window Manager Hints Specification](http://www.freedesktop.org/Standards/wm-spec),
the above state is mainly meant for user preferences and should not
be used by applications e.g. for drawing attention to their
dialogs.
#NAME: justification
#PARENT: Gtk.TextView.set_justification.none
#COMMENT: justification
#NAME: set_bool
#PARENT: Gtk.PrintSettings
#COMMENT: Sets @key to a boolean value.
#NAME: get_icon
#PARENT: Gtk.Window
#COMMENT: Gets the value set by gtk_window_set_icon() (or if you've
called gtk_window_set_icon_list(), gets the first icon in
the icon list).
#NAME: window
#PARENT: Gtk.Window.resize.none
#COMMENT: a #GtkWindow
#NAME: width
#PARENT: Gtk.CellAreaContextClass.allocate.allocate.none
#COMMENT: the allocated width for all #GtkTreeModel rows rendered
    with @context, or -1.
#NAME: accelerator
#PARENT: Gtk.Application.add_accelerator.none
#COMMENT: accelerator string
#NAME: heading
#PARENT: Gtk.AppChooserDialog.set_heading.none
#COMMENT: a string containing Pango markup
#NAME: new_for_screen
#PARENT: Gtk.Invisible.new_for_screen
#COMMENT: a newly created #GtkInvisible object
#NAME: STYLE_CLASS_CALENDAR
#PARENT: Gtk
#COMMENT: A CSS class to match calendars.

This is not used by GTK+ itself, currently.
#NAME: insert_pixbuf
#PARENT: Gtk.TextBuffer
#COMMENT: Inserts an image into the text buffer at @iter. The image will be
counted as one character in character counts, and when obtaining
the buffer contents as a string, will be represented by the Unicode
“object replacement character” 0xFFFC. Note that the “slice”
variants for obtaining portions of the buffer as a string include
this character for pixbufs, but the “text” variants do
not. e.g. see gtk_text_buffer_get_slice() and
gtk_text_buffer_get_text().
#NAME: end
#PARENT: Gtk.TextBuffer.insert_range_interactive.gboolean
#COMMENT: another position in the same buffer as @start
#NAME: page_increment
#PARENT: Gtk.Adjustment.new.Adjustment
#COMMENT: the page increment.
#NAME: x
#PARENT: Gtk.IconView.get_path_at_pos.TreePath
#COMMENT: The x position to be identified
#NAME: export-filename
#PARENT: Gtk.PrintOperation
#COMMENT: The name of a file to generate instead of showing the print dialog.
Currently, PDF is the only supported format.

The intended use of this property is for implementing
“Export to PDF” actions.

“Print to PDF” support is independent of this and is done
by letting the user pick the “Print to PDF” item from the
list of printers in the print dialog.
#NAME: set_rgba
#PARENT: Gtk.ColorButton
#COMMENT: Sets the current color to be @rgba.
#NAME: get_size_entry
#PARENT: Gtk.FontSelection
#COMMENT: This returns the #GtkEntry used to allow the user to edit the font
number manually instead of selecting it from the list of font sizes.
#NAME: y
#PARENT: Gtk.IconView.get_path_at_pos.TreePath
#COMMENT: The y position to be identified
#NAME: new
#PARENT: Gtk.RecentAction.new
#COMMENT: the newly created #GtkRecentAction.
#NAME: tool_item
#PARENT: Gtk.ToolItem.set_tooltip_text.none
#COMMENT: a #GtkToolItem
#NAME: y_offset
#PARENT: Gtk.CellRenderer.get_size.none
#COMMENT: location to return y offset of cell relative to @cell_area, or %NULL
#NAME: data
#PARENT: Gtk.RequestedSize
#COMMENT: A client pointer
#NAME: column
#PARENT: Gtk.TreeViewClass.row_activated.row_activated.none
#COMMENT: The #GtkTreeViewColumn to be activated.
#NAME: menu
#PARENT: Gtk.AppChooserWidget.populate-popup.none
#COMMENT: the #GtkMenu to populate
#NAME: get_icon_name
#PARENT: Gtk.Entry.get_icon_name
#COMMENT: An icon name, or %NULL if no icon is set or if the icon
         wasn’t set from an icon name
#NAME: anchor
#PARENT: Gtk.TextBuffer.get_iter_at_child_anchor.none
#COMMENT: a child anchor that appears in @buffer
#NAME: text_view
#PARENT: Gtk.TextView.set_input_purpose.none
#COMMENT: a #GtkTextView
#NAME: image
#PARENT: Gtk.Image.set_from_gicon.none
#COMMENT: a #GtkImage
#NAME: reorderable
#PARENT: Gtk.Notebook.set_tab_reorderable.none
#COMMENT: whether the tab is reorderable or not
#NAME: get_always_show_image
#PARENT: Gtk.Action.get_always_show_image
#COMMENT: %TRUE if the menu item proxies will always show their image
#NAME: get_font
#PARENT: Gtk.FontChooser
#COMMENT: Gets the currently-selected font name.

Note that this can be a different string than what you set with
gtk_font_chooser_set_font(), as the font chooser widget may
normalize font names and thus return a string with a different
structure. For example, “Helvetica Italic Bold 12” could be
normalized to “Helvetica Bold Italic 12”.

Use pango_font_description_equal() if you want to compare two
font descriptions.
#NAME: column
#PARENT: Gtk.IconView.set_pixbuf_column.none
#COMMENT: A column in the currently used model, or -1 to disable
#NAME: mime_type
#PARENT: Gtk.RecentFilterFlags
#COMMENT: the mime type of the file
#NAME: get_search_mode
#PARENT: Gtk.SearchBar.get_search_mode
#COMMENT: whether search mode is toggled on
#NAME: backward_visible_word_starts
#PARENT: Gtk.TextIter
#COMMENT: Calls gtk_text_iter_backward_visible_word_start() up to @count times.
#NAME: destroy
#PARENT: Gtk.TreeSortableIface.set_sort_func.set_sort_func.none
#COMMENT: Destroy notifier of @user_data, or %NULL
#NAME: new_text_length
#PARENT: Gtk.EditableInterface.insert_text.insert_text.none
#COMMENT: the length of the text in bytes, or -1
#NAME: get_popup_completion
#PARENT: Gtk.EntryCompletion
#COMMENT: Returns whether the completions should be presented in a popup window.
#NAME: StyleContext
#PARENT: Gtk
#COMMENT: #GtkStyleContext is an object that stores styling information affecting
a widget defined by #GtkWidgetPath.

In order to construct the final style information, #GtkStyleContext
queries information from all attached #GtkStyleProviders. Style providers
can be either attached explicitly to the context through
gtk_style_context_add_provider(), or to the screen through
gtk_style_context_add_provider_for_screen(). The resulting style is a
combination of all providers’ information in priority order.

For GTK+ widgets, any #GtkStyleContext returned by
gtk_widget_get_style_context() will already have a #GtkWidgetPath, a
#GdkScreen and RTL/LTR information set. The style context will be also
updated automatically if any of these settings change on the widget.

If you are using the theming layer standalone, you will need to set a
widget path and a screen yourself to the created style context through
gtk_style_context_set_path() and gtk_style_context_set_screen(), as well
as updating the context yourself using gtk_style_context_invalidate()
whenever any of the conditions change, such as a change in the
#GtkSettings:gtk-theme-name setting or a hierarchy change in the rendered
widget.

# Style Classes # {#gtkstylecontext-classes}

Widgets can add style classes to their context, which can be used
to associate different styles by class
(see [Selectors][gtkcssprovider-selectors]).

# Style Regions

Widgets can also add regions with flags to their context. This feature is
deprecated and will be removed in a future GTK+ update. Please use style
classes instead.

The regions used by GTK+ widgets are:

## row
Used by #GtkTreeView. Can be used with the flags: `even`, `odd`.

## column
Used by #GtkTreeView. Can be used with the flags: `first`, `last`, `sorted`.

## column-header
Used by #GtkTreeView.

## tab
Used by #GtkNotebook. Can be used with the flags: `even`, `odd`, `first`, `last`.

# Custom styling in UI libraries and applications

If you are developing a library with custom #GtkWidgets that
render differently than standard components, you may need to add a
#GtkStyleProvider yourself with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK
priority, either a #GtkCssProvider or a custom object implementing the
#GtkStyleProvider interface. This way themes may still attempt
to style your UI elements in a different way if needed so.

If you are using custom styling on an applications, you probably want then
to make your style information prevail to the theme’s, so you must use
a #GtkStyleProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
priority, keep in mind that the user settings in
`XDG_CONFIG_HOME/gtk-3.0/gtk.css` will
still take precedence over your changes, as it uses the
%GTK_STYLE_PROVIDER_PRIORITY_USER priority.
#NAME: toggle_button
#PARENT: Gtk.ToggleButtonClass.toggled.toggled.none
#COMMENT: a #GtkToggleButton.
#NAME: a
#PARENT: Gtk.TreeStore.swap.none
#COMMENT: A #GtkTreeIter.
#NAME: box
#PARENT: Gtk.ListBox.set_sort_func.none
#COMMENT: a #GtkListBox
#NAME: set_popup
#PARENT: Gtk.MenuButton
#COMMENT: Sets the #GtkMenu that will be popped up when the button is clicked,
or %NULL to disable the button. If #GtkMenuButton:menu-model or
#GtkMenuButton:popover are set, they will be set to %NULL.
#NAME: get_sort_type
#PARENT: Gtk.RecentChooser.get_sort_type
#COMMENT: the sorting order of the @chooser.
#NAME: b
#PARENT: Gtk.TreeStore.swap.none
#COMMENT: Another #GtkTreeIter.
#NAME: screen
#PARENT: Gtk.Invisible.set_screen.none
#COMMENT: a #GdkScreen.
#NAME: cursor-position
#PARENT: Gtk.TextBuffer
#COMMENT: The position of the insert mark (as offset from the beginning
of the buffer). It is useful for getting notified when the
cursor moves.
#NAME: minimum_width
#PARENT: Gtk.CellRenderer.get_preferred_width_for_height.none
#COMMENT: location for storing the minimum size, or %NULL
#NAME: Arrow
#PARENT: Gtk
#COMMENT: GtkArrow should be used to draw simple arrows that need to point in
one of the four cardinal directions (up, down, left, or right).  The
style of the arrow can be one of shadow in, shadow out, etched in, or
etched out.  Note that these directions and style types may be
amended in versions of GTK+ to come.

GtkArrow will fill any space alloted to it, but since it is inherited
from #GtkMisc, it can be padded and/or aligned, to fill exactly the
space the programmer desires.

Arrows are created with a call to gtk_arrow_new().  The direction or
style of an arrow can be changed after creation by using gtk_arrow_set().

GtkArrow has been deprecated; you can simply use a #GtkImage with a
suitable icon name, such as “pan-down-symbolic“. When replacing
GtkArrow by an image, pay attention to the fact that GtkArrow is
doing automatic flipping between #GTK_ARROW_LEFT and #GTK_ARROW_RIGHT,
depending on the text direction. To get the same effect with an image,
use the icon names “pan-start-symbolic“ and “pan-end-symbolic“, which
react to the text direction instead of “pan-left-symbolic“ and
“pan-right-symbolic“ which don't.
#NAME: STOCK_SELECT_COLOR
#PARENT: Gtk
#COMMENT: The “Color” item and icon.
#NAME: get_min_content_height
#PARENT: Gtk.ScrolledWindow
#COMMENT: Gets the minimal content height of @scrolled_window, or -1 if not set.
#NAME: color
#PARENT: Gtk.SymbolicColor.unref.none
#COMMENT: a #GtkSymbolicColor
#NAME: get_visible_vertical
#PARENT: Gtk.ToolItem
#COMMENT: Returns whether @tool_item is visible when the toolbar is docked vertically.
See gtk_tool_item_set_visible_vertical().
#NAME: retrieve_proxy_menu_item
#PARENT: Gtk.ToolItem.retrieve_proxy_menu_item
#COMMENT: The #GtkMenuItem that is going to appear in the
overflow menu for @tool_item.
#NAME: unref_node
#PARENT: Gtk.TreeModel
#COMMENT: Lets the tree unref the node.

This is an optional method for models to implement.
To be more specific, models may ignore this call as it exists
primarily for performance reasons. For more information on what
this means, see gtk_tree_model_ref_node().

Please note that nodes that are deleted are not unreffed.
#NAME: tree_view
#PARENT: Gtk.TreeView.set_search_position_func.none
#COMMENT: A #GtkTreeView
#NAME: pack_end
#PARENT: Gtk.TreeViewColumn
#COMMENT: Adds the @cell to end of the column. If @expand is %FALSE, then the @cell
is allocated no more space than it needs. Any unused space is divided
evenly between cells for which @expand is %TRUE.
#NAME: comments
#PARENT: Gtk.AboutDialog
#COMMENT: Comments about the program. This string is displayed in a label
in the main dialog, thus it should be a short explanation of
the main purpose of the program, not a detailed list of features.
#NAME: tearoff-title
#PARENT: Gtk.ComboBox
#COMMENT: A title that may be displayed by the window manager
when the popup is torn-off.
#NAME: padding
#PARENT: Gtk.ThemingEngine.get_padding.none
#COMMENT: return value for the padding settings
#NAME: get_layout_offsets
#PARENT: Gtk.Entry
#COMMENT: Obtains the position of the #PangoLayout used to render text
in the entry, in widget coordinates. Useful if you want to line
up the text in an entry with some other text, e.g. when using the
entry to implement editable cells in a sheet widget.

Also useful to convert mouse events into coordinates inside the
#PangoLayout, e.g. to take some action if some part of the entry text
is clicked.

Note that as the user scrolls around in the entry the offsets will
change; you’ll need to connect to the “notify::scroll-offset”
signal to track this. Remember when using the #PangoLayout
functions you need to convert to and from pixels using
PANGO_PIXELS() or #PANGO_SCALE.

Keep in mind that the layout text may contain a preedit string, so
gtk_entry_layout_index_to_text_index() and
gtk_entry_text_index_to_layout_index() are needed to convert byte
indices in the layout to byte indices in the entry contents.
#NAME: natural_width
#PARENT: Gtk.CellRenderer.get_preferred_width_for_height.none
#COMMENT: location for storing the preferred size, or %NULL
#NAME: select_all
#PARENT: Gtk.ListBox
#COMMENT: Select all children of @box, if the selection mode allows it.
#NAME: clipboard
#PARENT: Gtk.Clipboard.wait_is_image_available.gboolean
#COMMENT: a #GtkClipboard
#NAME: scale
#PARENT: Gtk.Scale.add_mark.none
#COMMENT: a #GtkScale
#NAME: backward_visible_cursor_positions
#PARENT: Gtk.TextIter
#COMMENT: Moves up to @count visible cursor positions. See
gtk_text_iter_backward_cursor_position() for details.
#NAME: allocation
#PARENT: Gtk.Widget.size_allocate_with_baseline.none
#COMMENT: position and size to be allocated to @widget
#NAME: scale
#PARENT: Gtk.IconTheme.load_surface.cairo.Surface
#COMMENT: desired scale
#NAME: flags
#PARENT: Gtk.AppChooserDialog.new_for_content_type.Widget
#COMMENT: flags for this dialog
#NAME: n_args
#PARENT: Gtk.BindingSignal
#COMMENT: number of arguments specified for the signal
#NAME: about
#PARENT: Gtk.AboutDialog.get_artists.utf8
#COMMENT: a #GtkAboutDialog
#NAME: chooser
#PARENT: Gtk.FileChooser.unselect_filename.none
#COMMENT: a #GtkFileChooser
#NAME: get_vexpand
#PARENT: Gtk.Widget.get_vexpand
#COMMENT: whether vexpand flag is set
#NAME: FlowBoxSortFunc
#PARENT: Gtk
#COMMENT: A function to compare two children to determine which
should come first.
#NAME: forward_visible_lines
#PARENT: Gtk.TextIter.forward_visible_lines
#COMMENT: whether @iter moved and is dereferenceable
#NAME: changed
#PARENT: Gtk.CellRendererCombo
#COMMENT: This signal is emitted each time after the user selected an item in
the combo box, either by using the mouse or the arrow keys.  Contrary
to GtkComboBox, GtkCellRendererCombo::changed is not emitted for
changes made to a selected item in the entry.  The argument @new_iter
corresponds to the newly selected item in the combo box and it is relative
to the GtkTreeModel set via the model property on GtkCellRendererCombo.

Note that as soon as you change the model displayed in the tree view,
the tree view will immediately cease the editing operating.  This
means that you most probably want to refrain from changing the model
until the combo cell renderer emits the edited or editing_canceled signal.
#NAME: get_preview_filename
#PARENT: Gtk.FileChooser.get_preview_filename
#COMMENT: the filename to preview, or %NULL if
 no file is selected, or if the selected file cannot be represented
 as a local filename. Free with g_free()
#NAME: monitor
#PARENT: Gtk.Menu
#COMMENT: The monitor the menu will be popped up on.
#NAME: get_resolution
#PARENT: Gtk.PrintSettings.get_resolution
#COMMENT: the resolution in dpi
#NAME: allocation
#PARENT: Gtk.Widget.get_allocation.none
#COMMENT: a pointer to a #GtkAllocation to copy to
#NAME: get_uris
#PARENT: Gtk.FileChooser
#COMMENT: Lists all the selected files and subfolders in the current folder of
@chooser. The returned names are full absolute URIs.
#NAME: popup
#PARENT: Gtk.TextView.populate-popup.none
#COMMENT: the container that is being populated
#NAME: set_icon_from_file
#PARENT: Gtk.Window.set_icon_from_file
#COMMENT: %TRUE if setting the icon succeeded.
#NAME: get_icon_at_pos
#PARENT: Gtk.Entry.get_icon_at_pos
#COMMENT: the index of the icon at the given position, or -1
#NAME: xpad
#PARENT: Gtk.Misc.get_padding.none
#COMMENT: location to store padding in the X
       direction, or %NULL
#NAME: get_property
#PARENT: Gtk.StyleProperties
#COMMENT: Gets a style property from @props for the given state. When done with @value,
g_value_unset() needs to be called to free any allocated memory.
#NAME: mnemonic_activate
#PARENT: Gtk.Widget.mnemonic_activate
#COMMENT: %TRUE if the signal has been handled
#NAME: window
#PARENT: Gtk.Window.get_urgency_hint.gboolean
#COMMENT: a #GtkWindow
#NAME: cr
#PARENT: Gtk.paint_layout.none
#COMMENT: a #cairo_t
#NAME: previous_style
#PARENT: Gtk.Widget.style-set.none
#COMMENT: the previous style, or %NULL if the widget
  just got its initial style
#NAME: detail
#PARENT: Gtk.paint_box_gap.none
#COMMENT: a style detail
#NAME: toggle
#PARENT: Gtk.CellRendererToggle.set_activatable.none
#COMMENT: a #GtkCellRendererToggle.
#NAME: print-settings
#PARENT: Gtk.PrintOperation
#COMMENT: The #GtkPrintSettings used for initializing the dialog.

Setting this property is typically used to re-establish
print settings from a previous print operation, see
gtk_print_operation_run().
#NAME: lookup_icon_set
#PARENT: Gtk.StyleContext
#COMMENT: Looks up @stock_id in the icon factories associated to @context and
the default icon factory, returning an icon set if found, otherwise
%NULL.
#NAME: register_serialize_tagset
#PARENT: Gtk.TextBuffer
#COMMENT: This function registers GTK+’s internal rich text serialization
format with the passed @buffer. The internal format does not comply
to any standard rich text format and only works between #GtkTextBuffer
instances. It is capable of serializing all of a text buffer’s tags
and embedded pixbufs.

This function is just a wrapper around
gtk_text_buffer_register_serialize_format(). The mime type used
for registering is “application/x-gtk-text-buffer-rich-text”, or
“application/x-gtk-text-buffer-rich-text;format=@tagset_name” if a
@tagset_name was passed.

The @tagset_name can be used to restrict the transfer of rich text
to buffers with compatible sets of tags, in order to avoid unknown
tags from being pasted. It is probably the common case to pass an
identifier != %NULL here, since the %NULL tagset requires the
receiving buffer to deal with with pasting of arbitrary tags.
#NAME: new_with_mnemonic_from_widget
#PARENT: Gtk.RadioButton.new_with_mnemonic_from_widget
#COMMENT: a new #GtkRadioButton
#NAME: get_child_revealed
#PARENT: Gtk.Revealer
#COMMENT: Returns whether the child is fully revealed, ie wether
the transition to the revealed state is completed.
#NAME: get_direction
#PARENT: Gtk.Widget.get_direction
#COMMENT: the reading direction for the widget.
#NAME: print_error_quark
#PARENT: Gtk
#COMMENT: Registers an error quark for #GtkPrintOperation if necessary.
#NAME: sequence
#PARENT: Gtk.Gesture.handles_sequence.gboolean
#COMMENT: a #GdkEventSequence
#NAME: set_uri
#PARENT: Gtk.FileChooser
#COMMENT: Sets the file referred to by @uri as the current file for the file chooser,
by changing to the URI’s parent folder and actually selecting the URI in the
list.  If the @chooser is %GTK_FILE_CHOOSER_ACTION_SAVE mode, the URI’s base
name will also appear in the dialog’s file name entry.

Note that the URI must exist, or nothing will be done except for the
directory change.

You should use this function only when implementing a save
dialog for which you already have a file name to which
the user may save.  For example, when the user opens an existing file and then
does Save As... to save a copy or a
modified version.  If you don’t have a file name already — for example,
if the user just created a new file and is saving it for the first time, do
not call this function.  Instead, use something similar to this:
|[<!-- language="C" -->
if (document_is_new)
  {
    // the user just created a new document
    gtk_file_chooser_set_current_name (chooser, "Untitled document");
  }
else
  {
    // the user edited an existing document
    gtk_file_chooser_set_uri (chooser, existing_uri);
  }
]|


In the first case, the file chooser will present the user with useful suggestions
as to where to save his new file.  In the second case, the file’s existing location
is already known, so the file chooser will use it.
#NAME: FontFilterFunc
#PARENT: Gtk
#COMMENT: The type of function that is used for deciding what fonts get
shown in a #GtkFontChooser. See gtk_font_chooser_set_filter_func().
#NAME: keyframes
#PARENT: Gtk.CssSectionType
#COMMENT: The section defines keyframes. See [CSS
  Animations](http://dev.w3.org/csswg/css3-animations/#keyframes) for details. Since 3.6
#NAME: editing-started
#PARENT: Gtk.CellRenderer
#COMMENT: This signal gets emitted when a cell starts to be edited.
The intended use of this signal is to do special setup
on @editable, e.g. adding a #GtkEntryCompletion or setting
up additional columns in a #GtkComboBox.

Note that GTK+ doesn't guarantee that cell renderers will
continue to use the same kind of widget for editing in future
releases, therefore you should check the type of @editable
before doing any specific setup, as in the following example:
|[<!-- language="C" -->
static void
text_editing_started (GtkCellRenderer *cell,
                      GtkCellEditable *editable,
                      const gchar     *path,
                      gpointer         data)
{
  if (GTK_IS_ENTRY (editable))
    {
      GtkEntry *entry = GTK_ENTRY (editable);
      
      // ... create a GtkEntryCompletion
      
      gtk_entry_set_completion (entry, completion);
    }
}
]|
#NAME: response_id
#PARENT: Gtk.InfoBar.set_response_sensitive.none
#COMMENT: a response ID
#NAME: get_attach_widget
#PARENT: Gtk.Menu
#COMMENT: Returns the #GtkWidget that the menu is attached to.
#NAME: get_reserve_indicator
#PARENT: Gtk.MenuItem.get_reserve_indicator
#COMMENT: %TRUE if @menu_item always reserves space for the
    submenu indicator
#NAME: popup-context-menu
#PARENT: Gtk.Toolbar.popup-context-menu
#COMMENT: return %TRUE if the signal was handled, %FALSE if not
#NAME: iter
#PARENT: Gtk.TreeSelection.unselect_iter.none
#COMMENT: The #GtkTreeIter to be unselected.
#NAME: always_show
#PARENT: Gtk.Button.set_always_show_image.none
#COMMENT: %TRUE if the menuitem should always show the image
#NAME: move-active
#PARENT: Gtk.ComboBox
#COMMENT: The ::move-active signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to move the active selection.
#NAME: MenuShell
#PARENT: Gtk
#COMMENT: A #GtkMenuShell is the abstract base class used to derive the
#GtkMenu and #GtkMenuBar subclasses.

A #GtkMenuShell is a container of #GtkMenuItem objects arranged
in a list which can be navigated, selected, and activated by the
user to perform application functions. A #GtkMenuItem can have a
submenu associated with it, allowing for nested hierarchical menus.

# Terminology

A menu item can be “selected”, this means that it is displayed
in the prelight state, and if it has a submenu, that submenu
will be popped up.

A menu is “active” when it is visible onscreen and the user
is selecting from it. A menubar is not active until the user
clicks on one of its menuitems. When a menu is active,
passing the mouse over a submenu will pop it up.

There is also is a concept of the current menu and a current
menu item. The current menu item is the selected menu item
that is furthest down in the hierarchy. (Every active menu shell
does not necessarily contain a selected menu item, but if
it does, then the parent menu shell must also contain
a selected menu item.) The current menu is the menu that
contains the current menu item. It will always have a GTK
grab and receive all key presses.
#NAME: set_limit
#PARENT: Gtk.RecentChooser
#COMMENT: Sets the number of items that should be returned by
gtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().
#NAME: get_orientation
#PARENT: Gtk.ToolItem
#COMMENT: Returns the orientation used for @tool_item. Custom subclasses of
#GtkToolItem should call this function to find out what size icons
they should use.
#NAME: pbar
#PARENT: Gtk.ProgressBar.set_ellipsize.none
#COMMENT: a #GtkProgressBar
#NAME: icon
#PARENT: Gtk.StatusIcon.new_from_gicon.StatusIcon
#COMMENT: a #GIcon
#NAME: detail
#PARENT: Gtk.paint_shadow.none
#COMMENT: a style detail
#NAME: info
#PARENT: Gtk.ClipboardGetFunc.none
#COMMENT: the info field corresponding to the requested target from the
  #GtkTargetEntry array passed to gtk_clipboard_set_with_data() or
  gtk_clipboard_set_with_owner().
#NAME: filename
#PARENT: Gtk.Image.new_from_file.Widget
#COMMENT: a filename
#NAME: get_selectable
#PARENT: Gtk.Label.get_selectable
#COMMENT: %TRUE if the user can copy text from the label
#NAME: get_layout
#PARENT: Gtk.Scale
#COMMENT: Gets the #PangoLayout used to display the scale. The returned
object is owned by the scale so does not need to be freed by
the caller.
#NAME: get_right_margin
#PARENT: Gtk.TextView
#COMMENT: Gets the default right margin for text in @text_view. Tags
in the buffer may override the default.
#NAME: string
#PARENT: Gtk.Builder.new_from_string.Builder
#COMMENT: a user interface (XML) description
#NAME: scrollable
#PARENT: Gtk.Scrollable.set_vadjustment.none
#COMMENT: a #GtkScrollable
#NAME: scanner
#PARENT: Gtk.rc_parse_color_full.guint
#COMMENT: a #GScanner
#NAME: step
#PARENT: Gtk.paint_spinner.none
#COMMENT: the nth step
#NAME: completion
#PARENT: Gtk.EntryCompletion.set_inline_selection.none
#COMMENT: a #GtkEntryCompletion
#NAME: add_overlay
#PARENT: Gtk.Overlay
#COMMENT: Adds @widget to @overlay.

The widget will be stacked on top of the main widget
added with gtk_container_add().

The position at which @widget is placed is determined
from its #GtkWidget:halign and #GtkWidget:valign properties.
#NAME: get_resizable
#PARENT: Gtk.Window.get_resizable
#COMMENT: %TRUE if the user can resize the window
#NAME: scanner
#PARENT: Gtk.rc_find_pixmap_in_path.filename
#COMMENT: Scanner used to get line number information for the
  warning message, or %NULL
#NAME: flags
#PARENT: Gtk.IconTheme.choose_icon.IconInfo
#COMMENT: flags modifying the behavior of the icon lookup
#NAME: text_view
#PARENT: Gtk.TextView.get_cursor_locations.none
#COMMENT: a #GtkTextView
#NAME: get_padding
#PARENT: Gtk.CellRenderer
#COMMENT: Fills in @xpad and @ypad with the appropriate values of @cell.
#NAME: get_n_pages
#PARENT: Gtk.Assistant.get_n_pages
#COMMENT: the number of pages in the @assistant
#NAME: left-gravity
#PARENT: Gtk.TextMark
#COMMENT: Whether the mark has left gravity. When text is inserted at the mark’s
current location, if the mark has left gravity it will be moved
to the left of the newly-inserted text, otherwise to the right.
#NAME: parent_class
#PARENT: Gtk.ToggleToolButtonClass
#COMMENT: The parent class.
#NAME: adjustment
#PARENT: Gtk.Adjustment.get_lower.gdouble
#COMMENT: a #GtkAdjustment
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.get_show_connect_to_server.gboolean
#COMMENT: a places sidebar
#NAME: tree_store
#PARENT: Gtk.TreeStore.clear.none
#COMMENT: a #GtkTreeStore
#NAME: font_button
#PARENT: Gtk.FontButton.get_show_style.gboolean
#COMMENT: a #GtkFontButton
#NAME: scale
#PARENT: Gtk.Scale.get_layout.Pango.Layout
#COMMENT: A #GtkScale
#NAME: discrete
#PARENT: Gtk.LevelBarMode
#COMMENT: the bar has a discrete mode
#NAME: user_data_destroy
#PARENT: Gtk.TextBuffer.register_serialize_format.Gdk.Atom
#COMMENT: a function to call when @user_data is no longer needed
#NAME: button
#PARENT: Gtk.ToggleToolButton.get_active.gboolean
#COMMENT: a #GtkToggleToolButton
#NAME: get_current_icon_drag_source
#PARENT: Gtk.Entry
#COMMENT: Returns the index of the icon which is the source of the current
DND operation, or -1.

This function is meant to be used in a #GtkWidget::drag-data-get
callback.
#NAME: set_show_numbers
#PARENT: Gtk.RecentChooserMenu
#COMMENT: Sets whether a number should be added to the items of @menu.  The
numbers are shown to provide a unique character for a mnemonic to
be used inside ten menu item’s label.  Only the first the items
get a number to avoid clashes.
#NAME: types
#PARENT: Gtk.TreeStore.newv.TreeStore
#COMMENT: an array of #GType types for the columns, from first to last
#NAME: window
#PARENT: Gtk.Window.get_position.none
#COMMENT: a #GtkWindow
#NAME: user_data
#PARENT: Gtk.FlowBoxSortFunc.gint
#COMMENT: user data
#NAME: lower
#PARENT: Gtk.Adjustment.clamp_page.none
#COMMENT: the lower value.
#NAME: size
#PARENT: Gtk.Image.get_icon_name.none
#COMMENT: place to store an icon size,
    or %NULL
#NAME: status_icon
#PARENT: Gtk.StatusIcon.set_from_pixbuf.none
#COMMENT: a #GtkStatusIcon
#NAME: get_overwrite_mode
#PARENT: Gtk.Entry.get_overwrite_mode
#COMMENT: whether the text is overwritten when typing.
#NAME: add
#PARENT: Gtk.CellArea
#COMMENT: Adds @renderer to @area with the default child cell properties.
#NAME: new
#PARENT: Gtk.Expander
#COMMENT: Creates a new expander using @label as the text of the label.
#NAME: value
#PARENT: Gtk.PrintSettings.set_double.none
#COMMENT: a double value
#NAME: timestamp
#PARENT: Gtk.Window.present_with_time.none
#COMMENT: the timestamp of the user interaction (typically a
  button or key press event) which triggered this call
#NAME: socket_
#PARENT: Gtk.Socket.get_id.xlib.Window
#COMMENT: a #GtkSocket.
#NAME: end
#PARENT: Gtk.TextIter.in_range.gboolean
#COMMENT: end of range
#NAME: get_show_tips
#PARENT: Gtk.RecentChooser.get_show_tips
#COMMENT: %TRUE if the recent chooser should show tooltips,
  %FALSE otherwise.
#NAME: targets
#PARENT: Gtk.SelectionData.get_targets.gboolean
#COMMENT: 
          location to store an array of targets. The result stored
          here must be freed with g_free().
#NAME: widget
#PARENT: Gtk.Widget.set_style.none
#COMMENT: a #GtkWidget
#NAME: gesture
#PARENT: Gtk.Gesture.get_point.gboolean
#COMMENT: a #GtkGesture
#NAME: new_with_range
#PARENT: Gtk.Scale.new_with_range
#COMMENT: a new #GtkScale
#NAME: get_bounding_box
#PARENT: Gtk.Gesture.get_bounding_box
#COMMENT: %TRUE if there are active touches, %FALSE otherwise
#NAME: FontChooser
#PARENT: Gtk
#COMMENT: #GtkFontChooser is an interface that can be implemented by widgets
displaying the list of fonts.  In GTK+, the main objects
that implement this interface are #GtkFontChooserWidget,
#GtkFontChooserDialog and #GtkFontButton.
#NAME: gstring
#PARENT: Gtk.rc_property_parse_requisition.gboolean
#COMMENT: the #GString to be parsed
#NAME: get_show_close_button
#PARENT: Gtk.InfoBar.get_show_close_button
#COMMENT: %TRUE if the widget displays standard close button
#NAME: selection
#PARENT: Gtk.TreeSelection.path_is_selected.gboolean
#COMMENT: A #GtkTreeSelection.
#NAME: region
#PARENT: Gtk.Widget.input_shape_combine_region.none
#COMMENT: shape to be added, or %NULL to remove an existing shape
#NAME: func
#PARENT: Gtk.stock_set_translate_func.none
#COMMENT: a #GtkTranslateFunc
#NAME: Callback
#PARENT: Gtk
#COMMENT: The type of the callback functions used for e.g. iterating over
the children of a container, see gtk_container_foreach().
#NAME: get_selection_mode
#PARENT: Gtk.ListBox.get_selection_mode
#COMMENT: a #GtkSelectionMode
#NAME: page_left
#PARENT: Gtk.ScrollType
#COMMENT: Page to the left.
#NAME: dx
#PARENT: Gtk.StyleContext.scroll_animations.none
#COMMENT: Amount to scroll in the X axis
#NAME: tree_view
#PARENT: Gtk.TreeView.expand_all.none
#COMMENT: A #GtkTreeView.
#NAME: container
#PARENT: Gtk.Container.get_children.Widget
#COMMENT: a #GtkContainer
#NAME: dy
#PARENT: Gtk.StyleContext.scroll_animations.none
#COMMENT: Amount to scroll in the Y axis
#NAME: y1_
#PARENT: Gtk.paint_vline.none
#COMMENT: the starting y coordinate
#NAME: n_chars
#PARENT: Gtk.IMContext.delete_surrounding.gboolean
#COMMENT: number of characters to delete.
#NAME: new_for_interval
#PARENT: Gtk.LevelBar.new_for_interval
#COMMENT: a #GtkLevelBar
#NAME: path
#PARENT: Gtk.TreeModel.row_deleted.none
#COMMENT: a #GtkTreePath-struct pointing to the previous location of
    the deleted row
#NAME: drag_dest_add_uri_targets
#PARENT: Gtk.Widget
#COMMENT: Add the URI targets supported by #GtkSelectionData to
the target list of the drag destination. The targets
are added with @info = 0. If you need another value,
use gtk_target_list_add_uri_targets() and
gtk_drag_dest_set_target_list().
#NAME: entry
#PARENT: Gtk.Entry.set_has_frame.none
#COMMENT: a #GtkEntry
#NAME: row
#PARENT: Gtk.Grid.set_row_baseline_position.none
#COMMENT: a row index
#NAME: application
#PARENT: Gtk.Application.set_accels_for_action.none
#COMMENT: a #GtkApplication
#NAME: get_default
#PARENT: Gtk.IconTheme
#COMMENT: Gets the icon theme for the default screen. See
gtk_icon_theme_get_for_screen().
#NAME: settings
#PARENT: Gtk.PrintSettings.set_paper_width.none
#COMMENT: a #GtkPrintSettings
#NAME: palette
#PARENT: Gtk.ToolPalette.get_group_position.gint
#COMMENT: a #GtkToolPalette
#NAME: context
#PARENT: Gtk.render_handle.none
#COMMENT: a #GtkStyleContext
#NAME: install_cell_property
#PARENT: Gtk.CellAreaClass
#COMMENT: Installs a cell property on a cell area class.
#NAME: get_font_size
#PARENT: Gtk.FontChooser.get_font_size
#COMMENT: A n integer representing the selected font size,
    or -1 if no font size is selected.
#NAME: path
#PARENT: Gtk.UIManagerClass.get_widget.get_widget.Widget
#COMMENT: a path
#NAME: about
#PARENT: Gtk.AboutDialog.get_logo.GdkPixbuf.Pixbuf
#COMMENT: a #GtkAboutDialog
#NAME: select_filename
#PARENT: Gtk.FileChooser
#COMMENT: Selects a filename. If the file name isn’t in the current
folder of @chooser, then the current folder of @chooser will
be changed to the folder containing @filename.
#NAME: use_appearance
#PARENT: Gtk.Activatable.set_use_action_appearance.none
#COMMENT: whether to use the actions appearance
#NAME: fixed
#PARENT: Gtk.CellAreaBox.pack_start.none
#COMMENT: whether @renderer should have the same size in all rows
#NAME: label
#PARENT: Gtk.Label.get_single_line_mode.gboolean
#COMMENT: a #GtkLabel
#NAME: get_tab_reorderable
#PARENT: Gtk.Notebook
#COMMENT: Gets whether the tab can be reordered via drag and drop or not.
#NAME: props
#PARENT: Gtk.StyleProperties.lookup_color.SymbolicColor
#COMMENT: a #GtkStyleProperties
#NAME: error_bell
#PARENT: Gtk.Widget
#COMMENT: Notifies the user about an input-related error on this widget.
If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
gdk_window_beep(), otherwise it does nothing.

Note that the effect of gdk_window_beep() can be configured in many
ways, depending on the windowing backend and the desktop environment
or window manager that is used.
#NAME: popover
#PARENT: Gtk.Popover.bind_model.none
#COMMENT: a #GtkPopover
#NAME: str
#PARENT: Gtk.Label.set_text_with_mnemonic.none
#COMMENT: a string
#NAME: value
#PARENT: Gtk.Window.set_has_resize_grip.none
#COMMENT: %TRUE to allow a resize grip
#NAME: bsd
#PARENT: Gtk.License
#COMMENT: The BSD standard license
#NAME: set_page_side_image
#PARENT: Gtk.Assistant
#COMMENT: Sets a side image for @page.

This image used to be displayed in the side area of the assistant
when @page is the current page.
#NAME: set_from_surface
#PARENT: Gtk.Image
#COMMENT: See gtk_image_new_from_surface() for details.
#NAME: buffer
#PARENT: Gtk.SelectionData.targets_include_rich_text.gboolean
#COMMENT: a #GtkTextBuffer
#NAME: about
#PARENT: Gtk.AboutDialog.set_website.none
#COMMENT: a #GtkAboutDialog
#NAME: args
#PARENT: Gtk.BindingSignal
#COMMENT: the arguments specified for the signal
#NAME: source
#PARENT: Gtk.IconSource.set_state_wildcarded.none
#COMMENT: a #GtkIconSource
#NAME: icon_view
#PARENT: Gtk.IconView.get_item_at_pos.gboolean
#COMMENT: A #GtkIconView.
#NAME: row
#PARENT: Gtk.ListBoxRow.get_selectable.gboolean
#COMMENT: a #GtkListBoxRow
#NAME: edge-reached
#PARENT: Gtk.ScrolledWindow
#COMMENT: The ::edge-reached signal is emitted whenever user-initiated scrolling
makes the scrolledwindow exactly reaches the lower or upper limits
defined by the adjustment in that orientation.

A similar behavior with edge resistance is provided by the
#GtkScrolledWindow::edge-overshot signal.

Note: The @pos argument is LTR/RTL aware, so callers should be aware too
if intending to provide behavior on horizontal edges.
#NAME: get_files
#PARENT: Gtk.FileChooser
#COMMENT: Lists all the selected files and subfolders in the current folder of @chooser
as #GFile. An internal function, see gtk_file_chooser_get_uris().
#NAME: widget
#PARENT: Gtk.Widget.drag_source_add_text_targets.none
#COMMENT: a #GtkWidget that’s is a drag source
#NAME: HandleBox
#PARENT: Gtk
#COMMENT: The #GtkHandleBox widget allows a portion of a window to be "torn
off". It is a bin widget which displays its child and a handle that
the user can drag to tear off a separate window (the “float
window”) containing the child widget. A thin
“ghost” is drawn in the original location of the
handlebox. By dragging the separate window back to its original
location, it can be reattached.

When reattaching, the ghost and float window, must be aligned
along one of the edges, the “snap edge”.
This either can be specified by the application programmer
explicitly, or GTK+ will pick a reasonable default based
on the handle position.

To make detaching and reattaching the handlebox as minimally confusing
as possible to the user, it is important to set the snap edge so that
the snap edge does not move when the handlebox is deattached. For
instance, if the handlebox is packed at the bottom of a VBox, then
when the handlebox is detached, the bottom edge of the handlebox's
allocation will remain fixed as the height of the handlebox shrinks,
so the snap edge should be set to %GTK_POS_BOTTOM.

> #GtkHandleBox has been deprecated. It is very specialized, lacks features
> to make it useful and most importantly does not fit well into modern
> application design. Do not use it. There is no replacement.
#NAME: pixels_inside_wrap
#PARENT: Gtk.TextAttributes
#COMMENT: Pixels of blank space between wrapped lines in
  a paragraph.
#NAME: separator
#PARENT: Gtk.UIManagerItemType
#COMMENT: Create a separator.
#NAME: is_ancestor
#PARENT: Gtk.Widget.is_ancestor
#COMMENT: %TRUE if @ancestor contains @widget as a child,
   grandchild, great grandchild, etc.
#NAME: adjustment
#PARENT: Gtk.CellRendererSpin
#COMMENT: The adjustment that holds the value of the spinbutton.
This must be non-%NULL for the cell renderer to be editable.
#NAME: set_max_children_per_line
#PARENT: Gtk.FlowBox
#COMMENT: Sets the maximum number of children to request and
allocate space for in @box’s orientation.

Setting the maximum number of children per line
limits the overall natural size request to be no more
than @n_children children long in the given orientation.
#NAME: limit
#PARENT: Gtk.TextIter.backward_find_char.gboolean
#COMMENT: search limit, or %NULL for none
#NAME: fg
#PARENT: Gtk.RcStyle
#COMMENT: Foreground colors
#NAME: add_text_targets
#PARENT: Gtk.TargetList
#COMMENT: Appends the text targets supported by #GtkSelectionData to
the target list. All targets are added with the same @info.
#NAME: get_fit_model
#PARENT: Gtk.CellView.get_fit_model
#COMMENT: whether @cell_view requests space to fit
the entire #GtkTreeModel.
#NAME: icon_theme
#PARENT: Gtk.IconTheme.lookup_by_gicon.IconInfo
#COMMENT: a #GtkIconTheme
#NAME: set_uri
#PARENT: Gtk.LinkButton
#COMMENT: Sets @uri as the URI where the #GtkLinkButton points. As a side-effect
this unsets the “visited” state of the button.
#NAME: x
#PARENT: Gtk.TreeView.get_tooltip_context.gboolean
#COMMENT: the x coordinate (relative to widget coordinates)
#NAME: set_tooltip_text
#PARENT: Gtk.ToolItem
#COMMENT: Sets the text to be displayed as tooltip on the item.
See gtk_widget_set_tooltip_text().
#NAME: y
#PARENT: Gtk.TreeView.get_tooltip_context.gboolean
#COMMENT: the y coordinate (relative to widget coordinates)
#NAME: new
#PARENT: Gtk.VolumeButton.new
#COMMENT: a new #GtkVolumeButton
#NAME: device
#PARENT: Gtk.Widget.device_is_shadowed.gboolean
#COMMENT: a #GdkDevice
#NAME: n_points
#PARENT: Gtk.IconInfo.get_attach_points.gboolean
#COMMENT: location to store the number of points in @points,
    or %NULL
#NAME: get_nth_page
#PARENT: Gtk.Notebook.get_nth_page
#COMMENT: the child widget, or %NULL
    if @page_num is out of bounds
#NAME: provider
#PARENT: Gtk.StyleContext.add_provider_for_screen.none
#COMMENT: a #GtkStyleProvider
#NAME: forward_chars
#PARENT: Gtk.TextIter.forward_chars
#COMMENT: whether @iter moved and is dereferenceable
#NAME: x
#PARENT: Gtk.paint_vline.none
#COMMENT: the x coordinate
#NAME: text
#PARENT: Gtk.IMContext.set_surrounding.none
#COMMENT: text surrounding the insertion point, as UTF-8.
       the preedit string should not be included within
       @text.
#NAME: unregister_deserialize_format
#PARENT: Gtk.TextBuffer
#COMMENT: This function unregisters a rich text format that was previously
registered using gtk_text_buffer_register_deserialize_format() or
gtk_text_buffer_register_deserialize_tagset().
#NAME: color
#PARENT: Gtk.Widget.modify_bg.none
#COMMENT: the color to assign (does not need
    to be allocated), or %NULL to undo the effect of previous
    calls to of gtk_widget_modify_bg().
#NAME: gesture
#PARENT: Gtk.GestureSingle.get_touch_only.gboolean
#COMMENT: a #GtkGestureSingle
#NAME: choose_icon_for_scale
#PARENT: Gtk.IconTheme
#COMMENT: Looks up a named icon for a particular window scale and returns
a #GtkIconInfo containing information such as the filename of the
icon. The icon can then be rendered into a pixbuf using
gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()
combines these two steps if all you need is the pixbuf.)

If @icon_names contains more than one name, this function
tries them all in the given order before falling back to
inherited icon themes.
#NAME: content_buffer
#PARENT: Gtk.TextBuffer.serialize.guint8
#COMMENT: the #GtkTextBuffer to serialize
#NAME: window
#PARENT: Gtk.Window.set_hide_titlebar_when_maximized.none
#COMMENT: a #GtkWindow
#NAME: iter
#PARENT: Gtk.TreeModelIface.iter_next.iter_next.gboolean
#COMMENT: the #GtkTreeIter-struct
#NAME: selection-notify-event
#PARENT: Gtk.Widget.selection-notify-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event. %FALSE to propagate the event further.
#NAME: argc
#PARENT: Gtk.init_with_args.gboolean
#COMMENT: Address of the `argc` parameter of
    your main() function (or 0 if @argv is %NULL). This will be changed if
    any arguments were handled.
#NAME: targets_include_uri
#PARENT: Gtk.SelectionData.targets_include_uri
#COMMENT: %TRUE if @selection_data holds a list of targets,
  and a suitable target for URI lists is included, otherwise %FALSE.
#NAME: parent
#PARENT: Gtk.TreeStore.insert_with_values.none
#COMMENT: A valid #GtkTreeIter, or %NULL
#NAME: settings
#PARENT: Gtk.PrintSettings.get_finishings.utf8
#COMMENT: a #GtkPrintSettings
#NAME: iter
#PARENT: Gtk.TreeModel.iter_previous.gboolean
#COMMENT: the #GtkTreeIter-struct
#NAME: n_items
#PARENT: Gtk.stock_add.none
#COMMENT: number of #GtkStockItem in @items
#NAME: update_header
#PARENT: Gtk.ListBox.set_header_func.none
#COMMENT: callback that lets you add row headers
#NAME: PRINT_SETTINGS_OUTPUT_BASENAME
#PARENT: Gtk
#COMMENT: The key used by the “Print to file” printer to store the file
name of the output without the path to the directory and the
file extension.
#NAME: state_type
#PARENT: Gtk.StyleClass.set_background.set_background.none
#COMMENT: a state
#NAME: del
#PARENT: Gtk.drag_finish.none
#COMMENT: a flag indicating whether the source should delete the
  original data. (This should be %TRUE for a move)
#NAME: step
#PARENT: Gtk.Entry.move-cursor.none
#COMMENT: the granularity of the move, as a #GtkMovementStep
#NAME: context
#PARENT: Gtk.IMContext.focus_in.none
#COMMENT: a #GtkIMContext
#NAME: is_ancestor
#PARENT: Gtk.Widget
#COMMENT: Determines whether @widget is somewhere inside @ancestor, possibly with
intermediate containers.
#NAME: get_size
#PARENT: Gtk.TextTagTable
#COMMENT: Returns the size of the table (number of tags)
#NAME: page_num
#PARENT: Gtk.Assistant.set_current_page.none
#COMMENT: index of the page to switch to, starting from 0.
    If negative, the last page will be used. If greater
    than the number of pages in the @assistant, nothing
    will be done.
#NAME: set_size
#PARENT: Gtk.IconSource
#COMMENT: Sets the icon size this icon source is intended to be used
with.

Setting the icon size on an icon source makes no difference
if the size is wildcarded. Therefore, you should usually
call gtk_icon_source_set_size_wildcarded() to un-wildcard it
in addition to calling this function.
#NAME: pspec
#PARENT: Gtk.ThemingEngine.register_property.none
#COMMENT: the #GParamSpec for the new property
#NAME: arg_type
#PARENT: Gtk.BindingArg
#COMMENT: implementation detail
#NAME: CellArea
#PARENT: Gtk
#COMMENT: The #GtkCellArea is an abstract class for #GtkCellLayout widgets
(also referred to as "layouting widgets") to interface with an
arbitrary number of #GtkCellRenderers and interact with the user
for a given #GtkTreeModel row.

The cell area handles events, focus navigation, drawing and
size requests and allocations for a given row of data.

Usually users dont have to interact with the #GtkCellArea directly
unless they are implementing a cell-layouting widget themselves.

# Requesting area sizes

As outlined in
[GtkWidget’s geometry management section][geometry-management],
GTK+ uses a height-for-width
geometry management system to compute the sizes of widgets and user
interfaces. #GtkCellArea uses the same semantics to calculate the
size of an area for an arbitrary number of #GtkTreeModel rows.

When requesting the size of a cell area one needs to calculate
the size for a handful of rows, and this will be done differently by
different layouting widgets. For instance a #GtkTreeViewColumn
always lines up the areas from top to bottom while a #GtkIconView
on the other hand might enforce that all areas received the same
width and wrap the areas around, requesting height for more cell
areas when allocated less width.

It’s also important for areas to maintain some cell
alignments with areas rendered for adjacent rows (cells can
appear “columnized” inside an area even when the size of
cells are different in each row). For this reason the #GtkCellArea
uses a #GtkCellAreaContext object to store the alignments
and sizes along the way (as well as the overall largest minimum
and natural size for all the rows which have been calculated
with the said context).

The #GtkCellAreaContext is an opaque object specific to the
#GtkCellArea which created it (see gtk_cell_area_create_context()).
The owning cell-layouting widget can create as many contexts as
it wishes to calculate sizes of rows which should receive the
same size in at least one orientation (horizontally or vertically),
However, it’s important that the same #GtkCellAreaContext which
was used to request the sizes for a given #GtkTreeModel row be
used when rendering or processing events for that row.

In order to request the width of all the rows at the root level
of a #GtkTreeModel one would do the following:

|[<!-- language="C" -->
GtkTreeIter iter;
gint        minimum_width;
gint        natural_width;

valid = gtk_tree_model_get_iter_first (model, &iter);
while (valid)
  {
    gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
    gtk_cell_area_get_preferred_width (area, context, widget, NULL, NULL);

    valid = gtk_tree_model_iter_next (model, &iter);
  }
gtk_cell_area_context_get_preferred_width (context, &minimum_width, &natural_width);
]|

Note that in this example it’s not important to observe the
returned minimum and natural width of the area for each row
unless the cell-layouting object is actually interested in the
widths of individual rows. The overall width is however stored
in the accompanying #GtkCellAreaContext object and can be consulted
at any time.

This can be useful since #GtkCellLayout widgets usually have to
support requesting and rendering rows in treemodels with an
exceedingly large amount of rows. The #GtkCellLayout widget in
that case would calculate the required width of the rows in an
idle or timeout source (see g_timeout_add()) and when the widget
is requested its actual width in #GtkWidgetClass.get_preferred_width()
it can simply consult the width accumulated so far in the
#GtkCellAreaContext object.

A simple example where rows are rendered from top to bottom and
take up the full width of the layouting widget would look like:

|[<!-- language="C" -->
static void
foo_get_preferred_width (GtkWidget       *widget,
                         gint            *minimum_size,
                         gint            *natural_size)
{
  Foo        *foo  = FOO (widget);
  FooPrivate *priv = foo->priv;

  foo_ensure_at_least_one_handfull_of_rows_have_been_requested (foo);

  gtk_cell_area_context_get_preferred_width (priv->context, minimum_size, natural_size);
}
]|

In the above example the Foo widget has to make sure that some
row sizes have been calculated (the amount of rows that Foo judged
was appropriate to request space for in a single timeout iteration)
before simply returning the amount of space required by the area via
the #GtkCellAreaContext.

Requesting the height for width (or width for height) of an area is
a similar task except in this case the #GtkCellAreaContext does not
store the data (actually, it does not know how much space the layouting
widget plans to allocate it for every row. It’s up to the layouting
widget to render each row of data with the appropriate height and
width which was requested by the #GtkCellArea).

In order to request the height for width of all the rows at the
root level of a #GtkTreeModel one would do the following:

|[<!-- language="C" -->
GtkTreeIter iter;
gint        minimum_height;
gint        natural_height;
gint        full_minimum_height = 0;
gint        full_natural_height = 0;

valid = gtk_tree_model_get_iter_first (model, &iter);
while (valid)
  {
    gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
    gtk_cell_area_get_preferred_height_for_width (area, context, widget,
                                                  width, &minimum_height, &natural_height);

    if (width_is_for_allocation)
       cache_row_height (&iter, minimum_height, natural_height);

    full_minimum_height += minimum_height;
    full_natural_height += natural_height;

    valid = gtk_tree_model_iter_next (model, &iter);
  }
]|

Note that in the above example we would need to cache the heights
returned for each row so that we would know what sizes to render the
areas for each row. However we would only want to really cache the
heights if the request is intended for the layouting widgets real
allocation.

In some cases the layouting widget is requested the height for an
arbitrary for_width, this is a special case for layouting widgets
who need to request size for tens of thousands  of rows. For this
case it’s only important that the layouting widget calculate
one reasonably sized chunk of rows and return that height
synchronously. The reasoning here is that any layouting widget is
at least capable of synchronously calculating enough height to fill
the screen height (or scrolled window height) in response to a single
call to #GtkWidgetClass.get_preferred_height_for_width(). Returning
a perfect height for width that is larger than the screen area is
inconsequential since after the layouting receives an allocation
from a scrolled window it simply continues to drive the scrollbar
values while more and more height is required for the row heights
that are calculated in the background.

# Rendering Areas

Once area sizes have been aquired at least for the rows in the
visible area of the layouting widget they can be rendered at
#GtkWidgetClass.draw() time.

A crude example of how to render all the rows at the root level
runs as follows:

|[<!-- language="C" -->
GtkAllocation allocation;
GdkRectangle  cell_area = { 0, };
GtkTreeIter   iter;
gint          minimum_width;
gint          natural_width;

gtk_widget_get_allocation (widget, &allocation);
cell_area.width = allocation.width;

valid = gtk_tree_model_get_iter_first (model, &iter);
while (valid)
  {
    cell_area.height = get_cached_height_for_row (&iter);

    gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
    gtk_cell_area_render (area, context, widget, cr,
                          &cell_area, &cell_area, state_flags, FALSE);

    cell_area.y += cell_area.height;

    valid = gtk_tree_model_iter_next (model, &iter);
  }
]|

Note that the cached height in this example really depends on how
the layouting widget works. The layouting widget might decide to
give every row its minimum or natural height or, if the model content
is expected to fit inside the layouting widget without scrolling, it
would make sense to calculate the allocation for each row at
#GtkWidget::size-allocate time using gtk_distribute_natural_allocation().

# Handling Events and Driving Keyboard Focus

Passing events to the area is as simple as handling events on any
normal widget and then passing them to the gtk_cell_area_event()
API as they come in. Usually #GtkCellArea is only interested in
button events, however some customized derived areas can be implemented
who are interested in handling other events. Handling an event can
trigger the #GtkCellArea::focus-changed signal to fire; as well as
#GtkCellArea::add-editable in the case that an editable cell was
clicked and needs to start editing. You can call
gtk_cell_area_stop_editing() at any time to cancel any cell editing
that is currently in progress.

The #GtkCellArea drives keyboard focus from cell to cell in a way
similar to #GtkWidget. For layouting widgets that support giving
focus to cells it’s important to remember to pass %GTK_CELL_RENDERER_FOCUSED
to the area functions for the row that has focus and to tell the
area to paint the focus at render time.

Layouting widgets that accept focus on cells should implement the
#GtkWidgetClass.focus() virtual method. The layouting widget is always
responsible for knowing where #GtkTreeModel rows are rendered inside
the widget, so at #GtkWidgetClass.focus() time the layouting widget
should use the #GtkCellArea methods to navigate focus inside the area
and then observe the GtkDirectionType to pass the focus to adjacent
rows and areas.

A basic example of how the #GtkWidgetClass.focus() virtual method
should be implemented:

|[<!-- language="C" -->
static gboolean
foo_focus (GtkWidget       *widget,
           GtkDirectionType direction)
{
  Foo        *foo  = FOO (widget);
  FooPrivate *priv = foo->priv;
  gint        focus_row;
  gboolean    have_focus = FALSE;

  focus_row = priv->focus_row;

  if (!gtk_widget_has_focus (widget))
    gtk_widget_grab_focus (widget);

  valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, priv->focus_row);
  while (valid)
    {
      gtk_cell_area_apply_attributes (priv->area, priv->model, &iter, FALSE, FALSE);

      if (gtk_cell_area_focus (priv->area, direction))
        {
           priv->focus_row = focus_row;
           have_focus = TRUE;
           break;
        }
      else
        {
          if (direction == GTK_DIR_RIGHT ||
              direction == GTK_DIR_LEFT)
            break;
          else if (direction == GTK_DIR_UP ||
                   direction == GTK_DIR_TAB_BACKWARD)
           {
              if (focus_row == 0)
                break;
              else
               {
                  focus_row--;
                  valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, focus_row);
               }
            }
          else
            {
              if (focus_row == last_row)
                break;
              else
                {
                  focus_row++;
                  valid = gtk_tree_model_iter_next (priv->model, &iter);
                }
            }
        }
    }
    return have_focus;
}
]|

Note that the layouting widget is responsible for matching the
GtkDirectionType values to the way it lays out its cells.

# Cell Properties

The #GtkCellArea introduces cell properties for #GtkCellRenderers
in very much the same way that #GtkContainer introduces
[child properties][child-properties]
for #GtkWidgets. This provides some general interfaces for defining
the relationship cell areas have with their cells. For instance in a
#GtkCellAreaBox a cell might “expand” and receive extra space when
the area is allocated more than its full natural request, or a cell
might be configured to “align” with adjacent rows which were requested
and rendered with the same #GtkCellAreaContext.

Use gtk_cell_area_class_install_cell_property() to install cell
properties for a cell area class and gtk_cell_area_class_find_cell_property()
or gtk_cell_area_class_list_cell_properties() to get information about
existing cell properties.

To set the value of a cell property, use gtk_cell_area_cell_set_property(),
gtk_cell_area_cell_set() or gtk_cell_area_cell_set_valist(). To obtain
the value of a cell property, use gtk_cell_area_cell_get_property(),
gtk_cell_area_cell_get() or gtk_cell_area_cell_get_valist().
#NAME: clipboard
#PARENT: Gtk.Clipboard.wait_for_uris.utf8
#COMMENT: a #GtkClipboard
#NAME: get_quality
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_QUALITY.
#NAME: set_printer_lpi
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.
#NAME: destroy
#PARENT: Gtk.TreeView.set_search_position_func.none
#COMMENT: Destroy notifier for @data, or %NULL
#NAME: get_accel_group
#PARENT: Gtk.Menu
#COMMENT: Gets the #GtkAccelGroup which holds global accelerators for the
menu. See gtk_menu_set_accel_group().
#NAME: get_active
#PARENT: Gtk.Switch.get_active
#COMMENT: %TRUE if the #GtkSwitch is active, and %FALSE otherwise
#NAME: value
#PARENT: Gtk.LevelBar.set_value.none
#COMMENT: a value in the interval between
    #GtkLevelBar:min-value and #GtkLevelBar:max-value
#NAME: create-menu-proxy
#PARENT: Gtk.ToolItem
#COMMENT: This signal is emitted when the toolbar needs information from @tool_item
about whether the item should appear in the toolbar overflow menu. In
response the tool item should either

- call gtk_tool_item_set_proxy_menu_item() with a %NULL
  pointer and return %TRUE to indicate that the item should not appear
  in the overflow menu

- call gtk_tool_item_set_proxy_menu_item() with a new menu
  item and return %TRUE, or

- return %FALSE to indicate that the signal was not handled by the item.
  This means that the item will not appear in the overflow menu unless
  a later handler installs a menu item.

The toolbar may cache the result of this signal. When the tool item changes
how it will respond to this signal it must call gtk_tool_item_rebuild_menu()
to invalidate the cache and ensure that the toolbar rebuilds its overflow
menu.
#NAME: widget
#PARENT: Gtk.Widget.get_opacity.gdouble
#COMMENT: a #GtkWidget
#NAME: binding_set
#PARENT: Gtk.binding_entry_skip.none
#COMMENT: a #GtkBindingSet to skip an entry of
#NAME: y2_
#PARENT: Gtk.paint_vline.none
#COMMENT: the ending y coordinate
#NAME: new
#PARENT: Gtk.HPaned.new
#COMMENT: the new #GtkHPaned
#NAME: remove
#PARENT: Gtk.TextTagTable
#COMMENT: Remove a tag from the table. If a #GtkTextBuffer has @table as its tag table,
the tag is removed from the buffer. The table’s reference to the tag is
removed, so the tag will end up destroyed if you don’t have a reference to
it.
#NAME: setting
#PARENT: Gtk.AppChooserWidget.set_show_recommended.none
#COMMENT: the new value for #GtkAppChooserWidget:show-recommended
#NAME: button
#PARENT: Gtk.ColorButton.get_color.none
#COMMENT: a #GtkColorButton
#NAME: get_stock
#PARENT: Gtk.StatusIcon
#COMMENT: Gets the id of the stock icon being displayed by the #GtkStatusIcon.
The storage type of the status icon must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_STOCK (see gtk_status_icon_get_storage_type()).
The returned string is owned by the #GtkStatusIcon and should not
be freed or modified.
#NAME: text
#PARENT: Gtk.TextBuffer.insert_with_tags.none
#COMMENT: UTF-8 text
#NAME: get_sizing
#PARENT: Gtk.TreeViewColumn.get_sizing
#COMMENT: The type of @tree_column.
#NAME: child
#PARENT: Gtk.Container.set_focus_child.none
#COMMENT: a #GtkWidget, or %NULL
#NAME: a
#PARENT: Gtk.ListStore.swap.none
#COMMENT: A #GtkTreeIter.
#NAME: menu_button
#PARENT: Gtk.MenuButton.set_popup.none
#COMMENT: a #GtkMenuButton
#NAME: height
#PARENT: Gtk.CellAreaContext.allocate.none
#COMMENT: the allocated height for all #GtkTreeModel rows rendered
    with @context, or -1.
#NAME: b
#PARENT: Gtk.ListStore.swap.none
#COMMENT: Another #GtkTreeIter.
#NAME: unfullscreen
#PARENT: Gtk.Window
#COMMENT: Asks to toggle off the fullscreen state for @window. Note that you
shouldn’t assume the window is definitely not full screen
afterward, because other entities (e.g. the user or
[window manager][gtk-X11-arch]) could fullscreen it
again, and not all window managers honor requests to unfullscreen
windows. But normally the window will end up restored to its normal
state. Just don’t write code that crashes if not.

You can track the fullscreen state via the “window-state-event” signal
on #GtkWidget.
#NAME: width
#PARENT: Gtk.icon_size_register.gint
#COMMENT: the icon width
#NAME: container
#PARENT: Gtk.ContainerClass.get_path_for_child.get_path_for_child.WidgetPath
#COMMENT: a #GtkContainer
#NAME: get_stock_id
#PARENT: Gtk.Action
#COMMENT: Gets the stock id of @action.
#NAME: tree_model
#PARENT: Gtk.tree_get_row_drag_data.gboolean
#COMMENT: a #GtkTreeModel
#NAME: ClipboardRichTextReceivedFunc
#PARENT: Gtk
#COMMENT: A function to be called when the results of
gtk_clipboard_request_rich_text() are received, or when the request
fails.
#NAME: strong
#PARENT: Gtk.TextView.get_cursor_locations.none
#COMMENT: location to store the strong
    cursor position (may be %NULL)
#NAME: widget
#PARENT: Gtk.Widget.get_composite_name.utf8
#COMMENT: a #GtkWidget
#NAME: align
#PARENT: Gtk.Widget.set_halign.none
#COMMENT: the horizontal alignment
#NAME: about
#PARENT: Gtk.AboutDialog.set_translator_credits.none
#COMMENT: a #GtkAboutDialog
#NAME: new
#PARENT: Gtk.Invisible.new
#COMMENT: a new #GtkInvisible.
#NAME: end
#PARENT: Gtk.TextBuffer.remove-tag.none
#COMMENT: the end of the range the tag is removed from
#NAME: new_with_label
#PARENT: Gtk.ToggleButton
#COMMENT: Creates a new toggle button with a text label.
#NAME: iter_previous
#PARENT: Gtk.TreeModel
#COMMENT: Sets @iter to point to the previous node at the current level.

If there is no previous @iter, %FALSE is returned and @iter is
set to be invalid.
#NAME: argv
#PARENT: Gtk.init_with_args.gboolean
#COMMENT: Address of the
    `argv` parameter of main(), or %NULL. Any options
    understood by GTK+ are stripped before return.
#NAME: iter
#PARENT: Gtk.TreeModel.get_iter.gboolean
#COMMENT: the uninitialized #GtkTreeIter-struct
#NAME: completion
#PARENT: Gtk.EntryCompletion.get_popup_completion.gboolean
#COMMENT: a #GtkEntryCompletion
#NAME: get_icon_name
#PARENT: Gtk.Action.get_icon_name
#COMMENT: the icon name
#NAME: icon_view
#PARENT: Gtk.IconView.set_item_orientation.none
#COMMENT: a #GtkIconView
#NAME: tree_view
#PARENT: Gtk.TreeView.set_drag_dest_row.none
#COMMENT: a #GtkTreeView
#NAME: TreeViewSearchEqualFunc
#PARENT: Gtk
#COMMENT: A function used for checking whether a row in @model matches
a search key string entered by the user. Note the return value
is reversed from what you would normally expect, though it
has some similarity to strcmp() returning 0 for equal strings.
#NAME: stock_id
#PARENT: Gtk.Action.new.Action
#COMMENT: the stock icon to display in widgets representing
           the action, or %NULL
#NAME: get_wrap_license
#PARENT: Gtk.AboutDialog.get_wrap_license
#COMMENT: %TRUE if the license text is wrapped
#NAME: get_always_show_image
#PARENT: Gtk.Action
#COMMENT: Returns whether @action's menu item proxies will always
show their image, if available.
#NAME: new
#PARENT: Gtk.MenuItem
#COMMENT: Creates a new #GtkMenuItem.
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_start_iter.none
#COMMENT: a #GtkTextBuffer
#NAME: position
#PARENT: Gtk.EntryBuffer.deleted-text.none
#COMMENT: the position the text was deleted at.
#NAME: min-position
#PARENT: Gtk.Paned
#COMMENT: The smallest possible value for the position property.
This property is derived from the size and shrinkability
of the widget's children.
#NAME: STOCK_REDO
#PARENT: Gtk
#COMMENT: The “Redo” item and icon. The icon has an RTL variant.
#NAME: get_width
#PARENT: Gtk.TreeViewColumn.get_width
#COMMENT: The current width of @tree_column.
#NAME: detail
#PARENT: Gtk.paint_slider.none
#COMMENT: a style detail
#NAME: selection_data
#PARENT: Gtk.SelectionData.get_data_type.Gdk.Atom
#COMMENT: a pointer to a #GtkSelectionData-struct.
#NAME: window_group
#PARENT: Gtk.WindowGroup.add_window.none
#COMMENT: a #GtkWindowGroup
#NAME: run
#PARENT: Gtk.Dialog
#COMMENT: Blocks in a recursive main loop until the @dialog either emits the
#GtkDialog::response signal, or is destroyed. If the dialog is
destroyed during the call to gtk_dialog_run(), gtk_dialog_run() returns
#GTK_RESPONSE_NONE. Otherwise, it returns the response ID from the
::response signal emission.

Before entering the recursive main loop, gtk_dialog_run() calls
gtk_widget_show() on the dialog for you. Note that you still
need to show any children of the dialog yourself.

During gtk_dialog_run(), the default behavior of #GtkWidget::delete-event
is disabled; if the dialog receives ::delete_event, it will not be
destroyed as windows usually are, and gtk_dialog_run() will return
#GTK_RESPONSE_DELETE_EVENT. Also, during gtk_dialog_run() the dialog
will be modal. You can force gtk_dialog_run() to return at any time by
calling gtk_dialog_response() to emit the ::response signal. Destroying
the dialog during gtk_dialog_run() is a very bad idea, because your
post-run code won’t know whether the dialog was destroyed or not.

After gtk_dialog_run() returns, you are responsible for hiding or
destroying the dialog if you wish to do so.

Typical usage of this function might be:
|[<!-- language="C" -->
  gint result = gtk_dialog_run (GTK_DIALOG (dialog));
  switch (result)
    {
      case GTK_RESPONSE_ACCEPT:
         do_application_specific_something ();
         break;
      default:
         do_nothing_since_dialog_was_cancelled ();
         break;
    }
  gtk_widget_destroy (dialog);
]|

Note that even though the recursive main loop gives the effect of a
modal dialog (it prevents the user from interacting with other
windows in the same window group while the dialog is run), callbacks
such as timeouts, IO channel watches, DND drops, etc, will
be triggered during a gtk_dialog_run() call.
#NAME: error
#PARENT: Gtk.DragResult
#COMMENT: The drag operation failed due to some
 unspecified error.
#NAME: manager
#PARENT: Gtk.RecentManager.remove_item.gboolean
#COMMENT: a #GtkRecentManager
#NAME: context
#PARENT: Gtk.StyleContext.set_parent.none
#COMMENT: a #GtkStyleContext
#NAME: type
#PARENT: Gtk.TreeSelection.set_mode.none
#COMMENT: The selection mode
#NAME: self
#PARENT: Gtk.AppChooserWidget.set_show_other.none
#COMMENT: a #GtkAppChooserWidget
#NAME: destroy-event
#PARENT: Gtk.Widget.destroy-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: title
#PARENT: Gtk.FileChooserDialog.new.Widget
#COMMENT: Title of the dialog, or %NULL
#NAME: set_from_icon_name
#PARENT: Gtk.StatusIcon
#COMMENT: Makes @status_icon display the icon named @icon_name from the
current icon theme.
See gtk_status_icon_new_from_icon_name() for details.
#NAME: manager
#PARENT: Gtk.UIManager.add_ui_from_file.guint
#COMMENT: a #GtkUIManager object
#NAME: widget
#PARENT: Gtk.CellRenderer.start_editing.CellEditable
#COMMENT: widget that received the event
#NAME: set_is_important
#PARENT: Gtk.Action
#COMMENT: Sets whether the action is important, this attribute is used
primarily by toolbar items to decide whether to show a label
or not.
#NAME: create-context
#PARENT: Gtk.GLArea.create-context
#COMMENT: a newly created #GdkGLContext;
    the #GtkGLArea widget will take ownership of the returned value.
#NAME: get_request_mode
#PARENT: Gtk.Widget
#COMMENT: Gets whether the widget prefers a height-for-width layout
or a width-for-height layout.

#GtkBin widgets generally propagate the preference of
their child, container widgets need to request something either in
context of their children or in context of their allocation
capabilities.
#NAME: visited
#PARENT: Gtk.StateFlags
#COMMENT: The location the widget points to has already been visited. Since 3.12
#NAME: get_tooltip_text
#PARENT: Gtk.StatusIcon
#COMMENT: Gets the contents of the tooltip for @status_icon.
#NAME: iter
#PARENT: Gtk.TreeModel.get_iter_from_string.gboolean
#COMMENT: an uninitialized #GtkTreeIter-struct
#NAME: paper_size_get_default
#PARENT: Gtk
#COMMENT: Returns the name of the default paper size, which
depends on the current locale.
#NAME: invalidate_headers
#PARENT: Gtk.ListBox
#COMMENT: Update the separators for all rows. Call this when result
of the header function on the @box is changed due
to an external factor.
#NAME: get_page_setup
#PARENT: Gtk.PrintContext.get_page_setup
#COMMENT: the page setup of @context
#NAME: letter_spacing
#PARENT: Gtk.TextAttributes
#COMMENT: Extra space to insert between graphemes, in Pango units
#NAME: property_value
#PARENT: Gtk.RcProperty.parse_border.gboolean
#COMMENT: a #GValue which must hold boxed values.
#NAME: get_vscroll_policy
#PARENT: Gtk.Scrollable.get_vscroll_policy
#COMMENT: The vertical #GtkScrollablePolicy.
#NAME: flags
#PARENT: Gtk.ThemingEngine.has_region.gboolean
#COMMENT: return location for region flags
#NAME: get_margin_start
#PARENT: Gtk.Widget
#COMMENT: Gets the value of the #GtkWidget:margin-start property.
#NAME: page_num
#PARENT: Gtk.Notebook
#COMMENT: Finds the index of the page which contains the given child
widget.
#NAME: window
#PARENT: Gtk.StyleContext.scroll_animations.none
#COMMENT: a #GdkWindow used previously in
         gtk_style_context_notify_state_change()
#NAME: cr
#PARENT: Gtk.Container.propagate_draw.none
#COMMENT: Cairo context as passed to the container. If you want to use @cr
  in container’s draw function, consider using cairo_save() and
  cairo_restore() before calling this function.
#NAME: IconView
#PARENT: Gtk
#COMMENT: #GtkIconView provides an alternative view on a #GtkTreeModel.
It displays the model as a grid of icons with labels. Like
#GtkTreeView, it allows to select one or multiple items
(depending on the selection mode, see gtk_icon_view_set_selection_mode()).
In addition to selection with the arrow keys, #GtkIconView supports
rubberband selection, which is controlled by dragging the pointer.

Note that if the tree model is backed by an actual tree store (as
opposed to a flat list where the mapping to icons is obvious),
#GtkIconView will only display the first level of the tree and
ignore the tree’s branches.
#NAME: Overlay
#PARENT: Gtk
#COMMENT: GtkOverlay is a container which contains a single main child, on top
of which it can place “overlay” widgets. The
position of each overlay widget is determined by its #GtkWidget:halign
and #GtkWidget:valign properties. E.g. a widget with both alignments
set to %GTK_ALIGN_START will be placed at the top left corner of the
main widget, whereas an overlay with halign set to %GTK_ALIGN_CENTER
and valign set to %GTK_ALIGN_END will be placed a the bottom edge of
the main widget, horizontally centered. The position can be adjusted
by setting the margin properties of the child to non-zero values.

More complicated placement of overlays is possible by connecting
to the #GtkOverlay::get-child-position signal.

# GtkOverlay as GtkBuildable

The GtkOverlay implementation of the GtkBuildable interface
supports placing a child as an overlay by specifying “overlay” as
the “type” attribute of a `<child>` element.
#NAME: get_label
#PARENT: Gtk.MenuItemClass.get_label.get_label
#COMMENT: The text in the @menu_item label. This is the internal
  string used by the label, and must not be modified.
#NAME: parent
#PARENT: Gtk.ResizeMode
#COMMENT: Pass resize request to the parent
#NAME: convert_tree_to_bin_window_coords
#PARENT: Gtk.TreeView
#COMMENT: Converts tree coordinates (coordinates in full scrollable area of the tree)
to bin_window coordinates.
#NAME: n_items
#PARENT: Gtk.stock_add_static.none
#COMMENT: number of items
#NAME: toggle
#PARENT: Gtk.CellRendererToggle.get_radio.gboolean
#COMMENT: a #GtkCellRendererToggle
#NAME: opacity
#PARENT: Gtk.Widget.set_opacity.none
#COMMENT: desired opacity, between 0 and 1
#NAME: im-module
#PARENT: Gtk.Entry
#COMMENT: Which IM (input method) module should be used for this entry.
See #GtkIMContext.

Setting this to a non-%NULL value overrides the
system-wide IM module setting. See the GtkSettings
#GtkSettings:gtk-im-module property.
#NAME: get_page_set
#PARENT: Gtk.PrintSettings.get_page_set
#COMMENT: the set of pages to print
#NAME: get_group_position
#PARENT: Gtk.ToolPalette
#COMMENT: Gets the position of @group in @palette as index.
See gtk_tool_palette_set_group_position().
#NAME: show_numbers
#PARENT: Gtk.RecentAction.set_show_numbers.none
#COMMENT: %TRUE if the shown items should be numbered
#NAME: get_added
#PARENT: Gtk.RecentInfo
#COMMENT: Gets the timestamp (seconds from system’s Epoch) when the resource
was added to the recently used resources list.
#NAME: get_cancel_button
#PARENT: Gtk.FontSelectionDialog.get_cancel_button
#COMMENT: the #GtkWidget used in the dialog
    for the “Cancel” button.
#NAME: display
#PARENT: Gtk.Plug.construct_for_display.none
#COMMENT: the #GdkDisplay associated with @socket_id’s
     #GtkSocket.
#NAME: color
#PARENT: Gtk.StyleProperties.map_color.none
#COMMENT: #GtkSymbolicColor to map @name to
#NAME: tree_view
#PARENT: Gtk.TreeView.set_hover_selection.none
#COMMENT: a #GtkTreeView
#NAME: position
#PARENT: Gtk.EntryBuffer.delete_text.guint
#COMMENT: position at which to delete text
#NAME: RecentChooser
#PARENT: Gtk
#COMMENT: #GtkRecentChooser is an interface that can be implemented by widgets
displaying the list of recently used files.  In GTK+, the main objects
that implement this interface are #GtkRecentChooserWidget,
#GtkRecentChooserDialog and #GtkRecentChooserMenu.

Recently used files are supported since GTK+ 2.10.
#NAME: accel_key
#PARENT: Gtk.AccelGroup.connect.none
#COMMENT: key value of the accelerator
#NAME: set_popup_fixed_width
#PARENT: Gtk.ComboBox
#COMMENT: Specifies whether the popup’s width should be a fixed width
matching the allocated width of the combo box.
#NAME: STOCK_SPELL_CHECK
#PARENT: Gtk
#COMMENT: The “Spell Check” item and icon.
#NAME: page-increment
#PARENT: Gtk.Adjustment
#COMMENT: The page increment of the adjustment.
#NAME: font_button
#PARENT: Gtk.FontButton.get_show_size.gboolean
#COMMENT: a #GtkFontButton
#NAME: rect
#PARENT: Gtk.Gesture.get_bounding_box.gboolean
#COMMENT: bounding box containing all active touches.
#NAME: set_focus_cell
#PARENT: Gtk.CellArea
#COMMENT: Explicitly sets the currently focused cell to @renderer.

This is generally called by implementations of
#GtkCellAreaClass.focus() or #GtkCellAreaClass.event(),
however it can also be used to implement functions such
as gtk_tree_view_set_cursor_on_cell().
#NAME: widget
#PARENT: Gtk.Widget.hide.none
#COMMENT: a #GtkWidget
#NAME: bar
#PARENT: Gtk.HeaderBar.set_has_subtitle.none
#COMMENT: a #GtkHeaderBar
#NAME: func
#PARENT: Gtk.TreeSelection.selected_foreach.none
#COMMENT: The function to call for each selected node.
#NAME: widget
#PARENT: Gtk.Widget.get_direction.TextDirection
#COMMENT: a #GtkWidget
#NAME: modifiers
#PARENT: Gtk.accelerator_valid.gboolean
#COMMENT: modifier mask
#NAME: get_default_top_margin
#PARENT: Gtk.PaperSize
#COMMENT: Gets the default top margin for the #GtkPaperSize.
#NAME: setting
#PARENT: Gtk.CheckMenuItem.set_inconsistent.none
#COMMENT: %TRUE to display an “inconsistent” third state check
#NAME: parent_menu_shell
#PARENT: Gtk.Menu.popup.none
#COMMENT: the menu shell containing the
    triggering menu item, or %NULL
#NAME: manager
#PARENT: Gtk.UIManager.add_ui_from_string.guint
#COMMENT: a #GtkUIManager object
#NAME: expand
#PARENT: Gtk.CellLayout.pack_start.none
#COMMENT: %TRUE if @cell is to be given extra space allocated to @cell_layout
#NAME: calendar
#PARENT: Gtk.Calendar.get_display_options.CalendarDisplayOptions
#COMMENT: a #GtkCalendar
#NAME: start
#PARENT: Gtk.PageRange
#COMMENT: start of page range.
#NAME: get_items
#PARENT: Gtk.RecentManager
#COMMENT: Gets the list of recently used resources.
#NAME: text
#PARENT: Gtk.Entry.set_placeholder_text.none
#COMMENT: a string to be displayed when @entry is empty an unfocused, or %NULL
#NAME: set_show_text
#PARENT: Gtk.ProgressBar
#COMMENT: Sets whether the progress bar will show text superimposed
over the bar. The shown text is either the value of
the #GtkProgressBar:text property or, if that is %NULL,
the #GtkProgressBar:fraction value, as a percentage.

To make a progress bar that is styled and sized suitably for containing
text (even if the actual text is blank), set #GtkProgressBar:show-text to
%TRUE and #GtkProgressBar:text to the empty string (not %NULL).
#NAME: end
#PARENT: Gtk.TextBuffer.apply_tag_by_name.none
#COMMENT: other bound of range to be tagged
#NAME: set_buffer
#PARENT: Gtk.Entry
#COMMENT: Set the #GtkEntryBuffer object which holds the text for
this widget.
#NAME: new_with_markup
#PARENT: Gtk.MessageDialog.new_with_markup
#COMMENT: a new #GtkMessageDialog
#NAME: get_selection_bounds
#PARENT: Gtk.TextBuffer
#COMMENT: Returns %TRUE if some text is selected; places the bounds
of the selection in @start and @end (if the selection has length 0,
then @start and @end are filled in with the same value).
@start and @end will be in ascending order. If @start and @end are
NULL, then they are not filled in, but the return value still indicates
whether text is selected.
#NAME: underline-rgba
#PARENT: Gtk.TextTag
#COMMENT: This property modifies the color of underlines. If not set, underlines
will use the forground color.

If #GtkTextTag:underline is set to %PANGO_UNDERLINE_ERROR, an alternate
color may be applied instead of the foreground. Setting this property
will always override those defaults.
#NAME: right
#PARENT: Gtk.ArrowType
#COMMENT: Represents a right pointing arrow.
#NAME: copy
#PARENT: Gtk.PageSetup
#COMMENT: Copies a #GtkPageSetup.
#NAME: activate
#PARENT: Gtk.CellAreaClass.activate.activate
#COMMENT: Whether @area was successfully activated.
#NAME: set_geometry_hints
#PARENT: Gtk.Window
#COMMENT: This function sets up hints about how a window can be resized by
the user.  You can set a minimum and maximum size; allowed resize
increments (e.g. for xterm, you can only resize by the size of a
character); aspect ratios; and more. See the #GdkGeometry struct.
#NAME: register_buffer
#PARENT: Gtk.TextBuffer.serialize.guint8
#COMMENT: the #GtkTextBuffer @format is registered with
#NAME: requisition
#PARENT: Gtk.Widget.get_requisition.none
#COMMENT: a pointer to a #GtkRequisition to copy to
#NAME: button
#PARENT: Gtk.Menu.popup_for_device.none
#COMMENT: the mouse button which was pressed to initiate the event
#NAME: menu_item
#PARENT: Gtk.MenuItemClass.toggle_size_request.toggle_size_request.none
#COMMENT: the menu item
#NAME: format
#PARENT: Gtk.TextBuffer.deserialize_get_can_create_tags.gboolean
#COMMENT: a #GdkAtom representing a registered rich text format
#NAME: sizes
#PARENT: Gtk.distribute_natural_allocation.gint
#COMMENT: An array of structs with a client pointer and a minimum/natural size
        in the orientation of the allocation.
#NAME: scale
#PARENT: Gtk.GestureZoom.scale-changed.none
#COMMENT: Scale delta, taking the initial state as 1:1
#NAME: user_data
#PARENT: Gtk.ListBox.set_sort_func.none
#COMMENT: user data passed to @sort_func
#NAME: unref
#PARENT: Gtk.SymbolicColor
#COMMENT: Decreases the reference count of @color, freeing its memory if the
reference count reaches 0.
#NAME: new
#PARENT: Gtk.ToolButton
#COMMENT: Creates a new %GtkToolButton using @icon_widget as contents and @label as
label.
#NAME: mark
#PARENT: Gtk.TextView.scroll_mark_onscreen.none
#COMMENT: a mark in the buffer for @text_view
#NAME: buffer
#PARENT: Gtk.EntryBufferClass.get_length.get_length.guint
#COMMENT: a #GtkEntryBuffer
#NAME: fontname
#PARENT: Gtk.FontChooser.set_font.none
#COMMENT: a font name like “Helvetica 12” or “Times Bold 18”
#NAME: search-changed
#PARENT: Gtk.SearchEntry
#COMMENT: The #GtkSearchEntry::search-changed signal is emitted with a short
delay of 150 milliseconds after the last change to the entry text.
#NAME: init_with_args
#PARENT: Gtk
#COMMENT: This function does the same work as gtk_init_check().
Additionally, it allows you to add your own commandline options,
and it automatically generates nicely formatted
`--help` output. Note that your program will
be terminated after writing out the help output.
#NAME: dialog_text
#PARENT: Gtk.test_display_button_window.Widget
#COMMENT: Text inside the window to be displayed.
#NAME: reorder
#PARENT: Gtk.CellLayout
#COMMENT: Re-inserts @cell at @position.

Note that @cell has already to be packed into @cell_layout
for this to function properly.
#NAME: shrink
#PARENT: Gtk.AttachOptions
#COMMENT: the widget should shrink as and when possible.
#NAME: child
#PARENT: Gtk.Notebook.get_tab_detachable.gboolean
#COMMENT: a child #GtkWidget
#NAME: spinner
#PARENT: Gtk.Spinner.start.none
#COMMENT: a #GtkSpinner
#NAME: widget
#PARENT: Gtk.Widget.init_template.none
#COMMENT: a #GtkWidget
#NAME: first_prop_name
#PARENT: Gtk.Container.add_with_properties.none
#COMMENT: the name of the first child property to set
#NAME: get_active_text
#PARENT: Gtk.ComboBoxText.get_active_text
#COMMENT: a newly allocated string containing the
    currently active text. Must be freed with g_free().
#NAME: visible_only
#PARENT: Gtk.TextSearchFlags
#COMMENT: Search only visible data. A search match may
have invisible text interspersed.
#NAME: get_text_orientation
#PARENT: Gtk.ToolItem
#COMMENT: Returns the text orientation used for @tool_item. Custom subclasses of
#GtkToolItem should call this function to find out how text should
be orientated.
#NAME: get_child_detached
#PARENT: Gtk.HandleBox
#COMMENT: Whether the handlebox’s child is currently detached.
#NAME: style-updated
#PARENT: Gtk.Widget
#COMMENT: The ::style-updated signal is emitted when the #GtkStyleContext
of a widget is changed. Note that style-modifying functions like
gtk_widget_override_color() also cause this signal to be emitted.
#NAME: response_id
#PARENT: Gtk.Dialog.get_widget_for_response.Widget
#COMMENT: the response ID used by the @dialog widget
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.set_placement.none
#COMMENT: a #GtkScrolledWindow
#NAME: target
#PARENT: Gtk.TargetList.find.gboolean
#COMMENT: an interned atom representing the target to search for
#NAME: position
#PARENT: Gtk.HandleBox.set_handle_position.none
#COMMENT: the side of the handlebox where the handle should be drawn.
#NAME: logical_positions
#PARENT: Gtk.MovementStep
#COMMENT: Move forward or back by graphemes
#NAME: cell_layout
#PARENT: Gtk.CellLayout.clear_attributes.none
#COMMENT: a #GtkCellLayout
#NAME: set_collate
#PARENT: Gtk.PrintSettings
#COMMENT: Sets the value of %GTK_PRINT_SETTINGS_COLLATE.
#NAME: previous-match
#PARENT: Gtk.SearchEntry
#COMMENT: The ::previous-match signal is a [keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates a move to the previous match
for the current search string.

Applications should connect to it, to implement moving between
matches.

The default bindings for this signal is Ctrl-Shift-g.
#NAME: chooser
#PARENT: Gtk.FileChooser.get_current_folder_uri.utf8
#COMMENT: a #GtkFileChooser
#NAME: get_template_child
#PARENT: Gtk.Widget
#COMMENT: Fetch an object build from the template XML for @widget_type in this @widget instance.

This will only report children which were previously declared with
gtk_widget_class_bind_template_child_full() or one of its
variants.

This function is only meant to be called for code which is private to the @widget_type which
declared the child and is meant for language bindings which cannot easily make use
of the GObject structure offsets.
#NAME: sequence
#PARENT: Gtk.Gesture.get_sequence_state.EventSequenceState
#COMMENT: a #GdkEventSequence
#NAME: EntryClass
#PARENT: Gtk
#COMMENT: Class structure for #GtkEntry. All virtual functions have a default
implementation. Derived classes may set the virtual function pointers for the
signal handlers to %NULL, but must keep @get_text_area_size and
@get_frame_size non-%NULL; either use the default implementation, or provide
a custom one.
#NAME: settings
#PARENT: Gtk.PrintSettings.get_double_with_default.gdouble
#COMMENT: a #GtkPrintSettings
#NAME: icon_view
#PARENT: Gtk.IconView.set_row_spacing.none
#COMMENT: a #GtkIconView
#NAME: image
#PARENT: Gtk.Image.get_pixel_size.gint
#COMMENT: a #GtkImage
#NAME: toolbar
#PARENT: Gtk.Toolbar.unset_style.none
#COMMENT: a #GtkToolbar
#NAME: selection_data
#PARENT: Gtk.TreeDragDestIface.drag_data_received.drag_data_received.gboolean
#COMMENT: data to drop
#NAME: get_iter_at_child_anchor
#PARENT: Gtk.TextBuffer
#COMMENT: Obtains the location of @anchor within @buffer.
#NAME: tree_model
#PARENT: Gtk.TreeModel.get_flags.TreeModelFlags
#COMMENT: a #GtkTreeModel
#NAME: path
#PARENT: Gtk.StyleContext.set_path.none
#COMMENT: a #GtkWidgetPath
#NAME: get_default_col_spacing
#PARENT: Gtk.Table.get_default_col_spacing
#COMMENT: the default column spacing
#NAME: widget
#PARENT: Gtk.Widget.set_halign.none
#COMMENT: a #GtkWidget
#NAME: from_accel_closure
#PARENT: Gtk.AccelGroup
#COMMENT: Finds the #GtkAccelGroup to which @closure is connected;
see gtk_accel_group_connect().
#NAME: set_ellipsize
#PARENT: Gtk.Label
#COMMENT: Sets the mode used to ellipsize (add an ellipsis: "...") to the text
if there is not enough space to render the entire string.
#NAME: STOCK_ADD
#PARENT: Gtk
#COMMENT: The “Add” item and icon.
#NAME: set_hadjustment
#PARENT: Gtk.ScrolledWindow
#COMMENT: Sets the #GtkAdjustment for the horizontal scrollbar.
#NAME: gtk-recent-files-max-age
#PARENT: Gtk.Settings
#COMMENT: The maximum age, in days, of the items inside the recently used
resources list. Items older than this setting will be excised
from the list. If set to 0, the list will always be empty; if
set to -1, no item will be removed.
#NAME: get_icon_sensitive
#PARENT: Gtk.Entry
#COMMENT: Returns whether the icon appears sensitive or insensitive.
#NAME: homogeneous
#PARENT: Gtk.Grid.set_column_homogeneous.none
#COMMENT: %TRUE to make columns homogeneous
#NAME: lookup
#PARENT: Gtk.IconSize.lookup
#COMMENT: %TRUE if @size was a valid size
#NAME: reason
#PARENT: Gtk.Application.inhibit.guint
#COMMENT: a short, human-readable string that explains
    why these operations are inhibited
#NAME: margin
#PARENT: Gtk.Widget.set_margin_top.none
#COMMENT: the top margin
#NAME: set_use_underline
#PARENT: Gtk.Expander
#COMMENT: If true, an underline in the text of the expander label indicates
the next character should be used for the mnemonic accelerator key.
#NAME: sequence
#PARENT: Gtk.Gesture.end.none
#COMMENT: the #GdkEventSequence that made gesture recognition to finish
#NAME: bg_pixmap
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: new
#PARENT: Gtk.ButtonBox.new
#COMMENT: a new #GtkButtonBox.
#NAME: context
#PARENT: Gtk.PrintContext.get_width.gdouble
#COMMENT: a #GtkPrintContext
#NAME: get_icon_size
#PARENT: Gtk.ToolPalette.get_icon_size
#COMMENT: the #GtkIconSize of icons in the tool palette
#NAME: name
#PARENT: Gtk.IconSize.from_name.gint
#COMMENT: the name to look up.
#NAME: new
#PARENT: Gtk.Adjustment.new
#COMMENT: a new #GtkAdjustment.
#NAME: new_with_model
#PARENT: Gtk.ComboBox.new_with_model
#COMMENT: A new #GtkComboBox.
#NAME: list_cell_properties
#PARENT: Gtk.CellAreaClass
#COMMENT: Returns all cell properties of a cell area class.
#NAME: pixbuf
#PARENT: Gtk.TextBufferClass.insert_pixbuf.insert_pixbuf.none
#COMMENT: a #GdkPixbuf
#NAME: set_sequence_state
#PARENT: Gtk.Gesture.set_sequence_state
#COMMENT: %TRUE if @sequence is handled by @gesture,
         and the state is changed successfully
#NAME: popover
#PARENT: Gtk.Popover.get_relative_to.Widget
#COMMENT: a #GtkPopover
#NAME: mode
#PARENT: Gtk.ProgressBar.set_ellipsize.none
#COMMENT: a #PangoEllipsizeMode
#NAME: new
#PARENT: Gtk.Border.new
#COMMENT: a newly allocated #GtkBorder-struct. Free with gtk_border_free()
#NAME: primary-icon-tooltip-markup
#PARENT: Gtk.Entry
#COMMENT: The contents of the tooltip on the primary icon, which is marked up
with the [Pango text markup language][PangoMarkupFormat].

Also see gtk_entry_set_icon_tooltip_markup().
#NAME: dialog
#PARENT: Gtk.Dialog.run.gint
#COMMENT: a #GtkDialog
#NAME: is_selected
#PARENT: Gtk.FlowBoxChild
#COMMENT: Returns whether the @child is currently selected in its
#GtkFlowBox container.
#NAME: new_from_string
#PARENT: Gtk.Builder
#COMMENT: Builds the user interface described by @string (in the
[GtkBuilder UI definition][BUILDER-UI] format).

If @string is %NULL-terminated, then @length should be -1.
If @length is not -1, then it is the length of @string.

If there is an error parsing @string then the program will be
aborted. You should not attempt to parse user interface description
from untrusted sources.
#NAME: reserve
#PARENT: Gtk.MenuItem.set_reserve_indicator.none
#COMMENT: the new value
#NAME: CellLayout
#PARENT: Gtk
#COMMENT: #GtkCellLayout is an interface to be implemented by all objects which
want to provide a #GtkTreeViewColumn like API for packing cells,
setting attributes and data funcs.

One of the notable features provided by implementations of
GtkCellLayout are attributes. Attributes let you set the properties
in flexible ways. They can just be set to constant values like regular
properties. But they can also be mapped to a column of the underlying
tree model with gtk_cell_layout_set_attributes(), which means that the value
of the attribute can change from cell to cell as they are rendered by
the cell renderer. Finally, it is possible to specify a function with
gtk_cell_layout_set_cell_data_func() that is called to determine the
value of the attribute for each cell that is rendered.

# GtkCellLayouts as GtkBuildable

Implementations of GtkCellLayout which also implement the GtkBuildable
interface (#GtkCellView, #GtkIconView, #GtkComboBox,
#GtkEntryCompletion, #GtkTreeViewColumn) accept GtkCellRenderer objects
as <child> elements in UI definitions. They support a custom <attributes>
element for their children, which can contain multiple <attribute>
elements. Each <attribute> element has a name attribute which specifies
a property of the cell renderer; the content of the element is the
attribute value.

This is an example of a UI definition fragment specifying attributes:
|[
<object class="GtkCellView">
  <child>
    <object class="GtkCellRendererText"/>
    <attributes>
      <attribute name="text">0</attribute>
    </attributes>
  </child>"
</object>
]|

Furthermore for implementations of GtkCellLayout that use a #GtkCellArea
to lay out cells (all GtkCellLayouts in GTK+ use a GtkCellArea)
[cell properties][cell-properties] can also be defined in the format by
specifying the custom <cell-packing> attribute which can contain multiple
<property> elements defined in the normal way.

Here is a UI definition fragment specifying cell properties:

|[
<object class="GtkTreeViewColumn">
  <child>
    <object class="GtkCellRendererText"/>
    <cell-packing>
      <property name="align">True</property>
      <property name="expand">False</property>
    </cell-packing>
  </child>"
</object>
]|

# Subclassing GtkCellLayout implementations

When subclassing a widget that implements #GtkCellLayout like
#GtkIconView or #GtkComboBox, there are some considerations related
to the fact that these widgets internally use a #GtkCellArea.
The cell area is exposed as a construct-only property by these
widgets. This means that it is possible to e.g. do

|[<!-- language="C" -->
combo = g_object_new (GTK_TYPE_COMBO_BOX, "cell-area", my_cell_area, NULL);
]|

to use a custom cell area with a combo box. But construct properties
are only initialized after instance init()
functions have run, which means that using functions which rely on
the existence of the cell area in your subclass’ init() function will
cause the default cell area to be instantiated. In this case, a provided
construct property value will be ignored (with a warning, to alert
you to the problem).

|[<!-- language="C" -->
static void
my_combo_box_init (MyComboBox *b)
{
  GtkCellRenderer *cell;

  cell = gtk_cell_renderer_pixbuf_new ();
  // The following call causes the default cell area for combo boxes,
  // a GtkCellAreaBox, to be instantiated
  gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (b), cell, FALSE);
  ...
}

GtkWidget *
my_combo_box_new (GtkCellArea *area)
{
  // This call is going to cause a warning about area being ignored
  return g_object_new (MY_TYPE_COMBO_BOX, "cell-area", area, NULL);
}
]|

If supporting alternative cell areas with your derived widget is
not important, then this does not have to concern you. If you want
to support alternative cell areas, you can do so by moving the
problematic calls out of init() and into a constructor()
for your class.
#NAME: 
#PARENT: Gtk.Container.child_get.none...
#COMMENT: return location for the first property, followed
    optionally by more name/return location pairs, followed by %NULL
#NAME: column
#PARENT: Gtk.TreeView.remove_column.gint
#COMMENT: The #GtkTreeViewColumn to remove.
#NAME: entry
#PARENT: Gtk.Entry.get_text.utf8
#COMMENT: a #GtkEntry
#NAME: get_index
#PARENT: Gtk.ListBoxRow
#COMMENT: Gets the current index of the @row in its #GtkListBox container.
#NAME: event
#PARENT: Gtk.Widget.property-notify-event.gboolean
#COMMENT: the #GdkEventProperty which triggered
  this signal.
#NAME: display_lines
#PARENT: Gtk.DeleteType
#COMMENT: Delete display-lines. Display-lines
  refers to the visible lines, with respect to to the current line
  breaks. As opposed to paragraphs, which are defined by line
  breaks in the input.
#NAME: width
#PARENT: Gtk.ScrolledWindow.set_min_content_width.none
#COMMENT: the minimal content width
#NAME: get_widget_for_response
#PARENT: Gtk.Dialog
#COMMENT: Gets the widget button that uses the given response ID in the action area
of a dialog.
#NAME: focus_cell
#PARENT: Gtk.TreeView.set_cursor_on_cell.none
#COMMENT: A #GtkCellRenderer, or %NULL
#NAME: get_application
#PARENT: Gtk.Builder
#COMMENT: Gets the #GtkApplication associated with the builder.

The #GtkApplication is used for creating action proxies as requested
from XML that the builder is loading.

By default, the builder uses the default application: the one from
g_application_get_default(). If you want to use another application
for constructing proxies, use gtk_builder_set_application().
#NAME: width
#PARENT: Gtk.CellAreaClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: the width for which to check the height of this area
#NAME: get_show_icons
#PARENT: Gtk.RecentChooser
#COMMENT: Retrieves whether @chooser should show an icon near the resource.
#NAME: get_draw_value
#PARENT: Gtk.Scale
#COMMENT: Returns whether the current value is displayed as a string
next to the slider.
#NAME: StyleProvider
#PARENT: Gtk
#COMMENT: GtkStyleProvider is an interface used to provide style information to a #GtkStyleContext.
See gtk_style_context_add_provider() and gtk_style_context_add_provider_for_screen().
#NAME: pspec
#PARENT: Gtk.WidgetClass.install_style_property_parser.none
#COMMENT: the #GParamSpec for the style property
#NAME: ellipsize
#PARENT: Gtk.CellRendererText
#COMMENT: Specifies the preferred place to ellipsize the string, if the cell renderer
does not have enough room to display the entire string. Setting it to
%PANGO_ELLIPSIZE_NONE turns off ellipsizing. See the wrap-width property
for another way of making the text fit into a given width.
#NAME: handler_name
#PARENT: Gtk.BuilderConnectFunc.none
#COMMENT: name of the handler
#NAME: duplicate_id
#PARENT: Gtk.BuilderError
#COMMENT: An object id occurred twice.
#NAME: set_auto_render
#PARENT: Gtk.GLArea
#COMMENT: If @auto_render is %TRUE the #GtkGLArea::render signal will be
emitted every time the widget draws. This is the default and is
useful if drawing the widget is faster.

If @auto_render is %FALSE the data from previous rendering is kept
around and will be used for drawing the widget the next time,
unless the window is resized. In order to force a rendering
gtk_gl_area_queue_render() must be called. This mode is useful when
the scene changes seldomly, but takes a long time to redraw.
#NAME: wmclass_name
#PARENT: Gtk.Window.set_wmclass.none
#COMMENT: window name hint
#NAME: klass
#PARENT: Gtk.WidgetClass.install_style_property_parser.none
#COMMENT: a #GtkWidgetClass
#NAME: widget
#PARENT: Gtk.Widget.list_accel_closures.GObject.Closure
#COMMENT: widget to list accelerator closures for
#NAME: context
#PARENT: Gtk.Widget.drag-leave.none
#COMMENT: the drag context
#NAME: widget_class
#PARENT: Gtk.WidgetClass.bind_template_child_full.none
#COMMENT: A #GtkWidgetClass
#NAME: get_active
#PARENT: Gtk.CheckMenuItem
#COMMENT: Returns whether the check menu item is active. See
gtk_check_menu_item_set_active ().
#NAME: iter
#PARENT: Gtk.TreeView.row-collapsed.none
#COMMENT: the tree iter of the collapsed row
#NAME: viewport
#PARENT: Gtk.Viewport.get_shadow_type.ShadowType
#COMMENT: a #GtkViewport
#NAME: button
#PARENT: Gtk.Button.set_always_show_image.none
#COMMENT: a #GtkButton
#NAME: key_file
#PARENT: Gtk.PageSetup.to_key_file.none
#COMMENT: the #GKeyFile to save the page setup to
#NAME: types
#PARENT: Gtk.UIManager.get_toplevels.Widget
#COMMENT: specifies the types of toplevel widgets to include. Allowed
  types are #GTK_UI_MANAGER_MENUBAR, #GTK_UI_MANAGER_TOOLBAR and
  #GTK_UI_MANAGER_POPUP.
#NAME: new_for_display
#PARENT: Gtk.Plug
#COMMENT: Create a new plug widget inside the #GtkSocket identified by socket_id.
#NAME: STYLE_PROPERTY_BORDER_WIDTH
#PARENT: Gtk
#COMMENT: A property holding the rendered element’s border width in pixels as
a #GtkBorder. The border is the intermediary spacing property of the
padding/border/margin series.

gtk_render_frame() uses this property to find out the frame line width,
so #GtkWidgets rendering frames may need to add up this padding when
requesting size
#NAME: TreeIterCompareFunc
#PARENT: Gtk
#COMMENT: A GtkTreeIterCompareFunc should return a negative integer, zero, or a positive
integer if @a sorts before @b, @a sorts with @b, or @a sorts after @b
respectively. If two iters compare as equal, their order in the sorted model
is undefined. In order to ensure that the #GtkTreeSortable behaves as
expected, the GtkTreeIterCompareFunc must define a partial order on
the model, i.e. it must be reflexive, antisymmetric and transitive.

For example, if @model is a product catalogue, then a compare function
for the “price” column could be one which returns
`price_of(@a) - price_of(@b)`.
#NAME: get_binary_age
#PARENT: Gtk.get_binary_age
#COMMENT: the binary age of the GTK+ library
#NAME: new_with_label
#PARENT: Gtk.ToggleButton.new_with_label
#COMMENT: a new toggle button.
#NAME: current_x
#PARENT: Gtk.Widget.drag_check_threshold.gboolean
#COMMENT: current X coordinate
#NAME: new_with_buttons
#PARENT: Gtk.Dialog.new_with_buttons
#COMMENT: a new #GtkDialog
#NAME: unselect_row
#PARENT: Gtk.ListBox
#COMMENT: Unselects a single row of @box, if the selection mode allows it.
#NAME: deselect
#PARENT: Gtk.MenuShell
#COMMENT: Deselects the currently selected item from the menu shell,
if any.
#NAME: iter_next
#PARENT: Gtk.TreeModel.iter_next
#COMMENT: %TRUE if @iter has been changed to the next node
#NAME: n_columns
#PARENT: Gtk.TreeModelFilter.set_modify_func.none
#COMMENT: The number of columns in the filter model.
#NAME: current_y
#PARENT: Gtk.Widget.drag_check_threshold.gboolean
#COMMENT: current Y coordinate
#NAME: Paned
#PARENT: Gtk
#COMMENT: #GtkPaned has two panes, arranged either
horizontally or vertically. The division between
the two panes is adjustable by the user by dragging
a handle.

Child widgets are
added to the panes of the widget with gtk_paned_pack1() and
gtk_paned_pack2(). The division between the two children is set by default
from the size requests of the children, but it can be adjusted by the
user.

A paned widget draws a separator between the two child widgets and a
small handle that the user can drag to adjust the division. It does not
draw any relief around the children or around the separator. (The space
in which the separator is called the gutter.) Often, it is useful to put
each child inside a #GtkFrame with the shadow type set to %GTK_SHADOW_IN
so that the gutter appears as a ridge. No separator is drawn if one of
the children is missing.

Each child has two options that can be set, @resize and @shrink. If
@resize is true, then when the #GtkPaned is resized, that child will
expand or shrink along with the paned widget. If @shrink is true, then
that child can be made smaller than its requisition by the user.
Setting @shrink to %FALSE allows the application to set a minimum size.
If @resize is false for both children, then this is treated as if
@resize is true for both children.

The application can set the position of the slider as if it were set
by the user, by calling gtk_paned_set_position().

## Creating a paned widget with minimum sizes.

|[<!-- language="C" -->
GtkWidget *hpaned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);
GtkWidget *frame1 = gtk_frame_new (NULL);
GtkWidget *frame2 = gtk_frame_new (NULL);
gtk_frame_set_shadow_type (GTK_FRAME (frame1), GTK_SHADOW_IN);
gtk_frame_set_shadow_type (GTK_FRAME (frame2), GTK_SHADOW_IN);

gtk_widget_set_size_request (hpaned, 200, -1);

gtk_paned_pack1 (GTK_PANED (hpaned), frame1, TRUE, FALSE);
gtk_widget_set_size_request (frame1, 50, -1);

gtk_paned_pack2 (GTK_PANED (hpaned), frame2, FALSE, FALSE);
gtk_widget_set_size_request (frame2, 50, -1);
]|
#NAME: position
#PARENT: Gtk.Popover
#COMMENT: Sets the preferred position of the popover.
#NAME: info
#PARENT: Gtk.RecentInfo.create_app_info.Gio.AppInfo
#COMMENT: a #GtkRecentInfo
#NAME: iter
#PARENT: Gtk.TreeModelIface.iter_children.iter_children.gboolean
#COMMENT: the new #GtkTreeIter-struct to be set to the child
#NAME: add_from_resource
#PARENT: Gtk.Builder
#COMMENT: Parses a resource file containing a [GtkBuilder UI definition][BUILDER-UI]
and merges it with the current contents of @builder.

Most users will probably want to use gtk_builder_new_from_resource().

If an error occurs, 0 will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR, #G_MARKUP_ERROR or #G_RESOURCE_ERROR
domain.

It’s not really reasonable to attempt to handle failures of this
call.  The only reasonable thing to do when an error is detected is
to call g_error().
#NAME: child
#PARENT: Gtk.Box.pack_end.none
#COMMENT: the #GtkWidget to be added to @box
#NAME: new
#PARENT: Gtk.Assistant
#COMMENT: Creates a new #GtkAssistant.
#NAME: set_parent_window
#PARENT: Gtk.Widget
#COMMENT: Sets a non default parent window for @widget.

For #GtkWindow classes, setting a @parent_window effects whether
the window is a toplevel window or can be embedded into other
widgets.

For #GtkWindow classes, this needs to be called before the
window is realized.
#NAME: visible
#PARENT: Gtk.Action
#COMMENT: Whether the action is visible.
#NAME: gpl_2_0
#PARENT: Gtk.License
#COMMENT: The GNU General Public License, version 2.0 or later
#NAME: chooser
#PARENT: Gtk.ColorChooser.set_rgba.none
#COMMENT: a #GtkColorChooser
#NAME: STOCK_INDENT
#PARENT: Gtk
#COMMENT: The “Indent” item and icon. The icon has an RTL variant.
#NAME: get_mode
#PARENT: Gtk.SizeGroup
#COMMENT: Gets the current mode of the size group. See gtk_size_group_set_mode().
#NAME: get_child_at
#PARENT: Gtk.Grid
#COMMENT: Gets the child of @grid whose area covers the grid
cell whose upper left corner is at @left, @top.
#NAME: get_has_stencil_buffer
#PARENT: Gtk.GLArea
#COMMENT: Returns whether the area has a stencil buffer.
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.set_capture_button_press.none
#COMMENT: a #GtkScrolledWindow
#NAME: widget
#PARENT: Gtk.Widget.has_default.gboolean
#COMMENT: a #GtkWidget
#NAME: set_uri
#PARENT: Gtk.FileChooser.set_uri
#COMMENT: Not useful.
#NAME: get_name
#PARENT: Gtk.RecentFilter.get_name
#COMMENT: the name of the filter, or %NULL.  The returned string
  is owned by the filter object and should not be freed.
#NAME: uri
#PARENT: Gtk.RecentManager.remove_item.gboolean
#COMMENT: the URI of the item you wish to remove
#NAME: adjustment
#PARENT: Gtk.ScaleButton.set_adjustment.none
#COMMENT: a #GtkAdjustment
#NAME: get_right_margin
#PARENT: Gtk.TextView.get_right_margin
#COMMENT: right margin in pixels
#NAME: set_vexpand_set
#PARENT: Gtk.Widget
#COMMENT: Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
be used.

See gtk_widget_set_hexpand_set() for more detail.
#NAME: value
#PARENT: Gtk.CellArea.cell_get_property.none
#COMMENT: a location to return the value
#NAME: new
#PARENT: Gtk.IconView
#COMMENT: Creates a new #GtkIconView widget
#NAME: get_item_column
#PARENT: Gtk.IconView
#COMMENT: Gets the column in which the item @path is currently
displayed. Column numbers start at 0.
#NAME: invalidate
#PARENT: Gtk.StyleContext
#COMMENT: Invalidates @context style information, so it will be reconstructed
again. It is useful if you modify the @context and need the new
information immediately.
#NAME: accel_key
#PARENT: Gtk.Widget.remove_accelerator.gboolean
#COMMENT: GDK keyval of the accelerator
#NAME: x
#PARENT: Gtk.paint_spinner.none
#COMMENT: the x origin of the rectangle in which to draw the spinner
#NAME: get_hadjustment
#PARENT: Gtk.Layout.get_hadjustment
#COMMENT: horizontal scroll adjustment
#NAME: paginate
#PARENT: Gtk.PrintOperation.paginate
#COMMENT: %TRUE if pagination is complete
#NAME: color
#PARENT: Gtk.Widget.override_symbolic_color.none
#COMMENT: the color to assign (does not need
    to be allocated), or %NULL to undo the effect of previous
    calls to gtk_widget_override_symbolic_color()
#NAME: y
#PARENT: Gtk.paint_spinner.none
#COMMENT: the y origin of the rectangle in which to draw the spinner
#NAME: set_pulse_step
#PARENT: Gtk.ProgressBar
#COMMENT: Sets the fraction of total progress bar length to move the
bouncing block for each call to gtk_progress_bar_pulse().
#NAME: get_data_with_length
#PARENT: Gtk.SelectionData
#COMMENT: Retrieves the raw data of the selection along with its length.
#NAME: get_storage_type
#PARENT: Gtk.StatusIcon.get_storage_type
#COMMENT: the image representation being used
#NAME: count
#PARENT: Gtk.FlowBox.move-cursor.none
#COMMENT: the number of @step units to move
#NAME: gicon
#PARENT: Gtk.Action
#COMMENT: The #GIcon displayed in the #GtkAction.

Note that the stock icon is preferred, if the #GtkAction:stock-id
property holds the id of an existing stock icon.

This is an appearance property and thus only applies if
#GtkActivatable:use-action-appearance is %TRUE.
#NAME: newv
#PARENT: Gtk.ListStore
#COMMENT: Non-vararg creation function.  Used primarily by language bindings.
#NAME: highest
#PARENT: Gtk.PathPriorityType
#COMMENT: Deprecated
#NAME: settings
#PARENT: Gtk.PrintSettings.get_resolution_y.gint
#COMMENT: a #GtkPrintSettings
#NAME: position
#PARENT: Gtk.ListStore.move_before.none
#COMMENT: A #GtkTreeIter, or %NULL.
#NAME: name
#PARENT: Gtk.LevelBar.add_offset_value.none
#COMMENT: the name of the new offset
#NAME: default_page_setup
#PARENT: Gtk.PrintOperation.set_default_page_setup.none
#COMMENT: a #GtkPageSetup, or %NULL
#NAME: property_value
#PARENT: Gtk.RcProperty.parse_enum.gboolean
#COMMENT: a #GValue which must hold enum values.
#NAME: context
#PARENT: Gtk.CellArea.event.gint
#COMMENT: the #GtkCellAreaContext for this row of data.
#NAME: icon_info
#PARENT: Gtk.IconInfo.get_builtin_pixbuf.GdkPixbuf.Pixbuf
#COMMENT: a #GtkIconInfo
#NAME: action
#PARENT: Gtk.Action.get_visible_vertical.gboolean
#COMMENT: a #GtkAction
#NAME: label
#PARENT: Gtk.Label.get_width_chars.gint
#COMMENT: a #GtkLabel
#NAME: tree_store
#PARENT: Gtk.TreeStore.move_after.none
#COMMENT: A #GtkTreeStore.
#NAME: path
#PARENT: Gtk.TreeView.row-expanded.none
#COMMENT: a tree path that points to the row
#NAME: cell_state
#PARENT: Gtk.CellRenderer.get_state.StateFlags
#COMMENT: cell renderer state
#NAME: get_visible_rect
#PARENT: Gtk.TextView
#COMMENT: Fills @visible_rect with the currently-visible
region of the buffer, in buffer coordinates. Convert to window coordinates
with gtk_text_view_buffer_to_window_coords().
#NAME: first_prop_name
#PARENT: Gtk.CellArea.cell_set.none
#COMMENT: the name of the first cell property to set
#NAME: RadioButton
#PARENT: Gtk
#COMMENT: A single radio button performs the same basic function as a #GtkCheckButton,
as its position in the object hierarchy reflects. It is only when multiple
radio buttons are grouped together that they become a different user
interface component in their own right.

Every radio button is a member of some group of radio buttons. When one is
selected, all other radio buttons in the same group are deselected. A
#GtkRadioButton is one way of giving the user a choice from many options.

Radio button widgets are created with gtk_radio_button_new(), passing %NULL
as the argument if this is the first radio button in a group. In subsequent
calls, the group you wish to add this button to should be passed as an
argument. Optionally, gtk_radio_button_new_with_label() can be used if you
want a text label on the radio button.

Alternatively, when adding widgets to an existing group of radio buttons,
use gtk_radio_button_new_from_widget() with a #GtkRadioButton that already
has a group assigned to it. The convenience function
gtk_radio_button_new_with_label_from_widget() is also provided.

To retrieve the group a #GtkRadioButton is assigned to, use
gtk_radio_button_get_group().

To remove a #GtkRadioButton from one group and make it part of a new one,
use gtk_radio_button_set_group().

The group list does not need to be freed, as each #GtkRadioButton will remove
itself and its list item when it is destroyed.

## How to create a group of two radio buttons.

|[<!-- language="C" -->
void create_radio_buttons (void) {

   GtkWidget *window, *radio1, *radio2, *box, *entry;
   window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
   box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 2);
   gtk_box_set_homogeneous (GTK_BOX (box), TRUE);

   // Create a radio button with a GtkEntry widget
   radio1 = gtk_radio_button_new (NULL);
   entry = gtk_entry_new ();
   gtk_container_add (GTK_CONTAINER (radio1), entry);


   // Create a radio button with a label
   radio2 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (radio1),
                                                         "I’m the second radio button.");

   // Pack them into a box, then show all the widgets
   gtk_box_pack_start (GTK_BOX (box), radio1, TRUE, TRUE, 2);
   gtk_box_pack_start (GTK_BOX (box), radio2, TRUE, TRUE, 2);
   gtk_container_add (GTK_CONTAINER (window), box);
   gtk_widget_show_all (window);
   return;
}
]|

When an unselected button in the group is clicked the clicked button
receives the #GtkToggleButton::toggled signal, as does the previously
selected button.
Inside the #GtkToggleButton::toggled handler, gtk_toggle_button_get_active()
can be used to determine if the button has been selected or deselected.
#NAME: append_page
#PARENT: Gtk.Assistant
#COMMENT: Appends a page to the @assistant.
#NAME: Invisible
#PARENT: Gtk
#COMMENT: The #GtkInvisible widget is used internally in GTK+, and is probably not
very useful for application developers.

It is used for reliable pointer grabs and selection handling in the code
for drag-and-drop.
#NAME: widget
#PARENT: Gtk.SizeGroup.remove_widget.none
#COMMENT: the #GtkWidget to remove
#NAME: pixbuf
#PARENT: Gtk.Tooltip.set_icon.none
#COMMENT: a #GdkPixbuf, or %NULL
#NAME: window
#PARENT: Gtk.Window.activate_focus.gboolean
#COMMENT: a #GtkWindow
#NAME: set_job_name
#PARENT: Gtk.PrintOperation
#COMMENT: Sets the name of the print job. The name is used to identify
the job (e.g. in monitoring applications like eggcups).

If you don’t set a job name, GTK+ picks a default one by
numbering successive print jobs.
#NAME: orientation
#PARENT: Gtk.Scrollbar.new.Widget
#COMMENT: the scrollbar’s orientation.
#NAME: iter
#PARENT: Gtk.TextIter.starts_word.gboolean
#COMMENT: a #GtkTextIter
#NAME: get_drop_item
#PARENT: Gtk.ToolItemGroup
#COMMENT: Gets the tool item at position (x, y).
#NAME: margin-top
#PARENT: Gtk.Widget
#COMMENT: Margin on top side of widget.

This property adds margin outside of the widget's normal size
request, the margin will be added in addition to the size from
gtk_widget_set_size_request() for example.
#NAME: set_scale
#PARENT: Gtk.StyleContext
#COMMENT: Sets the scale to use when getting image assets for the style .
#NAME: get_col_spacing
#PARENT: Gtk.Table
#COMMENT: Gets the amount of space between column @col, and
column @col + 1. See gtk_table_set_col_spacing().
#NAME: stock_id
#PARENT: Gtk.ToggleToolButton.new_from_stock.ToolItem
#COMMENT: the name of the stock item
#NAME: get_image_position
#PARENT: Gtk.Button
#COMMENT: Gets the position of the image relative to the text
inside the button.
#NAME: start_pos
#PARENT: Gtk.Editable.delete_text.none
#COMMENT: start position
#NAME: iter
#PARENT: Gtk.TreeStore.set_valuesv.none
#COMMENT: A valid #GtkTreeIter for the row being modified
#NAME: get_ui
#PARENT: Gtk.UIManager
#COMMENT: Creates a [UI definition][XML-UI] of the merged UI.
#NAME: new
#PARENT: Gtk.AboutDialog
#COMMENT: Creates a new #GtkAboutDialog.
#NAME: ref
#PARENT: Gtk.Gradient.ref
#COMMENT: The same @gradient
#NAME: widget
#PARENT: Gtk.Widget.drag_source_set_icon_stock.none
#COMMENT: a #GtkWidget
#NAME: widget
#PARENT: Gtk.Widget.get_parent.Widget
#COMMENT: a #GtkWidget
#NAME: set_popover
#PARENT: Gtk.MenuButton
#COMMENT: Sets the #GtkPopover that will be popped up when the button is
clicked, or %NULL to disable the button. If #GtkMenuButton:menu-model
or #GtkMenuButton:popup are set, they will be set to %NULL.
#NAME: color
#PARENT: Gtk.SymbolicColor.new_alpha.SymbolicColor
#COMMENT: another #GtkSymbolicColor
#NAME: widget_class
#PARENT: Gtk.PathType
#COMMENT: Deprecated
#NAME: foreach
#PARENT: Gtk.TreeModel
#COMMENT: Calls func on each node in model in a depth-first fashion.

If @func returns %TRUE, then the tree ceases to be walked,
and gtk_tree_model_foreach() returns.
#NAME: widget
#PARENT: Gtk.CellRenderer.activate.gboolean
#COMMENT: widget that received the event
#NAME: get_face
#PARENT: Gtk.FontSelection.get_face
#COMMENT: A #PangoFontFace representing the
    selected font group details. The returned object is owned by
    @fontsel and must not be modified or freed.
#NAME: get_line_yrange
#PARENT: Gtk.TextView
#COMMENT: Gets the y coordinate of the top of the line containing @iter,
and the height of the line. The coordinate is a buffer coordinate;
convert to window coordinates with gtk_text_view_buffer_to_window_coords().
#NAME: adjustment
#PARENT: Gtk.Layout.set_hadjustment.none
#COMMENT: new scroll adjustment
#NAME: prepend_page
#PARENT: Gtk.Notebook.prepend_page
#COMMENT: the index (starting from 0) of the prepended
    page in the notebook, or -1 if function fails
#NAME: hscroll-policy
#PARENT: Gtk.Scrollable
#COMMENT: Determines whether horizontal scrolling should start once the scrollable
widget is allocated less than its minimum width or less than its natural width.
#NAME: child
#PARENT: Gtk.ScrolledWindow.add_with_viewport.none
#COMMENT: the widget you want to scroll
#NAME: tool_item
#PARENT: Gtk.ToolItem.set_proxy_menu_item.none
#COMMENT: a #GtkToolItem
#NAME: iter
#PARENT: Gtk.TreeModelIface.ref_node.ref_node.none
#COMMENT: the #GtkTreeIter-struct
#NAME: use_align
#PARENT: Gtk.TreeView.scroll_to_cell.none
#COMMENT: whether to use alignment arguments, or %FALSE.
#NAME: get_screen
#PARENT: Gtk.StyleContext.get_screen
#COMMENT: a #GdkScreen.
#NAME: height
#PARENT: Gtk.paint_spinner.none
#COMMENT: the height of the rectangle in which to draw the spinner
#NAME: shell
#PARENT: Gtk.ToolShellIface.rebuild_menu.rebuild_menu.none
#COMMENT: a #GtkToolShell
#NAME: new
#PARENT: Gtk.HeaderBar.new
#COMMENT: a new #GtkHeaderBar
#NAME: force_size
#PARENT: Gtk.IconLookupFlags
#COMMENT: Always get the icon scaled to the
  requested size. Since 2.14.
#NAME: gtk-tooltip-browse-mode-timeout
#PARENT: Gtk.Settings
#COMMENT: Amount of time, in milliseconds, after which the browse mode
will be disabled.

See #GtkSettings:gtk-tooltip-browse-timeout for more information
about browse mode.
#NAME: can_activate_accel
#PARENT: Gtk.Widget.can_activate_accel
#COMMENT: %TRUE if the accelerator can be activated.
#NAME: priority
#PARENT: Gtk.BindingSet.add_path.none
#COMMENT: binding priority
#NAME: menu_item
#PARENT: Gtk.MenuItem.set_accel_path.none
#COMMENT: a valid #GtkMenuItem
#NAME: STOCK_GO_BACK
#PARENT: Gtk
#COMMENT: The “Back” item and icon. The icon has an RTL variant.
#NAME: widget
#PARENT: Gtk.Table.attach_defaults.none
#COMMENT: The child widget to add.
#NAME: has_default_sort_func
#PARENT: Gtk.TreeSortable
#COMMENT: Returns %TRUE if the model has a default sort function. This is used
primarily by GtkTreeViewColumns in order to determine if a model can
go back to the default state, or not.
#NAME: send_expose
#PARENT: Gtk.Widget.send_expose
#COMMENT: return from the event signal emission (%TRUE if
              the event was handled)
#NAME: new_tab
#PARENT: Gtk.PlacesOpenFlags
#COMMENT: When passed to gtk_places_sidebar_set_open_flags(), this indicates
 that the application can open folders selected from the sidebar in new tabs.  This value
 will be passed to the #GtkPlacesSidebar::open-location signal when the user selects
 that a location be opened in a new tab instead of in the standard fashion.
#NAME: iter
#PARENT: Gtk.TextIter.forward_visible_word_ends.gboolean
#COMMENT: a #GtkTextIter
#NAME: tree_column
#PARENT: Gtk.TreeCellDataFunc.none
#COMMENT: A #GtkTreeViewColumn
#NAME: set_widget
#PARENT: Gtk.TreeViewColumn
#COMMENT: Sets the widget in the header to be @widget.  If widget is %NULL, then the
header button is set with a #GtkLabel set to the title of @tree_column.
#NAME: cr
#PARENT: Gtk.paint_flat_box.none
#COMMENT: a #cairo_t
#NAME: foreach
#PARENT: Gtk.Container
#COMMENT: Invokes @callback on each non-internal child of @container. See
gtk_container_forall() for details on what constitutes an
“internal” child.  Most applications should use
gtk_container_foreach(), rather than gtk_container_forall().
#NAME: horizontal_steps
#PARENT: Gtk.ScrollStep
#COMMENT: Scroll in horizontal steps.
#NAME: ensure_style
#PARENT: Gtk.Widget
#COMMENT: Ensures that @widget has a style (@widget->style).

Not a very useful function; most of the time, if you
want the style, the widget is realized, and realized
widgets are guaranteed to have a style already.
#NAME: destroy
#PARENT: Gtk.ListBox.set_header_func.none
#COMMENT: destroy notifier for @user_data
#NAME: get_popup
#PARENT: Gtk.MenuButton
#COMMENT: Returns the #GtkMenu that pops out of the button.
If the button does not use a #GtkMenu, this function
returns %NULL.
#NAME: custom_tag_start
#PARENT: Gtk.Buildable
#COMMENT: This is called for each unknown element under <child>.
#NAME: natural_height
#PARENT: Gtk.CellRendererClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: location for storing the preferred size, or %NULL
#NAME: fixed
#PARENT: Gtk.Fixed.put.none
#COMMENT: a #GtkFixed.
#NAME: new_from_surface
#PARENT: Gtk.Image
#COMMENT: Creates a new #GtkImage displaying @surface.
The #GtkImage does not assume a reference to the
surface; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.
#NAME: get_embedded
#PARENT: Gtk.Plug
#COMMENT: Determines whether the plug is embedded in a socket.
#NAME: list_mnemonic_labels
#PARENT: Gtk.Widget.list_mnemonic_labels
#COMMENT: the list of
 mnemonic labels; free this list
 with g_list_free() when you are done with it.
#NAME: action
#PARENT: Gtk.Action.get_always_show_image.gboolean
#COMMENT: a #GtkAction
#NAME: rc_property_parse_color
#PARENT: Gtk
#COMMENT: A #GtkRcPropertyParser for use with gtk_settings_install_property_parser()
or gtk_widget_class_install_style_property_parser() which parses a
color given either by its name or in the form
`{ red, green, blue }` where red, green and
blue are integers between 0 and 65535 or floating-point numbers
between 0 and 1.
#NAME: frame
#PARENT: Gtk.Frame.set_shadow_type.none
#COMMENT: a #GtkFrame
#NAME: stock_id
#PARENT: Gtk.ToggleAction.new.ToggleAction
#COMMENT: The stock icon to display in widgets representing
           the action, or %NULL
#NAME: get_spacing
#PARENT: Gtk.Expander
#COMMENT: Gets the value set by gtk_expander_set_spacing().
#NAME: screen
#PARENT: Gtk.Menu.set_screen.none
#COMMENT: a #GdkScreen, or %NULL if the screen should be
         determined by the widget the menu is attached to
#NAME: context
#PARENT: Gtk.StyleContext.set_junction_sides.none
#COMMENT: a #GtkStyleContext
#NAME: get_error
#PARENT: Gtk.GLArea.get_error
#COMMENT: the #GError or %NULL
#NAME: widget
#PARENT: Gtk.Callback.none
#COMMENT: the widget to operate on
#NAME: PRINT_SETTINGS_OUTPUT_DIR
#PARENT: Gtk
#COMMENT: The key used by the “Print to file” printer to store the
directory to which the output should be written.
#NAME: orig
#PARENT: Gtk.RcStyle.copy.RcStyle
#COMMENT: the style to copy
#NAME: set_custom_theme
#PARENT: Gtk.IconTheme
#COMMENT: Sets the name of the icon theme that the #GtkIconTheme object uses
overriding system configuration. This function cannot be called
on the icon theme objects returned from gtk_icon_theme_get_default()
and gtk_icon_theme_get_for_screen().
#NAME: get_current_sequence
#PARENT: Gtk.GestureSingle
#COMMENT: Returns the event sequence currently interacting with @gesture.
This is only meaningful if gtk_gesture_is_active() returns %TRUE.
#NAME: SeparatorMenuItem
#PARENT: Gtk
#COMMENT: The #GtkSeparatorMenuItem is a separator used to group
items within a menu. It displays a horizontal line with a shadow to
make it appear sunken into the interface.
#NAME: name
#PARENT: Gtk.CssProviderError
#COMMENT: Name error.
#NAME: expand
#PARENT: Gtk.CellAreaBox.pack_end.none
#COMMENT: whether @renderer should receive extra space when the area receives
more than its natural size
#NAME: self
#PARENT: Gtk.LevelBar.set_min_value.none
#COMMENT: a #GtkLevelBar
#NAME: statusbar
#PARENT: Gtk.Statusbar.remove.none
#COMMENT: a #GtkStatusbar
#NAME: set_reorderable
#PARENT: Gtk.TreeView
#COMMENT: This function is a convenience function to allow you to reorder
models that support the #GtkTreeDragSourceIface and the
#GtkTreeDragDestIface.  Both #GtkTreeStore and #GtkListStore support
these.  If @reorderable is %TRUE, then the user can reorder the
model by dragging and dropping rows. The developer can listen to
these changes by connecting to the model’s #GtkTreeModel::row-inserted
and #GtkTreeModel::row-deleted signals. The reordering is implemented
by setting up the tree view as a drag source and destination.
Therefore, drag and drop can not be used in a reorderable view for any
other purpose.

This function does not give you any degree of control over the order -- any
reordering is allowed.  If more control is needed, you should probably
handle drag and drop manually.
#NAME: root_x
#PARENT: Gtk.Window.begin_move_drag.none
#COMMENT: X position where the user clicked to initiate the drag, in root window coordinates
#NAME: set_focus_child
#PARENT: Gtk.Container
#COMMENT: Sets, or unsets if @child is %NULL, the focused child of @container.

This function emits the GtkContainer::set_focus_child signal of
@container. Implementations of #GtkContainer can override the
default behaviour by overriding the class closure of this signal.

This is function is mostly meant to be used by widgets. Applications can use
gtk_widget_grab_focus() to manually set the focus to a specific widget.
#NAME: cancellable
#PARENT: Gtk.IconInfo.load_symbolic_for_context_async.none
#COMMENT: optional #GCancellable object,
    %NULL to ignore
#NAME: scale
#PARENT: Gtk.IconTheme.choose_icon_for_scale.IconInfo
#COMMENT: desired scale
#NAME: row
#PARENT: Gtk.ListBox.unselect_row.none
#COMMENT: the row to unselected
#NAME: root_y
#PARENT: Gtk.Window.begin_move_drag.none
#COMMENT: Y position where the user clicked to initiate the drag
#NAME: source
#PARENT: Gtk.IconSource.copy.IconSource
#COMMENT: a #GtkIconSource
#NAME: set_skip_pager_hint
#PARENT: Gtk.Window
#COMMENT: Windows may set a hint asking the desktop environment not to display
the window in the pager. This function sets this hint.
(A "pager" is any desktop navigation tool such as a workspace
switcher that displays a thumbnail representation of the windows
on the screen.)
#NAME: new
#PARENT: Gtk.Assistant.new
#COMMENT: a newly created #GtkAssistant
#NAME: cell_layout
#PARENT: Gtk.CellLayoutIface.get_cells.get_cells.CellRenderer
#COMMENT: a #GtkCellLayout
#NAME: y
#PARENT: Gtk.ListBox.get_row_at_y.ListBoxRow
#COMMENT: position
#NAME: MAX_COMPOSE_LEN
#PARENT: Gtk
#COMMENT: The maximum length of sequences in compose tables.
#NAME: add_ui_from_file
#PARENT: Gtk.UIManager.add_ui_from_file
#COMMENT: The merge id for the merged UI. The merge id can be used
  to unmerge the UI with gtk_ui_manager_remove_ui(). If an error occurred,
  the return value is 0.
#NAME: context
#PARENT: Gtk.Widget.drag-data-received.none
#COMMENT: the drag context
#NAME: 
#PARENT: Gtk.FileChooserDialog.new.Widget...
#COMMENT: response ID for the first button, then additional (button, id) pairs, ending with %NULL
#NAME: cell
#PARENT: Gtk.CellLayout.add_attribute.none
#COMMENT: a #GtkCellRenderer
#NAME: step
#PARENT: Gtk.SpinButton.set_increments.none
#COMMENT: increment applied for a button 1 press.
#NAME: handle_box
#PARENT: Gtk.HandleBox.set_snap_edge.none
#COMMENT: a #GtkHandleBox
#NAME: get_label
#PARENT: Gtk.Frame
#COMMENT: If the frame’s label widget is a #GtkLabel, returns the
text in the label widget. (The frame will have a #GtkLabel
for the label widget if a non-%NULL argument was passed
to gtk_frame_new().)
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.set_hadjustment.none
#COMMENT: a #GtkScrolledWindow
#NAME: get_attach_points
#PARENT: Gtk.IconInfo
#COMMENT: This function is deprecated and always returns %FALSE.
#NAME: deserialize
#PARENT: Gtk.TextBuffer
#COMMENT: This function deserializes rich text in format @format and inserts
it at @iter.

@formats to be used must be registered using
gtk_text_buffer_register_deserialize_format() or
gtk_text_buffer_register_deserialize_tagset() beforehand.
#NAME: maximize
#PARENT: Gtk.Window
#COMMENT: Asks to maximize @window, so that it becomes full-screen. Note that
you shouldn’t assume the window is definitely maximized afterward,
because other entities (e.g. the user or
[window manager][gtk-X11-arch]) could unmaximize it
again, and not all window managers support maximization. But
normally the window will end up maximized. Just don’t write code
that crashes if not.

It’s permitted to call this function before showing a window,
in which case the window will be maximized when it appears onscreen
initially.

You can track maximization via the “window-state-event” signal
on #GtkWidget, or by listening to notifications on the
#GtkWindow:is-maximized property.
#NAME: about
#PARENT: Gtk.AboutDialog.get_documenters.utf8
#COMMENT: a #GtkAboutDialog
#NAME: get_font_name
#PARENT: Gtk.FontSelectionDialog
#COMMENT: Gets the currently-selected font name.

Note that this can be a different string than what you set with
gtk_font_selection_dialog_set_font_name(), as the font selection widget
may normalize font names and thus return a string with a different
structure. For example, “Helvetica Italic Bold 12” could be normalized
to “Helvetica Bold Italic 12”.  Use pango_font_description_equal()
if you want to compare two font descriptions.
#NAME: new
#PARENT: Gtk.CellRendererProgress
#COMMENT: Creates a new #GtkCellRendererProgress.
#NAME: increment
#PARENT: Gtk.SpinButton.spin.none
#COMMENT: step increment to apply in the specified direction
#NAME: visited
#PARENT: Gtk.LinkButton.set_visited.none
#COMMENT: the new “visited” state
#NAME: show_fill_level
#PARENT: Gtk.Range.set_show_fill_level.none
#COMMENT: Whether a fill level indicator graphics is shown.
#NAME: iter
#PARENT: Gtk.TreeModel.iter_nth_child.gboolean
#COMMENT: the #GtkTreeIter-struct to set to the nth child
#NAME: widget
#PARENT: Gtk.Widget.set_double_buffered.none
#COMMENT: a #GtkWidget
#NAME: title
#PARENT: Gtk.FontButton
#COMMENT: The title of the font chooser dialog.
#NAME: get_limit
#PARENT: Gtk.RecentChooser
#COMMENT: Gets the number of items returned by gtk_recent_chooser_get_items()
and gtk_recent_chooser_get_uris().
#NAME: get_nth_item
#PARENT: Gtk.Toolbar
#COMMENT: Returns the @n'th item on @toolbar, or %NULL if the
toolbar does not contain an @n'th item.
#NAME: n_chars
#PARENT: Gtk.Label.set_width_chars.none
#COMMENT: the new desired width, in characters.
#NAME: pixbuf
#PARENT: Gtk.ClipboardImageReceivedFunc.none
#COMMENT: the received image
#NAME: name
#PARENT: Gtk.BuildableIface.set_buildable_property.set_buildable_property.none
#COMMENT: name of property
#NAME: cancel
#PARENT: Gtk.Assistant
#COMMENT: The ::cancel signal is emitted when then the cancel button is clicked.
#NAME: destroy
#PARENT: Gtk.TreeSortable.set_sort_func.none
#COMMENT: Destroy notifier of @user_data, or %NULL
#NAME: content_type
#PARENT: Gtk.AppChooserDialog.new_for_content_type.Widget
#COMMENT: a content type string
#NAME: child
#PARENT: Gtk.Notebook.prepend_page_menu.gint
#COMMENT: the #GtkWidget to use as the contents of the page
#NAME: iter
#PARENT: Gtk.TreeModel.unref_node.none
#COMMENT: the #GtkTreeIter-struct
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.get_flags.get_flags.TreeModelFlags
#COMMENT: a #GtkTreeModel
#NAME: n_chars
#PARENT: Gtk.EntryBuffer.insert_text.guint
#COMMENT: the length of the text in characters, or -1
#NAME: tree_view
#PARENT: Gtk.TreeView.columns_autosize.none
#COMMENT: A #GtkTreeView.
#NAME: hsv
#PARENT: Gtk.HSV.set_color.none
#COMMENT: An HSV color selector
#NAME: select_region
#PARENT: Gtk.Editable
#COMMENT: Selects a region of text. The characters that are selected are
those characters at positions from @start_pos up to, but not
including @end_pos. If @end_pos is negative, then the
characters selected are those characters from @start_pos to
the end of the text.

Note that positions are specified in characters, not bytes.
#NAME: by_class
#PARENT: Gtk.BindingSet.by_class
#COMMENT: the binding set corresponding to
    @object_class
#NAME: get_label
#PARENT: Gtk.Button
#COMMENT: Fetches the text from the label of the button, as set by
gtk_button_set_label(). If the label text has not
been set the return value will be %NULL. This will be the
case if you create an empty button with gtk_button_new() to
use as a container.
#NAME: menu_button
#PARENT: Gtk.MenuButton.get_align_widget.Widget
#COMMENT: a #GtkMenuButton
#NAME: use_underline
#PARENT: Gtk.ToolButton.set_use_underline.none
#COMMENT: whether the button label has the form “_Open”
#NAME: path
#PARENT: Gtk.TreeView.expand_to_path.none
#COMMENT: path to a row.
#NAME: widget
#PARENT: Gtk.Widget.set_hexpand_set.none
#COMMENT: the widget
#NAME: backward_visible_lines
#PARENT: Gtk.TextIter
#COMMENT: Moves @count visible lines backward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn’t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves forward by 0 - @count lines.
#NAME: merge_id
#PARENT: Gtk.UIManager.remove_ui.none
#COMMENT: a merge id as returned by gtk_ui_manager_add_ui_from_string()
#NAME: binding_set_by_class
#PARENT: Gtk.binding_set_by_class
#COMMENT: the binding set corresponding to
    @object_class
#NAME: height
#PARENT: Gtk.render_frame.none
#COMMENT: rectangle height
#NAME: get_mode
#PARENT: Gtk.LevelBar.get_mode
#COMMENT: a #GtkLevelBarMode
#NAME: get_parent_shell
#PARENT: Gtk.MenuShell
#COMMENT: Gets the parent menu shell.

The parent menu shell of a submenu is the #GtkMenu or #GtkMenuBar
from which it was opened up.
#NAME: widget
#PARENT: Gtk.Widget.get_clipboard.Clipboard
#COMMENT: a #GtkWidget
#NAME: parent-set
#PARENT: Gtk.Widget
#COMMENT: The ::parent-set signal is emitted when a new parent
has been set on a widget.
#NAME: widget_class
#PARENT: Gtk.WidgetClass.bind_template_callback_full.none
#COMMENT: A #GtkWidgetClass
#NAME: context
#PARENT: Gtk.StyleContext.get_path.WidgetPath
#COMMENT: a #GtkStyleContext
#NAME: value
#PARENT: Gtk.StyleProviderIface.get_style_property.get_style_property.gboolean
#COMMENT: return location for the property value
#NAME: modify_base
#PARENT: Gtk.Widget
#COMMENT: Sets the base color for a widget in a particular state.
All other style values are left untouched. The base color
is the background color used along with the text color
(see gtk_widget_modify_text()) for widgets such as #GtkEntry
and #GtkTextView. See also gtk_widget_modify_style().

> Note that “no window” widgets (which have the %GTK_NO_WINDOW
> flag set) draw on their parent container’s window and thus may
> not draw any background themselves. This is the case for e.g.
> #GtkLabel.
>
> To modify the background of such widgets, you have to set the
> base color on their parent; if you want to set the background
> of a rectangular area around a label, try placing the label in
> a #GtkEventBox widget and setting the base color on that.
#NAME: get_active_iter
#PARENT: Gtk.ComboBox
#COMMENT: Sets @iter to point to the current active item, if it exists.
#NAME: get
#PARENT: Gtk.Clipboard.get
#COMMENT: the appropriate clipboard object. If no clipboard
    already exists, a new one will be created. Once a clipboard
    object has been created, it is persistent and, since it is
    owned by GTK+, must not be freed or unreffed.
#NAME: STOCK_REFRESH
#PARENT: Gtk
#COMMENT: The “Refresh” item and icon.
#NAME: spacing
#PARENT: Gtk.Grid.set_row_spacing.none
#COMMENT: the amount of space to insert between rows
#NAME: colorsel
#PARENT: Gtk.ColorSelection.set_has_palette.none
#COMMENT: a #GtkColorSelection
#NAME: buffer
#PARENT: Gtk.Entry.set_buffer.none
#COMMENT: a #GtkEntryBuffer
#NAME: new
#PARENT: Gtk.MountOperation
#COMMENT: Creates a new #GtkMountOperation
#NAME: SpinButton
#PARENT: Gtk
#COMMENT: A #GtkSpinButton is an ideal way to allow the user to set the value of
some attribute. Rather than having to directly type a number into a
#GtkEntry, GtkSpinButton allows the user to click on one of two arrows
to increment or decrement the displayed value. A value can still be
typed in, with the bonus that it can be checked to ensure it is in a
given range.

The main properties of a GtkSpinButton are through an adjustment.
See the #GtkAdjustment section for more details about an adjustment's
properties.

## Using a GtkSpinButton to get an integer

|[<!-- language="C" -->
// Provides a function to retrieve an integer value from a GtkSpinButton
// and creates a spin button to model percentage values.

gint
grab_int_value (GtkSpinButton *button,
                gpointer       user_data)
{
  return gtk_spin_button_get_value_as_int (button);
}

void
create_integer_spin_button (void)
{

  GtkWidget *window, *button;
  GtkAdjustment *adjustment;

  adjustment = gtk_adjustment_new (50.0, 0.0, 100.0, 1.0, 5.0, 0.0);

  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  gtk_container_set_border_width (GTK_CONTAINER (window), 5);

  // creates the spinbutton, with no decimal places
  button = gtk_spin_button_new (adjustment, 1.0, 0);
  gtk_container_add (GTK_CONTAINER (window), button);

  gtk_widget_show_all (window);
}
]|

## Using a GtkSpinButton to get a floating point value

|[<!-- language="C" -->
// Provides a function to retrieve a floating point value from a
// GtkSpinButton, and creates a high precision spin button.

gfloat
grab_float_value (GtkSpinButton *button,
                  gpointer       user_data)
{
  return gtk_spin_button_get_value (button);
}

void
create_floating_spin_button (void)
{
  GtkWidget *window, *button;
  GtkAdjustment *adjustment;

  adjustment = gtk_adjustment_new (2.500, 0.0, 5.0, 0.001, 0.1, 0.0);

  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  gtk_container_set_border_width (GTK_CONTAINER (window), 5);

  // creates the spinbutton, with three decimal places
  button = gtk_spin_button_new (adjustment, 0.001, 3);
  gtk_container_add (GTK_CONTAINER (window), button);

  gtk_widget_show_all (window);
}
]|
#NAME: length
#PARENT: Gtk.RecentInfo.get_applications.utf8
#COMMENT: return location for the length of the returned list
#NAME: STYLE_CLASS_FLAT
#PARENT: Gtk
#COMMENT: A CSS class that is added when widgets that usually have
a frame or border (like buttons or entries) should appear
without it.
#NAME: new_linear
#PARENT: Gtk.Gradient
#COMMENT: Creates a new linear gradient along the line defined by (x0, y0) and (x1, y1). Before using the gradient
a number of stop colors must be added through gtk_gradient_add_color_stop().
#NAME: context
#PARENT: Gtk.StyleContext.get_state.StateFlags
#COMMENT: a #GtkStyleContext
#NAME: get_start_line
#PARENT: Gtk.CssSection
#COMMENT: Returns the line in the CSS document where this section starts.
The line number is 0-indexed, so the first line of the document
will return 0.
#NAME: menu
#PARENT: Gtk.Menu.detach.none
#COMMENT: a #GtkMenu
#NAME: step
#PARENT: Gtk.Range.set_increments.none
#COMMENT: step size
#NAME: widget
#PARENT: Gtk.Widget.size_allocate_with_baseline.none
#COMMENT: a #GtkWidget
#NAME: gstring
#PARENT: Gtk.rc_property_parse_color.gboolean
#COMMENT: the #GString to be parsed
#NAME: backward_cursor_positions
#PARENT: Gtk.TextIter
#COMMENT: Moves up to @count cursor positions. See
gtk_text_iter_forward_cursor_position() for details.
#NAME: render_insertion_cursor
#PARENT: Gtk
#COMMENT: Draws a text caret on @cr at the specified index of @layout.
#NAME: get_display
#PARENT: Gtk.Clipboard.get_display
#COMMENT: the #GdkDisplay associated with @clipboard
#NAME: new_with_model
#PARENT: Gtk.TreeView.new_with_model
#COMMENT: A newly created #GtkTreeView widget.
#NAME: value_from_string
#PARENT: Gtk.Builder
#COMMENT: This function demarshals a value from a string. This function
calls g_value_init() on the @value argument, so it need not be
initialised beforehand.

This function can handle char, uchar, boolean, int, uint, long,
ulong, enum, flags, float, double, string, #GdkColor, #GdkRGBA and
#GtkAdjustment type values. Support for #GtkWidget type values is
still to come.

Upon errors %FALSE will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR domain.
#NAME: activate-cursor-child
#PARENT: Gtk.FlowBox
#COMMENT: The ::activate-cursor-child signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted when the user activates the @box.
#NAME: none
#PARENT: Gtk.WrapMode
#COMMENT: do not wrap lines; just make the text area wider
#NAME: get_support_multidevice
#PARENT: Gtk.Widget.get_support_multidevice
#COMMENT: %TRUE if @widget is multidevice aware.
#NAME: hsv
#PARENT: Gtk.HSV.is_adjusting.gboolean
#COMMENT: A #GtkHSV
#NAME: parsed
#PARENT: Gtk.BindingSet
#COMMENT: whether this binding set stems from a CSS file and is reset upon theme changes
#NAME: args
#PARENT: Gtk.StyleContext.get_style_valist.none
#COMMENT: va_list of property name/return location pairs, followed by %NULL
#NAME: set_detail_width_chars
#PARENT: Gtk.Calendar
#COMMENT: Updates the width of detail cells.
See #GtkCalendar:detail-width-chars.
#NAME: get_ok_button
#PARENT: Gtk.FontSelectionDialog
#COMMENT: Gets the “OK” button.
#NAME: area
#PARENT: Gtk.CellArea.create_context.CellAreaContext
#COMMENT: a #GtkCellArea
#NAME: window
#PARENT: Gtk.Window.get_focus_visible.gboolean
#COMMENT: a #GtkWindow
#NAME: container
#PARENT: Gtk.Container.get_border_width.guint
#COMMENT: a #GtkContainer
#NAME: icon_view
#PARENT: Gtk.IconView.get_item_orientation.Orientation
#COMMENT: a #GtkIconView
#NAME: sortable
#PARENT: Gtk.TreeSortable.sort_column_changed.none
#COMMENT: A #GtkTreeSortable
#NAME: set_use_preview_label
#PARENT: Gtk.FileChooser
#COMMENT: Sets whether the file chooser should display a stock label with the name of
the file that is being previewed; the default is %TRUE.  Applications that
want to draw the whole preview area themselves should set this to %FALSE and
display the name themselves in their preview widget.

See also: gtk_file_chooser_set_preview_widget()
#NAME: state
#PARENT: Gtk.IconSource.set_state.none
#COMMENT: widget state this source applies to
#NAME: colorsel
#PARENT: Gtk.ColorSelection.get_current_color.none
#COMMENT: a #GtkColorSelection
#NAME: attribute_get_column
#PARENT: Gtk.CellArea
#COMMENT: Returns the model column that an attribute has been mapped to,
or -1 if the attribute is not mapped.
#NAME: first_prop_name
#PARENT: Gtk.Container.child_get.none
#COMMENT: the name of the first property to get
#NAME: get_right_justified
#PARENT: Gtk.MenuItem.get_right_justified
#COMMENT: %TRUE if the menu item will appear at the
  far right if added to a menu bar.
#NAME: new
#PARENT: Gtk.Stack.new
#COMMENT: a new #GtkStack
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.focus_cell.none
#COMMENT: A #GtkTreeViewColumn
#NAME: text_area
#PARENT: Gtk.Entry.get_text_area.none
#COMMENT: Return location for the text area.
#NAME: icon_view
#PARENT: Gtk.IconView.get_visible_range.gboolean
#COMMENT: A #GtkIconView
#NAME: width
#PARENT: Gtk.render_option.none
#COMMENT: rectangle width
#NAME: status-changed
#PARENT: Gtk.PrintOperation
#COMMENT: Emitted at between the various phases of the print operation.
See #GtkPrintStatus for the phases that are being discriminated.
Use gtk_print_operation_get_status() to find out the current
status.
#NAME: alpha
#PARENT: Gtk.ColorSelection.set_current_alpha.none
#COMMENT: an integer between 0 and 65535
#NAME: get_homogeneous
#PARENT: Gtk.FlowBox
#COMMENT: Returns whether the box is homogeneous (all children are the
same size). See gtk_box_set_homogeneous().
#NAME: UIManager
#PARENT: Gtk
#COMMENT: A #GtkUIManager constructs a user interface (menus and toolbars) from
one or more UI definitions, which reference actions from one or more
action groups.

# UI Definitions # {#XML-UI}

The UI definitions are specified in an XML format which can be
roughly described by the following DTD.

> Do not confuse the GtkUIManager UI Definitions described here with
> the similarly named [GtkBuilder UI Definitions][BUILDER-UI].

|[
<!ELEMENT ui          (menubar|toolbar|popup|accelerator)* >
<!ELEMENT menubar     (menuitem|separator|placeholder|menu)* >
<!ELEMENT menu        (menuitem|separator|placeholder|menu)* >
<!ELEMENT popup       (menuitem|separator|placeholder|menu)* >
<!ELEMENT toolbar     (toolitem|separator|placeholder)* >
<!ELEMENT placeholder (menuitem|toolitem|separator|placeholder|menu)* >
<!ELEMENT menuitem     EMPTY >
<!ELEMENT toolitem     (menu?) >
<!ELEMENT separator    EMPTY >
<!ELEMENT accelerator  EMPTY >
<!ATTLIST menubar      name                      #IMPLIED
                       action                    #IMPLIED >
<!ATTLIST toolbar      name                      #IMPLIED
                       action                    #IMPLIED >
<!ATTLIST popup        name                      #IMPLIED
                       action                    #IMPLIED
                       accelerators (true|false) #IMPLIED >
<!ATTLIST placeholder  name                      #IMPLIED
                       action                    #IMPLIED >
<!ATTLIST separator    name                      #IMPLIED
                       action                    #IMPLIED
                       expand       (true|false) #IMPLIED >
<!ATTLIST menu         name                      #IMPLIED
                       action                    #REQUIRED
                       position     (top|bot)    #IMPLIED >
<!ATTLIST menuitem     name                      #IMPLIED
                       action                    #REQUIRED
                       position     (top|bot)    #IMPLIED
                       always-show-image (true|false) #IMPLIED >
<!ATTLIST toolitem     name                      #IMPLIED
                       action                    #REQUIRED
                       position     (top|bot)    #IMPLIED >
<!ATTLIST accelerator  name                      #IMPLIED
                       action                    #REQUIRED >
]|

There are some additional restrictions beyond those specified in the
DTD, e.g. every toolitem must have a toolbar in its anchestry and
every menuitem must have a menubar or popup in its anchestry. Since
a #GMarkupParser is used to parse the UI description, it must not only
be valid XML, but valid markup.

If a name is not specified, it defaults to the action. If an action is
not specified either, the element name is used. The name and action
attributes must not contain “/” characters after parsing (since that
would mess up path lookup) and must be usable as XML attributes when
enclosed in doublequotes, thus they must not “"” characters or references
to the &quot; entity.

# A UI definition #

|[
<ui>
  <menubar>
    <menu name="FileMenu" action="FileMenuAction">
      <menuitem name="New" action="New2Action" />
      <placeholder name="FileMenuAdditions" />
    </menu>
    <menu name="JustifyMenu" action="JustifyMenuAction">
      <menuitem name="Left" action="justify-left"/>
      <menuitem name="Centre" action="justify-center"/>
      <menuitem name="Right" action="justify-right"/>
      <menuitem name="Fill" action="justify-fill"/>
    </menu>
  </menubar>
  <toolbar action="toolbar1">
    <placeholder name="JustifyToolItems">
      <separator/>
      <toolitem name="Left" action="justify-left"/>
      <toolitem name="Centre" action="justify-center"/>
      <toolitem name="Right" action="justify-right"/>
      <toolitem name="Fill" action="justify-fill"/>
      <separator/>
    </placeholder>
  </toolbar>
</ui>
]|

The constructed widget hierarchy is very similar to the element tree
of the XML, with the exception that placeholders are merged into their
parents. The correspondence of XML elements to widgets should be
almost obvious:

- menubar

   a #GtkMenuBar

- toolbar

   a #GtkToolbar

- popup

   a toplevel #GtkMenu

- menu

   a #GtkMenu attached to a menuitem

- menuitem

   a #GtkMenuItem subclass, the exact type depends on the action

- toolitem

   a #GtkToolItem subclass, the exact type depends on the
   action. Note that toolitem elements may contain a menu element,
   but only if their associated action specifies a
   #GtkMenuToolButton as proxy.

- separator

   a #GtkSeparatorMenuItem or #GtkSeparatorToolItem

- accelerator

   a keyboard accelerator

The “position” attribute determines where a constructed widget is positioned
wrt. to its siblings in the partially constructed tree. If it is
“top”, the widget is prepended, otherwise it is appended.

# UI Merging # {#UI-Merging}

The most remarkable feature of #GtkUIManager is that it can overlay a set
of menuitems and toolitems over another one, and demerge them later.

Merging is done based on the names of the XML elements. Each element is
identified by a path which consists of the names of its anchestors, separated
by slashes. For example, the menuitem named “Left” in the example above
has the path `/ui/menubar/JustifyMenu/Left` and the
toolitem with the same name has path
`/ui/toolbar1/JustifyToolItems/Left`.

# Accelerators #

Every action has an accelerator path. Accelerators are installed together
with menuitem proxies, but they can also be explicitly added with
<accelerator> elements in the UI definition. This makes it possible to
have accelerators for actions even if they have no visible proxies.

# Smart Separators # {#Smart-Separators}

The separators created by #GtkUIManager are “smart”, i.e. they do not show up
in the UI unless they end up between two visible menu or tool items. Separators
which are located at the very beginning or end of the menu or toolbar
containing them, or multiple separators next to each other, are hidden. This
is a useful feature, since the merging of UI elements from multiple sources
can make it hard or impossible to determine in advance whether a separator
will end up in such an unfortunate position.

For separators in toolbars, you can set `expand="true"` to
turn them from a small, visible separator to an expanding, invisible one.
Toolitems following an expanding separator are effectively right-aligned.

# Empty Menus

Submenus pose similar problems to separators inconnection with merging. It is
impossible to know in advance whether they will end up empty after merging.
#GtkUIManager offers two ways to treat empty submenus:

- make them disappear by hiding the menu item they’re attached to

- add an insensitive “Empty” item

The behaviour is chosen based on the “hide_if_empty” property of the action
to which the submenu is associated.

# GtkUIManager as GtkBuildable # {#GtkUIManager-BUILDER-UI}

The GtkUIManager implementation of the GtkBuildable interface accepts
GtkActionGroup objects as <child> elements in UI definitions.

A GtkUIManager UI definition as described above can be embedded in
an GtkUIManager <object> element in a GtkBuilder UI definition.

The widgets that are constructed by a GtkUIManager can be embedded in
other parts of the constructed user interface with the help of the
“constructor” attribute. See the example below.

## An embedded GtkUIManager UI definition

|[
<object class="GtkUIManager" id="uiman">
  <child>
    <object class="GtkActionGroup" id="actiongroup">
      <child>
        <object class="GtkAction" id="file">
          <property name="label">_File</property>
        </object>
      </child>
    </object>
  </child>
  <ui>
    <menubar name="menubar1">
      <menu action="file">
      </menu>
    </menubar>
  </ui>
</object>
<object class="GtkWindow" id="main-window">
  <child>
    <object class="GtkMenuBar" id="menubar1" constructor="uiman"/>
  </child>
</object>
]|
#NAME: letter-spacing
#PARENT: Gtk.TextTag
#COMMENT: Extra spacing between graphemes, in Pango units.
#NAME: get_app_paintable
#PARENT: Gtk.Widget
#COMMENT: Determines whether the application intends to draw on the widget in
an #GtkWidget::draw handler.

See gtk_widget_set_app_paintable()
#NAME: ToolbarStyle
#PARENT: Gtk
#COMMENT: Used to customize the appearance of a #GtkToolbar. Note that
setting the toolbar style overrides the user’s preferences
for the default toolbar style.  Note that if the button has only
a label set and GTK_TOOLBAR_ICONS is used, the label will be
visible, and vice versa.
#NAME: set_margin_left
#PARENT: Gtk.Widget
#COMMENT: Sets the left margin of @widget.
See the #GtkWidget:margin-left property.
#NAME: icon_size_lookup
#PARENT: Gtk.icon_size_lookup
#COMMENT: %TRUE if @size was a valid size
#NAME: name
#PARENT: Gtk.ActionGroup.new.ActionGroup
#COMMENT: the name of the action group.
#NAME: get_int
#PARENT: Gtk.PrintSettings.get_int
#COMMENT: the integer value of @key
#NAME: queue
#PARENT: Gtk.ResizeMode
#COMMENT: Queue resizes on this widget
#NAME: str
#PARENT: Gtk.Label.new.Widget
#COMMENT: The text of the label
#NAME: event
#PARENT: Gtk.Widget.window-state-event.gboolean
#COMMENT: the #GdkEventWindowState which
  triggered this signal.
#NAME: index_
#PARENT: Gtk.EntryCompletion.insert_action_markup.none
#COMMENT: the index of the item to insert
#NAME: property-notify-event
#PARENT: Gtk.Widget.property-notify-event
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.
#NAME: get_sensitive
#PARENT: Gtk.ActionGroup
#COMMENT: Returns %TRUE if the group is sensitive.  The constituent actions
can only be logically sensitive (see gtk_action_is_sensitive()) if
they are sensitive (see gtk_action_get_sensitive()) and their group
is sensitive.
#NAME: action
#PARENT: Gtk.RadioAction.set_current_value.none
#COMMENT: a #GtkRadioAction
#NAME: add_uri_targets
#PARENT: Gtk.TargetList
#COMMENT: Appends the URI targets supported by #GtkSelectionData to
the target list. All targets are added with the same @info.
#NAME: forward_visible_lines
#PARENT: Gtk.TextIter
#COMMENT: Moves @count visible lines forward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn’t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves backward by 0 - @count lines.
#NAME: item
#PARENT: Gtk.stock_lookup.gboolean
#COMMENT: stock item to initialize with values
#NAME: icon_set
#PARENT: Gtk.IconFactory.add.none
#COMMENT: icon set
#NAME: item
#PARENT: Gtk.SeparatorToolItem.get_draw.gboolean
#COMMENT: a #GtkSeparatorToolItem
#NAME: set_overwrite
#PARENT: Gtk.TextView
#COMMENT: Changes the #GtkTextView overwrite mode.
#NAME: order
#PARENT: Gtk.TreeSortable.get_sort_column_id.gboolean
#COMMENT: The #GtkSortType to be filled in
#NAME: name
#PARENT: Gtk.Action
#COMMENT: A unique name for the action.
#NAME: PRINT_SETTINGS_OUTPUT_URI
#PARENT: Gtk
#COMMENT: The key used by the “Print to file” printer to store the URI
to which the output should be written. GTK+ itself supports
only “file://” URIs.
#NAME: property_name
#PARENT: Gtk.Container.child_get_property.none
#COMMENT: the name of the property to get
#NAME: columns
#PARENT: Gtk.Table.resize.none
#COMMENT: The new number of columns.
#NAME: left_margin
#PARENT: Gtk.TextView.set_left_margin.none
#COMMENT: left margin in pixels
#NAME: manager
#PARENT: Gtk.UIManager.add_ui_from_resource.guint
#COMMENT: a #GtkUIManager object
#NAME: get_size_entry
#PARENT: Gtk.FontSelection.get_size_entry
#COMMENT: A #GtkWidget that is part of @fontsel
#NAME: set_label_fill
#PARENT: Gtk.Expander
#COMMENT: Sets whether the label widget should fill all available
horizontal space allocated to @expander.
#NAME: get_page_width
#PARENT: Gtk.PageSetup
#COMMENT: Returns the page width in units of @unit.

Note that this function takes orientation and
margins into consideration.
See gtk_page_setup_get_paper_width().
#NAME: tool_item
#PARENT: Gtk.ToolItem.get_text_size_group.SizeGroup
#COMMENT: a #GtkToolItem
#NAME: set_lower
#PARENT: Gtk.Adjustment
#COMMENT: Sets the minimum value of the adjustment.

When setting multiple adjustment properties via their individual
setters, multiple #GtkAdjustment::changed signals will be emitted. However, since
the emission of the #GtkAdjustment::changed signal is tied to the emission of the
#GObject::notify signals of the changed properties, it’s possible
to compress the #GtkAdjustment::changed signals into one by calling
g_object_freeze_notify() and g_object_thaw_notify() around the
calls to the individual setters.

Alternatively, using a single g_object_set() for all the properties
to change, or using gtk_adjustment_configure() has the same effect
of compressing #GtkAdjustment::changed emissions.
#NAME: tree_model
#PARENT: Gtk.CellAreaClass.apply_attributes.apply_attributes.none
#COMMENT: the #GtkTreeModel to pull values from
#NAME: get_valist
#PARENT: Gtk.TreeModel
#COMMENT: See gtk_tree_model_get(), this version takes a va_list
for language bindings to use.
#NAME: get_preferred_width_for_height
#PARENT: Gtk.CellRenderer
#COMMENT: Retreives a cell renderers’s minimum and natural width if it were rendered to
@widget with the specified @height.
#NAME: select_all
#PARENT: Gtk.IconView
#COMMENT: Selects all the icons. @icon_view must has its selection mode set
to #GTK_SELECTION_MULTIPLE.
#NAME: set_accel_path
#PARENT: Gtk.Menu
#COMMENT: Sets an accelerator path for this menu from which accelerator paths
for its immediate children, its menu items, can be constructed.
The main purpose of this function is to spare the programmer the
inconvenience of having to call gtk_menu_item_set_accel_path() on
each menu item that should support runtime user changable accelerators.
Instead, by just calling gtk_menu_set_accel_path() on their parent,
each menu item of this menu, that contains a label describing its
purpose, automatically gets an accel path assigned.

For example, a menu containing menu items “New” and “Exit”, will, after
`gtk_menu_set_accel_path (menu, "<Gnumeric-Sheet>/File");` has been
called, assign its items the accel paths: `"<Gnumeric-Sheet>/File/New"`
and `"<Gnumeric-Sheet>/File/Exit"`.

Assigning accel paths to menu items then enables the user to change
their accelerators at runtime. More details about accelerator paths
and their default setups can be found at gtk_accel_map_add_entry().

Note that @accel_path string will be stored in a #GQuark. Therefore,
if you pass a static string, you can save some memory by interning
it first with g_intern_static_string().
#NAME: set_visible
#PARENT: Gtk.StatusIcon
#COMMENT: Shows or hides a status icon.
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.iter_parent.iter_parent.gboolean
#COMMENT: a #GtkTreeModel
#NAME: widget
#PARENT: Gtk.Widget.drag_dest_find_target.Gdk.Atom
#COMMENT: drag destination widget
#NAME: path
#PARENT: Gtk.CellRenderer.editing-started.none
#COMMENT: the path identifying the edited cell
#NAME: state
#PARENT: Gtk.IconSet.render_icon.GdkPixbuf.Pixbuf
#COMMENT: widget state
#NAME: paragraphs
#PARENT: Gtk.MovementStep
#COMMENT: Move up or down paragraphs (newline-ended lines)
#NAME: iter
#PARENT: Gtk.TextIter.backward_visible_word_start.gboolean
#COMMENT: a #GtkTextIter
#NAME: widget
#PARENT: Gtk.Widget.drag_dest_set.none
#COMMENT: a #GtkWidget
#NAME: AppChooserDialog
#PARENT: Gtk
#COMMENT: #GtkAppChooserDialog shows a #GtkAppChooserWidget inside a #GtkDialog.

Note that #GtkAppChooserDialog does not have any interesting methods
of its own. Instead, you should get the embedded #GtkAppChooserWidget
using gtk_app_chooser_dialog_get_widget() and call its methods if
the generic #GtkAppChooser interface is not sufficient for your needs.

To set the heading that is shown above the #GtkAppChooserWidget,
use gtk_app_chooser_dialog_set_heading().
#NAME: cell_layout
#PARENT: Gtk.CellLayoutIface.pack_end.pack_end.none
#COMMENT: a #GtkCellLayout
#NAME: step_increment
#PARENT: Gtk.Adjustment.configure.none
#COMMENT: the new step increment
#NAME: child
#PARENT: Gtk.Notebook.page-reordered.none
#COMMENT: the child #GtkWidget affected
#NAME: get_inverted
#PARENT: Gtk.Range.get_inverted
#COMMENT: %TRUE if the range is inverted
#NAME: uri
#PARENT: Gtk.RecentManager.has_item.gboolean
#COMMENT: a URI
#NAME: hhomogeneous
#PARENT: Gtk.Stack
#COMMENT: %TRUE if the stack allocates the same width for all children.
#NAME: StackTransitionType
#PARENT: Gtk
#COMMENT: These enumeration values describe the possible transitions
between pages in a #GtkStack widget.

New values may be added to this enumeration over time.
#NAME: data
#PARENT: Gtk.stock_set_translate_func.none
#COMMENT: data to pass to @func
#NAME: homogeneous
#PARENT: Gtk.HBox.new.Widget
#COMMENT: %TRUE if all children are to be given equal space allotments.
#NAME: shadow_type
#PARENT: Gtk.Arrow.set.none
#COMMENT: a valid #GtkShadowType.
#NAME: notebook
#PARENT: Gtk.Notebook.remove_page.none
#COMMENT: a #GtkNotebook
#NAME: iter
#PARENT: Gtk.TextTagClass.event.event.gboolean
#COMMENT: location where the event was received
#NAME: get_orientation
#PARENT: Gtk.ToolItem.get_orientation
#COMMENT: a #GtkOrientation indicating the orientation
used for @tool_item
#NAME: size
#PARENT: Gtk.Tooltip.set_icon_from_gicon.none
#COMMENT: a stock icon size
#NAME: iter_is_valid
#PARENT: Gtk.TreeModelSort.iter_is_valid
#COMMENT: %TRUE if the iter is valid, %FALSE if the iter is invalid.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_sort_indicator.none
#COMMENT: a #GtkTreeViewColumn
#NAME: previous_direction
#PARENT: Gtk.Widget.direction-changed.none
#COMMENT: the previous text direction of @widget
#NAME: bottom
#PARENT: Gtk.BaselinePosition
#COMMENT: Align the baseline at the bottom
#NAME: tooltip
#PARENT: Gtk.Tooltip.set_markup.none
#COMMENT: a #GtkTooltip
#NAME: get_search_column
#PARENT: Gtk.TreeView
#COMMENT: Gets the column searched on by the interactive search code.
#NAME: area
#PARENT: Gtk.TreeViewColumn.new_with_area.TreeViewColumn
#COMMENT: the #GtkCellArea that the newly created column should use to layout cells.
#NAME: path
#PARENT: Gtk.WidgetPath.iter_add_class.none
#COMMENT: a #GtkWidget
#NAME: resize_toplevel
#PARENT: Gtk.Expander.set_resize_toplevel.none
#COMMENT: whether to resize the toplevel
#NAME: message_format
#PARENT: Gtk.MessageDialog.new.Widget
#COMMENT: printf()-style format string, or %NULL
#NAME: widget
#PARENT: Gtk.Notebook.set_action_widget.none
#COMMENT: a #GtkWidget
#NAME: new
#PARENT: Gtk.Popover.new
#COMMENT: a new #GtkPopover
#NAME: group_source
#PARENT: Gtk.RadioMenuItem.join_group.none
#COMMENT: a #GtkRadioMenuItem whose group we are
  joining, or %NULL to remove the @radio_menu_item from its current
  group
#NAME: forward_to_line_end
#PARENT: Gtk.TextIter
#COMMENT: Moves the iterator to point to the paragraph delimiter characters,
which will be either a newline, a carriage return, a carriage
return/newline in sequence, or the Unicode paragraph separator
character. If the iterator is already at the paragraph delimiter
characters, moves to the paragraph delimiter characters for the
next line. If @iter is on the last line in the buffer, which does
not end in paragraph delimiters, moves to the end iterator (end of
the last line), and returns %FALSE.
#NAME: context
#PARENT: Gtk.drag_finish.none
#COMMENT: the drag context
#NAME: adjustment
#PARENT: Gtk.Adjustment.set_step_increment.none
#COMMENT: a #GtkAdjustment
#NAME: xalign
#PARENT: Gtk.Alignment.set.none
#COMMENT: the horizontal alignment of the child widget, from 0 (left) to 1
 (right).
#NAME: message_dialog
#PARENT: Gtk.MessageDialog.format_secondary_markup.none
#COMMENT: a #GtkMessageDialog
#NAME: count
#PARENT: Gtk.TextIter.forward_visible_lines.gboolean
#COMMENT: number of lines to move forward
#NAME: filter
#PARENT: Gtk.TreeModelFilter.convert_iter_to_child_iter.none
#COMMENT: A #GtkTreeModelFilter.
#NAME: new_text
#PARENT: Gtk.EditableInterface.do_insert_text.do_insert_text.none
#COMMENT: the text to append
#NAME: background_area
#PARENT: Gtk.CellAreaClass.foreach_alloc.foreach_alloc.none
#COMMENT: the @widget relative coordinates of the background area
#NAME: unselect_all
#PARENT: Gtk.ListBox
#COMMENT: Unselect all children of @box, if the selection mode allows it.
#NAME: IMContextInfo
#PARENT: Gtk
#COMMENT: Bookkeeping information about a loadable input method.
#NAME: value
#PARENT: Gtk.LevelBar.add_offset_value.none
#COMMENT: the value for the new offset
#NAME: get_valist
#PARENT: Gtk.Style
#COMMENT: Non-vararg variant of gtk_style_get().
Used primarily by language bindings.
#NAME: expand
#PARENT: Gtk.ToolPalette.set_expand.none
#COMMENT: whether the group should be given extra space
#NAME: filter
#PARENT: Gtk.FontChooserIface.set_filter_func.set_filter_func.none
#COMMENT: a #GtkFontFilterFunc, or %NULL
#NAME: event
#PARENT: Gtk.SearchEntry.handle_event.gboolean
#COMMENT: a key event
#NAME: line_number
#PARENT: Gtk.TextBuffer.get_iter_at_line_index.none
#COMMENT: line number counting from 0
#NAME: set_mode
#PARENT: Gtk.TreeSelection
#COMMENT: Sets the selection mode of the @selection.  If the previous type was
#GTK_SELECTION_MULTIPLE, then the anchor is kept selected, if it was
previously selected.
#NAME: path
#PARENT: Gtk.WidgetPath.append_with_siblings.gint
#COMMENT: the widget path to append to
#NAME: popup_completion
#PARENT: Gtk.EntryCompletion.set_popup_completion.none
#COMMENT: %TRUE to do popup completion
#NAME: model
#PARENT: Gtk.IconView.get_tooltip_context.gboolean
#COMMENT: a pointer to receive a
        #GtkTreeModel or %NULL
#NAME: get_paper_width
#PARENT: Gtk.PageSetup.get_paper_width
#COMMENT: the paper width.
#NAME: tooltip
#PARENT: Gtk.Tooltip.set_icon.none
#COMMENT: a #GtkTooltip
#NAME: cr
#PARENT: Gtk.render_extension.none
#COMMENT: a #cairo_t
#NAME: text
#PARENT: Gtk.Style
#COMMENT: Set of text #GdkColor
#NAME: inhibit_osk
#PARENT: Gtk.InputHints
#COMMENT: Suggest to not show an onscreen keyboard
    (e.g for a calculator that already has all the keys).
#NAME: RadioToolButton
#PARENT: Gtk
#COMMENT: A #GtkRadioToolButton is a #GtkToolItem that contains a radio button,
that is, a button that is part of a group of toggle buttons where only
one button can be active at a time.

Use gtk_radio_tool_button_new() to create a new
#GtkRadioToolButton. Use gtk_radio_tool_button_new_from_widget() to
create a new #GtkRadioToolButton that is part of the same group as an
existing #GtkRadioToolButton.
#NAME: gtk-menu-popup-delay
#PARENT: Gtk.Settings
#COMMENT: Minimum time the pointer must stay over a menu item before the submenu appear.
#NAME: set_visible
#PARENT: Gtk.TextMark
#COMMENT: Sets the visibility of @mark; the insertion point is normally
visible, i.e. you can see it as a vertical bar. Also, the text
widget uses a visible mark to indicate where a drop will occur when
dragging-and-dropping text. Most other marks are not visible.
Marks are not visible by default.
#NAME: path
#PARENT: Gtk.TreeModel.get_iter.gboolean
#COMMENT: the #GtkTreePath-struct
#NAME: get_iter_first
#PARENT: Gtk.TreeModel.get_iter_first
#COMMENT: %TRUE, if @iter was set
#NAME: proxy
#PARENT: Gtk.TreeRowReference.deleted.none
#COMMENT: a #GObject
#NAME: collapse_row
#PARENT: Gtk.TreeView
#COMMENT: Collapses a row (hides its child rows, if they exist).
#NAME: new_from_icon_set
#PARENT: Gtk.Image.new_from_icon_set
#COMMENT: a new #GtkImage
#NAME: label
#PARENT: Gtk.Label.get_justify.Justification
#COMMENT: a #GtkLabel
#NAME: STOCK_PRINT_WARNING
#PARENT: Gtk
#COMMENT: The “Print Warning” icon.
#NAME: mark-set
#PARENT: Gtk.TextBuffer
#COMMENT: The ::mark-set signal is emitted as notification
after a #GtkTextMark is set.

See also:
gtk_text_buffer_create_mark(),
gtk_text_buffer_move_mark().
#NAME: widget
#PARENT: Gtk.WidgetClass.event.event.gboolean
#COMMENT: a #GtkWidget
#NAME: get_urgency_hint
#PARENT: Gtk.Window.get_urgency_hint
#COMMENT: %TRUE if window is urgent
#NAME: theme
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: area
#PARENT: Gtk.StatusIcon.get_geometry.gboolean
#COMMENT: return location for the area occupied by
       the status icon, or %NULL
#NAME: state
#PARENT: Gtk.ThemingEngine.get_background_color.none
#COMMENT: state to retrieve the color for
#NAME: device
#PARENT: Gtk.Widget.get_device_enabled.gboolean
#COMMENT: a #GdkDevice
#NAME: is_inhibited
#PARENT: Gtk.Application
#COMMENT: Determines if any of the actions specified in @flags are
currently inhibited (possibly by another application).
#NAME: create_context
#PARENT: Gtk.CellAreaClass.create_context.create_context
#COMMENT: a newly created #GtkCellAreaContext which can be used with @area.
#NAME: start
#PARENT: Gtk.ButtonBoxStyle
#COMMENT: Buttons are grouped towards the start of the box,
  (on the left for a HBox, or the top for a VBox).
#NAME: value
#PARENT: Gtk.LevelBar.set_min_value.none
#COMMENT: a positive value
#NAME: get_mnemonic_widget
#PARENT: Gtk.Label
#COMMENT: Retrieves the target of the mnemonic (keyboard shortcut) of this
label. See gtk_label_set_mnemonic_widget().
#NAME: get_data_with_length
#PARENT: Gtk.SelectionData.get_data_with_length
#COMMENT: the raw data of the selection
#NAME: state
#PARENT: Gtk.get_current_event_state.gboolean
#COMMENT: a location to store the state of the current event
#NAME: has_application
#PARENT: Gtk.RecentInfo
#COMMENT: Checks whether an application registered this resource using @app_name.
#NAME: new_from_gicon
#PARENT: Gtk.Image.new_from_gicon
#COMMENT: a new #GtkImage displaying the themed icon
#NAME: menubar
#PARENT: Gtk.MenuBar.get_child_pack_direction.PackDirection
#COMMENT: a #GtkMenuBar
#NAME: set_menu_model
#PARENT: Gtk.MenuButton
#COMMENT: Sets the #GMenuModel from which the popup will be constructed,
or %NULL to disable the button.

Depending on the value of #GtkMenuButton:use-popover, either a
#GtkMenu will be created with gtk_menu_new_from_model(), or a
#GtkPopover with gtk_popover_new_from_model(). In either case,
actions will be connected as documented for these functions.

If #GtkMenuButton:popup or #GtkMenuButton:popover are already set,
their content will be lost and replaced by the newly created popup.
#NAME: set_value
#PARENT: Gtk.ScaleButton
#COMMENT: Sets the current value of the scale; if the value is outside
the minimum or maximum range values, it will be clamped to fit
inside them. The scale button emits the #GtkScaleButton::value-changed
signal if the value changes.
#NAME: list
#PARENT: Gtk.TargetList.add_rich_text_targets.none
#COMMENT: a #GtkTargetList
#NAME: selection
#PARENT: Gtk.selection_convert.gboolean
#COMMENT: Which selection to get
#NAME: pack_end
#PARENT: Gtk.ActionBar
#COMMENT: Adds @child to @action_bar, packed with reference to the
end of the @action_bar.
#NAME: get_show_style
#PARENT: Gtk.FontButton.get_show_style
#COMMENT: whether the font style will be shown in the label.
#NAME: cclass
#PARENT: Gtk.ContainerClass.install_child_property.none
#COMMENT: a #GtkContainerClass
#NAME: dnd
#PARENT: Gtk.IconSize
#COMMENT: Size appropriate for drag and drop (32px)
#NAME: was_symbolic
#PARENT: Gtk.IconInfo.load_symbolic_for_style.GdkPixbuf.Pixbuf
#COMMENT: a #gboolean, returns whether the
    loaded icon was a symbolic one and whether the @fg color was
    applied to it.
#NAME: keyval
#PARENT: Gtk.BindingEntry.add_signal.none
#COMMENT: key value of binding to install
#NAME: Menu
#PARENT: Gtk
#COMMENT: A #GtkMenu is a #GtkMenuShell that implements a drop down menu
consisting of a list of #GtkMenuItem objects which can be navigated
and activated by the user to perform application functions.

A #GtkMenu is most commonly dropped down by activating a
#GtkMenuItem in a #GtkMenuBar or popped up by activating a
#GtkMenuItem in another #GtkMenu.

A #GtkMenu can also be popped up by activating a #GtkComboBox.
Other composite widgets such as the #GtkNotebook can pop up a
#GtkMenu as well.

Applications can display a #GtkMenu as a popup menu by calling the
gtk_menu_popup() function.  The example below shows how an application
can pop up a menu when the 3rd mouse button is pressed.

## Connecting the popup signal handler.

|[<!-- language="C" -->
  // connect our handler which will popup the menu
  g_signal_connect_swapped (window, "button_press_event",
G_CALLBACK (my_popup_handler), menu);
]|

## Signal handler which displays a popup menu.

|[<!-- language="C" -->
static gint
my_popup_handler (GtkWidget *widget, GdkEvent *event)
{
  GtkMenu *menu;
  GdkEventButton *event_button;

  g_return_val_if_fail (widget != NULL, FALSE);
  g_return_val_if_fail (GTK_IS_MENU (widget), FALSE);
  g_return_val_if_fail (event != NULL, FALSE);

  // The "widget" is the menu that was supplied when
  // g_signal_connect_swapped() was called.
  menu = GTK_MENU (widget);

  if (event->type == GDK_BUTTON_PRESS)
    {
      event_button = (GdkEventButton *) event;
      if (event_button->button == GDK_BUTTON_SECONDARY)
        {
          gtk_menu_popup (menu, NULL, NULL, NULL, NULL,
                          event_button->button, event_button->time);
          return TRUE;
        }
    }

  return FALSE;
}
]|
#NAME: extend_selection
#PARENT: Gtk.TextView.move-cursor.none
#COMMENT: %TRUE if the move should extend the selection
#NAME: tree_model
#PARENT: Gtk.TreeModel.iter_children.gboolean
#COMMENT: a #GtkTreeModel
#NAME: set_homogeneous
#PARENT: Gtk.Box
#COMMENT: Sets the #GtkBox:homogeneous property of @box, controlling
whether or not all children of @box are given equal space
in the box.
#NAME: get_font_family
#PARENT: Gtk.FontChooser.get_font_family
#COMMENT: A #PangoFontFamily representing the
    selected font family, or %NULL. The returned object is owned by @fontchooser
    and must not be modified or freed.
#NAME: new
#PARENT: Gtk.HBox.new
#COMMENT: a new #GtkHBox.
#NAME: rltb
#PARENT: Gtk.NumberUpLayout
#COMMENT: ![](layout-rltb.png)
#NAME: new_from_icon_name
#PARENT: Gtk.StatusIcon
#COMMENT: Creates a status icon displaying an icon from the current icon theme.
If the current icon theme is changed, the icon will be updated
appropriately.
#NAME: row_drop_possible
#PARENT: Gtk.TreeDragDest.row_drop_possible
#COMMENT: %TRUE if a drop is possible before @dest_path
#NAME: cell
#PARENT: Gtk.CellRendererClass.get_size.get_size.none
#COMMENT: a #GtkCellRenderer
#NAME: new
#PARENT: Gtk.ImageMenuItem.new
#COMMENT: a new #GtkImageMenuItem
#NAME: get_show_tabs
#PARENT: Gtk.Notebook.get_show_tabs
#COMMENT: %TRUE if the tabs are shown
#NAME: get_uri
#PARENT: Gtk.FileChooser
#COMMENT: Gets the URI for the currently selected file in
the file selector. If multiple files are selected,
one of the filenames will be returned at random.

If the file chooser is in folder mode, this function returns the selected
folder.
#NAME: context
#PARENT: Gtk.IMContext.reset.none
#COMMENT: a #GtkIMContext
#NAME: baseline
#PARENT: Gtk.Widget.size_allocate_with_baseline.none
#COMMENT: The baseline of the child, or -1
#NAME: startup-id
#PARENT: Gtk.Window
#COMMENT: The :startup-id is a write-only property for setting window's
startup notification identifier. See gtk_window_set_startup_id()
for more details.
#NAME: action
#PARENT: Gtk.Activatable.set_related_action.none
#COMMENT: the #GtkAction to set
#NAME: get_selected_items
#PARENT: Gtk.IconView
#COMMENT: Creates a list of paths of all selected items. Additionally, if you are
planning on modifying the model after calling this function, you may
want to convert the returned list into a list of #GtkTreeRowReferences.
To do this, you can use gtk_tree_row_reference_new().

To free the return value, use:
|[<!-- language="C" -->
g_list_free_full (list, (GDestroyNotify) gtk_tree_path_free);
]|
#NAME: widget
#PARENT: Gtk.Widget.input_shape_combine_region.none
#COMMENT: a #GtkWidget
#NAME: stock_list_ids
#PARENT: Gtk
#COMMENT: Retrieves a list of all known stock IDs added to a #GtkIconFactory
or registered with gtk_stock_add(). The list must be freed with g_slist_free(),
and each string in the list must be freed with g_free().
#NAME: count
#PARENT: Gtk.Entry.move-cursor.none
#COMMENT: the number of @step units to move
#NAME: tree_view
#PARENT: Gtk.TreeView.remove_column.gint
#COMMENT: A #GtkTreeView.
#NAME: new
#PARENT: Gtk.Action.new
#COMMENT: a new #GtkAction
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_serialize_formats.Gdk.Atom
#COMMENT: a #GtkTextBuffer
#NAME: dest
#PARENT: Gtk.TreeDragDestIface.drag_data_received.drag_data_received.gboolean
#COMMENT: row to drop in front of
#NAME: iter
#PARENT: Gtk.TextIter.backward_visible_cursor_position.gboolean
#COMMENT: a #GtkTextIter
#NAME: false
#PARENT: Gtk.false
#COMMENT: %FALSE
#NAME: set_use_markup
#PARENT: Gtk.Label
#COMMENT: Sets whether the text of the label contains markup in
[Pango’s text markup language][PangoMarkupFormat].
See gtk_label_set_markup().
#NAME: buffer
#PARENT: Gtk.TextBufferClass.begin_user_action.begin_user_action.none
#COMMENT: a #GtkTextBuffer
#NAME: set_pack_direction
#PARENT: Gtk.MenuBar
#COMMENT: Sets how items should be packed inside a menubar.
#NAME: cell
#PARENT: Gtk.CellLayoutIface.set_cell_data_func.set_cell_data_func.none
#COMMENT: a #GtkCellRenderer
#NAME: self
#PARENT: Gtk.NumerableIcon.get_label.utf8
#COMMENT: a #GtkNumerableIcon
#NAME: flags
#PARENT: Gtk.PlacesSidebar.set_open_flags.none
#COMMENT: Bitmask of modes in which the calling application can open locations
#NAME: chooser
#PARENT: Gtk.ColorChooser.add_palette.none
#COMMENT: a #GtkColorChooser
#NAME: set_current_folder
#PARENT: Gtk.FileChooser.set_current_folder
#COMMENT: Not useful.
#NAME: get_text
#PARENT: Gtk.Label
#COMMENT: Fetches the text from a label widget, as displayed on the
screen. This does not include any embedded underlines
indicating mnemonics or Pango markup. (See gtk_label_get_label())
#NAME: label
#PARENT: Gtk.MenuItem.set_label.none
#COMMENT: the text you want to set
#NAME: get_draw
#PARENT: Gtk.SeparatorToolItem
#COMMENT: Returns whether @item is drawn as a line, or just blank.
See gtk_separator_tool_item_set_draw().
#NAME: widget
#PARENT: Gtk.Widget.error_bell.none
#COMMENT: a #GtkWidget
#NAME: widget
#PARENT: Gtk.rc_get_style.Style
#COMMENT: a #GtkWidget
#NAME: hierarchy-changed
#PARENT: Gtk.Widget
#COMMENT: The ::hierarchy-changed signal is emitted when the
anchored state of a widget changes. A widget is
“anchored” when its toplevel
ancestor is a #GtkWindow. This signal is emitted when
a widget changes from un-anchored to anchored or vice-versa.
#NAME: add_callback_symbol
#PARENT: Gtk.Builder
#COMMENT: Adds the @callback_symbol to the scope of @builder under the given @callback_name.

Using this function overrides the behavior of gtk_builder_connect_signals()
for any callback symbols that are added. Using this method allows for better
encapsulation as it does not require that callback symbols be declared in
the global namespace.
#NAME: index
#PARENT: Gtk.Menu.set_active.none
#COMMENT: the index of the menu item to select.  Index values are
        from 0 to n-1
#NAME: n_targets
#PARENT: Gtk.TreeView.enable_model_drag_dest.none
#COMMENT: the number of items in @targets
#NAME: stock_id
#PARENT: Gtk.Image.new_from_stock.Widget
#COMMENT: a stock icon name
#NAME: get_uris
#PARENT: Gtk.RecentChooser
#COMMENT: Gets the URI of the recently used resources.

The return value of this function is affected by the “sort-type” and “limit”
properties of @chooser.

Since the returned array is %NULL terminated, @length may be %NULL.
#NAME: start
#PARENT: Gtk.TextBufferSerializeFunc.guint8
#COMMENT: start of the block of text to serialize
#NAME: set_has_opacity_control
#PARENT: Gtk.ColorSelection
#COMMENT: Sets the @colorsel to use or not use opacity.
#NAME: get_columns
#PARENT: Gtk.IconView.get_columns
#COMMENT: the number of columns, or -1
#NAME: unit
#PARENT: Gtk.PageSetup.set_bottom_margin.none
#COMMENT: the units for @margin
#NAME: key
#PARENT: Gtk.PrintSettings.set_length.none
#COMMENT: a key
#NAME: set_vhomogeneous
#PARENT: Gtk.Stack
#COMMENT: Sets the #GtkStack to be vertically homogeneous or not.
If it is homogeneous, the #GtkStack will request the same
height for all its children. If it isn't, the stack
may change height when a different child becomes visible.
#NAME: image
#PARENT: Gtk.Image.set_from_icon_name.none
#COMMENT: a #GtkImage
#NAME: layout
#PARENT: Gtk.Layout.get_bin_window.Gdk.Window
#COMMENT: a #GtkLayout
#NAME: STOCK_STRIKETHROUGH
#PARENT: Gtk
#COMMENT: The “Strikethrough” item and icon.
#NAME: set_label_widget
#PARENT: Gtk.ToolItemGroup
#COMMENT: Sets the label of the tool item group.
The label widget is displayed in the header of the group, in place
of the usual label.
#NAME: new_with_mnemonic
#PARENT: Gtk.Label
#COMMENT: Creates a new #GtkLabel, containing the text in @str.

If characters in @str are preceded by an underscore, they are
underlined. If you need a literal underscore character in a label, use
'__' (two underscores). The first underlined character represents a
keyboard accelerator called a mnemonic. The mnemonic key can be used
to activate another widget, chosen automatically, or explicitly using
gtk_label_set_mnemonic_widget().

If gtk_label_set_mnemonic_widget() is not called, then the first
activatable ancestor of the #GtkLabel will be chosen as the mnemonic
widget. For instance, if the label is inside a button or menu item,
the button or menu item will automatically become the mnemonic widget
and be activated by the mnemonic.
#NAME: get_child_non_homogeneous
#PARENT: Gtk.ButtonBox
#COMMENT: Returns whether the child is exempted from homogenous
sizing.
#NAME: length
#PARENT: Gtk.SelectionData.get_data_with_length.guint8
#COMMENT: return location for length of the data segment
#NAME: get_current_folder_file
#PARENT: Gtk.FileChooser
#COMMENT: Gets the current folder of @chooser as #GFile.
See gtk_file_chooser_get_current_folder_uri().
#NAME: renderer
#PARENT: Gtk.CellAreaClass.add.add.none
#COMMENT: the #GtkCellRenderer to add to @area
#NAME: grid
#PARENT: Gtk.Grid.insert_next_to.none
#COMMENT: a #GtkGrid
#NAME: new
#PARENT: Gtk.GestureLongPress
#COMMENT: Returns a newly created #GtkGesture that recognizes long presses.
#NAME: get_icon_name
#PARENT: Gtk.IconSource
#COMMENT: Retrieves the source icon name, or %NULL if none is set. The
icon_name is not a copy, and should not be modified or expected to
persist beyond the lifetime of the icon source.
#NAME: set_state_wildcarded
#PARENT: Gtk.IconSource
#COMMENT: If the widget state is wildcarded, this source can be used as the
base image for an icon in any #GtkStateType.  If the widget state
is not wildcarded, then the state the source applies to should be
set with gtk_icon_source_set_state() and the icon source will
only be used with that specific state.

#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.

#GtkIconSet will normally transform wildcarded source images to
produce an appropriate icon for a given state, for example
lightening an image on prelight, but will not modify source images
that match exactly.
#NAME: child
#PARENT: Gtk.Notebook.detach_tab.none
#COMMENT: a child
#NAME: length
#PARENT: Gtk.WidgetPath.length
#COMMENT: the number of elements in the path
#NAME: dir_ltr
#PARENT: Gtk.IconLookupFlags
#COMMENT: Try to load a variant of the icon for left-to-right
  text direction. Since 3.14.
#NAME: cell
#PARENT: Gtk.CellRenderer.get_preferred_height.none
#COMMENT: a #GtkCellRenderer instance
#NAME: width
#PARENT: Gtk.IconSize.lookup_for_settings.gboolean
#COMMENT: location to store icon width
#NAME: align-widget
#PARENT: Gtk.MenuButton
#COMMENT: The #GtkWidget to use to align the menu with.
#NAME: get_slider_range
#PARENT: Gtk.Range
#COMMENT: This function returns sliders range along the long dimension,
in widget->window coordinates.

This function is useful mainly for #GtkRange subclasses.
#NAME: window
#PARENT: Gtk.Window.set_modal.none
#COMMENT: a #GtkWindow
#NAME: context
#PARENT: Gtk.drag_set_icon_stock.none
#COMMENT: the context for a drag (This must be called
           with a  context for the source side of a drag)
#NAME: get_size
#PARENT: Gtk.StatusIcon
#COMMENT: Gets the size in pixels that is available for the image.
Stock icons and named icons adapt their size automatically
if the size of the notification area changes. For other
storage types, the size-changed signal can be used to
react to size changes.

Note that the returned size is only meaningful while the
status icon is embedded (see gtk_status_icon_is_embedded()).
#NAME: get_sensitive
#PARENT: Gtk.Action
#COMMENT: Returns whether the action itself is sensitive. Note that this doesn’t
necessarily mean effective sensitivity. See gtk_action_is_sensitive()
for that.
#NAME: context
#PARENT: Gtk.CellAreaClass.activate.activate.gboolean
#COMMENT: the #GtkCellAreaContext in context with the current row data
#NAME: cr
#PARENT: Gtk.CellRenderer.render.none
#COMMENT: a cairo context to draw to
#NAME: settings
#PARENT: Gtk.PrintSettings.set_use_color.none
#COMMENT: a #GtkPrintSettings
#NAME: add_selection_clipboard
#PARENT: Gtk.TextBuffer
#COMMENT: Adds @clipboard to the list of clipboards in which the selection
contents of @buffer are available. In most cases, @clipboard will be
the #GtkClipboard of type %GDK_SELECTION_PRIMARY for a view of @buffer.
#NAME: x
#PARENT: Gtk.paint_focus.none
#COMMENT: the x origin of the rectangle around which to draw a focus indicator
#NAME: get_preview_text
#PARENT: Gtk.FontSelection
#COMMENT: Gets the text displayed in the preview area.
#NAME: get_mnemonic_keyval
#PARENT: Gtk.Label
#COMMENT: If the label has been set so that it has an mnemonic key this function
returns the keyval used for the mnemonic accelerator. If there is no
mnemonic set up it returns #GDK_KEY_VoidSymbol.
#NAME: create_app_info
#PARENT: Gtk.RecentInfo
#COMMENT: Creates a #GAppInfo for the specified #GtkRecentInfo
#NAME: y
#PARENT: Gtk.paint_focus.none
#COMMENT: the y origin of the rectangle around which to draw a focus indicator
#NAME: icon_pos
#PARENT: Gtk.Entry.set_icon_drag_source.none
#COMMENT: icon position
#NAME: get_default_source
#PARENT: Gtk.PrintSettings
#COMMENT: Gets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.
#NAME: ythickness
#PARENT: Gtk.Style
#COMMENT: Thickness in Y direction
#NAME: select-all
#PARENT: Gtk.TextView
#COMMENT: The ::select-all signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to select or unselect the complete
contents of the text view.

The default bindings for this signal are Ctrl-a and Ctrl-/
for selecting and Shift-Ctrl-a and Ctrl-\ for unselecting.
#NAME: get_deletable
#PARENT: Gtk.Window
#COMMENT: Returns whether the window has been set to have a close button
via gtk_window_set_deletable().
#NAME: range_rect
#PARENT: Gtk.Range.get_range_rect.none
#COMMENT: return location for the range rectangle
#NAME: default_editable
#PARENT: Gtk.TextBuffer.backspace.gboolean
#COMMENT: whether the buffer is editable by default
#NAME: get_activate_on_single_click
#PARENT: Gtk.TreeView.get_activate_on_single_click
#COMMENT: %TRUE if row-activated will be emitted on a single click
#NAME: child_get_property
#PARENT: Gtk.Container
#COMMENT: Gets the value of a child property for @child and @container.
#NAME: wait_is_rich_text_available
#PARENT: Gtk.Clipboard.wait_is_rich_text_available
#COMMENT: %TRUE is there is rich text available, %FALSE otherwise.
#NAME: builder
#PARENT: Gtk.Buildable.parser_finished.none
#COMMENT: a #GtkBuilder
#NAME: raw_coordinates
#PARENT: Gtk.IconInfo.set_raw_coordinates.none
#COMMENT: whether the coordinates of embedded rectangles
    and attached points should be returned in their original
    (unscaled) form.
#NAME: colorsel
#PARENT: Gtk.ColorSelection.get_previous_rgba.none
#COMMENT: a #GtkColorSelection
#NAME: in_emission
#PARENT: Gtk.BindingEntry
#COMMENT: implementation detail
#NAME: get_size_wildcarded
#PARENT: Gtk.IconSource.get_size_wildcarded
#COMMENT: %TRUE if this icon source is a base for any icon size variant
#NAME: StateFlags
#PARENT: Gtk
#COMMENT: Describes a widget state. Widget states are used to match the widget
against CSS pseudo-classes. Note that GTK extends the regular CSS
classes and sometimes uses different names.
#NAME: compare
#PARENT: Gtk.TextIter
#COMMENT: A qsort()-style function that returns negative if @lhs is less than
@rhs, positive if @lhs is greater than @rhs, and 0 if they’re equal.
Ordering is in character offset order, i.e. the first character in the buffer
is less than the second character in the buffer.
#NAME: region
#PARENT: Gtk.Widget.queue_draw_region.none
#COMMENT: region to draw
#NAME: widget
#PARENT: Gtk.ButtonBox.get_child_non_homogeneous.gboolean
#COMMENT: a #GtkButtonBox
#NAME: line
#PARENT: Gtk.TextExtendSelection
#COMMENT: Selects the current line. It is triggered by
  a triple-click for example.
#NAME: paint_slider
#PARENT: Gtk
#COMMENT: Draws a slider in the given rectangle on @cr using the
given style and orientation.
#NAME: resource_path
#PARENT: Gtk.Builder.add_objects_from_resource.guint
#COMMENT: the path of the resource file to parse
#NAME: get_headers_visible
#PARENT: Gtk.TreeView
#COMMENT: Returns %TRUE if the headers on the @tree_view are visible.
#NAME: iter
#PARENT: Gtk.ListStore.insert_with_values.none
#COMMENT: An unset #GtkTreeIter to set to the new row, or %NULL
#NAME: AspectFrame
#PARENT: Gtk
#COMMENT: The #GtkAspectFrame is useful when you want
pack a widget so that it can resize but always retains
the same aspect ratio. For instance, one might be
drawing a small preview of a larger image. #GtkAspectFrame
derives from #GtkFrame, so it can draw a label and
a frame around the child. The frame will be
“shrink-wrapped” to the size of the child.
#NAME: STOCK_ZOOM_FIT
#PARENT: Gtk
#COMMENT: The “Zoom to Fit” item and icon.
#NAME: STYLE_CLASS_OSD
#PARENT: Gtk
#COMMENT: A CSS class used when rendering an OSD (On Screen Display) element,
on top of another container.
#NAME: max
#PARENT: Gtk.Scale.new_with_range.Widget
#COMMENT: maximum value
#NAME: css_provider
#PARENT: Gtk.CssProvider.load_from_file.gboolean
#COMMENT: a #GtkCssProvider
#NAME: buffer
#PARENT: Gtk.TextBuffer.get_insert.TextMark
#COMMENT: a #GtkTextBuffer
#NAME: iter
#PARENT: Gtk.TextIter.forward_lines.gboolean
#COMMENT: a #GtkTextIter
#NAME: tree_x
#PARENT: Gtk.TreeView.scroll_to_point.none
#COMMENT: X coordinate of new top-left pixel of visible area, or -1
#NAME: selected_foreach
#PARENT: Gtk.FlowBox
#COMMENT: Calls a function for each selected child.

Note that the selection cannot be modified from within
this function.
#NAME: get_use_drag_window
#PARENT: Gtk.ToolItem.get_use_drag_window
#COMMENT: %TRUE if @tool_item uses a drag window.
#NAME: get_n_items
#PARENT: Gtk.Toolbar.get_n_items
#COMMENT: the number of items on the toolbar
#NAME: tree_y
#PARENT: Gtk.TreeView.scroll_to_point.none
#COMMENT: Y coordinate of new top-left pixel of visible area, or -1
#NAME: set_relief
#PARENT: Gtk.Button
#COMMENT: Sets the relief style of the edges of the given #GtkButton widget.
Two styles exist, %GTK_RELIEF_NORMAL and %GTK_RELIEF_NONE.
The default style is, as one can guess, %GTK_RELIEF_NORMAL.
The deprecated value %GTK_RELIEF_HALF behaves the same as
%GTK_RELIEF_NORMAL.
#NAME: area
#PARENT: Gtk.GLArea.get_has_depth_buffer.gboolean
#COMMENT: a #GtkGLArea
#NAME: child
#PARENT: Gtk.Box.query_child_packing.none
#COMMENT: the #GtkWidget of the child to query
#NAME: icon_set
#PARENT: Gtk.Image.get_icon_set.none
#COMMENT: location to store a
    #GtkIconSet, or %NULL
#NAME: setting
#PARENT: Gtk.Label.set_selectable.none
#COMMENT: %TRUE to allow selecting text in the label
#NAME: data
#PARENT: Gtk.TreeSelection.selected_foreach.none
#COMMENT: user data to pass to the function.
#NAME: object
#PARENT: Gtk.bindings_activate.gboolean
#COMMENT: object to activate when binding found
#NAME: set_value
#PARENT: Gtk.Adjustment
#COMMENT: Sets the #GtkAdjustment value. The value is clamped to lie between
#GtkAdjustment:lower and #GtkAdjustment:upper.

Note that for adjustments which are used in a #GtkScrollbar, the effective
range of allowed values goes from #GtkAdjustment:lower to
#GtkAdjustment:upper - #GtkAdjustment:page_size.
#NAME: new
#PARENT: Gtk.FileChooserWidget
#COMMENT: Creates a new #GtkFileChooserWidget.  This is a file chooser widget that can
be embedded in custom windows, and it is the same widget that is used by
#GtkFileChooserDialog.
#NAME: lookup_callback_symbol
#PARENT: Gtk.Builder.lookup_callback_symbol
#COMMENT: The callback symbol in @builder for @callback_name, or %NULL
#NAME: new_with_model
#PARENT: Gtk.IconView.new_with_model
#COMMENT: A newly created #GtkIconView widget.
#NAME: settings
#PARENT: Gtk.PrintSettings.set_bool.none
#COMMENT: a #GtkPrintSettings
#NAME: get_focus_vadjustment
#PARENT: Gtk.Container.get_focus_vadjustment
#COMMENT: the vertical focus adjustment, or %NULL if
  none has been set.
#NAME: height
#PARENT: Gtk.ScrolledWindow.set_min_content_height.none
#COMMENT: the minimal content height
#NAME: get_length
#PARENT: Gtk.SelectionData
#COMMENT: Retrieves the length of the raw data of the selection.
#NAME: top-padding
#PARENT: Gtk.Alignment
#COMMENT: The padding to insert at the top of the widget.
#NAME: bin
#PARENT: Gtk.Bin.get_child.Widget
#COMMENT: a #GtkBin
#NAME: STOCK_MEDIA_PREVIOUS
#PARENT: Gtk
#COMMENT: The “Media Previous” item and icon. The icon has an RTL variant.
#NAME: get_show_size
#PARENT: Gtk.FontButton
#COMMENT: Returns whether the font size will be shown in the label.
#NAME: 
#PARENT: Gtk.Style.get.none...
#COMMENT: pairs of property names and locations to
  return the property values, starting with the location for
  @first_property_name, terminated by %NULL.
#NAME: get_show_numbers
#PARENT: Gtk.RecentAction.get_show_numbers
#COMMENT: %TRUE if numbers should be shown.
#NAME: item
#PARENT: Gtk.Toolbar.insert.none
#COMMENT: a #GtkToolItem
#NAME: model
#PARENT: Gtk.TreeIterCompareFunc.gint
#COMMENT: The #GtkTreeModel the comparison is within
#NAME: remove_shortcut
#PARENT: Gtk.PlacesSidebar
#COMMENT: Removes an application-specific shortcut that has been previously been
inserted with gtk_places_sidebar_add_shortcut().  If the @location is not a
shortcut in the sidebar, then nothing is done.
#NAME: Application
#PARENT: Gtk
#COMMENT: #GtkApplication is a class that handles many important aspects
of a GTK+ application in a convenient fashion, without enforcing
a one-size-fits-all application model.

Currently, GtkApplication handles GTK+ initialization, application
uniqueness, session management, provides some basic scriptability and
desktop shell integration by exporting actions and menus and manages a
list of toplevel windows whose life-cycle is automatically tied to the
life-cycle of your application.

While GtkApplication works fine with plain #GtkWindows, it is recommended
to use it together with #GtkApplicationWindow.

When GDK threads are enabled, GtkApplication will acquire the GDK
lock when invoking actions that arrive from other processes.  The GDK
lock is not touched for local action invocations.  In order to have
actions invoked in a predictable context it is therefore recommended
that the GDK lock be held while invoking actions locally with
g_action_group_activate_action().  The same applies to actions
associated with #GtkApplicationWindow and to the “activate” and
“open” #GApplication methods.

## Automatic resources ## {#automatic-resources}

#GtkApplication will automatically load menus from the #GtkBuilder
file located at "gtk/menus.ui", relative to the application's
resource base path (see g_application_set_resource_base_path()).  The
menu with the ID "app-menu" is taken as the application's app menu
and the menu with the ID "menubar" is taken as the application's
menubar.  Additional menus (most interesting submenus) can be named
and accessed via gtk_application_get_menu_by_id() which allows for
dynamic population of a part of the menu structure.

If the files "gtk/menus-appmenu.ui" or "gtk/menus-traditional.ui" are
present then these files will be used in preference, depending on the
value of gtk_application_prefers_app_menu().

It is also possible to provide the menus manually using
gtk_application_set_app_menu() and gtk_application_set_menubar().

#GtkApplication will also automatically setup an icon search path for
the default icon theme by appending "icons" to the resource base
path.  This allows your application to easily store its icons as
resources.  See gtk_icon_theme_add_resource_path() for more
information.

## A simple application ## {#gtkapplication}

[A simple example](https://git.gnome.org/browse/gtk+/tree/examples/bp/bloatpad.c)

GtkApplication optionally registers with a session manager
of the users session (if you set the #GtkApplication:register-session
property) and offers various functionality related to the session
life-cycle.

An application can block various ways to end the session with
the gtk_application_inhibit() function. Typical use cases for
this kind of inhibiting are long-running, uninterruptible operations,
such as burning a CD or performing a disk backup. The session
manager may not honor the inhibitor, but it can be expected to
inform the user about the negative consequences of ending the
session while inhibitors are present.

## See Also ## {#seealso}
[HowDoI: Using GtkApplication](https://wiki.gnome.org/HowDoI/GtkApplication),
[Getting Started with GTK+: Basics](https://developer.gnome.org/gtk3/stable/gtk-getting-started.html#id-1.2.3.3)
#NAME: wait_is_text_available
#PARENT: Gtk.Clipboard.wait_is_text_available
#COMMENT: %TRUE is there is text available, %FALSE otherwise.
#NAME: set_background_icon_name
#PARENT: Gtk.NumerableIcon
#COMMENT: Updates the icon to use the icon named @icon_name from the
current icon theme as the base background image. If @icon_name
is %NULL, @self will go back using style information or default
theming for its background image.

If this method is called and a #GIcon was already set as
background for the icon, @icon_name will be used, i.e. the
last method called between gtk_numerable_icon_set_background_icon_name()
and gtk_numerable_icon_set_background_gicon() has always priority.
#NAME: gtk-primary-button-warps-slider
#PARENT: Gtk.Settings
#COMMENT: Whether a click in a #GtkRange trough should scroll to the click position or
scroll by a single page in the respective direction.
#NAME: drag_begin_with_coordinates
#PARENT: Gtk.Widget
#COMMENT: Initiates a drag on the source side. The function only needs to be used
when the application is starting drags itself, and is not needed when
gtk_drag_source_set() is used.

The @event is used to retrieve the timestamp that will be used internally to
grab the pointer.  If @event is %NULL, then %GDK_CURRENT_TIME will be used.
However, you should try to pass a real event in all cases, since that can be
used to get information about the drag.

Generally there are three cases when you want to start a drag by hand by
calling this function:

1. During a #GtkWidget::button-press-event handler, if you want to start a drag
immediately when the user presses the mouse button.  Pass the @event
that you have in your #GtkWidget::button-press-event handler.

2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
when the mouse moves past a certain threshold distance after a button-press.
Pass the @event that you have in your #GtkWidget::motion-notify-event handler.

3. During a timeout handler, if you want to start a drag after the mouse
button is held down for some time.  Try to save the last event that you got
from the mouse, using gdk_event_copy(), and pass it to this function
(remember to free the event with gdk_event_free() when you are done).
If you can really not pass a real event, pass #NULL instead.
#NAME: application
#PARENT: Gtk.Application.get_app_menu.Gio.MenuModel
#COMMENT: a #GtkApplication
#NAME: n_entries
#PARENT: Gtk.ActionGroup.add_radio_actions.none
#COMMENT: the number of entries
#NAME: get_take_focus
#PARENT: Gtk.MenuShell.get_take_focus
#COMMENT: %TRUE if the menu shell will take the keyboard focus on popup.
#NAME: use-popover
#PARENT: Gtk.MenuButton
#COMMENT: Whether to construct a #GtkPopover from the menu model,
or a #GtkMenu.
#NAME: display_name
#PARENT: Gtk.PaperSize.new_custom.PaperSize
#COMMENT: the human-readable name
#NAME: handle_box
#PARENT: Gtk.HandleBox.get_child_detached.gboolean
#COMMENT: a #GtkHandleBox
#NAME: RecentInfo
#PARENT: Gtk
#COMMENT: #GtkRecentInfo-struct contains private data only, and should
be accessed using the provided API.

#GtkRecentInfo constains all the meta-data
associated with an entry in the recently used files list.
#NAME: widget
#PARENT: Gtk.WidgetClass.map.map.none
#COMMENT: a #GtkWidget
#NAME: area
#PARENT: Gtk.CellAreaClass.render.render.none
#COMMENT: a #GtkCellArea
#NAME: icon
#PARENT: Gtk.Image.set_from_gicon.none
#COMMENT: an icon
#NAME: get_indent
#PARENT: Gtk.TextView.get_indent
#COMMENT: number of pixels of indentation
#NAME: parent_class
#PARENT: Gtk.FileChooserButtonClass
#COMMENT: The parent class.
#NAME: adjustment
#PARENT: Gtk.AdjustmentClass.value_changed.value_changed.none
#COMMENT: a #GtkAdjustment
#NAME: targets
#PARENT: Gtk.Widget.drag_begin.Gdk.DragContext
#COMMENT: The targets (data formats) in which the
   source can provide the data
#NAME: gap_side
#PARENT: Gtk.render_frame_gap.none
#COMMENT: side where the gap is
#NAME: new_with_area
#PARENT: Gtk.EntryCompletion.new_with_area
#COMMENT: A newly created #GtkEntryCompletion object
#NAME: entry
#PARENT: Gtk.Entry.set_placeholder_text.none
#COMMENT: a #GtkEntry
#NAME: new_with_area
#PARENT: Gtk.ComboBox
#COMMENT: Creates a new empty #GtkComboBox using @area to layout cells.
#NAME: menushell
#PARENT: Gtk.IMMulticontext.append_menuitems.none
#COMMENT: a #GtkMenuShell
#NAME: remove-tag
#PARENT: Gtk.TextBuffer
#COMMENT: The ::remove-tag signal is emitted to remove all occurrences of @tag from
a range of text in a #GtkTextBuffer.
Removal actually occurs in the default handler.

Note that if your handler runs before the default handler it must not
invalidate the @start and @end iters (or has to revalidate them).

See also:
gtk_text_buffer_remove_tag().
#NAME: STYLE_CLASS_SCALE_HAS_MARKS_ABOVE
#PARENT: Gtk
#COMMENT: A CSS class to match scale widgets with marks attached,
all the marks are above for horizontal #GtkScale.
left for vertical #GtkScale.
#NAME: surface
#PARENT: Gtk.drag_set_icon_surface.none
#COMMENT: the surface to use as icon
#NAME: stock_id
#PARENT: Gtk.Style.lookup_icon_set.IconSet
#COMMENT: an icon name
#NAME: target
#PARENT: Gtk.selection_add_target.none
#COMMENT: target to add.
#NAME: set_current_folder_file
#PARENT: Gtk.FileChooser
#COMMENT: Sets the current folder for @chooser from a #GFile.
Internal function, see gtk_file_chooser_set_current_folder_uri().
#NAME: wait_is_image_available
#PARENT: Gtk.Clipboard
#COMMENT: Test to see if there is an image available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains any of the supported image targets. This function
waits for the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.

This function is a little faster than calling
gtk_clipboard_wait_for_image() since it doesn’t need to retrieve
the actual image data.
#NAME: choose_icon_for_scale
#PARENT: Gtk.IconTheme.choose_icon_for_scale
#COMMENT: a #GtkIconInfo object
    containing information about the icon, or %NULL if the
    icon wasn’t found.
#NAME: new
#PARENT: Gtk.StyleProperties
#COMMENT: Returns a newly created #GtkStyleProperties
#NAME: get_has_window
#PARENT: Gtk.Widget.get_has_window
#COMMENT: %TRUE if @widget has a window, %FALSE otherwise
#NAME: op
#PARENT: Gtk.MountOperation.set_screen.none
#COMMENT: a #GtkMountOperation
#NAME: type
#PARENT: Gtk.ScrolledWindow.set_shadow_type.none
#COMMENT: kind of shadow to draw around scrolled window contents
#NAME: new_from_file
#PARENT: Gtk.StatusIcon.new_from_file
#COMMENT: a new #GtkStatusIcon
#NAME: expand
#PARENT: Gtk.Widget.set_hexpand.none
#COMMENT: whether to expand
#NAME: uppercase_chars
#PARENT: Gtk.InputHints
#COMMENT: Suggest to capitalize all text
#NAME: iter
#PARENT: Gtk.TextIter.has_tag.gboolean
#COMMENT: an iterator
#NAME: get_row_span_column
#PARENT: Gtk.ComboBox
#COMMENT: Returns the column with row span information for @combo_box.
#NAME: item-activated
#PARENT: Gtk.RecentChooser
#COMMENT: This signal is emitted when the user "activates" a recent item
in the recent chooser.  This can happen by double-clicking on an item
in the recently used resources list, or by pressing
`Enter`.
#NAME: icon_pos
#PARENT: Gtk.Entry.set_icon_from_pixbuf.none
#COMMENT: Icon position
#NAME: targets_include_uri
#PARENT: Gtk
#COMMENT: Determines if any of the targets in @targets can be used to
provide an uri list.
#NAME: position
#PARENT: Gtk.ListStore.insert.none
#COMMENT: position to insert the new row, or -1 for last
#NAME: wide-handle
#PARENT: Gtk.Paned
#COMMENT: Setting this property to %TRUE indicates that the paned needs
to provide stronger visual separation (e.g. because it separates
between two notebooks, whose tab rows would otherwise merge visually).
#NAME: get_use_underline
#PARENT: Gtk.ToolButton.get_use_underline
#COMMENT: %TRUE if underscores in the label property are used as
mnemonics on menu items on the overflow menu.
#NAME: path
#PARENT: Gtk.TreeView.row-collapsed.none
#COMMENT: a tree path that points to the row
#NAME: clipboard
#PARENT: Gtk.ClipboardClearFunc.none
#COMMENT: the #GtkClipboard
#NAME: parent
#PARENT: Gtk.MenuDirectionType
#COMMENT: To the parent menu shell
#NAME: cancel
#PARENT: Gtk.MenuShell
#COMMENT: An action signal which cancels the selection within the menu shell.
Causes the #GtkMenuShell::selection-done signal to be emitted.
#NAME: child
#PARENT: Gtk.Notebook.get_menu_label.Widget
#COMMENT: a widget contained in a page of @notebook
#NAME: self
#PARENT: Gtk.NumerableIcon.get_background_gicon.Gio.Icon
#COMMENT: a #GtkNumerableIcon
#NAME: notify
#PARENT: Gtk.Widget.add_tick_callback.guint
#COMMENT: function to call to free @user_data when the callback is removed.
#NAME: icon_view
#PARENT: Gtk.IconView.get_item_padding.gint
#COMMENT: a #GtkIconView
#NAME: user_data
#PARENT: Gtk.TextIter.forward_find_char.gboolean
#COMMENT: user data for @pred
#NAME: detail
#PARENT: Gtk.paint_handle.none
#COMMENT: a style detail
#NAME: unit
#PARENT: Gtk.PageSetup.get_left_margin.gdouble
#COMMENT: the unit for the return value
#NAME: x1
#PARENT: Gtk.paint_hline.none
#COMMENT: the starting x coordinate
#NAME: get_current_event
#PARENT: Gtk
#COMMENT: Obtains a copy of the event currently being processed by GTK+.

For example, if you are handling a #GtkButton::clicked signal,
the current event will be the #GdkEventButton that triggered
the ::clicked signal.
#NAME: x2
#PARENT: Gtk.paint_hline.none
#COMMENT: the ending x coordinate
#NAME: set_fit_model
#PARENT: Gtk.CellView
#COMMENT: Sets whether @cell_view should request space to fit the entire #GtkTreeModel.

This is used by #GtkComboBox to ensure that the cell view displayed on
the combo box’s button always gets enough space and does not resize
when selection changes.
#NAME: on_change
#PARENT: Gtk.ActionGroup.add_radio_actions.none
#COMMENT: the callback to connect to the changed signal
#NAME: pixbuf
#PARENT: Gtk.Entry.set_icon_from_pixbuf.none
#COMMENT: A #GdkPixbuf, or %NULL
#NAME: resource_path
#PARENT: Gtk.Image.set_from_resource.none
#COMMENT: a resource path or %NULL
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_resizable.none
#COMMENT: A #GtkTreeViewColumn
#NAME: widget
#PARENT: Gtk.Widget.grab_default.none
#COMMENT: a #GtkWidget
#NAME: pos
#PARENT: Gtk.TreeView.get_drag_dest_row.none
#COMMENT: Return location for the drop position, or %NULL
#NAME: get_vadjustment
#PARENT: Gtk.TreeView.get_vadjustment
#COMMENT: A #GtkAdjustment object, or %NULL
    if none is currently being used.
#NAME: corner_topleft
#PARENT: Gtk.JunctionSides
#COMMENT: Element connects on the top-left corner.
#NAME: MenuDirectionType
#PARENT: Gtk
#COMMENT: An enumeration representing directional movements within a menu.
#NAME: tree_model
#PARENT: Gtk.TreeModel.iter_n_children.gint
#COMMENT: a #GtkTreeModel
#NAME: clipboard
#PARENT: Gtk.Clipboard.wait_for_image.GdkPixbuf.Pixbuf
#COMMENT: a #GtkClipboard
#NAME: gesture
#PARENT: Gtk.GestureSingle.set_exclusive.none
#COMMENT: a #GtkGestureSingle
#NAME: scroll_to_path
#PARENT: Gtk.IconView
#COMMENT: Moves the alignments of @icon_view to the position specified by @path.
@row_align determines where the row is placed, and @col_align determines
where @column is placed.  Both are expected to be between 0.0 and 1.0.
0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means
center.

If @use_align is %FALSE, then the alignment arguments are ignored, and the
tree does the minimum amount of work to scroll the item onto the screen.
This means that the item will be scrolled to the edge closest to its current
position.  If the item is currently visible on the screen, nothing is done.

This function only works if the model is set, and @path is a valid row on
the model. If the model changes before the @icon_view is realized, the
centered path will be modified to reflect this change.
#NAME: get_wrap_mode
#PARENT: Gtk.TextView.get_wrap_mode
#COMMENT: the line wrap setting
#NAME: get_fixed_height_mode
#PARENT: Gtk.TreeView
#COMMENT: Returns whether fixed height mode is turned on for @tree_view.
#NAME: STOCK_MEDIA_REWIND
#PARENT: Gtk
#COMMENT: The “Media Rewind” item and icon. The icon has an RTL variant.
#NAME: in_destruction
#PARENT: Gtk.Widget
#COMMENT: Returns whether the widget is currently being destroyed.
This information can sometimes be used to avoid doing
unnecessary work.
#NAME: property_value
#PARENT: Gtk.rc_property_parse_enum.gboolean
#COMMENT: a #GValue which must hold enum values.
#NAME: info_bar
#PARENT: Gtk.InfoBar.get_message_type.MessageType
#COMMENT: a #GtkInfoBar
#NAME: char_offset
#PARENT: Gtk.TextBuffer.get_iter_at_line_offset.none
#COMMENT: char offset from start of line
#NAME: engine
#PARENT: Gtk.ThemingEngine.get_property.none
#COMMENT: a #GtkThemingEngine
#NAME: settings
#PARENT: Gtk.icon_size_lookup_for_settings.gboolean
#COMMENT: a #GtkSettings object, used to determine
  which set of user preferences to used.
#NAME: name
#PARENT: Gtk.BuildableIface.set_name.set_name.none
#COMMENT: name to set
#NAME: res
#PARENT: Gtk.IconInfo.load_symbolic_for_context_finish.GdkPixbuf.Pixbuf
#COMMENT: a #GAsyncResult
#NAME: char_on_line
#PARENT: Gtk.TextIter.set_visible_line_offset.none
#COMMENT: a character offset
#NAME: status-string
#PARENT: Gtk.PrintOperation
#COMMENT: A string representation of the status of the print operation.
The string is translated and suitable for displaying the print
status e.g. in a #GtkStatusbar.

See the #GtkPrintOperation:status property for a status value that
is suitable for programmatic use.
#NAME: end
#PARENT: Gtk.TextBufferSerializeFunc.guint8
#COMMENT: end of the block of text to serialize
#NAME: event
#PARENT: Gtk.Widget.proximity-out-event.gboolean
#COMMENT: the #GdkEventProximity which triggered
  this signal.
#NAME: toggle
#PARENT: Gtk.CellRendererToggle.get_activatable.gboolean
#COMMENT: a #GtkCellRendererToggle
#NAME: get_alignment
#PARENT: Gtk.Button
#COMMENT: Gets the alignment of the child in the button.
#NAME: add_objects_from_string
#PARENT: Gtk.Builder
#COMMENT: Parses a string containing a [GtkBuilder UI definition][BUILDER-UI]
building only the requested objects and merges
them with the current contents of @builder.

Upon errors 0 will be returned and @error will be assigned a
#GError from the #GTK_BUILDER_ERROR or #G_MARKUP_ERROR domain.

If you are adding an object that depends on an object that is not
its child (for instance a #GtkTreeView that depends on its
#GtkTreeModel), you have to explicitly list all of them in @object_ids.
#NAME: settings
#PARENT: Gtk.print_run_page_setup_dialog.PageSetup
#COMMENT: a #GtkPrintSettings
#NAME: test_text_get
#PARENT: Gtk.test_text_get
#COMMENT: new 0-terminated C string, needs to be released with g_free().
#NAME: unset
#PARENT: Gtk.PrintSettings
#COMMENT: Removes any value associated with @key.
This has the same effect as setting the value to %NULL.
#NAME: new_with_mnemonic
#PARENT: Gtk.ImageMenuItem
#COMMENT: Creates a new #GtkImageMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.
#NAME: forward_visible_cursor_positions
#PARENT: Gtk.TextIter
#COMMENT: Moves up to @count visible cursor positions. See
gtk_text_iter_forward_cursor_position() for details.
#NAME: new_with_buffer
#PARENT: Gtk.TextView
#COMMENT: Creates a new #GtkTextView widget displaying the buffer
@buffer. One buffer can be shared among many widgets.
@buffer may be %NULL to create a default buffer, in which case
this function is equivalent to gtk_text_view_new(). The
text view adds its own reference count to the buffer; it does not
take over an existing reference.
#NAME: widget
#PARENT: Gtk.CellRendererClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: the #GtkWidget this cell will be rendering to
#NAME: color
#PARENT: Gtk.StyleContext.lookup_color.gboolean
#COMMENT: Return location for the looked up color
#NAME: 
#PARENT: Gtk.TextBuffer.create_tag.TextTag...
#COMMENT: %NULL-terminated list of property names and values
#NAME: cell-background-rgba
#PARENT: Gtk.CellRenderer
#COMMENT: Cell background as a #GdkRGBA
#NAME: setup
#PARENT: Gtk.PageSetup.get_paper_size.PaperSize
#COMMENT: a #GtkPageSetup
#NAME: delete_event
#PARENT: Gtk.ResponseType
#COMMENT: Returned if the dialog is deleted
#NAME: get_level_indentation
#PARENT: Gtk.TreeView.get_level_indentation
#COMMENT: the amount of extra indentation for child levels in
@tree_view.  A return value of 0 means that this feature is disabled.
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_attributes.none
#COMMENT: A #GtkTreeViewColumn
#NAME: button
#PARENT: Gtk.ColorButton.set_title.none
#COMMENT: a #GtkColorButton
#NAME: cell
#PARENT: Gtk.CellRenderer.get_fixed_size.none
#COMMENT: A #GtkCellRenderer
#NAME: widget_type
#PARENT: Gtk.Style.get_style_property.none
#COMMENT: the #GType of a descendant of #GtkWidget
#NAME: destroy
#PARENT: Gtk.TreeView.set_column_drag_function.none
#COMMENT: Destroy notifier for @user_data, or %NULL
#NAME: model
#PARENT: Gtk.TreeViewRowSeparatorFunc.gboolean
#COMMENT: the #GtkTreeModel
#NAME: get_ui
#PARENT: Gtk.UIManager.get_ui
#COMMENT: A newly allocated string containing an XML representation of
the merged UI.
#NAME: set_lower_stepper_sensitivity
#PARENT: Gtk.Range
#COMMENT: Sets the sensitivity policy for the stepper that points to the
'lower' end of the GtkRange’s adjustment.
#NAME: visible
#PARENT: Gtk.SearchBar.set_show_close_button.none
#COMMENT: whether the close button will be shown or not
#NAME: backward_visible_line
#PARENT: Gtk.TextIter.backward_visible_line
#COMMENT: whether @iter moved
#NAME: init_with_args
#PARENT: Gtk.init_with_args
#COMMENT: %TRUE if the windowing system has been successfully
    initialized, %FALSE otherwise
#NAME: user_data
#PARENT: Gtk.FlowBox.set_sort_func.none
#COMMENT: user data passed to @sort_func
#NAME: set_error
#PARENT: Gtk.GLArea
#COMMENT: Sets an error on the area which will be shown instead of the
GL rendering. This is useful in the #GtkGLArea::create-context
signal if GL context creation fails.
#NAME: text
#PARENT: Gtk.ModelButton
#COMMENT: The label for the button.
#NAME: x
#PARENT: Gtk.StatusIcon.position_menu.none
#COMMENT: return location for the x position
#NAME: area
#PARENT: Gtk.CellArea.add.none
#COMMENT: a #GtkCellArea
#NAME: new
#PARENT: Gtk.Overlay.new
#COMMENT: a new #GtkOverlay object.
#NAME: y
#PARENT: Gtk.StatusIcon.position_menu.none
#COMMENT: return location for the y position
#NAME: get_display_name
#PARENT: Gtk.RecentInfo.get_display_name
#COMMENT: the display name of the resource. The returned string
  is owned by the recent manager, and should not be freed.
#NAME: tag
#PARENT: Gtk.TextTagClass.event.event.gboolean
#COMMENT: a #GtkTextTag
#NAME: icon_name
#PARENT: Gtk.ToolButton.set_icon_name.none
#COMMENT: the name of the themed icon
#NAME: hide-titlebar-when-maximized
#PARENT: Gtk.Window
#COMMENT: Whether the titlebar should be hidden during maximization.
#NAME: chars
#PARENT: Gtk.EntryBuffer.set_text.none
#COMMENT: the new text
#NAME: height
#PARENT: Gtk.CellRendererClass.get_preferred_width_for_height.get_preferred_width_for_height.none
#COMMENT: the size which is available for allocation
#NAME: get_line
#PARENT: Gtk.TextIter.get_line
#COMMENT: a line number
#NAME: copy
#PARENT: Gtk.TreeIter.copy
#COMMENT: a newly-allocated copy of @iter
#NAME: add
#PARENT: Gtk.TextTagTable.add
#COMMENT: %TRUE on success.
#NAME: toolbar
#PARENT: Gtk.Toolbar.get_relief_style.ReliefStyle
#COMMENT: a #GtkToolbar
#NAME: accel_label
#PARENT: Gtk.AccelLabel.set_accel_widget.none
#COMMENT: a #GtkAccelLabel
#NAME: sort_column_id
#PARENT: Gtk.TreeSortableIface.set_sort_func.set_sort_func.none
#COMMENT: the sort column id to set the function for
#NAME: action_group
#PARENT: Gtk.ActionGroup.add_radio_actions.none
#COMMENT: the action group
#NAME: container
#PARENT: Gtk.Container.get_focus_hadjustment.Adjustment
#COMMENT: a #GtkContainer
#NAME: collapse_all
#PARENT: Gtk.TreeView
#COMMENT: Recursively collapses all visible, expanded nodes in @tree_view.
#NAME: b
#PARENT: Gtk.HSV.to_rgb.none
#COMMENT: Return value for the blue component
#NAME: remove_widget
#PARENT: Gtk.CellEditable
#COMMENT: Emits the #GtkCellEditable::remove-widget signal.
#NAME: get_deleted
#PARENT: Gtk.TextChildAnchor.get_deleted
#COMMENT: %TRUE if the child anchor has been deleted from its buffer
#NAME: widget
#PARENT: Gtk.paint_box_gap.none
#COMMENT: the widget
#NAME: targets_include_uri
#PARENT: Gtk.targets_include_uri
#COMMENT: %TRUE if @targets include a suitable target for uri lists,
  otherwise %FALSE.
#NAME: save
#PARENT: Gtk.AccelMap
#COMMENT: Saves current accelerator specifications (accelerator path, key
and modifiers) to @file_name.
The file is written in a format suitable to be read back in by
gtk_accel_map_load().
#NAME: box
#PARENT: Gtk.ListBox.get_selection_mode.SelectionMode
#COMMENT: a #GtkListBox
#NAME: child
#PARENT: Gtk.ListBox.prepend.none
#COMMENT: the #GtkWidget to add
#NAME: menu_label
#PARENT: Gtk.Notebook.set_menu_label.none
#COMMENT: the menu label, or %NULL for default
#NAME: STYLE_CLASS_DOCK
#PARENT: Gtk
#COMMENT: A CSS class defining a dock area.

This is used by #GtkHandleBox.
#NAME: menu_item
#PARENT: Gtk.MenuItemClass.set_label.set_label.none
#COMMENT: a #GtkMenuItem
#NAME: allow-async
#PARENT: Gtk.PrintOperation
#COMMENT: Determines whether the print operation may run asynchronously or not.

Some systems don't support asynchronous printing, but those that do
will return %GTK_PRINT_OPERATION_RESULT_IN_PROGRESS as the status, and
emit the #GtkPrintOperation::done signal when the operation is actually
done.

The Windows port does not support asynchronous operation at all (this
is unlikely to change). On other platforms, all actions except for
%GTK_PRINT_OPERATION_ACTION_EXPORT support asynchronous operation.
#NAME: new
#PARENT: Gtk.TextTag
#COMMENT: Creates a #GtkTextTag. Configure the tag using object arguments,
i.e. using g_object_set().
#NAME: tree_store
#PARENT: Gtk.TreeStore.iter_is_valid.gboolean
#COMMENT: A #GtkTreeStore.
#NAME: uri
#PARENT: Gtk.LinkButton
#COMMENT: The URI bound to this button.
#NAME: g
#PARENT: Gtk.HSV.to_rgb.none
#COMMENT: Return value for the green component
#NAME: h
#PARENT: Gtk.HSV.to_rgb.none
#COMMENT: Hue
#NAME: icon_view
#PARENT: Gtk.IconView.set_activate_on_single_click.none
#COMMENT: a #GtkIconView
#NAME: bar
#PARENT: Gtk.SearchBar.get_search_mode.gboolean
#COMMENT: a #GtkSearchBar
#NAME: action
#PARENT: Gtk.ToggleAction.set_active.none
#COMMENT: the action object
#NAME: get
#PARENT: Gtk.TreeModel
#COMMENT: Gets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by a place to store the value being
retrieved.  The list is terminated by a -1. For example, to get a
value from column 0 with type %G_TYPE_STRING, you would
write: `gtk_tree_model_get (model, iter, 0, &place_string_here, -1)`,
where `place_string_here` is a #gchararray
to be filled with the string.

Returned values with type %G_TYPE_OBJECT have to be unreferenced,
values with type %G_TYPE_STRING or %G_TYPE_BOXED have to be freed.
Other values are passed by value.
#NAME: get_show_recommended
#PARENT: Gtk.AppChooserWidget.get_show_recommended
#COMMENT: the value of #GtkAppChooserWidget:show-recommended
#NAME: proximity-out-event
#PARENT: Gtk.Widget
#COMMENT: To receive this signal the #GdkWindow associated to the widget needs
to enable the #GDK_PROXIMITY_OUT_MASK mask.

This signal will be sent to the grab widget if there is one.
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.get_column_type.get_column_type.GType
#COMMENT: a #GtkTreeModel
#NAME: widget
#PARENT: Gtk.paint_shadow.none
#COMMENT: the widget
#NAME: mime_type
#PARENT: Gtk.RecentFilter.add_mime_type.none
#COMMENT: a MIME type
#NAME: get_bin_window
#PARENT: Gtk.Viewport
#COMMENT: Gets the bin window of the #GtkViewport.
#NAME: about
#PARENT: Gtk.AboutDialog.set_authors.none
#COMMENT: a #GtkAboutDialog
#NAME: len
#PARENT: Gtk.IMContext.set_surrounding.none
#COMMENT: the length of @text, or -1 if @text is nul-terminated
#NAME: window
#PARENT: Gtk.Window.get_icon.GdkPixbuf.Pixbuf
#COMMENT: a #GtkWindow
#NAME: word_completion
#PARENT: Gtk.InputHints
#COMMENT: Suggest word completion
#NAME: prepend_page_menu
#PARENT: Gtk.Notebook
#COMMENT: Prepends a page to @notebook, specifying the widget to use as the
label in the popup menu.
#NAME: STOCK_HARDDISK
#PARENT: Gtk
#COMMENT: The “Harddisk” item and icon.
#NAME: CellRendererSpinner
#PARENT: Gtk
#COMMENT: GtkCellRendererSpinner renders a spinning animation in a cell, very
similar to #GtkSpinner. It can often be used as an alternative
to a #GtkCellRendererProgress for displaying indefinite activity,
instead of actual progress.

To start the animation in a cell, set the #GtkCellRendererSpinner:active
property to %TRUE and increment the #GtkCellRendererSpinner:pulse property
at regular intervals. The usual way to set the cell renderer properties
for each cell is to bind them to columns in your tree model using e.g.
gtk_tree_view_column_add_attribute().
#NAME: name
#PARENT: Gtk.Builder.expose_object.none
#COMMENT: the name of the object exposed to the builder
#NAME: cell_layout
#PARENT: Gtk.CellLayoutIface.clear.clear.none
#COMMENT: a #GtkCellLayout
#NAME: scrolled_window
#PARENT: Gtk.ScrolledWindow.set_vadjustment.none
#COMMENT: a #GtkScrolledWindow
#NAME: target
#PARENT: Gtk.TargetPair
#COMMENT: #GdkAtom representation of the target type
#NAME: r
#PARENT: Gtk.HSV.to_rgb.none
#COMMENT: Return value for the red component
#NAME: get_popup
#PARENT: Gtk.ScaleButton
#COMMENT: Retrieves the popup of the #GtkScaleButton.
#NAME: child
#PARENT: Gtk.Stack.set_visible_child.none
#COMMENT: a child of @stack
#NAME: s
#PARENT: Gtk.HSV.to_rgb.none
#COMMENT: Saturation
#NAME: get_extra_widget
#PARENT: Gtk.FileChooser
#COMMENT: Gets the current preview widget; see
gtk_file_chooser_set_extra_widget().
#NAME: TextBufferTargetInfo
#PARENT: Gtk
#COMMENT: These values are used as “info” for the targets contained in the
lists returned by gtk_text_buffer_get_copy_target_list() and
gtk_text_buffer_get_paste_target_list().

The values counts down from `-1` to avoid clashes
with application added drag destinations which usually start at 0.
#NAME: iter
#PARENT: Gtk.TextIter.get_line_index.gint
#COMMENT: an iterator
#NAME: cell
#PARENT: Gtk.TreeCellDataFunc.none
#COMMENT: The #GtkCellRenderer that is being rendered by @tree_column
#NAME: get_model
#PARENT: Gtk.TreeRowReference
#COMMENT: Returns the model that the row reference is monitoring.
#NAME: widget
#PARENT: Gtk.Widget.set_margin_start.none
#COMMENT: a #GtkWidget
#NAME: AccelMap
#PARENT: Gtk
#COMMENT: Accelerator maps are used to define runtime configurable accelerators.
Functions for manipulating them are are usually used by higher level
convenience mechanisms like #GtkUIManager and are thus considered
“low-level”. You’ll want to use them if you’re manually creating menus that
should have user-configurable accelerators.

An accelerator is uniquely defined by:
- accelerator path
- accelerator key
- accelerator modifiers

The accelerator path must consist of
“<WINDOWTYPE>/Category1/Category2/.../Action”, where WINDOWTYPE
should be a unique application-specific identifier that corresponds
to the kind of window the accelerator is being used in, e.g.
“Gimp-Image”, “Abiword-Document” or “Gnumeric-Settings”.
The “Category1/.../Action” portion is most appropriately chosen by
the action the accelerator triggers, i.e. for accelerators on menu
items, choose the item’s menu path, e.g. “File/Save As”,
“Image/View/Zoom” or “Edit/Select All”. So a full valid accelerator
path may look like: “<Gimp-Toolbox>/File/Dialogs/Tool Options...”.

All accelerators are stored inside one global #GtkAccelMap that can
be obtained using gtk_accel_map_get(). See
[Monitoring changes][monitoring-changes] for additional
details.

# Manipulating accelerators

New accelerators can be added using gtk_accel_map_add_entry().
To search for specific accelerator, use gtk_accel_map_lookup_entry().
Modifications of existing accelerators should be done using
gtk_accel_map_change_entry().

In order to avoid having some accelerators changed, they can be
locked using gtk_accel_map_lock_path(). Unlocking is done using
gtk_accel_map_unlock_path().

# Saving and loading accelerator maps

Accelerator maps can be saved to and loaded from some external
resource. For simple saving and loading from file,
gtk_accel_map_save() and gtk_accel_map_load() are provided.
Saving and loading can also be done by providing file descriptor
to gtk_accel_map_save_fd() and gtk_accel_map_load_fd().

# Monitoring changes

#GtkAccelMap object is only useful for monitoring changes of
accelerators. By connecting to #GtkAccelMap::changed signal, one
can monitor changes of all accelerators. It is also possible to
monitor only single accelerator path by using it as a detail of
the #GtkAccelMap::changed signal.
#NAME: add_named
#PARENT: Gtk.Stack
#COMMENT: Adds a child to @stack.
The child is identified by the @name.
#NAME: stock_id
#PARENT: Gtk.Widget.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a stock ID
#NAME: v
#PARENT: Gtk.HSV.to_rgb.none
#COMMENT: Value
#NAME: tooltip
#PARENT: Gtk.TreeView.set_tooltip_row.none
#COMMENT: a #GtkTooltip
#NAME: can-activate-accel
#PARENT: Gtk.Widget.can-activate-accel
#COMMENT: %TRUE if the signal can be activated.
#NAME: time_
#PARENT: Gtk.selection_owner_set_for_display.gboolean
#COMMENT: timestamp with which to claim the selection
#NAME: new_from_resource
#PARENT: Gtk.Builder.new_from_resource
#COMMENT: a #GtkBuilder containing the described interface
#NAME: iter
#PARENT: Gtk.TreeModelIface.get_path.get_path.TreePath
#COMMENT: the #GtkTreeIter-struct
#NAME: signal_desc
#PARENT: Gtk.BindingEntry.add_signal_from_string.GLib.TokenType
#COMMENT: a signal description
#NAME: activatable
#PARENT: Gtk.Activatable.sync_action_properties.none
#COMMENT: a #GtkActivatable
#NAME: data
#PARENT: Gtk.IconViewForeachFunc.none
#COMMENT: user data
#NAME: x
#PARENT: Gtk.Layout.move.none
#COMMENT: X position to move to
#NAME: new_with_range
#PARENT: Gtk.SpinButton.new_with_range
#COMMENT: The new spin button as a #GtkWidget
#NAME: set_accels_for_action
#PARENT: Gtk.Application
#COMMENT: Sets zero or more keyboard accelerators that will trigger the
given action. The first item in @accels will be the primary
accelerator, which may be displayed in the UI.

To remove all accelerators for an action, use an empty, zero-terminated
array for @accels.
#NAME: y
#PARENT: Gtk.Layout.move.none
#COMMENT: Y position to move to
#NAME: get_accessible
#PARENT: Gtk.Widget
#COMMENT: Returns the accessible object that describes the widget to an
assistive technology.

If accessibility support is not available, this #AtkObject
instance may be a no-op. Likewise, if no class-specific #AtkObject
implementation is available for the widget instance in question,
it will inherit an #AtkObject implementation from the first ancestor
class for which such an implementation is defined.

The documentation of the
[ATK](http://developer.gnome.org/atk/stable/)
library contains more information about accessible objects and their uses.
#NAME: child
#PARENT: Gtk.ListBox.insert.none
#COMMENT: the #GtkWidget to add
#NAME: button
#PARENT: Gtk.ButtonClass.enter.enter.none
#COMMENT: The #GtkButton you want to send the signal to.
#NAME: STYLE_CLASS_TITLE
#PARENT: Gtk
#COMMENT: A CSS class used for the title label in a titlebar in
a toplevel window.
#NAME: completion
#PARENT: Gtk.Entry.set_completion.none
#COMMENT: The #GtkEntryCompletion or %NULL
#NAME: callback
#PARENT: Gtk.Container.forall.none
#COMMENT: a callback
#NAME: format-entry-text
#PARENT: Gtk.ComboBox
#COMMENT: For combo boxes that are created with an entry (See GtkComboBox:has-entry).

A signal which allows you to change how the text displayed in a combo box's
entry is displayed.

Connect a signal handler which returns an allocated string representing
@path. That string will then be used to set the text in the combo box's entry.
The default signal handler uses the text from the GtkComboBox::entry-text-column
model column.

Here's an example signal handler which fetches data from the model and
displays it in the entry.
|[<!-- language="C" -->
static gchar*
format_entry_text_callback (GtkComboBox *combo,
                            const gchar *path,
                            gpointer     user_data)
{
  GtkTreeIter iter;
  GtkTreeModel model;
  gdouble      value;
  
  model = gtk_combo_box_get_model (combo);

  gtk_tree_model_get_iter_from_string (model, &iter, path);
  gtk_tree_model_get (model, &iter,
                      THE_DOUBLE_VALUE_COLUMN, &value,
                      -1);

  return g_strdup_printf ("%g", value);
}
]|
#NAME: get_visible
#PARENT: Gtk.Widget.get_visible
#COMMENT: %TRUE if the widget is visible
#NAME: context
#PARENT: Gtk.render_activity.none
#COMMENT: a #GtkStyleContext
#NAME: widget
#PARENT: Gtk.test_find_label.Widget
#COMMENT: Valid label or container widget.
#NAME: app_menu
#PARENT: Gtk.Application.set_app_menu.none
#COMMENT: a #GMenuModel, or %NULL
#NAME: set_cursor_visible
#PARENT: Gtk.TextView
#COMMENT: Toggles whether the insertion point is displayed. A buffer with no editable
text probably shouldn’t have a visible cursor, so you may want to turn
the cursor off.
#NAME: parser
#PARENT: Gtk.Buildable.custom_tag_start.gboolean
#COMMENT: a #GMarkupParser to fill in
#NAME: get_geometry
#PARENT: Gtk.StatusIcon.get_geometry
#COMMENT: %TRUE if the location information has
              been filled in
#NAME: dialog
#PARENT: Gtk.FileChooserButton.new_with_dialog.Widget
#COMMENT: the widget to use as dialog
#NAME: set_center_widget
#PARENT: Gtk.Box
#COMMENT: Sets a center widget; that is a child widget that will be
centered with respect to the full width of the box, even
if the children at either side take up different amounts
of space.
#NAME: uri
#PARENT: Gtk.LinkButton.set_uri.none
#COMMENT: a valid URI
#NAME: unset_property
#PARENT: Gtk.StyleProperties
#COMMENT: Unsets a style property in @props.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_remove_class.none
#COMMENT: position to modify, -1 for the path head
#NAME: state_type
#PARENT: Gtk.paint_resize_grip.none
#COMMENT: a state
#NAME: completion
#PARENT: Gtk.EntryCompletionMatchFunc.gboolean
#COMMENT: the #GtkEntryCompletion
#NAME: no-month-change
#PARENT: Gtk.Calendar
#COMMENT: Determines whether the selected month can be changed.
#NAME: iter
#PARENT: Gtk.TextIter.forward_visible_cursor_position.gboolean
#COMMENT: a #GtkTextIter
#NAME: map-event
#PARENT: Gtk.Widget
#COMMENT: The ::map-event signal will be emitted when the @widget's window is
mapped. A window is mapped when it becomes visible on the screen.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask
automatically for all new windows.
#NAME: website_label
#PARENT: Gtk.AboutDialog.set_website_label.none
#COMMENT: the label used for the website link
#NAME: name
#PARENT: Gtk.PaperSize.new_custom.PaperSize
#COMMENT: the paper name
#NAME: icon_view
#PARENT: Gtk.IconView.set_tooltip_column.none
#COMMENT: a #GtkIconView
#NAME: text_view
#PARENT: Gtk.TextView.set_wrap_mode.none
#COMMENT: a #GtkTextView
#NAME: event
#PARENT: Gtk.bindings_activate_event.gboolean
#COMMENT: a #GdkEventKey
#NAME: rc_property_parse_border
#PARENT: Gtk.rc_property_parse_border
#COMMENT: %TRUE if @gstring could be parsed and @property_value
has been set to the resulting #GtkBorder.
#NAME: set_label_widget
#PARENT: Gtk.Expander
#COMMENT: Set the label widget for the expander. This is the widget
that will appear embedded alongside the expander arrow.
#NAME: set_title
#PARENT: Gtk.ColorButton
#COMMENT: Sets the title for the color selection dialog.
#NAME: self
#PARENT: Gtk.AppChooserButton.get_heading.utf8
#COMMENT: a #GtkAppChooserButton
#NAME: new_for_manager
#PARENT: Gtk.RecentChooserWidget
#COMMENT: Creates a new #GtkRecentChooserWidget with a specified recent manager.

This is useful if you have implemented your own recent manager, or if you
have a customized instance of a #GtkRecentManager object.
#NAME: str
#PARENT: Gtk.SelectionData.set_text.gboolean
#COMMENT: a UTF-8 string
#NAME: selected
#PARENT: Gtk.StateType
#COMMENT: State of a selected item, such the selected row in a list.
#NAME: angle
#PARENT: Gtk.GestureRotate.angle-changed.none
#COMMENT: Current angle in radians
#NAME: get_int_with_default
#PARENT: Gtk.PrintSettings
#COMMENT: Returns the value of @key, interpreted as
an integer, or the default value.
#NAME: parent
#PARENT: Gtk.RecentChooserDialog.new_for_manager.Widget
#COMMENT: Transient parent of the dialog, or %NULL,
#NAME: new
#PARENT: Gtk.Separator.new
#COMMENT: a new #GtkSeparator.
#NAME: limit
#PARENT: Gtk.TextIter.forward_find_char.gboolean
#COMMENT: search limit, or %NULL for none
#NAME: first_property_name
#PARENT: Gtk.Container.child_set_valist.none
#COMMENT: the name of the first property to set
#NAME: set_orientation
#PARENT: Gtk.PageSetup
#COMMENT: Sets the page orientation of the #GtkPageSetup.
#NAME: context
#PARENT: Gtk.StyleContext.list_classes.utf8
#COMMENT: a #GtkStyleContext
#NAME: settings
#PARENT: Gtk.rc_get_style_by_paths.Style
#COMMENT: a #GtkSettings object
#NAME: new_with_mnemonic
#PARENT: Gtk.RadioButton.new_with_mnemonic
#COMMENT: a new #GtkRadioButton
#NAME: x
#PARENT: Gtk.Widget.drag-motion.gboolean
#COMMENT: the x coordinate of the current cursor position
#NAME: widget
#PARENT: Gtk.Widget.get_modifier_mask.Gdk.ModifierType
#COMMENT: a #GtkWidget
#NAME: y
#PARENT: Gtk.Widget.drag-motion.gboolean
#COMMENT: the y coordinate of the current cursor position
#NAME: padding_right
#PARENT: Gtk.Alignment.get_padding.none
#COMMENT: location to store the padding
    for the right of the widget, or %NULL
#NAME: area
#PARENT: Gtk.CellArea.foreach.none
#COMMENT: a #GtkCellArea
#NAME: context
#PARENT: Gtk.drag_set_icon_widget.none
#COMMENT: the context for a drag. (This must be called
          with a  context for the source side of a drag)
#NAME: normal
#PARENT: Gtk.RcTokenType
#COMMENT: Deprecated
#NAME: new
#PARENT: Gtk.Window
#COMMENT: Creates a new #GtkWindow, which is a toplevel window that can
contain other widgets. Nearly always, the type of the window should
be #GTK_WINDOW_TOPLEVEL. If you’re implementing something like a
popup menu from scratch (which is a bad idea, just use #GtkMenu),
you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
dialogs, though in some other toolkits dialogs are called “popups”.
In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
On X11, popup windows are not controlled by the
[window manager][gtk-X11-arch].

If you simply want an undecorated window (no window borders), use
gtk_window_set_decorated(), don’t use #GTK_WINDOW_POPUP.

All top-level windows created by gtk_window_new() are stored in
an internal top-level window list.  This list can be obtained from
gtk_window_list_toplevels().  Due to Gtk+ keeping a reference to
the window internally, gtk_window_new() does not return a reference
to the caller.

To delete a #GtkWindow, call gtk_widget_destroy().
#NAME: test_text_get
#PARENT: Gtk
#COMMENT: Retrive the text string of @widget if it is a GtkLabel,
GtkEditable (entry and text widgets) or GtkTextView.
#NAME: modify_cursor
#PARENT: Gtk.Widget
#COMMENT: Sets the cursor color to use in a widget, overriding the #GtkWidget
cursor-color and secondary-cursor-color
style properties.

All other style values are left untouched.
See also gtk_widget_modify_style().
#NAME: menu-model
#PARENT: Gtk.MenuButton
#COMMENT: The #GMenuModel from which the popup will be created.
Depending on the #GtkMenuButton:use-popover property, that may
be a menu or a popover.

See gtk_menu_button_set_menu_model() for the interaction with the
#GtkMenuButton:popup property.
#NAME: Actionable
#PARENT: Gtk
#COMMENT: This interface provides a convenient way of associating widgets with
actions on a #GtkApplicationWindow or #GtkApplication.

It primarily consists of two properties: #GtkActionable:action-name
and #GtkActionable:action-target. There are also some convenience APIs
for setting these properties.

The action will be looked up in action groups that are found among
the widgets ancestors. Most commonly, these will be the actions with
the “win.” or “app.” prefix that are associated with the #GtkApplicationWindow
or "GtkApplication, but other action groups that are added with
gtk_widget_insert_action_group() will be consulted as well.
#NAME: lookup_default
#PARENT: Gtk.IconFactory
#COMMENT: Looks for an icon in the list of default icon factories.  For
display to the user, you should use gtk_style_lookup_icon_set() on
the #GtkStyle for the widget that will display the icon, instead of
using this function directly, so that themes are taken into
account.
#NAME: set_fraction
#PARENT: Gtk.ProgressBar
#COMMENT: Causes the progress bar to “fill in” the given fraction
of the bar. The fraction should be between 0.0 and 1.0,
inclusive.
#NAME: error
#PARENT: Gtk.GLArea.set_error.none
#COMMENT: a new #GError, or %NULL to unset the error
#NAME: set_state
#PARENT: Gtk.Gesture.set_state
#COMMENT: %TRUE if the state of at least one sequence
    was changed successfully
#NAME: recent_data
#PARENT: Gtk.RecentManager.add_full.gboolean
#COMMENT: metadata of the resource
#NAME: tag
#PARENT: Gtk.TextIter.ends_tag.gboolean
#COMMENT: a #GtkTextTag, or %NULL
#NAME: select_all
#PARENT: Gtk.FlowBox
#COMMENT: Select all children of @box, if the selection
mode allows it.
#NAME: buffer
#PARENT: Gtk.EntryBuffer.insert_text.guint
#COMMENT: a #GtkEntryBuffer
#NAME: message_format
#PARENT: Gtk.MessageDialog.format_secondary_text.none
#COMMENT: printf()-style format string, or %NULL
#NAME: iter
#PARENT: Gtk.TextIter.get_toggled_tags.TextTag
#COMMENT: an iterator
#NAME: get_lower
#PARENT: Gtk.Adjustment.get_lower
#COMMENT: The current minimum value of the adjustment.
#NAME: set_margin
#PARENT: Gtk.IconView
#COMMENT: Sets the ::margin property which specifies the space
which is inserted at the top, bottom, left and right
of the icon view.
#NAME: get_tearoff_state
#PARENT: Gtk.Menu
#COMMENT: Returns whether the menu is torn off.
See gtk_menu_set_tearoff_state().
#NAME: new_with_mnemonic
#PARENT: Gtk.MenuItem
#COMMENT: Creates a new #GtkMenuItem containing a label.

The label will be created using gtk_label_new_with_mnemonic(),
so underscores in @label indicate the mnemonic for the menu item.
#NAME: widget
#PARENT: Gtk.Widget.drag_begin_with_coordinates.Gdk.DragContext
#COMMENT: the source widget
#NAME: padding
#PARENT: Gtk.Box.query_child_packing.none
#COMMENT: pointer to return location for padding
    child property
#NAME: get_icon_size
#PARENT: Gtk.ToolPalette
#COMMENT: Gets the size of icons in the tool palette.
See gtk_tool_palette_set_icon_size().
#NAME: iter
#PARENT: Gtk.TreeModelIface.row_changed.row_changed.none
#COMMENT: a valid #GtkTreeIter-struct pointing to the changed row
#NAME: iter
#PARENT: Gtk.TreeModelIface.iter_parent.iter_parent.gboolean
#COMMENT: the new #GtkTreeIter-struct to set to the parent
#NAME: visible_horizontal
#PARENT: Gtk.Action.set_visible_horizontal.none
#COMMENT: whether the action is visible horizontally
#NAME: STOCK_MEDIA_RECORD
#PARENT: Gtk
#COMMENT: The “Media Record” item and icon.
#NAME: font
#PARENT: Gtk.TextTag
#COMMENT: Font description as string, e.g. \"Sans Italic 12\".

Note that the initial value of this property depends on
the internals of #PangoFontDescription.
#NAME: x
#PARENT: Gtk.paint_box.none
#COMMENT: x origin of the box
#NAME: get_alignment
#PARENT: Gtk.Entry
#COMMENT: Gets the value set by gtk_entry_set_alignment().
#NAME: block_activate
#PARENT: Gtk.Action
#COMMENT: Disable activation signals from the action

This is needed when updating the state of your proxy
#GtkActivatable widget could result in calling gtk_action_activate(),
this is a convenience function to avoid recursing in those
cases (updating toggle state for instance).
#NAME: entry
#PARENT: Gtk.Entry.get_text_area.none
#COMMENT: a #GtkEntry
#NAME: y
#PARENT: Gtk.paint_box.none
#COMMENT: y origin of the box
#NAME: content_buffer
#PARENT: Gtk.TextBufferDeserializeFunc.gboolean
#COMMENT: the #GtkTextBuffer to deserialize into
#NAME: stack
#PARENT: Gtk.Stack.set_visible_child.none
#COMMENT: a #GtkStack
#NAME: mime_type
#PARENT: Gtk.RecentFilterInfo
#COMMENT: MIME type of the file.
#NAME: targets
#PARENT: Gtk.ToolPalette.add_drag_dest.none
#COMMENT: the #GtkToolPaletteDragTargets which the widget
    should support
#NAME: cut_clipboard
#PARENT: Gtk.Editable
#COMMENT: Removes the contents of the currently selected content in the editable and
puts it on the clipboard.
#NAME: get_spacing
#PARENT: Gtk.CellAreaBox.get_spacing
#COMMENT: the space added between cell renderers in @box.
#NAME: context
#PARENT: Gtk.StyleContext.get_border.none
#COMMENT: a #GtkStyleContext
#NAME: list_classes
#PARENT: Gtk.StyleContext.list_classes
#COMMENT: a #GList of
         strings with the currently defined classes. The contents
         of the list are owned by GTK+, but you must free the list
         itself with g_list_free() when you are done with it.
#NAME: resolved_color
#PARENT: Gtk.SymbolicColor.resolve.gboolean
#COMMENT: return location for the resolved color
#NAME: get_toolbar_style
#PARENT: Gtk.ToolItem.get_toolbar_style
#COMMENT: A #GtkToolbarStyle indicating the toolbar style used
for @tool_item.
#NAME: icon_pos
#PARENT: Gtk.Entry.get_icon_name.utf8
#COMMENT: Icon position
#NAME: popover
#PARENT: Gtk.MenuButton.set_popover.none
#COMMENT: a #GtkPopover
#NAME: new
#PARENT: Gtk.Revealer
#COMMENT: Creates a new #GtkRevealer.
#NAME: end
#PARENT: Gtk.TextIter.get_visible_slice.utf8
#COMMENT: iterator at end of range
#NAME: icon_theme
#PARENT: Gtk.IconTheme.lookup_icon.IconInfo
#COMMENT: a #GtkIconTheme
#NAME: range
#PARENT: Gtk.Range.set_flippable.none
#COMMENT: a #GtkRange
#NAME: destroy
#PARENT: Gtk.TreeSelection.set_select_function.none
#COMMENT: The destroy function for user data.  May be %NULL
#NAME: color
#PARENT: Gtk.rc_parse_color_full.guint
#COMMENT: a pointer to a #GdkColor in which to store
    the result
#NAME: get_image
#PARENT: Gtk.ImageMenuItem.get_image
#COMMENT: the widget set as image of @image_menu_item
#NAME: error
#PARENT: Gtk.PrintOperationResult
#COMMENT: An error has occured.
#NAME: get_model
#PARENT: Gtk.EntryCompletion.get_model
#COMMENT: A #GtkTreeModel, or %NULL if none
    is currently being used
#NAME: icon_name
#PARENT: Gtk.IconSource.set_icon_name.none
#COMMENT: name of icon to use
#NAME: icon_view
#PARENT: Gtk.IconView.set_model.none
#COMMENT: A #GtkIconView.
#NAME: parent
#PARENT: Gtk.Widget.set_parent.none
#COMMENT: parent container
#NAME: height
#PARENT: Gtk.PaperSize.set_size.none
#COMMENT: the new height in units of @unit
#NAME: parent_class
#PARENT: Gtk.TearoffMenuItemClass
#COMMENT: The parent class.
#NAME: action_group
#PARENT: Gtk.ActionGroup.add_radio_actions_full.none
#COMMENT: the action group
#NAME: get_activatable
#PARENT: Gtk.CellRendererToggle
#COMMENT: Returns whether the cell renderer is activatable. See
gtk_cell_renderer_toggle_set_activatable().
#NAME: is_selected
#PARENT: Gtk.ListBoxRow.is_selected
#COMMENT: %TRUE if @row is selected
#NAME: value
#PARENT: Gtk.StyleContext.get_style_property.none
#COMMENT: Return location for the property value
#NAME: activate
#PARENT: Gtk.AccelGroup.activate
#COMMENT: %TRUE if an accelerator was activated and handled
    this keypress
#NAME: self
#PARENT: Gtk.AppChooserWidget.get_show_default.gboolean
#COMMENT: a #GtkAppChooserWidget
#NAME: open_flags
#PARENT: Gtk.PlacesSidebar.open-location.none
#COMMENT: a single value from #GtkPlacesOpenFlags specifying how the @location should be opened.
#NAME: STOCK_QUIT
#PARENT: Gtk
#COMMENT: The “Quit” item and icon.
#NAME: len
#PARENT: Gtk.TextBuffer.insert_with_tags_by_name.none
#COMMENT: length of @text, or -1
#NAME: targets_include_image
#PARENT: Gtk.targets_include_image
#COMMENT: %TRUE if @targets include a suitable target for images,
  otherwise %FALSE.
#NAME: new
#PARENT: Gtk.IMContextSimple.new
#COMMENT: a new #GtkIMContextSimple.
#NAME: focused
#PARENT: Gtk.CellRendererState
#COMMENT: The cell is in the focus row.
#NAME: unit
#PARENT: Gtk.PageSetup.get_top_margin.gdouble
#COMMENT: the unit for the return value
#NAME: get_visible_child
#PARENT: Gtk.Stack
#COMMENT: Gets the currently visible child of @stack, or %NULL if
there are no visible children.
#NAME: get_file
#PARENT: Gtk.CssSection.get_file
#COMMENT: the #GFile that @section was parsed from
    or %NULL if @section was parsed from other data
#NAME: hadjustment
#PARENT: Gtk.Scrollable
#COMMENT: Horizontal #GtkAdjustment of the scrollable widget. This adjustment is
shared between the scrollable widget and its parent.
#NAME: icon
#PARENT: Gtk.Window.set_icon.none
#COMMENT: icon image, or %NULL
#NAME: set_visible
#PARENT: Gtk.ActionGroup
#COMMENT: Changes the visible of @action_group.
#NAME: filter_keypress
#PARENT: Gtk.IMContext.filter_keypress
#COMMENT: %TRUE if the input method handled the key event.
#NAME: button
#PARENT: Gtk.Button.enter.none
#COMMENT: The #GtkButton you want to send the signal to.
#NAME: detail
#PARENT: Gtk.Style.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a style detail
#NAME: new_from_stock
#PARENT: Gtk.ImageMenuItem.new_from_stock
#COMMENT: a new #GtkImageMenuItem.
#NAME: action
#PARENT: Gtk.ToggleAction.set_draw_as_radio.none
#COMMENT: the action object
#NAME: icon_info
#PARENT: Gtk.IconInfo.get_base_scale.gint
#COMMENT: a #GtkIconInfo
#NAME: object_ids
#PARENT: Gtk.Builder.add_objects_from_file.guint
#COMMENT: nul-terminated array of objects to build
#NAME: match
#PARENT: Gtk.RecentInfo
#COMMENT: Checks whether two #GtkRecentInfo-struct point to the same
resource.
#NAME: gesture
#PARENT: Gtk.Gesture.get_device.Gdk.Device
#COMMENT: a #GtkGesture
#NAME: iter
#PARENT: Gtk.TreeSelection.select_iter.none
#COMMENT: The #GtkTreeIter to be selected.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_activate_on_single_click.gboolean
#COMMENT: a #GtkTreeView
#NAME: label
#PARENT: Gtk.Label.set_markup.none
#COMMENT: a #GtkLabel
#NAME: store
#PARENT: Gtk.ListStore.move_before.none
#COMMENT: A #GtkListStore.
#NAME: op
#PARENT: Gtk.PrintOperation.set_embed_page_setup.none
#COMMENT: a #GtkPrintOperation
#NAME: n
#PARENT: Gtk.Toolbar.get_nth_item.ToolItem
#COMMENT: A position on the toolbar
#NAME: gicon
#PARENT: Gtk.Image
#COMMENT: The GIcon displayed in the GtkImage. For themed icons,
If the icon theme is changed, the image will be updated
automatically.
#NAME: use_color
#PARENT: Gtk.PrintSettings.set_use_color.none
#COMMENT: whether to use color
#NAME: iter
#PARENT: Gtk.TextIter.get_attributes.gboolean
#COMMENT: an iterator
#NAME: drag_data_received
#PARENT: Gtk.TreeDragDestIface.drag_data_received.drag_data_received
#COMMENT: whether a new row was created before position @dest
#NAME: tree_column
#PARENT: Gtk.TreeViewColumn.set_expand.none
#COMMENT: A #GtkTreeViewColumn.
#NAME: drag_check_threshold
#PARENT: Gtk.Widget.drag_check_threshold
#COMMENT: %TRUE if the drag threshold has been passed.
#NAME: label_widget
#PARENT: Gtk.ToolButton.set_label_widget.none
#COMMENT: the widget used as label, or %NULL
#NAME: set_translator_credits
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the translator credits string which is displayed in
the translators tab of the secondary credits dialog.

The intended use for this string is to display the translator
of the language which is currently used in the user interface.
Using gettext(), a simple way to achieve that is to mark the
string for translation:
|[<!-- language="C" -->
 gtk_about_dialog_set_translator_credits (about,
                                          _("translator-credits"));
]|
It is a good idea to use the customary msgid “translator-credits” for this
purpose, since translators will already know the purpose of that msgid, and
since #GtkAboutDialog will detect if “translator-credits” is untranslated
and hide the tab.
#NAME: start
#PARENT: Gtk.TextBuffer.apply_tag.none
#COMMENT: one bound of range to be tagged
#NAME: forward_lines
#PARENT: Gtk.TextIter.forward_lines
#COMMENT: whether @iter moved and is dereferenceable
#NAME: get_content_area
#PARENT: Gtk.Dialog.get_content_area
#COMMENT: the content area #GtkBox.
#NAME: destroy
#PARENT: Gtk.FlowBox.set_sort_func.none
#COMMENT: destroy notifier for @user_data
#NAME: context
#PARENT: Gtk.StyleContext.get_background_color.none
#COMMENT: a #GtkStyleContext
#NAME: set_line
#PARENT: Gtk.TextIter
#COMMENT: Moves iterator @iter to the start of the line @line_number.  If
@line_number is negative or larger than the number of lines in the
buffer, moves @iter to the start of the last line in the buffer.
#NAME: widget
#PARENT: Gtk.Widget.get_name.utf8
#COMMENT: a #GtkWidget
#NAME: can_default
#PARENT: Gtk.Widget.set_can_default.none
#COMMENT: whether or not @widget can be a default widget.
#NAME: label
#PARENT: Gtk.CheckMenuItem.new_with_mnemonic.Widget
#COMMENT: The text of the button, with an underscore in front of the
    character
#NAME: n_entries
#PARENT: Gtk.ActionGroup.add_toggle_actions_full.none
#COMMENT: the number of entries
#NAME: icon
#PARENT: Gtk.Action.set_gicon.none
#COMMENT: the #GIcon to set
#NAME: get_track_visited_links
#PARENT: Gtk.Label
#COMMENT: Returns whether the label is currently keeping track
of clicked links.
#NAME: menu_button
#PARENT: Gtk.MenuButton.get_menu_model.Gio.MenuModel
#COMMENT: a #GtkMenuButton
#NAME: PopoverMenu
#PARENT: Gtk
#COMMENT: GtkPopoverMenu is a subclass of #GtkPopover that treats its
childen like menus and allows switching between them. It is
meant to be used primarily together with #GtkModelButton, but
any widget can be used, such as #GtkSpinButton or #GtkScale.
In this respect, GtkPopoverMenu is more flexible than popovers
that are created from a #GMenuModel with gtk_popover_new_from_model().

To add a child as a submenu, set the #GtkPopoverMenu:submenu
child property to the name of the submenu. To let the user open
this submenu, add a #GtkModelButton whose #GtkModelButton:menu-name
property is set to the name you've given to the submenu.

By convention, the first child of a submenu should be a #GtkModelButton
to switch back to the parent menu. Such a button should use the
#GtkModelButton:inverted and #GtkModelButton:centered properties
to achieve a title-like appearance and place the submenu indicator
at the opposite side. To switch back to the main menu, use "main"
as the menu name.

# Example

|[
<object class="GtkPopoverMenu">
  <child>
    <object class="GtkBox">
      <property name="visible">True</property>
      <property name="margin">10</property>
      <child>
        <object class="GtkModelButton">
          <property name="visible">True</property>
          <property name="action-name">win.frob</property>
          <property name="text" translatable="yes">Frob</property>
        </object>
      </child>
      <child>
        <object class="GtkModelButton">
          <property name="visible">True</property>
          <property name="menu-name">more</property>
          <property name="text" translatable="yes">More</property>
        </object>
      </child>
    </object>
  </child>
  <child>
    <object class="GtkBox">
      <property name="visible">True</property>
      <property name="margin">10</property>
      <child>
        <object class="GtkModelButton">
          <property name="visible">True</property>
          <property name="action-name">win.foo</property>
          <property name="text" translatable="yes">Foo</property>
        </object>
      </child>
      <child>
        <object class="GtkModelButton">
          <property name="visible">True</property>
          <property name="action-name">win.bar</property>
          <property name="text" translatable="yes">Bar</property>
        </object>
      </child>
    </object>
    <packing>
      <property name="submenu">more</property>
    </packing>
  </child>
</object>
]|
#NAME: revealer
#PARENT: Gtk.Revealer.get_reveal_child.gboolean
#COMMENT: a #GtkRevealer
#NAME: window
#PARENT: Gtk.Window.begin_resize_drag.none
#COMMENT: a #GtkWindow
#NAME: set_style_context
#PARENT: Gtk.NumerableIcon
#COMMENT: Updates the icon to fetch theme information from the
given #GtkStyleContext.
#NAME: PackDirection
#PARENT: Gtk
#COMMENT: Determines how widgets should be packed inside menubars
and menuitems contained in menubars.
#NAME: lgpl_3_0
#PARENT: Gtk.License
#COMMENT: The GNU Lesser General Public License, version 3.0 or later
#NAME: set_indent
#PARENT: Gtk.TextView
#COMMENT: Sets the default indentation for paragraphs in @text_view.
Tags in the buffer may override the default.
#NAME: natural_height
#PARENT: Gtk.CellAreaClass.get_preferred_height_for_width.get_preferred_height_for_width.none
#COMMENT: location to store the natural height, or %NULL
#NAME: attach-widget
#PARENT: Gtk.Menu
#COMMENT: The widget the menu is attached to. Setting this property attaches
the menu without a #GtkMenuDetachFunc. If you need to use a detacher,
use gtk_menu_attach_to_widget() directly.
#NAME: none
#PARENT: Gtk.SelectionMode
#COMMENT: No selection is possible.
#NAME: modifiers
#PARENT: Gtk.test_widget_click.gboolean
#COMMENT: Keyboard modifiers the event is setup with.
#NAME: box
#PARENT: Gtk.FlowBox.select_all.none
#COMMENT: a #GtkFlowBox
#NAME: button
#PARENT: Gtk.ColorButton.set_use_alpha.none
#COMMENT: a #GtkColorButton
#NAME: source
#PARENT: Gtk.IconSource.set_size.none
#COMMENT: a #GtkIconSource
#NAME: file_name
#PARENT: Gtk.PrintSettings.to_file.gboolean
#COMMENT: the file to save to
#NAME: can_activate_accel
#PARENT: Gtk.Widget
#COMMENT: Determines whether an accelerator that activates the signal
identified by @signal_id can currently be activated.
This is done by emitting the #GtkWidget::can-activate-accel
signal on @widget; if the signal isn’t overridden by a
handler or in a derived widget, then the default check is
that the widget must be sensitive, and the widget and all
its ancestors mapped.
#NAME: width
#PARENT: Gtk.CellAreaContext.get_allocation.none
#COMMENT: location to store the allocated width, or %NULL
#NAME: is_active
#PARENT: Gtk.ToggleActionEntry
#COMMENT: The initial state of the toggle action.
#NAME: new_from_resource
#PARENT: Gtk.Image
#COMMENT: Creates a new #GtkImage displaying the resource file @resource_path. If the file
isn’t found or can’t be loaded, the resulting #GtkImage will
display a “broken image” icon. This function never returns %NULL,
it always returns a valid #GtkImage widget.

If the file contains an animation, the image will contain an
animation.

If you need to detect failures to load the file, use
gdk_pixbuf_new_from_file() to load the file yourself, then create
the #GtkImage from the pixbuf. (Or for animations, use
gdk_pixbuf_animation_new_from_file()).

The storage type (gtk_image_get_storage_type()) of the returned
image is not defined, it will be whatever is appropriate for
displaying the file.
#NAME: provider
#PARENT: Gtk.StyleProvider.get_style_property.gboolean
#COMMENT: a #GtkStyleProvider
#NAME: path
#PARENT: Gtk.TreeView.row-activated.none
#COMMENT: the #GtkTreePath for the activated row
#NAME: icon_size_from_name
#PARENT: Gtk.icon_size_from_name
#COMMENT: the icon size
#NAME: set_row_homogeneous
#PARENT: Gtk.Grid
#COMMENT: Sets whether all rows of @grid will have the same height.
#NAME: user_data_or_owner
#PARENT: Gtk.ClipboardClearFunc.none
#COMMENT: the @user_data argument passed to gtk_clipboard_set_with_data(),
  or the @owner argument passed to gtk_clipboard_set_with_owner()
#NAME: STOCK_EDIT
#PARENT: Gtk
#COMMENT: The “Edit” item and icon.
#NAME: get_uris
#PARENT: Gtk.SelectionData
#COMMENT: Gets the contents of the selection data as array of URIs.
#NAME: new
#PARENT: Gtk.SizeGroup
#COMMENT: Create a new #GtkSizeGroup.
#NAME: day
#PARENT: Gtk.Calendar.unmark_day.none
#COMMENT: the day number to unmark between 1 and 31.
#NAME: builder
#PARENT: Gtk.Builder.value_from_string_type.gboolean
#COMMENT: a #GtkBuilder
#NAME: set_font_name
#PARENT: Gtk.FontButton.set_font_name
#COMMENT: %TRUE
#NAME: backward_to_tag_toggle
#PARENT: Gtk.TextIter
#COMMENT: Moves backward to the next toggle (on or off) of the
#GtkTextTag @tag, or to the next toggle of any tag if
@tag is %NULL. If no matching tag toggles are found,
returns %FALSE, otherwise %TRUE. Does not return toggles
located at @iter, only toggles before @iter. Sets @iter
to the location of the toggle, or the start of the buffer
if no toggle is found.
#NAME: actions
#PARENT: Gtk.Entry.set_icon_drag_source.none
#COMMENT: a bitmask of the allowed drag actions
#NAME: box
#PARENT: Gtk.ListBox.get_selected_row.ListBoxRow
#COMMENT: a #GtkListBox
#NAME: show_text
#PARENT: Gtk.ProgressBar.set_show_text.none
#COMMENT: whether to show superimposed text
#NAME: destroy
#PARENT: Gtk.Calendar.set_detail_func.none
#COMMENT: a function for releasing @data.
#NAME: resolved_gradient
#PARENT: Gtk.Gradient.resolve.gboolean
#COMMENT: return location for the resolved pattern
#NAME: n_columns
#PARENT: Gtk.ListStore.new.ListStore
#COMMENT: number of columns in the list store
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.list_shortcuts.Gio.File
#COMMENT: a places sidebar
#NAME: info
#PARENT: Gtk.RecentInfo.ref.RecentInfo
#COMMENT: a #GtkRecentInfo
#NAME: child_iter
#PARENT: Gtk.TreeModelFilter.convert_child_iter_to_iter.gboolean
#COMMENT: A valid #GtkTreeIter pointing to a row on the child model.
#NAME: sortable
#PARENT: Gtk.TreeSortableIface.get_sort_column_id.get_sort_column_id.gboolean
#COMMENT: A #GtkTreeSortable
#NAME: path
#PARENT: Gtk.TreeDragSource.drag_data_delete.gboolean
#COMMENT: row that was being dragged
#NAME: filenames
#PARENT: Gtk.rc_set_default_files.none
#COMMENT: A
    %NULL-terminated list of filenames.
#NAME: op
#PARENT: Gtk.PrintOperation.get_default_page_setup.PageSetup
#COMMENT: a #GtkPrintOperation
#NAME: fit_model
#PARENT: Gtk.CellView.set_fit_model.none
#COMMENT: whether @cell_view should request space for the whole model.
#NAME: GLArea
#PARENT: Gtk
#COMMENT: #GtkGLArea is a widget that allows drawing with OpenGL.

#GtkGLArea sets up its own #GdkGLContext for the window it creates, and
creates a custom GL framebuffer that the widget will do GL rendering onto.
It also ensures that this framebuffer is the default GL rendering target
when rendering.

In order to draw, you have to connect to the #GtkGLArea::render signal,
or subclass #GtkGLArea and override the @GtkGLAreaClass.render() virtual
function.

The #GtkGLArea widget ensures that the #GdkGLContext is associated with
the widget's drawing area, and it is kept updated when the size and
position of the drawing area changes.

## Drawing with GtkGLArea ##

The simplest way to draw using OpenGL commands in a #GtkGLArea is to
create a widget instance and connect to the #GtkGLArea::render signal:

|[<!-- language="C" -->
  // create a GtkGLArea instance
  GtkWidget *gl_area = gtk_gl_area_new ();

  // connect to the "render" signal
  g_signal_connect (gl_area, "render", G_CALLBACK (render), NULL);
]|

The `render()` function will be called when the #GtkGLArea is ready
for you to draw its content:

|[<!-- language="C" -->
  static gboolean
  render (GtkGLArea *area, GdkGLContext *context)
  {
    // inside this function it's safe to use GL; the given
    // #GdkGLContext has been made current to the drawable
    // surface used by the #GtkGLArea and the viewport has
    // already been set to be the size of the allocation

    // we can start by clearing the buffer
    glClearColor (0, 0, 0, 0);
    glClear (GL_COLOR_BUFFER_BIT);

    // draw your object
    draw_an_object ();

    // we completed our drawing; the draw commands will be
    // flushed at the end of the signal emission chain, and
    // the buffers will be drawn on the window
    return TRUE;
  }
]|

If you need to initialize OpenGL state, e.g. buffer objects or
shaders, you should use the #GtkWidget::realize signal; you
can use the #GtkWidget::unrealize signal to clean up. Since the
#GdkGLContext creation and initialization may fail, you will
need to check for errors, using gtk_gl_area_get_error(). An example
of how to safely initialize the GL state is:

|[<!-- language="C" -->
  static void
  on_realize (GtkGLarea *area)
  {
    // We need to make the context current if we want to
    // call GL API
    gtk_gl_area_make_current (area);

    // If there were errors during the initialization or
    // when trying to make the context current, this
    // function will return a #GError for you to catch
    if (gtk_gl_area_get_error (area) != NULL)
      return;

    // You can also use gtk_gl_area_set_error() in order
    // to show eventual initialization errors on the
    // GtkGLArea widget itself
    GError *internal_error = NULL;
    init_buffer_objects (&error);
    if (error != NULL)
      {
        gtk_gl_area_set_error (area, error);
        g_error_free (error);
        return;
      }

    init_shaders (&error);
    if (error != NULL)
      {
        gtk_gl_area_set_error (area, error);
        g_error_free (error);
        return;
      }
  }
]|

If you need to change the options for creating the #GdkGLContext
you should use the #GtkGLArea::create-context signal.
#NAME: paned
#PARENT: Gtk.Paned.pack2.none
#COMMENT: a paned widget
#NAME: label
#PARENT: Gtk.Widget.add_mnemonic_label.none
#COMMENT: a #GtkWidget that acts as a mnemonic label for @widget
#NAME: get_pixbuf
#PARENT: Gtk.IconSource.get_pixbuf
#COMMENT: source pixbuf
#NAME: box
#PARENT: Gtk.ListBox.unselect_all.none
#COMMENT: a #GtkListBox
#NAME: widget
#PARENT: Gtk.Widget.get_path.WidgetPath
#COMMENT: a #GtkWidget
#NAME: set_version
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the version string to display in the about dialog.
#NAME: wait_for_image
#PARENT: Gtk.Clipboard
#COMMENT: Requests the contents of the clipboard as image and converts
the result to a #GdkPixbuf. This function waits for
the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.
#NAME: label_fill
#PARENT: Gtk.Expander.set_label_fill.none
#COMMENT: %TRUE if the label should should fill
    all available horizontal space
#NAME: get_row_at_index
#PARENT: Gtk.ListBox
#COMMENT: Gets the n-th child in the list (not counting headers).
If @_index is negative or larger than the number of items in the
list, %NULL is returned.
#NAME: fontchooser
#PARENT: Gtk.FontChooser.get_font_face.Pango.FontFace
#COMMENT: a #GtkFontChooser
#NAME: handle_event
#PARENT: Gtk.EventController
#COMMENT: Feeds an events into @controller, so it can be interpreted
and the controller actions triggered.
#NAME: info_bar
#PARENT: Gtk.InfoBar.response.none
#COMMENT: a #GtkInfoBar
#NAME: fraction
#PARENT: Gtk.Entry.set_progress_fraction.none
#COMMENT: fraction of the task that’s been completed
#NAME: upper
#PARENT: Gtk.Adjustment.clamp_page.none
#COMMENT: the upper value.
#NAME: enabled
#PARENT: Gtk.TreeView.set_show_expanders.none
#COMMENT: %TRUE to enable expander drawing, %FALSE otherwise.
#NAME: list_windows
#PARENT: Gtk.WindowGroup.list_windows
#COMMENT: A
  newly-allocated list of windows inside the group.
#NAME: expander
#PARENT: Gtk.Expander.set_resize_toplevel.none
#COMMENT: a #GtkExpander
#NAME: STYLE_CLASS_RAISED
#PARENT: Gtk
#COMMENT: A CSS class to match a raised control, such as a raised
button on a toolbar.

This should be used in conjunction with #GTK_STYLE_CLASS_PRIMARY_TOOLBAR.
#NAME: stock_id
#PARENT: Gtk.RadioAction.new.RadioAction
#COMMENT: The stock icon to display in widgets representing
  this action, or %NULL
#NAME: chooser
#PARENT: Gtk.FileChooser.set_filename.gboolean
#COMMENT: a #GtkFileChooser
#NAME: purpose
#PARENT: Gtk.Entry.set_input_purpose.none
#COMMENT: the purpose
#NAME: fixed
#PARENT: Gtk.Fixed.move.none
#COMMENT: a #GtkFixed.
#NAME: force_load
#PARENT: Gtk.rc_reparse_all_for_settings.gboolean
#COMMENT: load whether or not anything changed
#NAME: get_input_purpose
#PARENT: Gtk.TextView
#COMMENT: Gets the value of the #GtkTextView:input-purpose property.
#NAME: toolbar
#PARENT: Gtk.Toolbar.get_style.ToolbarStyle
#COMMENT: a #GtkToolbar
#NAME: relative_to
#PARENT: Gtk.Popover.new.Widget
#COMMENT: #GtkWidget the popover is related to
#NAME: get_state
#PARENT: Gtk.Switch.get_state
#COMMENT: the underlying state
#NAME: tree_model
#PARENT: Gtk.TreeModelIface.get_n_columns.get_n_columns.gint
#COMMENT: a #GtkTreeModel
#NAME: model
#PARENT: Gtk.TreeView.new_with_model.Widget
#COMMENT: the model.
#NAME: start_editing
#PARENT: Gtk.CellRendererClass.start_editing.start_editing
#COMMENT: A new #GtkCellEditable, or %NULL
#NAME: get_preferred_width_for_height
#PARENT: Gtk.CellAreaContext
#COMMENT: Gets the accumulative preferred width for @height for all rows which
have been requested for the same said @height with this context.

After gtk_cell_area_context_reset() is called and/or before ever
requesting the size of a #GtkCellArea, the returned values are -1.
#NAME: STOCK_GO_DOWN
#PARENT: Gtk
#COMMENT: The “Down” item and icon.
#NAME: add-tearoffs
#PARENT: Gtk.ComboBox
#COMMENT: The add-tearoffs property controls whether generated menus
have tearoff menu items.

Note that this only affects menu style combo boxes.
#NAME: get_font_size
#PARENT: Gtk.FontChooserIface.get_font_size.get_font_size
#COMMENT: A n integer representing the selected font size,
    or -1 if no font size is selected.
#NAME: item-width
#PARENT: Gtk.IconView
#COMMENT: The item-width property specifies the width to use for each item.
If it is set to -1, the icon view will automatically determine a
suitable item size.
#NAME: widget
#PARENT: Gtk.WidgetClass.realize.realize.none
#COMMENT: a #GtkWidget
#NAME: path
#PARENT: Gtk.tree_get_row_drag_data.gboolean
#COMMENT: row in @tree_model
#NAME: widget
#PARENT: Gtk.Widget.set_support_multidevice.none
#COMMENT: a #GtkWidget
#NAME: menu_button
#PARENT: Gtk.MenuButton.set_align_widget.none
#COMMENT: a #GtkMenuButton
#NAME: get_right_margin
#PARENT: Gtk.PageSetup
#COMMENT: Gets the right margin in units of @unit.
#NAME: get_name
#PARENT: Gtk.RecentFilter
#COMMENT: Gets the human-readable name for the filter.
See gtk_recent_filter_set_name().
#NAME: icon_view
#PARENT: Gtk.IconView.set_item_width.none
#COMMENT: a #GtkIconView
#NAME: get_style
#PARENT: Gtk.Toolbar.get_style
#COMMENT: the current style of @toolbar
#NAME: path
#PARENT: Gtk.WidgetPath.iter_get_state.StateFlags
#COMMENT: a #GtkWidgetPath
#NAME: move-current
#PARENT: Gtk.MenuShell
#COMMENT: An keybinding signal which moves the current menu item
in the direction specified by @direction.
#NAME: key_file
#PARENT: Gtk.PageSetup.new_from_key_file.PageSetup
#COMMENT: the #GKeyFile to retrieve the page_setup from
#NAME: STYLE_PROPERTY_COLOR
#PARENT: Gtk
#COMMENT: A property holding the foreground color of rendered elements as a #GdkRGBA.
#NAME: pos
#PARENT: Gtk.TreeView.set_drag_dest_row.none
#COMMENT: Specifies whether to drop before, after or into the row
#NAME: get_touch_only
#PARENT: Gtk.GestureSingle
#COMMENT: Returns %TRUE if the gesture is only triggered by touch events.
#NAME: provider
#PARENT: Gtk.StyleProviderIface.get_style_property.get_style_property.gboolean
#COMMENT: a #GtkStyleProvider
#NAME: get_ancestor
#PARENT: Gtk.Widget.get_ancestor
#COMMENT: the ancestor widget, or %NULL if not found
#NAME: window
#PARENT: Gtk.Window.set_position.none
#COMMENT: a #GtkWindow.
#NAME: iter
#PARENT: Gtk.TextIter.editable.gboolean
#COMMENT: an iterator
#NAME: focus-out-event
#PARENT: Gtk.Widget
#COMMENT: The ::focus-out-event signal will be emitted when the keyboard focus
leaves the @widget's window.

To receive this signal, the #GdkWindow associated to the widget needs
to enable the #GDK_FOCUS_CHANGE_MASK mask.
#NAME: set_show_private
#PARENT: Gtk.RecentChooser
#COMMENT: Whether to show recently used resources marked registered as private.
#NAME: style
#PARENT: Gtk.ToolItemGroup.set_header_relief.none
#COMMENT: the #GtkReliefStyle
#NAME: display
#PARENT: Gtk.Tooltip.trigger_tooltip_query.none
#COMMENT: a #GdkDisplay
#NAME: setting
#PARENT: Gtk.Window.set_hide_titlebar_when_maximized.none
#COMMENT: whether to hide the titlebar when @window is maximized
#NAME: cell_view
#PARENT: Gtk.CellView.set_background_color.none
#COMMENT: a #GtkCellView
#NAME: get_show_other
#PARENT: Gtk.AppChooserWidget
#COMMENT: Returns the current value of the #GtkAppChooserWidget:show-other
property.
#NAME: start_button_mask
#PARENT: Gtk.IconView.enable_model_drag_source.none
#COMMENT: Mask of allowed buttons to start drag
#NAME: set_track_visited_links
#PARENT: Gtk.Label
#COMMENT: Sets whether the label should keep track of clicked
links (and use a different color for them).
#NAME: style
#PARENT: Gtk.Style.lookup_color.gboolean
#COMMENT: a #GtkStyle
#NAME: set_tooltip_cell
#PARENT: Gtk.TreeView
#COMMENT: Sets the tip area of @tooltip to the area @path, @column and @cell have
in common.  For example if @path is %NULL and @column is set, the tip
area will be set to the full area covered by @column.  See also
gtk_tooltip_set_tip_area().

Note that if @path is not specified and @cell is set and part of a column
containing the expander, the tooltip might not show and hide at the correct
position.  In such cases @path must be set to the current node under the
mouse cursor for this function to operate correctly.

See also gtk_tree_view_set_tooltip_column() for a simpler alternative.
#NAME: copy
#PARENT: Gtk.IconSet
#COMMENT: Copies @icon_set by value.
#NAME: widget
#PARENT: Gtk.WidgetClass.grab_focus.grab_focus.none
#COMMENT: a #GtkWidget
#NAME: about
#PARENT: Gtk.AboutDialog.get_wrap_license.gboolean
#COMMENT: a #GtkAboutDialog
#NAME: clipboard
#PARENT: Gtk.Clipboard.wait_is_target_available.gboolean
#COMMENT: a #GtkClipboard
#NAME: tree_view
#PARENT: Gtk.TreeView.set_search_entry.none
#COMMENT: A #GtkTreeView
#NAME: new
#PARENT: Gtk.BindingSet.new
#COMMENT: new binding set
#NAME: get_inline_completion
#PARENT: Gtk.EntryCompletion
#COMMENT: Returns whether the common prefix of the possible completions should
be automatically inserted in the entry.
#NAME: printing
#PARENT: Gtk.PrintStatus
#COMMENT: The printer is processing the print job.
#NAME: cancel
#PARENT: Gtk.PrintOperationResult
#COMMENT: The print operation has been canceled,
    the print settings should not be stored.
#NAME: tree_view
#PARENT: Gtk.TreeView.get_path_at_pos.gboolean
#COMMENT: A #GtkTreeView.
#NAME: submenu
#PARENT: Gtk.MenuItem.set_submenu.none
#COMMENT: the submenu, or %NULL
#NAME: get_lower_stepper_sensitivity
#PARENT: Gtk.Range
#COMMENT: Gets the sensitivity policy for the stepper that points to the
'lower' end of the GtkRange’s adjustment.
#NAME: get_buffer
#PARENT: Gtk.TextIter
#COMMENT: Returns the #GtkTextBuffer this iterator is associated with.
#NAME: decoration-layout
#PARENT: Gtk.HeaderBar
#COMMENT: The decoration layout for buttons. If this property is
not set, the #GtkSettings:gtk-decoration-layout setting
is used.

See gtk_header_bar_set_decoration_layout() for information
about the format of this string.
#NAME: get_column_spacing
#PARENT: Gtk.Grid.get_column_spacing
#COMMENT: the column spacing of @grid
#NAME: get_center_widget
#PARENT: Gtk.ActionBar
#COMMENT: Retrieves the center bar widget of the bar.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_remove_region.none
#COMMENT: position to modify, -1 for the path head
#NAME: get_for_display
#PARENT: Gtk.Clipboard
#COMMENT: Returns the clipboard object for the given selection.
Cut/copy/paste menu items and keyboard shortcuts should use
the default clipboard, returned by passing %GDK_SELECTION_CLIPBOARD for @selection.
(%GDK_NONE is supported as a synonym for GDK_SELECTION_CLIPBOARD
for backwards compatibility reasons.)
The currently-selected object or text should be provided on the clipboard
identified by #GDK_SELECTION_PRIMARY. Cut/copy/paste menu items
conceptually copy the contents of the #GDK_SELECTION_PRIMARY clipboard
to the default clipboard, i.e. they copy the selection to what the
user sees as the clipboard.

(Passing #GDK_NONE is the same as using `gdk_atom_intern
("CLIPBOARD", FALSE)`.

See the
[FreeDesktop Clipboard Specification](http://www.freedesktop.org/Standards/clipboards-spec)
for a detailed discussion of the “CLIPBOARD” vs. “PRIMARY”
selections under the X window system. On Win32 the
#GDK_SELECTION_PRIMARY clipboard is essentially ignored.)

It’s possible to have arbitrary named clipboards; if you do invent
new clipboards, you should prefix the selection name with an
underscore (because the ICCCM requires that nonstandard atoms are
underscore-prefixed), and namespace it as well. For example,
if your application called “Foo” has a special-purpose
clipboard, you might call it “_FOO_SPECIAL_CLIPBOARD”.
#NAME: gtk-alternative-sort-arrows
#PARENT: Gtk.Settings
#COMMENT: Controls the direction of the sort indicators in sorted list and tree
views. By default an arrow pointing down means the column is sorted
in ascending order. When set to %TRUE, this order will be inverted.
#NAME: manager
#PARENT: Gtk.UIManager.get_accel_group.AccelGroup
#COMMENT: a #GtkUIManager object
#NAME: step
#PARENT: Gtk.VScale.new_with_range.Widget
#COMMENT: step increment (tick size) used with keyboard shortcuts
#NAME: margin-bottom
#PARENT: Gtk.Widget
#COMMENT: Margin on bottom side of widget.

This property adds margin outside of the widget's normal size
request, the margin will be added in addition to the size from
gtk_widget_set_size_request() for example.
#NAME: adjustment
#PARENT: Gtk.Entry.set_cursor_hadjustment.none
#COMMENT: an adjustment which should be adjusted when the cursor
             is moved, or %NULL
#NAME: switch-page
#PARENT: Gtk.Notebook
#COMMENT: Emitted when the user or a function changes the current page.
#NAME: parent_class
#PARENT: Gtk.MountOperationClass
#COMMENT: The parent class.
#NAME: get_copy_target_list
#PARENT: Gtk.TextBuffer.get_copy_target_list
#COMMENT: the #GtkTargetList
#NAME: get_rules_hint
#PARENT: Gtk.TreeView
#COMMENT: Gets the setting set by gtk_tree_view_set_rules_hint().
#NAME: self
#PARENT: Gtk.AppChooser.get_content_type.utf8
#COMMENT: a #GtkAppChooser
#NAME: callback_name
#PARENT: Gtk.Builder.add_callback_symbol.none
#COMMENT: The name of the callback, as expected in the XML
#NAME: flags
#PARENT: Gtk.Application.new.Application
#COMMENT: the application flags
#NAME: op
#PARENT: Gtk.PrintOperation.set_track_print_status.none
#COMMENT: a #GtkPrintOperation
#NAME: n
#PARENT: Gtk.TreeModelIface.iter_nth_child.iter_nth_child.gboolean
#COMMENT: the index of the desired child
#NAME: window
#PARENT: Gtk.Window.set_focus.none
#COMMENT: a #GtkWindow
#NAME: event
#PARENT: Gtk.Widget.map-event.gboolean
#COMMENT: the #GdkEventAny which triggered this signal.
#NAME: single
#PARENT: Gtk.ListBox.set_activate_on_single_click.none
#COMMENT: a boolean
#NAME: get_paste_target_list
#PARENT: Gtk.TextBuffer.get_paste_target_list
#COMMENT: the #GtkTargetList
#NAME: change-value
#PARENT: Gtk.SpinButton
#COMMENT: The ::change-value signal is a [keybinding signal][GtkBindingSignal]
which gets emitted when the user initiates a value change.

Applications should not connect to it, but may emit it with
g_signal_emit_by_name() if they need to control the cursor
programmatically.

The default bindings for this signal are Up/Down and PageUp and/PageDown.
#NAME: rise
#PARENT: Gtk.TextAppearance
#COMMENT: Super/subscript rise, can be negative.
#NAME: get_paper_size
#PARENT: Gtk.PrintSettings.get_paper_size
#COMMENT: the paper size
#NAME: BaselinePosition
#PARENT: Gtk
#COMMENT: Whenever a container has some form of natural row it may align
children in that row along a common typographical baseline. If
the amount of verical space in the row is taller than the total
requested height of the baseline-aligned children then it can use a
#GtkBaselinePosition to select where to put the baseline inside the
extra availible space.
#NAME: height
#PARENT: Gtk.TextView.get_line_yrange.none
#COMMENT: return location for a height
#NAME: get_editable
#PARENT: Gtk.Editable.get_editable
#COMMENT: %TRUE if @editable is editable.
#NAME: end
#PARENT: Gtk.TextBuffer.delete.none
#COMMENT: another position in @buffer
#NAME: is_toplevel
#PARENT: Gtk.Widget.is_toplevel
#COMMENT: %TRUE if @widget is a toplevel, %FALSE otherwise
#NAME: new
#PARENT: Gtk.ModelButton.new
#COMMENT: the newly created #GtkModelButton widget
#NAME: digits
#PARENT: Gtk.SpinButton.new.Widget
#COMMENT: the number of decimal places to display
#NAME: CssProvider
#PARENT: Gtk
#COMMENT: GtkCssProvider is an object implementing the #GtkStyleProvider interface.
It is able to parse [CSS-like](http://www.w3.org/TR/CSS2)
input in order to style widgets.

## Default files

An application can cause GTK+ to parse a specific CSS style sheet by
calling gtk_css_provider_load_from_file() and adding the provider with
gtk_style_context_add_provider() or gtk_style_context_add_provider_for_screen().
In addition, certain files will be read when GTK+ is initialized. First,
the file `$XDG_CONFIG_HOME/gtk-3.0/gtk.css`
is loaded if it exists. Then, GTK+ tries to load
`$HOME/.themes/theme-name/gtk-3.0/gtk.css`,
falling back to
`datadir/share/themes/theme-name/gtk-3.0/gtk.css`,
where theme-name is the name of the current theme
(see the #GtkSettings:gtk-theme-name setting) and datadir
is the prefix configured when GTK+ was compiled, unless overridden by the
`GTK_DATA_PREFIX` environment variable.

# Style sheets

The basic structure of the style sheets understood by this provider is
a series of statements, which are either rule sets or “@-rules”, separated
by whitespace.

A rule set consists of a selector and a declaration block, which is
a series of declarations enclosed in curly braces ({ and }). The
declarations are separated by semicolons (;). Multiple selectors can
share the same declaration block, by putting all the separators in
front of the block, separated by commas.

An example of a rule set with two selectors:
|[
GtkButton, GtkEntry {
    color: #ff00ea;
    font: Comic Sans 12
}
]|

# Selectors # {#gtkcssprovider-selectors}

Selectors work very similar to the way they do in CSS, with widget class
names taking the role of element names, and widget names taking the role
of IDs. When used in a selector, widget names must be prefixed with a
'#' character. The “*” character represents the so-called universal
selector, which matches any widget.

To express more complicated situations, selectors can be combined in
various ways:
- To require that a widget satisfies several conditions,
  combine several selectors into one by concatenating them. E.g.
  `GtkButton#button1` matches a GtkButton widget
  with the name button1.
- To only match a widget when it occurs inside some other
  widget, write the two selectors after each other, separated by whitespace.
  E.g. `GtkToolBar GtkButton` matches GtkButton widgets
  that occur inside a GtkToolBar.
- In the previous example, the GtkButton is matched even
  if it occurs deeply nested inside the toolbar. To restrict the match
  to direct children of the parent widget, insert a “>” character between
  the two selectors. E.g. `GtkNotebook > GtkLabel` matches
  GtkLabel widgets that are direct children of a GtkNotebook.

## Examples of widget classes and names in selectors

Theme labels that are descendants of a window:
|[
GtkWindow GtkLabel {
    background-color: #898989
}
]|

Theme notebooks, and anything that’s within these:
|[
GtkNotebook {
    background-color: #a939f0
}
]|

Theme combo boxes, and entries that are direct children of a notebook:
|[
GtkComboBox,
GtkNotebook > GtkEntry {
    color: @fg_color;
    background-color: #1209a2
}
]|

Theme any widget within a GtkBin:
|[
GtkBin * {
    font: Sans 20
}
]|

Theme a label named title-label:
|[
GtkLabel#title-label {
    font: Sans 15
}
]|

Theme any widget named main-entry:
|[
#main-entry {
    background-color: #f0a810
}
]|

Widgets may also define style classes, which can be used for matching.
When used in a selector, style classes must be prefixed with a “.”
character.

Refer to the documentation of individual widgets to learn which
style classes they define and see
[Style Classes and Regions][gtkstylecontext-classes]
for a list of all style classes used by GTK+ widgets.

Note that there is some ambiguity in the selector syntax when it comes
to differentiation widget class names from regions. GTK+ currently treats
a string as a widget class name if it contains any uppercase characters
(which should work for more widgets with names like GtkLabel).

## Examples for style classes in selectors

Theme all widgets defining the class entry:
|[
.entry {
    color: #39f1f9;
}
]|

Theme spinbuttons’ entry:
|[
GtkSpinButton.entry {
    color: #900185
}
]|

In complicated widgets like e.g. a GtkNotebook, it may be desirable
to style different parts of the widget differently. To make this
possible, container widgets may define regions, whose names
may be used for matching in selectors.

Some containers allow to further differentiate between regions by
applying so-called pseudo-classes to the region. For example, the
tab region in GtkNotebook allows to single out the first or last
tab by using the :first-child or :last-child pseudo-class.
When used in selectors, pseudo-classes must be prefixed with a
':' character.

Refer to the documentation of individual widgets to learn which
regions and pseudo-classes they define and see
[Style Classes and Regions][gtkstylecontext-classes]
for a list of all regions
used by GTK+ widgets.

## Examples for regions in selectors

Theme any label within a notebook:
|[
GtkNotebook GtkLabel {
    color: #f90192;
}
]|

Theme labels within notebook tabs:
|[
GtkNotebook tab GtkLabel {
    color: #703910;
}
]|

Theme labels in the any first notebook tab, both selectors are
equivalent:
|[
GtkNotebook tab:nth-child(first) GtkLabel,
GtkNotebook tab:first-child GtkLabel {
    color: #89d012;
}
]|

Another use of pseudo-classes is to match widgets depending on their
state. This is conceptually similar to the :hover, :active or :focus
pseudo-classes in CSS. The available pseudo-classes for widget states
are :active, :prelight (or :hover), :insensitive, :selected, :focused
and :inconsistent.

## Examples for styling specific widget states

Theme active (pressed) buttons:
|[
GtkButton:active {
    background-color: #0274d9;
}
]|

Theme buttons with the mouse pointer on it, both are equivalent:
|[
GtkButton:hover,
GtkButton:prelight {
    background-color: #3085a9;
}
]|

Theme insensitive widgets, both are equivalent:
|[
:insensitive,
*:insensitive {
    background-color: #320a91;
}
]|

Theme selection colors in entries:
|[
GtkEntry:selected {
    background-color: #56f9a0;
}
]|

Theme focused labels:
|[
GtkLabel:focused {
    background-color: #b4940f;
}
]|

Theme inconsistent checkbuttons:
|[
GtkCheckButton:inconsistent {
    background-color: #20395a;
}
]|

Widget state pseudoclasses may only apply to the last element
in a selector.

To determine the effective style for a widget, all the matching rule
sets are merged. As in CSS, rules apply by specificity, so the rules
whose selectors more closely match a widget path will take precedence
over the others.

# @ Rules

GTK+’s CSS supports the \@import rule, in order to load another
CSS style sheet in addition to the currently parsed one.

An example for using the \@import rule:
|[
@import url ("path/to/common.css");
]|

In order to extend key bindings affecting different widgets, GTK+
supports the \@binding-set rule to parse a set of bind/unbind
directives, see #GtkBindingSet for the supported syntax. Note that
the binding sets defined in this way must be associated with rule sets
by setting the gtk-key-bindings style property.

Customized key bindings are typically defined in a separate
`gtk-keys.css` CSS file and GTK+ loads this file
according to the current key theme, which is defined by the
#GtkSettings:gtk-key-theme-name setting.

An example for using the \@binding rule:
|[
@binding-set binding-set1 {
  bind "<alt>Left" { "move-cursor" (visual-positions, -3, 0) };
  unbind "End";
};

@binding-set binding-set2 {
  bind "<alt>Right" { "move-cursor" (visual-positions, 3, 0) };
  bind "<alt>KP_space" { "delete-from-cursor" (whitespace, 1)
                         "insert-at-cursor" (" ") };
};

GtkEntry {
  gtk-key-bindings: binding-set1, binding-set2;
}
]|

GTK+ also supports an additional \@define-color rule, in order
to define a color name which may be used instead of color numeric
representations. Also see the #GtkSettings:gtk-color-scheme setting
for a way to override the values of these named colors.

An example for defining colors:
|[
@define-color bg_color #f9a039;

* {
    background-color: @bg_color;
}
]|

# Symbolic colors

Besides being able to define color names, the CSS parser is also able
to read different color expressions, which can also be nested, providing
a rich language to define colors which are derived from a set of base
colors.

An example for using symbolic colors:
|[
@define-color entry-color shade (@bg_color, 0.7);

GtkEntry {
    background-color: @entry-color;
}

GtkEntry:focused {
    background-color: mix (@entry-color,
                           shade (#fff, 0.5),
                           0.8);
}
]|

# Specifying Colors # {#specifying-colors}
There are various ways to express colors in GTK+ CSS.

## rgb(r, g, b)

An opaque color.

- `r`, `g`, `b` can be either integers between 0 and 255, or percentages.

|[
  color: rgb(128, 10, 54);
  background-color: rgb(20%, 30%, 0%);
]|

## rgba(r, g, b, a)

A translucent color.

- `r`, `g`, `b` can be either integers between 0 and 255, or percentages.
- `a` is a floating point number between 0 and 1.

|[
  color: rgb(128, 10, 54, 0.5);
]|

## \#xxyyzz

An opaque color.

- `xx`, `yy`, `zz` are hexadecimal numbers specifying `r`, `g`, `b`
  variants with between 1 and 4 hexadecimal digits per component.

|[
  color: #f0c;
  background-color: #ff00cc;
  border-color: #ffff0000cccc;
]|

## \@name

Reference to a color that has been defined with \@define-color

|[
  color: @bg_color;
]|

## mix(color1, color2, factor)

A linear combination of `color1` and `color2`.

- `factor` is a floating point number between 0 and 1.

|[
  color: mix(#ff1e0a, @bg_color, 0.8);
]|

## shade(color, factor)

A lighter or darker variant of `color`.

- `factor` is a floating point number.

|[
  color: shade(@fg_color, 0.5);
]|

## lighter(color)

A lighter variant of `color`.

|[
  color: lighter(@fg_color);
]|

## darker(color)

A darker variant of `color`.

|[
  color: darker(@bg_color);
]|

## alpha(color, factor)

Modifies passed color’s alpha by a factor.

- `factor` is a floating point number. `factor` < 1.0 results in a more
  transparent color while `factor` > 1.0 results in a more opaque color.

|[
  color: alpha(@fg_color, 0.5);
]|


# Gradients

Linear or radial gradients can be used as background images.

## Linear Gradients

A linear gradient along the line from (`start_x`, `start_y`) to
(`end_x`, `end_y`) is specified using the following syntax:

> `-gtk-gradient (linear, start_x start_y, end_x end_y, color-stop (position, color), ...)`

- `start_x` and `end_x` can be either a floating point number between
0 and 1, or one of the special values: “left”, “right”, or “center”.
- `start_y` and `end_y` can be either a floating point number between 0 and 1, or one
of the special values: “top”, “bottom” or “center”.
- `position` is a floating point number between 0 and 1.
- `color` is a color expression (see above).

The color-stop can be repeated multiple times to add more than one color
stop. “from (color)” and “to (color)” can be used as abbreviations for
color stops with position 0 and 1, respectively.

## Example: Linear Gradient
![](gradient1.png)
|[
-gtk-gradient (linear,
               left top, right bottom,
               from(@yellow), to(@blue));
]|

## Example: Linear Gradient 2
![](gradient2.png)
|[
-gtk-gradient (linear,
               0 0, 0 1,
               color-stop(0, @yellow),
               color-stop(0.2, @blue),
               color-stop(1, #0f0))
]|

## Radial Gradients

A radial gradient along the two circles defined by (`start_x`,
`start_y`, `start_radius`) and (`end_x`, `end_y`, `end_radius`) is
specified using the following syntax:

> `-gtk-gradient (radial, start_x start_y, start_radius, end_x end_y, end_radius, color-stop (position, color), ...)`

where `start_radius` and `end_radius` are floating point numbers
and the other parameters are as before.

## Example: Radial Gradient
![](gradient3.png)
|[
-gtk-gradient (radial,
               center center, 0,
               center center, 1,
               from(@yellow), to(@green))
]|

## Example: Radial Gradient 2
![](gradient4.png)
|[
-gtk-gradient (radial,
               0.4 0.4, 0.1,
               0.6 0.6, 0.7,
               color-stop (0, #f00),
               color-stop (0.1, #a0f),
               color-stop (0.2, @yellow),
               color-stop (1, @green))
]|

# Border images # {#border-images}

Images and gradients can also be used in slices for the purpose of creating
scalable borders.
For more information, see the [CSS3 documentation for the border-image property](http://www.w3.org/TR/css3-background/#border-images).

![](slices.png)

The parameters of the slicing process are controlled by four
separate properties.

- Image Source
- Image Slice
- Image Width
- Image Repeat

Note that you can use the `border-image` shorthand property to set
values for the properties at the same time.

## Image Source

The border image source can be specified either as a
URL or a gradient:
|[
  border-image-source: url(path);
]|
or
|[
  border-image-source: -gtk-gradient(...);
]|

## Image Slice

|[
  border-image-slice: top right bottom left;
]|

The sizes specified by the `top`, `right`, `bottom`, and `left` parameters
are the offsets (in pixels) from the relevant edge where the image
should be “cut off” to build the slices used for the rendering
of the border.

## Image Width

|[
  border-image-width: top right bottom left;
]|

The sizes specified by the @top, @right, @bottom and @left parameters
are inward distances from the border box edge, used to specify the
rendered size of each slice determined by border-image-slice.
If this property is not specified, the values of border-width will
be used as a fallback.

## Image Repeat

Specifies how the image slices should be rendered in the area
outlined by border-width.

|[
  border-image-repeat: [stretch|repeat|round|space];
]|
or
|[
  border-image-repeat: [stretch|repeat|round|space] [stretch|repeat|round|space];
]|

- The default (stretch) is to resize the slice to fill in the
whole allocated area.

- If the value of this property is “repeat”, the image slice will
be tiled to fill the area.

- If the value of this property is “round”, the image slice will be
tiled to fill the area, and scaled to fit it exactly a whole number
of times.

- If the value of this property is “space”, the image slice will be
tiled to fill the area, and if it doesn’t fit it exactly a whole
number of times, the extra space is distributed as padding around
the slices.

- If two options are specified, the first one affects the
horizontal behaviour and the second one the vertical behaviour.  If
only one option is specified, it affects both.


## Example: Border Image
![](border1.png)
|[
border-image: url("gradient1.png") 10 10 10 10;
]|

## Example: Repeating Border Image
![](border2.png)
|[
border-image: url("gradient1.png") 10 10 10 10 repeat;
]|

## Example: Stetched Border Image
![](border3.png)
|[
border-image: url("gradient1.png") 10 10 10 10 stretch;
]|


# Supported Properties

Properties are the part that differ the most to common CSS, not all
properties are supported (some are planned to be supported
eventually, some others are meaningless or don't map intuitively in
a widget based environment).

The currently supported properties are:

## engine: [name|none];

- `none` means to use the default (ie. builtin engine)
|[
 engine: clearlooks;
]|

## background-color: [color|transparent];

- `color`: See [Specifying Colors][specifying-colors]
|[
 background-color: shade (@color1, 0.5);
]|

## color: [color|transparent];

- `color`: See [Specifying Colors][specifying-colors]
|[
 color: #fff;
]|

## border-color: [color|transparent]{1,4};

- `color`: See [Specifying Colors][specifying-colors]
- Four values used to specify: top right bottom left
- Three values used to specify: top vertical bottom
- Two values used to specify: horizontal vertical
- One value used to specify: color
|[
 border-color: red green blue;
]|

## border-top-color: [color|transparent];

- `color`: See [Specifying Colors][specifying-colors]
|[
 border-top-color: @borders;
]|

## border-right-color: [color|transparent];

- `color`: See [Specifying Colors][specifying-colors]
|[
 border-right-color: @borders;
]|

## border-bottom-color: [color|transparent];

- `color`: See [Specifying Colors][specifying-colors]
|[
 border-bottom-color: @borders;
]|

## border-left-color: [color|transparent];

- `color`: See [Specifying Colors][specifying-colors]
|[
 border-left-color: @borders;
]|

## font-family: name;

The name of the font family or font name to use.

- Note: unlike the CSS2 Specification this does not support using a
  prioritized list of font family names and/or generic family
  names.

|[
 font-family: Sans, Cantarell;
]|

## font-style: [normal|oblique|italic];

Selects between normal, italic and oblique faces within a font family.

|[
 font-style: italic;
]|

## font-variant: [normal|small-caps];

In a small-caps font the lower case letters look similar to the
uppercase ones, but in a smaller size and with slightly different
proportions.

|[
 font-variant: normal;
]|

## font-weight: [normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900];

Selects the weight of the font. The values '100' to '900' form an
ordered sequence, where each number indicates a weight that is at
least as dark as its predecessor. The keyword 'normal' is
synonymous with '400', and 'bold' is synonymous with
'700'. Keywords other than 'normal' and 'bold' have been shown to
be often confused with font names and a numerical scale was
therefore chosen for the 9-value list.
- Maps to #PANGO_TYPE_WEIGHT
|[
 font-weight: bold;
]|

## font-size: [absolute-size|relative-size|percentage];

- `absolute-size`: The size in normal size units like `px`, `pt`,
   and `em`. Or symbolic sizes like `xx-small`, `x-small`, `small`,
   `medium`, `large`, `x-large`, `xx-large`.
- `relative-size`: `larger` or `smaller` relative to the parent.
- `percentage`: A percentage difference from the nominal size.
|[
 font-size: 12px;
]|

## font-stretch: [face]

Selects a normal, condensed, or expanded face from a font family.

Absolute keyword values have the following ordering, from narrowest to widest:

- ultra-condensed
- extra-condensed
- condensed
- semi-condensed
- normal
- semi-expanded
- expanded
- extra-expanded
- ultra-expanded

## font: [family] [style] [variant] [stretch] [size];

A shorthand for setting a few font properties at once.
- Supports any format accepted by pango_font_description_from_string()
- Note: this is somewhat different from the CSS2 Specification for this property.
|[
 font: Bold 11;
]|

## margin: [length|percentage]{1,4};

A shorthand for setting the margin space required on all sides of
an element.
- Four values used to specify: top right bottom left
- Three values used to specify: top horizontal bottom
- Two values used to specify: vertical horizontal
- One value used to specify: margin
|[
 margin: 1em 2em 4em;
]|

## margin-top: [length|percentage];

Sets the margin space required on the top of an element.
|[
 margin-top: 10px;
]|

## margin-right: [length|percentage];

Sets the margin space required on the right of an element.
|[
 margin-right: 0px;
]|

## margin-bottom: [length|percentage];

Sets the margin space required on the bottom of an element.
|[
 margin-bottom: 10px;
]|

## margin-left: [length|percentage];

Sets the margin space required on the left of an element.
|[
 margin-left: 1em;
]|

## padding: [length|percentage]{1,4};

A shorthand for setting the padding space required on all sides of
an element. The padding area is the space between the content of
the element and its border.
- Four values used to specify: top right bottom left
- Three values used to specify: top horizontal bottom
- Two values used to specify: vertical horizontal
- One value used to specify: padding
|[
 padding: 1em 2em 4em;
]|

## padding-top: [length|percentage];

Sets the padding space required on the top of an element.
|[
 padding-top: 10px;
]|

## padding-right: [length|percentage];

Sets the padding space required on the right of an element.
|[
 padding-right: 0px;
]|

## padding-bottom: [length|percentage];

Sets the padding space required on the bottom of an element.
|[
 padding-bottom: 10px;
]|

## padding-left: [length|percentage];

Sets the padding space required on the left of an element.
|[
 padding-left: 1em;
]|

## border-width: [width]{1,4};

A shorthand for setting the border width on all sides of
an element.
- Four values used to specify: top right bottom left
- Three values used to specify: top vertical bottom
- Two values used to specify: horizontal vertical
- One value used to specify: width
|[
 border-width: 1px 2px 4px;
]|

## border-top-width: [width];

Sets the border width required on the top of an element.
|[
 border-top: 10px;
]|

## border-right-width: [width];

Sets the border width required on the right of an element.
|[
 border-right: 0px;
]|

## border-bottom-width: [width];

Sets the border width required on the bottom of an element.
|[
 border-bottom: 10px;
]|

## border-left-width: [width];

Sets the border width required on the left of an element.
|[
 border-left: 1em;
]|

## border-radius: [length|percentage]{1,4};

Allows setting how rounded all border corners are.
- Four values used to specify: top-left top-right bottom-right bottom-left
- Three values used to specify: top-left top-right-and-bottom-left bottom-right
- Two values used to specify: top-left-and-bottom-right top-right-and-bottom-left
- One value used to specify: radius on all sides
|[
 border-radius: 8px
]|

## border-style: [none|solid|inset|outset]{1,4};

A shorthand property for setting the line style for all four sides
of the elements border.
- Four values used to specify: top right bottom left;
- Three values used to specify: top horizontal bottom
- Two values used to specify: vertical horizontal
- One value used to specify: style
|[
 border-style: solid;
]|

## border-image: [source] [slice] [ / width ] [repeat]; A shorthand
for setting an image on the borders of elements. See [Border
Images][border-images].
|[
 border-image: url("/path/to/image.png") 3 4 4 3 repeat stretch;
]|

## border-image-source: [none|url|linear-gradient]{1,4};

Defines the image to use instead of the style of the border. If
this property is set to none, the style defined by border-style is
used instead.
|[
 border-image-source: url("/path/to/image.png");
]|

## border-image-slice: [number|percentage]{1,4};

Divides the image specified by border-image-source in nine regions:
the four corners, the four edges and the middle. It does this by
specifying 4 inwards offsets.
- Four values used to specify: top right bottom left;
- Three values used to specify: top vertical bottom
- Two values used to specify: horizontal vertical
- One value used to specify: slice
|[
 border-image-slice: 3 3 4 3;
]|

## border-image-width: [length|percentage]{1,4};

Defines the offset to use for dividing the border image in nine
parts, the top-left corner, central top edge, top-right-corner,
central right edge, bottom-right corner, central bottom edge,
bottom-left corner, and central right edge. They represent inward
distance from the top, right, bottom, and left edges.
- Four values used to specify: top right bottom left;
- Three values used to specify: top horizontal bottom
- Two values used to specify: vertical horizontal
- One value used to specify: width
|[
 border-image-width: 4px 0 4px 0;
]|

## border-image-repeat: [none|url|linear-gradient]{1,4};

Defines how the middle part of a border image is handled to match
the size of the border. It has a one-value syntax which describes
the behavior for all sides, and a two-value syntax that sets a
different value for the horizontal and vertical behavior.
- Two values used to specify: horizontal vertical
- One value used to specify: repeat
|[
 border-image-repeat: stretch;
]|

## background-image: [none|url|linear-gradient], ...
Sets one or several background images for an element. The images
are drawn on successive stacking context layers, with the first
specified being drawn as if it is the closest to the user. The
borders of the element are then drawn on top of them, and the
background-color is drawn beneath them.
- There can be several sources listed, separated by commas.
|[
 background-image: gtk-gradient (linear,
                                 left top, right top,
                                 from (#fff), to (#000));
]|

## background-repeat: [repeat|no-repeat|space|round|repeat-x|repeat-y];

Defines how background images are repeated. A background image can
be repeated along the horizontal axis, the vertical axis, both, or
not repeated at all.
- `repeat`: The image is repeated in the given direction as much as
   needed to cover the whole background image painting area. The
   last image may be clipped if the whole thing won't fit in the
   remaining area.
- `space`: The image is repeated in the given direction as much as
   needed to cover most of the background image painting area,
   without clipping an image. The remaining non-covered space is
   spaced out evenly between the images. The first and last images
   touches the edge of the element. The value of the
   background-position CSS property is ignored for the concerned
   direction, except if one single image is greater than the
   background image painting area, which is the only case where an
   image can be clipped when the space value is used.
- `round`: The image is repeated in the given direction as much as
   needed to cover most of the background image painting area,
   without clipping an image. If it doesn't cover exactly the area,
   the tiles are resized in that direction in order to match it.
- `no-repeat`: The image is not repeated (and hence the background
   image painting area will not necessarily been entirely
   covered). The position of the non-repeated background image is
   defined by the background-position CSS property.
- Note if not specified, the style doesn’t respect the CSS3
   specification, since the background will be stretched to fill
   the area.
|[
 background-repeat: no-repeat;
]|

## text-shadow: horizontal_offset vertical_offset [ blur_radius ] color;

A shadow list can be applied to text or symbolic icons, using the CSS3
text-shadow syntax, as defined in the
[CSS3 Specification](http://www.w3.org/TR/css3-text/#text-shadow).

- The offset of the shadow is specified with the
`horizontal_offset` and `vertical_offset` parameters.
- The optional blur radius is parsed, but it is currently not
rendered by the GTK+ theming engine.

To set a shadow on an icon, use the `icon-shadow` property instead,
with the same syntax.

To set multiple shadows on an element, you can specify a comma-separated list
of shadow elements in the `text-shadow` or `icon-shadow` property. Shadows are
always rendered front to back (i.e. the first shadow specified is on top of the
others). Shadows can thus overlay each other, but they can never overlay the
text or icon itself, which is always rendered on top of the shadow layer.

|[
  text-shadow: 1 1 0 blue, -4 -4 red;
]|

## box-shadow: [ inset ] horizontal_offset vertical_offset [ blur_radius ] [ spread ] color;

Themes can apply shadows on framed elements using the CSS3 box-shadow syntax,
as defined in the
[CSS3 Specification](http://www.w3.org/TR/css3-background/#the-box-shadow).

- A positive offset will draw a shadow that is offset to the right (down) of the box,
- A negative offset to the left (top).
- The optional spread parameter defines an additional distance to
expand the shadow shape in all directions, by the specified radius.
- The optional blur radius parameter is parsed, but it is currently not rendered by
the GTK+ theming engine.
- The inset parameter defines whether the drop shadow should be rendered inside or outside
the box canvas.

To set multiple box-shadows on an element, you can specify a comma-separated list
of shadow elements in the `box-shadow` property. Shadows are always rendered
front to back (i.e. the first shadow specified is on top of the others) so they may
overlap other boxes or other shadows.

|[
  box-shadow: inset 0 1px 1px alpha(black, 0.1);
]|

## transition: duration [s|ms] [linear|ease|ease-in|ease-out|ease-in-out] [loop];

Styles can specify transitions that will be used to create a
gradual change in the appearance when a widget state changes.
- The `duration` is the amount of time that the animation will take
for a complete cycle from start to end.
- If the loop option is given, the animation will be repated until
the state changes again.
- The option after the duration determines the transition function
from a small set of predefined functions.

- Linear

  ![](linear.png)

- Ease transition

![](ease.png)

- Ease-in-out transition

![](ease-in-out.png)

- Ease-in transition

![](ease-in.png)

- Ease-out transition

![](ease-out.png)

|[
  transition: 150ms ease-in-out;
]|


## gtk-key-bindings: binding1, binding2, ...;

Key binding set name list.

## Other Properties

GtkThemingEngines can register their own, engine-specific style properties
with the function gtk_theming_engine_register_property(). These properties
can be set in CSS like other properties, using a name of the form
`-namespace-name`, where namespace is typically
the name of the theming engine, and name is the
name of the property. Style properties that have been registered by widgets
using gtk_widget_class_install_style_property() can also be set in this
way, using the widget class name for namespace.

An example for using engine-specific style properties:
|[
* {
    engine: clearlooks;
    border-radius: 4;
    -GtkPaned-handle-size: 6;
    -clearlooks-colorize-scrollbar: false;
}
]|
#NAME: flags
#PARENT: Gtk.CellRenderer.start_editing.CellEditable
#COMMENT: render flags
#NAME: text
#PARENT: Gtk.AppChooserWidget.set_default_text.none
#COMMENT: the new value for #GtkAppChooserWidget:default-text
#NAME: entry
#PARENT: Gtk.Entry.get_icon_tooltip_markup.utf8
#COMMENT: a #GtkEntry
#NAME: natural_height
#PARENT: Gtk.WidgetClass.get_preferred_height.get_preferred_height.none
#COMMENT: location to store the natural height, or %NULL
#NAME: media_type
#PARENT: Gtk.PrintSettings.set_media_type.none
#COMMENT: the media type
#NAME: get_clipboard
#PARENT: Gtk.Widget.get_clipboard
#COMMENT: the appropriate clipboard object. If no
            clipboard already exists, a new one will
            be created. Once a clipboard object has
            been created, it is persistent for all time.
#NAME: get_position
#PARENT: Gtk.Editable
#COMMENT: Retrieves the current position of the cursor relative to the start
of the content of the editable.

Note that this position is in characters, not in bytes.
#NAME: ythickness
#PARENT: Gtk.RcStyle
#COMMENT: Y thickness
#NAME: get_focus_hadjustment
#PARENT: Gtk.Container.get_focus_hadjustment
#COMMENT: the horizontal focus adjustment, or %NULL if
  none has been set.
#NAME: lowest
#PARENT: Gtk.PathPriorityType
#COMMENT: Deprecated
#NAME: STYLE_PROVIDER_PRIORITY_APPLICATION
#PARENT: Gtk
#COMMENT: A priority that can be used when adding a #GtkStyleProvider
for application-specific style information.
#NAME: pos
#PARENT: Gtk.Scale.set_value_pos.none
#COMMENT: the position in which the current value is displayed
#NAME: free
#PARENT: Gtk.SelectionData
#COMMENT: Frees a #GtkSelectionData-struct returned from
gtk_selection_data_copy().
#NAME: iter_nth_child
#PARENT: Gtk.TreeModel
#COMMENT: Sets @iter to be the child of @parent, using the given index.

The first index is 0. If @n is too big, or @parent has no children,
@iter is set to an invalid iterator and %FALSE is returned. @parent
will remain a valid node after this function has been called. As a
special case, if @parent is %NULL, then the @n-th root node
is set.
#NAME: CellRendererAccelMode
#PARENT: Gtk
#COMMENT: Determines if the edited accelerators are GTK+ accelerators. If
they are, consumed modifiers are suppressed, only accelerators
accepted by GTK+ are allowed, and the accelerators are rendered
in the same way as they are in menus.
#NAME: notebook
#PARENT: Gtk.Notebook.set_show_border.none
#COMMENT: a #GtkNotebook
#NAME: cycle-child-focus
#PARENT: Gtk.Paned
#COMMENT: The ::cycle-child-focus signal is a
[keybinding signal][GtkBindingSignal]
which gets emitted to cycle the focus between the children of the paned.

The default binding is f6.
#NAME: radio_button
#PARENT: Gtk.RadioButton.join_group.none
#COMMENT: the #GtkRadioButton object
#NAME: tree_view
#PARENT: Gtk.TreeView.row_expanded.gboolean
#COMMENT: A #GtkTreeView.
#NAME: accel_groups_from_object
#PARENT: Gtk
#COMMENT: Gets a list of all accel groups which are attached to @object.
#NAME: set_heading
#PARENT: Gtk.AppChooserButton
#COMMENT: Sets the text to display at the top of the dialog.
If the heading is not set, the dialog displays a default text.
#NAME: context
#PARENT: Gtk.CellArea.get_preferred_height_for_width.none
#COMMENT: the #GtkCellAreaContext which has already been requested for widths.
#NAME: destroy
#PARENT: Gtk.CellLayout.set_cell_data_func.none
#COMMENT: destroy notify for @func_data
#NAME: get_upper
#PARENT: Gtk.Adjustment.get_upper
#COMMENT: The current maximum value of the adjustment.
#NAME: cell_layout
#PARENT: Gtk.CellLayout.add_attribute.none
#COMMENT: a #GtkCellLayout
#NAME: get_progress_pulse_step
#PARENT: Gtk.Entry.get_progress_pulse_step
#COMMENT: a fraction from 0.0 to 1.0
#NAME: get_limit
#PARENT: Gtk.RecentChooser.get_limit
#COMMENT: A positive integer, or -1 meaning that all items are
  returned.
#NAME: state
#PARENT: Gtk.StyleProperties.get_valist.none
#COMMENT: state to retrieve the property values for
#NAME: get_style
#PARENT: Gtk.ToolPalette
#COMMENT: Gets the style (icons, text or both) of items in the tool palette.
#NAME: get_relief_style
#PARENT: Gtk.Toolbar.get_relief_style
#COMMENT: The relief style of buttons on @toolbar.
#NAME: name
#PARENT: Gtk.AboutDialog.set_program_name.none
#COMMENT: the program name
#NAME: frame
#PARENT: Gtk.Frame.get_label.utf8
#COMMENT: a #GtkFrame
#NAME: menu
#PARENT: Gtk.Menu.set_title.none
#COMMENT: a #GtkMenu
#NAME: new_literal
#PARENT: Gtk.SymbolicColor
#COMMENT: Creates a symbolic color pointing to a literal color.
#NAME: list_cell_properties
#PARENT: Gtk.CellAreaClass.list_cell_properties
#COMMENT: a newly
    allocated %NULL-terminated array of #GParamSpec*.  The array
    must be freed with g_free().
#NAME: set_current_uri
#PARENT: Gtk.RecentChooserIface.set_current_uri.set_current_uri
#COMMENT: %TRUE if the URI was found.
#NAME: event
#PARENT: Gtk.Widget.scroll-event.gboolean
#COMMENT: the #GdkEventScroll which triggered
  this signal.
#NAME: make_current
#PARENT: Gtk.GLArea
#COMMENT: Ensures that the #GdkGLContext used by @area is associated with
the #GtkGLArea.

This function is automatically called before emitting the
#GtkGLArea::render signal, and doesn't normally need to be called
by application code.
#NAME: destroy
#PARENT: Gtk.FontChooserIface.set_filter_func.set_filter_func.none
#COMMENT: function to call to free @data when it is no longer needed
#NAME: uri
#PARENT: Gtk.RecentChooserIface.set_current_uri.set_current_uri.gboolean
#COMMENT: a URI
#NAME: SensitivityType
#PARENT: Gtk
#COMMENT: Determines how GTK+ handles the sensitivity of stepper arrows
at the end of range widgets.
#NAME: etched_out
#PARENT: Gtk.ShadowType
#COMMENT: The outline has a raised 3d appearance.
#NAME: set
#PARENT: Gtk.Alignment
#COMMENT: Sets the #GtkAlignment values.
#NAME: to_key_file
#PARENT: Gtk.PageSetup
#COMMENT: This function adds the page setup from @setup to @key_file.
#NAME: get_position
#PARENT: Gtk.Paned
#COMMENT: Obtains the position of the divider between the two panes.
#NAME: SizeGroup
#PARENT: Gtk
#COMMENT: #GtkSizeGroup provides a mechanism for grouping a number of widgets
together so they all request the same amount of space.  This is
typically useful when you want a column of widgets to have the same
size, but you can’t use a #GtkGrid widget.

In detail, the size requested for each widget in a #GtkSizeGroup is
the maximum of the sizes that would have been requested for each
widget in the size group if they were not in the size group. The mode
of the size group (see gtk_size_group_set_mode()) determines whether
this applies to the horizontal size, the vertical size, or both sizes.

Note that size groups only affect the amount of space requested, not
the size that the widgets finally receive. If you want the widgets in
a #GtkSizeGroup to actually be the same size, you need to pack them in
such a way that they get the size they request and not more. For
example, if you are packing your widgets into a table, you would not
include the %GTK_FILL flag.

#GtkSizeGroup objects are referenced by each widget in the size group,
so once you have added all widgets to a #GtkSizeGroup, you can drop
the initial reference to the size group with g_object_unref(). If the
widgets in the size group are subsequently destroyed, then they will
be removed from the size group and drop their references on the size
group; when all widgets have been removed, the size group will be
freed.

Widgets can be part of multiple size groups; GTK+ will compute the
horizontal size of a widget from the horizontal requisition of all
widgets that can be reached from the widget by a chain of size groups
of type %GTK_SIZE_GROUP_HORIZONTAL or %GTK_SIZE_GROUP_BOTH, and the
vertical size from the vertical requisition of all widgets that can be
reached from the widget by a chain of size groups of type
%GTK_SIZE_GROUP_VERTICAL or %GTK_SIZE_GROUP_BOTH.

Note that only non-contextual sizes of every widget are ever consulted
by size groups (since size groups have no knowledge of what size a widget
will be allocated in one dimension, it cannot derive how much height
a widget will receive for a given width). When grouping widgets that
trade height for width in mode %GTK_SIZE_GROUP_VERTICAL or %GTK_SIZE_GROUP_BOTH:
the height for the minimum width will be the requested height for all
widgets in the group. The same is of course true when horizontally grouping
width for height widgets.

Widgets that trade height-for-width should set a reasonably large minimum width
by way of #GtkLabel:width-chars for instance. Widgets with static sizes as well
as widgets that grow (such as ellipsizing text) need no such considerations.

# GtkSizeGroup as GtkBuildable

Size groups can be specified in a UI definition by placing an <object>
element with `class="GtkSizeGroup"` somewhere in the UI definition. The
widgets that belong to the size group are specified by a <widgets> element
that may contain multiple <widget> elements, one for each member of the
size group. The ”name” attribute gives the id of the widget.

An example of a UI definition fragment with GtkSizeGroup:
|[
<object class="GtkSizeGroup">
  <property name="mode">GTK_SIZE_GROUP_HORIZONTAL</property>
  <widgets>
    <widget name="radio1"/>
    <widget name="radio2"/>
  </widgets>
</object>
]|
#NAME: dest_x
#PARENT: Gtk.Widget.translate_coordinates.gboolean
#COMMENT: location to store X position relative to @dest_widget
#NAME: iter_list_regions
#PARENT: Gtk.WidgetPath
#COMMENT: Returns a list with all the region names defined for the widget
at position @pos in the hierarchy defined in @path.
#NAME: tooltip
#PARENT: Gtk.Tooltip.set_icon_from_stock.none
#COMMENT: a #GtkTooltip
#NAME: dest_y
#PARENT: Gtk.Widget.translate_coordinates.gboolean
#COMMENT: location to store Y position relative to @dest_widget
#NAME: fontsel
#PARENT: Gtk.FontSelection.get_font_name.utf8
#COMMENT: a #GtkFontSelection
#NAME: buffer
#PARENT: Gtk.TextBuffer.end_user_action.none
#COMMENT: a #GtkTextBuffer
#NAME: margin
#PARENT: Gtk.Widget.set_margin_end.none
#COMMENT: the end margin
#NAME: FileChooserDialog
#PARENT: Gtk
#COMMENT: #GtkFileChooserDialog is a dialog box suitable for use with
“File/Open” or “File/Save as” commands.  This widget works by
putting a #GtkFileChooserWidget inside a #GtkDialog.  It exposes
the #GtkFileChooser interface, so you can use all of the
#GtkFileChooser functions on the file chooser dialog as well as
those for #GtkDialog.

Note that #GtkFileChooserDialog does not have any methods of its
own.  Instead, you should use the functions that work on a
#GtkFileChooser.

## Typical usage ## {#gtkfilechooser-typical-usage}

In the simplest of cases, you can the following code to use
#GtkFileChooserDialog to select a file for opening:

|[
GtkWidget *dialog;
GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;
gint res;

dialog = gtk_file_chooser_dialog_new ("Open File",
                                      parent_window,
                                      action,
                                      _("_Cancel"),
                                      GTK_RESPONSE_CANCEL,
                                      _("_Open"),
                                      GTK_RESPONSE_ACCEPT,
                                      NULL);

res = gtk_dialog_run (GTK_DIALOG (dialog));
if (res == GTK_RESPONSE_ACCEPT)
  {
    char *filename;
    GtkFileChooser *chooser = GTK_FILE_CHOOSER (dialog);
    filename = gtk_file_chooser_get_filename (chooser);
    open_file (filename);
    g_free (filename);
  }

gtk_widget_destroy (dialog);
]|

To use a dialog for saving, you can use this:

|[
GtkWidget *dialog;
GtkFileChooser *chooser;
GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;
gint res;

dialog = gtk_file_chooser_dialog_new ("Save File",
                                      parent_window,
                                      action,
                                      _("_Cancel"),
                                      GTK_RESPONSE_CANCEL,
                                      _("_Save"),
                                      GTK_RESPONSE_ACCEPT,
                                      NULL);
chooser = GTK_FILE_CHOOSER (dialog);

gtk_file_chooser_set_do_overwrite_confirmation (chooser, TRUE);

if (user_edited_a_new_document)
  gtk_file_chooser_set_current_name (chooser,
                                     _("Untitled document"));
else
  gtk_file_chooser_set_filename (chooser,
                                 existing_filename);

res = gtk_dialog_run (GTK_DIALOG (dialog));
if (res == GTK_RESPONSE_ACCEPT)
  {
    char *filename;

    filename = gtk_file_chooser_get_filename (chooser);
    save_to_file (filename);
    g_free (filename);
  }

gtk_widget_destroy (dialog);
]|

## Setting up a file chooser dialog ## {#gtkfilechooserdialog-setting-up}

There are various cases in which you may need to use a #GtkFileChooserDialog:

- To select a file for opening. Use #GTK_FILE_CHOOSER_ACTION_OPEN.

- To save a file for the first time. Use #GTK_FILE_CHOOSER_ACTION_SAVE,
  and suggest a name such as “Untitled” with gtk_file_chooser_set_current_name().

- To save a file under a different name. Use #GTK_FILE_CHOOSER_ACTION_SAVE,
  and set the existing filename with gtk_file_chooser_set_filename().

- To choose a folder instead of a file. Use #GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.

Note that old versions of the file chooser’s documentation suggested
using gtk_file_chooser_set_current_folder() in various
situations, with the intention of letting the application
suggest a reasonable default folder.  This is no longer
considered to be a good policy, as now the file chooser is
able to make good suggestions on its own.  In general, you
should only cause the file chooser to show a specific folder
when it is appropriate to use gtk_file_chooser_set_filename(),
i.e. when you are doing a Save As command and you already
have a file saved somewhere.

## Response Codes ## {#gtkfilechooserdialog-responses}

#GtkFileChooserDialog inherits from #GtkDialog, so buttons that
go in its action area have response codes such as
#GTK_RESPONSE_ACCEPT and #GTK_RESPONSE_CANCEL.  For example, you
could call gtk_file_chooser_dialog_new() as follows:

|[
GtkWidget *dialog;
GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;

dialog = gtk_file_chooser_dialog_new ("Open File",
                                      parent_window,
                                      action,
                                      _("_Cancel"),
                                      GTK_RESPONSE_CANCEL,
                                      _("_Open"),
                                      GTK_RESPONSE_ACCEPT,
                                      NULL);
]|

This will create buttons for “Cancel” and “Open” that use stock
response identifiers from #GtkResponseType.  For most dialog
boxes you can use your own custom response codes rather than the
ones in #GtkResponseType, but #GtkFileChooserDialog assumes that
its “accept”-type action, e.g. an “Open” or “Save” button,
will have one of the following response codes:

- #GTK_RESPONSE_ACCEPT
- #GTK_RESPONSE_OK
- #GTK_RESPONSE_YES
- #GTK_RESPONSE_APPLY

This is because #GtkFileChooserDialog must intercept responses
and switch to folders if appropriate, rather than letting the
dialog terminate — the implementation uses these known
response codes to know which responses can be blocked if
appropriate.

To summarize, make sure you use a
[stock response code][gtkfilechooserdialog-responses]
when you use #GtkFileChooserDialog to ensure proper operation.
#NAME: shadow_type
#PARENT: Gtk.paint_tab.none
#COMMENT: the type of shadow to draw
#NAME: rc_parse_color
#PARENT: Gtk.rc_parse_color
#COMMENT: %G_TOKEN_NONE if parsing succeeded, otherwise the token
    that was expected but not found
#NAME: wait_for_uris
#PARENT: Gtk.Clipboard
#COMMENT: Requests the contents of the clipboard as URIs. This function waits
for the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.
#NAME: iter
#PARENT: Gtk.TreeViewColumn.cell_set_cell_data.none
#COMMENT: The #GtkTreeIter to to get the cell renderer’s attributes from.
#NAME: set_page_header_image
#PARENT: Gtk.Assistant
#COMMENT: Sets a header image for @page.
#NAME: scroll_type
#PARENT: Gtk.Menu.move-scroll.none
#COMMENT: a #GtkScrollType
#NAME: draw_page_finish
#PARENT: Gtk.PrintOperation
#COMMENT: Signalize that drawing of particular page is complete.

It is called after completion of page drawing (e.g. drawing in another
thread).
If gtk_print_operation_set_defer_drawing() was called before, then this function
has to be called by application. In another case it is called by the library
itself.
#NAME: window
#PARENT: Gtk.StyleContext.set_background.none
#COMMENT: a #GdkWindow
#NAME: attach_defaults
#PARENT: Gtk.Table
#COMMENT: As there are many options associated with gtk_table_attach(), this convenience
function provides the programmer with a means to add children to a table with
identical padding and expansion options. The values used for the #GtkAttachOptions
are `GTK_EXPAND | GTK_FILL`, and the padding is set to 0.
#NAME: len
#PARENT: Gtk.TextBuffer.insert_with_tags.none
#COMMENT: length of @text, or -1
#NAME: set_widget
#PARENT: Gtk.Accessible
#COMMENT: Sets the #GtkWidget corresponding to the #GtkAccessible.

@accessible will not hold a reference to @widget.
It is the caller’s responsibility to ensure that when @widget
is destroyed, the widget is unset by calling this function
again with @widget set to %NULL.
#NAME: info_bar
#PARENT: Gtk.InfoBar.add_buttons.none
#COMMENT: a #GtkInfoBar
#NAME: PositionType
#PARENT: Gtk
#COMMENT: Describes which edge of a widget a certain feature is positioned at, e.g. the
tabs of a #GtkNotebook, the handle of a #GtkHandleBox or the label of a
#GtkScale.
#NAME: get_drag_target_item
#PARENT: Gtk.ToolPalette
#COMMENT: Gets the target entry for a dragged #GtkToolItem.
#NAME: draw_sensitive
#PARENT: Gtk.CellView.set_draw_sensitive.none
#COMMENT: whether to draw all cells in a sensitive state.
#NAME: calendar
#PARENT: Gtk.Calendar.set_detail_width_chars.none
#COMMENT: a #GtkCalendar.
#NAME: pos
#PARENT: Gtk.WidgetPath.iter_has_qclass.gboolean
#COMMENT: position to query, -1 for the path head
#NAME: 
#PARENT: Gtk.Dialog.add_buttons.none...
#COMMENT: response ID for first button, then more text-response_id pairs
#NAME: count
#PARENT: Gtk.Entry.delete-from-cursor.none
#COMMENT: the number of @type units to delete
#NAME: set_size_wildcarded
#PARENT: Gtk.IconSource
#COMMENT: If the icon size is wildcarded, this source can be used as the base
image for an icon of any size.  If the size is not wildcarded, then
the size the source applies to should be set with
gtk_icon_source_set_size() and the icon source will only be used
with that specific size.

#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.

#GtkIconSet will normally scale wildcarded source images to produce
an appropriate icon at a given size, but will not change the size
of source images that match exactly.
#NAME: is_custom
#PARENT: Gtk.PaperSize
#COMMENT: Returns %TRUE if @size is not a standard paper size.
#NAME: get_popup_accessible
#PARENT: Gtk.ComboBox.get_popup_accessible
#COMMENT: the accessible object corresponding
    to the combo box’s popup.
#NAME: apply_tag
#PARENT: Gtk.TextBuffer
#COMMENT: Emits the “apply-tag” signal on @buffer. The default
handler for the signal applies @tag to the given range.
@start and @end do not have to be in order.
#NAME: get_iter
#PARENT: Gtk.TreeModel
#COMMENT: Sets @iter to a valid iterator pointing to @path.  If @path does
not exist, @iter is set to an invalid iterator and %FALSE is returned.
#NAME: set_mnemonic_modifier
#PARENT: Gtk.Window
#COMMENT: Sets the mnemonic modifier for this window.
#NAME: window_group
#PARENT: Gtk.WindowGroup.get_current_grab.Widget
#COMMENT: a #GtkWindowGroup
#NAME: accel_mods
#PARENT: Gtk.CellRendererAccel.accel-edited.none
#COMMENT: the new acclerator modifier mask
#NAME: child
#PARENT: Gtk.Notebook.append_page.gint
#COMMENT: the #GtkWidget to use as the contents of the page
#NAME: new
#PARENT: Gtk.RecentManager
#COMMENT: Creates a new recent manager object. Recent manager objects are used to
handle the list of recently used resources. A #GtkRecentManager object
monitors the recently used resources list, and emits the “changed” signal
each time something inside the list changes.

#GtkRecentManager objects are expensive: be sure to create them only when
needed. You should use gtk_recent_manager_get_default() instead.
#NAME: tree_model
#PARENT: Gtk.TreeModel.rows_reordered_with_length.none
#COMMENT: a #GtkTreeModel
#NAME: window-removed
#PARENT: Gtk.Application
#COMMENT: Emitted when a #GtkWindow is removed from @application,
either as a side-effect of being destroyed or explicitly
through gtk_application_remove_window().
#NAME: accel_group
#PARENT: Gtk.Menu.set_accel_group.none
#COMMENT: the #GtkAccelGroup to be associated
              with the menu.
#NAME: notebook
#PARENT: Gtk.Notebook.set_menu_label.none
#COMMENT: a #GtkNotebook
#NAME: group-name
#PARENT: Gtk.Notebook
#COMMENT: Group name for tab drag and drop.
#NAME: get_update_policy
#PARENT: Gtk.SpinButton.get_update_policy
#COMMENT: the current update policy
#NAME: get_font
#PARENT: Gtk.ThemingEngine.get_font
#COMMENT: the #PangoFontDescription for the given
         state. This object is owned by GTK+ and should not be
         freed.
#NAME: hover-selection
#PARENT: Gtk.TreeView
#COMMENT: Enables or disables the hover selection mode of @tree_view.
Hover selection makes the selected row follow the pointer.
Currently, this works only for the selection modes
%GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.

This mode is primarily intended for treeviews in popups, e.g.
in #GtkComboBox or #GtkEntryCompletion.
#NAME: pack_end
#PARENT: Gtk.HeaderBar
#COMMENT: Adds @child to @bar, packed with reference to the
end of the @bar.
#NAME: x
#PARENT: Gtk.Widget.query-tooltip.gboolean
#COMMENT: the x coordinate of the cursor position where the request has
    been emitted, relative to @widget's left side
#NAME: get_use_alpha
#PARENT: Gtk.ColorButton
#COMMENT: Does the color selection dialog use the alpha channel ?
#NAME: insert_action_text
#PARENT: Gtk.EntryCompletion
#COMMENT: Inserts an action in @completion’s action item list at position @index_
with text @text. If you want the action item to have markup, use
gtk_entry_completion_insert_action_markup().
#NAME: show-heading
#PARENT: Gtk.Calendar
#COMMENT: Determines whether a heading is displayed.
#NAME: get_bounding_box_center
#PARENT: Gtk.Gesture
#COMMENT: If there are touch sequences being currently handled by @gesture,
this function returns %TRUE and fills in @x and @y with the center
of the bounding box containing all active touches. Otherwise, %FALSE
will be returned.
#NAME: y
#PARENT: Gtk.Widget.query-tooltip.gboolean
#COMMENT: the y coordinate of the cursor position where the request has
    been emitted, relative to @widget's top
#NAME: targets
#PARENT: Gtk.Widget.drag_begin_with_coordinates.Gdk.DragContext
#COMMENT: The targets (data formats) in which the
   source can provide the data
#NAME: show_now
#PARENT: Gtk.Widget
#COMMENT: Shows a widget. If the widget is an unmapped toplevel widget
(i.e. a #GtkWindow that has not yet been shown), enter the main
loop and wait for the window to actually be mapped. Be careful;
because the main loop is running, anything can happen during
this function.
#NAME: get_family
#PARENT: Gtk.FontSelection.get_family
#COMMENT: A #PangoFontFamily representing the
    selected font family. Font families are a collection of font
    faces. The returned object is owned by @fontsel and must not
    be modified or freed.
#NAME: new
#PARENT: Gtk.Box.new
#COMMENT: a new #GtkBox.
#NAME: menu
#PARENT: Gtk.Menu.attach.none
#COMMENT: a #GtkMenu
#NAME: bind_model
#PARENT: Gtk.MenuShell
#COMMENT: Establishes a binding between a #GtkMenuShell and a #GMenuModel.

The contents of @shell are removed and then refilled with menu items
according to @model.  When @model changes, @shell is updated.
Calling this function twice on @shell with different @model will
cause the first binding to be replaced with a binding to the new
model. If @model is %NULL then any previous binding is undone and
all children are removed.

@with_separators determines if toplevel items (eg: sections) have
separators inserted between them.  This is typically desired for
menus but doesn’t make sense for menubars.

If @action_namespace is non-%NULL then the effect is as if all
actions mentioned in the @model have their names prefixed with the
namespace, plus a dot.  For example, if the action “quit” is
mentioned and @action_namespace is “app” then the effective action
name is “app.quit”.

This function uses #GtkActionable to define the action name and
target values on the created menu items.  If you want to use an
action group other than “app” and “win”, or if you want to use a
#GtkMenuShell outside of a #GtkApplicationWindow, then you will need
to attach your own action group to the widget hierarchy using
gtk_widget_insert_action_group().  As an example, if you created a
group with a “quit” action and inserted it with the name “mygroup”
then you would use the action name “mygroup.quit” in your
#GMenuModel.

For most cases you are probably better off using
gtk_menu_new_from_model() or gtk_menu_bar_new_from_model() or just
directly passing the #GMenuModel to gtk_application_set_app_menu() or
gtk_application_set_menubar().
#NAME: get_storage_type
#PARENT: Gtk.Image
#COMMENT: Gets the type of representation being used by the #GtkImage
to store image data. If the #GtkImage has no image data,
the return value will be %GTK_IMAGE_EMPTY.
#NAME: iconic
#PARENT: Gtk.ModelButton
#COMMENT: If this property is set, the button will show an icon if one is set.
If no icon is set, the text will be used. This is typically used for
horizontal sections of linked buttons.
#NAME: to_string
#PARENT: Gtk.CssProvider.to_string
#COMMENT: a new string representing the @provider.
#NAME: area
#PARENT: Gtk.GLArea.queue_render.none
#COMMENT: a #GtkGLArea
#NAME: set_sensitive
#PARENT: Gtk.Action
#COMMENT: Sets the :sensitive property of the action to @sensitive. Note that
this doesn’t necessarily mean effective sensitivity. See
gtk_action_is_sensitive()
for that.
#NAME: chooser
#PARENT: Gtk.ColorChooserInterface.add_palette.add_palette.none
#COMMENT: a #GtkColorChooser
#NAME: get_logo_icon_name
#PARENT: Gtk.AboutDialog
#COMMENT: Returns the icon name displayed as logo in the about dialog.
#NAME: editable
#PARENT: Gtk.EditableInterface.do_delete_text.do_delete_text.none
#COMMENT: a #GtkEditable
#NAME: get_name
#PARENT: Gtk.FileFilter.get_name
#COMMENT: The human-readable name of the filter,
  or %NULL. This value is owned by GTK+ and must not
  be modified or freed.
#NAME: binding_set
#PARENT: Gtk.BindingEntry
#COMMENT: binding set this entry belongs to
#NAME: alias
#PARENT: Gtk.IconSize.register_alias.none
#COMMENT: an alias for @target
#NAME: set_comments
#PARENT: Gtk.AboutDialog
#COMMENT: Sets the comments string to display in the about dialog.
This should be a short string of one or two lines.
#NAME: overwrite
#PARENT: Gtk.TextView.set_overwrite.none
#COMMENT: %TRUE to turn on overwrite mode, %FALSE to turn it off
#NAME: menu
#PARENT: Gtk.Menu.popup_for_device.none
#COMMENT: a #GtkMenu
#NAME: add_mime_type
#PARENT: Gtk.RecentFilter
#COMMENT: Adds a rule that allows resources based on their registered MIME type.
#NAME: query-tooltip
#PARENT: Gtk.StatusIcon
#COMMENT: Emitted when the hover timeout has expired with the
cursor hovering above @status_icon; or emitted when @status_icon got
focus in keyboard mode.

Using the given coordinates, the signal handler should determine
whether a tooltip should be shown for @status_icon. If this is
the case %TRUE should be returned, %FALSE otherwise. Note that if
@keyboard_mode is %TRUE, the values of @x and @y are undefined and
should not be used.

The signal handler is free to manipulate @tooltip with the therefore
destined function calls.

Whether this signal is emitted is platform-dependent.
For plain text tooltips, use #GtkStatusIcon:tooltip-text in preference.
#NAME: test_find_label
#PARENT: Gtk
#COMMENT: This function will search @widget and all its descendants for a GtkLabel
widget with a text string matching @label_pattern.
The @label_pattern may contain asterisks “*” and question marks “?” as
placeholders, g_pattern_match() is used for the matching.
Note that locales other than "C“ tend to alter (translate” label strings,
so this function is genrally only useful in test programs with
predetermined locales, see gtk_test_init() for more details.
#NAME: widget_type
#PARENT: Gtk.test_find_sibling.Widget
#COMMENT: Type of a aearched for sibling widget
#NAME: parent_class
#PARENT: Gtk.AppChooserButtonClass
#COMMENT: The parent class.
#NAME: spacing
#PARENT: Gtk.Table.set_col_spacings.none
#COMMENT: the number of pixels of space to place between every column
  in the table.
#NAME: new_with_range
#PARENT: Gtk.VScale
#COMMENT: Creates a new vertical scale widget that lets the user input a
number between @min and @max (including @min and @max) with the
increment @step.  @step must be nonzero; it’s the distance the
slider moves when using the arrow keys to adjust the scale value.

Note that the way in which the precision is derived works best if @step
is a power of ten. If the resulting precision is not suitable for your
needs, use gtk_scale_set_digits() to correct it.
#NAME: style
#PARENT: Gtk.paint_tab.none
#COMMENT: a #GtkStyle
#NAME: outset
#PARENT: Gtk.BorderStyle
#COMMENT: Looks as if the content is coming out of the canvas
#NAME: width
#PARENT: Gtk.Layout.get_size.none
#COMMENT: location to store the width set on
    @layout, or %NULL
#NAME: paned
#PARENT: Gtk.Paned.set_wide_handle.none
#COMMENT: a #GtkPaned
#NAME: path
#PARENT: Gtk.WidgetPath.is_type.gboolean
#COMMENT: a #GtkWidgetPath
#NAME: license-type
#PARENT: Gtk.AboutDialog
#COMMENT: The license of the program, as a value of the %GtkLicense enumeration.

The #GtkAboutDialog will automatically fill out a standard disclaimer
and link the user to the appropriate online resource for the license
text.

If %GTK_LICENSE_UNKNOWN is used, the link used will be the same
specified in the #GtkAboutDialog:website property.

If %GTK_LICENSE_CUSTOM is used, the current contents of the
#GtkAboutDialog:license property are used.

For any other #GtkLicense value, the contents of the
#GtkAboutDialog:license property are also set by this property as
a side effect.
#NAME: signal_name
#PARENT: Gtk.BindingSignal
#COMMENT: the action signal to be emitted
#NAME: parent_class
#PARENT: Gtk.ApplicationWindowClass
#COMMENT: The parent class.
#NAME: keyval
#PARENT: Gtk.BindingEntry.remove.none
#COMMENT: key value of binding to remove
#NAME: start_pos
#PARENT: Gtk.EditableInterface.get_selection_bounds.get_selection_bounds.gboolean
#COMMENT: location to store the starting position, or %NULL
#NAME: detail
#PARENT: Gtk.StyleClass.render_icon.render_icon.GdkPixbuf.Pixbuf
#COMMENT: a style detail
#NAME: accel_key
#PARENT: Gtk.AccelKey
#COMMENT: The accelerator keyval
#NAME: custom-item-activated
#PARENT: Gtk.AppChooserButton
#COMMENT: Emitted when a custom item, previously added with
gtk_app_chooser_button_append_custom_item(), is activated from the
dropdown menu.
#NAME: source
#PARENT: Gtk.IconSource.get_state_wildcarded.gboolean
#COMMENT: a #GtkIconSource
#NAME: icon_theme
#PARENT: Gtk.IconTheme.lookup_by_gicon_for_scale.IconInfo
#COMMENT: a #GtkIconTheme
#NAME: paned
#PARENT: Gtk.Paned.pack1.none
#COMMENT: a paned widget
#NAME: min
#PARENT: Gtk.Scale.new_with_range.Widget
#COMMENT: minimum value
#NAME: manager
#PARENT: Gtk.UIManager.ensure_update.none
#COMMENT: a #GtkUIManager
#NAME: tree_model
#PARENT: Gtk.TreeModel.get.none
#COMMENT: a #GtkTreeModel
#NAME: get_window_type
#PARENT: Gtk.Window
#COMMENT: Gets the type of the window. See #GtkWindowType.
#NAME: FlowBoxSortFunc
#PARENT: Gtk.FlowBoxSortFunc
#COMMENT: < 0 if @child1 should be before @child2, 0 if
    the are equal, and > 0 otherwise
#NAME: value
#PARENT: Gtk.Adjustment.set_value.none
#COMMENT: the new value.
#NAME: is_active
#PARENT: Gtk.Gesture.is_active
#COMMENT: %TRUE if gesture is active
#NAME: get_example_icon_name
#PARENT: Gtk.IconTheme.get_example_icon_name
#COMMENT: the name of an example icon or %NULL.
    Free with g_free().
#NAME: start
#PARENT: Gtk.TextBuffer.get_bounds.none
#COMMENT: iterator to initialize with first position in the buffer
#NAME: show-help
#PARENT: Gtk.Widget.show-help
#COMMENT: %TRUE to stop other handlers from being invoked for the event.
%FALSE to propagate the event further.
#NAME: tree_view
#PARENT: Gtk.TreeView.append_column.gint
#COMMENT: A #GtkTreeView.
#NAME: list_child_properties
#PARENT: Gtk.ContainerClass
#COMMENT: Returns all child properties of a container class.
#NAME: connect_signals_full
#PARENT: Gtk.Builder
#COMMENT: This function can be thought of the interpreted language binding
version of gtk_builder_connect_signals(), except that it does not
require GModule to function correctly.
#NAME: lookup_icon_set
#PARENT: Gtk.Style.lookup_icon_set
#COMMENT: icon set of @stock_id
#NAME: test_create_widget
#PARENT: Gtk.test_create_widget
#COMMENT: a newly created widget.
#NAME: add_resource_path
#PARENT: Gtk.IconTheme
#COMMENT: Adds a resource path that will be looked at when looking
for icons, similar to search paths.

This function should be used to make application-specific icons
available as part of the icon theme.

The resources are considered as part of the hicolor icon theme
and must be located in subdirectories that are defined in the
hicolor icon theme, such as `@path/16x16/actions/run.png`.
Icons that are directly placed in the resource path instead
of a subdirectory are also considered as ultimate fallback.
#NAME: op
#PARENT: Gtk.PrintOperation.set_use_full_page.none
#COMMENT: a #GtkPrintOperation
#NAME: get_child_detached
#PARENT: Gtk.HandleBox.get_child_detached
#COMMENT: %TRUE if the child is currently detached, otherwise %FALSE
#NAME: container
#PARENT: Gtk.Container.set_border_width.none
#COMMENT: a #GtkContainer
#NAME: chooser
#PARENT: Gtk.RecentChooser.set_select_multiple.none
#COMMENT: a #GtkRecentChooser
#NAME: set_opacity
#PARENT: Gtk.Window
#COMMENT: Request the windowing system to make @window partially transparent,
with opacity 0 being fully transparent and 1 fully opaque. (Values
of the opacity parameter are clamped to the [0,1] range.) On X11
this has any effect only on X screens with a compositing manager
running. See gtk_widget_is_composited(). On Windows it should work
always.

Note that setting a window’s opacity after the window has been
shown causes it to flicker once on Windows.
#NAME: cr
#PARENT: Gtk.paint_extension.none
#COMMENT: a #cairo_t
#NAME: both
#PARENT: Gtk.ArrowPlacement
#COMMENT: Place one arrow on each end of the menu.
#NAME: cell
#PARENT: Gtk.CellRenderer.get_visible.gboolean
#COMMENT: A #GtkCellRenderer
#NAME: help
#PARENT: Gtk.ResponseType
#COMMENT: Returned by Help buttons in GTK+ dialogs
#NAME: get_min_content_width
#PARENT: Gtk.ScrolledWindow
#COMMENT: Gets the minimum content width of @scrolled_window, or -1 if not set.
#NAME: button
#PARENT: Gtk.ToolButton.set_icon_widget.none
#COMMENT: a #GtkToolButton
#NAME: button_text
#PARENT: Gtk.Dialog.add_button.Widget
#COMMENT: text of button
#NAME: filter_func
#PARENT: Gtk.ListBox.set_filter_func.none
#COMMENT: callback that lets you filter which rows to show
#NAME: unselect_file
#PARENT: Gtk.FileChooser
#COMMENT: Unselects the file referred to by @file. If the file is not in the current
directory, does not exist, or is otherwise not currently selected, does nothing.
#NAME: set_orientation
#PARENT: Gtk.GesturePan
#COMMENT: Sets the orientation to be expected on pan gestures.
#NAME: self
#PARENT: Gtk.LevelBar.set_max_value.none
#COMMENT: a #GtkLevelBar
#NAME: size
#PARENT: Gtk.PaperSize.get_display_name.utf8
#COMMENT: a #GtkPaperSize object
#NAME: get_minus_button
#PARENT: Gtk.ScaleButton.get_minus_button
#COMMENT: the minus button of the #GtkScaleButton
#NAME: get_style
#PARENT: Gtk.ThemingEngine
#COMMENT: Retrieves several widget style properties from @engine according
to the currently rendered content’s style.
#NAME: combo
#PARENT: Gtk.ComboBox.get_focus_on_click.gboolean
#COMMENT: a #GtkComboBox
#NAME: dir_rtl
#PARENT: Gtk.IconLookupFlags
#COMMENT: Try to load a variant of the icon for right-to-left
  text direction. Since 3.14.
#NAME: targets
#PARENT: Gtk.Widget.drag_dest_set.none
#COMMENT: a pointer to an array of
    #GtkTargetEntrys indicating the drop types that this @widget will
    accept, or %NULL. Later you can access the list with
    gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
#NAME: size
#PARENT: Gtk.IconSize.lookup_for_settings.gboolean
#COMMENT: an icon size
#NAME: margin
#PARENT: Gtk.IconView.set_margin.none
#COMMENT: the margin
#NAME: self
#PARENT: Gtk.NumerableIcon.set_background_gicon.none
#COMMENT: a #GtkNumerableIcon
#NAME: setup
#PARENT: Gtk.PageSetup.set_bottom_margin.none
#COMMENT: a #GtkPageSetup
#NAME: sidebar
#PARENT: Gtk.PlacesSidebar.get_location.Gio.File
#COMMENT: a places sidebar
#NAME: month
#PARENT: Gtk.Calendar
#COMMENT: The selected month (as a number between 0 and 11).
This property gets initially set to the current month.
#NAME: container
#PARENT: Gtk.Container.get_focus_vadjustment.Adjustment
#COMMENT: a #GtkContainer
#NAME: get_current_device_grab
#PARENT: Gtk.WindowGroup
#COMMENT: Returns the current grab widget for @device, or %NULL if none.
#NAME: assistant
#PARENT: Gtk.Assistant.update_buttons_state.none
#COMMENT: a #GtkAssistant
#NAME: CssSectionType
#PARENT: Gtk
#COMMENT: The different types of sections indicate parts of a CSS document as
parsed by GTK’s CSS parser. They are oriented towards the
[CSS Grammar](http://www.w3.org/TR/CSS21/grammar.html),
but may contain extensions.

More types might be added in the future as the parser incorporates
more features.
#NAME: width
#PARENT: Gtk.CellArea.get_preferred_height_for_width.none
#COMMENT: the width for which to check the height of this area
#NAME: buildable
#PARENT: Gtk.Buildable.construct_child.GObject.Object
#COMMENT: A #GtkBuildable
#NAME: get_show_all
#PARENT: Gtk.AppChooserWidget
#COMMENT: Returns the current value of the #GtkAppChooserWidget:show-all
property.
#NAME: dialog
#PARENT: Gtk.Dialog.get_content_area.Box
#COMMENT: a #GtkDialog
#NAME: tree_view
#PARENT: Gtk.TreeView.get_fixed_height_mode.gboolean
#COMMENT: a #GtkTreeView
#NAME: CellRendererCombo
#PARENT: Gtk
#COMMENT: #GtkCellRendererCombo renders text in a cell like #GtkCellRendererText from
which it is derived. But while #GtkCellRendererText offers a simple entry to
edit the text, #GtkCellRendererCombo offers a #GtkComboBox
widget to edit the text. The values to display in the combo box are taken from
the tree model specified in the #GtkCellRendererCombo:model property.

The combo cell renderer takes care of adding a text cell renderer to the combo
box and sets it to display the column specified by its
#GtkCellRendererCombo:text-column property. Further properties of the combo box
can be set in a handler for the #GtkCellRenderer::editing-started signal.

The #GtkCellRendererCombo cell renderer was added in GTK+ 2.6.
#NAME: set_screen
#PARENT: Gtk.MountOperation
#COMMENT: Sets the screen to show windows of the #GtkMountOperation on.
#NAME: number_up
#PARENT: Gtk.PrintSettings.set_number_up.none
#COMMENT: the number of pages per sheet
#NAME: info
#PARENT: Gtk.RecentInfo.has_group.gboolean
#COMMENT: a #GtkRecentInfo
#NAME: state
#PARENT: Gtk.StyleContext.get_valist.none
#COMMENT: state to retrieve the property values for
#NAME: set_show_arrow
#PARENT: Gtk.Toolbar
#COMMENT: Sets whether to show an overflow menu when
@toolbar doesn’t have room for all items on it. If %TRUE,
items that there are not room are available through an
overflow menu.
#NAME: description
#PARENT: Gtk.RecentData
#COMMENT: a UTF-8 encoded string, containing a short description of
  the resource, or %NULL;
#NAME: max
#PARENT: Gtk.SpinButton.new_with_range.Widget
#COMMENT: Maximum allowable value
#NAME: forward_cursor_position
#PARENT: Gtk.TextIter.forward_cursor_position
#COMMENT: %TRUE if we moved and the new position is dereferenceable
#NAME: tool_item
#PARENT: Gtk.ToolItem.set_visible_horizontal.none
#COMMENT: a #GtkToolItem
#NAME: widget
#PARENT: Gtk.Widget.queue_draw_region.none
#COMMENT: a #GtkWidget
#NAME: get_show_desktop
#PARENT: Gtk.PlacesSidebar
#COMMENT: Returns the value previously set with gtk_places_sidebar_set_show_desktop()
#NAME: get_style_property
#PARENT: Gtk.Style
#COMMENT: Queries the value of a style property corresponding to a
widget class is in the given style.
#NAME: tree_model
#PARENT: Gtk.TreeModel.row_deleted.none
#COMMENT: a #GtkTreeModel
#NAME: child
#PARENT: Gtk.BuildableIface.custom_tag_end.custom_tag_end.none
#COMMENT: child object or %NULL for non-child tags
#NAME: RecentData
#PARENT: Gtk
#COMMENT: Meta-data to be passed to gtk_recent_manager_add_full() when
registering a recently used resource.
#NAME: state
#PARENT: Gtk.ThemingEngine.get_border_color.none
#COMMENT: state to retrieve the color for
