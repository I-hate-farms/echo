#NAME: new_from_pixbuf
#PARENT: Gdk.Cursor
#COMMENT: Creates a new cursor from a pixbuf.

Not all GDK backends support RGBA cursors. If they are not
supported, a monochrome approximation will be displayed.
The functions gdk_display_supports_cursor_alpha() and
gdk_display_supports_cursor_color() can be used to determine
whether RGBA cursors are supported;
gdk_display_get_default_cursor_size() and
gdk_display_get_maximal_cursor_size() give information about
cursor sizes.

If @x or @y are `-1`, the pixbuf must have
options named “x_hot” and “y_hot”, resp., containing
integer values between `0` and the width resp. height of
the pixbuf. (Since: 3.0)

On the X backend, support for RGBA cursors requires a
sufficently new version of the X Render extension.
#NAME: height
#PARENT: Gdk.WindowAttr
#COMMENT: height of window
#NAME: window
#PARENT: Gdk.pointer_grab.GrabStatus
#COMMENT: the #GdkWindow which will own the grab (the grab window).
#NAME: window
#PARENT: Gdk.Device.get_history.gboolean
#COMMENT: the window with respect to which which the event coordinates will be reported
#NAME: axes
#PARENT: Gdk.EventTouch
#COMMENT: @x, @y translated to the axes of @device, or %NULL if @device is
  the mouse
#NAME: window
#PARENT: Gdk.Window.set_startup_id.none
#COMMENT: a toplevel #GdkWindow
#NAME: selection_owner_get
#PARENT: Gdk.selection_owner_get
#COMMENT: if there is a selection owner
  for this window, and it is a window known to the current process,
  the #GdkWindow that owns the selection, otherwise %NULL. Note
  that the return value may be owned by a different process if a
  foreign window was previously created for that window, but a new
  foreign window will never be created by this call.
#NAME: set_default_display
#PARENT: Gdk.DisplayManager
#COMMENT: Sets @display as the default display.
#NAME: get_monitor_scale_factor
#PARENT: Gdk.Screen
#COMMENT: Returns the internal scale factor that maps from monitor coordiantes
to the actual device pixels. On traditional systems this is 1, but
on very high density outputs this can be a higher value (often 2).

This can be used if you want to create pixel based data for a
particula monitor, but most of the time you’re drawing to a window
where it is better to use gdk_window_get_scale_factor() instead.
#NAME: blue
#PARENT: Gdk.RGBA
#COMMENT: The intensity of the blue channel from 0.0 to 1.0 inclusive
#NAME: WMFunction
#PARENT: Gdk
#COMMENT: These are hints originally defined by the Motif toolkit. The window manager
can use them when determining the functions to offer for the window. The
hint must be set before mapping the window.
#NAME: get_event
#PARENT: Gdk.Display.get_event
#COMMENT: the next #GdkEvent to be processed, or %NULL
if no events are pending. The returned #GdkEvent should be freed
with gdk_event_free().
#NAME: resume_events
#PARENT: Gdk.FrameClockPhase
#COMMENT: corresponds to GdkFrameClock::resume-events. Should not be handled by applications.
#NAME: open
#PARENT: Gdk.Display
#COMMENT: Opens a display.
#NAME: send_event
#PARENT: Gdk.EventDND
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: owner_events
#PARENT: Gdk.Device.grab.GrabStatus
#COMMENT: if %FALSE then all device events are reported with respect to
               @window and are only reported if selected by @event_mask. If
               %TRUE then pointer events for this application are reported
               as normal, but pointer events outside this application are
               reported with respect to @window and only if selected by
               @event_mask. In either mode, unreported events are discarded.
#NAME: get_monitor_workarea
#PARENT: Gdk.Screen
#COMMENT: Retrieves the #GdkRectangle representing the size and position of
the “work area” on a monitor within the entire screen area.

The work area should be considered when positioning menus and
similar popups, to avoid placing them below panels, docks or other
desktop components.

Note that not all backends may have a concept of workarea. This
function will return the monitor geometry if a workarea is not
available, or does not apply.

Monitor numbers start at 0. To obtain the number of monitors of
@screen, use gdk_screen_get_n_monitors().
#NAME: source
#PARENT: Gdk.Window.get_source_events.EventMask
#COMMENT: a #GdkInputSource to define the source class.
#NAME: get_debug_enabled
#PARENT: Gdk.GLContext.get_debug_enabled
#COMMENT: %TRUE if debugging is enabled
#NAME: window
#PARENT: Gdk.EventVisibility
#COMMENT: the window which received the event.
#NAME: event_request_motions
#PARENT: Gdk
#COMMENT: Request more motion notifies if @event is a motion notify hint event.

This function should be used instead of gdk_window_get_pointer() to
request further motion notifies, because it also works for extension
events where motion notifies are provided for devices other than the
core pointer. Coordinate extraction, processing and requesting more
motion events from a %GDK_MOTION_NOTIFY event usually works like this:

|[<!-- language="C" -->
{
  // motion_event handler
  x = motion_event->x;
  y = motion_event->y;
  // handle (x,y) motion
  gdk_event_request_motions (motion_event); // handles is_hint events
}
]|
#NAME: request_selection_notification
#PARENT: Gdk.Display
#COMMENT: Request #GdkEventOwnerChange events for ownership changes
of the selection named by the given atom.
#NAME: circle
#PARENT: Gdk.CursorType
#COMMENT: ![](circle.png)
#NAME: time
#PARENT: Gdk.EventScroll
#COMMENT: the time of the event in milliseconds.
#NAME: get_root_coords
#PARENT: Gdk.Event.get_root_coords
#COMMENT: %TRUE if the event delivered root window coordinates
#NAME: selection_clear
#PARENT: Gdk.EventType
#COMMENT: the application has lost ownership of a selection.
#NAME: unmap
#PARENT: Gdk.EventType
#COMMENT: the window has been unmapped.
#NAME: get_window_at_position
#PARENT: Gdk.Device.get_window_at_position
#COMMENT: the #GdkWindow under the
device position, or %NULL.
#NAME: west
#PARENT: Gdk.Gravity
#COMMENT: the reference point is at the middle of the left edge.
#NAME: static_color
#PARENT: Gdk.VisualType
#COMMENT: Each pixel value is an index into a predefined,
    unmodifiable color map that maps pixel values into RGB values.
#NAME: set_allowed_backends
#PARENT: Gdk
#COMMENT: Sets a list of backends that GDK should try to use.

This can be be useful if your application does not
work with certain GDK backends.

By default, GDK tries all included backends.

For example,
|[<!-- language="C" -->
gdk_set_allowed_backends ("wayland,quartz,*");
]|
instructs GDK to try the Wayland backend first,
followed by the Quartz backend, and then all
others.

If the `GDK_BACKEND` environment variable
is set, it determines what backends are tried in what
order, while still respecting the set of allowed backends
that are specified by this function.

The possible backend names are x11, win32, quartz,
broadway, wayland. You can also include a * in the
list to try all remaining backends.

This call must happen prior to gdk_display_open(),
gtk_init(), gtk_init_with_args() or gtk_init_check()
in order to take effect.
#NAME: get_display
#PARENT: Gdk.Screen
#COMMENT: Gets the display to which the @screen belongs.
#NAME: type
#PARENT: Gdk.property_get.gboolean
#COMMENT: the desired property type, or %GDK_NONE, if any type of data
  is acceptable. If this does not match the actual
  type, then @actual_format and @actual_length will
  be filled in, a warning will be printed to stderr
  and no data will be returned.
#NAME: set_program_class
#PARENT: Gdk
#COMMENT: Sets the program class. The X11 backend uses the program class to set
the class name part of the `WM_CLASS` property on
toplevel windows; see the ICCCM.
#NAME: sb_right_arrow
#PARENT: Gdk.CursorType
#COMMENT: ![](sb_right_arrow.png)
#NAME: gobbler
#PARENT: Gdk.CursorType
#COMMENT: ![](gobbler.png)
#NAME: get_parent
#PARENT: Gdk.Window.get_parent
#COMMENT: parent of @window
#NAME: handler_set
#PARENT: Gdk.Event
#COMMENT: Sets the function to call to handle all events from GDK.

Note that GTK+ uses this to install its own event handler, so it is
usually not useful for GTK+ applications. (Although an application
can call this function then call gtk_main_do_event() to pass
events to GTK+.)
#NAME: get_event_compression
#PARENT: Gdk.Window.get_event_compression
#COMMENT: %TRUE if motion events will be compressed
#NAME: depth
#PARENT: Gdk.Visual.get_best_with_depth.Visual
#COMMENT: a bit depth
#NAME: BUTTON_PRIMARY
#PARENT: Gdk
#COMMENT: The primary button. This is typically the left mouse button, or the
right button in a left-handed setup.
#NAME: no_text_input
#PARENT: Gdk.ModifierIntent
#COMMENT: when any of these modifiers is pressed, the
 key event cannot produce a symbol directly. This is meant to be used for
 input methods, and for use cases like typeahead search.
#NAME: window
#PARENT: Gdk.Window.set_icon_list.none
#COMMENT: The #GdkWindow toplevel window to set the icon of.
#NAME: release_mask
#PARENT: Gdk.ModifierType
#COMMENT: not used in GDK itself. GTK+ uses it to differentiate
 between (keyval, modifiers) pairs from key press and release events.
#NAME: get_monitor_at_window
#PARENT: Gdk.Screen
#COMMENT: Returns the number of the monitor in which the largest area of the
bounding rectangle of @window resides.
#NAME: WMDecoration
#PARENT: Gdk
#COMMENT: These are hints originally defined by the Motif toolkit.
The window manager can use them when determining how to decorate
the window. The hint must be set before mapping the window.
#NAME: restack
#PARENT: Gdk.Window
#COMMENT: Changes the position of  @window in the Z-order (stacking order), so that
it is above @sibling (if @above is %TRUE) or below @sibling (if @above is
%FALSE).

If @sibling is %NULL, then this either raises (if @above is %TRUE) or
lowers the window.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_restack() only
requests the restack, does not guarantee it.
#NAME: backends
#PARENT: Gdk.set_allowed_backends.none
#COMMENT: a comma-separated list of backends
#NAME: frame_clock
#PARENT: Gdk.FrameClock.begin_updating.none
#COMMENT: a #GdkFrameClock
#NAME: get_state
#PARENT: Gdk.Window
#COMMENT: Gets the bitwise OR of the currently active window state flags,
from the #GdkWindowState enumeration.
#NAME: above
#PARENT: Gdk.WindowState
#COMMENT: the window is kept above other windows.
#NAME: intern_static_string
#PARENT: Gdk.Atom.intern_static_string
#COMMENT: the atom corresponding to @atom_name
#NAME: FilterFunc
#PARENT: Gdk
#COMMENT: Specifies the type of function used to filter native events before they are
converted to GDK events.

When a filter is called, @event is unpopulated, except for
`event->window`. The filter may translate the native
event to a GDK event and store the result in @event, or handle it without
translation. If the filter translates the event and processing should
continue, it should return %GDK_FILTER_TRANSLATE.
#NAME: left
#PARENT: Gdk.Window.set_shadow_width.none
#COMMENT: The left extent
#NAME: opened
#PARENT: Gdk.Display
#COMMENT: The ::opened signal is emitted when the connection to the windowing
system for @display is opened.
#NAME: cursor
#PARENT: Gdk.Cursor.ref.Cursor
#COMMENT: a #GdkCursor
#NAME: proximity_in
#PARENT: Gdk.EventType
#COMMENT: an input device has moved into contact with a sensing
  surface (e.g. a touchscreen or graphics tablet).
#NAME: offset_x
#PARENT: Gdk.Window.input_shape_combine_region.none
#COMMENT: X position of @shape_region in @window coordinates
#NAME: function
#PARENT: Gdk.threads_add_timeout_seconds_full.guint
#COMMENT: function to call
#NAME: set_device
#PARENT: Gdk.Event
#COMMENT: Sets the device for @event to @device. The event must
have been allocated by GTK+, for instance, by
gdk_event_copy().
#NAME: offset_y
#PARENT: Gdk.Window.input_shape_combine_region.none
#COMMENT: Y position of @shape_region in @window coordinates
#NAME: requestor
#PARENT: Gdk.selection_property_get.gint
#COMMENT: the window on which the data is stored
#NAME: WindowEdge
#PARENT: Gdk
#COMMENT: Determines a window edge or corner.
#NAME: base_size
#PARENT: Gdk.WindowHints
#COMMENT: base size fields are set
#NAME: type
#PARENT: Gdk.property_change.none
#COMMENT: the new type for the property. If @mode is
  %GDK_PROP_MODE_PREPEND or %GDK_PROP_MODE_APPEND, then this
  must match the existing type or an error will occur.
#NAME: prop_format
#PARENT: Gdk.selection_property_get.gint
#COMMENT: location to store the format of the property
#NAME: display
#PARENT: Gdk.text_property_to_utf8_list_for_display.gint
#COMMENT: a #GdkDisplay
#NAME: window
#PARENT: Gdk.Window.fullscreen.none
#COMMENT: a toplevel #GdkWindow
#NAME: get_pointer
#PARENT: Gdk.Window.get_pointer
#COMMENT: the window containing the
pointer (as with gdk_window_at_pointer()), or %NULL if the window
containing the pointer isn’t known to GDK
#NAME: bottom_tee
#PARENT: Gdk.CursorType
#COMMENT: ![](bottom_tee.png)
#NAME: modifier_reserved_14_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: root_x
#PARENT: Gdk.Window.begin_resize_drag_for_device.none
#COMMENT: root window X coordinate of mouse click that began the drag
#NAME: surface
#PARENT: Gdk.pixbuf_get_from_surface.GdkPixbuf.Pixbuf
#COMMENT: surface to copy from
#NAME: window
#PARENT: Gdk.property_delete.none
#COMMENT: a #GdkWindow
#NAME: root_y
#PARENT: Gdk.Window.begin_resize_drag_for_device.none
#COMMENT: root window Y coordinate of mouse click that began the drag
#NAME: event_last
#PARENT: Gdk.EventType
#COMMENT: marks the end of the GdkEventType enumeration. Added in 2.18
#NAME: rgba
#PARENT: Gdk.RGBA.free.none
#COMMENT: a #GdkRGBA
#NAME: success
#PARENT: Gdk.drop_finish.none
#COMMENT: %TRUE if the data was successfully received
#NAME: display
#PARENT: Gdk.Display.get_event.Event
#COMMENT: a #GdkDisplay
#NAME: get_frame_counter
#PARENT: Gdk.FrameClock
#COMMENT: A #GdkFrameClock maintains a 64-bit counter that increments for
each frame drawn.
#NAME: KeymapKey
#PARENT: Gdk
#COMMENT: A #GdkKeymapKey is a hardware key that can be mapped to a keyval.
#NAME: merge_child_shapes
#PARENT: Gdk.Window
#COMMENT: Merges the shape masks for any child windows into the
shape mask for @window. i.e. the union of all masks
for @window and its children will become the new mask
for @window. See gdk_window_shape_combine_region().

This function is distinct from gdk_window_set_child_shapes()
because it includes @window’s shape mask in the set of shapes to
be merged.
#NAME: cursor
#PARENT: Gdk.Cursor.unref.none
#COMMENT: a #GdkCursor
#NAME: x_root
#PARENT: Gdk.EventTouch
#COMMENT: the x coordinate of the pointer relative to the root of the
  screen
#NAME: set_event_compression
#PARENT: Gdk.Window
#COMMENT: Determines whether or not extra unprocessed motion events in
the event queue can be discarded. If %TRUE only the most recent
event will be delivered.

Some types of applications, e.g. paint programs, need to see all
motion events and will benefit from turning off event compression.

By default, event compression is enabled.
#NAME: current_monitor
#PARENT: Gdk.FullscreenMode
#COMMENT: Fullscreen on current monitor only.
#NAME: keyval_convert_case
#PARENT: Gdk
#COMMENT: Obtains the upper- and lower-case versions of the keyval @symbol.
Examples of keyvals are #GDK_KEY_a, #GDK_KEY_Enter, #GDK_KEY_F1, etc.
#NAME: click_count
#PARENT: Gdk.Event.get_click_count.gboolean
#COMMENT: location to store click count
#NAME: to_string
#PARENT: Gdk.RGBA
#COMMENT: Returns a textual specification of @rgba in the form
`rgb (r, g, b)` or
`rgba (r, g, b, a)`,
where “r”, “g”, “b” and “a” represent the red, green,
blue and alpha values respectively. r, g, and b are
represented as integers in the range 0 to 255, and a
is represented as floating point value in the range 0 to 1.

These string forms are string forms those supported by
the CSS3 colors module, and can be parsed by gdk_rgba_parse().

Note that this string representation may lose some
precision, since r, g and b are represented as 8-bit
integers. If this is a concern, you should use a
different representation.
#NAME: time_
#PARENT: Gdk.drag_motion.gboolean
#COMMENT: the timestamp for this operation
#NAME: get_entries_for_keyval
#PARENT: Gdk.Keymap.get_entries_for_keyval
#COMMENT: %TRUE if keys were found and returned
#NAME: threads_init
#PARENT: Gdk
#COMMENT: Initializes GDK so that it can be used from multiple threads
in conjunction with gdk_threads_enter() and gdk_threads_leave().

This call must be made before any use of the main loop from
GTK+; to be safe, call it before gtk_init().
#NAME: get_n_keys
#PARENT: Gdk.Device.get_n_keys
#COMMENT: the number of keys.
#NAME: touch_end
#PARENT: Gdk.EventType
#COMMENT: A touch event sequence has finished. This event type
  was added in 3.4.
#NAME: top_side
#PARENT: Gdk.CursorType
#COMMENT: ![](top_side.png)
#NAME: x
#PARENT: Gdk.EventTouch
#COMMENT: the x coordinate of the pointer relative to the window
#NAME: set_fullscreen_mode
#PARENT: Gdk.Window
#COMMENT: Specifies whether the @window should span over all monitors (in a multi-head
setup) or only the current monitor when in fullscreen mode.

The @mode argument is from the #GdkFullscreenMode enumeration.
If #GDK_FULLSCREEN_ON_ALL_MONITORS is specified, the fullscreen @window will
span over all monitors from the #GdkScreen.

On X11, searches through the list of monitors from the #GdkScreen the ones
which delimit the 4 edges of the entire #GdkScreen and will ask the window
manager to span the @window over these monitors.

If the XINERAMA extension is not available or not usable, this function
has no effect.

Not all window managers support this, so you can’t rely on the fullscreen
window to span over the multiple monitors when #GDK_FULLSCREEN_ON_ALL_MONITORS
is specified.
#NAME: y
#PARENT: Gdk.EventTouch
#COMMENT: the y coordinate of the pointer relative to the window
#NAME: set_device_events
#PARENT: Gdk.Window
#COMMENT: Sets the event mask for a given device (Normally a floating device, not
attached to any visible pointer) to @window. For example, an event mask
including #GDK_BUTTON_PRESS_MASK means the window should report button
press events. The event mask is the bitwise OR of values from the
#GdkEventMask enumeration.

See the [input handling overview][event-masks] for details.
#NAME: get_default_root_window
#PARENT: Gdk
#COMMENT: Obtains the root window (parent all other windows are inside)
for the default display and screen.
#NAME: get_shared_context
#PARENT: Gdk.GLContext.get_shared_context
#COMMENT: a #GdkGLContext or %NULL
#NAME: list_visuals
#PARENT: Gdk.Screen
#COMMENT: Lists the available visuals for the specified @screen.
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.

Call g_list_free() on the return value when you’re finished with it.
#NAME: event
#PARENT: Gdk.EventFunc.none
#COMMENT: the #GdkEvent to process.
#NAME: pango_layout_line_get_clip_region
#PARENT: Gdk
#COMMENT: Obtains a clip region which contains the areas where the given
ranges of text would be drawn. @x_origin and @y_origin are the top left
position of the layout. @index_ranges
should contain ranges of bytes in the layout’s text. The clip
region will include space to the left or right of the line (to the
layout bounding box) if you have indexes above or below the indexes
contained inside the line. This is to draw the selection all the way
to the side of the layout. However, the clip region is in line coordinates,
not layout coordinates.

Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn line may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.
#NAME: EventVisibility
#PARENT: Gdk
#COMMENT: Generated when the window visibility status has changed.
#NAME: mouse
#PARENT: Gdk.InputSource
#COMMENT: the device is a mouse. (This will be reported for the core
                   pointer, even if it is something else, such as a trackball.)
#NAME: get_children
#PARENT: Gdk.Window
#COMMENT: Gets the list of children of @window known to GDK.
This function only returns children created via GDK,
so for example it’s useless when used with the root window;
it only returns windows an application created itself.

The returned list must be freed, but the elements in the
list need not be.
#NAME: get_n_monitors
#PARENT: Gdk.Screen.get_n_monitors
#COMMENT: number of monitors which @screen consists of
#NAME: angle
#PARENT: Gdk.events_get_angle.gboolean
#COMMENT: return location for the relative angle between both events
#NAME: device
#PARENT: Gdk.Device.get_window_at_position.Window
#COMMENT: pointer #GdkDevice to query info to.
#NAME: min_size
#PARENT: Gdk.WindowHints
#COMMENT: min size fields are set
#NAME: layout
#PARENT: Gdk.pango_layout_get_clip_region.cairo.Region
#COMMENT: a #PangoLayout
#NAME: test_simulate_button
#PARENT: Gdk.test_simulate_button
#COMMENT: whether all actions necessary for a button event simulation
    were carried out successfully
#NAME: window
#PARENT: Gdk.Window.mark_paint_from_clip.none
#COMMENT: a #GdkWindow
#NAME: argc
#PARENT: Gdk.init_check.gboolean
#COMMENT: the number of command line arguments.
#NAME: options
#PARENT: Gdk.Screen.set_font_options.none
#COMMENT: a #cairo_font_options_t, or %NULL to unset any
  previously set default font options.
#NAME: window
#PARENT: Gdk.Window.get_frame_clock.FrameClock
#COMMENT: window to get frame clock for
#NAME: source_type
#PARENT: Gdk.cairo_draw_from_gl.none
#COMMENT: The type of the @source
#NAME: threads_set_lock_functions
#PARENT: Gdk
#COMMENT: Allows the application to replace the standard method that
GDK uses to protect its data structures. Normally, GDK
creates a single #GMutex that is locked by gdk_threads_enter(),
and released by gdk_threads_leave(); using this function an
application provides, instead, a function @enter_fn that is
called by gdk_threads_enter() and a function @leave_fn that is
called by gdk_threads_leave().

The functions must provide at least same locking functionality
as the default implementation, but can also do extra application
specific processing.

As an example, consider an application that has its own recursive
lock that when held, holds the GTK+ lock as well. When GTK+ unlocks
the GTK+ lock when entering a recursive main loop, the application
must temporarily release its lock as well.

Most threaded GTK+ apps won’t need to use this method.

This method must be called before gdk_threads_init(), and cannot
be called multiple times.
#NAME: get_history
#PARENT: Gdk.Device
#COMMENT: Obtains the motion history for a pointer device; given a starting and
ending timestamp, return all events in the motion history for
the device in the given range of time. Some windowing systems
do not support motion history, in which case, %FALSE will
be returned. (This is not distinguishable from the case where
motion history is supported and no events were found.)

Note that there is also gdk_window_set_event_compression() to get
more motion events delivered directly, independent of the windowing
system.
#NAME: type
#PARENT: Gdk.DeviceManager.list_devices.Device
#COMMENT: device type to get.
#NAME: display
#PARENT: Gdk.Display.get_default_screen.Screen
#COMMENT: a #GdkDisplay
#NAME: hyper_mask
#PARENT: Gdk.ModifierType
#COMMENT: the Hyper modifier. Since 2.10
#NAME: pressure
#PARENT: Gdk.AxisUse
#COMMENT: the axis is used for pressure information.
#NAME: timings
#PARENT: Gdk.FrameTimings.ref.FrameTimings
#COMMENT: a #GdkFrameTimings
#NAME: x
#PARENT: Gdk.Window.coords_to_parent.none
#COMMENT: X coordinate in child’s coordinate system
#NAME: y
#PARENT: Gdk.Window.coords_to_parent.none
#COMMENT: Y coordinate in child’s coordinate system
#NAME: west
#PARENT: Gdk.WindowEdge
#COMMENT: the left edge.
#NAME: shape_combine_region
#PARENT: Gdk.Window
#COMMENT: Makes pixels in @window outside @shape_region be transparent,
so that the window may be nonrectangular.

If @shape_region is %NULL, the shape will be unset, so the whole
window will be opaque again. @offset_x and @offset_y are ignored
if @shape_region is %NULL.

On the X11 platform, this uses an X server extension which is
widely available on most common platforms, but not available on
very old X servers, and occasionally the implementation will be
buggy. On servers without the shape extension, this function
will do nothing.

This function works on both toplevel and child windows.
#NAME: floating
#PARENT: Gdk.DeviceType
#COMMENT: Device is a physical device, currently not attached to
                           any virtual device.
#NAME: n_events
#PARENT: Gdk.Device.get_history.gboolean
#COMMENT: location to store the length of
  @events, or %NULL
#NAME: supports_cursor_color
#PARENT: Gdk.Display.supports_cursor_color
#COMMENT: whether cursors can have multiple colors.
#NAME: failed
#PARENT: Gdk.GrabStatus
#COMMENT: the grab failed for some other reason.
#NAME: get_visible_region
#PARENT: Gdk.Window.get_visible_region
#COMMENT: a #cairo_region_t. This must be freed with cairo_region_destroy()
         when you are done.
#NAME: window
#PARENT: Gdk.Window.set_source_events.none
#COMMENT: a #GdkWindow
#NAME: time_
#PARENT: Gdk.Device.ungrab.none
#COMMENT: a timestap (e.g. %GDK_CURRENT_TIME).
#NAME: get_clip_region
#PARENT: Gdk.Window
#COMMENT: Computes the region of a window that potentially can be written
to by drawing primitives. This region may not take into account
other factors such as if the window is obscured by other windows,
but no area outside of this region will be affected by drawing
primitives.
#NAME: close
#PARENT: Gdk.Display
#COMMENT: Closes the connection to the windowing system for the given display,
and cleans up associated resources.
#NAME: rectangle
#PARENT: Gdk.Window.begin_paint_rect.none
#COMMENT: rectangle you intend to draw to
#NAME: argv
#PARENT: Gdk.init_check.gboolean
#COMMENT: the array of command line arguments.
#NAME: pointer_ungrab
#PARENT: Gdk
#COMMENT: Ungrabs the pointer on the default display, if it is grabbed by this
application.
#NAME: window
#PARENT: Gdk.Window.set_functions.none
#COMMENT: a toplevel #GdkWindow
#NAME: supports_composite
#PARENT: Gdk.Display.supports_composite
#COMMENT: %TRUE if windows may be composited.
#NAME: value
#PARENT: Gdk.setting_get.gboolean
#COMMENT: location to store the value of the setting.
#NAME: symbol
#PARENT: Gdk.keyval_convert_case.none
#COMMENT: a keyval
#NAME: window
#PARENT: Gdk.Window.set_urgency_hint.none
#COMMENT: a toplevel #GdkWindow
#NAME: begin_move_drag_for_device
#PARENT: Gdk.Window
#COMMENT: Begins a window move operation (for a toplevel window).
You might use this function to implement a “window move grip,” for
example. The function works best with window managers that support the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
but has a fallback implementation for other window managers.
#NAME: window
#PARENT: Gdk.Window.get_clip_region.cairo.Region
#COMMENT: a #GdkWindow
#NAME: cairo_surface_create_from_pixbuf
#PARENT: Gdk
#COMMENT: Creates an image surface with the same contents as
the pixbuf.
#NAME: pango_context_get_for_screen
#PARENT: Gdk
#COMMENT: Creates a #PangoContext for @screen.

The context must be freed when you’re finished with it.

When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.

The newly created context will have the default font options
(see #cairo_font_options_t) for the screen; if these options
change it will not be updated. Using gtk_widget_get_pango_context()
is more convenient if you want to keep a context around and track
changes to the screen’s font rendering settings.
#NAME: priority
#PARENT: Gdk.threads_add_idle_full.guint
#COMMENT: the priority of the idle source. Typically this will be in the
           range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE
#NAME: keyval
#PARENT: Gdk.Device.get_key.gboolean
#COMMENT: return value for the keyval.
#NAME: peek
#PARENT: Gdk.Event
#COMMENT: If there is an event waiting in the event queue of some open
display, returns a copy of it. See gdk_display_peek_event().
#NAME: window
#PARENT: Gdk.Window.get_device_position.Window
#COMMENT: a #GdkWindow.
#NAME: dest
#PARENT: Gdk.Screen.get_monitor_workarea.none
#COMMENT: a #GdkRectangle to be filled with
    the monitor workarea
#NAME: threads_leave
#PARENT: Gdk
#COMMENT: Leaves a critical region begun with gdk_threads_enter().
#NAME: set_child_input_shapes
#PARENT: Gdk.Window
#COMMENT: Sets the input shape mask of @window to the union of input shape masks
for all children of @window, ignoring the input shape mask of @window
itself. Contrast with gdk_window_merge_child_input_shapes() which includes
the input shape mask of @window in the masks to be merged.
#NAME: monitor_num
#PARENT: Gdk.Screen.get_monitor_scale_factor.gint
#COMMENT: number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
#NAME: new
#PARENT: Gdk.Event.new
#COMMENT: a newly-allocated #GdkEvent. The returned #GdkEvent
should be freed with gdk_event_free().
#NAME: function
#PARENT: Gdk.Window.remove_filter.none
#COMMENT: previously-added filter function
#NAME: value
#PARENT: Gdk.Device.get_axis.gboolean
#COMMENT: location to store the found value.
#NAME: WindowWindowClass
#PARENT: Gdk
#COMMENT: @GDK_INPUT_OUTPUT windows are the standard kind of window you might expect.
Such windows receive events and are also displayed on screen.
@GDK_INPUT_ONLY windows are invisible; they are usually placed above other
windows in order to trap or filter the events. You can’t draw on
@GDK_INPUT_ONLY windows.
#NAME: device
#PARENT: Gdk.Device.get_associated_device.Device
#COMMENT: a #GdkDevice
#NAME: get_default_screen
#PARENT: Gdk.Display.get_default_screen
#COMMENT: the default #GdkScreen object for @display
#NAME: scroll
#PARENT: Gdk.Event
#COMMENT: a #GdkEventScroll
#NAME: get_font_options
#PARENT: Gdk.Screen.get_font_options
#COMMENT: the current font options, or %NULL if no
 default font options have been set.
#NAME: n_events
#PARENT: Gdk.Device.free_history.none
#COMMENT: the length of the array.
#NAME: property_get
#PARENT: Gdk
#COMMENT: Retrieves a portion of the contents of a property. If the
property does not exist, then the function returns %FALSE,
and %GDK_NONE will be stored in @actual_property_type.

The XGetWindowProperty() function that gdk_property_get()
uses has a very confusing and complicated set of semantics.
Unfortunately, gdk_property_get() makes the situation
worse instead of better (the semantics should be considered
undefined), and also prints warnings to stderr in cases where it
should return a useful error to the program. You are advised to use
XGetWindowProperty() directly until a replacement function for
gdk_property_get() is provided.
#NAME: get_screen
#PARENT: Gdk.Display.get_screen
#COMMENT: the #GdkScreen object
#NAME: send_event
#PARENT: Gdk.EventButton
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: events_get_distance
#PARENT: Gdk
#COMMENT: If both events have X/Y information, the distance between both coordinates
(as in a straight line going from @event1 to @event2) will be returned.
#NAME: button1_motion_mask
#PARENT: Gdk.EventMask
#COMMENT: receive pointer motion events while 1 button is pressed
#NAME: ungrab
#PARENT: Gdk.Device
#COMMENT: Release any grab on @device.
#NAME: set_composited
#PARENT: Gdk.Window
#COMMENT: Sets a #GdkWindow as composited, or unsets it. Composited
windows do not automatically have their contents drawn to
the screen. Drawing is redirected to an offscreen buffer
and an expose event is emitted on the parent of the composited
window. It is the responsibility of the parent’s expose handler
to manually merge the off-screen content onto the screen in
whatever way it sees fit.

It only makes sense for child windows to be composited; see
gdk_window_set_opacity() if you need translucent toplevel
windows.

An additional effect of this call is that the area of this
window is no longer clipped from regions marked for
invalidation on its parent. Draws done on the parent
window are also no longer clipped by the child.

This call is only supported on some systems (currently,
only X11 with new enough Xcomposite and Xdamage extensions).
You must call gdk_display_supports_composite() to check if
setting a window as composited is supported before
attempting to do so.
#NAME: display
#PARENT: Gdk.Cursor.new_from_surface.Cursor
#COMMENT: the #GdkDisplay for which the cursor will be created
#NAME: cursor
#PARENT: Gdk.Cursor.get_cursor_type.CursorType
#COMMENT: a #GdkCursor
#NAME: touch_mask
#PARENT: Gdk.EventMask
#COMMENT: receive touch events. Since 3.4
#NAME: event_mask
#PARENT: Gdk.Window.set_device_events.none
#COMMENT: event mask for @window
#NAME: event
#PARENT: Gdk.Event.get_scroll_deltas.gboolean
#COMMENT: a #GdkEvent
#NAME: effective_group
#PARENT: Gdk.Keymap.translate_keyboard_state.gboolean
#COMMENT: return location for effective
    group, or %NULL
#NAME: height_inc
#PARENT: Gdk.Geometry
#COMMENT: height resize increment
#NAME: data
#PARENT: Gdk.property_get.gboolean
#COMMENT: location
  to store a pointer to the data. The retrieved data should be
  freed with g_free() when you are finished using it.
#NAME: shift
#PARENT: Gdk.Visual.get_blue_pixel_details.none
#COMMENT: A pointer to a #gint to be filled in, or %NULL
#NAME: changed
#PARENT: Gdk.Device
#COMMENT: The ::changed signal is emitted either when the #GdkDevice
has changed the number of either axes or keys. For example
In X this will normally happen when the slave device routing
events through the master device changes (for example, user
switches from the USB mouse to a tablet), in that case the
master device will change to reflect the new slave device
axes and keys.
#NAME: time_
#PARENT: Gdk.drag_abort.none
#COMMENT: the timestamp for this operation
#NAME: pango_layout_line_get_clip_region
#PARENT: Gdk.pango_layout_line_get_clip_region
#COMMENT: a clip region containing the given ranges
#NAME: send_event
#PARENT: Gdk.EventTouch
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: threads_add_timeout
#PARENT: Gdk
#COMMENT: A wrapper for the common usage of gdk_threads_add_timeout_full()
assigning the default priority, #G_PRIORITY_DEFAULT.

See gdk_threads_add_timeout_full().
#NAME: win_gravity
#PARENT: Gdk.WindowHints
#COMMENT: window gravity field is set
#NAME: get_complete
#PARENT: Gdk.FrameTimings.get_complete
#COMMENT: %TRUE if all information that will be available
 for the frame has been filled in.
#NAME: event
#PARENT: Gdk.Window.show_window_menu.gboolean
#COMMENT: a #GdkEvent to show the menu for
#NAME: spider
#PARENT: Gdk.CursorType
#COMMENT: ![](spider.png)
#NAME: set_double_click_time
#PARENT: Gdk
#COMMENT: Set the double click time for the default display. See
gdk_display_set_double_click_time().
See also gdk_display_set_double_click_distance().
Applications should not set this, it is a
global user-configured setting.
#NAME: copy
#PARENT: Gdk.Event
#COMMENT: Copies a #GdkEvent, copying or incrementing the reference count of the
resources associated with it (e.g. #GdkWindow’s and strings).
#NAME: list_devices
#PARENT: Gdk.DeviceManager.list_devices
#COMMENT: a list of
         #GdkDevices. The returned list must be
         freed with g_list_free (). The list elements are owned by
         GTK+ and must not be freed or unreffed.
#NAME: screen
#PARENT: Gdk.Screen.get_rgba_visual.Visual
#COMMENT: a #GdkScreen
#NAME: drag_status
#PARENT: Gdk.EventType
#COMMENT: the status of the drag operation initiated by the window
  has changed.
#NAME: context
#PARENT: Gdk.DragContext.get_protocol.DragProtocol
#COMMENT: a #GdkDragContext
#NAME: ByteOrder
#PARENT: Gdk
#COMMENT: A set of values describing the possible byte-orders
for storing pixel values in memory.
#NAME: context
#PARENT: Gdk.GLContext.set_debug_enabled.none
#COMMENT: a #GdkGLContext
#NAME: get_display
#PARENT: Gdk.Device
#COMMENT: Returns the #GdkDisplay to which @device pertains.
#NAME: delta_x
#PARENT: Gdk.EventScroll
#COMMENT: the x coordinate of the scroll delta
#NAME: event1
#PARENT: Gdk.events_get_angle.gboolean
#COMMENT: first #GdkEvent
#NAME: delta_y
#PARENT: Gdk.EventScroll
#COMMENT: the y coordinate of the scroll delta
#NAME: event2
#PARENT: Gdk.events_get_angle.gboolean
#COMMENT: second #GdkEvent
#NAME: keymap
#PARENT: Gdk.Keymap.have_bidi_layouts.gboolean
#COMMENT: a #GdkKeymap
#NAME: send_event
#PARENT: Gdk.EventSetting
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: data
#PARENT: Gdk.property_change.none
#COMMENT: the data (a `guchar *`
  `gushort *`, or `gulong *`,
  depending on @format), cast to a `guchar *`.
#NAME: east
#PARENT: Gdk.Gravity
#COMMENT: the reference point is at the middle of the right edge.
#NAME: get_device_position
#PARENT: Gdk.Window
#COMMENT: Obtains the current device position and modifier state.
The position is given in coordinates relative to the upper left
corner of @window.

Use gdk_window_get_device_position_double() if you need subpixel precision.
#NAME: resize
#PARENT: Gdk.WMFunction
#COMMENT: the window should be resizable.
#NAME: get_cursor
#PARENT: Gdk.Window
#COMMENT: Retrieves a #GdkCursor pointer for the cursor currently set on the
specified #GdkWindow, or %NULL.  If the return value is %NULL then
there is no custom cursor set on the specified window, and it is
using the cursor for its parent window.
#NAME: parent
#PARENT: Gdk.Window.set_transient_for.none
#COMMENT: another toplevel #GdkWindow
#NAME: move
#PARENT: Gdk.WMFunction
#COMMENT: the window should be movable.
#NAME: get
#PARENT: Gdk.DisplayManager.get
#COMMENT: The global #GdkDisplayManager singleton;
    gdk_parse_args(), gdk_init(), or gdk_init_check() must have
    been called first.
#NAME: modify_selection
#PARENT: Gdk.ModifierIntent
#COMMENT: the modifier used to modify selections,
 which in most cases means toggling the clicked item into or out of the selection.
#NAME: type
#PARENT: Gdk.EventSelection
#COMMENT: the type of the event (%GDK_SELECTION_CLEAR,
  %GDK_SELECTION_NOTIFY or %GDK_SELECTION_REQUEST).
#NAME: beep
#PARENT: Gdk
#COMMENT: Emits a short beep on the default display.
#NAME: threads_add_idle
#PARENT: Gdk.threads_add_idle
#COMMENT: the ID (greater than 0) of the event source.
#NAME: hardware_keycode
#PARENT: Gdk.Keymap.translate_keyboard_state.gboolean
#COMMENT: a keycode
#NAME: ll_angle
#PARENT: Gdk.CursorType
#COMMENT: ![](ll_angle.png)
#NAME: sb_up_arrow
#PARENT: Gdk.CursorType
#COMMENT: ![](sb_up_arrow.png)
#NAME: length
#PARENT: Gdk.EventKey
#COMMENT: the length of @string.
#NAME: x_root
#PARENT: Gdk.EventScroll
#COMMENT: the x coordinate of the pointer relative to the root of the
  screen.
#NAME: get_n_monitors
#PARENT: Gdk.Screen
#COMMENT: Returns the number of monitors which @screen consists of.
#NAME: begin_move_drag
#PARENT: Gdk.Window
#COMMENT: Begins a window move operation (for a toplevel window).

This function assumes that the drag is controlled by the
client pointer device, use gdk_window_begin_move_drag_for_device()
to begin a drag with a different device.
#NAME: event_mask
#PARENT: Gdk.Window.set_source_events.none
#COMMENT: event mask for @window
#NAME: context
#PARENT: Gdk.DragContext.list_targets.Atom
#COMMENT: a #GdkDragContext
#NAME: set_key
#PARENT: Gdk.Device
#COMMENT: Specifies the X key event to generate when a macro button of a device
is pressed.
#NAME: window
#PARENT: Gdk.Window.get_window_type.WindowType
#COMMENT: a #GdkWindow
#NAME: src_x
#PARENT: Gdk.pixbuf_get_from_surface.GdkPixbuf.Pixbuf
#COMMENT: Source X coordinate within @surface
#NAME: display
#PARENT: Gdk.DisplayManager.set_default_display.none
#COMMENT: a #GdkDisplay
#NAME: state
#PARENT: Gdk.Keymap.add_virtual_modifiers.none
#COMMENT: pointer to the modifier mask to change
#NAME: src_y
#PARENT: Gdk.pixbuf_get_from_surface.GdkPixbuf.Pixbuf
#COMMENT: Source Y coordinate within @surface
#NAME: stop
#PARENT: Gdk.Device.get_history.gboolean
#COMMENT: ending timestamp for the range of events to return
#NAME: get_root_coords
#PARENT: Gdk.Event
#COMMENT: Extract the root window relative x/y coordinates from an event.
#NAME: touch_update
#PARENT: Gdk.EventType
#COMMENT: A touch event sequence has been updated. This event type
  was added in 3.4.
#NAME: property
#PARENT: Gdk.selection_send_notify.none
#COMMENT: property in which the selection owner stored the
  data, or %GDK_NONE to indicate that the request
  was rejected.
#NAME: window
#PARENT: Gdk.Window.end_paint.none
#COMMENT: a #GdkWindow
#NAME: get_num_lock_state
#PARENT: Gdk.Keymap.get_num_lock_state
#COMMENT: %TRUE if Num Lock is on
#NAME: map_virtual_modifiers
#PARENT: Gdk.Keymap
#COMMENT: Maps the virtual modifiers (i.e. Super, Hyper and Meta) which
are set in @state to their non-virtual counterparts (i.e. Mod2,
Mod3,...) and set the corresponding bits in @state.

This function is useful when matching key events against
accelerators.
#NAME: modifier_reserved_22_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: append
#PARENT: Gdk.PropMode
#COMMENT: the new data is appended to the existing data.
#NAME: set_double_click_time
#PARENT: Gdk.Display
#COMMENT: Sets the double click time (two clicks within this time interval
count as a double click and result in a #GDK_2BUTTON_PRESS event).
Applications should not set this, it is a global
user-configured setting.
#NAME: max_width
#PARENT: Gdk.Geometry
#COMMENT: maximum width of window (or -1 to use requisition, with
 #GtkWindow only)
#NAME: get_best_with_depth
#PARENT: Gdk.Visual.get_best_with_depth
#COMMENT: best visual for the given depth
#NAME: get_display_arg_name
#PARENT: Gdk
#COMMENT: Gets the display name specified in the command line arguments passed
to gdk_init() or gdk_parse_args(), if any.
#NAME: close
#PARENT: Gdk.OwnerChange
#COMMENT: the client was closed
#NAME: set_skip_taskbar_hint
#PARENT: Gdk.Window
#COMMENT: Toggles whether a window should appear in a task list or window
list. If a window’s semantic type as specified with
gdk_window_set_type_hint() already fully describes the window, this
function should not be called in addition,
instead you should allow the window to be treated according to
standard policy for its semantic type.
#NAME: grab_info_libgtk_only
#PARENT: Gdk.Device.grab_info_libgtk_only
#COMMENT: %TRUE if this application currently has the
 keyboard grabbed.
#NAME: maximize
#PARENT: Gdk.WMFunction
#COMMENT: the window should be maximizable.
#NAME: get_best
#PARENT: Gdk.Visual
#COMMENT: Get the visual with the most available colors for the default
GDK screen. The return value should not be freed.
#NAME: display
#PARENT: Gdk.Display.get_default_group.Window
#COMMENT: a #GdkDisplay
#NAME: get_suggested_action
#PARENT: Gdk.DragContext.get_suggested_action
#COMMENT: a #GdkDragAction value
#NAME: screen
#PARENT: Gdk.Screen.get_primary_monitor.gint
#COMMENT: a #GdkScreen.
#NAME: delete
#PARENT: Gdk.PropertyState
#COMMENT: the property was deleted.
#NAME: paint
#PARENT: Gdk.FrameClock
#COMMENT: This signal is emitted as the third step of toolkit and
application processing of the frame. The frame is
repainted. GDK normally handles this internally and
produces expose events, which are turned into GTK+
#GtkWidget::draw signals.
#NAME: x_root
#PARENT: Gdk.Event.get_root_coords.gboolean
#COMMENT: location to put root window x coordinate
#NAME: keyval_is_lower
#PARENT: Gdk
#COMMENT: Returns %TRUE if the given key value is in lower case.
#NAME: owner
#PARENT: Gdk.selection_owner_set_for_display.gboolean
#COMMENT: a #GdkWindow or %NULL to indicate that the owner for
        the given should be unset
#NAME: window
#PARENT: Gdk.Window.set_event_compression.none
#COMMENT: a #GdkWindow
#NAME: keyval_to_unicode
#PARENT: Gdk.keyval_to_unicode
#COMMENT: the corresponding unicode character, or 0 if there
              is no corresponding character.
#NAME: query_visual_types
#PARENT: Gdk
#COMMENT: This function returns the available visual types for the default
screen. It’s equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the type field in each
visual, removing duplicates.

The array returned by this function should not be freed.
#NAME: set_icon
#PARENT: Gdk.AppLaunchContext
#COMMENT: Sets the icon for applications that are launched with this
context.

Window Managers can use this information when displaying startup
notification.

See also gdk_app_launch_context_set_icon_name().
#NAME: startup_id
#PARENT: Gdk.Display.notify_startup_complete.none
#COMMENT: a startup-notification identifier, for which
    notification process should be completed
#NAME: window
#PARENT: Gdk.Window.set_accept_focus.none
#COMMENT: a toplevel #GdkWindow
#NAME: atom_intern_static_string
#PARENT: Gdk.atom_intern_static_string
#COMMENT: the atom corresponding to @atom_name
#NAME: height
#PARENT: Gdk.Window.move_resize.none
#COMMENT: new height
#NAME: window
#PARENT: Gdk.Window.get_device_position_double.Window
#COMMENT: a #GdkWindow.
#NAME: focus_change_mask
#PARENT: Gdk.EventMask
#COMMENT: receive focus change events
#NAME: device
#PARENT: Gdk.EventButton
#COMMENT: the master device that the event originated from. Use
gdk_event_get_source_device() to get the slave device.
#NAME: right
#PARENT: Gdk.ScrollDirection
#COMMENT: the window is scrolled to the right.
#NAME: screen
#PARENT: Gdk.Screen.get_toplevel_windows.Window
#COMMENT: The #GdkScreen where the toplevels are located.
#NAME: dest_window
#PARENT: Gdk.drag_find_window_for_screen.none
#COMMENT: location to store the destination window in
#NAME: get_byte_order
#PARENT: Gdk.Visual
#COMMENT: Returns the byte order of this visual.
#NAME: get_direction
#PARENT: Gdk.Keymap.get_direction
#COMMENT: %PANGO_DIRECTION_LTR or %PANGO_DIRECTION_RTL
  if it can determine the direction. %PANGO_DIRECTION_NEUTRAL
  otherwise.
#NAME: shift_group
#PARENT: Gdk.ModifierIntent
#COMMENT: the modifier that switches between keyboard
 groups (AltGr on X11/Windows and Option/Alt on OS X).
#NAME: set_events
#PARENT: Gdk.Window
#COMMENT: The event mask for a window determines which events will be reported
for that window from all master input devices. For example, an event mask
including #GDK_BUTTON_PRESS_MASK means the window should report button
press events. The event mask is the bitwise OR of values from the
#GdkEventMask enumeration.

See the [input handling overview][event-masks] for details.
#NAME: get_monitor_width_mm
#PARENT: Gdk.Screen.get_monitor_width_mm
#COMMENT: the width of the monitor, or -1 if not available
#NAME: attributes_mask
#PARENT: Gdk.Window.new.Window
#COMMENT: mask indicating which
  fields in @attributes are valid
#NAME: right
#PARENT: Gdk.Window.set_shadow_width.none
#COMMENT: The right extent
#NAME: get_width
#PARENT: Gdk.Screen.get_width
#COMMENT: the width of @screen in pixels.
#NAME: major
#PARENT: Gdk.GLContext.set_required_version.none
#COMMENT: the major version to request
#NAME: set_support_multidevice
#PARENT: Gdk.Window
#COMMENT: This function will enable multidevice features in @window.

Multidevice aware windows will need to handle properly multiple,
per device enter/leave events, device grabs and grab ownerships.
#NAME: drag_drop_succeeded
#PARENT: Gdk
#COMMENT: Returns whether the dropped data has been successfully
transferred. This function is intended to be used while
handling a %GDK_DROP_FINISHED event, its return value is
meaningless at other times.
#NAME: context
#PARENT: Gdk.drag_status.none
#COMMENT: a #GdkDragContext
#NAME: clock
#PARENT: Gdk.CursorType
#COMMENT: ![](clock.png)
#NAME: context
#PARENT: Gdk.DragContext.get_selected_action.DragAction
#COMMENT: a #GdkDragContext
#NAME: cairo_get_clip_rectangle
#PARENT: Gdk.cairo_get_clip_rectangle
#COMMENT: %TRUE if a clip rectangle exists, %FALSE if all of @cr is
    clipped and all drawing can be skipped
#NAME: screen
#PARENT: Gdk.Screen.get_height_mm.gint
#COMMENT: a #GdkScreen
#NAME: window
#PARENT: Gdk.Window.withdraw.none
#COMMENT: a toplevel #GdkWindow
#NAME: WindowState
#PARENT: Gdk
#COMMENT: Specifies the state of a toplevel window.
#NAME: window
#PARENT: Gdk.Window.move_region.none
#COMMENT: a #GdkWindow
#NAME: x
#PARENT: Gdk.Screen.get_monitor_at_point.gint
#COMMENT: the x coordinate in the virtual screen.
#NAME: y
#PARENT: Gdk.Screen.get_monitor_at_point.gint
#COMMENT: the y coordinate in the virtual screen.
#NAME: visual
#PARENT: Gdk.Visual.get_blue_pixel_details.none
#COMMENT: a #GdkVisual
#NAME: screen
#PARENT: Gdk.Screen.get_number.gint
#COMMENT: a #GdkScreen
#NAME: grab_window
#PARENT: Gdk.EventGrabBroken
#COMMENT: If this event is caused by another grab in the same
  application, @grab_window contains the new grab window. Otherwise
  @grab_window is %NULL.
#NAME: context
#PARENT: Gdk.GLContext.get_window.Window
#COMMENT: a #GdkGLContext
#NAME: argc
#PARENT: Gdk.parse_args.none
#COMMENT: the number of command line arguments.
#NAME: get_device_type
#PARENT: Gdk.Device.get_device_type
#COMMENT: the #GdkDeviceType for @device.
#NAME: target
#PARENT: Gdk.CursorType
#COMMENT: ![](target.png)
#NAME: get_frame_counter
#PARENT: Gdk.FrameTimings.get_frame_counter
#COMMENT: the frame counter value for this frame
#NAME: get_event_sequence
#PARENT: Gdk.Event.get_event_sequence
#COMMENT: the event sequence that the event belongs to
#NAME: to_string
#PARENT: Gdk.RGBA.to_string
#COMMENT: A newly allocated text string
#NAME: context
#PARENT: Gdk.GLContext.get_required_version.none
#COMMENT: a #GdkGLContext
#NAME: set_opacity
#PARENT: Gdk.Window
#COMMENT: Set @window to render as partially transparent,
with opacity 0 being fully transparent and 1 fully opaque. (Values
of the opacity parameter are clamped to the [0,1] range.)

For toplevel windows this depends on support from the windowing system
that may not always be there. For instance, On X11, this works only on
X screens with a compositing manager running. On Wayland, there is no
per-window opacity value that the compositor would apply. Instead, use
`gdk_window_set_opaque_region (window, NULL)` to tell the compositor
that the entire window is (potentially) non-opaque, and draw your content
with alpha, or use gtk_widget_set_opacity() to set an overall opacity
for your widgets.

For child windows this function only works for non-native windows.

For setting up per-pixel alpha topelevels, see gdk_screen_get_rgba_visual(),
and for non-toplevels, see gdk_window_set_composited().

Support for non-toplevel windows was added in 3.8.
#NAME: device
#PARENT: Gdk.Device.get_axis_use.AxisUse
#COMMENT: a pointer #GdkDevice.
#NAME: target
#PARENT: Gdk.Window.get_drag_protocol.DragProtocol
#COMMENT: location of the window
   where the drop should happen. This may be @window or a proxy window,
   or %NULL if @window does not support Drag and Drop.
#NAME: root_x
#PARENT: Gdk.Window.begin_move_drag_for_device.none
#COMMENT: root window X coordinate of mouse click that began the drag
#NAME: get_group
#PARENT: Gdk.Window.get_group
#COMMENT: the group leader window for @window
#NAME: green
#PARENT: Gdk.Color
#COMMENT: The green component of the color
#NAME: root_y
#PARENT: Gdk.Window.begin_move_drag_for_device.none
#COMMENT: root window Y coordinate of mouse click that began the drag
#NAME: get_position_double
#PARENT: Gdk.Device
#COMMENT: Gets the current location of @device in double precision. As a slave device's
coordinates are those of its master pointer, this function
may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them. See gdk_device_grab().
#NAME: get_setting
#PARENT: Gdk.Screen.get_setting
#COMMENT: %TRUE if the setting existed and a value was stored
  in @value, %FALSE otherwise.
#NAME: button_release_mask
#PARENT: Gdk.EventMask
#COMMENT: receive button release events
#NAME: east
#PARENT: Gdk.WindowEdge
#COMMENT: the right edge.
#NAME: get_name
#PARENT: Gdk.Device
#COMMENT: Determines the name of the device.
#NAME: wmclass_name
#PARENT: Gdk.WindowAttr
#COMMENT: don’t use (see gtk_window_set_wmclass())
#NAME: atom
#PARENT: Gdk.EventProperty
#COMMENT: the property that was changed.
#NAME: set_override_redirect
#PARENT: Gdk.Window
#COMMENT: An override redirect window is not under the control of the window manager.
This means it won’t have a titlebar, won’t be minimizable, etc. - it will
be entirely under the control of the application. The window manager
can’t see the override redirect window at all.

Override redirect should only be used for short-lived temporary
windows, such as popup menus. #GtkMenu uses an override redirect
window in its implementation, for example.
#NAME: display
#PARENT: Gdk.Cursor.new_from_pixbuf.Cursor
#COMMENT: the #GdkDisplay for which the cursor will be created
#NAME: get_timings
#PARENT: Gdk.FrameClock
#COMMENT: Retrieves a #GdkFrameTimings object holding timing information
for the current frame or a recent frame. The #GdkFrameTimings
object may not yet be complete: see gdk_frame_timings_get_complete().
#NAME: window
#PARENT: Gdk.Window.set_keep_below.none
#COMMENT: a toplevel #GdkWindow
#NAME: threads_add_idle
#PARENT: Gdk
#COMMENT: A wrapper for the common usage of gdk_threads_add_idle_full()
assigning the default priority, #G_PRIORITY_DEFAULT_IDLE.

See gdk_threads_add_idle_full().
#NAME: argv
#PARENT: Gdk.parse_args.none
#COMMENT: the array of command line arguments.
#NAME: CURRENT_TIME
#PARENT: Gdk
#COMMENT: Represents the current time, and can be used anywhere a time is expected.
#NAME: embedder_x
#PARENT: Gdk.Window.from-embedder.none
#COMMENT: x coordinate in the embedder window
#NAME: embedder_y
#PARENT: Gdk.Window.from-embedder.none
#COMMENT: y coordinate in the embedder window
#NAME: get_display_arg_name
#PARENT: Gdk.get_display_arg_name
#COMMENT: the display name, if specified explicitly,
  otherwise %NULL this string is owned by GTK+ and must not be
  modified or freed.
#NAME: list
#PARENT: Gdk.text_property_to_utf8_list_for_display.gint
#COMMENT: location to store the list
           of strings or %NULL. The list should be freed with
           g_strfreev().
#NAME: dx
#PARENT: Gdk.Window.scroll.none
#COMMENT: Amount to scroll in the X direction
#NAME: drag_drop
#PARENT: Gdk
#COMMENT: Drops on the current destination.

This function is called by the drag source.
#NAME: dy
#PARENT: Gdk.Window.scroll.none
#COMMENT: Amount to scroll in the Y direction
#NAME: window
#PARENT: Gdk.Window.set_decorations.none
#COMMENT: a toplevel #GdkWindow
#NAME: pos
#PARENT: Gdk.WindowHints
#COMMENT: indicates that the program has positioned the window
#NAME: send_event
#PARENT: Gdk.EventExpose
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: window
#PARENT: Gdk.Window.show_unraised.none
#COMMENT: a #GdkWindow
#NAME: major
#PARENT: Gdk.GLContext.get_version.none
#COMMENT: return location for the major version
#NAME: device
#PARENT: Gdk.Device.get_state.none
#COMMENT: a #GdkDevice.
#NAME: triggers_context_menu
#PARENT: Gdk.Event.triggers_context_menu
#COMMENT: %TRUE if the event should trigger a context menu.
#NAME: state
#PARENT: Gdk.EventMotion
#COMMENT: a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.
#NAME: get_refresh_info
#PARENT: Gdk.FrameClock
#COMMENT: Using the frame history stored in the frame clock, finds the last
known presentation time and refresh interval, and assuming that
presentation times are separated by the refresh interval,
predicts a presentation time that is a multiple of the refresh
interval after the last presentation time, and later than @base_time.
#NAME: WindowType
#PARENT: Gdk
#COMMENT: Describes the kind of window.
#NAME: get_width_mm
#PARENT: Gdk.Screen
#COMMENT: Gets the width of @screen in millimeters.
Note that on some X servers this value will not be correct.
#NAME: window
#PARENT: Gdk.Window.set_user_data.none
#COMMENT: a #GdkWindow
#NAME: begin_paint_rect
#PARENT: Gdk.Window
#COMMENT: A convenience wrapper around gdk_window_begin_paint_region() which
creates a rectangular region for you. See
gdk_window_begin_paint_region() for details.
#NAME: popup_menu
#PARENT: Gdk.WindowTypeHint
#COMMENT: A menu that does not belong to a menubar,
 e.g. a context menu.
#NAME: owner_change
#PARENT: Gdk.Event
#COMMENT: a #GdkEventOwnerChange
#NAME: device
#PARENT: Gdk.Device.get_mode.InputMode
#COMMENT: a #GdkDevice
#NAME: drag_enter
#PARENT: Gdk.EventType
#COMMENT: the mouse has entered the window while a drag is in progress.
#NAME: maximize
#PARENT: Gdk.WMDecoration
#COMMENT: a maximize button should be included.
#NAME: x_root
#PARENT: Gdk.drag_find_window_for_screen.none
#COMMENT: the x position of the pointer in root coordinates
#NAME: button
#PARENT: Gdk.Window.begin_move_drag.none
#COMMENT: the button being used to drag, or 0 for a keyboard-initiated drag
#NAME: get_drag_protocol
#PARENT: Gdk.Window.get_drag_protocol
#COMMENT: the supported DND protocol.
#NAME: display
#PARENT: Gdk.Display.put_event.none
#COMMENT: a #GdkDisplay
#NAME: make_display_name
#PARENT: Gdk.Screen.make_display_name
#COMMENT: a newly allocated string, free with g_free()
#NAME: drag_abort
#PARENT: Gdk
#COMMENT: Aborts a drag without dropping.

This function is called by the drag source.
#NAME: n_targets
#PARENT: Gdk.Display.store_clipboard.none
#COMMENT: length of the @targets array
#NAME: EventFunc
#PARENT: Gdk
#COMMENT: Specifies the type of function passed to gdk_event_handler_set() to
handle all GDK events.
#NAME: get_source_events
#PARENT: Gdk.Window
#COMMENT: Returns the event mask for @window corresponding to the device class specified
by @source.
#NAME: keyval
#PARENT: Gdk.keyval_to_upper.guint
#COMMENT: a key value.
#NAME: Keymap
#PARENT: Gdk
#COMMENT: A #GdkKeymap defines the translation from keyboard state
(including a hardware key, a modifier mask, and active keyboard group)
to a keyval. This translation has two phases. The first phase is
to determine the effective keyboard group and level for the keyboard
state; the second phase is to look up the keycode/group/level triplet
in the keymap and see what keyval it corresponds to.
#NAME: context
#PARENT: Gdk.AppLaunchContext.set_icon_name.none
#COMMENT: a #GdkAppLaunchContext
#NAME: title
#PARENT: Gdk.Window.set_title.none
#COMMENT: title of @window
#NAME: get_origin
#PARENT: Gdk.Window
#COMMENT: Obtains the position of a window in root window coordinates.
(Compare with gdk_window_get_position() and
gdk_window_get_geometry() which return the position of a window
relative to its parent window.)
#NAME: set_invalidate_handler
#PARENT: Gdk.Window
#COMMENT: Registers an invalidate handler for a specific window. This
will get called whenever a region in the window or its children
is invalidated.

This can be used to record the invalidated region, which is
useful if you are keeping an offscreen copy of some region
and want to keep it up to date. You can also modify the
invalidated region in case you’re doing some effect where
e.g. a child widget appears in multiple places.
#NAME: region
#PARENT: Gdk.WindowInvalidateHandlerFunc.none
#COMMENT: a #cairo_region_t
#NAME: device
#PARENT: Gdk.Window.begin_resize_drag_for_device.none
#COMMENT: the device used for the operation
#NAME: NotifyType
#PARENT: Gdk
#COMMENT: Specifies the kind of crossing for #GdkEventCrossing.

See the X11 protocol specification of LeaveNotify for
full details of crossing event generation.
#NAME: keymap
#PARENT: Gdk.Keymap.get_caps_lock_state.gboolean
#COMMENT: a #GdkKeymap
#NAME: accepted
#PARENT: Gdk.drop_reply.none
#COMMENT: %TRUE if the drop is accepted
#NAME: type
#PARENT: Gdk.EventMotion
#COMMENT: the type of the event.
#NAME: notify
#PARENT: Gdk.event_handler_set.none
#COMMENT: the function to call when the handler function is removed, i.e. when
         gdk_event_handler_set() is called with another event handler.
#NAME: window
#PARENT: Gdk.EventSelection
#COMMENT: the window which received the event.
#NAME: new_window_state
#PARENT: Gdk.EventWindowState
#COMMENT: the new window state, a combination of
  #GdkWindowState bits.
#NAME: selection
#PARENT: Gdk.selection_owner_set_for_display.gboolean
#COMMENT: an atom identifying a selection
#NAME: get_default_cursor_size
#PARENT: Gdk.Display.get_default_cursor_size
#COMMENT: the default cursor size.
#NAME: mask
#PARENT: Gdk.Window.get_device_position_double.Window
#COMMENT: return location for the modifier mask, or %NULL.
#NAME: request_selection_notification
#PARENT: Gdk.Display.request_selection_notification
#COMMENT: whether #GdkEventOwnerChange events will
              be sent.
#NAME: func
#PARENT: Gdk.event_handler_set.none
#COMMENT: the function to call to handle events from GDK.
#NAME: get_dest_window
#PARENT: Gdk.DragContext.get_dest_window
#COMMENT: a #GdkWindow
#NAME: event_mask
#PARENT: Gdk.Device.grab.GrabStatus
#COMMENT: specifies the event mask, which is used in accordance with
             @owner_events.
#NAME: wayland
#PARENT: Gdk.DragProtocol
#COMMENT: Wayland DND protocol.
#NAME: flags
#PARENT: Gdk.Window.constrain_size.none
#COMMENT: a mask indicating what portions of @geometry are set
#NAME: window
#PARENT: Gdk.Window.begin_paint_rect.none
#COMMENT: a #GdkWindow
#NAME: minimize
#PARENT: Gdk.WMFunction
#COMMENT: the window should be minimizable.
#NAME: state_changed
#PARENT: Gdk.CrossingMode
#COMMENT: crossing because a GTK+ widget changed
  state (e.g. sensitivity).
#NAME: device
#PARENT: Gdk.Device.get_device_type.DeviceType
#COMMENT: a #GdkDevice
#NAME: data
#PARENT: Gdk.threads_add_timeout.guint
#COMMENT: data to pass to @function
#NAME: FilterFunc
#PARENT: Gdk.FilterFunc
#COMMENT: a #GdkFilterReturn value.
#NAME: window
#PARENT: Gdk.Window.has_native.gboolean
#COMMENT: a #GdkWindow
#NAME: get_device
#PARENT: Gdk.Event.get_device
#COMMENT: a #GdkDevice, or %NULL.
#NAME: InputMode
#PARENT: Gdk
#COMMENT: An enumeration that describes the mode of an input device.
#NAME: device
#PARENT: Gdk.EventMotion
#COMMENT: the master device that the event originated from. Use
gdk_event_get_source_device() to get the slave device.
#NAME: visual
#PARENT: Gdk.Visual.get_byte_order.ByteOrder
#COMMENT: A #GdkVisual.
#NAME: visual
#PARENT: Gdk.Visual.get_visual_type.VisualType
#COMMENT: A #GdkVisual.
#NAME: window
#PARENT: Gdk.Window.thaw_updates.none
#COMMENT: a #GdkWindow
#NAME: get_default
#PARENT: Gdk.Display.get_default
#COMMENT: a #GdkDisplay, or %NULL if
  there is no default display.
#NAME: freeze_updates
#PARENT: Gdk.Window
#COMMENT: Temporarily freezes a window such that it won’t receive expose
events.  The window will begin receiving expose events again when
gdk_window_thaw_updates() is called. If gdk_window_freeze_updates()
has been called more than once, gdk_window_thaw_updates() must be called
an equal number of times to begin processing exposes.
#NAME: send_event
#PARENT: Gdk.EventCrossing
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: get_composited
#PARENT: Gdk.Window
#COMMENT: Determines whether @window is composited.

See gdk_window_set_composited().
#NAME: frame_clock
#PARENT: Gdk.FrameClock.get_history_start.gint64
#COMMENT: a #GdkFrameClock
#NAME: mod2_mask
#PARENT: Gdk.ModifierType
#COMMENT: the fifth modifier key (it depends on the modifier
 mapping of the X server which key is interpreted as this modifier).
#NAME: display
#PARENT: Gdk.Cursor.new_for_display.Cursor
#COMMENT: the #GdkDisplay for which the cursor will be created
#NAME: modifiers
#PARENT: Gdk.test_simulate_button.gboolean
#COMMENT: Keyboard modifiers the event is setup with
#NAME: function
#PARENT: Gdk.threads_add_timeout_full.guint
#COMMENT: function to call
#NAME: draft_small
#PARENT: Gdk.CursorType
#COMMENT: ![](draft_small.png)
#NAME: get_display
#PARENT: Gdk.Window.get_display
#COMMENT: the #GdkDisplay associated with @window
#NAME: device
#PARENT: Gdk.Display.device_is_grabbed.gboolean
#COMMENT: a #GdkDevice
#NAME: type
#PARENT: Gdk.EventSetting
#COMMENT: the type of the event (%GDK_SETTING).
#NAME: window
#PARENT: Gdk.WindowChildFunc.gboolean
#COMMENT: a #GdkWindow
#NAME: get_focus_on_map
#PARENT: Gdk.Window.get_focus_on_map
#COMMENT: whether or not the window wants to receive input focus when
it is mapped.
#NAME: get_window
#PARENT: Gdk.GLContext
#COMMENT: Retrieves the #GdkWindow used by the @context.
#NAME: noredir
#PARENT: Gdk.WindowAttributesType
#COMMENT: Honor the override_redirect field
#NAME: height
#PARENT: Gdk.Screen
#COMMENT: Returns the height of the default screen in pixels.
#NAME: type
#PARENT: Gdk.EventExpose
#COMMENT: the type of the event (%GDK_EXPOSE or %GDK_DAMAGE).
#NAME: ignore
#PARENT: Gdk.AxisUse
#COMMENT: the axis is ignored.
#NAME: screen
#PARENT: Gdk.Display.warp_pointer.none
#COMMENT: the screen of @display to warp the pointer to
#NAME: get_presentation_time
#PARENT: Gdk.FrameTimings
#COMMENT: Reurns the presentation time. This is the time at which the frame
became visible to the user.
#NAME: context
#PARENT: Gdk.GLContext.realize.gboolean
#COMMENT: a #GdkGLContext
#NAME: timings
#PARENT: Gdk.FrameTimings.unref.none
#COMMENT: a #GdkFrameTimings
#NAME: mode
#PARENT: Gdk.Window.set_fullscreen_mode.none
#COMMENT: fullscreen mode
#NAME: format
#PARENT: Gdk.text_property_to_utf8_list_for_display.gint
#COMMENT: the format of the property
#NAME: send_event
#PARENT: Gdk.EventScroll
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: get_display
#PARENT: Gdk.DeviceManager.get_display
#COMMENT: the #GdkDisplay to which
         @device_manager is associated to, or #NULL. This memory is
         owned by GDK and must not be freed or unreferenced.
#NAME: modifier_reserved_19_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: cr
#PARENT: Gdk.cairo_set_source_color.none
#COMMENT: a cairo context
#NAME: selection_property_get
#PARENT: Gdk
#COMMENT: Retrieves selection data that was stored by the selection
data in response to a call to gdk_selection_convert(). This function
will not be used by applications, who should use the #GtkClipboard
API instead.
#NAME: display
#PARENT: Gdk.DisplayManager.display-opened.none
#COMMENT: the opened display
#NAME: events_get_angle
#PARENT: Gdk.events_get_angle
#COMMENT: %TRUE if the angle could be calculated.
#NAME: is_viewable
#PARENT: Gdk.Window
#COMMENT: Check if the window and all ancestors of the window are
mapped. (This is not necessarily "viewable" in the X sense, since
we only check as far as we have GDK window parents, not to the root
window.)
#NAME: event_mask
#PARENT: Gdk.Window.set_events.none
#COMMENT: event mask for @window
#NAME: display
#PARENT: Gdk.selection_owner_set_for_display.gboolean
#COMMENT: the #GdkDisplay
#NAME: rect
#PARENT: Gdk.Window.invalidate_rect.none
#COMMENT: rectangle to invalidate or %NULL to invalidate the whole
     window
#NAME: iron_cross
#PARENT: Gdk.CursorType
#COMMENT: ![](iron_cross.png)
#NAME: thaw_updates
#PARENT: Gdk.Window
#COMMENT: Thaws a window frozen with gdk_window_freeze_updates().
#NAME: open_default_libgtk_only
#PARENT: Gdk.Display
#COMMENT: Opens the default display specified by command line arguments or
environment variables, sets it as the default display, and returns
it. gdk_parse_args() must have been called first. If the default
display has previously been set, simply returns that. An internal
function that should not be used by applications.
#NAME: hint
#PARENT: Gdk.Window.set_type_hint.none
#COMMENT: A hint of the function this window will have
#NAME: EventExpose
#PARENT: Gdk
#COMMENT: Generated when all or part of a window becomes visible and needs to be
redrawn.
#NAME: sailboat
#PARENT: Gdk.CursorType
#COMMENT: ![](sailboat.png)
#NAME: type
#PARENT: Gdk.EventProximity
#COMMENT: the type of the event (%GDK_PROXIMITY_IN or %GDK_PROXIMITY_OUT).
#NAME: xtilt
#PARENT: Gdk.AxisUse
#COMMENT: the axis is used for x tilt information.
#NAME: get_default_display
#PARENT: Gdk.DisplayManager
#COMMENT: Gets the default #GdkDisplay.
#NAME: set_background
#PARENT: Gdk.Window
#COMMENT: Sets the background color of @window.

However, when using GTK+, influence the background of a widget
using a style class or CSS — if you’re an application — or with
gtk_style_context_set_background() — if you're implementing a
custom widget.

See also gdk_window_set_background_pattern().
#NAME: get_frame_time
#PARENT: Gdk.FrameTimings
#COMMENT: Returns the frame time for the frame. This is the time value
that is typically used to time animations for the frame. See
gdk_frame_clock_get_frame_time().
#NAME: clipboard_window
#PARENT: Gdk.Display.store_clipboard.none
#COMMENT: a #GdkWindow belonging to the clipboard owner
#NAME: hardware_keycode
#PARENT: Gdk.EventKey
#COMMENT: the raw code of the key that was pressed or released.
#NAME: super_mask
#PARENT: Gdk.ModifierType
#COMMENT: the Super modifier. Since 2.10
#NAME: drag_begin
#PARENT: Gdk.drag_begin
#COMMENT: a newly created #GdkDragContext
#NAME: composited-changed
#PARENT: Gdk.Screen
#COMMENT: The ::composited-changed signal is emitted when the composited
status of the screen changes
#NAME: dot
#PARENT: Gdk.CursorType
#COMMENT: ![](dot.png)
#NAME: color
#PARENT: Gdk.Color.parse.gboolean
#COMMENT: the #GdkColor to fill in
#NAME: mark_paint_from_clip
#PARENT: Gdk.Window
#COMMENT: If you call this during a paint (e.g. between gdk_window_begin_paint_region()
and gdk_window_end_paint() then GDK will mark the current clip region of the
window as being drawn. This is required when mixing GL rendering via
gdk_cairo_draw_from_gl() and cairo rendering, as otherwise GDK has no way
of knowing when something paints over the GL-drawn regions.

This is typically called automatically by GTK+ and you don't need
to care about this.
#NAME: create_similar_surface
#PARENT: Gdk.Window.create_similar_surface
#COMMENT: a pointer to the newly allocated surface. The caller
owns the surface and should call cairo_surface_destroy() when done
with it.

This function always returns a valid pointer, but it will return a
pointer to a “nil” surface if @other is already in an error state
or any other error occurs.
#NAME: window
#PARENT: Gdk.Window.get_geometry.none
#COMMENT: a #GdkWindow
#NAME: pre_parse_libgtk_only
#PARENT: Gdk
#COMMENT: Prepare for parsing command line arguments for GDK. This is not
public API and should not be used in application code.
#NAME: get_last_event_window
#PARENT: Gdk.Device
#COMMENT: Gets information about which window the given pointer device is in, based on events
that have been received so far from the display server. If another application
has a pointer grab, or this application has a grab with owner_events = %FALSE,
%NULL may be returned even if the pointer is physically over one of this
application's windows.
#NAME: get_keyval
#PARENT: Gdk.Event.get_keyval
#COMMENT: %TRUE if the event delivered a key symbol
#NAME: meta_mask
#PARENT: Gdk.ModifierType
#COMMENT: the Meta modifier. Since 2.10
#NAME: layout
#PARENT: Gdk.FrameClock
#COMMENT: This signal is emitted as the second step of toolkit and
application processing of the frame. Any work to update
sizes and positions of application elements should be
performed. GTK+ normally handles this internally.
#NAME: invalidate_children
#PARENT: Gdk.Window.invalidate_rect.none
#COMMENT: whether to also invalidate child windows
#NAME: send_event
#PARENT: Gdk.selection_owner_set_for_display.gboolean
#COMMENT: if %TRUE, and the new owner is different from the current
             owner, the current owner will be sent a SelectionClear event
#NAME: rgba
#PARENT: Gdk.Window.set_background_rgba.none
#COMMENT: a #GdkRGBA color
#NAME: 2button_press
#PARENT: Gdk.EventType
#COMMENT: a mouse button has been double-clicked (clicked twice
  within a short period of time). Note that each click also generates a
  %GDK_BUTTON_PRESS event.
#NAME: timings
#PARENT: Gdk.FrameTimings.get_frame_time.gint64
#COMMENT: A #GdkFrameTimings
#NAME: get_n_axes
#PARENT: Gdk.Device.get_n_axes
#COMMENT: the number of axes.
#NAME: begin_resize_drag_for_device
#PARENT: Gdk.Window
#COMMENT: Begins a window resize operation (for a toplevel window).
You might use this function to implement a “window resize grip,” for
example; in fact #GtkStatusbar uses it. The function works best
with window managers that support the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
but has a fallback implementation for other window managers.
#NAME: keymap
#PARENT: Gdk.Keymap.get_entries_for_keyval.gboolean
#COMMENT: a #GdkKeymap
#NAME: screen
#PARENT: Gdk.Display.get_pointer.none
#COMMENT: location to store the screen that the
         cursor is on, or %NULL.
#NAME: type
#PARENT: Gdk.EventDND
#COMMENT: the type of the event (%GDK_DRAG_ENTER, %GDK_DRAG_LEAVE,
  %GDK_DRAG_MOTION, %GDK_DRAG_STATUS, %GDK_DROP_START or
  %GDK_DROP_FINISHED).
#NAME: mask
#PARENT: Gdk.Window.get_pointer.Window
#COMMENT: return location for modifier mask or %NULL to not return the
     modifier mask
#NAME: time_
#PARENT: Gdk.drop_reply.none
#COMMENT: the timestamp for this operation
#NAME: FrameClock
#PARENT: Gdk
#COMMENT: A #GdkFrameClock tells the application when to update and repaint a
window. This may be synced to the vertical refresh rate of the
monitor, for example. Even when the frame clock uses a simple timer
rather than a hardware-based vertical sync, the frame clock helps
because it ensures everything paints at the same time (reducing the
total number of frames). The frame clock can also automatically
stop painting when it knows the frames will not be visible, or
scale back animation framerates.

#GdkFrameClock is designed to be compatible with an OpenGL-based
implementation or with mozRequestAnimationFrame in Firefox,
for example.

A frame clock is idle until someone requests a frame with
gdk_frame_clock_request_phase(). At some later point that makes
sense for the synchronization being implemented, the clock will
process a frame and emit signals for each phase that has been
requested. (See the signals of the #GdkFrameClock class for
documentation of the phases. %GDK_FRAME_CLOCK_PHASE_UPDATE and the
#GdkFrameClock::update signal are most interesting for application
writers, and are used to update the animations, using the frame time
given by gdk_frame_clock_get_frame_time().

The frame time is reported in microseconds and generally in the same
timescale as g_get_monotonic_time(), however, it is not the same
as g_get_monotonic_time(). The frame time does not advance during
the time a frame is being painted, and outside of a frame, an attempt
is made so that all calls to gdk_frame_clock_get_frame_time() that
are called at a “similar” time get the same value. This means that
if different animations are timed by looking at the difference in
time between an initial value from gdk_frame_clock_get_frame_time()
and the value inside the #GdkFrameClock::update signal of the clock,
they will stay exactly synchronized.
#NAME: parse_args
#PARENT: Gdk
#COMMENT: Parse command line arguments, and store for future
use by calls to gdk_display_open().

Any arguments used by GDK are removed from the array and @argc and @argv are
updated accordingly.

You shouldn’t call this function explicitly if you are using
gtk_init(), gtk_init_check(), gdk_init(), or gdk_init_check().
#NAME: none
#PARENT: Gdk.FrameClockPhase
#COMMENT: no phase
#NAME: invalidate_children
#PARENT: Gdk.Window.invalidate_region.none
#COMMENT: %TRUE to also invalidate child windows
#NAME: get_display
#PARENT: Gdk.Window
#COMMENT: Gets the #GdkDisplay associated with a #GdkWindow.
#NAME: set_keep_above
#PARENT: Gdk.Window
#COMMENT: Set if @window must be kept above other windows. If the
window was already above, then this function does nothing.

On X11, asks the window manager to keep @window above, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don’t have a concept of
“keep above”; so you can’t rely on the window being kept above.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.
#NAME: red
#PARENT: Gdk.RGBA
#COMMENT: The intensity of the red channel from 0.0 to 1.0 inclusive
#NAME: window
#PARENT: Gdk.drag_begin_for_device.DragContext
#COMMENT: the source window for this drag
#NAME: rtl_logo
#PARENT: Gdk.CursorType
#COMMENT: ![](rtl_logo.png)
#NAME: display
#PARENT: Gdk.AppLaunchContext.set_display.none
#COMMENT: a #GdkDisplay
#NAME: cursor_is_pixmap
#PARENT: Gdk.CursorType
#COMMENT: type of cursors constructed with
  gdk_cursor_new_from_pixbuf()
#NAME: process_updates
#PARENT: Gdk.Window
#COMMENT: Sends one or more expose events to @window. The areas in each
expose event will cover the entire update area for the window (see
gdk_window_invalidate_region() for details). Normally GDK calls
gdk_window_process_all_updates() on your behalf, so there’s no
need to call this function unless you want to force expose events
to be delivered immediately and synchronously (vs. the usual
case, where GDK delivers them in an idle handler). Occasionally
this is useful to produce nicer scrolling behavior, for example.
#NAME: disable_multidevice
#PARENT: Gdk
#COMMENT: Disables multidevice support in GDK. This call must happen prior
to gdk_display_open(), gtk_init(), gtk_init_with_args() or
gtk_init_check() in order to take effect.

Most common GTK+ applications won’t ever need to call this. Only
applications that do mixed GDK/Xlib calls could want to disable
multidevice support if such Xlib code deals with input devices in
any way and doesn’t observe the presence of XInput 2.
#NAME: minimize
#PARENT: Gdk.WMDecoration
#COMMENT: a minimize button should be included.
#NAME: is_modifier
#PARENT: Gdk.EventKey
#COMMENT: a flag that indicates if @hardware_keycode is mapped to a
  modifier. Since 2.10
#NAME: device-removed
#PARENT: Gdk.DeviceManager
#COMMENT: The ::device-removed signal is emitted either when a master
pointer is removed, or when a slave (Hardware) input device
is unplugged.
#NAME: man
#PARENT: Gdk.CursorType
#COMMENT: ![](man.png)
#NAME: EventAny
#PARENT: Gdk
#COMMENT: Contains the fields which are common to all event structs.
Any event pointer can safely be cast to a pointer to a #GdkEventAny to
access these fields.
#NAME: axis_label
#PARENT: Gdk.Device.get_axis_value.gboolean
#COMMENT: #GdkAtom with the axis label.
#NAME: get_pointer
#PARENT: Gdk.Window
#COMMENT: Obtains the current pointer position and modifier state.
The position is given in coordinates relative to the upper left
corner of @window.
#NAME: x_origin
#PARENT: Gdk.pango_layout_line_get_clip_region.cairo.Region
#COMMENT: X pixel where you intend to draw the layout line with this clip
#NAME: PARENT_RELATIVE
#PARENT: Gdk
#COMMENT: A special value, indicating that the background
for a window should be inherited from the parent window.
#NAME: get_bits_per_rgb
#PARENT: Gdk.Visual
#COMMENT: Returns the number of significant bits per red, green and blue value.
#NAME: window
#PARENT: Gdk.Window.get_display.Display
#COMMENT: a #GdkWindow
#NAME: notify
#PARENT: Gdk.threads_add_timeout_seconds_full.guint
#COMMENT: function to call when the timeout is removed, or %NULL
#NAME: screen
#PARENT: Gdk.Event.set_screen.none
#COMMENT: a #GdkScreen
#NAME: type
#PARENT: Gdk.Event
#COMMENT: the #GdkEventType
#NAME: event_mask
#PARENT: Gdk.WindowAttr
#COMMENT: event mask (see gdk_window_set_events())
#NAME: window
#PARENT: Gdk.Window.reparent.none
#COMMENT: a #GdkWindow
#NAME: display
#PARENT: Gdk.Display.close.none
#COMMENT: a #GdkDisplay
#NAME: get_fullscreen_mode
#PARENT: Gdk.Window.get_fullscreen_mode
#COMMENT: The #GdkFullscreenMode applied to the window when fullscreen.
#NAME: display
#PARENT: Gdk.Display.beep.none
#COMMENT: a #GdkDisplay
#NAME: event
#PARENT: Gdk.Event.get_time.guint32
#COMMENT: a #GdkEvent
#NAME: keyval_from_name
#PARENT: Gdk
#COMMENT: Converts a key name to a key value.

The names are the same as those in the
`gdk/gdkkeysyms.h` header file
but without the leading “GDK_KEY_”.
#NAME: name
#PARENT: Gdk.EventSetting
#COMMENT: the name of the setting.
#NAME: window
#PARENT: Gdk.Window.coords_from_parent.none
#COMMENT: a child window
#NAME: get_modal_hint
#PARENT: Gdk.Window.get_modal_hint
#COMMENT: whether or not the window has the modal hint set.
#NAME: key_release_mask
#PARENT: Gdk.EventMask
#COMMENT: receive key release events
#NAME: window
#PARENT: Gdk.Window.get_fullscreen_mode.FullscreenMode
#COMMENT: a toplevel #GdkWindow
#NAME: window
#PARENT: Gdk.Window.set_opacity.none
#COMMENT: a top-level or non-native #GdkWindow
#NAME: set_device_cursor
#PARENT: Gdk.Window
#COMMENT: Sets a specific #GdkCursor for a given device when it gets inside @window.
Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to create
the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR. Passing
%NULL for the @cursor argument to gdk_window_set_cursor() means that
@window will use the cursor of its parent window. Most windows should
use this default.
#NAME: get_suggested_action
#PARENT: Gdk.DragContext
#COMMENT: Determines the suggested drag action of the context.
#NAME: get_window
#PARENT: Gdk.Event.get_window
#COMMENT: The #GdkWindow associated with the event
#NAME: get_fullscreen_mode
#PARENT: Gdk.Window
#COMMENT: Obtains the #GdkFullscreenMode of the @window.
#NAME: drag_status
#PARENT: Gdk
#COMMENT: Selects one of the actions offered by the drag source.

This function is called by the drag destination in response to
gdk_drag_motion() called by the drag source.
#NAME: map
#PARENT: Gdk.EventType
#COMMENT: the window has been mapped.
#NAME: height_mm
#PARENT: Gdk.Screen.height_mm
#COMMENT: the height of the default screen in millimeters,
though it is not always correct.
#NAME: get_window_at_pointer
#PARENT: Gdk.Display
#COMMENT: Obtains the window underneath the mouse pointer, returning the location
of the pointer in that window in @win_x, @win_y for @screen. Returns %NULL
if the window under the mouse pointer is not known to GDK (for example,
belongs to another application).
#NAME: lsb_first
#PARENT: Gdk.ByteOrder
#COMMENT: The values are stored with the least-significant byte
  first. For instance, the 32-bit value 0xffeecc would be stored
  in memory as 0xcc, 0xee, 0xff, 0x00.
#NAME: offscreen_window_get_embedder
#PARENT: Gdk.offscreen_window_get_embedder
#COMMENT: the embedding #GdkWindow, or
    %NULL if @window is not an mbedded offscreen window
#NAME: get_app_launch_context
#PARENT: Gdk.Display
#COMMENT: Returns a #GdkAppLaunchContext suitable for launching
applications on the given display.
#NAME: context
#PARENT: Gdk.AppLaunchContext.set_screen.none
#COMMENT: a #GdkAppLaunchContext
#NAME: get_screen
#PARENT: Gdk.Event
#COMMENT: Returns the screen for the event. The screen is
typically the screen for `event->any.window`, but
for events such as mouse events, it is the screen
where the pointer was when the event occurs -
that is, the screen which has the root window
to which `event->motion.x_root` and
`event->motion.y_root` are relative.
#NAME: grab
#PARENT: Gdk.CrossingMode
#COMMENT: crossing because a grab is activated.
#NAME: list_displays
#PARENT: Gdk.DisplayManager
#COMMENT: List all currently open displays.
#NAME: new_value
#PARENT: Gdk.PropertyState
#COMMENT: the property value was changed.
#NAME: n_entries
#PARENT: Gdk.Keymap.get_entries_for_keycode.gboolean
#COMMENT: length of @keys and @keyvals
#NAME: get_source_window
#PARENT: Gdk.DragContext.get_source_window
#COMMENT: a #GdkWindow
#NAME: x
#PARENT: Gdk.Cursor.new_from_pixbuf.Cursor
#COMMENT: the horizontal offset of the “hotspot” of the cursor.
#NAME: y
#PARENT: Gdk.Cursor.new_from_pixbuf.Cursor
#COMMENT: the vertical offset of the “hotspot” of the cursor.
#NAME: offscreen
#PARENT: Gdk.WindowType
#COMMENT: offscreen window (see
 [Offscreen Windows][OFFSCREEN-WINDOWS]). Since 2.18
#NAME: coords_from_parent
#PARENT: Gdk.Window
#COMMENT: Transforms window coordinates from a parent window to a child
window, where the parent window is the normal parent as returned by
gdk_window_get_parent() for normal windows, and the window's
embedder as returned by gdk_offscreen_window_get_embedder() for
offscreen windows.

For normal windows, calling this function is equivalent to subtracting
the return values of gdk_window_get_position() from the parent coordinates.
For offscreen windows however (which can be arbitrarily transformed),
this function calls the GdkWindow::from-embedder: signal to translate
the coordinates.

You should always use this function when writing generic code that
walks down a window hierarchy.

See also: gdk_window_coords_to_parent()
#NAME: width
#PARENT: Gdk.Screen.width
#COMMENT: the width of the default screen in pixels.
#NAME: height
#PARENT: Gdk.EventConfigure
#COMMENT: the new height of the window.
#NAME: begin_updating
#PARENT: Gdk.FrameClock
#COMMENT: Starts updates for an animation. Until a matching call to
gdk_frame_clock_end_updating() is made, the frame clock will continually
request a new frame with the %GDK_FRAME_CLOCK_PHASE_UPDATE phase.
This function may be called multiple times and frames will be
requested until gdk_frame_clock_end_updating() is called the same
number of times.
#NAME: list_displays
#PARENT: Gdk.DisplayManager.list_displays
#COMMENT: a newly
    allocated #GSList of #GdkDisplay objects. Free with g_slist_free()
    when you are done with it.
#NAME: type
#PARENT: Gdk.EventOwnerChange
#COMMENT: the type of the event (%GDK_OWNER_CHANGE).
#NAME: events_get_center
#PARENT: Gdk.events_get_center
#COMMENT: %TRUE if the center could be calculated.
#NAME: top_left_arrow
#PARENT: Gdk.CursorType
#COMMENT: ![](top_left_arrow.png)
#NAME: device
#PARENT: Gdk.Device.grab.GrabStatus
#COMMENT: a #GdkDevice. To get the device you can use gtk_get_current_event_device()
  or gdk_event_get_device() if the grab is in reaction to an event. Also, you can use
  gdk_device_manager_get_client_pointer() but only in code that isn’t triggered by a
  #GdkEvent and there aren’t other means to get a meaningful #GdkDevice to operate on.
#NAME: get_coords
#PARENT: Gdk.Event
#COMMENT: Extract the event window relative x/y coordinates from an event.
#NAME: input_output
#PARENT: Gdk.WindowWindowClass
#COMMENT: window for graphics and events
#NAME: keyboard_ungrab
#PARENT: Gdk.Display
#COMMENT: Release any keyboard grab
#NAME: border
#PARENT: Gdk.WMDecoration
#COMMENT: a frame should be drawn around the window.
#NAME: get_client_pointer
#PARENT: Gdk.DeviceManager
#COMMENT: Returns the client pointer, that is, the master pointer that acts as the core pointer
for this application. In X11, window managers may change this depending on the interaction
pattern under the presence of several pointers.

You should use this function seldomly, only in code that isn’t triggered by a #GdkEvent
and there aren’t other means to get a meaningful #GdkDevice to operate on.
#NAME: key_press
#PARENT: Gdk.EventType
#COMMENT: a key has been pressed.
#NAME: drag_find_window_for_screen
#PARENT: Gdk
#COMMENT: Finds the destination window and DND protocol to use at the
given pointer position.

This function is called by the drag source to obtain the
@dest_window and @protocol parameters for gdk_drag_motion().
#NAME: invalidate_maybe_recurse
#PARENT: Gdk.Window
#COMMENT: Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or “dirty region.” The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.

GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there’s no need to do that manually, you just need to
invalidate regions that you know should be redrawn.

The @child_func parameter controls whether the region of
each child window that intersects @region will also be invalidated.
Only children for which @child_func returns #TRUE will have the area
invalidated.
#NAME: intern_static_string
#PARENT: Gdk.Atom
#COMMENT: Finds or creates an atom corresponding to a given string.

Note that this function is identical to gdk_atom_intern() except
that if a new #GdkAtom is created the string itself is used rather
than a copy. This saves memory, but can only be used if the string
will always exist. It can be used with statically
allocated strings in the main program, but not with statically
allocated memory in dynamically loaded modules, if you expect to
ever unload the module again (e.g. do not use this function in
GTK+ theme engines).
#NAME: cursor
#PARENT: Gdk.Window.set_cursor.none
#COMMENT: a cursor
#NAME: get_screen
#PARENT: Gdk.Event.get_screen
#COMMENT: the screen for the event
#NAME: root_x
#PARENT: Gdk.Window.begin_resize_drag.none
#COMMENT: root window X coordinate of mouse click that began the drag
#NAME: get_background_pattern
#PARENT: Gdk.Window
#COMMENT: Gets the pattern used to clear the background on @window. If @window
does not have its own background and reuses the parent's, %NULL is
returned and you’ll have to query it yourself.
#NAME: region
#PARENT: Gdk.Window.set_opaque_region.none
#COMMENT: a region, or %NULL
#NAME: root_y
#PARENT: Gdk.Window.begin_resize_drag.none
#COMMENT: root window Y coordinate of mouse click that began the drag
#NAME: send_event
#PARENT: Gdk.EventMotion
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: send_event
#PARENT: Gdk.EventSelection
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: get_axis
#PARENT: Gdk.Event.get_axis
#COMMENT: %TRUE if the specified axis was found, otherwise %FALSE
#NAME: name
#PARENT: Gdk.setting_get.gboolean
#COMMENT: the name of the setting.
#NAME: timestamp
#PARENT: Gdk.Window.begin_move_drag_for_device.none
#COMMENT: timestamp of mouse click that began the drag
#NAME: EventCrossing
#PARENT: Gdk
#COMMENT: Generated when the pointer enters or leaves a window.
#NAME: height
#PARENT: Gdk.Screen.height
#COMMENT: the height of the default screen in pixels.
#NAME: window
#PARENT: Gdk.Window.get_events.EventMask
#COMMENT: a #GdkWindow
#NAME: button2_mask
#PARENT: Gdk.ModifierType
#COMMENT: the second mouse button.
#NAME: selection
#PARENT: Gdk.Display.request_selection_notification.gboolean
#COMMENT: the #GdkAtom naming the selection for which
            ownership change notification is requested
#NAME: wmclass_class
#PARENT: Gdk.WindowAttr
#COMMENT: don’t use (see gtk_window_set_wmclass())
#NAME: type
#PARENT: Gdk.EventButton
#COMMENT: the type of the event (%GDK_BUTTON_PRESS, %GDK_2BUTTON_PRESS,
  %GDK_3BUTTON_PRESS or %GDK_BUTTON_RELEASE).
#NAME: drop_start
#PARENT: Gdk.EventType
#COMMENT: a drop operation onto the window has started.
#NAME: splashscreen
#PARENT: Gdk.WindowTypeHint
#COMMENT: Window used to display a splash
 screen during application startup.
#NAME: input_only
#PARENT: Gdk.WindowWindowClass
#COMMENT: window for events only
#NAME: extend_selection
#PARENT: Gdk.ModifierIntent
#COMMENT: the modifier used to extend selections
 using `modifier`-click or `modifier`-cursor-key
#NAME: window
#PARENT: Gdk.Screen.get_monitor_at_window.gint
#COMMENT: a #GdkWindow
#NAME: parse
#PARENT: Gdk.Color.parse
#COMMENT: %TRUE if the parsing succeeded
#NAME: name
#PARENT: Gdk.DisplayManager.open_display.Display
#COMMENT: the name of the display to open
#NAME: event
#PARENT: Gdk.Event.get_coords.gboolean
#COMMENT: a #GdkEvent
#NAME: timestamp
#PARENT: Gdk.Window.begin_move_drag.none
#COMMENT: timestamp of mouse click that began the drag
#NAME: type
#PARENT: Gdk.EventAny
#COMMENT: the type of the event.
#NAME: get_monitor_geometry
#PARENT: Gdk.Screen
#COMMENT: Retrieves the #GdkRectangle representing the size and position of
the individual monitor within the entire screen area.

Monitor numbers start at 0. To obtain the number of monitors of
@screen, use gdk_screen_get_n_monitors().

Note that the size of the entire screen area can be retrieved via
gdk_screen_get_width() and gdk_screen_get_height().
#NAME: supports_shapes
#PARENT: Gdk.Display.supports_shapes
#COMMENT: %TRUE if shaped windows are supported
#NAME: display
#PARENT: Gdk.Display.get_device_manager.DeviceManager
#COMMENT: a #GdkDisplay.
#NAME: icon_name
#PARENT: Gdk.AppLaunchContext.set_icon_name.none
#COMMENT: an icon name, or %NULL
#NAME: device
#PARENT: Gdk.Device.get_axis_value.gboolean
#COMMENT: a pointer #GdkDevice.
#NAME: substructure_mask
#PARENT: Gdk.EventMask
#COMMENT: receive events about window configuration changes of
  child windows
#NAME: motif
#PARENT: Gdk.DragProtocol
#COMMENT: The Motif DND protocol. No longer supported
#NAME: msec
#PARENT: Gdk.set_double_click_time.none
#COMMENT: double click time in milliseconds (thousandths of a second)
#NAME: update
#PARENT: Gdk.FrameClock
#COMMENT: This signal is emitted as the first step of toolkit and
application processing of the frame. Animations should
be updated using gdk_frame_clock_get_frame_time().
Applications can connect directly to this signal, or
use gtk_widget_add_tick_callback() as a more convenient
interface.
#NAME: x
#PARENT: Gdk.EventMotion
#COMMENT: the x coordinate of the pointer relative to the window.
#NAME: not_viewable
#PARENT: Gdk.GrabStatus
#COMMENT: the grab window or the @confine_to window are not
 viewable.
#NAME: device
#PARENT: Gdk.Window.begin_move_drag_for_device.none
#COMMENT: the device used for the operation
#NAME: y
#PARENT: Gdk.EventMotion
#COMMENT: the y coordinate of the pointer relative to the window.
#NAME: device
#PARENT: Gdk.Device.list_axes.Atom
#COMMENT: a pointer #GdkDevice
#NAME: text_property_to_utf8_list_for_display
#PARENT: Gdk
#COMMENT: Converts a text property in the given encoding to
a list of UTF-8 strings.
#NAME: screen
#PARENT: Gdk.Screen.get_monitor_height_mm.gint
#COMMENT: a #GdkScreen
#NAME: support_multidevice
#PARENT: Gdk.Window.set_support_multidevice.none
#COMMENT: %TRUE to enable multidevice support in @window.
#NAME: keymap
#PARENT: Gdk.Keymap.map_virtual_modifiers.gboolean
#COMMENT: a #GdkKeymap
#NAME: msb_first
#PARENT: Gdk.ByteOrder
#COMMENT: The values are stored with the most-significant byte
  first. For instance, the 32-bit value 0xffeecc would be stored
  in memory as 0x00, 0xff, 0xee, 0xcc.
#NAME: device
#PARENT: Gdk.Window.set_device_events.none
#COMMENT: #GdkDevice to enable events for.
#NAME: requestor
#PARENT: Gdk.selection_send_notify.none
#COMMENT: window to which to deliver response.
#NAME: grab_broken
#PARENT: Gdk.Event
#COMMENT: a #GdkEventGrabBroken
#NAME: get_protocol
#PARENT: Gdk.DragContext
#COMMENT: Returns the drag protocol thats used by this context.
#NAME: window
#PARENT: Gdk.Window.freeze_updates.none
#COMMENT: a #GdkWindow
#NAME: urgent
#PARENT: Gdk.Window.set_urgency_hint.none
#COMMENT: %TRUE if the window is urgent
#NAME: pixbuf
#PARENT: Gdk.cairo_surface_create_from_pixbuf.cairo.Surface
#COMMENT: a #GdkPixbuf
#NAME: selection_convert
#PARENT: Gdk
#COMMENT: Retrieves the contents of a selection in a given
form.
#NAME: window
#PARENT: Gdk.EventButton
#COMMENT: the window which received the event.
#NAME: root
#PARENT: Gdk.WindowType
#COMMENT: root window; this window has no parent, covers the entire
 screen, and is created by the window system
#NAME: width
#PARENT: Gdk.pixbuf_get_from_surface.GdkPixbuf.Pixbuf
#COMMENT: Width in pixels of region to get
#NAME: width
#PARENT: Gdk.Window.create_similar_surface.cairo.Surface
#COMMENT: width of the new surface
#NAME: color
#PARENT: Gdk.Color.hash.guint
#COMMENT: a #GdkColor
#NAME: AxisUse
#PARENT: Gdk
#COMMENT: An enumeration describing the way in which a device
axis (valuator) maps onto the predefined valuator
types that GTK+ understands.
#NAME: type
#PARENT: Gdk.EventGrabBroken
#COMMENT: the type of the event (%GDK_GRAB_BROKEN)
#NAME: sb_left_arrow
#PARENT: Gdk.CursorType
#COMMENT: ![](sb_left_arrow.png)
#NAME: xterm
#PARENT: Gdk.CursorType
#COMMENT: ![](xterm.png)
#NAME: width
#PARENT: Gdk.Window.create_similar_image_surface.cairo.Surface
#COMMENT: width of the new surface
#NAME: state
#PARENT: Gdk.EventProperty
#COMMENT: whether the property was changed
  (%GDK_PROPERTY_NEW_VALUE) or deleted (%GDK_PROPERTY_DELETE).
#NAME: protocol
#PARENT: Gdk.drag_motion.gboolean
#COMMENT: the DND protocol in use, obtained by gdk_drag_find_window()
#NAME: width
#PARENT: Gdk.WindowAttr
#COMMENT: width of window
#NAME: length
#PARENT: Gdk.property_get.gboolean
#COMMENT: the length of the data to retrieve in bytes.  Data is
  considered to be retrieved in 4 byte chunks, so @length
  will be rounded up to the next highest 4 byte boundary
  (so be careful not to pass a value that might overflow
  when rounded up).
#NAME: get_button
#PARENT: Gdk.Event.get_button
#COMMENT: %TRUE if the event delivered a button number
#NAME: set_source_events
#PARENT: Gdk.Window
#COMMENT: Sets the event mask for any floating device (i.e. not attached to any
visible pointer) that has the source defined as @source. This event
mask will be applied both to currently existing, newly added devices
after this call, and devices being attached/detached.
#NAME: window
#PARENT: Gdk.test_simulate_button.gboolean
#COMMENT: a #GdkWindow to simulate a button event for
#NAME: value
#PARENT: Gdk.Event.get_axis.gboolean
#COMMENT: location to store the value found
#NAME: copy
#PARENT: Gdk.Event.copy
#COMMENT: a copy of @event. The returned #GdkEvent should be freed with
gdk_event_free().
#NAME: height
#PARENT: Gdk.cairo_draw_from_gl.none
#COMMENT: The height of the region to draw
#NAME: height
#PARENT: Gdk.Window.get_geometry.none
#COMMENT: return location for height of window
#NAME: supports_selection_notification
#PARENT: Gdk.Display
#COMMENT: Returns whether #GdkEventOwnerChange events will be
sent when the owner of a selection changes.
#NAME: region
#PARENT: Gdk.cairo_region.none
#COMMENT: a #cairo_region_t
#NAME: cr
#PARENT: Gdk.cairo_set_source_pixbuf.none
#COMMENT: a cairo context
#NAME: interval
#PARENT: Gdk.threads_add_timeout_seconds.guint
#COMMENT: the time between calls to the function, in seconds
#NAME: screen
#PARENT: Gdk.Screen.list_visuals.Visual
#COMMENT: the relevant #GdkScreen.
#NAME: y_origin
#PARENT: Gdk.pango_layout_line_get_clip_region.cairo.Region
#COMMENT: baseline pixel where you intend to draw the layout line with this clip
#NAME: send_event
#PARENT: Gdk.EventAny
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: set_decorations
#PARENT: Gdk.Window
#COMMENT: “Decorations” are the features the window manager adds to a toplevel #GdkWindow.
This function sets the traditional Motif window manager hints that tell the
window manager which decorations you would like your window to have.
Usually you should use gtk_window_set_decorated() on a #GtkWindow instead of
using the GDK function directly.

The @decorations argument is the logical OR of the fields in
the #GdkWMDecoration enumeration. If #GDK_DECOR_ALL is included in the
mask, the other bits indicate which decorations should be turned off.
If #GDK_DECOR_ALL is not included, then the other bits indicate
which decorations should be turned on.

Most window managers honor a decorations hint of 0 to disable all decorations,
but very few honor all possible combinations of bits.
#NAME: visibility_notify_mask
#PARENT: Gdk.EventMask
#COMMENT: receive visibility change events
#NAME: display
#PARENT: Gdk.Display.get_default_cursor_size.guint
#COMMENT: a #GdkDisplay
#NAME: destroy
#PARENT: Gdk.EventType
#COMMENT: the window has been destroyed.
#NAME: window
#PARENT: Gdk.Window.deiconify.none
#COMMENT: a toplevel #GdkWindow
#NAME: x_cursor
#PARENT: Gdk.CursorType
#COMMENT: ![](X_cursor.png)
#NAME: plus
#PARENT: Gdk.CursorType
#COMMENT: ![](plus.png)
#NAME: pixbufs
#PARENT: Gdk.Window.set_icon_list.none
#COMMENT: 
    A list of pixbufs, of different sizes.
#NAME: modifier_reserved_15_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: display
#PARENT: Gdk.Display.sync.none
#COMMENT: a #GdkDisplay
#NAME: heart
#PARENT: Gdk.CursorType
#COMMENT: ![](heart.png)
#NAME: set_icon_name
#PARENT: Gdk.Window
#COMMENT: Windows may have a name used while minimized, distinct from the
name they display in their titlebar. Most of the time this is a bad
idea from a user interface standpoint. But you can set such a name
with this function, if you like.

After calling this with a non-%NULL @name, calls to gdk_window_set_title()
will not update the icon title.

Using %NULL for @name unsets the icon title; further calls to
gdk_window_set_title() will again update the icon title as well.
#NAME: get_history
#PARENT: Gdk.Device.get_history
#COMMENT: %TRUE if the windowing system supports motion history and
 at least one event was found.
#NAME: cross
#PARENT: Gdk.CursorType
#COMMENT: ![](cross.png)
#NAME: new
#PARENT: Gdk.Window.new
#COMMENT: the new #GdkWindow
#NAME: window
#PARENT: Gdk.Window.invalidate_maybe_recurse.none
#COMMENT: a #GdkWindow
#NAME: window
#PARENT: Gdk.keyboard_grab.GrabStatus
#COMMENT: the #GdkWindow which will own the grab (the grab window).
#NAME: y_root
#PARENT: Gdk.EventTouch
#COMMENT: the y coordinate of the pointer relative to the root of the
  screen
#NAME: set_functions
#PARENT: Gdk.Window
#COMMENT: Sets hints about the window management functions to make available
via buttons on the window frame.

On the X backend, this function sets the traditional Motif window
manager hint for this purpose. However, few window managers do
anything reliable or interesting with this hint. Many ignore it
entirely.

The @functions argument is the logical OR of values from the
#GdkWMFunction enumeration. If the bitmask includes #GDK_FUNC_ALL,
then the other bits indicate which functions to disable; if
it doesn’t include #GDK_FUNC_ALL, it indicates which functions to
enable.
#NAME: xdnd
#PARENT: Gdk.DragProtocol
#COMMENT: The Xdnd protocol.
#NAME: cursor
#PARENT: Gdk.InputSource
#COMMENT: the device is a graphics tablet “puck” or similar device.
#NAME: frame_counter
#PARENT: Gdk.FrameClock.get_timings.FrameTimings
#COMMENT: the frame counter value identifying the frame to
 be received.
#NAME: get_axis
#PARENT: Gdk.Device.get_axis
#COMMENT: %TRUE if the given axis use was found, otherwise %FALSE
#NAME: screen
#PARENT: Gdk.Screen.get_active_window.Window
#COMMENT: a #GdkScreen
#NAME: time
#PARENT: Gdk.EventTouch
#COMMENT: the time of the event in milliseconds.
#NAME: timestamp
#PARENT: Gdk.Window.focus.none
#COMMENT: timestamp of the event triggering the window focus
#NAME: drag_leave
#PARENT: Gdk.EventType
#COMMENT: the mouse has left the window while a drag is in progress.
#NAME: window
#PARENT: Gdk.Window.set_composited.none
#COMMENT: a #GdkWindow
#NAME: window
#PARENT: Gdk.Window.set_fullscreen_mode.none
#COMMENT: a toplevel #GdkWindow
#NAME: touch_cancel
#PARENT: Gdk.EventType
#COMMENT: A touch event sequence has been canceled. This event type
  was added in 3.4.
#NAME: context
#PARENT: Gdk.DragContext.get_suggested_action.DragAction
#COMMENT: a #GdkDragContext
#NAME: x_win
#PARENT: Gdk.Event.get_coords.gboolean
#COMMENT: location to put event window x coordinate
#NAME: get_required_version
#PARENT: Gdk.GLContext
#COMMENT: Retrieves the major and minor version requested by calling
gdk_gl_context_set_required_version().
#NAME: hash
#PARENT: Gdk.RGBA.hash
#COMMENT: The hash value for @p
#NAME: display
#PARENT: Gdk.Display.request_selection_notification.gboolean
#COMMENT: a #GdkDisplay
#NAME: input-source
#PARENT: Gdk.Device
#COMMENT: Source type for the device.
#NAME: atom_intern
#PARENT: Gdk.atom_intern
#COMMENT: the atom corresponding to @atom_name.
#NAME: rectangle_intersect
#PARENT: Gdk.rectangle_intersect
#COMMENT: %TRUE if the rectangles intersect.
#NAME: x
#PARENT: Gdk.EventButton
#COMMENT: the x coordinate of the pointer relative to the window.
#NAME: pointer_grab
#PARENT: Gdk.pointer_grab
#COMMENT: %GDK_GRAB_SUCCESS if the grab was successful.
#NAME: warp_pointer
#PARENT: Gdk.Display
#COMMENT: Warps the pointer of @display to the point @x,@y on
the screen @screen, unless the pointer is confined
to a window by a grab, in which case it will be moved
as far as allowed by the grab. Warping the pointer
creates events as if the user had moved the mouse
instantaneously to the destination.

Note that the pointer should normally be under the
control of the user. This function was added to cover
some rare use cases like keyboard navigation support
for the color picker in the #GtkColorSelectionDialog.
#NAME: y
#PARENT: Gdk.EventButton
#COMMENT: the y coordinate of the pointer relative to the window.
#NAME: after_paint
#PARENT: Gdk.FrameClockPhase
#COMMENT: corresponds to GdkFrameClock::after-paint. Should not be handled by applications.
#NAME: send_event
#PARENT: Gdk.EventKey
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: window
#PARENT: Gdk.offscreen_window_set_embedder.none
#COMMENT: a #GdkWindow
#NAME: up
#PARENT: Gdk.ScrollDirection
#COMMENT: the window is scrolled up.
#NAME: EventProximity
#PARENT: Gdk
#COMMENT: Proximity events are generated when using GDK’s wrapper for the
XInput extension. The XInput extension is an add-on for standard X
that allows you to use nonstandard devices such as graphics tablets.
A proximity event indicates that the stylus has moved in or out of
contact with the tablet, or perhaps that the user’s finger has moved
in or out of contact with a touch screen.

This event type will be used pretty rarely. It only is important for
XInput aware programs that are drawing their own cursor.
#NAME: action
#PARENT: Gdk.drag_status.none
#COMMENT: the selected action which will be taken when a drop happens,
   or 0 to indicate that a drop will not be accepted
#NAME: display
#PARENT: Gdk.Display.supports_selection_notification.gboolean
#COMMENT: a #GdkDisplay
#NAME: get_height
#PARENT: Gdk.Window.get_height
#COMMENT: The height of @window
#NAME: window
#PARENT: Gdk.Device.get_state.none
#COMMENT: a #GdkWindow.
#NAME: delta_x
#PARENT: Gdk.Event.get_scroll_deltas.gboolean
#COMMENT: return location for X delta
#NAME: get_depth
#PARENT: Gdk.Visual.get_depth
#COMMENT: The bit depth of this visual.
#NAME: get_window_at_position
#PARENT: Gdk.Device
#COMMENT: Obtains the window underneath @device, returning the location of the device in @win_x and @win_y. Returns
%NULL if the window tree under @device is not known to GDK (for example, belongs to another application).

As a slave device coordinates are those of its master pointer, This
function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().
#NAME: delta_y
#PARENT: Gdk.Event.get_scroll_deltas.gboolean
#COMMENT: return location for Y delta
#NAME: set_cursor
#PARENT: Gdk.Window
#COMMENT: Sets the default mouse pointer for a #GdkWindow.

Note that @cursor must be for the same display as @window.

Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to
create the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR.
Passing %NULL for the @cursor argument to gdk_window_set_cursor() means
that @window will use the cursor of its parent window. Most windows
should use this default.
#NAME: is_closed
#PARENT: Gdk.Display
#COMMENT: Finds out if the display has been closed.
#NAME: get_window_at_position_double
#PARENT: Gdk.Device.get_window_at_position_double
#COMMENT: the #GdkWindow under the
  device position, or %NULL.
#NAME: screen
#PARENT: Gdk.Screen.set_resolution.none
#COMMENT: a #GdkScreen
#NAME: true_color
#PARENT: Gdk.VisualType
#COMMENT: Each pixel value directly contains red, green,
    and blue components. Use gdk_visual_get_red_pixel_details(), etc,
    to obtain information about how the components are assembled into
    a pixel value.
#NAME: window
#PARENT: Gdk.Window.get_parent.Window
#COMMENT: a #GdkWindow
#NAME: atom_name
#PARENT: Gdk.Atom.intern.Atom
#COMMENT: a string.
#NAME: owner
#PARENT: Gdk.EventOwnerChange
#COMMENT: the new owner of the selection, or %NULL if there is none
#NAME: get_best_type
#PARENT: Gdk.Visual
#COMMENT: Return the best available visual type for the default GDK screen.
#NAME: keyval
#PARENT: Gdk.keyval_name.utf8
#COMMENT: a key value
#NAME: visibility
#PARENT: Gdk.Event
#COMMENT: a #GdkEventVisibility
#NAME: get_state
#PARENT: Gdk.Window.get_state
#COMMENT: window state bitfield
#NAME: state
#PARENT: Gdk.Keymap.map_virtual_modifiers.gboolean
#COMMENT: pointer to the modifier state to map
#NAME: screen
#PARENT: Gdk.Screen.get_monitor_workarea.none
#COMMENT: a #GdkScreen
#NAME: window
#PARENT: Gdk.Window.is_input_only.gboolean
#COMMENT: a toplevel #GdkWindow
#NAME: is_shaped
#PARENT: Gdk.Window.is_shaped
#COMMENT: %TRUE if @window is shaped
#NAME: cursor
#PARENT: Gdk.Window
#COMMENT: The mouse pointer for a #GdkWindow. See gdk_window_set_cursor() and
gdk_window_get_cursor() for details.
#NAME: modifier_reserved_29_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: window
#PARENT: Gdk.Window.get_source_events.EventMask
#COMMENT: a #GdkWindow
#NAME: get_product_id
#PARENT: Gdk.Device
#COMMENT: Returns the product ID of this device, or %NULL if this information couldn't
be obtained. This ID is retrieved from the device, and is thus constant for
it. See gdk_device_get_vendor_id() for more information.
#NAME: data
#PARENT: Gdk.threads_add_timeout_seconds.guint
#COMMENT: data to pass to @function
#NAME: window
#PARENT: Gdk.Window.begin_resize_drag_for_device.none
#COMMENT: a toplevel #GdkWindow
#NAME: button
#PARENT: Gdk.Event
#COMMENT: a #GdkEventButton
#NAME: device
#PARENT: Gdk.Device.get_n_keys.gint
#COMMENT: a #GdkDevice
#NAME: structure_mask
#PARENT: Gdk.EventMask
#COMMENT: receive events about window configuration change
#NAME: send_event
#PARENT: Gdk.EventWindowState
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: keyval_to_unicode
#PARENT: Gdk
#COMMENT: Convert from a GDK key symbol to the corresponding ISO10646 (Unicode)
character.
#NAME: get_complete
#PARENT: Gdk.FrameTimings
#COMMENT: The timing information in a #GdkFrameTimings is filled in
incrementally as the frame as drawn and passed off to the
window system for processing and display to the user. The
accessor functions for #GdkFrameTimings can return 0 to
indicate an unavailable value for two reasons: either because
the information is not yet available, or because it isn't
available at all. Once gdk_frame_timings_get_complete() returns
%TRUE for a frame, you can be certain that no further values
will become available and be stored in the #GdkFrameTimings.
#NAME: spec
#PARENT: Gdk.Color.parse.gboolean
#COMMENT: the string specifying the color
#NAME: opacity
#PARENT: Gdk.Window.set_opacity.none
#COMMENT: opacity
#NAME: x
#PARENT: Gdk.Display.get_pointer.none
#COMMENT: location to store root window X coordinate of pointer, or %NULL.
#NAME: get_number
#PARENT: Gdk.Screen
#COMMENT: Gets the index of @screen among the screens in the display
to which it belongs. (See gdk_screen_get_display())
#NAME: y
#PARENT: Gdk.Display.get_pointer.none
#COMMENT: location to store root window Y coordinate of pointer, or %NULL.
#NAME: ur_angle
#PARENT: Gdk.CursorType
#COMMENT: ![](ur_angle.png)
#NAME: left_side
#PARENT: Gdk.CursorType
#COMMENT: ![](left_side.png)
#NAME: target
#PARENT: Gdk.EventSelection
#COMMENT: the target to which the selection should be converted.
#NAME: x
#PARENT: Gdk.WindowAttributesType
#COMMENT: Honor the X coordinate field
#NAME: count
#PARENT: Gdk.EventExpose
#COMMENT: the number of contiguous %GDK_EXPOSE events following this one.
  The only use for this is “exposure compression”, i.e. handling all
  contiguous %GDK_EXPOSE events in one go, though GDK performs some
  exposure compression so this is not normally needed.
#NAME: y
#PARENT: Gdk.WindowAttributesType
#COMMENT: Honor the Y coordinate field
#NAME: events
#PARENT: Gdk.Device.get_history.gboolean
#COMMENT: 
  location to store a newly-allocated array of #GdkTimeCoord, or
  %NULL
#NAME: list_visuals
#PARENT: Gdk.Screen.list_visuals
#COMMENT: 
    a list of visuals; the list must be freed, but not its contents
#NAME: pointer_ungrab
#PARENT: Gdk.Display
#COMMENT: Release any pointer grab.
#NAME: drag_begin_for_device
#PARENT: Gdk
#COMMENT: Starts a drag and creates a new drag context for it.

This function is called by the drag source.
#NAME: based_arrow_up
#PARENT: Gdk.CursorType
#COMMENT: ![](based_arrow_up.png)
#NAME: subsurface
#PARENT: Gdk.WindowType
#COMMENT: subsurface-based window; This window is visually
 tied to a toplevel, and is moved/stacked with it. Currently this window
 type is only implemented in Wayland. Since 3.14
#NAME: parent_x
#PARENT: Gdk.Window.coords_from_parent.none
#COMMENT: X coordinate in parent’s coordinate system
#NAME: name
#PARENT: Gdk.Cursor.new_from_name.Cursor
#COMMENT: the name of the cursor
#NAME: window
#PARENT: Gdk.Window.set_background.none
#COMMENT: a #GdkWindow
#NAME: priority
#PARENT: Gdk.threads_add_timeout_full.guint
#COMMENT: the priority of the timeout source. Typically this will be in the
           range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
#NAME: parent_y
#PARENT: Gdk.Window.coords_from_parent.none
#COMMENT: Y coordinate in parent’s coordinate system
#NAME: button_press
#PARENT: Gdk.EventType
#COMMENT: a mouse button has been pressed.
#NAME: device
#PARENT: Gdk.Device.get_name.utf8
#COMMENT: a #GdkDevice
#NAME: get_height
#PARENT: Gdk.Window
#COMMENT: Returns the height of the given @window.

On the X11 platform the returned size is the size reported in the
most-recently-processed configure event, rather than the current
size on the X server.
#NAME: device
#PARENT: Gdk.Window.set_device_cursor.none
#COMMENT: a master, pointer #GdkDevice
#NAME: x_root
#PARENT: Gdk.EventCrossing
#COMMENT: the x coordinate of the pointer relative to the root of the screen.
#NAME: protocol
#PARENT: Gdk.drag_find_window_for_screen.none
#COMMENT: location to store the DND protocol in
#NAME: window
#PARENT: Gdk.EventMotion
#COMMENT: the window which received the event.
#NAME: set_source_device
#PARENT: Gdk.Event
#COMMENT: Sets the slave device for @event to @device.

The event must have been allocated by GTK+,
for instance by gdk_event_copy().
#NAME: title
#PARENT: Gdk.WindowAttributesType
#COMMENT: Honor the title field
#NAME: msec
#PARENT: Gdk.Display.set_double_click_time.none
#COMMENT: double click time in milliseconds (thousandths of a second)
#NAME: display
#PARENT: Gdk.Display.get_window_at_pointer.Window
#COMMENT: a #GdkDisplay
#NAME: grab_ownership
#PARENT: Gdk.Device.grab.GrabStatus
#COMMENT: specifies the grab ownership.
#NAME: sticky
#PARENT: Gdk.WindowState
#COMMENT: the window is sticky.
#NAME: grab_window
#PARENT: Gdk.Device.grab_info_libgtk_only.gboolean
#COMMENT: location to store current grab window
#NAME: cr
#PARENT: Gdk.cairo_draw_from_gl.none
#COMMENT: a cairo context
#NAME: interval
#PARENT: Gdk.threads_add_timeout.guint
#COMMENT: the time between calls to the function, in milliseconds
            (1/1000ths of a second)
#NAME: screen
#PARENT: Gdk.Screen.get_n_monitors.gint
#COMMENT: a #GdkScreen
#NAME: device_is_grabbed
#PARENT: Gdk.Display
#COMMENT: Returns %TRUE if there is an ongoing grab on @device for @display.
#NAME: suggested_action
#PARENT: Gdk.drag_motion.gboolean
#COMMENT: the suggested action
#NAME: get_for_display
#PARENT: Gdk.Keymap
#COMMENT: Returns the #GdkKeymap attached to @display.
#NAME: requestor
#PARENT: Gdk.EventSelection
#COMMENT: the window on which to place @property or %NULL if none.
#NAME: button_pressrelease
#PARENT: Gdk.test_simulate_button.gboolean
#COMMENT: either %GDK_BUTTON_PRESS or %GDK_BUTTON_RELEASE
#NAME: screen
#PARENT: Gdk.Screen.get_monitor_at_point.gint
#COMMENT: a #GdkScreen.
#NAME: window
#PARENT: Gdk.Window.add_filter.none
#COMMENT: a #GdkWindow
#NAME: keyboard
#PARENT: Gdk.EventGrabBroken
#COMMENT: %TRUE if a keyboard grab was broken, %FALSE if a pointer
  grab was broken
#NAME: minor
#PARENT: Gdk.GLContext.get_required_version.none
#COMMENT: return location for the minor version to request
#NAME: window
#PARENT: Gdk.GrabOwnership
#COMMENT: Other devices’ events are blocked for the grab window.
#NAME: event_get
#PARENT: Gdk
#COMMENT: Checks all open displays for a #GdkEvent to process,to be processed
on, fetching events from the windowing system if necessary.
See gdk_display_get_event().
#NAME: function
#PARENT: Gdk.threads_add_timeout_seconds.guint
#COMMENT: function to call
#NAME: show_window_menu
#PARENT: Gdk.Window
#COMMENT: Asks the windowing system to show the window menu. The window menu
is the menu shown when right-clicking the titlebar on traditional
windows managed by the window manager. This is useful for windows
using client-side decorations, activating it with a right-click
on the window decorations.
#NAME: Device
#PARENT: Gdk
#COMMENT: The #GdkDevice object represents a single input device, such
as a keyboard, a mouse, a touchpad, etc.

See the #GdkDeviceManager documentation for more information
about the various kinds of master and slave devices, and their
relationships.
#NAME: window
#PARENT: Gdk.Window.set_skip_pager_hint.none
#COMMENT: a toplevel #GdkWindow
#NAME: keyboard_grab
#PARENT: Gdk.keyboard_grab
#COMMENT: %GDK_GRAB_SUCCESS if the grab was successful.
#NAME: get_effective_toplevel
#PARENT: Gdk.Window
#COMMENT: Gets the toplevel window that’s an ancestor of @window.

Works like gdk_window_get_toplevel(), but treats an offscreen window's
embedder as its parent, using gdk_window_get_effective_parent().

See also: gdk_offscreen_window_get_embedder()
#NAME: window
#PARENT: Gdk.Window.set_invalidate_handler.none
#COMMENT: a #GdkWindow
#NAME: _get_distance
#PARENT: Gdk.Event
#COMMENT: If both events have X/Y information, the distance between both coordinates
(as in a straight line going from @event1 to @event2) will be returned.
#NAME: touch_begin
#PARENT: Gdk.EventType
#COMMENT: A new touch event sequence has just started. This event
  type was added in 3.4.
#NAME: window
#PARENT: Gdk.Window.get_visible_region.cairo.Region
#COMMENT: a #GdkWindow
#NAME: store_clipboard
#PARENT: Gdk.Display
#COMMENT: Issues a request to the clipboard manager to store the
clipboard data. On X11, this is a special program that works
according to the
[FreeDesktop Clipboard Specification](http://www.freedesktop.org/Standards/clipboard-manager-spec).
#NAME: upper
#PARENT: Gdk.keyval_convert_case.none
#COMMENT: return location for uppercase version of @symbol
#NAME: equal
#PARENT: Gdk.RGBA
#COMMENT: Compares two RGBA colors.
#NAME: monitor_num
#PARENT: Gdk.Screen.get_monitor_geometry.none
#COMMENT: the monitor number
#NAME: enter_notify
#PARENT: Gdk.EventType
#COMMENT: the pointer has entered the window.
#NAME: screen
#PARENT: Gdk.Screen.get_width_mm.gint
#COMMENT: a #GdkScreen
#NAME: child_func
#PARENT: Gdk.Window.invalidate_maybe_recurse.none
#COMMENT: function to use to decide if to
    recurse to a child, %NULL means never recurse.
#NAME: attributes
#PARENT: Gdk.Window.new.Window
#COMMENT: attributes of the new window
#NAME: get_visual
#PARENT: Gdk.Window.get_visual
#COMMENT: a #GdkVisual
#NAME: boat
#PARENT: Gdk.CursorType
#COMMENT: ![](boat.png)
#NAME: north
#PARENT: Gdk.WindowEdge
#COMMENT: the top edge.
#NAME: visual_type
#PARENT: Gdk.Visual.get_best_with_both.Visual
#COMMENT: a visual type
#NAME: south
#PARENT: Gdk.WindowEdge
#COMMENT: the lower edge.
#NAME: window
#PARENT: Gdk.Window.geometry_changed.none
#COMMENT: an embedded offscreen #GdkWindow
#NAME: y_root
#PARENT: Gdk.EventScroll
#COMMENT: the y coordinate of the pointer relative to the root of the
  screen.
#NAME: type
#PARENT: Gdk.Event.new.Event
#COMMENT: a #GdkEventType
#NAME: proximity_out
#PARENT: Gdk.EventType
#COMMENT: an input device has moved out of contact with a sensing
  surface.
#NAME: source
#PARENT: Gdk.cairo_draw_from_gl.none
#COMMENT: The GL ID of the source buffer
#NAME: device_switch
#PARENT: Gdk.CrossingMode
#COMMENT: crossing because of a device switch (i.e.
  a mouse taking control of the pointer after a touch device), this event
  is synthetic as the pointer didn’t leave the window.
#NAME: keymap
#PARENT: Gdk.Keymap.get_modifier_state.guint
#COMMENT: a #GdkKeymap
#NAME: format
#PARENT: Gdk.property_change.none
#COMMENT: the new format for the property. If @mode is
  %GDK_PROP_MODE_PREPEND or %GDK_PROP_MODE_APPEND, then this
  must match the existing format or an error will occur.
#NAME: event
#PARENT: Gdk.Event.put.none
#COMMENT: a #GdkEvent.
#NAME: geometry_changed
#PARENT: Gdk.Window
#COMMENT: This function informs GDK that the geometry of an embedded
offscreen window has changed. This is necessary for GDK to keep
track of which offscreen window the pointer is in.
#NAME: flush
#PARENT: Gdk.Display
#COMMENT: Flushes any requests queued for the windowing system; this happens automatically
when the main loop blocks waiting for new events, but if your application
is drawing without returning control to the main loop, you may need
to call this function explicitly. A common case where this function
needs to be called is when an application is executing drawing commands
from a thread other than the thread where the main loop is running.

This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.
#NAME: event
#PARENT: Gdk.Event.set_source_device.none
#COMMENT: a #GdkEvent
#NAME: equal
#PARENT: Gdk.Color.equal
#COMMENT: %TRUE if the two colors compare equal
#NAME: get_program_class
#PARENT: Gdk
#COMMENT: Gets the program class. Unless the program class has explicitly
been set with gdk_set_program_class() or with the `--class`
commandline option, the default value is the program name (determined
with g_get_prgname()) with the first character converted to uppercase.
#NAME: window
#PARENT: Gdk.EventProperty
#COMMENT: the window which received the event.
#NAME: cursor
#PARENT: Gdk.Cursor.get_surface.cairo.Surface
#COMMENT: a #GdkCursor
#NAME: region
#PARENT: Gdk.EventExpose
#COMMENT: the region that needs to be redrawn.
#NAME: enter_notify_mask
#PARENT: Gdk.EventMask
#COMMENT: receive window enter events
#NAME: time
#PARENT: Gdk.EventKey
#COMMENT: the time of the event in milliseconds.
#NAME: get_show_events
#PARENT: Gdk.get_show_events
#COMMENT: %TRUE if event debugging output is enabled.
#NAME: region
#PARENT: Gdk.Window.invalidate_region.none
#COMMENT: a #cairo_region_t
#NAME: window
#PARENT: Gdk.Window.is_visible.gboolean
#COMMENT: a #GdkWindow
#NAME: window
#PARENT: Gdk.InputMode
#COMMENT: the device is enabled. The device’s coordinate space
                  is mapped to a single window. The manner in which this window
                  is chosen is undefined, but it will typically be the same
                  way in which the focus window for key events is determined.
#NAME: event
#PARENT: Gdk.Event.get_axis.gboolean
#COMMENT: a #GdkEvent
#NAME: modifier_reserved_23_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: supports_cursor_alpha
#PARENT: Gdk.Display
#COMMENT: Returns %TRUE if cursors can use an 8bit alpha channel
on @display. Otherwise, cursors are restricted to bilevel
alpha (i.e. a mask).
#NAME: get_system
#PARENT: Gdk.Visual.get_system
#COMMENT: system visual
#NAME: _get_center
#PARENT: Gdk.Event
#COMMENT: If both events contain X/Y information, the center of both coordinates
will be returned in @x and @y.
#NAME: state
#PARENT: Gdk.EventKey
#COMMENT: a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.
#NAME: mouse
#PARENT: Gdk.CursorType
#COMMENT: ![](mouse.png)
#NAME: dropdown_menu
#PARENT: Gdk.WindowTypeHint
#COMMENT: A menu that belongs to a menubar.
#NAME: name
#PARENT: Gdk.Atom
#COMMENT: Determines the string corresponding to an atom.
#NAME: y_root
#PARENT: Gdk.Event.get_root_coords.gboolean
#COMMENT: location to put root window y coordinate
#NAME: startup_id
#PARENT: Gdk.Window.set_startup_id.none
#COMMENT: a string with startup-notification identifier
#NAME: continue
#PARENT: Gdk.FilterReturn
#COMMENT: event not handled, continue processing.
#NAME: closed
#PARENT: Gdk.Display
#COMMENT: The ::closed signal is emitted when the connection to the windowing
system for @display is closed.
#NAME: fleur
#PARENT: Gdk.CursorType
#COMMENT: ![](fleur.png)
#NAME: screen
#PARENT: Gdk.pango_context_get_for_screen.Pango.Context
#COMMENT: the #GdkScreen for which the context is to be created.
#NAME: new_from_surface
#PARENT: Gdk.Cursor.new_from_surface
#COMMENT: a new #GdkCursor.
#NAME: is_composited
#PARENT: Gdk.Screen
#COMMENT: Returns whether windows with an RGBA visual can reasonably
be expected to have their alpha channel drawn correctly on
the screen.

On X11 this function returns whether a compositing manager is
compositing @screen.
#NAME: window
#PARENT: Gdk.EventDND
#COMMENT: the window which received the event.
#NAME: context
#PARENT: Gdk.drag_drop_succeeded.gboolean
#COMMENT: a #GdkDragContext
#NAME: copy
#PARENT: Gdk.DragAction
#COMMENT: Copy the data.
#NAME: event
#PARENT: Gdk.Event.free.none
#COMMENT: a #GdkEvent.
#NAME: get_dest_window
#PARENT: Gdk.DragContext
#COMMENT: Returns the destination windw for the DND operation.
#NAME: height
#PARENT: Gdk.pixbuf_get_from_window.GdkPixbuf.Pixbuf
#COMMENT: Height in pixels of region to get
#NAME: get_default_root_window
#PARENT: Gdk.get_default_root_window
#COMMENT: the default root window
#NAME: screen
#PARENT: Gdk.Device.get_position.none
#COMMENT: location to store the #GdkScreen
         the @device is on, or %NULL.
#NAME: window
#PARENT: Gdk.Window.is_destroyed.gboolean
#COMMENT: a #GdkWindow
#NAME: get_root_coords
#PARENT: Gdk.Window
#COMMENT: Obtains the position of a window position in root
window coordinates. This is similar to
gdk_window_get_origin() but allows you to pass
in any position in the window, not just the origin.
#NAME: window_state
#PARENT: Gdk.Event
#COMMENT: a #GdkEventWindowState
#NAME: below
#PARENT: Gdk.WindowState
#COMMENT: the window is kept below other windows.
#NAME: cairo_region
#PARENT: Gdk
#COMMENT: Adds the given region to the current path of @cr.
#NAME: error_trap_push
#PARENT: Gdk
#COMMENT: This function allows X errors to be trapped instead of the normal
behavior of exiting the application. It should only be used if it
is not possible to avoid the X error in any other way. Errors are
ignored on all #GdkDisplay currently known to the
#GdkDisplayManager. If you don’t care which error happens and just
want to ignore everything, pop with gdk_error_trap_pop_ignored().
If you need the error code, use gdk_error_trap_pop() which may have
to block and wait for the error to arrive from the X server.

This API exists on all platforms but only does anything on X.

You can use gdk_x11_display_error_trap_push() to ignore errors
on only a single display.

## Trapping an X error

|[<!-- language="C" -->
gdk_error_trap_push ();

 // ... Call the X function which may cause an error here ...


if (gdk_error_trap_pop ())
 {
   // ... Handle the error here ...
 }
]|
#NAME: use_static
#PARENT: Gdk.Window.set_static_gravities.gboolean
#COMMENT: %TRUE to turn on static gravity
#NAME: function
#PARENT: Gdk.threads_add_idle_full.guint
#COMMENT: function to call
#NAME: dest_window
#PARENT: Gdk.drag_motion.gboolean
#COMMENT: the new destination window, obtained by
    gdk_drag_find_window()
#NAME: get_history_start
#PARENT: Gdk.FrameClock.get_history_start
#COMMENT: the frame counter value for the oldest frame
 that is available in the internal frame history of the
 #GdkFrameClock.
#NAME: get_device_events
#PARENT: Gdk.Window
#COMMENT: Returns the event mask for @window corresponding to an specific device.
#NAME: actual_format
#PARENT: Gdk.property_get.gboolean
#COMMENT: location to store the actual return format of the
  data; either 8, 16 or 32 bits.
#NAME: hand1
#PARENT: Gdk.CursorType
#COMMENT: ![](hand1.png)
#NAME: frame_clock
#PARENT: Gdk.FrameClock.get_frame_counter.gint64
#COMMENT: a #GdkFrameClock
#NAME: hand2
#PARENT: Gdk.CursorType
#COMMENT: ![](hand2.png)
#NAME: root_x
#PARENT: Gdk.Window.get_root_coords.none
#COMMENT: return location for X coordinate
#NAME: nonlinear_virtual
#PARENT: Gdk.NotifyType
#COMMENT: the pointer moves between two windows
  which are not ancestors of each other and the window is part of
  the ancestor chain between one of these windows and their least
  common ancestor.
#NAME: root_y
#PARENT: Gdk.Window.get_root_coords.none
#COMMENT: return location for Y coordinate
#NAME: owner
#PARENT: Gdk.selection_owner_set.gboolean
#COMMENT: a #GdkWindow or %NULL to indicate that the
  the owner for the given should be unset.
#NAME: modifiers
#PARENT: Gdk.test_simulate_key.gboolean
#COMMENT: Keyboard modifiers the event is setup with
#NAME: all
#PARENT: Gdk.WMDecoration
#COMMENT: all decorations should be applied.
#NAME: lookup_key
#PARENT: Gdk.Keymap.lookup_key
#COMMENT: a keyval, or 0 if none was mapped to the given @key
#NAME: create_gl_context
#PARENT: Gdk.Window.create_gl_context
#COMMENT: the newly created #GdkGLContext, or
%NULL on error
#NAME: has-cursor
#PARENT: Gdk.Device
#COMMENT: Whether the device is represented by a cursor on the screen. Devices of type
%GDK_DEVICE_TYPE_MASTER will have %TRUE here.
#NAME: screen
#PARENT: Gdk.Device.get_position_double.none
#COMMENT: location to store the #GdkScreen
         the @device is on, or %NULL.
#NAME: get
#PARENT: Gdk.Event
#COMMENT: Checks all open displays for a #GdkEvent to process,to be processed
on, fetching events from the windowing system if necessary.
See gdk_display_get_event().
#NAME: direction
#PARENT: Gdk.Event.get_scroll_direction.gboolean
#COMMENT: location to store the scroll direction
#NAME: ModifierType
#PARENT: Gdk
#COMMENT: A set of bit-flags to indicate the state of modifier keys and mouse buttons
in various event types. Typical modifier keys are Shift, Control, Meta,
Super, Hyper, Alt, Compose, Apple, CapsLock or ShiftLock.

Like the X Window System, GDK supports 8 modifier keys and 5 mouse buttons.

Since 2.10, GDK recognizes which of the Meta, Super or Hyper keys are mapped
to Mod2 - Mod5, and indicates this by setting %GDK_SUPER_MASK,
%GDK_HYPER_MASK or %GDK_META_MASK in the state field of key events.

Note that GDK may add internal values to events which include
reserved values such as %GDK_MODIFIER_RESERVED_13_MASK.  Your code
should preserve and ignore them.  You can use %GDK_MODIFIER_MASK to
remove all reserved values.
#NAME: selection_owner_get_for_display
#PARENT: Gdk
#COMMENT: Determine the owner of the given selection.

Note that the return value may be owned by a different
process if a foreign window was previously created for that
window, but a new foreign window will never be created by this call.
#NAME: cairo_create
#PARENT: Gdk
#COMMENT: Creates a Cairo context for drawing to @window.

Note that calling cairo_reset_clip() on the resulting #cairo_t will
produce undefined results, so avoid it at all costs.
#NAME: context
#PARENT: Gdk.AppLaunchContext.set_display.none
#COMMENT: a #GdkAppLaunchContext
#NAME: pango_layout_get_clip_region
#PARENT: Gdk
#COMMENT: Obtains a clip region which contains the areas where the given ranges
of text would be drawn. @x_origin and @y_origin are the top left point
to center the layout. @index_ranges should contain
ranges of bytes in the layout’s text.

Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn layout may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.
#NAME: decorations
#PARENT: Gdk.Window.set_decorations.none
#COMMENT: decoration hint mask
#NAME: get_actions
#PARENT: Gdk.DragContext
#COMMENT: Determines the bitmask of actions proposed by the source if
gdk_drag_context_get_suggested_action() returns %GDK_ACTION_ASK.
#NAME: all
#PARENT: Gdk.WMFunction
#COMMENT: all functions should be offered.
#NAME: keymap
#PARENT: Gdk.Keymap.get_scroll_lock_state.gboolean
#COMMENT: a #GdkKeymap
#NAME: get_monitor_at_point
#PARENT: Gdk.Screen
#COMMENT: Returns the monitor number in which the point (@x,@y) is located.
#NAME: window
#PARENT: Gdk.Window.iconify.none
#COMMENT: a toplevel #GdkWindow
#NAME: function
#PARENT: Gdk.threads_add_timeout.guint
#COMMENT: function to call
#NAME: set_axis_use
#PARENT: Gdk.Device
#COMMENT: Specifies how an axis of a device is used.
#NAME: width
#PARENT: Gdk.Display.get_maximal_cursor_size.none
#COMMENT: the return location for the maximal cursor width
#NAME: screen
#PARENT: Gdk.Device.warp.none
#COMMENT: the screen to warp @device to.
#NAME: owner_events
#PARENT: Gdk.pointer_grab.GrabStatus
#COMMENT: if %FALSE then all pointer events are reported with respect to
               @window and are only reported if selected by @event_mask. If %TRUE then pointer
               events for this application are reported as normal, but pointer events outside
               this application are reported with respect to @window and only if selected by
               @event_mask. In either mode, unreported events are discarded.
#NAME: flush
#PARENT: Gdk.Window
#COMMENT: This function does nothing.
#NAME: spraycan
#PARENT: Gdk.CursorType
#COMMENT: ![](spraycan.png)
#NAME: get_width_mm
#PARENT: Gdk.Screen.get_width_mm
#COMMENT: the width of @screen in millimeters.
#NAME: cr
#PARENT: Gdk.cairo_get_clip_rectangle.gboolean
#COMMENT: a cairo context
#NAME: frozen
#PARENT: Gdk.GrabStatus
#COMMENT: the resource is frozen by an active grab of another client.
#NAME: get_axis
#PARENT: Gdk.Event
#COMMENT: Extract the axis value for a particular axis use from
an event structure.
#NAME: set_forward_compatible
#PARENT: Gdk.GLContext
#COMMENT: Sets whether the #GdkGLContext should be forward compatible.

Forward compatibile contexts must not support OpenGL functionality that
has been marked as deprecated in the requested version; non-forward
compatible contexts, on the other hand, must support both deprecated and
non deprecated functionality.

The #GdkGLContext must not be realized or made current prior to calling
this function.
#NAME: get_device
#PARENT: Gdk.DragContext.get_device
#COMMENT: The #GdkDevice associated to @context.
#NAME: selection
#PARENT: Gdk.selection_convert.none
#COMMENT: an atom identifying the selection to get the
  contents of.
#NAME: precision
#PARENT: Gdk.Visual.get_blue_pixel_details.none
#COMMENT: A pointer to a #gint to be filled in, or %NULL
#NAME: EventDND
#PARENT: Gdk
#COMMENT: Generated during DND operations.
#NAME: left_ptr
#PARENT: Gdk.CursorType
#COMMENT: ![](left_ptr.png)
#NAME: width
#PARENT: Gdk.EventConfigure
#COMMENT: the new width of the window.
#NAME: context
#PARENT: Gdk.GLContext.get_shared_context.GLContext
#COMMENT: a #GdkGLContext
#NAME: get_caps_lock_state
#PARENT: Gdk.Keymap
#COMMENT: Returns whether the Caps Lock modifer is locked.
#NAME: window
#PARENT: Gdk.Window.get_modal_hint.gboolean
#COMMENT: A toplevel #GdkWindow.
#NAME: master
#PARENT: Gdk.DeviceType
#COMMENT: Device is a master (or virtual) device. There will
                         be an associated focus indicator on the screen.
#NAME: new
#PARENT: Gdk.SettingAction
#COMMENT: a setting was added.
#NAME: has_native
#PARENT: Gdk.Window.has_native
#COMMENT: %TRUE if the @window has a native window, %FALSE otherwise.
#NAME: window
#PARENT: Gdk.Device.grab.GrabStatus
#COMMENT: the #GdkWindow which will own the grab (the grab window)
#NAME: get_num_lock_state
#PARENT: Gdk.Keymap
#COMMENT: Returns whether the Num Lock modifer is locked.
#NAME: text
#PARENT: Gdk.text_property_to_utf8_list_for_display.gint
#COMMENT: the text to convert
#NAME: rgba
#PARENT: Gdk.RGBA.to_string.utf8
#COMMENT: a #GdkRGBA
#NAME: visual
#PARENT: Gdk.WindowAttr
#COMMENT: #GdkVisual for window
#NAME: setting
#PARENT: Gdk.Window.set_debug_updates.none
#COMMENT: %TRUE to turn on update debugging
#NAME: flush_events
#PARENT: Gdk.FrameClockPhase
#COMMENT: corresponds to GdkFrameClock::flush-events. Should not be handled by applications.
#NAME: drag_get_selection
#PARENT: Gdk
#COMMENT: Returns the selection atom for the current source window.
#NAME: get_width
#PARENT: Gdk.Window
#COMMENT: Returns the width of the given @window.

On the X11 platform the returned size is the size reported in the
most-recently-processed configure event, rather than the current
size on the X server.
#NAME: set_double_click_distance
#PARENT: Gdk.Display
#COMMENT: Sets the double click distance (two clicks within this distance
count as a double click and result in a #GDK_2BUTTON_PRESS event).
See also gdk_display_set_double_click_time().
Applications should not set this, it is a global
user-configured setting.
#NAME: display
#PARENT: Gdk.Display.supports_input_shapes.gboolean
#COMMENT: a #GdkDisplay
#NAME: get_surface
#PARENT: Gdk.Cursor.get_surface
#COMMENT: a #cairo_surface_t
  representing @cursor, or %NULL
#NAME: window
#PARENT: Gdk.Window.shape_combine_region.none
#COMMENT: a #GdkWindow
#NAME: get_default_cursor_size
#PARENT: Gdk.Display
#COMMENT: Returns the default size to use for cursors on @display.
#NAME: target
#PARENT: Gdk.selection_send_notify.none
#COMMENT: target that was selected.
#NAME: x
#PARENT: Gdk.test_simulate_key.gboolean
#COMMENT: x coordinate within @window for the key event
#NAME: state
#PARENT: Gdk.EventScroll
#COMMENT: a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.
#NAME: y_root
#PARENT: Gdk.drag_find_window_for_screen.none
#COMMENT: the y position of the pointer in root coordinates
#NAME: y
#PARENT: Gdk.test_simulate_key.gboolean
#COMMENT: y coordinate within @window for the key event
#NAME: get_effective_parent
#PARENT: Gdk.Window.get_effective_parent
#COMMENT: effective parent of @window
#NAME: time_
#PARENT: Gdk.keyboard_ungrab.none
#COMMENT: a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no
       timestamp is available.
#NAME: notify_startup_complete_with_id
#PARENT: Gdk
#COMMENT: Indicates to the GUI environment that the application has
finished loading, using a given identifier.

GTK+ will call this function automatically for #GtkWindow
with custom startup-notification identifier unless
gtk_window_set_auto_startup_notification() is called to
disable that feature.
#NAME: scroll
#PARENT: Gdk.EventType
#COMMENT: the scroll wheel was turned
#NAME: window
#PARENT: Gdk.Window.thaw_toplevel_updates_libgtk_only.none
#COMMENT: a #GdkWindow
#NAME: direction-changed
#PARENT: Gdk.Keymap
#COMMENT: The ::direction-changed signal gets emitted when the direction of
the keymap changes.
#NAME: height
#PARENT: Gdk.Window.resize.none
#COMMENT: new height of the window
#NAME: get_protocol
#PARENT: Gdk.DragContext.get_protocol
#COMMENT: the drag protocol
#NAME: window
#PARENT: Gdk.Window.raise.none
#COMMENT: a #GdkWindow
#NAME: height
#PARENT: Gdk.Window.create-surface.cairo.Surface
#COMMENT: the height of the offscreen surface to create
#NAME: top_tee
#PARENT: Gdk.CursorType
#COMMENT: ![](top_tee.png)
#NAME: angle
#PARENT: Gdk.Event._get_angle.gboolean
#COMMENT: return location for the relative angle between both events
#NAME: window
#PARENT: Gdk.EventSetting
#COMMENT: the window which received the event.
#NAME: configure
#PARENT: Gdk.Event
#COMMENT: a #GdkEventConfigure
#NAME: keyvals
#PARENT: Gdk.Keymap.get_entries_for_keycode.gboolean
#COMMENT: return
    location for array of keyvals, or %NULL
#NAME: distance
#PARENT: Gdk.Event._get_distance.gboolean
#COMMENT: return location for the distance
#NAME: events_get_angle
#PARENT: Gdk
#COMMENT: If both events contain X/Y information, this function will return %TRUE
and return in @angle the relative angle from @event1 to @event2. The rotation
direction for positive angles is from the positive X axis towards the positive
Y axis.
#NAME: keyboard
#PARENT: Gdk.InputSource
#COMMENT: the device is a keyboard.
#NAME: visual
#PARENT: Gdk.Visual.get_depth.gint
#COMMENT: A #GdkVisual.
#NAME: WindowTypeHint
#PARENT: Gdk
#COMMENT: These are hints for the window manager that indicate what type of function
the window has. The window manager can use this when determining decoration
and behaviour of the window. The hint must be set before mapping the window.

See the [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
specification for more details about window types.
#NAME: window
#PARENT: Gdk.Window.begin_move_drag_for_device.none
#COMMENT: a toplevel #GdkWindow
#NAME: owner_events
#PARENT: Gdk.Device.grab_info_libgtk_only.gboolean
#COMMENT: location to store boolean indicating whether
  the @owner_events flag to gdk_keyboard_grab() or
  gdk_pointer_grab() was %TRUE.
#NAME: x_root
#PARENT: Gdk.drag_motion.gboolean
#COMMENT: the x position of the pointer in root coordinates
#NAME: get_system
#PARENT: Gdk.Visual
#COMMENT: Get the system’s default visual for the default GDK screen.
This is the visual for the root window of the display.
The return value should not be freed.
#NAME: OwnerChange
#PARENT: Gdk
#COMMENT: Specifies why a selection ownership was changed.
#NAME: device
#PARENT: Gdk.Device.get_source.InputSource
#COMMENT: a #GdkDevice
#NAME: get_version
#PARENT: Gdk.GLContext
#COMMENT: Retrieves the OpenGL version of the @context.

The @context must be realized prior to calling this function.
#NAME: offscreen_x
#PARENT: Gdk.Window.from-embedder.none
#COMMENT: return location for the x
    coordinate in the offscreen window
#NAME: list_slave_devices
#PARENT: Gdk.Device
#COMMENT: If the device if of type %GDK_DEVICE_TYPE_MASTER, it will return
the list of slave devices attached to it, otherwise it will return
%NULL
#NAME: device
#PARENT: Gdk.Device.get_position_double.none
#COMMENT: pointer device to query status about.
#NAME: offscreen_y
#PARENT: Gdk.Window.from-embedder.none
#COMMENT: return location for the y
    coordinate in the offscreen window
#NAME: get_timings
#PARENT: Gdk.FrameClock.get_timings
#COMMENT: the #GdkFrameTimings object for the specified
 frame, or %NULL if it is not available. See
 gdk_frame_clock_get_history_start().
#NAME: get_decorations
#PARENT: Gdk.Window
#COMMENT: Returns the decorations set on the GdkWindow with
gdk_window_set_decorations().
#NAME: context
#PARENT: Gdk.GLContext.get_display.Display
#COMMENT: a #GdkGLContext
#NAME: display
#PARENT: Gdk.Device.grab_info_libgtk_only.gboolean
#COMMENT: the display for which to get the grab information
#NAME: beep
#PARENT: Gdk.Window
#COMMENT: Emits a short beep associated to @window in the appropriate
display, if supported. Otherwise, emits a short beep on
the display just as gdk_display_beep().
#NAME: window
#PARENT: Gdk.Window.set_device_events.none
#COMMENT: a #GdkWindow
#NAME: get_default_group
#PARENT: Gdk.Display
#COMMENT: Returns the default group leader window for all toplevel windows
on @display. This window is implicitly created by GDK.
See gdk_window_set_group().
#NAME: get_device_cursor
#PARENT: Gdk.Window.get_device_cursor
#COMMENT: a #GdkCursor, or %NULL. The
  returned object is owned by the #GdkWindow and should not be
  unreferenced directly. Use gdk_window_set_cursor() to unset the
  cursor of the window
#NAME: event1
#PARENT: Gdk.Event._get_center.gboolean
#COMMENT: first #GdkEvent
#NAME: window
#PARENT: Gdk.Window.create_gl_context.GLContext
#COMMENT: a #GdkWindow
#NAME: cursor
#PARENT: Gdk.Cursor.get_display.Display
#COMMENT: a #GdkCursor.
#NAME: event2
#PARENT: Gdk.Event._get_center.gboolean
#COMMENT: second #GdkEvent
#NAME: process_all_updates
#PARENT: Gdk.Window
#COMMENT: Calls gdk_window_process_updates() for all windows (see #GdkWindow)
in the application.
#NAME: send_event
#PARENT: Gdk.EventGrabBroken
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: get_state
#PARENT: Gdk.Device
#COMMENT: Gets the current state of a pointer device relative to @window. As a slave
device’s coordinates are those of its master pointer, this
function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them. See gdk_device_grab().
#NAME: threads_add_timeout_full
#PARENT: Gdk.threads_add_timeout_full
#COMMENT: the ID (greater than 0) of the event source.
#NAME: EVENT_STOP
#PARENT: Gdk
#COMMENT: Use this macro as the return value for stopping the propagation of
an event handler.
#NAME: top_right_corner
#PARENT: Gdk.CursorType
#COMMENT: ![](top_right_corner.png)
#NAME: display
#PARENT: Gdk.Display.has_pending.gboolean
#COMMENT: a #GdkDisplay
#NAME: only_if_exists
#PARENT: Gdk.Atom.intern.Atom
#COMMENT: if %TRUE, GDK is allowed to not create a new atom, but
  just return %GDK_NONE if the requested atom doesn’t already
  exists. Currently, the flag is ignored, since checking the
  existance of an atom is as expensive as creating it.
#NAME: supports_shapes
#PARENT: Gdk.Display
#COMMENT: Returns %TRUE if gdk_window_shape_combine_mask() can
be used to create shaped windows on @display.
#NAME: sb_down_arrow
#PARENT: Gdk.CursorType
#COMMENT: ![](sb_down_arrow.png)
#NAME: get_rgba_visual
#PARENT: Gdk.Screen.get_rgba_visual
#COMMENT: a visual to use for windows
    with an alpha channel or %NULL if the capability is not
    available.
#NAME: dnd
#PARENT: Gdk.WindowTypeHint
#COMMENT: A window that is used to implement a DND cursor.
#NAME: WindowAttr
#PARENT: Gdk
#COMMENT: Attributes to use for a newly-created window.
#NAME: get_resolution
#PARENT: Gdk.Screen
#COMMENT: Gets the resolution for font handling on the screen; see
gdk_screen_set_resolution() for full details.
#NAME: lr_angle
#PARENT: Gdk.CursorType
#COMMENT: ![](lr_angle.png)
#NAME: create_similar_image_surface
#PARENT: Gdk.Window.create_similar_image_surface
#COMMENT: a pointer to the newly allocated surface. The caller
owns the surface and should call cairo_surface_destroy() when done
with it.

This function always returns a valid pointer, but it will return a
pointer to a “nil” surface if @other is already in an error state
or any other error occurs.
#NAME: mod3_mask
#PARENT: Gdk.ModifierType
#COMMENT: the sixth modifier key (it depends on the modifier
 mapping of the X server which key is interpreted as this modifier).
#NAME: get_position
#PARENT: Gdk.Window
#COMMENT: Obtains the position of the window as reported in the
most-recently-processed #GdkEventConfigure. Contrast with
gdk_window_get_geometry() which queries the X server for the
current window position, regardless of which events have been
received or processed.

The position coordinates are relative to the window’s parent window.
#NAME: get_composited
#PARENT: Gdk.Window.get_composited
#COMMENT: %TRUE if the window is composited.
#NAME: ask
#PARENT: Gdk.DragAction
#COMMENT: Ask the user what to do with the data.
#NAME: property_delete
#PARENT: Gdk
#COMMENT: Deletes a property from a window.
#NAME: device
#PARENT: Gdk.DeviceManager.device-changed.none
#COMMENT: the #GdkDevice that changed.
#NAME: get_monitor_plug_name
#PARENT: Gdk.Screen.get_monitor_plug_name
#COMMENT: a newly-allocated string containing the name
  of the monitor, or %NULL if the name cannot be determined
#NAME: modal
#PARENT: Gdk.Window.set_modal_hint.none
#COMMENT: %TRUE if the window is modal, %FALSE otherwise.
#NAME: wc
#PARENT: Gdk.unicode_to_keyval.guint
#COMMENT: a ISO10646 encoded character
#NAME: device-added
#PARENT: Gdk.DeviceManager
#COMMENT: The ::device-added signal is emitted either when a new master
pointer is created, or when a slave (Hardware) input device
is plugged in.
#NAME: screen
#PARENT: Gdk.Screen.get_system_visual.Visual
#COMMENT: a #GdkScreen.
#NAME: get_display
#PARENT: Gdk.GLContext.get_display
#COMMENT: a #GdkDisplay or %NULL
#NAME: set_background_pattern
#PARENT: Gdk.Window
#COMMENT: Sets the background of @window.

A background of %NULL means that the window will inherit its
background from its parent window.

The windowing system will normally fill a window with its background
when the window is obscured then exposed.
#NAME: get_surface
#PARENT: Gdk.Cursor
#COMMENT: Returns a cairo image surface with the image used to display the cursor.

Note that depending on the capabilities of the windowing system and
on the cursor, GDK may not be able to obtain the image data. In this
case, %NULL is returned.
#NAME: color_parse
#PARENT: Gdk
#COMMENT: Parses a textual specification of a color and fill in the
@red, @green, and @blue fields of a #GdkColor.

The string can either one of a large set of standard names
(taken from the X11 `rgb.txt` file), or it can be a hexadecimal
value in the form “\#rgb” “\#rrggbb”, “\#rrrgggbbb” or
“\#rrrrggggbbbb” where “r”, “g” and “b” are hex digits of
the red, green, and blue components of the color, respectively.
(White in the four forms is “\#fff”, “\#ffffff”, “\#fffffffff”
and “\#ffffffffffff”).
#NAME: target
#PARENT: Gdk.selection_send_notify_for_display.none
#COMMENT: target that was selected
#NAME: to_string
#PARENT: Gdk.Color.to_string
#COMMENT: a newly-allocated text string
#NAME: get_associated_device
#PARENT: Gdk.Device.get_associated_device
#COMMENT: The associated device, or
  %NULL
#NAME: time_
#PARENT: Gdk.drag_drop.none
#COMMENT: the timestamp for this operation
#NAME: selection_property_get
#PARENT: Gdk.selection_property_get
#COMMENT: the length of the retrieved data.
#NAME: get_toplevel
#PARENT: Gdk.Window.get_toplevel
#COMMENT: the toplevel window containing @window
#NAME: context
#PARENT: Gdk.DragContext.get_source_window.Window
#COMMENT: a #GdkDragContext
#NAME: depths
#PARENT: Gdk.query_depths.none
#COMMENT: return
    location for available depths
#NAME: data
#PARENT: Gdk.selection_property_get.gint
#COMMENT: location to store a pointer to the retrieved data.
       If the retrieval failed, %NULL we be stored here, otherwise, it
       will be non-%NULL and the returned data should be freed with g_free()
       when you are finished using it. The length of the
       allocated memory is one more than the length
       of the returned data, and the final byte will always
       be zero, to ensure nul-termination of strings
#NAME: get_active_window
#PARENT: Gdk.Screen
#COMMENT: Returns the screen’s currently active window.

On X11, this is done by inspecting the _NET_ACTIVE_WINDOW property
on the root window, as described in the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).
If there is no currently currently active
window, or the window manager does not support the
_NET_ACTIVE_WINDOW hint, this function returns %NULL.

On other platforms, this function may return %NULL, depending on whether
it is implementable on that platform.

The returned window should be unrefed using g_object_unref() when
no longer needed.
#NAME: test_simulate_key
#PARENT: Gdk.test_simulate_key
#COMMENT: whether all actions necessary for a key event simulation
    were carried out successfully
#NAME: get_display
#PARENT: Gdk.Screen.get_display
#COMMENT: the display to which @screen belongs
#NAME: type_hint
#PARENT: Gdk.WindowAttr
#COMMENT: a hint of the function of the window
#NAME: pixbuf_get_from_window
#PARENT: Gdk
#COMMENT: Transfers image data from a #GdkWindow and converts it to an RGB(A)
representation inside a #GdkPixbuf. In other words, copies
image data from a server-side drawable to a client-side RGB(A) buffer.
This allows you to efficiently read individual pixels on the client side.

This function will create an RGB pixbuf with 8 bits per channel with
the same size specified by the @width and @height arguments. The pixbuf
will contain an alpha channel if the @window contains one.

If the window is off the screen, then there is no image data in the
obscured/offscreen regions to be placed in the pixbuf. The contents of
portions of the pixbuf corresponding to the offscreen region are undefined.

If the window you’re obtaining data from is partially obscured by
other windows, then the contents of the pixbuf areas corresponding
to the obscured regions are undefined.

If the window is not mapped (typically because it’s iconified/minimized
or not on the current workspace), then %NULL will be returned.

If memory can’t be allocated for the return value, %NULL will be returned
instead.

(In short, there are several ways this function can fail, and if it fails
 it returns %NULL; so check the return value.)
#NAME: new
#PARENT: Gdk.Cursor
#COMMENT: Creates a new cursor from the set of builtin cursors for the default display.
See gdk_cursor_new_for_display().

To make the cursor invisible, use %GDK_BLANK_CURSOR.
#NAME: get_type_hint
#PARENT: Gdk.Window
#COMMENT: This function returns the type hint set for a window.
#NAME: hash
#PARENT: Gdk.RGBA
#COMMENT: A hash function suitable for using for a hash
table that stores #GdkRGBAs.
#NAME: user_data
#PARENT: Gdk.Window.invalidate_maybe_recurse.none
#COMMENT: data passed to @child_func
#NAME: get_update_area
#PARENT: Gdk.Window.get_update_area
#COMMENT: the update area for @window
#NAME: time_
#PARENT: Gdk.selection_owner_set_for_display.gboolean
#COMMENT: timestamp to use when setting the selection
        If this is older than the timestamp given last time the owner was
        set for the given selection, the request will be ignored
#NAME: unicode_to_keyval
#PARENT: Gdk.unicode_to_keyval
#COMMENT: the corresponding GDK key symbol, if one exists.
              or, if there is no corresponding symbol,
              wc | 0x01000000
#NAME: get
#PARENT: Gdk.Event.get
#COMMENT: the next #GdkEvent to be processed, or %NULL
if no events are pending. The returned #GdkEvent should be freed
with gdk_event_free().
#NAME: property
#PARENT: Gdk.Event
#COMMENT: a #GdkEventProperty
#NAME: get_click_count
#PARENT: Gdk.Event.get_click_count
#COMMENT: %TRUE if the event delivered a click count
#NAME: get_visual_type
#PARENT: Gdk.Visual.get_visual_type
#COMMENT: A #GdkVisualType stating the type of @visual.
#NAME: _get_center
#PARENT: Gdk.Event._get_center
#COMMENT: %TRUE if the center could be calculated.
#NAME: set_timestamp
#PARENT: Gdk.AppLaunchContext
#COMMENT: Sets the timestamp of @context. The timestamp should ideally
be taken from the event that triggered the launch.

Window managers can use this information to avoid moving the
focus to the newly launched application when the user is busy
typing in another window. This is also known as 'focus stealing
prevention'.
#NAME: set_screen
#PARENT: Gdk.Event
#COMMENT: Sets the screen for @event to @screen. The event must
have been allocated by GTK+, for instance, by
gdk_event_copy().
#NAME: window
#PARENT: Gdk.Window.get_toplevel.Window
#COMMENT: a #GdkWindow
#NAME: value
#PARENT: Gdk.Screen.get_setting.gboolean
#COMMENT: location to store the value of the setting
#NAME: Color
#PARENT: Gdk
#COMMENT: A #GdkColor is used to describe a color,
similar to the XColor struct used in the X11 drawing API.
#NAME: get_button
#PARENT: Gdk.Event
#COMMENT: Extract the button number from an event.
#NAME: maximized
#PARENT: Gdk.WindowState
#COMMENT: the window is maximized.
#NAME: role
#PARENT: Gdk.Window.set_role.none
#COMMENT: a string indicating its role
#NAME: event
#PARENT: Gdk.FilterFunc.FilterReturn
#COMMENT: the GDK event to which the X event will be translated.
#NAME: x
#PARENT: Gdk.Window.get_root_origin.none
#COMMENT: return location for X position of window frame
#NAME: y
#PARENT: Gdk.Window.get_root_origin.none
#COMMENT: return location for Y position of window frame
#NAME: depth
#PARENT: Gdk.Visual.get_best_with_both.Visual
#COMMENT: a bit depth
#NAME: window
#PARENT: Gdk.Window.set_focus_on_map.none
#COMMENT: a toplevel #GdkWindow
#NAME: get_axis_value
#PARENT: Gdk.Device.get_axis_value
#COMMENT: %TRUE if the given axis use was found, otherwise %FALSE.
#NAME: open_display
#PARENT: Gdk.DisplayManager.open_display
#COMMENT: a #GdkDisplay, or %NULL if the
    display could not be opened
#NAME: new_from_name
#PARENT: Gdk.Cursor.new_from_name
#COMMENT: a new #GdkCursor, or %NULL if there is no
  cursor with the given name
#NAME: event
#PARENT: Gdk.Event.get_scroll_direction.gboolean
#COMMENT: a #GdkEvent
#NAME: title
#PARENT: Gdk.WMDecoration
#COMMENT: a titlebar should be placed above the window.
#NAME: spec
#PARENT: Gdk.RGBA.parse.gboolean
#COMMENT: the string specifying the color
#NAME: drop_reply
#PARENT: Gdk
#COMMENT: Accepts or rejects a drop.

This function is called by the drag destination in response
to a drop initiated by the drag source.
#NAME: event1
#PARENT: Gdk.events_get_distance.gboolean
#COMMENT: first #GdkEvent
#NAME: event2
#PARENT: Gdk.events_get_distance.gboolean
#COMMENT: second #GdkEvent
#NAME: group
#PARENT: Gdk.Keymap.translate_keyboard_state.gboolean
#COMMENT: active keyboard group
#NAME: new_from_pixbuf
#PARENT: Gdk.Cursor.new_from_pixbuf
#COMMENT: a new #GdkCursor.
#NAME: show_window_menu
#PARENT: Gdk.Window.show_window_menu
#COMMENT: %TRUE if the window menu was shown and %FALSE otherwise.
#NAME: get_frame_counter
#PARENT: Gdk.FrameClock.get_frame_counter
#COMMENT: inside frame processing, the value of the frame counter
 for the current frame. Outside of frame processing, the frame
  counter for the last frame.
#NAME: add_filter
#PARENT: Gdk.Window
#COMMENT: Adds an event filter to @window, allowing you to intercept events
before they reach GDK. This is a low-level operation and makes it
easy to break GDK and/or GTK+, so you have to know what you're
doing. Pass %NULL for @window to get all events for all windows,
instead of events for a specific window.

If you are interested in X GenericEvents, bear in mind that
XGetEventData() has been already called on the event, and
XFreeEventData() must not be called within @function.
#NAME: close
#PARENT: Gdk.WMFunction
#COMMENT: the window should be closable.
#NAME: set_desktop
#PARENT: Gdk.AppLaunchContext
#COMMENT: Sets the workspace on which applications will be launched when
using this context when running under a window manager that
supports multiple workspaces, as described in the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).

When the workspace is not specified or @desktop is set to -1,
it is up to the window manager to pick one, typically it will
be the current workspace.
#NAME: get_name
#PARENT: Gdk.Display
#COMMENT: Gets the name of the display.
#NAME: list_targets
#PARENT: Gdk.DragContext.list_targets
#COMMENT: a #GList of targets
#NAME: leave_notify
#PARENT: Gdk.EventType
#COMMENT: the pointer has left the window.
#NAME: middlebutton
#PARENT: Gdk.CursorType
#COMMENT: ![](middlebutton.png)
#NAME: get_window_stack
#PARENT: Gdk.Screen
#COMMENT: Returns a #GList of #GdkWindows representing the current
window stack.

On X11, this is done by inspecting the _NET_CLIENT_LIST_STACKING
property on the root window, as described in the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec).
If the window manager does not support the
_NET_CLIENT_LIST_STACKING hint, this function returns %NULL.

On other platforms, this function may return %NULL, depending on whether
it is implementable on that platform.

The returned list is newly allocated and owns references to the
windows it contains, so it should be freed using g_list_free() and
its windows unrefed using g_object_unref() when no longer needed.
#NAME: get_window_type
#PARENT: Gdk.Window.get_window_type
#COMMENT: type of window
#NAME: cursor
#PARENT: Gdk.WindowAttributesType
#COMMENT: Honor the cursor field
#NAME: window
#PARENT: Gdk.Window.get_position.none
#COMMENT: a #GdkWindow
#NAME: event_get
#PARENT: Gdk.event_get
#COMMENT: the next #GdkEvent to be processed, or %NULL
if no events are pending. The returned #GdkEvent should be freed
with gdk_event_free().
#NAME: cairo_surface_create_from_pixbuf
#PARENT: Gdk.cairo_surface_create_from_pixbuf
#COMMENT: a new cairo surface, must be freed with cairo_surface_destroy()
#NAME: get_height_mm
#PARENT: Gdk.Screen.get_height_mm
#COMMENT: the heigth of @screen in millimeters.
#NAME: EventMotion
#PARENT: Gdk
#COMMENT: Generated when the pointer moves.
#NAME: wmclass
#PARENT: Gdk.WindowAttributesType
#COMMENT: Honor the wmclass_class and wmclass_name fields
#NAME: drag_begin_for_device
#PARENT: Gdk.drag_begin_for_device
#COMMENT: a newly created #GdkDragContext
#NAME: display
#PARENT: Gdk.Display.get_name.utf8
#COMMENT: a #GdkDisplay
#NAME: create_similar_image_surface
#PARENT: Gdk.Window
#COMMENT: Create a new image surface that is efficient to draw on the
given @window.

Initially the surface contents are all 0 (transparent if contents
have transparency, black otherwise.)
#NAME: left_tee
#PARENT: Gdk.CursorType
#COMMENT: ![](left_tee.png)
#NAME: is_input_only
#PARENT: Gdk.Window.is_input_only
#COMMENT: %TRUE if @window is input only
#NAME: ytilt
#PARENT: Gdk.AxisUse
#COMMENT: the axis is used for y tilt information.
#NAME: set_screen
#PARENT: Gdk.AppLaunchContext
#COMMENT: Sets the screen on which applications will be launched when
using this context. See also gdk_app_launch_context_set_display().

If both @screen and @display are set, the @screen takes priority.
If neither @screen or @display are set, the default screen and
display are used.
#NAME: rectangle_intersect
#PARENT: Gdk
#COMMENT: Calculates the intersection of two rectangles. It is allowed for
@dest to be the same as either @src1 or @src2. If the rectangles
do not intersect, @dest’s width and height is set to 0 and its x
and y values are undefined. If you are only interested in whether
the rectangles intersect, but not in the intersecting area itself,
pass %NULL for @dest.
#NAME: axes
#PARENT: Gdk.TimeCoord
#COMMENT: the values of the device’s axes.
#NAME: get_source_events
#PARENT: Gdk.Window.get_source_events
#COMMENT: source event mask for @window
#NAME: window
#PARENT: Gdk.Window.get_support_multidevice.gboolean
#COMMENT: a #GdkWindow.
#NAME: time_
#PARENT: Gdk.Display.pointer_ungrab.none
#COMMENT: a timestap (e.g. %GDK_CURRENT_TIME).
#NAME: selection
#PARENT: Gdk.selection_owner_set.gboolean
#COMMENT: an atom identifying a selection.
#NAME: pointer_motion_hint_mask
#PARENT: Gdk.EventMask
#COMMENT: deprecated. see the explanation above
#NAME: type
#PARENT: Gdk.EventScroll
#COMMENT: the type of the event (%GDK_SCROLL).
#NAME: screen
#PARENT: Gdk.Screen.get_root_window.Window
#COMMENT: a #GdkScreen
#NAME: rectangle
#PARENT: Gdk.cairo_rectangle.none
#COMMENT: a #GdkRectangle
#NAME: DisplayManager
#PARENT: Gdk
#COMMENT: The purpose of the #GdkDisplayManager singleton object is to offer
notification when displays appear or disappear or the default display
changes.

You can use gdk_display_manager_get() to obtain the #GdkDisplayManager
singleton, but that should be rarely necessary. Typically, initializing
GTK+ opens a display that you can work with without ever accessing the
#GdkDisplayManager.

The GDK library can be built with support for multiple backends.
The #GdkDisplayManager object determines which backend is used
at runtime.

When writing backend-specific code that is supposed to work with
multiple GDK backends, you have to consider both compile time and
runtime. At compile time, use the #GDK_WINDOWING_X11, #GDK_WINDOWING_WIN32
macros, etc. to find out which backends are present in the GDK library
you are building your application against. At runtime, use type-check
macros like GDK_IS_X11_DISPLAY() to find out which backend is in use:

## Backend-specific code ## {#backend-specific}

|[<!-- language="C" -->
#ifdef GDK_WINDOWING_X11
  if (GDK_IS_X11_DISPLAY (display))
    {
      // make X11-specific calls here
    }
  else
#endif
#ifdef GDK_WINDOWING_QUARTZ
  if (GDK_IS_QUARTZ_DISPLAY (display))
    {
      // make Quartz-specific calls here
    }
  else
#endif
  g_error ("Unsupported GDK backend");
]|
#NAME: get_red_pixel_details
#PARENT: Gdk.Visual
#COMMENT: Obtains values that are needed to calculate red pixel values in TrueColor
and DirectColor. The “mask” is the significant bits within the pixel.
The “shift” is the number of bits left we must shift a primary for it
to be in position (according to the "mask"). Finally, "precision" refers
to how much precision the pixel value contains for a particular primary.
#NAME: window
#PARENT: Gdk.Window.is_shaped.gboolean
#COMMENT: a toplevel #GdkWindow
#NAME: window
#PARENT: Gdk.Window.unfullscreen.none
#COMMENT: a toplevel #GdkWindow
#NAME: shift
#PARENT: Gdk.Visual.get_green_pixel_details.none
#COMMENT: A pointer to a #gint to be filled in, or %NULL
#NAME: add_option_entries_libgtk_only
#PARENT: Gdk
#COMMENT: Appends gdk option entries to the passed in option group. This is
not public API and must not be used by applications.
#NAME: window
#PARENT: Gdk.Window.set_device_cursor.none
#COMMENT: a #GdkWindow
#NAME: functions
#PARENT: Gdk.Window.set_functions.none
#COMMENT: bitmask of operations to allow on @window
#NAME: device
#PARENT: Gdk.Device.get_display.Display
#COMMENT: a #GdkDevice
#NAME: screen
#PARENT: Gdk.Screen.get_width.gint
#COMMENT: a #GdkScreen
#NAME: set_icon_list
#PARENT: Gdk.Window
#COMMENT: Sets a list of icons for the window. One of these will be used
to represent the window when it has been iconified. The icon is
usually shown in an icon box or some sort of task bar. Which icon
size is shown depends on the window manager. The window manager
can scale the icon  but setting several size icons can give better
image quality since the window manager may only need to scale the
icon by a small amount or not at all.
#NAME: create-surface
#PARENT: Gdk.Window.create-surface
#COMMENT: the newly created #cairo_surface_t for the offscreen window
#NAME: events_pending
#PARENT: Gdk.events_pending
#COMMENT: %TRUE if any events are pending.
#NAME: window
#PARENT: Gdk.property_change.none
#COMMENT: a #GdkWindow
#NAME: src_x
#PARENT: Gdk.pixbuf_get_from_window.GdkPixbuf.Pixbuf
#COMMENT: Source X coordinate within @window
#NAME: level
#PARENT: Gdk.Keymap.translate_keyboard_state.gboolean
#COMMENT: return location for level, or %NULL
#NAME: diamond_cross
#PARENT: Gdk.CursorType
#COMMENT: ![](diamond_cross.png)
#NAME: src_y
#PARENT: Gdk.pixbuf_get_from_window.GdkPixbuf.Pixbuf
#COMMENT: Source Y coordinate within @window
#NAME: src1
#PARENT: Gdk.rectangle_intersect.gboolean
#COMMENT: a #GdkRectangle
#NAME: copy
#PARENT: Gdk.Color
#COMMENT: Makes a copy of a #GdkColor.

The result must be freed using gdk_color_free().
#NAME: src2
#PARENT: Gdk.rectangle_intersect.gboolean
#COMMENT: a #GdkRectangle
#NAME: get_best_depth
#PARENT: Gdk.Visual
#COMMENT: Get the best available depth for the default GDK screen.  “Best”
means “largest,” i.e. 32 preferred over 24 preferred over 8 bits
per pixel.
#NAME: keyval_to_lower
#PARENT: Gdk
#COMMENT: Converts a key value to lower case, if applicable.
#NAME: BUTTON_MIDDLE
#PARENT: Gdk
#COMMENT: The middle button.
#NAME: window
#PARENT: Gdk.Window.move_resize.none
#COMMENT: a #GdkWindow
#NAME: cursor_type
#PARENT: Gdk.Cursor.new_for_display.Cursor
#COMMENT: cursor to create
#NAME: window
#PARENT: Gdk.Window.ensure_native.gboolean
#COMMENT: a #GdkWindow
#NAME: width
#PARENT: Gdk.Window.constrain_size.none
#COMMENT: desired width of window
#NAME: get_device_position_double
#PARENT: Gdk.Window.get_device_position_double
#COMMENT: The window underneath @device
(as with gdk_device_get_window_at_position()), or %NULL if the
window is not known to GDK.
#NAME: frame_clock
#PARENT: Gdk.FrameClock.get_current_timings.FrameTimings
#COMMENT: a #GdkFrameClock
#NAME: primary_accelerator
#PARENT: Gdk.ModifierIntent
#COMMENT: the primary modifier used to invoke
 menu accelerators.
#NAME: get_monitor_scale_factor
#PARENT: Gdk.Screen.get_monitor_scale_factor
#COMMENT: the scale factor
#NAME: window
#PARENT: Gdk.Window.set_type_hint.none
#COMMENT: A toplevel #GdkWindow
#NAME: copy
#PARENT: Gdk.RGBA.copy
#COMMENT: A newly allocated #GdkRGBA, with the same contents as @rgba
#NAME: question_arrow
#PARENT: Gdk.CursorType
#COMMENT: ![](question_arrow.png)
#NAME: leave_fn
#PARENT: Gdk.threads_set_lock_functions.none
#COMMENT: function called to release the guard
#NAME: data
#PARENT: Gdk.threads_add_idle.guint
#COMMENT: data to pass to @function
#NAME: new
#PARENT: Gdk.Event
#COMMENT: Creates a new event of the given type. All fields are set to 0.
#NAME: have_bidi_layouts
#PARENT: Gdk.Keymap.have_bidi_layouts
#COMMENT: %TRUE if there are layouts in both directions, %FALSE otherwise
#NAME: get_toplevel
#PARENT: Gdk.Window
#COMMENT: Gets the toplevel window that’s an ancestor of @window.

Any window type but %GDK_WINDOW_CHILD is considered a
toplevel window, as is a %GDK_WINDOW_CHILD window that
has a root window as parent.

Note that you should use gdk_window_get_effective_toplevel() when
you want to get to a window’s toplevel as seen on screen, because
gdk_window_get_toplevel() will most likely not do what you expect
if there are offscreen windows in the hierarchy.
#NAME: new_width
#PARENT: Gdk.Window.constrain_size.none
#COMMENT: location to store resulting width
#NAME: get_blue_pixel_details
#PARENT: Gdk.Visual
#COMMENT: Obtains values that are needed to calculate blue pixel values in TrueColor
and DirectColor. The “mask” is the significant bits within the pixel.
The “shift” is the number of bits left we must shift a primary for it
to be in position (according to the "mask"). Finally, "precision" refers
to how much precision the pixel value contains for a particular primary.
#NAME: min_aspect
#PARENT: Gdk.Geometry
#COMMENT: minimum width/height ratio
#NAME: get_geometry
#PARENT: Gdk.Window
#COMMENT: Any of the return location arguments to this function may be %NULL,
if you aren’t interested in getting the value of that field.

The X and Y coordinates returned are relative to the parent window
of @window, which for toplevels usually means relative to the
window decorations (titlebar, etc.) rather than relative to the
root window (screen-size background window).

On the X11 platform, the geometry is obtained from the X server,
so reflects the latest position of @window; this may be out-of-sync
with the position of @window delivered in the most-recently-processed
#GdkEventConfigure. gdk_window_get_position() in contrast gets the
position from the most recent configure event.

Note: If @window is not a toplevel, it is much better
to call gdk_window_get_position(), gdk_window_get_width() and
gdk_window_get_height() instead, because it avoids the roundtrip to
the X server and because these functions support the full 32-bit
coordinate space, whereas gdk_window_get_geometry() is restricted to
the 16-bit coordinates of X11.
#NAME: key_pressrelease
#PARENT: Gdk.test_simulate_key.gboolean
#COMMENT: either %GDK_KEY_PRESS or %GDK_KEY_RELEASE
#NAME: keymap
#PARENT: Gdk.Keymap.get_num_lock_state.gboolean
#COMMENT: a #GdkKeymap
#NAME: notify_startup_complete
#PARENT: Gdk
#COMMENT: Indicates to the GUI environment that the application has finished
loading. If the applications opens windows, this function is
normally called after opening the application’s initial set of
windows.

GTK+ will call this function automatically after opening the first
#GtkWindow unless gtk_window_set_auto_startup_notification() is called
to disable that feature.
#NAME: timestamp
#PARENT: Gdk.Window.begin_resize_drag_for_device.none
#COMMENT: timestamp of mouse click that began the drag (use gdk_event_get_time())
#NAME: arrow
#PARENT: Gdk.CursorType
#COMMENT: ![](arrow.png)
#NAME: blue
#PARENT: Gdk.Color
#COMMENT: The blue component of the color
#NAME: get_presentation_time
#PARENT: Gdk.FrameTimings.get_presentation_time
#COMMENT: the time the frame was displayed to the user, in the
 timescale of g_get_monotonic_time(), or 0 if no presentation
 time is available. See gdk_frame_timings_get_complete()
#NAME: FrameTimings
#PARENT: Gdk
#COMMENT: A #GdkFrameTimings object holds timing information for a single frame
of the application’s displays. To retrieve #GdkFrameTimings objects,
use gdk_frame_clock_get_timings() or gdk_frame_clock_get_current_timings().
The information in #GdkFrameTimings is useful for precise synchronization
of video with the event or audio streams, and for measuring
quality metrics for the application’s display, such as latency and jitter.
#NAME: get_event_sequence
#PARENT: Gdk.Event
#COMMENT: If @event if of type %GDK_TOUCH_BEGIN, %GDK_TOUCH_UPDATE,
%GDK_TOUCH_END or %GDK_TOUCH_CANCEL, returns the #GdkEventSequence
to which the event belongs. Otherwise, return %NULL.
#NAME: get_source
#PARENT: Gdk.Device
#COMMENT: Determines the type of the device.
#NAME: display
#PARENT: Gdk.Display.list_devices.Device
#COMMENT: a #GdkDisplay
#NAME: set_focus_on_map
#PARENT: Gdk.Window
#COMMENT: Setting @focus_on_map to %FALSE hints the desktop environment that the
window doesn’t want to receive input focus when it is mapped.
focus_on_map should be turned off for windows that aren’t triggered
interactively (such as popups from network activity).

On X, it is the responsibility of the window manager to interpret
this hint. Window managers following the freedesktop.org window
manager extension specification should respect it.
#NAME: error_trap_pop
#PARENT: Gdk
#COMMENT: Removes an error trap pushed with gdk_error_trap_push().
May block until an error has been definitively received
or not received from the X server. gdk_error_trap_pop_ignored()
is preferred if you don’t need to know whether an error
occurred, because it never has to block. If you don't
need the return value of gdk_error_trap_pop(), use
gdk_error_trap_pop_ignored().

Prior to GDK 3.0, this function would not automatically
sync for you, so you had to gdk_flush() if your last
call to Xlib was not a blocking round trip.
#NAME: window
#PARENT: Gdk.GLContext
#COMMENT: The #GdkWindow the gl context is bound to.
#NAME: get_shared_context
#PARENT: Gdk.GLContext
#COMMENT: Retrieves the #GdkGLContext that this @context share data with.
#NAME: subwindow
#PARENT: Gdk.EventCrossing
#COMMENT: the window that was entered or left.
#NAME: get_width
#PARENT: Gdk.Window.get_width
#COMMENT: The width of @window
#NAME: changed
#PARENT: Gdk.SettingAction
#COMMENT: a setting was changed.
#NAME: register_dnd
#PARENT: Gdk.Window
#COMMENT: Registers a window as a potential drop destination.
#NAME: rectangle_union
#PARENT: Gdk
#COMMENT: Calculates the union of two rectangles.
The union of rectangles @src1 and @src2 is the smallest rectangle which
includes both @src1 and @src2 within it.
It is allowed for @dest to be the same as either @src1 or @src2.
#NAME: open_display
#PARENT: Gdk.DisplayManager
#COMMENT: Opens a display.
#NAME: get_key
#PARENT: Gdk.Device.get_key
#COMMENT: %TRUE if keyval is set for @index.
#NAME: notify_startup_complete
#PARENT: Gdk.Display
#COMMENT: Indicates to the GUI environment that the application has
finished loading, using a given identifier.

GTK+ will call this function automatically for #GtkWindow
with custom startup-notification identifier unless
gtk_window_set_auto_startup_notification() is called to
disable that feature.
#NAME: x
#PARENT: Gdk.Event._get_center.gboolean
#COMMENT: return location for the X coordinate of the center
#NAME: list_targets
#PARENT: Gdk.DragContext
#COMMENT: Retrieves the list of targets of the context.
#NAME: y
#PARENT: Gdk.Event._get_center.gboolean
#COMMENT: return location for the Y coordinate of the center
#NAME: keyval_is_lower
#PARENT: Gdk.keyval_is_lower
#COMMENT: %TRUE if @keyval is in lower case, or if @keyval is not
  subject to case conversion.
#NAME: modifiers
#PARENT: Gdk.Device.get_key.gboolean
#COMMENT: return value for modifiers.
#NAME: hash
#PARENT: Gdk.Color.hash
#COMMENT: The hash function applied to @color
#NAME: mask
#PARENT: Gdk.Visual.get_blue_pixel_details.none
#COMMENT: A pointer to a #guint32 to be filled in, or %NULL
#NAME: keyval
#PARENT: Gdk.Keymap.get_entries_for_keyval.gboolean
#COMMENT: a keyval, such as %GDK_KEY_a, %GDK_KEY_Up, %GDK_KEY_Return, etc.
#NAME: button3_mask
#PARENT: Gdk.ModifierType
#COMMENT: the third mouse button.
#NAME: offset
#PARENT: Gdk.property_get.gboolean
#COMMENT: the offset into the property at which to begin
  retrieving data, in 4 byte units.
#NAME: window
#PARENT: Gdk.Window.get_scale_factor.gint
#COMMENT: window to get scale factor for
#NAME: base_height
#PARENT: Gdk.Geometry
#COMMENT: allowed window widths are @base_height + @height_inc * N where
 N is any integer (-1 allowed with #GtkWindow)
#NAME: WindowChildFunc
#PARENT: Gdk.WindowChildFunc
#COMMENT: %TRUE to invalidate @window recursively
#NAME: root_x
#PARENT: Gdk.Window.begin_move_drag.none
#COMMENT: root window X coordinate of mouse click that began the drag
#NAME: cursor
#PARENT: Gdk.pointer_grab.GrabStatus
#COMMENT: the cursor to display while the grab is active. If this is %NULL then
         the normal cursors are used for @window and its descendants, and the cursor
         for @window is used for all other windows.
#NAME: root_y
#PARENT: Gdk.Window.begin_move_drag.none
#COMMENT: root window Y coordinate of mouse click that began the drag
#NAME: user_data
#PARENT: Gdk.WindowChildFunc.gboolean
#COMMENT: user data
#NAME: new
#PARENT: Gdk.Cursor.new
#COMMENT: a new #GdkCursor
#NAME: context
#PARENT: Gdk.drag_drop.none
#COMMENT: a #GdkDragContext
#NAME: device
#PARENT: Gdk.drag_begin_for_device.DragContext
#COMMENT: the device that controls this drag
#NAME: screen_num
#PARENT: Gdk.Display.get_screen.Screen
#COMMENT: the screen number
#NAME: triple_button_press
#PARENT: Gdk.EventType
#COMMENT: alias for %GDK_3BUTTON_PRESS, added in 3.6.
#NAME: atom_intern_static_string
#PARENT: Gdk
#COMMENT: Finds or creates an atom corresponding to a given string.

Note that this function is identical to gdk_atom_intern() except
that if a new #GdkAtom is created the string itself is used rather
than a copy. This saves memory, but can only be used if the string
will always exist. It can be used with statically
allocated strings in the main program, but not with statically
allocated memory in dynamically loaded modules, if you expect to
ever unload the module again (e.g. do not use this function in
GTK+ theme engines).
#NAME: request_phase
#PARENT: Gdk.FrameClock
#COMMENT: Asks the frame clock to run a particular phase. The signal
corresponding the requested phase will be emitted the next
time the frame clock processes. Multiple calls to
gdk_frame_clock_request_phase() will be combined together
and only one frame processed. If you are displaying animated
content and want to continually request the
%GDK_FRAME_CLOCK_PHASE_UPDATE phase for a period of time,
you should use gdk_frame_clock_begin_updating() instead, since
this allows GTK+ to adjust system parameters to get maximally
smooth animations.
#NAME: screen
#PARENT: Gdk.Screen.is_composited.gboolean
#COMMENT: a #GdkScreen
#NAME: Visual
#PARENT: Gdk
#COMMENT: A #GdkVisual contains information about
a particular visual.
#NAME: context
#PARENT: Gdk.drag_get_selection.Atom
#COMMENT: a #GdkDragContext.
#NAME: set_debug_updates
#PARENT: Gdk.Window
#COMMENT: With update debugging enabled, calls to
gdk_window_invalidate_region() clear the invalidated region of the
screen to a noticeable color, and GDK pauses for a short time
before sending exposes to windows during
gdk_window_process_updates().  The net effect is that you can see
the invalid region for each window and watch redraws as they
occur. This allows you to diagnose inefficiencies in your application.

In essence, because the GDK rendering model prevents all flicker,
if you are redrawing the same region 400 times you may never
notice, aside from noticing a speed problem. Enabling update
debugging causes GTK to flicker slowly and noticeably, so you can
see exactly what’s being redrawn when, in what order.

The --gtk-debug=updates command line option passed to GTK+ programs
enables this debug option at application startup time. That's
usually more useful than calling gdk_window_set_debug_updates()
yourself, though you might want to use this function to enable
updates sometime after application startup time.
#NAME: send_event
#PARENT: Gdk.EventProximity
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: window
#PARENT: Gdk.Window.show_window_menu.gboolean
#COMMENT: a #GdkWindow
#NAME: BUTTON_SECONDARY
#PARENT: Gdk
#COMMENT: The secondary button. This is typically the right mouse button, or the
left button in a left-handed setup.
#NAME: set_font_options
#PARENT: Gdk.Screen
#COMMENT: Sets the default font options for the screen. These
options will be set on any #PangoContext’s newly created
with gdk_pango_context_get_for_screen(). Changing the
default set of font options does not affect contexts that
have already been created.
#NAME: shift_mask
#PARENT: Gdk.ModifierType
#COMMENT: the Shift key.
#NAME: type_hint
#PARENT: Gdk.WindowAttributesType
#COMMENT: Honor the type_hint field
#NAME: cr
#PARENT: Gdk.Window.mark_paint_from_clip.none
#COMMENT: a #cairo_t
#NAME: offscreen_x
#PARENT: Gdk.Window.to-embedder.none
#COMMENT: x coordinate in the offscreen window
#NAME: width
#PARENT: Gdk.Window.resize.none
#COMMENT: new width of the window
#NAME: offscreen_y
#PARENT: Gdk.Window.to-embedder.none
#COMMENT: y coordinate in the offscreen window
#NAME: screen
#PARENT: Gdk.Screen.get_monitor_at_window.gint
#COMMENT: a #GdkScreen.
#NAME: window
#PARENT: Gdk.Window.get_children_with_user_data.Window
#COMMENT: a #GdkWindow
#NAME: screen
#PARENT: Gdk.Screen.get_monitor_geometry.none
#COMMENT: a #GdkScreen
#NAME: display
#PARENT: Gdk.Display.get_maximal_cursor_size.none
#COMMENT: a #GdkDisplay
#NAME: height
#PARENT: Gdk.pixbuf_get_from_surface.GdkPixbuf.Pixbuf
#COMMENT: Height in pixels of region to get
#NAME: get_children_with_user_data
#PARENT: Gdk.Window
#COMMENT: Gets the list of children of @window known to GDK with a
particular @user_data set on it.

The returned list must be freed, but the elements in the
list need not be.

The list is returned in (relative) stacking order, i.e. the
lowest window is first.
#NAME: bottom_left_corner
#PARENT: Gdk.CursorType
#COMMENT: ![](bottom_left_corner.png)
#NAME: setting
#PARENT: Gdk.Event
#COMMENT: a #GdkEventSetting
#NAME: get_predicted_presentation_time
#PARENT: Gdk.FrameTimings.get_predicted_presentation_time
#COMMENT: The predicted time at which the frame will be presented,
 in the timescale of g_get_monotonic_time(), or 0 if no predicted
 presentation time is available.
#NAME: context
#PARENT: Gdk.GLContext.set_required_version.none
#COMMENT: a #GdkGLContext
#NAME: window
#PARENT: Gdk.Window.peek_children.Window
#COMMENT: a #GdkWindow
#NAME: embedder_x
#PARENT: Gdk.Window.to-embedder.none
#COMMENT: return location for the x
    coordinate in the embedder window
#NAME: grab_info_libgtk_only
#PARENT: Gdk.Device
#COMMENT: Determines information about the current keyboard grab.
This is not public API and must not be used by applications.
#NAME: rect
#PARENT: Gdk.Window.get_frame_extents.none
#COMMENT: rectangle to fill with bounding box of the window frame
#NAME: embedder_y
#PARENT: Gdk.Window.to-embedder.none
#COMMENT: return location for the y
    coordinate in the embedder window
#NAME: bogosity
#PARENT: Gdk.CursorType
#COMMENT: ![](bogosity.png)
#NAME: axes
#PARENT: Gdk.EventMotion
#COMMENT: @x, @y translated to the axes of @device, or %NULL if @device is
  the mouse.
#NAME: colora
#PARENT: Gdk.Color.equal.gboolean
#COMMENT: a #GdkColor
#NAME: remove_filter
#PARENT: Gdk.Window
#COMMENT: Remove a filter previously added with gdk_window_add_filter().
#NAME: init_check
#PARENT: Gdk
#COMMENT: Initializes the GDK library and connects to the windowing system,
returning %TRUE on success.

Any arguments used by GDK are removed from the array and @argc and @argv
are updated accordingly.

GTK+ initializes GDK in gtk_init() and so this function is not usually
needed by GTK+ applications.
#NAME: threads_add_timeout_seconds
#PARENT: Gdk.threads_add_timeout_seconds
#COMMENT: the ID (greater than 0) of the event source.
#NAME: event
#PARENT: Gdk.Event.copy.Event
#COMMENT: a #GdkEvent
#NAME: colorb
#PARENT: Gdk.Color.equal.gboolean
#COMMENT: another #GdkColor
#NAME: time
#PARENT: Gdk.EventCrossing
#COMMENT: the time of the event in milliseconds.
#NAME: is_error
#PARENT: Gdk.Display.closed.none
#COMMENT: %TRUE if the display was closed due to an error
#NAME: window
#PARENT: Gdk.Window.set_skip_taskbar_hint.none
#COMMENT: a toplevel #GdkWindow
#NAME: setting_get
#PARENT: Gdk.setting_get
#COMMENT: %TRUE if the setting existed and a value was stored
  in @value, %FALSE otherwise.
#NAME: window
#PARENT: Gdk.Window.get_user_data.none
#COMMENT: a #GdkWindow
#NAME: buffer_scale
#PARENT: Gdk.cairo_draw_from_gl.none
#COMMENT: The scale-factor that the @source buffer is allocated for
#NAME: gtk_grab
#PARENT: Gdk.CrossingMode
#COMMENT: crossing because a GTK+ grab is activated.
#NAME: composited
#PARENT: Gdk.Window.set_composited.none
#COMMENT: %TRUE to set the window as composited
#NAME: get_maximal_cursor_size
#PARENT: Gdk.Display
#COMMENT: Gets the maximal size to use for cursors on @display.
#NAME: free
#PARENT: Gdk.RGBA
#COMMENT: Frees a #GdkRGBA created with gdk_rgba_copy()
#NAME: window
#PARENT: Gdk.Window.unstick.none
#COMMENT: a toplevel #GdkWindow
#NAME: drag_begin
#PARENT: Gdk
#COMMENT: Starts a drag and creates a new drag context for it.
This function assumes that the drag is controlled by the
client pointer device, use gdk_drag_begin_for_device() to
begin a drag with a different device.

This function is called by the drag source.
#NAME: major
#PARENT: Gdk.GLContext.get_required_version.none
#COMMENT: return location for the major version to request
#NAME: unref
#PARENT: Gdk.FrameTimings
#COMMENT: Decreases the reference count of @timings. If @timings
is no longer referenced, it will be freed.
#NAME: context
#PARENT: Gdk.DragContext.set_device.none
#COMMENT: a #GdkDragContext
#NAME: get_support_multidevice
#PARENT: Gdk.Window
#COMMENT: Returns %TRUE if the window is aware of the existence of multiple
devices.
#NAME: display
#PARENT: Gdk.Display.supports_cursor_alpha.gboolean
#COMMENT: a #GdkDisplay
#NAME: window
#PARENT: Gdk.Window.get_effective_toplevel.Window
#COMMENT: a #GdkWindow
#NAME: window
#PARENT: Gdk.Window.begin_resize_drag.none
#COMMENT: a toplevel #GdkWindow
#NAME: setting_get
#PARENT: Gdk
#COMMENT: Obtains a desktop-wide setting, such as the double-click time,
for the default screen. See gdk_screen_get_setting().
#NAME: notify
#PARENT: Gdk.Event.handler_set.none
#COMMENT: the function to call when the handler function is removed, i.e. when
         gdk_event_handler_set() is called with another event handler.
#NAME: button
#PARENT: Gdk.Event.get_button.gboolean
#COMMENT: location to store mouse button number
#NAME: get_axis
#PARENT: Gdk.Device
#COMMENT: Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis use.
#NAME: cairo_rectangle
#PARENT: Gdk
#COMMENT: Adds the given rectangle to the current path of @cr.
#NAME: keyboard_ungrab
#PARENT: Gdk
#COMMENT: Ungrabs the keyboard on the default display, if it is grabbed by this
application.
#NAME: prop_type
#PARENT: Gdk.selection_property_get.gint
#COMMENT: location to store the type of the property
#NAME: context
#PARENT: Gdk.AppLaunchContext.set_desktop.none
#COMMENT: a #GdkAppLaunchContext
#NAME: get_system_visual
#PARENT: Gdk.Screen
#COMMENT: Get the system’s default visual for @screen.
This is the visual for the root window of the display.
The return value should not be freed.
#NAME: window
#PARENT: Gdk.Window.process_updates.none
#COMMENT: a #GdkWindow
#NAME: utility
#PARENT: Gdk.WindowTypeHint
#COMMENT: Utility windows which are not detached
 toolbars or dialogs.
#NAME: scale
#PARENT: Gdk.Window.create_similar_image_surface.cairo.Surface
#COMMENT: the scale of the new surface, or 0 to use same as @window
#NAME: window_type
#PARENT: Gdk.WindowAttr
#COMMENT: type of window
#NAME: drop_finish
#PARENT: Gdk
#COMMENT: Ends the drag operation after a drop.

This function is called by the drag destination.
#NAME: x
#PARENT: Gdk.cairo_set_source_window.none
#COMMENT: X coordinate of location to place upper left corner of @window
#NAME: modifier_reserved_16_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: y
#PARENT: Gdk.cairo_set_source_window.none
#COMMENT: Y coordinate of location to place upper left corner of @window
#NAME: drag_drop_succeeded
#PARENT: Gdk.drag_drop_succeeded
#COMMENT: %TRUE if the drop was successful.
#NAME: event
#PARENT: Gdk.Event.get_window.Window
#COMMENT: a #GdkEvent
#NAME: targets
#PARENT: Gdk.drag_begin.DragContext
#COMMENT: the offered targets,
    as list of #GdkAtoms
#NAME: input-mode
#PARENT: Gdk.Device
#COMMENT: Input mode for the device.
#NAME: user_data
#PARENT: Gdk.Window.set_user_data.none
#COMMENT: user data
#NAME: ungrab
#PARENT: Gdk.CrossingMode
#COMMENT: crossing because a grab is deactivated.
#NAME: atom
#PARENT: Gdk.Atom.name.utf8
#COMMENT: a #GdkAtom.
#NAME: get_key
#PARENT: Gdk.Device
#COMMENT: If @index_ has a valid keyval, this function will return %TRUE
and fill in @keyval and @modifiers with the keyval settings.
#NAME: dest
#PARENT: Gdk.rectangle_intersect.gboolean
#COMMENT: return location for the
intersection of @src1 and @src2, or %NULL
#NAME: get_name
#PARENT: Gdk.Display.get_name
#COMMENT: a string representing the display name. This string is owned
by GDK and should not be modified or freed.
#NAME: mask
#PARENT: Gdk.Device.get_state.none
#COMMENT: location to store the modifiers, or %NULL.
#NAME: timings
#PARENT: Gdk.FrameTimings.get_refresh_interval.gint64
#COMMENT: a #GdkFrameTimings
#NAME: window
#PARENT: Gdk.Window.invalidate_rect.none
#COMMENT: a #GdkWindow
#NAME: window
#PARENT: Gdk.Window.destroy.none
#COMMENT: a #GdkWindow
#NAME: override_redirect
#PARENT: Gdk.WindowAttr
#COMMENT: %TRUE to bypass the window manager
#NAME: device
#PARENT: Gdk.EventProximity
#COMMENT: the master device that the event originated from. Use
gdk_event_get_source_device() to get the slave device.
#NAME: get_predicted_presentation_time
#PARENT: Gdk.FrameTimings
#COMMENT: Gets the predicted time at which this frame will be displayed. Although
no predicted time may be available, if one is available, it will
be available while the frame is being generated, in contrast to
gdk_frame_timings_get_presentation_time(), which is only available
after the frame has been presented. In general, if you are simply
animating, you should use gdk_frame_clock_get_frame_time() rather
than this function, but this function is useful for applications
that want exact control over latency. For example, a movie player
may want this information for Audio/Video synchronization.
#NAME: mask
#PARENT: Gdk.Visual.get_green_pixel_details.none
#COMMENT: A pointer to a #guint32 to be filled in, or %NULL
#NAME: Rectangle
#PARENT: Gdk
#COMMENT: Defines the position and size of a rectangle. It is identical to
#cairo_rectangle_int_t.
#NAME: dialog
#PARENT: Gdk.WindowTypeHint
#COMMENT: Dialog window.
#NAME: base_width
#PARENT: Gdk.Geometry
#COMMENT: allowed window widths are @base_width + @width_inc * N where N
 is any integer (-1 allowed with #GtkWindow)
#NAME: list_axes
#PARENT: Gdk.Device
#COMMENT: Returns a #GList of #GdkAtoms, containing the labels for
the axes that @device currently has.
#NAME: get_associated_device
#PARENT: Gdk.Device
#COMMENT: Returns the associated device to @device, if @device is of type
%GDK_DEVICE_TYPE_MASTER, it will return the paired pointer or
keyboard.

If @device is of type %GDK_DEVICE_TYPE_SLAVE, it will return
the master device to which @device is attached to.

If @device is of type %GDK_DEVICE_TYPE_FLOATING, %NULL will be
returned, as there is no associated device.
#NAME: VisualType
#PARENT: Gdk
#COMMENT: A set of values that describe the manner in which the pixel values
for a visual are converted into RGB values for display.
#NAME: get_entries_for_keyval
#PARENT: Gdk.Keymap
#COMMENT: Obtains a list of keycode/group/level combinations that will
generate @keyval. Groups and levels are two kinds of keyboard mode;
in general, the level determines whether the top or bottom symbol
on a key is used, and the group determines whether the left or
right symbol is used. On US keyboards, the shift key changes the
keyboard level, and there are no groups. A group switch key might
convert a keyboard between Hebrew to English modes, for example.
#GdkEventKey contains a %group field that indicates the active
keyboard group. The level is computed from the modifier mask.
The returned array should be freed
with g_free().
#NAME: actual_property_type
#PARENT: Gdk.property_get.gboolean
#COMMENT: location to store the
  actual type of the property.
#NAME: target
#PARENT: Gdk.selection_convert.none
#COMMENT: the form in which to retrieve the selection.
#NAME: visual
#PARENT: Gdk.Visual.get_bits_per_rgb.gint
#COMMENT: a #GdkVisual
#NAME: get_screen
#PARENT: Gdk.Visual.get_screen
#COMMENT: the screen to which this visual belongs.
#NAME: keymap
#PARENT: Gdk.Keymap.get_direction.Pango.Direction
#COMMENT: a #GdkKeymap
#NAME: begin_resize_drag
#PARENT: Gdk.Window
#COMMENT: Begins a window resize operation (for a toplevel window).

This function assumes that the drag is controlled by the
client pointer device, use gdk_window_begin_resize_drag_for_device()
to begin a drag with a different device.
#NAME: time_
#PARENT: Gdk.keyboard_grab.GrabStatus
#COMMENT: a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no timestamp is
  available.
#NAME: window
#PARENT: Gdk.Window.set_role.none
#COMMENT: a toplevel #GdkWindow
#NAME: set_keep_below
#PARENT: Gdk.Window
#COMMENT: Set if @window must be kept below other windows. If the
window was already below, then this function does nothing.

On X11, asks the window manager to keep @window below, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don’t have a concept of
“keep below”; so you can’t rely on the window being kept below.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.
#NAME: utf8_to_string_target
#PARENT: Gdk.utf8_to_string_target
#COMMENT: the newly-allocated string, or %NULL if the
         conversion failed. (It should not fail for any properly
         formed UTF-8 string unless system limits like memory or
         file descriptors are exceeded.)
#NAME: peek
#PARENT: Gdk.Event.peek
#COMMENT: a copy of the first #GdkEvent on some event
queue, or %NULL if no events are in any queues. The returned
#GdkEvent should be freed with gdk_event_free().
#NAME: set_group
#PARENT: Gdk.Window
#COMMENT: Sets the group leader window for @window. By default,
GDK sets the group leader for all toplevel windows
to a global window implicitly created by GDK. With this function
you can override this default.

The group leader window allows the window manager to distinguish
all windows that belong to a single application. It may for example
allow users to minimize/unminimize all windows belonging to an
application at once. You should only set a non-default group window
if your application pretends to be multiple applications.
#NAME: realize
#PARENT: Gdk.GLContext
#COMMENT: Realizes the given #GdkGLContext.

It is safe to call this function on a realized #GdkGLContext.
#NAME: grab
#PARENT: Gdk.Device
#COMMENT: Grabs the device so that all events coming from this device are passed to
this application until the device is ungrabbed with gdk_device_ungrab(),
or the window becomes unviewable. This overrides any previous grab on the device
by this client.

Note that @device and @window need to be on the same display.

Device grabs are used for operations which need complete control over the
given device events (either pointer or keyboard). For example in GTK+ this
is used for Drag and Drop operations, popup menus and such.

Note that if the event mask of an X window has selected both button press
and button release events, then a button press event will cause an automatic
pointer grab until the button is released. X does this automatically since
most applications expect to receive button press and release events in pairs.
It is equivalent to a pointer grab on the window with @owner_events set to
%TRUE.

If you set up anything at the time you take the grab that needs to be
cleaned up when the grab ends, you should handle the #GdkEventGrabBroken
events that are emitted when the grab ends unvoluntarily.
#NAME: get_drag_protocol
#PARENT: Gdk.Window
#COMMENT: Finds out the DND protocol supported by a window.
#NAME: data
#PARENT: Gdk.Event.handler_set.none
#COMMENT: user data to pass to the function.
#NAME: has_native
#PARENT: Gdk.Window
#COMMENT: Checks whether the window has a native window or not. Note that
you can use gdk_window_ensure_native() if a native window is needed.
#NAME: axes
#PARENT: Gdk.Device.get_axis.gboolean
#COMMENT: pointer to an array of axes
#NAME: event
#PARENT: Gdk.Event.set_screen.none
#COMMENT: a #GdkEvent
#NAME: get_last_event_window
#PARENT: Gdk.Device.get_last_event_window
#COMMENT: the last window the device
#NAME: maximize
#PARENT: Gdk.Window
#COMMENT: Maximizes the window. If the window was already maximized, then
this function does nothing.

On X11, asks the window manager to maximize @window, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don’t have a concept of
“maximized”; so you can’t rely on the maximization actually
happening. But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

On Windows, reliably maximizes the window.
#NAME: clear_current
#PARENT: Gdk.GLContext
#COMMENT: Clears the current #GdkGLContext.

Any OpenGL call after this function returns will be ignored
until gdk_gl_context_make_current() is called.
#NAME: height
#PARENT: Gdk.Window.create_similar_image_surface.cairo.Surface
#COMMENT: height of the new surface
#NAME: get_device_cursor
#PARENT: Gdk.Window
#COMMENT: Retrieves a #GdkCursor pointer for the @device currently set on the
specified #GdkWindow, or %NULL.  If the return value is %NULL then
there is no custom cursor set on the specified window, and it is
using the cursor for its parent window.
#NAME: context
#PARENT: Gdk.drop_finish.none
#COMMENT: a #GdkDragContext
#NAME: window
#PARENT: Gdk.Window.get_origin.gint
#COMMENT: a #GdkWindow
#NAME: width
#PARENT: Gdk.cairo_draw_from_gl.none
#COMMENT: The width of the region to draw
#NAME: WindowInvalidateHandlerFunc
#PARENT: Gdk
#COMMENT: Whenever some area of the window is invalidated (directly in the
window or in a child window) this gets called with @region in
the coordinate space of @window. You can use @region to just
keep track of the dirty region, or you can actually change
@region in case you are doing display tricks like showing
a child in multiple places.
#NAME: context
#PARENT: Gdk.DragContext.get_dest_window.Window
#COMMENT: a #GdkDragContext
#NAME: new
#PARENT: Gdk.AppLaunchContext.new
#COMMENT: a new #GdkAppLaunchContext
#NAME: time_
#PARENT: Gdk.pointer_ungrab.none
#COMMENT: a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no
 timestamp is available.
#NAME: motion_notify
#PARENT: Gdk.EventType
#COMMENT: the pointer (usually a mouse) has moved.
#NAME: selection
#PARENT: Gdk.EventOwnerChange
#COMMENT: the atom identifying the selection
#NAME: eraser
#PARENT: Gdk.InputSource
#COMMENT: the device is an eraser. Typically, this would be the other end
                    of a stylus on a graphics tablet.
#NAME: sequence
#PARENT: Gdk.EventTouch
#COMMENT: the event sequence that the event belongs to
#NAME: supports_cursor_alpha
#PARENT: Gdk.Display.supports_cursor_alpha
#COMMENT: whether cursors can have alpha channels.
#NAME: pango_context_get_for_screen
#PARENT: Gdk.pango_context_get_for_screen
#COMMENT: a new #PangoContext for @screen
#NAME: get_caps_lock_state
#PARENT: Gdk.Keymap.get_caps_lock_state
#COMMENT: %TRUE if Caps Lock is on
#NAME: get_modal_hint
#PARENT: Gdk.Window
#COMMENT: Determines whether or not the window manager is hinted that @window
has modal behaviour.
#NAME: star
#PARENT: Gdk.CursorType
#COMMENT: ![](star.png)
#NAME: cairo_set_source_window
#PARENT: Gdk
#COMMENT: Sets the given window as the source pattern for @cr.

The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @window is @x, @y. The window contains all its
subwindows when rendering.

Note that the contents of @window are undefined outside of the
visible part of @window, so use this function with care.
#NAME: y_win
#PARENT: Gdk.Event.get_coords.gboolean
#COMMENT: location to put event window y coordinate
#NAME: supports_composite
#PARENT: Gdk.Display
#COMMENT: Returns %TRUE if gdk_window_set_composited() can be used
to redirect drawing on the window using compositing.

Currently this only works on X11 with XComposite and
XDamage extensions available.
#NAME: screen
#PARENT: Gdk.Screen.get_setting.gboolean
#COMMENT: the #GdkScreen where the setting is located
#NAME: lookup_key
#PARENT: Gdk.Keymap
#COMMENT: Looks up the keyval mapped to a keycode/group/level triplet.
If no keyval is bound to @key, returns 0. For normal user input,
you want to use gdk_keymap_translate_keyboard_state() instead of
this function, since the effective group/level may not be
the same as the current keyboard state.
#NAME: interval
#PARENT: Gdk.threads_add_timeout_full.guint
#COMMENT: the time between calls to the function, in milliseconds
            (1/1000ths of a second)
#NAME: input_shape_combine_region
#PARENT: Gdk.Window
#COMMENT: Like gdk_window_shape_combine_region(), but the shape applies
only to event handling. Mouse events which happen while
the pointer position corresponds to an unset bit in the
mask will be passed on the window below @window.

An input shape is typically used with RGBA windows.
The alpha channel of the window defines which pixels are
invisible and allows for nicely antialiased borders,
and the input shape controls where the window is
“clickable”.

On the X11 platform, this requires version 1.1 of the
shape extension.

On the Win32 platform, this functionality is not present and the
function does nothing.
#NAME: partial
#PARENT: Gdk.VisibilityState
#COMMENT: the window is partially visible.
#NAME: translate
#PARENT: Gdk.FilterReturn
#COMMENT: native event translated into a GDK event and stored
 in the `event` structure that was passed in.
#NAME: cr
#PARENT: Gdk.cairo_set_source_window.none
#COMMENT: a cairo context
#NAME: window
#PARENT: Gdk.Window.get_effective_parent.Window
#COMMENT: a #GdkWindow
#NAME: offscreen_window_get_surface
#PARENT: Gdk
#COMMENT: Gets the offscreen surface that an offscreen window renders into.
If you need to keep this around over window resizes, you need to
add a reference to it.
#NAME: touch_begin
#PARENT: Gdk.CrossingMode
#COMMENT: crossing because a touch sequence has begun,
  this event is synthetic as the pointer might have not left the window.
#NAME: update
#PARENT: Gdk.FrameClockPhase
#COMMENT: corresponds to GdkFrameClock::update.
#NAME: type
#PARENT: Gdk.EventWindowState
#COMMENT: the type of the event (%GDK_WINDOW_STATE).
#NAME: precision
#PARENT: Gdk.Visual.get_green_pixel_details.none
#COMMENT: A pointer to a #gint to be filled in, or %NULL
#NAME: get_source
#PARENT: Gdk.Device.get_source
#COMMENT: a #GdkInputSource
#NAME: y_root
#PARENT: Gdk.EventCrossing
#COMMENT: the y coordinate of the pointer relative to the root of the screen.
#NAME: down
#PARENT: Gdk.ScrollDirection
#COMMENT: the window is scrolled down.
#NAME: x
#PARENT: Gdk.Display.warp_pointer.none
#COMMENT: the x coordinate of the destination
#NAME: get_scroll_deltas
#PARENT: Gdk.Event.get_scroll_deltas
#COMMENT: %TRUE if the event contains smooth scroll information
#NAME: y
#PARENT: Gdk.Display.warp_pointer.none
#COMMENT: the y coordinate of the destination
#NAME: selection
#PARENT: Gdk.selection_send_notify_for_display.none
#COMMENT: selection that was requested
#NAME: vendor-id
#PARENT: Gdk.Device
#COMMENT: Vendor ID of this device, see gdk_device_get_vendor_id().
#NAME: event
#PARENT: Gdk.event_request_motions.none
#COMMENT: a valid #GdkEvent
#NAME: argc
#PARENT: Gdk.init.none
#COMMENT: the number of command line arguments.
#NAME: last
#PARENT: Gdk.AxisUse
#COMMENT: a constant equal to the numerically highest axis value.
#NAME: get_forward_compatible
#PARENT: Gdk.GLContext.get_forward_compatible
#COMMENT: %TRUE if the context should be forward compatible
#NAME: get_position
#PARENT: Gdk.Device
#COMMENT: Gets the current location of @device. As a slave device
coordinates are those of its master pointer, This function
may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().
#NAME: count
#PARENT: Gdk.query_visual_types.none
#COMMENT: return location for the number of available visual types
#NAME: x
#PARENT: Gdk.AxisUse
#COMMENT: the axis is used as the x axis.
#NAME: y
#PARENT: Gdk.AxisUse
#COMMENT: the axis is used as the y axis.
#NAME: get_modifier_mask
#PARENT: Gdk.Keymap.get_modifier_mask
#COMMENT: the modifier mask used for @intent.
#NAME: get_axis_use
#PARENT: Gdk.Device
#COMMENT: Returns the axis use for @index_.
#NAME: time_
#PARENT: Gdk.Device.grab.GrabStatus
#COMMENT: the timestamp of the event which led to this pointer grab. This
        usually comes from the #GdkEvent struct, though %GDK_CURRENT_TIME
        can be used if the time isn’t known.
#NAME: get_current
#PARENT: Gdk.GLContext
#COMMENT: Retrieves the current #GdkGLContext.
#NAME: start
#PARENT: Gdk.Device.get_history.gboolean
#COMMENT: starting timestamp for range of events to return
#NAME: enable_synchronized_configure
#PARENT: Gdk.Window
#COMMENT: Does nothing, present only for compatiblity.
#NAME: property_change
#PARENT: Gdk
#COMMENT: Changes the contents of a property on a window.
#NAME: focus_change
#PARENT: Gdk.EventType
#COMMENT: the keyboard focus has entered or left the window.
#NAME: type
#PARENT: Gdk.EventConfigure
#COMMENT: the type of the event (%GDK_CONFIGURE).
#NAME: flush
#PARENT: Gdk
#COMMENT: Flushes the output buffers of all display connections and waits
until all requests have been processed.
This is rarely needed by applications.
#NAME: move
#PARENT: Gdk.DragAction
#COMMENT: Move the data, i.e. first copy it, then delete
 it from the source using the DELETE target of the X selection protocol.
#NAME: window
#PARENT: Gdk.Window.enable_synchronized_configure.none
#COMMENT: a toplevel #GdkWindow
#NAME: get_refresh_interval
#PARENT: Gdk.FrameTimings
#COMMENT: Gets the natural interval between presentation times for
the display that this frame was displayed on. Frame presentation
usually happens during the “vertical blanking interval”.
#NAME: window
#PARENT: Gdk.WindowInvalidateHandlerFunc.none
#COMMENT: a #GdkWindow
#NAME: center
#PARENT: Gdk.Gravity
#COMMENT: the reference point is at the center of the window.
#NAME: size-changed
#PARENT: Gdk.Screen
#COMMENT: The ::size-changed signal is emitted when the pixel width or
height of a screen changes.
#NAME: argv
#PARENT: Gdk.init.none
#COMMENT: the array of command line arguments.
#NAME: get_window_at_pointer
#PARENT: Gdk.Display.get_window_at_pointer
#COMMENT: the window under the mouse
  pointer, or %NULL
#NAME: ModifierIntent
#PARENT: Gdk
#COMMENT: This enum is used with gdk_keymap_get_modifier_mask()
in order to determine what modifiers the
currently used windowing system backend uses for particular
purposes. For example, on X11/Windows, the Control key is used for
invoking menu shortcuts (accelerators), whereas on Apple computers
it’s the Command key (which correspond to %GDK_CONTROL_MASK and
%GDK_MOD2_MASK, respectively).
#NAME: beep
#PARENT: Gdk.Display
#COMMENT: Emits a short beep on @display
#NAME: cairo_draw_from_gl
#PARENT: Gdk
#COMMENT: This is the main way to draw GL content in GTK+. It takes a render buffer ID
(@source_type == #GL_RENDERBUFFER) or a texture id (@source_type == #GL_TEXTURE)
and draws it onto @cr with an OVER operation, respecting the current clip.
The top left corner of the rectangle specified by @x, @y, @width and @height
will be drawn at the current (0,0) position of the cairo_t.

This will work for *all* cairo_t, as long as @window is realized, but the
fallback implementation that reads back the pixels from the buffer may be
used in the general case. In the case of direct drawing to a window with
no special effects applied to @cr it will however use a more efficient
approach.

For #GL_RENDERBUFFER the code will always fall back to software for buffers
with alpha components, so make sure you use #GL_TEXTURE if using alpha.

Calling this may change the current GL context.
#NAME: direction
#PARENT: Gdk.EventScroll
#COMMENT: the direction to scroll to (one of %GDK_SCROLL_UP,
  %GDK_SCROLL_DOWN, %GDK_SCROLL_LEFT, %GDK_SCROLL_RIGHT or
  %GDK_SCROLL_SMOOTH).
#NAME: GLContext
#PARENT: Gdk
#COMMENT: #GdkGLContext is an object representing the platform-specific
OpenGL drawing context.

#GdkGLContexts are created for a #GdkWindow using
gdk_window_create_gl_context(), and the context will match
the #GdkVisual of the window.

A #GdkGLContext is not tied to any particular normal framebuffer.
For instance, it cannot draw to the #GdkWindow back buffer. The GDK
repaint system is in full control of the painting to that. Instead,
you can create render buffers or textures and use gdk_cairo_draw_from_gl()
in the draw function of your widget to draw them. Then GDK will handle
the integration of your rendering with that of other widgets.

Support for #GdkGLContext is platform-specific, context creation
can fail, returning %NULL context.

A #GdkGLContext has to be made "current" in order to start using
it, otherwise any OpenGL call will be ignored.

## Creating a new OpenGL context ##

In order to create a new #GdkGLContext instance you need a
#GdkWindow, which you typically get during the realize call
of a widget.

A #GdkGLContext is not realized until either gdk_gl_context_make_current(),
or until it is realized using gdk_gl_context_realize(). It is possible to
specify details of the GL context like the OpenGL version to be used, or
whether the GL context should have extra state validation enabled after
calling gdk_window_create_gl_context() by calling gdk_gl_context_realize().
If the realization fails you have the option to change the settings of the
#GdkGLContext and try again.

## Using a GdkGLContext ##

You will need to make the #GdkGLContext the current context
before issuing OpenGL calls; the system sends OpenGL commands to
whichever context is current. It is possible to have multiple
contexts, so you always need to ensure that the one which you
want to draw with is the current one before issuing commands:

|[<!-- language="C" -->
  gdk_gl_context_make_current (context);
]|

You can now perform your drawing using OpenGL commands.

You can check which #GdkGLContext is the current one by using
gdk_gl_context_get_current(); you can also unset any #GdkGLContext
that is currently set by calling gdk_gl_context_clear_current().
#NAME: end_paint
#PARENT: Gdk.Window
#COMMENT: Indicates that the backing store created by the most recent call
to gdk_window_begin_paint_region() should be copied onscreen and
deleted, leaving the next-most-recent backing store or no backing
store at all as the active paint region. See
gdk_window_begin_paint_region() for full details.

It is an error to call this function without a matching
gdk_window_begin_paint_region() first.
#NAME: get_support_multidevice
#PARENT: Gdk.Window.get_support_multidevice
#COMMENT: %TRUE if the window handles multidevice features.
#NAME: name
#PARENT: Gdk.Window.set_icon_name.none
#COMMENT: name of window while iconified (minimized)
#NAME: color
#PARENT: Gdk.Color.copy.Color
#COMMENT: a #GdkColor
#NAME: wclass
#PARENT: Gdk.WindowAttr
#COMMENT: #GDK_INPUT_OUTPUT (normal window) or #GDK_INPUT_ONLY (invisible
 window that receives events)
#NAME: static
#PARENT: Gdk.Gravity
#COMMENT: the reference point is at the top left corner of the
 window itself, ignoring window manager decorations.
#NAME: reason
#PARENT: Gdk.EventOwnerChange
#COMMENT: the reason for the ownership change as a #GdkOwnerChange value
#NAME: window
#PARENT: Gdk.Window.get_width.gint
#COMMENT: a #GdkWindow
#NAME: state
#PARENT: Gdk.Event.get_state.gboolean
#COMMENT: return location for state
#NAME: screen
#PARENT: Gdk.Screen.make_display_name.utf8
#COMMENT: a #GdkScreen
#NAME: cairo_set_source_rgba
#PARENT: Gdk
#COMMENT: Sets the specified #GdkRGBA as the source color of @cr.
#NAME: get_time
#PARENT: Gdk.Event
#COMMENT: Returns the time stamp from @event, if there is one; otherwise
returns #GDK_CURRENT_TIME. If @event is %NULL, returns #GDK_CURRENT_TIME.
#NAME: GLError
#PARENT: Gdk
#COMMENT: Error enumeration for #GdkGLContext.
#NAME: exposure_mask
#PARENT: Gdk.EventMask
#COMMENT: receive expose events
#NAME: ref
#PARENT: Gdk.FrameTimings
#COMMENT: Increases the reference count of @timings.
#NAME: get_rgba_visual
#PARENT: Gdk.Screen
#COMMENT: Gets a visual to use for creating windows with an alpha channel.
The windowing system on which GTK+ is running
may not support this capability, in which case %NULL will
be returned. Even if a non-%NULL value is returned, its
possible that the window’s alpha channel won’t be honored
when displaying the window on the screen: in particular, for
X an appropriate windowing manager and compositing manager
must be running to provide appropriate display.

This functionality is not implemented in the Windows backend.

For setting an overall opacity for a top-level window, see
gdk_window_set_opacity().
#NAME: get_type_hint
#PARENT: Gdk.Window.get_type_hint
#COMMENT: The type hint set for @window
#NAME: invalidate_region
#PARENT: Gdk.Window
#COMMENT: Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or “dirty region.” The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.

GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there’s no need to do that manually, you just need to
invalidate regions that you know should be redrawn.

The @invalidate_children parameter controls whether the region of
each child window that intersects @region will also be invalidated.
If %FALSE, then the update area for child windows will remain
unaffected. See gdk_window_invalidate_maybe_recurse if you need
fine grained control over which children are invalidated.
#NAME: get_device_position_double
#PARENT: Gdk.Window
#COMMENT: Obtains the current device position in doubles and modifier state.
The position is given in coordinates relative to the upper left
corner of @window.
#NAME: peek_event
#PARENT: Gdk.Display
#COMMENT: Gets a copy of the first #GdkEvent in the @display’s event queue, without
removing the event from the queue.  (Note that this function will
not get more events from the windowing system.  It only checks the events
that have already been moved to the GDK event queue.)
#NAME: edge
#PARENT: Gdk.Window.begin_resize_drag.none
#COMMENT: the edge or corner from which the drag is started
#NAME: state
#PARENT: Gdk.EventCrossing
#COMMENT: a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.
#NAME: display
#PARENT: Gdk.Display.get_screen.Screen
#COMMENT: a #GdkDisplay
#NAME: tcross
#PARENT: Gdk.CursorType
#COMMENT: ![](tcross.png)
#NAME: supports_cursor_color
#PARENT: Gdk.Display
#COMMENT: Returns %TRUE if multicolored cursors are supported
on @display. Otherwise, cursors have only a forground
and a background color.
#NAME: cr
#PARENT: Gdk.cairo_region.none
#COMMENT: a cairo context
#NAME: draft_large
#PARENT: Gdk.CursorType
#COMMENT: ![](draft_large.png)
#NAME: coords_to_parent
#PARENT: Gdk.Window
#COMMENT: Transforms window coordinates from a child window to its parent
window, where the parent window is the normal parent as returned by
gdk_window_get_parent() for normal windows, and the window's
embedder as returned by gdk_offscreen_window_get_embedder() for
offscreen windows.

For normal windows, calling this function is equivalent to adding
the return values of gdk_window_get_position() to the child coordinates.
For offscreen windows however (which can be arbitrarily transformed),
this function calls the GdkWindow::to-embedder: signal to translate
the coordinates.

You should always use this function when writing generic code that
walks up a window hierarchy.

See also: gdk_window_coords_from_parent()
#NAME: get_bits_per_rgb
#PARENT: Gdk.Visual.get_bits_per_rgb
#COMMENT: The number of significant bits per color value for @visual.
#NAME: precision
#PARENT: Gdk.Visual.get_red_pixel_details.none
#COMMENT: A pointer to a #gint to be filled in, or %NULL
#NAME: content
#PARENT: Gdk.Window.create_similar_surface.cairo.Surface
#COMMENT: the content for the new surface
#NAME: width
#PARENT: Gdk.Screen
#COMMENT: Returns the width of the default screen in pixels.
#NAME: time
#PARENT: Gdk.EventProperty
#COMMENT: the time of the event in milliseconds.
#NAME: modifier_reserved_24_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: get_scroll_lock_state
#PARENT: Gdk.Keymap.get_scroll_lock_state
#COMMENT: %TRUE if Scroll Lock is on
#NAME: window
#PARENT: Gdk.Window.get_cursor.Cursor
#COMMENT: a #GdkWindow
#NAME: window
#PARENT: Gdk.Window.set_modal_hint.none
#COMMENT: A toplevel #GdkWindow
#NAME: EventTouch
#PARENT: Gdk
#COMMENT: Used for touch events.
@type field will be one of %GDK_TOUCH_BEGIN, %GDK_TOUCH_UPDATE,
%GDK_TOUCH_END or %GDK_TOUCH_CANCEL.

Touch events are grouped into sequences by means of the @sequence
field, which can also be obtained with gdk_event_get_event_sequence().
Each sequence begins with a %GDK_TOUCH_BEGIN event, followed by
any number of %GDK_TOUCH_UPDATE events, and ends with a %GDK_TOUCH_END
(or %GDK_TOUCH_CANCEL) event. With multitouch devices, there may be
several active sequences at the same time.
#NAME: invalid_time
#PARENT: Gdk.GrabStatus
#COMMENT: the resource was grabbed more recently than the
 specified time.
#NAME: height
#PARENT: Gdk.Display.get_maximal_cursor_size.none
#COMMENT: the return location for the maximal cursor height
#NAME: set_required_version
#PARENT: Gdk.GLContext
#COMMENT: Sets the major and minor version of OpenGL to request.

Setting @major and @minor to zero will use the default values.

The #GdkGLContext must not be realized or made current prior to calling
this function.
#NAME: detail
#PARENT: Gdk.EventCrossing
#COMMENT: the kind of crossing that happened (%GDK_NOTIFY_INFERIOR,
 %GDK_NOTIFY_ANCESTOR, %GDK_NOTIFY_VIRTUAL, %GDK_NOTIFY_NONLINEAR or
 %GDK_NOTIFY_NONLINEAR_VIRTUAL).
#NAME: get_window_stack
#PARENT: Gdk.Screen.get_window_stack
#COMMENT: a
    list of #GdkWindows for the current window stack, or %NULL.
#NAME: pick-embedded-child
#PARENT: Gdk.Window
#COMMENT: The ::pick-embedded-child signal is emitted to find an embedded
child at the given position.
#NAME: axes
#PARENT: Gdk.EventButton
#COMMENT: @x, @y translated to the axes of @device, or %NULL if @device is
  the mouse.
#NAME: offscreen_window_get_embedder
#PARENT: Gdk
#COMMENT: Gets the window that @window is embedded in.
#NAME: destroy
#PARENT: Gdk.Window
#COMMENT: Destroys the window system resources associated with @window and decrements @window's
reference count. The window system resources for all children of @window are also
destroyed, but the children’s reference counts are not decremented.

Note that a window will not be destroyed automatically when its reference count
reaches zero. You must call this function yourself before that happens.
#NAME: new_from_name
#PARENT: Gdk.Cursor
#COMMENT: Creates a new cursor by looking up @name in the current cursor
theme.
#NAME: shuttle
#PARENT: Gdk.CursorType
#COMMENT: ![](shuttle.png)
#NAME: umbrella
#PARENT: Gdk.CursorType
#COMMENT: ![](umbrella.png)
#NAME: south_west
#PARENT: Gdk.WindowEdge
#COMMENT: the lower left corner.
#NAME: keyval_is_upper
#PARENT: Gdk
#COMMENT: Returns %TRUE if the given key value is in upper case.
#NAME: embedder
#PARENT: Gdk.offscreen_window_set_embedder.none
#COMMENT: the #GdkWindow that @window gets embedded in
#NAME: value
#PARENT: Gdk.Device.get_axis_value.gboolean
#COMMENT: location to store the found value.
#NAME: hide
#PARENT: Gdk.Window
#COMMENT: For toplevel windows, withdraws them, so they will no longer be
known to the window manager; for all windows, unmaps them, so
they won’t be displayed. Normally done automatically as
part of gtk_widget_hide().
#NAME: window
#PARENT: Gdk.EventConfigure
#COMMENT: the window which received the event.
#NAME: screen
#PARENT: Gdk.InputMode
#COMMENT: the device is enabled. The device’s coordinate space
                  maps to the entire screen.
#NAME: display
#PARENT: Gdk.selection_send_notify_for_display.none
#COMMENT: the #GdkDisplay where @requestor is realized
#NAME: tooltip
#PARENT: Gdk.WindowTypeHint
#COMMENT: A tooltip.
#NAME: monitor_num
#PARENT: Gdk.Screen.get_monitor_workarea.none
#COMMENT: the monitor number
#NAME: client_event
#PARENT: Gdk.EventType
#COMMENT: a message has been received from another application.
#NAME: new
#PARENT: Gdk.AppLaunchContext
#COMMENT: Creates a new #GdkAppLaunchContext.
#NAME: free
#PARENT: Gdk.Event
#COMMENT: Frees a #GdkEvent, freeing or decrementing any resources associated with it.
Note that this function should only be called with events returned from
functions such as gdk_event_peek(), gdk_event_get(), gdk_event_copy()
and gdk_event_new().
#NAME: pango_context_get
#PARENT: Gdk.pango_context_get
#COMMENT: a new #PangoContext for the default display
#NAME: possible_actions
#PARENT: Gdk.drag_motion.gboolean
#COMMENT: the possible actions
#NAME: north_west
#PARENT: Gdk.WindowEdge
#COMMENT: the top left corner.
#NAME: threads_add_timeout_seconds
#PARENT: Gdk
#COMMENT: A wrapper for the common usage of gdk_threads_add_timeout_seconds_full()
assigning the default priority, #G_PRIORITY_DEFAULT.

For details, see gdk_threads_add_timeout_full().
#NAME: offset_x
#PARENT: Gdk.Window.shape_combine_region.none
#COMMENT: X position of @shape_region in @window coordinates
#NAME: EventOwnerChange
#PARENT: Gdk
#COMMENT: Generated when the owner of a selection changes. On X11, this
information is only available if the X server supports the XFIXES
extension.
#NAME: unref
#PARENT: Gdk.Cursor
#COMMENT: Removes a reference from @cursor, deallocating the cursor
if no references remain.
#NAME: offset_y
#PARENT: Gdk.Window.shape_combine_region.none
#COMMENT: Y position of @shape_region in @window coordinates
#NAME: min_width
#PARENT: Gdk.Geometry
#COMMENT: minimum width of window (or -1 to use requisition, with
 #GtkWindow only)
#NAME: shift
#PARENT: Gdk.Visual.get_red_pixel_details.none
#COMMENT: A pointer to a #gint to be filled in, or %NULL
#NAME: screen
#PARENT: Gdk.Screen.get_monitor_scale_factor.gint
#COMMENT: screen to get scale factor for
#NAME: property
#PARENT: Gdk.selection_send_notify_for_display.none
#COMMENT: property in which the selection owner stored the data,
           or %GDK_NONE to indicate that the request was rejected
#NAME: before_paint
#PARENT: Gdk.FrameClockPhase
#COMMENT: corresponds to GdkFrameClock::before-paint. Should not be handled by applications.
#NAME: WindowAttributesType
#PARENT: Gdk
#COMMENT: Used to indicate which fields in the #GdkWindowAttr struct should be honored.
For example, if you filled in the “cursor” and “x” fields of #GdkWindowAttr,
pass “@GDK_WA_X | @GDK_WA_CURSOR” to gdk_window_new(). Fields in
#GdkWindowAttr not covered by a bit in this enum are required; for example,
the @width/@height, @wclass, and @window_type fields are required, they have
no corresponding flag in #GdkWindowAttributesType.
#NAME: get_visual_type
#PARENT: Gdk.Visual
#COMMENT: Returns the type of visual this is (PseudoColor, TrueColor, etc).
#NAME: set_debug_enabled
#PARENT: Gdk.GLContext
#COMMENT: Sets whether the #GdkGLContext should perform extra validations and
run time checking. This is useful during development, but has
additional overhead.

The #GdkGLContext must not be realized or made current prior to
calling this function.
#NAME: handler
#PARENT: Gdk.Window.set_invalidate_handler.none
#COMMENT: a #GdkWindowInvalidateHandlerFunc callback function
#NAME: bottom_side
#PARENT: Gdk.CursorType
#COMMENT: ![](bottom_side.png)
#NAME: last_cursor
#PARENT: Gdk.CursorType
#COMMENT: last cursor type
#NAME: WindowHints
#PARENT: Gdk
#COMMENT: Used to indicate which fields of a #GdkGeometry struct should be paid
attention to. Also, the presence/absence of @GDK_HINT_POS,
@GDK_HINT_USER_POS, and @GDK_HINT_USER_SIZE is significant, though they don't
directly refer to #GdkGeometry fields. @GDK_HINT_USER_POS will be set
automatically by #GtkWindow if you call gtk_window_move().
@GDK_HINT_USER_POS and @GDK_HINT_USER_SIZE should be set if the user
specified a size/position using a --geometry command-line argument;
gtk_window_parse_geometry() automatically sets these flags.
#NAME: owner_events
#PARENT: Gdk.keyboard_grab.GrabStatus
#COMMENT: if %FALSE then all keyboard events are reported with respect to
  @window. If %TRUE then keyboard events for this application are
  reported as normal, but keyboard events outside this application
  are reported with respect to @window. Both key press and key
  release events are always reported, independant of the event mask
  set by the application.
#NAME: visual
#PARENT: Gdk.Visual.get_red_pixel_details.none
#COMMENT: A #GdkVisual
#NAME: targets
#PARENT: Gdk.Display.store_clipboard.none
#COMMENT: an array of targets
                   that should be saved, or %NULL
                   if all available targets should be saved.
#NAME: x
#PARENT: Gdk.Device.get_position.none
#COMMENT: location to store root window X coordinate of @device, or %NULL.
#NAME: y
#PARENT: Gdk.Device.get_position.none
#COMMENT: location to store root window Y coordinate of @device, or %NULL.
#NAME: blank_cursor
#PARENT: Gdk.CursorType
#COMMENT: Blank cursor. Since 2.16
#NAME: error_trap_pop_ignored
#PARENT: Gdk
#COMMENT: Removes an error trap pushed with gdk_error_trap_push(), but
without bothering to wait and see whether an error occurred.  If an
error arrives later asynchronously that was triggered while the
trap was pushed, that error will be ignored.
#NAME: get_root_window
#PARENT: Gdk.Screen.get_root_window
#COMMENT: the root window
#NAME: get_scale_factor
#PARENT: Gdk.Window
#COMMENT: Returns the internal scale factor that maps from window coordiantes
to the actual device pixels. On traditional systems this is 1, but
on very high density outputs this can be a higher value (often 2).

A higher value means that drawing is automatically scaled up to
a higher resolution, so any code doing drawing will automatically look
nicer. However, if you are supplying pixel-based data the scale
value can be used to determine whether to use a pixel resource
with higher resolution data.

The scale of a window may change during runtime, if this happens
a configure event will be sent to the toplevel window.
#NAME: window
#PARENT: Gdk.Window.set_override_redirect.none
#COMMENT: a toplevel #GdkWindow
#NAME: link
#PARENT: Gdk.DragAction
#COMMENT: Add a link to the data. Note that this is only
 useful if source and destination agree on what it means.
#NAME: default
#PARENT: Gdk.DragAction
#COMMENT: Means nothing, and should not be used.
#NAME: get_cursor
#PARENT: Gdk.Window.get_cursor
#COMMENT: a #GdkCursor, or %NULL. The
  returned object is owned by the #GdkWindow and should not be
  unreferenced directly. Use gdk_window_set_cursor() to unset the
  cursor of the window
#NAME: device
#PARENT: Gdk.Device.get_has_cursor.gboolean
#COMMENT: a #GdkDevice
#NAME: _get_angle
#PARENT: Gdk.Event._get_angle
#COMMENT: %TRUE if the angle could be calculated.
#NAME: destroy
#PARENT: Gdk.OwnerChange
#COMMENT: the window was destroyed
#NAME: axis_use
#PARENT: Gdk.Event.get_axis.gboolean
#COMMENT: the axis use to look for
#NAME: mask
#PARENT: Gdk.Visual.get_red_pixel_details.none
#COMMENT: A pointer to a #guint32 to be filled in, or %NULL
#NAME: display
#PARENT: Gdk.Display.flush.none
#COMMENT: a #GdkDisplay
#NAME: send_event
#PARENT: Gdk.EventVisibility
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: get_has_cursor
#PARENT: Gdk.Device
#COMMENT: Determines whether the pointer follows device motion.
This is not meaningful for keyboard devices, which don't have a pointer.
#NAME: n_ranges
#PARENT: Gdk.pango_layout_line_get_clip_region.cairo.Region
#COMMENT: number of ranges in @index_ranges, i.e. half the size of @index_ranges
#NAME: visual
#PARENT: Gdk.WindowAttributesType
#COMMENT: Honor the visual field
#NAME: window
#PARENT: Gdk.offscreen_window_get_surface.cairo.Surface
#COMMENT: a #GdkWindow
#NAME: get_device
#PARENT: Gdk.DragContext
#COMMENT: Returns the #GdkDevice associated to the drag context.
#NAME: window
#PARENT: Gdk.Window.register_dnd.none
#COMMENT: a #GdkWindow.
#NAME: get_primary_monitor
#PARENT: Gdk.Screen.get_primary_monitor
#COMMENT: An integer index for the primary monitor, or 0 if none is configured.
#NAME: application
#PARENT: Gdk.GrabOwnership
#COMMENT: Other devices’ events are blocked for the whole application.
#NAME: keys-changed
#PARENT: Gdk.Keymap
#COMMENT: The ::keys-changed signal is emitted when the mapping represented by
@keymap changes.
#NAME: override_redirect
#PARENT: Gdk.Window.set_override_redirect.none
#COMMENT: %TRUE if window should be override redirect
#NAME: button_release
#PARENT: Gdk.EventType
#COMMENT: a mouse button has been released.
#NAME: keyval_to_lower
#PARENT: Gdk.keyval_to_lower
#COMMENT: the lower case form of @keyval, or @keyval itself if it is already
 in lower case or it is not subject to case conversion.
#NAME: geometry
#PARENT: Gdk.Window.constrain_size.none
#COMMENT: a #GdkGeometry structure
#NAME: focus_on_map
#PARENT: Gdk.Window.set_focus_on_map.none
#COMMENT: %TRUE if the window should receive input focus when mapped
#NAME: scale
#PARENT: Gdk.cairo_surface_create_from_pixbuf.cairo.Surface
#COMMENT: the scale of the new surface, or 0 to use same as @window
#NAME: timings
#PARENT: Gdk.FrameTimings.get_complete.gboolean
#COMMENT: a #GdkFrameTimings
#NAME: width
#PARENT: Gdk.pixbuf_get_from_window.GdkPixbuf.Pixbuf
#COMMENT: Width in pixels of region to get
#NAME: time_
#PARENT: Gdk.drag_status.none
#COMMENT: the timestamp for this operation
#NAME: paint
#PARENT: Gdk.FrameClockPhase
#COMMENT: corresponds to GdkFrameClock::paint.
#NAME: window
#PARENT: Gdk.cairo_draw_from_gl.none
#COMMENT: The window we're rendering for (not necessarily into)
#NAME: device
#PARENT: Gdk.Event.set_source_device.none
#COMMENT: a #GdkDevice
#NAME: get_focus_on_map
#PARENT: Gdk.Window
#COMMENT: Determines whether or not the desktop environment should be hinted that the
window does not want to receive input focus when it is mapped.
#NAME: event
#PARENT: Gdk.Event.get_event_sequence.EventSequence
#COMMENT: a #GdkEvent
#NAME: timings
#PARENT: Gdk.FrameTimings.get_frame_counter.gint64
#COMMENT: a #GdkFrameTimings
#NAME: bottom
#PARENT: Gdk.Window.set_shadow_width.none
#COMMENT: The bottom extent
#NAME: pixbuf
#PARENT: Gdk.cairo_set_source_pixbuf.none
#COMMENT: a #GdkPixbuf
#NAME: ref
#PARENT: Gdk.FrameTimings.ref
#COMMENT: @timings
#NAME: window
#PARENT: Gdk.Window.get_event_compression.gboolean
#COMMENT: a #GdkWindow
#NAME: keymap
#PARENT: Gdk.Keymap.translate_keyboard_state.gboolean
#COMMENT: a #GdkKeymap
#NAME: window
#PARENT: Gdk.Window.get_screen.Screen
#COMMENT: a #GdkWindow
#NAME: SettingAction
#PARENT: Gdk
#COMMENT: Specifies the kind of modification applied to a setting in a
#GdkEventSetting.
#NAME: window
#PARENT: Gdk.Window.focus.none
#COMMENT: a #GdkWindow
#NAME: show
#PARENT: Gdk.Window
#COMMENT: Like gdk_window_show_unraised(), but also raises the window to the
top of the window stack (moves the window to the front of the
Z-order).

This function maps a window so it’s visible onscreen. Its opposite
is gdk_window_hide().

When implementing a #GtkWidget, you should call this function on the widget's
#GdkWindow as part of the “map” method.
#NAME: none
#PARENT: Gdk.DragProtocol
#COMMENT: no protocol.
#NAME: window
#PARENT: Gdk.Window.get_root_coords.none
#COMMENT: a #GdkWindow
#NAME: set_background_rgba
#PARENT: Gdk.Window
#COMMENT: Sets the background color of @window.

See also gdk_window_set_background_pattern().
#NAME: get_forward_compatible
#PARENT: Gdk.GLContext
#COMMENT: Retrieves the value set using gdk_gl_context_set_forward_compatible().
#NAME: request_motions
#PARENT: Gdk.Event
#COMMENT: Request more motion notifies if @event is a motion notify hint event.

This function should be used instead of gdk_window_get_pointer() to
request further motion notifies, because it also works for extension
events where motion notifies are provided for devices other than the
core pointer. Coordinate extraction, processing and requesting more
motion events from a %GDK_MOTION_NOTIFY event usually works like this:

|[<!-- language="C" -->
{
  // motion_event handler
  x = motion_event->x;
  y = motion_event->y;
  // handle (x,y) motion
  gdk_event_request_motions (motion_event); // handles is_hint events
}
]|
#NAME: get_default
#PARENT: Gdk.Keymap.get_default
#COMMENT: the #GdkKeymap attached to the default display.
#NAME: event
#PARENT: Gdk.Event.get_source_device.Device
#COMMENT: a #GdkEvent
#NAME: DragProtocol
#PARENT: Gdk
#COMMENT: Used in #GdkDragContext to indicate the protocol according to
which DND is done.
#NAME: get_source_device
#PARENT: Gdk.Event
#COMMENT: This function returns the hardware (slave) #GdkDevice that has
triggered the event, falling back to the virtual (master) device
(as in gdk_event_get_device()) if the event wasn’t caused by
interaction with a hardware device. This may happen for example
in synthesized crossing events after a #GdkWindow updates its
geometry or a grab is acquired/released.

If the event does not contain a device field, this function will
return %NULL.
#NAME: property
#PARENT: Gdk.EventSelection
#COMMENT: the property in which to place the result of the conversion.
#NAME: keyval
#PARENT: Gdk.Event.get_keyval.gboolean
#COMMENT: location to store the keyval
#NAME: is_visible
#PARENT: Gdk.Window.is_visible
#COMMENT: %TRUE if the window is mapped
#NAME: drop_finished
#PARENT: Gdk.EventType
#COMMENT: the drop operation initiated by the window has completed.
#NAME: unsupported_profile
#PARENT: Gdk.GLError
#COMMENT: The requested profile is not supported
#NAME: init
#PARENT: Gdk
#COMMENT: Initializes the GDK library and connects to the windowing system.
If initialization fails, a warning message is output and the application
terminates with a call to `exit(1)`.

Any arguments used by GDK are removed from the array and @argc and @argv
are updated accordingly.

GTK+ initializes GDK in gtk_init() and so this function is not usually
needed by GTK+ applications.
#NAME: get_entries_for_keycode
#PARENT: Gdk.Keymap
#COMMENT: Returns the keyvals bound to @hardware_keycode.
The Nth #GdkKeymapKey in @keys is bound to the Nth
keyval in @keyvals. Free the returned arrays with g_free().
When a keycode is pressed by the user, the keyval from
this list of entries is selected by considering the effective
keyboard group and level. See gdk_keymap_translate_keyboard_state().
#NAME: unknown
#PARENT: Gdk.NotifyType
#COMMENT: an unknown type of enter/leave event occurred.
#NAME: y_root
#PARENT: Gdk.drag_motion.gboolean
#COMMENT: the y position of the pointer in root coordinates
#NAME: equal
#PARENT: Gdk.Color
#COMMENT: Compares two colors.
#NAME: watch
#PARENT: Gdk.CursorType
#COMMENT: ![](watch.png)
#NAME: selection
#PARENT: Gdk.Event
#COMMENT: a #GdkEventSelection
#NAME: set_shadow_width
#PARENT: Gdk.Window
#COMMENT: Newer GTK+ windows using client-side decorations use extra geometry
around their frames for effects like shadows and invisible borders.
Window managers that want to maximize windows or snap to edges need
to know where the extents of the actual frame lie, so that users
don’t feel like windows are snapping against random invisible edges.

Note that this property is automatically updated by GTK+, so this
function should only be used by applications which do not use GTK+
to create toplevel windows.
#NAME: color
#PARENT: Gdk.cairo_set_source_color.none
#COMMENT: a #GdkColor
#NAME: get_font_options
#PARENT: Gdk.Screen
#COMMENT: Gets any options previously set with gdk_screen_set_font_options().
#NAME: get_root_origin
#PARENT: Gdk.Window
#COMMENT: Obtains the top-left corner of the window manager frame in root
window coordinates.
#NAME: lock_mask
#PARENT: Gdk.ModifierType
#COMMENT: a Lock key (depending on the modifier mapping of the
 X server this may either be CapsLock or ShiftLock).
#NAME: width_mm
#PARENT: Gdk.Screen
#COMMENT: Returns the width of the default screen in millimeters.
Note that on many X servers this value will not be correct.
#NAME: ScrollDirection
#PARENT: Gdk
#COMMENT: Specifies the direction for #GdkEventScroll.
#NAME: data
#PARENT: Gdk.threads_add_idle_full.guint
#COMMENT: data to pass to @function
#NAME: smooth_scroll_mask
#PARENT: Gdk.EventMask
#COMMENT: receive smooth scrolling events. Since 3.4
#NAME: height
#PARENT: Gdk.Window.constrain_size.none
#COMMENT: desired height of the window
#NAME: move_resize
#PARENT: Gdk.Window
#COMMENT: Equivalent to calling gdk_window_move() and gdk_window_resize(),
except that both operations are performed at once, avoiding strange
visual effects. (i.e. the user may be able to see the window first
move, then resize, if you don’t use gdk_window_move_resize().)
#NAME: display
#PARENT: Gdk.Display.is_closed.gboolean
#COMMENT: a #GdkDisplay
#NAME: inferior
#PARENT: Gdk.NotifyType
#COMMENT: the window is entered from an inferior or
  left towards an inferior.
#NAME: get_clip_region
#PARENT: Gdk.Window.get_clip_region
#COMMENT: a #cairo_region_t. This must be freed with cairo_region_destroy()
         when you are done.
#NAME: consumed_modifiers
#PARENT: Gdk.Keymap.translate_keyboard_state.gboolean
#COMMENT: return location for modifiers
    that were used to determine the group or level, or %NULL
#NAME: x
#PARENT: Gdk.Window.reparent.none
#COMMENT: X location inside the new parent
#NAME: get_entries_for_keycode
#PARENT: Gdk.Keymap.get_entries_for_keycode
#COMMENT: %TRUE if there were any entries
#NAME: win_x
#PARENT: Gdk.Display.get_window_at_pointer.Window
#COMMENT: return location for x coordinate of the pointer location relative
   to the window origin, or %NULL
#NAME: screen
#PARENT: Gdk.Screen.get_window_stack.Window
#COMMENT: a #GdkScreen
#NAME: y
#PARENT: Gdk.Window.reparent.none
#COMMENT: Y location inside the new parent
#NAME: data
#PARENT: Gdk.threads_add_timeout_full.guint
#COMMENT: data to pass to @function
#NAME: win_y
#PARENT: Gdk.Display.get_window_at_pointer.Window
#COMMENT: return location for y coordinate of the pointer location relative
 &    to the window origin, or %NULL
#NAME: expose
#PARENT: Gdk.Event
#COMMENT: a #GdkEventExpose
#NAME: touch_end
#PARENT: Gdk.CrossingMode
#COMMENT: crossing because a touch sequence has ended,
  this event is synthetic as the pointer might have not left the window.
#NAME: set_geometry_hints
#PARENT: Gdk.Window
#COMMENT: Sets the geometry hints for @window. Hints flagged in @geom_mask
are set, hints not flagged in @geom_mask are unset.
To unset all hints, use a @geom_mask of 0 and a @geometry of %NULL.

This function provides hints to the windowing system about
acceptable sizes for a toplevel window. The purpose of
this is to constrain user resizing, but the windowing system
will typically  (but is not required to) also constrain the
current size of the window to the provided values and
constrain programatic resizing via gdk_window_resize() or
gdk_window_move_resize().

Note that on X11, this effect has no effect on windows
of type %GDK_WINDOW_TEMP or windows where override redirect
has been turned on via gdk_window_set_override_redirect()
since these windows are not resizable by the user.

Since you can’t count on the windowing system doing the
constraints for programmatic resizes, you should generally
call gdk_window_constrain_size() yourself to determine
appropriate sizes.
#NAME: damage
#PARENT: Gdk.EventType
#COMMENT: the content of the window has been changed. This event type
  was added in 2.14.
#NAME: PRIORITY_REDRAW
#PARENT: Gdk
#COMMENT: This is the priority that the idle handler processing window updates
is given in the
[GLib Main Loop][glib-The-Main-Event-Loop].
#NAME: visual_types
#PARENT: Gdk.query_visual_types.none
#COMMENT: return
    location for the available visual types
#NAME: leftbutton
#PARENT: Gdk.CursorType
#COMMENT: ![](leftbutton.png)
#NAME: screen
#PARENT: Gdk.Screen.get_height.gint
#COMMENT: a #GdkScreen
#NAME: get_frame_time
#PARENT: Gdk.FrameClock
#COMMENT: Gets the time that should currently be used for animations.  Inside
the processing of a frame, it’s the time used to compute the
animation position of everything in a frame. Outside of a frame, it's
the time of the conceptual “previous frame,” which may be either
the actual previous frame time, or if that’s too old, an updated
time.
#NAME: window
#PARENT: Gdk.Window.set_opaque_region.none
#COMMENT: a top-level or non-native #GdkWindow
#NAME: time_
#PARENT: Gdk.selection_convert.none
#COMMENT: the timestamp to use when retrieving the
  selection. The selection owner may refuse the
  request if it did not own the selection at
  the time indicated by the timestamp.
#NAME: mod4_mask
#PARENT: Gdk.ModifierType
#COMMENT: the seventh modifier key (it depends on the modifier
 mapping of the X server which key is interpreted as this modifier).
#NAME: get_current_timings
#PARENT: Gdk.FrameClock.get_current_timings
#COMMENT: the #GdkFrameTimings for the frame currently
 being processed, or even no frame is being processed, for the
 previous frame. Before any frames have been procesed, returns
 %NULL.
#NAME: foreign
#PARENT: Gdk.WindowType
#COMMENT: foreign window (see gdk_window_foreign_new())
#NAME: get_best_with_both
#PARENT: Gdk.Visual
#COMMENT: Combines gdk_visual_get_best_with_depth() and
gdk_visual_get_best_with_type().
#NAME: length
#PARENT: Gdk.text_property_to_utf8_list_for_display.gint
#COMMENT: the length of @text, in bytes
#NAME: keycode
#PARENT: Gdk.Event.get_keycode.gboolean
#COMMENT: location to store the keycode
#NAME: device
#PARENT: Gdk.Device.get_axis.gboolean
#COMMENT: a #GdkDevice
#NAME: name
#PARENT: Gdk.Screen.get_setting.gboolean
#COMMENT: the name of the setting
#NAME: frame_clock
#PARENT: Gdk.FrameClock.request_phase.none
#COMMENT: a #GdkFrameClock
#NAME: window
#PARENT: Gdk.EventTouch
#COMMENT: the window which received the event
#NAME: all_monitors
#PARENT: Gdk.FullscreenMode
#COMMENT: Span across all monitors when fullscreen.
#NAME: get_device_position
#PARENT: Gdk.Window.get_device_position
#COMMENT: The window underneath @device
(as with gdk_device_get_window_at_position()), or %NULL if the
window is not known to GDK.
#NAME: geometry
#PARENT: Gdk.Window.set_geometry_hints.none
#COMMENT: geometry hints
#NAME: get_selected_action
#PARENT: Gdk.DragContext
#COMMENT: Determines the action chosen by the drag destination.
#NAME: notification
#PARENT: Gdk.WindowTypeHint
#COMMENT: A notification - typically a “bubble”
 that belongs to a status icon.
#NAME: cairo_get_clip_rectangle
#PARENT: Gdk
#COMMENT: This is a convenience function around cairo_clip_extents().
It rounds the clip extents to integer coordinates and returns
a boolean indicating if a clip area exists.
#NAME: cairo_region_create_from_surface
#PARENT: Gdk.cairo_region_create_from_surface
#COMMENT: A #cairo_region_t; must be freed with cairo_region_destroy()
#NAME: base_time
#PARENT: Gdk.FrameClock.get_refresh_info.none
#COMMENT: base time for determining a presentaton time
#NAME: south_east
#PARENT: Gdk.WindowEdge
#COMMENT: the lower right corner.
#NAME: pointer_is_grabbed
#PARENT: Gdk
#COMMENT: Returns %TRUE if the pointer on the default display is currently
grabbed by this application.

Note that this does not take the inmplicit pointer grab on button
presses into account.
#NAME: user_data
#PARENT: Gdk.Window.get_children_with_user_data.Window
#COMMENT: user data to look for
#NAME: p1
#PARENT: Gdk.RGBA.equal.gboolean
#COMMENT: a #GdkRGBA pointer
#NAME: time_
#PARENT: Gdk.selection_send_notify.none
#COMMENT: timestamp.
#NAME: time_
#PARENT: Gdk.selection_send_notify_for_display.none
#COMMENT: timestamp
#NAME: button2_motion_mask
#PARENT: Gdk.EventMask
#COMMENT: receive pointer motion events while 2 button is pressed
#NAME: right_side
#PARENT: Gdk.CursorType
#COMMENT: ![](right_side.png)
#NAME: p2
#PARENT: Gdk.RGBA.equal.gboolean
#COMMENT: another #GdkRGBA pointer
#NAME: get_frame_clock
#PARENT: Gdk.Window
#COMMENT: Gets the frame clock for the window. The frame clock for a window
never changes unless the window is reparented to a new toplevel
window.
#NAME: display
#PARENT: Gdk.Display.notify_startup_complete.none
#COMMENT: a #GdkDisplay
#NAME: get_default_group
#PARENT: Gdk.Display.get_default_group
#COMMENT: The default group leader window
for @display
#NAME: copy
#PARENT: Gdk.Color.copy
#COMMENT: a copy of @color
#NAME: to_string
#PARENT: Gdk.Color
#COMMENT: Returns a textual specification of @color in the hexadecimal
form “\#rrrrggggbbbb” where “r”, “g” and “b” are hex digits
representing the red, green and blue components respectively.

The returned string can be parsed by gdk_color_parse().
#NAME: get_group
#PARENT: Gdk.Window
#COMMENT: Returns the group leader window for @window. See gdk_window_set_group().
#NAME: window
#PARENT: Gdk.Window.set_child_input_shapes.none
#COMMENT: a #GdkWindow
#NAME: color
#PARENT: Gdk.color_parse.gboolean
#COMMENT: the #GdkColor to fill in
#NAME: grab_broken
#PARENT: Gdk.EventType
#COMMENT: a pointer or keyboard grab was broken. This event type
  was added in 2.8.
#NAME: event_compression
#PARENT: Gdk.Window.set_event_compression.none
#COMMENT: %TRUE if motion events should be compressed
#NAME: product-id
#PARENT: Gdk.Device
#COMMENT: Product ID of this device, see gdk_device_get_product_id().
#NAME: new_from_surface
#PARENT: Gdk.Cursor
#COMMENT: Creates a new cursor from a cairo image surface.

Not all GDK backends support RGBA cursors. If they are not
supported, a monochrome approximation will be displayed.
The functions gdk_display_supports_cursor_alpha() and
gdk_display_supports_cursor_color() can be used to determine
whether RGBA cursors are supported;
gdk_display_get_default_cursor_size() and
gdk_display_get_maximal_cursor_size() give information about
cursor sizes.

On the X backend, support for RGBA cursors requires a
sufficently new version of the X Render extension.
#NAME: iconified
#PARENT: Gdk.WindowState
#COMMENT: the window is minimized.
#NAME: selection_owner_set_for_display
#PARENT: Gdk
#COMMENT: Sets the #GdkWindow @owner as the current owner of the selection @selection.
#NAME: window
#PARENT: Gdk.Window.get_focus_on_map.gboolean
#COMMENT: a toplevel #GdkWindow.
#NAME: display
#PARENT: Gdk.Display.warp_pointer.none
#COMMENT: a #GdkDisplay
#NAME: north_east
#PARENT: Gdk.WindowEdge
#COMMENT: the top right corner.
#NAME: event_mask
#PARENT: Gdk.pointer_grab.GrabStatus
#COMMENT: specifies the event mask, which is used in accordance with
             @owner_events. Note that only pointer events (i.e. button and motion events)
             may be selected.
#NAME: EventProperty
#PARENT: Gdk
#COMMENT: Describes a property change on a window.
#NAME: icon
#PARENT: Gdk.AppLaunchContext.set_icon.none
#COMMENT: a #GIcon, or %NULL
#NAME: window
#PARENT: Gdk.EventProximity
#COMMENT: the window which received the event.
#NAME: EventScroll
#PARENT: Gdk
#COMMENT: Generated from button presses for the buttons 4 to 7. Wheel mice are
usually configured to generate button press events for buttons 4 and 5
when the wheel is turned.

Some GDK backends can also generate “smooth” scroll events, which
can be recognized by the %GDK_SCROLL_SMOOTH scroll direction. For
these, the scroll deltas can be obtained with
gdk_event_get_scroll_deltas().
#NAME: x
#PARENT: Gdk.Window.move.none
#COMMENT: X coordinate relative to window’s parent
#NAME: min_height
#PARENT: Gdk.Geometry
#COMMENT: minimum height of window (or -1 to use requisition, with
 #GtkWindow only)
#NAME: y
#PARENT: Gdk.Window.move.none
#COMMENT: Y coordinate relative to window’s parent
#NAME: index_ranges
#PARENT: Gdk.pango_layout_get_clip_region.cairo.Region
#COMMENT: array of byte indexes into the layout, where even members of array are start indexes and odd elements are end indexes
#NAME: enter_fn
#PARENT: Gdk.threads_set_lock_functions.none
#COMMENT: function called to guard GDK
#NAME: notify
#PARENT: Gdk.threads_add_timeout_full.guint
#COMMENT: function to call when the timeout is removed, or %NULL
#NAME: scroll
#PARENT: Gdk.Window
#COMMENT: Scroll the contents of @window, both pixels and children, by the
given amount. @window itself does not move. Portions of the window
that the scroll operation brings in from offscreen areas are
invalidated. The invalidated region may be bigger than what would
strictly be necessary.

For X11, a minimum area will be invalidated if the window has no
subwindows, or if the edges of the window’s parent do not extend
beyond the edges of the window. In other cases, a multi-step process
is used to scroll the window which may produce temporary visual
artifacts and unnecessary invalidations.
#NAME: width_mm
#PARENT: Gdk.Screen.width_mm
#COMMENT: the width of the default screen in millimeters,
though it is not always correct.
#NAME: modifier_reserved_20_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: list_visuals
#PARENT: Gdk.list_visuals
#COMMENT: 
    a list of visuals; the list must be freed, but not its contents
#NAME: visual
#PARENT: Gdk.Visual.get_screen.Screen
#COMMENT: a #GdkVisual
#NAME: normal
#PARENT: Gdk.CrossingMode
#COMMENT: crossing because of pointer motion.
#NAME: display
#PARENT: Gdk.Cursor.new_from_name.Cursor
#COMMENT: the #GdkDisplay for which the cursor will be created
#NAME: compatible
#PARENT: Gdk.GLContext.set_forward_compatible.none
#COMMENT: whether the context should be forward compatible
#NAME: reparent
#PARENT: Gdk.Window
#COMMENT: Reparents @window into the given @new_parent. The window being
reparented will be unmapped as a side effect.
#NAME: right_ptr
#PARENT: Gdk.CursorType
#COMMENT: ![](right_ptr.png)
#NAME: parse
#PARENT: Gdk.RGBA
#COMMENT: Parses a textual representation of a color, filling in
the @red, @green, @blue and @alpha fields of the @rgba #GdkRGBA.

The string can be either one of:
- A standard name (Taken from the X11 rgb.txt file).
- A hexadecimal value in the form “\#rgb”, “\#rrggbb”,
  “\#rrrgggbbb” or ”\#rrrrggggbbbb”
- A RGB color in the form “rgb(r,g,b)” (In this case the color will
  have full opacity)
- A RGBA color in the form “rgba(r,g,b,a)”

Where “r”, “g”, “b” and “a” are respectively the red, green, blue and
alpha color values. In the last two cases, r g and b are either integers
in the range 0 to 255 or precentage values in the range 0% to 100%, and
a is a floating point value in the range 0 to 1.
#NAME: event
#PARENT: Gdk.Event.get_device.Device
#COMMENT: a #GdkEvent.
#NAME: send_event
#PARENT: Gdk.EventOwnerChange
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: index_
#PARENT: Gdk.Device.set_axis_use.none
#COMMENT: the index of the axis
#NAME: x
#PARENT: Gdk.Window.get_root_coords.none
#COMMENT: X coordinate in window
#NAME: sb_h_double_arrow
#PARENT: Gdk.CursorType
#COMMENT: ![](sb_h_double_arrow.png)
#NAME: y
#PARENT: Gdk.Window.get_root_coords.none
#COMMENT: Y coordinate in window
#NAME: height_mm
#PARENT: Gdk.Screen
#COMMENT: Returns the height of the default screen in millimeters.
Note that on many X servers this value will not be correct.
#NAME: _get_distance
#PARENT: Gdk.Event._get_distance
#COMMENT: %TRUE if the distance could be calculated.
#NAME: get_program_class
#PARENT: Gdk.get_program_class
#COMMENT: the program class.
#NAME: time_
#PARENT: Gdk.selection_owner_set.gboolean
#COMMENT: timestamp to use when setting the selection.
  If this is older than the timestamp given last
  time the owner was set for the given selection, the
  request will be ignored.
#NAME: open
#PARENT: Gdk.Display.open
#COMMENT: a #GdkDisplay, or %NULL if the
    display could not be opened
#NAME: set_icon_name
#PARENT: Gdk.AppLaunchContext
#COMMENT: Sets the icon for applications that are launched with this context.
The @icon_name will be interpreted in the same way as the Icon field
in desktop files. See also gdk_app_launch_context_set_icon().

If both @icon and @icon_name are set, the @icon_name takes priority.
If neither @icon or @icon_name is set, the icon is taken from either
the file that is passed to launched application or from the #GAppInfo
for the launched application itself.
#NAME: device-changed
#PARENT: Gdk.DeviceManager
#COMMENT: The ::device-changed signal is emitted whenever a device
has changed in the hierarchy, either slave devices being
disconnected from their master device or connected to
another one, or master devices being added or removed
a slave device.

If a slave device is detached from all master devices
(gdk_device_get_associated_device() returns %NULL), its
#GdkDeviceType will change to %GDK_DEVICE_TYPE_FLOATING,
if it's attached, it will change to %GDK_DEVICE_TYPE_SLAVE.
#NAME: combo
#PARENT: Gdk.WindowTypeHint
#COMMENT: A popup from a combo box.
#NAME: make_display_name
#PARENT: Gdk.Screen
#COMMENT: Determines the name to pass to gdk_display_open() to get
a #GdkDisplay with this screen as the default screen.
#NAME: action
#PARENT: Gdk.EventSetting
#COMMENT: what happened to the setting (%GDK_SETTING_ACTION_NEW,
  %GDK_SETTING_ACTION_CHANGED or %GDK_SETTING_ACTION_DELETED).
#NAME: hardware_keycode
#PARENT: Gdk.Keymap.get_entries_for_keycode.gboolean
#COMMENT: a keycode
#NAME: for_window
#PARENT: Gdk.cairo_surface_create_from_pixbuf.cairo.Surface
#COMMENT: The window this will be drawn to, or %NULL
#NAME: south_west
#PARENT: Gdk.Gravity
#COMMENT: the reference point is at the lower left corner.
#NAME: flush-events
#PARENT: Gdk.FrameClock
#COMMENT: This signal is used to flush pending motion events that
are being batched up and compressed together. Applications
should not handle this signal.
#NAME: get_width
#PARENT: Gdk.Screen
#COMMENT: Gets the width of @screen in pixels
#NAME: display-opened
#PARENT: Gdk.DisplayManager
#COMMENT: The ::display-opened signal is emitted when a display is opened.
#NAME: get_visual
#PARENT: Gdk.Window
#COMMENT: Gets the #GdkVisual describing the pixel format of @window.
#NAME: mode
#PARENT: Gdk.EventCrossing
#COMMENT: the crossing mode (%GDK_CROSSING_NORMAL, %GDK_CROSSING_GRAB,
 %GDK_CROSSING_UNGRAB, %GDK_CROSSING_GTK_GRAB, %GDK_CROSSING_GTK_UNGRAB or
 %GDK_CROSSING_STATE_CHANGED).  %GDK_CROSSING_GTK_GRAB, %GDK_CROSSING_GTK_UNGRAB,
 and %GDK_CROSSING_STATE_CHANGED were added in 2.14 and are always synthesized,
 never native.
#NAME: begin_paint_region
#PARENT: Gdk.Window
#COMMENT: Indicates that you are beginning the process of redrawing @region.
A backing store (offscreen buffer) large enough to contain @region
will be created. The backing store will be initialized with the
background color or background surface for @window. Then, all
drawing operations performed on @window will be diverted to the
backing store.  When you call gdk_window_end_paint(), the backing
store will be copied to @window, making it visible onscreen. Only
the part of @window contained in @region will be modified; that is,
drawing operations are clipped to @region.

The net result of all this is to remove flicker, because the user
sees the finished product appear all at once when you call
gdk_window_end_paint(). If you draw to @window directly without
calling gdk_window_begin_paint_region(), the user may see flicker
as individual drawing operations are performed in sequence.  The
clipping and background-initializing features of
gdk_window_begin_paint_region() are conveniences for the
programmer, so you can avoid doing that work yourself.

When using GTK+, the widget system automatically places calls to
gdk_window_begin_paint_region() and gdk_window_end_paint() around
emissions of the expose_event signal. That is, if you’re writing an
expose event handler, you can assume that the exposed area in
#GdkEventExpose has already been cleared to the window background,
is already set as the clip region, and already has a backing store.
Therefore in most cases, application code need not call
gdk_window_begin_paint_region(). (You can disable the automatic
calls around expose events on a widget-by-widget basis by calling
gtk_widget_set_double_buffered().)

If you call this function multiple times before calling the
matching gdk_window_end_paint(), the backing stores are pushed onto
a stack. gdk_window_end_paint() copies the topmost backing store
onscreen, subtracts the topmost region from all other regions in
the stack, and pops the stack. All drawing operations affect only
the topmost backing store in the stack. One matching call to
gdk_window_end_paint() is required for each call to
gdk_window_begin_paint_region().
#NAME: x_root
#PARENT: Gdk.EventButton
#COMMENT: the x coordinate of the pointer relative to the root of the
  screen.
#NAME: context
#PARENT: Gdk.GLContext.get_version.none
#COMMENT: a #GdkGLContext
#NAME: phase
#PARENT: Gdk.FrameClock.request_phase.none
#COMMENT: the phase that is requested
#NAME: window
#PARENT: Gdk.Window.get_state.WindowState
#COMMENT: a #GdkWindow
#NAME: keycode
#PARENT: Gdk.KeymapKey
#COMMENT: the hardware keycode. This is an identifying number for a
  physical key.
#NAME: get_window_type
#PARENT: Gdk.Window
#COMMENT: Gets the type of the window. See #GdkWindowType.
#NAME: window
#PARENT: Gdk.Window.set_icon_name.none
#COMMENT: a toplevel #GdkWindow
#NAME: set_static_gravities
#PARENT: Gdk.Window.set_static_gravities
#COMMENT: %FALSE
#NAME: count
#PARENT: Gdk.query_depths.none
#COMMENT: return location for number of available depths
#NAME: north_west
#PARENT: Gdk.Gravity
#COMMENT: the reference point is at the top left corner.
#NAME: have_bidi_layouts
#PARENT: Gdk.Keymap
#COMMENT: Determines if keyboard layouts for both right-to-left and left-to-right
languages are in use.
#NAME: device
#PARENT: Gdk.Device.ungrab.none
#COMMENT: a #GdkDevice
#NAME: window
#PARENT: Gdk.Window.set_shadow_width.none
#COMMENT: a #GdkWindow
#NAME: add_virtual_modifiers
#PARENT: Gdk.Keymap
#COMMENT: Maps the non-virtual modifiers (i.e Mod2, Mod3, ...) which are set
in @state to the virtual modifiers (i.e. Super, Hyper and Meta) and
set the corresponding bits in @state.

GDK already does this before delivering key events, but for
compatibility reasons, it only sets the first virtual modifier
it finds, whereas this function sets all matching virtual modifiers.

This function is useful when matching key events against
accelerators.
#NAME: selection_owner_set
#PARENT: Gdk.selection_owner_set
#COMMENT: %TRUE if the selection owner was successfully
  changed to @owner, otherwise %FALSE.
#NAME: resizeh
#PARENT: Gdk.WMDecoration
#COMMENT: the frame should have resize handles.
#NAME: pseudo_color
#PARENT: Gdk.VisualType
#COMMENT: Each pixel is an index into a color map that
    maps pixel values into rgb values. The color map can be changed by
    an application.
#NAME: display
#PARENT: Gdk.Display.peek_event.Event
#COMMENT: a #GdkDisplay
#NAME: get_scroll_direction
#PARENT: Gdk.Event.get_scroll_direction
#COMMENT: %TRUE if the event delivered a scroll direction
#NAME: FrameClockPhase
#PARENT: Gdk
#COMMENT: #GdkFrameClockPhase is used to represent the different paint clock
phases that can be requested. The elements of the enumeration
correspond to the signals of #GdkFrameClock.
#NAME: win32_dropfiles
#PARENT: Gdk.DragProtocol
#COMMENT: The simple WM_DROPFILES protocol.
#NAME: ensure_native
#PARENT: Gdk.Window
#COMMENT: Tries to ensure that there is a window-system native window for this
GdkWindow. This may fail in some situations, returning %FALSE.

Offscreen window and children of them can never have native windows.

Some backends may not support native child windows.
#NAME: get_scale_factor
#PARENT: Gdk.Window.get_scale_factor
#COMMENT: the scale factor
#NAME: presentation_time_return
#PARENT: Gdk.FrameClock.get_refresh_info.none
#COMMENT: a location to store the next
 candidate presentation time after the given base time.
 0 will be will be stored if no history is present.
#NAME: get_n_axes
#PARENT: Gdk.Device
#COMMENT: Returns the number of axes the device currently has.
#NAME: get_n_screens
#PARENT: Gdk.Display
#COMMENT: Gets the number of screen managed by the @display.
#NAME: data
#PARENT: Gdk.threads_add_timeout_seconds_full.guint
#COMMENT: data to pass to @function
#NAME: window
#PARENT: Gdk.Window.set_static_gravities.gboolean
#COMMENT: a #GdkWindow
#NAME: device
#PARENT: Gdk.Window.get_device_cursor.Cursor
#COMMENT: a master, pointer #GdkDevice.
#NAME: get_default
#PARENT: Gdk.Screen
#COMMENT: Gets the default screen for the default display. (See
gdk_display_get_default ()).
#NAME: send_event
#PARENT: Gdk.EventProperty
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: update_children
#PARENT: Gdk.Window.process_updates.none
#COMMENT: whether to also process updates for child windows
#NAME: device
#PARENT: Gdk.Device.get_window_at_position_double.Window
#COMMENT: pointer #GdkDevice to query info to.
#NAME: win_x
#PARENT: Gdk.Device.get_window_at_position.Window
#COMMENT: return location for the X coordinate of the device location,
        relative to the window origin, or %NULL.
#NAME: win_y
#PARENT: Gdk.Device.get_window_at_position.Window
#COMMENT: return location for the Y coordinate of the device location,
        relative to the window origin, or %NULL.
#NAME: get_height
#PARENT: Gdk.Screen
#COMMENT: Gets the height of @screen in pixels
#NAME: sb_v_double_arrow
#PARENT: Gdk.CursorType
#COMMENT: ![](sb_v_double_arrow.png)
#NAME: set_mode
#PARENT: Gdk.Device.set_mode
#COMMENT: %TRUE if the mode was successfully changed.
#NAME: AppLaunchContext
#PARENT: Gdk
#COMMENT: GdkAppLaunchContext is an implementation of #GAppLaunchContext that
handles launching an application in a graphical context. It provides
startup notification and allows to launch applications on a specific
screen or workspace.

## Launching an application

|[<!-- language="C" -->
GdkAppLaunchContext *context;

context = gdk_display_get_app_launch_context (display);

gdk_app_launch_context_set_screen (screen);
gdk_app_launch_context_set_timestamp (event->time);

if (!g_app_info_launch_default_for_uri ("http://www.gtk.org", context, &error))
  g_warning ("Launching failed: %s\n", error->message);

g_object_unref (context);
]|
#NAME: button
#PARENT: Gdk.EventButton
#COMMENT: the button which was pressed or released, numbered from 1 to 5.
  Normally button 1 is the left mouse button, 2 is the middle button,
  and 3 is the right button. On 2-button mice, the middle button can
  often be simulated by pressing both mouse buttons together.
#NAME: time
#PARENT: Gdk.EventSelection
#COMMENT: the time of the event in milliseconds.
#NAME: setting
#PARENT: Gdk.Window.set_keep_below.none
#COMMENT: whether to keep @window below other windows
#NAME: window
#PARENT: Gdk.pixbuf_get_from_window.GdkPixbuf.Pixbuf
#COMMENT: Source window
#NAME: sync
#PARENT: Gdk.Display
#COMMENT: Flushes any requests queued for the windowing system and waits until all
requests have been handled. This is often used for making sure that the
display is synchronized with the current state of the program. Calling
gdk_display_sync() before gdk_error_trap_pop() makes sure that any errors
generated from earlier requests are handled before the error trap is
removed.

This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.
#NAME: p
#PARENT: Gdk.RGBA.hash.guint
#COMMENT: a #GdkRGBA pointer
#NAME: atom_name
#PARENT: Gdk.atom_intern.Atom
#COMMENT: a string.
#NAME: get_scroll_lock_state
#PARENT: Gdk.Keymap
#COMMENT: Returns whether the Scroll Lock modifer is locked.
#NAME: frame_clock
#PARENT: Gdk.FrameClock.get_frame_time.gint64
#COMMENT: a #GdkFrameClock
#NAME: screen
#PARENT: Gdk.Screen.get_font_options.cairo.FontOptions
#COMMENT: a #GdkScreen
#NAME: withdraw
#PARENT: Gdk.Window
#COMMENT: Withdraws a window (unmaps it and asks the window manager to forget about it).
This function is not really useful as gdk_window_hide() automatically
withdraws toplevel windows before hiding them.
#NAME: screen
#PARENT: Gdk.Screen.set_font_options.none
#COMMENT: a #GdkScreen
#NAME: north
#PARENT: Gdk.Gravity
#COMMENT: the reference point is in the middle of the top edge.
#NAME: context
#PARENT: Gdk.GLContext.set_forward_compatible.none
#COMMENT: a #GdkGLContext
#NAME: skips_pager
#PARENT: Gdk.Window.set_skip_pager_hint.none
#COMMENT: %TRUE to skip the pager
#NAME: keyboard_grab
#PARENT: Gdk
#COMMENT: Grabs the keyboard so that all events are passed to this
application until the keyboard is ungrabbed with gdk_keyboard_ungrab().
This overrides any previous keyboard grab by this client.

If you set up anything at the time you take the grab that needs to be cleaned
up when the grab ends, you should handle the #GdkEventGrabBroken events that
are emitted when the grab ends unvoluntarily.
#NAME: pixbuf_get_from_surface
#PARENT: Gdk
#COMMENT: Transfers image data from a #cairo_surface_t and converts it to an RGB(A)
representation inside a #GdkPixbuf. This allows you to efficiently read
individual pixels from cairo surfaces. For #GdkWindows, use
gdk_pixbuf_get_from_window() instead.

This function will create an RGB pixbuf with 8 bits per channel.
The pixbuf will contain an alpha channel if the @surface contains one.
#NAME: utf8_to_string_target
#PARENT: Gdk
#COMMENT: Converts an UTF-8 string into the best possible representation
as a STRING. The representation of characters not in STRING
is not specified; it may be as pseudo-escape sequences
\x{ABCD}, or it may be in some other form of approximation.
#NAME: window
#PARENT: Gdk.EventScroll
#COMMENT: the window which received the event.
#NAME: list_slave_devices
#PARENT: Gdk.Device.list_slave_devices
#COMMENT: 
         the list of slave devices, or %NULL. The list must be
         freed with g_list_free(), the contents of the list are
         owned by GTK+ and should not be freed.
#NAME: x
#PARENT: Gdk.events_get_center.gboolean
#COMMENT: return location for the X coordinate of the center
#NAME: button
#PARENT: Gdk.test_simulate_button.gboolean
#COMMENT: Number of the pointer button for the event, usually 1, 2 or 3
#NAME: resume-events
#PARENT: Gdk.FrameClock
#COMMENT: This signal is emitted after processing of the frame is
finished, and is handled internally by GTK+ to resume normal
event processing. Applications should not handle this signal.
#NAME: y
#PARENT: Gdk.events_get_center.gboolean
#COMMENT: return location for the Y coordinate of the center
#NAME: south
#PARENT: Gdk.Gravity
#COMMENT: the reference point is at the middle of the lower edge.
#NAME: nelements
#PARENT: Gdk.property_change.none
#COMMENT: the number of elements of size determined by the format,
  contained in @data.
#NAME: get_background_pattern
#PARENT: Gdk.Window.get_background_pattern
#COMMENT: The pattern to use for the
background or %NULL to use the parent’s background.
#NAME: get_display
#PARENT: Gdk.Cursor
#COMMENT: Returns the display on which the #GdkCursor is defined.
#NAME: src1
#PARENT: Gdk.rectangle_union.none
#COMMENT: a #GdkRectangle
#NAME: src2
#PARENT: Gdk.rectangle_union.none
#COMMENT: a #GdkRectangle
#NAME: display
#PARENT: Gdk.Display.set_double_click_distance.none
#COMMENT: a #GdkDisplay
#NAME: use
#PARENT: Gdk.Device.get_axis.gboolean
#COMMENT: the use to look for
#NAME: type
#PARENT: Gdk.EventTouch
#COMMENT: the type of the event (%GDK_TOUCH_BEGIN, %GDK_TOUCH_UPDATE,
  %GDK_TOUCH_END, %GDK_TOUCH_CANCEL)
#NAME: supports_selection_notification
#PARENT: Gdk.Display.supports_selection_notification
#COMMENT: whether #GdkEventOwnerChange events will
              be sent.
#NAME: Screen
#PARENT: Gdk
#COMMENT: #GdkScreen objects are the GDK representation of the screen on
which windows can be displayed and on which the pointer moves.
X originally identified screens with physical screens, but
nowadays it is more common to have a single #GdkScreen which
combines several physical monitors (see gdk_screen_get_n_monitors()).

GdkScreen is used throughout GDK and GTK+ to specify which screen
the top level windows are to be displayed on. it is also used to
query the screen specification and default settings such as
the default visual (gdk_screen_get_system_visual()), the dimensions
of the physical monitors (gdk_screen_get_monitor_geometry()), etc.
#NAME: get_primary_monitor
#PARENT: Gdk.Screen
#COMMENT: Gets the primary monitor for @screen.  The primary monitor
is considered the monitor where the “main desktop” lives.
While normal application windows typically allow the window
manager to place the windows, specialized desktop applications
such as panels should place themselves on the primary monitor.

If no primary monitor is configured by the user, the return value
will be 0, defaulting to the first monitor.
#NAME: data
#PARENT: Gdk.EventFunc.none
#COMMENT: user data set when the event handler was installed with
  gdk_event_handler_set().
#NAME: window
#PARENT: Gdk.Window.move.none
#COMMENT: a #GdkWindow
#NAME: set_skip_pager_hint
#PARENT: Gdk.Window
#COMMENT: Toggles whether a window should appear in a pager (workspace
switcher, or other desktop utility program that displays a small
thumbnail representation of the windows on the desktop). If a
window’s semantic type as specified with gdk_window_set_type_hint()
already fully describes the window, this function should
not be called in addition, instead you should
allow the window to be treated according to standard policy for
its semantic type.
#NAME: get_toplevel_windows
#PARENT: Gdk.Screen
#COMMENT: Obtains a list of all toplevel windows known to GDK on the screen @screen.
A toplevel window is a child of the root window (see
gdk_get_default_root_window()).

The returned list should be freed with g_list_free(), but
its elements need not be freed.
#NAME: get_active_window
#PARENT: Gdk.Screen.get_active_window
#COMMENT: the currently active window,
  or %NULL.
#NAME: device
#PARENT: Gdk.Device.get_vendor_id.utf8
#COMMENT: a slave #GdkDevice
#NAME: get_device_manager
#PARENT: Gdk.Display.get_device_manager
#COMMENT: A #GdkDeviceManager, or
         %NULL. This memory is owned by GDK and must not be freed
         or unreferenced.
#NAME: button4_mask
#PARENT: Gdk.ModifierType
#COMMENT: the fourth mouse button.
#NAME: get_current_timings
#PARENT: Gdk.FrameClock
#COMMENT: Gets the frame timings for the current frame.
#NAME: get_state
#PARENT: Gdk.Event
#COMMENT: If the event contains a “state” field, puts that field in @state. Otherwise
stores an empty state (0). Returns %TRUE if there was a state field
in the event. @event may be %NULL, in which case it’s treated
as if the event had no state field.
#NAME: get_device_events
#PARENT: Gdk.Window.get_device_events
#COMMENT: device event mask for @window
#NAME: type
#PARENT: Gdk.EventVisibility
#COMMENT: the type of the event (%GDK_VISIBILITY_NOTIFY).
#NAME: win_x
#PARENT: Gdk.Device.get_window_at_position_double.Window
#COMMENT: return location for the X coordinate of the device location,
        relative to the window origin, or %NULL.
#NAME: win_y
#PARENT: Gdk.Device.get_window_at_position_double.Window
#COMMENT: return location for the Y coordinate of the device location,
        relative to the window origin, or %NULL.
#NAME: translate_keyboard_state
#PARENT: Gdk.Keymap.translate_keyboard_state
#COMMENT: %TRUE if there was a keyval bound to the keycode/state/group
#NAME: Display
#PARENT: Gdk
#COMMENT: #GdkDisplay objects purpose are two fold:

- To manage and provide information about input devices (pointers and keyboards)

- To manage and provide information about the available #GdkScreens

GdkDisplay objects are the GDK representation of an X Display,
which can be described as a workstation consisting of
a keyboard, a pointing device (such as a mouse) and one or more
screens.
It is used to open and keep track of various GdkScreen objects
currently instantiated by the application. It is also used to
access the keyboard(s) and mouse pointer(s) of the display.

Most of the input device handling has been factored out into
the separate #GdkDeviceManager object. Every display has a
device manager, which you can obtain using
gdk_display_get_device_manager().
#NAME: time
#PARENT: Gdk.TimeCoord
#COMMENT: The timestamp for this event.
#NAME: pixel
#PARENT: Gdk.Color
#COMMENT: For allocated colors, the pixel value used to
    draw this color on the screen. Not used anymore.
#NAME: none
#PARENT: Gdk.GrabOwnership
#COMMENT: All other devices’ events are allowed.
#NAME: pencil
#PARENT: Gdk.CursorType
#COMMENT: ![](pencil.png)
#NAME: x
#PARENT: Gdk.WindowAttr
#COMMENT: X coordinate relative to parent window (see gdk_window_move())
#NAME: y
#PARENT: Gdk.WindowAttr
#COMMENT: Y coordinate relative to parent window (see gdk_window_move())
#NAME: key
#PARENT: Gdk.Event
#COMMENT: a #GdkEventKey
#NAME: move_region
#PARENT: Gdk.Window
#COMMENT: Move the part of @window indicated by @region by @dy pixels in the Y
direction and @dx pixels in the X direction. The portions of @region
that not covered by the new position of @region are invalidated.

Child windows are not moved.
#NAME: get_device_manager
#PARENT: Gdk.Display
#COMMENT: Returns the #GdkDeviceManager associated to @display.
#NAME: event1
#PARENT: Gdk.events_get_center.gboolean
#COMMENT: first #GdkEvent
#NAME: event2
#PARENT: Gdk.events_get_center.gboolean
#COMMENT: second #GdkEvent
#NAME: threads_add_timeout_seconds_full
#PARENT: Gdk.threads_add_timeout_seconds_full
#COMMENT: the ID (greater than 0) of the event source.
#NAME: window
#PARENT: Gdk.Window.flush.none
#COMMENT: a #GdkWindow
#NAME: sizing
#PARENT: Gdk.CursorType
#COMMENT: ![](sizing.png)
#NAME: intent
#PARENT: Gdk.Keymap.get_modifier_mask.ModifierType
#COMMENT: the use case for the modifier mask
#NAME: direct_color
#PARENT: Gdk.VisualType
#COMMENT: Each pixel value contains red, green, and blue
    components as for %GDK_VISUAL_TRUE_COLOR, but the components are
    mapped via a color table into the final output table instead of
    being converted directly.
#NAME: context
#PARENT: Gdk.GLContext.make_current.none
#COMMENT: a #GdkGLContext
#NAME: dock
#PARENT: Gdk.WindowTypeHint
#COMMENT: Used for creating dock or panel windows.
#NAME: x
#PARENT: Gdk.Window.move_resize.none
#COMMENT: new X position relative to window’s parent
#NAME: device
#PARENT: Gdk.DragContext.set_device.none
#COMMENT: a #GdkDevice
#NAME: y
#PARENT: Gdk.Window.move_resize.none
#COMMENT: new Y position relative to window’s parent
#NAME: error_trap_pop
#PARENT: Gdk.error_trap_pop
#COMMENT: X error code or 0 on success
#NAME: property_change_mask
#PARENT: Gdk.EventMask
#COMMENT: receive property change events
#NAME: free_history
#PARENT: Gdk.Device
#COMMENT: Frees an array of #GdkTimeCoord that was returned by gdk_device_get_history().
#NAME: index_
#PARENT: Gdk.Device.set_key.none
#COMMENT: the index of the macro button to set
#NAME: window
#PARENT: Gdk.test_render_sync.none
#COMMENT: a mapped #GdkWindow
#NAME: visibility_notify
#PARENT: Gdk.EventType
#COMMENT: the window visibility status has changed.
#NAME: EventConfigure
#PARENT: Gdk
#COMMENT: Generated when a window size or position has changed.
#NAME: DeviceType
#PARENT: Gdk
#COMMENT: Indicates the device type. See [above][GdkDeviceManager.description]
for more information about the meaning of these device types.
#NAME: parent_x
#PARENT: Gdk.Window.coords_to_parent.none
#COMMENT: return location for X coordinate
in parent’s coordinate system, or %NULL
#NAME: pointer_is_grabbed
#PARENT: Gdk.Display
#COMMENT: Test if the pointer is grabbed.
#NAME: parent_y
#PARENT: Gdk.Window.coords_to_parent.none
#COMMENT: return location for Y coordinate
in parent’s coordinate system, or %NULL
#NAME: control_mask
#PARENT: Gdk.ModifierType
#COMMENT: the Control key.
#NAME: menu
#PARENT: Gdk.WMDecoration
#COMMENT: a button for opening a menu should be included.
#NAME: time_
#PARENT: Gdk.Display.keyboard_ungrab.none
#COMMENT: a timestap (e.g #GDK_CURRENT_TIME).
#NAME: selection_send_notify
#PARENT: Gdk
#COMMENT: Sends a response to SelectionRequest event.
#NAME: get_state
#PARENT: Gdk.Event.get_state
#COMMENT: %TRUE if there was a state field in the event
#NAME: is_destroyed
#PARENT: Gdk.Window.is_destroyed
#COMMENT: %TRUE if the window is destroyed
#NAME: not_available
#PARENT: Gdk.GLError
#COMMENT: OpenGL support is not available
#NAME: set_resolution
#PARENT: Gdk.Screen
#COMMENT: Sets the resolution for font handling on the screen. This is a
scale factor between points specified in a #PangoFontDescription
and cairo units. The default value is 96, meaning that a 10 point
font will be 13 units high. (10 * 96. / 72. = 13.3).
#NAME: confine_to
#PARENT: Gdk.pointer_grab.GrabStatus
#COMMENT: If non-%NULL, the pointer will be confined to this
             window during the grab. If the pointer is outside @confine_to, it will
             automatically be moved to the closest edge of @confine_to and enter
             and leave events will be generated as necessary.
#NAME: CrossingMode
#PARENT: Gdk
#COMMENT: Specifies the crossing mode for #GdkEventCrossing.
#NAME: success
#PARENT: Gdk.GrabStatus
#COMMENT: the resource was successfully grabbed.
#NAME: window
#PARENT: Gdk.Window.set_child_shapes.none
#COMMENT: a #GdkWindow
#NAME: keyval
#PARENT: Gdk.test_simulate_key.gboolean
#COMMENT: A GDK keyboard value
#NAME: EventMask
#PARENT: Gdk
#COMMENT: A set of bit-flags to indicate which events a window is to receive.
Most of these masks map onto one or more of the #GdkEventType event types
above.

See the [input handling overview][chap-input-handling] for details of
[event masks][event-masks] and [event propagation][event-propagation].

%GDK_POINTER_MOTION_HINT_MASK is deprecated. It is a special mask
to reduce the number of %GDK_MOTION_NOTIFY events received. When using
%GDK_POINTER_MOTION_HINT_MASK, fewer %GDK_MOTION_NOTIFY events will
be sent, some of which are marked as a hint (the is_hint member is
%TRUE). To receive more motion events after a motion hint event,
the application needs to asks for more, by calling
gdk_event_request_motions().

Since GTK 3.8, motion events are already compressed by default, independent
of this mechanism. This compression can be disabled with
gdk_window_set_event_compression(). See the documentation of that function
for details.

If %GDK_TOUCH_MASK is enabled, the window will receive touch events
from touch-enabled devices. Those will come as sequences of #GdkEventTouch
with type %GDK_TOUCH_UPDATE, enclosed by two events with
type %GDK_TOUCH_BEGIN and %GDK_TOUCH_END (or %GDK_TOUCH_CANCEL).
gdk_event_get_event_sequence() returns the event sequence for these
events, so different sequences may be distinguished.
#NAME: monitor_num
#PARENT: Gdk.Screen.get_monitor_plug_name.utf8
#COMMENT: number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
#NAME: get_selected_action
#PARENT: Gdk.DragContext.get_selected_action
#COMMENT: a #GdkDragAction value
#NAME: visual
#PARENT: Gdk.Visual.get_colormap_size.gint
#COMMENT: A #GdkVisual.
#NAME: is_viewable
#PARENT: Gdk.Window.is_viewable
#COMMENT: %TRUE if the window is viewable
#NAME: window
#PARENT: Gdk.Window.resize.none
#COMMENT: a #GdkWindow
#NAME: based_arrow_down
#PARENT: Gdk.CursorType
#COMMENT: ![](based_arrow_down.png)
#NAME: icon
#PARENT: Gdk.CursorType
#COMMENT: ![](icon.png)
#NAME: get_cursor_type
#PARENT: Gdk.Cursor
#COMMENT: Returns the cursor type for this cursor.
#NAME: window
#PARENT: Gdk.EventAny
#COMMENT: the window which received the event.
#NAME: right_tee
#PARENT: Gdk.CursorType
#COMMENT: ![](right_tee.png)
#NAME: x_root
#PARENT: Gdk.EventMotion
#COMMENT: the x coordinate of the pointer relative to the root of the
  screen.
#NAME: lower
#PARENT: Gdk.Window
#COMMENT: Lowers @window to the bottom of the Z-order (stacking order), so that
other windows with the same parent window appear above @window.
This is true whether or not the other windows are visible.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_lower() only
requests the restack, does not guarantee it.

Note that gdk_window_show() raises the window again, so don’t call this
function before gdk_window_show(). (Try gdk_window_show_unraised().)
#NAME: decorations
#PARENT: Gdk.Window.get_decorations.gboolean
#COMMENT: The window decorations will be written here
#NAME: x
#PARENT: Gdk.EventConfigure
#COMMENT: the new x coordinate of the window, relative to its parent.
#NAME: virtual
#PARENT: Gdk.NotifyType
#COMMENT: the pointer moves between an ancestor and an
  inferior of the window.
#NAME: window
#PARENT: Gdk.EventExpose
#COMMENT: the window which received the event.
#NAME: get_default
#PARENT: Gdk.Keymap
#COMMENT: Returns the #GdkKeymap attached to the default display.
#NAME: y
#PARENT: Gdk.EventConfigure
#COMMENT: the new y coordinate of the window, relative to its parent.
#NAME: window
#PARENT: Gdk.Window.invalidate_region.none
#COMMENT: a #GdkWindow
#NAME: set_title
#PARENT: Gdk.Window
#COMMENT: Sets the title of a toplevel window, to be displayed in the titlebar.
If you haven’t explicitly set the icon name for the window
(using gdk_window_set_icon_name()), the icon name will be set to
@title as well. @title must be in UTF-8 encoding (as with all
user-readable strings in GDK/GTK+). @title may not be %NULL.
#NAME: before-paint
#PARENT: Gdk.FrameClock
#COMMENT: This signal begins processing of the frame. Applications
should generally not handle this signal.
#NAME: window
#PARENT: Gdk.Window.beep.none
#COMMENT: a toplevel #GdkWindow
#NAME: window
#PARENT: Gdk.Window.begin_move_drag.none
#COMMENT: a toplevel #GdkWindow
#NAME: new
#PARENT: Gdk.Window
#COMMENT: Creates a new #GdkWindow using the attributes from
@attributes. See #GdkWindowAttr and #GdkWindowAttributesType for
more details.  Note: to use this on displays other than the default
display, @parent must be specified.
#NAME: window
#PARENT: Gdk.Window.get_background_pattern.cairo.Pattern
#COMMENT: a window
#NAME: display
#PARENT: Gdk.Display.set_double_click_time.none
#COMMENT: a #GdkDisplay
#NAME: all_events_mask
#PARENT: Gdk.EventMask
#COMMENT: the combination of all the above event masks.
#NAME: window
#PARENT: Gdk.EventFocus
#COMMENT: the window which received the event.
#NAME: event
#PARENT: Gdk.Event.get_root_coords.gboolean
#COMMENT: a #GdkEvent
#NAME: button
#PARENT: Gdk.Window.begin_resize_drag_for_device.none
#COMMENT: the button being used to drag, or 0 for a keyboard-initiated drag
#NAME: at_pointer
#PARENT: Gdk.Window.at_pointer
#COMMENT: window under the mouse pointer
#NAME: geom_mask
#PARENT: Gdk.Window.set_geometry_hints.none
#COMMENT: bitmask indicating fields of @geometry to pay attention to
#NAME: selection_notify
#PARENT: Gdk.EventType
#COMMENT: a selection has been received.
#NAME: modifier_reserved_17_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: get_default
#PARENT: Gdk.Screen.get_default
#COMMENT: a #GdkScreen, or %NULL if
    there is no default display.
#NAME: window
#PARENT: Gdk.Window.set_group.none
#COMMENT: a toplevel #GdkWindow
#NAME: DeviceManager
#PARENT: Gdk
#COMMENT: In addition to a single pointer and keyboard for user interface input,
GDK contains support for a variety of input devices, including graphics
tablets, touchscreens and multiple pointers/keyboards interacting
simultaneously with the user interface. Such input devices often have
additional features, such as sub-pixel positioning information and
additional device-dependent information.

In order to query the device hierarchy and be aware of changes in the
device hierarchy (such as virtual devices being created or removed, or
physical devices being plugged or unplugged), GDK provides
#GdkDeviceManager.

By default, and if the platform supports it, GDK is aware of multiple
keyboard/pointer pairs and multitouch devices. This behavior can be
changed by calling gdk_disable_multidevice() before gdk_display_open().
There should rarely be a need to do that though, since GDK defaults
to a compatibility mode in which it will emit just one enter/leave
event pair for all devices on a window. To enable per-device
enter/leave events and other multi-pointer interaction features,
gdk_window_set_support_multidevice() must be called on
#GdkWindows (or gtk_widget_set_support_multidevice() on widgets).
window. See the gdk_window_set_support_multidevice() documentation
for more information.

On X11, multi-device support is implemented through XInput 2.
Unless gdk_disable_multidevice() is called, the XInput 2
#GdkDeviceManager implementation will be used as the input source.
Otherwise either the core or XInput 1 implementations will be used.

For simple applications that don’t have any special interest in
input devices, the so-called “client pointer”
provides a reasonable approximation to a simple setup with a single
pointer and keyboard. The device that has been set as the client
pointer can be accessed via gdk_device_manager_get_client_pointer().

Conceptually, in multidevice mode there are 2 device types. Virtual
devices (or master devices) are represented by the pointer cursors
and keyboard foci that are seen on the screen. Physical devices (or
slave devices) represent the hardware that is controlling the virtual
devices, and thus have no visible cursor on the screen.

Virtual devices are always paired, so there is a keyboard device for every
pointer device. Associations between devices may be inspected through
gdk_device_get_associated_device().

There may be several virtual devices, and several physical devices could
be controlling each of these virtual devices. Physical devices may also
be “floating”, which means they are not attached to any virtual device.

# Master and slave devices

|[
carlos@sacarino:~$ xinput list
⎡ Virtual core pointer                          id=2    [master pointer  (3)]
⎜   ↳ Virtual core XTEST pointer                id=4    [slave  pointer  (2)]
⎜   ↳ Wacom ISDv4 E6 Pen stylus                 id=10   [slave  pointer  (2)]
⎜   ↳ Wacom ISDv4 E6 Finger touch               id=11   [slave  pointer  (2)]
⎜   ↳ SynPS/2 Synaptics TouchPad                id=13   [slave  pointer  (2)]
⎜   ↳ TPPS/2 IBM TrackPoint                     id=14   [slave  pointer  (2)]
⎜   ↳ Wacom ISDv4 E6 Pen eraser                 id=16   [slave  pointer  (2)]
⎣ Virtual core keyboard                         id=3    [master keyboard (2)]
    ↳ Virtual core XTEST keyboard               id=5    [slave  keyboard (3)]
    ↳ Power Button                              id=6    [slave  keyboard (3)]
    ↳ Video Bus                                 id=7    [slave  keyboard (3)]
    ↳ Sleep Button                              id=8    [slave  keyboard (3)]
    ↳ Integrated Camera                         id=9    [slave  keyboard (3)]
    ↳ AT Translated Set 2 keyboard              id=12   [slave  keyboard (3)]
    ↳ ThinkPad Extra Buttons                    id=15   [slave  keyboard (3)]
]|

By default, GDK will automatically listen for events coming from all
master devices, setting the #GdkDevice for all events coming from input
devices. Events containing device information are #GDK_MOTION_NOTIFY,
#GDK_BUTTON_PRESS, #GDK_2BUTTON_PRESS, #GDK_3BUTTON_PRESS,
#GDK_BUTTON_RELEASE, #GDK_SCROLL, #GDK_KEY_PRESS, #GDK_KEY_RELEASE,
#GDK_ENTER_NOTIFY, #GDK_LEAVE_NOTIFY, #GDK_FOCUS_CHANGE,
#GDK_PROXIMITY_IN, #GDK_PROXIMITY_OUT, #GDK_DRAG_ENTER, #GDK_DRAG_LEAVE,
#GDK_DRAG_MOTION, #GDK_DRAG_STATUS, #GDK_DROP_START, #GDK_DROP_FINISHED
and #GDK_GRAB_BROKEN. When dealing with an event on a master device,
it is possible to get the source (slave) device that the event originated
from via gdk_event_get_source_device().

On a standard session, all physical devices are connected by default to
the "Virtual Core Pointer/Keyboard" master devices, hence routing all events
through these. This behavior is only modified by device grabs, where the
slave device is temporarily detached for as long as the grab is held, and
more permanently by user modifications to the device hierarchy.

On certain application specific setups, it may make sense
to detach a physical device from its master pointer, and mapping it to
an specific window. This can be achieved by the combination of
gdk_device_grab() and gdk_device_set_mode().

In order to listen for events coming from devices
other than a virtual device, gdk_window_set_device_events() must be
called. Generally, this function can be used to modify the event mask
for any given device.

Input devices may also provide additional information besides X/Y.
For example, graphics tablets may also provide pressure and X/Y tilt
information. This information is device-dependent, and may be
queried through gdk_device_get_axis(). In multidevice mode, virtual
devices will change axes in order to always represent the physical
device that is routing events through it. Whenever the physical device
changes, the #GdkDevice:n-axes property will be notified, and
gdk_device_list_axes() will return the new device axes.

Devices may also have associated “keys” or
macro buttons. Such keys can be globally set to map into normal X
keyboard events. The mapping is set using gdk_device_set_key().
#NAME: window
#PARENT: Gdk.Window.set_events.none
#COMMENT: a #GdkWindow
#NAME: title
#PARENT: Gdk.WindowAttr
#COMMENT: title of the window (for toplevel windows)
#NAME: remove
#PARENT: Gdk.FilterReturn
#COMMENT: event handled, terminate processing.
#NAME: keyval
#PARENT: Gdk.EventKey
#COMMENT: the key that was pressed or released. See the
  `gdk/gdkkeysyms.h` header file for a
  complete list of GDK key codes.
#NAME: south_east
#PARENT: Gdk.Gravity
#COMMENT: the reference point is at the lower right corner.
#NAME: fully_obscured
#PARENT: Gdk.VisibilityState
#COMMENT: the window is not visible at all.
#NAME: gumby
#PARENT: Gdk.CursorType
#COMMENT: ![](gumby.png)
#NAME: x
#PARENT: Gdk.Point
#COMMENT: the x coordinate of the point.
#NAME: drag_window
#PARENT: Gdk.drag_find_window_for_screen.none
#COMMENT: a window which may be at the pointer position, but
    should be ignored, since it is put up by the drag source as an icon
#NAME: y
#PARENT: Gdk.Point
#COMMENT: the y coordinate of the point.
#NAME: x
#PARENT: Gdk.Window.get_geometry.none
#COMMENT: return location for X coordinate of window (relative to its parent)
#NAME: touchscreen
#PARENT: Gdk.InputSource
#COMMENT: the device is a direct-input touch device, such
    as a touchscreen or tablet. This device type has been added in 3.4.
#NAME: trek
#PARENT: Gdk.CursorType
#COMMENT: ![](trek.png)
#NAME: y
#PARENT: Gdk.Window.get_geometry.none
#COMMENT: return location for Y coordinate of window (relative to its parent)
#NAME: get_modifier_state
#PARENT: Gdk.Keymap
#COMMENT: Returns the current modifier state.
#NAME: x
#PARENT: Gdk.Device.get_position_double.none
#COMMENT: location to store root window X coordinate of @device, or %NULL.
#NAME: region
#PARENT: Gdk.Window.move_region.none
#COMMENT: The #cairo_region_t to move
#NAME: window
#PARENT: Gdk.Window.scroll.none
#COMMENT: a #GdkWindow
#NAME: y
#PARENT: Gdk.Device.get_position_double.none
#COMMENT: location to store root window Y coordinate of @device, or %NULL.
#NAME: implicit
#PARENT: Gdk.EventGrabBroken
#COMMENT: %TRUE if the broken grab was implicit
#NAME: func
#PARENT: Gdk.Event.handler_set.none
#COMMENT: the function to call to handle events from GDK.
#NAME: time_
#PARENT: Gdk.drop_finish.none
#COMMENT: the timestamp for this operation
#NAME: timestamp
#PARENT: Gdk.Window.begin_resize_drag.none
#COMMENT: timestamp of mouse click that began the drag (use gdk_event_get_time())
#NAME: get_pointer
#PARENT: Gdk.Display
#COMMENT: Gets the current location of the pointer and the current modifier
mask for a given display.
#NAME: state
#PARENT: Gdk.EventVisibility
#COMMENT: the new visibility state (%GDK_VISIBILITY_FULLY_OBSCURED,
  %GDK_VISIBILITY_PARTIAL or %GDK_VISIBILITY_UNOBSCURED).
#NAME: supports_clipboard_persistence
#PARENT: Gdk.Display.supports_clipboard_persistence
#COMMENT: %TRUE if the display supports clipboard persistance.
#NAME: manager
#PARENT: Gdk.DisplayManager.open_display.Display
#COMMENT: a #GdkDisplayManager
#NAME: north_east
#PARENT: Gdk.Gravity
#COMMENT: the reference point is at the top right corner.
#NAME: format
#PARENT: Gdk.Window.create_similar_image_surface.cairo.Surface
#COMMENT: the format for the new surface
#NAME: grab
#PARENT: Gdk.Device.grab
#COMMENT: %GDK_GRAB_SUCCESS if the grab was successful.
#NAME: box_spiral
#PARENT: Gdk.CursorType
#COMMENT: ![](box_spiral.png)
#NAME: string
#PARENT: Gdk.EventKey
#COMMENT: a string containing an approximation of the text that
  would result from this keypress. The only correct way to handle text
  input of text is using input methods (see #GtkIMContext), so this
  field is deprecated and should never be used.
  (gdk_unicode_to_keyval() provides a non-deprecated way of getting
  an approximate translation for a key.) The string is encoded in the
  encoding of the current locale (Note: this for backwards compatibility:
  strings in GTK+ and GDK are typically in UTF-8.) and NUL-terminated.
  In some cases, the translation of the key code will be a single
  NUL byte, in which case looking at @length is necessary to distinguish
  it from the an empty translation.
#NAME: dx
#PARENT: Gdk.Window.move_region.none
#COMMENT: Amount to move in the X direction
#NAME: get_monitor_height_mm
#PARENT: Gdk.Screen
#COMMENT: Gets the height in millimeters of the specified monitor.
#NAME: peek_event
#PARENT: Gdk.Display.peek_event
#COMMENT: a copy of the first #GdkEvent on the event
queue, or %NULL if no events are in the queue. The returned
#GdkEvent should be freed with gdk_event_free().
#NAME: dy
#PARENT: Gdk.Window.move_region.none
#COMMENT: Amount to move in the Y direction
#NAME: context
#PARENT: Gdk.GLContext.get_debug_enabled.gboolean
#COMMENT: a #GdkGLContext
#NAME: event
#PARENT: Gdk.Display.put_event.none
#COMMENT: a #GdkEvent.
#NAME: event
#PARENT: Gdk.Event.get_click_count.gboolean
#COMMENT: a #GdkEvent
#NAME: nothing
#PARENT: Gdk.EventType
#COMMENT: a special code to indicate a null event.
#NAME: DragAction
#PARENT: Gdk
#COMMENT: Used in #GdkDragContext to indicate what the destination
should do with the dropped data.
#NAME: freeze_toplevel_updates_libgtk_only
#PARENT: Gdk.Window
#COMMENT: Temporarily freezes a window and all its descendants such that it won't
receive expose events.  The window will begin receiving expose events
again when gdk_window_thaw_toplevel_updates_libgtk_only() is called. If
gdk_window_freeze_toplevel_updates_libgtk_only()
has been called more than once,
gdk_window_thaw_toplevel_updates_libgtk_only() must be called
an equal number of times to begin processing exposes.

This function is not part of the GDK public API and is only
for use by GTK+.
#NAME: time
#PARENT: Gdk.EventMotion
#COMMENT: the time of the event in milliseconds.
#NAME: window
#PARENT: Gdk.Window.unmaximize.none
#COMMENT: a toplevel #GdkWindow
#NAME: ref
#PARENT: Gdk.Cursor
#COMMENT: Adds a reference to @cursor.
#NAME: window
#PARENT: Gdk.Window.input_shape_combine_region.none
#COMMENT: a #GdkWindow
#NAME: test_render_sync
#PARENT: Gdk
#COMMENT: Retrieves a pixel from @window to force the windowing
system to carry out any pending rendering commands.

This function is intended to be used to synchronize with rendering
pipelines, to benchmark windowing system rendering operations.
#NAME: get_event_type
#PARENT: Gdk.Event
#COMMENT: Retrieves the type of the event.
#NAME: keymap
#PARENT: Gdk.Keymap.lookup_key.guint
#COMMENT: a #GdkKeymap
#NAME: center_ptr
#PARENT: Gdk.CursorType
#COMMENT: ![](center_ptr.png)
#NAME: dest
#PARENT: Gdk.rectangle_union.none
#COMMENT: return location for the union of @src1 and @src2
#NAME: get_system_visual
#PARENT: Gdk.Screen.get_system_visual
#COMMENT: the system visual
#NAME: state-changed
#PARENT: Gdk.Keymap
#COMMENT: The ::state-changed signal is emitted when the state of the
keyboard changes, e.g when Caps Lock is turned on or off.
See gdk_keymap_get_caps_lock_state().
#NAME: is_visible
#PARENT: Gdk.Window
#COMMENT: Checks whether the window has been mapped (with gdk_window_show() or
gdk_window_show_unraised()).
#NAME: wheel
#PARENT: Gdk.AxisUse
#COMMENT: the axis is used for wheel information.
#NAME: monitor_num
#PARENT: Gdk.Screen.get_monitor_width_mm.gint
#COMMENT: number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
#NAME: selection
#PARENT: Gdk.selection_owner_get_for_display.Window
#COMMENT: an atom indentifying a selection
#NAME: selection_owner_set_for_display
#PARENT: Gdk.selection_owner_set_for_display
#COMMENT: %TRUE if the selection owner was successfully changed to owner,
   otherwise %FALSE.
#NAME: type
#PARENT: Gdk.EventKey
#COMMENT: the type of the event (%GDK_KEY_PRESS or %GDK_KEY_RELEASE).
#NAME: get_monitor_at_window
#PARENT: Gdk.Screen.get_monitor_at_window
#COMMENT: the monitor number in which most of @window is located,
    or if @window does not intersect any monitors, a monitor,
    close to @window.
#NAME: EventGrabBroken
#PARENT: Gdk
#COMMENT: Generated when a pointer or keyboard grab is broken. On X11, this happens
when the grab window becomes unviewable (i.e. it or one of its ancestors
is unmapped), or if the same application grabs the pointer or keyboard
again. Note that implicit grabs (which are initiated by button presses)
can also cause #GdkEventGrabBroken events.
#NAME: get_modifier_state
#PARENT: Gdk.Keymap.get_modifier_state
#COMMENT: the current modifier state.
#NAME: button_motion_mask
#PARENT: Gdk.EventMask
#COMMENT: receive pointer motion events while any button is pressed
#NAME: x_hot
#PARENT: Gdk.Cursor.get_surface.cairo.Surface
#COMMENT: Location to store the hotspot x position,
  or %NULL
#NAME: window
#PARENT: Gdk.Window.get_accept_focus.gboolean
#COMMENT: a toplevel #GdkWindow.
#NAME: fullscreen
#PARENT: Gdk.WindowState
#COMMENT: the window is maximized without
  decorations.
#NAME: 3button_press
#PARENT: Gdk.EventType
#COMMENT: a mouse button has been clicked 3 times in a short period
  of time. Note that each click also generates a %GDK_BUTTON_PRESS event.
#NAME: dnd
#PARENT: Gdk.Event
#COMMENT: a #GdkEventDND
#NAME: window
#PARENT: Gdk.test_simulate_key.gboolean
#COMMENT: a #GdkWindow to simulate a key event for
#NAME: open_default_libgtk_only
#PARENT: Gdk.Display.open_default_libgtk_only
#COMMENT: the default display, if it
  could be opened, otherwise %NULL.
#NAME: context
#PARENT: Gdk.GLContext.get_forward_compatible.gboolean
#COMMENT: a #GdkGLContext
#NAME: get_best
#PARENT: Gdk.Visual.get_best
#COMMENT: best visual
#NAME: keyval_from_name
#PARENT: Gdk.keyval_from_name
#COMMENT: the corresponding key value, or %GDK_KEY_VoidSymbol
    if the key name is not a valid key
#NAME: x_root
#PARENT: Gdk.EventDND
#COMMENT: the x coordinate of the pointer relative to the root of the
  screen, only set for %GDK_DRAG_MOTION and %GDK_DROP_START.
#NAME: get_user_data
#PARENT: Gdk.Window
#COMMENT: Retrieves the user data for @window, which is normally the widget
that @window belongs to. See gdk_window_set_user_data().
#NAME: keyval_name
#PARENT: Gdk.keyval_from_name.guint
#COMMENT: a key name
#NAME: pixbuf
#PARENT: Gdk.Cursor.new_from_pixbuf.Cursor
#COMMENT: the #GdkPixbuf containing the cursor image
#NAME: get_time
#PARENT: Gdk.Event.get_time
#COMMENT: time stamp field from @event
#NAME: PropertyState
#PARENT: Gdk
#COMMENT: Specifies the type of a property change for a #GdkEventProperty.
#NAME: XEvent
#PARENT: Gdk
#COMMENT: Used to represent native events (XEvents for the X11
backend, MSGs for Win32).
#NAME: threads_add_idle_full
#PARENT: Gdk
#COMMENT: Adds a function to be called whenever there are no higher priority
events pending.  If the function returns %FALSE it is automatically
removed from the list of event sources and will not be called again.

This variant of g_idle_add_full() calls @function with the GDK lock
held. It can be thought of a MT-safe version for GTK+ widgets for the
following use case, where you have to worry about idle_callback()
running in thread A and accessing @self after it has been finalized
in thread B:

|[<!-- language="C" -->
static gboolean
idle_callback (gpointer data)
{
   // gdk_threads_enter(); would be needed for g_idle_add()

   SomeWidget *self = data;
   // do stuff with self

   self->idle_id = 0;

   // gdk_threads_leave(); would be needed for g_idle_add()
   return FALSE;
}

static void
some_widget_do_stuff_later (SomeWidget *self)
{
   self->idle_id = gdk_threads_add_idle (idle_callback, self)
   // using g_idle_add() here would require thread protection in the callback
}

static void
some_widget_finalize (GObject *object)
{
   SomeWidget *self = SOME_WIDGET (object);
   if (self->idle_id)
     g_source_remove (self->idle_id);
   G_OBJECT_CLASS (parent_class)->finalize (object);
}
]|
#NAME: is_closed
#PARENT: Gdk.Display.is_closed
#COMMENT: %TRUE if the display is closed.
#NAME: color_parse
#PARENT: Gdk.color_parse
#COMMENT: %TRUE if the parsing succeeded
#NAME: function
#PARENT: Gdk.Window.add_filter.none
#COMMENT: filter callback
#NAME: timings
#PARENT: Gdk.FrameTimings.get_presentation_time.gint64
#COMMENT: a #GdkFrameTimings
#NAME: atom_name
#PARENT: Gdk.atom_intern_static_string.Atom
#COMMENT: a static string
#NAME: win_gravity
#PARENT: Gdk.Geometry
#COMMENT: window gravity, see gtk_window_set_gravity()
#NAME: VisibilityState
#PARENT: Gdk
#COMMENT: Specifies the visiblity status of a window for a #GdkEventVisibility.
#NAME: priority
#PARENT: Gdk.threads_add_timeout_seconds_full.guint
#COMMENT: the priority of the timeout source. Typically this will be in the
           range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
#NAME: keyval
#PARENT: Gdk.keyval_is_upper.gboolean
#COMMENT: a key value.
#NAME: x
#PARENT: Gdk.Window.coords_from_parent.none
#COMMENT: return location for X coordinate in child’s coordinate system
#NAME: y
#PARENT: Gdk.Window.coords_from_parent.none
#COMMENT: return location for Y coordinate in child’s coordinate system
#NAME: window
#PARENT: Gdk.EventKey
#COMMENT: the window which received the event.
#NAME: new_height
#PARENT: Gdk.Window.constrain_size.none
#COMMENT: location to store resulting height
#NAME: set_static_gravities
#PARENT: Gdk.Window
#COMMENT: Used to set the bit gravity of the given window to static, and flag
it so all children get static subwindow gravity. This is used if you
are implementing scary features that involve deep knowledge of the
windowing system. Don’t worry about it.
#NAME: get_colormap_size
#PARENT: Gdk.Visual
#COMMENT: Returns the size of a colormap for this visual.
#NAME: timestamp
#PARENT: Gdk.AppLaunchContext.set_timestamp.none
#COMMENT: a timestamp
#NAME: peek_children
#PARENT: Gdk.Window
#COMMENT: Like gdk_window_get_children(), but does not copy the list of
children, so the list does not need to be freed.
#NAME: window
#PARENT: Gdk.Window.set_geometry_hints.none
#COMMENT: a toplevel #GdkWindow
#NAME: get_frame_extents
#PARENT: Gdk.Window
#COMMENT: Obtains the bounding box of the window, including window manager
titlebar/borders if any. The frame position is given in root window
coordinates. To get the position of the window itself (rather than
the frame) in root window coordinates, use gdk_window_get_origin().
#NAME: get_monitor_plug_name
#PARENT: Gdk.Screen
#COMMENT: Returns the output name of the specified monitor.
Usually something like VGA, DVI, or TV, not the actual
product name of the display device.
#NAME: invalidate_rect
#PARENT: Gdk.Window
#COMMENT: A convenience wrapper around gdk_window_invalidate_region() which
invalidates a rectangular region. See
gdk_window_invalidate_region() for details.
#NAME: get_green_pixel_details
#PARENT: Gdk.Visual
#COMMENT: Obtains values that are needed to calculate green pixel values in TrueColor
and DirectColor. The “mask” is the significant bits within the pixel.
The “shift” is the number of bits left we must shift a primary for it
to be in position (according to the "mask"). Finally, "precision" refers
to how much precision the pixel value contains for a particular primary.
#NAME: peek_children
#PARENT: Gdk.Window.peek_children
#COMMENT: 
    a reference to the list of child windows in @window
#NAME: time
#PARENT: Gdk.EventProximity
#COMMENT: the time of the event in milliseconds.
#NAME: get_children_with_user_data
#PARENT: Gdk.Window.get_children_with_user_data
#COMMENT: 
    list of child windows inside @window
#NAME: display
#PARENT: Gdk.Display.pointer_is_grabbed.gboolean
#COMMENT: a #GdkDisplay
#NAME: owner_change
#PARENT: Gdk.EventType
#COMMENT: the owner of a selection has changed. This event type
  was added in 2.6
#NAME: deiconify
#PARENT: Gdk.Window
#COMMENT: Attempt to deiconify (unminimize) @window. On X11 the window manager may
choose to ignore the request to deiconify. When using GTK+,
use gtk_window_deiconify() instead of the #GdkWindow variant. Or better yet,
you probably want to use gtk_window_present(), which raises the window, focuses it,
unminimizes it, and puts it on the current desktop.
#NAME: data
#PARENT: Gdk.Window.add_filter.none
#COMMENT: data to pass to filter callback
#NAME: screen
#PARENT: Gdk.Screen.get_monitor_width_mm.gint
#COMMENT: a #GdkScreen
#NAME: WindowChildFunc
#PARENT: Gdk
#COMMENT: A function of this type is passed to gdk_window_invalidate_maybe_recurse().
It gets called for each child of the window to determine whether to
recursively invalidate it or now.
#NAME: at_pointer
#PARENT: Gdk.Window
#COMMENT: Obtains the window underneath the mouse pointer, returning the
location of that window in @win_x, @win_y. Returns %NULL if the
window under the mouse pointer is not known to GDK (if the window
belongs to another application and a #GdkWindow hasn’t been created
for it with gdk_window_foreign_new())

NOTE: For multihead-aware widgets or applications use
gdk_display_get_window_at_pointer() instead.
#NAME: rightbutton
#PARENT: Gdk.CursorType
#COMMENT: ![](rightbutton.png)
#NAME: window
#PARENT: Gdk.Window.get_visual.Visual
#COMMENT: a #GdkWindow
#NAME: unobscured
#PARENT: Gdk.VisibilityState
#COMMENT: the window is completely visible.
#NAME: x
#PARENT: Gdk.Window.get_pointer.Window
#COMMENT: return location for X coordinate of pointer or %NULL to not
     return the X coordinate
#NAME: set_accept_focus
#PARENT: Gdk.Window
#COMMENT: Setting @accept_focus to %FALSE hints the desktop environment that the
window doesn’t want to receive input focus.

On X, it is the responsibility of the window manager to interpret this
hint. ICCCM-compliant window manager usually respect it.
#NAME: set_device
#PARENT: Gdk.DragContext
#COMMENT: Associates a #GdkDevice to @context, so all Drag and Drop events
for @context are emitted as if they came from this device.
#NAME: y
#PARENT: Gdk.Window.get_pointer.Window
#COMMENT: return location for Y coordinate of pointer or %NULL to not
     return the Y coordinate
#NAME: is_input_only
#PARENT: Gdk.Window
#COMMENT: Determines whether or not the window is an input only window.
#NAME: get_default
#PARENT: Gdk.Display
#COMMENT: Gets the default #GdkDisplay. This is a convenience
function for:
`gdk_display_manager_get_default_display (gdk_display_manager_get ())`.
#NAME: window
#PARENT: Gdk.Window.set_cursor.none
#COMMENT: a #GdkWindow
#NAME: x
#PARENT: Gdk.Device.warp.none
#COMMENT: the X coordinate of the destination.
#NAME: ensure_native
#PARENT: Gdk.Window.ensure_native
#COMMENT: %TRUE if the window has a native window, %FALSE otherwise
#NAME: time
#PARENT: Gdk.EventDND
#COMMENT: the time of the event in milliseconds.
#NAME: y
#PARENT: Gdk.Device.warp.none
#COMMENT: the Y coordinate of the destination.
#NAME: get_name
#PARENT: Gdk.Device.get_name
#COMMENT: a name
#NAME: button3_motion_mask
#PARENT: Gdk.EventMask
#COMMENT: receive pointer motion events while 3 button is pressed
#NAME: group
#PARENT: Gdk.KeymapKey
#COMMENT: indicates movement in a horizontal direction. Usually groups are used
  for two different languages. In group 0, a key might have two English
  characters, and in group 1 it might have two Hebrew characters. The Hebrew
  characters will be printed on the key next to the English characters.
#NAME: spec
#PARENT: Gdk.color_parse.gboolean
#COMMENT: the string specifying the color
#NAME: get_display
#PARENT: Gdk.DeviceManager
#COMMENT: Gets the #GdkDisplay associated to @device_manager.
#NAME: n_keys
#PARENT: Gdk.Keymap.get_entries_for_keyval.gboolean
#COMMENT: return location for number of elements in returned array
#NAME: stick
#PARENT: Gdk.Window
#COMMENT: “Pins” a window such that it’s on all workspaces and does not scroll
with viewports, for window managers that have scrollable viewports.
(When using #GtkWindow, gtk_window_stick() may be more useful.)

On the X11 platform, this function depends on window manager
support, so may have no effect with many window managers. However,
GDK will do the best it can to convince the window manager to stick
the window. For window managers that don’t support this operation,
there’s nothing you can do to force it to happen.
#NAME: data
#PARENT: Gdk.FilterFunc.FilterReturn
#COMMENT: user data set when the filter was installed.
#NAME: event1
#PARENT: Gdk.Event._get_distance.gboolean
#COMMENT: first #GdkEvent
#NAME: get_effective_toplevel
#PARENT: Gdk.Window.get_effective_toplevel
#COMMENT: the effective toplevel window containing @window
#NAME: event2
#PARENT: Gdk.Event._get_distance.gboolean
#COMMENT: second #GdkEvent
#NAME: modifier_reserved_25_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: n_ranges
#PARENT: Gdk.pango_layout_get_clip_region.cairo.Region
#COMMENT: number of ranges in @index_ranges, i.e. half the size of @index_ranges
#NAME: display
#PARENT: Gdk.Display.pointer_ungrab.none
#COMMENT: a #GdkDisplay.
#NAME: get_device_type
#PARENT: Gdk.Device
#COMMENT: Returns the device type for @device.
#NAME: window
#PARENT: Gdk.Window.is_viewable.gboolean
#COMMENT: a #GdkWindow
#NAME: get_scroll_deltas
#PARENT: Gdk.Event
#COMMENT: Retrieves the scroll deltas from a #GdkEvent
#NAME: index_
#PARENT: Gdk.Device.get_key.gboolean
#COMMENT: the index of the macro button to get.
#NAME: rect
#PARENT: Gdk.cairo_get_clip_rectangle.gboolean
#COMMENT: return location for the clip, or %NULL
#NAME: get_children
#PARENT: Gdk.Window.get_children
#COMMENT: 
    list of child windows inside @window
#NAME: rgba
#PARENT: Gdk.RGBA.parse.gboolean
#COMMENT: the #GdkRGBA to fill in
#NAME: set_user_data
#PARENT: Gdk.Window
#COMMENT: For most purposes this function is deprecated in favor of
g_object_set_data(). However, for historical reasons GTK+ stores
the #GtkWidget that owns a #GdkWindow as user data on the
#GdkWindow. So, custom widget implementations should use
this function for that. If GTK+ receives an event for a #GdkWindow,
and the user data for the window is non-%NULL, GTK+ will assume the
user data is a #GtkWidget, and forward the event to that widget.
#NAME: event_peek
#PARENT: Gdk
#COMMENT: If there is an event waiting in the event queue of some open
display, returns a copy of it. See gdk_display_peek_event().
#NAME: surface
#PARENT: Gdk.cairo_region_create_from_surface.cairo.Region
#COMMENT: a cairo surface
#NAME: monitor_num
#PARENT: Gdk.Screen.get_monitor_height_mm.gint
#COMMENT: number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
#NAME: device_is_grabbed
#PARENT: Gdk.Display.device_is_grabbed
#COMMENT: %TRUE if there is a grab in effect for @device.
#NAME: window
#PARENT: Gdk.Window.get_frame_extents.none
#COMMENT: a toplevel #GdkWindow
#NAME: source
#PARENT: Gdk.Window.set_source_events.none
#COMMENT: a #GdkInputSource to define the source class.
#NAME: get_image
#PARENT: Gdk.Cursor
#COMMENT: Returns a #GdkPixbuf with the image used to display the cursor.

Note that depending on the capabilities of the windowing system and
on the cursor, GDK may not be able to obtain the image data. In this
case, %NULL is returned.
#NAME: get_toplevel_windows
#PARENT: Gdk.Screen.get_toplevel_windows
#COMMENT: 
    list of toplevel windows, free with g_list_free()
#NAME: manager
#PARENT: Gdk.DisplayManager.list_displays.Display
#COMMENT: a #GdkDisplayManager
#NAME: width
#PARENT: Gdk.Window.move_resize.none
#COMMENT: new width
#NAME: timings
#PARENT: Gdk.FrameTimings.get_predicted_presentation_time.gint64
#COMMENT: a #GdkFrameTimings
#NAME: get_has_cursor
#PARENT: Gdk.Device.get_has_cursor
#COMMENT: %TRUE if the pointer follows device motion
#NAME: surface
#PARENT: Gdk.Cursor.new_from_surface.Cursor
#COMMENT: the cairo image surface containing the cursor pixel data
#NAME: window
#PARENT: Gdk.cairo_create.cairo.Context
#COMMENT: a #GdkWindow
#NAME: threads_add_timeout
#PARENT: Gdk.threads_add_timeout
#COMMENT: the ID (greater than 0) of the event source.
#NAME: keys
#PARENT: Gdk.Keymap.get_entries_for_keyval.gboolean
#COMMENT: return location
    for an array of #GdkKeymapKey
#NAME: desktop
#PARENT: Gdk.AppLaunchContext.set_desktop.none
#COMMENT: the number of a workspace, or -1
#NAME: get_axis_use
#PARENT: Gdk.Device.get_axis_use
#COMMENT: a #GdkAxisUse specifying how the axis is used.
#NAME: mode
#PARENT: Gdk.property_change.none
#COMMENT: a value describing how the new data is to be combined
  with the current data.
#NAME: requestor
#PARENT: Gdk.selection_convert.none
#COMMENT: a #GdkWindow.
#NAME: event
#PARENT: Gdk.Event.get_keyval.gboolean
#COMMENT: a #GdkEvent
#NAME: list_devices
#PARENT: Gdk.DeviceManager
#COMMENT: Returns the list of devices of type @type currently attached to
@device_manager.
#NAME: actual_length
#PARENT: Gdk.property_get.gboolean
#COMMENT: location to store the length of the retrieved data, in
  bytes.  Data returned in the 32 bit format is stored
  in a long variable, so the actual number of 32 bit
  elements should be be calculated via
  @actual_length / sizeof(glong) to ensure portability to
  64 bit systems.
#NAME: Atom
#PARENT: Gdk
#COMMENT: An opaque type representing a string as an index into a table
of strings on the X server.
#NAME: event
#PARENT: Gdk.Event.request_motions.none
#COMMENT: a valid #GdkEvent
#NAME: context_menu
#PARENT: Gdk.ModifierIntent
#COMMENT: the modifier used to invoke context menus.
 Note that mouse button 3 always triggers context menus. When this modifier
 is not 0, it additionally triggers context menus when used with mouse button 1.
#NAME: focus
#PARENT: Gdk.Window
#COMMENT: Sets keyboard focus to @window. In most cases, gtk_window_present()
should be used on a #GtkWindow, rather than calling this function.
#NAME: get_best_with_depth
#PARENT: Gdk.Visual
#COMMENT: Get the best visual with depth @depth for the default GDK screen.
Color visuals and visuals with mutable colormaps are preferred
over grayscale or fixed-colormap visuals. The return value should
not be freed. %NULL may be returned if no visual supports @depth.
#NAME: level
#PARENT: Gdk.KeymapKey
#COMMENT: indicates which symbol on the key will be used, in a vertical direction.
  So on a standard US keyboard, the key with the number “1” on it also has the
  exclamation point ("!") character on it. The level indicates whether to use
  the “1” or the “!” symbol. The letter keys are considered to have a lowercase
  letter at level 0, and an uppercase letter at level 1, though only the
  uppercase letter is printed.
#NAME: display
#PARENT: Gdk.Device
#COMMENT: The #GdkDisplay the #GdkDevice pertains to.
#NAME: set_show_events
#PARENT: Gdk
#COMMENT: Sets whether a trace of received events is output.
Note that GTK+ must be compiled with debugging (that is,
configured using the `--enable-debug` option)
to use this option.
#NAME: display
#PARENT: Gdk.Keymap.get_for_display.Keymap
#COMMENT: the #GdkDisplay.
#NAME: cursor
#PARENT: Gdk.WindowAttr
#COMMENT: cursor for the window (see gdk_window_set_cursor())
#NAME: keyval
#PARENT: Gdk.keyval_is_lower.gboolean
#COMMENT: a key value.
#NAME: new_parent
#PARENT: Gdk.Window.reparent.none
#COMMENT: new parent to move @window into
#NAME: dest
#PARENT: Gdk.Screen.get_monitor_geometry.none
#COMMENT: a #GdkRectangle to be filled with
    the monitor geometry
#NAME: context
#PARENT: Gdk.drag_abort.none
#COMMENT: a #GdkDragContext
#NAME: device
#PARENT: Gdk.Device.get_last_event_window.Window
#COMMENT: a #GdkDevice, with a source other than %GDK_SOURCE_KEYBOARD
#NAME: resize_inc
#PARENT: Gdk.WindowHints
#COMMENT: resize increment fields are set
#NAME: window
#PARENT: Gdk.drag_begin.DragContext
#COMMENT: the source window for this drag.
#NAME: get_axis_value
#PARENT: Gdk.Device
#COMMENT: Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis label, as returned
by gdk_device_list_axes()
#NAME: offscreen_window_get_surface
#PARENT: Gdk.offscreen_window_get_surface
#COMMENT: The offscreen surface, or
  %NULL if not offscreen
#NAME: screen
#PARENT: Gdk.Screen.get_resolution.gdouble
#COMMENT: a #GdkScreen
#NAME: event_peek
#PARENT: Gdk.event_peek
#COMMENT: a copy of the first #GdkEvent on some event
queue, or %NULL if no events are in any queues. The returned
#GdkEvent should be freed with gdk_event_free().
#NAME: get_screen
#PARENT: Gdk.Visual
#COMMENT: Gets the screen to which this visual belongs
#NAME: x_origin
#PARENT: Gdk.pango_layout_get_clip_region.cairo.Region
#COMMENT: X pixel where you intend to draw the layout with this clip
#NAME: get_monitor_at_point
#PARENT: Gdk.Screen.get_monitor_at_point
#COMMENT: the monitor number in which the point (@x,@y) lies, or
  a monitor close to (@x,@y) if the point is not in any monitor.
#NAME: button
#PARENT: Gdk.Window.begin_move_drag_for_device.none
#COMMENT: the button being used to drag, or 0 for a keyboard-initiated drag
#NAME: in
#PARENT: Gdk.EventFocus
#COMMENT: %TRUE if the window has gained the keyboard focus, %FALSE if
  it has lost the focus.
#NAME: set_startup_id
#PARENT: Gdk.Window
#COMMENT: When using GTK+, typically you should use gtk_window_set_startup_id()
instead of this low-level function.
#NAME: smooth
#PARENT: Gdk.ScrollDirection
#COMMENT: the scrolling is determined by the delta values
  in #GdkEventScroll. See gdk_event_get_scroll_deltas(). Since: 3.4
#NAME: window
#PARENT: Gdk.Window.get_device_cursor.Cursor
#COMMENT: a #GdkWindow.
#NAME: modifier_reserved_13_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: pixbuf_x
#PARENT: Gdk.cairo_set_source_pixbuf.none
#COMMENT: X coordinate of location to place upper left corner of @pixbuf
#NAME: is_hint
#PARENT: Gdk.EventMotion
#COMMENT: set to 1 if this event is just a hint, see the
  %GDK_POINTER_MOTION_HINT_MASK value of #GdkEventMask.
#NAME: group
#PARENT: Gdk.add_option_entries_libgtk_only.none
#COMMENT: An option group.
#NAME: pixbuf_y
#PARENT: Gdk.cairo_set_source_pixbuf.none
#COMMENT: Y coordinate of location to place upper left corner of @pixbuf
#NAME: get_window
#PARENT: Gdk.GLContext.get_window
#COMMENT: a #GdkWindow or %NULL
#NAME: configure_finished
#PARENT: Gdk.Window
#COMMENT: Does nothing, present only for compatiblity.
#NAME: create_gl_context
#PARENT: Gdk.Window
#COMMENT: Creates a new #GdkGLContext matching the
framebuffer format to the visual of the #GdkWindow. The context
is disconnected from any particular window or surface.

If the creation of the #GdkGLContext failed, @error will be set.

Before using the returned #GdkGLContext, you will need to
call gdk_gl_context_make_current() or gdk_gl_context_realize().
#NAME: context
#PARENT: Gdk.drop_reply.none
#COMMENT: a #GdkDragContext
#NAME: selection
#PARENT: Gdk.selection_send_notify.none
#COMMENT: selection that was requested.
#NAME: Geometry
#PARENT: Gdk
#COMMENT: The #GdkGeometry struct gives the window manager information about
a window’s geometry constraints. Normally you would set these on
the GTK+ level using gtk_window_set_geometry_hints(). #GtkWindow
then sets the hints on the #GdkWindow it creates.

gdk_window_set_geometry_hints() expects the hints to be fully valid already
and simply passes them to the window manager; in contrast,
gtk_window_set_geometry_hints() performs some interpretation. For example,
#GtkWindow will apply the hints to the geometry widget instead of the
toplevel window, if you set a geometry widget. Also, the
@min_width/@min_height/@max_width/@max_height fields may be set to -1, and
#GtkWindow will substitute the size request of the window or geometry widget.
If the minimum size hint is not provided, #GtkWindow will use its requisition
as the minimum size. If the minimum size is provided and a geometry widget is
set, #GtkWindow will take the minimum size as the minimum size of the
geometry widget rather than the entire window. The base size is treated
similarly.

The canonical use-case for gtk_window_set_geometry_hints() is to get a
terminal widget to resize properly. Here, the terminal text area should be
the geometry widget; #GtkWindow will then automatically set the base size to
the size of other widgets in the terminal window, such as the menubar and
scrollbar. Then, the @width_inc and @height_inc fields should be set to the
size of one character in the terminal. Finally, the base size should be set
to the size of one character. The net effect is that the minimum size of the
terminal will have a 1x1 character terminal area, and only terminal sizes on
the “character grid” will be allowed.

Here’s an example of how the terminal example would be implemented, assuming
a terminal area widget called “terminal” and a toplevel window “toplevel”:

|[<!-- language="C" -->
	GdkGeometry hints;

	hints.base_width = terminal->char_width;
        hints.base_height = terminal->char_height;
        hints.min_width = terminal->char_width;
        hints.min_height = terminal->char_height;
        hints.width_inc = terminal->char_width;
        hints.height_inc = terminal->char_height;

 gtk_window_set_geometry_hints (GTK_WINDOW (toplevel),
                                GTK_WIDGET (terminal),
                                &hints,
                                GDK_HINT_RESIZE_INC |
                                GDK_HINT_MIN_SIZE |
                                GDK_HINT_BASE_SIZE);
]|

The other useful fields are the @min_aspect and @max_aspect fields; these
contain a width/height ratio as a floating point number. If a geometry widget
is set, the aspect applies to the geometry widget rather than the entire
window. The most common use of these hints is probably to set @min_aspect and
@max_aspect to the same value, thus forcing the window to keep a constant
aspect ratio.
#NAME: time
#PARENT: Gdk.EventOwnerChange
#COMMENT: the timestamp of the event
#NAME: from-embedder
#PARENT: Gdk.Window
#COMMENT: The ::from-embedder signal is emitted to translate coordinates
in the embedder of an offscreen window to the offscreen window.

See also #GdkWindow::to-embedder.
#NAME: desktop
#PARENT: Gdk.WindowTypeHint
#COMMENT: Used for creating the desktop background
 window.
#NAME: width
#PARENT: Gdk.Window.get_geometry.none
#COMMENT: return location for width of window
#NAME: enabled
#PARENT: Gdk.GLContext.set_debug_enabled.none
#COMMENT: whether to enable debugging in the context
#NAME: get_product_id
#PARENT: Gdk.Device.get_product_id
#COMMENT: the product ID, or %NULL
#NAME: property_notify
#PARENT: Gdk.EventType
#COMMENT: a property on the window has been changed or deleted.
#NAME: keymap
#PARENT: Gdk.Keymap.get_entries_for_keycode.gboolean
#COMMENT: a #GdkKeymap
#NAME: get_display
#PARENT: Gdk.GLContext
#COMMENT: Retrieves the #GdkDisplay the @context is created for
#NAME: visual
#PARENT: Gdk.Visual.get_green_pixel_details.none
#COMMENT: a #GdkVisual
#NAME: already_grabbed
#PARENT: Gdk.GrabStatus
#COMMENT: the resource is actively grabbed by another client.
#NAME: time
#PARENT: Gdk.EventButton
#COMMENT: the time of the event in milliseconds.
#NAME: get_for_display
#PARENT: Gdk.Keymap.get_for_display
#COMMENT: the #GdkKeymap attached to @display.
#NAME: get_setting
#PARENT: Gdk.Screen
#COMMENT: Retrieves a desktop-wide setting such as double-click time
for the #GdkScreen @screen.

FIXME needs a list of valid settings here, or a link to
more information.
#NAME: screen
#PARENT: Gdk.Screen.get_monitor_plug_name.utf8
#COMMENT: a #GdkScreen
#NAME: cursor
#PARENT: Gdk.Device.grab.GrabStatus
#COMMENT: the cursor to display while the grab is active if the device is
         a pointer. If this is %NULL then the normal cursors are used for
         @window and its descendants, and the cursor for @window is used
         elsewhere.
#NAME: is_shaped
#PARENT: Gdk.Window
#COMMENT: Determines whether or not the window is shaped.
#NAME: state
#PARENT: Gdk.Keymap.translate_keyboard_state.gboolean
#COMMENT: a modifier state
#NAME: gtk_ungrab
#PARENT: Gdk.CrossingMode
#COMMENT: crossing because a GTK+ grab is deactivated.
#NAME: scroll_mask
#PARENT: Gdk.EventMask
#COMMENT: receive scroll events
#NAME: event
#PARENT: Gdk.Event.set_device.none
#COMMENT: a #GdkEvent
#NAME: translate_keyboard_state
#PARENT: Gdk.Keymap
#COMMENT: Translates the contents of a #GdkEventKey into a keyval, effective
group, and level. Modifiers that affected the translation and
are thus unavailable for application use are returned in
@consumed_modifiers.
See [Groups][key-group-explanation] for an explanation of
groups and levels. The @effective_group is the group that was
actually used for the translation; some keys such as Enter are not
affected by the active keyboard group. The @level is derived from
@state. For convenience, #GdkEventKey already contains the translated
keyval, so this function isn’t as useful as you might think.

@consumed_modifiers gives modifiers that should be masked outfrom @state
when comparing this key press to a hot key. For instance, on a US keyboard,
the `plus` symbol is shifted, so when comparing a key press to a
`<Control>plus` accelerator `<Shift>` should be masked out.

|[<!-- language="C" -->
// We want to ignore irrelevant modifiers like ScrollLock
#define ALL_ACCELS_MASK (GDK_CONTROL_MASK | GDK_SHIFT_MASK | GDK_MOD1_MASK)
gdk_keymap_translate_keyboard_state (keymap, event->hardware_keycode,
                                     event->state, event->group,
                                     &keyval, NULL, NULL, &consumed);
if (keyval == GDK_PLUS &&
    (event->state & ~consumed & ALL_ACCELS_MASK) == GDK_CONTROL_MASK)
  // Control was pressed
]|

An older interpretation @consumed_modifiers was that it contained
all modifiers that might affect the translation of the key;
this allowed accelerators to be stored with irrelevant consumed
modifiers, by doing:
|[<!-- language="C" -->
// XXX Don’t do this XXX
if (keyval == accel_keyval &&
    (event->state & ~consumed & ALL_ACCELS_MASK) == (accel_mods & ~consumed))
  // Accelerator was pressed
]|

However, this did not work if multi-modifier combinations were
used in the keymap, since, for instance, `<Control>` would be
masked out even if only `<Control><Alt>` was used in the keymap.
To support this usage as well as well as possible, all single
modifier combinations that could affect the key for any combination
of modifiers will be returned in @consumed_modifiers; multi-modifier
combinations are returned only when actually found in @state. When
you store accelerators, you should always store them with consumed
modifiers removed. Store `<Control>plus`, not `<Control><Shift>plus`,
#NAME: ref
#PARENT: Gdk.Cursor.ref
#COMMENT: Same @cursor that was passed in
#NAME: max_aspect
#PARENT: Gdk.Geometry
#COMMENT: maximum width/height ratio
#NAME: window
#PARENT: Gdk.Window.hide.none
#COMMENT: a #GdkWindow
#NAME: double_arrow
#PARENT: Gdk.CursorType
#COMMENT: ![](double_arrow.png)
#NAME: send_event
#PARENT: Gdk.EventFocus
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: to-embedder
#PARENT: Gdk.Window
#COMMENT: The ::to-embedder signal is emitted to translate coordinates
in an offscreen window to its embedder.

See also #GdkWindow::from-embedder.
#NAME: property
#PARENT: Gdk.property_change.none
#COMMENT: the property to change
#NAME: get_direction
#PARENT: Gdk.Keymap
#COMMENT: Returns the direction of effective layout of the keymap.
#NAME: events
#PARENT: Gdk.Device.free_history.none
#COMMENT: an array of #GdkTimeCoord.
#NAME: x
#PARENT: Gdk.Window.get_origin.gint
#COMMENT: return location for X coordinate
#NAME: skips_taskbar
#PARENT: Gdk.Window.set_skip_taskbar_hint.none
#COMMENT: %TRUE to skip the taskbar
#NAME: query_depths
#PARENT: Gdk
#COMMENT: This function returns the available bit depths for the default
screen. It’s equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the depth field in each
visual, removing duplicates.

The array returned by this function should not be freed.
#NAME: window
#PARENT: Gdk.EventWindowState
#COMMENT: the window which received the event.
#NAME: y
#PARENT: Gdk.Window.get_origin.gint
#COMMENT: return location for Y coordinate
#NAME: device
#PARENT: Gdk.Device.set_axis_use.none
#COMMENT: a pointer #GdkDevice
#NAME: context
#PARENT: Gdk.drag_motion.gboolean
#COMMENT: a #GdkDragContext
#NAME: FilterReturn
#PARENT: Gdk
#COMMENT: Specifies the result of applying a #GdkFilterFunc to a native event.
#NAME: mode
#PARENT: Gdk.Device.set_mode.gboolean
#COMMENT: the input mode.
#NAME: drag_motion
#PARENT: Gdk.EventType
#COMMENT: the mouse has moved in the window while a drag is in
  progress.
#NAME: key_release
#PARENT: Gdk.EventType
#COMMENT: a key has been released.
#NAME: send_event
#PARENT: Gdk.EventConfigure
#COMMENT: %TRUE if the event was sent explicitly.
#NAME: get_accept_focus
#PARENT: Gdk.Window.get_accept_focus
#COMMENT: whether or not the window should receive input focus.
#NAME: frame_clock
#PARENT: Gdk.FrameClock.get_refresh_info.none
#COMMENT: a #GdkFrameClock
#NAME: CursorType
#PARENT: Gdk
#COMMENT: The standard cursors available.
#NAME: GrabStatus
#PARENT: Gdk
#COMMENT: Returned by gdk_device_grab(), gdk_pointer_grab() and gdk_keyboard_grab() to
indicate success or the reason for the failure of the grab attempt.
#NAME: leave_notify_mask
#PARENT: Gdk.EventMask
#COMMENT: receive window leave events
#NAME: screen
#PARENT: Gdk.Screen.get_display.Display
#COMMENT: a #GdkScreen
#NAME: cross_reverse
#PARENT: Gdk.CursorType
#COMMENT: ![](cross_reverse.png)
#NAME: list_axes
#PARENT: Gdk.Device.list_axes
#COMMENT: 
    A #GList of #GdkAtoms, free with g_list_free().
#NAME: device
#PARENT: Gdk.Device.get_product_id.utf8
#COMMENT: a slave #GdkDevice
#NAME: color
#PARENT: Gdk.Window.set_background.none
#COMMENT: a #GdkColor
#NAME: green
#PARENT: Gdk.RGBA
#COMMENT: The intensity of the green channel from 0.0 to 1.0 inclusive
#NAME: window
#PARENT: Gdk.EventGrabBroken
#COMMENT: the window which received the event, i.e. the window
  that previously owned the grab
#NAME: top
#PARENT: Gdk.Window.set_shadow_width.none
#COMMENT: The top extent
#NAME: x
#PARENT: Gdk.cairo_draw_from_gl.none
#COMMENT: The source x position in @source to start copying from in GL coordinates
#NAME: context
#PARENT: Gdk.DragContext.get_actions.DragAction
#COMMENT: a #GdkDragContext
#NAME: y
#PARENT: Gdk.cairo_draw_from_gl.none
#COMMENT: The source y position in @source to start copying from in GL coordinates
#NAME: device
#PARENT: Gdk.Device.set_mode.gboolean
#COMMENT: a #GdkDevice.
#NAME: use
#PARENT: Gdk.Device.set_axis_use.none
#COMMENT: specifies how the axis is used
#NAME: ancestor
#PARENT: Gdk.NotifyType
#COMMENT: the window is entered from an ancestor or
  left towards an ancestor.
#NAME: context
#PARENT: Gdk.AppLaunchContext.set_timestamp.none
#COMMENT: a #GdkAppLaunchContext
#NAME: get_app_launch_context
#PARENT: Gdk.Display.get_app_launch_context
#COMMENT: a new #GdkAppLaunchContext for @display.
    Free with g_object_unref() when done
#NAME: set_modal_hint
#PARENT: Gdk.Window
#COMMENT: The application can use this hint to tell the window manager
that a certain window has modal behaviour. The window manager
can use this information to handle modal windows in a special
way.

You should only use this on windows for which you have
previously called gdk_window_set_transient_for()
#NAME: withdrawn
#PARENT: Gdk.WindowState
#COMMENT: the window is not shown.
#NAME: get_actions
#PARENT: Gdk.DragContext.get_actions
#COMMENT: the #GdkDragAction flags
#NAME: selection
#PARENT: Gdk.selection_owner_get.Window
#COMMENT: an atom indentifying a selection.
#NAME: is_composited
#PARENT: Gdk.Screen.is_composited
#COMMENT: Whether windows with RGBA visuals can reasonably be
expected to have their alpha channels drawn correctly on the screen.
#NAME: display
#PARENT: Gdk.GLContext
#COMMENT: The #GdkWindow the gl context is bound to.
#NAME: unmaximize
#PARENT: Gdk.Window
#COMMENT: Unmaximizes the window. If the window wasn’t maximized, then this
function does nothing.

On X11, asks the window manager to unmaximize @window, if the
window manager supports this operation. Not all window managers
support this, and some deliberately ignore it or don’t have a
concept of “maximized”; so you can’t rely on the unmaximization
actually happening. But it will happen with most standard window
managers, and GDK makes a best effort to get it to happen.

On Windows, reliably unmaximizes the window.
#NAME: test_simulate_button
#PARENT: Gdk
#COMMENT: This function is intended to be used in GTK+ test programs.
It will warp the mouse pointer to the given (@x,@y) coordinates
within @window and simulate a button press or release event.
Because the mouse pointer needs to be warped to the target
location, use of this function outside of test programs that
run in their own virtual windowing system (e.g. Xvfb) is not
recommended.

Also, gdk_test_simulate_button() is a fairly low level function,
for most testing purposes, gtk_test_widget_click() is the right
function to call which will generate a button press event followed
by its accompanying button release event.
#NAME: end_updating
#PARENT: Gdk.FrameClock
#COMMENT: Stops updates for an animation. See the documentation for
gdk_frame_clock_begin_updating().
#NAME: atom_name
#PARENT: Gdk.Atom.intern_static_string.Atom
#COMMENT: a static string
#NAME: EVENT_PROPAGATE
#PARENT: Gdk
#COMMENT: Use this macro as the return value for continuing the propagation of
an event handler.
#NAME: warp
#PARENT: Gdk.Device
#COMMENT: Warps @device in @display to the point @x,@y on
the screen @screen, unless the device is confined
to a window by a grab, in which case it will be moved
as far as allowed by the grab. Warping the pointer
creates events as if the user had moved the mouse
instantaneously to the destination.

Note that the pointer should normally be under the
control of the user. This function was added to cover
some rare use cases like keyboard navigation support
for the color picker in the #GtkColorSelectionDialog.
#NAME: private
#PARENT: Gdk.DragAction
#COMMENT: Special action which tells the source that the
 destination will do something that the source doesn’t understand.
#NAME: user_pos
#PARENT: Gdk.WindowHints
#COMMENT: indicates that the window’s position was explicitly set
 by the user
#NAME: manager
#PARENT: Gdk.DisplayManager.get_default_display.Display
#COMMENT: a #GdkDisplayManager
#NAME: win_x
#PARENT: Gdk.Window.at_pointer.Window
#COMMENT: return location for origin of the window under the pointer
#NAME: get_refresh_interval
#PARENT: Gdk.FrameTimings.get_refresh_interval
#COMMENT: the refresh interval of the display, in microseconds,
 or 0 if the refresh interval is not available.
 See gdk_frame_timings_get_complete().
#NAME: dotbox
#PARENT: Gdk.CursorType
#COMMENT: ![](dotbox.png)
#NAME: win_y
#PARENT: Gdk.Window.at_pointer.Window
#COMMENT: return location for origin of the window under the pointer
#NAME: distance
#PARENT: Gdk.Display.set_double_click_distance.none
#COMMENT: distance in pixels
#NAME: menu
#PARENT: Gdk.WindowTypeHint
#COMMENT: Window used to implement a menu; GTK+ uses
 this hint only for torn-off menus, see #GtkTearoffMenuItem.
#NAME: keyval
#PARENT: Gdk.keyval_to_unicode.guint32
#COMMENT: a GDK key symbol
#NAME: display_name
#PARENT: Gdk.Display.open.Display
#COMMENT: the name of the display to open
#NAME: get_resolution
#PARENT: Gdk.Screen.get_resolution
#COMMENT: the current resolution, or -1 if no resolution
has been set.
#NAME: window
#PARENT: Gdk.Window.get_root_origin.none
#COMMENT: a toplevel #GdkWindow
#NAME: get_device
#PARENT: Gdk.Event
#COMMENT: If the event contains a “device” field, this function will return
it, else it will return %NULL.
#NAME: get_display
#PARENT: Gdk.get_display
#COMMENT: the name of the display.
#NAME: edge
#PARENT: Gdk.Window.begin_resize_drag_for_device.none
#COMMENT: the edge or corner from which the drag is started
#NAME: hash
#PARENT: Gdk.Color
#COMMENT: A hash function suitable for using for a hash
table that stores #GdkColors.
#NAME: get_best_with_type
#PARENT: Gdk.Visual.get_best_with_type
#COMMENT: best visual of the given type
#NAME: deleted
#PARENT: Gdk.SettingAction
#COMMENT: a setting was deleted.
#NAME: is_destroyed
#PARENT: Gdk.Window
#COMMENT: Check to see if a window is destroyed..
#NAME: device_manager
#PARENT: Gdk.DeviceManager.get_display.Display
#COMMENT: a #GdkDeviceManager
#NAME: draped_box
#PARENT: Gdk.CursorType
#COMMENT: ![](draped_box.png)
#NAME: set_type_hint
#PARENT: Gdk.Window
#COMMENT: The application can use this call to provide a hint to the window
manager about the functionality of a window. The window manager
can use this information when determining the decoration and behaviour
of the window.

The hint must be set before the window is mapped.
#NAME: index_ranges
#PARENT: Gdk.pango_layout_line_get_clip_region.cairo.Region
#COMMENT: array of byte indexes into the layout,
    where even members of array are start indexes and odd elements
    are end indexes
#NAME: threads_add_idle_full
#PARENT: Gdk.threads_add_idle_full
#COMMENT: the ID (greater than 0) of the event source.
#NAME: Gravity
#PARENT: Gdk
#COMMENT: Defines the reference point of a window and the meaning of coordinates
passed to gtk_window_move(). See gtk_window_move() and the "implementation
notes" section of the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec)
specification for more details.
#NAME: frame_clock
#PARENT: Gdk.FrameClock.end_updating.none
#COMMENT: a #GdkFrameClock
#NAME: window
#PARENT: Gdk.Window.create_similar_image_surface.cairo.Surface
#COMMENT: window to make new surface similar to, or
  %NULL if none
#NAME: mod5_mask
#PARENT: Gdk.ModifierType
#COMMENT: the eighth modifier key (it depends on the modifier
 mapping of the X server which key is interpreted as this modifier).
#NAME: get_mode
#PARENT: Gdk.Device
#COMMENT: Determines the mode of the device.
#NAME: pointer_grab
#PARENT: Gdk
#COMMENT: Grabs the pointer (usually a mouse) so that all events are passed to this
application until the pointer is ungrabbed with gdk_pointer_ungrab(), or
the grab window becomes unviewable.
This overrides any previous pointer grab by this client.

Pointer grabs are used for operations which need complete control over mouse
events, even if the mouse leaves the application.
For example in GTK+ it is used for Drag and Drop, for dragging the handle in
the #GtkHPaned and #GtkVPaned widgets.

Note that if the event mask of an X window has selected both button press and
button release events, then a button press event will cause an automatic
pointer grab until the button is released.
X does this automatically since most applications expect to receive button
press and release events in pairs.
It is equivalent to a pointer grab on the window with @owner_events set to
%TRUE.

If you set up anything at the time you take the grab that needs to be cleaned
up when the grab ends, you should handle the #GdkEventGrabBroken events that
are emitted when the grab ends unvoluntarily.
#NAME: get_frame_time
#PARENT: Gdk.FrameClock.get_frame_time
#COMMENT: a timestamp in microseconds, in the timescale of
 of g_get_monotonic_time().
#NAME: rgba
#PARENT: Gdk.cairo_set_source_rgba.none
#COMMENT: a #GdkRGBA
#NAME: window
#PARENT: Gdk.offscreen_window_get_embedder.Window
#COMMENT: a #GdkWindow
#NAME: distance
#PARENT: Gdk.events_get_distance.gboolean
#COMMENT: return location for the distance
#NAME: lower
#PARENT: Gdk.keyval_convert_case.none
#COMMENT: return location for lowercase version of @symbol
#NAME: EventButton
#PARENT: Gdk
#COMMENT: Used for button press and button release events. The
@type field will be one of %GDK_BUTTON_PRESS,
%GDK_2BUTTON_PRESS, %GDK_3BUTTON_PRESS or %GDK_BUTTON_RELEASE,

Double and triple-clicks result in a sequence of events being received.
For double-clicks the order of events will be:

- %GDK_BUTTON_PRESS
- %GDK_BUTTON_RELEASE
- %GDK_BUTTON_PRESS
- %GDK_2BUTTON_PRESS
- %GDK_BUTTON_RELEASE

Note that the first click is received just like a normal
button press, while the second click results in a %GDK_2BUTTON_PRESS
being received just after the %GDK_BUTTON_PRESS.

Triple-clicks are very similar to double-clicks, except that
%GDK_3BUTTON_PRESS is inserted after the third click. The order of the
events is:

- %GDK_BUTTON_PRESS
- %GDK_BUTTON_RELEASE
- %GDK_BUTTON_PRESS
- %GDK_2BUTTON_PRESS
- %GDK_BUTTON_RELEASE
- %GDK_BUTTON_PRESS
- %GDK_3BUTTON_PRESS
- %GDK_BUTTON_RELEASE

For a double click to occur, the second button press must occur within
1/4 of a second of the first. For a triple click to occur, the third
button press must also occur within 1/2 second of the first button press.
#NAME: triggers_context_menu
#PARENT: Gdk.Event
#COMMENT: This function returns whether a #GdkEventButton should trigger a
context menu, according to platform conventions. The right mouse
button always triggers context menus. Additionally, if
gdk_keymap_get_modifier_mask() returns a non-0 mask for
%GDK_MODIFIER_INTENT_CONTEXT_MENU, then the left mouse button will
also trigger a context menu if this modifier is pressed.

This function should always be used instead of simply checking for
event->button == %GDK_BUTTON_SECONDARY.
#NAME: create_similar_surface
#PARENT: Gdk.Window
#COMMENT: Create a new surface that is as compatible as possible with the
given @window. For example the new surface will have the same
fallback resolution and font options as @window. Generally, the new
surface will also use the same backend as @window, unless that is
not possible for some reason. The type of the returned surface may
be examined with cairo_surface_get_type().

Initially the surface contents are all 0 (transparent if contents
have transparency, black otherwise.)
#NAME: event
#PARENT: Gdk.Event.triggers_context_menu.gboolean
#COMMENT: a #GdkEvent, currently only button events are meaningful values
#NAME: get_parent
#PARENT: Gdk.Window
#COMMENT: Obtains the parent of @window, as known to GDK. Does not query the
X server; thus this returns the parent as passed to gdk_window_new(),
not the actual parent. This should never matter unless you’re using
Xlib calls mixed with GDK calls on the X11 platform. It may also
matter for toplevel windows, because the window manager may choose
to reparent them.

Note that you should use gdk_window_get_effective_parent() when
writing generic code that walks up a window hierarchy, because
gdk_window_get_parent() will most likely not do what you expect if
there are offscreen windows in the hierarchy.
#NAME: event
#PARENT: Gdk.Event.get_screen.Screen
#COMMENT: a #GdkEvent
#NAME: get_history_start
#PARENT: Gdk.FrameClock
#COMMENT: #GdkFrameClock internally keeps a history of #GdkFrameTimings
objects for recent frames that can be retrieved with
gdk_frame_clock_get_timings(). The set of stored frames
is the set from the counter values given by
gdk_frame_clock_get_history_start() and
gdk_frame_clock_get_frame_counter(), inclusive.
#NAME: window
#PARENT: Gdk.Window.get_update_area.cairo.Region
#COMMENT: a #GdkWindow
#NAME: EventFocus
#PARENT: Gdk
#COMMENT: Describes a change of keyboard focus.
#NAME: child
#PARENT: Gdk.WindowType
#COMMENT: child window (used to implement e.g. #GtkEntry)
#NAME: window
#PARENT: Gdk.Window.get_type_hint.WindowTypeHint
#COMMENT: A toplevel #GdkWindow
#NAME: function
#PARENT: Gdk.threads_add_idle.guint
#COMMENT: function to call
#NAME: window
#PARENT: Gdk.Window.stick.none
#COMMENT: a toplevel #GdkWindow
#NAME: events_pending
#PARENT: Gdk
#COMMENT: Checks if any events are ready to be processed for any display.
#NAME: get_best_depth
#PARENT: Gdk.Visual.get_best_depth
#COMMENT: best available depth
#NAME: window
#PARENT: Gdk.Window.freeze_toplevel_updates_libgtk_only.none
#COMMENT: a #GdkWindow
#NAME: static_gray
#PARENT: Gdk.VisualType
#COMMENT: Each pixel value indexes a grayscale value
    directly.
#NAME: keyval
#PARENT: Gdk.Keymap.translate_keyboard_state.gboolean
#COMMENT: return location for keyval, or %NULL
#NAME: y_origin
#PARENT: Gdk.pango_layout_get_clip_region.cairo.Region
#COMMENT: Y pixel where you intend to draw the layout with this clip
#NAME: motion
#PARENT: Gdk.Event
#COMMENT: a #GdkEventMotion
#NAME: test_simulate_key
#PARENT: Gdk
#COMMENT: This function is intended to be used in GTK+ test programs.
If (@x,@y) are > (-1,-1), it will warp the mouse pointer to
the given (@x,@y) coordinates within @window and simulate a
key press or release event.

When the mouse pointer is warped to the target location, use
of this function outside of test programs that run in their
own virtual windowing system (e.g. Xvfb) is not recommended.
If (@x,@y) are passed as (-1,-1), the mouse pointer will not
be warped and @window origin will be used as mouse pointer
location for the event.

Also, gdk_test_simulate_key() is a fairly low level function,
for most testing purposes, gtk_test_widget_send_key() is the
right function to call which will generate a key press event
followed by its accompanying key release event.
#NAME: get_depth
#PARENT: Gdk.Visual
#COMMENT: Returns the bit depth of this visual.
#NAME: left
#PARENT: Gdk.ScrollDirection
#COMMENT: the window is scrolled to the left.
#NAME: device
#PARENT: Gdk.Window.get_device_events.EventMask
#COMMENT: a #GdkDevice.
#NAME: touch
#PARENT: Gdk.Event
#COMMENT: a #GdkEventTouch
#NAME: get_cursor_type
#PARENT: Gdk.Cursor.get_cursor_type
#COMMENT: a #GdkCursorType
#NAME: pen
#PARENT: Gdk.InputSource
#COMMENT: the device is a stylus of a graphics tablet or similar device.
#NAME: shape_region
#PARENT: Gdk.Window.input_shape_combine_region.none
#COMMENT: region of window to be non-transparent
#NAME: context
#PARENT: Gdk.AppLaunchContext.set_icon.none
#COMMENT: a #GdkAppLaunchContext
#NAME: window
#PARENT: Gdk.Window.set_background_pattern.none
#COMMENT: a #GdkWindow
#NAME: pango_context_get
#PARENT: Gdk
#COMMENT: Creates a #PangoContext for the default GDK screen.

The context must be freed when you’re finished with it.

When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.

The newly created context will have the default font options (see
#cairo_font_options_t) for the default screen; if these options
change it will not be updated. Using gtk_widget_get_pango_context()
is more convenient if you want to keep a context around and track
changes to the screen’s font rendering settings.
#NAME: get_display
#PARENT: Gdk.Cursor.get_display
#COMMENT: the #GdkDisplay associated to @cursor
#NAME: list_devices
#PARENT: Gdk.Display
#COMMENT: Returns the list of available input devices attached to @display.
The list is statically allocated and should not be freed.
#NAME: modifier_reserved_21_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: set_opaque_region
#PARENT: Gdk.Window
#COMMENT: For optimisation purposes, compositing window managers may
like to not draw obscured regions of windows, or turn off blending
during for these regions. With RGB windows with no transparency,
this is just the shape of the window, but with ARGB32 windows, the
compositor does not know what regions of the window are transparent
or not.

This function only works for toplevel windows.

GTK+ will update this property automatically if
the @window background is opaque, as we know where the opaque regions
are. If your window background is not opaque, please update this
property in your #GtkWidget::style-updated handler.
#NAME: xevent
#PARENT: Gdk.FilterFunc.FilterReturn
#COMMENT: the native event to filter.
#NAME: intern
#PARENT: Gdk.Atom
#COMMENT: Finds or creates an atom corresponding to a given string.
#NAME: window
#PARENT: Gdk.Window.set_transient_for.none
#COMMENT: a toplevel #GdkWindow
#NAME: EventType
#PARENT: Gdk
#COMMENT: Specifies the type of the event.

Do not confuse these events with the signals that GTK+ widgets emit.
Although many of these events result in corresponding signals being emitted,
the events are often transformed or filtered along the way.

In some language bindings, the values %GDK_2BUTTON_PRESS and
%GDK_3BUTTON_PRESS would translate into something syntactically
invalid (eg `Gdk.EventType.2ButtonPress`, where a
symbol is not allowed to start with a number). In that case, the
aliases %GDK_DOUBLE_BUTTON_PRESS and %GDK_TRIPLE_BUTTON_PRESS can
be used instead.
#NAME: get_effective_parent
#PARENT: Gdk.Window
#COMMENT: Obtains the parent of @window, as known to GDK. Works like
gdk_window_get_parent() for normal windows, but returns the
window’s embedder for offscreen windows.

See also: gdk_offscreen_window_get_embedder()
#NAME: pick-embedded-child
#PARENT: Gdk.Window.pick-embedded-child
#COMMENT: the #GdkWindow of the
    embedded child at @x, @y, or %NULL
#NAME: event1
#PARENT: Gdk.Event._get_angle.gboolean
#COMMENT: first #GdkEvent
#NAME: get_debug_enabled
#PARENT: Gdk.GLContext
#COMMENT: Retrieves the value set using gdk_gl_context_set_debug_enabled().
#NAME: device
#PARENT: Gdk.Device.get_history.gboolean
#COMMENT: a #GdkDevice
#NAME: keyval_is_upper
#PARENT: Gdk.keyval_is_upper
#COMMENT: %TRUE if @keyval is in upper case, or if @keyval is not subject to
 case conversion.
#NAME: time_
#PARENT: Gdk.pointer_grab.GrabStatus
#COMMENT: the timestamp of the event which led to this pointer grab. This usually
        comes from a #GdkEventButton struct, though %GDK_CURRENT_TIME can be used if
        the time isn’t known.
#NAME: event2
#PARENT: Gdk.Event._get_angle.gboolean
#COMMENT: second #GdkEvent
#NAME: selection
#PARENT: Gdk.EventSelection
#COMMENT: the selection.
#NAME: encoding
#PARENT: Gdk.text_property_to_utf8_list_for_display.gint
#COMMENT: an atom representing the encoding of the text
#NAME: window
#PARENT: Gdk.Window.get_pointer.Window
#COMMENT: a #GdkWindow
#NAME: get_screen
#PARENT: Gdk.Window
#COMMENT: Gets the #GdkScreen associated with a #GdkWindow.
#NAME: data
#PARENT: Gdk.Window.remove_filter.none
#COMMENT: user data for previously-added filter function
#NAME: region
#PARENT: Gdk.Window.invalidate_maybe_recurse.none
#COMMENT: a #cairo_region_t
#NAME: delete
#PARENT: Gdk.EventType
#COMMENT: the window manager has requested that the toplevel window be
  hidden or destroyed, usually when the user clicks on a special icon in the
  title bar.
#NAME: cairo_set_source_color
#PARENT: Gdk
#COMMENT: Sets the specified #GdkColor as the source color of @cr.
#NAME: pointer_is_grabbed
#PARENT: Gdk.pointer_is_grabbed
#COMMENT: %TRUE if the pointer is currently grabbed by this application.
#NAME: proximity_out_mask
#PARENT: Gdk.EventMask
#COMMENT: receive proximity out events
#NAME: window
#PARENT: Gdk.cairo_set_source_window.none
#COMMENT: a #GdkWindow
#NAME: threads_add_timeout_seconds_full
#PARENT: Gdk
#COMMENT: A variant of gdk_threads_add_timeout_full() with second-granularity.
See g_timeout_add_seconds_full() for a discussion of why it is
a good idea to use this function if you don’t need finer granularity.
#NAME: proximity_in_mask
#PARENT: Gdk.EventMask
#COMMENT: receive proximity in events
#NAME: nonlinear
#PARENT: Gdk.NotifyType
#COMMENT: the window is entered from or left towards
  a window which is neither an ancestor nor an inferior.
#NAME: event
#PARENT: Gdk.Event.get_button.gboolean
#COMMENT: a #GdkEvent
#NAME: cursor_type
#PARENT: Gdk.Cursor.new.Cursor
#COMMENT: cursor to create
#NAME: window
#PARENT: Gdk.Window.set_keep_above.none
#COMMENT: a toplevel #GdkWindow
#NAME: keyval_name
#PARENT: Gdk
#COMMENT: Converts a key value into a symbolic name.

The names are the same as those in the
`gdk/gdkkeysyms.h` header file
but without the leading “GDK_KEY_”.
#NAME: get
#PARENT: Gdk.DisplayManager
#COMMENT: Gets the singleton #GdkDisplayManager object.

When called for the first time, this function consults the
`GDK_BACKEND` environment variable to find out which
of the supported GDK backends to use (in case GDK has been compiled
with multiple backends). Applications can use gdk_set_allowed_backends()
to limit what backends can be used.
#NAME: Point
#PARENT: Gdk
#COMMENT: Defines the x and y coordinates of a point.
#NAME: layout
#PARENT: Gdk.FrameClockPhase
#COMMENT: corresponds to GdkFrameClock::layout.
#NAME: device
#PARENT: Gdk.Device.set_key.none
#COMMENT: a #GdkDevice
#NAME: get_height_mm
#PARENT: Gdk.Screen
#COMMENT: Returns the height of @screen in millimeters.
Note that on some X servers this value will not be correct.
#NAME: selection_owner_get_for_display
#PARENT: Gdk.selection_owner_get_for_display
#COMMENT: if there is a selection owner
   for this window, and it is a window known to the current
   process, the #GdkWindow that owns the selection, otherwise
   %NULL.
#NAME: configure
#PARENT: Gdk.EventType
#COMMENT: the size, position or stacking order of the window has changed.
  Note that GTK+ discards these events for %GDK_WINDOW_CHILD windows.
#NAME: line
#PARENT: Gdk.pango_layout_line_get_clip_region.cairo.Region
#COMMENT: a #PangoLayoutLine
#NAME: set_urgency_hint
#PARENT: Gdk.Window
#COMMENT: Toggles whether a window needs the user's
urgent attention.
#NAME: tiled
#PARENT: Gdk.WindowState
#COMMENT: the window is in a tiled state, Since 3.10
#NAME: touchpad
#PARENT: Gdk.InputSource
#COMMENT: the device is an indirect touch device, such
    as a touchpad. This device type has been added in 3.4.
#NAME: above
#PARENT: Gdk.Window.restack.none
#COMMENT: a boolean
#NAME: y_root
#PARENT: Gdk.EventButton
#COMMENT: the y coordinate of the pointer relative to the root of the
  screen.
#NAME: window
#PARENT: Gdk.Window.create_similar_surface.cairo.Surface
#COMMENT: window to make new surface similar to
#NAME: get_event_type
#PARENT: Gdk.Event.get_event_type
#COMMENT: a #GdkEventType
#NAME: supports_input_shapes
#PARENT: Gdk.Display
#COMMENT: Returns %TRUE if gdk_window_input_shape_combine_mask() can
be used to modify the input shape of windows on @display.
#NAME: screen
#PARENT: Gdk.AppLaunchContext.set_screen.none
#COMMENT: a #GdkScreen
#NAME: window
#PARENT: Gdk.EventCrossing
#COMMENT: the window which received the event.
#NAME: targets
#PARENT: Gdk.drag_begin_for_device.DragContext
#COMMENT: the offered targets,
    as list of #GdkAtoms
#NAME: axes
#PARENT: Gdk.Device.get_axis_value.gboolean
#COMMENT: pointer to an array of axes
#NAME: selection_owner_get
#PARENT: Gdk
#COMMENT: Determines the owner of the given selection.
#NAME: program_class
#PARENT: Gdk.set_program_class.none
#COMMENT: a string.
#NAME: cursor
#PARENT: Gdk.Window.set_device_cursor.none
#COMMENT: a #GdkCursor
#NAME: red
#PARENT: Gdk.Color
#COMMENT: The red component of the color. This is
    a value between 0 and 65535, with 65535 indicating
    full intensity
#NAME: window
#PARENT: Gdk.Window.set_support_multidevice.none
#COMMENT: a #GdkWindow.
#NAME: toolbar
#PARENT: Gdk.WindowTypeHint
#COMMENT: Window used to implement toolbars.
#NAME: changed_mask
#PARENT: Gdk.EventWindowState
#COMMENT: mask specifying what flags have changed.
#NAME: get_default_display
#PARENT: Gdk.DisplayManager.get_default_display
#COMMENT: a #GdkDisplay, or %NULL if
    there is no default display.
#NAME: disabled
#PARENT: Gdk.InputMode
#COMMENT: the device is disabled and will not report any events.
#NAME: device
#PARENT: Gdk.Event.set_device.none
#COMMENT: a #GdkDevice
#NAME: visual_type
#PARENT: Gdk.Visual.get_best_with_type.Visual
#COMMENT: a visual type
#NAME: device
#PARENT: Gdk.EventTouch
#COMMENT: the master device that the event originated from. Use
gdk_event_get_source_device() to get the slave device.
#NAME: normal
#PARENT: Gdk.WindowTypeHint
#COMMENT: Normal toplevel window.
#NAME: has_pending
#PARENT: Gdk.Display
#COMMENT: Returns whether the display has events that are waiting
to be processed.
#NAME: put_event
#PARENT: Gdk.Display
#COMMENT: Appends a copy of the given event onto the front of the event
queue for @display.
#NAME: EventKey
#PARENT: Gdk
#COMMENT: Describes a key press or key release event.
#NAME: type
#PARENT: Gdk.EventCrossing
#COMMENT: the type of the event (%GDK_ENTER_NOTIFY or %GDK_LEAVE_NOTIFY).
#NAME: atom_intern
#PARENT: Gdk
#COMMENT: Finds or creates an atom corresponding to a given string.
#NAME: get_events
#PARENT: Gdk.Window.get_events
#COMMENT: event mask for @window
#NAME: get_best_type
#PARENT: Gdk.Visual.get_best_type
#COMMENT: best visual type
#NAME: window
#PARENT: Gdk.Window.set_title.none
#COMMENT: a toplevel #GdkWindow
#NAME: text_property_to_utf8_list_for_display
#PARENT: Gdk.text_property_to_utf8_list_for_display
#COMMENT: the number of strings in the resulting list
#NAME: get_current
#PARENT: Gdk.GLContext.get_current
#COMMENT: the current #GdkGLContext, or %NULL
#NAME: pattern
#PARENT: Gdk.Window.set_background_pattern.none
#COMMENT: a pattern to use, or %NULL
#NAME: startup_id
#PARENT: Gdk.notify_startup_complete_with_id.none
#COMMENT: a startup-notification identifier, for which
    notification process should be completed
#NAME: get_frame_counter
#PARENT: Gdk.FrameTimings
#COMMENT: Gets the frame counter value of the #GdkFrameClock when this
this frame was drawn.
#NAME: get_best_with_both
#PARENT: Gdk.Visual.get_best_with_both
#COMMENT: best visual with both @depth
    and @visual_type, or %NULL if none
#NAME: thaw_toplevel_updates_libgtk_only
#PARENT: Gdk.Window
#COMMENT: Thaws a window frozen with
gdk_window_freeze_toplevel_updates_libgtk_only().

This function is not part of the GDK public API and is only
for use by GTK+.
#NAME: put
#PARENT: Gdk.Event
#COMMENT: Appends a copy of the given event onto the front of the event
queue for event->any.window’s display, or the default event
queue if event->any.window is %NULL. See gdk_display_put_event().
#NAME: Cursor
#PARENT: Gdk
#COMMENT: A #GdkCursor represents a cursor. Its contents are private.
#NAME: EventWindowState
#PARENT: Gdk
#COMMENT: Generated when the state of a toplevel window changes.
#NAME: modifiers
#PARENT: Gdk.Device.set_key.none
#COMMENT: the modifiers to set
#NAME: keyval_to_upper
#PARENT: Gdk
#COMMENT: Converts a key value to upper case, if applicable.
#NAME: keys
#PARENT: Gdk.Keymap.get_entries_for_keycode.gboolean
#COMMENT: return
    location for array of #GdkKeymapKey, or %NULL
#NAME: local
#PARENT: Gdk.DragProtocol
#COMMENT: Intra-application DND.
#NAME: pixbuf_get_from_surface
#PARENT: Gdk.pixbuf_get_from_surface
#COMMENT: A newly-created pixbuf with a
    reference count of 1, or %NULL on error
#NAME: pointer_motion_mask
#PARENT: Gdk.EventMask
#COMMENT: receive all pointer motion events
#NAME: refresh_interval_return
#PARENT: Gdk.FrameClock.get_refresh_info.none
#COMMENT: a location to store the determined refresh
 interval, or %NULL. A default refresh interval of 1/60th of
 a second will be stored if no history is present.
#NAME: grayscale
#PARENT: Gdk.VisualType
#COMMENT: Each pixel is an index into a color map that
    maps pixel values into grayscale values. The color map can be
    changed by an application.
#NAME: coffee_mug
#PARENT: Gdk.CursorType
#COMMENT: ![](coffee_mug.png)
#NAME: device
#PARENT: Gdk.DeviceManager.device-added.none
#COMMENT: the newly added #GdkDevice.
#NAME: aspect
#PARENT: Gdk.WindowHints
#COMMENT: aspect ratio fields are set
#NAME: x
#PARENT: Gdk.EventScroll
#COMMENT: the x coordinate of the pointer relative to the window.
#NAME: get_origin
#PARENT: Gdk.Window.get_origin
#COMMENT: not meaningful, ignore
#NAME: display
#PARENT: Gdk.selection_owner_get_for_display.Window
#COMMENT: a #GdkDisplay
#NAME: y
#PARENT: Gdk.EventScroll
#COMMENT: the y coordinate of the pointer relative to the window.
#NAME: focus_change
#PARENT: Gdk.Event
#COMMENT: a #GdkEventFocus
#NAME: get_event_compression
#PARENT: Gdk.Window
#COMMENT: Get the current event compression setting for this window.
#NAME: key
#PARENT: Gdk.Keymap.lookup_key.guint
#COMMENT: a #GdkKeymapKey with keycode, group, and level initialized
#NAME: window
#PARENT: Gdk.Window.merge_child_input_shapes.none
#COMMENT: a #GdkWindow
#NAME: show_unraised
#PARENT: Gdk.Window
#COMMENT: Shows a #GdkWindow onscreen, but does not modify its stacking
order. In contrast, gdk_window_show() will raise the window
to the top of the window stack.

On the X11 platform, in Xlib terms, this function calls
XMapWindow() (it also updates some internal GDK state, which means
that you can’t really use XMapWindow() directly on a GDK window).
#NAME: keymap
#PARENT: Gdk.Keymap.get_modifier_mask.ModifierType
#COMMENT: a #GdkKeymap
#NAME: raise
#PARENT: Gdk.Window
#COMMENT: Raises @window to the top of the Z-order (stacking order), so that
other windows with the same parent window appear below @window.
This is true whether or not the windows are visible.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_raise() only
requests the restack, does not guarantee it.
#NAME: set_child_shapes
#PARENT: Gdk.Window
#COMMENT: Sets the shape mask of @window to the union of shape masks
for all children of @window, ignoring the shape mask of @window
itself. Contrast with gdk_window_merge_child_shapes() which includes
the shape mask of @window in the masks to be merged.
#NAME: unstick
#PARENT: Gdk.Window
#COMMENT: Reverse operation for gdk_window_stick(); see gdk_window_stick(),
and gtk_window_unstick().
#NAME: get_mode
#PARENT: Gdk.Device.get_mode
#COMMENT: a #GdkInputSource
#NAME: type
#PARENT: Gdk.Device
#COMMENT: Device role in the device manager.
#NAME: prepend
#PARENT: Gdk.PropMode
#COMMENT: the new data is prepended to the existing data.
#NAME: selection_owner_set
#PARENT: Gdk
#COMMENT: Sets the owner of the given selection.
#NAME: parse
#PARENT: Gdk.RGBA.parse
#COMMENT: %TRUE if the parsing succeeded
#NAME: button
#PARENT: Gdk.Window.begin_resize_drag.none
#COMMENT: the button being used to drag, or 0 for a keyboard-initiated drag
#NAME: set_mode
#PARENT: Gdk.Device
#COMMENT: Sets a the mode of an input device. The mode controls if the
device is active and whether the device’s range is mapped to the
entire screen or to a single window.

Note: This is only meaningful for floating devices, master devices (and
slaves connected to these) drive the pointer cursor, which is not limited
by the input mode.
#NAME: new_for_display
#PARENT: Gdk.Cursor
#COMMENT: Creates a new cursor from the set of builtin cursors.
Some useful ones are:
- ![](right_ptr.png) #GDK_RIGHT_PTR (right-facing arrow)
- ![](crosshair.png) #GDK_CROSSHAIR (crosshair)
- ![](xterm.png) #GDK_XTERM (I-beam)
- ![](watch.png) #GDK_WATCH (busy)
- ![](fleur.png) #GDK_FLEUR (for moving objects)
- ![](hand1.png) #GDK_HAND1 (a right-pointing hand)
- ![](hand2.png) #GDK_HAND2 (a left-pointing hand)
- ![](left_side.png) #GDK_LEFT_SIDE (resize left side)
- ![](right_side.png) #GDK_RIGHT_SIDE (resize right side)
- ![](top_left_corner.png) #GDK_TOP_LEFT_CORNER (resize northwest corner)
- ![](top_right_corner.png) #GDK_TOP_RIGHT_CORNER (resize northeast corner)
- ![](bottom_left_corner.png) #GDK_BOTTOM_LEFT_CORNER (resize southwest corner)
- ![](bottom_right_corner.png) #GDK_BOTTOM_RIGHT_CORNER (resize southeast corner)
- ![](top_side.png) #GDK_TOP_SIDE (resize top side)
- ![](bottom_side.png) #GDK_BOTTOM_SIDE (resize bottom side)
- ![](sb_h_double_arrow.png) #GDK_SB_H_DOUBLE_ARROW (move vertical splitter)
- ![](sb_v_double_arrow.png) #GDK_SB_V_DOUBLE_ARROW (move horizontal splitter)
- #GDK_BLANK_CURSOR (Blank cursor). Since 2.16
#NAME: get_accept_focus
#PARENT: Gdk.Window
#COMMENT: Determines whether or not the desktop environment shuld be hinted that
the window does not want to receive input focus.
#NAME: button5_mask
#PARENT: Gdk.ModifierType
#COMMENT: the fifth mouse button.
#NAME: get_byte_order
#PARENT: Gdk.Visual.get_byte_order
#COMMENT: A #GdkByteOrder stating the byte order of @visual.
#NAME: keymap
#PARENT: Gdk.Keymap.add_virtual_modifiers.none
#COMMENT: a #GdkKeymap
#NAME: expose
#PARENT: Gdk.EventType
#COMMENT: all or part of the window has become visible and needs to be
  redrawn.
#NAME: window
#PARENT: Gdk.property_get.gboolean
#COMMENT: a #GdkWindow
#NAME: event
#PARENT: Gdk.Event.get_state.gboolean
#COMMENT: a #GdkEvent or %NULL
#NAME: display
#PARENT: Gdk.Display.keyboard_ungrab.none
#COMMENT: a #GdkDisplay.
#NAME: display
#PARENT: Gdk.Display.get_app_launch_context.AppLaunchContext
#COMMENT: a #GdkDisplay
#NAME: set_role
#PARENT: Gdk.Window
#COMMENT: When using GTK+, typically you should use gtk_window_set_role() instead
of this low-level function.

The window manager and session manager use a window’s role to
distinguish it from other kinds of window in the same application.
When an application is restarted after being saved in a previous
session, all windows with the same title and role are treated as
interchangeable.  So if you have two windows with the same title
that should be distinguished for session management purposes, you
should set the role on those windows. It doesn’t matter what string
you use for the role, as long as you have a different role for each
non-interchangeable kind of window.
#NAME: get_events
#PARENT: Gdk.Window
#COMMENT: Gets the event mask for @window for all master input devices. See
gdk_window_set_events().
#NAME: get_image
#PARENT: Gdk.Cursor.get_image
#COMMENT: a #GdkPixbuf representing
  @cursor, or %NULL
#NAME: pixbuf_get_from_window
#PARENT: Gdk.pixbuf_get_from_window
#COMMENT: A newly-created pixbuf with a
    reference count of 1, or %NULL on error
#NAME: RGBA
#PARENT: Gdk
#COMMENT: A #GdkRGBA is used to represent a (possibly translucent)
color, in a way that is compatible with cairos notion of color.
#NAME: get_show_events
#PARENT: Gdk
#COMMENT: Gets whether event debugging output is enabled.
#NAME: shape_region
#PARENT: Gdk.Window.shape_combine_region.none
#COMMENT: region of window to be non-transparent
#NAME: free
#PARENT: Gdk.Color
#COMMENT: Frees a #GdkColor created with gdk_color_copy().
#NAME: only_if_exists
#PARENT: Gdk.atom_intern.Atom
#COMMENT: if %TRUE, GDK is allowed to not create a new atom, but
  just return %GDK_NONE if the requested atom doesn’t already
  exists. Currently, the flag is ignored, since checking the
  existance of an atom is as expensive as creating it.
#NAME: display
#PARENT: Gdk.Display.supports_shapes.gboolean
#COMMENT: a #GdkDisplay
#NAME: device_manager
#PARENT: Gdk.DeviceManager.list_devices.Device
#COMMENT: a #GdkDeviceManager
#NAME: get_vendor_id
#PARENT: Gdk.Device
#COMMENT: Returns the vendor ID of this device, or %NULL if this information couldn't
be obtained. This ID is retrieved from the device, and is thus constant for
it.

This function, together with gdk_device_get_product_id(), can be used to eg.
compose #GSettings paths to store settings for this device.

|[<!-- language="C" -->
 static GSettings *
 get_device_settings (GdkDevice *device)
 {
   const gchar *vendor, *product;
   GSettings *settings;
   GdkDevice *device;
   gchar *path;

   vendor = gdk_device_get_vendor_id (device);
   product = gdk_device_get_product_id (device);

   path = g_strdup_printf ("/org/example/app/devices/%s:%s/", vendor, product);
   settings = g_settings_new_with_path (DEVICE_SCHEMA, path);
   g_free (path);

   return settings;
 }
]|
#NAME: parent
#PARENT: Gdk.Window.new.Window
#COMMENT: a #GdkWindow, or %NULL to create the window as a child of
  the default root window for the default display.
#NAME: mask
#PARENT: Gdk.Display.get_pointer.none
#COMMENT: location to store current modifier mask, or %NULL
#NAME: top_left_corner
#PARENT: Gdk.CursorType
#COMMENT: ![](top_left_corner.png)
#NAME: unfullscreen
#PARENT: Gdk.Window
#COMMENT: Moves the window out of fullscreen mode. If the window was not
fullscreen, does nothing.

On X11, asks the window manager to move @window out of the fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don’t have a concept of “fullscreen”; so you can’t rely on the
unfullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.
#NAME: show_events
#PARENT: Gdk.set_show_events.none
#COMMENT: %TRUE to output event debugging information.
#NAME: get_display
#PARENT: Gdk.Device.get_display
#COMMENT: a #GdkDisplay. This memory is owned
         by GTK+, and must not be freed or unreffed.
#NAME: setting
#PARENT: Gdk.Window.set_keep_above.none
#COMMENT: whether to keep @window above other windows
#NAME: color
#PARENT: Gdk.Color.to_string.utf8
#COMMENT: a #GdkColor
#NAME: cairo_create
#PARENT: Gdk.cairo_create
#COMMENT: A newly created Cairo context. Free with
 cairo_destroy() when you are done drawing.
#NAME: device_manager
#PARENT: Gdk.DeviceManager.get_client_pointer.Device
#COMMENT: a #GdkDeviceManager
#NAME: pointer_is_grabbed
#PARENT: Gdk.Display.pointer_is_grabbed
#COMMENT: %TRUE if an active X pointer grab is in effect
#NAME: new_owner
#PARENT: Gdk.OwnerChange
#COMMENT: some other app claimed the ownership
#NAME: cairo_region_create_from_surface
#PARENT: Gdk
#COMMENT: Creates region that describes covers the area where the given
@surface is more than 50% opaque.

This function takes into account device offsets that might be
set with cairo_surface_set_device_offset().
#NAME: window
#PARENT: Gdk.Window.begin_paint_region.none
#COMMENT: a #GdkWindow
#NAME: unicode_to_keyval
#PARENT: Gdk
#COMMENT: Convert from a ISO10646 character to a key symbol.
#NAME: InputSource
#PARENT: Gdk
#COMMENT: An enumeration describing the type of an input device in general terms.
#NAME: device
#PARENT: Gdk.Window.get_device_position.Window
#COMMENT: pointer #GdkDevice to query to.
#NAME: pdelete
#PARENT: Gdk.property_get.gboolean
#COMMENT: if %TRUE, delete the property after retrieving the
  data.
#NAME: get_height
#PARENT: Gdk.Screen.get_height
#COMMENT: the height of @screen in pixels.
#NAME: display
#PARENT: Gdk.Display.device_is_grabbed.gboolean
#COMMENT: a #GdkDisplay
#NAME: display
#PARENT: Gdk.Display.supports_clipboard_persistence.gboolean
#COMMENT: a #GdkDisplay
#NAME: events_get_distance
#PARENT: Gdk.events_get_distance
#COMMENT: %TRUE if the distance could be calculated.
#NAME: group
#PARENT: Gdk.EventKey
#COMMENT: the keyboard group.
#NAME: drag_get_selection
#PARENT: Gdk.drag_get_selection
#COMMENT: the selection atom, or %GDK_NONE
#NAME: name
#PARENT: Gdk.Atom.name
#COMMENT: a newly-allocated string containing the string
  corresponding to @atom. When you are done with the
  return value, you should free it using g_free().
#NAME: make_current
#PARENT: Gdk.GLContext
#COMMENT: Makes the @context the current one.
#NAME: EventSelection
#PARENT: Gdk
#COMMENT: Generated when a selection is requested or ownership of a selection
is taken over by another client application.
#NAME: event_handler_set
#PARENT: Gdk
#COMMENT: Sets the function to call to handle all events from GDK.

Note that GTK+ uses this to install its own event handler, so it is
usually not useful for GTK+ applications. (Although an application
can call this function then call gtk_main_do_event() to pass
events to GTK+.)
#NAME: display
#PARENT: Gdk.Display.store_clipboard.none
#COMMENT: a #GdkDisplay
#NAME: exchange
#PARENT: Gdk.CursorType
#COMMENT: ![](exchange.png)
#NAME: FullscreenMode
#PARENT: Gdk
#COMMENT: Indicates which monitor (in a multi-head setup) a window should span over
when in fullscreen mode.
#NAME: data
#PARENT: Gdk.event_handler_set.none
#COMMENT: user data to pass to the function.
#NAME: property_get
#PARENT: Gdk.property_get
#COMMENT: %TRUE if data was successfully received and stored
  in @data, otherwise %FALSE.
#NAME: has_pending
#PARENT: Gdk.Display.has_pending
#COMMENT: %TRUE if there are events ready to be processed.
#NAME: minor
#PARENT: Gdk.GLContext.set_required_version.none
#COMMENT: the minor version to request
#NAME: state
#PARENT: Gdk.EventTouch
#COMMENT: a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType
#NAME: PropMode
#PARENT: Gdk
#COMMENT: Describes how existing data is combined with new data when
using gdk_property_change().
#NAME: realize
#PARENT: Gdk.GLContext.realize
#COMMENT: %TRUE if the context is realized
#NAME: get_screen
#PARENT: Gdk.Display
#COMMENT: Returns a screen object for one of the screens of the display.
#NAME: x
#PARENT: Gdk.EventCrossing
#COMMENT: the x coordinate of the pointer relative to the window.
#NAME: mod1_mask
#PARENT: Gdk.ModifierType
#COMMENT: the fourth modifier key (it depends on the modifier
 mapping of the X server which key is interpreted as this modifier, but
 normally it is the Alt key).
#NAME: state
#PARENT: Gdk.EventButton
#COMMENT: a bit-mask representing the state of
  the modifier keys (e.g. Control, Shift and Alt) and the pointer
  buttons. See #GdkModifierType.
#NAME: y
#PARENT: Gdk.EventCrossing
#COMMENT: the y coordinate of the pointer relative to the window.
#NAME: TimeCoord
#PARENT: Gdk
#COMMENT: A #GdkTimeCoord stores a single event in a motion history.
#NAME: set_transient_for
#PARENT: Gdk.Window
#COMMENT: Indicates to the window manager that @window is a transient dialog
associated with the application window @parent. This allows the
window manager to do things like center @window on @parent and
keep @window above @parent.

See gtk_window_set_transient_for() if you’re using #GtkWindow or
#GtkDialog.
#NAME: parse
#PARENT: Gdk.Color
#COMMENT: Parses a textual specification of a color and fill in the
@red, @green, and @blue fields of a #GdkColor.

The string can either one of a large set of standard names
(taken from the X11 `rgb.txt` file), or it can be a hexadecimal
value in the form “\#rgb” “\#rrggbb”, “\#rrrgggbbb” or
“\#rrrrggggbbbb” where “r”, “g” and “b” are hex digits of
the red, green, and blue components of the color, respectively.
(White in the four forms is “\#fff”, “\#ffffff”, “\#fffffffff”
and “\#ffffffffffff”).
#NAME: emulating_pointer
#PARENT: Gdk.EventTouch
#COMMENT: whether the event should be used for emulating
  pointer event
#NAME: y_root
#PARENT: Gdk.EventMotion
#COMMENT: the y coordinate of the pointer relative to the root of the
  screen.
#NAME: event
#PARENT: Gdk.Event.get_event_type.EventType
#COMMENT: a #GdkEvent
#NAME: rootwin
#PARENT: Gdk.DragProtocol
#COMMENT: An extension to the Xdnd protocol for
 unclaimed root window drops.
#NAME: get_display
#PARENT: Gdk
#COMMENT: Gets the name of the display, which usually comes from the
`DISPLAY` environment variable or the
`--display` command line option.
#NAME: init_check
#PARENT: Gdk.init_check
#COMMENT: %TRUE if initialization succeeded.
#NAME: slave
#PARENT: Gdk.DeviceType
#COMMENT: Device is a slave (or physical) device.
#NAME: get_visible_region
#PARENT: Gdk.Window
#COMMENT: Computes the region of the @window that is potentially visible.
This does not necessarily take into account if the window is
obscured by other windows, but no area outside of this region
is visible.
#NAME: window
#PARENT: Gdk.Window.set_background_rgba.none
#COMMENT: a #GdkWindow
#NAME: threads_enter
#PARENT: Gdk
#COMMENT: This function marks the beginning of a critical section in which
GDK and GTK+ functions can be called safely and without causing race
conditions. Only one thread at a time can be in such a critial
section.
#NAME: context
#PARENT: Gdk.drag_find_window_for_screen.none
#COMMENT: a #GdkDragContext
#NAME: list_visuals
#PARENT: Gdk
#COMMENT: Lists the available visuals for the default screen.
(See gdk_screen_list_visuals())
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.

Call g_list_free() on the return value when you’re finished with it.
#NAME: get_source_device
#PARENT: Gdk.Event.get_source_device
#COMMENT: a #GdkDevice, or %NULL.
#NAME: window
#PARENT: Gdk.Window.get_height.gint
#COMMENT: a #GdkWindow
#NAME: region
#PARENT: Gdk.Window.begin_paint_region.none
#COMMENT: region you intend to draw to
#NAME: move
#PARENT: Gdk.Window
#COMMENT: Repositions a window relative to its parent window.
For toplevel windows, window managers may ignore or modify the move;
you should probably use gtk_window_move() on a #GtkWindow widget
anyway, instead of using GDK functions. For child windows,
the move will reliably succeed.

If you’re also planning to resize the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.
#NAME: index_
#PARENT: Gdk.Device.get_axis_use.AxisUse
#COMMENT: the index of the axis.
#NAME: get_keyval
#PARENT: Gdk.Event
#COMMENT: Extracts the keyval from an event.
#NAME: modifier_reserved_18_mask
#PARENT: Gdk.ModifierType
#COMMENT: A reserved bit flag; do not use in your own code
#NAME: window
#PARENT: Gdk.EventOwnerChange
#COMMENT: the window which received the event
#NAME: context
#PARENT: Gdk.DragContext.get_device.Device
#COMMENT: a #GdkDragContext
#NAME: device
#PARENT: Gdk.EventScroll
#COMMENT: the master device that the event originated from. Use
gdk_event_get_source_device() to get the slave device.
#NAME: get_colormap_size
#PARENT: Gdk.Visual.get_colormap_size
#COMMENT: The size of a colormap that is suitable for @visual.
#NAME: get_decorations
#PARENT: Gdk.Window.get_decorations
#COMMENT: %TRUE if the window has decorations set, %FALSE otherwise.
#NAME: x
#PARENT: Gdk.Window.pick-embedded-child.Window
#COMMENT: x coordinate in the window
#NAME: proximity
#PARENT: Gdk.Event
#COMMENT: a #GdkEventProximity
#NAME: device
#PARENT: Gdk.Device.list_slave_devices.Device
#COMMENT: a #GdkDevice
#NAME: y
#PARENT: Gdk.Window.pick-embedded-child.Window
#COMMENT: y coordinate in the window
#NAME: context
#PARENT: Gdk.EventDND
#COMMENT: the #GdkDragContext for the current DND operation.
#NAME: name
#PARENT: Gdk.Device
#COMMENT: The device name.
#NAME: get_coords
#PARENT: Gdk.Event.get_coords
#COMMENT: %TRUE if the event delivered event window coordinates
#NAME: x
#PARENT: Gdk.test_simulate_button.gboolean
#COMMENT: x coordinate within @window for the button event
#NAME: replace
#PARENT: Gdk.PropMode
#COMMENT: the new data replaces the existing data.
#NAME: focus
#PARENT: Gdk.EventCrossing
#COMMENT: %TRUE if @window is the focus window or an inferior.
#NAME: y
#PARENT: Gdk.test_simulate_button.gboolean
#COMMENT: y coordinate within @window for the button event
#NAME: pirate
#PARENT: Gdk.CursorType
#COMMENT: ![](pirate.png)
#NAME: double_button_press
#PARENT: Gdk.EventType
#COMMENT: alias for %GDK_2BUTTON_PRESS, added in 3.6.
#NAME: height
#PARENT: Gdk.Window.create_similar_surface.cairo.Surface
#COMMENT: height of the new surface
#NAME: alpha
#PARENT: Gdk.RGBA
#COMMENT: The opacity of the color from 0.0 for completely translucent to
  1.0 for opaque
#NAME: device-manager
#PARENT: Gdk.Device
#COMMENT: The #GdkDeviceManager the #GdkDevice pertains to.
#NAME: x
#PARENT: Gdk.Window.get_position.none
#COMMENT: X coordinate of window
#NAME: accept_focus
#PARENT: Gdk.Window.set_accept_focus.none
#COMMENT: %TRUE if the window should receive input focus
#NAME: y
#PARENT: Gdk.Window.get_position.none
#COMMENT: Y coordinate of window
#NAME: shared-context
#PARENT: Gdk.GLContext
#COMMENT: The #GdkGLContext that this context is sharing data with, or #NULL
#NAME: monitors-changed
#PARENT: Gdk.Screen
#COMMENT: The ::monitors-changed signal is emitted when the number, size
or position of the monitors attached to the screen change.

Only for X11 and OS X for now. A future implementation for Win32
may be a possibility.
#NAME: resize
#PARENT: Gdk.Window
#COMMENT: Resizes @window; for toplevel windows, asks the window manager to resize
the window. The window manager may not allow the resize. When using GTK+,
use gtk_window_resize() instead of this low-level GDK function.

Windows may not be resized below 1x1.

If you’re also planning to move the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.
#NAME: fullscreen
#PARENT: Gdk.Window
#COMMENT: Moves the window into fullscreen mode. This means the
window covers the entire screen and is above any panels
or task bars.

If the window was already fullscreen, then this function does nothing.

On X11, asks the window manager to put @window in a fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don’t have a concept of “fullscreen”; so you can’t rely on the
fullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.
#NAME: get_window_at_position_double
#PARENT: Gdk.Device
#COMMENT: Obtains the window underneath @device, returning the location of the device in @win_x and @win_y in
double precision. Returns %NULL if the window tree under @device is not known to GDK (for example,
belongs to another application).

As a slave device coordinates are those of its master pointer, This
function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().
#NAME: drag_motion
#PARENT: Gdk
#COMMENT: Updates the drag context when the pointer moves or the
set of actions changes.

This function is called by the drag source.
#NAME: window
#PARENT: Gdk.Window.get_children.Window
#COMMENT: a #GdkWindow
#NAME: get_n_screens
#PARENT: Gdk.Display.get_n_screens
#COMMENT: number of screens.
#NAME: cursor
#PARENT: Gdk.Cursor.get_image.GdkPixbuf.Pixbuf
#COMMENT: a #GdkCursor
#NAME: get_modifier_mask
#PARENT: Gdk.Keymap
#COMMENT: Returns the modifier mask the @keymap’s windowing system backend
uses for a particular purpose.

Note that this function always returns real hardware modifiers, not
virtual ones (e.g. it will return #GDK_MOD1_MASK rather than
#GDK_META_MASK if the backend maps MOD1 to META), so there are use
cases where the return value of this function has to be transformed
by gdk_keymap_add_virtual_modifiers() in order to contain the
expected result.
#NAME: cairo_set_source_pixbuf
#PARENT: Gdk
#COMMENT: Sets the given pixbuf as the source pattern for @cr.

The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @pixbuf is @pixbuf_x, @pixbuf_y.
#NAME: manager
#PARENT: Gdk.DisplayManager.set_default_display.none
#COMMENT: a #GdkDisplayManager
#NAME: create-surface
#PARENT: Gdk.Window
#COMMENT: The ::create-surface signal is emitted when an offscreen window
needs its surface (re)created, which happens either when the
window is first drawn to, or when the window is being
resized. The first signal handler that returns a non-%NULL
surface will stop any further signal emission, and its surface
will be used.

Note that it is not possible to access the window's previous
surface from within any callback of this signal. Calling
gdk_offscreen_window_get_surface() will lead to a crash.
#NAME: _get_angle
#PARENT: Gdk.Event
#COMMENT: If both events contain X/Y information, this function will return %TRUE
and return in @angle the relative angle from @event1 to @event2. The rotation
direction for positive angles is from the positive X axis towards the positive
Y axis.
#NAME: bottom_right_corner
#PARENT: Gdk.CursorType
#COMMENT: ![](bottom_right_corner.png)
#NAME: window
#PARENT: Gdk.Window.show.none
#COMMENT: a #GdkWindow
#NAME: set_display
#PARENT: Gdk.AppLaunchContext
#COMMENT: Sets the display on which applications will be launched when
using this context. See also gdk_app_launch_context_set_screen().
#NAME: width
#PARENT: Gdk.Window.create-surface.cairo.Surface
#COMMENT: the width of the offscreen surface to create
#NAME: property
#PARENT: Gdk.property_delete.none
#COMMENT: the property to delete
#NAME: requestor
#PARENT: Gdk.selection_send_notify_for_display.none
#COMMENT: window to which to deliver response
#NAME: x
#PARENT: Gdk.Window.get_device_position_double.Window
#COMMENT: return location for the X coordinate of @device, or %NULL.
#NAME: device
#PARENT: Gdk.Device.get_position.none
#COMMENT: pointer device to query status about.
#NAME: y
#PARENT: Gdk.Window.get_device_position_double.Window
#COMMENT: return location for the Y coordinate of @device, or %NULL.
#NAME: minor
#PARENT: Gdk.GLContext.get_version.none
#COMMENT: return location for the minor version
#NAME: get_click_count
#PARENT: Gdk.Event
#COMMENT: Extracts the click count from an event.
#NAME: threads_add_timeout_full
#PARENT: Gdk
#COMMENT: Sets a function to be called at regular intervals holding the GDK lock,
with the given priority.  The function is called repeatedly until it
returns %FALSE, at which point the timeout is automatically destroyed
and the function will not be called again.  The @notify function is
called when the timeout is destroyed.  The first call to the
function will be at the end of the first @interval.

Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given interval
(it does not try to “catch up” time lost in delays).

This variant of g_timeout_add_full() can be thought of a MT-safe version
for GTK+ widgets for the following use case:

|[<!-- language="C" -->
static gboolean timeout_callback (gpointer data)
{
   SomeWidget *self = data;
   
   // do stuff with self
   
   self->timeout_id = 0;
   
   return G_SOURCE_REMOVE;
}
 
static void some_widget_do_stuff_later (SomeWidget *self)
{
   self->timeout_id = g_timeout_add (timeout_callback, self)
}
 
static void some_widget_finalize (GObject *object)
{
   SomeWidget *self = SOME_WIDGET (object);
   
   if (self->timeout_id)
     g_source_remove (self->timeout_id);
   
   G_OBJECT_CLASS (parent_class)->finalize (object);
}
]|
#NAME: setting
#PARENT: Gdk.EventType
#COMMENT: a setting has been modified.
#NAME: display
#PARENT: Gdk.Display.get_pointer.none
#COMMENT: a #GdkDisplay
#NAME: device
#PARENT: Gdk.Device.get_key.gboolean
#COMMENT: a #GdkDevice.
#NAME: device
#PARENT: Gdk.Device.get_n_axes.gint
#COMMENT: a pointer #GdkDevice
#NAME: frame_clock
#PARENT: Gdk.FrameClock.get_timings.FrameTimings
#COMMENT: a #GdkFrameClock
#NAME: ole2
#PARENT: Gdk.DragProtocol
#COMMENT: The complex OLE2 DND protocol (not implemented).
#NAME: window
#PARENT: Gdk.Window.maximize.none
#COMMENT: a toplevel #GdkWindow
#NAME: x
#PARENT: Gdk.Window.get_device_position.Window
#COMMENT: return location for the X coordinate of @device, or %NULL.
#NAME: y
#PARENT: Gdk.Window.get_device_position.Window
#COMMENT: return location for the Y coordinate of @device, or %NULL.
#NAME: device
#PARENT: Gdk.Window.get_device_position_double.Window
#COMMENT: pointer #GdkDevice to query to.
#NAME: rgba
#PARENT: Gdk.RGBA.copy.RGBA
#COMMENT: a #GdkRGBA
#NAME: GrabOwnership
#PARENT: Gdk
#COMMENT: Defines how device grabs interact with other devices.
#NAME: str
#PARENT: Gdk.utf8_to_string_target.utf8
#COMMENT: a UTF-8 string
#NAME: window_state
#PARENT: Gdk.EventType
#COMMENT: the state of a window has changed. See #GdkWindowState
  for the possible window states
#NAME: screen
#PARENT: Gdk.drag_find_window_for_screen.none
#COMMENT: the screen where the destination window is sought
#NAME: type
#PARENT: Gdk.EventProperty
#COMMENT: the type of the event (%GDK_PROPERTY_NOTIFY).
#NAME: Event
#PARENT: Gdk
#COMMENT: A #GdkEvent contains a union of all of the event types,
and allows access to the data fields in a number of ways.

The event type is always the first field in all of the event types, and
can always be accessed with the following code, no matter what type of
event it is:
|[<!-- language="C" -->
  GdkEvent *event;
  GdkEventType type;

  type = event->type;
]|

To access other fields of the event, the pointer to the event
can be cast to the appropriate event type, or the union member
name can be used. For example if the event type is %GDK_BUTTON_PRESS
then the x coordinate of the button press can be accessed with:
|[<!-- language="C" -->
  GdkEvent *event;
  gdouble x;

  x = ((GdkEventButton*)event)->x;
]|
or:
|[<!-- language="C" -->
  GdkEvent *event;
  gdouble x;

  x = event->button.x;
]|
#NAME: button_press_mask
#PARENT: Gdk.EventMask
#COMMENT: receive button press events
#NAME: keyval
#PARENT: Gdk.keyval_to_lower.guint
#COMMENT: a key value.
#NAME: get_client_pointer
#PARENT: Gdk.DeviceManager.get_client_pointer
#COMMENT: The client pointer. This memory is
         owned by GDK and must not be freed or unreferenced.
#NAME: sibling
#PARENT: Gdk.Window.restack.none
#COMMENT: a #GdkWindow that is a sibling of @window, or %NULL
#NAME: dpi
#PARENT: Gdk.Screen.set_resolution.none
#COMMENT: the resolution in “dots per inch”. (Physical inches aren’t actually
  involved; the terminology is conventional.)
#NAME: get_monitor_width_mm
#PARENT: Gdk.Screen
#COMMENT: Gets the width in millimeters of the specified monitor, if available.
#NAME: cr
#PARENT: Gdk.cairo_rectangle.none
#COMMENT: a cairo context
#NAME: offscreen_window_set_embedder
#PARENT: Gdk
#COMMENT: Sets @window to be embedded in @embedder.

To fully embed an offscreen window, in addition to calling this
function, it is also necessary to handle the #GdkWindow::pick-embedded-child
signal on the @embedder and the #GdkWindow::to-embedder and
#GdkWindow::from-embedder signals on @window.
#NAME: window
#PARENT: Gdk.Window.configure_finished.none
#COMMENT: a toplevel #GdkWindow
#NAME: window
#PARENT: Gdk.Window.get_group.Window
#COMMENT: a toplevel #GdkWindow
#NAME: data
#PARENT: Gdk.Window.get_user_data.none
#COMMENT: return location for user data
#NAME: y_root
#PARENT: Gdk.EventDND
#COMMENT: the y coordinate of the pointer relative to the root of the
  screen, only set for %GDK_DRAG_MOTION and %GDK_DROP_START.
#NAME: new_for_display
#PARENT: Gdk.Cursor.new_for_display
#COMMENT: a new #GdkCursor
#NAME: get_screen
#PARENT: Gdk.Window.get_screen
#COMMENT: the #GdkScreen associated with @window
#NAME: modifier_mask
#PARENT: Gdk.ModifierType
#COMMENT: a mask covering all modifier types.
#NAME: area
#PARENT: Gdk.EventExpose
#COMMENT: bounding box of @region.
#NAME: key_press_mask
#PARENT: Gdk.EventMask
#COMMENT: receive key press events
#NAME: intern
#PARENT: Gdk.Atom.intern
#COMMENT: the atom corresponding to @atom_name.
#NAME: temp
#PARENT: Gdk.WindowType
#COMMENT: override redirect temporary window (used to implement
 #GtkMenu)
#NAME: selection_send_notify_for_display
#PARENT: Gdk
#COMMENT: Send a response to SelectionRequest event.
#NAME: get_number
#PARENT: Gdk.Screen.get_number
#COMMENT: the index
#NAME: type
#PARENT: Gdk.EventFocus
#COMMENT: the type of the event (%GDK_FOCUS_CHANGE).
#NAME: display
#PARENT: Gdk.Display.supports_cursor_color.gboolean
#COMMENT: a #GdkDisplay
#NAME: device
#PARENT: Gdk.DeviceManager.device-removed.none
#COMMENT: the just removed #GdkDevice.
#NAME: get_update_area
#PARENT: Gdk.Window
#COMMENT: Transfers ownership of the update area from @window to the caller
of the function. That is, after calling this function, @window will
no longer have an invalid/dirty region; the update area is removed
from @window and handed to you. If a window has no update area,
gdk_window_get_update_area() returns %NULL. You are responsible for
calling cairo_region_destroy() on the returned region if it’s non-%NULL.
#NAME: interval
#PARENT: Gdk.threads_add_timeout_seconds_full.guint
#COMMENT: the time between calls to the function, in seconds
#NAME: window
#PARENT: Gdk.Window.lower.none
#COMMENT: a #GdkWindow
#NAME: merge_child_input_shapes
#PARENT: Gdk.Window
#COMMENT: Merges the input shape masks for any child windows into the
input shape mask for @window. i.e. the union of all input masks
for @window and its children will become the new input mask
for @window. See gdk_window_input_shape_combine_region().

This function is distinct from gdk_window_set_child_input_shapes()
because it includes @window’s input shape mask in the set of
shapes to be merged.
#NAME: cr
#PARENT: Gdk.cairo_set_source_rgba.none
#COMMENT: a cairo context
#NAME: device
#PARENT: Gdk.Device.warp.none
#COMMENT: the device to warp.
#NAME: get_window
#PARENT: Gdk.Event
#COMMENT: Extracts the #GdkWindow associated with an event.
#NAME: get_frame_time
#PARENT: Gdk.FrameTimings.get_frame_time
#COMMENT: the frame time for the frame, in the timescale
 of g_get_monotonic_time()
#NAME: get_vendor_id
#PARENT: Gdk.Device.get_vendor_id
#COMMENT: the vendor ID, or %NULL
#NAME: axes
#PARENT: Gdk.Device.get_state.none
#COMMENT: an array of doubles to store the values of
the axes of @device in, or %NULL.
#NAME: keyval
#PARENT: Gdk.Device.set_key.none
#COMMENT: the keyval to generate
#NAME: associated-device
#PARENT: Gdk.Device
#COMMENT: Associated pointer or keyboard with this device, if any. Devices of type #GDK_DEVICE_TYPE_MASTER
always come in keyboard/pointer pairs. Other device types will have a %NULL associated device.
#NAME: window
#PARENT: Gdk.Window.get_drag_protocol.DragProtocol
#COMMENT: the destination window
#NAME: window
#PARENT: Gdk.Window.get_decorations.gboolean
#COMMENT: The toplevel #GdkWindow to get the decorations from
#NAME: EventSetting
#PARENT: Gdk
#COMMENT: Generated when a setting is modified.
#NAME: get_keycode
#PARENT: Gdk.Event.get_keycode
#COMMENT: %TRUE if the event delivered a hardware keycode
#NAME: map_virtual_modifiers
#PARENT: Gdk.Keymap.map_virtual_modifiers
#COMMENT: %TRUE if no virtual modifiers were mapped to the
    same non-virtual modifier. Note that %FALSE is also returned
    if a virtual modifier is mapped to a non-virtual modifier that
    was already set in @state.
#NAME: pango_layout_get_clip_region
#PARENT: Gdk.pango_layout_get_clip_region
#COMMENT: a clip region containing the given ranges
#NAME: get_keycode
#PARENT: Gdk.Event
#COMMENT: Extracts the hardware keycode from an event.
#NAME: color
#PARENT: Gdk.Color.free.none
#COMMENT: a #GdkColor
#NAME: send_event
#PARENT: Gdk.selection_owner_set.gboolean
#COMMENT: if %TRUE, and the new owner is different
  from the current owner, the current owner
  will be sent a SelectionClear event.
#NAME: supports_clipboard_persistence
#PARENT: Gdk.Display
#COMMENT: Returns whether the speicifed display supports clipboard
persistance; i.e. if it’s possible to store the clipboard data after an
application has quit. On X11 this checks if a clipboard daemon is
running.
#NAME: after-paint
#PARENT: Gdk.FrameClock
#COMMENT: This signal ends processing of the frame. Applications
should generally not handle this signal.
#NAME: get_monitor_height_mm
#PARENT: Gdk.Screen.get_monitor_height_mm
#COMMENT: the height of the monitor, or -1 if not available
#NAME: list_devices
#PARENT: Gdk.Display.list_devices
#COMMENT: 
    a list of #GdkDevice
#NAME: window
#PARENT: Gdk.Window.remove_filter.none
#COMMENT: a #GdkWindow
#NAME: ul_angle
#PARENT: Gdk.CursorType
#COMMENT: ![](ul_angle.png)
#NAME: supports_input_shapes
#PARENT: Gdk.Display.supports_input_shapes
#COMMENT: %TRUE if windows with modified input shape are supported
#NAME: width_inc
#PARENT: Gdk.Geometry
#COMMENT: width resize increment
#NAME: get_frame_clock
#PARENT: Gdk.Window.get_frame_clock
#COMMENT: the frame clock
#NAME: max_size
#PARENT: Gdk.WindowHints
#COMMENT: max size fields are set
#NAME: get_best_with_type
#PARENT: Gdk.Visual
#COMMENT: Get the best visual of the given @visual_type for the default GDK screen.
Visuals with higher color depths are considered better. The return value
should not be freed. %NULL may be returned if no visual has type
@visual_type.
#NAME: y_hot
#PARENT: Gdk.Cursor.get_surface.cairo.Surface
#COMMENT: Location to store the hotspot y position,
  or %NULL
#NAME: user_size
#PARENT: Gdk.WindowHints
#COMMENT: indicates that the window’s size was explicitly set by
 the user
#NAME: notify
#PARENT: Gdk.threads_add_idle_full.guint
#COMMENT: function to call when the idle is removed, or %NULL
#NAME: time_
#PARENT: Gdk.Display.store_clipboard.none
#COMMENT: a timestamp
#NAME: window
#PARENT: Gdk.Window.get_composited.gboolean
#COMMENT: a #GdkWindow
#NAME: selection_request
#PARENT: Gdk.EventType
#COMMENT: another application has requested a selection.
#NAME: constrain_size
#PARENT: Gdk.Window
#COMMENT: Constrains a desired width and height according to a
set of geometry hints (such as minimum and maximum size).
#NAME: window
#PARENT: Gdk.Window.coords_to_parent.none
#COMMENT: a child window
#NAME: leader
#PARENT: Gdk.Window.set_group.none
#COMMENT: group leader window, or %NULL to restore the default group leader window
#NAME: display
#PARENT: Gdk.Display.supports_composite.gboolean
#COMMENT: a #GdkDisplay
#NAME: keyval_name
#PARENT: Gdk.keyval_name
#COMMENT: a string containing the name
    of the key, or %NULL if @keyval is not a valid key. The string
    should not be modified.
#NAME: copy
#PARENT: Gdk.RGBA
#COMMENT: Makes a copy of a #GdkRGBA.

The result must be freed through gdk_rgba_free().
#NAME: x
#PARENT: Gdk.Cursor.new_from_surface.Cursor
#COMMENT: the horizontal offset of the “hotspot” of the cursor
#NAME: any
#PARENT: Gdk.Event
#COMMENT: a #GdkEventAny
#NAME: window
#PARENT: Gdk.Window.get_device_events.EventMask
#COMMENT: a #GdkWindow.
#NAME: y
#PARENT: Gdk.Cursor.new_from_surface.Cursor
#COMMENT: the vertical offset of the “hotspot” of the cursor
#NAME: equal
#PARENT: Gdk.RGBA.equal
#COMMENT: %TRUE if the two colors compare equal
#NAME: n-axes
#PARENT: Gdk.Device
#COMMENT: Number of axes in the device.
#NAME: crossing
#PARENT: Gdk.Event
#COMMENT: a #GdkEventCrossing
#NAME: unsupported_format
#PARENT: Gdk.GLError
#COMMENT: The requested visual format is not supported
#NAME: mask
#PARENT: Gdk.Window.get_device_position.Window
#COMMENT: return location for the modifier mask, or %NULL.
#NAME: get_event
#PARENT: Gdk.Display
#COMMENT: Gets the next #GdkEvent to be processed for @display, fetching events from the
windowing system if necessary.
#NAME: event
#PARENT: Gdk.Event.get_keycode.gboolean
#COMMENT: a #GdkEvent
#NAME: get_source_window
#PARENT: Gdk.DragContext
#COMMENT: Returns the #GdkWindow where the DND operation started.
#NAME: get_scroll_direction
#PARENT: Gdk.Event
#COMMENT: Extracts the scroll direction from an event.
#NAME: get_root_window
#PARENT: Gdk.Screen
#COMMENT: Gets the root window of @screen.
#NAME: iconify
#PARENT: Gdk.Window
#COMMENT: Asks to iconify (minimize) @window. The window manager may choose
to ignore the request, but normally will honor it. Using
gtk_window_iconify() is preferred, if you have a #GtkWindow widget.

This function only makes sense when @window is a toplevel window.
#NAME: events_get_center
#PARENT: Gdk
#COMMENT: If both events contain X/Y information, the center of both coordinates
will be returned in @x and @y.
#NAME: keyval_to_upper
#PARENT: Gdk.keyval_to_upper
#COMMENT: the upper case form of @keyval, or @keyval itself if it is already
  in upper case or it is not subject to case conversion.
#NAME: button1_mask
#PARENT: Gdk.ModifierType
#COMMENT: the first mouse button.
#NAME: window
#PARENT: Gdk.Window.restack.none
#COMMENT: a #GdkWindow
#NAME: device
#PARENT: Gdk.Device.grab_info_libgtk_only.gboolean
#COMMENT: device to get the grab information from
#NAME: window
#PARENT: Gdk.Window.merge_child_shapes.none
#COMMENT: a #GdkWindow
#NAME: focused
#PARENT: Gdk.WindowState
#COMMENT: the window is presented as focused (with active decorations).
#NAME: get_default_screen
#PARENT: Gdk.Display
#COMMENT: Get the default #GdkScreen for @display.
#NAME: property
#PARENT: Gdk.property_get.gboolean
#COMMENT: the property to retrieve
#NAME: display
#PARENT: Gdk.Display.get_n_screens.gint
#COMMENT: a #GdkDisplay
#NAME: crosshair
#PARENT: Gdk.CursorType
#COMMENT: ![](crosshair.png)
#NAME: toplevel
#PARENT: Gdk.WindowType
#COMMENT: toplevel window (used to implement #GtkWindow)
#NAME: selection_time
#PARENT: Gdk.EventOwnerChange
#COMMENT: the time at which the selection ownership was taken
  over
#NAME: get_n_keys
#PARENT: Gdk.Device
#COMMENT: Returns the number of keys the device currently has.
#NAME: max_height
#PARENT: Gdk.Geometry
#COMMENT: maximum height of window (or -1 to use requisition, with
 #GtkWindow only)
