#NAME: key_file
#PARENT: GLib.KeyFile.has_key.gboolean
#COMMENT: a #GKeyFile
#NAME: filename_array
#PARENT: GLib.OptionArg
#COMMENT: The option takes a filename as argument,
    multiple uses of the option are collected into an array of strings.
#NAME: first_element
#PARENT: GLib.build_path.utf8
#COMMENT: the first element in the path
#NAME: spawn_async_with_pipes
#PARENT: GLib
#COMMENT: Executes a child program asynchronously (your program will not
block waiting for the child to exit). The child program is
specified by the only argument that must be provided, @argv.
@argv should be a %NULL-terminated array of strings, to be passed
as the argument vector for the child. The first string in @argv
is of course the name of the program to execute. By default, the
name of the program must be a full path. If @flags contains the
%G_SPAWN_SEARCH_PATH flag, the `PATH` environment variable is
used to search for the executable. If @flags contains the
%G_SPAWN_SEARCH_PATH_FROM_ENVP flag, the `PATH` variable from
@envp is used to search for the executable. If both the
%G_SPAWN_SEARCH_PATH and %G_SPAWN_SEARCH_PATH_FROM_ENVP flags
are set, the `PATH` variable from @envp takes precedence over
the environment variable.

If the program name is not a full path and %G_SPAWN_SEARCH_PATH flag is not
used, then the program will be run from the current directory (or
@working_directory, if specified); this might be unexpected or even
dangerous in some cases when the current directory is world-writable.

On Windows, note that all the string or string vector arguments to
this function and the other g_spawn*() functions are in UTF-8, the
GLib file name encoding. Unicode characters that are not part of
the system codepage passed in these arguments will be correctly
available in the spawned program only if it uses wide character API
to retrieve its command line. For C programs built with Microsoft's
tools it is enough to make the program have a wmain() instead of
main(). wmain() has a wide character argument vector as parameter.

At least currently, mingw doesn't support wmain(), so if you use
mingw to develop the spawned program, it will have to call the
undocumented function __wgetmainargs() to get the wide character
argument vector and environment. See gspawn-win32-helper.c in the
GLib sources or init.c in the mingw runtime sources for a prototype
for that function. Alternatively, you can retrieve the Win32 system
level wide character command line passed to the spawned program
using the GetCommandLineW() function.

On Windows the low-level child process creation API CreateProcess()
doesn't use argument vectors, but a command line. The C runtime
library's spawn*() family of functions (which g_spawn_async_with_pipes()
eventually calls) paste the argument vector elements together into
a command line, and the C runtime startup code does a corresponding
reconstruction of an argument vector from the command line, to be
passed to main(). Complications arise when you have argument vector
elements that contain spaces of double quotes. The spawn*() functions
don't do any quoting or escaping, but on the other hand the startup
code does do unquoting and unescaping in order to enable receiving
arguments with embedded spaces or double quotes. To work around this
asymmetry, g_spawn_async_with_pipes() will do quoting and escaping on
argument vector elements that need it before calling the C runtime
spawn() function.

The returned @child_pid on Windows is a handle to the child
process, not its identifier. Process handles and process
identifiers are different concepts on Windows.

@envp is a %NULL-terminated array of strings, where each string
has the form `KEY=VALUE`. This will become the child's environment.
If @envp is %NULL, the child inherits its parent's environment.

@flags should be the bitwise OR of any flags you want to affect the
function's behaviour. The %G_SPAWN_DO_NOT_REAP_CHILD means that the
child will not automatically be reaped; you must use a child watch to
be notified about the death of the child process. Eventually you must
call g_spawn_close_pid() on the @child_pid, in order to free
resources which may be associated with the child process. (On Unix,
using a child watch is equivalent to calling waitpid() or handling
the %SIGCHLD signal manually. On Windows, calling g_spawn_close_pid()
is equivalent to calling CloseHandle() on the process handle returned
in @child_pid). See g_child_watch_add().

%G_SPAWN_LEAVE_DESCRIPTORS_OPEN means that the parent's open file
descriptors will be inherited by the child; otherwise all descriptors
except stdin/stdout/stderr will be closed before calling exec() in
the child. %G_SPAWN_SEARCH_PATH means that @argv[0] need not be an
absolute path, it will be looked for in the `PATH` environment
variable. %G_SPAWN_SEARCH_PATH_FROM_ENVP means need not be an
absolute path, it will be looked for in the `PATH` variable from
@envp. If both %G_SPAWN_SEARCH_PATH and %G_SPAWN_SEARCH_PATH_FROM_ENVP
are used, the value from @envp takes precedence over the environment.
%G_SPAWN_STDOUT_TO_DEV_NULL means that the child's standard output
will be discarded, instead of going to the same location as the parent's
standard output. If you use this flag, @standard_output must be %NULL.
%G_SPAWN_STDERR_TO_DEV_NULL means that the child's standard error
will be discarded, instead of going to the same location as the parent's
standard error. If you use this flag, @standard_error must be %NULL.
%G_SPAWN_CHILD_INHERITS_STDIN means that the child will inherit the parent's
standard input (by default, the child's standard input is attached to
/dev/null). If you use this flag, @standard_input must be %NULL.
%G_SPAWN_FILE_AND_ARGV_ZERO means that the first element of @argv is
the file to execute, while the remaining elements are the actual
argument vector to pass to the file. Normally g_spawn_async_with_pipes()
uses @argv[0] as the file to execute, and passes all of @argv to the child.

@child_setup and @user_data are a function and user data. On POSIX
platforms, the function is called in the child after GLib has
performed all the setup it plans to perform (including creating
pipes, closing file descriptors, etc.) but before calling exec().
That is, @child_setup is called just before calling exec() in the
child. Obviously actions taken in this function will only affect
the child, not the parent.

On Windows, there is no separate fork() and exec() functionality.
Child processes are created and run with a single API call,
CreateProcess(). There is no sensible thing @child_setup
could be used for on Windows so it is ignored and not called.

If non-%NULL, @child_pid will on Unix be filled with the child's
process ID. You can use the process ID to send signals to the child,
or to use g_child_watch_add() (or waitpid()) if you specified the
%G_SPAWN_DO_NOT_REAP_CHILD flag. On Windows, @child_pid will be
filled with a handle to the child process only if you specified the
%G_SPAWN_DO_NOT_REAP_CHILD flag. You can then access the child
process using the Win32 API, for example wait for its termination
with the WaitFor*() functions, or examine its exit code with
GetExitCodeProcess(). You should close the handle with CloseHandle()
or g_spawn_close_pid() when you no longer need it.

If non-%NULL, the @standard_input, @standard_output, @standard_error
locations will be filled with file descriptors for writing to the child's
standard input or reading from its standard output or standard error.
The caller of g_spawn_async_with_pipes() must close these file descriptors
when they are no longer in use. If these parameters are %NULL, the
corresponding pipe won't be created.

If @standard_input is NULL, the child's standard input is attached to
/dev/null unless %G_SPAWN_CHILD_INHERITS_STDIN is set.

If @standard_error is NULL, the child's standard error goes to the same
location as the parent's standard error unless %G_SPAWN_STDERR_TO_DEV_NULL
is set.

If @standard_output is NULL, the child's standard output goes to the same
location as the parent's standard output unless %G_SPAWN_STDOUT_TO_DEV_NULL
is set.

@error can be %NULL to ignore errors, or non-%NULL to report errors.
If an error is set, the function returns %FALSE. Errors are reported
even if they occur in the child (for example if the executable in
@argv[0] is not found). Typically the `message` field of returned
errors should be displayed to users. Possible errors are those from
the #G_SPAWN_ERROR domain.

If an error occurs, @child_pid, @standard_input, @standard_output,
and @standard_error will not be filled with valid values.

If @child_pid is not %NULL and an error does not occur then the returned
process reference must be closed using g_spawn_close_pid().

If you are writing a GTK+ application, and the program you
are spawning is a graphical application, too, then you may
want to use gdk_spawn_on_screen_with_pipes() instead to ensure that
the spawned program opens its windows on the right screen.
#NAME: ref
#PARENT: GLib.KeyFile.ref
#COMMENT: the same @key_file.
#NAME: do_close
#PARENT: GLib.IOChannel.set_close_on_unref.none
#COMMENT: Whether to close the channel on the final unref of
           the GIOChannel data structure. The default value of
           this is %TRUE for channels created by g_io_channel_new_file (),
           and %FALSE for all other channels.
#NAME: copy
#PARENT: GLib.SList.copy
#COMMENT: a copy of @list
#NAME: get_main_group
#PARENT: GLib.OptionContext
#COMMENT: Returns a pointer to the main group of @context.
#NAME: remove_all
#PARENT: GLib.HashTable
#COMMENT: Removes all keys and their associated values from a #GHashTable.

If the #GHashTable was created using g_hash_table_new_full(),
the keys and values are freed using the supplied destroy functions,
otherwise you have to make sure that any dynamically allocated
values are freed yourself.
#NAME: items_read
#PARENT: GLib.ucs4_to_utf16.guint16
#COMMENT: location to store number of bytes read,
    or %NULL. If an error occurs then the index of the invalid input
    is stored here.
#NAME: list
#PARENT: GLib.SList.copy.gpointer
#COMMENT: a #GSList
#NAME: prepend
#PARENT: GLib.String
#COMMENT: Adds a string on to the start of a #GString,
expanding it if necessary.
#NAME: delete_link
#PARENT: GLib.List.delete_link
#COMMENT: the (possibly changed) start of the #GList
#NAME: insert
#PARENT: GLib.List
#COMMENT: Inserts a new element into the list at the given position.
#NAME: value
#PARENT: GLib.Variant.new_dict_entry.Variant
#COMMENT: a #GVariant, the value
#NAME: dup_string
#PARENT: GLib.VariantType.dup_string
#COMMENT: the corresponding type string

Since 2.24
#NAME: atomic_pointer_compare_and_exchange
#PARENT: GLib.atomic_pointer_compare_and_exchange
#COMMENT: %TRUE if the exchange took place
#NAME: new_take_string
#PARENT: GLib.Variant
#COMMENT: Creates a string #GVariant with the contents of @string.

@string must be valid UTF-8.

This function consumes @string.  g_free() will be called on @string
when it is no longer required.

You must not modify or access @string in any other way after passing
it to this function.  It is even possible that @string is immediately
freed.
#NAME: take_ref
#PARENT: GLib.Variant
#COMMENT: If @value is floating, sink it.  Otherwise, do nothing.

Typically you want to use g_variant_ref_sink() in order to
automatically do the correct thing with respect to floating or
non-floating references, but there is one specific scenario where
this function is helpful.

The situation where this function is helpful is when creating an API
that allows the user to provide a callback function that returns a
#GVariant.  We certainly want to allow the user the flexibility to
return a non-floating reference from this callback (for the case
where the value that is being returned already exists).

At the same time, the style of the #GVariant API makes it likely that
for newly-created #GVariant instances, the user can be saved some
typing if they are allowed to return a #GVariant with a floating
reference.

Using this function on the return value of the user's callback allows
the user to do whichever is more convenient for them.  The caller
will alway receives exactly one full reference to the value: either
the one that was returned in the first place, or a floating reference
that has been converted to a full reference.

This function has an odd interaction when combined with
g_variant_ref_sink() running at the same time in another thread on
the same #GVariant instance.  If g_variant_ref_sink() runs first then
the result will be that the floating reference is converted to a hard
reference.  If g_variant_take_ref() runs first then the result will
be that the floating reference is converted to a hard reference and
an additional reference on top of that one is added.  It is best to
avoid this situation.
#NAME: ChildWatchFunc
#PARENT: GLib
#COMMENT: Prototype of a #GChildWatchSource callback, called when a child
process has exited.  To interpret @status, see the documentation
for g_spawn_check_exit_status().
#NAME: scanner
#PARENT: GLib.Scanner.warn.none
#COMMENT: a #GScanner
#NAME: get_close_on_unref
#PARENT: GLib.IOChannel
#COMMENT: Returns whether the file/socket/whatever associated with @channel
will be closed when @channel receives its final unref and is
destroyed. The default value of this is %TRUE for channels created
by g_io_channel_new_file (), and %FALSE for all other channels.
#NAME: dest
#PARENT: GLib.strlcat.gsize
#COMMENT: destination buffer, already containing one nul-terminated string
#NAME: unichar_fully_decompose
#PARENT: GLib.unichar_fully_decompose
#COMMENT: the length of the full decomposition.
#NAME: list
#PARENT: GLib.List.copy_deep.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: compute_checksum_for_string
#PARENT: GLib.compute_checksum_for_string
#COMMENT: the checksum as a hexadecimal string. The returned string
  should be freed with g_free() when done using it.
#NAME: set_app_info
#PARENT: GLib.BookmarkFile
#COMMENT: Sets the meta-data of application @name inside the list of
applications that have registered a bookmark for @uri inside
@bookmark.

You should rarely use this function; use g_bookmark_file_add_application()
and g_bookmark_file_remove_application() instead.

@name can be any UTF-8 encoded string used to identify an
application.
@exec can have one of these two modifiers: "\%f", which will
be expanded as the local file name retrieved from the bookmark's
URI; "\%u", which will be expanded as the bookmark's URI.
The expansion is done automatically when retrieving the stored
command line using the g_bookmark_file_get_app_info() function.
@count is the number of times the application has registered the
bookmark; if is < 0, the current registration count will be increased
by one, if is 0, the application with @name will be removed from
the list of registered applications.
@stamp is the Unix time of the last registration; if it is -1, the
current time will be used.

If you try to remove an application by setting its registration count to
zero, and no bookmark for @uri is found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND; similarly,
in the event that no application @name has registered a bookmark
for @uri,  %FALSE is returned and error is set to
#G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED.  Otherwise, if no bookmark
for @uri is found, one is created.
#NAME: getenv
#PARENT: GLib.getenv
#COMMENT: the value of the environment variable, or %NULL if
    the environment variable is not found. The returned string
    may be overwritten by the next call to g_getenv(), g_setenv()
    or g_unsetenv().
#NAME: filename
#PARENT: GLib.file_set_contents.gboolean
#COMMENT: name of a file to write @contents to, in the GLib file name
  encoding
#NAME: uri_escape_string
#PARENT: GLib.uri_escape_string
#COMMENT: an escaped version of @unescaped. The returned string should be
freed when no longer needed.
#NAME: file_read_link
#PARENT: GLib.file_read_link
#COMMENT: A newly-allocated string with the contents of the symbolic link,
         or %NULL if an error occurred.
#NAME: devanagari
#PARENT: GLib.UnicodeScript
#COMMENT: Devanagari
#NAME: ascii_up
#PARENT: GLib.String
#COMMENT: Converts all lowercase ASCII letters to uppercase ASCII letters.
#NAME: PRIORITY_HIGH
#PARENT: GLib
#COMMENT: Use this for high priority event sources.

It is not used within GLib or GTK+.
#NAME: get_type_string
#PARENT: GLib.Variant
#COMMENT: Returns the type string of @value.  Unlike the result of calling
g_variant_type_peek_string(), this string is nul-terminated.  This
string belongs to #GVariant and must not be freed.
#NAME: get_bytes
#PARENT: GLib.MappedFile.get_bytes
#COMMENT: A newly allocated #GBytes referencing data
    from @file
#NAME: hash_table
#PARENT: GLib.HashTable.steal.gboolean
#COMMENT: a #GHashTable
#NAME: prepend_unichar
#PARENT: GLib.String.prepend_unichar
#COMMENT: @string
#NAME: value
#PARENT: GLib.Variant.new_byte.Variant
#COMMENT: a #guint8 value
#NAME: priority
#PARENT: GLib.unix_signal_add_full.guint
#COMMENT: the priority of the signal source. Typically this will be in
           the range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
#NAME: new_from_bytes
#PARENT: GLib.Bytes
#COMMENT: Creates a #GBytes which is a subsection of another #GBytes. The @offset +
@length may not be longer than the size of @bytes.

A reference to @bytes will be held by the newly created #GBytes until
the byte data is no longer needed.
#NAME: fork
#PARENT: GLib.SpawnError
#COMMENT: Fork failed due to lack of memory.
#NAME: ref
#PARENT: GLib.ByteArray.ref
#COMMENT: The passed in #GByteArray
#NAME: regex
#PARENT: GLib.Regex.match_full.gboolean
#COMMENT: a #GRegex structure from g_regex_new()
#NAME: Time
#PARENT: GLib
#COMMENT: Simply a replacement for time_t. It has been deprecated
since it is not equivalent to time_t on 64-bit platforms
with a 64-bit time_t. Unrelated to #GTimer.

Note that #GTime is defined to always be a 32-bit integer,
unlike time_t which may be 64-bit on some systems. Therefore,
#GTime will overflow in the year 2038, and you cannot use the
address of a #GTime variable as argument to the UNIX time()
function.

Instead, do the following:
|[<!-- language="C" -->
time_t ttime;
GTime gtime;

time (&ttime);
gtime = (GTime)ttime;
]|
#NAME: shell_unquote
#PARENT: GLib
#COMMENT: Unquotes a string as the shell (/bin/sh) would. Only handles
quotes; if a string contains file globs, arithmetic operators,
variables, backticks, redirections, or other special-to-the-shell
features, the result will be different from the result a real shell
would produce (the variables, backticks, etc. will be passed
through literally instead of being expanded). This function is
guaranteed to succeed if applied to the result of
g_shell_quote(). If it fails, it returns %NULL and sets the
error. The @quoted_string need not actually contain quoted or
escaped text; g_shell_unquote() simply goes through the string and
unquotes/unescapes anything that the shell would. Both single and
double quotes are handled, as are escapes including escaped
newlines. The return value must be freed with g_free(). Possible
errors are in the #G_SHELL_ERROR domain.

Shell quoting rules are a bit strange. Single quotes preserve the
literal string exactly. escape sequences are not allowed; not even
\' - if you want a ' in the quoted text, you have to do something
like 'foo'\''bar'.  Double quotes allow $, `, ", \, and newline to
be escaped with backslash. Otherwise double quotes preserve things
literally.
#NAME: unichar_xdigit_value
#PARENT: GLib
#COMMENT: Determines the numeric value of a character as a hexidecimal
digit.
#NAME: pending
#PARENT: GLib.MainContext.pending
#COMMENT: %TRUE if events are pending.
#NAME: dataset_location
#PARENT: GLib.dataset_foreach.none
#COMMENT: the location identifying the dataset.
#NAME: channel
#PARENT: GLib.IOChannel.get_encoding.utf8
#COMMENT: a #GIOChannel
#NAME: unref
#PARENT: GLib.AsyncQueue
#COMMENT: Decreases the reference count of the asynchronous @queue by 1.

If the reference count went to 0, the @queue will be destroyed
and the memory allocated will be freed. So you are not allowed
to use the @queue afterwards, as it might have disappeared.
You do not need to hold the lock to call this function.
#NAME: file_read_link
#PARENT: GLib
#COMMENT: Reads the contents of the symbolic link @filename like the POSIX
readlink() function.  The returned string is in the encoding used
for filenames. Use g_filename_to_utf8() to convert it to UTF-8.
#NAME: new
#PARENT: GLib.Bytes.new
#COMMENT: a new #GBytes
#NAME: append
#PARENT: GLib.Sequence
#COMMENT: Adds a new item to the end of @seq.
#NAME: hook_list
#PARENT: GLib.Hook.prepend.none
#COMMENT: a #GHookList
#NAME: height
#PARENT: GLib.Tree.height
#COMMENT: the height of @tree
#NAME: datalist_id_remove_no_notify
#PARENT: GLib
#COMMENT: Removes an element, without calling its destroy notification
function.
#NAME: usleep
#PARENT: GLib
#COMMENT: Pauses the current thread for the given number of microseconds.

There are 1 million microseconds per second (represented by the
#G_USEC_PER_SEC macro). g_usleep() may have limited precision,
depending on hardware and operating system; don't rely on the exact
length of the sleep.
#NAME: val
#PARENT: GLib.String.prepend.String
#COMMENT: the string to prepend on the start of @string
#NAME: get_boolean
#PARENT: GLib.Variant
#COMMENT: Returns the boolean value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_BOOLEAN.
#NAME: match_options
#PARENT: GLib.Regex.split.utf8
#COMMENT: match time option flags
#NAME: group_name
#PARENT: GLib.KeyFile.set_integer_list.none
#COMMENT: a group name
#NAME: unichar_iszerowidth
#PARENT: GLib
#COMMENT: Determines if a given character typically takes zero width when rendered.
The return value is %TRUE for all non-spacing and enclosing marks
(e.g., combining accents), format characters, zero-width
space, but not U+00AD SOFT HYPHEN.

A typical use of this function is with one of g_unichar_iswide() or
g_unichar_iswide_cjk() to determine the number of cells a string occupies
when displayed on a grid display (terminals).  However, note that not all
terminals support zero-width rendering of zero-width marks.
#NAME: nko
#PARENT: GLib.UnicodeScript
#COMMENT: N'Ko
#NAME: result
#PARENT: GLib.once_init_leave.none
#COMMENT: new non-0 value for *@value_location
#NAME: reserved_size
#PARENT: GLib.Array.sized_new.gpointer
#COMMENT: number of elements preallocated
#NAME: n_nodes
#PARENT: GLib.Node
#COMMENT: Gets the number of nodes in a tree.
#NAME: new_array
#PARENT: GLib.Variant.new_array
#COMMENT: a floating reference to a new #GVariant array
#NAME: quoted_string
#PARENT: GLib.shell_unquote.utf8
#COMMENT: shell-quoted string
#NAME: code
#PARENT: GLib.Error.new_literal.Error
#COMMENT: error code
#NAME: iter
#PARENT: GLib.SequenceIter.is_end.gboolean
#COMMENT: a #GSequenceIter
#NAME: dest
#PARENT: GLib.strlcpy.gsize
#COMMENT: destination buffer
#NAME: str
#PARENT: GLib.TranslateFunc.utf8
#COMMENT: the untranslated string
#NAME: length
#PARENT: GLib.BookmarkFile.get_groups.utf8
#COMMENT: return location for the length of the returned string, or %NULL
#NAME: array
#PARENT: GLib.ByteArray.free_to_bytes.Bytes
#COMMENT: a #GByteArray
#NAME: n_blocks
#PARENT: GLib.try_malloc0_n.gpointer
#COMMENT: the number of blocks to allocate
#NAME: exec
#PARENT: GLib.BookmarkFile.set_app_info.gboolean
#COMMENT: an application's command line
#NAME: suite_name
#PARENT: GLib.test_create_suite.TestSuite
#COMMENT: a name for the suite
#NAME: string
#PARENT: GLib.String.erase.String
#COMMENT: a #GString
#NAME: value
#PARENT: GLib.Variant.new_int16.Variant
#COMMENT: a #gint16 value
#NAME: iter
#PARENT: GLib.SequenceIter.move.SequenceIter
#COMMENT: a #GSequenceIter
#NAME: up
#PARENT: GLib.String
#COMMENT: Converts a #GString to uppercase.
#NAME: len
#PARENT: GLib.StringChunk.insert_len.utf8
#COMMENT: number of bytes of @string to insert, or -1 to insert a
    nul-terminated string
#NAME: utf8_strncpy
#PARENT: GLib.utf8_strncpy
#COMMENT: @dest
#NAME: len
#PARENT: GLib.String.prepend_len.String
#COMMENT: number of bytes in @val to prepend
#NAME: add_months
#PARENT: GLib.DateTime.add_months
#COMMENT: the newly created #GDateTime which should be freed with
  g_date_time_unref().
#NAME: seq
#PARENT: GLib.Sequence.foreach.none
#COMMENT: a #GSequence
#NAME: direct_hash
#PARENT: GLib
#COMMENT: Converts a gpointer to a hash value.
It can be passed to g_hash_table_new() as the @hash_func parameter,
when using opaque pointers compared by pointer value as keys in a
#GHashTable.

This hash function is also appropriate for keys that are integers
stored in pointers, such as `GINT_TO_POINTER (n)`.
#NAME: rmdir
#PARENT: GLib
#COMMENT: A wrapper for the POSIX rmdir() function. The rmdir() function
deletes a directory from the filesystem.

See your C library manual for more details about how rmdir() works
on your system.
#NAME: get_id
#PARENT: GLib.Source
#COMMENT: Returns the numeric ID for a particular source. The ID of a source
is a positive integer which is unique within a particular main loop
context. The reverse
mapping from ID to source is done by g_main_context_find_source_by_id().
#NAME: compare_func
#PARENT: GLib.qsort_with_data.none
#COMMENT: function to compare elements
#NAME: RegexEvalCallback
#PARENT: GLib
#COMMENT: Specifies the type of the function passed to g_regex_replace_eval().
It is called for each occurrence of the pattern in the string passed
to g_regex_replace_eval(), and it should append the replacement to
@result.
#NAME: is_partial_match
#PARENT: GLib.MatchInfo.is_partial_match
#COMMENT: %TRUE if the match was partial, %FALSE otherwise
#NAME: free
#PARENT: GLib.Array
#COMMENT: Frees the memory allocated for the #GArray. If @free_segment is
%TRUE it frees the memory block holding the elements as well and
also each element if @array has a @element_free_func set. Pass
%FALSE if you want to free the #GArray wrapper but preserve the
underlying array for use elsewhere. If the reference count of @array
is greater than one, the #GArray wrapper is preserved but the size
of @array will be set to zero.

If array elements contain dynamically-allocated memory, they should
be freed separately.
#NAME: lock
#PARENT: GLib.AsyncQueue
#COMMENT: Acquires the @queue's lock. If another thread is already
holding the lock, this call will block until the lock
becomes available.

Call g_async_queue_unlock() to drop the lock again.

While holding the lock, you can only call the
g_async_queue_*_unlocked() functions on @queue. Otherwise,
deadlock may occur.
#NAME: mutex
#PARENT: GLib.Mutex.unlock.none
#COMMENT: a #GMutex
#NAME: timeout_source_new_seconds
#PARENT: GLib
#COMMENT: Creates a new timeout source.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed.

The scheduling granularity/accuracy of this timeout source will be
in seconds.

The interval given in terms of monotonic time, not wall clock time.
See g_get_monotonic_time().
#NAME: iter
#PARENT: GLib.Sequence.insert_before.SequenceIter
#COMMENT: a #GSequenceIter
#NAME: iter_cmp
#PARENT: GLib.Sequence.lookup_iter.SequenceIter
#COMMENT: the function used to compare iterators in the sequence
#NAME: thursday
#PARENT: GLib.DateWeekday
#COMMENT: Thursday
#NAME: MAXUINT8
#PARENT: GLib
#COMMENT: The maximum value which can be held in a #guint8.
#NAME: hash_table
#PARENT: GLib.hash_table_insert.gboolean
#COMMENT: a #GHashTable
#NAME: data
#PARENT: GLib.DataForeachFunc.none
#COMMENT: the data element.
#NAME: hook
#PARENT: GLib.Hook.insert_sorted.none
#COMMENT: the #GHook to insert
#NAME: remove_index
#PARENT: GLib.Array
#COMMENT: Removes the element at the given index from a #GArray. The following
elements are moved down one place.
#NAME: tibetan
#PARENT: GLib.UnicodeScript
#COMMENT: Tibetan
#NAME: parse_debug_string
#PARENT: GLib
#COMMENT: Parses a string containing debugging options
into a %guint containing bit flags. This is used
within GDK and GTK+ to parse the debug options passed on the
command line or through environment variables.

If @string is equal to "all", all flags are set. Any flags
specified along with "all" in @string are inverted; thus,
"all,foo,bar" or "foo,bar,all" sets all flags except those
corresponding to "foo" and "bar".

If @string is equal to "help", all the available keys in @keys
are printed out to standard error.
#NAME: data
#PARENT: GLib.Sequence.insert_before.SequenceIter
#COMMENT: the data for the new item
#NAME: name
#PARENT: GLib.BookmarkFile.get_app_info.gboolean
#COMMENT: an application's name
#NAME: get_filename_charsets
#PARENT: GLib
#COMMENT: Determines the preferred character sets used for filenames.
The first character set from the @charsets is the filename encoding, the
subsequent character sets are used when trying to generate a displayable
representation of a filename, see g_filename_display_name().

On Unix, the character sets are determined by consulting the
environment variables `G_FILENAME_ENCODING` and `G_BROKEN_FILENAMES`.
On Windows, the character set used in the GLib API is always UTF-8
and said environment variables have no effect.

`G_FILENAME_ENCODING` may be set to a comma-separated list of
character set names. The special token "&commat;locale" is taken
to  mean the character set for the [current locale][setlocale].
If `G_FILENAME_ENCODING` is not set, but `G_BROKEN_FILENAMES` is,
the character set of the current locale is taken as the filename
encoding. If neither environment variable  is set, UTF-8 is taken
as the filename encoding, but the character set of the current locale
is also put in the list of encodings.

The returned @charsets belong to GLib and must not be freed.

Note that on Unix, regardless of the locale character set or
`G_FILENAME_ENCODING` value, the actual file names present
on a system might be in any random encoding or just gibberish.
#NAME: exec
#PARENT: GLib.BookmarkFile.add_application.none
#COMMENT: command line to be used to launch the bookmark or %NULL
#NAME: hash_table
#PARENT: GLib.hash_table_remove.gboolean
#COMMENT: a #GHashTable
#NAME: timeout_add_seconds_full
#PARENT: GLib
#COMMENT: Sets a function to be called at regular intervals, with @priority.
The function is called repeatedly until it returns %FALSE, at which
point the timeout is automatically destroyed and the function will
not be called again.

Unlike g_timeout_add(), this function operates at whole second granularity.
The initial starting point of the timer is determined by the implementation
and the implementation is expected to group multiple timers together so that
they fire all at the same time.
To allow this grouping, the @interval to the first timer is rounded
and can deviate up to one second from the specified interval.
Subsequent timer iterations will generally run at the specified interval.

Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given @interval

If you want timing more precise than whole seconds, use g_timeout_add()
instead.

The grouping of timers to fire at the same time results in a more power
and CPU efficient behavior so if your timer is in multiples of seconds
and you don't require the first timer exactly one second from now, the
use of g_timeout_add_seconds() is preferred over g_timeout_add().

This internally creates a main loop source using
g_timeout_source_new_seconds() and attaches it to the main loop context
using g_source_attach(). You can do these steps manually if you need
greater control.

The interval given is in terms of monotonic time, not wall clock
time.  See g_get_monotonic_time().
#NAME: mirrored_ch
#PARENT: GLib.unichar_get_mirror_char.gboolean
#COMMENT: location to store the mirrored character
#NAME: get_time
#PARENT: GLib.Source
#COMMENT: Gets the time to be used when checking this source. The advantage of
calling this function over calling g_get_monotonic_time() directly is
that when checking multiple sources, GLib can cache a single value
instead of having to repeatedly get the system monotonic time.

The time here is the system monotonic time, if available, or some
other reasonable alternative otherwise.  See g_get_monotonic_time().
#NAME: checksum
#PARENT: GLib.Checksum.free.none
#COMMENT: a #GChecksum
#NAME: length
#PARENT: GLib.compute_checksum_for_data.utf8
#COMMENT: length of @data
#NAME: try_malloc
#PARENT: GLib
#COMMENT: Attempts to allocate @n_bytes, and returns %NULL on failure.
Contrast with g_malloc(), which aborts the program on failure.
#NAME: hook_id
#PARENT: GLib.Hook.destroy.gboolean
#COMMENT: a hook ID
#NAME: saurashtra
#PARENT: GLib.UnicodeScript
#COMMENT: Saurashtra. Since 2.16.3
#NAME: array
#PARENT: GLib.ByteArray.sort_with_data.none
#COMMENT: a #GByteArray
#NAME: string
#PARENT: GLib.Regex.split_simple.utf8
#COMMENT: the string to scan for matches
#NAME: quit
#PARENT: GLib.MainLoop
#COMMENT: Stops a #GMainLoop from running. Any calls to g_main_loop_run()
for the loop will return.

Note that sources that have already been dispatched when
g_main_loop_quit() is called will still be executed.
#NAME: file
#PARENT: GLib.MappedFile.get_contents.utf8
#COMMENT: a #GMappedFile
#NAME: iter
#PARENT: GLib.HashTableIter.replace.none
#COMMENT: an initialized #GHashTableIter
#NAME: combining_mark
#PARENT: GLib.UnicodeBreakType
#COMMENT: Attached Characters and Combining Marks (CM)
#NAME: d
#PARENT: GLib.ascii_formatd.utf8
#COMMENT: The #gdouble to convert
#NAME: KEY_FILE_DESKTOP_KEY_ICON
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the name of the icon to be displayed for the desktop
entry.
#NAME: checksum_type
#PARENT: GLib.checksum_type_get_length.gssize
#COMMENT: a #GChecksumType
#NAME: list
#PARENT: GLib.List.sort_with_data.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: list
#PARENT: GLib.List.foreach.none
#COMMENT: a #GList, this must point to the top of the list
#NAME: context
#PARENT: GLib.MainContext.remove_poll.none
#COMMENT: a #GMainContext
#NAME: struct_size
#PARENT: GLib.Source.new.Source
#COMMENT: size of the #GSource structure to create.
#NAME: day
#PARENT: GLib.Date.set_day.none
#COMMENT: day to set
#NAME: log_set_handler
#PARENT: GLib
#COMMENT: Sets the log handler for a domain and a set of log levels.
To handle fatal and recursive messages the @log_levels parameter
must be combined with the #G_LOG_FLAG_FATAL and #G_LOG_FLAG_RECURSION
bit flags.

Note that since the #G_LOG_LEVEL_ERROR log level is always fatal, if
you want to set a handler for this log level you must combine it with
#G_LOG_FLAG_FATAL.

Here is an example for adding a log handler for all warning messages
in the default domain:
|[<!-- language="C" -->
g_log_set_handler (NULL, G_LOG_LEVEL_WARNING | G_LOG_FLAG_FATAL
                   | G_LOG_FLAG_RECURSION, my_log_handler, NULL);
]|

This example adds a log handler for all critical messages from GTK+:
|[<!-- language="C" -->
g_log_set_handler ("Gtk", G_LOG_LEVEL_CRITICAL | G_LOG_FLAG_FATAL
                   | G_LOG_FLAG_RECURSION, my_log_handler, NULL);
]|

This example adds a log handler for all messages from GLib:
|[<!-- language="C" -->
g_log_set_handler ("GLib", G_LOG_LEVEL_MASK | G_LOG_FLAG_FATAL
                   | G_LOG_FLAG_RECURSION, my_log_handler, NULL);
]|
#NAME: strv
#PARENT: GLib.Variant.new_bytestring_array.Variant
#COMMENT: an array of strings
#NAME: List
#PARENT: GLib
#COMMENT: The #GList struct is used for each element in a doubly-linked list.
#NAME: key
#PARENT: GLib.VariantType.key
#COMMENT: the key type of the dictionary entry

Since 2.24
#NAME: hook_list
#PARENT: GLib.Hook.find_func.Hook
#COMMENT: a #GHookList
#NAME: pos
#PARENT: GLib.String.insert.String
#COMMENT: the position to insert the copy of the string
#NAME: move_item
#PARENT: GLib.BookmarkFile
#COMMENT: Changes the URI of a bookmark item from @old_uri to @new_uri.  Any
existing bookmark for @new_uri will be overwritten.  If @new_uri is
%NULL, then the bookmark is removed.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
#NAME: value
#PARENT: GLib.Tree.insert.none
#COMMENT: the value corresponding to the key
#NAME: queue
#PARENT: GLib.Queue.push_tail_link.none
#COMMENT: a #GQueue
#NAME: random_int_range
#PARENT: GLib.random_int_range
#COMMENT: a random number
#NAME: ascii_toupper
#PARENT: GLib.ascii_toupper
#COMMENT: the result of converting @c to upper case. If @c is not
   an ASCII lower case letter, @c is returned unchanged.
#NAME: dt1
#PARENT: GLib.date_time_compare.gint
#COMMENT: first #GDateTime to compare
#NAME: init
#PARENT: GLib.HookList
#COMMENT: Initializes a #GHookList.
This must be called before the #GHookList is used.
#NAME: dt2
#PARENT: GLib.date_time_compare.gint
#COMMENT: second #GDateTime to compare
#NAME: type
#PARENT: GLib.IOChannel.seek_position.IOStatus
#COMMENT: a #GSeekType. The type %G_SEEK_CUR is only allowed in those
                     cases where a call to g_io_channel_set_encoding ()
                     is allowed. See the documentation for
                     g_io_channel_set_encoding () for details.
#NAME: thaana
#PARENT: GLib.UnicodeScript
#COMMENT: Thaana
#NAME: context
#PARENT: GLib.MarkupParseContext.free.none
#COMMENT: a #GMarkupParseContext
#NAME: v
#PARENT: GLib.String.equal.gboolean
#COMMENT: a #GString
#NAME: datetime
#PARENT: GLib.DateTime.get_month.gint
#COMMENT: a #GDateTime
#NAME: new
#PARENT: GLib.Variant.new
#COMMENT: a new floating #GVariant instance
#NAME: scanner
#PARENT: GLib.Scanner.lookup_symbol.gpointer
#COMMENT: a #GScanner
#NAME: max_tokens
#PARENT: GLib.strsplit.utf8
#COMMENT: the maximum number of pieces to split @string into.
    If this is less than 1, the string is split completely.
#NAME: ascii_strtoull
#PARENT: GLib.ascii_strtoull
#COMMENT: the #guint64 value or zero on error.
#NAME: test_rand_double
#PARENT: GLib.test_rand_double
#COMMENT: a random number from the seeded random number generator.
#NAME: sibling
#PARENT: GLib.Queue.insert_after.none
#COMMENT: a #GList link that must be part of @queue, or %NULL to
  push at the head of the queue.
#NAME: regex
#PARENT: GLib.Regex.replace.utf8
#COMMENT: a #GRegex structure
#NAME: mode
#PARENT: GLib.IOChannel.new_file.IOChannel
#COMMENT: One of "r", "w", "a", "r+", "w+", "a+". These have
       the same meaning as in fopen()
#NAME: range_out_of_order
#PARENT: GLib.RegexError
#COMMENT: Range out of order in character class.
    Since 2.16
#NAME: endptr
#PARENT: GLib.VariantType.string_scan.gboolean
#COMMENT: location to store the end pointer, or %NULL
#NAME: iter
#PARENT: GLib.VariantIter.next_value.Variant
#COMMENT: a #GVariantIter
#NAME: unix_open_pipe
#PARENT: GLib
#COMMENT: Similar to the UNIX pipe() call, but on modern systems like Linux
uses the pipe2() system call, which atomically creates a pipe with
the configured flags. The only supported flag currently is
%FD_CLOEXEC. If for example you want to configure %O_NONBLOCK, that
must still be done separately with fcntl().

This function does not take %O_CLOEXEC, it takes %FD_CLOEXEC as if
for fcntl(); these are different on Linux/glibc.
#NAME: match_options
#PARENT: GLib.Regex.new.Regex
#COMMENT: match options for the regular expression, or 0
#NAME: is_empty
#PARENT: GLib.Queue
#COMMENT: Returns %TRUE if the queue is empty.
#NAME: nth_bit
#PARENT: GLib.bit_nth_msf.gint
#COMMENT: the index of the bit to start the search from
#NAME: format
#PARENT: GLib.vsnprintf.gint
#COMMENT: a standard printf() format string, but notice
         string precision pitfalls][string-precision]
#NAME: user_data
#PARENT: GLib.Tree.traverse.none
#COMMENT: user data to pass to the function
#NAME: v_symbol
#PARENT: GLib.TokenValue
#COMMENT: token symbol value
#NAME: get_seconds
#PARENT: GLib.DateTime.get_seconds
#COMMENT: the number of seconds
#NAME: hostname
#PARENT: GLib.filename_to_uri.utf8
#COMMENT: A UTF-8 encoded hostname, or %NULL for none.
#NAME: find_data
#PARENT: GLib.Hook
#COMMENT: Finds a #GHook in a #GHookList with the given data.
#NAME: tz
#PARENT: GLib.TimeZone.ref.TimeZone
#COMMENT: a #GTimeZone
#NAME: end
#PARENT: GLib.test_rand_int_range.gint32
#COMMENT: the smallest value not to be returned by this function
#NAME: interval
#PARENT: GLib.timeout_add_seconds_full.guint
#COMMENT: the time between calls to the function, in seconds
#NAME: new
#PARENT: GLib.Error.new
#COMMENT: a new #GError
#NAME: new
#PARENT: GLib.MainContext
#COMMENT: Creates a new #GMainContext structure.
#NAME: pos
#PARENT: GLib.String.overwrite.String
#COMMENT: the position at which to start overwriting
#NAME: set_parse_hooks
#PARENT: GLib.OptionGroup
#COMMENT: Associates two functions with @group which will be called
from g_option_context_parse() before the first option is parsed
and after the last option has been parsed, respectively.

Note that the user data to be passed to @pre_parse_func and
@post_parse_func can be specified when constructing the group
with g_option_group_new().
#NAME: string_new
#PARENT: GLib
#COMMENT: Creates a new #GString, initialized with the given string.
#NAME: chunk
#PARENT: GLib.StringChunk.insert_len.utf8
#COMMENT: a #GStringChunk
#NAME: v_float
#PARENT: GLib.FloatIEEE754
#COMMENT: the double value
#NAME: n_directories
#PARENT: GLib.UserDirectory
#COMMENT: the number of enum values
#NAME: to_data
#PARENT: GLib.KeyFile
#COMMENT: This function outputs @key_file as a string.

Note that this function never reports an error,
so it is safe to pass %NULL as @error.
#NAME: mkdtemp_full
#PARENT: GLib.mkdtemp_full
#COMMENT: A pointer to @tmpl, which has been modified
    to hold the directory name. In case of errors, %NULL is
    returned, and %errno will be set.
#NAME: match_info
#PARENT: GLib.MatchInfo.unref.none
#COMMENT: a #GMatchInfo
#NAME: argc
#PARENT: GLib.OptionContext.parse.gboolean
#COMMENT: a pointer to the number of command line arguments
#NAME: DateWeekday
#PARENT: GLib
#COMMENT: Enumeration representing a day of the week; #G_DATE_MONDAY,
#G_DATE_TUESDAY, etc. #G_DATE_BAD_WEEKDAY is an invalid weekday.
#NAME: ignore_qualified
#PARENT: GLib.MarkupParseFlags
#COMMENT: Ignore (don't report) qualified
    attributes and tags, along with their contents.  A qualified
    attribute or tag is one that contains ':' in its name (ie: is in
    another namespace).  Since: 2.40.
#NAME: utf8_pointer_to_offset
#PARENT: GLib
#COMMENT: Converts from a pointer to position within a string to a integer
character offset.

Since 2.10, this function allows @pos to be before @str, and returns
a negative offset in this case.
#NAME: read_name
#PARENT: GLib.Dir
#COMMENT: Retrieves the name of another entry in the directory, or %NULL.
The order of entries returned from this function is not defined,
and may vary by file system or other operating-system dependent
factors.

%NULL may also be returned in case of errors. On Unix, you can
check `errno` to find out if %NULL was returned because of an error.

On Unix, the '.' and '..' entries are omitted, and the returned
name is in the on-disk encoding.

On Windows, as is true of all GLib functions which operate on
filenames, the returned name is in UTF-8.
#NAME: context
#PARENT: GLib.OptionContext.get_strict_posix.gboolean
#COMMENT: a #GoptionContext
#NAME: copy
#PARENT: GLib.VariantIter.copy
#COMMENT: a new heap-allocated #GVariantIter
#NAME: str
#PARENT: GLib.ucs4_to_utf8.utf8
#COMMENT: a UCS-4 encoded string
#NAME: a
#PARENT: GLib.SequenceIterCompareFunc.gint
#COMMENT: a #GSequenceIter
#NAME: fixture
#PARENT: GLib.TestFixtureFunc.none
#COMMENT: the test fixture
#NAME: load_from_file
#PARENT: GLib.KeyFile
#COMMENT: Loads a key file into an empty #GKeyFile structure.
If the file could not be loaded then @error is set to
either a #GFileError or #GKeyFileError.
#NAME: b
#PARENT: GLib.SequenceIterCompareFunc.gint
#COMMENT: a #GSequenceIter
#NAME: notempty_atstart
#PARENT: GLib.RegexMatchFlags
#COMMENT: Like #G_REGEX_MATCH_NOTEMPTY, but only applied to
    the start of the matched string. For anchored
    patterns this can only happen for pattern containing "\K". Since: 2.34
#NAME: inbuf
#PARENT: GLib.iconv.gsize
#COMMENT: bytes to convert
#NAME: shutdown
#PARENT: GLib.IOChannel.shutdown
#COMMENT: the status of the operation.
#NAME: groups
#PARENT: GLib.BookmarkFile.set_groups.none
#COMMENT: an array of group names, or %NULL to remove all groups
#NAME: length
#PARENT: GLib.markup_escape_text.utf8
#COMMENT: length of @text in bytes, or -1 if the text is nul-terminated
#NAME: insert_sorted_iter
#PARENT: GLib.Sequence.insert_sorted_iter
#COMMENT: a #GSequenceIter pointing to the new item
#NAME: first_sibling
#PARENT: GLib.Node
#COMMENT: Gets the first sibling of a #GNode.
This could possibly be the node itself.
#NAME: dataset_id_get_data
#PARENT: GLib
#COMMENT: Gets the data element corresponding to a #GQuark.
#NAME: foreach
#PARENT: GLib.Queue
#COMMENT: Calls @func for each element in the queue passing @user_data to the
function.
#NAME: log_set_fatal_mask
#PARENT: GLib
#COMMENT: Sets the log levels which are fatal in the given domain.
%G_LOG_LEVEL_ERROR is always fatal.
#NAME: channel
#PARENT: GLib.io_create_watch.Source
#COMMENT: a #GIOChannel to watch
#NAME: uri
#PARENT: GLib.BookmarkFile.set_mime_type.none
#COMMENT: a valid URI
#NAME: new_events
#PARENT: GLib.Source.modify_unix_fd.none
#COMMENT: the new event mask to watch
#NAME: contingent
#PARENT: GLib.UnicodeBreakType
#COMMENT: Contingent Break Opportunity (CB)
#NAME: argv
#PARENT: GLib.OptionContext.parse.gboolean
#COMMENT: a pointer to the array of command line arguments
#NAME: string_new_len
#PARENT: GLib
#COMMENT: Creates a new #GString with @len bytes of the @init buffer.
Because a length is provided, @init need not be nul-terminated,
and can contain embedded nul bytes.

Since this function does not stop at nul bytes, it is the caller's
responsibility to ensure that @init has at least @len addressable
bytes.
#NAME: test_timer_elapsed
#PARENT: GLib.test_timer_elapsed
#COMMENT: the time since the last start of the timer, as a double
#NAME: set_free_func
#PARENT: GLib.PtrArray
#COMMENT: Sets a function for freeing each element when @array is destroyed
either via g_ptr_array_unref(), when g_ptr_array_free() is called
with @free_segment set to %TRUE or when removing elements.
#NAME: user_data
#PARENT: GLib.ThreadPool.new.ThreadPool
#COMMENT: user data that is handed over to @func every time it
    is called
#NAME: func
#PARENT: GLib.set_print_handler.PrintFunc
#COMMENT: the new print handler
#NAME: need_valids
#PARENT: GLib.Hook.find_func_data.Hook
#COMMENT: %TRUE if #GHook elements which have been destroyed
    should be skipped
#NAME: unix_fd_add_full
#PARENT: GLib
#COMMENT: Sets a function to be called when the IO condition, as specified by
@condition becomes true for @fd.

This is the same as g_unix_fd_add(), except that it allows you to
specify a non-default priority and a provide a #GDestroyNotify for
@user_data.
#NAME: unexp_token
#PARENT: GLib.Scanner
#COMMENT: Outputs a message through the scanner's msg_handler,
resulting from an unexpected token in the input stream.
Note that you should not call g_scanner_peek_next_token()
followed by g_scanner_unexp_token() without an intermediate
call to g_scanner_get_next_token(), as g_scanner_unexp_token()
evaluates the scanner's current token (not the peeked token)
to construct part of the message.
#NAME: inherit_stdin
#PARENT: GLib.TestTrapFlags
#COMMENT: If this flag is given, stdin of the
    child process is shared with stdin of its parent process.
    It is redirected to `/dev/null` otherwise.
#NAME: node
#PARENT: GLib.Node.nth_child.Node
#COMMENT: a #GNode
#NAME: a
#PARENT: GLib.unichar_decompose.gboolean
#COMMENT: return location for the first component of @ch
#NAME: GUINT16_FORMAT
#PARENT: GLib
#COMMENT: This is the platform dependent conversion specifier for scanning
and printing values of type #guint16. See also #G_GINT16_FORMAT
#NAME: b
#PARENT: GLib.unichar_decompose.gboolean
#COMMENT: return location for the second component of @ch
#NAME: group
#PARENT: GLib.OptionContext.set_main_group.none
#COMMENT: the group to set as main group
#NAME: Hook
#PARENT: GLib
#COMMENT: The #GHook struct represents a single hook function in a #GHookList.
#NAME: non_starter
#PARENT: GLib.UnicodeBreakType
#COMMENT: Nonstarter (NS)
#NAME: new_maybe
#PARENT: GLib.VariantType
#COMMENT: Constructs the type corresponding to a maybe instance containing
type @type or Nothing.

It is appropriate to call g_variant_type_free() on the return value.
#NAME: hangul_v_jamo
#PARENT: GLib.UnicodeBreakType
#COMMENT: Hangul V Jamo (JV)
#NAME: move
#PARENT: GLib.SequenceIter.move
#COMMENT: a #GSequenceIter which is @delta positions away from @iter
#NAME: get_keys
#PARENT: GLib.KeyFile.get_keys
#COMMENT: a newly-allocated %NULL-terminated array of strings.
    Use g_strfreev() to free it.
#NAME: file
#PARENT: GLib.KeyFile.load_from_file.gboolean
#COMMENT: the path of a filename to load, in the GLib filename encoding
#NAME: list
#PARENT: GLib.SList.delete_link.gpointer
#COMMENT: a #GSList
#NAME: match_options
#PARENT: GLib.Regex.match_simple.gboolean
#COMMENT: match options, or 0
#NAME: unichar_isspace
#PARENT: GLib.unichar_isspace
#COMMENT: %TRUE if @c is a space character
#NAME: from_codeset
#PARENT: GLib.IConv.open.IConv
#COMMENT: source codeset
#NAME: atomic
#PARENT: GLib.atomic_int_and.guint
#COMMENT: a pointer to a #gint or #guint
#NAME: is_destroyed
#PARENT: GLib.Source.is_destroyed
#COMMENT: %TRUE if the source has been destroyed
#NAME: address
#PARENT: GLib.pointer_bit_lock.none
#COMMENT: a pointer to a #gpointer-sized value
#NAME: io_add_watch_full
#PARENT: GLib.io_add_watch_full
#COMMENT: the event source id
#NAME: bytes_read
#PARENT: GLib.convert_with_iconv.utf8
#COMMENT: location to store the number of bytes in the
                input string that were successfully converted, or %NULL.
                Even if the conversion was successful, this may be
                less than @len if there were partial characters
                at the end of the input. If the error
                #G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
                stored will the byte offset after the last valid
                input sequence.
#NAME: channel
#PARENT: GLib.io_add_watch.guint
#COMMENT: a #GIOChannel
#NAME: right_brace
#PARENT: GLib.TokenType
#COMMENT: a ']' character
#NAME: new_with_seed_array
#PARENT: GLib.Rand.new_with_seed_array
#COMMENT: the new #GRand
#NAME: get_user_runtime_dir
#PARENT: GLib.get_user_runtime_dir
#COMMENT: a string owned by GLib that must not be modified or freed.
#NAME: child_watch_source_new
#PARENT: GLib.child_watch_source_new
#COMMENT: the newly-created child watch source
#NAME: idle_remove_by_data
#PARENT: GLib
#COMMENT: Removes the idle function with the given data.
#NAME: RegexCompileFlags
#PARENT: GLib
#COMMENT: Flags specifying compile-time options.
#NAME: string
#PARENT: GLib.PrintFunc.none
#COMMENT: the message to output
#NAME: func
#PARENT: GLib.SList.copy_deep.gpointer
#COMMENT: a copy function used to copy every element in the list
#NAME: timed_pop_unlocked
#PARENT: GLib.AsyncQueue.timed_pop_unlocked
#COMMENT: data from the queue or %NULL, when no data is
    received before @end_time.
#NAME: pos
#PARENT: GLib.String.insert_unichar.String
#COMMENT: the position at which to insert character, or -1
    to append at the end of the string
#NAME: next_valid
#PARENT: GLib.Hook
#COMMENT: Returns the next #GHook in a #GHookList which has not been destroyed.
The reference count for the #GHook is incremented, so you must call
g_hook_unref() to restore it when no longer needed. (Or continue to call
g_hook_next_valid() until %NULL is returned.)
#NAME: end_pos
#PARENT: GLib.utf8_substring.utf8
#COMMENT: another character offset within @str
#NAME: hash_table_steal_all
#PARENT: GLib
#COMMENT: Removes all keys and their associated values from a #GHashTable
without calling the key and value destroy functions.
#NAME: free
#PARENT: GLib.VariantType
#COMMENT: Frees a #GVariantType that was allocated with
g_variant_type_copy(), g_variant_type_new() or one of the container
type constructor functions.

In the case that @type is %NULL, this function does nothing.

Since 2.24
#NAME: skip_comment_single
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if single-line comments are skipped
    and not returned as tokens (the default is %TRUE).
#NAME: prefix
#PARENT: GLib.UnicodeBreakType
#COMMENT: Prefix (Numeric) (PR)
#NAME: copy_deep
#PARENT: GLib.SList
#COMMENT: Makes a full (deep) copy of a #GSList.

In contrast with g_slist_copy(), this function uses @func to make a copy of
each list element, in addition to copying the list container itself.

@func, as a #GCopyFunc, takes two arguments, the data to be copied and a user
pointer. It's safe to pass #NULL as user_data, if the copy function takes only
one argument.

For instance, if @list holds a list of GObjects, you can do:
|[<!-- language="C" -->
another_list = g_slist_copy_deep (list, (GCopyFunc) g_object_ref, NULL);
]|

And, to entirely free the new list, you could do:
|[<!-- language="C" -->
g_slist_free_full (another_list, g_object_unref);
]|
#NAME: href
#PARENT: GLib.BookmarkFile.set_icon.none
#COMMENT: the URI of the icon for the bookmark, or %NULL
#NAME: invalid_control_char
#PARENT: GLib.RegexError
#COMMENT: "\\c" must be followed by an ASCII
    character. Since: 2.34
#NAME: hook_list
#PARENT: GLib.Hook.find_func_data.Hook
#COMMENT: a #GHookList
#NAME: c
#PARENT: GLib.unichar_to_utf8.gint
#COMMENT: a Unicode character code
#NAME: newline_lf
#PARENT: GLib.RegexMatchFlags
#COMMENT: Overrides the newline definition set when
    creating a new #GRegex, setting the '\n' character as line terminator.
#NAME: set_size
#PARENT: GLib.ByteArray
#COMMENT: Sets the size of the #GByteArray, expanding it if necessary.
#NAME: append
#PARENT: GLib.List
#COMMENT: Adds a new element on to the end of the list.

Note that the return value is the new start of the list,
if @list was empty; make sure you store the new value.

g_list_append() has to traverse the entire list to find the end,
which is inefficient when adding multiple elements. A common idiom
to avoid the inefficiency is to use g_list_prepend() and reverse
the list with g_list_reverse() when all elements have been added.

|[<!-- language="C" -->
// Notice that these are initialized to the empty list.
GList *string_list = NULL, *number_list = NULL;

// This is a list of strings.
string_list = g_list_append (string_list, "first");
string_list = g_list_append (string_list, "second");

// This is a list of integers.
number_list = g_list_append (number_list, GINT_TO_POINTER (27));
number_list = g_list_append (number_list, GINT_TO_POINTER (14));
]|
#NAME: domain
#PARENT: GLib.OptionContext.set_translation_domain.none
#COMMENT: the domain to use
#NAME: date_valid_dmy
#PARENT: GLib
#COMMENT: Returns %TRUE if the day-month-year triplet forms a valid, existing day
in the range of days #GDate understands (Year 1 or later, no more than
a few thousand years in the future).
#NAME: 
#PARENT: GLib.Variant.new_printf.Variant...
#COMMENT: arguments for @format_string
#NAME: command_line
#PARENT: GLib.spawn_command_line_sync.gboolean
#COMMENT: a command line
#NAME: list
#PARENT: GLib.SList.last.gpointer
#COMMENT: a #GSList
#NAME: insert_before
#PARENT: GLib.Node.insert_before
#COMMENT: the inserted #GNode
#NAME: func
#PARENT: GLib.HashTable.foreach_steal.guint
#COMMENT: the function to call for each key/value pair
#NAME: file
#PARENT: GLib.KeyFile.load_from_data_dirs.gboolean
#COMMENT: a relative path to a filename to open and parse
#NAME: func
#PARENT: GLib.AsyncQueue.push_sorted_unlocked.none
#COMMENT: the #GCompareDataFunc is used to sort @queue
#NAME: stack_p
#PARENT: GLib.TrashStack.pop.gpointer
#COMMENT: a #GTrashStack
#NAME: date_time_hash
#PARENT: GLib
#COMMENT: Hashes @datetime into a #guint, suitable for use within #GHashTable.
#NAME: load_from_data
#PARENT: GLib.BookmarkFile.load_from_data
#COMMENT: %TRUE if a desktop bookmark could be loaded.
#NAME: uri
#PARENT: GLib.uri_parse_scheme.utf8
#COMMENT: a valid URI.
#NAME: name
#PARENT: GLib.MatchInfo.fetch_named.utf8
#COMMENT: name of the subexpression
#NAME: to_timezone
#PARENT: GLib.DateTime
#COMMENT: Create a new #GDateTime corresponding to the same instant in time as
@datetime, but in the time zone @tz.

This call can fail in the case that the time goes out of bounds.  For
example, converting 0001-01-01 00:00:00 UTC to a time zone west of
Greenwich will fail (due to the year 0 being out of range).

You should release the return value by calling g_date_time_unref()
when you are done with it.
#NAME: queue
#PARENT: GLib.Queue.insert_sorted.none
#COMMENT: a #GQueue
#NAME: scan_string_sq
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if strings can be enclosed in single
    quotes (the default is %TRUE).
#NAME: datetime
#PARENT: GLib.DateTime.format.utf8
#COMMENT: A #GDateTime
#NAME: free
#PARENT: GLib.KeyFile
#COMMENT: Clears all keys and groups from @key_file, and decreases the
reference count by 1. If the reference count reaches zero,
frees the key file and all its allocated memory.
#NAME: hooks
#PARENT: GLib.HookList
#COMMENT: the first #GHook element in the list
#NAME: set_help_enabled
#PARENT: GLib.OptionContext
#COMMENT: Enables or disables automatic generation of `--help` output.
By default, g_option_context_parse() recognizes `--help`, `-h`,
`-?`, `--help-all` and `--help-groupname` and creates suitable
output to stdout.
#NAME: queue
#PARENT: GLib.Queue.is_empty.gboolean
#COMMENT: a #GQueue.
#NAME: group_name
#PARENT: GLib.KeyFile.get_keys.utf8
#COMMENT: a group name
#NAME: HookCheckFunc
#PARENT: GLib
#COMMENT: Defines the type of a hook function that can be invoked
by g_hook_list_invoke_check().
#NAME: truncate
#PARENT: GLib.String
#COMMENT: Cuts off the end of the GString, leaving the first @len bytes.
#NAME: test_rand_int
#PARENT: GLib
#COMMENT: Get a reproducible random integer number.

The random numbers generated by the g_test_rand_*() family of functions
change with every new test program start, unless the --seed option is
given when starting test programs.

For individual test cases however, the random number generator is
reseeded, to avoid dependencies between tests and to make --seed
effective for all test cases.
#NAME: val
#PARENT: GLib.atomic_pointer_and.gsize
#COMMENT: the value to 'and'
#NAME: envp
#PARENT: GLib.spawn_async_with_pipes.gboolean
#COMMENT: child's environment, or %NULL to inherit parent's, in the GLib file name encoding
#NAME: set_prgname
#PARENT: GLib
#COMMENT: Sets the name of the program. This name should not be localized,
in contrast to g_set_application_name().

Note that for thread-safety reasons this function can only be called once.
#NAME: new
#PARENT: GLib.HashTable.new
#COMMENT: a new #GHashTable
#NAME: concat
#PARENT: GLib.SList
#COMMENT: Adds the second #GSList onto the end of the first #GSList.
Note that the elements of the second #GSList are not copied.
They are used directly.
#NAME: year
#PARENT: GLib.date_is_leap_year.gboolean
#COMMENT: year to check
#NAME: channel
#PARENT: GLib.IOChannel.write.IOError
#COMMENT: a #GIOChannel
#NAME: regex_escape_string
#PARENT: GLib.regex_escape_string
#COMMENT: a newly-allocated escaped string
#NAME: MINOR_VERSION
#PARENT: GLib
#COMMENT: The minor version number of the GLib library.

Like #gtk_minor_version, but from the headers used at
application compile time, rather than from the library
linked against at application run time.
#NAME: queue
#PARENT: GLib.Queue.peek_head_link.gpointer
#COMMENT: a #GQueue
#NAME: main_depth
#PARENT: GLib.main_depth
#COMMENT: The main loop recursion level in the current thread
#NAME: rw_lock
#PARENT: GLib.RWLock.reader_unlock.none
#COMMENT: a #GRWLock
#NAME: key
#PARENT: GLib.HFunc.none
#COMMENT: a key
#NAME: prepend_len
#PARENT: GLib.String.prepend_len
#COMMENT: @string
#NAME: value
#PARENT: GLib.Variant.get_child_value.Variant
#COMMENT: a container #GVariant
#NAME: new_valist
#PARENT: GLib.Error
#COMMENT: Creates a new #GError with the given @domain and @code,
and a message formatted with @format.
#NAME: interval
#PARENT: GLib.timeout_source_new_seconds.Source
#COMMENT: the timeout interval in seconds
#NAME: unref
#PARENT: GLib.ByteArray
#COMMENT: Atomically decrements the reference count of @array by one. If the
reference count drops to 0, all memory allocated by the array is
released. This function is thread-safe and may be called from any
thread.
#NAME: get_context
#PARENT: GLib.MainLoop.get_context
#COMMENT: the #GMainContext of @loop
#NAME: a
#PARENT: GLib.Sequence.swap.none
#COMMENT: a #GSequenceIter
#NAME: b
#PARENT: GLib.Sequence.swap.none
#COMMENT: a #GSequenceIter
#NAME: app
#PARENT: GLib.Variant.new_va.Variant
#COMMENT: a pointer to a #va_list
#NAME: index_
#PARENT: GLib.PtrArray.remove_index_fast.gpointer
#COMMENT: the index of the pointer to remove
#NAME: print
#PARENT: GLib.Variant.print
#COMMENT: a newly-allocated string holding the result.
#NAME: fatal_mask
#PARENT: GLib.log_set_always_fatal.LogLevelFlags
#COMMENT: the mask containing bits set for each level
    of error which is to be fatal
#NAME: unichar_totitle
#PARENT: GLib.unichar_totitle
#COMMENT: the result of converting @c to titlecase.
              If @c is not an uppercase or lowercase character,
              @c is returned unchanged.
#NAME: rw_lock
#PARENT: GLib.RWLock.writer_unlock.none
#COMMENT: a #GRWLock
#NAME: IOChannel
#PARENT: GLib
#COMMENT: A data structure representing an IO Channel. The fields should be
considered private and should only be accessed with the following
functions.
#NAME: first_valid
#PARENT: GLib.Hook.first_valid
#COMMENT: the first valid #GHook, or %NULL if none are valid
#NAME: HookFunc
#PARENT: GLib
#COMMENT: Defines the type of a hook function that can be invoked
by g_hook_list_invoke().
#NAME: buffered
#PARENT: GLib.IOChannel.set_buffered.none
#COMMENT: whether to set the channel buffered or unbuffered
#NAME: unichar_iswide
#PARENT: GLib
#COMMENT: Determines if a character is typically rendered in a double-width
cell.
#NAME: append
#PARENT: GLib.String.append
#COMMENT: @string
#NAME: TraverseFunc
#PARENT: GLib.TraverseFunc
#COMMENT: %TRUE to stop the traversal
#NAME: get_app_info
#PARENT: GLib.BookmarkFile.get_app_info
#COMMENT: %TRUE on success.
#NAME: s1
#PARENT: GLib.ascii_strcasecmp.gint
#COMMENT: string to compare with @s2
#NAME: max_threads
#PARENT: GLib.ThreadPool.set_max_threads.gboolean
#COMMENT: a new maximal number of threads for @pool,
    or -1 for unlimited
#NAME: data
#PARENT: GLib.Array.insert_vals.gpointer
#COMMENT: a pointer to the elements to insert
#NAME: s2
#PARENT: GLib.ascii_strcasecmp.gint
#COMMENT: string to compare with @s1
#NAME: next
#PARENT: GLib.HashTableIter.next
#COMMENT: %FALSE if the end of the #GHashTable has been reached.
#NAME: add_minutes
#PARENT: GLib.DateTime.add_minutes
#COMMENT: the newly created #GDateTime which should be freed with
  g_date_time_unref().
#NAME: handler_id
#PARENT: GLib.log_remove_handler.none
#COMMENT: the id of the handler, which was returned
    in g_log_set_handler()
#NAME: val
#PARENT: GLib.atomic_pointer_or.gsize
#COMMENT: the value to 'or'
#NAME: chdir
#PARENT: GLib.SpawnError
#COMMENT: Changing to working directory failed.
#NAME: digest_len
#PARENT: GLib.Hmac.get_digest.none
#COMMENT: an inout parameter. The caller initializes it to the
  size of @buffer. After the call it contains the length of the digest
#NAME: get_seconds
#PARENT: GLib.DateTime
#COMMENT: Retrieves the number of seconds since the start of the last minute,
including the fractional part.
#NAME: func
#PARENT: GLib.OptionContext.set_translate_func.none
#COMMENT: the #GTranslateFunc, or %NULL
#NAME: space
#PARENT: GLib.UnicodeBreakType
#COMMENT: Space (SP)
#NAME: queue
#PARENT: GLib.AsyncQueue.try_pop.gpointer
#COMMENT: a #GAsyncQueue
#NAME: channel
#PARENT: GLib.IOChannel.get_buffered.gboolean
#COMMENT: a #GIOChannel
#NAME: data
#PARENT: GLib.Bytes.new_take.Bytes
#COMMENT: 
          the data to be used for the bytes
#NAME: child_index
#PARENT: GLib.Node
#COMMENT: Gets the position of the first child of a #GNode
which contains the given data.
#NAME: len
#PARENT: GLib.ByteArray.append.guint8
#COMMENT: the number of bytes to add
#NAME: remove_item
#PARENT: GLib.BookmarkFile
#COMMENT: Removes the bookmark for @uri from the bookmark file @bookmark.
#NAME: source
#PARENT: GLib.Source.remove_poll.none
#COMMENT: a #GSource
#NAME: list
#PARENT: GLib.SList.position.gint
#COMMENT: a #GSList
#NAME: get_string
#PARENT: GLib.Hmac.get_string
#COMMENT: the hexadecimal representation of the HMAC. The
  returned string is owned by the HMAC and should not be modified
  or freed.
#NAME: insert
#PARENT: GLib.String
#COMMENT: Inserts a copy of a string into a #GString,
expanding it if necessary.
#NAME: set_size
#PARENT: GLib.PtrArray
#COMMENT: Sets the size of the array. When making the array larger,
newly-added elements will be set to %NULL. When making it smaller,
if @array has a non-%NULL #GDestroyNotify function then it will be
called for the removed elements.
#NAME: key_file
#PARENT: GLib.KeyFile.get_double.gdouble
#COMMENT: a #GKeyFile
#NAME: depth
#PARENT: GLib.Node
#COMMENT: Gets the depth of a #GNode.

If @node is %NULL the depth is 0. The root node has a depth of 1.
For the children of the root node the depth is 2. And so on.
#NAME: valid_day
#PARENT: GLib.Date.valid_day
#COMMENT: %TRUE if the day is valid
#NAME: pool
#PARENT: GLib.ThreadPool.unprocessed.guint
#COMMENT: a #GThreadPool
#NAME: scan_octal
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if octal numbers are recognized (the
    default is %TRUE).
#NAME: is_begin
#PARENT: GLib.SequenceIter
#COMMENT: Returns whether @iter is the begin iterator
#NAME: log_func
#PARENT: GLib.log_set_default_handler.LogFunc
#COMMENT: the log handler function
#NAME: foreach
#PARENT: GLib.List
#COMMENT: Calls a function for each element of a #GList.
#NAME: copy
#PARENT: GLib.List.copy
#COMMENT: the start of the new list that holds the same data as @list
#NAME: buffer
#PARENT: GLib.IOChannel.read_line_string.IOStatus
#COMMENT: a #GString into which the line will be written.
         If @buffer already contains data, the old data will
         be overwritten.
#NAME: file_name
#PARENT: GLib.path_get_dirname.utf8
#COMMENT: the name of the file
#NAME: push_tail
#PARENT: GLib.Queue
#COMMENT: Adds a new element at the tail of the queue.
#NAME: priority
#PARENT: GLib.io_add_watch_full.guint
#COMMENT: the priority of the #GIOChannel source
#NAME: quark_to_string
#PARENT: GLib
#COMMENT: Gets the string associated with the given #GQuark.
#NAME: items_read
#PARENT: GLib.utf8_to_ucs4.gunichar
#COMMENT: location to store number of bytes read, or %NULL.
    If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will be
    returned in case @str contains a trailing partial
    character. If an error occurs then the index of the
    invalid input is stored here.
#NAME: kharoshthi
#PARENT: GLib.UnicodeScript
#COMMENT: Kharoshthi
#NAME: tmpl
#PARENT: GLib.Dir.make_tmp.filename
#COMMENT: Template for directory name,
    as in g_mkdtemp(), basename only, or %NULL for a default template
#NAME: down
#PARENT: GLib.String
#COMMENT: Converts a #GString to lowercase.
#NAME: type_annotate
#PARENT: GLib.Variant.print_string.String
#COMMENT: %TRUE if type information should be included in
                the output
#NAME: key_file
#PARENT: GLib.KeyFile.load_from_dirs.gboolean
#COMMENT: an empty #GKeyFile struct
#NAME: parse_strv
#PARENT: GLib.OptionContext
#COMMENT: Parses the command line arguments.

This function is similar to g_option_context_parse() except that it
respects the normal memory rules when dealing with a strv instead of
assuming that the passed-in array is the argv of the main function.

In particular, strings that are removed from the arguments list will
be freed using g_free().

On Windows, the strings are expected to be in UTF-8.  This is in
contrast to g_option_context_parse() which expects them to be in the
system codepage, which is how they are passed as @argv to main().
See g_win32_get_command_line() for a solution.

This function is useful if you are trying to use #GOptionContext with
#GApplication.
#NAME: len
#PARENT: GLib.utf8_collate_key_for_filename.utf8
#COMMENT: length of @str, in bytes, or -1 if @str is nul-terminated.
#NAME: user_data
#PARENT: GLib.Bytes.new_with_free_func.Bytes
#COMMENT: data to pass to @free_func
#NAME: error
#PARENT: GLib.Error.free.none
#COMMENT: a #GError
#NAME: func
#PARENT: GLib.Hook.find_func.Hook
#COMMENT: the function to find
#NAME: loop
#PARENT: GLib.MainLoop.unref.none
#COMMENT: a #GMainLoop
#NAME: fd
#PARENT: GLib.MappedFile.new_from_fd.MappedFile
#COMMENT: The file descriptor of the file to load
#NAME: valid_year
#PARENT: GLib.Date.valid_year
#COMMENT: %TRUE if the year is valid
#NAME: compare_func
#PARENT: GLib.PtrArray.sort_with_data.none
#COMMENT: comparison function
#NAME: loop
#PARENT: GLib.MainLoop.ref.MainLoop
#COMMENT: a #GMainLoop
#NAME: value
#PARENT: GLib.Variant.new_handle.Variant
#COMMENT: a #gint32 value
#NAME: context
#PARENT: GLib.OptionContext.set_ignore_unknown_options.none
#COMMENT: a #GOptionContext
#NAME: sibling
#PARENT: GLib.HookCompareFunc.gint
#COMMENT: the #GHook to compare with @new_hook
#NAME: comment_multi
#PARENT: GLib.TokenType
#COMMENT: multi line comment
#NAME: builder
#PARENT: GLib.VariantBuilder.unref.none
#COMMENT: a #GVariantBuilder allocated by g_variant_builder_new()
#NAME: source
#PARENT: GLib.Source.set_name.none
#COMMENT: a #GSource
#NAME: func
#PARENT: GLib.Queue.insert_sorted.none
#COMMENT: the #GCompareDataFunc used to compare elements in the queue. It is
    called with two elements of the @queue and @user_data. It should
    return 0 if the elements are equal, a negative value if the first
    element comes before the second, and a positive value if the second
    element comes before the first.
#NAME: byte_array_free_to_bytes
#PARENT: GLib
#COMMENT: Transfers the data from the #GByteArray into a new immutable #GBytes.

The #GByteArray is freed unless the reference count of @array is greater
than one, the #GByteArray wrapper is preserved but the size of @array
will be set to zero.

This is identical to using g_bytes_new_take() and g_byte_array_free()
together.
#NAME: type
#PARENT: GLib.VariantType.is_container.gboolean
#COMMENT: a #GVariantType
#NAME: writable
#PARENT: GLib.MappedFile.new.MappedFile
#COMMENT: whether the mapping should be writable
#NAME: priority
#PARENT: GLib.unix_fd_add_full.guint
#COMMENT: the priority of the source
#NAME: get_environ
#PARENT: GLib.get_environ
#COMMENT: the list of
    environment variables
#NAME: variant_parse
#PARENT: GLib.variant_parse
#COMMENT: a non-floating reference to a #GVariant, or %NULL
#NAME: is_container
#PARENT: GLib.Variant
#COMMENT: Checks if @value is a container.
#NAME: new
#PARENT: GLib.VariantType
#COMMENT: Creates a new #GVariantType corresponding to the type string given
by @type_string.  It is appropriate to call g_variant_type_free() on
the return value.

It is a programmer error to call this function with an invalid type
string.  Use g_variant_type_string_is_valid() if you are unsure.
#NAME: signature
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a D-Bus signature string.
#NAME: get_system_config_dirs
#PARENT: GLib.get_system_config_dirs
#COMMENT: a %NULL-terminated array of strings owned by GLib that must
              not be modified or freed.
#NAME: weeks
#PARENT: GLib.DateTime.add_weeks.DateTime
#COMMENT: the number of weeks
#NAME: bit_nth_msf
#PARENT: GLib.bit_nth_msf
#COMMENT: the index of the first bit set which is lower than @nth_bit
#NAME: new_with_data
#PARENT: GLib.Tree.new_with_data
#COMMENT: a newly allocated #GTree
#NAME: rec_mutex
#PARENT: GLib.RecMutex.clear.none
#COMMENT: an initialized #GRecMutex
#NAME: size
#PARENT: GLib.Bytes.new_static.Bytes
#COMMENT: the size of @data
#NAME: unknown_backtracking_control_verb
#PARENT: GLib.RegexError
#COMMENT: unknown backtracing
    control verb. Since: 2.34
#NAME: length
#PARENT: GLib.List
#COMMENT: Gets the number of elements in a #GList.

This function iterates over the whole list to count its elements.
Use a #GQueue instead of a GList if you regularly need the number
of items. To check whether the list is non-empty, it is faster to check
@list against %NULL.
#NAME: timeout_add_seconds
#PARENT: GLib
#COMMENT: Sets a function to be called at regular intervals with the default
priority, #G_PRIORITY_DEFAULT. The function is called repeatedly until
it returns %FALSE, at which point the timeout is automatically destroyed
and the function will not be called again.

This internally creates a main loop source using
g_timeout_source_new_seconds() and attaches it to the main loop context
using g_source_attach(). You can do these steps manually if you need
greater control. Also see g_timeout_add_seconds_full().

Note that the first call of the timer may not be precise for timeouts
of one second. If you need finer precision and have such a timeout,
you may want to use g_timeout_add() instead.

The interval given is in terms of monotonic time, not wall clock
time.  See g_get_monotonic_time().
#NAME: domain
#PARENT: GLib.Error.new_literal.Error
#COMMENT: error domain
#NAME: c
#PARENT: GLib.unichar_tolower.gunichar
#COMMENT: a Unicode character.
#NAME: atomic_int_compare_and_exchange
#PARENT: GLib.atomic_int_compare_and_exchange
#COMMENT: %TRUE if the exchange took place
#NAME: datalist_id_dup_data
#PARENT: GLib
#COMMENT: This is a variant of g_datalist_id_get_data() which
returns a 'duplicate' of the value. @dup_func defines the
meaning of 'duplicate' in this context, it could e.g.
take a reference on a ref-counted object.

If the @key_id is not set in the datalist then @dup_func
will be called with a %NULL argument.

Note that @dup_func is called while the datalist is locked, so it
is not allowed to read or modify the datalist.

This function can be useful to avoid races when multiple
threads are using the same datalist and the same key.
#NAME: locale
#PARENT: GLib.KeyFile.get_locale_string.utf8
#COMMENT: a locale identifier or %NULL
#NAME: set_integer_list
#PARENT: GLib.KeyFile
#COMMENT: Associates a list of integer values with @key under @group_name.
If @key cannot be found then it is created.
#NAME: unknown_posix_class_name
#PARENT: GLib.RegexError
#COMMENT: Unknown POSIX class name.
    Since 2.16
#NAME: user_data
#PARENT: GLib.List.sort_with_data.gpointer
#COMMENT: user data to pass to comparison function
#NAME: end
#PARENT: GLib.sequence_move_range.none
#COMMENT: a #GSequenceIter
#NAME: free
#PARENT: GLib.Checksum
#COMMENT: Frees the memory allocated for @checksum.
#NAME: char_2_token
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if characters are reported by setting
    `token = ch` or as %G_TOKEN_CHAR (the default is %TRUE).
#NAME: insert
#PARENT: GLib.String.insert
#COMMENT: @string
#NAME: tmpl
#PARENT: GLib.mkstemp_full.gint
#COMMENT: template filename
#NAME: empty
#PARENT: GLib.MarkupError
#COMMENT: document contained nothing, or only whitespace
#NAME: insert_after
#PARENT: GLib.Node
#COMMENT: Inserts a #GNode beneath the parent after the given sibling.
#NAME: datalist
#PARENT: GLib.datalist_unset_flags.none
#COMMENT: pointer to the location that holds a list
#NAME: tmpl
#PARENT: GLib.dir_make_tmp.filename
#COMMENT: Template for directory name,
    as in g_mkdtemp(), basename only, or %NULL for a default template
#NAME: main_context_ref_thread_default
#PARENT: GLib.main_context_ref_thread_default
#COMMENT: the thread-default #GMainContext. Unref
    with g_main_context_unref() when you are done with it.
#NAME: strerror
#PARENT: GLib
#COMMENT: Returns a string corresponding to the given error code, e.g.
"no such process". You should use this function in preference to
strerror(), because it returns a string in UTF-8 encoding, and since
not all platforms support the strerror() function.
#NAME: ref
#PARENT: GLib.Tree.ref
#COMMENT: the passed in #GTree
#NAME: unichar_toupper
#PARENT: GLib.unichar_toupper
#COMMENT: the result of converting @c to uppercase.
              If @c is not an lowercase or titlecase character,
              or has no upper case equivalent @c is returned unchanged.
#NAME: tuple
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a tuple.
#NAME: hash_table
#PARENT: GLib.HashTable.size.guint
#COMMENT: a #GHashTable
#NAME: data
#PARENT: GLib.byte_array_new_take.guint8
#COMMENT: byte data for the array
#NAME: func
#PARENT: GLib.PtrArray.foreach.none
#COMMENT: the function to call for each array element
#NAME: close
#PARENT: GLib.IOChannel
#COMMENT: Close an IO channel. Any pending data to be written will be
flushed, ignoring errors. The channel will not be freed until the
last reference is dropped using g_io_channel_unref().
#NAME: Once
#PARENT: GLib
#COMMENT: A #GOnce struct controls a one-time initialization function. Any
one-time initialization function must have its own unique #GOnce
struct.
#NAME: list
#PARENT: GLib.SList.length.guint
#COMMENT: a #GSList
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_app_info.gboolean
#COMMENT: a #GBookmarkFile
#NAME: new
#PARENT: GLib.Sequence.new
#COMMENT: a new #GSequence
#NAME: valid_julian
#PARENT: GLib.Date
#COMMENT: Returns %TRUE if the Julian day is valid. Anything greater than zero
is basically a valid Julian, though there is a 32-bit limit.
#NAME: meroitic_cursive
#PARENT: GLib.UnicodeScript
#COMMENT: Meroitic Cursive. Since: 2.32
#NAME: format
#PARENT: GLib.strdup_printf.utf8
#COMMENT: a standard printf() format string, but notice
    [string precision pitfalls][string-precision]
#NAME: buffer
#PARENT: GLib.Hmac.get_digest.none
#COMMENT: output buffer
#NAME: fd
#PARENT: GLib.Source.add_unix_fd.gpointer
#COMMENT: the fd to monitor
#NAME: set_funcs
#PARENT: GLib.Source
#COMMENT: Sets the source functions (can be used to override
default implementations) of an unattached source.
#NAME: seq
#PARENT: GLib.Sequence.lookup_iter.SequenceIter
#COMMENT: a #GSequence
#NAME: condition
#PARENT: GLib.io_add_watch_full.guint
#COMMENT: the condition to watch for
#NAME: index_
#PARENT: GLib.PtrArray.insert.none
#COMMENT: the index to place the new element at, or -1 to append
#NAME: attribute_values
#PARENT: GLib.markup_collect_attributes.gboolean
#COMMENT: the attribute values
#NAME: hash_table_add
#PARENT: GLib
#COMMENT: This is a convenience function for using a #GHashTable as a set.  It
is equivalent to calling g_hash_table_replace() with @key as both the
key and the value.

When a hash table only ever contains keys that have themselves as the
corresponding value it is able to be stored more efficiently.  See
the discussion in the section description.
#NAME: datalist_clear
#PARENT: GLib
#COMMENT: Frees all the data elements of the datalist.
The data elements' destroy functions are called
if they have been set.
#NAME: non_leaves
#PARENT: GLib.TraverseFlags
#COMMENT: only non-leaf nodes should be visited. This
                        name has been introduced in 2.6, for older
                        version use %G_TRAVERSE_NON_LEAFS.
#NAME: data
#PARENT: GLib.List.remove_all.gpointer
#COMMENT: data to remove
#NAME: first
#PARENT: GLib.VariantType.first
#COMMENT: the first item type of @type, or %NULL

Since 2.24
#NAME: nodev
#PARENT: GLib.FileError
#COMMENT: The underlying file system of the specified file
    does not support memory mapping.
#NAME: node
#PARENT: GLib.Node.insert_before.Node
#COMMENT: the #GNode to insert
#NAME: value
#PARENT: GLib.Variant.get_data_as_bytes.Bytes
#COMMENT: a #GVariant
#NAME: clear_
#PARENT: GLib.Array.sized_new.gpointer
#COMMENT: %TRUE if all bits in the array should be cleared to 0 on
    allocation
#NAME: length
#PARENT: GLib.ByteArray.remove_range.guint8
#COMMENT: the number of bytes to remove
#NAME: find_source_by_id
#PARENT: GLib.MainContext.find_source_by_id
#COMMENT: the #GSource
#NAME: 
#PARENT: GLib.test_build_filename.utf8...
#COMMENT: %NULL-terminated additional path segments
#NAME: data
#PARENT: GLib.idle_remove_by_data.gboolean
#COMMENT: the data for the idle source's callback.
#NAME: err
#PARENT: GLib.prefix_error.none
#COMMENT: a return location for a #GError, or %NULL
#NAME: next
#PARENT: GLib.VariantIter.next
#COMMENT: %TRUE if a value was unpacked, or %FALSE if there as no value
#NAME: batak
#PARENT: GLib.UnicodeScript
#COMMENT: Batak. Since 2.28
#NAME: datetime
#PARENT: GLib.DateTime.add_months.DateTime
#COMMENT: a #GDateTime
#NAME: new_tuple
#PARENT: GLib.VariantType.new_tuple
#COMMENT: a new tuple #GVariantType

Since 2.24
#NAME: main_context_ref_thread_default
#PARENT: GLib
#COMMENT: Gets the thread-default #GMainContext for this thread, as with
g_main_context_get_thread_default(), but also adds a reference to
it with g_main_context_ref(). In addition, unlike
g_main_context_get_thread_default(), if the thread-default context
is the global default context, this will return that #GMainContext
(with a ref added to it) rather than returning %NULL.
#NAME: unref
#PARENT: GLib.TimeZone
#COMMENT: Decreases the reference count on @tz.
#NAME: get_boolean
#PARENT: GLib.KeyFile.get_boolean
#COMMENT: the value associated with the key as a boolean,
   or %FALSE if the key was not found or could not be parsed.
#NAME: final_punctuation
#PARENT: GLib.UnicodeType
#COMMENT: General category "Punctuation, Final quote" (Pf)
#NAME: numeric
#PARENT: GLib.UnicodeBreakType
#COMMENT: Numeric (NU)
#NAME: free_full
#PARENT: GLib.SList
#COMMENT: Convenience method, which frees all the memory used by a #GSList, and
calls the specified destroy function on every element's data.
#NAME: add_days
#PARENT: GLib.Date
#COMMENT: Increments a date some number of days.
To move forward by weeks, add weeks*7 days.
The date must be valid.
#NAME: order
#PARENT: GLib.Node.traverse.none
#COMMENT: the order in which nodes are visited - %G_IN_ORDER,
    %G_PRE_ORDER, %G_POST_ORDER, or %G_LEVEL_ORDER.
#NAME: source
#PARENT: GLib.Source.modify_unix_fd.none
#COMMENT: a #GSource
#NAME: data
#PARENT: GLib.idle_add.guint
#COMMENT: data to pass to @function.
#NAME: memdup
#PARENT: GLib.memdup
#COMMENT: a pointer to the newly-allocated copy of the memory, or %NULL if @mem
 is %NULL.
#NAME: hash
#PARENT: GLib.DateTime.hash
#COMMENT: a #guint containing the hash
#NAME: allocated_len
#PARENT: GLib.String
#COMMENT: the number of bytes that can be stored in the
  string before it needs to be reallocated. May be larger than @len.
#NAME: convert_with_iconv
#PARENT: GLib
#COMMENT: Converts a string from one character set to another.

Note that you should use g_iconv() for streaming conversions.
Despite the fact that @byes_read can return information about partial
characters, the g_convert_... functions are not generally suitable
for streaming. If the underlying converter maintains internal state,
then this won't be preserved across successive calls to g_convert(),
g_convert_with_iconv() or g_convert_with_fallback(). (An example of
this is the GNU C converter for CP1255 which does not emit a base
character until it knows that the next character is not a mark that
could combine with the base character.)
#NAME: load_from_file
#PARENT: GLib.BookmarkFile.load_from_file
#COMMENT: %TRUE if a desktop bookmark file could be loaded
#NAME: slice_alloc
#PARENT: GLib
#COMMENT: Allocates a block of memory from the slice allocator.
The block adress handed out can be expected to be aligned
to at least 1 * sizeof (void*),
though in general slices are 2 * sizeof (void*) bytes aligned,
if a malloc() fallback implementation is used instead,
the alignment may be reduced in a libc dependent fashion.
Note that the underlying slice allocation mechanism can
be changed with the [`G_SLICE=always-malloc`][G_SLICE]
environment variable.
#NAME: file_set_contents
#PARENT: GLib
#COMMENT: Writes all of @contents to a file named @filename, with good error checking.
If a file called @filename already exists it will be overwritten.

This write is atomic in the sense that it is first written to a temporary
file which is then renamed to the final name. Notes:

- On UNIX, if @filename already exists hard links to @filename will break.
  Also since the file is recreated, existing permissions, access control
  lists, metadata etc. may be lost. If @filename is a symbolic link,
  the link itself will be replaced, not the linked file.

- On Windows renaming a file will not remove an existing file with the
  new name, so on Windows there is a race condition between the existing
  file being removed and the temporary file being renamed.

- On Windows there is no way to remove a file that is open to some
  process, or mapped into memory. Thus, this function will fail if
  @filename already exists and is open.

If the call was successful, it returns %TRUE. If the call was not successful,
it returns %FALSE and sets @error. The error domain is #G_FILE_ERROR.
Possible error codes are those in the #GFileError enumeration.

Note that the name for the temporary file is constructed by appending up
to 7 characters to @filename.
#NAME: KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list of
strings identifying the environments that should display the
desktop entry.
#NAME: hook_list
#PARENT: GLib.HookList.invoke_check.none
#COMMENT: a #GHookList
#NAME: insert_sorted
#PARENT: GLib.Sequence
#COMMENT: Inserts @data into @sequence using @func to determine the new
position. The sequence must already be sorted according to @cmp_func;
otherwise the new position of @data is undefined.

@cmp_func is called with two items of the @seq and @user_data.
It should return 0 if the items are equal, a negative value
if the first item comes before the second, and a positive value
if the second  item comes before the first.
#NAME: buhid
#PARENT: GLib.UnicodeScript
#COMMENT: Buhid
#NAME: hash_table
#PARENT: GLib.HashTable.lookup_extended.gboolean
#COMMENT: a #GHashTable
#NAME: uri
#PARENT: GLib.BookmarkFile.get_is_private.gboolean
#COMMENT: a valid URI
#NAME: get_monday_week_of_year
#PARENT: GLib.Date.get_monday_week_of_year
#COMMENT: week of the year
#NAME: limit
#PARENT: GLib.VariantType.string_scan.gboolean
#COMMENT: the end of @string, or %NULL
#NAME: utf8_get_char_validated
#PARENT: GLib.utf8_get_char_validated
#COMMENT: the resulting character. If @p points to a partial
    sequence at the end of a string that could begin a valid
    character (or if @max_len is zero), returns (gunichar)-2;
    otherwise, if @p does not point to a valid UTF-8 encoded
    Unicode character, returns (gunichar)-1.
#NAME: get_host_name
#PARENT: GLib
#COMMENT: Return a name for the machine.

The returned name is not necessarily a fully-qualified domain name,
or even present in DNS or some other name service at all. It need
not even be unique on your local network or site, but usually it
is. Callers should not rely on the return value having any specific
properties like uniqueness for security purposes. Even if the name
of the machine is changed while an application is running, the
return value from this function does not change. The returned
string is owned by GLib and should not be modified or freed. If no
name can be determined, a default fixed string "localhost" is
returned.
#NAME: length
#PARENT: GLib.file_set_contents.gboolean
#COMMENT: length of @contents, or -1 if @contents is a nul-terminated string
#NAME: new_from_timeval_utc
#PARENT: GLib.DateTime.new_from_timeval_utc
#COMMENT: a new #GDateTime, or %NULL
#NAME: address
#PARENT: GLib.pointer_bit_trylock.gboolean
#COMMENT: a pointer to a #gpointer-sized value
#NAME: prepare
#PARENT: GLib.MainContext.prepare
#COMMENT: %TRUE if some source is ready to be dispatched
              prior to polling.
#NAME: new_maybe
#PARENT: GLib.Variant.new_maybe
#COMMENT: a floating reference to a new #GVariant maybe instance
#NAME: vsnprintf
#PARENT: GLib.vsnprintf
#COMMENT: the number of bytes which would be produced if the buffer
 was large enough.
#NAME: key
#PARENT: GLib.HashTable.contains.gboolean
#COMMENT: a key to check
#NAME: remove_index
#PARENT: GLib.ByteArray.remove_index
#COMMENT: the #GByteArray
#NAME: pspec
#PARENT: GLib.pattern_match_string.gboolean
#COMMENT: a #GPatternSpec
#NAME: block_size
#PARENT: GLib.slice_copy.gpointer
#COMMENT: the number of bytes to allocate
#NAME: nptr
#PARENT: GLib.ascii_strtod.gdouble
#COMMENT: the string to convert to a numeric value.
#NAME: log_domain
#PARENT: GLib.log_default_handler.none
#COMMENT: the log domain of the message
#NAME: new
#PARENT: GLib.Array.new
#COMMENT: the new #GArray
#NAME: private_use
#PARENT: GLib.UnicodeType
#COMMENT: General category "Other, Private Use" (Co)
#NAME: c
#PARENT: GLib.unichar_xdigit_value.gint
#COMMENT: a Unicode character
#NAME: key
#PARENT: GLib.compute_hmac_for_string.utf8
#COMMENT: the key to use in the HMAC
#NAME: datalist
#PARENT: GLib.datalist_id_remove_no_notify.gpointer
#COMMENT: a datalist.
#NAME: foreach
#PARENT: GLib.Tree
#COMMENT: Calls the given function for each of the key/value pairs in the #GTree.
The function is passed the key and value of each pair, and the given
@data parameter. The tree is traversed in sorted order.

The tree may not be modified while iterating over it (you can't
add/remove items). To remove all items matching a predicate, you need
to add each item to a list in your #GTraverseFunc as you walk over
the tree, then walk the list and remove each item.
#NAME: end
#PARENT: GLib.Sequence.foreach_range.none
#COMMENT: a #GSequenceIter
#NAME: string
#PARENT: GLib.TokenType
#COMMENT: a string
#NAME: from_locale
#PARENT: GLib.str_to_ascii.utf8
#COMMENT: the source locale, if known
#NAME: outbytes_left
#PARENT: GLib.IConv.IConv.gsize
#COMMENT: inout parameter, bytes available to fill in @outbuf
#NAME: once_init_enter
#PARENT: GLib.once_init_enter
#COMMENT: %TRUE if the initialization section should be entered,
    %FALSE and blocks otherwise
#NAME: malloc_n
#PARENT: GLib
#COMMENT: This function is similar to g_malloc(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.
#NAME: test_run
#PARENT: GLib
#COMMENT: Runs all tests under the toplevel suite which can be retrieved
with g_test_get_root(). Similar to g_test_run_suite(), the test
cases to be run are filtered according to test path arguments
(`-p testpath`) as parsed by g_test_init(). g_test_run_suite()
or g_test_run() may only be called once in a program.

In general, the tests and sub-suites within each suite are run in
the order in which they are defined. However, note that prior to
GLib 2.36, there was a bug in the `g_test_add_*`
functions which caused them to create multiple suites with the same
name, meaning that if you created tests "/foo/simple",
"/bar/simple", and "/foo/using-bar" in that order, they would get
run in that order (since g_test_run() would run the first "/foo"
suite, then the "/bar" suite, then the second "/foo" suite). As of
2.36, this bug is fixed, and adding the tests in that order would
result in a running order of "/foo/simple", "/foo/using-bar",
"/bar/simple". If this new ordering is sub-optimal (because it puts
more-complicated tests before simpler ones, making it harder to
figure out exactly what has failed), you can fix it by changing the
test paths to group tests by suite in a way that will result in the
desired running order. Eg, "/simple/foo", "/simple/bar",
"/complex/foo-using-bar".

However, you should never make the actual result of a test depend
on the order that tests are run in. If you need to ensure that some
particular code runs before or after a given test case, use
g_test_add(), which lets you specify setup and teardown functions.

If all tests are skipped, this function will return 0 if
producing TAP output, or 77 (treated as "skip test" by Automake) otherwise.
#NAME: MarkupCollectType
#PARENT: GLib
#COMMENT: A mixed enumerated type and flags field. You must specify one type
(string, strdup, boolean, tristate).  Additionally, you may  optionally
bitwise OR the type with the flag %G_MARKUP_COLLECT_OPTIONAL.

It is likely that this enum will be extended in the future to
support other types.
#NAME: help_enabled
#PARENT: GLib.OptionContext.set_help_enabled.none
#COMMENT: %TRUE to enable `--help`, %FALSE to disable it
#NAME: mode
#PARENT: GLib.mkstemp_full.gint
#COMMENT: permissions to create the temporary file with
#NAME: pattern_match_simple
#PARENT: GLib.pattern_match_simple
#COMMENT: %TRUE if @string matches @pspec
#NAME: uri
#PARENT: GLib.filename_from_uri.filename
#COMMENT: a uri describing a filename (escaped, encoded in ASCII).
#NAME: int64_hash
#PARENT: GLib.int64_hash
#COMMENT: a hash value corresponding to the key.
#NAME: query_unix_fd
#PARENT: GLib.Source
#COMMENT: Queries the events reported for the fd corresponding to @tag on
@source during the last poll.

The return value of this function is only defined when the function
is called from the check or dispatch functions for @source.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

As the name suggests, this function is not available on Windows.
#NAME: SpawnChildSetupFunc
#PARENT: GLib
#COMMENT: Specifies the type of the setup function passed to g_spawn_async(),
g_spawn_sync() and g_spawn_async_with_pipes(), which can, in very
limited ways, be used to affect the child's execution.

On POSIX platforms, the function is called in the child after GLib
has performed all the setup it plans to perform, but before calling
exec(). Actions taken in this function will only affect the child,
not the parent.

On Windows, the function is called in the parent. Its usefulness on
Windows is thus questionable. In many cases executing the child setup
function in the parent can have ill effects, and you should be very
careful when porting software to Windows that uses child setup
functions.

However, even on POSIX, you are extremely limited in what you can
safely do from a #GSpawnChildSetupFunc, because any mutexes that were
held by other threads in the parent process at the time of the fork()
will still be locked in the child process, and they will never be
unlocked (since the threads that held them don't exist in the child).
POSIX allows only async-signal-safe functions (see signal(7)) to be
called in the child between fork() and exec(), which drastically limits
the usefulness of child setup functions.

In particular, it is not safe to call any function which may
call malloc(), which includes POSIX functions such as setenv().
If you need to set up the child environment differently from
the parent, you should use g_get_environ(), g_environ_setenv(),
and g_environ_unsetenv(), and then pass the complete environment
list to the `g_spawn...` function.
#NAME: strcanon
#PARENT: GLib.strcanon
#COMMENT: @string
#NAME: str
#PARENT: GLib.utf8_to_ucs4_fast.gunichar
#COMMENT: a UTF-8 encoded string
#NAME: equal
#PARENT: GLib.String.equal
#COMMENT: %TRUE if the strings are the same length and contain the
    same bytes
#NAME: august
#PARENT: GLib.DateMonth
#COMMENT: August
#NAME: hash_table_insert
#PARENT: GLib
#COMMENT: Inserts a new key and value into a #GHashTable.

If the key already exists in the #GHashTable its current
value is replaced with the new value. If you supplied a
@value_destroy_func when creating the #GHashTable, the old
value is freed using that function. If you supplied a
@key_destroy_func when creating the #GHashTable, the passed
key is freed using that function.
#NAME: length
#PARENT: GLib.HashTable.get_keys_as_array.gpointer
#COMMENT: the length of the returned array
#NAME: equal
#PARENT: GLib.PatternSpec.equal
#COMMENT: Whether the compiled patterns are equal
#NAME: length
#PARENT: GLib.BookmarkFile.get_uris.utf8
#COMMENT: return location for the number of returned URIs, or %NULL
#NAME: set_buffer_size
#PARENT: GLib.IOChannel
#COMMENT: Sets the buffer size.
#NAME: unix_new
#PARENT: GLib.IOChannel
#COMMENT: Creates a new #GIOChannel given a file descriptor. On UNIX systems
this works for plain files, pipes, and sockets.

The returned #GIOChannel has a reference count of 1.

The default encoding for #GIOChannel is UTF-8. If your application
is reading output from a command using via pipe, you may need to set
the encoding to the encoding of the current locale (see
g_get_charset()) with the g_io_channel_set_encoding() function.

If you want to read raw binary data without interpretation, then
call the g_io_channel_set_encoding() function with %NULL for the
encoding argument.

This function is available in GLib on Windows, too, but you should
avoid using it on Windows. The domain of file descriptors and
sockets overlap. There is no way for GLib to know which one you mean
in case the argument you pass to this function happens to be both a
valid file descriptor and socket. If that happens a warning is
issued, and GLib assumes that it is the file descriptor you mean.
#NAME: new
#PARENT: GLib.TimeZone
#COMMENT: Creates a #GTimeZone corresponding to @identifier.

@identifier can either be an RFC3339/ISO 8601 time offset or
something that would pass as a valid value for the `TZ` environment
variable (including %NULL).

In Windows, @identifier can also be the unlocalized name of a time
zone for standard time, for example "Pacific Standard Time".

Valid RFC3339 time offsets are `"Z"` (for UTC) or
`"±hh:mm"`.  ISO 8601 additionally specifies
`"±hhmm"` and `"±hh"`.  Offsets are
time values to be added to Coordinated Universal Time (UTC) to get
the local time.

In UNIX, the `TZ` environment variable typically corresponds
to the name of a file in the zoneinfo database, or string in
"std offset [dst [offset],start[/time],end[/time]]" (POSIX) format.
There  are  no spaces in the specification. The name of standard
and daylight savings time zone must be three or more alphabetic
characters. Offsets are time values to be added to local time to
get Coordinated Universal Time (UTC) and should be
`"[±]hh[[:]mm[:ss]]"`.  Dates are either
`"Jn"` (Julian day with n between 1 and 365, leap
years not counted), `"n"` (zero-based Julian day
with n between 0 and 365) or `"Mm.w.d"` (day d
(0 <= d <= 6) of week w (1 <= w <= 5) of month m (1 <= m <= 12), day
0 is a Sunday).  Times are in local wall clock time, the default is
02:00:00.

In Windows, the "tzn[+|–]hh[:mm[:ss]][dzn]" format is used, but also
accepts POSIX format.  The Windows format uses US rules for all time
zones; daylight savings time is 60 minutes behind the standard time
with date and time of change taken from Pacific Standard Time.
Offsets are time values to be added to the local time to get
Coordinated Universal Time (UTC).

g_time_zone_new_local() calls this function with the value of the
`TZ` environment variable. This function itself is independent of
the value of `TZ`, but if @identifier is %NULL then `/etc/localtime`
will be consulted to discover the correct time zone on UNIX and the
registry will be consulted or GetTimeZoneInformation() will be used
to get the local time zone on Windows.

If intervals are not available, only time zone rules from `TZ`
environment variable or other means, then they will be computed
from year 1900 to 2037.  If the maximum year for the rules is
available and it is greater than 2037, then it will followed
instead.

See
[RFC3339 §5.6](http://tools.ietf.org/html/rfc3339#section-5.6)
for a precise definition of valid RFC3339 time offsets
(the `time-offset` expansion) and ISO 8601 for the
full list of valid time offsets.  See
[The GNU C Library manual](http://www.gnu.org/s/libc/manual/html_node/TZ-Variable.html)
for an explanation of the possible
values of the `TZ` environment variable. See
[Microsoft Time Zone Index Values](http://msdn.microsoft.com/en-us/library/ms912391%28v=winembedded.11%29.aspx)
for the list of time zones on Windows.

You should release the return value by calling g_time_zone_unref()
when you are done with it.
#NAME: remove_range
#PARENT: GLib.Sequence
#COMMENT: Removes all items in the (@begin, @end) range.

If the sequence has a data destroy function associated with it, this
function is called on the data for the removed items.
#NAME: nametoolong
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `ENAMETOOLONG`
#NAME: coptic
#PARENT: GLib.UnicodeScript
#COMMENT: Coptic
#NAME: key
#PARENT: GLib.KeyFile.set_string_list.none
#COMMENT: a key
#NAME: required_major
#PARENT: GLib.check_version.utf8
#COMMENT: the required major version
#NAME: expected_token
#PARENT: GLib.Scanner.unexp_token.none
#COMMENT: the expected token
#NAME: data
#PARENT: GLib.AsyncQueue.push_sorted_unlocked.none
#COMMENT: the @data to push into the @queue
#NAME: in
#PARENT: GLib.base64_decode_step.gsize
#COMMENT: binary input data
#NAME: tree
#PARENT: GLib.Tree.nnodes.gint
#COMMENT: a #GTree
#NAME: is_floating
#PARENT: GLib.Variant.is_floating
#COMMENT: whether @value is floating
#NAME: append_vals
#PARENT: GLib.Array
#COMMENT: Adds @len elements onto the end of the array.
#NAME: unix_signal_source_new
#PARENT: GLib
#COMMENT: Create a #GSource that will be dispatched upon delivery of the UNIX
signal @signum.  In GLib versions before 2.36, only `SIGHUP`, `SIGINT`,
`SIGTERM` can be monitored.  In GLib 2.36, `SIGUSR1` and `SIGUSR2`
were added.

Note that unlike the UNIX default, all sources which have created a
watch will be dispatched, regardless of which underlying thread
invoked g_unix_signal_source_new().

For example, an effective use of this function is to handle `SIGTERM`
cleanly; flushing any outstanding files, and then calling
g_main_loop_quit ().  It is not safe to do any of this a regular
UNIX signal handler; your handler may be invoked while malloc() or
another library function is running, causing reentrancy if you
attempt to use it from the handler.  None of the GLib/GObject API
is safe against this kind of reentrancy.

The interaction of this source when combined with native UNIX
functions like sigprocmask() is not defined.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed.
#NAME: utf8_normalize
#PARENT: GLib.utf8_normalize
#COMMENT: a newly allocated string, that is the
  normalized form of @str, or %NULL if @str is not
  valid UTF-8.
#NAME: free
#PARENT: GLib
#COMMENT: Frees the memory pointed to by @mem.

If @mem is %NULL it simply returns, so there is no need to check @mem
against %NULL before calling this function.
#NAME: binary
#PARENT: GLib.TokenType
#COMMENT: a binary integer
#NAME: mutex
#PARENT: GLib.Cond.wait.none
#COMMENT: a #GMutex that is currently locked
#NAME: length
#PARENT: GLib.Bytes.new_from_bytes.Bytes
#COMMENT: length of subsection
#NAME: checksum_type
#PARENT: GLib.compute_checksum_for_string.utf8
#COMMENT: a #GChecksumType
#NAME: inscriptional_pahlavi
#PARENT: GLib.UnicodeScript
#COMMENT: Inscriptional Pahlavi. Since 2.26
#NAME: list
#PARENT: GLib.KeyFile.set_integer_list.none
#COMMENT: an array of integer values
#NAME: ucs4_to_utf16
#PARENT: GLib.ucs4_to_utf16
#COMMENT: a pointer to a newly allocated UTF-16 string.
    This value must be freed with g_free(). If an error occurs,
    %NULL will be returned and @error set.
#NAME: save_to_file
#PARENT: GLib.KeyFile.save_to_file
#COMMENT: %TRUE if successful, else %FALSE with @error set
#NAME: item_free_func
#PARENT: GLib.AsyncQueue.new_full.AsyncQueue
#COMMENT: function to free queue elements
#NAME: string
#PARENT: GLib.regex_escape_nul.utf8
#COMMENT: the string to escape
#NAME: new_file
#PARENT: GLib.IOChannel.new_file
#COMMENT: A #GIOChannel on success, %NULL on failure.
#NAME: fetch
#PARENT: GLib.MatchInfo
#COMMENT: Retrieves the text matching the @match_num'th capturing
parentheses. 0 is the full text of the match, 1 is the first paren
set, 2 the second, and so on.

If @match_num is a valid sub pattern but it didn't match anything
(e.g. sub pattern 1, matching "b" against "(a)?b") then an empty
string is returned.

If the match was obtained using the DFA algorithm, that is using
g_regex_match_all() or g_regex_match_all_full(), the retrieved
string is not that of a set of parentheses but that of a matched
substring. Substrings are matched in reverse order of length, so
0 is the longest match.

The string is fetched from the string passed to the match function,
so you cannot call this function after freeing the string.
#NAME: progress
#PARENT: GLib.OnceStatus
#COMMENT: the function call is currently in progress.
#NAME: str1
#PARENT: GLib.strcmp0.gint
#COMMENT: a C string or %NULL
#NAME: string1
#PARENT: GLib.strconcat.utf8
#COMMENT: the first string to add, which must not be %NULL
#NAME: time_val_from_iso8601
#PARENT: GLib.time_val_from_iso8601
#COMMENT: %TRUE if the conversion was successful.
#NAME: shell_unquote
#PARENT: GLib.shell_unquote
#COMMENT: an unquoted string
#NAME: str2
#PARENT: GLib.strcmp0.gint
#COMMENT: another C string or %NULL
#NAME: ascii_dtostr
#PARENT: GLib
#COMMENT: Converts a #gdouble to a string, using the '.' as
decimal point.

This function generates enough precision that converting
the string back using g_ascii_strtod() gives the same machine-number
(on machines with IEEE compatible 64bit doubles). It is
guaranteed that the size of the resulting string will never
be larger than @G_ASCII_DTOSTR_BUF_SIZE bytes, including the terminating
nul character, which is always added.
#NAME: new
#PARENT: GLib.Variant
#COMMENT: Creates a new #GVariant instance.

Think of this function as an analogue to g_strdup_printf().

The type of the created instance and the arguments that are expected
by this function are determined by @format_string. See the section on
[GVariant format strings][gvariant-format-strings]. Please note that
the syntax of the format string is very likely to be extended in the
future.

The first character of the format string must not be '*' '?' '@' or
'r'; in essence, a new #GVariant must always be constructed by this
function (and not merely passed through it unmodified).

Note that the arguments must be of the correct width for their types
specified in @format_string. This can be achieved by casting them. See
the [GVariant varargs documentation][gvariant-varargs].

|[<!-- language="C" -->
MyFlags some_flags = FLAG_ONE | FLAG_TWO;
const gchar *some_strings[] = { "a", "b", "c", NULL };
GVariant *new_variant;

new_variant = g_variant_new ("(t^as)",
                             /<!-- -->* This cast is required. *<!-- -->/
                             (guint64) some_flags,
                             some_strings);
]|
#NAME: khojki
#PARENT: GLib.UnicodeScript
#COMMENT: Kjohki. Since: 2.42
#NAME: bytes
#PARENT: GLib.Bytes.hash.guint
#COMMENT: a pointer to a #GBytes key
#NAME: address
#PARENT: GLib.bit_unlock.none
#COMMENT: a pointer to an integer
#NAME: libbad
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `ELIBBAD`
#NAME: mem
#PARENT: GLib.realloc_n.gpointer
#COMMENT: the memory to reallocate
#NAME: queue
#PARENT: GLib.Queue.insert_after.none
#COMMENT: a #GQueue
#NAME: v_float
#PARENT: GLib.TokenValue
#COMMENT: floating point value
#NAME: key_file
#PARENT: GLib.KeyFile.get_double_list.gdouble
#COMMENT: a #GKeyFile
#NAME: nptr
#PARENT: GLib.ascii_strtoll.gint64
#COMMENT: the string to convert to a numeric value.
#NAME: c
#PARENT: GLib.unichar_isupper.gboolean
#COMMENT: a Unicode character
#NAME: rand_
#PARENT: GLib.Rand.int.guint32
#COMMENT: a #GRand
#NAME: max_tokens
#PARENT: GLib.Regex.split_full.utf8
#COMMENT: the maximum number of tokens to split @string into.
  If this is less than 1, the string is split completely
#NAME: hash_table
#PARENT: GLib.HashTable.find.gpointer
#COMMENT: a #GHashTable
#NAME: notify
#PARENT: GLib.timeout_add_full.guint
#COMMENT: function to call when the timeout is removed, or %NULL
#NAME: peek
#PARENT: GLib.TrashStack
#COMMENT: Returns the element at the top of a #GTrashStack
which may be %NULL.
#NAME: load_from_data
#PARENT: GLib.KeyFile.load_from_data
#COMMENT: %TRUE if a key file could be loaded, %FALSE otherwise
#NAME: datetime
#PARENT: GLib.DateTime.add_weeks.DateTime
#COMMENT: a #GDateTime
#NAME: nomem
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `ENOMEM`
#NAME: hostname
#PARENT: GLib.hostname_is_non_ascii.gboolean
#COMMENT: a hostname
#NAME: two
#PARENT: GLib.Variant.compare.gint
#COMMENT: a #GVariant instance of the same type
#NAME: exceptions
#PARENT: GLib.strescape.utf8
#COMMENT: a string of characters not to escape in @source
#NAME: end
#PARENT: GLib.SeekType
#COMMENT: the end of the file.
#NAME: scanner
#PARENT: GLib.Scanner.input_text.none
#COMMENT: a #GScanner
#NAME: logv
#PARENT: GLib
#COMMENT: Logs an error or debugging message.

If the log level has been set as fatal, the abort()
function is called to terminate the program.

If g_log_default_handler() is used as the log handler function, a new-line
character will automatically be appended to @..., and need not be entered
manually.
#NAME: iec_units
#PARENT: GLib.FormatSizeFlags
#COMMENT: use IEC (base 1024) units with "KiB"-style
    suffixes. IEC units should only be used for reporting things with
    a strong "power of 2" basis, like RAM sizes or RAID stripe sizes.
    Network and storage sizes should be reported in the normal SI units.
#NAME: copy_deep
#PARENT: GLib.List
#COMMENT: Makes a full (deep) copy of a #GList.

In contrast with g_list_copy(), this function uses @func to make
a copy of each list element, in addition to copying the list
container itself.

@func, as a #GCopyFunc, takes two arguments, the data to be copied
and a @user_data pointer. It's safe to pass %NULL as user_data,
if the copy function takes only one argument.

For instance, if @list holds a list of GObjects, you can do:
|[<!-- language="C" -->
another_list = g_list_copy_deep (list, (GCopyFunc) g_object_ref, NULL);
]|

And, to entirely free the new list, you could do:
|[<!-- language="C" -->
g_list_free_full (another_list, g_object_unref);
]|
#NAME: set
#PARENT: GLib.Sequence
#COMMENT: Changes the data for the item pointed to by @iter to be @data. If
the sequence has a data destroy function associated with it, that
function is called on the existing data that @iter pointed to.
#NAME: data
#PARENT: GLib.OptionContext.set_translate_func.none
#COMMENT: user data to pass to @func, or %NULL
#NAME: snprintf
#PARENT: GLib
#COMMENT: A safer form of the standard sprintf() function. The output is guaranteed
to not exceed @n characters (including the terminating nul character), so
it is easy to ensure that a buffer overflow cannot occur.

See also g_strdup_printf().

In versions of GLib prior to 1.2.3, this function may return -1 if the
output was truncated, and the truncated string may not be nul-terminated.
In versions prior to 1.3.12, this function returns the length of the output
string.

The return value of g_snprintf() conforms to the snprintf()
function as standardized in ISO C99. Note that this is different from
traditional snprintf(), which returns the length of the output string.

The format string may contain positional parameters, as specified in
the Single Unix Specification.
#NAME: KEY_FILE_DESKTOP_KEY_TRY_EXEC
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the file name of a binary on disk used to determine if the
program is actually installed. It is only valid for desktop entries
with the `Application` type.
#NAME: syloti_nagri
#PARENT: GLib.UnicodeScript
#COMMENT: Syloti Nagri
#NAME: data_teardown
#PARENT: GLib.test_create_case.TestCase
#COMMENT: the function to teardown the fixture data
#NAME: oldval
#PARENT: GLib.atomic_int_compare_and_exchange.gboolean
#COMMENT: the value to compare with
#NAME: Array
#PARENT: GLib
#COMMENT: Contains the public fields of a GArray.
#NAME: find
#PARENT: GLib.SList.find
#COMMENT: the found #GSList element,
    or %NULL if it is not found
#NAME: max
#PARENT: GLib.utf8_strlen.glong
#COMMENT: the maximum number of bytes to examine. If @max
      is less than 0, then the string is assumed to be
      nul-terminated. If @max is 0, @p will not be examined and
      may be %NULL. If @max is greater than 0, up to @max
      bytes are examined
#NAME: remove_by_funcs_user_data
#PARENT: GLib.Source
#COMMENT: Removes a source from the default main loop context given the
source functions and user data. If multiple sources exist with the
same source functions and user data, only one will be destroyed.
#NAME: quark_try_string
#PARENT: GLib
#COMMENT: Gets the #GQuark associated with the given string, or 0 if string is
%NULL or it has no associated #GQuark.

If you want the GQuark to be created if it doesn't already exist,
use g_quark_from_string() or g_quark_from_static_string().
#NAME: hash_table
#PARENT: GLib.hash_table_lookup_extended.gboolean
#COMMENT: a #GHashTable
#NAME: unref_to_array
#PARENT: GLib.Bytes.unref_to_array
#COMMENT: a new mutable #GByteArray containing the same byte data
#NAME: new
#PARENT: GLib.Rand
#COMMENT: Creates a new random number generator initialized with a seed taken
either from `/dev/urandom` (if existing) or from the current time
(as a fallback).

On Windows, the seed is taken from rand_s().
#NAME: args
#PARENT: GLib.build_filenamev.utf8
#COMMENT: %NULL-terminated array of strings containing the path elements.
#NAME: vfprintf
#PARENT: GLib.vfprintf
#COMMENT: the number of bytes printed.
#NAME: value
#PARENT: GLib.Variant.new_uint16.Variant
#COMMENT: a #guint16 value
#NAME: format
#PARENT: GLib.printerr.none
#COMMENT: the message format. See the printf() documentation
#NAME: pattern
#PARENT: GLib.PatternSpec.new.PatternSpec
#COMMENT: a zero-terminated UTF-8 encoded string
#NAME: buginese
#PARENT: GLib.UnicodeScript
#COMMENT: Buginese
#NAME: lookup
#PARENT: GLib.Sequence
#COMMENT: Returns an iterator pointing to the position of the first item found
equal to @data according to @cmp_func and @cmp_data. If more than one
item is equal, it is not guaranteed that it is the first which is
returned. In that case, you can use g_sequence_iter_next() and
g_sequence_iter_prev() to get others.

@cmp_func is called with two items of the @seq and @user_data.
It should return 0 if the items are equal, a negative value if
the first item comes before the second, and a positive value if
the second item comes before the first.

This function will fail if the data contained in the sequence is
unsorted.  Use g_sequence_insert_sorted() or
g_sequence_insert_sorted_iter() to add data to your sequence or, if
you want to add a large amount of data, call g_sequence_sort() after
doing unsorted insertions.
#NAME: str
#PARENT: GLib.convert.utf8
#COMMENT: the string to convert
#NAME: command_line
#PARENT: GLib.shell_parse_argv.gboolean
#COMMENT: command line to parse
#NAME: list
#PARENT: GLib.List.remove_link.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: replace
#PARENT: GLib.Private
#COMMENT: Sets the thread local variable @key to have the value @value in the
current thread.

This function differs from g_private_set() in the following way: if
the previous value was non-%NULL then the #GDestroyNotify handler for
@key is run on it.
#NAME: random_double_range
#PARENT: GLib
#COMMENT: Returns a random #gdouble equally distributed over the range
[@begin..@end).
#NAME: p
#PARENT: GLib.utf8_strlen.glong
#COMMENT: pointer to the start of a UTF-8 encoded string
#NAME: weekday
#PARENT: GLib.date_valid_weekday.gboolean
#COMMENT: weekday
#NAME: spawn_sync
#PARENT: GLib
#COMMENT: Executes a child synchronously (waits for the child to exit before returning).
All output from the child is stored in @standard_output and @standard_error,
if those parameters are non-%NULL. Note that you must set the
%G_SPAWN_STDOUT_TO_DEV_NULL and %G_SPAWN_STDERR_TO_DEV_NULL flags when
passing %NULL for @standard_output and @standard_error.

If @exit_status is non-%NULL, the platform-specific exit status of
the child is stored there; see the documentation of
g_spawn_check_exit_status() for how to use and interpret this.
Note that it is invalid to pass %G_SPAWN_DO_NOT_REAP_CHILD in
@flags.

If an error occurs, no data is returned in @standard_output,
@standard_error, or @exit_status.

This function calls g_spawn_async_with_pipes() internally; see that
function for full details on the other parameters and details on
how these functions work on Windows.
#NAME: try_new
#PARENT: GLib.Thread.try_new
#COMMENT: the new #GThread, or %NULL if an error occurred
#NAME: err_no
#PARENT: GLib.file_error_from_errno.FileError
#COMMENT: an "errno" value
#NAME: eof
#PARENT: GLib.TokenType
#COMMENT: the end of the file
#NAME: get_end_iter
#PARENT: GLib.Sequence
#COMMENT: Returns the end iterator for @seg
#NAME: scanner
#PARENT: GLib.Scanner.sync_file_offset.none
#COMMENT: a #GScanner
#NAME: dict
#PARENT: GLib.VariantDict.unref.none
#COMMENT: a heap-allocated #GVariantDict
#NAME: prepend
#PARENT: GLib.List.prepend
#COMMENT: a pointer to the newly prepended element, which is the new
    start of the #GList
#NAME: p
#PARENT: GLib.utf8_get_char_validated.gunichar
#COMMENT: a pointer to Unicode character encoded as UTF-8
#NAME: strup
#PARENT: GLib.strup
#COMMENT: the string
#NAME: thread_pool_set_max_idle_time
#PARENT: GLib
#COMMENT: This function will set the maximum @interval that a thread
waiting in the pool for new tasks can be idle for before
being stopped. This function is similar to calling
g_thread_pool_stop_unused_threads() on a regular timeout,
except this is done on a per thread basis.

By setting @interval to 0, idle threads will not be stopped.

The default value is 15000 (15 seconds).
#NAME: data
#PARENT: GLib.ThreadFunc.gpointer
#COMMENT: data passed to the thread
#NAME: is_tuple
#PARENT: GLib.VariantType.is_tuple
#COMMENT: %TRUE if @type is a tuple type

Since 2.24
#NAME: get
#PARENT: GLib.Private
#COMMENT: Returns the current value of the thread local variable @key.

If the value has not yet been set in this thread, %NULL is returned.
Values are never copied between threads (when a new thread is
created, for example).
#NAME: unref
#PARENT: GLib.MatchInfo
#COMMENT: Decreases reference count of @match_info by 1. When reference count drops
to zero, it frees all the memory associated with the match_info structure.
#NAME: next
#PARENT: GLib.MatchInfo
#COMMENT: Scans for the next match using the same parameters of the previous
call to g_regex_match_full() or g_regex_match() that returned
@match_info.

The match is done on the string passed to the match function, so you
cannot free it before calling this function.
#NAME: data
#PARENT: GLib.Queue.insert_sorted.none
#COMMENT: the data to insert
#NAME: failed
#PARENT: GLib.ConvertError
#COMMENT: Conversion failed for some reason.
#NAME: index
#PARENT: GLib.SList.index
#COMMENT: the index of the element containing the data,
    or -1 if the data is not found
#NAME: regex
#PARENT: GLib.Regex.split.utf8
#COMMENT: a #GRegex structure
#NAME: attribute_names
#PARENT: GLib.markup_collect_attributes.gboolean
#COMMENT: the attribute names
#NAME: free
#PARENT: GLib.Queue
#COMMENT: Frees the memory allocated for the #GQueue. Only call this function
if @queue was created with g_queue_new(). If queue elements contain
dynamically-allocated memory, they should be freed first.

If queue elements contain dynamically-allocated memory, you should
either use g_queue_free_full() or free them manually first.
#NAME: set_priority
#PARENT: GLib.Source
#COMMENT: Sets the priority of a source. While the main loop is being run, a
source will be dispatched if it is ready to be dispatched and no
sources at a higher (numerically smaller) priority are ready to be
dispatched.

A child source always has the same priority as its parent.  It is not
permitted to change the priority of a source once it has been added
as a child of another source.
#NAME: list
#PARENT: GLib.List.insert.gpointer
#COMMENT: a pointer to a #GList, this must point to the top of the list
#NAME: get_regex
#PARENT: GLib.MatchInfo
#COMMENT: Returns #GRegex object used in @match_info. It belongs to Glib
and must not be freed. Use g_regex_ref() if you need to keep it
after you free @match_info object.
#NAME: append_uri_escaped
#PARENT: GLib.String.append_uri_escaped
#COMMENT: @string
#NAME: VERSION_MIN_REQUIRED
#PARENT: GLib
#COMMENT: A macro that should be defined by the user prior to including
the glib.h header.
The definition should be one of the predefined GLib version
macros: %GLIB_VERSION_2_26, %GLIB_VERSION_2_28,...

This macro defines the earliest version of GLib that the package is
required to be able to compile against.

If the compiler is configured to warn about the use of deprecated
functions, then using functions that were deprecated in version
%GLIB_VERSION_MIN_REQUIRED or earlier will cause warnings (but
using functions deprecated in later releases will not).
#NAME: ugaritic
#PARENT: GLib.UnicodeScript
#COMMENT: Ugaritic
#NAME: get_element_size
#PARENT: GLib.Array
#COMMENT: Gets the size of the elements in @array.
#NAME: new_uint32
#PARENT: GLib.Variant.new_uint32
#COMMENT: a floating reference to a new uint32 #GVariant instance
#NAME: children
#PARENT: GLib.Node
#COMMENT: points to the first child of the #GNode.  The other
           children are accessed by using the @next pointer of each
           child.
#NAME: ref
#PARENT: GLib.Bytes.ref
#COMMENT: the #GBytes
#NAME: get_monday_weeks_in_year
#PARENT: GLib.Date.get_monday_weeks_in_year
#COMMENT: number of Mondays in the year
#NAME: key
#PARENT: GLib.Private.set.none
#COMMENT: a #GPrivate
#NAME: main_depth
#PARENT: GLib
#COMMENT: Returns the depth of the stack of calls to
g_main_context_dispatch() on any #GMainContext in the current thread.
 That is, when called from the toplevel, it gives 0. When
called from within a callback from g_main_context_iteration()
(or g_main_loop_run(), etc.) it returns 1. When called from within
a callback to a recursive call to g_main_context_iteration(),
it returns 2. And so forth.

This function is useful in a situation like the following:
Imagine an extremely simple "garbage collected" system.

|[<!-- language="C" -->
static GList *free_list;

gpointer
allocate_memory (gsize size)
{
  gpointer result = g_malloc (size);
  free_list = g_list_prepend (free_list, result);
  return result;
}

void
free_allocated_memory (void)
{
  GList *l;
  for (l = free_list; l; l = l->next);
    g_free (l->data);
  g_list_free (free_list);
  free_list = NULL;
 }

[...]

while (TRUE);
 {
   g_main_context_iteration (NULL, TRUE);
   free_allocated_memory();
  }
]|

This works from an application, however, if you want to do the same
thing from a library, it gets more difficult, since you no longer
control the main loop. You might think you can simply use an idle
function to make the call to free_allocated_memory(), but that
doesn't work, since the idle function could be called from a
recursive callback. This can be fixed by using g_main_depth()

|[<!-- language="C" -->
gpointer
allocate_memory (gsize size)
{
  FreeListBlock *block = g_new (FreeListBlock, 1);
  block->mem = g_malloc (size);
  block->depth = g_main_depth ();
  free_list = g_list_prepend (free_list, block);
  return block->mem;
}

void
free_allocated_memory (void)
{
  GList *l;
  
  int depth = g_main_depth ();
  for (l = free_list; l; );
    {
      GList *next = l->next;
      FreeListBlock *block = l->data;
      if (block->depth > depth)
        {
          g_free (block->mem);
          g_free (block);
          free_list = g_list_delete_link (free_list, l);
        }
              
      l = next;
    }
  }
]|

There is a temptation to use g_main_depth() to solve
problems with reentrancy. For instance, while waiting for data
to be received from the network in response to a menu item,
the menu item might be selected again. It might seem that
one could make the menu item's callback return immediately
and do nothing if g_main_depth() returns a value greater than 1.
However, this should be avoided since the user then sees selecting
the menu item do nothing. Furthermore, you'll find yourself adding
these checks all over your code, since there are doubtless many,
many things that the user could do. Instead, you can use the
following techniques:

1. Use gtk_widget_set_sensitive() or modal dialogs to prevent
   the user from interacting with elements while the main
   loop is recursing.

2. Avoid main loop recursion in situations where you can't handle
   arbitrary  callbacks. Instead, structure your code so that you
   simply return to the main loop and then get called again when
   there is more work to do.
#NAME: str
#PARENT: GLib.str_is_ascii.gboolean
#COMMENT: a string
#NAME: key
#PARENT: GLib.KeyFile.set_double.none
#COMMENT: a key
#NAME: uri
#PARENT: GLib.BookmarkFile.set_title.none
#COMMENT: a valid URI or %NULL
#NAME: match_all_full
#PARENT: GLib.Regex.match_all_full
#COMMENT: %TRUE is the string matched, %FALSE otherwise
#NAME: source
#PARENT: GLib.Source.get_time.gint64
#COMMENT: a #GSource
#NAME: fd
#PARENT: GLib.close.gboolean
#COMMENT: A file descriptor
#NAME: full_path
#PARENT: GLib.KeyFile.load_from_data_dirs.gboolean
#COMMENT: return location for a string containing the full path
  of the file, or %NULL
#NAME: bookmark
#PARENT: GLib.BookmarkFile.remove_item.gboolean
#COMMENT: a #GBookmarkFile
#NAME: uri_list_extract_uris
#PARENT: GLib
#COMMENT: Splits an URI list conforming to the text/uri-list
mime type defined in RFC 2483 into individual URIs,
discarding any comments. The URIs are not validated.
#NAME: malloc_n
#PARENT: GLib.malloc_n
#COMMENT: a pointer to the allocated memory
#NAME: input_fd
#PARENT: GLib.Scanner.input_file.none
#COMMENT: a file descriptor
#NAME: uri
#PARENT: GLib.BookmarkFile.set_description.none
#COMMENT: a valid URI or %NULL
#NAME: hiragana
#PARENT: GLib.UnicodeScript
#COMMENT: Hiragana
#NAME: n_elements
#PARENT: GLib.Variant.new_fixed_array.Variant
#COMMENT: the number of elements
#NAME: new
#PARENT: GLib.Timer.new
#COMMENT: a new #GTimer.
#NAME: destroy
#PARENT: GLib.Source
#COMMENT: Removes a source from its #GMainContext, if any, and mark it as
destroyed.  The source cannot be subsequently added to another
context. It is safe to call this on sources which have already been
removed from their context.
#NAME: seq
#PARENT: GLib.Sequence.lookup.SequenceIter
#COMMENT: a #GSequence
#NAME: test_init
#PARENT: GLib
#COMMENT: Initialize the GLib testing framework, e.g. by seeding the
test random number generator, the name for g_get_prgname()
and parsing test related command line args.

So far, the following arguments are understood:

- `-l`: List test cases available in a test executable.
- `--seed=SEED`: Provide a random seed to reproduce test
  runs using random numbers.
- `--verbose`: Run tests verbosely.
- `-q`, `--quiet`: Run tests quietly.
- `-p PATH`: Execute all tests matching the given path.
  This can also be used to force a test to run that would otherwise
  be skipped (ie, a test whose name contains "/subprocess").
- `-m {perf|slow|thorough|quick|undefined|no-undefined}`: Execute tests according to these test modes:

  `perf`: Performance tests, may take long and report results.

  `slow`, `thorough`: Slow and thorough tests, may take quite long and maximize coverage.

  `quick`: Quick tests, should run really quickly and give good coverage.

  `undefined`: Tests for undefined behaviour, may provoke programming errors
  under g_test_trap_subprocess() or g_test_expect_messages() to check
  that appropriate assertions or warnings are given

  `no-undefined`: Avoid tests for undefined behaviour

- `--debug-log`: Debug test logging output.
#NAME: get_root
#PARENT: GLib.Node
#COMMENT: Gets the root of a tree.
#NAME: datalist_foreach
#PARENT: GLib
#COMMENT: Calls the given function for each data element of the datalist. The
function is called with each data element's #GQuark id and data,
together with the given @user_data parameter. Note that this
function is NOT thread-safe. So unless @datalist can be protected
from any modifications during invocation of this function, it should
not be called.
#NAME: partial_soft
#PARENT: GLib.RegexMatchFlags
#COMMENT: An alias for #G_REGEX_MATCH_PARTIAL. Since: 2.34
#NAME: get_day_of_year
#PARENT: GLib.DateTime.get_day_of_year
#COMMENT: the day of the year
#NAME: sort_with_data
#PARENT: GLib.SList
#COMMENT: Like g_slist_sort(), but the sort function accepts a user data argument.
#NAME: nfkc
#PARENT: GLib.NormalizeMode
#COMMENT: another name for %G_NORMALIZE_ALL_COMPOSE
#NAME: nfkd
#PARENT: GLib.NormalizeMode
#COMMENT: another name for %G_NORMALIZE_ALL
#NAME: queue
#PARENT: GLib.Queue.pop_head_link.gpointer
#COMMENT: a #GQueue
#NAME: begin
#PARENT: GLib.Rand.int_range.gint32
#COMMENT: lower closed bound of the interval
#NAME: hash_table_lookup_extended
#PARENT: GLib.hash_table_lookup_extended
#COMMENT: %TRUE if the key was found in the #GHashTable
#NAME: value
#PARENT: GLib.setenv.gboolean
#COMMENT: the value for to set the variable to.
#NAME: check_format_string
#PARENT: GLib.Variant
#COMMENT: Checks if calling g_variant_get() with @format_string on @value would
be valid from a type-compatibility standpoint.  @format_string is
assumed to be a valid format string (from a syntactic standpoint).

If @copy_only is %TRUE then this function additionally checks that it
would be safe to call g_variant_unref() on @value immediately after
the call to g_variant_get() without invalidating the result.  This is
only possible if deep copies are made (ie: there are no pointers to
the data inside of the soon-to-be-freed #GVariant instance).  If this
check fails then a g_critical() is printed and %FALSE is returned.

This function is meant to be used by functions that wish to provide
varargs accessors to #GVariant values of uncertain values (eg:
g_variant_lookup() or g_menu_model_get_item_attribute()).
#NAME: prepend_vals
#PARENT: GLib.Array
#COMMENT: Adds @len elements onto the start of the array.

This operation is slower than g_array_append_vals() since the
existing elements in the array have to be moved to make space for
the new elements.
#NAME: vsprintf
#PARENT: GLib
#COMMENT: An implementation of the standard vsprintf() function which supports
positional parameters, as specified in the Single Unix Specification.
#NAME: unichar_islower
#PARENT: GLib
#COMMENT: Determines whether a character is a lowercase letter.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().
#NAME: rand_
#PARENT: GLib.Rand.copy.Rand
#COMMENT: a #GRand
#NAME: test_get_filename
#PARENT: GLib
#COMMENT: Gets the pathname to a data file that is required for a test.

This is the same as g_test_build_filename() with two differences.
The first difference is that must only use this function from within
a testcase function.  The second difference is that you need not free
the return value -- it will be automatically freed when the testcase
finishes running.

It is safe to use this function from a thread inside of a testcase
but you must ensure that all such uses occur before the main testcase
function returns (ie: it is best to ensure that all threads have been
joined).
#NAME: child_source
#PARENT: GLib.Source.add_child_source.none
#COMMENT: a second #GSource that @source should "poll"
#NAME: set_poll_func
#PARENT: GLib.MainContext
#COMMENT: Sets the function to use to handle polling of file descriptors. It
will be used instead of the poll() system call
(or GLib's replacement function, which is used where
poll() isn't available).

This function could possibly be used to integrate the GLib event
loop with an external event loop.
#NAME: next
#PARENT: GLib.SList
#COMMENT: contains the link to the next element in the list.
#NAME: array
#PARENT: GLib.byte_array_unref.none
#COMMENT: A #GByteArray
#NAME: child_type
#PARENT: GLib.Variant.new_array.Variant
#COMMENT: the element type of the new array
#NAME: function
#PARENT: GLib.timeout_add.guint
#COMMENT: function to call
#NAME: bookmark
#PARENT: GLib.BookmarkFile.set_is_private.none
#COMMENT: a #GBookmarkFile
#NAME: test_skip
#PARENT: GLib
#COMMENT: Indicates that a test was skipped.

Calling this function will not stop the test from running, you
need to return from the test function yourself. So you can
produce additional diagnostic messages or even continue running
the test.

If not called from inside a test, this function does nothing.
#NAME: month
#PARENT: GLib.DateDMY
#COMMENT: a month
#NAME: SEARCHPATH_SEPARATOR
#PARENT: GLib
#COMMENT: The search path separator character.
This is ':' on UNIX machines and ';' under Windows.
#NAME: n_bytes
#PARENT: GLib.malloc.gpointer
#COMMENT: the number of bytes to allocate
#NAME: testpath
#PARENT: GLib.test_add_data_func_full.none
#COMMENT: /-separated test case path name for the test.
#NAME: key_file
#PARENT: GLib.KeyFile.get_locale_string_list.utf8
#COMMENT: a #GKeyFile
#NAME: sibling
#PARENT: GLib.Node.insert_before.Node
#COMMENT: the sibling #GNode to place @node before.
    If sibling is %NULL, the node is inserted as the last child of @parent.
#NAME: get_name
#PARENT: GLib.Source
#COMMENT: Gets a name for the source, used in debugging and profiling.  The
name may be #NULL if it has never been set with g_source_set_name().
#NAME: SList
#PARENT: GLib
#COMMENT: The #GSList struct is used for each element in the singly-linked
list.
#NAME: definite_type_expected
#PARENT: GLib.VariantParseError
#COMMENT: an indefinite #GVariantType was given where a definite type was expected
#NAME: int_equal
#PARENT: GLib
#COMMENT: Compares the two #gint values being pointed to and returns
%TRUE if they are equal.
It can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using non-%NULL pointers to integers as keys in a
#GHashTable.

Note that this function acts on pointers to #gint, not on #gint
directly: if your hash table's keys are of the form
`GINT_TO_POINTER (n)`, use g_direct_equal() instead.
#NAME: priority
#PARENT: GLib.child_watch_add_full.guint
#COMMENT: the priority of the idle source. Typically this will be in the
           range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
#NAME: datetime
#PARENT: GLib.DateTime.get_week_of_year.gint
#COMMENT: a #GDateTime
#NAME: utf8_strup
#PARENT: GLib
#COMMENT: Converts all Unicode characters in the string that have a case
to uppercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string increasing. (For instance, the
German ess-zet will be changed to SS.)
#NAME: timer
#PARENT: GLib.Timer.stop.none
#COMMENT: a #GTimer.
#NAME: data
#PARENT: GLib.PtrArray.remove_fast.gboolean
#COMMENT: the pointer to remove
#NAME: test_maximized_result
#PARENT: GLib
#COMMENT: Report the result of a performance or measurement test.
The test should generally strive to maximize the reported
quantities (larger values are better than smaller ones),
this and @maximized_quantity can determine sorting
order for test result reports.
#NAME: 
#PARENT: GLib.prefix_error.none...
#COMMENT: arguments to @format
#NAME: format_string
#PARENT: GLib.Variant.new.Variant
#COMMENT: a #GVariant format string
#NAME: String
#PARENT: GLib
#COMMENT: The GString struct contains the public fields of a GString.
#NAME: data
#PARENT: GLib.Variant.store.none
#COMMENT: the location to store the serialised data at
#NAME: dataset_foreach
#PARENT: GLib
#COMMENT: Calls the given function for each data element which is associated
with the given location. Note that this function is NOT thread-safe.
So unless @datalist can be protected from any modifications during
invocation of this function, it should not be called.
#NAME: unref
#PARENT: GLib.IOChannel
#COMMENT: Decrements the reference count of a #GIOChannel.
#NAME: broadcast
#PARENT: GLib.Cond
#COMMENT: If threads are waiting for @cond, all of them are unblocked.
If no threads are waiting for @cond, this function has no effect.
It is good practice to lock the same mutex as the waiting threads
while calling this function, though not required.
#NAME: insert_before
#PARENT: GLib.Node
#COMMENT: Inserts a #GNode beneath the parent before the given sibling.
#NAME: filename
#PARENT: GLib.rmdir.gint
#COMMENT: a pathname in the GLib file name encoding (UTF-8 on Windows)
#NAME: begin
#PARENT: GLib.Sequence.move_range.none
#COMMENT: a #GSequenceIter
#NAME: format
#PARENT: GLib.strdup_vprintf.utf8
#COMMENT: a standard printf() format string, but notice
    [string precision pitfalls][string-precision]
#NAME: new_int16
#PARENT: GLib.Variant
#COMMENT: Creates a new int16 #GVariant instance.
#NAME: get_timezone_abbreviation
#PARENT: GLib.DateTime.get_timezone_abbreviation
#COMMENT: the time zone abbreviation. The returned
         string is owned by the #GDateTime and it should not be
         modified or freed
#NAME: chdir
#PARENT: GLib.chdir
#COMMENT: 0 on success, -1 if an error occurred.
#NAME: all
#PARENT: GLib.TraverseFlags
#COMMENT: all nodes should be visited.
#NAME: standard_error
#PARENT: GLib.spawn_async_with_pipes.gboolean
#COMMENT: return location for file descriptor to read child's stderr, or %NULL
#NAME: unichar_isdigit
#PARENT: GLib
#COMMENT: Determines whether a character is numeric (i.e. a digit).  This
covers ASCII 0-9 and also digits in other languages/scripts.  Given
some UTF-8 text, obtain a character value with g_utf8_get_char().
#NAME: data
#PARENT: GLib.Hmac.update.none
#COMMENT: buffer used to compute the checksum
#NAME: bsr_anycrlf
#PARENT: GLib.RegexCompileFlags
#COMMENT: Usually any newline character or character sequence
    is recognised. If this option is set, then "\R" only recognizes the newline
   characters '\r', '\n' and '\r\n'. Since: 2.34
#NAME: Rand
#PARENT: GLib
#COMMENT: The GRand struct is an opaque data structure. It should only be
accessed through the g_rand_* functions.
#NAME: get_month
#PARENT: GLib.DateTime.get_month
#COMMENT: the month represented by @datetime
#NAME: key_compare_func
#PARENT: GLib.Tree.new_with_data.Tree
#COMMENT: qsort()-style comparison function
#NAME: charset
#PARENT: GLib.get_charset.gboolean
#COMMENT: return location for character set
  name, or %NULL.
#NAME: out
#PARENT: GLib.base64_encode_step.gsize
#COMMENT: pointer to destination buffer
#NAME: string_len
#PARENT: GLib.Regex.replace.utf8
#COMMENT: the length of @string, or -1 if @string is nul-terminated
#NAME: value_destroy_func
#PARENT: GLib.Tree.new_full.Tree
#COMMENT: a function to free the memory allocated for the
  value used when removing the entry from the #GTree or %NULL if you
  don't want to supply such a function
#NAME: none
#PARENT: GLib.KeyFileFlags
#COMMENT: No flags, default behaviour
#NAME: is_definite
#PARENT: GLib.VariantType
#COMMENT: Determines if the given @type is definite (ie: not indefinite).

A type is definite if its type string does not contain any indefinite
type characters ('*', '?', or 'r').

A #GVariant instance may not have an indefinite type, so calling
this function on the result of g_variant_get_type() will always
result in %TRUE being returned.  Calling this function on an
indefinite type like %G_VARIANT_TYPE_ARRAY, however, will result in
%FALSE being returned.
#NAME: needle
#PARENT: GLib.strstr_len.utf8
#COMMENT: the string to search for
#NAME: str_array
#PARENT: GLib.strv_length.guint
#COMMENT: a %NULL-terminated array of strings
#NAME: ch
#PARENT: GLib.unicode_canonical_decomposition.gunichar
#COMMENT: a Unicode character.
#NAME: new
#PARENT: GLib.Tree
#COMMENT: Creates a new #GTree.
#NAME: nth_child
#PARENT: GLib.Node
#COMMENT: Gets a child of a #GNode, using the given index.
The first child is at index 0. If the index is
too big, %NULL is returned.
#NAME: ref
#PARENT: GLib.Variant.ref
#COMMENT: the same @value
#NAME: dataset_id_get_data
#PARENT: GLib.dataset_id_get_data
#COMMENT: the data element corresponding to the #GQuark, or %NULL if
         it is not found.
#NAME: type_annotate
#PARENT: GLib.Variant.print.utf8
#COMMENT: %TRUE if type information should be included in
                the output
#NAME: user_data
#PARENT: GLib.TestFixtureFunc.none
#COMMENT: the data provided when registering the test
#NAME: hmac
#PARENT: GLib.Hmac.update.none
#COMMENT: a #GHmac
#NAME: regex
#PARENT: GLib.Regex.get_match_flags.RegexMatchFlags
#COMMENT: a #GRegex
#NAME: seq
#PARENT: GLib.Sequence.insert_sorted_iter.SequenceIter
#COMMENT: a #GSequence
#NAME: key_file
#PARENT: GLib.KeyFile.get_value.utf8
#COMMENT: a #GKeyFile
#NAME: str
#PARENT: GLib.String
#COMMENT: points to the character data. It may move as text is added.
  The @str field is null-terminated and so
  can be used as an ordinary C string.
#NAME: unix_signal_add_full
#PARENT: GLib.unix_signal_add_full
#COMMENT: An ID (greater than 0) for the event source
#NAME: push_nth_link
#PARENT: GLib.Queue
#COMMENT: Inserts @link into @queue at the given position.
#NAME: rw_lock
#PARENT: GLib.RWLock.writer_trylock.gboolean
#COMMENT: a #GRWLock
#NAME: user_data
#PARENT: GLib.Queue.insert_sorted.none
#COMMENT: user data passed to @func
#NAME: key
#PARENT: GLib.hash_table_steal.gboolean
#COMMENT: the key to remove
#NAME: bytes_read
#PARENT: GLib.IOChannel.read.IOError
#COMMENT: returns the number of bytes actually read
#NAME: split_simple
#PARENT: GLib.Regex
#COMMENT: Breaks the string on the pattern, and returns an array of
the tokens. If the pattern contains capturing parentheses,
then the text for each of the substrings will also be returned.
If the pattern does not match anywhere in the string, then the
whole string is returned as the first token.

This function is equivalent to g_regex_split() but it does
not require to compile the pattern with g_regex_new(), avoiding
some lines of code when you need just to do a split without
extracting substrings, capture counts, and so on.

If this function is to be called on the same @pattern more than
once, it's more efficient to compile the pattern once with
g_regex_new() and then use g_regex_split().

As a special case, the result of splitting the empty string ""
is an empty vector, not a vector containing a single string.
The reason for this special case is that being able to represent
a empty vector is typically more useful than consistent handling
of empty elements. If you do need to represent empty elements,
you'll need to check for the empty string before calling this
function.

A pattern that can match empty strings splits @string into
separate characters wherever it matches the empty string between
characters. For example splitting "ab c" using as a separator
"\s*", you will get "a", "b" and "c".
#NAME: load_from_file
#PARENT: GLib.KeyFile.load_from_file
#COMMENT: %TRUE if a key file could be loaded, %FALSE otherwise
#NAME: isdir
#PARENT: GLib.IOChannelError
#COMMENT: File is a directory.
#NAME: unicode_script_to_iso15924
#PARENT: GLib
#COMMENT: Looks up the ISO 15924 code for @script.  ISO 15924 assigns four-letter
codes to scripts.  For example, the code for Arabic is 'Arab'.  The
four letter codes are encoded as a @guint32 by this function in a
big-endian fashion.  That is, the code returned for Arabic is
0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).

See
[Codes for the representation of names of scripts](http://unicode.org/iso15924/codelists.html)
for details.
#NAME: data
#PARENT: GLib.DestroyNotify.none
#COMMENT: the data element.
#NAME: unref_to_data
#PARENT: GLib.Bytes.unref_to_data
#COMMENT: a pointer to the same byte data, which should
         be freed with g_free()
#NAME: compare_ids
#PARENT: GLib.Hook
#COMMENT: Compares the ids of two #GHook elements, returning a negative value
if the second id is greater than the first.
#NAME: search_path
#PARENT: GLib.SpawnFlags
#COMMENT: `argv[0]` need not be an absolute path, it will be
    looked for in the user's `PATH`.
#NAME: last_sibling
#PARENT: GLib.Node
#COMMENT: Gets the last sibling of a #GNode.
This could possibly be the node itself.
#NAME: datetime
#PARENT: GLib.DateTime.add.DateTime
#COMMENT: a #GDateTime
#NAME: new
#PARENT: GLib.StringChunk
#COMMENT: Creates a new #GStringChunk.
#NAME: pattern_match
#PARENT: GLib
#COMMENT: Matches a string against a compiled pattern. Passing the correct
length of the string given is mandatory. The reversed string can be
omitted by passing %NULL, this is more efficient if the reversed
version of the string to be matched is not at hand, as
g_pattern_match() will only construct it if the compiled pattern
requires reverse matches.

Note that, if the user code will (possibly) match a string against a
multitude of patterns containing wildcards, chances are high that
some patterns will require a reversed string. In this case, it's
more efficient to provide the reversed string to avoid multiple
constructions thereof in the various calls to g_pattern_match().

Note also that the reverse of a UTF-8 encoded string can in general
not be obtained by g_strreverse(). This works only if the string
does not contain any multibyte characters. GLib offers the
g_utf8_strreverse() function to reverse UTF-8 encoded strings.
#NAME: main_context_get_thread_default
#PARENT: GLib.main_context_get_thread_default
#COMMENT: the thread-default #GMainContext, or
%NULL if the thread-default context is the global default context.
#NAME: string
#PARENT: GLib.Regex.split.utf8
#COMMENT: the string to split with the pattern
#NAME: func
#PARENT: GLib.Sequence.foreach_range.none
#COMMENT: a #GFunc
#NAME: is_seekable
#PARENT: GLib.IOFlags
#COMMENT: indicates that the io channel is seekable,
    i.e. that g_io_channel_seek_position() can be used on it.
    This flag cannot be changed.
#NAME: set_groups
#PARENT: GLib.BookmarkFile
#COMMENT: Sets a list of group names for the item with URI @uri.  Each previously
set group name list is removed.

If @uri cannot be found then an item for it is created.
#NAME: int_equal
#PARENT: GLib.int_equal
#COMMENT: %TRUE if the two keys match.
#NAME: strrstr_len
#PARENT: GLib.strrstr_len
#COMMENT: a pointer to the found occurrence, or
   %NULL if not found.
#NAME: key_equal_func
#PARENT: GLib.HashTable.new_full.gpointer
#COMMENT: a function to check two keys for equality
#NAME: query
#PARENT: GLib.MainContext
#COMMENT: Determines information necessary to poll this main loop.

You must have successfully acquired the context with
g_main_context_acquire() before you may call this function.
#NAME: pop
#PARENT: GLib.MarkupParseContext.pop
#COMMENT: the user data passed to g_markup_parse_context_push()
#NAME: next
#PARENT: GLib.List
#COMMENT: contains the link to the next element in the list
#NAME: free_full
#PARENT: GLib.List
#COMMENT: Convenience method, which frees all the memory used by a #GList,
and calls @free_func on every element's data.
#NAME: MarkupError
#PARENT: GLib
#COMMENT: Error codes returned by markup parsing.
#NAME: dist
#PARENT: GLib.TestFileType
#COMMENT: a file that was included in the distribution tarball
#NAME: result_len
#PARENT: GLib.unicode_canonical_decomposition.gunichar
#COMMENT: location to store the length of the return value.
#NAME: text
#PARENT: GLib.MarkupParseContext.parse.gboolean
#COMMENT: chunk of text to parse
#NAME: new_int32
#PARENT: GLib.Variant
#COMMENT: Creates a new int32 #GVariant instance.
#NAME: mahajani
#PARENT: GLib.UnicodeScript
#COMMENT: Mahajani. Since: 2.42
#NAME: prepend
#PARENT: GLib.ByteArray
#COMMENT: Adds the given data to the start of the #GByteArray.
The array will grow in size automatically if necessary.
#NAME: val
#PARENT: GLib.atomic_int_add.gint
#COMMENT: the value to add
#NAME: hash_table_destroy
#PARENT: GLib
#COMMENT: Destroys all keys and values in the #GHashTable and decrements its
reference count by 1. If keys and/or values are dynamically allocated,
you should either free them first or create the #GHashTable with destroy
notifiers using g_hash_table_new_full(). In the latter case the destroy
functions you supplied will be called on all keys and values during the
destruction phase.
#NAME: mask
#PARENT: GLib.TraverseFlags
#COMMENT: a mask of all traverse flags.
#NAME: key
#PARENT: GLib.HashTable.insert.gboolean
#COMMENT: a key to insert
#NAME: pid
#PARENT: GLib.child_watch_source_new.Source
#COMMENT: process to watch. On POSIX the positive pid of a child process. On
Windows a handle for a process (which doesn't have to be a child).
#NAME: datalist_unset_flags
#PARENT: GLib
#COMMENT: Turns off flag values for a data list. See g_datalist_unset_flags()
#NAME: adjust_time
#PARENT: GLib.TimeZone
#COMMENT: Finds an interval within @tz that corresponds to the given @time_,
possibly adjusting @time_ if required to fit into an interval.
The meaning of @time_ depends on @type.

This function is similar to g_time_zone_find_interval(), with the
difference that it always succeeds (by making the adjustments
described below).

In any of the cases where g_time_zone_find_interval() succeeds then
this function returns the same value, without modifying @time_.

This function may, however, modify @time_ in order to deal with
non-existent times.  If the non-existent local @time_ of 02:30 were
requested on March 14th 2010 in Toronto then this function would
adjust @time_ to be 03:00 and return the interval containing the
adjusted time.
#NAME: base64_encode
#PARENT: GLib.base64_encode
#COMMENT: a newly allocated, zero-terminated Base-64
              encoded string representing @data. The returned string must
              be freed with g_free().
#NAME: value
#PARENT: GLib.Variant.new_double.Variant
#COMMENT: a #gdouble floating point value
#NAME: get_max_idle_time
#PARENT: GLib.ThreadPool
#COMMENT: This function will return the maximum @interval that a
thread will wait in the thread pool for new tasks before
being stopped.

If this function returns 0, threads waiting in the thread
pool for new work are not stopped.
#NAME: string
#PARENT: GLib.String.insert.String
#COMMENT: a #GString
#NAME: month
#PARENT: GLib.DateTime.new.DateTime
#COMMENT: the month component of the date
#NAME: string
#PARENT: GLib.Variant.print_string.String
#COMMENT: a #GString, or %NULL
#NAME: list
#PARENT: GLib.SList.insert.gpointer
#COMMENT: a #GSList
#NAME: poll
#PARENT: GLib
#COMMENT: Polls @fds, as with the poll() system call, but portably. (On
systems that don't have poll(), it is emulated using select().)
This is used internally by #GMainContext, but it can be called
directly if you need to block until a file descriptor is ready, but
don't want to run the full main loop.

Each element of @fds is a #GPollFD describing a single file
descriptor to poll. The %fd field indicates the file descriptor,
and the %events field indicates the events to poll for. On return,
the %revents fields will be filled with the events that actually
occurred.

On POSIX systems, the file descriptors in @fds can be any sort of
file descriptor, but the situation is much more complicated on
Windows. If you need to use g_poll() in code that has to run on
Windows, the easiest solution is to construct all of your
#GPollFDs with g_io_channel_win32_make_pollfd().
#NAME: before
#PARENT: GLib.UnicodeBreakType
#COMMENT: Break Opportunity Before (BB)
#NAME: node
#PARENT: GLib.Node.child_position.gint
#COMMENT: a #GNode
#NAME: func
#PARENT: GLib.AsyncQueue.sort.none
#COMMENT: the #GCompareDataFunc is used to sort @queue
#NAME: free
#PARENT: GLib.OptionGroup
#COMMENT: Frees a #GOptionGroup. Note that you must not free groups
which have been added to a #GOptionContext.
#NAME: queue
#PARENT: GLib.Queue.free_full.none
#COMMENT: a pointer to a #GQueue
#NAME: phags_pa
#PARENT: GLib.UnicodeScript
#COMMENT: Phags-pa
#NAME: quark_from_string
#PARENT: GLib
#COMMENT: Gets the #GQuark identifying the given string. If the string does
not currently have an associated #GQuark, a new #GQuark is created,
using a copy of the string.
#NAME: build_filename
#PARENT: GLib.build_filename
#COMMENT: a newly-allocated string that must be freed with g_free().
#NAME: month
#PARENT: GLib.Date.set_month.none
#COMMENT: month to set
#NAME: add_months
#PARENT: GLib.Date
#COMMENT: Increments a date by some number of months.
If the day of the month is greater than 28,
this routine may change the day of the month
(because the destination month may not have
the current day in it). The date must be valid.
#NAME: nth_data
#PARENT: GLib.SList.nth_data
#COMMENT: the element's data, or %NULL if the position
    is off the end of the #GSList
#NAME: unassigned
#PARENT: GLib.UnicodeType
#COMMENT: General category "Other, Not Assigned" (Cn)
#NAME: set_print_handler
#PARENT: GLib
#COMMENT: Sets the print handler.

Any messages passed to g_print() will be output via
the new handler. The default handler simply outputs
the message to stdout. By providing your own handler
you can redirect the output, to a GTK+ widget or a
log file for example.
#NAME: a
#PARENT: GLib.CompareDataFunc.gint
#COMMENT: a value
#NAME: b
#PARENT: GLib.CompareDataFunc.gint
#COMMENT: a value to compare with
#NAME: length
#PARENT: GLib.VariantType.new_tuple.VariantType
#COMMENT: the length of @items, or -1
#NAME: set_locale_string_list
#PARENT: GLib.KeyFile
#COMMENT: Associates a list of string values for @key and @locale under
@group_name.  If the translation for @key cannot be found then
it is created.
#NAME: insert_const
#PARENT: GLib.StringChunk.insert_const
#COMMENT: a pointer to the new or existing copy of @string
    within the #GStringChunk
#NAME: lookup_symbol
#PARENT: GLib.Scanner.lookup_symbol
#COMMENT: the value of @symbol in the current scope, or %NULL
    if @symbol is not bound in the current scope
#NAME: data
#PARENT: GLib.List.remove.gpointer
#COMMENT: the data of the element to remove
#NAME: key_file
#PARENT: GLib.KeyFile.remove_key.gboolean
#COMMENT: a #GKeyFile
#NAME: get_thread_default
#PARENT: GLib.MainContext
#COMMENT: Gets the thread-default #GMainContext for this thread. Asynchronous
operations that want to be able to be run in contexts other than
the default one should call this method or
g_main_context_ref_thread_default() to get a #GMainContext to add
their #GSources to. (Note that even in single-threaded
programs applications may sometimes want to temporarily push a
non-default context, so it is not safe to assume that this will
always return %NULL if you are running in the default thread.)

If you need to hold a reference on the context, use
g_main_context_ref_thread_default() instead.
#NAME: data
#PARENT: GLib.Queue.push_head.none
#COMMENT: the data for the new element.
#NAME: prev
#PARENT: GLib.SequenceIter.prev
#COMMENT: a #GSequenceIter pointing to the previous position
    before @iter
#NAME: has_group
#PARENT: GLib.KeyFile
#COMMENT: Looks whether the key file has the group @group_name.
#NAME: cond
#PARENT: GLib.Cond.wait_until.gboolean
#COMMENT: a #GCond
#NAME: list
#PARENT: GLib.SList.remove_all.gpointer
#COMMENT: a #GSList
#NAME: utf8_pointer_to_offset
#PARENT: GLib.utf8_pointer_to_offset
#COMMENT: the resulting character offset
#NAME: type
#PARENT: GLib.VariantType.element.VariantType
#COMMENT: an array or maybe #GVariantType
#NAME: int64
#PARENT: GLib.OptionArg
#COMMENT: The option takes a 64-bit integer. Like
    %G_OPTION_ARG_INT but for larger numbers. The number can be in
    decimal base, or in hexadecimal (when prefixed with `0x`, for
    example, `0xffffffff`). Since 2.12
#NAME: slice_alloc0
#PARENT: GLib.slice_alloc0
#COMMENT: a pointer to the allocated block
#NAME: hash_table
#PARENT: GLib.HashTable.destroy.none
#COMMENT: a #GHashTable
#NAME: free_segment
#PARENT: GLib.String.free.utf8
#COMMENT: if %TRUE, the actual character data is freed as well
#NAME: pool
#PARENT: GLib.ThreadPool.push.gboolean
#COMMENT: a #GThreadPool
#NAME: init_enter
#PARENT: GLib.Once.init_enter
#COMMENT: %TRUE if the initialization section should be entered,
    %FALSE and blocks otherwise
#NAME: func
#PARENT: GLib.List.insert_sorted.gpointer
#COMMENT: the function to compare elements in the list. It should
    return a number > 0 if the first parameter comes after the
    second parameter in the sort order.
#NAME: read_chars
#PARENT: GLib.IOChannel
#COMMENT: Replacement for g_io_channel_read() with the new API.
#NAME: realloc_n
#PARENT: GLib.realloc_n
#COMMENT: the new address of the allocated memory
#NAME: mask
#PARENT: GLib.HookFlagMask
#COMMENT: A mask covering all bits reserved for
  hook flags; see %G_HOOK_FLAG_USER_SHIFT
#NAME: key_id
#PARENT: GLib.dataset_id_set_data_full.none
#COMMENT: the #GQuark id to identify the data element.
#NAME: IOStatus
#PARENT: GLib
#COMMENT: Stati returned by most of the #GIOFuncs functions.
#NAME: ErrorType
#PARENT: GLib
#COMMENT: The possible errors, used in the @v_error field
of #GTokenValue, when the token is a %G_TOKEN_ERROR.
#NAME: length
#PARENT: GLib.KeyFile.set_double_list.none
#COMMENT: number of double values in @list
#NAME: file_open_tmp
#PARENT: GLib.file_open_tmp
#COMMENT: A file handle (as from open()) to the file opened for
    reading and writing. The file is opened in binary mode on platforms
    where there is a difference. The file handle should be closed with
    close(). In case of errors, -1 is returned and @error will be set.
#NAME: is_container
#PARENT: GLib.VariantType.is_container
#COMMENT: %TRUE if @type is a container type

Since 2.24
#NAME: DATE_BAD_YEAR
#PARENT: GLib
#COMMENT: Represents an invalid year.
#NAME: array
#PARENT: GLib.PtrArray.remove_fast.gboolean
#COMMENT: a #GPtrArray
#NAME: dir
#PARENT: GLib.Dir.rewind.none
#COMMENT: a #GDir* created by g_dir_open()
#NAME: sha1
#PARENT: GLib.ChecksumType
#COMMENT: Use the SHA-1 hashing algorithm
#NAME: value
#PARENT: GLib.Variant.get_type.VariantType
#COMMENT: a #GVariant
#NAME: get_host_name
#PARENT: GLib.get_host_name
#COMMENT: the host name of the machine.
#NAME: dataset_destroy
#PARENT: GLib
#COMMENT: Destroys the dataset, freeing all memory allocated, and calling any
destroy functions set for data elements.
#NAME: get
#PARENT: GLib.Sequence.get
#COMMENT: the data that @iter points to
#NAME: int_range
#PARENT: GLib.Rand.int_range
#COMMENT: a random number
#NAME: ref
#PARENT: GLib.HashTable.ref
#COMMENT: the passed in #GHashTable
#NAME: ch
#PARENT: GLib.unichar_get_script.UnicodeScript
#COMMENT: a Unicode character
#NAME: string
#PARENT: GLib.vasprintf.gint
#COMMENT: the return location for the newly-allocated string.
#NAME: test_rand_int_range
#PARENT: GLib.test_rand_int_range
#COMMENT: a number with @begin <= number < @end.
#NAME: add_years
#PARENT: GLib.DateTime.add_years
#COMMENT: the newly created #GDateTime which should be freed with
  g_date_time_unref().
#NAME: bit_storage
#PARENT: GLib
#COMMENT: Gets the number of bits used to hold @number,
e.g. if @number is 4, 3 bits are needed.
#NAME: config
#PARENT: GLib.Scanner
#COMMENT: link into the scanner configuration
#NAME: size
#PARENT: GLib.HashTable
#COMMENT: Returns the number of elements contained in the #GHashTable.
#NAME: c
#PARENT: GLib.unichar_iscntrl.gboolean
#COMMENT: a Unicode character
#NAME: no_auto_capture
#PARENT: GLib.RegexCompileFlags
#COMMENT: Disables the use of numbered capturing
    parentheses in the pattern. Any opening parenthesis that is not
    followed by "?" behaves as if it were followed by "?:" but named
    parentheses can still be used for capturing (and they acquire numbers
    in the usual way).
#NAME: key
#PARENT: GLib.Tree.remove.gboolean
#COMMENT: the key to remove
#NAME: builder
#PARENT: GLib.VariantBuilder.init.none
#COMMENT: a #GVariantBuilder
#NAME: FreeFunc
#PARENT: GLib
#COMMENT: Declares a type of function which takes an arbitrary
data pointer argument and has no return value. It is
not currently used in GLib or GTK+.
#NAME: match_options
#PARENT: GLib.Regex.replace.utf8
#COMMENT: options for the match
#NAME: data
#PARENT: GLib.Checksum.update.none
#COMMENT: buffer used to compute the checksum
#NAME: queue
#PARENT: GLib.AsyncQueue.length.gint
#COMMENT: a #GAsyncQueue.
#NAME: file
#PARENT: GLib.MappedFile.free.none
#COMMENT: a #GMappedFile
#NAME: code
#PARENT: GLib.set_error_literal.none
#COMMENT: error code
#NAME: msgidoffset
#PARENT: GLib.dpgettext.utf8
#COMMENT: the offset of the message id in @msgctxid
#NAME: length
#PARENT: GLib.KeyFile.get_locale_string_list.utf8
#COMMENT: return location for the number of returned strings or %NULL
#NAME: infix_separator
#PARENT: GLib.UnicodeBreakType
#COMMENT: Infix Separator (Numeric) (IS)
#NAME: v
#PARENT: GLib.int64_hash.guint
#COMMENT: a pointer to a #gint64 key
#NAME: replace_eval
#PARENT: GLib.Regex.replace_eval
#COMMENT: a newly allocated string containing the replacements
#NAME: key_len
#PARENT: GLib.Hmac.new.Hmac
#COMMENT: the length of the keys
#NAME: haystack_len
#PARENT: GLib.strstr_len.utf8
#COMMENT: the maximum length of @haystack. Note that -1 is
    a valid length, if @haystack is nul-terminated, meaning it will
    search through the whole string.
#NAME: clear
#PARENT: GLib.Queue
#COMMENT: Removes all the elements in @queue. If queue elements contain
dynamically-allocated memory, they should be freed first.
#NAME: get_mime_type
#PARENT: GLib.BookmarkFile
#COMMENT: Retrieves the MIME type of the resource pointed by @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
event that the MIME type cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_INVALID_VALUE.
#NAME: new_int64
#PARENT: GLib.Variant
#COMMENT: Creates a new int64 #GVariant instance.
#NAME: KEY_FILE_DESKTOP_KEY_TYPE
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the type of the desktop entry. Usually
#G_KEY_FILE_DESKTOP_TYPE_APPLICATION,
#G_KEY_FILE_DESKTOP_TYPE_LINK, or
#G_KEY_FILE_DESKTOP_TYPE_DIRECTORY.
#NAME: unichar_isalnum
#PARENT: GLib
#COMMENT: Determines whether a character is alphanumeric.
Given some UTF-8 text, obtain a character value
with g_utf8_get_char().
#NAME: need_valids
#PARENT: GLib.Hook.find.Hook
#COMMENT: %TRUE if #GHook elements which have been destroyed
    should be skipped
#NAME: sibling
#PARENT: GLib.Hook.insert_before.none
#COMMENT: the #GHook to insert the new #GHook before
#NAME: strtod
#PARENT: GLib.strtod
#COMMENT: the #gdouble value.
#NAME: array
#PARENT: GLib.Array.remove_range.gpointer
#COMMENT: a @GArray
#NAME: filename
#PARENT: GLib.BookmarkFile.to_file.gboolean
#COMMENT: path of the output file
#NAME: add_value
#PARENT: GLib.VariantBuilder
#COMMENT: Adds @value to @builder.

It is an error to call this function in any way that would create an
inconsistent value to be constructed.  Some examples of this are
putting different types of items into an array, putting the wrong
types or number of items in a tuple, putting more than one value into
a variant, etc.

If @value is a floating reference (see g_variant_ref_sink()),
the @builder instance takes ownership of @value.
#NAME: standard_input
#PARENT: GLib.spawn_async_with_pipes.gboolean
#COMMENT: return location for file descriptor to write to child's stdin, or %NULL
#NAME: to_file
#PARENT: GLib.BookmarkFile.to_file
#COMMENT: %TRUE if the file was successfully written.
#NAME: thread_exit
#PARENT: GLib
#COMMENT: Terminates the current thread.

If another thread is waiting for us using g_thread_join() then the
waiting thread will be woken up and get @retval as the return value
of g_thread_join().

Calling g_thread_exit() with a parameter @retval is equivalent to
returning @retval from the function @func, as given to g_thread_new().

You must only call g_thread_exit() from a thread that you created
yourself with g_thread_new() or related APIs. You must not call
this function from a thread created with another threading library
or or from within a #GThreadPool.
#NAME: handler
#PARENT: GLib.unix_signal_add_full.guint
#COMMENT: Callback
#NAME: bad_value
#PARENT: GLib.OptionError
#COMMENT: A value couldn't be parsed.
#NAME: GINT32_FORMAT
#PARENT: GLib
#COMMENT: This is the platform dependent conversion specifier for scanning
and printing values of type #gint32. See also #G_GINT16_FORMAT.
#NAME: replace
#PARENT: GLib.Tree
#COMMENT: Inserts a new key and value into a #GTree similar to g_tree_insert().
The difference is that if the key already exists in the #GTree, it gets
replaced by the new key. If you supplied a @value_destroy_func when
creating the #GTree, the old value is freed using that function. If you
supplied a @key_destroy_func when creating the #GTree, the old key is
freed using that function.

The tree is automatically 'balanced' as new key/value pairs are added,
so that the distance from the root to every leaf is as small as possible.
#NAME: n_blocks
#PARENT: GLib.try_malloc_n.gpointer
#COMMENT: the number of blocks to allocate
#NAME: unichar_combining_class
#PARENT: GLib
#COMMENT: Determines the canonical combining class of a Unicode character.
#NAME: unknown_encoding
#PARENT: GLib.KeyFileError
#COMMENT: the text being parsed was in
    an unknown encoding
#NAME: get_offset
#PARENT: GLib.TimeZone.get_offset
#COMMENT: the number of seconds that should be added to UTC to get the
         local time in @tz
#NAME: get_summary
#PARENT: GLib.OptionContext.get_summary
#COMMENT: the summary
#NAME: get_strict_posix
#PARENT: GLib.OptionContext
#COMMENT: Returns whether strict POSIX code is enabled.

See g_option_context_set_strict_posix() for more information.
#NAME: v_char
#PARENT: GLib.TokenValue
#COMMENT: character value
#NAME: format
#PARENT: GLib.prefix_error.none
#COMMENT: printf()-style format string
#NAME: to_timeval
#PARENT: GLib.DateTime
#COMMENT: Stores the instant in time that @datetime represents into @tv.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC, regardless of the time
zone associated with @datetime.

On systems where 'long' is 32bit (ie: all 32bit systems and all
Windows systems), a #GTimeVal is incapable of storing the entire
range of values that #GDateTime is capable of expressing.  On those
systems, this function returns %FALSE to indicate that the time is
out of range.

On systems where 'long' is 64bit, this function never fails.
#NAME: hebrew
#PARENT: GLib.UnicodeScript
#COMMENT: Hebrew
#NAME: test_create_case
#PARENT: GLib.test_create_case
#COMMENT: a newly allocated #GTestCase.
#NAME: value
#PARENT: GLib.VariantType.new_dict_entry.VariantType
#COMMENT: a #GVariantType
#NAME: get_poll_func
#PARENT: GLib.MainContext.get_poll_func
#COMMENT: the poll function
#NAME: key_file
#PARENT: GLib.KeyFile.get_string_list.utf8
#COMMENT: a #GKeyFile
#NAME: loop
#PARENT: GLib.MainLoop.get_context.MainContext
#COMMENT: a #GMainLoop.
#NAME: update
#PARENT: GLib.Hmac
#COMMENT: Feeds @data into an existing #GHmac.

The HMAC must still be open, that is g_hmac_get_string() or
g_hmac_get_digest() must not have been called on @hmac.
#NAME: datetime
#PARENT: GLib.DateTime.get_microsecond.gint
#COMMENT: a #GDateTime
#NAME: array
#PARENT: GLib.Array.append_vals.gpointer
#COMMENT: a #GArray
#NAME: string
#PARENT: GLib.String.free_to_bytes.Bytes
#COMMENT: a #GString
#NAME: s
#PARENT: GLib.date_strftime.gsize
#COMMENT: destination buffer
#NAME: compare
#PARENT: GLib.Bytes.compare
#COMMENT: a negative value if bytes2 is lesser, a positive value if bytes2 is
         greater, and zero if bytes2 is equal to bytes1
#NAME: kayah_li
#PARENT: GLib.UnicodeScript
#COMMENT: Kayah Li. Since 2.16.3
#NAME: julian
#PARENT: GLib.Date
#COMMENT: this bit is set if @julian_days is valid
#NAME: cmp_func
#PARENT: GLib.Sequence.lookup.SequenceIter
#COMMENT: the function used to compare items in the sequence
#NAME: free
#PARENT: GLib.Rand
#COMMENT: Frees the memory allocated for the #GRand.
#NAME: new
#PARENT: GLib.MappedFile.new
#COMMENT: a newly allocated #GMappedFile which must be unref'd
   with g_mapped_file_unref(), or %NULL if the mapping failed.
#NAME: replace_eval
#PARENT: GLib.Regex
#COMMENT: Replaces occurrences of the pattern in regex with the output of
@eval for that occurrence.

Setting @start_position differs from just passing over a shortened
string and setting #G_REGEX_MATCH_NOTBOL in the case of a pattern
that begins with any kind of lookbehind assertion, such as "\b".

The following example uses g_regex_replace_eval() to replace multiple
strings at once:
|[<!-- language="C" -->
static gboolean
eval_cb (const GMatchInfo *info,
         GString          *res,
         gpointer          data)
{
  gchar *match;
  gchar *r;

   match = g_match_info_fetch (info, 0);
   r = g_hash_table_lookup ((GHashTable *)data, match);
   g_string_append (res, r);
   g_free (match);

   return FALSE;
}

...

GRegex *reg;
GHashTable *h;
gchar *res;

h = g_hash_table_new (g_str_hash, g_str_equal);

g_hash_table_insert (h, "1", "ONE");
g_hash_table_insert (h, "2", "TWO");
g_hash_table_insert (h, "3", "THREE");
g_hash_table_insert (h, "4", "FOUR");

reg = g_regex_new ("1|2|3|4", 0, 0, NULL);
res = g_regex_replace_eval (reg, text, -1, 0, 0, eval_cb, h, NULL);
g_hash_table_destroy (h);

...
]|
#NAME: escape_string
#PARENT: GLib.Regex
#COMMENT: Escapes the special characters used for regular expressions
in @string, for instance "a.b*c" becomes "a\.b\*c". This
function is useful to dynamically generate regular expressions.

@string can contain nul characters that are replaced with "\0",
in this case remember to specify the correct length of @string
in @length.
#NAME: Sequence
#PARENT: GLib
#COMMENT: The #GSequence struct is an opaque data type representing a
[sequence][glib-Sequences] data type.
#NAME: printerr
#PARENT: GLib
#COMMENT: Outputs a formatted message via the error message handler.
The default handler simply outputs the message to stderr, without appending
a trailing new-line character. Typically, @format should end with its own
new-line character.

g_printerr() should not be used from within libraries.
Instead g_log() should be used, or the convenience functions
g_message(), g_warning() and g_error().
#NAME: find
#PARENT: GLib.List.find
#COMMENT: the found #GList element, or %NULL if it is not found
#NAME: prepend
#PARENT: GLib.Node.prepend
#COMMENT: the inserted #GNode
#NAME: data
#PARENT: GLib.SList.find.gpointer
#COMMENT: the element data to find
#NAME: replacement
#PARENT: GLib.Regex.check_replacement.gboolean
#COMMENT: the replacement string
#NAME: list
#PARENT: GLib.List.free_full.none
#COMMENT: a pointer to a #GList
#NAME: get_comment
#PARENT: GLib.KeyFile
#COMMENT: Retrieves a comment above @key from @group_name.
If @key is %NULL then @comment will be read from above
@group_name. If both @key and @group_name are %NULL, then
@comment will be read from above the first group in the file.
#NAME: context
#PARENT: GLib.MainContext.push_thread_default.none
#COMMENT: a #GMainContext, or %NULL for the global default context
#NAME: scope_lookup_symbol
#PARENT: GLib.Scanner.scope_lookup_symbol
#COMMENT: the value of @symbol in the given scope, or %NULL
    if @symbol is not bound in the given scope.
#NAME: key_file
#PARENT: GLib.KeyFile.remove_comment.gboolean
#COMMENT: a #GKeyFile
#NAME: bad_weekday
#PARENT: GLib.DateWeekday
#COMMENT: invalid value
#NAME: key_file
#PARENT: GLib.KeyFile.set_uint64.none
#COMMENT: a #GKeyFile
#NAME: get_month
#PARENT: GLib.DateTime
#COMMENT: Retrieves the month of the year represented by @datetime in the Gregorian
calendar.
#NAME: set_summary
#PARENT: GLib.OptionContext
#COMMENT: Adds a string to be displayed in `--help` output before the list
of options. This is typically a summary of the program functionality.

Note that the summary is translated (see
g_option_context_set_translate_func() and
g_option_context_set_translation_domain()).
#NAME: s
#PARENT: GLib.Date.strftime.gsize
#COMMENT: destination buffer
#NAME: printf
#PARENT: GLib.String
#COMMENT: Writes a formatted string into a #GString.
This is similar to the standard sprintf() function,
except that the #GString buffer automatically expands
to contain the results. The previous contents of the
#GString are destroyed.
#NAME: sora_sompeng
#PARENT: GLib.UnicodeScript
#COMMENT: Sora Sompeng. Since: 2.32
#NAME: uri
#PARENT: GLib.BookmarkFile.set_added.none
#COMMENT: a valid URI
#NAME: right_curly
#PARENT: GLib.TokenType
#COMMENT: a '}' character
#NAME: group
#PARENT: GLib.OptionGroup.set_translation_domain.none
#COMMENT: a #GOptionGroup
#NAME: timeout_add_full
#PARENT: GLib
#COMMENT: Sets a function to be called at regular intervals, with the given
priority.  The function is called repeatedly until it returns
%FALSE, at which point the timeout is automatically destroyed and
the function will not be called again.  The @notify function is
called when the timeout is destroyed.  The first call to the
function will be at the end of the first @interval.

Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given interval
(it does not try to 'catch up' time lost in delays).

This internally creates a main loop source using g_timeout_source_new()
and attaches it to the global #GMainContext using g_source_attach(), so
the callback will be invoked in whichever thread is running that main
context. You can do these steps manually if you need greater control or to
use a custom main context.

The interval given in terms of monotonic time, not wall clock time.
See g_get_monotonic_time().
#NAME: valid_weekday
#PARENT: GLib.Date
#COMMENT: Returns %TRUE if the weekday is valid. The seven #GDateWeekday enumeration
values are the only valid weekdays.
#NAME: data
#PARENT: GLib.Sequence.prepend.SequenceIter
#COMMENT: the data for the new item
#NAME: dispatch
#PARENT: GLib.MainContext
#COMMENT: Dispatches all pending sources.

You must have successfully acquired the context with
g_main_context_acquire() before you may call this function.
#NAME: scan_identifier_NULL
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if %NULL is reported as
    %G_TOKEN_IDENTIFIER_NULL (the default is %FALSE).
#NAME: to_codeset
#PARENT: GLib.convert.utf8
#COMMENT: name of character set into which to convert @str
#NAME: string_array
#PARENT: GLib.OptionArg
#COMMENT: The option takes a string argument, multiple
    uses of the option are collected into an array of strings.
#NAME: lookup
#PARENT: GLib.Sequence.lookup
#COMMENT: an #GSequenceIter pointing to the position of the
    first item found equal to @data according to @cmp_func and
    @cmp_data, or %NULL if no such item exists
#NAME: ref
#PARENT: GLib.VariantBuilder
#COMMENT: Increases the reference count on @builder.

Don't call this on stack-allocated #GVariantBuilder instances or bad
things will happen.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_is_private.gboolean
#COMMENT: a #GBookmarkFile
#NAME: string
#PARENT: GLib.strcanon.utf8
#COMMENT: a nul-terminated array of bytes
#NAME: notempty
#PARENT: GLib.RegexMatchFlags
#COMMENT: An empty string is not considered to be a valid
    match if this option is set. If there are alternatives in the pattern,
    they are tried. If all the alternatives match the empty string, the
    entire match fails. For example, if the pattern "a?b?" is applied to
    a string not beginning with "a" or "b", it matches the empty string
    at the start of the string. With this flag set, this match is not
    valid, so GRegex searches further into the string for occurrences
    of "a" or "b".
#NAME: list
#PARENT: GLib.SList.index.gint
#COMMENT: a #GSList
#NAME: set_flags
#PARENT: GLib.IOChannel
#COMMENT: Sets the (writeable) flags in @channel to (@flags & %G_IO_FLAG_SET_MASK).
#NAME: match_full
#PARENT: GLib.Regex
#COMMENT: Scans for a match in string for the pattern in @regex.
The @match_options are combined with the match options specified
when the @regex structure was created, letting you have more
flexibility in reusing #GRegex structures.

Setting @start_position differs from just passing over a shortened
string and setting #G_REGEX_MATCH_NOTBOL in the case of a pattern
that begins with any kind of lookbehind assertion, such as "\b".

A #GMatchInfo structure, used to get information on the match, is
stored in @match_info if not %NULL. Note that if @match_info is
not %NULL then it is created even if the function returns %FALSE,
i.e. you must free it regardless if regular expression actually
matched.

@string is not copied and is used in #GMatchInfo internally. If
you use any #GMatchInfo method (except g_match_info_free()) after
freeing or modifying @string then the behaviour is undefined.

To retrieve all the non-overlapping matches of the pattern in
string you can use g_match_info_next().

|[<!-- language="C" -->
static void
print_uppercase_words (const gchar *string)
{
  // Print all uppercase-only words.
  GRegex *regex;
  GMatchInfo *match_info;
  GError *error = NULL;
  
  regex = g_regex_new ("[A-Z]+", 0, 0, NULL);
  g_regex_match_full (regex, string, -1, 0, 0, &match_info, &error);
  while (g_match_info_matches (match_info))
    {
      gchar *word = g_match_info_fetch (match_info, 0);
      g_print ("Found: %s\n", word);
      g_free (word);
      g_match_info_next (match_info, &error);
    }
  g_match_info_free (match_info);
  g_regex_unref (regex);
  if (error != NULL)
    {
      g_printerr ("Error while matching: %s\n", error->message);
      g_error_free (error);
    }
}
]|
#NAME: has_key
#PARENT: GLib.KeyFile
#COMMENT: Looks whether the key file has the key @key in the group
@group_name.

Note that this function does not follow the rules for #GError strictly;
the return value both carries meaning and signals an error.  To use
this function, you must pass a #GError pointer in @error, and check
whether it is not %NULL to see if an error occurred.

Language bindings should use g_key_file_get_value() to test whether
or not a key exists.
#NAME: channel
#PARENT: GLib.io_add_watch_full.guint
#COMMENT: a #GIOChannel
#NAME: v_comment
#PARENT: GLib.TokenValue
#COMMENT: comment value
#NAME: linear_a
#PARENT: GLib.UnicodeScript
#COMMENT: Linear A. Since: 2.42
#NAME: linear_b
#PARENT: GLib.UnicodeScript
#COMMENT: Linear B
#NAME: set_is_private
#PARENT: GLib.BookmarkFile
#COMMENT: Sets the private flag of the bookmark for @uri.

If a bookmark for @uri cannot be found then it is created.
#NAME: start_position
#PARENT: GLib.Regex.replace_eval.utf8
#COMMENT: starting index of the string to match
#NAME: locale
#PARENT: GLib.KeyFile.get_locale_string_list.utf8
#COMMENT: a locale identifier or %NULL
#NAME: overwrite
#PARENT: GLib.String.overwrite
#COMMENT: @string
#NAME: key_compare_data
#PARENT: GLib.Tree.new_with_data.Tree
#COMMENT: data to pass to comparison function
#NAME: match_all_full
#PARENT: GLib.Regex
#COMMENT: Using the standard algorithm for regular expression matching only
the longest match in the string is retrieved, it is not possible
to obtain all the available matches. For instance matching
"<a> <b> <c>" against the pattern "<.*>"
you get "<a> <b> <c>".

This function uses a different algorithm (called DFA, i.e. deterministic
finite automaton), so it can retrieve all the possible matches, all
starting at the same point in the string. For instance matching
"<a> <b> <c>" against the pattern "<.*>;"
you would obtain three matches: "<a> <b> <c>",
"<a> <b>" and "<a>".

The number of matched strings is retrieved using
g_match_info_get_match_count(). To obtain the matched strings and
their position you can use, respectively, g_match_info_fetch() and
g_match_info_fetch_pos(). Note that the strings are returned in
reverse order of length; that is, the longest matching string is
given first.

Note that the DFA algorithm is slower than the standard one and it
is not able to capture substrings, so backreferences do not work.

Setting @start_position differs from just passing over a shortened
string and setting #G_REGEX_MATCH_NOTBOL in the case of a pattern
that begins with any kind of lookbehind assertion, such as "\b".

A #GMatchInfo structure, used to get information on the match, is
stored in @match_info if not %NULL. Note that if @match_info is
not %NULL then it is created even if the function returns %FALSE,
i.e. you must free it regardless if regular expression actually
matched.

@string is not copied and is used in #GMatchInfo internally. If
you use any #GMatchInfo method (except g_match_info_free()) after
freeing or modifying @string then the behaviour is undefined.
#NAME: hyphen
#PARENT: GLib.UnicodeBreakType
#COMMENT: Hyphen (HY)
#NAME: test_rand_double
#PARENT: GLib
#COMMENT: Get a reproducible random floating point number,
see g_test_rand_int() for details on test case random numbers.
#NAME: equal
#PARENT: GLib.Bytes
#COMMENT: Compares the two #GBytes values being pointed to and returns
%TRUE if they are equal.

This function can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using non-%NULL #GBytes pointers as keys in a #GHashTable.
#NAME: date_time_hash
#PARENT: GLib.date_time_hash
#COMMENT: a #guint containing the hash
#NAME: Dir
#PARENT: GLib
#COMMENT: An opaque structure representing an opened directory.
#NAME: element_size
#PARENT: GLib.Array.sized_new.gpointer
#COMMENT: size of each element in the array
#NAME: hash_table_size
#PARENT: GLib
#COMMENT: Returns the number of elements contained in the #GHashTable.
#NAME: hook_list
#PARENT: GLib.Hook.free.none
#COMMENT: a #GHookList
#NAME: DuplicateFunc
#PARENT: GLib
#COMMENT: The type of functions that are used to 'duplicate' an object.
What this means depends on the context, it could just be
incrementing the reference count, if @data is a ref-counted
object.
#NAME: length
#PARENT: GLib.PtrArray.remove_range.gpointer
#COMMENT: the number of pointers to remove
#NAME: ascii_strtoll
#PARENT: GLib.ascii_strtoll
#COMMENT: the #gint64 value or zero on error.
#NAME: again
#PARENT: GLib.IOError
#COMMENT: an EAGAIN error occurred
#NAME: 
#PARENT: GLib.log.none...
#COMMENT: the parameters to insert into the format string
#NAME: push
#PARENT: GLib.AsyncQueue
#COMMENT: Pushes the @data into the @queue. @data must not be %NULL.
#NAME: log
#PARENT: GLib
#COMMENT: Logs an error or debugging message.

If the log level has been set as fatal, the abort()
function is called to terminate the program.

If g_log_default_handler() is used as the log handler function, a new-line
character will automatically be appended to @..., and need not be entered
manually.
#NAME: next
#PARENT: GLib.HashTableIter
#COMMENT: Advances @iter and retrieves the key and/or value that are now
pointed to as a result of this advancement. If %FALSE is returned,
@key and @value are not set, and the iterator becomes invalid.
#NAME: fetch
#PARENT: GLib.MatchInfo.fetch
#COMMENT: The matched substring, or %NULL if an error
    occurred. You have to free the string yourself
#NAME: unref
#PARENT: GLib.OptionGroup
#COMMENT: Decrements the reference count of @group by one.
If the reference count drops to 0, the @group will be freed.
and all memory allocated by the @group is released.
#NAME: iter_cmp
#PARENT: GLib.Sequence.insert_sorted_iter.SequenceIter
#COMMENT: the function used to compare iterators in the sequence
#NAME: tree
#PARENT: GLib.Tree.lookup_extended.gboolean
#COMMENT: a #GTree
#NAME: timed_pop
#PARENT: GLib.AsyncQueue.timed_pop
#COMMENT: data from the queue or %NULL, when no data is
    received before @end_time.
#NAME: test_get_dir
#PARENT: GLib
#COMMENT: Gets the pathname of the directory containing test files of the type
specified by @file_type.

This is approximately the same as calling g_test_build_filename("."),
but you don't need to free the return value.
#NAME: key
#PARENT: GLib.KeyFile.set_int64.none
#COMMENT: a key
#NAME: queue
#PARENT: GLib.Queue.unlink.none
#COMMENT: a #GQueue
#NAME: converter
#PARENT: GLib.convert_with_iconv.utf8
#COMMENT: conversion descriptor from g_iconv_open()
#NAME: type
#PARENT: GLib.Variant.parse.Variant
#COMMENT: a #GVariantType, or %NULL
#NAME: GINTPTR_MODIFIER
#PARENT: GLib
#COMMENT: The platform dependent length modifier for conversion specifiers
for scanning and printing values of type #gintptr or #guintptr.
It is a string literal.
#NAME: user_data
#PARENT: GLib.io_add_watch.guint
#COMMENT: user data to pass to @func
#NAME: data
#PARENT: GLib.Queue.insert_after.none
#COMMENT: the data to insert
#NAME: value
#PARENT: GLib.Variant.get_objv.utf8
#COMMENT: an array of object paths #GVariant
#NAME: dup_bytestring
#PARENT: GLib.Variant
#COMMENT: Similar to g_variant_get_bytestring() except that instead of
returning a constant string, the string is duplicated.

The return value must be freed using g_free().
#NAME: domain
#PARENT: GLib.set_error.none
#COMMENT: error domain
#NAME: make_tmp
#PARENT: GLib.Dir
#COMMENT: Creates a subdirectory in the preferred directory for temporary
files (as returned by g_get_tmp_dir()).

@tmpl should be a string in the GLib file name encoding containing
a sequence of six 'X' characters, as the parameter to g_mkstemp().
However, unlike these functions, the template should only be a
basename, no directory components are allowed. If template is
%NULL, a default template is used.

Note that in contrast to g_mkdtemp() (and mkdtemp()) @tmpl is not
modified, and might thus be a read-only literal string.
#NAME: poll
#PARENT: GLib.poll
#COMMENT: the number of entries in @fds whose %revents fields
were filled in, or 0 if the operation timed out, or -1 on error or
if the call was interrupted.
#NAME: symbol_2_token
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if symbols are reported by setting
    `token = v_symbol` or as %G_TOKEN_SYMBOL (the default is %FALSE).
#NAME: new_full
#PARENT: GLib.AsyncQueue.new_full
#COMMENT: a new #GAsyncQueue. Free with g_async_queue_unref()
#NAME: length
#PARENT: GLib.file_get_contents.gboolean
#COMMENT: location to store length in bytes of the contents, or %NULL
#NAME: posix_named_class_outside_class
#PARENT: GLib.RegexError
#COMMENT: POSIX named classes are
    supported only within a class. Since 2.16
#NAME: ascii_formatd
#PARENT: GLib
#COMMENT: Converts a #gdouble to a string, using the '.' as
decimal point. To format the number you pass in
a printf()-style format string. Allowed conversion
specifiers are 'e', 'E', 'f', 'F', 'g' and 'G'.

The returned buffer is guaranteed to be nul-terminated.

If you just want to want to serialize the value into a
string, use g_ascii_dtostr().
#NAME: optional
#PARENT: GLib.MarkupCollectType
#COMMENT: can be bitwise ORed with the other fields.
    If present, allows the attribute not to appear. A default value
    is set depending on what value type is used
#NAME: convert_with_fallback
#PARENT: GLib.convert_with_fallback
#COMMENT: If the conversion was successful, a newly allocated
              nul-terminated string, which must be freed with
              g_free(). Otherwise %NULL and @error will be set.
#NAME: type
#PARENT: GLib.Variant.new_from_data.Variant
#COMMENT: a definite #GVariantType
#NAME: check_version
#PARENT: GLib
#COMMENT: Checks that the GLib library in use is compatible with the
given version. Generally you would pass in the constants
#GLIB_MAJOR_VERSION, #GLIB_MINOR_VERSION, #GLIB_MICRO_VERSION
as the three arguments to this function; that produces
a check that the library in use is compatible with
the version of GLib the application or module was compiled
against.

Compatibility is defined by two things: first the version
of the running library is newer than the version
@required_major.required_minor.@required_micro. Second
the running library must be binary compatible with the
version @required_major.required_minor.@required_micro
(same major version.)
#NAME: URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS
#PARENT: GLib
#COMMENT: Subcomponent delimiter characters as defined in RFC 3986. Includes "!$&'()*+,;=".
#NAME: set_clear_func
#PARENT: GLib.Array
#COMMENT: Sets a function to clear an element of @array.

The @clear_func will be called when an element in the array
data segment is removed and when the array is freed and data
segment is deallocated as well.

Note that in contrast with other uses of #GDestroyNotify
functions, @clear_func is expected to clear the contents of
the array element it is given, but not free the element itself.
#NAME: get_max_threads
#PARENT: GLib.ThreadPool.get_max_threads
#COMMENT: the maximal number of threads
#NAME: end
#PARENT: GLib.utf8_find_next_char.utf8
#COMMENT: a pointer to the byte following the end of the string,
    or %NULL to indicate that the string is nul-terminated
#NAME: rand_
#PARENT: GLib.Rand.set_seed.none
#COMMENT: a #GRand
#NAME: hash
#PARENT: GLib.VariantType.hash
#COMMENT: the hash value

Since 2.24
#NAME: init
#PARENT: GLib.Cond
#COMMENT: Initialises a #GCond so that it can be used.

This function is useful to initialise a #GCond that has been
allocated as part of a larger structure.  It is not necessary to
initialise a #GCond that has been statically allocated.

To undo the effect of g_cond_init() when a #GCond is no longer
needed, use g_cond_clear().

Calling g_cond_init() on an already-initialised #GCond leads
to undefined behaviour.
#NAME: str_hash
#PARENT: GLib.str_hash
#COMMENT: a hash value corresponding to the key
#NAME: strlcat
#PARENT: GLib
#COMMENT: Portability wrapper that calls strlcat() on systems which have it,
and emulates it otherwise. Appends nul-terminated @src string to @dest,
guaranteeing nul-termination for @dest. The total size of @dest won't
exceed @dest_size.

At most @dest_size - 1 characters will be copied. Unlike strncat(),
@dest_size is the full size of dest, not the space left over. This
function does not allocate memory. It always nul-terminates (unless
@dest_size == 0 or there were no nul characters in the @dest_size
characters of dest to start with).

Caveat: this is supposedly a more secure alternative to strcat() or
strncat(), but for real security g_strconcat() is harder to mess up.
#NAME: user_data
#PARENT: GLib.Source.remove_by_funcs_user_data.gboolean
#COMMENT: the user data for the callback
#NAME: spawn_command_line_sync
#PARENT: GLib
#COMMENT: A simple version of g_spawn_sync() with little-used parameters
removed, taking a command line instead of an argument vector.  See
g_spawn_sync() for full details. @command_line will be parsed by
g_shell_parse_argv(). Unlike g_spawn_sync(), the %G_SPAWN_SEARCH_PATH flag
is enabled. Note that %G_SPAWN_SEARCH_PATH can have security
implications, so consider using g_spawn_sync() directly if
appropriate. Possible errors are those from g_spawn_sync() and those
from g_shell_parse_argv().

If @exit_status is non-%NULL, the platform-specific exit status of
the child is stored there; see the documentation of
g_spawn_check_exit_status() for how to use and interpret this.

On Windows, please note the implications of g_shell_parse_argv()
parsing @command_line. Parsing is done according to Unix shell rules, not
Windows command interpreter rules.
Space is a separator, and backslashes are
special. Thus you cannot simply pass a @command_line containing
canonical Windows paths, like "c:\\program files\\app\\app.exe", as
the backslashes will be eaten, and the space will act as a
separator. You need to enclose such paths with single quotes, like
"'c:\\program files\\app\\app.exe' 'e:\\folder\\argument.txt'".
#NAME: data
#PARENT: GLib.Array.prepend_vals.gpointer
#COMMENT: a pointer to the elements to prepend to the start of the array
#NAME: nth
#PARENT: GLib.SList
#COMMENT: Gets the element at the given position in a #GSList.
#NAME: value
#PARENT: GLib.HashTableIter.next.gboolean
#COMMENT: a location to store the value, or %NULL
#NAME: saturday
#PARENT: GLib.DateWeekday
#COMMENT: Saturday
#NAME: key_file
#PARENT: GLib.KeyFile.set_string.none
#COMMENT: a #GKeyFile
#NAME: type1
#PARENT: GLib.VariantType.equal.gboolean
#COMMENT: a #GVariantType
#NAME: peek_head_link
#PARENT: GLib.Queue
#COMMENT: Returns the first link in @queue.
#NAME: type2
#PARENT: GLib.VariantType.equal.gboolean
#COMMENT: a #GVariantType
#NAME: get_keys_as_array
#PARENT: GLib.HashTable
#COMMENT: Retrieves every key inside @hash_table, as an array.

The returned array is %NULL-terminated but may contain %NULL as a
key.  Use @length to determine the true length if it's possible that
%NULL was used as the value for a key.

Note: in the common case of a string-keyed #GHashTable, the return
value of this function can be conveniently cast to (const gchar **).

This iterates over every entry in the hash table to build its return value.
To iterate over the entries in a #GHashTable more efficiently, use a
#GHashTableIter.

You should always free the return result with g_free().  In the
above-mentioned case of a string-keyed hash table, it may be
appropriate to use g_strfreev() if you call g_hash_table_steal_all()
first to transfer ownership of the keys.
#NAME: date
#PARENT: GLib.Date.get_day_of_year.guint
#COMMENT: a #GDate to extract day of year from
#NAME: anchored
#PARENT: GLib.RegexMatchFlags
#COMMENT: The pattern is forced to be "anchored", that is,
    it is constrained to match only at the first matching point in the
    string that is being searched. This effect can also be achieved by
    appropriate constructs in the pattern itself such as the "^"
    metacharater.
#NAME: key_file
#PARENT: GLib.KeyFile.get_integer.gint
#COMMENT: a #GKeyFile
#NAME: format
#PARENT: GLib.markup_printf_escaped.utf8
#COMMENT: printf() style format string
#NAME: get_abbreviation
#PARENT: GLib.TimeZone
#COMMENT: Determines the time zone abbreviation to be used during a particular
@interval of time in the time zone @tz.

For example, in Toronto this is currently "EST" during the winter
months and "EDT" during the summer months when daylight savings time
is in effect.
#NAME: func
#PARENT: GLib.SList.insert_sorted_with_data.gpointer
#COMMENT: the function to compare elements in the list.
    It should return a number > 0 if the first parameter
    comes after the second parameter in the sort order.
#NAME: get_num_unused_threads
#PARENT: GLib.ThreadPool
#COMMENT: Returns the number of currently unused threads.
#NAME: strjoinv
#PARENT: GLib.strjoinv
#COMMENT: a newly-allocated string containing all of the strings joined
    together, with @separator between them
#NAME: DATE_BAD_JULIAN
#PARENT: GLib
#COMMENT: Represents an invalid Julian day number.
#NAME: try_malloc0_n
#PARENT: GLib
#COMMENT: This function is similar to g_try_malloc0(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.
#NAME: orig_key
#PARENT: GLib.HashTable.lookup_extended.gboolean
#COMMENT: return location for the original key, or %NULL
#NAME: try_realloc
#PARENT: GLib.try_realloc
#COMMENT: the allocated memory, or %NULL.
#NAME: ref
#PARENT: GLib.Array.ref
#COMMENT: The passed in #GArray
#NAME: add
#PARENT: GLib.TimeVal
#COMMENT: Adds the given number of microseconds to @time_. @microseconds can
also be negative to decrease the value of @time_.
#NAME: clear
#PARENT: GLib.RWLock
#COMMENT: Frees the resources allocated to a lock with g_rw_lock_init().

This function should not be used with a #GRWLock that has been
statically allocated.

Calling g_rw_lock_clear() when any thread holds the lock
leads to undefined behaviour.

Sine: 2.32
#NAME: wait_until
#PARENT: GLib.Cond
#COMMENT: Waits until either @cond is signalled or @end_time has passed.

As with g_cond_wait() it is possible that a spurious or stolen wakeup
could occur.  For that reason, waiting on a condition variable should
always be in a loop, based on an explicitly-checked predicate.

%TRUE is returned if the condition variable was signalled (or in the
case of a spurious wakeup).  %FALSE is returned if @end_time has
passed.

The following code shows how to correctly perform a timed wait on a
condition variable (extending the example presented in the
documentation for #GCond):

|[<!-- language="C" -->
gpointer
pop_data_timed (void)
{
  gint64 end_time;
  gpointer data;

  g_mutex_lock (&data_mutex);

  end_time = g_get_monotonic_time () + 5 * G_TIME_SPAN_SECOND;
  while (!current_data)
    if (!g_cond_wait_until (&data_cond, &data_mutex, end_time))
      {
        // timeout has passed.
        g_mutex_unlock (&data_mutex);
        return NULL;
      }

  // there is data for us
  data = current_data;
  current_data = NULL;

  g_mutex_unlock (&data_mutex);

  return data;
}
]|

Notice that the end time is calculated once, before entering the
loop and reused.  This is the motivation behind the use of absolute
time on this API -- if a relative time of 5 seconds were passed
directly to the call and a spurious wakeup occurred, the program would
have to start over waiting again (which would lead to a total wait
time of more than 5 seconds).
#NAME: URI_RESERVED_CHARS_GENERIC_DELIMITERS
#PARENT: GLib
#COMMENT: Generic delimiters characters as defined in RFC 3986. Includes ":/?#[]@".
#NAME: try_new
#PARENT: GLib.Thread
#COMMENT: This function is the same as g_thread_new() except that
it allows for the possibility of failure.

If a thread can not be created (due to resource limits),
@error is set and %NULL is returned.
#NAME: array
#PARENT: GLib.ByteArray.remove_index.guint8
#COMMENT: a #GByteArray
#NAME: file
#PARENT: GLib.fprintf.gint
#COMMENT: the stream to write to.
#NAME: array
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is an array.
#NAME: new
#PARENT: GLib.AsyncQueue.new
#COMMENT: a new #GAsyncQueue. Free with g_async_queue_unref()
#NAME: hash
#PARENT: GLib.Variant.hash
#COMMENT: a hash value corresponding to @value
#NAME: remove_range
#PARENT: GLib.PtrArray
#COMMENT: Removes the given number of pointers starting at the given index
from a #GPtrArray. The following elements are moved to close the
gap. If @array has a non-%NULL #GDestroyNotify function it is
called for the removed elements.
#NAME: key
#PARENT: GLib.HashFunc.guint
#COMMENT: a key
#NAME: sort
#PARENT: GLib.SList.sort
#COMMENT: the start of the sorted #GSList
#NAME: one
#PARENT: GLib.Variant.compare.gint
#COMMENT: a basic-typed #GVariant instance
#NAME: flags
#PARENT: GLib.unix_open_pipe.gboolean
#COMMENT: Bitfield of file descriptor flags, as for fcntl()
#NAME: date1
#PARENT: GLib.Date.order.none
#COMMENT: the first date
#NAME: date_strftime
#PARENT: GLib
#COMMENT: Generates a printed representation of the date, in a
[locale][setlocale]-specific way.
Works just like the platform's C library strftime() function,
but only accepts date-related formats; time-related formats
give undefined results. Date must be valid. Unlike strftime()
(which uses the locale encoding), works on a UTF-8 format
string and stores a UTF-8 result.

This function does not provide any conversion specifiers in
addition to those implemented by the platform's C library.
For example, don't expect that using g_date_strftime() would
make the \%F provided by the C99 strftime() work on Windows
where the C library only complies to C89.
#NAME: key
#PARENT: GLib.Private.get.gpointer
#COMMENT: a #GPrivate
#NAME: date2
#PARENT: GLib.Date.order.none
#COMMENT: the second date
#NAME: filename
#PARENT: GLib.filename_to_uri.utf8
#COMMENT: an absolute filename specified in the GLib file name encoding,
           which is the on-disk file name bytes on Unix, and UTF-8 on
           Windows
#NAME: ascii_xdigit_value
#PARENT: GLib
#COMMENT: Determines the numeric value of a character as a hexidecimal
digit. Differs from g_unichar_xdigit_value() because it takes
a char, so there's no worry about sign extension if characters
are signed.
#NAME: invalid_content
#PARENT: GLib.MarkupError
#COMMENT: error should be set by #GMarkupParser
    functions; content was invalid
#NAME: strndup
#PARENT: GLib.strndup
#COMMENT: a newly-allocated buffer containing the first @n bytes
    of @str, nul-terminated
#NAME: data
#PARENT: GLib.List.insert_sorted.gpointer
#COMMENT: the data for the new element
#NAME: node
#PARENT: GLib.Node.insert.Node
#COMMENT: the #GNode to insert
#NAME: hash
#PARENT: GLib.Bytes.hash
#COMMENT: a hash value corresponding to the key.
#NAME: hash
#PARENT: GLib.Variant
#COMMENT: Generates a hash value for a #GVariant instance.

The output of this function is guaranteed to be the same for a given
value only per-process.  It may change between different processor
architectures or even different versions of GLib.  Do not use this
function as a basis for building protocols or file formats.

The type of @value is #gconstpointer only to allow use of this
function with #GHashTable.  @value must be a #GVariant.
#NAME: write
#PARENT: GLib.IOChannel.write
#COMMENT: %G_IO_ERROR_NONE if the operation was successful.
#NAME: IOChannelError
#PARENT: GLib
#COMMENT: Error codes returned by #GIOChannel operations.
#NAME: compute_checksum_for_bytes
#PARENT: GLib.compute_checksum_for_bytes
#COMMENT: the digest of the binary data as a string in hexadecimal.
  The returned string should be freed with g_free() when done using it.
#NAME: load_from_data
#PARENT: GLib.KeyFile
#COMMENT: Loads a key file from memory into an empty #GKeyFile structure.
If the object cannot be created then %error is set to a #GKeyFileError.
#NAME: new
#PARENT: GLib.OptionGroup.new
#COMMENT: a newly created option group. It should be added
  to a #GOptionContext or freed with g_option_group_unref().
#NAME: utf8_strchr
#PARENT: GLib.utf8_strchr
#COMMENT: %NULL if the string does not contain the character,
    otherwise, a pointer to the start of the leftmost occurrence
    of the character in the string.
#NAME: user_data
#PARENT: GLib.UnixFDSourceFunc.gboolean
#COMMENT: user data passed to g_unix_fd_add()
#NAME: atomic
#PARENT: GLib.atomic_int_compare_and_exchange.gboolean
#COMMENT: a pointer to a #gint or #guint
#NAME: funcs
#PARENT: GLib.source_remove_by_funcs_user_data.gboolean
#COMMENT: The @source_funcs passed to g_source_new()
#NAME: chunk
#PARENT: GLib.StringChunk.free.none
#COMMENT: a #GStringChunk
#NAME: is_basic
#PARENT: GLib.VariantType
#COMMENT: Determines if the given @type is a basic type.

Basic types are booleans, bytes, integers, doubles, strings, object
paths and signatures.

Only a basic type may be used as the key of a dictionary entry.

This function returns %FALSE for all indefinite types except
%G_VARIANT_TYPE_BASIC.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_modified.glong
#COMMENT: a #GBookmarkFile
#NAME: link_index
#PARENT: GLib.Queue
#COMMENT: Returns the position of @link_ in @queue.
#NAME: rw_lock
#PARENT: GLib.RWLock.reader_trylock.gboolean
#COMMENT: a #GRWLock
#NAME: index
#PARENT: GLib.List
#COMMENT: Gets the position of the element containing
the given data (starting from 0).
#NAME: uri
#PARENT: GLib.BookmarkFile.get_description.utf8
#COMMENT: a valid URI
#NAME: stop_unused_threads
#PARENT: GLib.ThreadPool
#COMMENT: Stops all currently unused threads. This does not change the
maximal number of unused threads. This function can be used to
regularly stop all unused threads e.g. from g_timeout_add().
#NAME: list
#PARENT: GLib.SList.nth_data.gpointer
#COMMENT: a #GSList
#NAME: init
#PARENT: GLib.RWLock
#COMMENT: Initializes a #GRWLock so that it can be used.

This function is useful to initialize a lock that has been
allocated on the stack, or as part of a larger structure.  It is not
necessary to initialise a reader-writer lock that has been statically
allocated.

|[<!-- language="C" -->
  typedef struct {
    GRWLock l;
    ...
  } Blob;

Blob *b;

b = g_new (Blob, 1);
g_rw_lock_init (&b->l);
]|

To undo the effect of g_rw_lock_init() when a lock is no longer
needed, use g_rw_lock_clear().

Calling g_rw_lock_init() on an already initialized #GRWLock leads
to undefined behaviour.
#NAME: len
#PARENT: GLib.utf16_to_ucs4.gunichar
#COMMENT: the maximum length (number of #gunichar2) of @str to use.
    If @len < 0, then the string is nul-terminated.
#NAME: str
#PARENT: GLib.utf8_normalize.utf8
#COMMENT: a UTF-8 encoded string.
#NAME: args
#PARENT: GLib.vsnprintf.gint
#COMMENT: the list of arguments to insert in the output.
#NAME: insert_len
#PARENT: GLib.StringChunk.insert_len
#COMMENT: a pointer to the copy of @string within the #GStringChunk
#NAME: hook_free
#PARENT: GLib
#COMMENT: Calls the #GHookList @finalize_hook function if it exists,
and frees the memory allocated for the #GHook.
#NAME: append_vprintf
#PARENT: GLib.String
#COMMENT: Appends a formatted string onto the end of a #GString.
This function is similar to g_string_append_printf()
except that the arguments to the format string are passed
as a va_list.
#NAME: free_func
#PARENT: GLib.List.free_full.none
#COMMENT: the function to be called to free each element's data
#NAME: dt1
#PARENT: GLib.DateTime.equal.gboolean
#COMMENT: a #GDateTime
#NAME: dt2
#PARENT: GLib.DateTime.equal.gboolean
#COMMENT: a #GDateTime
#NAME: c
#PARENT: GLib.unichar_ismark.gboolean
#COMMENT: a Unicode character
#NAME: mem_block
#PARENT: GLib.slice_copy.gpointer
#COMMENT: the memory to copy
#NAME: basic_type_expected
#PARENT: GLib.VariantParseError
#COMMENT: a non-basic #GVariantType was given where a basic type was expected
#NAME: MainLoop
#PARENT: GLib
#COMMENT: The `GMainLoop` struct is an opaque data type
representing the main event loop of a GLib or GTK+ application.
#NAME: valid
#PARENT: GLib.Date
#COMMENT: Returns %TRUE if the #GDate represents an existing day. The date must not
contain garbage; it should have been initialized with g_date_clear()
if it wasn't allocated by one of the g_date_new() variants.
#NAME: to_file
#PARENT: GLib.BookmarkFile
#COMMENT: This function outputs @bookmark into a file.  The write process is
guaranteed to be atomic by using g_file_set_contents() internally.
#NAME: valid_day
#PARENT: GLib.Date
#COMMENT: Returns %TRUE if the day of the month is valid (a day is valid if it's
between 1 and 31 inclusive).
#NAME: s1
#PARENT: GLib.ascii_strncasecmp.gint
#COMMENT: string to compare with @s2
#NAME: locale_to_utf8
#PARENT: GLib
#COMMENT: Converts a string which is in the encoding used for strings by
the C runtime (usually the same as that used by the operating
system) in the [current locale][setlocale] into a UTF-8 string.
#NAME: s2
#PARENT: GLib.ascii_strncasecmp.gint
#COMMENT: string to compare with @s1
#NAME: chunk
#PARENT: GLib.StringChunk.insert.utf8
#COMMENT: a #GStringChunk
#NAME: datalist_id_get_data
#PARENT: GLib
#COMMENT: Retrieves the data element corresponding to @key_id.
#NAME: timeout_
#PARENT: GLib.MainContext.query.gint
#COMMENT: location to store timeout to be used in polling
#NAME: bookmark
#PARENT: GLib.BookmarkFile.set_description.none
#COMMENT: a #GBookmarkFile
#NAME: n_bytes
#PARENT: GLib.realloc.gpointer
#COMMENT: new size of the memory in bytes
#NAME: timeout_pop
#PARENT: GLib.AsyncQueue
#COMMENT: Pops data from the @queue. If the queue is empty, blocks for
@timeout microseconds, or until data becomes available.

If no data is received before the timeout, %NULL is returned.
#NAME: data
#PARENT: GLib.Sequence.insert_sorted.SequenceIter
#COMMENT: the data to insert
#NAME: insert_len
#PARENT: GLib.String
#COMMENT: Inserts @len bytes of @val into @string at @pos.
Because @len is provided, @val may contain embedded
nuls and need not be nul-terminated. If @pos is -1,
bytes are inserted at the end of the string.

Since this function does not stop at nul bytes, it is
the caller's responsibility to ensure that @val has at
least @len addressable bytes.
#NAME: match_info
#PARENT: GLib.MatchInfo.fetch_named.utf8
#COMMENT: #GMatchInfo structure
#NAME: len
#PARENT: GLib.Array.insert_vals.gpointer
#COMMENT: the number of elements to insert
#NAME: OptionGroup
#PARENT: GLib
#COMMENT: A `GOptionGroup` struct defines the options in a single
group. The struct has only private fields and should not be directly accessed.

All options in a group share the same translation function. Libraries which
need to parse commandline options are expected to provide a function for
getting a `GOptionGroup` holding their options, which
the application can then add to its #GOptionContext.
#NAME: user_data
#PARENT: GLib.SList.insert_sorted_with_data.gpointer
#COMMENT: data to pass to comparison function
#NAME: pool
#PARENT: GLib.ThreadPool.get_max_threads.gint
#COMMENT: a #GThreadPool
#NAME: pattern
#PARENT: GLib.Regex.split_simple.utf8
#COMMENT: the regular expression
#NAME: converter
#PARENT: GLib.IConv.IConv.gsize
#COMMENT: conversion descriptor from g_iconv_open()
#NAME: list
#PARENT: GLib.List.find.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: key_file
#PARENT: GLib.KeyFile.get_integer_list.gint
#COMMENT: a #GKeyFile
#NAME: key
#PARENT: GLib.HRFunc.gboolean
#COMMENT: a key
#NAME: unichar_isxdigit
#PARENT: GLib
#COMMENT: Determines if a character is a hexidecimal digit.
#NAME: finalize_hook
#PARENT: GLib.HookList
#COMMENT: the function to call to finalize a #GHook element.
    The default behaviour is to call the hooks @destroy function
#NAME: too_many_conditional_branches
#PARENT: GLib.RegexError
#COMMENT: Conditional group contains
    more than two branches. Since 2.16
#NAME: next_value
#PARENT: GLib.Scanner
#COMMENT: value of the last token from g_scanner_peek_next_token()
#NAME: TraverseFunc
#PARENT: GLib
#COMMENT: Specifies the type of function passed to g_tree_traverse(). It is
passed the key and value of each node, together with the @user_data
parameter passed to g_tree_traverse(). If the function returns
%TRUE, the traversal is stopped.
#NAME: timeout_add
#PARENT: GLib.timeout_add
#COMMENT: the ID (greater than 0) of the event source.
#NAME: flags
#PARENT: GLib.KeyFile.load_from_dirs.gboolean
#COMMENT: flags from #GKeyFileFlags
#NAME: next
#PARENT: GLib.Node
#COMMENT: points to the node's next sibling (a sibling is another
       #GNode with the same parent).
#NAME: day
#PARENT: GLib.date_valid_day.gboolean
#COMMENT: day to check
#NAME: first
#PARENT: GLib.VariantType
#COMMENT: Determines the first item type of a tuple or dictionary entry
type.

This function may only be used with tuple or dictionary entry types,
but must not be used with the generic tuple type
%G_VARIANT_TYPE_TUPLE.

In the case of a dictionary entry type, this returns the type of
the key.

%NULL is returned in case of @type being %G_VARIANT_TYPE_UNIT.

This call, together with g_variant_type_next() provides an iterator
interface over tuple and dictionary entry types.
#NAME: value
#PARENT: GLib.Variant.new_uint32.Variant
#COMMENT: a #guint32 value
#NAME: type
#PARENT: GLib.VariantType.next.VariantType
#COMMENT: a #GVariantType from a previous call
#NAME: MININT16
#PARENT: GLib
#COMMENT: The minimum value which can be held in a #gint16.
#NAME: spaced_primes_closest
#PARENT: GLib
#COMMENT: Gets the smallest prime number from a built-in array of primes which
is larger than @num. This is used within GLib to calculate the optimum
size of a #GHashTable.

The built-in array of primes ranges from 11 to 13845163 such that
each prime is approximately 1.5-2 times the previous prime.
#NAME: add
#PARENT: GLib.VariantBuilder
#COMMENT: Adds to a #GVariantBuilder.

This call is a convenience wrapper that is exactly equivalent to
calling g_variant_new() followed by g_variant_builder_add_value().

Note that the arguments must be of the correct width for their types
specified in @format_string. This can be achieved by casting them. See
the [GVariant varargs documentation][gvariant-varargs].

This function might be used as follows:

|[<!-- language="C" -->
GVariant *
make_pointless_dictionary (void)
{
  GVariantBuilder builder;
  int i;

  g_variant_builder_init (&builder, G_VARIANT_TYPE_ARRAY);
  for (i = 0; i < 16; i++)
    {
      gchar buf[3];

      sprintf (buf, "%d", i);
      g_variant_builder_add (&builder, "{is}", i, buf);
    }

  return g_variant_builder_end (&builder);
}
]|
#NAME: option_name
#PARENT: GLib.OptionArgFunc.gboolean
#COMMENT: The name of the option being parsed. This will be either a
 single dash followed by a single letter (for a short name) or two dashes
 followed by a long option name.
#NAME: sha512
#PARENT: GLib.ChecksumType
#COMMENT: Use the SHA-512 hashing algorithm
#NAME: get_year
#PARENT: GLib.DateTime.get_year
#COMMENT: the year represented by @datetime
#NAME: print
#PARENT: GLib.Variant
#COMMENT: Pretty-prints @value in the format understood by g_variant_parse().

The format is described [here][gvariant-text].

If @type_annotate is %TRUE, then type information is included in
the output.
#NAME: timeout_add
#PARENT: GLib
#COMMENT: Sets a function to be called at regular intervals, with the default
priority, #G_PRIORITY_DEFAULT.  The function is called repeatedly
until it returns %FALSE, at which point the timeout is automatically
destroyed and the function will not be called again.  The first call
to the function will be at the end of the first @interval.

Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given interval
(it does not try to 'catch up' time lost in delays).

If you want to have a timer in the "seconds" range and do not care
about the exact time of the first call of the timer, use the
g_timeout_add_seconds() function; this function allows for more
optimizations and more efficient system power usage.

This internally creates a main loop source using g_timeout_source_new()
and attaches it to the global #GMainContext using g_source_attach(), so
the callback will be invoked in whichever thread is running that main
context. You can do these steps manually if you need greater control or to
use a custom main context.

The interval given is in terms of monotonic time, not wall clock
time.  See g_get_monotonic_time().
#NAME: queue
#PARENT: GLib.AsyncQueue.timeout_pop_unlocked.gpointer
#COMMENT: a #GAsyncQueue
#NAME: get_objv
#PARENT: GLib.Variant.get_objv
#COMMENT: an array of constant strings
#NAME: get_type
#PARENT: GLib.Variant
#COMMENT: Determines the type of @value.

The return value is valid for the lifetime of @value and must not
be freed.
#NAME: unix_signal_add
#PARENT: GLib
#COMMENT: A convenience function for g_unix_signal_source_new(), which
attaches to the default #GMainContext.  You can remove the watch
using g_source_remove().
#NAME: malformed_property
#PARENT: GLib.RegexError
#COMMENT: Malformed "\\P" or "\\p" sequence.
    Since 2.16
#NAME: cmp_data
#PARENT: GLib.Sequence.lookup.SequenceIter
#COMMENT: user data passed to @cmp_func
#NAME: reserved_size
#PARENT: GLib.PtrArray.new_full.gpointer
#COMMENT: number of pointers preallocated
#NAME: get_mime_type
#PARENT: GLib.BookmarkFile.get_mime_type
#COMMENT: a newly allocated string or %NULL if the specified
  URI cannot be found.
#NAME: retval
#PARENT: GLib.Once
#COMMENT: the value returned by the call to the function, if @status
         is %G_ONCE_STATUS_READY
#NAME: year
#PARENT: GLib.Date.new_dmy.Date
#COMMENT: year
#NAME: unichar_isupper
#PARENT: GLib
#COMMENT: Determines if a character is uppercase.
#NAME: utf8_collate
#PARENT: GLib.utf8_collate
#COMMENT: < 0 if @str1 compares before @str2,
  0 if they compare equal, > 0 if @str1 compares after @str2.
#NAME: format
#PARENT: GLib.vprintf.gint
#COMMENT: a standard printf() format string, but notice
         [string precision pitfalls][string-precision]
#NAME: directory_documents
#PARENT: GLib.UserDirectory
#COMMENT: the user's Documents directory
#NAME: hostname
#PARENT: GLib.hostname_is_ascii_encoded.gboolean
#COMMENT: a hostname
#NAME: text
#PARENT: GLib.base64_decode_inplace.guint8
#COMMENT: zero-terminated
       string with base64 text to decode
#NAME: data
#PARENT: GLib.compute_checksum_for_data.utf8
#COMMENT: binary blob to compute the digest of
#NAME: ref
#PARENT: GLib.Bytes
#COMMENT: Increase the reference count on @bytes.
#NAME: match_num
#PARENT: GLib.MatchInfo.fetch.utf8
#COMMENT: number of the sub expression
#NAME: a
#PARENT: GLib.CompareFunc.gint
#COMMENT: a value
#NAME: b
#PARENT: GLib.CompareFunc.gint
#COMMENT: a value to compare with
#NAME: datalist
#PARENT: GLib.datalist_get_flags.guint
#COMMENT: pointer to the location that holds a list
#NAME: scanner
#PARENT: GLib.Scanner.set_scope.guint
#COMMENT: a #GScanner
#NAME: wc
#PARENT: GLib.String.prepend_unichar.String
#COMMENT: a Unicode character
#NAME: group
#PARENT: GLib.OptionGroup.set_translate_func.none
#COMMENT: a #GOptionGroup
#NAME: file_name
#PARENT: GLib.path_get_basename.utf8
#COMMENT: the name of the file
#NAME: log_domain
#PARENT: GLib.log_set_fatal_mask.LogLevelFlags
#COMMENT: the log domain
#NAME: trusted
#PARENT: GLib.Variant.new_from_data.Variant
#COMMENT: %TRUE if @data is definitely in normal form
#NAME: word_joiner
#PARENT: GLib.UnicodeBreakType
#COMMENT: Word Joiner (WJ)
#NAME: matches
#PARENT: GLib.Error.matches
#COMMENT: whether @error has @domain and @code
#NAME: hook_list
#PARENT: GLib.Hook.first_valid.Hook
#COMMENT: a #GHookList
#NAME: dup_bytestring
#PARENT: GLib.Variant.dup_bytestring
#COMMENT: 
         a newly allocated string
#NAME: regex
#PARENT: GLib.Regex.split_full.utf8
#COMMENT: a #GRegex structure
#NAME: free
#PARENT: GLib.PtrArray
#COMMENT: Frees the memory allocated for the #GPtrArray. If @free_seg is %TRUE
it frees the memory block holding the elements as well. Pass %FALSE
if you want to free the #GPtrArray wrapper but preserve the
underlying array for use elsewhere. If the reference count of @array
is greater than one, the #GPtrArray wrapper is preserved but the
size of @array will be set to zero.

If array contents point to dynamically-allocated memory, they should
be freed separately if @free_seg is %TRUE and no #GDestroyNotify
function has been set for @array.
#NAME: remove
#PARENT: GLib.HashTable.remove
#COMMENT: %TRUE if the key was found and removed from the #GHashTable
#NAME: remove_index_fast
#PARENT: GLib.Array.remove_index_fast
#COMMENT: the #GArray
#NAME: unlink
#PARENT: GLib.unlink
#COMMENT: 0 if the name was successfully deleted, -1 if an error
   occurred
#NAME: n_months
#PARENT: GLib.Date.subtract_months.none
#COMMENT: number of months to move
#NAME: out_len
#PARENT: GLib.base64_decode.guint8
#COMMENT: The length of the decoded data is written here
#NAME: start_position
#PARENT: GLib.Regex.replace.utf8
#COMMENT: starting index of the string to match
#NAME: address
#PARENT: GLib.pointer_bit_unlock.none
#COMMENT: a pointer to a #gpointer-sized value
#NAME: n_years
#PARENT: GLib.Date.add_years.none
#COMMENT: number of years to move forward
#NAME: year
#PARENT: GLib.Date.is_leap_year.gboolean
#COMMENT: year to check
#NAME: idle_source_new
#PARENT: GLib.idle_source_new
#COMMENT: the newly-created idle source
#NAME: cond
#PARENT: GLib.Cond.init.none
#COMMENT: an uninitialized #GCond
#NAME: user_data
#PARENT: GLib.Queue.sort.none
#COMMENT: user data passed to @compare_func
#NAME: random_double_range
#PARENT: GLib.random_double_range
#COMMENT: a random number
#NAME: value
#PARENT: GLib.VariantType.value
#COMMENT: the value type of the dictionary entry

Since 2.24
#NAME: list
#PARENT: GLib.List.nth_data.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: unicode_script_from_iso15924
#PARENT: GLib
#COMMENT: Looks up the Unicode script for @iso15924.  ISO 15924 assigns four-letter
codes to scripts.  For example, the code for Arabic is 'Arab'.
This function accepts four letter codes encoded as a @guint32 in a
big-endian fashion.  That is, the code expected for Arabic is
0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).

See
[Codes for the representation of names of scripts](http://unicode.org/iso15924/codelists.html)
for details.
#NAME: bit_nth_lsf
#PARENT: GLib
#COMMENT: Find the position of the first bit set in @mask, searching
from (but not including) @nth_bit upwards. Bits are numbered
from 0 (least significant) to sizeof(#gulong) * 8 - 1 (31 or 63,
usually). To start searching from the 0th bit, set @nth_bit to -1.
#NAME: c
#PARENT: GLib.unichar_type.UnicodeType
#COMMENT: a Unicode character
#NAME: user_data
#PARENT: GLib.unix_fd_add_full.guint
#COMMENT: data to pass to @function
#NAME: test_create_suite
#PARENT: GLib
#COMMENT: Create a new test suite with the name @suite_name.
#NAME: variable
#PARENT: GLib.environ_getenv.utf8
#COMMENT: the environment variable to get, in the GLib file name
    encoding
#NAME: sort_with_data
#PARENT: GLib.List
#COMMENT: Like g_list_sort(), but the comparison function accepts
a user data argument.
#NAME: 
#PARENT: GLib.printf.gint...
#COMMENT: the arguments to insert in the output.
#NAME: pre_parse_func
#PARENT: GLib.OptionGroup.set_parse_hooks.none
#COMMENT: a function to call before parsing, or %NULL
#NAME: type_error
#PARENT: GLib.VariantParseError
#COMMENT: cannot parse as variant of the specified type
#NAME: set
#PARENT: GLib.Private
#COMMENT: Sets the thread local variable @key to have the value @value in the
current thread.

This function differs from g_private_replace() in the following way:
the #GDestroyNotify for @key is not called on the old value.
#NAME: DateDMY
#PARENT: GLib
#COMMENT: This enumeration isn't used in the API, but may be useful if you need
to mark a number as a day, month, or year.
#NAME: get_applications
#PARENT: GLib.BookmarkFile
#COMMENT: Retrieves the names of the applications that have registered the
bookmark for @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
#NAME: GSSIZE_FORMAT
#PARENT: GLib
#COMMENT: This is the platform dependent conversion specifier for scanning
and printing values of type #gssize. See also #G_GINT16_FORMAT.
#NAME: test_timer_elapsed
#PARENT: GLib
#COMMENT: Get the time since the last start of the timer with g_test_timer_start().
#NAME: len
#PARENT: GLib.base64_encode.utf8
#COMMENT: the length of @data
#NAME: free_seg
#PARENT: GLib.PtrArray.free.gpointer
#COMMENT: if %TRUE the actual pointer array is freed as well
#NAME: free_func
#PARENT: GLib.Queue.free_full.none
#COMMENT: the function to be called to free each element's data
#NAME: MININT32
#PARENT: GLib
#COMMENT: The minimum value which can be held in a #gint32.
#NAME: command_line
#PARENT: GLib.spawn_command_line_async.gboolean
#COMMENT: a command line
#NAME: iconv
#PARENT: GLib.iconv
#COMMENT: count of non-reversible conversions, or -1 on error
#NAME: ref
#PARENT: GLib.IOChannel.ref
#COMMENT: the @channel that was passed in (since 2.6)
#NAME: path_skip_root
#PARENT: GLib.path_skip_root
#COMMENT: a pointer into @file_name after the root component
#NAME: n
#PARENT: GLib.vsnprintf.gint
#COMMENT: the maximum number of bytes to produce (including the
    terminating nul character).
#NAME: next
#PARENT: GLib.VariantIter
#COMMENT: Gets the next item in the container and unpacks it into the variable
argument list according to @format_string, returning %TRUE.

If no more items remain then %FALSE is returned.

All of the pointers given on the variable arguments list of this
function are assumed to point at uninitialised memory.  It is the
responsibility of the caller to free all of the values returned by
the unpacking process.

Here is an example for memory management with g_variant_iter_next():
|[<!-- language="C" -->
  // Iterates a dictionary of type 'a{sv}'
  void
  iterate_dictionary (GVariant *dictionary)
  {
    GVariantIter iter;
    GVariant *value;
    gchar *key;

    g_variant_iter_init (&iter, dictionary);
    while (g_variant_iter_next (&iter, "{sv}", &key, &value))
      {
        g_print ("Item '%s' has type '%s'\n", key,
                 g_variant_get_type_string (value));

        // must free data for ourselves
        g_variant_unref (value);
        g_free (key);
      }
  }
]|

For a solution that is likely to be more convenient to C programmers
when dealing with loops, see g_variant_iter_loop().

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed.

See the section on
[GVariant format strings][gvariant-format-strings-pointers].
#NAME: rand_
#PARENT: GLib.Rand.double_range.gdouble
#COMMENT: a #GRand
#NAME: atomic_int_xor
#PARENT: GLib.atomic_int_xor
#COMMENT: the value of @atomic before the operation, unsigned
#NAME: format
#PARENT: GLib.propagate_prefixed_error.none
#COMMENT: printf()-style format string
#NAME: strstr_len
#PARENT: GLib.strstr_len
#COMMENT: a pointer to the found occurrence, or
   %NULL if not found.
#NAME: slist
#PARENT: GLib.SList.insert_before.gpointer
#COMMENT: a #GSList
#NAME: get_iso8601_week_of_year
#PARENT: GLib.Date.get_iso8601_week_of_year
#COMMENT: ISO 8601 week number of the year.
#NAME: c
#PARENT: GLib.ascii_tolower.gchar
#COMMENT: any character
#NAME: data
#PARENT: GLib.MainContext.invoke.none
#COMMENT: data to pass to @function
#NAME: mem
#PARENT: GLib.try_realloc.gpointer
#COMMENT: previously-allocated memory, or %NULL.
#NAME: data
#PARENT: GLib.TraverseFunc.gboolean
#COMMENT: user data passed to g_tree_traverse()
#NAME: data
#PARENT: GLib.AsyncQueue.push_unlocked.none
#COMMENT: @data to push into the @queue
#NAME: user_data
#PARENT: GLib.spawn_async.gboolean
#COMMENT: user data for @child_setup
#NAME: get_icon
#PARENT: GLib.BookmarkFile
#COMMENT: Gets the icon of the bookmark for @uri.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
#NAME: get_day
#PARENT: GLib.Date
#COMMENT: Returns the day of the month. The date must be valid.
#NAME: cmp_func
#PARENT: GLib.Sequence.insert_sorted.SequenceIter
#COMMENT: the function used to compare items in the sequence
#NAME: PDP_ENDIAN
#PARENT: GLib
#COMMENT: Specifies one of the possible types of byte order
(currently unused). See #G_BYTE_ORDER.
#NAME: atomic
#PARENT: GLib.atomic_pointer_get.gpointer
#COMMENT: a pointer to a #gpointer-sized value
#NAME: has_item
#PARENT: GLib.BookmarkFile.has_item
#COMMENT: %TRUE if @uri is inside @bookmark, %FALSE otherwise
#NAME: len
#PARENT: GLib.String.truncate.String
#COMMENT: the new size of @string
#NAME: remove
#PARENT: GLib.Source
#COMMENT: Removes the source with the given id from the default main context.

The id of a #GSource is given by g_source_get_id(), or will be
returned by the functions g_source_attach(), g_idle_add(),
g_idle_add_full(), g_timeout_add(), g_timeout_add_full(),
g_child_watch_add(), g_child_watch_add_full(), g_io_add_watch(), and
g_io_add_watch_full().

See also g_source_destroy(). You must use g_source_destroy() for sources
added to a non-default main context.

It is a programmer error to attempt to remove a non-existent source.

More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.
#NAME: destroy_func
#PARENT: GLib.datalist_id_set_data_full.none
#COMMENT: the function to call when the data element is
               removed. This function will be called with the data
               element and can be used to free any memory allocated
               for it. If @data is %NULL, then @destroy_func must
               also be %NULL.
#NAME: insert_const
#PARENT: GLib.StringChunk
#COMMENT: Adds a copy of @string to the #GStringChunk, unless the same
string has already been added to the #GStringChunk with
g_string_chunk_insert_const().

This function is useful if you need to copy a large number
of strings but do not want to waste space storing duplicates.
But you must remember that there may be several pointers to
the same string, and so any changes made to the strings
should be done very carefully.

Note that g_string_chunk_insert_const() will not return a
pointer to a string added with g_string_chunk_insert(), even
if they do match.
#NAME: set_flags
#PARENT: GLib.IOChannel.set_flags
#COMMENT: the status of the operation.
#NAME: insert_before
#PARENT: GLib.Queue
#COMMENT: Inserts @data into @queue before @sibling.

@sibling must be part of @queue. Since GLib 2.44 a %NULL sibling pushes the
data at the tail of the queue.
#NAME: uri
#PARENT: GLib.BookmarkFile.add_group.none
#COMMENT: a valid URI
#NAME: converter
#PARENT: GLib.IConv.close.gint
#COMMENT: a conversion descriptor from g_iconv_open()
#NAME: free_segment
#PARENT: GLib.Array.free.utf8
#COMMENT: if %TRUE the actual element data is freed as well
#NAME: foreach_steal
#PARENT: GLib.HashTable
#COMMENT: Calls the given function for each key/value pair in the
#GHashTable. If the function returns %TRUE, then the key/value
pair is removed from the #GHashTable, but no key or value
destroy functions are called.

See #GHashTableIter for an alternative way to loop over the
key/value pairs in the hash table.
#NAME: trylock
#PARENT: GLib.RecMutex.trylock
#COMMENT: %TRUE if @rec_mutex could be locked
#NAME: items_written
#PARENT: GLib.utf8_to_ucs4_fast.gunichar
#COMMENT: location to store the number of
    characters in the result, or %NULL.
#NAME: FileTest
#PARENT: GLib
#COMMENT: A test to perform on a file using g_file_test().
#NAME: hook_size
#PARENT: GLib.HookList
#COMMENT: the size of the #GHookList elements, in bytes
#NAME: SourceFunc
#PARENT: GLib.SourceFunc
#COMMENT: %FALSE if the source should be removed. #G_SOURCE_CONTINUE and
#G_SOURCE_REMOVE are more memorable names for the return value.
#NAME: group_name
#PARENT: GLib.KeyFile.set_comment.gboolean
#COMMENT: a group name, or %NULL
#NAME: src
#PARENT: GLib.stpcpy.utf8
#COMMENT: source string.
#NAME: working_directory
#PARENT: GLib.spawn_sync.gboolean
#COMMENT: child's current working directory, or %NULL to inherit parent's
#NAME: code
#PARENT: GLib.Error.matches.gboolean
#COMMENT: an error code
#NAME: mem_block
#PARENT: GLib.slice_free1.none
#COMMENT: a pointer to the block to free
#NAME: time_
#PARENT: GLib.TimeVal.add.none
#COMMENT: a #GTimeVal
#NAME: regex_match_simple
#PARENT: GLib
#COMMENT: Scans for a match in @string for @pattern.

This function is equivalent to g_regex_match() but it does not
require to compile the pattern with g_regex_new(), avoiding some
lines of code when you need just to do a match without extracting
substrings, capture counts, and so on.

If this function is to be called on the same @pattern more than
once, it's more efficient to compile the pattern once with
g_regex_new() and then use g_regex_match().
#NAME: source
#PARENT: GLib.Source.destroy.none
#COMMENT: a #GSource
#NAME: copy
#PARENT: GLib.Checksum.copy
#COMMENT: the copy of the passed #GChecksum. Use g_checksum_free()
  when finished using it.
#NAME: new
#PARENT: GLib.Hmac
#COMMENT: Creates a new #GHmac, using the digest algorithm @digest_type.
If the @digest_type is not known, %NULL is returned.
A #GHmac can be used to compute the HMAC of a key and an
arbitrary binary blob, using different hashing algorithms.

A #GHmac works by feeding a binary blob through g_hmac_update()
until the data is complete; the digest can then be extracted
using g_hmac_get_string(), which will return the checksum as a
hexadecimal string; or g_hmac_get_digest(), which will return a
array of raw bytes. Once either g_hmac_get_string() or
g_hmac_get_digest() have been called on a #GHmac, the HMAC
will be closed and it won't be possible to call g_hmac_update()
on it anymore.

Support for digests of type %G_CHECKSUM_SHA512 has been added in GLib 2.42.
#NAME: get_user_config_dir
#PARENT: GLib
#COMMENT: Returns a base directory in which to store user-specific application
configuration information such as user preferences and settings.

On UNIX platforms this is determined using the mechanisms described
in the
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
In this case the directory retrieved will be `XDG_CONFIG_HOME`.

On Windows this is the folder to use for local (as opposed to
roaming) application data. See documentation for
CSIDL_LOCAL_APPDATA. Note that on Windows it thus is the same as
what g_get_user_data_dir() returns.
#NAME: msgid
#PARENT: GLib.dpgettext2.utf8
#COMMENT: the message
#NAME: 
#PARENT: GLib.Variant.new_parsed.Variant...
#COMMENT: arguments as per @format
#NAME: path_is_absolute
#PARENT: GLib
#COMMENT: Returns %TRUE if the given @file_name is an absolute file name.
Note that this is a somewhat vague concept on Windows.

On POSIX systems, an absolute file name is well-defined. It always
starts from the single root directory. For example "/usr/local".

On Windows, the concepts of current drive and drive-specific
current directory introduce vagueness. This function interprets as
an absolute file name one that either begins with a directory
separator such as "\Users\tml" or begins with the root on a drive,
for example "C:\Windows". The first case also includes UNC paths
such as "\\myserver\docs\foo". In all cases, either slashes or
backslashes are accepted.

Note that a file name relative to the current drive root does not
truly specify a file uniquely over time and across processes, as
the current drive is a per-process value and can be changed.

File names relative the current directory on some specific drive,
such as "D:foo/bar", are not interpreted as absolute by this
function, but they obviously are not relative to the normal current
directory as returned by getcwd() or g_get_current_dir()
either. Such paths should be avoided, or need to be handled using
Windows-specific code.
#NAME: lock_bit
#PARENT: GLib.bit_lock.none
#COMMENT: a bit value between 0 and 31
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_applications.utf8
#COMMENT: a #GBookmarkFile
#NAME: queue
#PARENT: GLib.Queue.index.gint
#COMMENT: a #GQueue
#NAME: unix_open_pipe
#PARENT: GLib.unix_open_pipe
#COMMENT: %TRUE on success, %FALSE if not (and errno will be set).
#NAME: nfile
#PARENT: GLib.FileError
#COMMENT: There are too many distinct file openings in the
    entire system.
#NAME: datetime
#PARENT: GLib.DateTime.add_years.DateTime
#COMMENT: a #GDateTime
#NAME: test_build_filename
#PARENT: GLib.test_build_filename
#COMMENT: the path of the file, to be freed using g_free()
#NAME: channel
#PARENT: GLib.IOChannel.close.none
#COMMENT: A #GIOChannel
#NAME: val
#PARENT: GLib.String.append.String
#COMMENT: the string to append onto the end of @string
#NAME: list
#PARENT: GLib.SList.remove_link.gpointer
#COMMENT: a #GSList
#NAME: string_to_expand
#PARENT: GLib.MatchInfo.expand_references.utf8
#COMMENT: the string to expand
#NAME: loop
#PARENT: GLib.MainLoop.run.none
#COMMENT: a #GMainLoop
#NAME: fd
#PARENT: GLib.unix_fd_add_full.guint
#COMMENT: a file descriptor
#NAME: sort_with_data
#PARENT: GLib.SList.sort_with_data
#COMMENT: new head of the list
#NAME: utf16_to_utf8
#PARENT: GLib
#COMMENT: Convert a string from UTF-16 to UTF-8. The result will be
terminated with a 0 byte.

Note that the input is expected to be already in native endianness,
an initial byte-order-mark character is not handled specially.
g_convert() can be used to convert a byte buffer of UTF-16 data of
ambiguous endianess.

Further note that this function does not validate the result
string; it may e.g. include embedded NUL characters. The only
validation done by this function is to ensure that the input can
be correctly interpreted as UTF-16, i.e. it doesn't contain
things unpaired surrogates.
#NAME: character_value_too_large
#PARENT: GLib.RegexError
#COMMENT: the character value in the \\u sequence is
    too large. Since: 2.34
#NAME: func
#PARENT: GLib.io_add_watch_full.guint
#COMMENT: the function to call when the condition is satisfied
#NAME: date1
#PARENT: GLib.Date.days_between.gint
#COMMENT: the first date
#NAME: interval
#PARENT: GLib.ThreadPool.set_max_idle_time.none
#COMMENT: the maximum @interval (in milliseconds)
    a thread can be idle
#NAME: date2
#PARENT: GLib.Date.days_between.gint
#COMMENT: the second date
#NAME: regex
#PARENT: GLib.Regex.replace_eval.utf8
#COMMENT: a #GRegex structure from g_regex_new()
#NAME: strcmp0
#PARENT: GLib
#COMMENT: Compares @str1 and @str2 like strcmp(). Handles %NULL
gracefully by sorting it before non-%NULL strings.
Comparing two %NULL pointers returns 0.
#NAME: rec_mutex
#PARENT: GLib.RecMutex.trylock.gboolean
#COMMENT: a #GRecMutex
#NAME: new
#PARENT: GLib.BookmarkFile.new
#COMMENT: an empty #GBookmarkFile
#NAME: valid_julian
#PARENT: GLib.Date.valid_julian
#COMMENT: %TRUE if the Julian day is valid
#NAME: start_position
#PARENT: GLib.Regex.split_full.utf8
#COMMENT: starting index of the string to match
#NAME: filename_to_utf8
#PARENT: GLib.filename_to_utf8
#COMMENT: The converted string, or %NULL on an error.
#NAME: child_pid
#PARENT: GLib.spawn_async.gboolean
#COMMENT: return location for child process reference, or %NULL
#NAME: mem
#PARENT: GLib.free.none
#COMMENT: the memory to free
#NAME: is_owner
#PARENT: GLib.MainContext.is_owner
#COMMENT: %TRUE if current thread is owner of @context.
#NAME: value
#PARENT: GLib.KeyFile.set_uint64.none
#COMMENT: an integer value
#NAME: LogLevelFlags
#PARENT: GLib
#COMMENT: Flags specifying the level of log messages.

It is possible to change how GLib treats messages of the various
levels using g_log_set_handler() and g_log_set_fatal_mask().
#NAME: clear_func
#PARENT: GLib.Array.set_clear_func.none
#COMMENT: a function to clear an element of @array
#NAME: name_too_long
#PARENT: GLib.RegexError
#COMMENT: the name is too long in "(*MARK)", "(*PRUNE)",
    "(*SKIP)", or "(*THEN)". Since: 2.34
#NAME: dataset_location
#PARENT: GLib.dataset_id_get_data.gpointer
#COMMENT: the location identifying the dataset.
#NAME: unichar_ismark
#PARENT: GLib
#COMMENT: Determines whether a character is a mark (non-spacing mark,
combining mark, or enclosing mark in Unicode speak).
Given some UTF-8 text, obtain a character value
with g_utf8_get_char().

Note: in most cases where isalpha characters are allowed,
ismark characters should be allowed to as they are essential
for writing most European languages as well as many non-Latin
scripts.
#NAME: dest
#PARENT: GLib.propagate_prefixed_error.none
#COMMENT: error return location
#NAME: in
#PARENT: GLib.base64_encode_step.gsize
#COMMENT: the binary data to encode
#NAME: rmdir
#PARENT: GLib.rmdir
#COMMENT: 0 if the directory was successfully removed, -1 if an error
   occurred
#NAME: length
#PARENT: GLib.Array.remove_range.gpointer
#COMMENT: the number of elements to remove
#NAME: Strv
#PARENT: GLib
#COMMENT: A C representable type name for #G_TYPE_STRV.
#NAME: string
#PARENT: GLib.String.ascii_up.String
#COMMENT: a GString
#NAME: file
#PARENT: GLib.KeyFile.load_from_dirs.gboolean
#COMMENT: a relative path to a filename to open and parse
#NAME: usec_timeout
#PARENT: GLib.test_trap_fork.gboolean
#COMMENT: Timeout for the forked test in micro seconds.
#NAME: day
#PARENT: GLib.DateTime.new.DateTime
#COMMENT: the day component of the date
#NAME: new
#PARENT: GLib.Timer
#COMMENT: Creates a new timer, and starts timing (i.e. g_timer_start() is
implicitly called for you).
#NAME: read
#PARENT: GLib.IOChannel.read
#COMMENT: %G_IO_ERROR_NONE if the operation was successful.
#NAME: data_p
#PARENT: GLib.trash_stack_push.none
#COMMENT: the piece of memory to push on the stack
#NAME: str
#PARENT: GLib.utf8_validate.gboolean
#COMMENT: a pointer to character data
#NAME: func
#PARENT: GLib.Thread.try_new.Thread
#COMMENT: a function to execute in the new thread
#NAME: element_name
#PARENT: GLib.markup_collect_attributes.gboolean
#COMMENT: the current tag name
#NAME: data
#PARENT: GLib.SList.insert_sorted_with_data.gpointer
#COMMENT: the data for the new element
#NAME: format
#PARENT: GLib.ascii_formatd.utf8
#COMMENT: The printf()-style format to use for the
         code to use for converting.
#NAME: string
#PARENT: GLib.String.append_len.String
#COMMENT: a #GString
#NAME: MarkupParseFlags
#PARENT: GLib
#COMMENT: Flags that affect the behaviour of the parser.
#NAME: may_recurse
#PARENT: GLib.HookList.marshal.none
#COMMENT: %TRUE if hooks which are currently running
    (e.g. in another thread) are considered valid. If set to %FALSE,
    these are skipped
#NAME: value
#PARENT: GLib.Variant.print.utf8
#COMMENT: a #GVariant
#NAME: get_element
#PARENT: GLib.MarkupParseContext.get_element
#COMMENT: the name of the currently open element, or %NULL
#NAME: datetime
#PARENT: GLib.DateTime.get_day_of_month.gint
#COMMENT: a #GDateTime
#NAME: all_compose
#PARENT: GLib.NormalizeMode
#COMMENT: like %G_NORMALIZE_ALL, but with composed
    forms rather than a maximally decomposed form
#NAME: test_get_root
#PARENT: GLib.test_get_root
#COMMENT: the toplevel #GTestSuite
#NAME: read
#PARENT: GLib.SpawnError
#COMMENT: Read or select on pipes failed.
#NAME: node
#PARENT: GLib.Node.depth.guint
#COMMENT: a #GNode
#NAME: float
#PARENT: GLib.TokenType
#COMMENT: a floating point number
#NAME: set_printerr_handler
#PARENT: GLib.set_printerr_handler
#COMMENT: the old error message handler
#NAME: v1
#PARENT: GLib.str_equal.gboolean
#COMMENT: a key
#NAME: v2
#PARENT: GLib.str_equal.gboolean
#COMMENT: a key to compare with @v1
#NAME: HRFunc
#PARENT: GLib
#COMMENT: Specifies the type of the function passed to
g_hash_table_foreach_remove(). It is called with each key/value
pair, together with the @user_data parameter passed to
g_hash_table_foreach_remove(). It should return %TRUE if the
key/value pair should be removed from the #GHashTable.
#NAME: MININT64
#PARENT: GLib
#COMMENT: The minimum value which can be held in a #gint64.
#NAME: datalist_init
#PARENT: GLib
#COMMENT: Resets the datalist to %NULL. It does not free any memory or call
any destroy functions.
#NAME: date_valid_year
#PARENT: GLib
#COMMENT: Returns %TRUE if the year is valid. Any year greater than 0 is valid,
though there is a 16-bit limit to what #GDate will understand.
#NAME: symbol_spec
#PARENT: GLib.Scanner.unexp_token.none
#COMMENT: a string describing how the scanner's user refers
    to symbols (%NULL defaults to "symbol"). This is used if
    @expected_token is %G_TOKEN_SYMBOL or any token value greater
    than %G_TOKEN_LAST.
#NAME: child_setup
#PARENT: GLib.spawn_async_with_pipes.gboolean
#COMMENT: function to run in the child just before exec()
#NAME: queue
#PARENT: GLib.Queue.free.none
#COMMENT: a #GQueue
#NAME: unlock
#PARENT: GLib.AsyncQueue
#COMMENT: Releases the queue's lock.

Calling this function when you have not acquired
the with g_async_queue_lock() leads to undefined
behaviour.
#NAME: KEY_FILE_DESKTOP_TYPE_LINK
#PARENT: GLib
#COMMENT: The value of the #G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing links to documents.
#NAME: regex
#PARENT: GLib.Regex.match_all.gboolean
#COMMENT: a #GRegex structure from g_regex_new()
#NAME: key_file
#PARENT: GLib.KeyFile.get_uint64.guint64
#COMMENT: a non-%NULL #GKeyFile
#NAME: lookup_symbol
#PARENT: GLib.Scanner
#COMMENT: Looks up a symbol in the current scope and return its value.
If the symbol is not bound in the current scope, %NULL is
returned.
#NAME: pattern
#PARENT: GLib.regex_split_simple.utf8
#COMMENT: the regular expression
#NAME: needle
#PARENT: GLib.strrstr_len.utf8
#COMMENT: the nul-terminated string to search for
#NAME: get_boolean_list
#PARENT: GLib.KeyFile
#COMMENT: Returns the values associated with @key under @group_name as
booleans.

If @key cannot be found then %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with @key cannot be interpreted as booleans then %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
#NAME: fetch_named_pos
#PARENT: GLib.MatchInfo
#COMMENT: Retrieves the position in bytes of the capturing parentheses named @name.

If @name is a valid sub pattern name but it didn't match anything
(e.g. sub pattern "X", matching "b" against "(?P<X>a)?b")
then @start_pos and @end_pos are set to -1 and %TRUE is returned.
#NAME: new
#PARENT: GLib.DateTime
#COMMENT: Creates a new #GDateTime corresponding to the given date and time in
the time zone @tz.

The @year must be between 1 and 9999, @month between 1 and 12 and @day
between 1 and 28, 29, 30 or 31 depending on the month and the year.

@hour must be between 0 and 23 and @minute must be between 0 and 59.

@seconds must be at least 0.0 and must be strictly less than 60.0.
It will be rounded down to the nearest microsecond.

If the given time is not representable in the given time zone (for
example, 02:30 on March 14th 2010 in Toronto, due to daylight savings
time) then the time will be rounded up to the nearest existing time
(in this case, 03:00).  If this matters to you then you should verify
the return value for containing the same as the numbers you gave.

In the case that the given time is ambiguous in the given time zone
(for example, 01:30 on November 7th 2010 in Toronto, due to daylight
savings time) then the time falling within standard (ie:
non-daylight) time is taken.

It not considered a programmer error for the values to this function
to be out of range, but in the case that they are, the function will
return %NULL.

You should release the return value by calling g_date_time_unref()
when you are done with it.
#NAME: printf
#PARENT: GLib.printf
#COMMENT: the number of bytes printed.
#NAME: group_name
#PARENT: GLib.KeyFile.remove_comment.gboolean
#COMMENT: a group name, or %NULL
#NAME: length
#PARENT: GLib.KeyFile.get_keys.utf8
#COMMENT: return location for the number of keys returned, or %NULL
#NAME: suite
#PARENT: GLib.test_run_suite.gint
#COMMENT: a #GTestSuite
#NAME: flags
#PARENT: GLib.Node.find.Node
#COMMENT: which types of children are to be searched, one of
    %G_TRAVERSE_ALL, %G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES
#NAME: exec
#PARENT: GLib.BookmarkFile.get_app_info.gboolean
#COMMENT: return location for the command line of the application, or %NULL
#NAME: new_dict_entry
#PARENT: GLib.VariantType.new_dict_entry
#COMMENT: a new dictionary entry #GVariantType

Since 2.24
#NAME: filename_from_utf8
#PARENT: GLib
#COMMENT: Converts a string from UTF-8 to the encoding GLib uses for
filenames. Note that on Windows GLib uses UTF-8 for filenames;
on other platforms, this function indirectly depends on the
[current locale][setlocale].
#NAME: value
#PARENT: GLib.Variant.hash.guint
#COMMENT: a basic #GVariant value as a #gconstpointer
#NAME: active
#PARENT: GLib.HookFlagMask
#COMMENT: set if the hook has not been destroyed
#NAME: scope_id
#PARENT: GLib.Scanner.set_scope.guint
#COMMENT: the new scope id
#NAME: get_uris
#PARENT: GLib.BookmarkFile.get_uris
#COMMENT: a newly allocated %NULL-terminated array of strings.
  Use g_strfreev() to free it.
#NAME: interval
#PARENT: GLib.timeout_add_seconds.guint
#COMMENT: the time between calls to the function, in seconds
#NAME: p
#PARENT: GLib.utf8_find_next_char.utf8
#COMMENT: a pointer to a position within a UTF-8 encoded string
#NAME: AsyncQueue
#PARENT: GLib
#COMMENT: The GAsyncQueue struct is an opaque data structure which represents
an asynchronous queue. It should only be accessed through the
g_async_queue_* functions.
#NAME: queue
#PARENT: GLib.Queue.find_custom.gpointer
#COMMENT: a #GQueue
#NAME: separator
#PARENT: GLib.KeyFile.set_list_separator.none
#COMMENT: the separator
#NAME: func
#PARENT: GLib.List.insert_sorted_with_data.gpointer
#COMMENT: the function to compare elements in the list. It should
    return a number > 0 if the first parameter  comes after the
    second parameter in the sort order.
#NAME: printf
#PARENT: GLib
#COMMENT: An implementation of the standard printf() function which supports
positional parameters, as specified in the Single Unix Specification.

As with the standard printf(), this does not automatically append a trailing
new-line character to the message, so typically @format should end with its
own new-line character.
#NAME: free
#PARENT: GLib.String.free
#COMMENT: the character data of @string
         (i.e. %NULL if @free_segment is %TRUE)
#NAME: new_dict_entry
#PARENT: GLib.Variant
#COMMENT: Creates a new dictionary entry #GVariant. @key and @value must be
non-%NULL. @key must be a value of a basic type (ie: not a container).

If the @key or @value are floating references (see g_variant_ref_sink()),
the new instance takes ownership of them as if via g_variant_ref_sink().
#NAME: unterminated_comment
#PARENT: GLib.RegexError
#COMMENT: Missing terminating ")" after comment.
    Since 2.16
#NAME: len
#PARENT: GLib.ascii_strdown.utf8
#COMMENT: length of @str in bytes, or -1 if @str is nul-terminated
#NAME: replace
#PARENT: GLib.HashTable
#COMMENT: Inserts a new key and value into a #GHashTable similar to
g_hash_table_insert(). The difference is that if the key
already exists in the #GHashTable, it gets replaced by the
new key. If you supplied a @value_destroy_func when creating
the #GHashTable, the old value is freed using that function.
If you supplied a @key_destroy_func when creating the
#GHashTable, the old key is freed using that function.
#NAME: HOOK_FLAG_USER_SHIFT
#PARENT: GLib
#COMMENT: The position of the first bit which is not reserved for internal
use be the #GHook implementation, i.e.
`1 << G_HOOK_FLAG_USER_SHIFT` is the first
bit which can be used for application-defined flags.
#NAME: hook_destroy_link
#PARENT: GLib
#COMMENT: Removes one #GHook from a #GHookList, marking it
inactive and calling g_hook_unref() on it.
#NAME: len
#PARENT: GLib.PtrArray
#COMMENT: number of pointers in the array
#NAME: is_floating
#PARENT: GLib.Variant
#COMMENT: Checks whether @value has a floating reference count.

This function should only ever be used to assert that a given variant
is or is not floating, or for debug purposes. To acquire a reference
to a variant that might be floating, always use g_variant_ref_sink()
or g_variant_take_ref().

See g_variant_ref_sink() for more information about floating reference
counts.
#NAME: bopomofo
#PARENT: GLib.UnicodeScript
#COMMENT: Bopomofo
#NAME: domain
#PARENT: GLib.OptionGroup.set_translation_domain.none
#COMMENT: the domain to use
#NAME: func
#PARENT: GLib.SList.find_custom.gpointer
#COMMENT: the function to call for each element.
    It should return 0 when the desired element is found
#NAME: strlcpy
#PARENT: GLib.strlcpy
#COMMENT: length of @src
#NAME: unix_fd_source_new
#PARENT: GLib
#COMMENT: Creates a #GSource to watch for a particular IO condition on a file
descriptor.

The source will never close the fd -- you must do it yourself.
#NAME: thread_pool_stop_unused_threads
#PARENT: GLib
#COMMENT: Stops all currently unused threads. This does not change the
maximal number of unused threads. This function can be used to
regularly stop all unused threads e.g. from g_timeout_add().
#NAME: is_dict_entry
#PARENT: GLib.VariantType
#COMMENT: Determines if the given @type is a dictionary entry type.  This is
true if the type string for @type starts with a '{'.

This function returns %TRUE for any indefinite type for which every
definite subtype is a dictionary entry type --
%G_VARIANT_TYPE_DICT_ENTRY, for example.
#NAME: iso_date
#PARENT: GLib.time_val_from_iso8601.gboolean
#COMMENT: an ISO 8601 encoded date string
#NAME: log_level
#PARENT: GLib.LogFunc.none
#COMMENT: the log level of the message (including the
    fatal and recursion flags)
#NAME: uri
#PARENT: GLib.BookmarkFile.set_modified.none
#COMMENT: a valid URI
#NAME: query_unix_fd
#PARENT: GLib.Source.query_unix_fd
#COMMENT: the conditions reported on the fd
#NAME: size
#PARENT: GLib.Bytes.new.Bytes
#COMMENT: the size of @data
#NAME: tmpl
#PARENT: GLib.mkdtemp_full.utf8
#COMMENT: template directory name
#NAME: dummy3
#PARENT: GLib.HookList
#COMMENT: unused
#NAME: set_name_by_id
#PARENT: GLib.Source
#COMMENT: Sets the name of a source using its ID.

This is a convenience utility to set source names from the return
value of g_idle_add(), g_timeout_add(), etc.

It is a programmer error to attempt to set the name of a non-existent
source.

More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.
#NAME: level_debug
#PARENT: GLib.LogLevelFlags
#COMMENT: log level for debug messages, see g_debug()
#NAME: no_arg
#PARENT: GLib.OptionFlags
#COMMENT: For options of the %G_OPTION_ARG_CALLBACK kind,
    this flag indicates that the callback does not take any argument
    (like a %G_OPTION_ARG_NONE option). Since 2.8
#NAME: match_options
#PARENT: GLib.Regex.split_simple.utf8
#COMMENT: match options, or 0
#NAME: value
#PARENT: GLib.Variant.classify.VariantClass
#COMMENT: a #GVariant
#NAME: strchug
#PARENT: GLib.strchug
#COMMENT: @string
#NAME: hook
#PARENT: GLib.hook_unref.none
#COMMENT: the #GHook to unref
#NAME: free
#PARENT: GLib.ByteArray.free
#COMMENT: the element data if @free_segment is %FALSE, otherwise
         %NULL.  The element data should be freed using g_free().
#NAME: format
#PARENT: GLib.Variant.new_parsed_va.Variant
#COMMENT: a text format #GVariant
#NAME: sibling
#PARENT: GLib.hook_insert_before.none
#COMMENT: the #GHook to insert the new #GHook before
#NAME: mkstemp_full
#PARENT: GLib
#COMMENT: Opens a temporary file. See the mkstemp() documentation
on most UNIX-like systems.

The parameter is a string that should follow the rules for
mkstemp() templates, i.e. contain the string "XXXXXX".
g_mkstemp_full() is slightly more flexible than mkstemp()
in that the sequence does not have to occur at the very end of the
template and you can pass a @mode and additional @flags. The X
string will be modified to form the name of a file that didn't exist.
The string should be in the GLib file name encoding. Most importantly,
on Windows it should be in UTF-8.
#NAME: source_remove_by_funcs_user_data
#PARENT: GLib
#COMMENT: Removes a source from the default main loop context given the
source functions and user data. If multiple sources exist with the
same source functions and user data, only one will be destroyed.
#NAME: elapsed
#PARENT: GLib.Timer.elapsed
#COMMENT: seconds elapsed as a floating point value, including any
         fractional part.
#NAME: allow_utf8
#PARENT: GLib.String.append_uri_escaped.String
#COMMENT: set %TRUE if the escaped string may include UTF8 characters
#NAME: ScannerMsgFunc
#PARENT: GLib
#COMMENT: Specifies the type of the message handler function.
#NAME: new
#PARENT: GLib.OptionContext.new
#COMMENT: a newly created #GOptionContext, which must be
   freed with g_option_context_free() after use.
#NAME: test_subprocess
#PARENT: GLib
#COMMENT: Returns %TRUE (after g_test_init() has been called) if the test
program is running under g_test_trap_subprocess().
#NAME: direct_hash
#PARENT: GLib.direct_hash
#COMMENT: a hash value corresponding to the key.
#NAME: utf8_find_prev_char
#PARENT: GLib.utf8_find_prev_char
#COMMENT: a pointer to the found character or %NULL.
#NAME: add_hours
#PARENT: GLib.DateTime
#COMMENT: Creates a copy of @datetime and adds the specified number of hours.
Add negative values to subtract hours.
#NAME: SOURCE_CONTINUE
#PARENT: GLib
#COMMENT: Use this macro as the return value of a #GSourceFunc to leave
the #GSource in the main loop.
#NAME: base64_decode_step
#PARENT: GLib
#COMMENT: Incrementally decode a sequence of binary data from its Base-64 stringified
representation. By calling this function multiple times you can convert
data in chunks to avoid having to have the full encoded data in memory.

The output buffer must be large enough to fit all the data that will
be written to it. Since base64 encodes 3 bytes in 4 chars you need
at least: (@len / 4) * 3 + 3 bytes (+ 3 may be needed in case of non-zero
state).
#NAME: concat
#PARENT: GLib.SList.concat
#COMMENT: the start of the new #GSList
#NAME: minimized_quantity
#PARENT: GLib.test_minimized_result.none
#COMMENT: the reported value
#NAME: strv
#PARENT: GLib.strv_contains.gboolean
#COMMENT: a %NULL-terminated array of strings
#NAME: queue
#PARENT: GLib.AsyncQueue.sort_unlocked.none
#COMMENT: a #GAsyncQueue
#NAME: remove_poll
#PARENT: GLib.MainContext
#COMMENT: Removes file descriptor from the set of file descriptors to be
polled for a particular context.
#NAME: regex
#PARENT: GLib.Regex.replace_literal.utf8
#COMMENT: a #GRegex structure
#NAME: strsplit
#PARENT: GLib
#COMMENT: Splits a string into a maximum of @max_tokens pieces, using the given
@delimiter. If @max_tokens is reached, the remainder of @string is
appended to the last token.

As an example, the result of g_strsplit (":a:bc::d:", ":", -1) is a
%NULL-terminated vector containing the six strings "", "a", "bc", "", "d"
and "".

As a special case, the result of splitting the empty string "" is an empty
vector, not a vector containing a single string. The reason for this
special case is that being able to represent a empty vector is typically
more useful than consistent handling of empty elements. If you do need
to represent empty elements, you'll need to check for the empty string
before calling g_strsplit().
#NAME: nth
#PARENT: GLib.SList.nth
#COMMENT: the element, or %NULL if the position is off
    the end of the #GSList
#NAME: new
#PARENT: GLib.Sequence
#COMMENT: Creates a new GSequence. The @data_destroy function, if non-%NULL will
be called on all items when the sequence is destroyed and on items that
are removed from the sequence.
#NAME: error
#PARENT: GLib.Scanner
#COMMENT: Outputs an error message, via the #GScanner message handler.
#NAME: key
#PARENT: GLib.DebugKey
#COMMENT: the string
#NAME: new_with_free_func
#PARENT: GLib.Bytes.new_with_free_func
#COMMENT: a new #GBytes
#NAME: unexp_eof_in_comment
#PARENT: GLib.ErrorType
#COMMENT: unterminated comment
#NAME: init
#PARENT: GLib.RecMutex
#COMMENT: Initializes a #GRecMutex so that it can be used.

This function is useful to initialize a recursive mutex
that has been allocated on the stack, or as part of a larger
structure.

It is not necessary to initialise a recursive mutex that has been
statically allocated.

|[<!-- language="C" -->
  typedef struct {
    GRecMutex m;
    ...
  } Blob;

Blob *b;

b = g_new (Blob, 1);
g_rec_mutex_init (&b->m);
]|

Calling g_rec_mutex_init() on an already initialized #GRecMutex
leads to undefined behaviour.

To undo the effect of g_rec_mutex_init() when a recursive mutex
is no longer needed, use g_rec_mutex_clear().
#NAME: invalid_data_character
#PARENT: GLib.RegexError
#COMMENT: In JavaScript compatibility mode,
    "[" is an invalid data character. Since: 2.34
#NAME: key_id
#PARENT: GLib.datalist_id_replace_data.gboolean
#COMMENT: the #GQuark identifying a data element
#NAME: uppercase_letter
#PARENT: GLib.UnicodeType
#COMMENT: General category "Letter, Uppercase" (Lu)
#NAME: mkdtemp
#PARENT: GLib.mkdtemp
#COMMENT: A pointer to @tmpl, which has been modified
    to hold the directory name.  In case of errors, %NULL is
    returned and %errno will be set.
#NAME: exit_status
#PARENT: GLib.spawn_command_line_sync.gboolean
#COMMENT: return location for child exit status, as returned by waitpid()
#NAME: get_days_in_month
#PARENT: GLib.Date
#COMMENT: Returns the number of days in a month, taking leap
years into account.
#NAME: sort
#PARENT: GLib.List.sort
#COMMENT: the (possibly changed) start of the #GList
#NAME: link_
#PARENT: GLib.Queue.push_nth_link.none
#COMMENT: the link to add to @queue
#NAME: format
#PARENT: GLib.String.vprintf.none
#COMMENT: the string format. See the printf() documentation
#NAME: glagolitic
#PARENT: GLib.UnicodeScript
#COMMENT: Glagolitic
#NAME: message
#PARENT: GLib.Error.new_literal.Error
#COMMENT: error message
#NAME: get_length
#PARENT: GLib.MappedFile
#COMMENT: Returns the length of the contents of a #GMappedFile.
#NAME: MarkupParseContext
#PARENT: GLib
#COMMENT: A parse context is used to parse a stream of bytes that
you expect to contain marked-up text.

See g_markup_parse_context_new(), #GMarkupParser, and so
on for more details.
#NAME: subtract_months
#PARENT: GLib.Date
#COMMENT: Moves a date some number of months into the past.
If the current day of the month doesn't exist in
the destination month, the day of the month
may change. The date must be valid.
#NAME: channel
#PARENT: GLib.IOChannel.set_flags.IOStatus
#COMMENT: a #GIOChannel
#NAME: minute
#PARENT: GLib.DateTime.new.DateTime
#COMMENT: the minute component of the date
#NAME: microseconds
#PARENT: GLib.usleep.none
#COMMENT: number of microseconds to pause
#NAME: user_data
#PARENT: GLib.SList.foreach.none
#COMMENT: user data to pass to the function
#NAME: strdup_printf
#PARENT: GLib.strdup_printf
#COMMENT: a newly-allocated string holding the result
#NAME: post_order
#PARENT: GLib.TraverseType
#COMMENT: visits the node's children, then the node itself.
#NAME: prgname
#PARENT: GLib.set_prgname.none
#COMMENT: the name of the program.
#NAME: symbol
#PARENT: GLib.Scanner.scope_add_symbol.none
#COMMENT: the symbol to add
#NAME: quark_from_static_string
#PARENT: GLib.quark_from_static_string
#COMMENT: the #GQuark identifying the string, or 0 if @string is %NULL
#NAME: str_is_ascii
#PARENT: GLib.str_is_ascii
#COMMENT: %TRUE if @str is ASCII
#NAME: test_add_data_func
#PARENT: GLib
#COMMENT: Create a new test case, similar to g_test_create_case(). However
the test is assumed to use no fixture, and test suites are automatically
created on the fly and added to the root fixture, based on the
slash-separated portions of @testpath. The @test_data argument
will be passed as first argument to @test_func.

If @testpath includes the component "subprocess" anywhere in it,
the test will be skipped by default, and only run if explicitly
required via the `-p` command-line option or g_test_trap_subprocess().
#NAME: unknown
#PARENT: GLib.UnicodeBreakType
#COMMENT: Unknown (XX)
#NAME: char_number
#PARENT: GLib.MarkupParseContext.get_position.none
#COMMENT: return location for a char-on-line number, or %NULL
#NAME: iter
#PARENT: GLib.Sequence.sort_changed_iter.none
#COMMENT: a #GSequenceIter
#NAME: sized_new
#PARENT: GLib.PtrArray
#COMMENT: Creates a new #GPtrArray with @reserved_size pointers preallocated
and a reference count of 1. This avoids frequent reallocation, if
you are going to add many pointers to the array. Note however that
the size of the array is still 0.
#NAME: 
#PARENT: GLib.VariantBuilder.add.none...
#COMMENT: arguments, as per @format_string
#NAME: sprintf
#PARENT: GLib.sprintf
#COMMENT: the number of bytes printed.
#NAME: valid_chars
#PARENT: GLib.strcanon.utf8
#COMMENT: bytes permitted in @string
#NAME: sort_with_data
#PARENT: GLib.List.sort_with_data
#COMMENT: the (possibly changed) start of the #GList
#NAME: parser
#PARENT: GLib.MarkupParseContext.new.MarkupParseContext
#COMMENT: a #GMarkupParser
#NAME: seed
#PARENT: GLib.Rand.set_seed_array.none
#COMMENT: array to initialize with
#NAME: context
#PARENT: GLib.MainContext.find_source_by_id.Source
#COMMENT: a #GMainContext (if %NULL, the default context will be used)
#NAME: array
#PARENT: GLib.ByteArray.unref.none
#COMMENT: A #GByteArray
#NAME: user_data
#PARENT: GLib.DuplicateFunc.gpointer
#COMMENT: user data that was specified in g_datalist_id_dup_data()
#NAME: v1
#PARENT: GLib.direct_equal.gboolean
#COMMENT: a key
#NAME: v2
#PARENT: GLib.direct_equal.gboolean
#COMMENT: a key to compare with @v1
#NAME: format
#PARENT: GLib.log.none
#COMMENT: the message format. See the printf() documentation
#NAME: snprintf
#PARENT: GLib.snprintf
#COMMENT: the number of bytes which would be produced if the buffer
    was large enough.
#NAME: n
#PARENT: GLib.strndup.utf8
#COMMENT: the maximum number of bytes to copy from @str
#NAME: hangul_lvt_syllable
#PARENT: GLib.UnicodeBreakType
#COMMENT: Hangul LVT Syllable (H3)
#NAME: new_tuple
#PARENT: GLib.Variant
#COMMENT: Creates a new tuple #GVariant out of the items in @children.  The
type is determined from the types of @children.  No entry in the
@children array may be %NULL.

If @n_children is 0 then the unit tuple is constructed.

If the @children are floating references (see g_variant_ref_sink()), the
new instance takes ownership of them as if via g_variant_ref_sink().
#NAME: c
#PARENT: GLib.ascii_digit_value.gint
#COMMENT: an ASCII character
#NAME: hash_table
#PARENT: GLib.HashTable.remove_all.none
#COMMENT: a #GHashTable
#NAME: Checksum
#PARENT: GLib
#COMMENT: An opaque structure representing a checksumming operation.
To create a new GChecksum, use g_checksum_new(). To free
a GChecksum, use g_checksum_free().
#NAME: hash_table
#PARENT: GLib.HashTable.get_keys.gpointer
#COMMENT: a #GHashTable
#NAME: double_equal
#PARENT: GLib
#COMMENT: Compares the two #gdouble values being pointed to and returns
%TRUE if they are equal.
It can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using non-%NULL pointers to doubles as keys in a
#GHashTable.
#NAME: args
#PARENT: GLib.strdup_vprintf.utf8
#COMMENT: the list of parameters to insert into the format string
#NAME: log_level
#PARENT: GLib.TestLogFatalFunc.gboolean
#COMMENT: the log level of the message (including the fatal and recursion flags)
#NAME: len
#PARENT: GLib.ucs4_to_utf16.guint16
#COMMENT: the maximum length (number of characters) of @str to use.
    If @len < 0, then the string is nul-terminated.
#NAME: date
#PARENT: GLib.Date.add_months.none
#COMMENT: a #GDate to increment
#NAME: format
#PARENT: GLib.String.append_vprintf.none
#COMMENT: the string format. See the printf() documentation
#NAME: save
#PARENT: GLib.base64_encode_step.gsize
#COMMENT: Saved state between steps, initialize to 0
#NAME: equal
#PARENT: GLib.Variant
#COMMENT: Checks if @one and @two have the same type and value.

The types of @one and @two are #gconstpointer only to allow use of
this function with #GHashTable.  They must each be a #GVariant.
#NAME: set_comment
#PARENT: GLib.KeyFile.set_comment
#COMMENT: %TRUE if the comment was written, %FALSE otherwise
#NAME: regex_check_replacement
#PARENT: GLib
#COMMENT: Checks whether @replacement is a valid replacement string
(see g_regex_replace()), i.e. that all escape sequences in
it are valid.

If @has_references is not %NULL then @replacement is checked
for pattern references. For instance, replacement text 'foo\n'
does not contain references and may be evaluated without information
about actual match, but '\0\1' (whole match followed by first
subpattern) requires valid #GMatchInfo object.
#NAME: input_name
#PARENT: GLib.Scanner
#COMMENT: name of input stream, featured by the default message handler
#NAME: int
#PARENT: GLib.Rand.int
#COMMENT: a random number
#NAME: notify
#PARENT: GLib.unix_signal_add_full.guint
#COMMENT: #GDestroyNotify for @handler
#NAME: context
#PARENT: GLib.OptionContext.set_translate_func.none
#COMMENT: a #GOptionContext
#NAME: queue
#PARENT: GLib.Queue.push_nth.none
#COMMENT: a #GQueue
#NAME: user_data_dnotify
#PARENT: GLib.MarkupParseContext.new.MarkupParseContext
#COMMENT: user data destroy notifier called when
    the parse context is freed
#NAME: val
#PARENT: GLib.atomic_int_or.guint
#COMMENT: the value to 'or'
#NAME: len
#PARENT: GLib.String.overwrite_len.String
#COMMENT: the number of bytes to write from @val
#NAME: filename_display_basename
#PARENT: GLib
#COMMENT: Returns the display basename for the particular filename, guaranteed
to be valid UTF-8. The display name might not be identical to the filename,
for instance there might be problems converting it to UTF-8, and some files
can be translated in the display.

If GLib cannot make sense of the encoding of @filename, as a last resort it
replaces unknown characters with U+FFFD, the Unicode replacement character.
You can search the result for the UTF-8 encoding of this character (which is
"\357\277\275" in octal notation) to find out if @filename was in an invalid
encoding.

You must pass the whole absolute pathname to this functions so that
translation of well known locations can be done.

This function is preferred over g_filename_display_name() if you know the
whole path, as it allows translation.
#NAME: items_read
#PARENT: GLib.ucs4_to_utf8.utf8
#COMMENT: location to store number of characters
    read, or %NULL.
#NAME: mode
#PARENT: GLib.mkdtemp_full.utf8
#COMMENT: permissions to create the temporary directory with
#NAME: date
#PARENT: GLib.Date.subtract_days.none
#COMMENT: a #GDate to decrement
#NAME: new
#PARENT: GLib.MappedFile
#COMMENT: Maps a file into memory. On UNIX, this is using the mmap() function.

If @writable is %TRUE, the mapped buffer may be modified, otherwise
it is an error to modify the mapped buffer. Modifications to the buffer
are not visible to other processes mapping the same file, and are not
written back to the file.

Note that modifications of the underlying file might affect the contents
of the #GMappedFile. Therefore, mapping should only be used if the file
will not be modified, or if all modifications of the file are done
atomically (e.g. using g_file_set_contents()).

If @filename is the name of an empty, regular file, the function
will successfully return an empty #GMappedFile. In other cases of
size 0 (e.g. device files such as /dev/null), @error will be set
to the #GFileError value #G_FILE_ERROR_INVAL.
#NAME: bad_utf8
#PARENT: GLib.MarkupError
#COMMENT: text being parsed was not valid UTF-8
#NAME: ref
#PARENT: GLib.Thread
#COMMENT: Increase the reference count on @thread.
#NAME: val
#PARENT: GLib.atomic_pointer_add.gssize
#COMMENT: the value to add
#NAME: string
#PARENT: GLib.snprintf.gint
#COMMENT: the buffer to hold the output.
#NAME: domain
#PARENT: GLib.Error.new_valist.Error
#COMMENT: error domain
#NAME: get_line_term
#PARENT: GLib.IOChannel
#COMMENT: This returns the string that #GIOChannel uses to determine
where in the file a line break occurs. A value of %NULL
indicates autodetection.
#NAME: dcgettext
#PARENT: GLib.dcgettext
#COMMENT: the translated string for the given locale category
#NAME: app
#PARENT: GLib.Variant.new_parsed_va.Variant
#COMMENT: a pointer to a #va_list
#NAME: stpcpy
#PARENT: GLib
#COMMENT: Copies a nul-terminated string into the dest buffer, include the
trailing nul, and return a pointer to the trailing nul byte.
This is useful for concatenating multiple strings together
without having to repeatedly scan for the end.
#NAME: parse_error_print_context
#PARENT: GLib.Variant
#COMMENT: Pretty-prints a message showing the context of a #GVariant parse
error within the string for which parsing was attempted.

The resulting string is suitable for output to the console or other
monospace media where newlines are treated in the usual way.

The message will typically look something like one of the following:

|[
unterminated string constant:
  (1, 2, 3, 'abc
            ^^^^
]|

or

|[
unable to find a common type:
  [1, 2, 3, 'str']
   ^        ^^^^^
]|

The format of the message may change in a future version.

@error must have come from a failed attempt to g_variant_parse() and
@source_str must be exactly the same string that caused the error.
If @source_str was not nul-terminated when you passed it to
g_variant_parse() then you must add nul termination before using this
function.
#NAME: first_element
#PARENT: GLib.build_filename.utf8
#COMMENT: the first element in the path
#NAME: match
#PARENT: GLib.Regex.match
#COMMENT: %TRUE is the string matched, %FALSE otherwise
#NAME: exclusive
#PARENT: GLib.ThreadPool.new.ThreadPool
#COMMENT: should this thread pool be exclusive?
#NAME: 
#PARENT: GLib.Variant.get.none...
#COMMENT: arguments, as per @format_string
#NAME: unref_and_unlock
#PARENT: GLib.AsyncQueue
#COMMENT: Decreases the reference count of the asynchronous @queue by 1
and releases the lock. This function must be called while holding
the @queue's lock. If the reference count went to 0, the @queue
will be destroyed and the memory allocated will be freed.
#NAME: get_current_time
#PARENT: GLib
#COMMENT: Equivalent to the UNIX gettimeofday() function, but portable.

You may find g_get_real_time() to be more convenient.
#NAME: default
#PARENT: GLib.FormatSizeFlags
#COMMENT: behave the same as g_format_size()
#NAME: format_size_full
#PARENT: GLib.format_size_full
#COMMENT: a newly-allocated formatted string containing a human
    readable file size
#NAME: len
#PARENT: GLib.utf8_strreverse.utf8
#COMMENT: the maximum length of @str to use, in bytes. If @len < 0,
    then the string is nul-terminated.
#NAME: cmp_data
#PARENT: GLib.Sequence.insert_sorted.SequenceIter
#COMMENT: user data passed to @cmp_func.
#NAME: unichar_decompose
#PARENT: GLib
#COMMENT: Performs a single decomposition step of the
Unicode canonical decomposition algorithm.

This function does not include compatibility
decompositions. It does, however, include algorithmic
Hangul Jamo decomposition, as well as 'singleton'
decompositions which replace a character by a single
other character. In the case of singletons *@b will
be set to zero.

If @ch is not decomposable, *@a is set to @ch and *@b
is set to zero.

Note that the way Unicode decomposition pairs are
defined, it is guaranteed that @b would not decompose
further, but @a may itself decompose.  To get the full
canonical decomposition for @ch, one would need to
recursively call this function on @a.  Or use
g_unichar_fully_decompose().

See
[UAX#15](http://unicode.org/reports/tr15/)
for details.
#NAME: ref
#PARENT: GLib.MappedFile.ref
#COMMENT: the passed in #GMappedFile.
#NAME: hook_list
#PARENT: GLib.Hook.insert_before.none
#COMMENT: a #GHookList
#NAME: pre_order
#PARENT: GLib.TraverseType
#COMMENT: visits a node, then its children.
#NAME: malayalam
#PARENT: GLib.UnicodeScript
#COMMENT: Malayalam
#NAME: sequence_swap
#PARENT: GLib
#COMMENT: Swaps the items pointed to by @a and @b. It is allowed for @a and @b
to point into difference sequences.
#NAME: dir
#PARENT: GLib.Dir.close.none
#COMMENT: a #GDir* created by g_dir_open()
#NAME: set_size
#PARENT: GLib.String
#COMMENT: Sets the length of a #GString. If the length is less than
the current length, the string will be truncated. If the
length is greater than the current length, the contents
of the newly added area are undefined. (However, as
always, string->str[string->len] will be a nul byte.)
#NAME: len
#PARENT: GLib.utf8_casefold.utf8
#COMMENT: length of @str, in bytes, or -1 if @str is nul-terminated.
#NAME: is_normal_form
#PARENT: GLib.Variant
#COMMENT: Checks if @value is in normal form.

The main reason to do this is to detect if a given chunk of
serialised data is in normal form: load the data into a #GVariant
using g_variant_new_from_data() and then use this function to
check.

If @value is found to be in normal form then it will be marked as
being trusted.  If the value was already marked as being trusted then
this function will immediately return %TRUE.
#NAME: position
#PARENT: GLib.Scanner
#COMMENT: char number of the last token from g_scanner_get_next_token()
#NAME: get_help
#PARENT: GLib.OptionContext
#COMMENT: Returns a formatted, translated help text for the given context.
To obtain the text produced by `--help`, call
`g_option_context_get_help (context, TRUE, NULL)`.
To obtain the text produced by `--help-all`, call
`g_option_context_get_help (context, FALSE, NULL)`.
To obtain the help text for an option group, call
`g_option_context_get_help (context, FALSE, group)`.
#NAME: pattern
#PARENT: GLib.Regex.new.Regex
#COMMENT: the regular expression
#NAME: value
#PARENT: GLib.Variant.get_uint32.guint32
#COMMENT: a uint32 #GVariant instance
#NAME: inval
#PARENT: GLib.FileError
#COMMENT: Invalid argument. This is used to indicate
    various kinds of problems with passing the wrong argument to a
    library function.
#NAME: uri
#PARENT: GLib.BookmarkFile.set_visited.none
#COMMENT: a valid URI
#NAME: GSIZE_FORMAT
#PARENT: GLib
#COMMENT: This is the platform dependent conversion specifier for scanning
and printing values of type #gsize. See also #G_GINT16_FORMAT.
#NAME: direct_equal
#PARENT: GLib.direct_equal
#COMMENT: %TRUE if the two keys match.
#NAME: string
#PARENT: GLib.pattern_match_string.gboolean
#COMMENT: the UTF-8 encoded string to match
#NAME: 
#PARENT: GLib.print.none...
#COMMENT: the parameters to insert into the format string
#NAME: user_data
#PARENT: GLib.List.foreach.none
#COMMENT: user data to pass to the function
#NAME: ascii_strup
#PARENT: GLib
#COMMENT: Converts all lower case ASCII letters to upper case ASCII letters.
#NAME: nullify_location
#PARENT: GLib.nullify_pointer.none
#COMMENT: the memory address of the pointer.
#NAME: new
#PARENT: GLib.AsyncQueue
#COMMENT: Creates a new asynchronous queue.
#NAME: OPTION_REMAINING
#PARENT: GLib
#COMMENT: If a long option in the main group has this name, it is not treated as a
regular option. Instead it collects all non-option arguments which would
otherwise be left in `argv`. The option must be of type
%G_OPTION_ARG_CALLBACK, %G_OPTION_ARG_STRING_ARRAY
or %G_OPTION_ARG_FILENAME_ARRAY.


Using #G_OPTION_REMAINING instead of simply scanning `argv`
for leftover arguments has the advantage that GOption takes care of
necessary encoding conversions for strings or filenames.
#NAME: valid_dmy
#PARENT: GLib.Date
#COMMENT: Returns %TRUE if the day-month-year triplet forms a valid, existing day
in the range of days #GDate understands (Year 1 or later, no more than
a few thousand years in the future).
#NAME: string_len
#PARENT: GLib.Regex.split_full.utf8
#COMMENT: the length of @string, or -1 if @string is nul-terminated
#NAME: set_size
#PARENT: GLib.ByteArray.set_size
#COMMENT: the #GByteArray
#NAME: strcmp0
#PARENT: GLib.strcmp0
#COMMENT: an integer less than, equal to, or greater than zero, if @str1 is <, == or > than @str2.
#NAME: new_valist
#PARENT: GLib.Error.new_valist
#COMMENT: a new #GError
#NAME: new
#PARENT: GLib.Scanner.new
#COMMENT: the new #GScanner
#NAME: set_size
#PARENT: GLib.String.set_size
#COMMENT: @string
#NAME: unref
#PARENT: GLib.MainLoop
#COMMENT: Decreases the reference count on a #GMainLoop object by one. If
the result is zero, free the loop and free all associated memory.
#NAME: unknown_element
#PARENT: GLib.MarkupError
#COMMENT: error should be set by #GMarkupParser
    functions; element wasn't known
#NAME: pathname
#PARENT: GLib.mkdir_with_parents.gint
#COMMENT: a pathname in the GLib file name encoding
#NAME: invoke_full
#PARENT: GLib.MainContext
#COMMENT: Invokes a function in such a way that @context is owned during the
invocation of @function.

This function is the same as g_main_context_invoke() except that it
lets you specify the priority incase @function ends up being
scheduled as an idle and also lets you give a #GDestroyNotify for @data.

@notify should not assume that it is called from any particular
thread or with any particular context acquired.
#NAME: exist
#PARENT: GLib.FileError
#COMMENT: Operation not permitted; only the owner of
    the file (or other resource) or processes with special privileges
    can perform the operation.
#NAME: unix_fd_add
#PARENT: GLib
#COMMENT: Sets a function to be called when the IO condition, as specified by
@condition becomes true for @fd.

@function will be called when the specified IO condition becomes
%TRUE.  The function is expected to clear whatever event caused the
IO condition to become true and return %TRUE in order to be notified
when it happens again.  If @function returns %FALSE then the watch
will be cancelled.

The return value of this function can be passed to g_source_remove()
to cancel the watch at any time that it exists.

The source will never close the fd -- you must do it yourself.
#NAME: sibling
#PARENT: GLib.SList.insert_before.gpointer
#COMMENT: node to insert @data before
#NAME: free
#PARENT: GLib.MatchInfo
#COMMENT: If @match_info is not %NULL, calls g_match_info_unref(); otherwise does
nothing.
#NAME: telugu
#PARENT: GLib.UnicodeScript
#COMMENT: Telugu
#NAME: channel
#PARENT: GLib.IOChannel.seek_position.IOStatus
#COMMENT: a #GIOChannel
#NAME: array
#PARENT: GLib.Array.remove_index_fast.gpointer
#COMMENT: a @GArray
#NAME: sprintf
#PARENT: GLib
#COMMENT: An implementation of the standard sprintf() function which supports
positional parameters, as specified in the Single Unix Specification.

Note that it is usually better to use g_snprintf(), to avoid the
risk of buffer overflow.

See also g_strdup_printf().
#NAME: buffer
#PARENT: GLib.Checksum.get_digest.none
#COMMENT: output buffer
#NAME: seq
#PARENT: GLib.Sequence.append.SequenceIter
#COMMENT: a #GSequence
#NAME: to_data
#PARENT: GLib.KeyFile.to_data
#COMMENT: a newly allocated string holding
  the contents of the #GKeyFile
#NAME: TimeSpan
#PARENT: GLib
#COMMENT: A value representing an interval of time, in microseconds.
#NAME: line_number
#PARENT: GLib.MarkupParseContext.get_position.none
#COMMENT: return location for a line number, or %NULL
#NAME: insert
#PARENT: GLib.StringChunk.insert
#COMMENT: a pointer to the copy of @string within
    the #GStringChunk
#NAME: insert_before
#PARENT: GLib.Sequence
#COMMENT: Inserts a new item just before the item pointed to by @iter.
#NAME: get_context
#PARENT: GLib.MainLoop
#COMMENT: Returns the #GMainContext of @loop.
#NAME: message
#PARENT: GLib.Error
#COMMENT: human-readable informative error message
#NAME: mem_set_vtable
#PARENT: GLib
#COMMENT: Sets the #GMemVTable to use for memory allocation. You can use this
to provide custom memory allocation routines.

The @vtable only needs to provide malloc(), realloc(), and free()
functions; GLib can provide default implementations of the others.
The malloc() and realloc() implementations should return %NULL on
failure, GLib will handle error-checking for you. @vtable is copied,
so need not persist after this function has been called.

Note that this function must be called before using any other GLib
functions.
#NAME: log_default_handler
#PARENT: GLib
#COMMENT: The default log handler set up by GLib; g_log_set_default_handler()
allows to install an alternate default log handler.
This is used if no log handler has been set for the particular log
domain and log level combination. It outputs the message to stderr
or stdout and if the log level is fatal it calls abort(). It automatically
prints a new-line character after the message, so one does not need to be
manually included in @message.

The behavior of this log handler can be influenced by a number of
environment variables:

- `G_MESSAGES_PREFIXED`: A :-separated list of log levels for which
  messages should be prefixed by the program name and PID of the
  aplication.

- `G_MESSAGES_DEBUG`: A space-separated list of log domains for
  which debug and informational messages are printed. By default
  these messages are not printed.

stderr is used for levels %G_LOG_LEVEL_ERROR, %G_LOG_LEVEL_CRITICAL,
%G_LOG_LEVEL_WARNING and %G_LOG_LEVEL_MESSAGE. stdout is used for
the rest.
#NAME: strlcpy
#PARENT: GLib
#COMMENT: Portability wrapper that calls strlcpy() on systems which have it,
and emulates strlcpy() otherwise. Copies @src to @dest; @dest is
guaranteed to be nul-terminated; @src must be nul-terminated;
@dest_size is the buffer size, not the number of bytes to copy.

At most @dest_size - 1 characters will be copied. Always nul-terminates
(unless @dest_size is 0). This function does not allocate memory. Unlike
strncpy(), this function doesn't pad @dest (so it's often faster). It
returns the size of the attempted result, strlen (src), so if
@retval >= @dest_size, truncation occurred.

Caveat: strlcpy() is supposedly more secure than strcpy() or strncpy(),
but if you really want to avoid screwups, g_strdup() is an even better
idea.
#NAME: type_string
#PARENT: GLib.VariantType.string_is_valid.gboolean
#COMMENT: a pointer to any string
#NAME: pattern
#PARENT: GLib.test_expect_message.none
#COMMENT: a glob-style [pattern][glib-Glob-style-pattern-matching]
#NAME: group_name
#PARENT: GLib.KeyFile.get_integer.gint
#COMMENT: a group name
#NAME: find_custom
#PARENT: GLib.SList.find_custom
#COMMENT: the found #GSList element, or %NULL if it is not found
#NAME: format
#PARENT: GLib.fprintf.gint
#COMMENT: a standard printf() format string, but notice
         [string precision pitfalls][string-precision]
#NAME: scanner
#PARENT: GLib.Scanner.scope_remove_symbol.none
#COMMENT: a #GScanner
#NAME: data
#PARENT: GLib.Thread.try_new.Thread
#COMMENT: an argument to supply to the new thread
#NAME: text_len
#PARENT: GLib.Scanner.input_text.none
#COMMENT: the length of the text buffer
#NAME: new
#PARENT: GLib.VariantDict.new
#COMMENT: a #GVariantDict
#NAME: Pid
#PARENT: GLib
#COMMENT: A type which is used to hold a process identification.

On UNIX, processes are identified by a process id (an integer),
while Windows uses process handles (which are pointers).

GPid is used in GLib only for descendant processes spawned with
the g_spawn functions.
#NAME: MappedFile
#PARENT: GLib
#COMMENT: The #GMappedFile represents a file mapping created with
g_mapped_file_new(). It has only private members and should
not be accessed directly.
#NAME: queue
#PARENT: GLib.Queue.pop_head.gpointer
#COMMENT: a #GQueue
#NAME: ucs4_to_utf16
#PARENT: GLib
#COMMENT: Convert a string from UCS-4 to UTF-16. A 0 character will be
added to the result after the converted text.
#NAME: context
#PARENT: GLib.MarkupParseContext.end_parse.gboolean
#COMMENT: a #GMarkupParseContext
#NAME: separator
#PARENT: GLib.strjoin.utf8
#COMMENT: a string to insert between each of the
    strings, or %NULL
#NAME: spawn_sync
#PARENT: GLib.spawn_sync
#COMMENT: %TRUE on success, %FALSE if an error was set
#NAME: VoidFunc
#PARENT: GLib
#COMMENT: Declares a type of function which takes no arguments
and has no return value. It is used to specify the type
function passed to g_atexit().
#NAME: MICRO_VERSION
#PARENT: GLib
#COMMENT: The micro version number of the GLib library.

Like #gtk_micro_version, but from the headers used at
application compile time, rather than from the library
linked against at application run time.
#NAME: fd
#PARENT: GLib.Source.remove_poll.none
#COMMENT: a #GPollFD structure previously passed to g_source_add_poll().
#NAME: get_data
#PARENT: GLib.Bytes
#COMMENT: Get the byte data in the #GBytes. This data should not be modified.

This function will always return the same pointer for a given #GBytes.

%NULL may be returned if @size is 0. This is not guaranteed, as the #GBytes
may represent an empty string with @data non-%NULL and @size as 0. %NULL will
not be returned if @size is non-zero.
#NAME: free
#PARENT: GLib.SList
#COMMENT: Frees all of the memory used by a #GSList.
The freed elements are returned to the slice allocator.

If list elements contain dynamically-allocated memory,
you should either use g_slist_free_full() or free them manually
first.
#NAME: atomic_pointer_xor
#PARENT: GLib.atomic_pointer_xor
#COMMENT: the value of @atomic before the operation, unsigned
#NAME: context
#PARENT: GLib.MarkupParseContext.ref.MarkupParseContext
#COMMENT: a #GMarkupParseContext
#NAME: get_begin_iter
#PARENT: GLib.Sequence
#COMMENT: Returns the begin iterator for @seq.
#NAME: string
#PARENT: GLib.String.overwrite_len.String
#COMMENT: a #GString
#NAME: dupnames
#PARENT: GLib.RegexCompileFlags
#COMMENT: Names used to identify capturing subpatterns need not
    be unique. This can be helpful for certain types of pattern when it
    is known that only one instance of the named subpattern can ever be
    matched.
#NAME: base64_decode_step
#PARENT: GLib.base64_decode_step
#COMMENT: The number of bytes of output that was written
#NAME: is_error
#PARENT: GLib.Scanner.unexp_token.none
#COMMENT: if %TRUE it is output as an error. If %FALSE it is
    output as a warning.
#NAME: may_recurse
#PARENT: GLib.HookList.marshal_check.none
#COMMENT: %TRUE if hooks which are currently running
    (e.g. in another thread) are considered valid. If set to %FALSE,
    these are skipped
#NAME: osmanya
#PARENT: GLib.UnicodeScript
#COMMENT: Osmanya
#NAME: random_set_seed
#PARENT: GLib
#COMMENT: Sets the seed for the global random number generator, which is used
by the g_random_* functions, to @seed.
#NAME: utf8_to_utf16
#PARENT: GLib.utf8_to_utf16
#COMMENT: a pointer to a newly allocated UTF-16 string.
    This value must be freed with g_free(). If an error occurs,
    %NULL will be returned and @error set.
#NAME: list
#PARENT: GLib.List.first.gpointer
#COMMENT: any #GList element
#NAME: set_int64
#PARENT: GLib.KeyFile
#COMMENT: Associates a new integer value with @key under @group_name.
If @key cannot be found then it is created.
#NAME: data
#PARENT: GLib.List.insert_sorted_with_data.gpointer
#COMMENT: the data for the new element
#NAME: traverse
#PARENT: GLib.Tree
#COMMENT: Calls the given function for each node in the #GTree.
#NAME: int64_equal
#PARENT: GLib.int64_equal
#COMMENT: %TRUE if the two keys match.
#NAME: get_year
#PARENT: GLib.DateTime
#COMMENT: Retrieves the year represented by @datetime in the Gregorian calendar.
#NAME: new
#PARENT: GLib.TestLogBuffer
#COMMENT: Internal function for gtester to decode test log messages, no ABI guarantees provided.
#NAME: new_julian
#PARENT: GLib.Date.new_julian
#COMMENT: a newly-allocated #GDate initialized with @julian_day
#NAME: 
#PARENT: GLib.build_path.utf8...
#COMMENT: remaining elements in path, terminated by %NULL
#NAME: comment_single
#PARENT: GLib.TokenType
#COMMENT: one line comment
#NAME: hash_table
#PARENT: GLib.hash_table_destroy.none
#COMMENT: a #GHashTable
#NAME: new_double
#PARENT: GLib.Variant.new_double
#COMMENT: a floating reference to a new double #GVariant instance
#NAME: traverse
#PARENT: GLib.Node
#COMMENT: Traverses a tree starting at the given root #GNode.
It calls the given function for each node visited.
The traversal can be halted at any point by returning %TRUE from @func.
#NAME: context
#PARENT: GLib.MarkupParseContext.get_user_data.gpointer
#COMMENT: a #GMarkupParseContext
#NAME: uri
#PARENT: GLib.BookmarkFile.remove_group.gboolean
#COMMENT: a valid URI
#NAME: hostname_is_ascii_encoded
#PARENT: GLib
#COMMENT: Tests if @hostname contains segments with an ASCII-compatible
encoding of an Internationalized Domain Name. If this returns
%TRUE, you should decode the hostname with g_hostname_to_unicode()
before displaying it to the user.

Note that a hostname might contain a mix of encoded and unencoded
segments, and so it is possible for g_hostname_is_non_ascii() and
g_hostname_is_ascii_encoded() to both return %TRUE for a name.
#NAME: data
#PARENT: GLib.SList.find_custom.gpointer
#COMMENT: user data passed to the function
#NAME: unlink
#PARENT: GLib.Queue
#COMMENT: Unlinks @link_ so that it will no longer be part of @queue.
The link is not freed.

@link_ must be part of @queue.
#NAME: invalid_value
#PARENT: GLib.KeyFileError
#COMMENT: a value could not be parsed
#NAME: 
#PARENT: GLib.strconcat.utf8...
#COMMENT: a %NULL-terminated list of strings to append to the string
#NAME: flag_recursion
#PARENT: GLib.LogLevelFlags
#COMMENT: internal flag
#NAME: str_return
#PARENT: GLib.IOChannel.read_to_end.IOStatus
#COMMENT: Location to
             store a pointer to a string holding the remaining data in the
             #GIOChannel. This data should be freed with g_free() when no
             longer needed. This data is terminated by an extra nul
             character, but there may be other nuls in the intervening data.
#NAME: envp
#PARENT: GLib.environ_setenv.utf8
#COMMENT: an
    environment list that can be freed using g_strfreev() (e.g., as
    returned from g_get_environ()), or %NULL for an empty
    environment list
#NAME: rand_
#PARENT: GLib.Rand.set_seed_array.none
#COMMENT: a #GRand
#NAME: unprocessed
#PARENT: GLib.ThreadPool.unprocessed
#COMMENT: the number of unprocessed tasks
#NAME: remove
#PARENT: GLib.VariantDict
#COMMENT: Removes a key and its associated value from a #GVariantDict.
#NAME: ascii_formatd
#PARENT: GLib.ascii_formatd
#COMMENT: The pointer to the buffer with the converted string.
#NAME: list
#PARENT: GLib.SList.nth.gpointer
#COMMENT: a #GSList
#NAME: interval
#PARENT: GLib.TimeZone.get_offset.gint32
#COMMENT: an interval within the timezone
#NAME: group
#PARENT: GLib.OptionGroup.unref.none
#COMMENT: a #GOptionGroup
#NAME: queue
#PARENT: GLib.Queue.copy.Queue
#COMMENT: a #GQueue
#NAME: cur_token
#PARENT: GLib.Scanner
#COMMENT: Gets the current token type. This is simply the @token
field in the #GScanner structure.
#NAME: value
#PARENT: GLib.Variant.get_va.none
#COMMENT: a #GVariant
#NAME: new_static
#PARENT: GLib.Bytes.new_static
#COMMENT: a new #GBytes
#NAME: get_visited
#PARENT: GLib.BookmarkFile
#COMMENT: Gets the time the bookmark for @uri was last visited.

In the event the URI cannot be found, -1 is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
#NAME: listenv
#PARENT: GLib.listenv
#COMMENT: a %NULL-terminated
    list of strings which must be freed with g_strfreev().
#NAME: need_valids
#PARENT: GLib.Hook.find_data.Hook
#COMMENT: %TRUE if #GHook elements which have been destroyed
    should be skipped
#NAME: digest_type
#PARENT: GLib.Hmac.new.Hmac
#COMMENT: the desired type of digest
#NAME: base64_decode_inplace
#PARENT: GLib
#COMMENT: Decode a sequence of Base-64 encoded text into binary data
by overwriting the input data.
#NAME: index_
#PARENT: GLib.Variant.get_child_value.Variant
#COMMENT: the index of the child to fetch
#NAME: strchomp
#PARENT: GLib.strchomp
#COMMENT: @string
#NAME: flags
#PARENT: GLib.format_size_full.utf8
#COMMENT: #GFormatSizeFlags to modify the output
#NAME: 
#PARENT: GLib.test_get_filename.utf8...
#COMMENT: %NULL-terminated additional path segments
#NAME: format
#PARENT: GLib.test_maximized_result.none
#COMMENT: the format string of the report message
#NAME: tz
#PARENT: GLib.TimeZone.find_interval.gint
#COMMENT: a #GTimeZone
#NAME: hook
#PARENT: GLib.hook_prepend.none
#COMMENT: the #GHook to add to the start of @hook_list
#NAME: once_init_leave
#PARENT: GLib
#COMMENT: Counterpart to g_once_init_enter(). Expects a location of a static
0-initialized initialization variable, and an initialization value
other than 0. Sets the variable to the initialization value, and
releases concurrent threads blocking in g_once_init_enter() on this
initialization variable.
#NAME: source_id
#PARENT: GLib.MainContext.find_source_by_id.Source
#COMMENT: the source ID, as returned by g_source_get_id().
#NAME: new_file
#PARENT: GLib.IOChannel
#COMMENT: Open a file @filename as a #GIOChannel using mode @mode. This
channel will be closed when the last reference to it is dropped,
so there is no need to call g_io_channel_close() (though doing
so will not cause problems, as long as no attempt is made to
access the channel after it is closed).
#NAME: tree
#PARENT: GLib.Tree.unref.none
#COMMENT: a #GTree
#NAME: remove_index
#PARENT: GLib.ByteArray
#COMMENT: Removes the byte at the given index from a #GByteArray.
The following bytes are moved down one place.
#NAME: insert
#PARENT: GLib.PtrArray
#COMMENT: Inserts an element into the pointer array at the given index. The
array will grow in size automatically if necessary.
#NAME: get_length
#PARENT: GLib.Queue
#COMMENT: Returns the number of items in @queue.
#NAME: suite
#PARENT: GLib.TestSuite.add_suite.none
#COMMENT: a #GTestSuite
#NAME: set_buffered
#PARENT: GLib.IOChannel
#COMMENT: The buffering state can only be set if the channel's encoding
is %NULL. For any other encoding, the channel must be buffered.

A buffered channel can only be set unbuffered if the channel's
internal buffers have been flushed. Newly created channels or
channels which have returned %G_IO_STATUS_EOF
not require such a flush. For write-only channels, a call to
g_io_channel_flush () is sufficient. For all other channels,
the buffers may be flushed by a call to g_io_channel_seek_position ().
This includes the possibility of seeking with seek type %G_SEEK_CUR
and an offset of zero. Note that this means that socket-based
channels cannot be set unbuffered once they have had data
read from them.

On unbuffered channels, it is safe to mix read and write
calls from the new and old APIs, if this is necessary for
maintaining old code.

The default state of the channel is buffered.
#NAME: n
#PARENT: GLib.Queue.pop_nth_link.gpointer
#COMMENT: the link's position
#NAME: user_data
#PARENT: GLib.SList.sort_with_data.gpointer
#COMMENT: data to pass to comparison function
#NAME: exit
#PARENT: GLib.Thread
#COMMENT: Terminates the current thread.

If another thread is waiting for us using g_thread_join() then the
waiting thread will be woken up and get @retval as the return value
of g_thread_join().

Calling g_thread_exit() with a parameter @retval is equivalent to
returning @retval from the function @func, as given to g_thread_new().

You must only call g_thread_exit() from a thread that you created
yourself with g_thread_new() or related APIs. You must not call
this function from a thread created with another threading library
or or from within a #GThreadPool.
#NAME: ref
#PARENT: GLib.PtrArray
#COMMENT: Atomically increments the reference count of @array by one.
This function is thread-safe and may be called from any thread.
#NAME: child_watch_add
#PARENT: GLib.child_watch_add
#COMMENT: the ID (greater than 0) of the event source.
#NAME: insert_before
#PARENT: GLib.List
#COMMENT: Inserts a new element into the list before the given position.
#NAME: v_hex
#PARENT: GLib.TokenValue
#COMMENT: hex integer value
#NAME: year
#PARENT: GLib.date_valid_dmy.gboolean
#COMMENT: year
#NAME: add_application
#PARENT: GLib.BookmarkFile
#COMMENT: Adds the application with @name and @exec to the list of
applications that have registered a bookmark for @uri into
@bookmark.

Every bookmark inside a #GBookmarkFile must have at least an
application registered.  Each application must provide a name, a
command line useful for launching the bookmark, the number of times
the bookmark has been registered by the application and the last
time the application registered this bookmark.

If @name is %NULL, the name of the application will be the
same returned by g_get_application_name(); if @exec is %NULL, the
command line will be a composition of the program name as
returned by g_get_prgname() and the "\%u" modifier, which will be
expanded to the bookmark's URI.

This function will automatically take care of updating the
registrations count and timestamping in case an application
with the same @name had already registered a bookmark for
@uri inside @bookmark.

If no bookmark for @uri is found, one is created.
#NAME: seq
#PARENT: GLib.Sequence.get_end_iter.SequenceIter
#COMMENT: a #GSequence
#NAME: stack_p
#PARENT: GLib.TrashStack.height.guint
#COMMENT: a #GTrashStack
#NAME: mem
#PARENT: GLib.realloc.gpointer
#COMMENT: the memory to reallocate
#NAME: compare
#PARENT: GLib.SequenceIter.compare
#COMMENT: a negative number if @a comes before @b, 0 if they are
    equal, and a positive number if @a comes after @b
#NAME: block_size
#PARENT: GLib.slice_alloc0.gpointer
#COMMENT: the number of bytes to allocate
#NAME: source_remove_by_user_data
#PARENT: GLib.source_remove_by_user_data
#COMMENT: %TRUE if a source was found and removed.
#NAME: ref
#PARENT: GLib.AsyncQueue.ref
#COMMENT: the @queue that was passed in (since 2.6)
#NAME: unknown
#PARENT: GLib.UnicodeScript
#COMMENT: an unassigned code point
#NAME: add_unix_fd
#PARENT: GLib.Source
#COMMENT: Monitors @fd for the IO events in @events.

The tag returned by this function can be used to remove or modify the
monitoring of the fd using g_source_remove_unix_fd() or
g_source_modify_unix_fd().

It is not necessary to remove the fd before destroying the source; it
will be cleaned up automatically.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

As the name suggests, this function is not available on Windows.
#NAME: remove
#PARENT: GLib.SList.remove
#COMMENT: the new start of the #GSList
#NAME: utf8_strlen
#PARENT: GLib.utf8_strlen
#COMMENT: the length of the string in characters
#NAME: unref
#PARENT: GLib.DateTime
#COMMENT: Atomically decrements the reference count of @datetime by one.

When the reference count reaches zero, the resources allocated by
@datetime are freed
#NAME: overwrite
#PARENT: GLib.setenv.gboolean
#COMMENT: whether to change the variable if it already exists.
#NAME: hostname
#PARENT: GLib.filename_from_uri.filename
#COMMENT: Location to store hostname for the URI, or %NULL.
           If there is no hostname in the URI, %NULL will be
           stored in this location.
#NAME: read_name
#PARENT: GLib.Dir.read_name
#COMMENT: The entry's name or %NULL if there are no
  more entries. The return value is owned by GLib and
  must not be modified or freed.
#NAME: key_file
#PARENT: GLib.KeyFile.set_boolean_list.none
#COMMENT: a #GKeyFile
#NAME: limbu
#PARENT: GLib.UnicodeScript
#COMMENT: Limbu
#NAME: lookup_value
#PARENT: GLib.Variant.lookup_value
#COMMENT: the value of the dictionary key, or %NULL
#NAME: malloc
#PARENT: GLib.malloc
#COMMENT: a pointer to the allocated memory
#NAME: not_found
#PARENT: GLib.KeyFileError
#COMMENT: the file was not found
#NAME: ref
#PARENT: GLib.OptionGroup.ref
#COMMENT: a #GoptionGroup
#NAME: ref
#PARENT: GLib.Source
#COMMENT: Increases the reference count on a source by one.
#NAME: set_print_handler
#PARENT: GLib.set_print_handler
#COMMENT: the old print handler
#NAME: string
#PARENT: GLib.String.append_printf.none
#COMMENT: a #GString
#NAME: elapsed
#PARENT: GLib.Timer
#COMMENT: If @timer has been started but not stopped, obtains the time since
the timer was started. If @timer has been stopped, obtains the
elapsed time between the time it was started and the time it was
stopped. The return value is the number of seconds elapsed,
including any fractional part. The @microseconds out parameter is
essentially useless.
#NAME: clear
#PARENT: GLib.Date
#COMMENT: Initializes one or more #GDate structs to a sane but invalid
state. The cleared dates will not represent an existing date, but will
not contain garbage. Useful to init a date declared on the stack.
Validity can be tested with g_date_valid().
#NAME: set_boolean
#PARENT: GLib.KeyFile
#COMMENT: Associates a new boolean value with @key under @group_name.
If @key cannot be found then it is created.
#NAME: unichar_ispunct
#PARENT: GLib.unichar_ispunct
#COMMENT: %TRUE if @c is a punctuation or symbol character
#NAME: group_name
#PARENT: GLib.KeyFile.set_value.none
#COMMENT: a group name
#NAME: height
#PARENT: GLib.TrashStack.height
#COMMENT: the height of the stack
#NAME: date_get_days_in_month
#PARENT: GLib.date_get_days_in_month
#COMMENT: number of days in @month during the @year
#NAME: domain
#PARENT: GLib.Error.new.Error
#COMMENT: error domain
#NAME: free
#PARENT: GLib.List
#COMMENT: Frees all of the memory used by a #GList.
The freed elements are returned to the slice allocator.

If list elements contain dynamically-allocated memory, you should
either use g_list_free_full() or free them manually first.
#NAME: new_hook
#PARENT: GLib.HookCompareFunc.gint
#COMMENT: the #GHook being inserted
#NAME: get_utc_offset
#PARENT: GLib.DateTime
#COMMENT: Determines the offset to UTC in effect at the time and in the time
zone of @datetime.

The offset is the number of microseconds that you add to UTC time to
arrive at local time for the time zone (ie: negative numbers for time
zones west of GMT, positive numbers for east).

If @datetime represents UTC time, then the offset is always zero.
#NAME: string
#PARENT: GLib.StringChunk.insert.utf8
#COMMENT: the string to add
#NAME: month
#PARENT: GLib.Date.set_dmy.none
#COMMENT: month
#NAME: value
#PARENT: GLib.HashTable.lookup_extended.gboolean
#COMMENT: return location for the value associated with the key, or %NULL
#NAME: get_week_of_year
#PARENT: GLib.DateTime.get_week_of_year
#COMMENT: the ISO 8601 week number for @datetime.
#NAME: remove_by_user_data
#PARENT: GLib.Source
#COMMENT: Removes a source from the default main loop context given the user
data for the callback. If multiple sources exist with the same user
data, only one will be destroyed.
#NAME: Cond
#PARENT: GLib
#COMMENT: The #GCond struct is an opaque data structure that represents a
condition. Threads can block on a #GCond if they find a certain
condition to be false. If other threads change the state of this
condition they signal the #GCond, and that causes the waiting
threads to be woken up.

Consider the following example of a shared variable.  One or more
threads can wait for data to be published to the variable and when
another thread publishes the data, it can signal one of the waiting
threads to wake up to collect the data.

Here is an example for using GCond to block a thread until a condition
is satisfied:
|[<!-- language="C" -->
  gpointer current_data = NULL;
  GMutex data_mutex;
  GCond data_cond;

  void
  push_data (gpointer data)
  {
    g_mutex_lock (&data_mutex);
    current_data = data;
    g_cond_signal (&data_cond);
    g_mutex_unlock (&data_mutex);
  }

  gpointer
  pop_data (void)
  {
    gpointer data;

    g_mutex_lock (&data_mutex);
    while (!current_data)
      g_cond_wait (&data_cond, &data_mutex);
    data = current_data;
    current_data = NULL;
    g_mutex_unlock (&data_mutex);

    return data;
  }
]|
Whenever a thread calls pop_data() now, it will wait until
current_data is non-%NULL, i.e. until some other thread
has called push_data().

The example shows that use of a condition variable must always be
paired with a mutex.  Without the use of a mutex, there would be a
race between the check of @current_data by the while loop in
pop_data() and waiting. Specifically, another thread could set
@current_data after the check, and signal the cond (with nobody
waiting on it) before the first thread goes to sleep. #GCond is
specifically useful for its ability to release the mutex and go
to sleep atomically.

It is also important to use the g_cond_wait() and g_cond_wait_until()
functions only inside a loop which checks for the condition to be
true.  See g_cond_wait() for an explanation of why the condition may
not be true even after it returns.

If a #GCond is allocated in static storage then it can be used
without initialisation.  Otherwise, you should call g_cond_init()
on it and g_cond_clear() when done.

A #GCond should only be accessed via the g_cond_ functions.
#NAME: swap
#PARENT: GLib.Sequence
#COMMENT: Swaps the items pointed to by @a and @b. It is allowed for @a and @b
to point into difference sequences.
#NAME: new_delimiter
#PARENT: GLib.strdelimit.utf8
#COMMENT: the new delimiter character
#NAME: dollar_endonly
#PARENT: GLib.RegexCompileFlags
#COMMENT: A dollar metacharacter ("$") in the pattern
    matches only at the end of the string. Without this option, a
    dollar also matches immediately before the final character if
    it is a newline (but not before any other newlines). This option
    is ignored if #G_REGEX_MULTILINE is set.
#NAME: height
#PARENT: GLib.Tree
#COMMENT: Gets the height of a #GTree.

If the #GTree contains no nodes, the height is 0.
If the #GTree contains only one root node the height is 1.
If the root node has children the height is 2, etc.
#NAME: string
#PARENT: GLib.Regex.replace.utf8
#COMMENT: the string to perform matches against
#NAME: get_int64
#PARENT: GLib.Variant.get_int64
#COMMENT: a #gint64
#NAME: token
#PARENT: GLib.Scanner
#COMMENT: token parsed by the last g_scanner_get_next_token()
#NAME: address
#PARENT: GLib.bit_trylock.gboolean
#COMMENT: a pointer to an integer
#NAME: subpattern_name_too_long
#PARENT: GLib.RegexError
#COMMENT: Subpattern name is too long
    (maximum 32 characters). Since 2.16
#NAME: scope_id
#PARENT: GLib.Scanner.scope_add_symbol.none
#COMMENT: the scope id
#NAME: flags
#PARENT: GLib.mkstemp_full.gint
#COMMENT: flags to pass to an open() call in addition to O_EXCL
    and O_CREAT, which are passed automatically
#NAME: test_timer_start
#PARENT: GLib
#COMMENT: Start a timing test. Call g_test_timer_elapsed() when the task is supposed
to be done. Call this function again to restart the timer.
#NAME: ref
#PARENT: GLib.MarkupParseContext
#COMMENT: Increases the reference count of @context.
#NAME: HookFinalizeFunc
#PARENT: GLib
#COMMENT: Defines the type of function to be called when a hook in a
list of hooks gets finalized.
#NAME: hash_table
#PARENT: GLib.HashTable.get_keys_as_array.gpointer
#COMMENT: a #GHashTable
#NAME: dup_objv
#PARENT: GLib.Variant
#COMMENT: Gets the contents of an array of object paths #GVariant.  This call
makes a deep copy; the return result should be released with
g_strfreev().

If @length is non-%NULL then the number of elements in the result
is stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.
#NAME: wait
#PARENT: GLib.MainContext.wait
#COMMENT: %TRUE if the operation succeeded, and
  this thread is now the owner of @context.
#NAME: data
#PARENT: GLib.SList.insert_before.gpointer
#COMMENT: data to put in the newly-inserted node
#NAME: unknown
#PARENT: GLib.IOError
#COMMENT: another error occurred
#NAME: bookmark
#PARENT: GLib.BookmarkFile.remove_group.gboolean
#COMMENT: a #GBookmarkFile
#NAME: begin
#PARENT: GLib.sequence_remove_range.none
#COMMENT: a #GSequenceIter
#NAME: group_name
#PARENT: GLib.KeyFile.remove_key.gboolean
#COMMENT: a group name
#NAME: group_name
#PARENT: GLib.KeyFile.get_string_list.utf8
#COMMENT: a group name
#NAME: cset_skip_characters
#PARENT: GLib.ScannerConfig
#COMMENT: specifies which characters should be skipped
    by the scanner (the default is the whitespace characters: space,
    tab, carriage-return and line-feed).
#NAME: store
#PARENT: GLib.Variant
#COMMENT: Stores the serialised form of @value at @data.  @data should be
large enough.  See g_variant_get_size().

The stored data is in machine native byte order but may not be in
fully-normalised form if read from an untrusted source.  See
g_variant_get_normal_form() for a solution.

As with g_variant_get_data(), to be able to deserialise the
serialised variant successfully, its type and (if the destination
machine might be different) its endianness must also be available.

This function is approximately O(n) in the size of @data.
#NAME: utf8_strup
#PARENT: GLib.utf8_strup
#COMMENT: a newly allocated string, with all characters
   converted to uppercase.
#NAME: EqualFunc
#PARENT: GLib
#COMMENT: Specifies the type of a function used to test two values for
equality. The function should return %TRUE if both values are equal
and %FALSE otherwise.
#NAME: dest
#PARENT: GLib.Sequence.move_range.none
#COMMENT: a #GSequenceIter
#NAME: func
#PARENT: GLib.Sequence.foreach.none
#COMMENT: the function to call for each item in @seq
#NAME: node
#PARENT: GLib.NodeForeachFunc.none
#COMMENT: a #GNode.
#NAME: strreverse
#PARENT: GLib
#COMMENT: Reverses all of the bytes in a string. For example,
`g_strreverse ("abcdef")` will result in "fedcba".

Note that g_strreverse() doesn't work on UTF-8 strings
containing multibyte characters. For that purpose, use
g_utf8_strreverse().
#NAME: child_watch_source_new
#PARENT: GLib
#COMMENT: Creates a new child_watch source.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed.

Note that child watch sources can only be used in conjunction with
`g_spawn...` when the %G_SPAWN_DO_NOT_REAP_CHILD flag is used.

Note that on platforms where #GPid must be explicitly closed
(see g_spawn_close_pid()) @pid must not be closed while the
source is still active. Typically, you will want to call
g_spawn_close_pid() in the callback function for the source.

Note further that using g_child_watch_source_new() is not
compatible with calling `waitpid` with a nonpositive first
argument in the application. Calling waitpid() for individual
pids will still work fine.

Similarly, on POSIX platforms, the @pid passed to this function must
be greater than 0 (i.e. this function must wait for a specific child,
and cannot wait for one of many children by using a nonpositive argument).
#NAME: int
#PARENT: GLib.Rand
#COMMENT: Returns the next random #guint32 from @rand_ equally distributed over
the range [0..2^32-1].
#NAME: array
#PARENT: GLib.Array.sort.none
#COMMENT: a #GArray
#NAME: prepend
#PARENT: GLib.Sequence
#COMMENT: Adds a new item to the front of @seq
#NAME: unichar_tolower
#PARENT: GLib
#COMMENT: Converts a character to lower case.
#NAME: val
#PARENT: GLib.String.insert_len.String
#COMMENT: bytes to insert
#NAME: double
#PARENT: GLib.OptionArg
#COMMENT: The option takes a double argument. The argument
    can be formatted either for the user's locale or for the "C" locale.
    Since 2.12
#NAME: date
#PARENT: GLib.Date.subtract_months.none
#COMMENT: a #GDate to decrement
#NAME: seq
#PARENT: GLib.Sequence.get_iter_at_pos.SequenceIter
#COMMENT: a #GSequence
#NAME: remove_link
#PARENT: GLib.SList
#COMMENT: Removes an element from a #GSList, without
freeing the element. The removed element's next
link is set to %NULL, so that it becomes a
self-contained list with one element.

Removing arbitrary nodes from a singly-linked list
requires time that is proportional to the length of the list
(ie. O(n)). If you find yourself using g_slist_remove_link()
frequently, you should consider a different data structure,
such as the doubly-linked #GList.
#NAME: compile_options
#PARENT: GLib.Regex.match_simple.gboolean
#COMMENT: compile options for the regular expression, or 0
#NAME: element_size
#PARENT: GLib.Array.new.gpointer
#COMMENT: the size of each element in bytes
#NAME: spawn_check_exit_status
#PARENT: GLib.spawn_check_exit_status
#COMMENT: %TRUE if child exited successfully, %FALSE otherwise (and
    @error will be set)
#NAME: first_path
#PARENT: GLib.test_build_filename.utf8
#COMMENT: the first segment of the pathname
#NAME: msgid
#PARENT: GLib.dngettext.utf8
#COMMENT: message to translate
#NAME: vsnprintf
#PARENT: GLib
#COMMENT: A safer form of the standard vsprintf() function. The output is guaranteed
to not exceed @n characters (including the terminating nul character), so
it is easy to ensure that a buffer overflow cannot occur.

See also g_strdup_vprintf().

In versions of GLib prior to 1.2.3, this function may return -1 if the
output was truncated, and the truncated string may not be nul-terminated.
In versions prior to 1.3.12, this function returns the length of the output
string.

The return value of g_vsnprintf() conforms to the vsnprintf() function
as standardized in ISO C99. Note that this is different from traditional
vsnprintf(), which returns the length of the output string.

The format string may contain positional parameters, as specified in
the Single Unix Specification.
#NAME: get_num_processors
#PARENT: GLib
#COMMENT: Determine the approximate number of threads that the system will
schedule simultaneously for this process.  This is intended to be
used as a parameter to g_thread_pool_new() for CPU bound tasks and
similar cases.
#NAME: int
#PARENT: GLib.OptionArg
#COMMENT: The option takes an integer argument.
#NAME: KEY_FILE_DESKTOP_TYPE_APPLICATION
#PARENT: GLib
#COMMENT: The value of the #G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing applications.
#NAME: date_strftime
#PARENT: GLib.date_strftime
#COMMENT: number of characters written to the buffer, or 0 the buffer was too small
#NAME: key
#PARENT: GLib.KeyFile.set_locale_string_list.none
#COMMENT: a key
#NAME: pop_tail_link
#PARENT: GLib.Queue.pop_tail_link
#COMMENT: the #GList element at the tail of the queue, or %NULL
    if the queue is empty
#NAME: symbol
#PARENT: GLib.UnicodeBreakType
#COMMENT: Symbols Allowing Break After (SY)
#NAME: ShellError
#PARENT: GLib
#COMMENT: Error codes returned by shell functions.
#NAME: get_fixed_array
#PARENT: GLib.Variant.get_fixed_array
#COMMENT: a pointer to
    the fixed array
#NAME: strv_length
#PARENT: GLib.strv_length
#COMMENT: length of @str_array.
#NAME: georgian
#PARENT: GLib.UnicodeScript
#COMMENT: Georgian
#NAME: user_data
#PARENT: GLib.Sequence.foreach_range.none
#COMMENT: user data passed to @func
#NAME: free
#PARENT: GLib.BookmarkFile
#COMMENT: Frees a #GBookmarkFile.
#NAME: get_iso8601_week_of_year
#PARENT: GLib.Date
#COMMENT: Returns the week of the year, where weeks are interpreted according
to ISO 8601.
#NAME: length
#PARENT: GLib.KeyFile.set_locale_string_list.none
#COMMENT: the length of @list
#NAME: pspec
#PARENT: GLib.PatternSpec.free.none
#COMMENT: a #GPatternSpec
#NAME: fd
#PARENT: GLib.MainContext.add_poll.none
#COMMENT: a #GPollFD structure holding information about a file
     descriptor to watch.
#NAME: mime_type
#PARENT: GLib.BookmarkFile.set_mime_type.none
#COMMENT: a MIME type
#NAME: file_error_from_errno
#PARENT: GLib
#COMMENT: Gets a #GFileError constant based on the passed-in @err_no.
For example, if you pass in `EEXIST` this function returns
#G_FILE_ERROR_EXIST. Unlike `errno` values, you can portably
assume that all #GFileError values will exist.

Normally a #GFileError value goes into a #GError returned
from a function that manipulates files. So you would use
g_file_error_from_errno() when constructing a #GError.
#NAME: path_skip_root
#PARENT: GLib
#COMMENT: Returns a pointer into @file_name after the root component,
i.e. after the "/" in UNIX or "C:\" under Windows. If @file_name
is not an absolute path it returns %NULL.
#NAME: internal
#PARENT: GLib.RegexError
#COMMENT: Internal error of the regular expression engine.
    Since 2.16
#NAME: str1
#PARENT: GLib.utf8_collate.gint
#COMMENT: a UTF-8 encoded string
#NAME: user_data
#PARENT: GLib.Scanner.scope_foreach_symbol.none
#COMMENT: user data to pass to the function
#NAME: str2
#PARENT: GLib.utf8_collate.gint
#COMMENT: a UTF-8 encoded string
#NAME: get_sunday_weeks_in_year
#PARENT: GLib.Date
#COMMENT: Returns the number of weeks in the year, where weeks
are taken to start on Sunday. Will be 52 or 53. The
date must be valid. (Years always have 52 7-day periods,
plus 1 or 2 extra days depending on whether it's a leap
year. This function is basically telling you how many
Sundays are in the year, i.e. there are 53 Sundays if
one of the extra days happens to be a Sunday.)
#NAME: type
#PARENT: GLib.VariantType.is_variant.gboolean
#COMMENT: a #GVariantType
#NAME: list
#PARENT: GLib.SList.foreach.none
#COMMENT: a #GSList
#NAME: endptr
#PARENT: GLib.ascii_strtod.gdouble
#COMMENT: if non-%NULL, it returns the character after
          the last character used in the conversion.
#NAME: element
#PARENT: GLib.VariantType
#COMMENT: Determines the element type of an array or maybe type.

This function may only be used with array or maybe types.
#NAME: GINT32_MODIFIER
#PARENT: GLib
#COMMENT: The platform dependent length modifier for conversion specifiers
for scanning and printing values of type #gint32 or #guint32. It
is a string literal. See also #G_GINT16_MODIFIER.
#NAME: get_element
#PARENT: GLib.MarkupParseContext
#COMMENT: Retrieves the name of the currently open element.

If called from the start_element or end_element handlers this will
give the element_name as passed to those functions. For the parent
elements, see g_markup_parse_context_get_element_stack().
#NAME: val
#PARENT: GLib.atomic_int_and.guint
#COMMENT: the value to 'and'
#NAME: dgettext
#PARENT: GLib.dgettext
#COMMENT: The translated string
#NAME: cond
#PARENT: GLib.Cond.clear.none
#COMMENT: an initialised #GCond
#NAME: str_is_ascii
#PARENT: GLib
#COMMENT: Determines if a string is pure ASCII. A string is pure ASCII if it
contains no bytes with the high bit set.
#NAME: key
#PARENT: GLib.Tree.replace.none
#COMMENT: the key to insert
#NAME: priority
#PARENT: GLib.idle_add_full.guint
#COMMENT: the priority of the idle source. Typically this will be in the
           range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
#NAME: source
#PARENT: GLib.Source.set_ready_time.none
#COMMENT: a #GSource
#NAME: KEY_FILE_DESKTOP_KEY_TERMINAL
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the program should be run in a terminal window.
It is only valid for desktop entries with the
`Application` type.
#NAME: end_pos
#PARENT: GLib.MatchInfo.fetch_named_pos.gboolean
#COMMENT: pointer to location where to store
    the end position, or %NULL
#NAME: from_iso8601
#PARENT: GLib.TimeVal
#COMMENT: Converts a string containing an ISO 8601 encoded date and time
to a #GTimeVal and puts it into @time_.

@iso_date must include year, month, day, hours, minutes, and
seconds. It can optionally include fractions of a second and a time
zone indicator. (In the absence of any time zone indication, the
timestamp is assumed to be in local time.)
#NAME: channel
#PARENT: GLib.IOChannel.write_chars.IOStatus
#COMMENT: a #GIOChannel
#NAME: is_leap_year
#PARENT: GLib.Date.is_leap_year
#COMMENT: %TRUE if the year is a leap year
#NAME: no_common_type
#PARENT: GLib.VariantParseError
#COMMENT: could not find a common type for array entries
#NAME: items_written
#PARENT: GLib.ucs4_to_utf8.utf8
#COMMENT: location to store number of bytes
    written or %NULL. The value here stored does not include the
    trailing 0 byte.
#NAME: user_data
#PARENT: GLib.Func.none
#COMMENT: user data passed to g_list_foreach() or g_slist_foreach()
#NAME: add
#PARENT: GLib.TestSuite
#COMMENT: Adds @test_case to @suite.
#NAME: scanner
#PARENT: GLib.Scanner.destroy.none
#COMMENT: a #GScanner
#NAME: set_max_threads
#PARENT: GLib.ThreadPool.set_max_threads
#COMMENT: %TRUE on success, %FALSE if an error occurred
#NAME: needle
#PARENT: GLib.strrstr.utf8
#COMMENT: the nul-terminated string to search for
#NAME: shavian
#PARENT: GLib.UnicodeScript
#COMMENT: Shavian
#NAME: context
#PARENT: GLib.MarkupParseContext.unref.none
#COMMENT: a #GMarkupParseContext
#NAME: directory_music
#PARENT: GLib.UserDirectory
#COMMENT: the user's Music directory
#NAME: type
#PARENT: GLib.VariantType.dup_string.utf8
#COMMENT: a #GVariantType
#NAME: outbytes_left
#PARENT: GLib.iconv.gsize
#COMMENT: inout parameter, bytes available to fill in @outbuf
#NAME: quantifier_too_big
#PARENT: GLib.RegexError
#COMMENT: Number too big in "{}" quantifier.
    Since 2.16
#NAME: msg
#PARENT: GLib.test_skip.none
#COMMENT: explanation
#NAME: unichar_iszerowidth
#PARENT: GLib.unichar_iszerowidth
#COMMENT: %TRUE if the character has zero width
#NAME: key_file
#PARENT: GLib.KeyFile.get_groups.utf8
#COMMENT: a #GKeyFile
#NAME: n_block_bytes
#PARENT: GLib.try_malloc_n.gpointer
#COMMENT: the size of each block in bytes
#NAME: double_range
#PARENT: GLib.Rand
#COMMENT: Returns the next random #gdouble from @rand_ equally distributed over
the range [@begin..@end).
#NAME: s1
#PARENT: GLib.strcasecmp.gint
#COMMENT: a string
#NAME: value
#PARENT: GLib.Variant.get_byte.guint8
#COMMENT: a byte #GVariant instance
#NAME: s2
#PARENT: GLib.strcasecmp.gint
#COMMENT: a string to compare with @s1
#NAME: peek_string
#PARENT: GLib.VariantType.peek_string
#COMMENT: the corresponding type string (not nul-terminated)

Since 2.24
#NAME: bad_quoting
#PARENT: GLib.ShellError
#COMMENT: Mismatched or otherwise mangled quoting.
#NAME: quark_from_string
#PARENT: GLib.quark_from_string
#COMMENT: the #GQuark identifying the string, or 0 if @string is %NULL
#NAME: regex
#PARENT: GLib.Regex.get_string_number.gint
#COMMENT: #GRegex structure
#NAME: input_not_at_end
#PARENT: GLib.VariantParseError
#COMMENT: extra data after parsing finished
#NAME: find_custom
#PARENT: GLib.Queue
#COMMENT: Finds an element in a #GQueue, using a supplied function to find the
desired element. It iterates over the queue, calling the given function
which should return 0 when the desired element is found. The function
takes two gconstpointer arguments, the #GQueue element's data as the
first argument and the given user data as the second argument.
#NAME: year
#PARENT: GLib.Date.valid_year.gboolean
#COMMENT: year
#NAME: vtable
#PARENT: GLib.mem_set_vtable.none
#COMMENT: table of memory allocation routines.
#NAME: end
#PARENT: GLib.random_double_range.gdouble
#COMMENT: upper open bound of the interval
#NAME: priority
#PARENT: GLib.MainContext.prepare.gboolean
#COMMENT: location to store priority of highest priority
           source already ready.
#NAME: iter_new
#PARENT: GLib.Variant
#COMMENT: Creates a heap-allocated #GVariantIter for iterating over the items
in @value.

Use g_variant_iter_free() to free the return value when you no longer
need it.

A reference is taken to @value and will be released only when
g_variant_iter_free() is called.
#NAME: is_subtype_of
#PARENT: GLib.VariantType
#COMMENT: Checks if @type is a subtype of @supertype.

This function returns %TRUE if @type is a subtype of @supertype.  All
types are considered to be subtypes of themselves.  Aside from that,
only indefinite types can have subtypes.
#NAME: format
#PARENT: GLib.VariantBuilder.add_parsed.none
#COMMENT: a text format #GVariant
#NAME: key_file
#PARENT: GLib.KeyFile.to_data.utf8
#COMMENT: a #GKeyFile
#NAME: queue
#PARENT: GLib.AsyncQueue.pop_unlocked.gpointer
#COMMENT: a #GAsyncQueue
#NAME: contents
#PARENT: GLib.file_set_contents.gboolean
#COMMENT: string to write to the file
#NAME: element
#PARENT: GLib.VariantType.new_array.VariantType
#COMMENT: a #GVariantType
#NAME: get_day_of_month
#PARENT: GLib.DateTime.get_day_of_month
#COMMENT: the day of the month
#NAME: format
#PARENT: GLib.date_strftime.gsize
#COMMENT: format string
#NAME: quotation
#PARENT: GLib.UnicodeBreakType
#COMMENT: Ambiguous Quotation (QU)
#NAME: function
#PARENT: GLib.idle_add_full.guint
#COMMENT: function to call
#NAME: RegexError
#PARENT: GLib
#COMMENT: Error codes returned by regular expressions functions.
#NAME: get_minute
#PARENT: GLib.DateTime.get_minute
#COMMENT: the minute of the hour
#NAME: spawn_check_exit_status
#PARENT: GLib
#COMMENT: Set @error if @exit_status indicates the child exited abnormally
(e.g. with a nonzero exit code, or via a fatal signal).

The g_spawn_sync() and g_child_watch_add() family of APIs return an
exit status for subprocesses encoded in a platform-specific way.
On Unix, this is guaranteed to be in the same format waitpid() returns,
and on Windows it is guaranteed to be the result of GetExitCodeProcess().

Prior to the introduction of this function in GLib 2.34, interpreting
@exit_status required use of platform-specific APIs, which is problematic
for software using GLib as a cross-platform layer.

Additionally, many programs simply want to determine whether or not
the child exited successfully, and either propagate a #GError or
print a message to standard error. In that common case, this function
can be used. Note that the error message in @error will contain
human-readable information about the exit status.

The @domain and @code of @error have special semantics in the case
where the process has an "exit code", as opposed to being killed by
a signal. On Unix, this happens if WIFEXITED() would be true of
@exit_status. On Windows, it is always the case.

The special semantics are that the actual exit code will be the
code set in @error, and the domain will be %G_SPAWN_EXIT_ERROR.
This allows you to differentiate between different exit codes.

If the process was terminated by some means other than an exit
status, the domain will be %G_SPAWN_ERROR, and the code will be
%G_SPAWN_ERROR_FAILED.

This function just offers convenience; you can of course also check
the available platform via a macro such as %G_OS_UNIX, and use
WIFEXITED() and WEXITSTATUS() on @exit_status directly. Do not attempt
to scan or parse the error message string; it may be translated and/or
change in future versions of GLib.
#NAME: str
#PARENT: GLib.utf8_find_prev_char.utf8
#COMMENT: pointer to the beginning of a UTF-8 encoded string
#NAME: get_int64
#PARENT: GLib.KeyFile
#COMMENT: Returns the value associated with @key under @group_name as a signed
64-bit integer. This is similar to g_key_file_get_integer() but can return
64-bit results without truncation.
#NAME: value
#PARENT: GLib.Variant.get.none
#COMMENT: a #GVariant instance
#NAME: 
#PARENT: GLib.sprintf.gint...
#COMMENT: the arguments to insert in the output.
#NAME: node
#PARENT: GLib.Node.insert_after.Node
#COMMENT: the #GNode to insert
#NAME: hash_table
#PARENT: GLib.HashTable.add.gboolean
#COMMENT: a #GHashTable
#NAME: identifier_spec
#PARENT: GLib.Scanner.unexp_token.none
#COMMENT: a string describing how the scanner's user
    refers to identifiers (%NULL defaults to "identifier").
    This is used if @expected_token is %G_TOKEN_IDENTIFIER or
    %G_TOKEN_IDENTIFIER_NULL.
#NAME: environ_getenv
#PARENT: GLib.environ_getenv
#COMMENT: the value of the environment variable, or %NULL if
    the environment variable is not set in @envp. The returned
    string is owned by @envp, and will be freed if @variable is
    set or unset again.
#NAME: thread_pool_get_max_unused_threads
#PARENT: GLib
#COMMENT: Returns the maximal allowed number of unused threads.
#NAME: datetime
#PARENT: GLib.DateTime.get_minute.gint
#COMMENT: a #GDateTime
#NAME: concat
#PARENT: GLib.List.concat
#COMMENT: the start of the new #GList, which equals @list1 if not %NULL
#NAME: flags
#PARENT: GLib.Dir.open.Dir
#COMMENT: Currently must be set to 0. Reserved for future use.
#NAME: flags
#PARENT: GLib.KeyFile.load_from_data_dirs.gboolean
#COMMENT: flags from #GKeyFileFlags
#NAME: next_offset
#PARENT: GLib.slice_free_chain_with_offset.none
#COMMENT: the offset of the @next field in the blocks
#NAME: leafs
#PARENT: GLib.TraverseFlags
#COMMENT: identical to %G_TRAVERSE_LEAVES.
#NAME: date
#PARENT: GLib.Date.get_weekday.DateWeekday
#COMMENT: a #GDate
#NAME: NodeTraverseFunc
#PARENT: GLib
#COMMENT: Specifies the type of function passed to g_node_traverse(). The
function is called with each of the nodes visited, together with the
user data passed to g_node_traverse(). If the function returns
%TRUE, then the traversal is stopped.
#NAME: pattern_match_string
#PARENT: GLib.pattern_match_string
#COMMENT: %TRUE if @string matches @pspec
#NAME: invalid
#PARENT: GLib.MarkupCollectType
#COMMENT: used to terminate the list of attributes
    to collect
#NAME: get_week_of_year
#PARENT: GLib.DateTime
#COMMENT: Returns the ISO 8601 week number for the week containing @datetime.
The ISO 8601 week number is the same for every day of the week (from
Moday through Sunday).  That can produce some unusual results
(described below).

The first week of the year is week 1.  This is the week that contains
the first Thursday of the year.  Equivalently, this is the first week
that has more than 4 of its days falling within the calendar year.

The value 0 is never returned by this function.  Days contained
within a year but occurring before the first ISO 8601 week of that
year are considered as being contained in the last week of the
previous year.  Similarly, the final days of a calendar year may be
considered as being part of the first ISO 8601 week of the next year
if 4 or more days of that week are contained within the new year.
#NAME: test_bug
#PARENT: GLib
#COMMENT: This function adds a message to test reports that
associates a bug URI with a test case.
Bug URIs are constructed from a base URI set with g_test_bug_base()
and @bug_uri_snippet.
#NAME: key
#PARENT: GLib.VariantDict.insert.none
#COMMENT: the key to insert a value for
#NAME: find
#PARENT: GLib.HashTable
#COMMENT: Calls the given function for key/value pairs in the #GHashTable
until @predicate returns %TRUE. The function is passed the key
and value of each pair, and the given @user_data parameter. The
hash table may not be modified while iterating over it (you can't
add/remove items).

Note, that hash tables are really only optimized for forward
lookups, i.e. g_hash_table_lookup(). So code that frequently issues
g_hash_table_find() or g_hash_table_foreach() (e.g. in the order of
once per every entry in a hash table) should probably be reworked
to use additional or different data structures for reverse lookups
(keep in mind that an O(n) find/foreach operation issued for all n
values in a hash table ends up needing O(n*n) operations).
#NAME: message
#PARENT: GLib.LogFunc.none
#COMMENT: the message to process
#NAME: noent
#PARENT: GLib.FileError
#COMMENT: No such file or directory. This is a "file
    doesn't exist" error for ordinary files that are referenced in
    contexts where they are expected to already exist.
#NAME: add
#PARENT: GLib.PtrArray
#COMMENT: Adds a pointer to the end of the pointer array. The array will grow
in size automatically if necessary.
#NAME: key
#PARENT: GLib.KeyFile.set_boolean_list.none
#COMMENT: a key
#NAME: get_current_dir
#PARENT: GLib.get_current_dir
#COMMENT: the current directory
#NAME: duployan
#PARENT: GLib.UnicodeScript
#COMMENT: Duployan. Since: 2.42
#NAME: file_open_tmp
#PARENT: GLib
#COMMENT: Opens a file for writing in the preferred directory for temporary
files (as returned by g_get_tmp_dir()).

@tmpl should be a string in the GLib file name encoding containing
a sequence of six 'X' characters, as the parameter to g_mkstemp().
However, unlike these functions, the template should only be a
basename, no directory components are allowed. If template is
%NULL, a default template is used.

Note that in contrast to g_mkstemp() (and mkstemp()) @tmpl is not
modified, and might thus be a read-only literal string.

Upon success, and if @name_used is non-%NULL, the actual name used
is returned in @name_used. This string should be freed with g_free()
when not needed any longer. The returned name is in the GLib file
name encoding.
#NAME: datalist
#PARENT: GLib.datalist_id_get_data.gpointer
#COMMENT: a datalist.
#NAME: armenian
#PARENT: GLib.UnicodeScript
#COMMENT: Armenian
#NAME: double
#PARENT: GLib.Rand.double
#COMMENT: a random number
#NAME: match_info
#PARENT: GLib.MatchInfo.fetch_all.utf8
#COMMENT: a #GMatchInfo structure
#NAME: pending
#PARENT: GLib.MainContext
#COMMENT: Checks if any sources have pending events for the given context.
#NAME: add_child_source
#PARENT: GLib.Source
#COMMENT: Adds @child_source to @source as a "polled" source; when @source is
added to a #GMainContext, @child_source will be automatically added
with the same priority, when @child_source is triggered, it will
cause @source to dispatch (in addition to calling its own
callback), and when @source is destroyed, it will destroy
@child_source as well. (@source will also still be dispatched if
its own prepare/check functions indicate that it is ready.)

If you don't need @child_source to do anything on its own when it
triggers, you can call g_source_set_dummy_callback() on it to set a
callback that does nothing (except return %TRUE if appropriate).

@source will hold a reference on @child_source while @child_source
is attached to it.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.
#NAME: locale
#PARENT: GLib.KeyFile.set_locale_string_list.none
#COMMENT: a locale identifier
#NAME: get_weekday
#PARENT: GLib.Date
#COMMENT: Returns the day of the week for a #GDate. The date must be valid.
#NAME: end
#PARENT: GLib.Rand.double_range.gdouble
#COMMENT: upper open bound of the interval
#NAME: unexp_eof
#PARENT: GLib.ErrorType
#COMMENT: unexpected end of file
#NAME: replace
#PARENT: GLib.Regex.replace
#COMMENT: a newly allocated string containing the replacements
#NAME: mem_chain
#PARENT: GLib.slice_free_chain_with_offset.none
#COMMENT: a pointer to the first block of the chain
#NAME: type
#PARENT: GLib.VariantType.is_maybe.gboolean
#COMMENT: a #GVariantType
#NAME: user_data
#PARENT: GLib.Tree.foreach.none
#COMMENT: user data to pass to the function
#NAME: length
#PARENT: GLib.strnfill.utf8
#COMMENT: the length of the new string
#NAME: new_parsed
#PARENT: GLib.Variant.new_parsed
#COMMENT: a new floating #GVariant instance
#NAME: find_child
#PARENT: GLib.Node
#COMMENT: Finds the first child of a #GNode with the given data.
#NAME: number_too_big
#PARENT: GLib.RegexError
#COMMENT: number is too big in escape sequence. Since: 2.34
#NAME: PRIORITY_HIGH_IDLE
#PARENT: GLib
#COMMENT: Use this for high priority idle functions.

GTK+ uses #G_PRIORITY_HIGH_IDLE + 10 for resizing operations,
and #G_PRIORITY_HIGH_IDLE + 20 for redrawing operations. (This is
done to ensure that any pending resizes are processed before any
pending redraws, so that widgets are not redrawn twice unnecessarily.)
#NAME: peek_nth
#PARENT: GLib.Queue.peek_nth
#COMMENT: the data for the @n'th element of @queue,
    or %NULL if @n is off the end of @queue
#NAME: november
#PARENT: GLib.DateMonth
#COMMENT: November
#NAME: find
#PARENT: GLib.Hook
#COMMENT: Finds a #GHook in a #GHookList using the given function to
test for a match.
#NAME: HashFunc
#PARENT: GLib.HashFunc
#COMMENT: the hash value corresponding to the key
#NAME: invalid_object_path
#PARENT: GLib.VariantParseError
#COMMENT: not a valid object path
#NAME: symbol
#PARENT: GLib.TokenType
#COMMENT: a symbol
#NAME: malloc0_n
#PARENT: GLib.malloc0_n
#COMMENT: a pointer to the allocated memory
#NAME: truncate
#PARENT: GLib.String.truncate
#COMMENT: @string
#NAME: boolean
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a boolean.
#NAME: stray_backslash
#PARENT: GLib.RegexError
#COMMENT: "\\" at end of pattern. Since 2.16
#NAME: func
#PARENT: GLib.dataset_foreach.none
#COMMENT: the function to call for each data element.
#NAME: to_unix
#PARENT: GLib.DateTime.to_unix
#COMMENT: the Unix time corresponding to @datetime
#NAME: to_data
#PARENT: GLib.BookmarkFile.to_data
#COMMENT: a newly allocated string holding
  the contents of the #GBookmarkFile
#NAME: lookup_extended
#PARENT: GLib.HashTable.lookup_extended
#COMMENT: %TRUE if the key was found in the #GHashTable
#NAME: data
#PARENT: GLib.Hook.find_data.Hook
#COMMENT: the data to find
#NAME: a
#PARENT: GLib.sequence_swap.none
#COMMENT: a #GSequenceIter
#NAME: list
#PARENT: GLib.List.insert_before.gpointer
#COMMENT: a pointer to a #GList, this must point to the top of the list
#NAME: b
#PARENT: GLib.sequence_swap.none
#COMMENT: a #GSequenceIter
#NAME: data
#PARENT: GLib.CopyFunc.gpointer
#COMMENT: Additional data
#NAME: find_func_data
#PARENT: GLib.Hook
#COMMENT: Finds a #GHook in a #GHookList with the given function and data.
#NAME: new
#PARENT: GLib.VariantDict
#COMMENT: Allocates and initialises a new #GVariantDict.

You should call g_variant_dict_unref() on the return value when it
is no longer needed.  The memory will not be automatically freed by
any other call.

In some cases it may be easier to place a #GVariantDict directly on
the stack of the calling function and initialise it with
g_variant_dict_init().  This is particularly useful when you are
using #GVariantDict to construct a #GVariant.
#NAME: buf
#PARENT: GLib.IOChannel.read.IOError
#COMMENT: a buffer to read the data into (which should be at least
      count bytes long)
#NAME: filename_to_utf8
#PARENT: GLib
#COMMENT: Converts a string which is in the encoding used by GLib for
filenames into a UTF-8 string. Note that on Windows GLib uses UTF-8
for filenames; on other platforms, this function indirectly depends on
the [current locale][setlocale].
#NAME: caucasian_albanian
#PARENT: GLib.UnicodeScript
#COMMENT: Caucasian Albanian. Since: 2.42
#NAME: HookCheckFunc
#PARENT: GLib.HookCheckFunc
#COMMENT: %FALSE if the #GHook should be destroyed
#NAME: stop
#PARENT: GLib.Timer
#COMMENT: Marks an end time, so calls to g_timer_elapsed() will return the
difference between this end time and the start time.
#NAME: msgid
#PARENT: GLib.dgettext.utf8
#COMMENT: message to translate
#NAME: nfsd
#PARENT: GLib.PollFunc.gint
#COMMENT: the number of elements in @ufds
#NAME: valid
#PARENT: GLib.Date.valid
#COMMENT: Whether the date is valid
#NAME: PrintFunc
#PARENT: GLib
#COMMENT: Specifies the type of the print handler functions.
These are called with the complete formatted string to output.
#NAME: dataset_location
#PARENT: GLib.dataset_id_remove_no_notify.gpointer
#COMMENT: the location identifying the dataset.
#NAME: get_uint64
#PARENT: GLib.KeyFile.get_uint64
#COMMENT: the value associated with the key as an unsigned 64-bit integer,
or 0 if the key was not found or could not be parsed.
#NAME: value
#PARENT: GLib.Variant.get_uint16.guint16
#COMMENT: a uint16 #GVariant instance
#NAME: find_interval
#PARENT: GLib.TimeZone
#COMMENT: Finds an the interval within @tz that corresponds to the given @time_.
The meaning of @time_ depends on @type.

If @type is %G_TIME_TYPE_UNIVERSAL then this function will always
succeed (since universal time is monotonic and continuous).

Otherwise @time_ is treated as local time.  The distinction between
%G_TIME_TYPE_STANDARD and %G_TIME_TYPE_DAYLIGHT is ignored except in
the case that the given @time_ is ambiguous.  In Toronto, for example,
01:30 on November 7th 2010 occurred twice (once inside of daylight
savings time and the next, an hour later, outside of daylight savings
time).  In this case, the different value of @type would result in a
different interval being returned.

It is still possible for this function to fail.  In Toronto, for
example, 02:00 on March 14th 2010 does not exist (due to the leap
forward to begin daylight savings time).  -1 is returned in that
case.
#NAME: next
#PARENT: GLib.MatchInfo.next
#COMMENT: %TRUE is the string matched, %FALSE otherwise
#NAME: end_parse
#PARENT: GLib.MarkupParseContext.end_parse
#COMMENT: %TRUE on success, %FALSE if an error was set
#NAME: pop_unlocked
#PARENT: GLib.AsyncQueue
#COMMENT: Pops data from the @queue. If @queue is empty, this function
blocks until data becomes available.

This function must be called while holding the @queue's lock.
#NAME: key_file
#PARENT: GLib.KeyFile.unref.none
#COMMENT: a #GKeyFile
#NAME: cmp_data
#PARENT: GLib.Sequence.sort_changed_iter.none
#COMMENT: user data passed to @cmp_func
#NAME: hash_table_contains
#PARENT: GLib.hash_table_contains
#COMMENT: %TRUE if @key is in @hash_table, %FALSE otherwise.
#NAME: unix_fd_add
#PARENT: GLib.unix_fd_add
#COMMENT: the ID (greater than 0) of the event source
#NAME: new
#PARENT: GLib.Rand.new
#COMMENT: the new #GRand
#NAME: remove_unix_fd
#PARENT: GLib.Source
#COMMENT: Reverses the effect of a previous call to g_source_add_unix_fd().

You only need to call this if you want to remove an fd from being
watched while keeping the same source around.  In the normal case you
will just want to destroy the source.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

As the name suggests, this function is not available on Windows.
#NAME: len
#PARENT: GLib.base64_decode_step.gsize
#COMMENT: max length of @in data to decode
#NAME: string
#PARENT: GLib.vsnprintf.gint
#COMMENT: the buffer to hold the output.
#NAME: new_take
#PARENT: GLib.Bytes
#COMMENT: Creates a new #GBytes from @data.

After this call, @data belongs to the bytes and may no longer be
modified by the caller.  g_free() will be called on @data when the
bytes is no longer in use. Because of this @data must have been created by
a call to g_malloc(), g_malloc0() or g_realloc() or by one of the many
functions that wrap these calls (such as g_new(), g_strdup(), etc).

For creating #GBytes with memory from other allocators, see
g_bytes_new_with_free_func().

@data may be %NULL if @size is 0.
#NAME: value
#PARENT: GLib.HashTableIter.replace.none
#COMMENT: the value to replace with
#NAME: source
#PARENT: GLib.Source.get_id.guint
#COMMENT: a #GSource
#NAME: is_executable
#PARENT: GLib.FileTest
#COMMENT: %TRUE if the file is executable.
#NAME: acquire
#PARENT: GLib.MainContext.acquire
#COMMENT: %TRUE if the operation succeeded, and
  this thread is now the owner of @context.
#NAME: stdin
#PARENT: GLib.TestSubprocessFlags
#COMMENT: If this flag is given, the child
    process will inherit the parent's stdin. Otherwise, the child's
    stdin is redirected to `/dev/null`.
#NAME: CompareDataFunc
#PARENT: GLib.CompareDataFunc
#COMMENT: negative value if @a < @b; zero if @a = @b; positive
         value if @a > @b
#NAME: pos
#PARENT: GLib.String.insert_len.String
#COMMENT: position in @string where insertion should
      happen, or -1 for at the end
#NAME: iso_date
#PARENT: GLib.TimeVal.from_iso8601.gboolean
#COMMENT: an ISO 8601 encoded date string
#NAME: add_poll
#PARENT: GLib.MainContext
#COMMENT: Adds a file descriptor to the set of file descriptors polled for
this context. This will very seldom be used directly. Instead
a typical event source will use g_source_add_unix_fd() instead.
#NAME: set_time_t
#PARENT: GLib.Date
#COMMENT: Sets the value of a date to the date corresponding to a time
specified as a time_t. The time to date conversion is done using
the user's current timezone.

To set the value of a date to the current day, you could write:
|[<!-- language="C" -->
 g_date_set_time_t (date, time (NULL));
]|
#NAME: items_written
#PARENT: GLib.ucs4_to_utf16.guint16
#COMMENT: location to store number of #gunichar2
    written, or %NULL. The value stored here does not include the
    trailing 0.
#NAME: value
#PARENT: GLib.Variant.get_size.gsize
#COMMENT: a #GVariant instance
#NAME: uri
#PARENT: GLib.BookmarkFile.set_groups.none
#COMMENT: an item's URI
#NAME: month
#PARENT: GLib.date_get_days_in_month.guint8
#COMMENT: month
#NAME: priority
#PARENT: GLib.MainContext.add_poll.none
#COMMENT: the priority for this file descriptor which should be
     the same as the priority used for g_source_attach() to ensure that the
     file descriptor is polled whenever the results may be needed.
#NAME: to_codeset
#PARENT: GLib.IConv.open.IConv
#COMMENT: destination codeset
#NAME: source
#PARENT: GLib.Source.is_destroyed.gboolean
#COMMENT: a #GSource
#NAME: DateDay
#PARENT: GLib
#COMMENT: Integer representing a day of the month; between 1 and 31.
#G_DATE_BAD_DAY represents an invalid day of the month.
#NAME: USEC_PER_SEC
#PARENT: GLib
#COMMENT: Number of microseconds in one second (1 million).
This macro is provided for code readability.
#NAME: group_name
#PARENT: GLib.KeyFile.set_locale_string_list.none
#COMMENT: a group name
#NAME: child_watch_add_full
#PARENT: GLib
#COMMENT: Sets a function to be called when the child indicated by @pid
exits, at the priority @priority.

If you obtain @pid from g_spawn_async() or g_spawn_async_with_pipes()
you will need to pass #G_SPAWN_DO_NOT_REAP_CHILD as flag to
the spawn function for the child watching to work.

In many programs, you will want to call g_spawn_check_exit_status()
in the callback to determine whether or not the child exited
successfully.

Also, note that on platforms where #GPid must be explicitly closed
(see g_spawn_close_pid()) @pid must not be closed while the source
is still active.  Typically, you should invoke g_spawn_close_pid()
in the callback function for the source.

GLib supports only a single callback per process id.

This internally creates a main loop source using
g_child_watch_source_new() and attaches it to the main loop context
using g_source_attach(). You can do these steps manually if you
need greater control.
#NAME: get_uint64
#PARENT: GLib.Variant.get_uint64
#COMMENT: a #guint64
#NAME: set_integer
#PARENT: GLib.KeyFile
#COMMENT: Associates a new integer value with @key under @group_name.
If @key cannot be found then it is created.
#NAME: insert_before
#PARENT: GLib.Hook
#COMMENT: Inserts a #GHook into a #GHookList, before a given #GHook.
#NAME: bytes_written
#PARENT: GLib.filename_from_utf8.guint8
#COMMENT: the number of bytes stored in the output buffer (not
                including the terminating nul).
#NAME: get_ready_time
#PARENT: GLib.Source.get_ready_time
#COMMENT: the monotonic ready time, -1 for "never"
#NAME: group
#PARENT: GLib.OptionErrorFunc.none
#COMMENT: The group to which the function belongs
#NAME: byte
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a byte.
#NAME: close_punctuation
#PARENT: GLib.UnicodeBreakType
#COMMENT: Closing Punctuation (CL)
#NAME: log_domain
#PARENT: GLib.logv.none
#COMMENT: the log domain
#NAME: hup
#PARENT: GLib.IOCondition
#COMMENT: Hung up (the connection has been broken, usually for
           pipes and sockets).
#NAME: assign
#PARENT: GLib.String
#COMMENT: Copies the bytes from a string into a #GString,
destroying any previous contents. It is rather like
the standard strcpy() function, except that you do not
have to worry about having enough space to copy the string.
#NAME: cmp_func
#PARENT: GLib.Sequence.sort_iter.none
#COMMENT: the function used to compare iterators in the sequence
#NAME: ref_sink
#PARENT: GLib.Variant
#COMMENT: #GVariant uses a floating reference count system.  All functions with
names starting with `g_variant_new_` return floating
references.

Calling g_variant_ref_sink() on a #GVariant with a floating reference
will convert the floating reference into a full reference.  Calling
g_variant_ref_sink() on a non-floating #GVariant results in an
additional normal reference being added.

In other words, if the @value is floating, then this call "assumes
ownership" of the floating reference, converting it to a normal
reference.  If the @value is not floating, then this call adds a
new normal reference increasing the reference count by one.

All calls that result in a #GVariant instance being inserted into a
container will call g_variant_ref_sink() on the instance.  This means
that if the value was just created (and has only its floating
reference) then the container will assume sole ownership of the value
at that point and the caller will not need to unreference it.  This
makes certain common styles of programming much easier while still
maintaining normal refcounting semantics in situations where values
are not floating.
#NAME: chunk
#PARENT: GLib.StringChunk.insert_const.utf8
#COMMENT: a #GStringChunk
#NAME: func
#PARENT: GLib.ThreadPool.set_sort_function.none
#COMMENT: the #GCompareDataFunc used to sort the list of tasks.
    This function is passed two tasks. It should return
    0 if the order in which they are handled does not matter,
    a negative value if the first task should be processed before
    the second or a positive value if the second task should be
    processed first.
#NAME: replace
#PARENT: GLib.HashTable.replace
#COMMENT: %TRUE of the key did not exist yet
#NAME: utf16_to_ucs4
#PARENT: GLib
#COMMENT: Convert a string from UTF-16 to UCS-4. The result will be
nul-terminated.
#NAME: get_hour
#PARENT: GLib.DateTime
#COMMENT: Retrieves the hour of the day represented by @datetime
#NAME: get_context
#PARENT: GLib.Source.get_context
#COMMENT: the #GMainContext with which the
              source is associated, or %NULL if the context has not
              yet been added to a source.
#NAME: sequence_remove
#PARENT: GLib
#COMMENT: Removes the item pointed to by @iter. It is an error to pass the
end iterator to this function.

If the sequence has a data destroy function associated with it, this
function is called on the data for the removed item.
#NAME: conditional_japanese_starter
#PARENT: GLib.UnicodeBreakType
#COMMENT: Conditional Japanese Starter (CJ). Since: 2.32
#NAME: search_func
#PARENT: GLib.Tree.search.gpointer
#COMMENT: a function used to search the #GTree
#NAME: atomic_int_add
#PARENT: GLib
#COMMENT: Atomically adds @val to the value of @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic += val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.

Before version 2.30, this function did not return a value
(but g_atomic_int_exchange_and_add() did, and had the same meaning).
#NAME: filename
#PARENT: GLib.file_get_contents.gboolean
#COMMENT: name of a file to read contents from, in the GLib file name encoding
#NAME: domain
#PARENT: GLib.Error
#COMMENT: error domain, e.g. #G_FILE_ERROR
#NAME: io_add_watch
#PARENT: GLib
#COMMENT: Adds the #GIOChannel into the default main loop context
with the default priority.
#NAME: app
#PARENT: GLib.Variant.get_va.none
#COMMENT: a pointer to a #va_list
#NAME: marshal
#PARENT: GLib.HookList
#COMMENT: Calls a function on each valid #GHook.
#NAME: propagate_error
#PARENT: GLib
#COMMENT: If @dest is %NULL, free @src; otherwise, moves @src into *@dest.
The error variable @dest points to must be %NULL.

Note that @src is no longer valid after this call. If you want
to keep using the same GError*, you need to set it to %NULL
after calling this function on it.
#NAME: KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is string
identifying the WM class or name hint of a window that the application
will create, which can be used to emulate Startup Notification with
older applications.
#NAME: year
#PARENT: GLib.date_get_monday_weeks_in_year.guint8
#COMMENT: a year
#NAME: value
#PARENT: GLib.Variant.print_string.String
#COMMENT: a #GVariant
#NAME: dpgettext
#PARENT: GLib
#COMMENT: This function is a variant of g_dgettext() which supports
a disambiguating message context. GNU gettext uses the
'\004' character to separate the message context and
message id in @msgctxtid.
If 0 is passed as @msgidoffset, this function will fall back to
trying to use the deprecated convention of using "|" as a separation
character.

This uses g_dgettext() internally. See that functions for differences
with dgettext() proper.

Applications should normally not use this function directly,
but use the C_() macro for translations with context.
#NAME: loop
#PARENT: GLib.MainLoop.is_running.gboolean
#COMMENT: a #GMainLoop.
#NAME: supertype
#PARENT: GLib.VariantType.is_subtype_of.gboolean
#COMMENT: a #GVariantType
#NAME: new_uint16
#PARENT: GLib.Variant.new_uint16
#COMMENT: a floating reference to a new uint16 #GVariant instance
#NAME: checksum
#PARENT: GLib.Checksum.reset.none
#COMMENT: the #GChecksum to reset
#NAME: length
#PARENT: GLib.BookmarkFile.set_groups.none
#COMMENT: number of group name values in @groups
#NAME: add_seconds
#PARENT: GLib.DateTime.add_seconds
#COMMENT: the newly created #GDateTime which should be freed with
  g_date_time_unref().
#NAME: december
#PARENT: GLib.DateMonth
#COMMENT: December
#NAME: unknown_keyword
#PARENT: GLib.VariantParseError
#COMMENT: an unknown keyword was encountered
#NAME: dfl_size
#PARENT: GLib.string_sized_new.String
#COMMENT: the default size of the space allocated to
    hold the string
#NAME: set_encoding
#PARENT: GLib.IOChannel.set_encoding
#COMMENT: %G_IO_STATUS_NORMAL if the encoding was successfully set
#NAME: setenv
#PARENT: GLib.setenv
#COMMENT: %FALSE if the environment variable couldn't be set.
#NAME: key_file
#PARENT: GLib.KeyFile.get_boolean.gboolean
#COMMENT: a #GKeyFile
#NAME: context
#PARENT: GLib.OptionContext.get_summary.utf8
#COMMENT: a #GOptionContext
#NAME: steal
#PARENT: GLib.HashTableIter
#COMMENT: Removes the key/value pair currently pointed to by the
iterator from its associated #GHashTable, without calling
the key and value destroy functions. Can only be called
after g_hash_table_iter_next() returned %TRUE, and cannot
be called more than once for the same key/value pair.
#NAME: utf8_prev_char
#PARENT: GLib
#COMMENT: Finds the previous UTF-8 character in the string before @p.

@p does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte. If @p might be the first
character of the string, you must use g_utf8_find_prev_char() instead.
#NAME: get_encoding
#PARENT: GLib.IOChannel
#COMMENT: Gets the encoding for the input/output of the channel.
The internal encoding is always UTF-8. The encoding %NULL
makes the channel safe for binary data.
#NAME: set_month
#PARENT: GLib.Date
#COMMENT: Sets the month of the year for a #GDate.  If the resulting
day-month-year triplet is invalid, the date will be invalid.
#NAME: OptionFlags
#PARENT: GLib
#COMMENT: Flags which modify individual options.
#NAME: sort
#PARENT: GLib.ByteArray
#COMMENT: Sorts a byte array, using @compare_func which should be a
qsort()-style comparison function (returns less than zero for first
arg is less than second arg, zero for equal, greater than zero if
first arg is greater than second arg).

If two array elements compare equal, their order in the sorted array
is undefined. If you want equal elements to keep their order (i.e.
you want a stable sort) you can write a comparison function that,
if two elements would otherwise compare equal, compares them by
their addresses.
#NAME: value
#PARENT: GLib.Variant.get_int16.gint16
#COMMENT: a int16 #GVariant instance
#NAME: 
#PARENT: GLib.Variant.new.Variant...
#COMMENT: arguments, as per @format_string
#NAME: get_main_group
#PARENT: GLib.OptionContext.get_main_group
#COMMENT: the main group of @context, or %NULL if
 @context doesn't have a main group. Note that group belongs to
 @context and should not be modified or freed.
#NAME: message
#PARENT: GLib.set_error_literal.none
#COMMENT: error message
#NAME: write
#PARENT: GLib.IOChannel
#COMMENT: Writes data to a #GIOChannel.
#NAME: pointer_bit_trylock
#PARENT: GLib.pointer_bit_trylock
#COMMENT: %TRUE if the lock was acquired
#NAME: group_name
#PARENT: GLib.KeyFile.has_key.gboolean
#COMMENT: a group name
#NAME: hook_list
#PARENT: GLib.HookList.init.none
#COMMENT: a #GHookList
#NAME: string
#PARENT: GLib.str_tokenize_and_fold.utf8
#COMMENT: a string
#NAME: scanner
#PARENT: GLib.Scanner.input_file.none
#COMMENT: a #GScanner
#NAME: get_max_lookbehind
#PARENT: GLib.Regex.get_max_lookbehind
#COMMENT: the number of characters in the longest lookbehind assertion.
#NAME: psalter_pahlavi
#PARENT: GLib.UnicodeScript
#COMMENT: Psalter Pahlavi. Since: 2.42
#NAME: get_uint16
#PARENT: GLib.Variant
#COMMENT: Returns the 16-bit unsigned integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_UINT16.
#NAME: func
#PARENT: GLib.Hook.find.Hook
#COMMENT: the function to call for each #GHook, which should return
    %TRUE when the #GHook has been found
#NAME: to_codeset
#PARENT: GLib.convert_with_fallback.utf8
#COMMENT: name of character set into which to convert @str
#NAME: n_bytes
#PARENT: GLib.try_realloc.gpointer
#COMMENT: number of bytes to allocate.
#NAME: set_value
#PARENT: GLib.KeyFile
#COMMENT: Associates a new value with @key under @group_name.

If @key cannot be found then it is created. If @group_name cannot
be found then it is created. To set an UTF-8 string which may contain
characters that need escaping (such as newlines or spaces), use
g_key_file_set_string().
#NAME: clear_
#PARENT: GLib.Array.new.gpointer
#COMMENT: %TRUE if #GArray elements should be automatically cleared
    to 0 when they are allocated
#NAME: date
#PARENT: GLib.Date.get_monday_week_of_year.guint
#COMMENT: a #GDate
#NAME: ThreadError
#PARENT: GLib
#COMMENT: Possible errors of thread related functions.
#NAME: equal
#PARENT: GLib.Bytes.equal
#COMMENT: %TRUE if the two keys match.
#NAME: c
#PARENT: GLib.unichar_istitle.gboolean
#COMMENT: a Unicode character
#NAME: unichar_iswide_cjk
#PARENT: GLib.unichar_iswide_cjk
#COMMENT: %TRUE if the character is wide in legacy East Asian locales
#NAME: partial_input
#PARENT: GLib.ConvertError
#COMMENT: Partial character sequence at end of input.
#NAME: link_
#PARENT: GLib.Queue.push_tail_link.none
#COMMENT: a single #GList element, not a list with more than one element
#NAME: line_separator
#PARENT: GLib.UnicodeType
#COMMENT: General category "Separator, Line" (Zl)
#NAME: format
#PARENT: GLib.set_error.none
#COMMENT: printf()-style format
#NAME: spawn_async
#PARENT: GLib.spawn_async
#COMMENT: %TRUE on success, %FALSE if error is set
#NAME: name
#PARENT: GLib.Regex.get_string_number.gint
#COMMENT: name of the subexpression
#NAME: may_recurse
#PARENT: GLib.HookList.invoke.none
#COMMENT: %TRUE if functions which are already running
    (e.g. in another thread) can be called. If set to %FALSE,
    these are skipped
#NAME: cmp_func
#PARENT: GLib.Sequence.sort.none
#COMMENT: the function used to sort the sequence
#NAME: 
#PARENT: GLib.fprintf.gint...
#COMMENT: the arguments to insert in the output.
#NAME: key_compare_func
#PARENT: GLib.Tree.new.Tree
#COMMENT: the function used to order the nodes in the #GTree.
  It should return values similar to the standard strcmp() function -
  0 if the two arguments are equal, a negative value if the first argument
  comes before the second, or a positive value if the first argument comes
  after the second.
#NAME: hash_table_steal
#PARENT: GLib.hash_table_steal
#COMMENT: %TRUE if the key was found and removed from the #GHashTable
#NAME: from_asv
#PARENT: GLib.VariantDict.init.none
#COMMENT: the initial value for @dict
#NAME: BookmarkFile
#PARENT: GLib
#COMMENT: The `GBookmarkFile` structure contains only
private data and should not be directly accessed.
#NAME: visited
#PARENT: GLib.BookmarkFile.set_visited.none
#COMMENT: a timestamp or -1 to use the current time
#NAME: parser
#PARENT: GLib.MarkupParseContext.push.none
#COMMENT: a #GMarkupParser
#NAME: root
#PARENT: GLib.Node.traverse.none
#COMMENT: the root #GNode of the tree to traverse
#NAME: pop_nth_link
#PARENT: GLib.Queue
#COMMENT: Removes and returns the link at the given position.
#NAME: iter
#PARENT: GLib.Sequence.remove.none
#COMMENT: a #GSequenceIter
#NAME: expression_too_large
#PARENT: GLib.RegexError
#COMMENT: Regular expression too large.
    Since 2.16
#NAME: source_remove_by_user_data
#PARENT: GLib
#COMMENT: Removes a source from the default main loop context given the user
data for the callback. If multiple sources exist with the same user
data, only one will be destroyed.
#NAME: utf8_collate_key_for_filename
#PARENT: GLib.utf8_collate_key_for_filename
#COMMENT: a newly allocated string. This string should
  be freed with g_free() when you are done with it.
#NAME: to_data
#PARENT: GLib.BookmarkFile
#COMMENT: This function outputs @bookmark as a string.
#NAME: spawn_async_with_pipes
#PARENT: GLib.spawn_async_with_pipes
#COMMENT: %TRUE on success, %FALSE if an error was set
#NAME: fd
#PARENT: GLib.unix_fd_source_new.Source
#COMMENT: a file descriptor
#NAME: infinite_loop
#PARENT: GLib.RegexError
#COMMENT: Recursive call could loop indefinitely.
    Since 2.16
#NAME: unichar_get_script
#PARENT: GLib
#COMMENT: Looks up the #GUnicodeScript for a particular character (as defined
by Unicode Standard Annex \#24). No check is made for @ch being a
valid Unicode character; if you pass in invalid character, the
result is undefined.

This function is equivalent to pango_script_for_unichar() and the
two are interchangeable.
#NAME: value
#PARENT: GLib.Variant.get_uint64.guint64
#COMMENT: a uint64 #GVariant instance
#NAME: head
#PARENT: GLib.Queue
#COMMENT: a pointer to the first element of the queue
#NAME: zero_terminated
#PARENT: GLib.Array.sized_new.gpointer
#COMMENT: %TRUE if the array should have an extra element at
    the end with all bits cleared
#NAME: non_breaking_glue
#PARENT: GLib.UnicodeBreakType
#COMMENT: Non-breaking ("Glue") (GL)
#NAME: get_title
#PARENT: GLib.BookmarkFile
#COMMENT: Returns the title of the bookmark for @uri.

If @uri is %NULL, the title of @bookmark is returned.

In the event the URI cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
#NAME: hook
#PARENT: GLib.Hook.ref.Hook
#COMMENT: the #GHook to increment the reference count of
#NAME: dest
#PARENT: GLib.Sequence.move.none
#COMMENT: a #GSequenceIter pointing to the position to which
    the item is moved
#NAME: seek
#PARENT: GLib.IOChannel
#COMMENT: Sets the current position in the #GIOChannel, similar to the standard
library function fseek().
#NAME: new_with_seed
#PARENT: GLib.Rand.new_with_seed
#COMMENT: the new #GRand
#NAME: copy
#PARENT: GLib.VariantType
#COMMENT: Makes a copy of a #GVariantType.  It is appropriate to call
g_variant_type_free() on the return value.  @type may not be %NULL.
#NAME: seed
#PARENT: GLib.random_set_seed.none
#COMMENT: a value to reinitialize the global random number generator
#NAME: data
#PARENT: GLib.Sequence.lookup.SequenceIter
#COMMENT: data to lookup
#NAME: mkstemp
#PARENT: GLib
#COMMENT: Opens a temporary file. See the mkstemp() documentation
on most UNIX-like systems.

The parameter is a string that should follow the rules for
mkstemp() templates, i.e. contain the string "XXXXXX".
g_mkstemp() is slightly more flexible than mkstemp() in that the
sequence does not have to occur at the very end of the template.
The X string will be modified to form the name of a file that
didn't exist. The string should be in the GLib file name encoding.
Most importantly, on Windows it should be in UTF-8.
#NAME: uc
#PARENT: GLib.unichar_combining_class.gint
#COMMENT: a Unicode character
#NAME: get_groups
#PARENT: GLib.KeyFile.get_groups
#COMMENT: a newly-allocated %NULL-terminated array of strings.
  Use g_strfreev() to free it.
#NAME: length
#PARENT: GLib.KeyFile.set_integer_list.none
#COMMENT: number of integer values in @list
#NAME: tm
#PARENT: GLib.Date.to_struct_tm.none
#COMMENT: struct tm to fill
#NAME: root
#PARENT: GLib.Node.find.Node
#COMMENT: the root #GNode of the tree to search
#NAME: queue
#PARENT: GLib.Queue.clear.none
#COMMENT: a #GQueue
#NAME: destroy
#PARENT: GLib.Tree
#COMMENT: Removes all keys and values from the #GTree and decreases its
reference count by one. If keys and/or values are dynamically
allocated, you should either free them first or create the #GTree
using g_tree_new_full(). In the latter case the destroy functions
you supplied will be called on all keys and values before destroying
the #GTree.
#NAME: key_destroy_func
#PARENT: GLib.HashTable.new_full.gpointer
#COMMENT: a function to free the memory allocated for the key
    used when removing the entry from the #GHashTable, or %NULL
    if you don't want to supply such a function.
#NAME: get_bytestring
#PARENT: GLib.Variant.get_bytestring
#COMMENT: 
         the constant string
#NAME: get_uint32
#PARENT: GLib.Variant
#COMMENT: Returns the 32-bit unsigned integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_UINT32.
#NAME: get_weekday
#PARENT: GLib.Date.get_weekday
#COMMENT: day of the week as a #GDateWeekday.
#NAME: match_options
#PARENT: GLib.Regex.match_all_full.gboolean
#COMMENT: match options
#NAME: get_string_length
#PARENT: GLib.VariantType
#COMMENT: Returns the length of the type string corresponding to the given
@type.  This function must be used to determine the valid extent of
the memory region returned by g_variant_type_peek_string().
#NAME: func
#PARENT: GLib.Node.traverse.none
#COMMENT: the function to call for each visited #GNode
#NAME: 
#PARENT: GLib.test_minimized_result.none...
#COMMENT: arguments to pass to the printf() function
#NAME: level_critical
#PARENT: GLib.LogLevelFlags
#COMMENT: log level for critical messages, see g_critical().
    This level is also used for messages produced by g_return_if_fail()
    and g_return_val_if_fail().
#NAME: length
#PARENT: GLib.KeyFile.set_string_list.none
#COMMENT: number of string values in @list
#NAME: type
#PARENT: GLib.VariantType.peek_string.utf8
#COMMENT: a #GVariantType
#NAME: set_translation_domain
#PARENT: GLib.OptionGroup
#COMMENT: A convenience function to use gettext() for translating
user-visible strings.
#NAME: src
#PARENT: GLib.propagate_error.none
#COMMENT: error to move into the return location
#NAME: data
#PARENT: GLib.Queue.push_nth.none
#COMMENT: the data for the new element
#NAME: n_children
#PARENT: GLib.Variant.new_tuple.Variant
#COMMENT: the length of @children
#NAME: get_ignore_unknown_options
#PARENT: GLib.OptionContext.get_ignore_unknown_options
#COMMENT: %TRUE if unknown options are ignored.
#NAME: insert_sorted
#PARENT: GLib.List.insert_sorted
#COMMENT: the (possibly changed) start of the #GList
#NAME: val
#PARENT: GLib.String.append_len.String
#COMMENT: bytes to append
#NAME: inherited
#PARENT: GLib.UnicodeScript
#COMMENT: a mark glyph that takes its script from the
                              base glyph to which it is attached
#NAME: DATALIST_FLAGS_MASK
#PARENT: GLib
#COMMENT: A bitmask that restricts the possible flags passed to
g_datalist_set_flags(). Passing a flags value where
flags & ~G_DATALIST_FLAGS_MASK != 0 is an error.
#NAME: new_now_local
#PARENT: GLib.DateTime.new_now_local
#COMMENT: a new #GDateTime, or %NULL
#NAME: buffer
#PARENT: GLib.ascii_formatd.utf8
#COMMENT: A buffer to place the resulting string in
#NAME: unichar_isprint
#PARENT: GLib
#COMMENT: Determines whether a character is printable.
Unlike g_unichar_isgraph(), returns %TRUE for spaces.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().
#NAME: format
#PARENT: GLib.Date.strftime.gsize
#COMMENT: format string
#NAME: seconds
#PARENT: GLib.DateTime.add_full.DateTime
#COMMENT: the number of seconds to add
#NAME: tz
#PARENT: GLib.TimeZone.get_abbreviation.utf8
#COMMENT: a #GTimeZone
#NAME: get_day_of_year
#PARENT: GLib.Date.get_day_of_year
#COMMENT: day of the year
#NAME: type
#PARENT: GLib.VariantType.is_definite.gboolean
#COMMENT: a #GVariantType
#NAME: compile_options
#PARENT: GLib.regex_match_simple.gboolean
#COMMENT: compile options for the regular expression, or 0
#NAME: set_close_on_unref
#PARENT: GLib.IOChannel
#COMMENT: Setting this flag to %TRUE for a channel you have already closed
can cause problems.
#NAME: strchomp
#PARENT: GLib
#COMMENT: Removes trailing whitespace from a string.

This function doesn't allocate or reallocate any memory;
it modifies @string in place. Therefore, it cannot be used
on statically allocated strings.

The pointer to @string is returned to allow the nesting of functions.

Also see g_strchug() and g_strstrip().
#NAME: new_printf
#PARENT: GLib.Variant
#COMMENT: Creates a string-type GVariant using printf formatting.

This is similar to calling g_strdup_printf() and then
g_variant_new_string() but it saves a temporary variable and an
unnecessary copy.
#NAME: length
#PARENT: GLib.IOChannel.set_line_term.none
#COMMENT: The length of the termination string. If -1 is passed, the
         string is assumed to be nul-terminated. This option allows
         termination strings with embedded nuls.
#NAME: length
#PARENT: GLib.KeyFile.to_data.utf8
#COMMENT: return location for the length of the
  returned string, or %NULL
#NAME: endptr
#PARENT: GLib.strtod.gdouble
#COMMENT: if non-%NULL, it returns the character after
          the last character used in the conversion.
#NAME: tv_usec
#PARENT: GLib.TimeVal
#COMMENT: microseconds
#NAME: source
#PARENT: GLib.Source.get_current_time.none
#COMMENT: a #GSource
#NAME: value
#PARENT: GLib.hash_table_insert.gboolean
#COMMENT: the value to associate with the key
#NAME: key_file
#PARENT: GLib.KeyFile.set_list_separator.none
#COMMENT: a #GKeyFile
#NAME: data
#PARENT: GLib.ByteArray.new_take.guint8
#COMMENT: byte data for the array
#NAME: free
#PARENT: GLib.MappedFile
#COMMENT: This call existed before #GMappedFile had refcounting and is currently
exactly the same as g_mapped_file_unref().
#NAME: new_dict_entry
#PARENT: GLib.Variant.new_dict_entry
#COMMENT: a floating reference to a new dictionary entry #GVariant
#NAME: LOG_DOMAIN
#PARENT: GLib
#COMMENT: Defines the log domain.

For applications, this is typically left as the default %NULL
(or "") domain. Libraries should define this so that any messages
which they log can be differentiated from messages from other
libraries and application code. But be careful not to define
it in any public header files.

For example, GTK+ uses this in its Makefile.am:
|[
INCLUDES = -DG_LOG_DOMAIN=\"Gtk\"
]|
#NAME: n
#PARENT: GLib.SList.nth.gpointer
#COMMENT: the position of the element, counting from 0
#NAME: mem_is_system_malloc
#PARENT: GLib
#COMMENT: Checks whether the allocator used by g_malloc() is the system's
malloc implementation. If it returns %TRUE memory allocated with
malloc() can be used interchangeable with memory allocated using g_malloc().
This function is useful for avoiding an extra copy of allocated memory returned
by a non-GLib-based API.

A different allocator can be set using g_mem_set_vtable().
#NAME: get_user_cache_dir
#PARENT: GLib.get_user_cache_dir
#COMMENT: a string owned by GLib that must not be modified
              or freed.
#NAME: set_max_idle_time
#PARENT: GLib.ThreadPool
#COMMENT: This function will set the maximum @interval that a thread
waiting in the pool for new tasks can be idle for before
being stopped. This function is similar to calling
g_thread_pool_stop_unused_threads() on a regular timeout,
except this is done on a per thread basis.

By setting @interval to 0, idle threads will not be stopped.

The default value is 15000 (15 seconds).
#NAME: is_first_of_month
#PARENT: GLib.Date.is_first_of_month
#COMMENT: %TRUE if the date is the first of the month
#NAME: SOURCE_REMOVE
#PARENT: GLib
#COMMENT: Use this macro as the return value of a #GSourceFunc to remove
the #GSource from the main loop.
#NAME: remove
#PARENT: GLib.List.remove
#COMMENT: the (possibly changed) start of the #GList
#NAME: free_to_bytes
#PARENT: GLib.ByteArray.free_to_bytes
#COMMENT: a new immutable #GBytes representing same
    byte data that was in the array
#NAME: type
#PARENT: GLib.Variant.new_from_bytes.Variant
#COMMENT: a #GVariantType
#NAME: foreach_remove
#PARENT: GLib.HashTable.foreach_remove
#COMMENT: the number of key/value pairs removed
#NAME: data
#PARENT: GLib.OptionParseFunc.gboolean
#COMMENT: User data added to the #GOptionGroup containing the option when it
 was created with g_option_group_new()
#NAME: days
#PARENT: GLib.DateTime.add_full.DateTime
#COMMENT: the number of days to add
#NAME: match
#PARENT: GLib.RegexError
#COMMENT: The match process failed.
#NAME: type
#PARENT: GLib.VariantType.value.VariantType
#COMMENT: a dictionary entry #GVariantType
#NAME: data
#PARENT: GLib.List.index.gint
#COMMENT: the data to find
#NAME: scan_hex_dollar
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if '$' is recognized as a prefix for
    hexadecimal numbers (the default is %FALSE).
#NAME: strdelimit
#PARENT: GLib.strdelimit
#COMMENT: @string
#NAME: func
#PARENT: GLib.List.find_custom.gpointer
#COMMENT: the function to call for each element.
    It should return 0 when the desired element is found
#NAME: lock
#PARENT: GLib.Mutex
#COMMENT: Locks @mutex. If @mutex is already locked by another thread, the
current thread will block until @mutex is unlocked by the other
thread.

#GMutex is neither guaranteed to be recursive nor to be
non-recursive.  As such, calling g_mutex_lock() on a #GMutex that has
already been locked by the same thread results in undefined behaviour
(including but not limited to deadlocks).
#NAME: new_from_unix_local
#PARENT: GLib.DateTime.new_from_unix_local
#COMMENT: a new #GDateTime, or %NULL
#NAME: last_child
#PARENT: GLib.Node
#COMMENT: Gets the last child of a #GNode.
#NAME: translit_locale
#PARENT: GLib.str_tokenize_and_fold.utf8
#COMMENT: the language code (like 'de' or
  'en_GB') from which @string originates
#NAME: match_info
#PARENT: GLib.MatchInfo.fetch_pos.gboolean
#COMMENT: #GMatchInfo structure
#NAME: out_len
#PARENT: GLib.base64_decode_inplace.guint8
#COMMENT: The length of the decoded data is written here
#NAME: type
#PARENT: GLib.Variant.is_of_type.gboolean
#COMMENT: a #GVariantType
#NAME: TokenValue
#PARENT: GLib
#COMMENT: A union holding the value of the token.
#NAME: unicode_script_from_iso15924
#PARENT: GLib.unicode_script_from_iso15924
#COMMENT: the Unicode script for @iso15924, or
  of %G_UNICODE_SCRIPT_INVALID_CODE if @iso15924 is zero and
  %G_UNICODE_SCRIPT_UNKNOWN if @iso15924 is unknown.
#NAME: GINT64_FORMAT
#PARENT: GLib
#COMMENT: This is the platform dependent conversion specifier for scanning
and printing values of type #gint64. See also #G_GINT16_FORMAT.

Some platforms do not support scanning and printing 64-bit integers,
even though the types are supported. On such platforms %G_GINT64_FORMAT
is not defined. Note that scanf() may not support 64-bit integers, even
if %G_GINT64_FORMAT is defined. Due to its weak error handling, scanf()
is not recommended for parsing anyway; consider using g_ascii_strtoull()
instead.
#NAME: uri
#PARENT: GLib.BookmarkFile.get_applications.utf8
#COMMENT: a valid URI
#NAME: new_array
#PARENT: GLib.Variant
#COMMENT: Creates a new #GVariant array from @children.

@child_type must be non-%NULL if @n_children is zero.  Otherwise, the
child type is determined by inspecting the first element of the
@children array.  If @child_type is non-%NULL then it must be a
definite type.

The items of the array are taken from the @children array.  No entry
in the @children array may be %NULL.

All items in the array must have the same type, which must be the
same as @child_type, if given.

If the @children are floating references (see g_variant_ref_sink()), the
new instance takes ownership of them as if via g_variant_ref_sink().
#NAME: year
#PARENT: GLib.DateTime.new.DateTime
#COMMENT: the year component of the date
#NAME: control
#PARENT: GLib.UnicodeType
#COMMENT: General category "Other, Control" (Cc)
#NAME: dup_string
#PARENT: GLib.Variant.dup_string
#COMMENT: a newly allocated string, UTF-8 encoded
#NAME: prepare
#PARENT: GLib.MainContext
#COMMENT: Prepares to poll sources within a main loop. The resulting information
for polling is determined by calling g_main_context_query ().

You must have successfully acquired the context with
g_main_context_acquire() before you may call this function.
#NAME: LITTLE_ENDIAN
#PARENT: GLib
#COMMENT: Specifies one of the possible types of byte order.
See #G_BYTE_ORDER.
#NAME: hook
#PARENT: GLib.Hook.destroy_link.none
#COMMENT: the #GHook to remove
#NAME: utf8_strrchr
#PARENT: GLib
#COMMENT: Find the rightmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to @len bytes.
If @len is -1, allow unbounded search.
#NAME: mime_type
#PARENT: GLib.BookmarkFile.get_icon.gboolean
#COMMENT: return location for the icon's MIME type or %NULL
#NAME: sequence_remove_range
#PARENT: GLib
#COMMENT: Removes all items in the (@begin, @end) range.

If the sequence has a data destroy function associated with it, this
function is called on the data for the removed items.
#NAME: may_be_in_call
#PARENT: GLib.Hook.next_valid.Hook
#COMMENT: %TRUE if hooks which are currently running
    (e.g. in another thread) are considered valid. If set to %FALSE,
    these are skipped
#NAME: endptr
#PARENT: GLib.ascii_strtoull.guint64
#COMMENT: if non-%NULL, it returns the character after
          the last character used in the conversion.
#NAME: filename
#PARENT: GLib.access.gint
#COMMENT: a pathname in the GLib file name encoding (UTF-8 on Windows)
#NAME: unichar_combining_class
#PARENT: GLib.unichar_combining_class
#COMMENT: the combining class of the character
#NAME: reserved_size
#PARENT: GLib.PtrArray.sized_new.gpointer
#COMMENT: number of pointers preallocated
#NAME: free
#PARENT: GLib.VariantIter
#COMMENT: Frees a heap-allocated #GVariantIter.  Only call this function on
iterators that were returned by g_variant_iter_new() or
g_variant_iter_copy().
#NAME: key_not_found
#PARENT: GLib.KeyFileError
#COMMENT: a requested key was not found
#NAME: format
#PARENT: GLib.sprintf.gint
#COMMENT: a standard printf() format string, but notice
         [string precision pitfalls][string-precision]
#NAME: data
#PARENT: GLib.List.append.gpointer
#COMMENT: the data for the new element
#NAME: key_file
#PARENT: GLib.KeyFile.set_int64.none
#COMMENT: a #GKeyFile
#NAME: get_keys
#PARENT: GLib.KeyFile
#COMMENT: Returns all keys for the group name @group_name.  The array of
returned keys will be %NULL-terminated, so @length may
optionally be %NULL. In the event that the @group_name cannot
be found, %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
#NAME: unref
#PARENT: GLib.HashTable
#COMMENT: Atomically decrements the reference count of @hash_table by one.
If the reference count drops to 0, all keys and values will be
destroyed, and all memory allocated by the hash table is released.
This function is MT-safe and may be called from any thread.
#NAME: 
#PARENT: GLib.propagate_prefixed_error.none...
#COMMENT: arguments to @format
#NAME: hangul_l_jamo
#PARENT: GLib.UnicodeBreakType
#COMMENT: Hangul L Jamo (JL)
#NAME: ref
#PARENT: GLib.VariantDict.ref
#COMMENT: a new reference to @dict
#NAME: match_info
#PARENT: GLib.RegexEvalCallback.gboolean
#COMMENT: the #GMatchInfo generated by the match.
    Use g_match_info_get_regex() and g_match_info_get_string() if you
    need the #GRegex or the matched string.
#NAME: hash_table_lookup_extended
#PARENT: GLib
#COMMENT: Looks up a key in the #GHashTable, returning the original key and the
associated value and a #gboolean which is %TRUE if the key was found. This
is useful if you need to free the memory allocated for the original key,
for example before calling g_hash_table_remove().

You can actually pass %NULL for @lookup_key to test
whether the %NULL key exists, provided the hash and equal functions
of @hash_table are %NULL-safe.
#NAME: string
#PARENT: GLib.unicode_canonical_ordering.none
#COMMENT: a UCS-4 encoded string.
#NAME: key_file
#PARENT: GLib.KeyFile.get_start_group.utf8
#COMMENT: a #GKeyFile
#NAME: position
#PARENT: GLib.List.insert.gpointer
#COMMENT: the position to insert the element. If this is
    negative, or is larger than the number of elements in the
    list, the new element is added on to the end of the list.
#NAME: filename
#PARENT: GLib.OptionFlags
#COMMENT: For options of the %G_OPTION_ARG_CALLBACK
    kind, this flag indicates that the argument should be passed to the
    callback in the GLib filename encoding rather than UTF-8. Since 2.8
#NAME: contains
#PARENT: GLib.HashTable.contains
#COMMENT: %TRUE if @key is in @hash_table, %FALSE otherwise.
#NAME: test_rand_double_range
#PARENT: GLib
#COMMENT: Get a reproducible random floating pointer number out of a specified range,
see g_test_rand_int() for details on test case random numbers.
#NAME: non_digit_in_const
#PARENT: GLib.ErrorType
#COMMENT: non-digit character in a number
#NAME: get_uint64
#PARENT: GLib.Variant
#COMMENT: Returns the 64-bit unsigned integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_UINT64.
#NAME: HashTableIter
#PARENT: GLib
#COMMENT: A GHashTableIter structure represents an iterator that can be used
to iterate over the elements of a #GHashTable. GHashTableIter
structures are typically allocated on the stack and then initialized
with g_hash_table_iter_init().
#NAME: vasprintf
#PARENT: GLib.vasprintf
#COMMENT: the number of bytes printed.
#NAME: tv
#PARENT: GLib.DateTime.new_from_timeval_local.DateTime
#COMMENT: a #GTimeVal
#NAME: KEY_FILE_DESKTOP_KEY_HIDDEN
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the desktop entry has been deleted by the user.
#NAME: PI_2
#PARENT: GLib
#COMMENT: Pi divided by 2.
#NAME: TIME_SPAN_DAY
#PARENT: GLib
#COMMENT: Evaluates to a time span of one day.
#NAME: channel
#PARENT: GLib.IOChannel.get_line_term.utf8
#COMMENT: a #GIOChannel
#NAME: PI_4
#PARENT: GLib
#COMMENT: Pi divided by 4.
#NAME: list1
#PARENT: GLib.List.concat.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: data
#PARENT: GLib.child_watch_add_full.guint
#COMMENT: data to pass to @function
#NAME: list2
#PARENT: GLib.List.concat.gpointer
#COMMENT: the #GList to add to the end of the first #GList,
    this must point  to the top of the list
#NAME: data
#PARENT: GLib.SList.prepend.gpointer
#COMMENT: the data for the new element
#NAME: cmp_func
#PARENT: GLib.Sequence.sort_changed.none
#COMMENT: the function used to compare items in the sequence
#NAME: length
#PARENT: GLib.Variant.dup_string.utf8
#COMMENT: a pointer to a #gsize, to store the length
#NAME: string
#PARENT: GLib.strsplit_set.utf8
#COMMENT: The string to be tokenized
#NAME: list
#PARENT: GLib.SList.sort_with_data.gpointer
#COMMENT: a #GSList
#NAME: get_ready_time
#PARENT: GLib.Source
#COMMENT: Gets the "ready time" of @source, as set by
g_source_set_ready_time().

Any time before the current monotonic time (including 0) is an
indication that the source will fire immediately.
#NAME: trash_stack_height
#PARENT: GLib
#COMMENT: Returns the height of a #GTrashStack.

Note that execution of this function is of O(N) complexity
where N denotes the number of items on the stack.
#NAME: difference
#PARENT: GLib.DateTime.difference
#COMMENT: the difference between the two #GDateTime, as a time
  span expressed in microseconds.
#NAME: envp
#PARENT: GLib.environ_unsetenv.utf8
#COMMENT: an environment
    list that can be freed using g_strfreev() (e.g., as returned from g_get_environ()),
    or %NULL for an empty environment list
#NAME: type
#PARENT: GLib.VariantType.n_items.gsize
#COMMENT: a tuple or dictionary entry #GVariantType
#NAME: node
#PARENT: GLib.Node.child_index.gint
#COMMENT: a #GNode
#NAME: format
#PARENT: GLib.Scanner.error.none
#COMMENT: the message format. See the printf() documentation
#NAME: hash_table_remove
#PARENT: GLib.hash_table_remove
#COMMENT: %TRUE if the key was found and removed from the #GHashTable
#NAME: get_sunday_weeks_in_year
#PARENT: GLib.Date.get_sunday_weeks_in_year
#COMMENT: the number of weeks in @year
#NAME: length
#PARENT: GLib.Regex.escape_nul.utf8
#COMMENT: the length of @string
#NAME: msgid
#PARENT: GLib.dcgettext.utf8
#COMMENT: message to translate
#NAME: func
#PARENT: GLib.Queue.foreach.none
#COMMENT: the function to call for each element's data
#NAME: new_dmy
#PARENT: GLib.Date.new_dmy
#COMMENT: a newly-allocated #GDate initialized with @day, @month, and @year
#NAME: compare_func
#PARENT: GLib.ByteArray.sort.none
#COMMENT: comparison function
#NAME: cmp_data
#PARENT: GLib.Sequence.insert_sorted_iter.SequenceIter
#COMMENT: user data passed to @cmp_func
#NAME: context
#PARENT: GLib.OptionParseFunc.gboolean
#COMMENT: The active #GOptionContext
#NAME: remove_index_fast
#PARENT: GLib.ByteArray
#COMMENT: Removes the byte at the given index from a #GByteArray. The last
element in the array is used to fill in the space, so this function
does not preserve the order of the #GByteArray. But it is faster
than g_byte_array_remove_index().
#NAME: tuesday
#PARENT: GLib.DateWeekday
#COMMENT: Tuesday
#NAME: seq_id
#PARENT: GLib.HookList
#COMMENT: the next free #GHook id
#NAME: idle_add_full
#PARENT: GLib.idle_add_full
#COMMENT: the ID (greater than 0) of the event source.
#NAME: TestFunc
#PARENT: GLib
#COMMENT: The type used for test case functions.
#NAME: steal
#PARENT: GLib.Tree.steal
#COMMENT: %TRUE if the key was found (prior to 2.8, this function
    returned nothing)
#NAME: context
#PARENT: GLib.MainContext.iteration.gboolean
#COMMENT: a #GMainContext (if %NULL, the default context will be used)
#NAME: dict
#PARENT: GLib.VariantDict.ref.VariantDict
#COMMENT: a heap-allocated #GVariantDict
#NAME: copy
#PARENT: GLib.Checksum
#COMMENT: Copies a #GChecksum. If @checksum has been closed, by calling
g_checksum_get_string() or g_checksum_get_digest(), the copied
checksum will be closed as well.
#NAME: prev
#PARENT: GLib.Hook
#COMMENT: pointer to the previous hook in the list
#NAME: cmp_data
#PARENT: GLib.Sequence.sort_iter.none
#COMMENT: user data passed to @cmp_func
#NAME: get_month
#PARENT: GLib.Date
#COMMENT: Returns the month of the year. The date must be valid.
#NAME: vsprintf
#PARENT: GLib.vsprintf
#COMMENT: the number of bytes printed.
#NAME: scope_id
#PARENT: GLib.Scanner.scope_remove_symbol.none
#COMMENT: the scope id
#NAME: arg_description
#PARENT: GLib.OptionEntry
#COMMENT: The placeholder to use for the extra argument parsed
    by the option in `--help` output. The @arg_description is translated
    using the @translate_func of the group, see
    g_option_group_set_translation_domain().
#NAME: get_max_unused_threads
#PARENT: GLib.ThreadPool.get_max_unused_threads
#COMMENT: the maximal number of unused threads
#NAME: free_1
#PARENT: GLib.SList
#COMMENT: Frees one #GSList element.
It is usually used after g_slist_remove_link().
#NAME: iter
#PARENT: GLib.VariantIter.next.gboolean
#COMMENT: a #GVariantIter
#NAME: checksum
#PARENT: GLib.Checksum.update.none
#COMMENT: a #GChecksum
#NAME: data
#PARENT: GLib.Bytes.new_static.Bytes
#COMMENT: 
          the data to be used for the bytes
#NAME: fetch_pos
#PARENT: GLib.MatchInfo
#COMMENT: Retrieves the position in bytes of the @match_num'th capturing
parentheses. 0 is the full text of the match, 1 is the first
paren set, 2 the second, and so on.

If @match_num is a valid sub pattern but it didn't match anything
(e.g. sub pattern 1, matching "b" against "(a)?b") then @start_pos
and @end_pos are set to -1 and %TRUE is returned.

If the match was obtained using the DFA algorithm, that is using
g_regex_match_all() or g_regex_match_all_full(), the retrieved
position is not that of a set of parentheses but that of a matched
substring. Substrings are matched in reverse order of length, so
0 is the longest match.
#NAME: find_program_in_path
#PARENT: GLib.find_program_in_path
#COMMENT: a newly-allocated string with the absolute path, or %NULL
#NAME: unlock
#PARENT: GLib.Mutex
#COMMENT: Unlocks @mutex. If another thread is blocked in a g_mutex_lock()
call for @mutex, it will become unblocked and can lock @mutex itself.

Calling g_mutex_unlock() on a mutex that is not locked by the
current thread leads to undefined behaviour.
#NAME: lookup
#PARENT: GLib.VariantDict.lookup
#COMMENT: %TRUE if a value was unpacked
#NAME: c
#PARENT: GLib.unichar_isprint.gboolean
#COMMENT: a Unicode character
#NAME: get_can_recurse
#PARENT: GLib.Source.get_can_recurse
#COMMENT: whether recursion is allowed.
#NAME: datalist_set_flags
#PARENT: GLib
#COMMENT: Turns on flag values for a data list. This function is used
to keep a small number of boolean flags in an object with
a data list without using any additional space. It is
not generally useful except in circumstances where space
is very tight. (It is used in the base #GObject type, for
example.)
#NAME: delimiter
#PARENT: GLib.strsplit.utf8
#COMMENT: a string which specifies the places at which to split
    the string. The delimiter is not included in any of the resulting
    strings, unless @max_tokens is reached.
#NAME: max_threads
#PARENT: GLib.thread_pool_set_max_unused_threads.none
#COMMENT: maximal number of unused threads
#NAME: child
#PARENT: GLib.Node.child_position.gint
#COMMENT: a child of @node
#NAME: dt1
#PARENT: GLib.DateTime.compare.gint
#COMMENT: first #GDateTime to compare
#NAME: date_is_leap_year
#PARENT: GLib.date_is_leap_year
#COMMENT: %TRUE if the year is a leap year
#NAME: dt2
#PARENT: GLib.DateTime.compare.gint
#COMMENT: second #GDateTime to compare
#NAME: OptionEntry
#PARENT: GLib
#COMMENT: A GOptionEntry struct defines a single option. To have an effect, they
must be added to a #GOptionGroup with g_option_context_add_main_entries()
or g_option_group_add_entries().
#NAME: close
#PARENT: GLib.VariantBuilder
#COMMENT: Closes the subcontainer inside the given @builder that was opened by
the most recent call to g_variant_builder_open().

It is an error to call this function in any way that would create an
inconsistent value to be constructed (ie: too few values added to the
subcontainer).
#NAME: func
#PARENT: GLib.Queue.find_custom.gpointer
#COMMENT: a #GCompareFunc to call for each element. It should return 0
    when the desired element is found
#NAME: meetei_mayek
#PARENT: GLib.UnicodeScript
#COMMENT: Meetei Mayek. Since 2.26
#NAME: compute_checksum_for_data
#PARENT: GLib.compute_checksum_for_data
#COMMENT: the digest of the binary data as a string in hexadecimal.
  The returned string should be freed with g_free() when done using it.
#NAME: get_value
#PARENT: GLib.KeyFile
#COMMENT: Returns the raw value associated with @key under @group_name.
Use g_key_file_get_string() to retrieve an unescaped UTF-8 string.

In the event the key cannot be found, %NULL is returned and
@error is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the @group_name cannot be found, %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
#NAME: day
#PARENT: GLib.Date.new_dmy.Date
#COMMENT: day of the month
#NAME: get_max_idle_time
#PARENT: GLib.ThreadPool.get_max_idle_time
#COMMENT: the maximum @interval (milliseconds) to wait
    for new tasks in the thread pool before stopping the
    thread
#NAME: add_entries
#PARENT: GLib.OptionGroup
#COMMENT: Adds the options specified in @entries to @group.
#NAME: io_create_watch
#PARENT: GLib.io_create_watch
#COMMENT: a new #GSource
#NAME: elbasan
#PARENT: GLib.UnicodeScript
#COMMENT: Elbasan. Since: 2.42
#NAME: list
#PARENT: GLib.SList.remove.gpointer
#COMMENT: a #GSList
#NAME: regex_match_simple
#PARENT: GLib.regex_match_simple
#COMMENT: %TRUE if the string matched, %FALSE otherwise
#NAME: regex
#PARENT: GLib.Regex.match.gboolean
#COMMENT: a #GRegex structure from g_regex_new()
#NAME: nnodes
#PARENT: GLib.Tree.nnodes
#COMMENT: the number of nodes in @tree
#NAME: tag
#PARENT: GLib.source_set_name_by_id.none
#COMMENT: a #GSource ID
#NAME: unichar_toupper
#PARENT: GLib
#COMMENT: Converts a character to uppercase.
#NAME: dataset_location
#PARENT: GLib.dataset_id_set_data_full.none
#COMMENT: the location identifying the dataset.
#NAME: reset
#PARENT: GLib.Timer
#COMMENT: This function is useless; it's fine to call g_timer_start() on an
already-started timer to reset the start time, so g_timer_reset()
serves no purpose.
#NAME: utf8_collate_key_for_filename
#PARENT: GLib
#COMMENT: Converts a string into a collation key that can be compared
with other collation keys produced by the same function using strcmp().

In order to sort filenames correctly, this function treats the dot '.'
as a special case. Most dictionary orderings seem to consider it
insignificant, thus producing the ordering "event.c" "eventgenerator.c"
"event.h" instead of "event.c" "event.h" "eventgenerator.c". Also, we
would like to treat numbers intelligently so that "file1" "file10" "file5"
is sorted as "file1" "file5" "file10".

Note that this function depends on the [current locale][setlocale].
#NAME: test_trap_reached_timeout
#PARENT: GLib.test_trap_reached_timeout
#COMMENT: %TRUE if the last test subprocess got killed due to a timeout.
#NAME: list
#PARENT: GLib.List.prepend.gpointer
#COMMENT: a pointer to a #GList, this must point to the top of the list
#NAME: priority
#PARENT: GLib.timeout_add_full.guint
#COMMENT: the priority of the timeout source. Typically this will be in
           the range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
#NAME: sort
#PARENT: GLib.Array
#COMMENT: Sorts a #GArray using @compare_func which should be a qsort()-style
comparison function (returns less than zero for first arg is less
than second arg, zero for equal, greater zero if first arg is
greater than second arg).

This is guaranteed to be a stable sort since version 2.32.
#NAME: user_data
#PARENT: GLib.HRFunc.gboolean
#COMMENT: user data passed to g_hash_table_remove()
#NAME: strdown
#PARENT: GLib
#COMMENT: Converts a string to lower case.
#NAME: eof
#PARENT: GLib.Scanner
#COMMENT: Returns %TRUE if the scanner has reached the end of
the file or text buffer.
#NAME: VariantParseError
#PARENT: GLib
#COMMENT: Error codes returned by parsing text-format GVariants.
#NAME: max_height
#PARENT: GLib.Node.max_height
#COMMENT: the maximum height of the tree beneath @root
#NAME: free
#PARENT: GLib.MarkupParseContext
#COMMENT: Frees a #GMarkupParseContext.

This function can't be called from inside one of the
#GMarkupParser functions or while a subparser is pushed.
#NAME: posix_collating_elements_not_supported
#PARENT: GLib.RegexError
#COMMENT: POSIX collating
    elements are not supported. Since 2.16
#NAME: dup_string
#PARENT: GLib.VariantType
#COMMENT: Returns a newly-allocated copy of the type string corresponding to
@type.  The returned string is nul-terminated.  It is appropriate to
call g_free() on the return value.
#NAME: math_symbol
#PARENT: GLib.UnicodeType
#COMMENT: General category "Symbol, Math" (Sm)
#NAME: unichar_iscntrl
#PARENT: GLib
#COMMENT: Determines whether a character is a control character.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().
#NAME: data
#PARENT: GLib.Hook.find.Hook
#COMMENT: the data to pass to @func
#NAME: group_name
#PARENT: GLib.KeyFile.set_boolean.none
#COMMENT: a group name
#NAME: bookmark
#PARENT: GLib.BookmarkFile.set_mime_type.none
#COMMENT: a #GBookmarkFile
#NAME: days
#PARENT: GLib.DateTime.add_days.DateTime
#COMMENT: the number of days
#NAME: 
#PARENT: GLib.VariantDict.insert.none...
#COMMENT: arguments, as per @format_string
#NAME: fds
#PARENT: GLib.MainContext.check.gint
#COMMENT: array of #GPollFD's that was passed to
      the last call to g_main_context_query()
#NAME: copy
#PARENT: GLib.Node.copy
#COMMENT: a new #GNode containing the same data pointers
#NAME: standard_output
#PARENT: GLib.spawn_sync.gboolean
#COMMENT: return location for child output, or %NULL
#NAME: ThreadPool
#PARENT: GLib
#COMMENT: The #GThreadPool struct represents a thread pool. It has three
public read-only members, but the underlying struct is bigger,
so you must not copy this struct.
#NAME: vai
#PARENT: GLib.UnicodeScript
#COMMENT: Vai. Since 2.16.3
#NAME: ThreadFunc
#PARENT: GLib.ThreadFunc
#COMMENT: the return value of the thread
#NAME: n_block_bytes
#PARENT: GLib.malloc0_n.gpointer
#COMMENT: the size of each block in bytes
#NAME: identifier_null
#PARENT: GLib.TokenType
#COMMENT: a null identifier
#NAME: queue
#PARENT: GLib.Queue.init.none
#COMMENT: an uninitialized #GQueue
#NAME: match_simple
#PARENT: GLib.Regex.match_simple
#COMMENT: %TRUE if the string matched, %FALSE otherwise
#NAME: try_malloc0
#PARENT: GLib.try_malloc0
#COMMENT: the allocated memory, or %NULL
#NAME: pipe
#PARENT: GLib.FileError
#COMMENT: Broken pipe; there is no process reading from the
    other end of a pipe. Every library function that returns this
    error code also generates a 'SIGPIPE' signal; this signal
    terminates the program if not handled or blocked. Thus, your
    program will never actually see this code unless it has handled
    or blocked 'SIGPIPE'.
#NAME: pattern
#PARENT: GLib.Regex.match_simple.gboolean
#COMMENT: the regular expression
#NAME: cpair_comment_single
#PARENT: GLib.ScannerConfig
#COMMENT: specifies the characters at the start and
    end of single-line comments. The default is "#\n" which means
    that single-line comments start with a '#' and continue until
    a '\n' (end of line).
#NAME: source
#PARENT: GLib.Source.ref.Source
#COMMENT: a #GSource
#NAME: test_func
#PARENT: GLib.test_add_data_func_full.none
#COMMENT: The test function to invoke for this test.
#NAME: alloc
#PARENT: GLib.List.alloc
#COMMENT: a pointer to the newly-allocated #GList element
#NAME: cmp_data
#PARENT: GLib.Sequence.sort.none
#COMMENT: user data passed to @cmp_func
#NAME: path_get_basename
#PARENT: GLib.path_get_basename
#COMMENT: a newly allocated string containing the last
   component of the filename
#NAME: leave_descriptors_open
#PARENT: GLib.SpawnFlags
#COMMENT: the parent's open file descriptors will
    be inherited by the child; otherwise all descriptors except stdin,
    stdout and stderr will be closed before calling exec() in the child.
#NAME: io_channel_error_from_errno
#PARENT: GLib
#COMMENT: Converts an `errno` error number to a #GIOChannelError.
#NAME: set_locale_string
#PARENT: GLib.KeyFile
#COMMENT: Associates a string value for @key and @locale under @group_name.
If the translation for @key cannot be found then it is created.
#NAME: user_data
#PARENT: GLib.HFunc.none
#COMMENT: user data passed to g_hash_table_foreach()
#NAME: get_contents
#PARENT: GLib.MappedFile
#COMMENT: Returns the contents of a #GMappedFile.

Note that the contents may not be zero-terminated,
even if the #GMappedFile is backed by a text file.

If the file is empty then %NULL is returned.
#NAME: key_file
#PARENT: GLib.KeyFile.set_locale_string.none
#COMMENT: a #GKeyFile
#NAME: match_info
#PARENT: GLib.Regex.match.gboolean
#COMMENT: pointer to location where to store
    the #GMatchInfo, or %NULL if you do not need it
#NAME: get_size
#PARENT: GLib.BookmarkFile.get_size
#COMMENT: the number of bookmarks
#NAME: str
#PARENT: GLib.utf8_collate_key_for_filename.utf8
#COMMENT: a UTF-8 encoded string.
#NAME: writer_unlock
#PARENT: GLib.RWLock
#COMMENT: Release a write lock on @rw_lock.

Calling g_rw_lock_writer_unlock() on a lock that is not held
by the current thread leads to undefined behaviour.
#NAME: slice_alloc
#PARENT: GLib.slice_alloc
#COMMENT: a pointer to the allocated memory block
#NAME: user_data
#PARENT: GLib.HashTable.find.gpointer
#COMMENT: user data to pass to the function
#NAME: insert_vals
#PARENT: GLib.Array.insert_vals
#COMMENT: the #GArray
#NAME: function
#PARENT: GLib.timeout_add_full.guint
#COMMENT: function to call
#NAME: get_string
#PARENT: GLib.MatchInfo
#COMMENT: Returns the string searched with @match_info. This is the
string passed to g_regex_match() or g_regex_replace() so
you may not free it before calling this function.
#NAME: atomic_int_and
#PARENT: GLib
#COMMENT: Performs an atomic bitwise 'and' of the value of @atomic and @val,
storing the result back in @atomic.

This call acts as a full compiler and hardware memory barrier.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic &= val; return tmp; }`.
#NAME: badf
#PARENT: GLib.FileError
#COMMENT: Bad file descriptor; for example, I/O on a
    descriptor that has been closed or reading from a descriptor open
    only for writing (or vice versa).
#NAME: date_valid_weekday
#PARENT: GLib
#COMMENT: Returns %TRUE if the weekday is valid. The seven #GDateWeekday enumeration
values are the only valid weekdays.
#NAME: unichar_to_utf8
#PARENT: GLib
#COMMENT: Converts a single character to UTF-8.
#NAME: atomic_int_get
#PARENT: GLib
#COMMENT: Gets the current value of @atomic.

This call acts as a full compiler and hardware
memory barrier (before the get).
#NAME: get_data
#PARENT: GLib.Variant.get_data
#COMMENT: the serialised form of @value, or %NULL
#NAME: hash_table
#PARENT: GLib.hash_table_replace.gboolean
#COMMENT: a #GHashTable
#NAME: context
#PARENT: GLib.OptionContext.set_help_enabled.none
#COMMENT: a #GOptionContext
#NAME: key_file
#PARENT: GLib.KeyFile.get_keys.utf8
#COMMENT: a #GKeyFile
#NAME: new_tuple
#PARENT: GLib.Variant.new_tuple
#COMMENT: a floating reference to a new #GVariant tuple
#NAME: mode
#PARENT: GLib.mkdir_with_parents.gint
#COMMENT: permissions to use for newly created directories
#NAME: strdupv
#PARENT: GLib
#COMMENT: Copies %NULL-terminated array of strings. The copy is a deep copy;
the new array should be freed by first freeing each string, then
the array itself. g_strfreev() does this for you. If called
on a %NULL value, g_strdupv() simply returns %NULL.
#NAME: test_trap_reached_timeout
#PARENT: GLib
#COMMENT: Check the result of the last g_test_trap_subprocess() call.
#NAME: pool
#PARENT: GLib.ThreadPool.free.none
#COMMENT: a #GThreadPool
#NAME: data_free_func
#PARENT: GLib.test_add_data_func_full.none
#COMMENT: #GDestroyNotify for @test_data.
#NAME: print_string
#PARENT: GLib.Variant
#COMMENT: Behaves as g_variant_print(), but operates on a #GString.

If @string is non-%NULL then it is appended to and returned.  Else,
a new empty #GString is allocated and it is returned.
#NAME: key
#PARENT: GLib.KeyFile.get_uint64.guint64
#COMMENT: a non-%NULL key
#NAME: tree
#PARENT: GLib.Tree.remove.gboolean
#COMMENT: a #GTree
#NAME: en
#PARENT: GLib.IOChannel.error_from_errno.IOChannelError
#COMMENT: an `errno` error number, e.g. `EINVAL`
#NAME: data
#PARENT: GLib.SList.append.gpointer
#COMMENT: the data for the new element
#NAME: mfile
#PARENT: GLib.FileError
#COMMENT: The current process has too many files open and
    can't open any more. Duplicate descriptors do count toward this
    limit.
#NAME: source
#PARENT: GLib.IOFunc.gboolean
#COMMENT: the #GIOChannel event source
#NAME: ascii_digit_value
#PARENT: GLib
#COMMENT: Determines the numeric value of a character as a decimal digit.
Differs from g_unichar_digit_value() because it takes a char, so
there's no worry about sign extension if characters are signed.
#NAME: pattern_match_string
#PARENT: GLib
#COMMENT: Matches a string against a compiled pattern. If the string is to be
matched against more than one pattern, consider using
g_pattern_match() instead while supplying the reversed string.
#NAME: data
#PARENT: GLib.Node.traverse.none
#COMMENT: user data to pass to the function
#NAME: isdir
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `EISDIR`
#NAME: ideographic
#PARENT: GLib.UnicodeBreakType
#COMMENT: Ideographic (ID)
#NAME: IOFunc
#PARENT: GLib
#COMMENT: Specifies the type of function passed to g_io_add_watch() or
g_io_add_watch_full(), which is called when the requested condition
on a #GIOChannel is satisfied.
#NAME: get_help_enabled
#PARENT: GLib.OptionContext
#COMMENT: Returns whether automatic `--help` generation
is turned on for @context. See g_option_context_set_help_enabled().
#NAME: months
#PARENT: GLib.DateTime.add_full.DateTime
#COMMENT: the number of months to add
#NAME: v_error
#PARENT: GLib.TokenValue
#COMMENT: error value
#NAME: stack_p
#PARENT: GLib.trash_stack_height.guint
#COMMENT: a #GTrashStack
#NAME: is_dst
#PARENT: GLib.TimeZone
#COMMENT: Determines if daylight savings time is in effect during a particular
@interval of time in the time zone @tz.
#NAME: data_p
#PARENT: GLib.TrashStack.push.none
#COMMENT: the piece of memory to push on the stack
#NAME: state
#PARENT: GLib.base64_encode_close.gsize
#COMMENT: Saved state from g_base64_encode_step()
#NAME: javascript_compat
#PARENT: GLib.RegexCompileFlags
#COMMENT: Changes behaviour so that it is compatible with
    JavaScript rather than PCRE. Since: 2.34
#NAME: thread
#PARENT: GLib.Thread.ref.Thread
#COMMENT: a #GThread
#NAME: missing_control_char
#PARENT: GLib.RegexError
#COMMENT: "\\c" at end of pattern. Since 2.16
#NAME: variant_is_signature
#PARENT: GLib.variant_is_signature
#COMMENT: %TRUE if @string is a D-Bus type signature
#NAME: bit_nth_msf
#PARENT: GLib
#COMMENT: Find the position of the first bit set in @mask, searching
from (but not including) @nth_bit downwards. Bits are numbered
from 0 (least significant) to sizeof(#gulong) * 8 - 1 (31 or 63,
usually). To start searching from the last bit, set @nth_bit to
-1 or GLIB_SIZEOF_LONG * 8.
#NAME: script
#PARENT: GLib.unicode_script_to_iso15924.guint32
#COMMENT: a Unicode script
#NAME: n_children
#PARENT: GLib.Variant.n_children
#COMMENT: the number of children in the container
#NAME: c
#PARENT: GLib.unichar_ispunct.gboolean
#COMMENT: a Unicode character
#NAME: range_start
#PARENT: GLib.test_rand_double_range.gdouble
#COMMENT: the minimum value returned by this function
#NAME: strchug
#PARENT: GLib
#COMMENT: Removes leading whitespace from a string, by moving the rest
of the characters forward.

This function doesn't allocate or reallocate any memory;
it modifies @string in place. Therefore, it cannot be used on
statically allocated strings.

The pointer to @string is returned to allow the nesting of functions.

Also see g_strchomp() and g_strstrip().
#NAME: length
#PARENT: GLib.KeyFile.get_boolean_list.gboolean
#COMMENT: the number of booleans returned
#NAME: encoding
#PARENT: GLib.IOChannel.set_encoding.IOStatus
#COMMENT: the encoding type
#NAME: hook_list
#PARENT: GLib.hook_destroy_link.none
#COMMENT: a #GHookList
#NAME: queue
#PARENT: GLib.AsyncQueue.push_sorted.none
#COMMENT: a #GAsyncQueue
#NAME: do_not_reap_child
#PARENT: GLib.SpawnFlags
#COMMENT: the child will not be automatically reaped;
    you must use g_child_watch_add() yourself (or call waitpid() or handle
    `SIGCHLD` yourself), or the child will become a zombie.
#NAME: length
#PARENT: GLib.compute_checksum_for_string.utf8
#COMMENT: the length of the string, or -1 if the string is null-terminated.
#NAME: utf8_strncpy
#PARENT: GLib
#COMMENT: Like the standard C strncpy() function, but copies a given number
of characters instead of a given number of bytes. The @src string
must be valid UTF-8 encoded text. (Use g_utf8_validate() on all
text before trying to use UTF-8 utility functions with it.)
#NAME: atomic_int_and
#PARENT: GLib.atomic_int_and
#COMMENT: the value of @atomic before the operation, unsigned
#NAME: strdup_vprintf
#PARENT: GLib
#COMMENT: Similar to the standard C vsprintf() function but safer, since it
calculates the maximum space required and allocates memory to hold
the result. The returned string should be freed with g_free() when
no longer needed.

See also g_vasprintf(), which offers the same functionality, but
additionally returns the length of the allocated string.
#NAME: cset_identifier_first
#PARENT: GLib.ScannerConfig
#COMMENT: specifies the characters which can start
    identifiers (the default is #G_CSET_a_2_z, "_", and #G_CSET_A_2_Z).
#NAME: sort
#PARENT: GLib.AsyncQueue
#COMMENT: Sorts @queue using @func.

The sort function @func is passed two elements of the @queue.
It should return 0 if they are equal, a negative value if the
first element should be higher in the @queue or a positive value
if the first element should be lower in the @queue than the second
element.

This function will lock @queue before it sorts the queue and unlock
it when it is finished.

If you were sorting a list of priority numbers to make sure the
lowest priority would be at the top of the queue, you could use:
|[<!-- language="C" -->
 gint32 id1;
 gint32 id2;

 id1 = GPOINTER_TO_INT (element1);
 id2 = GPOINTER_TO_INT (element2);

 return (id1 > id2 ? +1 : id1 == id2 ? 0 : -1);
]|
#NAME: set_day
#PARENT: GLib.Date
#COMMENT: Sets the day of the month for a #GDate. If the resulting
day-month-year triplet is invalid, the date will be invalid.
#NAME: array
#PARENT: GLib.Array.insert_vals.gpointer
#COMMENT: a #GArray
#NAME: data
#PARENT: GLib.Node.find.Node
#COMMENT: the data to find
#NAME: queue
#PARENT: GLib.Queue.peek_nth_link.gpointer
#COMMENT: a #GQueue
#NAME: clear
#PARENT: GLib.Mutex
#COMMENT: Frees the resources allocated to a mutex with g_mutex_init().

This function should not be used with a #GMutex that has been
statically allocated.

Calling g_mutex_clear() on a locked mutex leads to undefined
behaviour.

Sine: 2.32
#NAME: datalist_get_data
#PARENT: GLib.datalist_get_data
#COMMENT: the data element, or %NULL if it is not found.
#NAME: enclosing_mark
#PARENT: GLib.UnicodeType
#COMMENT: General category "Mark, Enclosing" (Me)
#NAME: march
#PARENT: GLib.DateMonth
#COMMENT: March
#NAME: PatternSpec
#PARENT: GLib
#COMMENT: A GPatternSpec struct is the 'compiled' form of a pattern. This
structure is opaque and its fields cannot be accessed directly.
#NAME: contains
#PARENT: GLib.HashTable
#COMMENT: Checks if @key is in @hash_table.
#NAME: interval
#PARENT: GLib.TimeZone.is_dst.gboolean
#COMMENT: an interval within the timezone
#NAME: function
#PARENT: GLib.child_watch_add.guint
#COMMENT: function to call
#NAME: overwrite_len
#PARENT: GLib.String
#COMMENT: Overwrites part of a string, lengthening it if necessary.
This function will work with embedded nuls.
#NAME: test_data
#PARENT: GLib.test_create_case.TestCase
#COMMENT: test data argument for the test functions
#NAME: string
#PARENT: GLib.Regex.match_full.gboolean
#COMMENT: the string to scan for matches
#NAME: compute_hmac_for_data
#PARENT: GLib
#COMMENT: Computes the HMAC for a binary @data of @length. This is a
convenience wrapper for g_hmac_new(), g_hmac_get_string()
and g_hmac_unref().

The hexadecimal string returned will be in lower case.
#NAME: iter
#PARENT: GLib.Sequence.get.gpointer
#COMMENT: a #GSequenceIter
#NAME: outbuf
#PARENT: GLib.unichar_to_utf8.gint
#COMMENT: output buffer, must have at least 6 bytes of space.
      If %NULL, the length will be computed and returned
      and nothing will be written to @outbuf.
#NAME: set_can_recurse
#PARENT: GLib.Source
#COMMENT: Sets whether a source can be called recursively. If @can_recurse is
%TRUE, then while the source is being dispatched then this source
will be processed normally. Otherwise, all processing of this
source is blocked until the dispatch function returns.
#NAME: queue
#PARENT: GLib.Queue.peek_tail.gpointer
#COMMENT: a #GQueue
#NAME: 
#PARENT: GLib.strjoin.utf8...
#COMMENT: a %NULL-terminated list of strings to join
#NAME: directory_videos
#PARENT: GLib.UserDirectory
#COMMENT: the user's Movies directory
#NAME: reader_trylock
#PARENT: GLib.RWLock.reader_trylock
#COMMENT: %TRUE if @rw_lock could be locked
#NAME: unref
#PARENT: GLib.Tree
#COMMENT: Decrements the reference count of @tree by one.
If the reference count drops to 0, all keys and values will
be destroyed (if destroy functions were specified) and all
memory allocated by @tree will be released.

It is safe to call this function from any thread.
#NAME: mongolian
#PARENT: GLib.UnicodeScript
#COMMENT: Mongolian
#NAME: data
#PARENT: GLib.List.find_custom.gpointer
#COMMENT: user data passed to the function
#NAME: foreach
#PARENT: GLib.HashTable
#COMMENT: Calls the given function for each of the key/value pairs in the
#GHashTable.  The function is passed the key and value of each
pair, and the given @user_data parameter.  The hash table may not
be modified while iterating over it (you can't add/remove
items). To remove all items matching a predicate, use
g_hash_table_foreach_remove().

See g_hash_table_find() for performance caveats for linear
order searches in contrast to g_hash_table_lookup().
#NAME: format
#PARENT: GLib.Variant.new_parsed.Variant
#COMMENT: a text format #GVariant
#NAME: get_microsecond
#PARENT: GLib.DateTime.get_microsecond
#COMMENT: the microsecond of the second
#NAME: unix_new
#PARENT: GLib.IOChannel.unix_new
#COMMENT: a new #GIOChannel.
#NAME: scanner
#PARENT: GLib.Scanner.cur_position.guint
#COMMENT: a #GScanner
#NAME: compile_options
#PARENT: GLib.Regex.new.Regex
#COMMENT: compile options for the regular expression, or 0
#NAME: sibling
#PARENT: GLib.Hook.compare_ids.gint
#COMMENT: a #GHook to compare with @new_hook
#NAME: n_children
#PARENT: GLib.VariantIter
#COMMENT: Queries the number of child items in the container that we are
iterating over.  This is the total number of items -- not the number
of items remaining.

This function might be useful for preallocation of arrays.
#NAME: get_monday_weeks_in_year
#PARENT: GLib.Date
#COMMENT: Returns the number of weeks in the year, where weeks
are taken to start on Monday. Will be 52 or 53. The
date must be valid. (Years always have 52 7-day periods,
plus 1 or 2 extra days depending on whether it's a leap
year. This function is basically telling you how many
Mondays are in the year, i.e. there are 53 Mondays if
one of the extra days happens to be a Monday.)
#NAME: newval
#PARENT: GLib.atomic_pointer_compare_and_exchange.gboolean
#COMMENT: the value to conditionally replace with
#NAME: get_utc_offset
#PARENT: GLib.DateTime.get_utc_offset
#COMMENT: the number of microseconds that should be added to UTC to
         get the local time
#NAME: pop_tail
#PARENT: GLib.Queue
#COMMENT: Removes the last element of the queue and returns its data.
#NAME: is_last_of_month
#PARENT: GLib.Date
#COMMENT: Returns %TRUE if the date is the last day of the month.
The date must be valid.
#NAME: array
#PARENT: GLib.PtrArray.sort_with_data.none
#COMMENT: a #GPtrArray
#NAME: seq
#PARENT: GLib.Sequence.search.SequenceIter
#COMMENT: a #GSequence
#NAME: key_file
#PARENT: GLib.KeyFile.set_boolean.none
#COMMENT: a #GKeyFile
#NAME: source_str
#PARENT: GLib.Variant.parse_error_print_context.utf8
#COMMENT: the string that was given to the parser
#NAME: remove
#PARENT: GLib.HashTable
#COMMENT: Removes a key and its associated value from a #GHashTable.

If the #GHashTable was created using g_hash_table_new_full(), the
key and value are freed using the supplied destroy functions, otherwise
you have to make sure that any dynamically allocated values are freed
yourself.
#NAME: variant_parse_error_print_context
#PARENT: GLib
#COMMENT: Pretty-prints a message showing the context of a #GVariant parse
error within the string for which parsing was attempted.

The resulting string is suitable for output to the console or other
monospace media where newlines are treated in the usual way.

The message will typically look something like one of the following:

|[
unterminated string constant:
  (1, 2, 3, 'abc
            ^^^^
]|

or

|[
unable to find a common type:
  [1, 2, 3, 'str']
   ^        ^^^^^
]|

The format of the message may change in a future version.

@error must have come from a failed attempt to g_variant_parse() and
@source_str must be exactly the same string that caused the error.
If @source_str was not nul-terminated when you passed it to
g_variant_parse() then you must add nul termination before using this
function.
#NAME: bytes_written
#PARENT: GLib.convert_with_iconv.utf8
#COMMENT: the number of bytes stored in the output buffer (not
                including the terminating nul).
#NAME: new_string
#PARENT: GLib.Variant.new_string
#COMMENT: a floating reference to a new string #GVariant instance
#NAME: channel
#PARENT: GLib.IOChannel.read_chars.IOStatus
#COMMENT: a #GIOChannel
#NAME: string
#PARENT: GLib.Variant.new_take_string.Variant
#COMMENT: a normal UTF-8 nul-terminated string
#NAME: new_full
#PARENT: GLib.Tree
#COMMENT: Creates a new #GTree like g_tree_new() and allows to specify functions
to free the memory allocated for the key and value that get called when
removing the entry from the #GTree.
#NAME: monday
#PARENT: GLib.DateWeekday
#COMMENT: Monday
#NAME: filename
#PARENT: GLib.OptionArg
#COMMENT: The option takes a filename as argument.
#NAME: chakma
#PARENT: GLib.UnicodeScript
#COMMENT: Chakma. Since: 2.32
#NAME: array
#PARENT: GLib.PtrArray.ref.gpointer
#COMMENT: a #GPtrArray
#NAME: free
#PARENT: GLib.ThreadPool
#COMMENT: Frees all resources allocated for @pool.

If @immediate is %TRUE, no new task is processed for @pool.
Otherwise @pool is not freed before the last task is processed.
Note however, that no thread of this pool is interrupted while
processing a task. Instead at least all still running threads
can finish their tasks before the @pool is freed.

If @wait_ is %TRUE, the functions does not return before all
tasks to be processed (dependent on @immediate, whether all
or only the currently running) are ready.
Otherwise the function returns immediately.

After calling this function @pool must not be used anymore.
#NAME: regex_escape_string
#PARENT: GLib
#COMMENT: Escapes the special characters used for regular expressions
in @string, for instance "a.b*c" becomes "a\.b\*c". This
function is useful to dynamically generate regular expressions.

@string can contain nul characters that are replaced with "\0",
in this case remember to specify the correct length of @string
in @length.
#NAME: match_options
#PARENT: GLib.regex_match_simple.gboolean
#COMMENT: match options, or 0
#NAME: source
#PARENT: GLib.Source.set_priority.none
#COMMENT: a #GSource
#NAME: data
#PARENT: GLib.timeout_add_full.guint
#COMMENT: data to pass to @function
#NAME: cond
#PARENT: GLib.Cond.signal.none
#COMMENT: a #GCond
#NAME: atomic_int_xor
#PARENT: GLib
#COMMENT: Performs an atomic bitwise 'xor' of the value of @atomic and @val,
storing the result back in @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic ^= val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.
#NAME: free
#PARENT: GLib.OptionContext
#COMMENT: Frees context and all the groups which have been
added to it.

Please note that parsed arguments need to be freed separately (see
#GOptionEntry).
#NAME: parse
#PARENT: GLib.MarkupParseContext.parse
#COMMENT: %FALSE if an error occurred, %TRUE on success
#NAME: inscriptional_parthian
#PARENT: GLib.UnicodeScript
#COMMENT: Inscriptional Parthian. Since 2.26
#NAME: result_len
#PARENT: GLib.unichar_fully_decompose.gsize
#COMMENT: length of @result
#NAME: get_locale_string
#PARENT: GLib.KeyFile.get_locale_string
#COMMENT: a newly allocated string or %NULL if the specified
  key cannot be found.
#NAME: app_not_registered
#PARENT: GLib.BookmarkFileError
#COMMENT: a requested application did
    not register a bookmark
#NAME: is_variant
#PARENT: GLib.VariantType.is_variant
#COMMENT: %TRUE if @type is the variant type

Since 2.24
#NAME: date_valid_julian
#PARENT: GLib.date_valid_julian
#COMMENT: %TRUE if the Julian day is valid
#NAME: iter
#PARENT: GLib.sequence_set.none
#COMMENT: a #GSequenceIter
#NAME: test_func
#PARENT: GLib.test_add_data_func.none
#COMMENT: The test function to invoke for this test.
#NAME: rval
#PARENT: GLib.String.assign.String
#COMMENT: the string to copy into @string
#NAME: do_not_use_this_unsupported_flag
#PARENT: GLib.MarkupParseFlags
#COMMENT: flag you should not use
#NAME: spawn_command_line_async
#PARENT: GLib.spawn_command_line_async
#COMMENT: %TRUE on success, %FALSE if error is set
#NAME: STR_DELIMITERS
#PARENT: GLib
#COMMENT: The standard delimiters, used in g_strdelimit().
#NAME: orig_key
#PARENT: GLib.Tree.lookup_extended.gboolean
#COMMENT: returns the original key
#NAME: end_pos
#PARENT: GLib.MatchInfo.fetch_pos.gboolean
#COMMENT: pointer to location where to store
    the end position, or %NULL
#NAME: compare_func
#PARENT: GLib.List.sort.gpointer
#COMMENT: the comparison function used to sort the #GList.
    This function is passed the data from 2 elements of the #GList
    and should return 0 if they are equal, a negative value if the
    first element comes before the second, or a positive value if
    the first element comes after the second.
#NAME: offset
#PARENT: GLib.IOChannel.seek.IOError
#COMMENT: an offset, in bytes, which is added to the position specified
         by @type
#NAME: queue
#PARENT: GLib.Queue.find.gpointer
#COMMENT: a #GQueue
#NAME: array
#PARENT: GLib.Array.sort_with_data.none
#COMMENT: a #GArray
#NAME: data
#PARENT: GLib.sequence_set.none
#COMMENT: new data for the item
#NAME: new_utc
#PARENT: GLib.DateTime.new_utc
#COMMENT: a #GDateTime, or %NULL
#NAME: value
#PARENT: GLib.Variant.check_format_string.gboolean
#COMMENT: a #GVariant
#NAME: context
#PARENT: GLib.OptionErrorFunc.none
#COMMENT: The active #GOptionContext
#NAME: imperial_aramaic
#PARENT: GLib.UnicodeScript
#COMMENT: Imperial Aramaic. Since 2.26
#NAME: remove
#PARENT: GLib.SList
#COMMENT: Removes an element from a #GSList.
If two elements contain the same data, only the first is removed.
If none of the elements contain the data, the #GSList is unchanged.
#NAME: variable
#PARENT: GLib.environ_setenv.utf8
#COMMENT: the environment variable to set, must not contain '='
#NAME: time_
#PARENT: GLib.TimeZone.find_interval.gint
#COMMENT: a number of seconds since January 1, 1970
#NAME: atomic
#PARENT: GLib.atomic_int_dec_and_test.gboolean
#COMMENT: a pointer to a #gint or #guint
#NAME: variable
#PARENT: GLib.environ_unsetenv.utf8
#COMMENT: the environment variable to remove, must not contain '='
#NAME: cmp_data
#PARENT: GLib.Sequence.sort_changed.none
#COMMENT: user data passed to @cmp_func.
#NAME: string
#PARENT: GLib.StringChunk.insert_const.utf8
#COMMENT: the string to add
#NAME: len
#PARENT: GLib.utf8_strdown.utf8
#COMMENT: length of @str, in bytes, or -1 if @str is nul-terminated.
#NAME: block_size
#PARENT: GLib.slice_free1.none
#COMMENT: the size of the block
#NAME: start_pos
#PARENT: GLib.MatchInfo.fetch_pos.gboolean
#COMMENT: pointer to location where to store
    the start position, or %NULL
#NAME: context
#PARENT: GLib.OptionContext.get_description.utf8
#COMMENT: a #GOptionContext
#NAME: bytes_read
#PARENT: GLib.locale_from_utf8.utf8
#COMMENT: location to store the number of bytes in the
                input string that were successfully converted, or %NULL.
                Even if the conversion was successful, this may be
                less than @len if there were partial characters
                at the end of the input. If the error
                #G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
                stored will the byte offset after the last valid
                input sequence.
#NAME: try_realloc
#PARENT: GLib
#COMMENT: Attempts to realloc @mem to a new size, @n_bytes, and returns %NULL
on failure. Contrast with g_realloc(), which aborts the program
on failure.

If @mem is %NULL, behaves the same as g_try_malloc().
#NAME: thread_self
#PARENT: GLib
#COMMENT: This function returns the #GThread corresponding to the
current thread. Note that this function does not increase
the reference count of the returned struct.

This function will return a #GThread even for threads that
were not created by GLib (i.e. those created by other threading
APIs). This may be useful for thread identification purposes
(i.e. comparisons) but you must not use GLib functions (such
as g_thread_join()) on these threads.
#NAME: test_case
#PARENT: GLib.TestSuite.add.none
#COMMENT: a #GTestCase
#NAME: bad_uri
#PARENT: GLib.ConvertError
#COMMENT: URI is invalid.
#NAME: index_
#PARENT: GLib.Array.insert_vals.gpointer
#COMMENT: the index to place the elements at
#NAME: data
#PARENT: GLib.IOFunc.gboolean
#COMMENT: user data set in g_io_add_watch() or g_io_add_watch_full()
#NAME: bytes_written
#PARENT: GLib.locale_from_utf8.utf8
#COMMENT: the number of bytes stored in the output buffer (not
                including the terminating nul).
#NAME: value
#PARENT: GLib.hash_table_lookup_extended.gboolean
#COMMENT: return location for the value associated with the key, or %NULL
#NAME: get_integer_list
#PARENT: GLib.KeyFile
#COMMENT: Returns the values associated with @key under @group_name as
integers.

If @key cannot be found then %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with @key cannot be interpreted as integers then %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
#NAME: copy
#PARENT: GLib.Queue
#COMMENT: Copies a @queue. Note that is a shallow copy. If the elements in the
queue consist of pointers to data, the pointers are copied, but the
actual data is not.
#NAME: datetime
#PARENT: GLib.DateTime.add_minutes.DateTime
#COMMENT: a #GDateTime
#NAME: UnicodeType
#PARENT: GLib
#COMMENT: These are the possible character classifications from the
Unicode specification.
See <ulink url="http://www.unicode.org/Public/UNIDATA/UnicodeData.html">http://www.unicode.org/Public/UNIDATA/UnicodeData.html</ulink>.
#NAME: key
#PARENT: GLib.VariantDict.insert_value.none
#COMMENT: the key to insert a value for
#NAME: symbol
#PARENT: GLib.Scanner.lookup_symbol.gpointer
#COMMENT: the symbol to look up
#NAME: get_objv
#PARENT: GLib.Variant
#COMMENT: Gets the contents of an array of object paths #GVariant.  This call
makes a shallow copy; the return result should be released with
g_free(), but the individual strings must not be modified.

If @length is non-%NULL then the number of elements in the result
is stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.
#NAME: array
#PARENT: GLib.ByteArray.set_size.guint8
#COMMENT: a #GByteArray
#NAME: test_minimized_result
#PARENT: GLib
#COMMENT: Report the result of a performance or measurement test.
The test should generally strive to minimize the reported
quantities (smaller values are better than larger ones),
this and @minimized_quantity can determine sorting
order for test result reports.
#NAME: hostname_to_unicode
#PARENT: GLib.hostname_to_unicode
#COMMENT: a UTF-8 hostname, which must be freed, or %NULL if
@hostname is in some way invalid.
#NAME: log_set_always_fatal
#PARENT: GLib
#COMMENT: Sets the message levels which are always fatal, in any log domain.
When a message with any of these levels is logged the program terminates.
You can only set the levels defined by GLib to be fatal.
%G_LOG_LEVEL_ERROR is always fatal.

You can also make some message levels fatal at runtime by setting
the `G_DEBUG` environment variable (see
[Running GLib Applications](glib-running.html)).
#NAME: context
#PARENT: GLib.MainContext.find_source_by_user_data.Source
#COMMENT: a #GMainContext
#NAME: callback
#PARENT: GLib.OptionArg
#COMMENT: The option provides a callback (of type
    #GOptionArgFunc) to parse the extra argument.
#NAME: datalist_get_flags
#PARENT: GLib
#COMMENT: Gets flags values packed in together with the datalist.
See g_datalist_set_flags().
#NAME: bytes_written
#PARENT: GLib.convert_with_fallback.utf8
#COMMENT: the number of bytes stored in the output buffer (not
               including the terminating nul).
#NAME: loop
#PARENT: GLib.VariantIter
#COMMENT: Gets the next item in the container and unpacks it into the variable
argument list according to @format_string, returning %TRUE.

If no more items remain then %FALSE is returned.

On the first call to this function, the pointers appearing on the
variable argument list are assumed to point at uninitialised memory.
On the second and later calls, it is assumed that the same pointers
will be given and that they will point to the memory as set by the
previous call to this function.  This allows the previous values to
be freed, as appropriate.

This function is intended to be used with a while loop as
demonstrated in the following example.  This function can only be
used when iterating over an array.  It is only valid to call this
function with a string constant for the format string and the same
string constant must be used each time.  Mixing calls to this
function and g_variant_iter_next() or g_variant_iter_next_value() on
the same iterator causes undefined behavior.

If you break out of a such a while loop using g_variant_iter_loop() then
you must free or unreference all the unpacked values as you would with
g_variant_get(). Failure to do so will cause a memory leak.

Here is an example for memory management with g_variant_iter_loop():
|[<!-- language="C" -->
  // Iterates a dictionary of type 'a{sv}'
  void
  iterate_dictionary (GVariant *dictionary)
  {
    GVariantIter iter;
    GVariant *value;
    gchar *key;

    g_variant_iter_init (&iter, dictionary);
    while (g_variant_iter_loop (&iter, "{sv}", &key, &value))
      {
        g_print ("Item '%s' has type '%s'\n", key,
                 g_variant_get_type_string (value));

        // no need to free 'key' and 'value' here
        // unless breaking out of this loop
      }
  }
]|

For most cases you should use g_variant_iter_next().

This function is really only useful when unpacking into #GVariant or
#GVariantIter in order to allow you to skip the call to
g_variant_unref() or g_variant_iter_free().

For example, if you are only looping over simple integer and string
types, g_variant_iter_next() is definitely preferred.  For string
types, use the '&' prefix to avoid allocating any memory at all (and
thereby avoiding the need to free anything as well).

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed.

See the section on
[GVariant format strings][gvariant-format-strings-pointers].
#NAME: prg_name
#PARENT: GLib.on_error_stack_trace.none
#COMMENT: the program name, needed by gdb for the "[S]tack trace"
    option
#NAME: TranslateFunc
#PARENT: GLib
#COMMENT: The type of functions which are used to translate user-visible
strings, for <option>--help</option> output.
#NAME: default
#PARENT: GLib.NormalizeMode
#COMMENT: standardize differences that do not affect the
    text content, such as the above-mentioned accent representation
#NAME: data
#PARENT: GLib.base64_encode.utf8
#COMMENT: the binary data to encode
#NAME: iter
#PARENT: GLib.SequenceIter.get_position.gint
#COMMENT: a #GSequenceIter
#NAME: tree
#PARENT: GLib.Tree.insert.none
#COMMENT: a #GTree
#NAME: utf8_to_ucs4
#PARENT: GLib.utf8_to_ucs4
#COMMENT: a pointer to a newly allocated UCS-4 string.
    This value must be freed with g_free(). If an error occurs,
    %NULL will be returned and @error set.
#NAME: open
#PARENT: GLib.IConv.open
#COMMENT: a "conversion descriptor", or (GIConv)-1 if
 opening the converter failed.
#NAME: key_file
#PARENT: GLib.KeyFile.save_to_file.gboolean
#COMMENT: a #GKeyFile
#NAME: exit_status
#PARENT: GLib.spawn_check_exit_status.gboolean
#COMMENT: An exit code as returned from g_spawn_sync()
#NAME: init
#PARENT: GLib.IOChannel
#COMMENT: Initializes a #GIOChannel struct.

This is called by each of the above functions when creating a
#GIOChannel, and so is not often needed by the application
programmer (unless you are creating a new type of #GIOChannel).
#NAME: MAXINT8
#PARENT: GLib
#COMMENT: The maximum value which can be held in a #gint8.
#NAME: length
#PARENT: GLib.BookmarkFile.get_applications.utf8
#COMMENT: return location of the length of the returned list, or %NULL
#NAME: func
#PARENT: GLib.Hook
#COMMENT: the function to call when this hook is invoked. The possible
    signatures for this function are #GHookFunc and #GHookCheckFunc
#NAME: clear_pointer
#PARENT: GLib
#COMMENT: Clears a reference to a variable.

@pp must not be %NULL.

If the reference is %NULL then this function does nothing.
Otherwise, the variable is destroyed using @destroy and the
pointer is set to %NULL.

A macro is also included that allows this function to be used without
pointer casts.
#NAME: hidden
#PARENT: GLib.OptionFlags
#COMMENT: The option doesn't appear in `--help` output.
#NAME: base64_encode_close
#PARENT: GLib.base64_encode_close
#COMMENT: The number of bytes of output that was written
#NAME: max_len
#PARENT: GLib.utf8_get_char_validated.gunichar
#COMMENT: the maximum number of bytes to read, or -1, for no maximum or
    if @p is nul-terminated
#NAME: hour
#PARENT: GLib.DateTime.new.DateTime
#COMMENT: the hour component of the date
#NAME: begin
#PARENT: GLib.random_int_range.gint32
#COMMENT: lower closed bound of the interval
#NAME: get_values
#PARENT: GLib.HashTable.get_values
#COMMENT: a #GList containing all the values inside the hash
    table. The content of the list is owned by the hash table and
    should not be modified or freed. Use g_list_free() when done
    using the list.
#NAME: format
#PARENT: GLib.Error.new_valist.Error
#COMMENT: printf()-style format for error message
#NAME: loop
#PARENT: GLib.FileError
#COMMENT: Too many levels of symbolic links were encountered
    in looking up a file name. This often indicates a cycle of symbolic
    links.
#NAME: data
#PARENT: GLib.NodeForeachFunc.none
#COMMENT: user data passed to g_node_children_foreach().
#NAME: once_init_enter
#PARENT: GLib
#COMMENT: Function to be called when starting a critical initialization
section. The argument @location must point to a static
0-initialized variable that will be set to a value other than 0 at
the end of the initialization section. In combination with
g_once_init_leave() and the unique address @value_location, it can
be ensured that an initialization section will be executed only once
during a program's life time, and that concurrent threads are
blocked until initialization completed. To be used in constructs
like this:

|[<!-- language="C" -->
  static gsize initialization_value = 0;

  if (g_once_init_enter (&initialization_value))
    {
      gsize setup_value = 42; // initialization code here

      g_once_init_leave (&initialization_value, setup_value);
    }

  // use initialization_value here
]|
#NAME: get_user_config_dir
#PARENT: GLib.get_user_config_dir
#COMMENT: a string owned by GLib that must not be modified
              or freed.
#NAME: set_max_threads
#PARENT: GLib.ThreadPool
#COMMENT: Sets the maximal allowed number of threads for @pool.
A value of -1 means that the maximal number of threads
is unlimited. If @pool is an exclusive thread pool, setting
the maximal number of threads to -1 is not allowed.

Setting @max_threads to 0 means stopping all work for @pool.
It is effectively frozen until @max_threads is set to a non-zero
value again.

A thread is never terminated while calling @func, as supplied by
g_thread_pool_new(). Instead the maximal number of threads only
has effect for the allocation of new threads in g_thread_pool_push().
A new thread is allocated, whenever the number of currently
running threads in @pool is smaller than the maximal number.

@error can be %NULL to ignore errors, or non-%NULL to report
errors. An error can only occur when a new thread couldn't be
created.

Before version 2.32, this function did not return a success status.
#NAME: data
#PARENT: GLib.Queue.index.gint
#COMMENT: the data to find
#NAME: queue
#PARENT: GLib.AsyncQueue.push_unlocked.none
#COMMENT: a #GAsyncQueue
#NAME: break_lines
#PARENT: GLib.base64_encode_step.gsize
#COMMENT: whether to break long lines
#NAME: context
#PARENT: GLib.OptionContext.add_group.none
#COMMENT: a #GOptionContext
#NAME: unsetenv
#PARENT: GLib
#COMMENT: Removes an environment variable from the environment.

Note that on some systems, when variables are overwritten, the
memory used for the previous variables and its value isn't reclaimed.

You should be mindful of the fact that environment variable handling
in UNIX is not thread-safe, and your program may crash if one thread
calls g_unsetenv() while another thread is calling getenv(). (And note
that many functions, such as gettext(), call getenv() internally.) This
function is only safe to use at the very start of your program, before
creating any other threads (or creating objects that create worker
threads of their own).

If you need to set up the environment for a child process, you can
use g_get_environ() to get an environment array, modify that with
g_environ_setenv() and g_environ_unsetenv(), and then pass that
array directly to execvpe(), g_spawn_async(), or the like.
#NAME: base64_decode
#PARENT: GLib
#COMMENT: Decode a sequence of Base-64 encoded text into binary data.  Note
that the returned binary data is not necessarily zero-terminated,
so it should not be used as a character string.
#NAME: init
#PARENT: GLib.string_new_len.String
#COMMENT: initial contents of the string
#NAME: propagate_prefixed_error
#PARENT: GLib
#COMMENT: If @dest is %NULL, free @src; otherwise, moves @src into *@dest.
*@dest must be %NULL. After the move, add a prefix as with
g_prefix_error().
#NAME: data
#PARENT: GLib.Queue.find_custom.gpointer
#COMMENT: user data passed to @func
#NAME: new_int64
#PARENT: GLib.Variant.new_int64
#COMMENT: a floating reference to a new int64 #GVariant instance
#NAME: added
#PARENT: GLib.BookmarkFile.set_added.none
#COMMENT: a timestamp or -1 to use the current time
#NAME: unicode_canonical_ordering
#PARENT: GLib
#COMMENT: Computes the canonical ordering of a string in-place.
This rearranges decomposed characters in the string
according to their combining classes.  See the Unicode
manual for more information.
#NAME: bytes_written
#PARENT: GLib.convert.utf8
#COMMENT: the number of bytes stored in the output buffer (not
                including the terminating nul).
#NAME: regex
#PARENT: GLib.Regex.match_all_full.gboolean
#COMMENT: a #GRegex structure from g_regex_new()
#NAME: file_name
#PARENT: GLib.path_is_absolute.gboolean
#COMMENT: a file name
#NAME: load_from_data_dirs
#PARENT: GLib.KeyFile
#COMMENT: This function looks for a key file named @file in the paths
returned from g_get_user_data_dir() and g_get_system_data_dirs(),
loads the file into @key_file and returns the file's full path in
@full_path.  If the file could not be loaded then an %error is
set to either a #GFileError or #GKeyFileError.
#NAME: copy_deep
#PARENT: GLib.Node
#COMMENT: Recursively copies a #GNode and its data.
#NAME: log_domain
#PARENT: GLib.log.none
#COMMENT: the log domain, usually #G_LOG_DOMAIN
#NAME: unknown_option
#PARENT: GLib.OptionError
#COMMENT: An option was not known to the parser.
 This error will only be reported, if the parser hasn't been instructed
 to ignore unknown options, see g_option_context_set_ignore_unknown_options().
#NAME: stdout
#PARENT: GLib.TestSubprocessFlags
#COMMENT: If this flag is given, the child
    process will inherit the parent's stdout. Otherwise, the child's
    stdout will not be visible, but it will be captured to allow
    later tests with g_test_trap_assert_stdout().
#NAME: new_variant
#PARENT: GLib.Variant.new_variant
#COMMENT: a floating reference to a new variant #GVariant instance
#NAME: date
#PARENT: GLib.Date.add_days.none
#COMMENT: a #GDate to increment
#NAME: context
#PARENT: GLib.MarkupParseContext.pop.gpointer
#COMMENT: a #GMarkupParseContext
#NAME: fetch_pos
#PARENT: GLib.MatchInfo.fetch_pos
#COMMENT: %TRUE if the position was fetched, %FALSE otherwise. If
  the position cannot be fetched, @start_pos and @end_pos are left
  unchanged
#NAME: args
#PARENT: GLib.printf_string_upper_bound.gsize
#COMMENT: the parameters to be inserted into the format string
#NAME: wait
#PARENT: GLib.MainContext
#COMMENT: Tries to become the owner of the specified context,
as with g_main_context_acquire(). But if another thread
is the owner, atomically drop @mutex and wait on @cond until
that owner releases ownership or until @cond is signaled, then
try again (once) to become the owner.
#NAME: get_buffer_size
#PARENT: GLib.IOChannel
#COMMENT: Gets the buffer size.
#NAME: byte_array_unref
#PARENT: GLib
#COMMENT: Atomically decrements the reference count of @array by one. If the
reference count drops to 0, all memory allocated by the array is
released. This function is thread-safe and may be called from any
thread.
#NAME: date
#PARENT: GLib.Date.set_parse.none
#COMMENT: a #GDate to fill in
#NAME: foreach
#PARENT: GLib.Sequence
#COMMENT: Calls @func for each item in the sequence passing @user_data
to the function.
#NAME: domain
#PARENT: GLib.dngettext.utf8
#COMMENT: the translation domain to use, or %NULL to use
  the domain set with textdomain()
#NAME: new_boolean
#PARENT: GLib.Variant.new_boolean
#COMMENT: a floating reference to a new boolean #GVariant instance
#NAME: log_set_default_handler
#PARENT: GLib.log_set_default_handler
#COMMENT: the previous default log handler
#NAME: hash_table
#PARENT: GLib.HashTable.ref.gpointer
#COMMENT: a valid #GHashTable
#NAME: user_data
#PARENT: GLib.List.copy_deep.gpointer
#COMMENT: user data passed to the copy function @func, or %NULL
#NAME: format_string
#PARENT: GLib.VariantIter.loop.gboolean
#COMMENT: a GVariant format string
#NAME: markup_collect_attributes
#PARENT: GLib.markup_collect_attributes
#COMMENT: %TRUE if successful
#NAME: context
#PARENT: GLib.MainContext.invoke.none
#COMMENT: a #GMainContext, or %NULL
#NAME: message
#PARENT: GLib.ScannerMsgFunc.none
#COMMENT: the message
#NAME: src
#PARENT: GLib.sequence_move.none
#COMMENT: a #GSequenceIter pointing to the item to move
#NAME: valid_dmy
#PARENT: GLib.Date.valid_dmy
#COMMENT: %TRUE if the date is a valid one
#NAME: get_month
#PARENT: GLib.Date.get_month
#COMMENT: month of the year as a #GDateMonth
#NAME: value
#PARENT: GLib.KeyFile.set_value.none
#COMMENT: a string
#NAME: sort_unlocked
#PARENT: GLib.AsyncQueue
#COMMENT: Sorts @queue using @func.

The sort function @func is passed two elements of the @queue.
It should return 0 if they are equal, a negative value if the
first element should be higher in the @queue or a positive value
if the first element should be lower in the @queue than the second
element.

This function must be called while holding the @queue's lock.
#NAME: atomic
#PARENT: GLib.atomic_pointer_xor.gsize
#COMMENT: a pointer to a #gpointer-sized value
#NAME: string
#PARENT: GLib.String.insert_len.String
#COMMENT: a #GString
#NAME: unichar_isgraph
#PARENT: GLib
#COMMENT: Determines whether a character is printable and not a space
(returns %FALSE for control characters, format characters, and
spaces). g_unichar_isprint() is similar, but returns %TRUE for
spaces. Given some UTF-8 text, obtain a character value with
g_utf8_get_char().
#NAME: destroy
#PARENT: GLib.HashTable
#COMMENT: Destroys all keys and values in the #GHashTable and decrements its
reference count by 1. If keys and/or values are dynamically allocated,
you should either free them first or create the #GHashTable with destroy
notifiers using g_hash_table_new_full(). In the latter case the destroy
functions you supplied will be called on all keys and values during the
destruction phase.
#NAME: case_sensitive
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if symbols are case sensitive (the
    default is %FALSE).
#NAME: failed
#PARENT: GLib.SpawnError
#COMMENT: Some other fatal failure,
  `error->message` should explain.
#NAME: realloc
#PARENT: GLib
#COMMENT: Reallocates the memory pointed to by @mem, so that it now has space for
@n_bytes bytes of memory. It returns the new address of the memory, which may
have been moved. @mem may be %NULL, in which case it's considered to
have zero-length. @n_bytes may be 0, in which case %NULL will be returned
and @mem will be freed unless it is %NULL.
#NAME: test_data
#PARENT: GLib.test_add_data_func_full.none
#COMMENT: Test data argument for the test function.
#NAME: pspec
#PARENT: GLib.pattern_match.gboolean
#COMMENT: a #GPatternSpec
#NAME: ogham
#PARENT: GLib.UnicodeScript
#COMMENT: Ogham
#NAME: unref
#PARENT: GLib.VariantBuilder
#COMMENT: Decreases the reference count on @builder.

In the event that there are no more references, releases all memory
associated with the #GVariantBuilder.

Don't call this on stack-allocated #GVariantBuilder instances or bad
things will happen.
#NAME: new_tai_lue
#PARENT: GLib.UnicodeScript
#COMMENT: New Tai Lue
#NAME: exit_status
#PARENT: GLib.spawn_sync.gboolean
#COMMENT: return location for child exit status, as returned by waitpid(), or %NULL
#NAME: 
#PARENT: GLib.build_filename.utf8...
#COMMENT: remaining elements in path, terminated by %NULL
#NAME: unix_set_fd_nonblocking
#PARENT: GLib.unix_set_fd_nonblocking
#COMMENT: %TRUE if successful
#NAME: value
#PARENT: GLib.Private.set.none
#COMMENT: the new value
#NAME: try_malloc0
#PARENT: GLib
#COMMENT: Attempts to allocate @n_bytes, initialized to 0's, and returns %NULL on
failure. Contrast with g_malloc0(), which aborts the program on failure.
#NAME: channel
#PARENT: GLib.IOChannel.shutdown.IOStatus
#COMMENT: a #GIOChannel
#NAME: insert_unichar
#PARENT: GLib.String.insert_unichar
#COMMENT: @string
#NAME: context
#PARENT: GLib.OptionContext.set_description.none
#COMMENT: a #GOptionContext
#NAME: scanner
#PARENT: GLib.Scanner.eof.gboolean
#COMMENT: a #GScanner
#NAME: pid
#PARENT: GLib.ChildWatchFunc.none
#COMMENT: the process id of the child process
#NAME: unichar_ispunct
#PARENT: GLib
#COMMENT: Determines whether a character is punctuation or a symbol.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().
#NAME: nonblock
#PARENT: GLib.unix_set_fd_nonblocking.gboolean
#COMMENT: If %TRUE, set the descriptor to be non-blocking
#NAME: last_sibling
#PARENT: GLib.Node.last_sibling
#COMMENT: the last sibling of @node
#NAME: get_application_name
#PARENT: GLib
#COMMENT: Gets a human-readable name for the application, as set by
g_set_application_name(). This name should be localized if
possible, and is intended for display to the user.  Contrast with
g_get_prgname(), which gets a non-localized name. If
g_set_application_name() has not been called, returns the result of
g_get_prgname() (which may be %NULL if g_set_prgname() has also not
been called).
#NAME: key
#PARENT: GLib.KeyFile.set_double_list.none
#COMMENT: a key
#NAME: other_punctuation
#PARENT: GLib.UnicodeType
#COMMENT: General category "Punctuation, Other" (Po)
#NAME: format_string
#PARENT: GLib.VariantBuilder.add.none
#COMMENT: a #GVariant varargs format string
#NAME: string
#PARENT: GLib.Regex.replace_literal.utf8
#COMMENT: the string to perform matches against
#NAME: LN2
#PARENT: GLib
#COMMENT: The natural logarithm of 2.
#NAME: log_func
#PARENT: GLib.test_log_set_fatal_handler.none
#COMMENT: the log handler function.
#NAME: flags
#PARENT: GLib.OptionEntry
#COMMENT: Flags from #GOptionFlags
#NAME: next
#PARENT: GLib.SequenceIter.next
#COMMENT: a #GSequenceIter pointing to the next position after @iter
#NAME: GINT16_MODIFIER
#PARENT: GLib
#COMMENT: The platform dependent length modifier for conversion specifiers
for scanning and printing values of type #gint16 or #guint16. It
is a string literal, but doesn't include the percent-sign, such
that you can add precision and length modifiers between percent-sign
and conversion specifier and append a conversion specifier.

The following example prints "0x7b";
|[<!-- language="C" -->
gint16 value = 123;
g_print ("%#" G_GINT16_MODIFIER "x", value);
]|
#NAME: HookCompareFunc
#PARENT: GLib.HookCompareFunc
#COMMENT: a value <= 0 if @new_hook should be before @sibling
#NAME: notbol
#PARENT: GLib.RegexMatchFlags
#COMMENT: Specifies that first character of the string is
    not the beginning of a line, so the circumflex metacharacter should
    not match before it. Setting this without #G_REGEX_MULTILINE (at
    compile time) causes circumflex never to match. This option affects
    only the behaviour of the circumflex metacharacter, it does not
    affect "\A".
#NAME: equal
#PARENT: GLib.DateTime.equal
#COMMENT: %TRUE if @dt1 and @dt2 are equal
#NAME: uri
#PARENT: GLib.BookmarkFile.get_mime_type.utf8
#COMMENT: a valid URI
#NAME: queue
#PARENT: GLib.AsyncQueue.timed_pop.gpointer
#COMMENT: a #GAsyncQueue
#NAME: datalist_id_dup_data
#PARENT: GLib.datalist_id_dup_data
#COMMENT: the result of calling @dup_func on the value
    associated with @key_id in @datalist, or %NULL if not set.
    If @dup_func is %NULL, the value is returned unmodified.
#NAME: channel
#PARENT: GLib.IOChannel.get_flags.IOFlags
#COMMENT: a #GIOChannel
#NAME: Timer
#PARENT: GLib
#COMMENT: Opaque datatype that records a start time.
#NAME: new
#PARENT: GLib.Node.new
#COMMENT: a new #GNode
#NAME: ascii_dtostr
#PARENT: GLib.ascii_dtostr
#COMMENT: The pointer to the buffer with the converted string.
#NAME: compare_func
#PARENT: GLib.Queue.sort.none
#COMMENT: the #GCompareDataFunc used to sort @queue. This function
    is passed two elements of the queue and should return 0 if they are
    equal, a negative value if the first comes before the second, and
    a positive value if the second comes before the first.
#NAME: sized_new
#PARENT: GLib.ByteArray.sized_new
#COMMENT: the new #GByteArray
#NAME: nth_child
#PARENT: GLib.Node.nth_child
#COMMENT: the child of @node at index @n
#NAME: get_day_of_year
#PARENT: GLib.DateTime
#COMMENT: Retrieves the day of the year represented by @datetime in the Gregorian
calendar.
#NAME: notdir
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `ENOTDIR`
#NAME: n
#PARENT: GLib.ascii_strncasecmp.gint
#COMMENT: number of characters to compare
#NAME: context
#PARENT: GLib.MainContext.query.gint
#COMMENT: a #GMainContext
#NAME: hook_list
#PARENT: GLib.Hook.alloc.Hook
#COMMENT: a #GHookList
#NAME: get_applications
#PARENT: GLib.BookmarkFile.get_applications
#COMMENT: a newly allocated %NULL-terminated array of strings.
  Use g_strfreev() to free it.
#NAME: set_mime_type
#PARENT: GLib.BookmarkFile
#COMMENT: Sets @mime_type as the MIME type of the bookmark for @uri.

If a bookmark for @uri cannot be found then it is created.
#NAME: get_data_as_bytes
#PARENT: GLib.Variant
#COMMENT: Returns a pointer to the serialised form of a #GVariant instance.
The semantics of this function are exactly the same as
g_variant_get_data(), except that the returned #GBytes holds
a reference to the variant data.
#NAME: hash_table_unref
#PARENT: GLib
#COMMENT: Atomically decrements the reference count of @hash_table by one.
If the reference count drops to 0, all keys and values will be
destroyed, and all memory allocated by the hash table is released.
This function is MT-safe and may be called from any thread.
#NAME: get_real_time
#PARENT: GLib.get_real_time
#COMMENT: the number of microseconds since January 1, 1970 UTC.
#NAME: v_identifier
#PARENT: GLib.TokenValue
#COMMENT: token identifier value
#NAME: arguments
#PARENT: GLib.OptionContext.parse_strv.gboolean
#COMMENT: a pointer to the
   command line arguments (which must be in UTF-8 on Windows)
#NAME: length
#PARENT: GLib.KeyFile.load_from_data.gboolean
#COMMENT: the length of @data in bytes (or (gsize)-1 if data is nul-terminated)
#NAME: str_match_string
#PARENT: GLib
#COMMENT: Checks if a search conducted for @search_term should match
@potential_hit.

This function calls g_str_tokenize_and_fold() on both
@search_term and @potential_hit.  ASCII alternates are never taken
for @search_term but will be taken for @potential_hit according to
the value of @accept_alternates.

A hit occurs when each folded token in @search_term is a prefix of a
folded token from @potential_hit.

Depending on how you're performing the search, it will typically be
faster to call g_str_tokenize_and_fold() on each string in
your corpus and build an index on the returned folded tokens, then
call g_str_tokenize_and_fold() on the search term and
perform lookups into that index.

As some examples, searching for "fred" would match the potential hit
"Smith, Fred" and also "Frédéric".  Searching for "Fréd" would match
"Frédéric" but not "Frederic" (due to the one-directional nature of
accent matching).  Searching "fo" would match "Foo" and "Bar Foo
Baz", but not "SFO" (because no word as "fo" as a prefix).
#NAME: unref
#PARENT: GLib.MainContext
#COMMENT: Decreases the reference count on a #GMainContext object by one. If
the result is zero, free the context and free all associated memory.
#NAME: find_func_data
#PARENT: GLib.Hook.find_func_data
#COMMENT: the #GHook with the given @func and @data or %NULL if
    no matching #GHook is found
#NAME: KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the application supports the
[Startup Notification Protocol Specification](http://www.freedesktop.org/Standards/startup-notification-spec).
#NAME: length
#PARENT: GLib.Variant.get_string.utf8
#COMMENT: a pointer to a #gsize,
         to store the length
#NAME: unichar_type
#PARENT: GLib.unichar_type
#COMMENT: the type of the character.
#NAME: close
#PARENT: GLib.IConv
#COMMENT: Same as the standard UNIX routine iconv_close(), but
may be implemented via libiconv on UNIX flavors that lack
a native implementation. Should be called to clean up
the conversion descriptor from g_iconv_open() when
you are done converting things.

GLib provides g_convert() and g_locale_to_utf8() which are likely
more convenient than the raw iconv wrappers.
#NAME: is_dict_entry
#PARENT: GLib.VariantType.is_dict_entry
#COMMENT: %TRUE if @type is a dictionary entry type

Since 2.24
#NAME: ref
#PARENT: GLib.MainLoop
#COMMENT: Increases the reference count on a #GMainLoop object by one.
#NAME: ref_sink
#PARENT: GLib.Variant.ref_sink
#COMMENT: the same @value
#NAME: free
#PARENT: GLib.Date
#COMMENT: Frees a #GDate returned from g_date_new().
#NAME: key
#PARENT: GLib.VariantDict.contains.gboolean
#COMMENT: the key to lookup in the dictionary
#NAME: c
#PARENT: GLib.unichar_isspace.gboolean
#COMMENT: a Unicode character
#NAME: reverse
#PARENT: GLib.OptionFlags
#COMMENT: For options of the %G_OPTION_ARG_NONE kind, this
    flag indicates that the sense of the option is reversed.
#NAME: get_double
#PARENT: GLib.Variant
#COMMENT: Returns the double precision floating point value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_DOUBLE.
#NAME: TimeZone
#PARENT: GLib
#COMMENT: #GTimeZone is an opaque structure whose members cannot be accessed
directly.
#NAME: push_tail_link
#PARENT: GLib.Queue
#COMMENT: Adds a new element at the tail of the queue.
#NAME: fd
#PARENT: GLib.unix_set_fd_nonblocking.gboolean
#COMMENT: A file descriptor
#NAME: a
#PARENT: GLib.EqualFunc.gboolean
#COMMENT: a value
#NAME: list
#PARENT: GLib.List.reverse.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: b
#PARENT: GLib.EqualFunc.gboolean
#COMMENT: a value to compare with
#NAME: bookmark
#PARENT: GLib.BookmarkFile.load_from_data_dirs.gboolean
#COMMENT: a #GBookmarkFile
#NAME: alloc
#PARENT: GLib.List
#COMMENT: Allocates space for one #GList element. It is called by
g_list_append(), g_list_prepend(), g_list_insert() and
g_list_insert_sorted() and so is rarely used on its own.
#NAME: utf8_collate_key
#PARENT: GLib.utf8_collate_key
#COMMENT: a newly allocated string. This string should
  be freed with g_free() when you are done with it.
#NAME: date_valid_julian
#PARENT: GLib
#COMMENT: Returns %TRUE if the Julian day is valid. Anything greater than zero
is basically a valid Julian, though there is a 32-bit limit.
#NAME: is_maybe
#PARENT: GLib.VariantType
#COMMENT: Determines if the given @type is a maybe type.  This is true if the
type string for @type starts with an 'm'.

This function returns %TRUE for any indefinite type for which every
definite subtype is a maybe type -- %G_VARIANT_TYPE_MAYBE, for
example.
#NAME: type
#PARENT: GLib.VariantType.free.none
#COMMENT: a #GVariantType, or %NULL
#NAME: get_root
#PARENT: GLib.Node.get_root
#COMMENT: the root of the tree
#NAME: variant_parser_get_error_quark
#PARENT: GLib
#COMMENT: Same as g_variant_error_quark().
#NAME: value
#PARENT: GLib.Variant.is_floating.gboolean
#COMMENT: a #GVariant
#NAME: log_level
#PARENT: GLib.log_default_handler.none
#COMMENT: the level of the message
#NAME: get_contents
#PARENT: GLib.MappedFile.get_contents
#COMMENT: the contents of @file, or %NULL.
#NAME: valid_year
#PARENT: GLib.Date
#COMMENT: Returns %TRUE if the year is valid. Any year greater than 0 is valid,
though there is a 16-bit limit to what #GDate will understand.
#NAME: sundanese
#PARENT: GLib.UnicodeScript
#COMMENT: Sundanese. Since 2.16.3
#NAME: variant_type_string_is_valid
#PARENT: GLib.variant_type_string_is_valid
#COMMENT: %TRUE if @type_string is exactly one valid type string

Since 2.24
#NAME: name
#PARENT: GLib.OptionGroup.new.OptionGroup
#COMMENT: the name for the option group, this is used to provide
  help for the options in this group with `--help-`@name
#NAME: day
#PARENT: GLib.DateTime.get_ymd.none
#COMMENT: the return location for the day of the month, or %NULL.
#NAME: unknown_property
#PARENT: GLib.RegexError
#COMMENT: Unknown property name after "\\P" or
    "\\p". Since 2.16
#NAME: try_pop_unlocked
#PARENT: GLib.AsyncQueue.try_pop_unlocked
#COMMENT: data from the queue or %NULL, when no data is
    available immediately.
#NAME: key
#PARENT: GLib.KeyFile.get_value.utf8
#COMMENT: a key
#NAME: hours
#PARENT: GLib.DateTime.add_full.DateTime
#COMMENT: the number of hours to add
#NAME: hash_table
#PARENT: GLib.hash_table_add.gboolean
#COMMENT: a #GHashTable
#NAME: callback_funcs
#PARENT: GLib.Source.set_callback_indirect.none
#COMMENT: functions for reference counting @callback_data
                 and getting the callback and data
#NAME: key_id
#PARENT: GLib.DataForeachFunc.none
#COMMENT: the #GQuark id to identifying the data element.
#NAME: iter
#PARENT: GLib.HashTableIter.next.gboolean
#COMMENT: an initialized #GHashTableIter
#NAME: name
#PARENT: GLib.BookmarkFile.remove_application.gboolean
#COMMENT: the name of the application
#NAME: rec_mutex
#PARENT: GLib.RecMutex.lock.none
#COMMENT: a #GRecMutex
#NAME: start
#PARENT: GLib.Timer
#COMMENT: Marks a start time, so that future calls to g_timer_elapsed() will
report the time since g_timer_start() was called. g_timer_new()
automatically marks the start time, so no need to call
g_timer_start() immediately after creating the timer.
#NAME: get_keys_as_array
#PARENT: GLib.HashTable.get_keys_as_array
#COMMENT: a
  %NULL-terminated array containing each key from the table.
#NAME: first
#PARENT: GLib.List
#COMMENT: Gets the first element in a #GList.
#NAME: strncasecmp
#PARENT: GLib.strncasecmp
#COMMENT: 0 if the strings match, a negative value if @s1 < @s2,
    or a positive value if @s1 > @s2.
#NAME: CSET_a_2_z
#PARENT: GLib
#COMMENT: The set of lowercase ASCII alphabet characters.
Used for specifying valid identifier characters
in #GScannerConfig.
#NAME: timeout_pop
#PARENT: GLib.AsyncQueue.timeout_pop
#COMMENT: data from the queue or %NULL, when no data is
    received before the timeout.
#NAME: get_user_runtime_dir
#PARENT: GLib
#COMMENT: Returns a directory that is unique to the current user on the local
system.

On UNIX platforms this is determined using the mechanisms described
in the
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
This is the directory
specified in the `XDG_RUNTIME_DIR` environment variable.
In the case that this variable is not set, GLib will issue a warning
message to stderr and return the value of g_get_user_cache_dir().

On Windows this is the folder to use for local (as opposed to
roaming) application data. See documentation for
CSIDL_LOCAL_APPDATA.  Note that on Windows it thus is the same as
what g_get_user_config_dir() returns.
#NAME: lookup
#PARENT: GLib.Tree.lookup
#COMMENT: the value corresponding to the key, or %NULL
    if the key was not found
#NAME: katakana
#PARENT: GLib.UnicodeScript
#COMMENT: Katakana
#NAME: SequenceIterCompareFunc
#PARENT: GLib.SequenceIterCompareFunc
#COMMENT: zero if the iterators are equal, a negative value if @a
    comes before @b, and a positive value if @b comes before @a.
#NAME: read_chars
#PARENT: GLib.IOChannel.read_chars
#COMMENT: the status of the operation.
#NAME: insert_sorted_with_data
#PARENT: GLib.List
#COMMENT: Inserts a new element into the list, using the given comparison
function to determine its position.

If you are adding many new elements to a list, and the number of
new elements is much larger than the length of the list, use
g_list_prepend() to add the new items and sort the list afterwards
with g_list_sort().
#NAME: set_string_list
#PARENT: GLib.KeyFile
#COMMENT: Associates a list of string values for @key under @group_name.
If @key cannot be found then it is created.
If @group_name cannot be found then it is created.
#NAME: pid
#PARENT: GLib.child_watch_add.guint
#COMMENT: process id to watch. On POSIX the positive pid of a child
process. On Windows a handle for a process (which doesn't have to be
a child).
#NAME: cur_position
#PARENT: GLib.Scanner.cur_position
#COMMENT: the current position on the line
#NAME: replacement
#PARENT: GLib.regex_check_replacement.gboolean
#COMMENT: the replacement string
#NAME: utf16_to_utf8
#PARENT: GLib.utf16_to_utf8
#COMMENT: a pointer to a newly allocated UTF-8 string.
    This value must be freed with g_free(). If an error occurs,
    %NULL will be returned and @error set.
#NAME: hook
#PARENT: GLib.hook_free.none
#COMMENT: the #GHook to free
#NAME: malloc0
#PARENT: GLib
#COMMENT: Allocates @n_bytes bytes of memory, initialized to 0's.
If @n_bytes is 0 it returns %NULL.
#NAME: pop_unlocked
#PARENT: GLib.AsyncQueue.pop_unlocked
#COMMENT: data from the queue.
#NAME: get_comment
#PARENT: GLib.KeyFile.get_comment
#COMMENT: a comment that should be freed with g_free()
#NAME: open
#PARENT: GLib.VariantBuilder
#COMMENT: Opens a subcontainer inside the given @builder.  When done adding
items to the subcontainer, g_variant_builder_close() must be called.

It is an error to call this function in any way that would cause an
inconsistent value to be constructed (ie: adding too many values or
a value of an incorrect type).
#NAME: invalid_relative_reference
#PARENT: GLib.RegexError
#COMMENT: relative reference must not be zero. Since: 2.34
#NAME: key_file
#PARENT: GLib.KeyFile.get_int64.gint64
#COMMENT: a non-%NULL #GKeyFile
#NAME: channel
#PARENT: GLib.IOChannel.init.none
#COMMENT: a #GIOChannel
#NAME: end
#PARENT: GLib.random_int_range.gint32
#COMMENT: upper open bound of the interval
#NAME: end
#PARENT: GLib.VariantDict.end
#COMMENT: a new, floating, #GVariant
#NAME: new
#PARENT: GLib.VariantType.new
#COMMENT: a new #GVariantType
#NAME: init
#PARENT: GLib.VariantIter.init
#COMMENT: the number of items in @value
#NAME: traverse_func
#PARENT: GLib.Tree.traverse.none
#COMMENT: the function to call for each node visited. If this
  function returns %TRUE, the traversal is stopped.
#NAME: scan_float
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if floating point numbers are recognized
    (the default is %TRUE).
#NAME: c
#PARENT: GLib.unichar_iszerowidth.gboolean
#COMMENT: a Unicode character
#NAME: context
#PARENT: GLib.dpgettext2.utf8
#COMMENT: the message context
#NAME: MainContext
#PARENT: GLib
#COMMENT: The `GMainContext` struct is an opaque data
type representing a set of sources to be handled in a main loop.
#NAME: string
#PARENT: GLib.quark_try_string.Quark
#COMMENT: a string
#NAME: get_system_data_dirs
#PARENT: GLib
#COMMENT: Returns an ordered list of base directories in which to access
system-wide application data.

On UNIX platforms this is determined using the mechanisms described
in the
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec)
In this case the list of directories retrieved will be XDG_DATA_DIRS.

On Windows the first elements in the list are the Application Data
and Documents folders for All Users. (These can be determined only
on Windows 2000 or later and are not present in the list on other
Windows versions.) See documentation for CSIDL_COMMON_APPDATA and
CSIDL_COMMON_DOCUMENTS.

Then follows the "share" subfolder in the installation folder for
the package containing the DLL that calls this function, if it can
be determined.

Finally the list contains the "share" subfolder in the installation
folder for GLib, and in the installation folder for the package the
application's .exe file belongs to.

The installation folders above are determined by looking up the
folder where the module (DLL or EXE) in question is located. If the
folder's name is "bin", its parent is used, otherwise the folder
itself.

Note that on Windows the returned list can vary depending on where
this function is called.
#NAME: get_normal_form
#PARENT: GLib.Variant
#COMMENT: Gets a #GVariant instance that has the same value as @value and is
trusted to be in normal form.

If @value is already trusted to be in normal form then a new
reference to @value is returned.

If @value is not already trusted, then it is scanned to check if it
is in normal form.  If it is found to be in normal form then it is
marked as trusted and a new reference to it is returned.

If @value is found not to be in normal form then a new trusted
#GVariant is created with the same value as @value.

It makes sense to call this function if you've received #GVariant
data from untrusted sources and you want to ensure your serialised
output is definitely in normal form.
#NAME: hash
#PARENT: GLib.String.hash
#COMMENT: hash code for @str
#NAME: context
#PARENT: GLib.OptionContext.parse_strv.gboolean
#COMMENT: a #GOptionContext
#NAME: other_letter
#PARENT: GLib.UnicodeType
#COMMENT: General category "Letter, Other" (Lo)
#NAME: DateTime
#PARENT: GLib
#COMMENT: `GDateTime` is an opaque structure whose members
cannot be accessed directly.
#NAME: n
#PARENT: GLib.List.nth.gpointer
#COMMENT: the position of the element, counting from 0
#NAME: fd
#PARENT: GLib.Source.add_poll.none
#COMMENT: a #GPollFD structure holding information about a file
     descriptor to watch.
#NAME: julian_date
#PARENT: GLib.date_valid_julian.gboolean
#COMMENT: Julian day to check
#NAME: bit_trylock
#PARENT: GLib
#COMMENT: Sets the indicated @lock_bit in @address, returning %TRUE if
successful.  If the bit is already set, returns %FALSE immediately.

Attempting to lock on two different bits within the same integer is
not supported.

The value of the bit that is set is (1u << @bit).  If @bit is not
between 0 and 31 then the result is undefined.

This function accesses @address atomically.  All other accesses to
@address must be atomic in order for this function to work
reliably.
#NAME: atomic
#PARENT: GLib.atomic_int_inc.none
#COMMENT: a pointer to a #gint or #guint
#NAME: ref
#PARENT: GLib.Hook
#COMMENT: Increments the reference count for a #GHook.
#NAME: ref
#PARENT: GLib.OptionGroup
#COMMENT: Increments the reference count of @group by one.
#NAME: new_handle
#PARENT: GLib.Variant.new_handle
#COMMENT: a floating reference to a new handle #GVariant instance
#NAME: eof
#PARENT: GLib.IOStatus
#COMMENT: End of file.
#NAME: find_child
#PARENT: GLib.Node.find_child
#COMMENT: the found child #GNode, or %NULL if the data is not found
#NAME: acces
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `EACCES`
#NAME: test_data
#PARENT: GLib.test_add_data_func.none
#COMMENT: Test data argument for the test function.
#NAME: user_data
#PARENT: GLib.HashTable.foreach_steal.guint
#COMMENT: user data to pass to the function
#NAME: directory_templates
#PARENT: GLib.UserDirectory
#COMMENT: the user's Templates directory
#NAME: KeyFileError
#PARENT: GLib
#COMMENT: Error codes returned by key file parsing.
#NAME: get_int64
#PARENT: GLib.KeyFile.get_int64
#COMMENT: the value associated with the key as a signed 64-bit integer, or
0 if the key was not found or could not be parsed.
#NAME: get_modified
#PARENT: GLib.BookmarkFile
#COMMENT: Gets the time when the bookmark for @uri was last modified.

In the event the URI cannot be found, -1 is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
#NAME: dt1
#PARENT: GLib.date_time_equal.gboolean
#COMMENT: a #GDateTime
#NAME: unichar_isalpha
#PARENT: GLib
#COMMENT: Determines whether a character is alphabetic (i.e. a letter).
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().
#NAME: dt2
#PARENT: GLib.date_time_equal.gboolean
#COMMENT: a #GDateTime
#NAME: invoke
#PARENT: GLib.MainContext
#COMMENT: Invokes a function in such a way that @context is owned during the
invocation of @function.

If @context is %NULL then the global default main context — as
returned by g_main_context_default() — is used.

If @context is owned by the current thread, @function is called
directly.  Otherwise, if @context is the thread-default main context
of the current thread and g_main_context_acquire() succeeds, then
@function is called and g_main_context_release() is called
afterwards.

In any other case, an idle source is created to call @function and
that source is attached to @context (presumably to be run in another
thread).  The idle source is attached with #G_PRIORITY_DEFAULT
priority.  If you want a different priority, use
g_main_context_invoke_full().

Note that, as with normal idle functions, @function should probably
return %FALSE.  If it returns %TRUE, it will be continuously run in a
loop (and may prevent this call from returning).
#NAME: date
#PARENT: GLib.date_strftime.gsize
#COMMENT: valid #GDate
#NAME: tz
#PARENT: GLib.DateTime.to_timezone.DateTime
#COMMENT: the new #GTimeZone
#NAME: format
#PARENT: GLib.Error.new.Error
#COMMENT: printf()-style format for error message
#NAME: compare_func
#PARENT: GLib.PtrArray.sort.none
#COMMENT: comparison function
#NAME: queue
#PARENT: GLib.Queue.foreach.none
#COMMENT: a #GQueue
#NAME: replacement
#PARENT: GLib.Regex.replace_literal.utf8
#COMMENT: text to replace each match with
#NAME: DateYear
#PARENT: GLib
#COMMENT: Integer representing a year; #G_DATE_BAD_YEAR is the invalid
value. The year must be 1 or higher; negative (BC) years are not
allowed. The year is represented with four digits.
#NAME: bytes_read
#PARENT: GLib.IOChannel.read_chars.IOStatus
#COMMENT: The number of bytes read. This may be
    zero even on success if count < 6 and the channel's encoding
    is non-%NULL. This indicates that the next UTF-8 character is
    too wide for the buffer.
#NAME: source
#PARENT: GLib.Source.add_poll.none
#COMMENT: a #GSource
#NAME: find_source_by_user_data
#PARENT: GLib.MainContext.find_source_by_user_data
#COMMENT: the source, if one was found, otherwise %NULL
#NAME: days_between
#PARENT: GLib.Date.days_between
#COMMENT: the number of days between @date1 and @date2
#NAME: datetime
#PARENT: GLib.DateTime.to_timeval.gboolean
#COMMENT: a #GDateTime
#NAME: year
#PARENT: GLib.Date
#COMMENT: the day of the day-month-year representation of the date
#NAME: atomic_pointer_or
#PARENT: GLib.atomic_pointer_or
#COMMENT: the value of @atomic before the operation, unsigned
#NAME: test_timer_last
#PARENT: GLib.test_timer_last
#COMMENT: the last result of g_test_timer_elapsed(), as a double
#NAME: cmp_data
#PARENT: GLib.Sequence.lookup_iter.SequenceIter
#COMMENT: user data passed to @iter_cmp
#NAME: new_from_bytes
#PARENT: GLib.Variant.new_from_bytes
#COMMENT: a new #GVariant with a floating reference
#NAME: io_add_watch
#PARENT: GLib.io_add_watch
#COMMENT: the event source id
#NAME: byte_array_free_to_bytes
#PARENT: GLib.byte_array_free_to_bytes
#COMMENT: a new immutable #GBytes representing same
    byte data that was in the array
#NAME: c
#PARENT: GLib.ascii_toupper.gchar
#COMMENT: any character
#NAME: builder
#PARENT: GLib.VariantBuilder.close.none
#COMMENT: a #GVariantBuilder
#NAME: get_regex
#PARENT: GLib.MatchInfo.get_regex
#COMMENT: #GRegex object used in @match_info
#NAME: reload_user_special_dirs_cache
#PARENT: GLib
#COMMENT: Resets the cache used for g_get_user_special_dir(), so
that the latest on-disk version is used. Call this only
if you just changed the data on disk yourself.

Due to threadsafety issues this may cause leaking of strings
that were previously returned from g_get_user_special_dir()
that can't be freed. We ensure to only leak the data for
the directories that actually changed value though.
#NAME: hook
#PARENT: GLib.Hook.insert_before.none
#COMMENT: the #GHook to insert
#NAME: atomic
#PARENT: GLib.atomic_int_add.gint
#COMMENT: a pointer to a #gint or #guint
#NAME: KEY_FILE_DESKTOP_KEY_URL
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the URL to access. It is only valid for desktop entries
with the `Link` type.
#NAME: date
#PARENT: GLib.Date.set_time_val.none
#COMMENT: a #GDate
#NAME: get_digest
#PARENT: GLib.Hmac
#COMMENT: Gets the digest from @checksum as a raw binary array and places it
into @buffer. The size of the digest depends on the type of checksum.

Once this function has been called, the #GHmac is closed and can
no longer be updated with g_checksum_update().
#NAME: user_data
#PARENT: GLib.Sequence.foreach.none
#COMMENT: user data passed to @func
#NAME: format
#PARENT: GLib.markup_vprintf_escaped.utf8
#COMMENT: printf() style format string
#NAME: queue
#PARENT: GLib.Queue.link_index.gint
#COMMENT: a #GQueue
#NAME: compute_hmac_for_string
#PARENT: GLib
#COMMENT: Computes the HMAC for a string.

The hexadecimal string returned will be in lower case.
#NAME: pos
#PARENT: GLib.String.erase.String
#COMMENT: the position of the content to remove
#NAME: KEY_FILE_DESKTOP_KEY_NAME
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the specific name of the desktop entry.
#NAME: get_begin_iter
#PARENT: GLib.Sequence.get_begin_iter
#COMMENT: the begin iterator for @seq.
#NAME: add_group
#PARENT: GLib.BookmarkFile
#COMMENT: Adds @group to the list of groups to which the bookmark for @uri
belongs to.

If no bookmark for @uri is found then it is created.
#NAME: copy
#PARENT: GLib.Rand
#COMMENT: Copies a #GRand into a new one with the same exact state as before.
This way you can take a snapshot of the random number generator for
replaying later.
#NAME: data
#PARENT: GLib.Hook
#COMMENT: data which is passed to func when this hook is invoked
#NAME: new_strv
#PARENT: GLib.Variant.new_strv
#COMMENT: a new floating #GVariant instance
#NAME: get_locale_string_list
#PARENT: GLib.KeyFile.get_locale_string_list
#COMMENT: a newly allocated %NULL-terminated string array
  or %NULL if the key isn't found. The string array should be freed
  with g_strfreev().
#NAME: sunday
#PARENT: GLib.DateWeekday
#COMMENT: Sunday
#NAME: close
#PARENT: GLib.Dir
#COMMENT: Closes the directory and deallocates all related resources.
#NAME: overwrite_len
#PARENT: GLib.String.overwrite_len
#COMMENT: @string
#NAME: string_is_valid
#PARENT: GLib.VariantType.string_is_valid
#COMMENT: %TRUE if @type_string is exactly one valid type string

Since 2.24
#NAME: lookup
#PARENT: GLib.VariantDict
#COMMENT: Looks up a value in a #GVariantDict.

This function is a wrapper around g_variant_dict_lookup_value() and
g_variant_get().  In the case that %NULL would have been returned,
this function returns %FALSE.  Otherwise, it unpacks the returned
value and returns %TRUE.

@format_string determines the C types that are used for unpacking the
values and also determines if the values are copied or borrowed, see the
section on [GVariant format strings][gvariant-format-strings-pointers].
#NAME: array
#PARENT: GLib.PtrArray.free.gpointer
#COMMENT: a #GPtrArray
#NAME: flags
#PARENT: GLib.spawn_async_with_pipes.gboolean
#COMMENT: flags from #GSpawnFlags
#NAME: get_handle
#PARENT: GLib.Variant
#COMMENT: Returns the 32-bit signed integer value of @value.

It is an error to call this function with a @value of any type other
than %G_VARIANT_TYPE_HANDLE.

By convention, handles are indexes into an array of file descriptors
that are sent alongside a D-Bus message.  If you're not interacting
with D-Bus, you probably don't need them.
#NAME: has_group
#PARENT: GLib.KeyFile.has_group
#COMMENT: %TRUE if @group_name is a part of @key_file, %FALSE
otherwise.
#NAME: strjoinv
#PARENT: GLib
#COMMENT: Joins a number of strings together to form one long string, with the
optional @separator inserted between each of them. The returned string
should be freed with g_free().
#NAME: bookmark
#PARENT: GLib.BookmarkFile.remove_application.gboolean
#COMMENT: a #GBookmarkFile
#NAME: terminator_pos
#PARENT: GLib.IOChannel.read_line.IOStatus
#COMMENT: location to store position of line terminator, or %NULL
#NAME: string
#PARENT: GLib.variant_is_object_path.gboolean
#COMMENT: a normal C nul-terminated string
#NAME: OptionArgFunc
#PARENT: GLib
#COMMENT: The type of function to be passed as callback for %G_OPTION_ARG_CALLBACK
options.
#NAME: ByteArray
#PARENT: GLib
#COMMENT: Contains the public fields of a GByteArray.
#NAME: ref_count
#PARENT: GLib.Hook
#COMMENT: the reference count of this hook
#NAME: insert_before
#PARENT: GLib.List.insert_before
#COMMENT: the (possibly changed) start of the #GList
#NAME: user_data
#PARENT: GLib.Scanner
#COMMENT: unused
#NAME: may_block
#PARENT: GLib.MainContext.iteration.gboolean
#COMMENT: whether the call may block.
#NAME: match_simple
#PARENT: GLib.Regex
#COMMENT: Scans for a match in @string for @pattern.

This function is equivalent to g_regex_match() but it does not
require to compile the pattern with g_regex_new(), avoiding some
lines of code when you need just to do a match without extracting
substrings, capture counts, and so on.

If this function is to be called on the same @pattern more than
once, it's more efficient to compile the pattern once with
g_regex_new() and then use g_regex_match().
#NAME: unicode_script_to_iso15924
#PARENT: GLib.unicode_script_to_iso15924
#COMMENT: the ISO 15924 code for @script, encoded as an integer,
  of zero if @script is %G_UNICODE_SCRIPT_INVALID_CODE or
  ISO 15924 code 'Zzzz' (script code for UNKNOWN) if @script is not understood.
#NAME: spawn_async
#PARENT: GLib
#COMMENT: See g_spawn_async_with_pipes() for a full description; this function
simply calls the g_spawn_async_with_pipes() without any pipes.

You should call g_spawn_close_pid() on the returned child process
reference when you don't need it any more.

If you are writing a GTK+ application, and the program you are
spawning is a graphical application, too, then you may want to
use gdk_spawn_on_screen() instead to ensure that the spawned program
opens its windows on the right screen.

Note that the returned @child_pid on Windows is a handle to the child
process and not its identifier. Process handles and process identifiers
are different concepts on Windows.
#NAME: c
#PARENT: GLib.unichar_iswide.gboolean
#COMMENT: a Unicode character
#NAME: iter
#PARENT: GLib.VariantIter.copy.VariantIter
#COMMENT: a #GVariantIter
#NAME: bsr_anycrlf
#PARENT: GLib.RegexMatchFlags
#COMMENT: Overrides the newline definition for "\R" set when
    creating a new #GRegex; only '\r', '\n', or '\r\n' character sequences
    are recognized as a newline by "\R". Since: 2.34
#NAME: read_line
#PARENT: GLib.IOChannel.read_line
#COMMENT: the status of the operation.
#NAME: TraverseType
#PARENT: GLib
#COMMENT: Specifies the type of traveral performed by g_tree_traverse(),
g_node_traverse() and g_node_find(). The different orders are
illustrated here:
- In order: A, B, C, D, E, F, G, H, I
  ![](Sorted_binary_tree_inorder.svg)
- Pre order: F, B, A, D, C, E, G, I, H
  ![](Sorted_binary_tree_preorder.svg)
- Post order: A, C, E, D, B, H, I, G, F
  ![](Sorted_binary_tree_postorder.svg)
- Level order: F, B, G, A, D, I, C, E, H
  ![](Sorted_binary_tree_breadth-first_traversal.svg)
#NAME: str_tokenize_and_fold
#PARENT: GLib
#COMMENT: Tokenises @string and performs folding on each token.

A token is a non-empty sequence of alphanumeric characters in the
source string, separated by non-alphanumeric characters.  An
"alphanumeric" character for this purpose is one that matches
g_unichar_isalnum() or g_unichar_ismark().

Each token is then (Unicode) normalised and case-folded.  If
@ascii_alternates is non-%NULL and some of the returned tokens
contain non-ASCII characters, ASCII alternatives will be generated.

The number of ASCII alternatives that are generated and the method
for doing so is unspecified, but @translit_locale (if specified) may
improve the transliteration if the language of the source string is
known.
#NAME: log_set_handler
#PARENT: GLib.log_set_handler
#COMMENT: the id of the new handler
#NAME: spawn_command_line_async
#PARENT: GLib
#COMMENT: A simple version of g_spawn_async() that parses a command line with
g_shell_parse_argv() and passes it to g_spawn_async(). Runs a
command line in the background. Unlike g_spawn_async(), the
%G_SPAWN_SEARCH_PATH flag is enabled, other flags are not. Note
that %G_SPAWN_SEARCH_PATH can have security implications, so
consider using g_spawn_async() directly if appropriate. Possible
errors are those from g_shell_parse_argv() and g_spawn_async().

The same concerns on Windows apply as for g_spawn_command_line_sync().
#NAME: trash_stack_push
#PARENT: GLib
#COMMENT: Pushes a piece of memory onto a #GTrashStack.
#NAME: begin
#PARENT: GLib.DateTime.difference.TimeSpan
#COMMENT: a #GDateTime
#NAME: hash_table
#PARENT: GLib.HashTable.insert.gboolean
#COMMENT: a #GHashTable
#NAME: year
#PARENT: GLib.date_get_days_in_month.guint8
#COMMENT: year
#NAME: hook_list
#PARENT: GLib.Hook.get.Hook
#COMMENT: a #GHookList
#NAME: get_compile_flags
#PARENT: GLib.Regex.get_compile_flags
#COMMENT: flags from #GRegexCompileFlags
#NAME: file
#PARENT: GLib.BookmarkFile.load_from_data_dirs.gboolean
#COMMENT: a relative path to a filename to open and parse
#NAME: atomic_pointer_compare_and_exchange
#PARENT: GLib
#COMMENT: Compares @atomic to @oldval and, if equal, sets it to @newval.
If @atomic was not equal to @oldval then no change occurs.

This compare and exchange is done atomically.

Think of this operation as an atomic version of
`{ if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }`.

This call acts as a full compiler and hardware memory barrier.
#NAME: end
#PARENT: GLib.VariantBuilder.end
#COMMENT: a new, floating, #GVariant
#NAME: nxio
#PARENT: GLib.FileError
#COMMENT: No such device or address. The system tried to
    use the device represented by a file you specified, and it
    couldn't find the device. This can mean that the device file was
    installed incorrectly, or that the physical device is missing or
    not correctly attached to the computer.
#NAME: unref
#PARENT: GLib.Thread
#COMMENT: Decrease the reference count on @thread, possibly freeing all
resources associated with it.

Note that each thread holds a reference to its #GThread while
it is running, so it is safe to drop your own reference to it
if you don't need it anymore.
#NAME: shutdown
#PARENT: GLib.IOChannel
#COMMENT: Close an IO channel. Any pending data to be written will be
flushed if @flush is %TRUE. The channel will not be freed until the
last reference is dropped using g_io_channel_unref().
#NAME: data_size
#PARENT: GLib.test_create_case.TestCase
#COMMENT: the size of the fixture data structure
#NAME: kaithi
#PARENT: GLib.UnicodeScript
#COMMENT: Kaithi. Since 2.26
#NAME: data
#PARENT: GLib.Queue.remove_all.guint
#COMMENT: the data to remove
#NAME: is_definite
#PARENT: GLib.VariantType.is_definite
#COMMENT: %TRUE if @type is definite

Since 2.24
#NAME: set_dmy
#PARENT: GLib.Date
#COMMENT: Sets the value of a #GDate from a day, month, and year.
The day-month-year triplet must be valid; if you aren't
sure it is, call g_date_valid_dmy() to check before you
set it.
#NAME: remove_range
#PARENT: GLib.ByteArray.remove_range
#COMMENT: the #GByteArray
#NAME: scan_hex
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if hexadecimal numbers are recognized (the
    default is %TRUE).
#NAME: dir
#PARENT: GLib.Dir.read_name.utf8
#COMMENT: a #GDir* created by g_dir_open()
#NAME: old_north_arabian
#PARENT: GLib.UnicodeScript
#COMMENT: Old North Arabian. Since: 2.42
#NAME: dup_strv
#PARENT: GLib.Variant.dup_strv
#COMMENT: an array of strings
#NAME: test_expect_message
#PARENT: GLib
#COMMENT: Indicates that a message with the given @log_domain and @log_level,
with text matching @pattern, is expected to be logged. When this
message is logged, it will not be printed, and the test case will
not abort.

Use g_test_assert_expected_messages() to assert that all
previously-expected messages have been seen and suppressed.

You can call this multiple times in a row, if multiple messages are
expected as a result of a single call. (The messages must appear in
the same order as the calls to g_test_expect_message().)

For example:

|[<!-- language="C" -->
  // g_main_context_push_thread_default() should fail if the
  // context is already owned by another thread.
  g_test_expect_message (G_LOG_DOMAIN,
                         G_LOG_LEVEL_CRITICAL,
                         "assertion*acquired_context*failed");
  g_main_context_push_thread_default (bad_context);
  g_test_assert_expected_messages ();
]|

Note that you cannot use this to test g_error() messages, since
g_error() intentionally never returns even if the program doesn't
abort; use g_test_trap_subprocess() in this case.

If messages at %G_LOG_LEVEL_DEBUG are emitted, but not explicitly
expected via g_test_expect_message() then they will be ignored.
#NAME: cond
#PARENT: GLib.Cond.wait.none
#COMMENT: a #GCond
#NAME: type
#PARENT: GLib.TimeZone.adjust_time.gint
#COMMENT: the #GTimeType of @time_
#NAME: log_set_default_handler
#PARENT: GLib
#COMMENT: Installs a default log handler which is used if no
log handler has been set for the particular log domain
and log level combination. By default, GLib uses
g_log_default_handler() as default log handler.
#NAME: new_with_seed_array
#PARENT: GLib.Rand
#COMMENT: Creates a new random number generator initialized with @seed.
#NAME: october
#PARENT: GLib.DateMonth
#COMMENT: October
#NAME: child_setup
#PARENT: GLib.spawn_sync.gboolean
#COMMENT: function to run in the child just before exec()
#NAME: filename_from_uri
#PARENT: GLib.filename_from_uri
#COMMENT: a newly-allocated string holding
              the resulting filename, or %NULL on an error.
#NAME: source
#PARENT: GLib.Source.get_can_recurse.gboolean
#COMMENT: a #GSource
#NAME: HFunc
#PARENT: GLib
#COMMENT: Specifies the type of the function passed to g_hash_table_foreach().
It is called with each key/value pair, together with the @user_data
parameter which is passed to g_hash_table_foreach().
#NAME: tv
#PARENT: GLib.DateTime.new_from_timeval_utc.DateTime
#COMMENT: a #GTimeVal
#NAME: source_remove
#PARENT: GLib
#COMMENT: Removes the source with the given id from the default main context.

The id of a #GSource is given by g_source_get_id(), or will be
returned by the functions g_source_attach(), g_idle_add(),
g_idle_add_full(), g_timeout_add(), g_timeout_add_full(),
g_child_watch_add(), g_child_watch_add_full(), g_io_add_watch(), and
g_io_add_watch_full().

See also g_source_destroy(). You must use g_source_destroy() for sources
added to a non-default main context.

It is a programmer error to attempt to remove a non-existent source.

More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.
#NAME: is_of_type
#PARENT: GLib.Variant
#COMMENT: Checks if a value has a type matching the provided type.
#NAME: get_next_token
#PARENT: GLib.Scanner
#COMMENT: Parses the next token just like g_scanner_peek_next_token()
and also removes it from the input stream. The token data is
placed in the @token, @value, @line, and @position fields of
the #GScanner structure.
#NAME: length
#PARENT: GLib.SList.length
#COMMENT: the number of elements in the #GSList
#NAME: release
#PARENT: GLib.MainContext
#COMMENT: Releases ownership of a context previously acquired by this thread
with g_main_context_acquire(). If the context was acquired multiple
times, the ownership will be released only when g_main_context_release()
is called as many times as it was acquired.
#NAME: sequence_move
#PARENT: GLib
#COMMENT: Moves the item pointed to by @src to the position indicated by @dest.
After calling this function @dest will point to the position immediately
after @src. It is allowed for @src and @dest to point into different
sequences.
#NAME: sort
#PARENT: GLib.Queue
#COMMENT: Sorts @queue using @compare_func.
#NAME: free
#PARENT: GLib.Error
#COMMENT: Frees a #GError and associated resources.
#NAME: post_parse_func
#PARENT: GLib.OptionGroup.set_parse_hooks.none
#COMMENT: a function to call after parsing, or %NULL
#NAME: n_blocks
#PARENT: GLib.try_realloc_n.gpointer
#COMMENT: the number of blocks to allocate
#NAME: source
#PARENT: GLib.Source.remove_child_source.none
#COMMENT: a #GSource
#NAME: path_get_dirname
#PARENT: GLib.path_get_dirname
#COMMENT: the directory components of the file
#NAME: base
#PARENT: GLib.ascii_strtoll.gint64
#COMMENT: to be used for the conversion, 2..36 or 0
#NAME: child_type
#PARENT: GLib.Variant.new_maybe.Variant
#COMMENT: the #GVariantType of the child, or %NULL
#NAME: parse
#PARENT: GLib.KeyFileError
#COMMENT: document was ill-formed
#NAME: size
#PARENT: GLib.Bytes.unref_to_data.gpointer
#COMMENT: location to place the length of the returned data
#NAME: group_name
#PARENT: GLib.KeyFile.set_int64.none
#COMMENT: a group name
#NAME: filename
#PARENT: GLib.file_read_link.utf8
#COMMENT: the symbolic link
#NAME: array
#PARENT: GLib.Array.remove_index.gpointer
#COMMENT: a #GArray
#NAME: wait
#PARENT: GLib.Cond
#COMMENT: Atomically releases @mutex and waits until @cond is signalled.
When this function returns, @mutex is locked again and owned by the
calling thread.

When using condition variables, it is possible that a spurious wakeup
may occur (ie: g_cond_wait() returns even though g_cond_signal() was
not called).  It's also possible that a stolen wakeup may occur.
This is when g_cond_signal() is called, but another thread acquires
@mutex before this thread and modifies the state of the program in
such a way that when g_cond_wait() is able to return, the expected
condition is no longer met.

For this reason, g_cond_wait() must always be used in a loop.  See
the documentation for #GCond for a complete example.
#NAME: location
#PARENT: GLib.once_init_leave.none
#COMMENT: location of a static initializable variable containing 0
#NAME: context
#PARENT: GLib.OptionContext.set_translation_domain.none
#COMMENT: a #GOptionContext
#NAME: unichar_decompose
#PARENT: GLib.unichar_decompose
#COMMENT: %TRUE if the character could be decomposed
#NAME: signum
#PARENT: GLib.unix_signal_add.guint
#COMMENT: Signal number
#NAME: strrstr
#PARENT: GLib.strrstr
#COMMENT: a pointer to the found occurrence, or
   %NULL if not found.
#NAME: file
#PARENT: GLib.MappedFile.get_length.gsize
#COMMENT: a #GMappedFile
#NAME: key
#PARENT: GLib.HashTableIter.next.gboolean
#COMMENT: a location to store the key, or %NULL
#NAME: friday
#PARENT: GLib.DateWeekday
#COMMENT: Friday
#NAME: key_file
#PARENT: GLib.KeyFile.set_string_list.none
#COMMENT: a #GKeyFile
#NAME: add_years
#PARENT: GLib.Date
#COMMENT: Increments a date by some number of years.
If the date is February 29, and the destination
year is not a leap year, the date will be changed
to February 28. The date must be valid.
#NAME: unichar_digit_value
#PARENT: GLib
#COMMENT: Determines the numeric value of a character as a decimal
digit.
#NAME: count
#PARENT: GLib.IOChannel.read.IOError
#COMMENT: the number of bytes to read from the #GIOChannel
#NAME: len
#PARENT: GLib.utf8_strrchr.utf8
#COMMENT: the maximum length of @p
#NAME: error
#PARENT: GLib.Error.matches.gboolean
#COMMENT: a #GError or %NULL
#NAME: load_from_data_dirs
#PARENT: GLib.KeyFile.load_from_data_dirs
#COMMENT: %TRUE if a key file could be loaded, %FALSE othewise
#NAME: file_name
#PARENT: GLib.path_skip_root.utf8
#COMMENT: a file name
#NAME: n
#PARENT: GLib.Queue.peek_nth.gpointer
#COMMENT: the position of the element
#NAME: get_value
#PARENT: GLib.KeyFile.get_value
#COMMENT: a newly allocated string or %NULL if the specified
 key cannot be found.
#NAME: regex_split_simple
#PARENT: GLib.regex_split_simple
#COMMENT: a %NULL-terminated array of strings. Free
it using g_strfreev()
#NAME: ascii_strup
#PARENT: GLib.ascii_strup
#COMMENT: a newly allocated string, with all the lower case
    characters in @str converted to upper case, with semantics that
    exactly match g_ascii_toupper(). (Note that this is unlike the
    old g_strup(), which modified the string in place.)
#NAME: bytes_read
#PARENT: GLib.convert.utf8
#COMMENT: location to store the number of bytes in the
                input string that were successfully converted, or %NULL.
                Even if the conversion was successful, this may be
                less than @len if there were partial characters
                at the end of the input. If the error
                #G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
                stored will the byte offset after the last valid
                input sequence.
#NAME: peek_next_token
#PARENT: GLib.Scanner
#COMMENT: Parses the next token, without removing it from the input stream.
The token data is placed in the @next_token, @next_value, @next_line,
and @next_position fields of the #GScanner structure.

Note that, while the token is not removed from the input stream
(i.e. the next call to g_scanner_get_next_token() will return the
same token), it will not be reevaluated. This can lead to surprising
results when changing scope or the scanner configuration after peeking
the next token. Getting the next token after switching the scope or
configuration will return whatever was peeked before, regardless of
any symbols that may have been added or removed in the new scope.
#NAME: testpath
#PARENT: GLib.test_add_func.none
#COMMENT: /-separated test case path name for the test.
#NAME: key_file
#PARENT: GLib.KeyFile.set_value.none
#COMMENT: a #GKeyFile
#NAME: str_to_ascii
#PARENT: GLib.str_to_ascii
#COMMENT: a string in plain ASCII
#NAME: scope_remove_symbol
#PARENT: GLib.Scanner
#COMMENT: Removes a symbol from a scope.
#NAME: pop
#PARENT: GLib.TrashStack.pop
#COMMENT: the element at the top of the stack
#NAME: strerror
#PARENT: GLib.strerror
#COMMENT: a UTF-8 string describing the error code. If the error code
    is unknown, it returns "unknown error (<code>)".
#NAME: cur_line
#PARENT: GLib.Scanner.cur_line
#COMMENT: the current line
#NAME: func
#PARENT: GLib.Thread.new.Thread
#COMMENT: a function to execute in the new thread
#NAME: link_
#PARENT: GLib.SList.remove_link.gpointer
#COMMENT: an element in the #GSList
#NAME: hook_list
#PARENT: GLib.hook_insert_before.none
#COMMENT: a #GHookList
#NAME: escape_nul
#PARENT: GLib.Regex
#COMMENT: Escapes the nul characters in @string to "\x00".  It can be used
to compile a regex with embedded nul characters.

For completeness, @length can be -1 for a nul-terminated string.
In this case the output string will be of course equal to @string.
#NAME: node
#PARENT: GLib.Node.last_child.Node
#COMMENT: a #GNode (must not be %NULL)
#NAME: pos
#PARENT: GLib.utf8_pointer_to_offset.glong
#COMMENT: a pointer to a position within @str
#NAME: reserved_size
#PARENT: GLib.ByteArray.sized_new.guint8
#COMMENT: number of bytes preallocated
#NAME: unix_get_fd
#PARENT: GLib.IOChannel.unix_get_fd
#COMMENT: the file descriptor of the #GIOChannel.
#NAME: find_custom
#PARENT: GLib.List
#COMMENT: Finds an element in a #GList, using a supplied function to
find the desired element. It iterates over the list, calling
the given function which should return 0 when the desired
element is found. The function takes two #gconstpointer arguments,
the #GList element's data as the first argument and the
given user data.
#NAME: position
#PARENT: GLib.List.position
#COMMENT: the position of the element in the #GList,
    or -1 if the element is not found
#NAME: level_mask
#PARENT: GLib.LogLevelFlags
#COMMENT: a mask including all log levels
#NAME: find
#PARENT: GLib.Node.find
#COMMENT: the found #GNode, or %NULL if the data is not found
#NAME: remove
#PARENT: GLib.Tree
#COMMENT: Removes a key/value pair from a #GTree.

If the #GTree was created using g_tree_new_full(), the key and value
are freed using the supplied destroy functions, otherwise you have to
make sure that any dynamically allocated values are freed yourself.
If the key does not exist in the #GTree, the function does nothing.
#NAME: get_monotonic_time
#PARENT: GLib.get_monotonic_time
#COMMENT: the monotonic time, in microseconds
#NAME: element
#PARENT: GLib.VariantType.new_maybe.VariantType
#COMMENT: a #GVariantType
#NAME: new_tuple
#PARENT: GLib.VariantType
#COMMENT: Constructs a new tuple type, from @items.

@length is the number of items in @items, or -1 to indicate that
@items is %NULL-terminated.

It is appropriate to call g_variant_type_free() on the return value.
#NAME: node
#PARENT: GLib.Node.find_child.Node
#COMMENT: a #GNode
#NAME: flags
#PARENT: GLib.spawn_async.gboolean
#COMMENT: flags from #GSpawnFlags
#NAME: split
#PARENT: GLib.Regex
#COMMENT: Breaks the string on the pattern, and returns an array of the tokens.
If the pattern contains capturing parentheses, then the text for each
of the substrings will also be returned. If the pattern does not match
anywhere in the string, then the whole string is returned as the first
token.

As a special case, the result of splitting the empty string "" is an
empty vector, not a vector containing a single string. The reason for
this special case is that being able to represent a empty vector is
typically more useful than consistent handling of empty elements. If
you do need to represent empty elements, you'll need to check for the
empty string before calling this function.

A pattern that can match empty strings splits @string into separate
characters wherever it matches the empty string between characters.
For example splitting "ab c" using as a separator "\s*", you will get
"a", "b" and "c".
#NAME: is_array
#PARENT: GLib.VariantType.is_array
#COMMENT: %TRUE if @type is an array type

Since 2.24
#NAME: timer
#PARENT: GLib.Timer.start.none
#COMMENT: a #GTimer.
#NAME: load_from_file
#PARENT: GLib.BookmarkFile
#COMMENT: Loads a desktop bookmark file into an empty #GBookmarkFile structure.
If the file could not be loaded then @error is set to either a #GFileError
or #GBookmarkFileError.
#NAME: key
#PARENT: GLib.KeyFile.get_comment.utf8
#COMMENT: a key
#NAME: add_weeks
#PARENT: GLib.DateTime
#COMMENT: Creates a copy of @datetime and adds the specified number of weeks to the
copy. Add negative values to subtract weeks.
#NAME: queue
#PARENT: GLib.AsyncQueue.unlock.none
#COMMENT: a #GAsyncQueue
#NAME: queue
#PARENT: GLib.AsyncQueue.unref.none
#COMMENT: a #GAsyncQueue.
#NAME: variable_length_lookbehind
#PARENT: GLib.RegexError
#COMMENT: Lookbehind assertion is not
    fixed length. Since 2.16
#NAME: get_max_lookbehind
#PARENT: GLib.Regex
#COMMENT: Gets the number of characters in the longest lookbehind assertion in the
pattern. This information is useful when doing multi-segment matching using
the partial matching facilities.
#NAME: TestLogFatalFunc
#PARENT: GLib
#COMMENT: Specifies the prototype of fatal log handler functions.
#NAME: partial_hard
#PARENT: GLib.RegexMatchFlags
#COMMENT: Turns on the partial matching feature. In contrast to
    to #G_REGEX_MATCH_PARTIAL_SOFT, this stops matching as soon as a partial match
    is found, without continuing to search for a possible complete match. See
    g_match_info_is_partial_match() for more information. Since: 2.34
#NAME: builder
#PARENT: GLib.VariantBuilder.add.none
#COMMENT: a #GVariantBuilder
#NAME: destroy_notify
#PARENT: GLib.OptionGroup.set_translate_func.none
#COMMENT: a function which gets called to free @data, or %NULL
#NAME: none
#PARENT: GLib.TokenType
#COMMENT: not a token
#NAME: test_add_data_func_full
#PARENT: GLib
#COMMENT: Create a new test case, as with g_test_add_data_func(), but freeing
@test_data after the test run is complete.
#NAME: titlecase_letter
#PARENT: GLib.UnicodeType
#COMMENT: General category "Letter, Titlecase" (Lt)
#NAME: uri_not_found
#PARENT: GLib.BookmarkFileError
#COMMENT: a requested URI was not found
#NAME: timeout_source_new
#PARENT: GLib.timeout_source_new
#COMMENT: the newly-created timeout source
#NAME: atomic
#PARENT: GLib.atomic_pointer_add.gssize
#COMMENT: a pointer to a #gpointer-sized value
#NAME: read_unichar
#PARENT: GLib.IOChannel.read_unichar
#COMMENT: a #GIOStatus
#NAME: caseless
#PARENT: GLib.RegexCompileFlags
#COMMENT: Letters in the pattern match both upper- and
    lowercase letters. This option can be changed within a pattern
    by a "(?i)" option setting.
#NAME: data
#PARENT: GLib.BookmarkFile.load_from_data.gboolean
#COMMENT: desktop bookmarks loaded in memory
#NAME: src
#PARENT: GLib.utf8_strncpy.utf8
#COMMENT: UTF-8 encoded string
#NAME: pbase
#PARENT: GLib.qsort_with_data.none
#COMMENT: start of array to sort
#NAME: argv
#PARENT: GLib.spawn_async.gboolean
#COMMENT: child's argument vector
#NAME: unichar_islower
#PARENT: GLib.unichar_islower
#COMMENT: %TRUE if @c is a lowercase letter
#NAME: array
#PARENT: GLib.PtrArray.insert.none
#COMMENT: a #GPtrArray
#NAME: filename
#PARENT: GLib.KeyFile.save_to_file.gboolean
#COMMENT: the name of the file to write to
#NAME: checksum_type_get_length
#PARENT: GLib.checksum_type_get_length
#COMMENT: the checksum length, or -1 if @checksum_type is
not supported.
#NAME: date_valid_day
#PARENT: GLib.date_valid_day
#COMMENT: %TRUE if the day is valid
#NAME: test_func
#PARENT: GLib.test_add_func.none
#COMMENT: The test function to invoke for this test.
#NAME: text_len
#PARENT: GLib.MarkupParseContext.parse.gboolean
#COMMENT: length of @text in bytes
#NAME: compare
#PARENT: GLib.DateTime.compare
#COMMENT: -1, 0 or 1 if @dt1 is less than, equal to or greater
  than @dt2.
#NAME: tz
#PARENT: GLib.DateTime.new.DateTime
#COMMENT: a #GTimeZone
#NAME: set_mask
#PARENT: GLib.IOFlags
#COMMENT: the mask of the flags that the user can modify
    with g_io_channel_set_flags()
#NAME: CopyFunc
#PARENT: GLib.CopyFunc
#COMMENT: A pointer to the copy
#NAME: bytes1
#PARENT: GLib.Bytes.compare.gint
#COMMENT: a pointer to a #GBytes
#NAME: user_data
#PARENT: GLib.SpawnChildSetupFunc.none
#COMMENT: user data to pass to the function.
#NAME: date_valid_weekday
#PARENT: GLib.date_valid_weekday
#COMMENT: %TRUE if the weekday is valid
#NAME: bytes2
#PARENT: GLib.Bytes.compare.gint
#COMMENT: a pointer to a #GBytes to compare with @bytes1
#NAME: data_test
#PARENT: GLib.test_create_case.TestCase
#COMMENT: the actual test function
#NAME: test_trap_fork
#PARENT: GLib.test_trap_fork
#COMMENT: %TRUE for the forked child and %FALSE for the executing parent process.
#NAME: string
#PARENT: GLib.Variant.new_string.Variant
#COMMENT: a normal UTF-8 nul-terminated string
#NAME: prepend_c
#PARENT: GLib.String.prepend_c
#COMMENT: @string
#NAME: qsort_with_data
#PARENT: GLib
#COMMENT: This is just like the standard C qsort() function, but
the comparison routine accepts a user data argument.

This is guaranteed to be a stable sort since version 2.32.
#NAME: format_size_full
#PARENT: GLib
#COMMENT: Formats a size.

This function is similar to g_format_size() but allows for flags
that modify the output. See #GFormatSizeFlags.
#NAME: items
#PARENT: GLib.VariantType.new_tuple.VariantType
#COMMENT: an array of #GVariantTypes, one for each item
#NAME: value
#PARENT: GLib.Variant.dup_objv.utf8
#COMMENT: an array of object paths #GVariant
#NAME: bug_uri_snippet
#PARENT: GLib.test_bug.none
#COMMENT: Bug specific bug tracker URI portion.
#NAME: peek
#PARENT: GLib.TrashStack.peek
#COMMENT: the element at the top of the stack
#NAME: match_options
#PARENT: GLib.Regex.match.gboolean
#COMMENT: match options
#NAME: link_
#PARENT: GLib.Queue.unlink.none
#COMMENT: a #GList link that must be part of @queue
#NAME: base64_encode_step
#PARENT: GLib.base64_encode_step
#COMMENT: The number of bytes of output that was written
#NAME: atomic_int_set
#PARENT: GLib
#COMMENT: Sets the value of @atomic to @newval.

This call acts as a full compiler and hardware
memory barrier (after the set).
#NAME: height
#PARENT: GLib.TrashStack
#COMMENT: Returns the height of a #GTrashStack.

Note that execution of this function is of O(N) complexity
where N denotes the number of items on the stack.
#NAME: user_data
#PARENT: GLib.Queue.foreach.none
#COMMENT: user data to pass to @func
#NAME: inval
#PARENT: GLib.IOChannelError
#COMMENT: Invalid argument.
#NAME: n
#PARENT: GLib.snprintf.gint
#COMMENT: the maximum number of bytes to produce (including the
    terminating nul character).
#NAME: scanner
#PARENT: GLib.Scanner.scope_lookup_symbol.gpointer
#COMMENT: a #GScanner
#NAME: nothing_to_repeat
#PARENT: GLib.RegexError
#COMMENT: Nothing to repeat. Since 2.16
#NAME: join
#PARENT: GLib.Thread
#COMMENT: Waits until @thread finishes, i.e. the function @func, as
given to g_thread_new(), returns or g_thread_exit() is called.
If @thread has already terminated, then g_thread_join()
returns immediately.

Any thread can wait for any other thread by calling g_thread_join(),
not just its 'creator'. Calling g_thread_join() from multiple threads
for the same @thread leads to undefined behaviour.

The value returned by @func or given to g_thread_exit() is
returned by this function.

g_thread_join() consumes the reference to the passed-in @thread.
This will usually cause the #GThread struct and associated resources
to be freed. Use g_thread_ref() to obtain an extra reference if you
want to keep the GThread alive beyond the g_thread_join() call.
#NAME: noalias
#PARENT: GLib.OptionFlags
#COMMENT: This flag turns off the automatic conflict
    resolution which prefixes long option names with `groupname-` if
    there is a conflict. This option should only be used in situations
    where aliasing is necessary to model some legacy commandline interface.
    It is not safe to use this option, unless all option groups are under
    your direct control. Since 2.8.
#NAME: destroy
#PARENT: GLib.Timer
#COMMENT: Destroys a timer, freeing associated resources.
#NAME: base64_encode_close
#PARENT: GLib
#COMMENT: Flush the status from a sequence of calls to g_base64_encode_step().

The output buffer must be large enough to fit all the data that will
be written to it. It will need up to 4 bytes, or up to 5 bytes if
line-breaking is enabled.
#NAME: get_integer_list
#PARENT: GLib.KeyFile.get_integer_list
#COMMENT: 
    the values associated with the key as a list of integers, or %NULL if
    the key was not found or could not be parsed. The returned list of
    integers should be freed with g_free() when no longer needed.
#NAME: string
#PARENT: GLib.Regex.replace_eval.utf8
#COMMENT: string to perform matches against
#NAME: unichar_isdigit
#PARENT: GLib.unichar_isdigit
#COMMENT: %TRUE if @c is a digit
#NAME: element_free_func
#PARENT: GLib.PtrArray.set_free_func.none
#COMMENT: A function to free elements with
    destroy @array or %NULL
#NAME: match_info
#PARENT: GLib.MatchInfo.free.none
#COMMENT: a #GMatchInfo, or %NULL
#NAME: stack_p
#PARENT: GLib.trash_stack_push.none
#COMMENT: a #GTrashStack
#NAME: DebugKey
#PARENT: GLib
#COMMENT: Associates a string with a bit flag.
Used in g_parse_debug_string().
#NAME: match_info
#PARENT: GLib.MatchInfo.fetch_named_pos.gboolean
#COMMENT: #GMatchInfo structure
#NAME: len
#PARENT: GLib.convert_with_fallback.utf8
#COMMENT: the length of the string in bytes, or -1 if the string is
                nul-terminated (Note that some encodings may allow nul
                bytes to occur inside strings. In that case, using -1
                for the @len parameter is unsafe)
#NAME: standard_output
#PARENT: GLib.spawn_command_line_sync.gboolean
#COMMENT: return location for child output
#NAME: default_compose
#PARENT: GLib.NormalizeMode
#COMMENT: like %G_NORMALIZE_DEFAULT, but with
    composed forms rather than a maximally decomposed form
#NAME: get_prgname
#PARENT: GLib
#COMMENT: Gets the name of the program. This name should not be localized,
in contrast to g_get_application_name().

If you are using GDK or GTK+ the program name is set in gdk_init(),
which is called by gtk_init(). The program name is found by taking
the last component of @argv[0].
#NAME: element_free_func
#PARENT: GLib.PtrArray.new_full.gpointer
#COMMENT: A function to free elements with
    destroy @array or %NULL
#NAME: VariantIter
#PARENT: GLib
#COMMENT: #GVariantIter is an opaque data structure and can only be accessed
using the following functions.
#NAME: difference
#PARENT: GLib.DateTime
#COMMENT: Calculates the difference in time between @end and @begin.  The
#GTimeSpan that is returned is effectively @end - @begin (ie:
positive if the first parameter is larger).
#NAME: newline_crlf
#PARENT: GLib.RegexMatchFlags
#COMMENT: Overrides the newline definition set when
    creating a new #GRegex, setting the '\r\n' characters sequence as line terminator.
#NAME: SequenceIterCompareFunc
#PARENT: GLib
#COMMENT: A #GSequenceIterCompareFunc is a function used to compare iterators.
It must return zero if the iterators compare equal, a negative value
if @a comes before @b, and a positive value if @b comes before @a.
#NAME: trylock
#PARENT: GLib.Mutex.trylock
#COMMENT: %TRUE if @mutex could be locked
#NAME: separator
#PARENT: GLib.strjoinv.utf8
#COMMENT: a string to insert between each of the
    strings, or %NULL
#NAME: get_user_cache_dir
#PARENT: GLib
#COMMENT: Returns a base directory in which to store non-essential, cached
data specific to particular user.

On UNIX platforms this is determined using the mechanisms described
in the
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
In this case the directory retrieved will be XDG_CACHE_HOME.

On Windows is the directory that serves as a common repository for
temporary Internet files. A typical path is
C:\Documents and Settings\username\Local Settings\Temporary Internet Files.
See documentation for CSIDL_INTERNET_CACHE.
#NAME: ambiguous
#PARENT: GLib.UnicodeBreakType
#COMMENT: Ambiguous (Alphabetic or Ideographic) (AI)
#NAME: datalist_id_replace_data
#PARENT: GLib
#COMMENT: Compares the member that is associated with @key_id in
@datalist to @oldval, and if they are the same, replace
@oldval with @newval.

This is like a typical atomic compare-and-exchange
operation, for a member of @datalist.

If the previous value was replaced then ownership of the
old value (@oldval) is passed to the caller, including
the registred destroy notify for it (passed out in @old_destroy).
Its up to the caller to free this as he wishes, which may
or may not include using @old_destroy as sometimes replacement
should not destroy the object in the normal way.
#NAME: get_can_recurse
#PARENT: GLib.Source
#COMMENT: Checks whether a source is allowed to be called recursively.
see g_source_set_can_recurse().
#NAME: MatchInfo
#PARENT: GLib
#COMMENT: A GMatchInfo is an opaque struct used to return information about
matches.
#NAME: new
#PARENT: GLib.VariantBuilder
#COMMENT: Allocates and initialises a new #GVariantBuilder.

You should call g_variant_builder_unref() on the return value when it
is no longer needed.  The memory will not be automatically freed by
any other call.

In most cases it is easier to place a #GVariantBuilder directly on
the stack of the calling function and initialise it with
g_variant_builder_init().
#NAME: insert_after
#PARENT: GLib.Queue
#COMMENT: Inserts @data into @queue after @sibling.

@sibling must be part of @queue. Since GLib 2.44 a %NULL sibling pushes the
data at the head of the queue.
#NAME: new
#PARENT: GLib.MarkupParseContext.new
#COMMENT: a new #GMarkupParseContext
#NAME: get_julian
#PARENT: GLib.Date
#COMMENT: Returns the Julian day or "serial number" of the #GDate. The
Julian day is simply the number of days since January 1, Year 1; i.e.,
January 1, Year 1 is Julian day 1; January 2, Year 1 is Julian day 2,
etc. The date must be valid.
#NAME: data
#PARENT: GLib.Node.child_index.gint
#COMMENT: the data to find
#NAME: default
#PARENT: GLib.MainContext
#COMMENT: Returns the global default main context. This is the main context
used for main loop functions when a main loop is not explicitly
specified, and corresponds to the "main" main loop. See also
g_main_context_get_thread_default().
#NAME: utf8_strreverse
#PARENT: GLib.utf8_strreverse
#COMMENT: a newly-allocated string which is the reverse of @str
#NAME: c
#PARENT: GLib.unichar_toupper.gunichar
#COMMENT: a Unicode character
#NAME: new_local
#PARENT: GLib.TimeZone
#COMMENT: Creates a #GTimeZone corresponding to local time.  The local time
zone may change between invocations to this function; for example,
if the system administrator changes it.

This is equivalent to calling g_time_zone_new() with the value of
the `TZ` environment variable (including the possibility of %NULL).

You should release the return value by calling g_time_zone_unref()
when you are done with it.
#NAME: utf8_strlen
#PARENT: GLib
#COMMENT: Computes the length of the string in characters, not including
the terminating nul character. If the @max'th byte falls in the
middle of a character, the last (partial) character is not counted.
#NAME: full_path
#PARENT: GLib.KeyFile.load_from_dirs.gboolean
#COMMENT: return location for a string containing the full path
  of the file, or %NULL
#NAME: data
#PARENT: GLib.compute_checksum_for_bytes.utf8
#COMMENT: binary blob to compute the digest of
#NAME: directory_pictures
#PARENT: GLib.UserDirectory
#COMMENT: the user's Pictures directory
#NAME: data
#PARENT: GLib.Sequence.append.SequenceIter
#COMMENT: the data for the new item
#NAME: add_full
#PARENT: GLib.DateTime
#COMMENT: Creates a new #GDateTime adding the specified values to the current date and
time in @datetime. Add negative values to subtract.
#NAME: dup_strv
#PARENT: GLib.Variant
#COMMENT: Gets the contents of an array of strings #GVariant.  This call
makes a deep copy; the return result should be released with
g_strfreev().

If @length is non-%NULL then the number of elements in the result
is stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.
#NAME: lookup_key
#PARENT: GLib.HashTable.lookup_extended.gboolean
#COMMENT: the key to look up
#NAME: build_path
#PARENT: GLib.build_path
#COMMENT: a newly-allocated string that must be freed with g_free().
#NAME: marshaller
#PARENT: GLib.HookList.marshal.none
#COMMENT: the function to call for each #GHook
#NAME: ascii_strtoll
#PARENT: GLib
#COMMENT: Converts a string to a #gint64 value.
This function behaves like the standard strtoll() function
does in the C locale. It does this without actually
changing the current locale, since that would not be
thread-safe.

This function is typically used when reading configuration
files or other non-user input that should be locale independent.
To handle input from the user you should normally use the
locale-sensitive system strtoll() function.

If the correct value would cause overflow, %G_MAXINT64 or %G_MININT64
is returned, and `ERANGE` is stored in `errno`.
If the base is outside the valid range, zero is returned, and
`EINVAL` is stored in `errno`. If the
string conversion fails, zero is returned, and @endptr returns @nptr
(if @endptr is non-%NULL).
#NAME: trusted
#PARENT: GLib.Variant.new_from_bytes.Variant
#COMMENT: if the contents of @bytes are trusted
#NAME: usec_timeout
#PARENT: GLib.test_trap_subprocess.none
#COMMENT: Timeout for the subprocess test in micro seconds.
#NAME: get_data
#PARENT: GLib.Bytes.get_data
#COMMENT: a pointer to the
         byte data, or %NULL
#NAME: value
#PARENT: GLib.environ_setenv.utf8
#COMMENT: the value for to set the variable to
#NAME: get_position
#PARENT: GLib.MarkupParseContext
#COMMENT: Retrieves the current line number and the number of the character on
that line. Intended for use in error messages; there are no strict
semantics for what constitutes the "current" line number other than
"the best number we could come up with for error messages."
#NAME: set_translate_func
#PARENT: GLib.OptionGroup
#COMMENT: Sets the function which is used to translate user-visible strings,
for `--help` output. Different groups can use different
#GTranslateFuncs. If @func is %NULL, strings are not translated.

If you are using gettext(), you only need to set the translation
domain, see g_option_group_set_translation_domain().
#NAME: next_line
#PARENT: GLib.Scanner
#COMMENT: line number of the last token from g_scanner_peek_next_token()
#NAME: match_options
#PARENT: GLib.Regex.match_full.gboolean
#COMMENT: match options
#NAME: index_
#PARENT: GLib.ByteArray.remove_index.guint8
#COMMENT: the index of the byte to remove
#NAME: queue
#PARENT: GLib.AsyncQueue.ref.AsyncQueue
#COMMENT: a #GAsyncQueue
#NAME: add_years
#PARENT: GLib.DateTime
#COMMENT: Creates a copy of @datetime and adds the specified number of years to the
copy. Add negative values to subtract years.
#NAME: seq
#PARENT: GLib.Sequence.sort.none
#COMMENT: a #GSequence
#NAME: filename
#PARENT: GLib.BookmarkFile.load_from_file.gboolean
#COMMENT: the path of a filename to load, in the GLib file name encoding
#NAME: year
#PARENT: GLib.DateTime.get_ymd.none
#COMMENT: the return location for the gregorian year, or %NULL.
#NAME: prefix_error_position
#PARENT: GLib.MarkupParseFlags
#COMMENT: Normally errors caught by GMarkup
    itself have line/column information prefixed to them to let the
    caller know the location of the error. When this flag is set the
    location information is also prefixed to errors generated by the
    #GMarkupParser implementation functions
#NAME: len
#PARENT: GLib.utf8_to_utf16.guint16
#COMMENT: the maximum length (number of bytes) of @str to use.
    If @len < 0, then the string is nul-terminated.
#NAME: nabataean
#PARENT: GLib.UnicodeScript
#COMMENT: Nabataean. Since: 2.42
#NAME: comment
#PARENT: GLib.KeyFile.set_comment.gboolean
#COMMENT: a comment
#NAME: ChecksumType
#PARENT: GLib
#COMMENT: The hashing algorithm to be used by #GChecksum when performing the
digest of some data.

Note that the #GChecksumType enumeration may be extended at a later
date to include new hashing algorithm types.
#NAME: may_recurse
#PARENT: GLib.HookList.invoke_check.none
#COMMENT: %TRUE if functions which are already running
    (e.g. in another thread) can be called. If set to %FALSE,
    these are skipped
#NAME: date
#PARENT: GLib.Date.get_year.DateYear
#COMMENT: a #GDate
#NAME: phoenician
#PARENT: GLib.UnicodeScript
#COMMENT: Phoenician
#NAME: timeout
#PARENT: GLib.AsyncQueue.timeout_pop_unlocked.gpointer
#COMMENT: the number of microseconds to wait
#NAME: move
#PARENT: GLib.Sequence
#COMMENT: Moves the item pointed to by @src to the position indicated by @dest.
After calling this function @dest will point to the position immediately
after @src. It is allowed for @src and @dest to point into different
sequences.
#NAME: remove_fast
#PARENT: GLib.PtrArray.remove_fast
#COMMENT: %TRUE if the pointer was found in the array
#NAME: unichar_break_type
#PARENT: GLib
#COMMENT: Determines the break type of @c. @c should be a Unicode character
(to derive a character from UTF-8 encoded text, use
g_utf8_get_char()). The break type is used to find word and line
breaks ("text boundaries"), Pango implements the Unicode boundary
resolution algorithms and normally you would use a function such
as pango_break() instead of caring about break types yourself.
#NAME: match_info
#PARENT: GLib.MatchInfo.get_regex.Regex
#COMMENT: a #GMatchInfo
#NAME: greek
#PARENT: GLib.UnicodeScript
#COMMENT: Greek
#NAME: append
#PARENT: GLib.SList
#COMMENT: Adds a new element on to the end of the list.

The return value is the new start of the list, which may
have changed, so make sure you store the new value.

Note that g_slist_append() has to traverse the entire list
to find the end, which is inefficient when adding multiple
elements. A common idiom to avoid the inefficiency is to prepend
the elements and reverse the list when all elements have been added.

|[<!-- language="C" -->
// Notice that these are initialized to the empty list.
GSList *list = NULL, *number_list = NULL;

// This is a list of strings.
list = g_slist_append (list, "first");
list = g_slist_append (list, "second");

// This is a list of integers.
number_list = g_slist_append (number_list, GINT_TO_POINTER (27));
number_list = g_slist_append (number_list, GINT_TO_POINTER (14));
]|
#NAME: channel
#PARENT: GLib.IOChannel.set_buffered.none
#COMMENT: a #GIOChannel
#NAME: string
#PARENT: GLib.String.prepend_c.String
#COMMENT: a #GString
#NAME: unichar_to_utf8
#PARENT: GLib.unichar_to_utf8
#COMMENT: number of bytes written
#NAME: timeout_pop_unlocked
#PARENT: GLib.AsyncQueue.timeout_pop_unlocked
#COMMENT: data from the queue or %NULL, when no data is
    received before the timeout.
#NAME: value
#PARENT: GLib.VariantBuilder.add_value.none
#COMMENT: a #GVariant
#NAME: markup_printf_escaped
#PARENT: GLib.markup_printf_escaped
#COMMENT: newly allocated result from formatting
   operation. Free with g_free().
#NAME: dictionary
#PARENT: GLib.Variant.lookup_value.Variant
#COMMENT: a dictionary #GVariant
#NAME: log_levels
#PARENT: GLib.log_set_handler.guint
#COMMENT: the log levels to apply the log handler for.
    To handle fatal and recursive messages as well, combine
    the log levels with the #G_LOG_FLAG_FATAL and
    #G_LOG_FLAG_RECURSION bit flags.
#NAME: limit
#PARENT: GLib.Variant.parse.Variant
#COMMENT: a pointer to the end of @text, or %NULL
#NAME: string
#PARENT: GLib.pattern_match.gboolean
#COMMENT: the UTF-8 encoded string to match
#NAME: value
#PARENT: GLib.KeyFile.set_boolean.none
#COMMENT: %TRUE or %FALSE
#NAME: byte_array_new
#PARENT: GLib.byte_array_new
#COMMENT: the new #GByteArray
#NAME: directory_public_share
#PARENT: GLib.UserDirectory
#COMMENT: the user's shared directory
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_uris.utf8
#COMMENT: a #GBookmarkFile
#NAME: append_c
#PARENT: GLib.String.append_c
#COMMENT: @string
#NAME: value
#PARENT: GLib.Variant.ref.Variant
#COMMENT: a #GVariant
#NAME: anchored
#PARENT: GLib.RegexCompileFlags
#COMMENT: The pattern is forced to be "anchored", that is,
    it is constrained to match only at the first matching point in the
    string that is being searched. This effect can also be achieved by
    appropriate constructs in the pattern itself such as the "^"
    metacharater.
#NAME: regex
#PARENT: GLib.Regex.get_has_cr_or_lf.gboolean
#COMMENT: a #GRegex structure
#NAME: fds
#PARENT: GLib.MainContext.query.gint
#COMMENT: location to
      store #GPollFD records that need to be polled.
#NAME: mutex
#PARENT: GLib.MainContext.wait.gboolean
#COMMENT: a mutex, currently held
#NAME: strlcat
#PARENT: GLib.strlcat
#COMMENT: size of attempted result, which is MIN (dest_size, strlen
    (original dest)) + strlen (src), so if retval >= dest_size,
    truncation occurred.
#NAME: channel
#PARENT: GLib.IOChannel.set_line_term.none
#COMMENT: a #GIOChannel
#NAME: datetime
#PARENT: GLib.DateTime.get_hour.gint
#COMMENT: a #GDateTime
#NAME: scope_foreach_symbol
#PARENT: GLib.Scanner
#COMMENT: Calls the given function for each of the symbol/value pairs
in the given scope of the #GScanner. The function is passed
the symbol and value of each pair, and the given @user_data
parameter.
#NAME: unknown_encoding
#PARENT: GLib.BookmarkFileError
#COMMENT: the text being parsed was
    in an unknown encoding
#NAME: byte_array_new_take
#PARENT: GLib
#COMMENT: Create byte array containing the data. The data will be owned by the array
and will be freed with g_free(), i.e. it could be allocated using g_strdup().
#NAME: delete_link
#PARENT: GLib.Queue
#COMMENT: Removes @link_ from @queue and frees it.

@link_ must be part of @queue.
#NAME: text
#PARENT: GLib.base64_decode.guint8
#COMMENT: zero-terminated string with base64 text to decode
#NAME: source_set_name_by_id
#PARENT: GLib
#COMMENT: Sets the name of a source using its ID.

This is a convenience utility to set source names from the return
value of g_idle_add(), g_timeout_add(), etc.

It is a programmer error to attempt to set the name of a non-existent
source.

More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.
#NAME: pop_tail
#PARENT: GLib.Queue.pop_tail
#COMMENT: the data of the last element in the queue, or %NULL
    if the queue is empty
#NAME: IOError
#PARENT: GLib
#COMMENT: #GIOError is only used by the deprecated functions
g_io_channel_read(), g_io_channel_write(), and g_io_channel_seek().
#NAME: lock_bit
#PARENT: GLib.pointer_bit_unlock.none
#COMMENT: a bit value between 0 and 31
#NAME: escape_string
#PARENT: GLib.Regex.escape_string
#COMMENT: a newly-allocated escaped string
#NAME: args
#PARENT: GLib.logv.none
#COMMENT: the parameters to insert into the format string
#NAME: bsr_any
#PARENT: GLib.RegexMatchFlags
#COMMENT: Overrides the newline definition for "\R" set when
    creating a new #GRegex; any Unicode newline character or character sequence
    are recognized as a newline by "\R". These are '\r', '\n' and '\rn', and the
    single characters U+000B LINE TABULATION, U+000C FORM FEED (FF),
    U+0085 NEXT LINE (NEL), U+2028 LINE SEPARATOR and
    U+2029 PARAGRAPH SEPARATOR. Since: 2.34
#NAME: main_context_default
#PARENT: GLib.main_context_default
#COMMENT: the global default main context.
#NAME: remove_all
#PARENT: GLib.List
#COMMENT: Removes all list nodes with data equal to @data.
Returns the new head of the list. Contrast with
g_list_remove() which removes only the first node
matching the given data.
#NAME: GNUC_FUNCTION
#PARENT: GLib
#COMMENT: Expands to "" on all modern compilers, and to  __FUNCTION__ on gcc
version 2.x. Don't use it.
#NAME: string
#PARENT: GLib.strchug.utf8
#COMMENT: a string to remove the leading whitespace from
#NAME: has_key
#PARENT: GLib.KeyFile.has_key
#COMMENT: %TRUE if @key is a part of @group_name, %FALSE otherwise
#NAME: user_data
#PARENT: GLib.PtrArray.foreach.none
#COMMENT: user data to pass to the function
#NAME: copy
#PARENT: GLib.Rand.copy
#COMMENT: the new #GRand
#NAME: seq
#PARENT: GLib.Sequence.sort_iter.none
#COMMENT: a #GSequence
#NAME: context
#PARENT: GLib.MainContext.release.none
#COMMENT: a #GMainContext
#NAME: continue
#PARENT: GLib.Timer
#COMMENT: Resumes a timer that has previously been stopped with
g_timer_stop(). g_timer_stop() must be called before using this
function.
#NAME: day
#PARENT: GLib.DateTime.new_utc.DateTime
#COMMENT: the day component of the date
#NAME: channel
#PARENT: GLib.IOChannel.set_encoding.IOStatus
#COMMENT: a #GIOChannel
#NAME: regex
#PARENT: GLib.Regex.get_max_backref.gint
#COMMENT: a #GRegex
#NAME: get_context
#PARENT: GLib.Source
#COMMENT: Gets the #GMainContext with which the source is associated.

You can call this on a source that has been destroyed, provided
that the #GMainContext it was attached to still exists (in which
case it will return that #GMainContext). In particular, you can
always call this function on the source returned from
g_main_current_source(). But calling this function on a source
whose #GMainContext has been destroyed is an error.
#NAME: fetch_named
#PARENT: GLib.MatchInfo
#COMMENT: Retrieves the text matching the capturing parentheses named @name.

If @name is a valid sub pattern name but it didn't match anything
(e.g. sub pattern "X", matching "b" against "(?P<X>a)?b")
then an empty string is returned.

The string is fetched from the string passed to the match function,
so you cannot call this function after freeing the string.
#NAME: value
#PARENT: GLib.Variant.store.none
#COMMENT: the #GVariant to store
#NAME: get_pattern
#PARENT: GLib.Regex
#COMMENT: Gets the pattern string associated with @regex, i.e. a copy of
the string passed to g_regex_new().
#NAME: read_line_string
#PARENT: GLib.IOChannel.read_line_string
#COMMENT: the status of the operation.
#NAME: main_current_source
#PARENT: GLib.main_current_source
#COMMENT: The currently firing source or %NULL.
#NAME: object_path
#PARENT: GLib.Variant.new_object_path.Variant
#COMMENT: a normal C nul-terminated string
#NAME: get_int32
#PARENT: GLib.Variant.get_int32
#COMMENT: a #gint32
#NAME: element_type
#PARENT: GLib.Variant.new_fixed_array.Variant
#COMMENT: the #GVariantType of each element
#NAME: insert
#PARENT: GLib.Node
#COMMENT: Inserts a #GNode beneath the parent at the given position.
#NAME: long_format
#PARENT: GLib.FormatSizeFlags
#COMMENT: include the exact number of bytes as part
    of the returned string.  For example, "45.6 kB (45,612 bytes)".
#NAME: set_error_literal
#PARENT: GLib
#COMMENT: Does nothing if @err is %NULL; if @err is non-%NULL, then *@err
must be %NULL. A new #GError is created and assigned to *@err.
Unlike g_set_error(), @message is not a printf()-style format string.
Use this function if @message contains text you don't have control over,
that could include printf() escape sequences.
#NAME: queue
#PARENT: GLib.Queue.push_head_link.none
#COMMENT: a #GQueue
#NAME: to_utc
#PARENT: GLib.DateTime
#COMMENT: Creates a new #GDateTime corresponding to the same instant in time as
@datetime, but in UTC.

This call is equivalent to calling g_date_time_to_timezone() with the
time zone returned by g_time_zone_new_utc().
#NAME: array
#PARENT: GLib.Array.get_element_size.guint
#COMMENT: A #GArray
#NAME: OnceStatus
#PARENT: GLib
#COMMENT: The possible statuses of a one-time initialization function
controlled by a #GOnce struct.
#NAME: regex
#PARENT: GLib.Regex.get_capture_count.gint
#COMMENT: a #GRegex
#NAME: timer
#PARENT: GLib.Timer.reset.none
#COMMENT: a #GTimer.
#NAME: spawn_close_pid
#PARENT: GLib
#COMMENT: On some platforms, notably Windows, the #GPid type represents a resource
which must be closed to prevent resource leaking. g_spawn_close_pid()
is provided for this purpose. It should be used on all platforms, even
though it doesn't do anything under UNIX.
#NAME: remove_poll
#PARENT: GLib.Source
#COMMENT: Removes a file descriptor from the set of file descriptors polled for
this source.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.
#NAME: get_max_threads
#PARENT: GLib.ThreadPool
#COMMENT: Returns the maximal number of threads for @pool.
#NAME: group_name
#PARENT: GLib.KeyFile.set_locale_string.none
#COMMENT: a group name
#NAME: string
#PARENT: GLib.strsplit.utf8
#COMMENT: a string to split
#NAME: optimize
#PARENT: GLib.RegexCompileFlags
#COMMENT: Optimize the regular expression. If the pattern will
    be used many times, then it may be worth the effort to optimize it
    to improve the speed of matches.
#NAME: filename_display_name
#PARENT: GLib.filename_display_name
#COMMENT: a newly allocated string containing
  a rendition of the filename in valid UTF-8
#NAME: utf8string
#PARENT: GLib.locale_from_utf8.utf8
#COMMENT: a UTF-8 encoded string
#NAME: str
#PARENT: GLib.utf16_to_ucs4.gunichar
#COMMENT: a UTF-16 encoded string
#NAME: push
#PARENT: GLib.MarkupParseContext
#COMMENT: Temporarily redirects markup data to a sub-parser.

This function may only be called from the start_element handler of
a #GMarkupParser. It must be matched with a corresponding call to
g_markup_parse_context_pop() in the matching end_element handler
(except in the case that the parser aborts due to an error).

All tags, text and other data between the matching tags is
redirected to the subparser given by @parser. @user_data is used
as the user_data for that parser. @user_data is also passed to the
error callback in the event that an error occurs. This includes
errors that occur in subparsers of the subparser.

The end tag matching the start tag for which this call was made is
handled by the previous parser (which is given its own user_data)
which is why g_markup_parse_context_pop() is provided to allow "one
last access" to the @user_data provided to this function. In the
case of error, the @user_data provided here is passed directly to
the error callback of the subparser and g_markup_parse_context_pop()
should not be called. In either case, if @user_data was allocated
then it ought to be freed from both of these locations.

This function is not intended to be directly called by users
interested in invoking subparsers. Instead, it is intended to be
used by the subparsers themselves to implement a higher-level
interface.

As an example, see the following implementation of a simple
parser that counts the number of tags encountered.

|[<!-- language="C" -->
typedef struct
{
  gint tag_count;
} CounterData;

static void
counter_start_element (GMarkupParseContext  *context,
                       const gchar          *element_name,
                       const gchar         **attribute_names,
                       const gchar         **attribute_values,
                       gpointer              user_data,
                       GError              **error)
{
  CounterData *data = user_data;

  data->tag_count++;
}

static void
counter_error (GMarkupParseContext *context,
               GError              *error,
               gpointer             user_data)
{
  CounterData *data = user_data;

  g_slice_free (CounterData, data);
}

static GMarkupParser counter_subparser =
{
  counter_start_element,
  NULL,
  NULL,
  NULL,
  counter_error
};
]|

In order to allow this parser to be easily used as a subparser, the
following interface is provided:

|[<!-- language="C" -->
void
start_counting (GMarkupParseContext *context)
{
  CounterData *data = g_slice_new (CounterData);

  data->tag_count = 0;
  g_markup_parse_context_push (context, &counter_subparser, data);
}

gint
end_counting (GMarkupParseContext *context)
{
  CounterData *data = g_markup_parse_context_pop (context);
  int result;

  result = data->tag_count;
  g_slice_free (CounterData, data);

  return result;
}
]|

The subparser would then be used as follows:

|[<!-- language="C" -->
static void start_element (context, element_name, ...)
{
  if (strcmp (element_name, "count-these") == 0)
    start_counting (context);

  // else, handle other tags...
}

static void end_element (context, element_name, ...)
{
  if (strcmp (element_name, "count-these") == 0)
    g_print ("Counted %d tags\n", end_counting (context));

  // else, handle other tags...
}
]|
#NAME: ascii_strdown
#PARENT: GLib
#COMMENT: Converts all upper case ASCII letters to lower case ASCII letters.
#NAME: 
#PARENT: GLib.VariantIter.next.gboolean...
#COMMENT: the arguments to unpack the value into
#NAME: seek
#PARENT: GLib.IOChannel.seek
#COMMENT: %G_IO_ERROR_NONE if the operation was successful.
#NAME: queue
#PARENT: GLib.AsyncQueue.lock.none
#COMMENT: a #GAsyncQueue
#NAME: user_data
#PARENT: GLib.ThreadPool
#COMMENT: the user data for the threads of this pool
#NAME: cuneiform
#PARENT: GLib.UnicodeScript
#COMMENT: Cuneiform
#NAME: length
#PARENT: GLib.Variant.get_strv.utf8
#COMMENT: the length of the result, or %NULL
#NAME: value
#PARENT: GLib.Variant.get_bytestring_array.utf8
#COMMENT: an array of array of bytes #GVariant ('aay')
#NAME: value
#PARENT: GLib.Variant.n_children.gsize
#COMMENT: a container #GVariant
#NAME: gujarati
#PARENT: GLib.UnicodeScript
#COMMENT: Gujarati
#NAME: mkdir_with_parents
#PARENT: GLib.mkdir_with_parents
#COMMENT: 0 if the directory already exists, or was successfully
created. Returns -1 if an error occurred, with errno set.
#NAME: queue
#PARENT: GLib.Queue.pop_nth.gpointer
#COMMENT: a #GQueue
#NAME: element_size
#PARENT: GLib.Variant.get_fixed_array.gpointer
#COMMENT: the size of each element
#NAME: 
#PARENT: GLib.test_maximized_result.none...
#COMMENT: arguments to pass to the printf() function
#NAME: date_is_leap_year
#PARENT: GLib
#COMMENT: Returns %TRUE if the year is a leap year.

For the purposes of this function, leap year is every year
divisible by 4 unless that year is divisible by 100. If it
is divisible by 100 it would be a leap year only if that year
is also divisible by 400.
#NAME: unref
#PARENT: GLib.VariantDict
#COMMENT: Decreases the reference count on @dict.

In the event that there are no more references, releases all memory
associated with the #GVariantDict.

Don't call this on stack-allocated #GVariantDict instances or bad
things will happen.
#NAME: alphabetic
#PARENT: GLib.UnicodeBreakType
#COMMENT: Ordinary Alphabetic and Symbol Characters (AL)
#NAME: new_full
#PARENT: GLib.AsyncQueue
#COMMENT: Creates a new asynchronous queue and sets up a destroy notify
function that is used to free any remaining queue items when
the queue is destroyed after the final unref.
#NAME: data
#PARENT: GLib.ByteArray.append.guint8
#COMMENT: the byte data to be added
#NAME: hash_table
#PARENT: GLib.HashTable.foreach_steal.guint
#COMMENT: a #GHashTable
#NAME: copy
#PARENT: GLib.Error.copy
#COMMENT: a new #GError
#NAME: hostname_is_ip_address
#PARENT: GLib.hostname_is_ip_address
#COMMENT: %TRUE if @hostname is an IP address
#NAME: group_not_found
#PARENT: GLib.KeyFileError
#COMMENT: a requested group was not found
#NAME: level_order
#PARENT: GLib.TraverseType
#COMMENT: is not implemented for
             [balanced binary trees][glib-Balanced-Binary-Trees].
             For [n-ary trees][glib-N-ary-Trees], it
             vists the root node first, then its children, then
             its grandchildren, and so on. Note that this is less
             efficient than the other orders.
#NAME: eval
#PARENT: GLib.Regex.replace_eval.utf8
#COMMENT: a function to call for each match
#NAME: context
#PARENT: GLib.MainContext.is_owner.gboolean
#COMMENT: a #GMainContext
#NAME: intern_string
#PARENT: GLib
#COMMENT: Returns a canonical representation for @string. Interned strings
can be compared for equality by comparing the pointers, instead of
using strcmp().
#NAME: markup_vprintf_escaped
#PARENT: GLib
#COMMENT: Formats the data in @args according to @format, escaping
all string and character arguments in the fashion
of g_markup_escape_text(). See g_markup_printf_escaped().
#NAME: format_string
#PARENT: GLib.Variant.new_va.Variant
#COMMENT: a string that is prefixed with a format string
#NAME: check_version
#PARENT: GLib.check_version
#COMMENT: %NULL if the GLib library is compatible with the
    given version, or a string describing the version mismatch.
    The returned string is owned by GLib and must not be modified
    or freed.
#NAME: lookup_key
#PARENT: GLib.hash_table_lookup_extended.gboolean
#COMMENT: the key to look up
#NAME: v_int
#PARENT: GLib.TokenValue
#COMMENT: integer value
#NAME: n
#PARENT: GLib.Queue.pop_nth.gpointer
#COMMENT: the position of the element
#NAME: sort_with_data
#PARENT: GLib.Array
#COMMENT: Like g_array_sort(), but the comparison function receives an extra
user data argument.

This is guaranteed to be a stable sort since version 2.32.

There used to be a comment here about making the sort stable by
using the addresses of the elements in the comparison function.
This did not actually work, so any such code should be removed.
#NAME: myanmar
#PARENT: GLib.UnicodeScript
#COMMENT: Myanmar
#NAME: data
#PARENT: GLib.Thread.new.Thread
#COMMENT: an argument to supply to the new thread
#NAME: get_day_of_month
#PARENT: GLib.DateTime
#COMMENT: Retrieves the day of the month represented by @datetime in the gregorian
calendar.
#NAME: length
#PARENT: GLib.KeyFile.get_double_list.gdouble
#COMMENT: the number of doubles returned
#NAME: write_unichar
#PARENT: GLib.IOChannel
#COMMENT: Writes a Unicode character to @channel.
This function cannot be called on a channel with %NULL encoding.
#NAME: key_file
#PARENT: GLib.KeyFile.set_double.none
#COMMENT: a #GKeyFile
#NAME: value
#PARENT: GLib.Variant.is_normal_form.gboolean
#COMMENT: a #GVariant instance
#NAME: list
#PARENT: GLib.List.remove_all.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: length
#PARENT: GLib.Variant.new_bytestring_array.Variant
#COMMENT: the length of @strv, or -1
#NAME: strip_context
#PARENT: GLib
#COMMENT: An auxiliary function for gettext() support (see Q_()).
#NAME: error
#PARENT: GLib.TokenType
#COMMENT: an error occurred
#NAME: string_scan
#PARENT: GLib.VariantType.string_scan
#COMMENT: %TRUE if a valid type string was found
#NAME: search
#PARENT: GLib.Sequence.search
#COMMENT: an #GSequenceIter pointing to the position where @data
    would have been inserted according to @cmp_func and @cmp_data
#NAME: user_data
#PARENT: GLib.MarkupParseContext.push.none
#COMMENT: user data to pass to #GMarkupParser functions
#NAME: variable
#PARENT: GLib.setenv.gboolean
#COMMENT: the environment variable to set, must not contain '='.
#NAME: samaritan
#PARENT: GLib.UnicodeScript
#COMMENT: Samaritan. Since 2.26
#NAME: category
#PARENT: GLib.dcgettext.utf8
#COMMENT: a locale category
#NAME: dataset_location
#PARENT: GLib.dataset_destroy.none
#COMMENT: the location identifying the dataset.
#NAME: match
#PARENT: GLib.Regex
#COMMENT: Scans for a match in string for the pattern in @regex.
The @match_options are combined with the match options specified
when the @regex structure was created, letting you have more
flexibility in reusing #GRegex structures.

A #GMatchInfo structure, used to get information on the match,
is stored in @match_info if not %NULL. Note that if @match_info
is not %NULL then it is created even if the function returns %FALSE,
i.e. you must free it regardless if regular expression actually matched.

To retrieve all the non-overlapping matches of the pattern in
string you can use g_match_info_next().

|[<!-- language="C" -->
static void
print_uppercase_words (const gchar *string)
{
  // Print all uppercase-only words.
  GRegex *regex;
  GMatchInfo *match_info;
 
  regex = g_regex_new ("[A-Z]+", 0, 0, NULL);
  g_regex_match (regex, string, 0, &match_info);
  while (g_match_info_matches (match_info))
    {
      gchar *word = g_match_info_fetch (match_info, 0);
      g_print ("Found: %s\n", word);
      g_free (word);
      g_match_info_next (match_info, NULL);
    }
  g_match_info_free (match_info);
  g_regex_unref (regex);
}
]|

@string is not copied and is used in #GMatchInfo internally. If
you use any #GMatchInfo method (except g_match_info_free()) after
freeing or modifying @string then the behaviour is undefined.
#NAME: function
#PARENT: GLib.idle_add.guint
#COMMENT: function to call
#NAME: reverse
#PARENT: GLib.List.reverse
#COMMENT: the start of the reversed #GList
#NAME: value
#PARENT: GLib.KeyFile.set_double.none
#COMMENT: an double value
#NAME: compare
#PARENT: GLib.SequenceIter
#COMMENT: Returns a negative number if @a comes before @b, 0 if they are equal,
and a positive number if @a comes after @b.

The @a and @b iterators must point into the same sequence.
#NAME: new
#PARENT: GLib.VariantBuilder.new
#COMMENT: a #GVariantBuilder
#NAME: channel
#PARENT: GLib.IOChannel.get_close_on_unref.gboolean
#COMMENT: a #GIOChannel.
#NAME: hash_table
#PARENT: GLib.hash_table_size.guint
#COMMENT: a #GHashTable
#NAME: data
#PARENT: GLib.PtrArray.insert.none
#COMMENT: the pointer to add.
#NAME: pid
#PARENT: GLib.spawn_close_pid.none
#COMMENT: The process reference to close
#NAME: hmac
#PARENT: GLib.Hmac.ref.Hmac
#COMMENT: a valid #GHmac
#NAME: type_string
#PARENT: GLib.variant_type_string_is_valid.gboolean
#COMMENT: a pointer to any string
#NAME: length
#PARENT: GLib.Variant.dup_strv.utf8
#COMMENT: the length of the result, or %NULL
#NAME: key
#PARENT: GLib.VariantDict.lookup_value.Variant
#COMMENT: the key to lookup in the dictionary
#NAME: string
#PARENT: GLib.OptionArg
#COMMENT: The option takes a string argument.
#NAME: value
#PARENT: GLib.Variant.is_of_type.gboolean
#COMMENT: a #GVariant instance
#NAME: get_uint64
#PARENT: GLib.KeyFile
#COMMENT: Returns the value associated with @key under @group_name as an unsigned
64-bit integer. This is similar to g_key_file_get_integer() but can return
large positive results without truncation.
#NAME: GNUC_PRETTY_FUNCTION
#PARENT: GLib
#COMMENT: Expands to "" on all modern compilers, and to __PRETTY_FUNCTION__
on gcc version 2.x. Don't use it.
#NAME: format_size
#PARENT: GLib
#COMMENT: Formats a size (for example the size of a file) into a human readable
string.  Sizes are rounded to the nearest size prefix (kB, MB, GB)
and are displayed rounded to the nearest tenth. E.g. the file size
3292528 bytes will be converted into the string "3.2 MB".

The prefix units base is 1000 (i.e. 1 kB is 1000 bytes).

This string should be freed with g_free() when not needed any longer.

See g_format_size_full() for more options about how the size might be
formatted.
#NAME: thread_pool_get_num_unused_threads
#PARENT: GLib.thread_pool_get_num_unused_threads
#COMMENT: the number of currently unused threads
#NAME: rand_
#PARENT: GLib.Rand.double.gdouble
#COMMENT: a #GRand
#NAME: set_translate_func
#PARENT: GLib.OptionContext
#COMMENT: Sets the function which is used to translate the contexts
user-visible strings, for `--help` output. If @func is %NULL,
strings are not translated.

Note that option groups have their own translation functions,
this function only affects the @parameter_string (see g_option_context_new()),
the summary (see g_option_context_set_summary()) and the description
(see g_option_context_set_description()).

If you are using gettext(), you only need to set the translation
domain, see g_option_context_set_translation_domain().
#NAME: io
#PARENT: GLib.FileError
#COMMENT: Input/output error; usually used for physical read
   or write errors. i.e. the disk or other physical device hardware
   is returning errors.
#NAME: atomic_int_dec_and_test
#PARENT: GLib.atomic_int_dec_and_test
#COMMENT: %TRUE if the resultant value is zero
#NAME: get_digest
#PARENT: GLib.Checksum
#COMMENT: Gets the digest from @checksum as a raw binary vector and places it
into @buffer. The size of the digest depends on the type of checksum.

Once this function has been called, the #GChecksum is closed and can
no longer be updated with g_checksum_update().
#NAME: set
#PARENT: GLib.SeekType
#COMMENT: the start of the file.
#NAME: get_string_number
#PARENT: GLib.Regex
#COMMENT: Retrieves the number of the subexpression named @name.
#NAME: uri
#PARENT: GLib.BookmarkFile.remove_application.gboolean
#COMMENT: a valid URI
#NAME: remove
#PARENT: GLib.Queue.remove
#COMMENT: %TRUE if @data was found and removed from @queue
#NAME: signum
#PARENT: GLib.unix_signal_source_new.Source
#COMMENT: A signal number
#NAME: source
#PARENT: GLib.Source.get_ready_time.gint64
#COMMENT: a #GSource
#NAME: hook
#PARENT: GLib.HookMarshaller.none
#COMMENT: a #GHook
#NAME: is_maybe
#PARENT: GLib.VariantType.is_maybe
#COMMENT: %TRUE if @type is a maybe type

Since 2.24
#NAME: ufds
#PARENT: GLib.PollFunc.gint
#COMMENT: an array of #GPollFD elements
#NAME: parent
#PARENT: GLib.Node
#COMMENT: points to the parent of the #GNode, or is %NULL if the
         #GNode is the root of the tree.
#NAME: unicode_canonical_decomposition
#PARENT: GLib
#COMMENT: Computes the canonical decomposition of a Unicode character.
#NAME: date
#PARENT: GLib.Date.set_time.none
#COMMENT: a #GDate.
#NAME: remove_comment
#PARENT: GLib.KeyFile
#COMMENT: Removes a comment above @key from @group_name.
If @key is %NULL then @comment will be removed above @group_name.
If both @key and @group_name are %NULL, then @comment will
be removed above the first group in the file.
#NAME: ref
#PARENT: GLib.MatchInfo
#COMMENT: Increases reference count of @match_info by 1.
#NAME: remove_key
#PARENT: GLib.KeyFile
#COMMENT: Removes @key in @group_name from the key file.
#NAME: run
#PARENT: GLib.MainLoop
#COMMENT: Runs a main loop until g_main_loop_quit() is called on the loop.
If this is called for the thread of the loop's #GMainContext,
it will process events from the loop, otherwise it will
simply wait.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.has_item.gboolean
#COMMENT: a #GBookmarkFile
#NAME: environ_getenv
#PARENT: GLib
#COMMENT: Returns the value of the environment variable @variable in the
provided list @envp.
#NAME: queue
#PARENT: GLib.AsyncQueue.unref_and_unlock.none
#COMMENT: a #GAsyncQueue
#NAME: peek_head
#PARENT: GLib.Queue
#COMMENT: Returns the first element of the queue.
#NAME: items_read
#PARENT: GLib.utf16_to_utf8.utf8
#COMMENT: location to store number of words read,
    or %NULL. If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will be
    returned in case @str contains a trailing partial character. If
    an error occurs then the index of the invalid input is stored here.
#NAME: delete_link
#PARENT: GLib.SList.delete_link
#COMMENT: the new head of @list
#NAME: key
#PARENT: GLib.KeyFile.get_boolean_list.gboolean
#COMMENT: a key
#NAME: data
#PARENT: GLib.Queue.find.gpointer
#COMMENT: data to find
#NAME: array
#PARENT: GLib.Array.free.utf8
#COMMENT: a #GArray
#NAME: get_integer
#PARENT: GLib.KeyFile
#COMMENT: Returns the value associated with @key under @group_name as an
integer.

If @key cannot be found then 0 is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
with @key cannot be interpreted as an integer then 0 is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
#NAME: file
#PARENT: GLib.MappedFile.ref.MappedFile
#COMMENT: a #GMappedFile
#NAME: test_add_func
#PARENT: GLib
#COMMENT: Create a new test case, similar to g_test_create_case(). However
the test is assumed to use no fixture, and test suites are automatically
created on the fly and added to the root fixture, based on the
slash-separated portions of @testpath.

If @testpath includes the component "subprocess" anywhere in it,
the test will be skipped by default, and only run if explicitly
required via the `-p` command-line option or g_test_trap_subprocess().
#NAME: new
#PARENT: GLib.PtrArray.new
#COMMENT: the new #GPtrArray
#NAME: key_len
#PARENT: GLib.compute_hmac_for_string.utf8
#COMMENT: the length of the key
#NAME: new
#PARENT: GLib.Bytes
#COMMENT: Creates a new #GBytes from @data.

@data is copied. If @size is 0, @data may be %NULL.
#NAME: next_line
#PARENT: GLib.UnicodeBreakType
#COMMENT: Next Line (NL)
#NAME: set_ignore_unknown_options
#PARENT: GLib.OptionContext
#COMMENT: Sets whether to ignore unknown options or not. If an argument is
ignored, it is left in the @argv array after parsing. By default,
g_option_context_parse() treats unknown options as error.

This setting does not affect non-option arguments (i.e. arguments
which don't start with a dash). But note that GOption cannot reliably
determine whether a non-option belongs to a preceding unknown option.
#NAME: free_segment
#PARENT: GLib.ByteArray.free.guint8
#COMMENT: if %TRUE the actual byte data is freed as well
#NAME: args
#PARENT: GLib.markup_vprintf_escaped.utf8
#COMMENT: variable argument list, similar to vprintf()
#NAME: list
#PARENT: GLib.SList.copy_deep.gpointer
#COMMENT: a #GSList
#NAME: array
#PARENT: GLib.PtrArray.remove.gboolean
#COMMENT: a #GPtrArray
#NAME: set_time_val
#PARENT: GLib.Date
#COMMENT: Sets the value of a date from a #GTimeVal value.  Note that the
@tv_usec member is ignored, because #GDate can't make use of the
additional precision.

The time to date conversion is done using the user's current timezone.
#NAME: length
#PARENT: GLib.regex_escape_nul.utf8
#COMMENT: the length of @string
#NAME: date
#PARENT: GLib.Date.subtract_years.none
#COMMENT: a #GDate to decrement
#NAME: Node
#PARENT: GLib
#COMMENT: The #GNode struct represents one node in a [n-ary tree][glib-N-ary-Trees].
#NAME: offset
#PARENT: GLib.IOChannel.seek_position.IOStatus
#COMMENT: The offset in bytes from the position specified by @type
#NAME: context
#PARENT: GLib.MainContext.pending.gboolean
#COMMENT: a #GMainContext (if %NULL, the default context will be used)
#NAME: hebrew_letter
#PARENT: GLib.UnicodeBreakType
#COMMENT: Hebrew Letter (HL). Since: 2.32
#NAME: intern_static_string
#PARENT: GLib.intern_static_string
#COMMENT: a canonical representation for the string
#NAME: string
#PARENT: GLib.String.vprintf.none
#COMMENT: a #GString
#NAME: thechar
#PARENT: GLib.IOChannel.read_unichar.IOStatus
#COMMENT: a location to return a character
#NAME: group_name
#PARENT: GLib.KeyFile.set_integer.none
#COMMENT: a group name
#NAME: mode
#PARENT: GLib.utf8_normalize.utf8
#COMMENT: the type of normalization to perform.
#NAME: to_timezone
#PARENT: GLib.DateTime.to_timezone
#COMMENT: a new #GDateTime, or %NULL
#NAME: match_info
#PARENT: GLib.MatchInfo.matches.gboolean
#COMMENT: a #GMatchInfo structure
#NAME: missing_subpattern_name
#PARENT: GLib.RegexError
#COMMENT: Missing subpattern name. Since: 2.34
#NAME: key
#PARENT: GLib.hash_table_contains.gboolean
#COMMENT: a key to check
#NAME: new_va
#PARENT: GLib.Variant
#COMMENT: This function is intended to be used by libraries based on
#GVariant that want to provide g_variant_new()-like functionality
to their users.

The API is more general than g_variant_new() to allow a wider range
of possible uses.

@format_string must still point to a valid format string, but it only
needs to be nul-terminated if @endptr is %NULL.  If @endptr is
non-%NULL then it is updated to point to the first character past the
end of the format string.

@app is a pointer to a #va_list.  The arguments, according to
@format_string, are collected from this #va_list and the list is left
pointing to the argument following the last.

Note that the arguments in @app must be of the correct width for their
types specified in @format_string when collected into the #va_list.
See the [GVariant varargs documentation][gvariant-varargs.

These two generalisations allow mixing of multiple calls to
g_variant_new_va() and g_variant_get_va() within a single actual
varargs call by the user.

The return value will be floating if it was a newly created GVariant
instance (for example, if the format string was "(ii)").  In the case
that the format_string was '*', '?', 'r', or a format starting with
'@' then the collected #GVariant pointer will be returned unmodified,
without adding any additional references.

In order to behave correctly in all cases it is necessary for the
calling function to g_variant_ref_sink() the return result before
returning control to the user that originally provided the pointer.
At this point, the caller will have their own full reference to the
result.  This can also be done by adding the result to a container,
or by passing it to another g_variant_new() call.
#NAME: set_line_term
#PARENT: GLib.IOChannel
#COMMENT: This sets the string that #GIOChannel uses to determine
where in the file a line break occurs.
#NAME: new_signature
#PARENT: GLib.Variant.new_signature
#COMMENT: a floating reference to a new signature #GVariant instance
#NAME: NormalizeMode
#PARENT: GLib
#COMMENT: Defines how a Unicode string is transformed in a canonical
form, standardizing such issues as whether a character with
an accent is represented as a base character and combining
accent or as a single precomposed character. Unicode strings
should generally be normalized before comparing them.
#NAME: hash_table
#PARENT: GLib.hash_table_steal_all.none
#COMMENT: a #GHashTable
#NAME: HashTable
#PARENT: GLib
#COMMENT: The #GHashTable struct is an opaque data structure to represent a
[Hash Table][glib-Hash-Tables]. It should only be accessed via the
following functions.
#NAME: dotall
#PARENT: GLib.RegexCompileFlags
#COMMENT: A dot metacharater (".") in the pattern matches all
    characters, including newlines. Without it, newlines are excluded.
    This option can be changed within a pattern by a ("?s") option setting.
#NAME: context
#PARENT: GLib.OptionContext.set_summary.none
#COMMENT: a #GOptionContext
#NAME: surrogate
#PARENT: GLib.UnicodeType
#COMMENT: General category "Other, Surrogate" (Cs)
#NAME: new_bytestring
#PARENT: GLib.Variant
#COMMENT: Creates an array-of-bytes #GVariant with the contents of @string.
This function is just like g_variant_new_string() except that the
string need not be valid UTF-8.

The nul terminator character at the end of the string is stored in
the array.
#NAME: charsets
#PARENT: GLib.get_filename_charsets.gboolean
#COMMENT: return location for the %NULL-terminated list of encoding names
#NAME: none
#PARENT: GLib.IOError
#COMMENT: no error
#NAME: log_level
#PARENT: GLib.logv.none
#COMMENT: the log level
#NAME: child
#PARENT: GLib.Variant.new_maybe.Variant
#COMMENT: the child value, or %NULL
#NAME: new_literal
#PARENT: GLib.Error
#COMMENT: Creates a new #GError; unlike g_error_new(), @message is
not a printf()-style format string. Use this function if
@message contains text you don't have control over,
that could include printf() escape sequences.
#NAME: unichar_isdefined
#PARENT: GLib.unichar_isdefined
#COMMENT: %TRUE if the character has an assigned value
#NAME: compare_ids
#PARENT: GLib.Hook.compare_ids
#COMMENT: a value <= 0 if the id of @sibling is >= the id of @new_hook
#NAME: retval
#PARENT: GLib.Thread.exit.none
#COMMENT: the return value of this thread
#NAME: arg
#PARENT: GLib.OptionEntry
#COMMENT: The type of the option, as a #GOptionArg
#NAME: flags
#PARENT: GLib.Node.traverse.none
#COMMENT: which types of children are to be visited, one of
    %G_TRAVERSE_ALL, %G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES
#NAME: flags
#PARENT: GLib.MarkupParseContext.new.MarkupParseContext
#COMMENT: one or more #GMarkupParseFlags
#NAME: key
#PARENT: GLib.datalist_get_data.gpointer
#COMMENT: the string identifying a data element.
#NAME: connect_punctuation
#PARENT: GLib.UnicodeType
#COMMENT: General category "Punctuation, Connector" (Pc)
#NAME: scope_add_symbol
#PARENT: GLib.Scanner
#COMMENT: Adds a symbol to the given scope.
#NAME: get_string_list
#PARENT: GLib.KeyFile
#COMMENT: Returns the values associated with @key under @group_name.

In the event the key cannot be found, %NULL is returned and
@error is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the @group_name cannot be found, %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
#NAME: self
#PARENT: GLib.Thread
#COMMENT: This function returns the #GThread corresponding to the
current thread. Note that this function does not increase
the reference count of the returned struct.

This function will return a #GThread even for threads that
were not created by GLib (i.e. those created by other threading
APIs). This may be useful for thread identification purposes
(i.e. comparisons) but you must not use GLib functions (such
as g_thread_join()) on these threads.
#NAME: strv_length
#PARENT: GLib
#COMMENT: Returns the length of the given %NULL-terminated
string array @str_array.
#NAME: date_valid_month
#PARENT: GLib
#COMMENT: Returns %TRUE if the month value is valid. The 12 #GDateMonth
enumeration values are the only valid months.
#NAME: cur_value
#PARENT: GLib.Scanner.cur_value
#COMMENT: the current token value
#NAME: latin
#PARENT: GLib.UnicodeScript
#COMMENT: Latin
#NAME: atomic_int_dec_and_test
#PARENT: GLib
#COMMENT: Decrements the value of @atomic by 1.

Think of this operation as an atomic version of
`{ *atomic -= 1; return (*atomic == 0); }`.

This call acts as a full compiler and hardware memory barrier.
#NAME: dpgettext
#PARENT: GLib.dpgettext
#COMMENT: The translated string
#NAME: seed_length
#PARENT: GLib.Rand.set_seed_array.none
#COMMENT: length of array
#NAME: data
#PARENT: GLib.Bytes.new.Bytes
#COMMENT: 
       the data to be used for the bytes
#NAME: access
#PARENT: GLib
#COMMENT: A wrapper for the POSIX access() function. This function is used to
test a pathname for one or several of read, write or execute
permissions, or just existence.

On Windows, the file protection mechanism is not at all POSIX-like,
and the underlying function in the C library only checks the
FAT-style READONLY attribute, and does not look at the ACL of a
file at all. This function is this in practise almost useless on
Windows. Software that needs to handle file permissions on Windows
more exactly should use the Win32 API.

See your C library manual for more details about access().
#NAME: datetime
#PARENT: GLib.DateTime.hash.guint
#COMMENT: a #GDateTime
#NAME: get_uint32
#PARENT: GLib.Variant.get_uint32
#COMMENT: a #guint32
#NAME: postfix
#PARENT: GLib.UnicodeBreakType
#COMMENT: Postfix (Numeric) (PO)
#NAME: push
#PARENT: GLib.ThreadPool
#COMMENT: Inserts @data into the list of tasks to be executed by @pool.

When the number of currently running threads is lower than the
maximal allowed number of threads, a new thread is started (or
reused) with the properties given to g_thread_pool_new().
Otherwise, @data stays in the queue until a thread in this pool
finishes its previous task and processes @data.

@error can be %NULL to ignore errors, or non-%NULL to report
errors. An error can only occur when a new thread couldn't be
created. In that case @data is simply appended to the queue of
work to do.

Before version 2.32, this function did not return a success status.
#NAME: queue
#PARENT: GLib.Queue.peek_nth.gpointer
#COMMENT: a #GQueue
#NAME: cherokee
#PARENT: GLib.UnicodeScript
#COMMENT: Cherokee
#NAME: base64_encode_step
#PARENT: GLib
#COMMENT: Incrementally encode a sequence of binary data into its Base-64 stringified
representation. By calling this function multiple times you can convert
data in chunks to avoid having to have the full encoded data in memory.

When all of the data has been converted you must call
g_base64_encode_close() to flush the saved state.

The output buffer must be large enough to fit all the data that will
be written to it. Due to the way base64 encodes you will need
at least: (@len / 3 + 1) * 4 + 4 bytes (+ 4 may be needed in case of
non-zero state). If you enable line-breaking you will need at least:
((@len / 3 + 1) * 4 + 4) / 72 + 1 bytes of extra space.

@break_lines is typically used when putting base64-encoded data in emails.
It breaks the lines at 72 columns instead of putting all of the text on
the same line. This avoids problems with long lines in the email system.
Note however that it breaks the lines with `LF` characters, not
`CR LF` sequences, so the result cannot be passed directly to SMTP
or certain other protocols.
#NAME: checksum_type
#PARENT: GLib.Checksum.type_get_length.gssize
#COMMENT: a #GChecksumType
#NAME: string
#PARENT: GLib.String.append_vprintf.none
#COMMENT: a #GString
#NAME: to_local
#PARENT: GLib.DateTime
#COMMENT: Creates a new #GDateTime corresponding to the same instant in time as
@datetime, but in the local time zone.

This call is equivalent to calling g_date_time_to_timezone() with the
time zone returned by g_time_zone_new_local().
#NAME: stpcpy
#PARENT: GLib.stpcpy
#COMMENT: a pointer to trailing nul byte.
#NAME: value
#PARENT: GLib.Variant.new_variant.Variant
#COMMENT: a #GVariant instance
#NAME: get
#PARENT: GLib.Hook
#COMMENT: Returns the #GHook with the given id, or %NULL if it is not found.
#NAME: KEY_FILE_DESKTOP_KEY_GENERIC_NAME
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the generic name of the desktop entry.
#NAME: slice_free1
#PARENT: GLib
#COMMENT: Frees a block of memory.

The memory must have been allocated via g_slice_alloc() or
g_slice_alloc0() and the @block_size has to match the size
specified upon allocation. Note that the exact release behaviour
can be changed with the [`G_DEBUG=gc-friendly`][G_DEBUG] environment
variable, also see [`G_SLICE`][G_SLICE] for related debugging options.
#NAME: user_data
#PARENT: GLib.unix_signal_add.guint
#COMMENT: Data for @handler
#NAME: max_priority
#PARENT: GLib.MainContext.check.gint
#COMMENT: the maximum numerical priority of sources to check
#NAME: try_pop
#PARENT: GLib.AsyncQueue.try_pop
#COMMENT: data from the queue or %NULL, when no data is
    available immediately.
#NAME: thread_pool_get_max_idle_time
#PARENT: GLib.thread_pool_get_max_idle_time
#COMMENT: the maximum @interval (milliseconds) to wait
    for new tasks in the thread pool before stopping the
    thread
#NAME: date
#PARENT: GLib.Date.set_year.none
#COMMENT: a #GDate
#NAME: date
#PARENT: GLib.Date.is_last_of_month.gboolean
#COMMENT: a #GDate to check
#NAME: summary
#PARENT: GLib.OptionContext.set_summary.none
#COMMENT: a string to be shown in `--help` output
 before the list of options, or %NULL
#NAME: nth
#PARENT: GLib.List.nth
#COMMENT: the element, or %NULL if the position is off
    the end of the #GList
#NAME: 
#PARENT: GLib.Scanner.warn.none...
#COMMENT: the parameters to insert into the format string
#NAME: new_julian
#PARENT: GLib.Date
#COMMENT: Like g_date_new(), but also sets the value of the date. Assuming the
Julian day number you pass in is valid (greater than 0, less than an
unreasonably large number), the returned date will be valid.
#NAME: length_unlocked
#PARENT: GLib.AsyncQueue
#COMMENT: Returns the length of the queue.

Actually this function returns the number of data items in
the queue minus the number of waiting threads, so a negative
value means waiting threads, and a positive value means available
entries in the @queue. A return value of 0 could mean n entries
in the queue and n threads waiting. This can happen due to locking
of the queue or due to scheduling.

This function must be called while holding the @queue's lock.
#NAME: retval
#PARENT: GLib.thread_exit.none
#COMMENT: the return value of this thread
#NAME: TokenType
#PARENT: GLib
#COMMENT: The possible types of token returned from each
g_scanner_get_next_token() call.
#NAME: bytes_read
#PARENT: GLib.filename_from_utf8.guint8
#COMMENT: location to store the number of bytes in
                the input string that were successfully converted, or %NULL.
                Even if the conversion was successful, this may be
                less than @len if there were partial characters
                at the end of the input. If the error
                #G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
                stored will the byte offset after the last valid
                input sequence.
#NAME: signum
#PARENT: GLib.strsignal.utf8
#COMMENT: the signal number. See the `signal` documentation
#NAME: HookList
#PARENT: GLib
#COMMENT: The #GHookList struct represents a list of hook functions.
#NAME: mandaic
#PARENT: GLib.UnicodeScript
#COMMENT: Mandaic. Since 2.28
#NAME: search
#PARENT: GLib.Tree
#COMMENT: Searches a #GTree using @search_func.

The @search_func is called with a pointer to the key of a key/value
pair in the tree, and the passed in @user_data. If @search_func returns
0 for a key/value pair, then the corresponding value is returned as
the result of g_tree_search(). If @search_func returns -1, searching
will proceed among the key/value pairs that have a smaller key; if
@search_func returns 1, searching will proceed among the key/value
pairs that have a larger key.
#NAME: input_text
#PARENT: GLib.Scanner
#COMMENT: Prepares to scan a text buffer.
#NAME: n_block_bytes
#PARENT: GLib.try_malloc0_n.gpointer
#COMMENT: the size of each block in bytes
#NAME: data
#PARENT: GLib.Queue.insert_before.none
#COMMENT: the data to insert
#NAME: get_max_unused_threads
#PARENT: GLib.ThreadPool
#COMMENT: Returns the maximal allowed number of unused threads.
#NAME: new_printf
#PARENT: GLib.Variant.new_printf
#COMMENT: a floating reference to a new string
  #GVariant instance
#NAME: notify
#PARENT: GLib.MainContext.invoke_full.none
#COMMENT: a function to call when @data is no longer in use, or %NULL.
#NAME: datalist_get_data
#PARENT: GLib
#COMMENT: Gets a data element, using its string identifier. This is slower than
g_datalist_id_get_data() because it compares strings.
#NAME: get_is_private
#PARENT: GLib.BookmarkFile
#COMMENT: Gets whether the private flag of the bookmark for @uri is set.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
event that the private flag cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_INVALID_VALUE.
#NAME: len
#PARENT: GLib.utf8_strup.utf8
#COMMENT: length of @str, in bytes, or -1 if @str is nul-terminated.
#NAME: set_title
#PARENT: GLib.BookmarkFile
#COMMENT: Sets @title as the title of the bookmark for @uri inside the
bookmark file @bookmark.

If @uri is %NULL, the title of @bookmark is set.

If a bookmark for @uri cannot be found then it is created.
#NAME: begin
#PARENT: GLib.Sequence.foreach_range.none
#COMMENT: a #GSequenceIter
#NAME: lydian
#PARENT: GLib.UnicodeScript
#COMMENT: Lydian. Since 2.16.3
#NAME: group_name
#PARENT: GLib.KeyFile.get_locale_string_list.utf8
#COMMENT: a group name
#NAME: key
#PARENT: GLib.KeyFile.get_string.utf8
#COMMENT: a key
#NAME: code
#PARENT: GLib.set_error.none
#COMMENT: error code
#NAME: len
#PARENT: GLib.utf8_collate_key.utf8
#COMMENT: length of @str, in bytes, or -1 if @str is nul-terminated.
#NAME: len
#PARENT: GLib.base64_encode_step.gsize
#COMMENT: the length of @in
#NAME: n_days
#PARENT: GLib.Date.add_days.none
#COMMENT: number of days to move the date forward
#NAME: context
#PARENT: GLib.MainContext.unref.none
#COMMENT: a #GMainContext
#NAME: day
#PARENT: GLib.Date.valid_dmy.gboolean
#COMMENT: day
#NAME: ready_time
#PARENT: GLib.Source.set_ready_time.none
#COMMENT: the monotonic time at which the source will be ready,
             0 for "immediately", -1 for "never"
#NAME: len
#PARENT: GLib.utf8_strchr.utf8
#COMMENT: the maximum length of @p
#NAME: to_timeval
#PARENT: GLib.DateTime.to_timeval
#COMMENT: %TRUE if successful, else %FALSE
#NAME: group
#PARENT: GLib.OptionGroup.add_entries.none
#COMMENT: a #GOptionGroup
#NAME: str_has_suffix
#PARENT: GLib.str_has_suffix
#COMMENT: %TRUE if @str end with @suffix, %FALSE otherwise.
#NAME: hash_table
#PARENT: GLib.HashTable.lookup.gpointer
#COMMENT: a #GHashTable
#NAME: data
#PARENT: GLib.OptionErrorFunc.none
#COMMENT: User data added to the #GOptionGroup containing the option when it
 was created with g_option_group_new()
#NAME: group_name
#PARENT: GLib.KeyFile.set_string_list.none
#COMMENT: a group name
#NAME: match_options
#PARENT: GLib.regex_split_simple.utf8
#COMMENT: match options, or 0
#NAME: haystack
#PARENT: GLib.strstr_len.utf8
#COMMENT: a string
#NAME: context
#PARENT: GLib.MainContext.find_source_by_funcs_user_data.Source
#COMMENT: a #GMainContext (if %NULL, the default context will be used).
#NAME: seconds
#PARENT: GLib.DateTime.add_seconds.DateTime
#COMMENT: the number of seconds to add
#NAME: source
#PARENT: GLib.Source.set_callback.none
#COMMENT: the source
#NAME: HookCheckMarshaller
#PARENT: GLib.HookCheckMarshaller
#COMMENT: %FALSE if @hook should be destroyed
#NAME: loop
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `ELOOP`
#NAME: str_array
#PARENT: GLib.strjoinv.utf8
#COMMENT: a %NULL-terminated array of strings to join
#NAME: len
#PARENT: GLib.ByteArray
#COMMENT: the number of elements in the #GByteArray
#NAME: n_blocks
#PARENT: GLib.malloc0_n.gpointer
#COMMENT: the number of blocks to allocate
#NAME: value
#PARENT: GLib.Variant.get_string.utf8
#COMMENT: a string #GVariant instance
#NAME: strescape
#PARENT: GLib.strescape
#COMMENT: a newly-allocated copy of @source with certain
    characters escaped. See above.
#NAME: datetime
#PARENT: GLib.DateTime.unref.none
#COMMENT: a #GDateTime
#NAME: clear
#PARENT: GLib.VariantBuilder
#COMMENT: Releases all memory associated with a #GVariantBuilder without
freeing the #GVariantBuilder structure itself.

It typically only makes sense to do this on a stack-allocated
#GVariantBuilder if you want to abort building the value part-way
through.  This function need not be called if you call
g_variant_builder_end() and it also doesn't need to be called on
builders allocated with g_variant_builder_new (see
g_variant_builder_unref() for that).

This function leaves the #GVariantBuilder structure set to all-zeros.
It is valid to call this function on either an initialised
#GVariantBuilder or one that is set to all-zeros but it is not valid
to call this function on uninitialised memory.
#NAME: v
#PARENT: GLib.str_hash.guint
#COMMENT: a string key
#NAME: strconcat
#PARENT: GLib
#COMMENT: Concatenates all of the given strings into one long string. The
returned string should be freed with g_free() when no longer needed.

The variable argument list must end with %NULL. If you forget the %NULL,
g_strconcat() will start appending random memory junk to your string.

Note that this function is usually not the right function to use to
assemble a translated message from pieces, since proper translation
often requires the pieces to be reordered.
#NAME: hook_insert_before
#PARENT: GLib
#COMMENT: Inserts a #GHook into a #GHookList, before a given #GHook.
#NAME: n_block_bytes
#PARENT: GLib.realloc_n.gpointer
#COMMENT: the size of each block in bytes
#NAME: endptr
#PARENT: GLib.Variant.parse.Variant
#COMMENT: a location to store the end pointer, or %NULL
#NAME: key
#PARENT: GLib.hash_table_add.gboolean
#COMMENT: a key to insert
#NAME: unichar_tolower
#PARENT: GLib.unichar_tolower
#COMMENT: the result of converting @c to lower case.
              If @c is not an upperlower or titlecase character,
              or has no lowercase equivalent @c is returned unchanged.
#NAME: RWLock
#PARENT: GLib
#COMMENT: The GRWLock struct is an opaque data structure to represent a
reader-writer lock. It is similar to a #GMutex in that it allows
multiple threads to coordinate access to a shared resource.

The difference to a mutex is that a reader-writer lock discriminates
between read-only ('reader') and full ('writer') access. While only
one thread at a time is allowed write access (by holding the 'writer'
lock via g_rw_lock_writer_lock()), multiple threads can gain
simultaneous read-only access (by holding the 'reader' lock via
g_rw_lock_reader_lock()).

Here is an example for an array with access functions:
|[<!-- language="C" -->
  GRWLock lock;
  GPtrArray *array;

  gpointer
  my_array_get (guint index)
  {
    gpointer retval = NULL;

    if (!array)
      return NULL;

    g_rw_lock_reader_lock (&lock);
    if (index < array->len)
      retval = g_ptr_array_index (array, index);
    g_rw_lock_reader_unlock (&lock);

    return retval;
  }

  void
  my_array_set (guint index, gpointer data)
  {
    g_rw_lock_writer_lock (&lock);

    if (!array)
      array = g_ptr_array_new ();

    if (index >= array->len)
      g_ptr_array_set_size (array, index+1);
    g_ptr_array_index (array, index) = data;

    g_rw_lock_writer_unlock (&lock);
  }
 ]|
This example shows an array which can be accessed by many readers
(the my_array_get() function) simultaneously, whereas the writers
(the my_array_set() function) will only be allowed one at a time
and only if no readers currently access the array. This is because
of the potentially dangerous resizing of the array. Using these
functions is fully multi-thread safe now.

If a #GRWLock is allocated in static storage then it can be used
without initialisation.  Otherwise, you should call
g_rw_lock_init() on it and g_rw_lock_clear() when done.

A GRWLock should only be accessed with the g_rw_lock_ functions.
#NAME: begin
#PARENT: GLib.Sequence.range_get_midpoint.SequenceIter
#COMMENT: a #GSequenceIter
#NAME: 
#PARENT: GLib.test_init.none...
#COMMENT: %NULL-terminated list of special options. Currently the only
      defined option is `"no_g_set_prgname"`, which
      will cause g_test_init() to not call g_set_prgname().
#NAME: str
#PARENT: GLib.ascii_strdown.utf8
#COMMENT: a string
#NAME: value
#PARENT: GLib.DebugKey
#COMMENT: the flag
#NAME: length
#PARENT: GLib.compute_hmac_for_string.utf8
#COMMENT: the length of the string, or -1 if the string is nul-terminated
#NAME: group_name
#PARENT: GLib.KeyFile.has_group.gboolean
#COMMENT: a group name
#NAME: hook
#PARENT: GLib.HookFinalizeFunc.none
#COMMENT: the hook in @hook_list that gets finalized
#NAME: group_name
#PARENT: GLib.KeyFile.set_double_list.none
#COMMENT: a group name
#NAME: none
#PARENT: GLib.OptionArg
#COMMENT: No extra argument. This is useful for simple flags.
#NAME: is_regular
#PARENT: GLib.FileTest
#COMMENT: %TRUE if the file is a regular file
    (not a directory). Note that this test will also return %TRUE
    if the tested file is a symlink to a regular file.
#NAME: VariantBuilder
#PARENT: GLib
#COMMENT: A utility type for constructing container-type #GVariant instances.

This is an opaque structure and may only be accessed using the
following functions.

#GVariantBuilder is not threadsafe in any way.  Do not attempt to
access it from more than one thread.
#NAME: msg
#PARENT: GLib.test_incomplete.none
#COMMENT: explanation
#NAME: copy_deep
#PARENT: GLib.Node.copy_deep
#COMMENT: a new #GNode containing copies of the data in @node.
#NAME: terminator_pos
#PARENT: GLib.IOChannel.read_line_string.IOStatus
#COMMENT: location to store position of line terminator, or %NULL
#NAME: get_tmp_dir
#PARENT: GLib
#COMMENT: Gets the directory to use for temporary files.

On UNIX, this is taken from the `TMPDIR` environment variable.
If the variable is not set, `P_tmpdir` is
used, as defined by the system C library. Failing that, a
hard-coded default of "/tmp" is returned.

On Windows, the `TEMP` environment variable is used, with the
root directory of the Windows installation (eg: "C:\") used
as a default.

The encoding of the returned string is system-defined. On Windows,
it is always UTF-8. The return value is never %NULL or the empty
string.
#NAME: try_malloc_n
#PARENT: GLib
#COMMENT: This function is similar to g_try_malloc(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.
#NAME: datalist
#PARENT: GLib.datalist_foreach.none
#COMMENT: a datalist.
#NAME: normal
#PARENT: GLib.IOStatus
#COMMENT: Success.
#NAME: next_value
#PARENT: GLib.VariantIter.next_value
#COMMENT: a #GVariant, or %NULL
#NAME: compare_func
#PARENT: GLib.Array.sort_with_data.none
#COMMENT: comparison function
#NAME: hook_list
#PARENT: GLib.HookList.invoke.none
#COMMENT: a #GHookList
#NAME: user_data
#PARENT: GLib.log_set_handler.guint
#COMMENT: data passed to the log handler
#NAME: destroy
#PARENT: GLib.clear_pointer.none
#COMMENT: a function to which a gpointer can be passed, to destroy *@pp
#NAME: parse
#PARENT: GLib.OptionContext
#COMMENT: Parses the command line arguments, recognizing options
which have been added to @context. A side-effect of
calling this function is that g_set_prgname() will be
called.

If the parsing is successful, any parsed arguments are
removed from the array and @argc and @argv are updated
accordingly. A '--' option is stripped from @argv
unless there are unparsed options before and after it,
or some of the options after it start with '-'. In case
of an error, @argc and @argv are left unmodified.

If automatic `--help` support is enabled
(see g_option_context_set_help_enabled()), and the
@argv array contains one of the recognized help options,
this function will produce help output to stdout and
call `exit (0)`.

Note that function depends on the [current locale][setlocale] for
automatic character set conversion of string and filename
arguments.
#NAME: unichar_xdigit_value
#PARENT: GLib.unichar_xdigit_value
#COMMENT: If @c is a hex digit (according to
g_unichar_isxdigit()), its numeric value. Otherwise, -1.
#NAME: atomic_pointer_get
#PARENT: GLib.atomic_pointer_get
#COMMENT: the value of the pointer
#NAME: fetch_all
#PARENT: GLib.MatchInfo.fetch_all
#COMMENT: a %NULL-terminated array of gchar *
    pointers.  It must be freed using g_strfreev(). If the previous
    match failed %NULL is returned
#NAME: int_hash
#PARENT: GLib
#COMMENT: Converts a pointer to a #gint to a hash value.
It can be passed to g_hash_table_new() as the @hash_func parameter,
when using non-%NULL pointers to integer values as keys in a #GHashTable.

Note that this function acts on pointers to #gint, not on #gint
directly: if your hash table's keys are of the form
`GINT_TO_POINTER (n)`, use g_direct_hash() instead.
#NAME: format
#PARENT: GLib.print.none
#COMMENT: the message format. See the printf() documentation
#NAME: key
#PARENT: GLib.VariantType.new_dict_entry.VariantType
#COMMENT: a basic #GVariantType
#NAME: atexit
#PARENT: GLib
#COMMENT: Specifies a function to be called at normal program termination.

Since GLib 2.8.2, on Windows g_atexit() actually is a preprocessor
macro that maps to a call to the atexit() function in the C
library. This means that in case the code that calls g_atexit(),
i.e. atexit(), is in a DLL, the function will be called when the
DLL is detached from the program. This typically makes more sense
than that the function is called when the GLib DLL is detached,
which happened earlier when g_atexit() was a function in the GLib
DLL.

The behaviour of atexit() in the context of dynamically loaded
modules is not formally specified and varies wildly.

On POSIX systems, calling g_atexit() (or atexit()) in a dynamically
loaded module which is unloaded before the program terminates might
well cause a crash at program exit.

Some POSIX systems implement atexit() like Windows, and have each
dynamically loaded module maintain an own atexit chain that is
called when the module is unloaded.

On other POSIX systems, before a dynamically loaded module is
unloaded, the registered atexit functions (if any) residing in that
module are called, regardless where the code that registered them
resided. This is presumably the most robust approach.

As can be seen from the above, for portability it's best to avoid
calling g_atexit() (or atexit()) except in the main executable of a
program.
#NAME: check
#PARENT: GLib.MainContext
#COMMENT: Passes the results of polling back to the main loop.

You must have successfully acquired the context with
g_main_context_acquire() before you may call this function.
#NAME: last
#PARENT: GLib.SList.last
#COMMENT: the last element in the #GSList,
    or %NULL if the #GSList has no elements
#NAME: keys
#PARENT: GLib.parse_debug_string.guint
#COMMENT: pointer to an array of #GDebugKey which associate
    strings with bit flags.
#NAME: test_run_suite
#PARENT: GLib
#COMMENT: Execute the tests within @suite and all nested #GTestSuites.
The test suites to be executed are filtered according to
test path arguments (`-p testpath`) as parsed by g_test_init().
See the g_test_run() documentation for more information on the
order that tests are run in.

g_test_run_suite() or g_test_run() may only be called once
in a program.
#NAME: new_object_path
#PARENT: GLib.Variant
#COMMENT: Creates a D-Bus object path #GVariant with the contents of @string.
@string must be a valid D-Bus object path.  Use
g_variant_is_object_path() if you're not sure.
#NAME: other_symbol
#PARENT: GLib.UnicodeType
#COMMENT: General category "Symbol, Other" (So)
#NAME: remove_index_fast
#PARENT: GLib.PtrArray.remove_index_fast
#COMMENT: the pointer which was removed
#NAME: iter
#PARENT: GLib.Sequence.sort_changed.none
#COMMENT: A #GSequenceIter
#NAME: datalist
#PARENT: GLib.datalist_init.none
#COMMENT: a pointer to a pointer to a datalist.
#NAME: tagalog
#PARENT: GLib.UnicodeScript
#COMMENT: Tagalog
#NAME: func
#PARENT: GLib.SList.insert_sorted.gpointer
#COMMENT: the function to compare elements in the list.
    It should return a number > 0 if the first parameter
    comes after the second parameter in the sort order.
#NAME: text
#PARENT: GLib.variant_parse.Variant
#COMMENT: a string containing a GVariant in text form
#NAME: MAJOR_VERSION
#PARENT: GLib
#COMMENT: The major version number of the GLib library.

Like #glib_major_version, but from the headers used at
application compile time, rather than from the library
linked against at application run time.
#NAME: write_chars
#PARENT: GLib.IOChannel
#COMMENT: Replacement for g_io_channel_write() with the new API.

On seekable channels with encodings other than %NULL or UTF-8, generic
mixing of reading and writing is not allowed. A call to g_io_channel_write_chars ()
may only be made on a channel from which data has been read in the
cases described in the documentation for g_io_channel_set_encoding ().
#NAME: key
#PARENT: GLib.KeyFile.set_uint64.none
#COMMENT: a key
#NAME: unichar_break_type
#PARENT: GLib.unichar_break_type
#COMMENT: the break type of @c
#NAME: months
#PARENT: GLib.DateTime.add_months.DateTime
#COMMENT: the number of months
#NAME: context
#PARENT: GLib.MainContext.dispatch.none
#COMMENT: a #GMainContext
#NAME: Error
#PARENT: GLib
#COMMENT: The `GError` structure contains information about
an error that has occurred.
#NAME: get_abbreviation
#PARENT: GLib.TimeZone.get_abbreviation
#COMMENT: the time zone abbreviation, which belongs to @tz
#NAME: CompareFunc
#PARENT: GLib.CompareFunc
#COMMENT: negative value if @a < @b; zero if @a = @b; positive
         value if @a > @b
#NAME: is_variant
#PARENT: GLib.VariantType
#COMMENT: Determines if the given @type is the variant type.
#NAME: length
#PARENT: GLib.Variant.get_objv.utf8
#COMMENT: the length of the result, or %NULL
#NAME: hook_list
#PARENT: GLib.HookList.marshal.none
#COMMENT: a #GHookList
#NAME: get_language_names
#PARENT: GLib
#COMMENT: Computes a list of applicable locale names, which can be used to
e.g. construct locale-dependent filenames or search paths. The returned
list is sorted from most desirable to least desirable and always contains
the default locale "C".

For example, if LANGUAGE=de:en_US, then the returned list is
"de", "en_US", "en", "C".

This function consults the environment variables `LANGUAGE`, `LC_ALL`,
`LC_MESSAGES` and `LANG` to find the list of locales specified by the
user.
#NAME: unichar_isalnum
#PARENT: GLib.unichar_isalnum
#COMMENT: %TRUE if @c is an alphanumeric character
#NAME: nestedsuite
#PARENT: GLib.TestSuite.add_suite.none
#COMMENT: another #GTestSuite
#NAME: append_unichar
#PARENT: GLib.String
#COMMENT: Converts a Unicode character into UTF-8, and appends it
to the string.
#NAME: sort
#PARENT: GLib.PtrArray
#COMMENT: Sorts the array, using @compare_func which should be a qsort()-style
comparison function (returns less than zero for first arg is less
than second arg, zero for equal, greater than zero if irst arg is
greater than second arg).

Note that the comparison function for g_ptr_array_sort() doesn't
take the pointers from the array as arguments, it takes pointers to
the pointers in the array.

This is guaranteed to be a stable sort since version 2.32.
#NAME: valid_month
#PARENT: GLib.Date
#COMMENT: Returns %TRUE if the month value is valid. The 12 #GDateMonth
enumeration values are the only valid months.
#NAME: quark_try_string
#PARENT: GLib.quark_try_string
#COMMENT: the #GQuark associated with the string, or 0 if @string is
    %NULL or there is no #GQuark associated with it
#NAME: string
#PARENT: GLib.Regex.escape_string.utf8
#COMMENT: the string to escape
#NAME: separator
#PARENT: GLib.build_pathv.utf8
#COMMENT: a string used to separator the elements of the path.
#NAME: new_literal
#PARENT: GLib.Error.new_literal
#COMMENT: a new #GError
#NAME: new_local
#PARENT: GLib.DateTime.new_local
#COMMENT: a #GDateTime, or %NULL
#NAME: error
#PARENT: GLib.IOStatus
#COMMENT: An error occurred.
#NAME: set_error
#PARENT: GLib
#COMMENT: Does nothing if @err is %NULL; if @err is non-%NULL, then *@err
must be %NULL. A new #GError is created and assigned to *@err.
#NAME: dict
#PARENT: GLib.VariantDict.init.none
#COMMENT: a #GVariantDict
#NAME: ascii_up
#PARENT: GLib.String.ascii_up
#COMMENT: passed-in @string pointer, with all the
    lowercase characters converted to uppercase in place,
    with semantics that exactly match g_ascii_toupper().
#NAME: code
#PARENT: GLib.Error.new.Error
#COMMENT: error code
#NAME: group_name
#PARENT: GLib.KeyFile.set_boolean_list.none
#COMMENT: a group name
#NAME: index
#PARENT: GLib.Queue
#COMMENT: Returns the position of the first element in @queue which contains @data.
#NAME: atomic
#PARENT: GLib.atomic_int_xor.guint
#COMMENT: a pointer to a #gint or #guint
#NAME: has_references
#PARENT: GLib.Regex.check_replacement.gboolean
#COMMENT: location to store information about
  references in @replacement or %NULL
#NAME: uri_list_extract_uris
#PARENT: GLib.uri_list_extract_uris
#COMMENT: a newly allocated %NULL-terminated list
  of strings holding the individual URIs. The array should be freed
  with g_strfreev().
#NAME: format_string
#PARENT: GLib.Variant.lookup.gboolean
#COMMENT: a GVariant format string
#NAME: nonblock
#PARENT: GLib.IOFlags
#COMMENT: turns on nonblocking mode, corresponds to
    %O_NONBLOCK/%O_NDELAY (see the documentation of the UNIX open()
    syscall)
#NAME: out
#PARENT: GLib.IOCondition
#COMMENT: Data can be written (without blocking).
#NAME: try_malloc0_n
#PARENT: GLib.try_malloc0_n
#COMMENT: the allocated memory, or %NULL
#NAME: timer
#PARENT: GLib.Timer.continue.none
#COMMENT: a #GTimer.
#NAME: value
#PARENT: GLib.Variant.get_normal_form.Variant
#COMMENT: a #GVariant
#NAME: length
#PARENT: GLib.PtrArray.set_size.none
#COMMENT: the new length of the pointer array
#NAME: children_foreach
#PARENT: GLib.Node
#COMMENT: Calls a function for each of the children of a #GNode.
Note that it doesn't descend beneath the child nodes.
#NAME: new
#PARENT: GLib.ThreadPool
#COMMENT: This function creates a new thread pool.

Whenever you call g_thread_pool_push(), either a new thread is
created or an unused one is reused. At most @max_threads threads
are running concurrently for this thread pool. @max_threads = -1
allows unlimited threads to be created for this thread pool. The
newly created or reused thread now executes the function @func
with the two arguments. The first one is the parameter to
g_thread_pool_push() and the second one is @user_data.

The parameter @exclusive determines whether the thread pool owns
all threads exclusive or shares them with other thread pools.
If @exclusive is %TRUE, @max_threads threads are started
immediately and they will run exclusively for this thread pool
until it is destroyed by g_thread_pool_free(). If @exclusive is
%FALSE, threads are created when needed and shared between all
non-exclusive thread pools. This implies that @max_threads may
not be -1 for exclusive thread pools. Besides, exclusive thread
pools are not affected by g_thread_pool_set_max_idle_time()
since their threads are never considered idle and returned to the
global pool.

@error can be %NULL to ignore errors, or non-%NULL to report
errors. An error can only occur when @exclusive is set to %TRUE
and not all @max_threads threads could be created.
See #GThreadError for possible errors that may occur.
Note, even in case of error a valid #GThreadPool is returned.
#NAME: ref
#PARENT: GLib.Regex
#COMMENT: Increases reference count of @regex by 1.
#NAME: insert
#PARENT: GLib.VariantDict
#COMMENT: Inserts a value into a #GVariantDict.

This call is a convenience wrapper that is exactly equivalent to
calling g_variant_new() followed by g_variant_dict_insert_value().
#NAME: domain
#PARENT: GLib.dpgettext2.utf8
#COMMENT: the translation domain to use, or %NULL to use
  the domain set with textdomain()
#NAME: data
#PARENT: GLib.HookFindFunc.gboolean
#COMMENT: user data passed to g_hook_find_func()
#NAME: new_objv
#PARENT: GLib.Variant.new_objv
#COMMENT: a new floating #GVariant instance
#NAME: free_to_bytes
#PARENT: GLib.ByteArray
#COMMENT: Transfers the data from the #GByteArray into a new immutable #GBytes.

The #GByteArray is freed unless the reference count of @array is greater
than one, the #GByteArray wrapper is preserved but the size of @array
will be set to zero.

This is identical to using g_bytes_new_take() and g_byte_array_free()
together.
#NAME: match_info
#PARENT: GLib.MatchInfo.is_partial_match.gboolean
#COMMENT: a #GMatchInfo structure
#NAME: utf8_normalize
#PARENT: GLib
#COMMENT: Converts a string into canonical form, standardizing
such issues as whether a character with an accent
is represented as a base character and combining
accent or as a single precomposed character. The
string has to be valid UTF-8, otherwise %NULL is
returned. You should generally call g_utf8_normalize()
before comparing two Unicode strings.

The normalization mode %G_NORMALIZE_DEFAULT only
standardizes differences that do not affect the
text content, such as the above-mentioned accent
representation. %G_NORMALIZE_ALL also standardizes
the "compatibility" characters in Unicode, such
as SUPERSCRIPT THREE to the standard forms
(in this case DIGIT THREE). Formatting information
may be lost but for most text operations such
characters should be considered the same.

%G_NORMALIZE_DEFAULT_COMPOSE and %G_NORMALIZE_ALL_COMPOSE
are like %G_NORMALIZE_DEFAULT and %G_NORMALIZE_ALL,
but returned a result with composed forms rather
than a maximally decomposed form. This is often
useful if you intend to convert the string to
a legacy encoding or pass it to a system with
less capable Unicode handling.
#NAME: 
#PARENT: GLib.String.append_printf.none...
#COMMENT: the parameters to insert into the format string
#NAME: tz
#PARENT: GLib.TimeZone.get_offset.gint32
#COMMENT: a #GTimeZone
#NAME: tv_sec
#PARENT: GLib.TimeVal
#COMMENT: seconds
#NAME: data
#PARENT: GLib.PtrArray.add.none
#COMMENT: the pointer to add
#NAME: set_double_list
#PARENT: GLib.KeyFile
#COMMENT: Associates a list of double values with @key under
@group_name.  If @key cannot be found then it is created.
#NAME: find_source_by_id
#PARENT: GLib.MainContext
#COMMENT: Finds a #GSource given a pair of context and ID.

It is a programmer error to attempt to lookup a non-existent source.

More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.
#NAME: new_fixed_array
#PARENT: GLib.Variant
#COMMENT: Provides access to the serialised data for an array of fixed-sized
items.

@value must be an array with fixed-sized elements.  Numeric types are
fixed-size as are tuples containing only other fixed-sized types.

@element_size must be the size of a single element in the array.
For example, if calling this function for an array of 32-bit integers,
you might say sizeof(gint32). This value isn't used except for the purpose
of a double-check that the form of the serialised data matches the caller's
expectation.

@n_elements, which must be non-%NULL is set equal to the number of
items in the array.
#NAME: lookup_value
#PARENT: GLib.VariantDict.lookup_value
#COMMENT: the value of the dictionary key, or %NULL
#NAME: new_bytestring
#PARENT: GLib.Variant.new_bytestring
#COMMENT: a floating reference to a new bytestring #GVariant instance
#NAME: environ_setenv
#PARENT: GLib
#COMMENT: Sets the environment variable @variable in the provided list
@envp to @value.
#NAME: n_nodes
#PARENT: GLib.Node.n_nodes
#COMMENT: the number of nodes in the tree
#NAME: length
#PARENT: GLib.Variant.dup_objv.utf8
#COMMENT: the length of the result, or %NULL
#NAME: remove_by_funcs_user_data
#PARENT: GLib.Source.remove_by_funcs_user_data
#COMMENT: %TRUE if a source was found and removed.
#NAME: currency_symbol
#PARENT: GLib.UnicodeType
#COMMENT: General category "Symbol, Currency" (Sc)
#NAME: str
#PARENT: GLib.ucs4_to_utf16.guint16
#COMMENT: a UCS-4 encoded string
#NAME: copy
#PARENT: GLib.SList
#COMMENT: Copies a #GSList.

Note that this is a "shallow" copy. If the list elements
consist of pointers to data, the pointers are copied but
the actual data isn't. See g_slist_copy_deep() if you need
to copy the data as well.
#NAME: get_maybe
#PARENT: GLib.Variant
#COMMENT: Given a maybe-typed #GVariant instance, extract its value.  If the
value is Nothing, then this function returns %NULL.
#NAME: uri
#PARENT: GLib.BookmarkFile.get_app_info.gboolean
#COMMENT: a valid URI
#NAME: timeout
#PARENT: GLib.AsyncQueue.timeout_pop.gpointer
#COMMENT: the number of microseconds to wait
#NAME: seek_position
#PARENT: GLib.IOChannel
#COMMENT: Replacement for g_io_channel_seek() with the new API.
#NAME: mutex
#PARENT: GLib.Mutex.trylock.gboolean
#COMMENT: a #GMutex
#NAME: remove_range
#PARENT: GLib.Array
#COMMENT: Removes the given number of elements starting at the given index
from a #GArray.  The following elements are moved to close the gap.
#NAME: first_sibling
#PARENT: GLib.Node.first_sibling
#COMMENT: the first sibling of @node
#NAME: missing_attribute
#PARENT: GLib.MarkupError
#COMMENT: error should be set by #GMarkupParser
    functions; a required attribute was missing
#NAME: nptr
#PARENT: GLib.strtod.gdouble
#COMMENT: the string to convert to a numeric value.
#NAME: ethiopic
#PARENT: GLib.UnicodeScript
#COMMENT: Ethiopic
#NAME: year
#PARENT: GLib.Date.get_days_in_month.guint8
#COMMENT: year
#NAME: nfds
#PARENT: GLib.poll.gint
#COMMENT: the number of file descriptors in @fds
#NAME: push_nth
#PARENT: GLib.Queue
#COMMENT: Inserts a new element into @queue at the given position.
#NAME: domain
#PARENT: GLib.dpgettext.utf8
#COMMENT: the translation domain to use, or %NULL to use
  the domain set with textdomain()
#NAME: hook_id
#PARENT: GLib.Hook.get.Hook
#COMMENT: a hook id
#NAME: hook_list
#PARENT: GLib.Hook.next_valid.Hook
#COMMENT: a #GHookList
#NAME: unichar_type
#PARENT: GLib
#COMMENT: Classifies a Unicode character by type.
#NAME: allow_utf8
#PARENT: GLib.uri_escape_string.utf8
#COMMENT: %TRUE if the result can include UTF-8 characters.
#NAME: filename_from_uri
#PARENT: GLib
#COMMENT: Converts an escaped ASCII-encoded URI to a local filename in the
encoding used for filenames.
#NAME: dup_objv
#PARENT: GLib.Variant.dup_objv
#COMMENT: an array of strings
#NAME: user_data
#PARENT: GLib.DataForeachFunc.none
#COMMENT: user data passed to g_dataset_foreach().
#NAME: type
#PARENT: GLib.VariantType.is_basic.gboolean
#COMMENT: a #GVariantType
#NAME: set_sort_function
#PARENT: GLib.ThreadPool
#COMMENT: Sets the function used to sort the list of tasks. This allows the
tasks to be processed by a priority determined by @func, and not
just in the order in which they were added to the pool.

Note, if the maximum number of threads is more than 1, the order
that threads are executed cannot be guaranteed 100%. Threads are
scheduled by the operating system and are executed at random. It
cannot be assumed that threads are executed in the order they are
created.
#NAME: context
#PARENT: GLib.MarkupParseContext.get_element.utf8
#COMMENT: a #GMarkupParseContext
#NAME: unused_data
#PARENT: GLib.log_default_handler.none
#COMMENT: data passed from g_log() which is unused
#NAME: ref
#PARENT: GLib.MatchInfo.ref
#COMMENT: @match_info
#NAME: runic
#PARENT: GLib.UnicodeScript
#COMMENT: Runic
#NAME: suite
#PARENT: GLib.TestSuite.add.none
#COMMENT: a #GTestSuite
#NAME: str
#PARENT: GLib.utf8_strreverse.utf8
#COMMENT: a UTF-8 encoded string
#NAME: get_variant
#PARENT: GLib.Variant.get_variant
#COMMENT: the item contained in the variant
#NAME: directory_desktop
#PARENT: GLib.UserDirectory
#COMMENT: the user's Desktop directory
#NAME: UNICHAR_MAX_DECOMPOSITION_LENGTH
#PARENT: GLib
#COMMENT: The maximum length (in codepoints) of a compatibility or canonical
decomposition of a single Unicode character.

This is as defined by Unicode 6.1.
#NAME: format_string
#PARENT: GLib.Variant.get_va.none
#COMMENT: a string that is prefixed with a format string
#NAME: get_boolean
#PARENT: GLib.Variant.get_boolean
#COMMENT: %TRUE or %FALSE
#NAME: key
#PARENT: GLib.Tree.steal.gboolean
#COMMENT: the key to remove
#NAME: atomic
#PARENT: GLib.atomic_int_exchange_and_add.gint
#COMMENT: a pointer to a #gint
#NAME: str
#PARENT: GLib.utf8_casefold.utf8
#COMMENT: a UTF-8 encoded string
#NAME: type
#PARENT: GLib.VariantType.is_subtype_of.gboolean
#COMMENT: a #GVariantType
#NAME: free
#PARENT: GLib.PtrArray.free
#COMMENT: the pointer array if @free_seg is %FALSE, otherwise %NULL.
    The pointer array should be freed using g_free().
#NAME: steal
#PARENT: GLib.HashTable.steal
#COMMENT: %TRUE if the key was found and removed from the #GHashTable
#NAME: seconds
#PARENT: GLib.DateTime.new_local.DateTime
#COMMENT: the number of seconds past the minute
#NAME: Tree
#PARENT: GLib
#COMMENT: The GTree struct is an opaque data structure representing a
[balanced binary tree][glib-Balanced-Binary-Trees]. It should be
accessed only by using the following functions.
#NAME: add_days
#PARENT: GLib.DateTime
#COMMENT: Creates a copy of @datetime and adds the specified number of days to the
copy. Add negative values to subtract days.
#NAME: markup_printf_escaped
#PARENT: GLib
#COMMENT: Formats arguments according to @format, escaping
all string and character arguments in the fashion
of g_markup_escape_text(). This is useful when you
want to insert literal strings into XML-style markup
output, without having to worry that the strings
might themselves contain markup.

|[<!-- language="C" -->
const char *store = "Fortnum & Mason";
const char *item = "Tea";
char *output;

output = g_markup_printf_escaped ("<purchase>"
                                  "<store>%s</store>"
                                  "<item>%s</item>"
                                  "</purchase>",
                                  store, item);
]|
#NAME: has_item
#PARENT: GLib.BookmarkFile
#COMMENT: Looks whether the desktop bookmark has an item with its URI set to @uri.
#NAME: new
#PARENT: GLib.Thread
#COMMENT: This function creates a new thread. The new thread starts by invoking
@func with the argument data. The thread will run until @func returns
or until g_thread_exit() is called from the new thread. The return value
of @func becomes the return value of the thread, which can be obtained
with g_thread_join().

The @name can be useful for discriminating threads in a debugger.
It is not used for other purposes and does not have to be unique.
Some systems restrict the length of @name to 16 bytes.

If the thread can not be created the program aborts. See
g_thread_try_new() if you want to attempt to deal with failures.

To free the struct returned by this function, use g_thread_unref().
Note that g_thread_join() implicitly unrefs the #GThread as well.
#NAME: eof
#PARENT: GLib.Scanner.eof
#COMMENT: %TRUE if the scanner has reached the end of
    the file or text buffer
#NAME: new_bytestring_array
#PARENT: GLib.Variant
#COMMENT: Constructs an array of bytestring #GVariant from the given array of
strings.

If @length is -1 then @strv is %NULL-terminated.
#NAME: unescaped
#PARENT: GLib.uri_escape_string.utf8
#COMMENT: the unescaped input string.
#NAME: remove
#PARENT: GLib.Queue
#COMMENT: Removes the first element in @queue that contains @data.
#NAME: hash_func
#PARENT: GLib.HashTable.new_full.gpointer
#COMMENT: a function to create a hash value from a key
#NAME: invalid_type_string
#PARENT: GLib.VariantParseError
#COMMENT: not a valid #GVariant type string
#NAME: UnixFDSourceFunc
#PARENT: GLib.UnixFDSourceFunc
#COMMENT: %FALSE if the source should be removed
#NAME: group_name
#PARENT: GLib.KeyFile.get_comment.utf8
#COMMENT: a group name, or %NULL
#NAME: value
#PARENT: GLib.VariantType
#COMMENT: Determines the value type of a dictionary entry type.

This function may only be used with a dictionary entry type.
#NAME: ScannerConfig
#PARENT: GLib
#COMMENT: Specifies the #GScanner parser configuration. Most settings can
be changed during the parsing phase and will affect the lexical
parsing of the next unpeeked token.
#NAME: get_help_enabled
#PARENT: GLib.OptionContext.get_help_enabled
#COMMENT: %TRUE if automatic help generation is turned on.
#NAME: substitutor
#PARENT: GLib.strcanon.utf8
#COMMENT: replacement character for disallowed bytes
#NAME: key
#PARENT: GLib.VariantType
#COMMENT: Determines the key type of a dictionary entry type.

This function may only be used with a dictionary entry type.  Other
than the additional restriction, this call is equivalent to
g_variant_type_first().
#NAME: KeyFile
#PARENT: GLib
#COMMENT: The GKeyFile struct contains only private data
and should not be accessed directly.
#NAME: new
#PARENT: GLib.MainLoop.new
#COMMENT: a new #GMainLoop.
#NAME: find_custom
#PARENT: GLib.List.find_custom
#COMMENT: the found #GList element, or %NULL if it is not found
#NAME: unknown_attribute
#PARENT: GLib.MarkupError
#COMMENT: error should be set by #GMarkupParser
    functions; attribute wasn't known
#NAME: write_unichar
#PARENT: GLib.IOChannel.write_unichar
#COMMENT: a #GIOStatus
#NAME: equal
#PARENT: GLib.String
#COMMENT: Compares two strings for equality, returning %TRUE if they are equal.
For use with #GHashTable.
#NAME: node
#PARENT: GLib.Node.prepend.Node
#COMMENT: the #GNode to insert
#NAME: TIME_SPAN_MINUTE
#PARENT: GLib
#COMMENT: Evaluates to a time span of one minute.
#NAME: key_file
#PARENT: GLib.KeyFile.get_comment.utf8
#COMMENT: a #GKeyFile
#NAME: scanner
#PARENT: GLib.ScannerMsgFunc.none
#COMMENT: a #GScanner
#NAME: double_equal
#PARENT: GLib.double_equal
#COMMENT: %TRUE if the two keys match.
#NAME: test
#PARENT: GLib.file_test.gboolean
#COMMENT: bitfield of #GFileTest flags
#NAME: args
#PARENT: GLib.vfprintf.gint
#COMMENT: the list of arguments to insert in the output.
#NAME: group
#PARENT: GLib.BookmarkFile.has_group.gboolean
#COMMENT: the group name to be searched
#NAME: tai_viet
#PARENT: GLib.UnicodeScript
#COMMENT: Tai Viet. Since 2.26
#NAME: new_from_unix_utc
#PARENT: GLib.DateTime
#COMMENT: Creates a #GDateTime corresponding to the given Unix time @t in UTC.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC.

This call can fail (returning %NULL) if @t represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.
#NAME: type
#PARENT: GLib.VariantType.copy.VariantType
#COMMENT: a #GVariantType
#NAME: Scanner
#PARENT: GLib
#COMMENT: The data structure representing a lexical scanner.

You should set @input_name after creating the scanner, since
it is used by the default message handler when displaying
warnings and errors. If you are scanning a file, the filename
would be a good choice.

The @user_data and @max_parse_errors fields are not used.
If you need to associate extra data with the scanner you
can place them here.

If you want to use your own message handler you can set the
@msg_handler field. The type of the message handler function
is declared by #GScannerMsgFunc.
#NAME: read_line
#PARENT: GLib.IOChannel
#COMMENT: Reads a line, including the terminating character(s),
from a #GIOChannel into a newly-allocated string.
@str_return will contain allocated memory if the return
is %G_IO_STATUS_NORMAL.
#NAME: iter
#PARENT: GLib.VariantIter.loop.gboolean
#COMMENT: a #GVariantIter
#NAME: code
#PARENT: GLib.Error.new_valist.Error
#COMMENT: error code
#NAME: separator
#PARENT: GLib.build_path.utf8
#COMMENT: a string used to separator the elements of the path.
#NAME: ucs4_to_utf8
#PARENT: GLib.ucs4_to_utf8
#COMMENT: a pointer to a newly allocated UTF-8 string.
    This value must be freed with g_free(). If an error occurs,
    %NULL will be returned and @error set. In that case, @items_read
    will be set to the position of the first invalid input character.
#NAME: nval
#PARENT: GLib.IOCondition
#COMMENT: Invalid request. The file descriptor is not open.
#NAME: lookup
#PARENT: GLib.HashTable
#COMMENT: Looks up a key in a #GHashTable. Note that this function cannot
distinguish between a key that is not present and one which is present
and has the value %NULL. If you need this distinction, use
g_hash_table_lookup_extended().
#NAME: dest_size
#PARENT: GLib.strlcat.gsize
#COMMENT: length of @dest buffer in bytes (not length of existing string
    inside @dest)
#NAME: nkeys
#PARENT: GLib.parse_debug_string.guint
#COMMENT: the number of #GDebugKeys in the array.
#NAME: utf8_find_next_char
#PARENT: GLib.utf8_find_next_char
#COMMENT: a pointer to the found character or %NULL
#NAME: new
#PARENT: GLib.ThreadPool.new
#COMMENT: the new #GThreadPool
#NAME: ASCII_DTOSTR_BUF_SIZE
#PARENT: GLib
#COMMENT: A good size for a buffer to be passed into g_ascii_dtostr().
It is guaranteed to be enough for all output of that function
on systems with 64bit IEEE-compatible doubles.

The typical usage would be something like:
|[<!-- language="C" -->
  char buf[G_ASCII_DTOSTR_BUF_SIZE];

  fprintf (out, "value=%s\n", g_ascii_dtostr (buf, sizeof (buf), value));
]|
#NAME: str
#PARENT: GLib.String.hash.guint
#COMMENT: a string to hash
#NAME: string
#PARENT: GLib.String.prepend_len.String
#COMMENT: a #GString
#NAME: tmpl
#PARENT: GLib.mkdtemp.utf8
#COMMENT: template directory name
#NAME: list
#PARENT: GLib.List.remove.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: path_get_basename
#PARENT: GLib
#COMMENT: Gets the last component of the filename.

If @file_name ends with a directory separator it gets the component
before the last slash. If @file_name consists only of directory
separators (and on Windows, possibly a drive letter), a single
separator is returned. If @file_name is empty, it gets ".".
#NAME: split_full
#PARENT: GLib.Regex.split_full
#COMMENT: a %NULL-terminated gchar ** array. Free
it using g_strfreev()
#NAME: read
#PARENT: GLib.IOChannel
#COMMENT: Reads data from a #GIOChannel.
#NAME: foreach_steal
#PARENT: GLib.HashTable.foreach_steal
#COMMENT: the number of key/value pairs removed.
#NAME: markup_escape_text
#PARENT: GLib.markup_escape_text
#COMMENT: a newly allocated string with the escaped text
#NAME: string_reversed
#PARENT: GLib.pattern_match.gboolean
#COMMENT: the reverse of @string or %NULL
#NAME: value
#PARENT: GLib.Variant.get_maybe.Variant
#COMMENT: a maybe-typed value
#NAME: copy
#PARENT: GLib.List
#COMMENT: Copies a #GList.

Note that this is a "shallow" copy. If the list elements
consist of pointers to data, the pointers are copied but
the actual data is not. See g_list_copy_deep() if you need
to copy the data as well.
#NAME: index
#PARENT: GLib.SList
#COMMENT: Gets the position of the element containing
the given data (starting from 0).
#NAME: string
#PARENT: GLib.strup.utf8
#COMMENT: the string to convert
#NAME: DIR_SEPARATOR
#PARENT: GLib
#COMMENT: The directory separator character.
This is '/' on UNIX machines and '\' under Windows.
#NAME: DIR_SEPARATOR_S
#PARENT: GLib
#COMMENT: The directory separator as a string.
This is "/" on UNIX machines and "\" under Windows.
#NAME: markup_collect_attributes
#PARENT: GLib
#COMMENT: Collects the attributes of the element from the data passed to the
#GMarkupParser start_element function, dealing with common error
conditions and supporting boolean values.

This utility function is not required to write a parser but can save
a lot of typing.

The @element_name, @attribute_names, @attribute_values and @error
parameters passed to the start_element callback should be passed
unmodified to this function.

Following these arguments is a list of "supported" attributes to collect.
It is an error to specify multiple attributes with the same name. If any
attribute not in the list appears in the @attribute_names array then an
unknown attribute error will result.

The #GMarkupCollectType field allows specifying the type of collection
to perform and if a given attribute must appear or is optional.

The attribute name is simply the name of the attribute to collect.

The pointer should be of the appropriate type (see the descriptions
under #GMarkupCollectType) and may be %NULL in case a particular
attribute is to be allowed but ignored.

This function deals with issuing errors for missing attributes
(of type %G_MARKUP_ERROR_MISSING_ATTRIBUTE), unknown attributes
(of type %G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE) and duplicate
attributes (of type %G_MARKUP_ERROR_INVALID_CONTENT) as well
as parse errors for boolean-valued attributes (again of type
%G_MARKUP_ERROR_INVALID_CONTENT). In all of these cases %FALSE
will be returned and @error will be set as appropriate.
#NAME: seed
#PARENT: GLib.Rand.new_with_seed.Rand
#COMMENT: a value to initialize the random number generator
#NAME: flags
#PARENT: GLib.IOChannel.set_flags.IOStatus
#COMMENT: the flags to set on the IO channel
#NAME: date_valid_year
#PARENT: GLib.date_valid_year
#COMMENT: %TRUE if the year is valid
#NAME: argv
#PARENT: GLib.spawn_sync.gboolean
#COMMENT: child's argument vector
#NAME: n_children
#PARENT: GLib.Variant.new_array.Variant
#COMMENT: the length of @children
#NAME: get_va
#PARENT: GLib.Variant
#COMMENT: This function is intended to be used by libraries based on #GVariant
that want to provide g_variant_get()-like functionality to their
users.

The API is more general than g_variant_get() to allow a wider range
of possible uses.

@format_string must still point to a valid format string, but it only
need to be nul-terminated if @endptr is %NULL.  If @endptr is
non-%NULL then it is updated to point to the first character past the
end of the format string.

@app is a pointer to a #va_list.  The arguments, according to
@format_string, are collected from this #va_list and the list is left
pointing to the argument following the last.

These two generalisations allow mixing of multiple calls to
g_variant_new_va() and g_variant_get_va() within a single actual
varargs call by the user.

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed,
see the section on
[GVariant format strings][gvariant-format-strings-pointers].
#NAME: get_num_unused_threads
#PARENT: GLib.ThreadPool.get_num_unused_threads
#COMMENT: the number of currently unused threads
#NAME: bookmark
#PARENT: GLib.BookmarkFile.free.none
#COMMENT: a #GBookmarkFile
#NAME: marshal_data
#PARENT: GLib.HookList.marshal.none
#COMMENT: data to pass to @marshaller
#NAME: msgid
#PARENT: GLib.strip_context.utf8
#COMMENT: a string
#NAME: new_array
#PARENT: GLib.VariantType
#COMMENT: Constructs the type corresponding to an array of elements of the
type @type.

It is appropriate to call g_variant_type_free() on the return value.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.set_app_info.gboolean
#COMMENT: a #GBookmarkFile
#NAME: length
#PARENT: GLib.KeyFile.get_string_list.utf8
#COMMENT: return location for the number of returned strings, or %NULL
#NAME: bytes1
#PARENT: GLib.Bytes.equal.gboolean
#COMMENT: a pointer to a #GBytes
#NAME: bytes2
#PARENT: GLib.Bytes.equal.gboolean
#COMMENT: a pointer to a #GBytes to compare with @bytes1
#NAME: string
#PARENT: GLib.MarkupCollectType
#COMMENT: collect the string pointer directly from
    the attribute_values[] array. Expects a parameter of type (const
    char **). If %G_MARKUP_COLLECT_OPTIONAL is specified and the
    attribute isn't present then the pointer will be set to %NULL
#NAME: ref
#PARENT: GLib.MarkupParseContext.ref
#COMMENT: the same @context
#NAME: KEY_FILE_DESKTOP_GROUP
#PARENT: GLib
#COMMENT: The name of the main group of a desktop entry file, as defined in the
[Desktop Entry Specification](http://freedesktop.org/Standards/desktop-entry-spec).
Consult the specification for more
details about the meanings of the keys below.
#NAME: slen
#PARENT: GLib.date_strftime.gsize
#COMMENT: buffer size
#NAME: copy_deep
#PARENT: GLib.SList.copy_deep
#COMMENT: a full copy of @list, use #g_slist_free_full to free it
#NAME: utf8_collate
#PARENT: GLib
#COMMENT: Compares two strings for ordering using the linguistically
correct rules for the [current locale][setlocale].
When sorting a large number of strings, it will be significantly
faster to obtain collation keys with g_utf8_collate_key() and
compare the keys with strcmp() when sorting instead of sorting
the original strings.
#NAME: data
#PARENT: GLib.HookCheckFunc.gboolean
#COMMENT: the data field of the #GHook is passed to the hook function here
#NAME: is_container
#PARENT: GLib.VariantType
#COMMENT: Determines if the given @type is a container type.

Container types are any array, maybe, tuple, or dictionary
entry types plus the variant type.

This function returns %TRUE for any indefinite type for which every
definite subtype is a container -- %G_VARIANT_TYPE_ARRAY, for
example.
#NAME: get_monday_week_of_year
#PARENT: GLib.Date
#COMMENT: Returns the week of the year, where weeks are understood to start on
Monday. If the date is before the first Monday of the year, return
0. The date must be valid.
#NAME: seq
#PARENT: GLib.Sequence.get_length.gint
#COMMENT: a #GSequence
#NAME: len
#PARENT: GLib.String.insert_len.String
#COMMENT: number of bytes of @val to insert
#NAME: try_malloc_n
#PARENT: GLib.try_malloc_n
#COMMENT: the allocated memory, or %NULL.
#NAME: queue
#PARENT: GLib.Queue.reverse.none
#COMMENT: a #GQueue
#NAME: variable
#PARENT: GLib.getenv.utf8
#COMMENT: the environment variable to get, in the GLib file name
    encoding
#NAME: remove_comment
#PARENT: GLib.KeyFile.remove_comment
#COMMENT: %TRUE if the comment was removed, %FALSE otherwise
#NAME: hash_table
#PARENT: GLib.hash_table_contains.gboolean
#COMMENT: a #GHashTable
#NAME: index_
#PARENT: GLib.PtrArray.remove_index.gpointer
#COMMENT: the index of the pointer to remove
#NAME: n_days
#PARENT: GLib.Date.subtract_days.none
#COMMENT: number of days to move
#NAME: key_id
#PARENT: GLib.dataset_id_get_data.gpointer
#COMMENT: the #GQuark id to identify the data element.
#NAME: end
#PARENT: GLib.DateTime.difference.TimeSpan
#COMMENT: a #GDateTime
#NAME: rw_lock
#PARENT: GLib.RWLock.init.none
#COMMENT: an uninitialized #GRWLock
#NAME: stack_p
#PARENT: GLib.TrashStack.push.none
#COMMENT: a #GTrashStack
#NAME: value
#PARENT: GLib.Variant.get_fixed_array.gpointer
#COMMENT: a #GVariant array with fixed-sized elements
#NAME: converter
#PARENT: GLib.iconv.gsize
#COMMENT: conversion descriptor from g_iconv_open()
#NAME: str
#PARENT: GLib.compute_hmac_for_string.utf8
#COMMENT: the string to compute the HMAC for
#NAME: unref
#PARENT: GLib.PtrArray
#COMMENT: Atomically decrements the reference count of @array by one. If the
reference count drops to 0, the effect is the same as calling
g_ptr_array_free() with @free_segment set to %TRUE. This function
is MT-safe and may be called from any thread.
#NAME: fprintf
#PARENT: GLib.fprintf
#COMMENT: the number of bytes printed.
#NAME: close
#PARENT: GLib.IConv.close
#COMMENT: -1 on error, 0 on success
#NAME: max_priority
#PARENT: GLib.MainContext.query.gint
#COMMENT: maximum priority source to check
#NAME: set_callback_indirect
#PARENT: GLib.Source
#COMMENT: Sets the callback function storing the data as a refcounted callback
"object". This is used internally. Note that calling
g_source_set_callback_indirect() assumes
an initial reference count on @callback_data, and thus
@callback_funcs->unref will eventually be called once more
than @callback_funcs->ref.
#NAME: parse_strv
#PARENT: GLib.OptionContext.parse_strv
#COMMENT: %TRUE if the parsing was successful,
         %FALSE if an error occurred
#NAME: quark_from_static_string
#PARENT: GLib
#COMMENT: Gets the #GQuark identifying the given (static) string. If the
string does not currently have an associated #GQuark, a new #GQuark
is created, linked to the given string.

Note that this function is identical to g_quark_from_string() except
that if a new #GQuark is created the string itself is used rather
than a copy. This saves memory, but can only be used if the string
will continue to exist until the program terminates. It can be used
with statically allocated strings in the main program, but not with
statically allocated memory in dynamically loaded modules, if you
expect to ever unload the module again (e.g. do not use this
function in GTK+ theme engines).
#NAME: strreverse
#PARENT: GLib.strreverse
#COMMENT: the same pointer passed in as @string
#NAME: items_written
#PARENT: GLib.utf16_to_utf8.utf8
#COMMENT: location to store number of bytes written,
    or %NULL. The value stored here does not include the trailing 0 byte.
#NAME: get_double
#PARENT: GLib.KeyFile
#COMMENT: Returns the value associated with @key under @group_name as a
double. If @group_name is %NULL, the start_group is used.

If @key cannot be found then 0.0 is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
with @key cannot be interpreted as a double then 0.0 is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
#NAME: key
#PARENT: GLib.TraverseFunc.gboolean
#COMMENT: a key of a #GTree node
#NAME: read_to_end
#PARENT: GLib.IOChannel
#COMMENT: Reads all the remaining data from the file.
#NAME: miao
#PARENT: GLib.UnicodeScript
#COMMENT: Miao. Since: 2.32
#NAME: func
#PARENT: GLib.Hook.insert_sorted.none
#COMMENT: the comparison function used to sort the #GHook elements
#NAME: string
#PARENT: GLib.String.set_size.String
#COMMENT: a #GString
#NAME: domain
#PARENT: GLib.dcgettext.utf8
#COMMENT: the translation domain to use, or %NULL to use
  the domain set with textdomain()
#NAME: key
#PARENT: GLib.KeyFile.set_locale_string.none
#COMMENT: a key
#NAME: array
#PARENT: GLib.ByteArray.ref.guint8
#COMMENT: A #GByteArray
#NAME: strv_contains
#PARENT: GLib
#COMMENT: Checks if @strv contains @str. @strv must not be %NULL.
#NAME: hook_list
#PARENT: GLib.HookList.marshal_check.none
#COMMENT: a #GHookList
#NAME: builder
#PARENT: GLib.VariantBuilder.add_value.none
#COMMENT: a #GVariantBuilder
#NAME: string
#PARENT: GLib.regex_escape_string.utf8
#COMMENT: the string to escape
#NAME: test_timer_last
#PARENT: GLib
#COMMENT: Report the last result of g_test_timer_elapsed().
#NAME: DateMonth
#PARENT: GLib
#COMMENT: Enumeration representing a month; values are #G_DATE_JANUARY,
#G_DATE_FEBRUARY, etc. #G_DATE_BAD_MONTH is the invalid value.
#NAME: interval
#PARENT: GLib.timeout_add.guint
#COMMENT: the time between calls to the function, in milliseconds
            (1/1000ths of a second)
#NAME: buf
#PARENT: GLib.IOChannel.read_chars.IOStatus
#COMMENT: 
    a buffer to read data into
#NAME: get_charset
#PARENT: GLib
#COMMENT: Obtains the character set for the [current locale][setlocale]; you
might use this character set as an argument to g_convert(), to convert
from the current locale's encoding to some other encoding. (Frequently
g_locale_to_utf8() and g_locale_from_utf8() are nice shortcuts, though.)

On Windows the character set returned by this function is the
so-called system default ANSI code-page. That is the character set
used by the "narrow" versions of C library and Win32 functions that
handle file names. It might be different from the character set
used by the C library's current locale.

The return value is %TRUE if the locale's encoding is UTF-8, in that
case you can perhaps avoid calling g_convert().

The string returned in @charset is not allocated, and should not be
freed.
#NAME: func
#PARENT: GLib.List.copy_deep.gpointer
#COMMENT: a copy function used to copy every element in the list
#NAME: group
#PARENT: GLib.OptionGroup.ref.OptionGroup
#COMMENT: a #GOptionGroup
#NAME: init
#PARENT: GLib.VariantDict
#COMMENT: Initialises a #GVariantDict structure.

If @from_asv is given, it is used to initialise the dictionary.

This function completely ignores the previous contents of @dict.  On
one hand this means that it is valid to pass in completely
uninitialised memory.  On the other hand, this means that if you are
initialising over top of an existing #GVariantDict you need to first
call g_variant_dict_clear() in order to avoid leaking memory.

You must not call g_variant_dict_ref() or g_variant_dict_unref() on a
#GVariantDict that was initialised with this function.  If you ever
pass a reference to a #GVariantDict outside of the control of your
own code then you should assume that the person receiving that
reference may try to use reference counting; you should use
g_variant_dict_new() instead of this function.
#NAME: test_path
#PARENT: GLib.test_trap_subprocess.none
#COMMENT: Test to run in a subprocess
#NAME: help_description
#PARENT: GLib.OptionGroup.new.OptionGroup
#COMMENT: a description for the `--help-`@name option.
  This string is translated using the translation domain or translation function
  of the group
#NAME: path_get_dirname
#PARENT: GLib
#COMMENT: Gets the directory components of a file name.

If the file name has no directory components "." is returned.
The returned string should be freed when no longer needed.
#NAME: channel
#PARENT: GLib.IOChannel.read_unichar.IOStatus
#COMMENT: a #GIOChannel
#NAME: group_name
#PARENT: GLib.KeyFile.get_double.gdouble
#COMMENT: a group name
#NAME: prepend
#PARENT: GLib.ByteArray.prepend
#COMMENT: the #GByteArray
#NAME: value
#PARENT: GLib.Variant.get_double.gdouble
#COMMENT: a double #GVariant instance
#NAME: subtract_days
#PARENT: GLib.Date
#COMMENT: Moves a date some number of days into the past.
To move by weeks, just move by weeks*7 days.
The date must be valid.
#NAME: atomic_pointer_and
#PARENT: GLib.atomic_pointer_and
#COMMENT: the value of @atomic before the operation, unsigned
#NAME: newval
#PARENT: GLib.atomic_pointer_set.none
#COMMENT: a new value to store
#NAME: 2big
#PARENT: GLib.SpawnError
#COMMENT: deprecated alias for %G_SPAWN_ERROR_TOO_BIG
#NAME: ref
#PARENT: GLib.ByteArray
#COMMENT: Atomically increments the reference count of @array by one.
This function is thread-safe and may be called from any thread.
#NAME: get_summary
#PARENT: GLib.OptionContext
#COMMENT: Returns the summary. See g_option_context_set_summary().
#NAME: minute
#PARENT: GLib.DateTime.new_utc.DateTime
#COMMENT: the minute component of the date
#NAME: ascii_strncasecmp
#PARENT: GLib
#COMMENT: Compare @s1 and @s2, ignoring the case of ASCII characters and any
characters after the first @n in each string.

Unlike the BSD strcasecmp() function, this only recognizes standard
ASCII letters and ignores the locale, treating all non-ASCII
characters as if they are not letters.

The same warning as in g_ascii_strcasecmp() applies: Use this
function only on strings known to be in encodings where bytes
corresponding to ASCII letters always represent themselves.
#NAME: new_dict_entry
#PARENT: GLib.VariantType
#COMMENT: Constructs the type corresponding to a dictionary entry with a key
of type @key and a value of type @value.

It is appropriate to call g_variant_type_free() on the return value.
#NAME: ungreedy
#PARENT: GLib.RegexCompileFlags
#COMMENT: Inverts the "greediness" of the quantifiers so that
    they are not greedy by default, but become greedy if followed by "?".
    It can also be set by a "(?U)" option setting within the pattern.
#NAME: file_name
#PARENT: GLib.basename.utf8
#COMMENT: the name of the file
#NAME: iter
#PARENT: GLib.HashTableIter.init.none
#COMMENT: an uninitialized #GHashTableIter
#NAME: hash_table_remove_all
#PARENT: GLib
#COMMENT: Removes all keys and their associated values from a #GHashTable.

If the #GHashTable was created using g_hash_table_new_full(),
the keys and values are freed using the supplied destroy functions,
otherwise you have to make sure that any dynamically allocated
values are freed yourself.
#NAME: append_c
#PARENT: GLib.String
#COMMENT: Adds a byte onto the end of a #GString, expanding
it if necessary.
#NAME: GUINT32_FORMAT
#PARENT: GLib
#COMMENT: This is the platform dependent conversion specifier for scanning
and printing values of type #guint32. See also #G_GINT16_FORMAT.
#NAME: timed_pop_unlocked
#PARENT: GLib.AsyncQueue
#COMMENT: Pops data from the @queue. If the queue is empty, blocks until
@end_time or until data becomes available.

If no data is received before @end_time, %NULL is returned.

To easily calculate @end_time, a combination of g_get_current_time()
and g_time_val_add() can be used.

This function must be called while holding the @queue's lock.
#NAME: matches
#PARENT: GLib.MatchInfo.matches
#COMMENT: %TRUE if the previous match operation succeeded,
  %FALSE otherwise
#NAME: flags
#PARENT: GLib.Node.find_child.Node
#COMMENT: which types of children are to be searched, one of
    %G_TRAVERSE_ALL, %G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES
#NAME: p
#PARENT: GLib.utf8_get_char.gunichar
#COMMENT: a pointer to Unicode character encoded as UTF-8
#NAME: data
#PARENT: GLib.SList.insert_sorted.gpointer
#COMMENT: the data for the new element
#NAME: destroy_func
#PARENT: GLib.test_queue_destroy.none
#COMMENT: Destroy callback for teardown phase.
#NAME: trash_stack_height
#PARENT: GLib.trash_stack_height
#COMMENT: the height of the stack
#NAME: new
#PARENT: GLib.Error
#COMMENT: Creates a new #GError with the given @domain and @code,
and a message formatted with @format.
#NAME: get_strict_posix
#PARENT: GLib.OptionContext.get_strict_posix
#COMMENT: %TRUE if strict POSIX is enabled, %FALSE otherwise.
#NAME: data
#PARENT: GLib.Node.find_child.Node
#COMMENT: the data to find
#NAME: iteration
#PARENT: GLib.MainContext
#COMMENT: Runs a single iteration for the given main loop. This involves
checking to see if any event sources are ready to be processed,
then if no events sources are ready and @may_block is %TRUE, waiting
for a source to become ready, then dispatching the highest priority
events sources that are ready. Otherwise, if @may_block is %FALSE
sources are not waited to become ready, only those highest priority
events sources will be dispatched (if any), that are ready at this
given moment without further waiting.

Note that even when @may_block is %TRUE, it is still possible for
g_main_context_iteration() to return %FALSE, since the wait may
be interrupted for other reasons than an event source becoming ready.
#NAME: hostname
#PARENT: GLib.hostname_is_ip_address.gboolean
#COMMENT: a hostname (or IP address in string form)
#NAME: load_from_dirs
#PARENT: GLib.KeyFile
#COMMENT: This function looks for a key file named @file in the paths
specified in @search_dirs, loads the file into @key_file and
returns the file's full path in @full_path.  If the file could not
be loaded then an %error is set to either a #GFileError or
#GKeyFileError.
#NAME: data
#PARENT: GLib.Func.none
#COMMENT: the element's data
#NAME: empty_string
#PARENT: GLib.ShellError
#COMMENT: String to be parsed was empty.
#NAME: list
#PARENT: GLib.SList.find.gpointer
#COMMENT: a #GSList
#NAME: mutex
#PARENT: GLib.Mutex.init.none
#COMMENT: an uninitialized #GMutex
#NAME: get_buffer_condition
#PARENT: GLib.IOChannel.get_buffer_condition
#COMMENT: A #GIOCondition
#NAME: strcasecmp
#PARENT: GLib.strcasecmp
#COMMENT: 0 if the strings match, a negative value if @s1 < @s2,
    or a positive value if @s1 > @s2.
#NAME: byte_size
#PARENT: GLib.memdup.gpointer
#COMMENT: the number of bytes to copy.
#NAME: size
#PARENT: GLib.format_size_full.utf8
#COMMENT: a size in bytes
#NAME: dataset_id_remove_no_notify
#PARENT: GLib.dataset_id_remove_no_notify
#COMMENT: the data previously stored at @key_id, or %NULL if none.
#NAME: c
#PARENT: GLib.String.insert_c.String
#COMMENT: the byte to insert
#NAME: strjoin
#PARENT: GLib.strjoin
#COMMENT: a newly-allocated string containing all of the strings joined
    together, with @separator between them
#NAME: data
#PARENT: GLib.ByteArray.prepend.guint8
#COMMENT: the byte data to be added
#NAME: type
#PARENT: GLib.VariantBuilder.new.VariantBuilder
#COMMENT: a container type
#NAME: adjust_time
#PARENT: GLib.TimeZone.adjust_time
#COMMENT: the interval containing @time_, never -1
#NAME: group
#PARENT: GLib.OptionGroup.set_error_hook.none
#COMMENT: a #GOptionGroup
#NAME: lookup_extended
#PARENT: GLib.HashTable
#COMMENT: Looks up a key in the #GHashTable, returning the original key and the
associated value and a #gboolean which is %TRUE if the key was found. This
is useful if you need to free the memory allocated for the original key,
for example before calling g_hash_table_remove().

You can actually pass %NULL for @lookup_key to test
whether the %NULL key exists, provided the hash and equal functions
of @hash_table are %NULL-safe.
#NAME: suffix
#PARENT: GLib.str_has_suffix.gboolean
#COMMENT: the nul-terminated suffix to look for
#NAME: is_basic
#PARENT: GLib.VariantType.is_basic
#COMMENT: %TRUE if @type is a basic type

Since 2.24
#NAME: compile
#PARENT: GLib.RegexError
#COMMENT: Compilation of the regular expression failed.
#NAME: args
#PARENT: GLib.String.append_vprintf.none
#COMMENT: the list of arguments to insert in the output
#NAME: newline_any
#PARENT: GLib.RegexMatchFlags
#COMMENT: Overrides the newline definition set when
    creating a new #GRegex, any Unicode newline sequence
    is recognised as a newline. These are '\r', '\n' and '\rn', and the
    single characters U+000B LINE TABULATION, U+000C FORM FEED (FF),
    U+0085 NEXT LINE (NEL), U+2028 LINE SEPARATOR and
    U+2029 PARAGRAPH SEPARATOR.
#NAME: str_hash
#PARENT: GLib
#COMMENT: Converts a string to a hash value.

This function implements the widely used "djb" hash apparently
posted by Daniel Bernstein to comp.lang.c some time ago.  The 32
bit unsigned hash value starts at 5381 and for each byte 'c' in
the string, is updated: `hash = hash * 33 + c`. This function
uses the signed value of each byte.

It can be passed to g_hash_table_new() as the @hash_func parameter,
when using non-%NULL strings as keys in a #GHashTable.
#NAME: variant_is_signature
#PARENT: GLib
#COMMENT: Determines if a given string is a valid D-Bus type signature.  You
should ensure that a string is a valid D-Bus type signature before
passing it to g_variant_new_signature().

D-Bus type signatures consist of zero or more definite #GVariantType
strings in sequence.
#NAME: hook_list
#PARENT: GLib.Hook.unref.none
#COMMENT: a #GHookList
#NAME: channel
#PARENT: GLib.IOChannel.set_close_on_unref.none
#COMMENT: a #GIOChannel
#NAME: buf
#PARENT: GLib.IOChannel.write_chars.IOStatus
#COMMENT: a buffer to write data from
#NAME: array
#PARENT: GLib.PtrArray.remove_index_fast.gpointer
#COMMENT: a #GPtrArray
#NAME: new
#PARENT: GLib.PtrArray
#COMMENT: Creates a new #GPtrArray with a reference count of 1.
#NAME: type
#PARENT: GLib.VariantType.is_tuple.gboolean
#COMMENT: a #GVariantType
#NAME: unlink
#PARENT: GLib
#COMMENT: A wrapper for the POSIX unlink() function. The unlink() function
deletes a name from the filesystem. If this was the last link to the
file and no processes have it opened, the diskspace occupied by the
file is freed.

See your C library manual for more details about unlink(). Note
that on Windows, it is in general not possible to delete files that
are open to some process, or mapped into memory.
#NAME: list
#PARENT: GLib.KeyFile.set_string_list.none
#COMMENT: an array of string values
#NAME: ch
#PARENT: GLib.unichar_decompose.gboolean
#COMMENT: a Unicode character
#NAME: standard_output
#PARENT: GLib.spawn_async_with_pipes.gboolean
#COMMENT: return location for file descriptor to read child's stdout, or %NULL
#NAME: pau_cin_hau
#PARENT: GLib.UnicodeScript
#COMMENT: Pau Cin Hau. Since: 2.42
#NAME: n_fds
#PARENT: GLib.MainContext.query.gint
#COMMENT: length of @fds.
#NAME: length_unlocked
#PARENT: GLib.AsyncQueue.length_unlocked
#COMMENT: the length of the @queue.
#NAME: hostname_is_non_ascii
#PARENT: GLib.hostname_is_non_ascii
#COMMENT: %TRUE if @hostname contains any non-ASCII characters
#NAME: is_destroyed
#PARENT: GLib.Source
#COMMENT: Returns whether @source has been destroyed.

This is important when you operate upon your objects
from within idle handlers, but may have freed the object
before the dispatch of your idle handler.

|[<!-- language="C" -->
static gboolean
idle_callback (gpointer data)
{
  SomeWidget *self = data;
   
  GDK_THREADS_ENTER ();
  // do stuff with self
  self->idle_id = 0;
  GDK_THREADS_LEAVE ();
   
  return G_SOURCE_REMOVE;
}
 
static void
some_widget_do_stuff_later (SomeWidget *self)
{
  self->idle_id = g_idle_add (idle_callback, self);
}
 
static void
some_widget_finalize (GObject *object)
{
  SomeWidget *self = SOME_WIDGET (object);
   
  if (self->idle_id)
    g_source_remove (self->idle_id);
   
  G_OBJECT_CLASS (parent_class)->finalize (object);
}
]|

This will fail in a multi-threaded application if the
widget is destroyed before the idle handler fires due
to the use after free in the callback. A solution, to
this particular problem, is to check to if the source
has already been destroy within the callback.

|[<!-- language="C" -->
static gboolean
idle_callback (gpointer data)
{
  SomeWidget *self = data;
  
  GDK_THREADS_ENTER ();
  if (!g_source_is_destroyed (g_main_current_source ()))
    {
      // do stuff with self
    }
  GDK_THREADS_LEAVE ();
  
  return FALSE;
}
]|
#NAME: value
#PARENT: GLib.Variant.dup_string.utf8
#COMMENT: a string #GVariant instance
#NAME: node
#PARENT: GLib.Node.last_sibling.Node
#COMMENT: a #GNode
#NAME: utf8_casefold
#PARENT: GLib.utf8_casefold
#COMMENT: a newly allocated string, that is a
  case independent form of @str.
#NAME: revents
#PARENT: GLib.PollFD
#COMMENT: a bitwise combination of flags from #GIOCondition, returned
    from the poll() function to indicate which events occurred.
#NAME: save
#PARENT: GLib.base64_encode_close.gsize
#COMMENT: Saved state from g_base64_encode_step()
#NAME: random_double
#PARENT: GLib
#COMMENT: Returns a random #gdouble equally distributed over the range [0..1).
#NAME: index_
#PARENT: GLib.Array.remove_index_fast.gpointer
#COMMENT: the index of the element to remove
#NAME: time_val_from_iso8601
#PARENT: GLib
#COMMENT: Converts a string containing an ISO 8601 encoded date and time
to a #GTimeVal and puts it into @time_.

@iso_date must include year, month, day, hours, minutes, and
seconds. It can optionally include fractions of a second and a time
zone indicator. (In the absence of any time zone indication, the
timestamp is assumed to be in local time.)
#NAME: string
#PARENT: GLib.KeyFile.set_locale_string.none
#COMMENT: a string
#NAME: get_user_data_dir
#PARENT: GLib.get_user_data_dir
#COMMENT: a string owned by GLib that must not be modified
              or freed.
#NAME: builder
#PARENT: GLib.VariantBuilder.clear.none
#COMMENT: a #GVariantBuilder
#NAME: push_head_link
#PARENT: GLib.Queue
#COMMENT: Adds a new element at the head of the queue.
#NAME: failed
#PARENT: GLib.FileError
#COMMENT: Does not correspond to a UNIX error code; this
   is the standard "failed for unspecified reason" error code present
   in all #GError error code enumerations. Returned if no specific
   code applies.
#NAME: brahmi
#PARENT: GLib.UnicodeScript
#COMMENT: Brahmi. Since 2.28
#NAME: group_name
#PARENT: GLib.KeyFile.get_double_list.gdouble
#COMMENT: a group name
#NAME: prepend
#PARENT: GLib.Hook
#COMMENT: Prepends a #GHook on the start of a #GHookList.
#NAME: CompareFunc
#PARENT: GLib
#COMMENT: Specifies the type of a comparison function used to compare two
values.  The function should return a negative integer if the first
value comes before the second, 0 if they are equal, or a positive
integer if the first value comes after the second.
#NAME: try_malloc
#PARENT: GLib.try_malloc
#COMMENT: the allocated memory, or %NULL.
#NAME: get_encoding
#PARENT: GLib.IOChannel.get_encoding
#COMMENT: A string containing the encoding, this string is
  owned by GLib and must not be freed.
#NAME: init
#PARENT: GLib.VariantBuilder
#COMMENT: Initialises a #GVariantBuilder structure.

@type must be non-%NULL.  It specifies the type of container to
construct.  It can be an indefinite type such as
%G_VARIANT_TYPE_ARRAY or a definite type such as "as" or "(ii)".
Maybe, array, tuple, dictionary entry and variant-typed values may be
constructed.

After the builder is initialised, values are added using
g_variant_builder_add_value() or g_variant_builder_add().

After all the child values are added, g_variant_builder_end() frees
the memory associated with the builder and returns the #GVariant that
was created.

This function completely ignores the previous contents of @builder.
On one hand this means that it is valid to pass in completely
uninitialised memory.  On the other hand, this means that if you are
initialising over top of an existing #GVariantBuilder you need to
first call g_variant_builder_clear() in order to avoid leaking
memory.

You must not call g_variant_builder_ref() or
g_variant_builder_unref() on a #GVariantBuilder that was initialised
with this function.  If you ever pass a reference to a
#GVariantBuilder outside of the control of your own code then you
should assume that the person receiving that reference may try to use
reference counting; you should use g_variant_builder_new() instead of
this function.
#NAME: number_too_big
#PARENT: GLib.VariantParseError
#COMMENT: the numerical value is out of range for any type
#NAME: ascii_strcasecmp
#PARENT: GLib
#COMMENT: Compare two strings, ignoring the case of ASCII characters.

Unlike the BSD strcasecmp() function, this only recognizes standard
ASCII letters and ignores the locale, treating all non-ASCII
bytes as if they are not letters.

This function should be used only on strings that are known to be
in encodings where the bytes corresponding to ASCII letters always
represent themselves. This includes UTF-8 and the ISO-8859-*
charsets, but not for instance double-byte encodings like the
Windows Codepage 932, where the trailing bytes of double-byte
characters include all ASCII letters. If you compare two CP932
strings using this function, you will get false matches.

Both @s1 and @s2 must be non-%NULL.
#NAME: func
#PARENT: GLib.List.foreach.none
#COMMENT: the function to call with each element's data
#NAME: dup_string
#PARENT: GLib.Variant
#COMMENT: Similar to g_variant_get_string() except that instead of returning
a constant string, the string is duplicated.

The string will always be UTF-8 encoded.

The return value must be freed using g_free().
#NAME: inconsistent_newline_options
#PARENT: GLib.RegexError
#COMMENT: Inconsistent newline options.
    Since 2.16
#NAME: number
#PARENT: GLib.bit_storage.guint
#COMMENT: a #guint
#NAME: key
#PARENT: GLib.KeyFile.get_boolean.gboolean
#COMMENT: a key
#NAME: new
#PARENT: GLib.Source
#COMMENT: Creates a new #GSource structure. The size is specified to
allow creating structures derived from #GSource that contain
additional data. The size passed in must be at least
`sizeof (GSource)`.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed.
#NAME: atomic
#PARENT: GLib.atomic_int_get.gint
#COMMENT: a pointer to a #gint or #guint
#NAME: Func
#PARENT: GLib
#COMMENT: Specifies the type of functions passed to g_list_foreach() and
g_slist_foreach().
#NAME: Bytes
#PARENT: GLib
#COMMENT: A simple refcounted data type representing an immutable sequence of zero or
more bytes from an unspecified origin.

The purpose of a #GBytes is to keep the memory region that it holds
alive for as long as anyone holds a reference to the bytes.  When
the last reference count is dropped, the memory is released. Multiple
unrelated callers can use byte data in the #GBytes without coordinating
their activities, resting assured that the byte data will not change or
move while they hold a reference.

A #GBytes can come from many different origins that may have
different procedures for freeing the memory region.  Examples are
memory from g_malloc(), from memory slices, from a #GMappedFile or
memory from other allocators.

#GBytes work well as keys in #GHashTable. Use g_bytes_equal() and
g_bytes_hash() as parameters to g_hash_table_new() or g_hash_table_new_full().
#GBytes can also be used as keys in a #GTree by passing the g_bytes_compare()
function to g_tree_new().

The data pointed to by this bytes must not be modified. For a mutable
array of bytes see #GByteArray. Use g_bytes_unref_to_array() to create a
mutable array for a #GBytes sequence. To create an immutable #GBytes from
a mutable #GByteArray, use the g_byte_array_free_to_bytes() function.
#NAME: last
#PARENT: GLib.List.last
#COMMENT: the last element in the #GList,
    or %NULL if the #GList has no elements
#NAME: date
#PARENT: GLib.Date.set_day.none
#COMMENT: a #GDate
#NAME: strrstr
#PARENT: GLib
#COMMENT: Searches the string @haystack for the last occurrence
of the string @needle.
#NAME: key_file
#PARENT: GLib.KeyFile.set_locale_string_list.none
#COMMENT: a #GKeyFile
#NAME: value
#PARENT: GLib.Variant.get_boolean.gboolean
#COMMENT: a boolean #GVariant instance
#NAME: buf
#PARENT: GLib.IOChannel.write.IOError
#COMMENT: the buffer containing the data to write
#NAME: unref_to_array
#PARENT: GLib.Bytes
#COMMENT: Unreferences the bytes, and returns a new mutable #GByteArray containing
the same byte data.

As an optimization, the byte data is transferred to the array without copying
if this was the last reference to bytes and bytes was created with
g_bytes_new(), g_bytes_new_take() or g_byte_array_free_to_bytes(). In all
other cases the data is copied.
#NAME: tz
#PARENT: GLib.TimeZone.is_dst.gboolean
#COMMENT: a #GTimeZone
#NAME: set_description
#PARENT: GLib.OptionContext
#COMMENT: Adds a string to be displayed in `--help` output after the list
of options. This text often includes a bug reporting address.

Note that the summary is translated (see
g_option_context_set_translate_func()).
#NAME: DestroyNotify
#PARENT: GLib
#COMMENT: Specifies the type of function which is called when a data element
is destroyed. It is passed the pointer to the data element and
should free any memory and resources allocated for it.
#NAME: hex
#PARENT: GLib.TokenType
#COMMENT: a hex integer
#NAME: array
#PARENT: GLib.byte_array_free.guint8
#COMMENT: a #GByteArray
#NAME: space_separator
#PARENT: GLib.UnicodeType
#COMMENT: General category "Separator, Space" (Zs)
#NAME: mende_kikakui
#PARENT: GLib.UnicodeScript
#COMMENT: Mende Kikakui. Since: 2.42
#NAME: SEARCHPATH_SEPARATOR_S
#PARENT: GLib
#COMMENT: The search path separator as a string.
This is ":" on UNIX machines and ";" under Windows.
#NAME: ref
#PARENT: GLib.KeyFile
#COMMENT: Increases the reference count of @key_file.
#NAME: matches
#PARENT: GLib.Error
#COMMENT: Returns %TRUE if @error matches @domain and @code, %FALSE
otherwise. In particular, when @error is %NULL, %FALSE will
be returned.

If @domain contains a `FAILED` (or otherwise generic) error code,
you should generally not check for it explicitly, but should
instead treat any not-explicitly-recognized error code as being
equilalent to the `FAILED` code. This way, if the domain is
extended in the future to provide a more specific error code for
a certain case, your code will still work.
#NAME: get_boolean_list
#PARENT: GLib.KeyFile.get_boolean_list
#COMMENT: 
   the values associated with the key as a list of booleans, or %NULL if the
   key was not found or could not be parsed. The returned list of booleans
   should be freed with g_free() when no longer needed.
#NAME: get_strv
#PARENT: GLib.Variant
#COMMENT: Gets the contents of an array of strings #GVariant.  This call
makes a shallow copy; the return result should be released with
g_free(), but the individual strings must not be modified.

If @length is non-%NULL then the number of elements in the result
is stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.
#NAME: end_time
#PARENT: GLib.Cond.wait_until.gboolean
#COMMENT: the monotonic time to wait until
#NAME: user_data
#PARENT: GLib.AsyncQueue.sort_unlocked.none
#COMMENT: user data passed to @func
#NAME: treat_cdata_as_text
#PARENT: GLib.MarkupParseFlags
#COMMENT: When this flag is set, CDATA marked
    sections are not passed literally to the @passthrough function of
    the parser. Instead, the content of the section (without the
    `<![CDATA[` and `]]>`) is
    passed to the @text function. This flag was added in GLib 2.12
#NAME: SpawnError
#PARENT: GLib
#COMMENT: Error codes returned by spawning processes.
#NAME: remove_all
#PARENT: GLib.SList.remove_all
#COMMENT: new head of @list
#NAME: malloc0
#PARENT: GLib.malloc0
#COMMENT: a pointer to the allocated memory
#NAME: hook_list
#PARENT: GLib.Hook.insert_sorted.none
#COMMENT: a #GHookList
#NAME: noexec
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `ENOEXEC`
#NAME: CSET_A_2_Z
#PARENT: GLib
#COMMENT: The set of uppercase ASCII alphabet characters.
Used for specifying valid identifier characters
in #GScannerConfig.
#NAME: new
#PARENT: GLib.MarkupParseContext
#COMMENT: Creates a new parse context. A parse context is used to parse
marked-up documents. You can feed any number of documents into
a context, as long as no errors occur; once an error occurs,
the parse context can't continue to parse text (you have to
free it and create a new parse context).
#NAME: unicode_canonical_decomposition
#PARENT: GLib.unicode_canonical_decomposition
#COMMENT: a newly allocated string of Unicode characters.
  @result_len is set to the resulting length of the string.
#NAME: get_title
#PARENT: GLib.BookmarkFile.get_title
#COMMENT: a newly allocated string or %NULL if the specified
  URI cannot be found.
#NAME: notdir
#PARENT: GLib.FileError
#COMMENT: A file that isn't a directory was specified when
    a directory is required.
#NAME: data
#PARENT: GLib.dataset_id_set_data_full.none
#COMMENT: the data element.
#NAME: data
#PARENT: GLib.timeout_add_seconds.guint
#COMMENT: data to pass to @function
#NAME: uri_unescape_string
#PARENT: GLib
#COMMENT: Unescapes a whole escaped string.

If any of the characters in @illegal_characters or the character zero appears
as an escaped character in @escaped_string then that is an error and %NULL
will be returned. This is useful it you want to avoid for instance having a
slash being expanded in an escaped path element, which might confuse pathname
handling.
#NAME: number_out_of_range
#PARENT: GLib.VariantParseError
#COMMENT: the numerical value is out of range of the given type
#NAME: month
#PARENT: GLib.date_valid_dmy.gboolean
#COMMENT: month
#NAME: pid
#PARENT: GLib.child_watch_add_full.guint
#COMMENT: process to watch. On POSIX the positive pid of a child process. On
Windows a handle for a process (which doesn't have to be a child).
#NAME: ref
#PARENT: GLib.VariantBuilder.ref
#COMMENT: a new reference to @builder
#NAME: HookCompareFunc
#PARENT: GLib
#COMMENT: Defines the type of function used to compare #GHook elements in
g_hook_insert_sorted().
#NAME: month
#PARENT: GLib.Date
#COMMENT: the day of the day-month-year representation of the date,
    as a number between 1 and 12
#NAME: key
#PARENT: GLib.KeyFile.has_key.gboolean
#COMMENT: a key name
#NAME: idle_add
#PARENT: GLib.idle_add
#COMMENT: the ID (greater than 0) of the event source.
#NAME: lookup_value
#PARENT: GLib.VariantDict
#COMMENT: Looks up a value in a #GVariantDict.

If @key is not found in @dictionary, %NULL is returned.

The @expected_type string specifies what type of value is expected.
If the value associated with @key has a different type then %NULL is
returned.

If the key is found and the value has the correct type, it is
returned.  If @expected_type was specified then any non-%NULL return
value will have this type.
#NAME: MemVTable
#PARENT: GLib
#COMMENT: A set of functions used to perform memory allocation. The same #GMemVTable must
be used for all allocations in the same program; a call to g_mem_set_vtable(),
if it exists, should be prior to any use of GLib.
#NAME: utf8_offset_to_pointer
#PARENT: GLib.utf8_offset_to_pointer
#COMMENT: the resulting pointer
#NAME: KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean set to true
if the application is D-Bus activatable.
#NAME: test_rand_int
#PARENT: GLib.test_rand_int
#COMMENT: a random number from the seeded random number generator.
#NAME: parse_debug_string
#PARENT: GLib.parse_debug_string
#COMMENT: the combined set of bit flags.
#NAME: c
#PARENT: GLib.utf8_strchr.utf8
#COMMENT: a Unicode character
#NAME: hash_table
#PARENT: GLib.HashTable.get_values.gpointer
#COMMENT: a #GHashTable
#NAME: key_file
#PARENT: GLib.KeyFile.get_boolean_list.gboolean
#COMMENT: a #GKeyFile
#NAME: LogFunc
#PARENT: GLib
#COMMENT: Specifies the prototype of log handler functions.

The default log handler, g_log_default_handler(), automatically appends a
new-line character to @message when printing it. It is advised that any
custom log handler functions behave similarly, so that logging calls in user
code do not need modifying to add a new-line character to the message if the
log handler is changed.
#NAME: unix_signal_source_new
#PARENT: GLib.unix_signal_source_new
#COMMENT: A newly created #GSource
#NAME: in
#PARENT: GLib.IOCondition
#COMMENT: There is data to read.
#NAME: prev
#PARENT: GLib.SequenceIter
#COMMENT: Returns an iterator pointing to the previous position before @iter.
If @iter is the begin iterator, the begin iterator is returned.
#NAME: n
#PARENT: GLib.utf8_strncpy.utf8
#COMMENT: character count
#NAME: get_iter_at_pos
#PARENT: GLib.Sequence.get_iter_at_pos
#COMMENT: The #GSequenceIter at position @pos
#NAME: ascii_digit_value
#PARENT: GLib.ascii_digit_value
#COMMENT: If @c is a decimal digit (according to g_ascii_isdigit()),
   its numeric value. Otherwise, -1.
#NAME: GINTPTR_FORMAT
#PARENT: GLib
#COMMENT: This is the platform dependent conversion specifier for scanning
and printing values of type #gintptr.
#NAME: destroy
#PARENT: GLib.OptionGroup.new.OptionGroup
#COMMENT: a function that will be called to free @user_data, or %NULL
#NAME: key
#PARENT: GLib.KeyFile.set_value.none
#COMMENT: a key
#NAME: RecMutex
#PARENT: GLib
#COMMENT: The GRecMutex struct is an opaque data structure to represent a
recursive mutex. It is similar to a #GMutex with the difference
that it is possible to lock a GRecMutex multiple times in the same
thread without deadlock. When doing so, care has to be taken to
unlock the recursive mutex as often as it has been locked.

If a #GRecMutex is allocated in static storage then it can be used
without initialisation.  Otherwise, you should call
g_rec_mutex_init() on it and g_rec_mutex_clear() when done.

A GRecMutex should only be accessed with the
g_rec_mutex_ functions.
#NAME: memdup
#PARENT: GLib
#COMMENT: Allocates @byte_size bytes of memory, and copies @byte_size bytes into it
from @mem. If @mem is %NULL it returns %NULL.
#NAME: args
#PARENT: GLib.Error.new_valist.Error
#COMMENT: #va_list of parameters for the message format
#NAME: get_byte
#PARENT: GLib.Variant.get_byte
#COMMENT: a #guchar
#NAME: 
#PARENT: GLib.Error.new.Error...
#COMMENT: parameters for message format
#NAME: push_sorted
#PARENT: GLib.AsyncQueue
#COMMENT: Inserts @data into @queue using @func to determine the new
position.

This function requires that the @queue is sorted before pushing on
new elements, see g_async_queue_sort().

This function will lock @queue before it sorts the queue and unlock
it when it is finished.

For an example of @func see g_async_queue_sort().
#NAME: ref_thread_default
#PARENT: GLib.MainContext.ref_thread_default
#COMMENT: the thread-default #GMainContext. Unref
    with g_main_context_unref() when you are done with it.
#NAME: count
#PARENT: GLib.IOChannel.write.IOError
#COMMENT: the number of bytes to write
#NAME: mem_profile
#PARENT: GLib
#COMMENT: Outputs a summary of memory usage.

It outputs the frequency of allocations of different sizes,
the total number of bytes which have been allocated,
the total number of bytes which have been freed,
and the difference between the previous two values, i.e. the number of bytes
still in use.

Note that this function will not output anything unless you have
previously installed the #glib_mem_profiler_table with g_mem_set_vtable().
#NAME: p
#PARENT: GLib.utf8_strchr.utf8
#COMMENT: a nul-terminated UTF-8 encoded string
#NAME: file_get_contents
#PARENT: GLib
#COMMENT: Reads an entire file into allocated memory, with good error
checking.

If the call was successful, it returns %TRUE and sets @contents to the file
contents and @length to the length of the file contents in bytes. The string
stored in @contents will be nul-terminated, so for text files you can pass
%NULL for the @length argument. If the call was not successful, it returns
%FALSE and sets @error. The error domain is #G_FILE_ERROR. Possible error
codes are those in the #GFileError enumeration. In the error case,
@contents is set to %NULL and @length is set to zero.
#NAME: new_uint16
#PARENT: GLib.Variant
#COMMENT: Creates a new uint16 #GVariant instance.
#NAME: datetime
#PARENT: GLib.DateTime.add_seconds.DateTime
#COMMENT: a #GDateTime
#NAME: seq
#PARENT: GLib.Sequence.insert_sorted.SequenceIter
#COMMENT: a #GSequence
#NAME: find_func
#PARENT: GLib.Hook.find_func
#COMMENT: the #GHook with the given @func or %NULL if no matching
    #GHook is found
#NAME: failed
#PARENT: GLib.VariantParseError
#COMMENT: generic error (unused)
#NAME: single_byte_match_in_lookbehind
#PARENT: GLib.RegexError
#COMMENT: \\C not allowed in
    lookbehind assertion. Since 2.16
#NAME: new_hook
#PARENT: GLib.Hook.compare_ids.gint
#COMMENT: a #GHook
#NAME: add_seconds
#PARENT: GLib.DateTime
#COMMENT: Creates a copy of @datetime and adds the specified number of seconds.
Add negative values to subtract seconds.
#NAME: insert_sorted
#PARENT: GLib.SList
#COMMENT: Inserts a new element into the list, using the given
comparison function to determine its position.
#NAME: haystack
#PARENT: GLib.strrstr.utf8
#COMMENT: a nul-terminated string
#NAME: test_fail
#PARENT: GLib
#COMMENT: Indicates that a test failed. This function can be called
multiple times from the same test. You can use this function
if your test failed in a recoverable way.

Do not use this function if the failure of a test could cause
other tests to malfunction.

Calling this function will not stop the test from running, you
need to return from the test function yourself. So you can
produce additional diagnostic messages or even continue running
the test.

If not called from inside a test, this function does nothing.
#NAME: get_priority
#PARENT: GLib.Source.get_priority
#COMMENT: the priority of the source
#NAME: variant_parse_error_print_context
#PARENT: GLib.variant_parse_error_print_context
#COMMENT: the printed message
#NAME: get_type
#PARENT: GLib.Variant.get_type
#COMMENT: a #GVariantType
#NAME: bytes
#PARENT: GLib.Variant.new_from_bytes.Variant
#COMMENT: a #GBytes
#NAME: first_path
#PARENT: GLib.test_get_filename.utf8
#COMMENT: the first segment of the pathname
#NAME: p
#PARENT: GLib.utf8_find_prev_char.utf8
#COMMENT: pointer to some position within @str
#NAME: find
#PARENT: GLib.Queue
#COMMENT: Finds the first link in @queue which contains @data.
#NAME: MININT8
#PARENT: GLib
#COMMENT: The minimum value which can be held in a #gint8.
#NAME: hash_table
#PARENT: GLib.HashTable.unref.none
#COMMENT: a valid #GHashTable
#NAME: year
#PARENT: GLib.DateTime.new_local.DateTime
#COMMENT: the year component of the date
#NAME: string
#PARENT: GLib.variant_type_string_scan.gboolean
#COMMENT: a pointer to any string
#NAME: set_callback
#PARENT: GLib.Source
#COMMENT: Sets the callback function for a source. The callback for a source is
called from the source's dispatch function.

The exact type of @func depends on the type of source; ie. you
should not count on @func being called with @data as its first
parameter.

Typically, you won't use this function. Instead use functions specific
to the type of source you are using.
#NAME: MAXINT16
#PARENT: GLib
#COMMENT: The maximum value which can be held in a #gint16.
#NAME: end
#PARENT: GLib.Rand.int_range.gint32
#COMMENT: upper open bound of the interval
#NAME: list
#PARENT: GLib.List.free_1.none
#COMMENT: a #GList element
#NAME: hex_code_too_large
#PARENT: GLib.RegexError
#COMMENT: Character value in "\\x{...}" sequence
    is too large. Since 2.16
#NAME: str
#PARENT: GLib.str_has_suffix.gboolean
#COMMENT: a nul-terminated string
#NAME: ref
#PARENT: GLib.PtrArray.ref
#COMMENT: The passed in #GPtrArray
#NAME: invalid_value
#PARENT: GLib.BookmarkFileError
#COMMENT: a requested field was not found
#NAME: data_destroy
#PARENT: GLib.Sequence.new.Sequence
#COMMENT: a #GDestroyNotify function, or %NULL
#NAME: dest
#PARENT: GLib.sequence_move.none
#COMMENT: a #GSequenceIter pointing to the position to which
    the item is moved
#NAME: ref_thread_default
#PARENT: GLib.MainContext
#COMMENT: Gets the thread-default #GMainContext for this thread, as with
g_main_context_get_thread_default(), but also adds a reference to
it with g_main_context_ref(). In addition, unlike
g_main_context_get_thread_default(), if the thread-default context
is the global default context, this will return that #GMainContext
(with a ref added to it) rather than returning %NULL.
#NAME: hash_table_replace
#PARENT: GLib.hash_table_replace
#COMMENT: %TRUE of the key did not exist yet
#NAME: string_len
#PARENT: GLib.Regex.replace_literal.utf8
#COMMENT: the length of @string, or -1 if @string is nul-terminated
#NAME: full_path
#PARENT: GLib.BookmarkFile.load_from_data_dirs.gboolean
#COMMENT: return location for a string containing the full path
  of the file, or %NULL
#NAME: sort
#PARENT: GLib.SList
#COMMENT: Sorts a #GSList using the given comparison function.
#NAME: stamp
#PARENT: GLib.BookmarkFile.get_app_info.gboolean
#COMMENT: return location for the last registration time, or %NULL
#NAME: new_local
#PARENT: GLib.DateTime
#COMMENT: Creates a new #GDateTime corresponding to the given date and time in
the local time zone.

This call is equivalent to calling g_date_time_new() with the time
zone returned by g_time_zone_new_local().
#NAME: data
#PARENT: GLib.MainContext.invoke_full.none
#COMMENT: data to pass to @function
#NAME: set_encoding
#PARENT: GLib.IOChannel
#COMMENT: Sets the encoding for the input/output of the channel.
The internal encoding is always UTF-8. The default encoding
for the external file is UTF-8.

The encoding %NULL is safe to use with binary data.

The encoding can only be set if one of the following conditions
is true:

- The channel was just created, and has not been written to or read from yet.

- The channel is write-only.

- The channel is a file, and the file pointer was just repositioned
  by a call to g_io_channel_seek_position(). (This flushes all the
  internal buffers.)

- The current encoding is %NULL or UTF-8.

- One of the (new API) read functions has just returned %G_IO_STATUS_EOF
  (or, in the case of g_io_channel_read_to_end(), %G_IO_STATUS_NORMAL).

-  One of the functions g_io_channel_read_chars() or
   g_io_channel_read_unichar() has returned %G_IO_STATUS_AGAIN or
   %G_IO_STATUS_ERROR. This may be useful in the case of
   %G_CONVERT_ERROR_ILLEGAL_SEQUENCE.
   Returning one of these statuses from g_io_channel_read_line(),
   g_io_channel_read_line_string(), or g_io_channel_read_to_end()
   does not guarantee that the encoding can be changed.

Channels which do not meet one of the above conditions cannot call
g_io_channel_seek_position() with an offset of %G_SEEK_CUR, and, if
they are "seekable", cannot call g_io_channel_write_chars() after
calling one of the API "read" functions.
#NAME: contents
#PARENT: GLib.file_get_contents.gboolean
#COMMENT: location to store an allocated string, use g_free() to free
    the returned string
#NAME: v
#PARENT: GLib.double_hash.guint
#COMMENT: a pointer to a #gdouble key
#NAME: str
#PARENT: GLib.strv_contains.gboolean
#COMMENT: a string
#NAME: func
#PARENT: GLib.Hook.find_func_data.Hook
#COMMENT: the function to find
#NAME: pattern_match_simple
#PARENT: GLib
#COMMENT: Matches a string against a pattern given as a string. If this
function is to be called in a loop, it's more efficient to compile
the pattern once with g_pattern_spec_new() and call
g_pattern_match_string() repeatedly.
#NAME: strfreev
#PARENT: GLib
#COMMENT: Frees a %NULL-terminated array of strings, as well as each
string it contains.

If @str_array is %NULL, this function simply returns.
#NAME: type
#PARENT: GLib.VariantType.is_array.gboolean
#COMMENT: a #GVariantType
#NAME: user_data
#PARENT: GLib.io_add_watch_full.guint
#COMMENT: user data to pass to @func
#NAME: list
#PARENT: GLib.List.insert_sorted.gpointer
#COMMENT: a pointer to a #GList, this must point to the top of the
    already sorted list
#NAME: set_time
#PARENT: GLib.Date
#COMMENT: Sets the value of a date from a #GTime value.
The time to date conversion is done using the user's current timezone.
#NAME: compile_options
#PARENT: GLib.Regex.split_simple.utf8
#COMMENT: compile options for the regular expression, or 0
#NAME: load_from_data
#PARENT: GLib.BookmarkFile
#COMMENT: Loads a bookmark file from memory into an empty #GBookmarkFile
structure.  If the object cannot be created then @error is set to a
#GBookmarkFileError.
#NAME: datetime
#PARENT: GLib.DateTime.add_full.DateTime
#COMMENT: a #GDateTime
#NAME: append
#PARENT: GLib.IOFlags
#COMMENT: turns on append mode, corresponds to %O_APPEND
    (see the documentation of the UNIX open() syscall)
#NAME: len
#PARENT: GLib.filename_from_utf8.guint8
#COMMENT: the length of the string, or -1 if the string is
                nul-terminated.
#NAME: hook_list
#PARENT: GLib.hook_unref.none
#COMMENT: a #GHookList
#NAME: date
#PARENT: GLib.Date.strftime.gsize
#COMMENT: valid #GDate
#NAME: symbol
#PARENT: GLib.Scanner.scope_remove_symbol.none
#COMMENT: the symbol to remove
#NAME: utf8_validate
#PARENT: GLib.utf8_validate
#COMMENT: %TRUE if the text was valid UTF-8
#NAME: data
#PARENT: GLib.ByteArray
#COMMENT: a pointer to the element data. The data may be moved as
    elements are added to the #GByteArray
#NAME: strdelimit
#PARENT: GLib
#COMMENT: Converts any delimiter characters in @string to @new_delimiter.
Any characters in @string which are found in @delimiters are
changed to the @new_delimiter character. Modifies @string in place,
and returns @string itself, not a copy. The return value is to
allow nesting such as
|[<!-- language="C" -->
  g_ascii_strup (g_strdelimit (str, "abc", '?'))
]|
#NAME: hash_table
#PARENT: GLib.HashTable.steal_all.none
#COMMENT: a #GHashTable
#NAME: seek_position
#PARENT: GLib.IOChannel.seek_position
#COMMENT: the status of the operation.
#NAME: array
#PARENT: GLib.PtrArray.unref.none
#COMMENT: A #GPtrArray
#NAME: add_unix_fd
#PARENT: GLib.Source.add_unix_fd
#COMMENT: an opaque tag
#NAME: valid_month
#PARENT: GLib.Date.valid_month
#COMMENT: %TRUE if the month is valid
#NAME: length
#PARENT: GLib.KeyFile.set_boolean_list.none
#COMMENT: length of @list
#NAME: Private
#PARENT: GLib
#COMMENT: The #GPrivate struct is an opaque data structure to represent a
thread-local data key. It is approximately equivalent to the
pthread_setspecific()/pthread_getspecific() APIs on POSIX and to
TlsSetValue()/TlsGetValue() on Windows.

If you don't already know why you might want this functionality,
then you probably don't need it.

#GPrivate is a very limited resource (as far as 128 per program,
shared between all libraries). It is also not possible to destroy a
#GPrivate after it has been used. As such, it is only ever acceptable
to use #GPrivate in static scope, and even then sparingly so.

See G_PRIVATE_INIT() for a couple of examples.

The #GPrivate structure should be considered opaque.  It should only
be accessed via the g_private_ functions.
#NAME: name
#PARENT: GLib.Source.set_name_by_id.none
#COMMENT: debug name for the source
#NAME: queue
#PARENT: GLib.AsyncQueue.sort.none
#COMMENT: a #GAsyncQueue
#NAME: has_application
#PARENT: GLib.BookmarkFile
#COMMENT: Checks whether the bookmark for @uri inside @bookmark has been
registered by application @name.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
#NAME: classify
#PARENT: GLib.Variant.classify
#COMMENT: the #GVariantClass of @value
#NAME: initial_punctuation
#PARENT: GLib.UnicodeType
#COMMENT: General category "Punctuation, Initial quote" (Pi)
#NAME: new_with_data
#PARENT: GLib.Tree
#COMMENT: Creates a new #GTree with a comparison function that accepts user data.
See g_tree_new() for more details.
#NAME: new_uint32
#PARENT: GLib.Variant
#COMMENT: Creates a new uint32 #GVariant instance.
#NAME: destroy
#PARENT: GLib.Scanner
#COMMENT: Frees all memory used by the #GScanner.
#NAME: md5
#PARENT: GLib.ChecksumType
#COMMENT: Use the MD5 hashing algorithm
#NAME: SequenceIter
#PARENT: GLib
#COMMENT: The #GSequenceIter struct is an opaque data type representing an
iterator pointing into a #GSequence.
#NAME: pool
#PARENT: GLib.ThreadPool.get_num_threads.guint
#COMMENT: a #GThreadPool
#NAME: queue
#PARENT: GLib.Queue.get_length.guint
#COMMENT: a #GQueue
#NAME: unichar_iscntrl
#PARENT: GLib.unichar_iscntrl
#COMMENT: %TRUE if @c is a control character
#NAME: key
#PARENT: GLib.hash_table_remove.gboolean
#COMMENT: the key to remove
#NAME: new_from_data
#PARENT: GLib.Variant.new_from_data
#COMMENT: a new floating #GVariant of type @type
#NAME: 
#PARENT: GLib.printerr.none...
#COMMENT: the parameters to insert into the format string
#NAME: mutex
#PARENT: GLib.Mutex.lock.none
#COMMENT: a #GMutex
#NAME: set_year
#PARENT: GLib.Date
#COMMENT: Sets the year for a #GDate. If the resulting day-month-year
triplet is invalid, the date will be invalid.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.add_group.none
#COMMENT: a #GBookmarkFile
#NAME: MAXINT32
#PARENT: GLib
#COMMENT: The maximum value which can be held in a #gint32.
#NAME: bad_month
#PARENT: GLib.DateMonth
#COMMENT: invalid value
#NAME: list
#PARENT: GLib.List.length.guint
#COMMENT: a #GList, this must point to the top of the list
#NAME: atomic_int_add
#PARENT: GLib.atomic_int_add
#COMMENT: the value of @atomic before the add, signed
#NAME: func
#PARENT: GLib.set_printerr_handler.PrintFunc
#COMMENT: the new error message handler
#NAME: lookup_iter
#PARENT: GLib.Sequence.lookup_iter
#COMMENT: an #GSequenceIter pointing to the position of
    the first item found equal to @data according to @cmp_func
    and @cmp_data, or %NULL if no such item exists
#NAME: program
#PARENT: GLib.find_program_in_path.utf8
#COMMENT: a program name in the GLib file name encoding
#NAME: equal
#PARENT: GLib.Variant.equal
#COMMENT: %TRUE if @one and @two are equal
#NAME: get_length
#PARENT: GLib.Queue.get_length
#COMMENT: the number of items in @queue
#NAME: warn
#PARENT: GLib.Scanner
#COMMENT: Outputs a warning message, via the #GScanner message handler.
#NAME: end
#PARENT: GLib.Sequence.remove_range.none
#COMMENT: a #GSequenceIter
#NAME: format
#PARENT: GLib.vfprintf.gint
#COMMENT: a standard printf() format string, but notice
         [string precision pitfalls][string-precision]
#NAME: iter
#PARENT: GLib.VariantIter.init.gsize
#COMMENT: a pointer to a #GVariantIter
#NAME: events
#PARENT: GLib.PollFD
#COMMENT: a bitwise combination from #GIOCondition, specifying which
    events should be polled for. Typically for reading from a file
    descriptor you would use %G_IO_IN | %G_IO_HUP | %G_IO_ERR, and
    for writing you would use %G_IO_OUT | %G_IO_ERR.
#NAME: foreach
#PARENT: GLib.PtrArray
#COMMENT: Calls a function for each element of a #GPtrArray.
#NAME: test_rand_int_range
#PARENT: GLib
#COMMENT: Get a reproducible random integer number out of a specified range,
see g_test_rand_int() for details on test case random numbers.
#NAME: timer
#PARENT: GLib.Timer.destroy.none
#COMMENT: a #GTimer to destroy.
#NAME: clear
#PARENT: GLib.VariantDict
#COMMENT: Releases all memory associated with a #GVariantDict without freeing
the #GVariantDict structure itself.

It typically only makes sense to do this on a stack-allocated
#GVariantDict if you want to abort building the value part-way
through.  This function need not be called if you call
g_variant_dict_end() and it also doesn't need to be called on dicts
allocated with g_variant_dict_new (see g_variant_dict_unref() for
that).

It is valid to call this function on either an initialised
#GVariantDict or one that was previously cleared by an earlier call
to g_variant_dict_clear() but it is not valid to call this function
on uninitialised memory.
#NAME: parent
#PARENT: GLib.Node.prepend.Node
#COMMENT: the #GNode to place the new #GNode under
#NAME: stderr_to_dev_null
#PARENT: GLib.SpawnFlags
#COMMENT: the child's standard error will be discarded.
#NAME: atomic
#PARENT: GLib.atomic_int_or.guint
#COMMENT: a pointer to a #gint or #guint
#NAME: intern_string
#PARENT: GLib.intern_string
#COMMENT: a canonical representation for the string
#NAME: length
#PARENT: GLib.IOChannel.read_to_end.IOStatus
#COMMENT: location to store length of the data
#NAME: day
#PARENT: GLib.Date.valid_day.gboolean
#COMMENT: day to check
#NAME: mutex
#PARENT: GLib.Cond.wait_until.gboolean
#COMMENT: a #GMutex that is currently locked
#NAME: user_data
#PARENT: GLib.Tree.search.gpointer
#COMMENT: the data passed as the second argument to @search_func
#NAME: parse
#PARENT: GLib.MarkupError
#COMMENT: document was ill-formed
#NAME: get_keys
#PARENT: GLib.HashTable.get_keys
#COMMENT: a #GList containing all the keys inside the hash
    table. The content of the list is owned by the hash table and
    should not be modified or freed. Use g_list_free() when done
    using the list.
#NAME: context
#PARENT: GLib.Source.attach.guint
#COMMENT: a #GMainContext (if %NULL, the default context will be used)
#NAME: range_get_midpoint
#PARENT: GLib.Sequence.range_get_midpoint
#COMMENT: a #GSequenceIter pointing somewhere in the
   (@begin, @end) range
#NAME: index_
#PARENT: GLib.Array.remove_index.gpointer
#COMMENT: the index of the element to remove
#NAME: begin
#PARENT: GLib.Rand.double_range.gdouble
#COMMENT: lower closed bound of the interval
#NAME: format_string
#PARENT: GLib.Variant.check_format_string.gboolean
#COMMENT: a valid #GVariant format string
#NAME: get_string
#PARENT: GLib.MatchInfo.get_string
#COMMENT: the string searched with @match_info
#NAME: tz
#PARENT: GLib.TimeZone.unref.none
#COMMENT: a #GTimeZone
#NAME: input_file
#PARENT: GLib.Scanner
#COMMENT: Prepares to scan a file.
#NAME: try_realloc_n
#PARENT: GLib.try_realloc_n
#COMMENT: the allocated memory, or %NULL.
#NAME: non_leafs
#PARENT: GLib.TraverseFlags
#COMMENT: identical to %G_TRAVERSE_NON_LEAVES.
#NAME: multiline
#PARENT: GLib.RegexCompileFlags
#COMMENT: By default, GRegex treats the strings as consisting
    of a single line of characters (even if it actually contains
    newlines). The "start of line" metacharacter ("^") matches only
    at the start of the string, while the "end of line" metacharacter
    ("$") matches only at the end of the string, or before a terminating
    newline (unless #G_REGEX_DOLLAR_ENDONLY is set). When
    #G_REGEX_MULTILINE is set, the "start of line" and "end of line"
    constructs match immediately following or immediately before any
    newline in the string, respectively, as well as at the very start
    and end. This can be changed within a pattern by a "(?m)" option
    setting.
#NAME: illegal_characters
#PARENT: GLib.uri_unescape_segment.utf8
#COMMENT: An optional string of illegal characters not to be allowed, may be %NULL
#NAME: sort
#PARENT: GLib.List
#COMMENT: Sorts a #GList using the given comparison function. The algorithm
used is a stable sort.
#NAME: value
#PARENT: GLib.Variant.get_strv.utf8
#COMMENT: an array of strings #GVariant
#NAME: position
#PARENT: GLib.SList
#COMMENT: Gets the position of the given element
in the #GSList (starting from 0).
#NAME: context
#PARENT: GLib.MainContext.ref.MainContext
#COMMENT: a #GMainContext
#NAME: key
#PARENT: GLib.VariantDict.remove.gboolean
#COMMENT: the key to remove
#NAME: hook_list
#PARENT: GLib.hook_prepend.none
#COMMENT: a #GHookList
#NAME: destroy_data
#PARENT: GLib.test_queue_destroy.none
#COMMENT: Destroy callback data.
#NAME: idle_add
#PARENT: GLib
#COMMENT: Adds a function to be called whenever there are no higher priority
events pending to the default main loop. The function is given the
default idle priority, #G_PRIORITY_DEFAULT_IDLE.  If the function
returns %FALSE it is automatically removed from the list of event
sources and will not be called again.

This internally creates a main loop source using g_idle_source_new()
and attaches it to the global #GMainContext using g_source_attach(), so
the callback will be invoked in whichever thread is running that main
context. You can do these steps manually if you need greater control or to
use a custom main context.
#NAME: DataForeachFunc
#PARENT: GLib
#COMMENT: Specifies the type of function passed to g_dataset_foreach(). It is
called with each #GQuark id and associated data element, together
with the @user_data parameter supplied to g_dataset_foreach().
#NAME: queue
#PARENT: GLib.Queue.push_head.none
#COMMENT: a #GQueue.
#NAME: get_values
#PARENT: GLib.HashTable
#COMMENT: Retrieves every value inside @hash_table. The returned data
is valid until @hash_table is modified.

This iterates over every entry in the hash table to build its return value.
To iterate over the entries in a #GHashTable more efficiently, use a
#GHashTableIter.
#NAME: level_error
#PARENT: GLib.LogLevelFlags
#COMMENT: log level for errors, see g_error().
    This level is also used for messages produced by g_assert().
#NAME: len
#PARENT: GLib.Array.prepend_vals.gpointer
#COMMENT: the number of elements to prepend
#NAME: index
#PARENT: GLib.Queue.index
#COMMENT: the position of the first element in @queue which
    contains @data, or -1 if no element in @queue contains @data
#NAME: timeout_add_full
#PARENT: GLib.timeout_add_full
#COMMENT: the ID (greater than 0) of the event source.
#NAME: unichar_get_mirror_char
#PARENT: GLib
#COMMENT: In Unicode, some characters are "mirrored". This means that their
images are mirrored horizontally in text that is laid out from right
to left. For instance, "(" would become its mirror image, ")", in
right-to-left text.

If @ch has the Unicode mirrored property and there is another unicode
character that typically has a glyph that is the mirror image of @ch's
glyph and @mirrored_ch is set, it puts that character in the address
pointed to by @mirrored_ch.  Otherwise the original character is put.
#NAME: iter
#PARENT: GLib.HashTableIter.steal.none
#COMMENT: an initialized #GHashTableIter
#NAME: fd
#PARENT: GLib.UnixFDSourceFunc.gboolean
#COMMENT: the fd that triggered the event
#NAME: tv
#PARENT: GLib.DateTime.to_timeval.gboolean
#COMMENT: a #GTimeVal to modify
#NAME: descendant
#PARENT: GLib.Node.is_ancestor.gboolean
#COMMENT: a #GNode
#NAME: may
#PARENT: GLib.DateMonth
#COMMENT: May
#NAME: month
#PARENT: GLib.date_valid_month.gboolean
#COMMENT: month
#NAME: address
#PARENT: GLib.bit_lock.none
#COMMENT: a pointer to an integer
#NAME: working_directory
#PARENT: GLib.spawn_async.gboolean
#COMMENT: child's current working directory, or %NULL to inherit parent's
#NAME: define_repetion
#PARENT: GLib.RegexError
#COMMENT: Repeating a "DEFINE" group is not allowed.
    This error is never raised. Since: 2.16 Deprecated: 2.34
#NAME: has_references
#PARENT: GLib.regex_check_replacement.gboolean
#COMMENT: location to store information about
  references in @replacement or %NULL
#NAME: offset
#PARENT: GLib.utf8_offset_to_pointer.utf8
#COMMENT: a character offset within @str
#NAME: group
#PARENT: GLib.OptionContext.get_help.utf8
#COMMENT: the #GOptionGroup to create help for, or %NULL
#NAME: get_string_number
#PARENT: GLib.Regex.get_string_number
#COMMENT: The number of the subexpression or -1 if @name
  does not exists
#NAME: queue
#PARENT: GLib.AsyncQueue.pop.gpointer
#COMMENT: a #GAsyncQueue
#NAME: bytes_read
#PARENT: GLib.convert_with_fallback.utf8
#COMMENT: location to store the number of bytes in the
               input string that were successfully converted, or %NULL.
               Even if the conversion was successful, this may be
               less than @len if there were partial characters
               at the end of the input.
#NAME: lookup
#PARENT: GLib.Variant.lookup
#COMMENT: %TRUE if a value was unpacked
#NAME: len
#PARENT: GLib.String.append_len.String
#COMMENT: number of bytes of @val to use
#NAME: source
#PARENT: GLib.Source.get_context.MainContext
#COMMENT: a #GSource
#NAME: haystack_len
#PARENT: GLib.strrstr_len.utf8
#COMMENT: the maximum length of @haystack
#NAME: utf8_validate
#PARENT: GLib
#COMMENT: Validates UTF-8 encoded text. @str is the text to validate;
if @str is nul-terminated, then @max_len can be -1, otherwise
@max_len should be the number of bytes to validate.
If @end is non-%NULL, then the end of the valid range
will be stored there (i.e. the start of the first invalid
character if some bytes were invalid, or the end of the text
being validated otherwise).

Note that g_utf8_validate() returns %FALSE if @max_len is
positive and any of the @max_len bytes are nul.

Returns %TRUE if all of @str was valid. Many GLib and GTK+
routines require valid UTF-8 as input; so data read from a file
or the network should be checked with g_utf8_validate() before
doing anything else with it.
#NAME: get_monotonic_time
#PARENT: GLib
#COMMENT: Queries the system monotonic time.

The monotonic clock will always increase and doesn't suffer
discontinuities when the user (or NTP) changes the system time.  It
may or may not continue to tick during times where the machine is
suspended.

We try to use the clock that corresponds as closely as possible to
the passage of time as measured by system calls such as poll() but it
may not always be possible to do this.
#NAME: n_dates
#PARENT: GLib.Date.clear.none
#COMMENT: number of dates to clear
#NAME: user_data
#PARENT: GLib.SourceFunc.gboolean
#COMMENT: data passed to the function, set when the source was
    created with one of the above functions
#NAME: ascii_strtoull
#PARENT: GLib
#COMMENT: Converts a string to a #guint64 value.
This function behaves like the standard strtoull() function
does in the C locale. It does this without actually
changing the current locale, since that would not be
thread-safe.

This function is typically used when reading configuration
files or other non-user input that should be locale independent.
To handle input from the user you should normally use the
locale-sensitive system strtoull() function.

If the correct value would cause overflow, %G_MAXUINT64
is returned, and `ERANGE` is stored in `errno`.
If the base is outside the valid range, zero is returned, and
`EINVAL` is stored in `errno`.
If the string conversion fails, zero is returned, and @endptr returns
@nptr (if @endptr is non-%NULL).
#NAME: prepend
#PARENT: GLib.Node
#COMMENT: Inserts a #GNode as the first child of the given parent.
#NAME: Queue
#PARENT: GLib
#COMMENT: Contains the public fields of a
[Queue][glib-Double-ended-Queues].
#NAME: compare_func
#PARENT: GLib.SList.sort.gpointer
#COMMENT: the comparison function used to sort the #GSList.
    This function is passed the data from 2 elements of the #GSList
    and should return 0 if they are equal, a negative value if the
    first element comes before the second, or a positive value if
    the first element comes after the second.
#NAME: base64_encode
#PARENT: GLib
#COMMENT: Encode a sequence of binary data into its Base-64 stringified
representation.
#NAME: len
#PARENT: GLib.convert_with_iconv.utf8
#COMMENT: the length of the string in bytes, or -1 if the string is
                nul-terminated (Note that some encodings may allow nul
                bytes to occur inside strings. In that case, using -1
                for the @len parameter is unsafe)
#NAME: copy
#PARENT: GLib.Node
#COMMENT: Recursively copies a #GNode (but does not deep-copy the data inside the
nodes, see g_node_copy_deep() if you need that).
#NAME: c
#PARENT: GLib.utf8_strrchr.utf8
#COMMENT: a Unicode character
#NAME: new_uint64
#PARENT: GLib.Variant
#COMMENT: Creates a new uint64 #GVariant instance.
#NAME: user_data
#PARENT: GLib.dataset_foreach.none
#COMMENT: user data to pass to the function.
#NAME: hash_func
#PARENT: GLib.HashTable.new.gpointer
#COMMENT: a function to create a hash value from a key
#NAME: surrogate
#PARENT: GLib.UnicodeBreakType
#COMMENT: Surrogates (SG)
#NAME: key
#PARENT: GLib.compute_hmac_for_data.utf8
#COMMENT: the key to use in the HMAC
#NAME: nptr
#PARENT: GLib.ascii_strtoull.guint64
#COMMENT: the string to convert to a numeric value.
#NAME: hash
#PARENT: GLib.String
#COMMENT: Creates a hash code for @str; for use with #GHashTable.
#NAME: user_data
#PARENT: GLib.OptionGroup.new.OptionGroup
#COMMENT: user data that will be passed to the pre- and post-parse hooks,
  the error hook and to callbacks of %G_OPTION_ARG_CALLBACK options, or %NULL
#NAME: string
#PARENT: GLib.sprintf.gint
#COMMENT: A pointer to a memory buffer to contain the resulting string. It
         is up to the caller to ensure that the allocated buffer is large
         enough to hold the formatted result
#NAME: items_read
#PARENT: GLib.utf16_to_ucs4.gunichar
#COMMENT: location to store number of words read,
    or %NULL. If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will be
    returned in case @str contains a trailing partial character. If
    an error occurs then the index of the invalid input is stored here.
#NAME: path
#PARENT: GLib.chdir.gint
#COMMENT: a pathname in the GLib file name encoding (UTF-8 on Windows)
#NAME: get_priority
#PARENT: GLib.Source
#COMMENT: Gets the priority of a source.
#NAME: p
#PARENT: GLib.utf8_strrchr.utf8
#COMMENT: a nul-terminated UTF-8 encoded string
#NAME: lowercase_letter
#PARENT: GLib.UnicodeType
#COMMENT: General category "Letter, Lowercase" (Ll)
#NAME: lookup
#PARENT: GLib.Variant
#COMMENT: Looks up a value in a dictionary #GVariant.

This function is a wrapper around g_variant_lookup_value() and
g_variant_get().  In the case that %NULL would have been returned,
this function returns %FALSE.  Otherwise, it unpacks the returned
value and returns %TRUE.

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed,
see the section on
[GVariant format strings][gvariant-format-strings-pointers].

This function is currently implemented with a linear scan.  If you
plan to do many lookups then #GVariantDict may be more efficient.
#NAME: HashFunc
#PARENT: GLib
#COMMENT: Specifies the type of the hash function which is passed to
g_hash_table_new() when a #GHashTable is created.

The function is passed a key and should return a #guint hash value.
The functions g_direct_hash(), g_int_hash() and g_str_hash() provide
hash functions which can be used when the key is a #gpointer, #gint*,
and #gchar* respectively.

g_direct_hash() is also the appropriate hash function for keys
of the form `GINT_TO_POINTER (n)` (or similar macros).

<!-- FIXME: Need more here. --> A good hash functions should produce
hash values that are evenly distributed over a fairly large range.
The modulus is taken with the hash table size (a prime number) to
find the 'bucket' to place each key into. The function should also
be very fast, since it is called for each key lookup.

Note that the hash functions provided by GLib have these qualities,
but are not particularly robust against manufactured keys that
cause hash collisions. Therefore, you should consider choosing
a more secure hash function when using a GHashTable with keys
that originate in untrusted data (such as HTTP requests).
Using g_str_hash() in that situation might make your application
vulerable to
[Algorithmic Complexity Attacks](https://lwn.net/Articles/474912/).

The key to choosing a good hash is unpredictability.  Even
cryptographic hashes are very easy to find collisions for when the
remainder is taken modulo a somewhat predictable prime number.  There
must be an element of randomness that an attacker is unable to guess.
#NAME: strdup_vprintf
#PARENT: GLib.strdup_vprintf
#COMMENT: a newly-allocated string holding the result
#NAME: MAXINT64
#PARENT: GLib
#COMMENT: The maximum value which can be held in a #gint64.
#NAME: strnfill
#PARENT: GLib.strnfill
#COMMENT: a newly-allocated string filled the @fill_char
#NAME: tree
#PARENT: GLib.Tree.search.gpointer
#COMMENT: a #GTree
#NAME: data_setup
#PARENT: GLib.test_create_case.TestCase
#COMMENT: the function to set up the fixture data
#NAME: array
#PARENT: GLib.ByteArray.sort.none
#COMMENT: a #GByteArray
#NAME: v_double
#PARENT: GLib.DoubleIEEE754
#COMMENT: the double value
#NAME: equal
#PARENT: GLib.DateTime
#COMMENT: Checks to see if @dt1 and @dt2 are equal.

Equal here means that they represent the same moment after converting
them to the same time zone.
#NAME: key
#PARENT: GLib.Tree.insert.none
#COMMENT: the key to insert
#NAME: key_file
#PARENT: GLib.KeyFile.remove_group.gboolean
#COMMENT: a #GKeyFile
#NAME: subtract_years
#PARENT: GLib.Date
#COMMENT: Moves a date some number of years into the past.
If the current day doesn't exist in the destination
year (i.e. it's February 29 and you move to a non-leap-year)
then the day is changed to February 29. The date
must be valid.
#NAME: user_data
#PARENT: GLib.Array.sort_with_data.none
#COMMENT: data to pass to @compare_func
#NAME: load_from_data_dirs
#PARENT: GLib.BookmarkFile.load_from_data_dirs
#COMMENT: %TRUE if a key file could be loaded, %FALSE otherwise
#NAME: buf_len
#PARENT: GLib.ascii_dtostr.utf8
#COMMENT: The length of the buffer.
#NAME: queue
#PARENT: GLib.Queue.insert_before.none
#COMMENT: a #GQueue
#NAME: Data
#PARENT: GLib
#COMMENT: The #GData struct is an opaque data structure to represent a
[Keyed Data List][glib-Keyed-Data-Lists]. It should only be
accessed via the following functions.
#NAME: before_and_after
#PARENT: GLib.UnicodeBreakType
#COMMENT: Break Opportunity Before and After (B2)
#NAME: get_start_group
#PARENT: GLib.KeyFile.get_start_group
#COMMENT: The start group of the key file.
#NAME: strftime
#PARENT: GLib.Date
#COMMENT: Generates a printed representation of the date, in a
[locale][setlocale]-specific way.
Works just like the platform's C library strftime() function,
but only accepts date-related formats; time-related formats
give undefined results. Date must be valid. Unlike strftime()
(which uses the locale encoding), works on a UTF-8 format
string and stores a UTF-8 result.

This function does not provide any conversion specifiers in
addition to those implemented by the platform's C library.
For example, don't expect that using g_date_strftime() would
make the \%F provided by the C99 strftime() work on Windows
where the C library only complies to C89.
#NAME: unichar_compose
#PARENT: GLib
#COMMENT: Performs a single composition step of the
Unicode canonical composition algorithm.

This function includes algorithmic Hangul Jamo composition,
but it is not exactly the inverse of g_unichar_decompose().
No composition can have either of @a or @b equal to zero.
To be precise, this function composes if and only if
there exists a Primary Composite P which is canonically
equivalent to the sequence <@a,@b>.  See the Unicode
Standard for the definition of Primary Composite.

If @a and @b do not compose a new character, @ch is set to zero.

See
[UAX#15](http://unicode.org/reports/tr15/)
for details.
#NAME: mem
#PARENT: GLib.try_realloc_n.gpointer
#COMMENT: previously-allocated memory, or %NULL.
#NAME: Date
#PARENT: GLib
#COMMENT: Represents a day between January 1, Year 1 and a few thousand years in
the future. None of its members should be accessed directly.

If the #GDate-struct is obtained from g_date_new(), it will be safe
to mutate but invalid and thus not safe for calendrical computations.

If it's declared on the stack, it will contain garbage so must be
initialized with g_date_clear(). g_date_clear() makes the date invalid
but sane. An invalid date doesn't represent a day, it's "empty." A date
becomes valid after you set it to a Julian day or you set a day, month,
and year.
#NAME: root
#PARENT: GLib.Node.destroy.none
#COMMENT: the root of the tree/subtree to destroy
#NAME: IEEE754_FLOAT_BIAS
#PARENT: GLib
#COMMENT: The bias by which exponents in single-precision floats are offset.
#NAME: get_sequence
#PARENT: GLib.SequenceIter
#COMMENT: Returns the #GSequence that @iter points into.
#NAME: int64_equal
#PARENT: GLib
#COMMENT: Compares the two #gint64 values being pointed to and returns
%TRUE if they are equal.
It can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using non-%NULL pointers to 64-bit integers as keys in a
#GHashTable.
#NAME: get_flags
#PARENT: GLib.IOChannel.get_flags
#COMMENT: the flags which are set on the channel
#NAME: oldval
#PARENT: GLib.atomic_pointer_compare_and_exchange.gboolean
#COMMENT: the value to compare with
#NAME: NodeTraverseFunc
#PARENT: GLib.NodeTraverseFunc
#COMMENT: %TRUE to stop the traversal.
#NAME: OptionContext
#PARENT: GLib
#COMMENT: A `GOptionContext` struct defines which options
are accepted by the commandline option parser. The struct has only private
fields and should not be directly accessed.
#NAME: builder
#PARENT: GLib.VariantBuilder.open.none
#COMMENT: a #GVariantBuilder
#NAME: day
#PARENT: GLib.DateDMY
#COMMENT: a day
#NAME: uri
#PARENT: GLib.BookmarkFile.get_groups.utf8
#COMMENT: a valid URI
#NAME: lao
#PARENT: GLib.UnicodeScript
#COMMENT: Lao
#NAME: timeout_
#PARENT: GLib.PollFunc.gint
#COMMENT: the maximum time to wait for an event of the file descriptors.
    A negative value indicates an infinite timeout.
#NAME: Hmac
#PARENT: GLib
#COMMENT: An opaque structure representing a HMAC operation.
To create a new GHmac, use g_hmac_new(). To free
a GHmac, use g_hmac_unref().
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_visited.glong
#COMMENT: a #GBookmarkFile
#NAME: new
#PARENT: GLib.Node
#COMMENT: Creates a new #GNode containing the given data.
Used to create the first node in a tree.
#NAME: lookup
#PARENT: GLib.Tree
#COMMENT: Gets the value corresponding to the given key. Since a #GTree is
automatically balanced as key/value pairs are added, key lookup
is O(log n) (where n is the number of key/value pairs in the tree).
#NAME: utf8_to_utf16
#PARENT: GLib
#COMMENT: Convert a string from UTF-8 to UTF-16. A 0 character will be
added to the result after the converted text.
#NAME: type
#PARENT: GLib.VariantBuilder.open.none
#COMMENT: a #GVariantType
#NAME: missing_subpattern_name_terminator
#PARENT: GLib.RegexError
#COMMENT: Missing terminator
    in subpattern name. Since 2.16
#NAME: message
#PARENT: GLib.log_default_handler.none
#COMMENT: the message
#NAME: utf8_strdown
#PARENT: GLib.utf8_strdown
#COMMENT: a newly allocated string, with all characters
   converted to lowercase.
#NAME: modi
#PARENT: GLib.UnicodeScript
#COMMENT: Modi. Since: 2.42
#NAME: value
#PARENT: GLib.Variant.get_handle.gint32
#COMMENT: a handle #GVariant instance
#NAME: sized_new
#PARENT: GLib.Array
#COMMENT: Creates a new #GArray with @reserved_size elements preallocated and
a reference count of 1. This avoids frequent reallocation, if you
are going to add many elements to the array. Note however that the
size of the array is still 0.
#NAME: day
#PARENT: GLib.Date.set_dmy.none
#COMMENT: day
#NAME: index_
#PARENT: GLib.ByteArray.remove_index_fast.guint8
#COMMENT: the index of the byte to remove
#NAME: bengali
#PARENT: GLib.UnicodeScript
#COMMENT: Bengali
#NAME: array
#PARENT: GLib.PtrArray.remove_range.gpointer
#COMMENT: a @GPtrArray
#NAME: break_lines
#PARENT: GLib.base64_encode_close.gsize
#COMMENT: whether to break long lines
#NAME: first_attr
#PARENT: GLib.markup_collect_attributes.gboolean
#COMMENT: the name of the first attribute
#NAME: hook_size
#PARENT: GLib.HookList.init.none
#COMMENT: the size of each element in the #GHookList,
    typically `sizeof (GHook)`.
#NAME: pointer_bit_lock
#PARENT: GLib
#COMMENT: This is equivalent to g_bit_lock, but working on pointers (or other
pointer-sized values).

For portability reasons, you may only lock on the bottom 32 bits of
the pointer.
#NAME: check
#PARENT: GLib.MainContext.check
#COMMENT: %TRUE if some sources are ready to be dispatched.
#NAME: new_local
#PARENT: GLib.TimeZone.new_local
#COMMENT: the local timezone
#NAME: copy
#PARENT: GLib.VariantIter
#COMMENT: Creates a new heap-allocated #GVariantIter to iterate over the
container that was being iterated over by @iter.  Iteration begins on
the new iterator from the current position of the old iterator but
the two copies are independent past that point.

Use g_variant_iter_free() to free the return value when you no longer
need it.

A reference is taken to the container that @iter is iterating over
and will be releated only when g_variant_iter_free() is called.
#NAME: io_create_watch
#PARENT: GLib
#COMMENT: Creates a #GSource that's dispatched when @condition is met for the
given @channel. For example, if condition is #G_IO_IN, the source will
be dispatched when there's data available for reading.

g_io_add_watch() is a simpler interface to this same functionality, for
the case where you want to add the source to the default main loop context
at the default priority.

On Windows, polling a #GSource created to watch a channel for a socket
puts the socket in non-blocking mode. This is a side-effect of the
implementation and unavoidable.
#NAME: key_file
#PARENT: GLib.KeyFile.get_locale_string.utf8
#COMMENT: a #GKeyFile
#NAME: level_warning
#PARENT: GLib.LogLevelFlags
#COMMENT: log level for warnings, see g_warning()
#NAME: is_end
#PARENT: GLib.SequenceIter
#COMMENT: Returns whether @iter is the end iterator
#NAME: bytes
#PARENT: GLib.Bytes.unref_to_array.guint8
#COMMENT: a #GBytes
#NAME: byte_array_free
#PARENT: GLib.byte_array_free
#COMMENT: the element data if @free_segment is %FALSE, otherwise
         %NULL.  The element data should be freed using g_free().
#NAME: get_match_flags
#PARENT: GLib.Regex.get_match_flags
#COMMENT: flags from #GRegexMatchFlags
#NAME: KEY_FILE_DESKTOP_KEY_EXEC
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the command line to execute. It is only valid for desktop
entries with the `Application` type.
#NAME: set_julian
#PARENT: GLib.Date
#COMMENT: Sets the value of a #GDate from a Julian day number.
#NAME: find_source_by_user_data
#PARENT: GLib.MainContext
#COMMENT: Finds a source with the given user data for the callback.  If
multiple sources exist with the same user data, the first
one found will be returned.
#NAME: escaped_string
#PARENT: GLib.uri_unescape_segment.utf8
#COMMENT: A string, may be %NULL
#NAME: opsysstring
#PARENT: GLib.filename_to_utf8.utf8
#COMMENT: a string in the encoding for filenames
#NAME: list
#PARENT: GLib.SList.free.none
#COMMENT: a #GSList
#NAME: unichar_iswide
#PARENT: GLib.unichar_iswide
#COMMENT: %TRUE if the character is wide
#NAME: channel
#PARENT: GLib.IOChannel.unref.none
#COMMENT: a #GIOChannel
#NAME: rw_lock
#PARENT: GLib.RWLock.clear.none
#COMMENT: an initialized #GRWLock
#NAME: insert_sorted_iter
#PARENT: GLib.Sequence
#COMMENT: Like g_sequence_insert_sorted(), but uses
a #GSequenceIterCompareFunc instead of a #GCompareDataFunc as
the compare function.

@iter_cmp is called with two iterators pointing into @seq.
It should return 0 if the iterators are equal, a negative
value if the first iterator comes before the second, and a
positive value if the second iterator comes before the first.

It is called with two iterators pointing into @seq. It should
return 0 if the iterators are equal, a negative value if the
first iterator comes before the second, and a positive value
if the second iterator comes before the first.
#NAME: from_codeset
#PARENT: GLib.convert.utf8
#COMMENT: character set of @str.
#NAME: hmac
#PARENT: GLib.Hmac.get_digest.none
#COMMENT: a #GHmac
#NAME: overflow
#PARENT: GLib.IOChannelError
#COMMENT: Value too large for defined datatype.
#NAME: rw_lock
#PARENT: GLib.RWLock.writer_lock.none
#COMMENT: a #GRWLock
#NAME: get_string
#PARENT: GLib.Variant
#COMMENT: Returns the string value of a #GVariant instance with a string
type.  This includes the types %G_VARIANT_TYPE_STRING,
%G_VARIANT_TYPE_OBJECT_PATH and %G_VARIANT_TYPE_SIGNATURE.

The string will always be UTF-8 encoded.

If @length is non-%NULL then the length of the string (in bytes) is
returned there.  For trusted values, this information is already
known.  For untrusted values, a strlen() will be performed.

It is an error to call this function with a @value of any type
other than those three.

The return value remains valid as long as @value exists.
#NAME: array
#PARENT: GLib.PtrArray.set_free_func.none
#COMMENT: A #GPtrArray
#NAME: GINT16_FORMAT
#PARENT: GLib
#COMMENT: This is the platform dependent conversion specifier for scanning and
printing values of type #gint16. It is a string literal, but doesn't
include the percent-sign, such that you can add precision and length
modifiers between percent-sign and conversion specifier.

|[<!-- language="C" -->
gint16 in;
gint32 out;
sscanf ("42", "%" G_GINT16_FORMAT, &in)
out = in * 1000;
g_print ("%" G_GINT32_FORMAT, out);
]|
#NAME: byte_array_new_take
#PARENT: GLib.byte_array_new_take
#COMMENT: a new #GByteArray
#NAME: sized_new
#PARENT: GLib.PtrArray.sized_new
#COMMENT: the new #GPtrArray
#NAME: list
#PARENT: GLib.SList.insert_sorted_with_data.gpointer
#COMMENT: a #GSList
#NAME: lock
#PARENT: GLib.RecMutex
#COMMENT: Locks @rec_mutex. If @rec_mutex is already locked by another
thread, the current thread will block until @rec_mutex is
unlocked by the other thread. If @rec_mutex is already locked
by the current thread, the 'lock count' of @rec_mutex is increased.
The mutex will only become available again when it is unlocked
as many times as it has been locked.
#NAME: unexpected_token
#PARENT: GLib.VariantParseError
#COMMENT: an unexpected token was encountered
#NAME: user_data
#PARENT: GLib.unix_fd_add.guint
#COMMENT: data to pass to @function
#NAME: prepend
#PARENT: GLib.String.prepend
#COMMENT: @string
#NAME: limit
#PARENT: GLib.variant_type_string_scan.gboolean
#COMMENT: the end of @string, or %NULL
#NAME: child_position
#PARENT: GLib.Node.child_position
#COMMENT: the position of @child with respect to its siblings
#NAME: realloc_n
#PARENT: GLib
#COMMENT: This function is similar to g_realloc(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.
#NAME: bit_storage
#PARENT: GLib.bit_storage
#COMMENT: the number of bits used to hold @number
#NAME: seq
#PARENT: GLib.Sequence.get_begin_iter.SequenceIter
#COMMENT: a #GSequence
#NAME: concat
#PARENT: GLib.List
#COMMENT: Adds the second #GList onto the end of the first #GList.
Note that the elements of the second #GList are not copied.
They are used directly.

This function is for example used to move an element in the list.
The following example moves an element to the top of the list:
|[<!-- language="C" -->
list = g_list_remove_link (list, llink);
list = g_list_concat (llink, list);
]|
#NAME: get_week_numbering_year
#PARENT: GLib.DateTime.get_week_numbering_year
#COMMENT: the ISO 8601 week-numbering year for @datetime
#NAME: file_type
#PARENT: GLib.test_get_dir.utf8
#COMMENT: the type of file (built vs. distributed)
#NAME: data
#PARENT: GLib.Array.append_vals.gpointer
#COMMENT: a pointer to the elements to append to the end of the array
#NAME: description
#PARENT: GLib.OptionContext.set_description.none
#COMMENT: a string to be shown in `--help` output
  after the list of options, or %NULL
#NAME: func
#PARENT: GLib.HashTable.foreach_remove.guint
#COMMENT: the function to call for each key/value pair
#NAME: datalist
#PARENT: GLib.datalist_clear.none
#COMMENT: a datalist.
#NAME: get_iter_at_pos
#PARENT: GLib.Sequence
#COMMENT: Returns the iterator at position @pos. If @pos is negative or larger
than the number of items in @seq, the end iterator is returned.
#NAME: date
#PARENT: GLib.Date.set_month.none
#COMMENT: a #GDate
#NAME: update
#PARENT: GLib.Checksum
#COMMENT: Feeds @data into an existing #GChecksum. The checksum must still be
open, that is g_checksum_get_string() or g_checksum_get_digest() must
not have been called on @checksum.
#NAME: data
#PARENT: GLib.Hook.find_func_data.Hook
#COMMENT: the data to find
#NAME: match_info
#PARENT: GLib.MatchInfo.get_string.utf8
#COMMENT: a #GMatchInfo
#NAME: list
#PARENT: GLib.List.copy.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: location
#PARENT: GLib.Once.init_enter.gboolean
#COMMENT: location of a static initializable variable containing 0
#NAME: new_uri
#PARENT: GLib.BookmarkFile.move_item.gboolean
#COMMENT: a valid URI, or %NULL
#NAME: compare_func
#PARENT: GLib.Array.sort.none
#COMMENT: comparison function
#NAME: format_size
#PARENT: GLib.format_size
#COMMENT: a newly-allocated formatted string containing a human readable
    file size
#NAME: year
#PARENT: GLib.Date.get_sunday_weeks_in_year.guint8
#COMMENT: year to count weeks in
#NAME: TestCase
#PARENT: GLib
#COMMENT: An opaque structure representing a test case.
#NAME: invalid_uri
#PARENT: GLib.BookmarkFileError
#COMMENT: URI was ill-formed
#NAME: 
#PARENT: GLib.VariantBuilder.add_parsed.none...
#COMMENT: arguments as per @format
#NAME: delete_link
#PARENT: GLib.List
#COMMENT: Removes the node link_ from the list and frees it.
Compare this to g_list_remove_link() which removes the node
without freeing it.
#NAME: bit_nth_lsf
#PARENT: GLib.bit_nth_lsf
#COMMENT: the index of the first bit set which is higher than @nth_bit
#NAME: search_dirs
#PARENT: GLib.KeyFile.load_from_dirs.gboolean
#COMMENT: %NULL-terminated array of directories to search
#NAME: IConv
#PARENT: GLib.IConv.IConv
#COMMENT: count of non-reversible conversions, or -1 on error
#NAME: data
#PARENT: GLib.Array
#COMMENT: a pointer to the element data. The data may be moved as
    elements are added to the #GArray.
#NAME: channel
#PARENT: GLib.IOChannel.read_to_end.IOStatus
#COMMENT: a #GIOChannel
#NAME: end
#PARENT: GLib.Sequence.range_get_midpoint.SequenceIter
#COMMENT: a #GSequenceIter
#NAME: close_punctuation
#PARENT: GLib.UnicodeType
#COMMENT: General category "Punctuation, Close" (Pe)
#NAME: strup
#PARENT: GLib
#COMMENT: Converts a string to upper case.
#NAME: new_variant
#PARENT: GLib.Variant
#COMMENT: Boxes @value.  The result is a #GVariant instance representing a
variant containing the original value.

If @child is a floating reference (see g_variant_ref_sink()), the new
instance takes ownership of @child.
#NAME: flush
#PARENT: GLib.IOChannel
#COMMENT: Flushes the write buffer for the GIOChannel.
#NAME: string_new_len
#PARENT: GLib.string_new_len
#COMMENT: a new #GString
#NAME: pop_tail_link
#PARENT: GLib.Queue
#COMMENT: Removes and returns the last element of the queue.
#NAME: context
#PARENT: GLib.MainContext.check.gint
#COMMENT: a #GMainContext
#NAME: get_user_special_dir
#PARENT: GLib.get_user_special_dir
#COMMENT: the path to the specified special directory, or %NULL
  if the logical id was not found. The returned string is owned by
  GLib and should not be modified or freed.
#NAME: hook_list
#PARENT: GLib.Hook.find_data.Hook
#COMMENT: a #GHookList
#NAME: hook
#PARENT: GLib.Hook.prepend.none
#COMMENT: the #GHook to add to the start of @hook_list
#NAME: new_utc
#PARENT: GLib.TimeZone.new_utc
#COMMENT: the universal timezone
#NAME: april
#PARENT: GLib.DateMonth
#COMMENT: April
#NAME: free
#PARENT: GLib.Sequence
#COMMENT: Frees the memory allocated for @seq. If @seq has a data destroy
function associated with it, that function is called on all items
in @seq.
#NAME: parameter_string
#PARENT: GLib.OptionContext.new.OptionContext
#COMMENT: a string which is displayed in
   the first line of `--help` output, after the usage summary
   `programname [OPTION...]`
#NAME: func
#PARENT: GLib.ThreadPool.new.ThreadPool
#COMMENT: a function to execute in the threads of the new thread pool
#NAME: format
#PARENT: GLib.DateTime.format.utf8
#COMMENT: a valid UTF-8 string, containing the format for the
         #GDateTime
#NAME: missing_name
#PARENT: GLib.RegexError
#COMMENT: "\\k" is not followed by a braced, angle-bracketed, or
    quoted name. Since: 2.34
#NAME: dict
#PARENT: GLib.VariantDict.insert_value.none
#COMMENT: a #GVariantDict
#NAME: is_partial_match
#PARENT: GLib.MatchInfo
#COMMENT: Usually if the string passed to g_regex_match*() matches as far as
it goes, but is too short to match the entire pattern, %FALSE is
returned. There are circumstances where it might be helpful to
distinguish this case from other cases in which there is no match.

Consider, for example, an application where a human is required to
type in data for a field with specific formatting requirements. An
example might be a date in the form ddmmmyy, defined by the pattern
"^\d?\d(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\d\d$".
If the application sees the user’s keystrokes one by one, and can
check that what has been typed so far is potentially valid, it is
able to raise an error as soon as a mistake is made.

GRegex supports the concept of partial matching by means of the
#G_REGEX_MATCH_PARTIAL_SOFT and #G_REGEX_MATCH_PARTIAL_HARD flags.
When they are used, the return code for
g_regex_match() or g_regex_match_full() is, as usual, %TRUE
for a complete match, %FALSE otherwise. But, when these functions
return %FALSE, you can check if the match was partial calling
g_match_info_is_partial_match().

The difference between #G_REGEX_MATCH_PARTIAL_SOFT and
#G_REGEX_MATCH_PARTIAL_HARD is that when a partial match is encountered
with #G_REGEX_MATCH_PARTIAL_SOFT, matching continues to search for a
possible complete match, while with #G_REGEX_MATCH_PARTIAL_HARD matching
stops at the partial match.
When both #G_REGEX_MATCH_PARTIAL_SOFT and #G_REGEX_MATCH_PARTIAL_HARD
are set, the latter takes precedence.

There were formerly some restrictions on the pattern for partial matching.
The restrictions no longer apply.

See pcrepartial(3) for more information on partial matching.
#NAME: context
#PARENT: GLib.OptionContext.set_strict_posix.none
#COMMENT: a #GoptionContext
#NAME: level_info
#PARENT: GLib.LogLevelFlags
#COMMENT: log level for informational messages, see g_info()
#NAME: n_children
#PARENT: GLib.Node.n_children
#COMMENT: the number of children of @node
#NAME: MAXUINT16
#PARENT: GLib
#COMMENT: The maximum value which can be held in a #guint16.
#NAME: stderr
#PARENT: GLib.TestSubprocessFlags
#COMMENT: If this flag is given, the child
    process will inherit the parent's stderr. Otherwise, the child's
    stderr will not be visible, but it will be captured to allow
    later tests with g_test_trap_assert_stderr().
#NAME: clamp
#PARENT: GLib.Date
#COMMENT: If @date is prior to @min_date, sets @date equal to @min_date.
If @date falls after @max_date, sets @date equal to @max_date.
Otherwise, @date is unchanged.
Either of @min_date and @max_date may be %NULL.
All non-%NULL dates must be valid.
#NAME: stamp
#PARENT: GLib.BookmarkFile.set_app_info.gboolean
#COMMENT: the time of the last registration for this application
#NAME: ref
#PARENT: GLib.MainLoop.ref
#COMMENT: @loop
#NAME: key_id
#PARENT: GLib.datalist_id_get_data.gpointer
#COMMENT: the #GQuark identifying a data element.
#NAME: mem_is_system_malloc
#PARENT: GLib.mem_is_system_malloc
#COMMENT: if %TRUE, malloc() and g_malloc() can be mixed.
#NAME: int_hash
#PARENT: GLib.int_hash
#COMMENT: a hash value corresponding to the key.
#NAME: OptionParseFunc
#PARENT: GLib.OptionParseFunc
#COMMENT: %TRUE if the function completed successfully, %FALSE if an error
 occurred, in which case @error should be set with g_set_error()
#NAME: has_group
#PARENT: GLib.BookmarkFile
#COMMENT: Checks whether @group appears in the list of groups to which
the bookmark for @uri belongs to.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
#NAME: s1
#PARENT: GLib.strncasecmp.gint
#COMMENT: a string
#NAME: float_malformed
#PARENT: GLib.ErrorType
#COMMENT: malformed floating point number
#NAME: s2
#PARENT: GLib.strncasecmp.gint
#COMMENT: a string to compare with @s1
#NAME: datalist_id_remove_no_notify
#PARENT: GLib.datalist_id_remove_no_notify
#COMMENT: the data previously stored at @key_id, or %NULL if none.
#NAME: thread_pool_set_max_unused_threads
#PARENT: GLib
#COMMENT: Sets the maximal number of unused threads to @max_threads.
If @max_threads is -1, no limit is imposed on the number
of unused threads.

The default value is 2.
#NAME: datetime
#PARENT: GLib.date_time_hash.guint
#COMMENT: a #GDateTime
#NAME: str_array
#PARENT: GLib.strdupv.utf8
#COMMENT: a %NULL-terminated array of strings
#NAME: dup_func
#PARENT: GLib.datalist_id_dup_data.gpointer
#COMMENT: function to duplicate the old value
#NAME: cond
#PARENT: GLib.MainContext.wait.gboolean
#COMMENT: a condition variable
#NAME: tmpl
#PARENT: GLib.mkstemp.gint
#COMMENT: template filename
#NAME: n
#PARENT: GLib.strncasecmp.gint
#COMMENT: the maximum number of characters to compare
#NAME: hour
#PARENT: GLib.DateTime.new_local.DateTime
#COMMENT: the hour component of the date
#NAME: day
#PARENT: GLib.DateTime.new_local.DateTime
#COMMENT: the day component of the date
#NAME: hash_table
#PARENT: GLib.HashTable.contains.gboolean
#COMMENT: a #GHashTable
#NAME: insert_len
#PARENT: GLib.StringChunk
#COMMENT: Adds a copy of the first @len bytes of @string to the #GStringChunk.
The copy is nul-terminated.

Since this function does not stop at nul bytes, it is the caller's
responsibility to ensure that @string has at least @len addressable
bytes.

The characters in the returned string can be changed, if necessary,
though you should not change anything after the end of the string.
#NAME: seed
#PARENT: GLib.Rand.set_seed.none
#COMMENT: a value to reinitialize the random number generator
#NAME: key
#PARENT: GLib.HashTable.steal.gboolean
#COMMENT: the key to remove
#NAME: hook_prepend
#PARENT: GLib
#COMMENT: Prepends a #GHook on the start of a #GHookList.
#NAME: priority
#PARENT: GLib.MainContext.invoke_full.none
#COMMENT: the priority at which to run @function
#NAME: block_size
#PARENT: GLib.slice_free_chain_with_offset.none
#COMMENT: the size of the blocks
#NAME: parent
#PARENT: GLib.Node.insert_before.Node
#COMMENT: the #GNode to place @node under
#NAME: dest
#PARENT: GLib.propagate_error.none
#COMMENT: error return location
#NAME: unmatched_parenthesis
#PARENT: GLib.RegexError
#COMMENT: Missing terminating ")" or ")"
    without opening "(". Since 2.16
#NAME: queue
#PARENT: GLib.Queue.pop_nth_link.gpointer
#COMMENT: a #GQueue
#NAME: nomem
#PARENT: GLib.FileError
#COMMENT: No memory available. The system cannot allocate
    more virtual memory because its capacity is full.
#NAME: add_days
#PARENT: GLib.DateTime.add_days
#COMMENT: the newly created #GDateTime which should be freed with
  g_date_time_unref().
#NAME: store_int64
#PARENT: GLib.ScannerConfig
#COMMENT: use value.v_int64 rather than v_int
#NAME: is_writable
#PARENT: GLib.IOFlags
#COMMENT: indicates that the io channel is writable.
    This flag cannot be changed.
#NAME: avestan
#PARENT: GLib.UnicodeScript
#COMMENT: Avestan. Since 2.26
#NAME: get_length
#PARENT: GLib.Sequence
#COMMENT: Returns the length of @seq
#NAME: datetime
#PARENT: GLib.DateTime.add_days.DateTime
#COMMENT: a #GDateTime
#NAME: format_string
#PARENT: GLib.Variant.new_printf.Variant
#COMMENT: a printf-style format string
#NAME: atomic_int_compare_and_exchange
#PARENT: GLib
#COMMENT: Compares @atomic to @oldval and, if equal, sets it to @newval.
If @atomic was not equal to @oldval then no change occurs.

This compare and exchange is done atomically.

Think of this operation as an atomic version of
`{ if (*atomic == oldval) { *atomic = newval; return TRUE; } else return FALSE; }`.

This call acts as a full compiler and hardware memory barrier.
#NAME: GSSIZE_MODIFIER
#PARENT: GLib
#COMMENT: The platform dependent length modifier for conversion specifiers
for scanning and printing values of type #gssize. It
is a string literal.
#NAME: unref
#PARENT: GLib.Regex
#COMMENT: Decreases reference count of @regex by 1. When reference count drops
to zero, it frees all the memory associated with the regex structure.
#NAME: letter_number
#PARENT: GLib.UnicodeType
#COMMENT: General category "Number, Letter" (Nl)
#NAME: long_name
#PARENT: GLib.OptionEntry
#COMMENT: The long name of an option can be used to specify it
    in a commandline as `--long_name`. Every option must have a
    long name. To resolve conflicts if multiple option groups contain
    the same long name, it is also possible to specify the option as
    `--groupname-long_name`.
#NAME: len
#PARENT: GLib.Array
#COMMENT: the number of elements in the #GArray not including the
    possible terminating zero element.
#NAME: common
#PARENT: GLib.UnicodeScript
#COMMENT: a character used by multiple different scripts
#NAME: destroy
#PARENT: GLib.Hook.destroy
#COMMENT: %TRUE if the #GHook was found in the #GHookList and destroyed
#NAME: test_run_suite
#PARENT: GLib.test_run_suite
#COMMENT: 0 on success
#NAME: is_writeable
#PARENT: GLib.IOFlags
#COMMENT: a misspelled version of @G_IO_FLAG_IS_WRITABLE
    that existed before the spelling was fixed in GLib 2.30. It is kept
    here for compatibility reasons. Deprecated since 2.30
#NAME: value
#PARENT: GLib.Variant.get_type_string.utf8
#COMMENT: a #GVariant
#NAME: environ_unsetenv
#PARENT: GLib
#COMMENT: Removes the environment variable @variable from the provided
environment @envp.
#NAME: format_string
#PARENT: GLib.VariantDict.insert.none
#COMMENT: a #GVariant varargs format string
#NAME: value
#PARENT: GLib.Tree.replace.none
#COMMENT: the value corresponding to the key
#NAME: data
#PARENT: GLib.TranslateFunc.utf8
#COMMENT: user data specified when installing the function, e.g.
 in g_option_group_set_translate_func()
#NAME: september
#PARENT: GLib.DateMonth
#COMMENT: September
#NAME: translation_domain
#PARENT: GLib.OptionContext.add_main_entries.none
#COMMENT: a translation domain to use for translating
   the `--help` output for the options in @entries
   with gettext(), or %NULL
#NAME: val
#PARENT: GLib.atomic_int_exchange_and_add.gint
#COMMENT: the value to add
#NAME: to_local
#PARENT: GLib.DateTime.to_local
#COMMENT: the newly created #GDateTime
#NAME: new_parsed
#PARENT: GLib.Variant
#COMMENT: Parses @format and returns the result.

@format must be a text format #GVariant with one extension: at any
point that a value may appear in the text, a '%' character followed
by a GVariant format string (as per g_variant_new()) may appear.  In
that case, the same arguments are collected from the argument list as
g_variant_new() would have collected.

Note that the arguments must be of the correct width for their types
specified in @format. This can be achieved by casting them. See
the [GVariant varargs documentation][gvariant-varargs].

Consider this simple example:
|[<!-- language="C" -->
 g_variant_new_parsed ("[('one', 1), ('two', %i), (%s, 3)]", 2, "three");
]|

In the example, the variable argument parameters are collected and
filled in as if they were part of the original string to produce the
result of
|[<!-- language="C" -->
[('one', 1), ('two', 2), ('three', 3)]
]|

This function is intended only to be used with @format as a string
literal.  Any parse error is fatal to the calling process.  If you
want to parse data from untrusted sources, use g_variant_parse().

You may not use this function to return, unmodified, a single
#GVariant pointer from the argument list.  ie: @format may not solely
be anything along the lines of "%*", "%?", "\%r", or anything starting
with "%@".
#NAME: datetime
#PARENT: GLib.DateTime.add_hours.DateTime
#COMMENT: a #GDateTime
#NAME: format
#PARENT: GLib.String.printf.none
#COMMENT: the string format. See the printf() documentation
#NAME: MAXUINT32
#PARENT: GLib
#COMMENT: The maximum value which can be held in a #guint32.
#NAME: position
#PARENT: GLib.Node.insert.Node
#COMMENT: the position to place @node at, with respect to its siblings
    If position is -1, @node is inserted as the last child of @parent
#NAME: pop
#PARENT: GLib.AsyncQueue
#COMMENT: Pops data from the @queue. If @queue is empty, this function
blocks until data becomes available.
#NAME: UnixFDSourceFunc
#PARENT: GLib
#COMMENT: The type of functions to be called when a UNIX fd watch source
triggers.
#NAME: push_sorted_unlocked
#PARENT: GLib.AsyncQueue
#COMMENT: Inserts @data into @queue using @func to determine the new
position.

The sort function @func is passed two elements of the @queue.
It should return 0 if they are equal, a negative value if the
first element should be higher in the @queue or a positive value
if the first element should be lower in the @queue than the second
element.

This function requires that the @queue is sorted before pushing on
new elements, see g_async_queue_sort().

This function must be called while holding the @queue's lock.

For an example of @func see g_async_queue_sort().
#NAME: HookFindFunc
#PARENT: GLib
#COMMENT: Defines the type of the function passed to g_hook_find().
#NAME: format_string
#PARENT: GLib.Variant.get.none
#COMMENT: a #GVariant format string
#NAME: julian_day
#PARENT: GLib.Date.new_julian.Date
#COMMENT: days since January 1, Year 1
#NAME: TestLogFatalFunc
#PARENT: GLib.TestLogFatalFunc
#COMMENT: %TRUE if the program should abort, %FALSE otherwise
#NAME: replace
#PARENT: GLib.RegexError
#COMMENT: Replacement failed due to an ill-formed replacement
    string.
#NAME: error
#PARENT: GLib.markup_collect_attributes.gboolean
#COMMENT: a pointer to a #GError or %NULL
#NAME: alloc
#PARENT: GLib.Hook
#COMMENT: Allocates space for a #GHook and initializes it.
#NAME: LOG_LEVEL_USER_SHIFT
#PARENT: GLib
#COMMENT: Log levels below 1<<G_LOG_LEVEL_USER_SHIFT are used by GLib.
Higher bits can be used for user-defined log levels.
#NAME: user_data
#PARENT: GLib.AsyncQueue.sort.none
#COMMENT: user data passed to @func
#NAME: mandatory
#PARENT: GLib.UnicodeBreakType
#COMMENT: Mandatory Break (BK)
#NAME: string_sized_new
#PARENT: GLib
#COMMENT: Creates a new #GString, with enough space for @dfl_size
bytes. This is useful if you are going to add a lot of
text to the string and don't want it to be reallocated
too often.
#NAME: str_has_prefix
#PARENT: GLib
#COMMENT: Looks whether the string @str begins with @prefix.
#NAME: source_str
#PARENT: GLib.variant_parse_error_print_context.utf8
#COMMENT: the string that was given to the parser
#NAME: get_string_length
#PARENT: GLib.VariantType.get_string_length
#COMMENT: the length of the corresponding type string

Since 2.24
#NAME: TimeType
#PARENT: GLib
#COMMENT: Disambiguates a given time in two ways.

First, specifies if the given time is in universal or local time.

Second, if the time is in local time, specifies if it is local
standard time or local daylight time.  This is important for the case
where the same local time occurs twice (during daylight savings time
transitions, for example).
#NAME: domain
#PARENT: GLib.dgettext.utf8
#COMMENT: the translation domain to use, or %NULL to use
  the domain set with textdomain()
#NAME: get_string
#PARENT: GLib.Hmac
#COMMENT: Gets the HMAC as an hexadecimal string.

Once this function has been called the #GHmac can no longer be
updated with g_hmac_update().

The hexadecimal characters will be lower case.
#NAME: predicate
#PARENT: GLib.HashTable.find.gpointer
#COMMENT: function to test the key/value pairs for a certain property
#NAME: function
#PARENT: GLib.MainContext.invoke_full.none
#COMMENT: function to call
#NAME: unichar_compose
#PARENT: GLib.unichar_compose
#COMMENT: %TRUE if the characters could be composed
#NAME: unichar_validate
#PARENT: GLib.unichar_validate
#COMMENT: %TRUE if @ch is a valid Unicode character
#NAME: condition
#PARENT: GLib.io_add_watch.guint
#COMMENT: the condition to watch for
#NAME: again
#PARENT: GLib.FileError
#COMMENT: Resource temporarily unavailable; the call might
    work if you try again later.
#NAME: close
#PARENT: GLib.close
#COMMENT: %TRUE on success, %FALSE if there was an error.
#NAME: root
#PARENT: GLib.Node.max_height.guint
#COMMENT: a #GNode
#NAME: copy_only
#PARENT: GLib.Variant.check_format_string.gboolean
#COMMENT: %TRUE to ensure the format string makes deep copies
#NAME: context
#PARENT: GLib.OptionContext.get_main_group.OptionGroup
#COMMENT: a #GOptionContext
#NAME: insert
#PARENT: GLib.HashTable
#COMMENT: Inserts a new key and value into a #GHashTable.

If the key already exists in the #GHashTable its current
value is replaced with the new value. If you supplied a
@value_destroy_func when creating the #GHashTable, the old
value is freed using that function. If you supplied a
@key_destroy_func when creating the #GHashTable, the passed
key is freed using that function.
#NAME: string
#PARENT: GLib.strdelimit.utf8
#COMMENT: the string to convert
#NAME: src
#PARENT: GLib.Sequence.move.none
#COMMENT: a #GSequenceIter pointing to the item to move
#NAME: get_double
#PARENT: GLib.KeyFile.get_double
#COMMENT: the value associated with the key as a double, or
    0.0 if the key was not found or could not be parsed.
#NAME: message
#PARENT: GLib.Scanner.unexp_token.none
#COMMENT: a message string to output at the end of the
    warning/error, or %NULL.
#NAME: new
#PARENT: GLib.Date
#COMMENT: Allocates a #GDate and initializes
it to a sane state. The new date will
be cleared (as if you'd called g_date_clear()) but invalid (it won't
represent an existing day). Free the return value with g_date_free().
#NAME: set_uint64
#PARENT: GLib.KeyFile
#COMMENT: Associates a new integer value with @key under @group_name.
If @key cannot be found then it is created.
#NAME: format
#PARENT: GLib.vasprintf.gint
#COMMENT: a standard printf() format string, but notice
         [string precision pitfalls][string-precision]
#NAME: thai
#PARENT: GLib.UnicodeScript
#COMMENT: Thai
#NAME: size
#PARENT: GLib.qsort_with_data.none
#COMMENT: size of each element
#NAME: get_mask
#PARENT: GLib.IOFlags
#COMMENT: the mask of the flags that are returned from
    g_io_channel_get_flags()
#NAME: BookmarkFileError
#PARENT: GLib
#COMMENT: Error codes returned by bookmark file parsing.
#NAME: dict_entry
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a dictionary entry.
#NAME: int64_hash
#PARENT: GLib
#COMMENT: Converts a pointer to a #gint64 to a hash value.

It can be passed to g_hash_table_new() as the @hash_func parameter,
when using non-%NULL pointers to 64-bit integer values as keys in a
#GHashTable.
#NAME: context
#PARENT: GLib.OptionContext.get_help.utf8
#COMMENT: a #GOptionContext
#NAME: get_groups
#PARENT: GLib.BookmarkFile.get_groups
#COMMENT: a newly allocated %NULL-terminated array of group names.
  Use g_strfreev() to free it.
#NAME: symbol
#PARENT: GLib.Scanner.scope_lookup_symbol.gpointer
#COMMENT: the symbol to look up
#NAME: length
#PARENT: GLib.Array.set_size.gpointer
#COMMENT: the new size of the #GArray
#NAME: result
#PARENT: GLib.Once.init_leave.none
#COMMENT: new non-0 value for *@value_location
#NAME: copy
#PARENT: GLib.Queue.copy
#COMMENT: a copy of @queue
#NAME: code
#PARENT: GLib.Error
#COMMENT: error code, e.g. %G_FILE_ERROR_NOENT
#NAME: remove_index
#PARENT: GLib.PtrArray.remove_index
#COMMENT: the pointer which was removed
#NAME: check_replacement
#PARENT: GLib.Regex
#COMMENT: Checks whether @replacement is a valid replacement string
(see g_regex_replace()), i.e. that all escape sequences in
it are valid.

If @has_references is not %NULL then @replacement is checked
for pattern references. For instance, replacement text 'foo\n'
does not contain references and may be evaluated without information
about actual match, but '\0\1' (whole match followed by first
subpattern) requires valid #GMatchInfo object.
#NAME: copy_deep
#PARENT: GLib.List.copy_deep
#COMMENT: the start of the new list that holds a full copy of @list,
    use g_list_free_full() to free it
#NAME: datalist_id_set_data_full
#PARENT: GLib
#COMMENT: Sets the data corresponding to the given #GQuark id, and the
function to be called when the element is removed from the datalist.
Any previous data with the same key is removed, and its destroy
function is called.
#NAME: get_julian
#PARENT: GLib.Date.get_julian
#COMMENT: Julian day
#NAME: years
#PARENT: GLib.DateTime.add_full.DateTime
#COMMENT: the number of years to add
#NAME: checksum_type
#PARENT: GLib.compute_checksum_for_bytes.utf8
#COMMENT: a #GChecksumType
#NAME: array
#PARENT: GLib.ByteArray.prepend.guint8
#COMMENT: a #GByteArray
#NAME: get_double
#PARENT: GLib.Variant.get_double
#COMMENT: a #gdouble
#NAME: insert
#PARENT: GLib.SList
#COMMENT: Inserts a new element into the list at the given position.
#NAME: key_equal_func
#PARENT: GLib.HashTable.new.gpointer
#COMMENT: a function to check two keys for equality
#NAME: hook_list
#PARENT: GLib.Hook.destroy_link.none
#COMMENT: a #GHookList
#NAME: hash_table
#PARENT: GLib.HashTable.remove.gboolean
#COMMENT: a #GHashTable
#NAME: reverse
#PARENT: GLib.SList
#COMMENT: Reverses a #GSList.
#NAME: add_parsed
#PARENT: GLib.VariantBuilder
#COMMENT: Adds to a #GVariantBuilder.

This call is a convenience wrapper that is exactly equivalent to
calling g_variant_new_parsed() followed by
g_variant_builder_add_value().

Note that the arguments must be of the correct width for their types
specified in @format_string. This can be achieved by casting them. See
the [GVariant varargs documentation][gvariant-varargs].

This function might be used as follows:

|[<!-- language="C" -->
GVariant *
make_pointless_dictionary (void)
{
  GVariantBuilder builder;
  int i;

  g_variant_builder_init (&builder, G_VARIANT_TYPE_ARRAY);
  g_variant_builder_add_parsed (&builder, "{'width', <%i>}", 600);
  g_variant_builder_add_parsed (&builder, "{'title', <%s>}", "foo");
  g_variant_builder_add_parsed (&builder, "{'transparency', <0.5>}");
  return g_variant_builder_end (&builder);
}
]|
#NAME: key_file
#PARENT: GLib.KeyFile.has_group.gboolean
#COMMENT: a #GKeyFile
#NAME: log_level
#PARENT: GLib.test_expect_message.none
#COMMENT: the log level of the message
#NAME: time_
#PARENT: GLib.TimeZone.adjust_time.gint
#COMMENT: a pointer to a number of seconds since January 1, 1970
#NAME: insert_c
#PARENT: GLib.String.insert_c
#COMMENT: @string
#NAME: c
#PARENT: GLib.unichar_isdefined.gboolean
#COMMENT: a Unicode character
#NAME: numbers_2_int
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if binary, octal and hexadecimal numbers
    are reported as #G_TOKEN_INT (the default is %TRUE).
#NAME: dest
#PARENT: GLib.utf8_strncpy.utf8
#COMMENT: buffer to fill with characters from @src
#NAME: two
#PARENT: GLib.Variant.equal.gboolean
#COMMENT: a #GVariant instance
#NAME: PRIORITY_LOW
#PARENT: GLib
#COMMENT: Use this for very low priority background tasks.

It is not used within GLib or GTK+.
#NAME: src
#PARENT: GLib.strlcat.gsize
#COMMENT: source buffer
#NAME: string_len
#PARENT: GLib.Regex.match_all_full.gboolean
#COMMENT: the length of @string, or -1 if @string is nul-terminated
#NAME: rw_lock
#PARENT: GLib.RWLock.reader_lock.none
#COMMENT: a #GRWLock
#NAME: pop
#PARENT: GLib.TestLogBuffer
#COMMENT: Internal function for gtester to retrieve test log messages, no ABI guarantees provided.
#NAME: value
#PARENT: GLib.Variant.ref_sink.Variant
#COMMENT: a #GVariant
#NAME: destroy_link
#PARENT: GLib.Hook
#COMMENT: Removes one #GHook from a #GHookList, marking it
inactive and calling g_hook_unref() on it.
#NAME: utf8_offset_to_pointer
#PARENT: GLib
#COMMENT: Converts from an integer character offset to a pointer to a position
within the string.

Since 2.10, this function allows to pass a negative @offset to
step backwards. It is usually worth stepping backwards from the end
instead of forwards if @offset is in the last fourth of the string,
since moving forward is about 3 times faster than moving backward.

Note that this function doesn't abort when reaching the end of @str.
Therefore you should be sure that @offset is within string boundaries
before calling that function. Call g_utf8_strlen() when unsure.
This limitation exists as this function is called frequently during
text rendering and therefore has to be as fast as possible.
#NAME: test_subprocess
#PARENT: GLib.test_subprocess
#COMMENT: %TRUE if the test program is running under
g_test_trap_subprocess().
#NAME: cur_value
#PARENT: GLib.Scanner
#COMMENT: Gets the current token value. This is simply the @value
field in the #GScanner structure.
#NAME: get_integer
#PARENT: GLib.KeyFile.get_integer
#COMMENT: the value associated with the key as an integer, or
    0 if the key was not found or could not be parsed.
#NAME: optional_arg
#PARENT: GLib.OptionFlags
#COMMENT: For options of the %G_OPTION_ARG_CALLBACK
    kind, this flag indicates that the argument supply is optional.
    If no argument is given then data of %GOptionParseFunc will be
    set to NULL. Since 2.8
#NAME: remove_index
#PARENT: GLib.Array.remove_index
#COMMENT: the #GArray
#NAME: match_info
#PARENT: GLib.MatchInfo.next.gboolean
#COMMENT: a #GMatchInfo structure
#NAME: date_time_compare
#PARENT: GLib
#COMMENT: A comparison function for #GDateTimes that is suitable
as a #GCompareFunc. Both #GDateTimes must be non-%NULL.
#NAME: len
#PARENT: GLib.string_new_len.String
#COMMENT: length of @init to use
#NAME: argv
#PARENT: GLib.spawn_async_with_pipes.gboolean
#COMMENT: child's argument vector, in the GLib file name encoding
#NAME: fds
#PARENT: GLib.unix_open_pipe.gboolean
#COMMENT: Array of two integers
#NAME: modifier_letter
#PARENT: GLib.UnicodeType
#COMMENT: General category "Letter, Modifier" (Lm)
#NAME: strescape
#PARENT: GLib
#COMMENT: Escapes the special characters '\b', '\f', '\n', '\r', '\t', '\v', '\'
and '&quot;' in the string @source by inserting a '\' before
them. Additionally all characters in the range 0x01-0x1F (everything
below SPACE) and in the range 0x7F-0xFF (all non-ASCII chars) are
replaced with a '\' followed by their octal representation.
Characters supplied in @exceptions are not escaped.

g_strcompress() does the reverse conversion.
#NAME: close
#PARENT: GLib
#COMMENT: This wraps the close() call; in case of error, %errno will be
preserved, but the error will also be stored as a #GError in @error.

Besides using #GError, there is another major reason to prefer this
function over the call provided by the system; on Unix, it will
attempt to correctly handle %EINTR, which has platform-specific
semantics.
#NAME: get
#PARENT: GLib.Hook.get
#COMMENT: the #GHook with the given id, or %NULL if it is not found
#NAME: condition
#PARENT: GLib.UnixFDSourceFunc.gboolean
#COMMENT: the IO conditions reported on @fd
#NAME: set_main_group
#PARENT: GLib.OptionContext
#COMMENT: Sets a #GOptionGroup as main group of the @context.
This has the same effect as calling g_option_context_add_group(),
the only difference is that the options in the main group are
treated differently when generating `--help` output.
#NAME: nfile
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `ENFILE`
#NAME: thechar
#PARENT: GLib.IOChannel.write_unichar.IOStatus
#COMMENT: a character
#NAME: format
#PARENT: GLib.printf_string_upper_bound.gsize
#COMMENT: the format string. See the printf() documentation
#NAME: cur_position
#PARENT: GLib.Scanner
#COMMENT: Returns the current position in the current line (counting
from 0). This is the position of the last token parsed via
g_scanner_get_next_token().
#NAME: MAXUINT64
#PARENT: GLib
#COMMENT: The maximum value which can be held in a #guint64.
#NAME: new_objv
#PARENT: GLib.Variant
#COMMENT: Constructs an array of object paths #GVariant from the given array of
strings.

Each string must be a valid #GVariant object path; see
g_variant_is_object_path().

If @length is -1 then @strv is %NULL-terminated.
#NAME: value
#PARENT: GLib.Scanner.scope_add_symbol.none
#COMMENT: the value of the symbol
#NAME: prepend
#PARENT: GLib.SList
#COMMENT: Adds a new element on to the start of the list.

The return value is the new start of the list, which
may have changed, so make sure you store the new value.

|[<!-- language="C" -->
// Notice that it is initialized to the empty list.
GSList *list = NULL;
list = g_slist_prepend (list, "last");
list = g_slist_prepend (list, "first");
]|
#NAME: hash
#PARENT: GLib.VariantType
#COMMENT: Hashes @type.

The argument type of @type is only #gconstpointer to allow use with
#GHashTable without function pointer casting.  A valid
#GVariantType must be provided.
#NAME: get_byte
#PARENT: GLib.Variant
#COMMENT: Returns the byte value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_BYTE.
#NAME: get_element_stack
#PARENT: GLib.MarkupParseContext.get_element_stack
#COMMENT: the element stack, which must not be modified
#NAME: string
#PARENT: GLib.String.insert_c.String
#COMMENT: a #GString
#NAME: notify
#PARENT: GLib.idle_add_full.guint
#COMMENT: function to call when the idle is removed, or %NULL
#NAME: new_from_bytes
#PARENT: GLib.Variant
#COMMENT: Constructs a new serialised-mode #GVariant instance.  This is the
inner interface for creation of new serialised values that gets
called from various functions in gvariant.c.

A reference is taken on @bytes.
#NAME: source
#PARENT: GLib.Source.query_unix_fd.IOCondition
#COMMENT: a #GSource
#NAME: size
#PARENT: GLib.format_size.utf8
#COMMENT: a size in bytes
#NAME: get_user_special_dir
#PARENT: GLib
#COMMENT: Returns the full path of a special directory using its logical id.

On UNIX this is done using the XDG special user directories.
For compatibility with existing practise, %G_USER_DIRECTORY_DESKTOP
falls back to `$HOME/Desktop` when XDG special user directories have
not been set up.

Depending on the platform, the user might be able to change the path
of the special directory without requiring the session to restart; GLib
will not reflect any change once the special directories are loaded.
#NAME: save_to_file
#PARENT: GLib.KeyFile
#COMMENT: Writes the contents of @key_file to @filename using
g_file_set_contents().

This function can fail for any of the reasons that
g_file_set_contents() may fail.
#NAME: group_name
#PARENT: GLib.KeyFile.remove_group.gboolean
#COMMENT: a group name
#NAME: scan_comment_multi
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if multi-line comments are recognized
    (the default is %TRUE).
#NAME: uri_parse_scheme
#PARENT: GLib
#COMMENT: Gets the scheme portion of a URI string. RFC 3986 decodes the scheme as:
|[
URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
]|
Common schemes include "file", "http", "svn+ssh", etc.
#NAME: new_take
#PARENT: GLib.Bytes.new_take
#COMMENT: a new #GBytes
#NAME: remove_index
#PARENT: GLib.PtrArray
#COMMENT: Removes the pointer at the given index from the pointer array.
The following elements are moved down one place. If @array has
a non-%NULL #GDestroyNotify function it is called for the removed
element.
#NAME: strstr_len
#PARENT: GLib
#COMMENT: Searches the string @haystack for the first occurrence
of the string @needle, limiting the length of the search
to @haystack_len.
#NAME: maybe
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a maybe-typed value.
#NAME: get_description
#PARENT: GLib.OptionContext
#COMMENT: Returns the description. See g_option_context_set_description().
#NAME: traverse_type
#PARENT: GLib.Tree.traverse.none
#COMMENT: the order in which nodes are visited, one of %G_IN_ORDER,
  %G_PRE_ORDER and %G_POST_ORDER
#NAME: from_asv
#PARENT: GLib.VariantDict.new.VariantDict
#COMMENT: the #GVariant with which to initialise the
  dictionary
#NAME: free
#PARENT: GLib.PatternSpec
#COMMENT: Frees the memory allocated for the #GPatternSpec.
#NAME: MarkupParser
#PARENT: GLib
#COMMENT: Any of the fields in #GMarkupParser can be %NULL, in which case they
will be ignored. Except for the @error function, any of these callbacks
can set an error; in particular the %G_MARKUP_ERROR_UNKNOWN_ELEMENT,
%G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE, and %G_MARKUP_ERROR_INVALID_CONTENT
errors are intended to be set from these callbacks. If you set an error
from a callback, g_markup_parse_context_parse() will report that error
back to its caller.
#NAME: replace_literal
#PARENT: GLib.Regex.replace_literal
#COMMENT: a newly allocated string containing the replacements
#NAME: strv_contains
#PARENT: GLib.strv_contains
#COMMENT: %TRUE if @str is an element of @strv, according to g_str_equal().
#NAME: checksum
#PARENT: GLib.Checksum.get_string.utf8
#COMMENT: a #GChecksum
#NAME: locale_to_utf8
#PARENT: GLib.locale_to_utf8
#COMMENT: A newly-allocated buffer containing the converted string,
              or %NULL on an error, and error will be set.
#NAME: bytes_written
#PARENT: GLib.IOChannel.write_chars.IOStatus
#COMMENT: The number of bytes written. This can be nonzero
                even if the return value is not %G_IO_STATUS_NORMAL.
                If the return value is %G_IO_STATUS_NORMAL and the
                channel is blocking, this will always be equal
                to @count if @count >= 0.
#NAME: uri
#PARENT: GLib.BookmarkFile.get_modified.glong
#COMMENT: a valid URI
#NAME: notify
#PARENT: GLib.io_add_watch_full.guint
#COMMENT: the function to call when the source is removed
#NAME: n_block_bytes
#PARENT: GLib.try_realloc_n.gpointer
#COMMENT: the size of each block in bytes
#NAME: newline_anycrlf
#PARENT: GLib.RegexCompileFlags
#COMMENT: Usually any newline character or character sequence
    is recognized. If this option is set, the only recognized newline character
    sequences are '\r', '\n', and '\r\n'. Since: 2.34
#NAME: comma
#PARENT: GLib.TokenType
#COMMENT: a ',' character
#NAME: VariantType
#PARENT: GLib
#COMMENT: This section introduces the GVariant type system. It is based, in
large part, on the D-Bus type system, with two major changes and
some minor lifting of restrictions. The
[D-Bus specification](http://dbus.freedesktop.org/doc/dbus-specification.html),
therefore, provides a significant amount of
information that is useful when working with GVariant.

The first major change with respect to the D-Bus type system is the
introduction of maybe (or "nullable") types.  Any type in GVariant can be
converted to a maybe type, in which case, "nothing" (or "null") becomes a
valid value.  Maybe types have been added by introducing the
character "m" to type strings.

The second major change is that the GVariant type system supports the
concept of "indefinite types" -- types that are less specific than
the normal types found in D-Bus.  For example, it is possible to speak
of "an array of any type" in GVariant, where the D-Bus type system
would require you to speak of "an array of integers" or "an array of
strings".  Indefinite types have been added by introducing the
characters "*", "?" and "r" to type strings.

Finally, all arbitrary restrictions relating to the complexity of
types are lifted along with the restriction that dictionary entries
may only appear nested inside of arrays.

Just as in D-Bus, GVariant types are described with strings ("type
strings").  Subject to the differences mentioned above, these strings
are of the same form as those found in DBus.  Note, however: D-Bus
always works in terms of messages and therefore individual type
strings appear nowhere in its interface.  Instead, "signatures"
are a concatenation of the strings of the type of each argument in a
message.  GVariant deals with single values directly so GVariant type
strings always describe the type of exactly one value.  This means
that a D-Bus signature string is generally not a valid GVariant type
string -- except in the case that it is the signature of a message
containing exactly one argument.

An indefinite type is similar in spirit to what may be called an
abstract type in other type systems.  No value can exist that has an
indefinite type as its type, but values can exist that have types
that are subtypes of indefinite types.  That is to say,
g_variant_get_type() will never return an indefinite type, but
calling g_variant_is_of_type() with an indefinite type may return
%TRUE.  For example, you cannot have a value that represents "an
array of no particular type", but you can have an "array of integers"
which certainly matches the type of "an array of no particular type",
since "array of integers" is a subtype of "array of no particular
type".

This is similar to how instances of abstract classes may not
directly exist in other type systems, but instances of their
non-abstract subtypes may.  For example, in GTK, no object that has
the type of #GtkBin can exist (since #GtkBin is an abstract class),
but a #GtkWindow can certainly be instantiated, and you would say
that the #GtkWindow is a #GtkBin (since #GtkWindow is a subclass of
#GtkBin).

## GVariant Type Strings

A GVariant type string can be any of the following:

- any basic type string (listed below)

- "v", "r" or "*"

- one of the characters 'a' or 'm', followed by another type string

- the character '(', followed by a concatenation of zero or more other
  type strings, followed by the character ')'

- the character '{', followed by a basic type string (see below),
  followed by another type string, followed by the character '}'

A basic type string describes a basic type (as per
g_variant_type_is_basic()) and is always a single character in length.
The valid basic type strings are "b", "y", "n", "q", "i", "u", "x", "t",
"h", "d", "s", "o", "g" and "?".

The above definition is recursive to arbitrary depth. "aaaaai" and
"(ui(nq((y)))s)" are both valid type strings, as is
"a(aa(ui)(qna{ya(yd)}))".

The meaning of each of the characters is as follows:
- `b`: the type string of %G_VARIANT_TYPE_BOOLEAN; a boolean value.
- `y`: the type string of %G_VARIANT_TYPE_BYTE; a byte.
- `n`: the type string of %G_VARIANT_TYPE_INT16; a signed 16 bit integer.
- `q`: the type string of %G_VARIANT_TYPE_UINT16; an unsigned 16 bit integer.
- `i`: the type string of %G_VARIANT_TYPE_INT32; a signed 32 bit integer.
- `u`: the type string of %G_VARIANT_TYPE_UINT32; an unsigned 32 bit integer.
- `x`: the type string of %G_VARIANT_TYPE_INT64; a signed 64 bit integer.
- `t`: the type string of %G_VARIANT_TYPE_UINT64; an unsigned 64 bit integer.
- `h`: the type string of %G_VARIANT_TYPE_HANDLE; a signed 32 bit value
  that, by convention, is used as an index into an array of file
  descriptors that are sent alongside a D-Bus message.
- `d`: the type string of %G_VARIANT_TYPE_DOUBLE; a double precision
  floating point value.
- `s`: the type string of %G_VARIANT_TYPE_STRING; a string.
- `o`: the type string of %G_VARIANT_TYPE_OBJECT_PATH; a string in the form
  of a D-Bus object path.
- `g`: the type string of %G_VARIANT_TYPE_STRING; a string in the form of
  a D-Bus type signature.
- `?`: the type string of %G_VARIANT_TYPE_BASIC; an indefinite type that
  is a supertype of any of the basic types.
- `v`: the type string of %G_VARIANT_TYPE_VARIANT; a container type that
  contain any other type of value.
- `a`: used as a prefix on another type string to mean an array of that
  type; the type string "ai", for example, is the type of an array of
  signed 32-bit integers.
- `m`: used as a prefix on another type string to mean a "maybe", or
  "nullable", version of that type; the type string "ms", for example,
  is the type of a value that maybe contains a string, or maybe contains
  nothing.
- `()`: used to enclose zero or more other concatenated type strings to
  create a tuple type; the type string "(is)", for example, is the type of
  a pair of an integer and a string.
- `r`: the type string of %G_VARIANT_TYPE_TUPLE; an indefinite type that is
  a supertype of any tuple type, regardless of the number of items.
- `{}`: used to enclose a basic type string concatenated with another type
  string to create a dictionary entry type, which usually appears inside of
  an array to form a dictionary; the type string "a{sd}", for example, is
  the type of a dictionary that maps strings to double precision floating
  point values.

  The first type (the basic type) is the key type and the second type is
  the value type. The reason that the first type is restricted to being a
  basic type is so that it can easily be hashed.
- `*`: the type string of %G_VARIANT_TYPE_ANY; the indefinite type that is
  a supertype of all types.  Note that, as with all type strings, this
  character represents exactly one type. It cannot be used inside of tuples
  to mean "any number of items".

Any type string of a container that contains an indefinite type is,
itself, an indefinite type. For example, the type string "a*"
(corresponding to %G_VARIANT_TYPE_ARRAY) is an indefinite type
that is a supertype of every array type. "(*s)" is a supertype
of all tuples that contain exactly two items where the second
item is a string.

"a{?*}" is an indefinite type that is a supertype of all arrays
containing dictionary entries where the key is any basic type and
the value is any type at all.  This is, by definition, a dictionary,
so this type string corresponds to %G_VARIANT_TYPE_DICTIONARY. Note
that, due to the restriction that the key of a dictionary entry must
be a basic type, "{**}" is not a valid type string.
#NAME: append
#PARENT: GLib.SList.append
#COMMENT: the new start of the #GSList
#NAME: list
#PARENT: GLib.List.last.gpointer
#COMMENT: any #GList element
#NAME: func
#PARENT: GLib.MainContext.set_poll_func.none
#COMMENT: the function to call to poll all file descriptors
#NAME: sibling
#PARENT: GLib.Queue.insert_before.none
#COMMENT: a #GList link that must be part of @queue, or %NULL to
  push at the tail of the queue.
#NAME: str
#PARENT: GLib.strdup.utf8
#COMMENT: the string to duplicate
#NAME: remove_by_user_data
#PARENT: GLib.Source.remove_by_user_data
#COMMENT: %TRUE if a source was found and removed.
#NAME: uint16
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is an unsigned 16 bit integer.
#NAME: value
#PARENT: GLib.Scanner
#COMMENT: value of the last token from g_scanner_get_next_token()
#NAME: uri_unescape_string
#PARENT: GLib.uri_unescape_string
#COMMENT: an unescaped version of @escaped_string. The returned string
should be freed when no longer needed.
#NAME: len
#PARENT: GLib.utf16_to_utf8.utf8
#COMMENT: the maximum length (number of #gunichar2) of @str to use.
    If @len < 0, then the string is nul-terminated.
#NAME: deseret
#PARENT: GLib.UnicodeScript
#COMMENT: Deseret
#NAME: idle_add_full
#PARENT: GLib
#COMMENT: Adds a function to be called whenever there are no higher priority
events pending.  If the function returns %FALSE it is automatically
removed from the list of event sources and will not be called again.

This internally creates a main loop source using g_idle_source_new()
and attaches it to the global #GMainContext using g_source_attach(), so
the callback will be invoked in whichever thread is running that main
context. You can do these steps manually if you need greater control or to
use a custom main context.
#NAME: items_written
#PARENT: GLib.utf8_to_utf16.guint16
#COMMENT: location to store number of #gunichar2
    written, or %NULL. The value stored here does not include the
    trailing 0.
#NAME: complex_context
#PARENT: GLib.UnicodeBreakType
#COMMENT: Complex Content Dependent (South East Asian) (SA)
#NAME: n_children
#PARENT: GLib.Node
#COMMENT: Gets the number of children of a #GNode.
#NAME: parse_error_print_context
#PARENT: GLib.Variant.parse_error_print_context
#COMMENT: the printed message
#NAME: old_destroy
#PARENT: GLib.datalist_id_replace_data.gboolean
#COMMENT: destroy notify for the existing value
#NAME: set_list_separator
#PARENT: GLib.KeyFile
#COMMENT: Sets the character which is used to separate
values in lists. Typically ';' or ',' are used
as separators. The default list separator is ';'.
#NAME: ref
#PARENT: GLib.HashTable
#COMMENT: Atomically increments the reference count of @hash_table by one.
This function is MT-safe and may be called from any thread.
#NAME: list
#PARENT: GLib.List.insert_sorted_with_data.gpointer
#COMMENT: a pointer to a #GList, this must point to the top of the
    already sorted list
#NAME: reserved_chars_allowed
#PARENT: GLib.String.append_uri_escaped.String
#COMMENT: a string of reserved characters allowed
    to be used, or %NULL
#NAME: Regex
#PARENT: GLib
#COMMENT: The g_regex_*() functions implement regular
expression pattern matching using syntax and semantics similar to
Perl regular expression.

Some functions accept a @start_position argument, setting it differs
from just passing over a shortened string and setting #G_REGEX_MATCH_NOTBOL
in the case of a pattern that begins with any kind of lookbehind assertion.
For example, consider the pattern "\Biss\B" which finds occurrences of "iss"
in the middle of words. ("\B" matches only if the current position in the
subject is not a word boundary.) When applied to the string "Mississipi"
from the fourth byte, namely "issipi", it does not match, because "\B" is
always false at the start of the subject, which is deemed to be a word
boundary. However, if the entire string is passed , but with
@start_position set to 4, it finds the second occurrence of "iss" because
it is able to look behind the starting point to discover that it is
preceded by a letter.

Note that, unless you set the #G_REGEX_RAW flag, all the strings passed
to these functions must be encoded in UTF-8. The lengths and the positions
inside the strings are in bytes and not in characters, so, for instance,
"\xc3\xa0" (i.e. "&agrave;") is two bytes long but it is treated as a
single character. If you set #G_REGEX_RAW the strings can be non-valid
UTF-8 strings and a byte is treated as a character, so "\xc3\xa0" is two
bytes and two characters long.

When matching a pattern, "\n" matches only against a "\n" character in
the string, and "\r" matches only a "\r" character. To match any newline
sequence use "\R". This particular group matches either the two-character
sequence CR + LF ("\r\n"), or one of the single characters LF (linefeed,
U+000A, "\n"), VT vertical tab, U+000B, "\v"), FF (formfeed, U+000C, "\f"),
CR (carriage return, U+000D, "\r"), NEL (next line, U+0085), LS (line
separator, U+2028), or PS (paragraph separator, U+2029).

The behaviour of the dot, circumflex, and dollar metacharacters are
affected by newline characters, the default is to recognize any newline
character (the same characters recognized by "\R"). This can be changed
with #G_REGEX_NEWLINE_CR, #G_REGEX_NEWLINE_LF and #G_REGEX_NEWLINE_CRLF
compile options, and with #G_REGEX_MATCH_NEWLINE_ANY,
#G_REGEX_MATCH_NEWLINE_CR, #G_REGEX_MATCH_NEWLINE_LF and
#G_REGEX_MATCH_NEWLINE_CRLF match options. These settings are also
relevant when compiling a pattern if #G_REGEX_EXTENDED is set, and an
unescaped "#" outside a character class is encountered. This indicates
a comment that lasts until after the next newline.

When setting the %G_REGEX_JAVASCRIPT_COMPAT flag, pattern syntax and pattern
matching is changed to be compatible with the way that regular expressions
work in JavaScript. More precisely, a lonely ']' character in the pattern
is a syntax error; the '\x' escape only allows 0 to 2 hexadecimal digits, and
you must use the '\u' escape sequence with 4 hex digits to specify a unicode
codepoint instead of '\x' or 'x{....}'. If '\x' or '\u' are not followed by
the specified number of hex digits, they match 'x' and 'u' literally; also
'\U' always matches 'U' instead of being an error in the pattern. Finally,
pattern matching is modified so that back references to an unset subpattern
group produces a match with the empty string instead of an error. See
pcreapi(3) for more information.

Creating and manipulating the same #GRegex structure from different
threads is not a problem as #GRegex does not modify its internal
state between creation and destruction, on the other hand #GMatchInfo
is not threadsafe.

The regular expressions low-level functionalities are obtained through
the excellent
[PCRE](http://www.pcre.org/)
library written by Philip Hazel.
#NAME: add
#PARENT: GLib.DateTime.add
#COMMENT: the newly created #GDateTime which should be freed with
  g_date_time_unref().
#NAME: wednesday
#PARENT: GLib.DateWeekday
#COMMENT: Wednesday
#NAME: query
#PARENT: GLib.MainContext.query
#COMMENT: the number of records actually stored in @fds,
  or, if more than @n_fds records need to be stored, the number
  of records that need to be stored.
#NAME: get_charset
#PARENT: GLib.get_charset
#COMMENT: %TRUE if the returned charset is UTF-8
#NAME: length
#PARENT: GLib.Variant.dup_bytestring_array.utf8
#COMMENT: the length of the result, or %NULL
#NAME: funcs
#PARENT: GLib.Source.set_funcs.none
#COMMENT: the new #GSourceFuncs
#NAME: list
#PARENT: GLib.SList.find_custom.gpointer
#COMMENT: a #GSList
#NAME: newval
#PARENT: GLib.atomic_int_set.none
#COMMENT: a new value to store
#NAME: standard_error
#PARENT: GLib.spawn_command_line_sync.gboolean
#COMMENT: return location for child errors
#NAME: context
#PARENT: GLib.OptionContext.get_ignore_unknown_options.gboolean
#COMMENT: a #GOptionContext
#NAME: iter
#PARENT: GLib.HashTableIter.get_hash_table.gpointer
#COMMENT: an initialized #GHashTableIter
#NAME: invoke_check
#PARENT: GLib.HookList
#COMMENT: Calls all of the #GHook functions in a #GHookList.
Any function which returns %FALSE is removed from the #GHookList.
#NAME: scanner
#PARENT: GLib.Scanner.cur_token.TokenType
#COMMENT: a #GScanner
#NAME: func
#PARENT: GLib.io_add_watch.guint
#COMMENT: the function to call when the condition is satisfied
#NAME: RegexEvalCallback
#PARENT: GLib.RegexEvalCallback
#COMMENT: %FALSE to continue the replacement process, %TRUE to stop it
#NAME: TestSubprocessFlags
#PARENT: GLib
#COMMENT: Flags to pass to g_test_trap_subprocess() to control input and output.

Note that in contrast with g_test_trap_fork(), the default is to
not show stdout and stderr.
#NAME: perm
#PARENT: GLib.FileError
#COMMENT: Operation not permitted; only the owner of the
   file (or other resource) or processes with special privileges can
   perform the operation.
#NAME: UnicodeBreakType
#PARENT: GLib
#COMMENT: These are the possible line break classifications.

Since new unicode versions may add new types here, applications should be ready
to handle unknown values. They may be regarded as %G_UNICODE_BREAK_UNKNOWN.

See <ulink url="http://www.unicode.org/unicode/reports/tr14/">http://www.unicode.org/unicode/reports/tr14/</ulink>.
#NAME: float_radix
#PARENT: GLib.ErrorType
#COMMENT: non-decimal floating point number
#NAME: match_info
#PARENT: GLib.MatchInfo.fetch.utf8
#COMMENT: #GMatchInfo structure
#NAME: length
#PARENT: GLib.Variant.new_objv.Variant
#COMMENT: the length of @strv, or -1
#NAME: datetime
#PARENT: GLib.DateTime.is_daylight_savings.gboolean
#COMMENT: a #GDateTime
#NAME: text
#PARENT: GLib.markup_escape_text.utf8
#COMMENT: some valid UTF-8 text
#NAME: new_double
#PARENT: GLib.Variant
#COMMENT: Creates a new double #GVariant instance.
#NAME: source_funcs
#PARENT: GLib.Source.new.Source
#COMMENT: structure containing functions that implement
               the sources behavior.
#NAME: regex_split_simple
#PARENT: GLib
#COMMENT: Breaks the string on the pattern, and returns an array of
the tokens. If the pattern contains capturing parentheses,
then the text for each of the substrings will also be returned.
If the pattern does not match anywhere in the string, then the
whole string is returned as the first token.

This function is equivalent to g_regex_split() but it does
not require to compile the pattern with g_regex_new(), avoiding
some lines of code when you need just to do a split without
extracting substrings, capture counts, and so on.

If this function is to be called on the same @pattern more than
once, it's more efficient to compile the pattern once with
g_regex_new() and then use g_regex_split().

As a special case, the result of splitting the empty string ""
is an empty vector, not a vector containing a single string.
The reason for this special case is that being able to represent
a empty vector is typically more useful than consistent handling
of empty elements. If you do need to represent empty elements,
you'll need to check for the empty string before calling this
function.

A pattern that can match empty strings splits @string into
separate characters wherever it matches the empty string between
characters. For example splitting "ab c" using as a separator
"\s*", you will get "a", "b" and "c".
#NAME: maximized_quantity
#PARENT: GLib.test_maximized_result.none
#COMMENT: the reported value
#NAME: string
#PARENT: GLib.String.prepend_unichar.String
#COMMENT: a #GString
#NAME: test_trap_flags
#PARENT: GLib.test_trap_fork.gboolean
#COMMENT: Flags to modify forking behaviour.
#NAME: test_rand_double_range
#PARENT: GLib.test_rand_double_range
#COMMENT: a number with @range_start <= number < @range_end.
#NAME: unichar_isgraph
#PARENT: GLib.unichar_isgraph
#COMMENT: %TRUE if @c is printable unless it's a space
#NAME: seed_length
#PARENT: GLib.Rand.new_with_seed_array.Rand
#COMMENT: an array of seeds to initialize the random number
    generator
#NAME: bookmark
#PARENT: GLib.BookmarkFile.has_group.gboolean
#COMMENT: a #GBookmarkFile
#NAME: condition
#PARENT: GLib.unix_fd_add_full.guint
#COMMENT: IO conditions to watch for on @fd
#NAME: scanner
#PARENT: GLib.Scanner.get_next_token.TokenType
#COMMENT: a #GScanner
#NAME: next
#PARENT: GLib.Hook
#COMMENT: pointer to the next hook in the list
#NAME: group_name
#PARENT: GLib.KeyFile.get_integer_list.gint
#COMMENT: a group name
#NAME: checksum_type_get_length
#PARENT: GLib
#COMMENT: Gets the length in bytes of digests of type @checksum_type
#NAME: uint32
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is an unsigned 32 bit integer.
#NAME: get_boolean
#PARENT: GLib.KeyFile
#COMMENT: Returns the value associated with @key under @group_name as a
boolean.

If @key cannot be found then %FALSE is returned and @error is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value
associated with @key cannot be interpreted as a boolean then %FALSE
is returned and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
#NAME: len
#PARENT: GLib.String.erase.String
#COMMENT: the number of bytes to remove, or -1 to remove all
      following bytes
#NAME: unichar_isxdigit
#PARENT: GLib.unichar_isxdigit
#COMMENT: %TRUE if the character is a hexadecimal digit
#NAME: uri_list
#PARENT: GLib.uri_list_extract_uris.utf8
#COMMENT: an URI list
#NAME: list
#PARENT: GLib.List.position.gint
#COMMENT: a #GList, this must point to the top of the list
#NAME: insert_vals
#PARENT: GLib.Array
#COMMENT: Inserts @len elements into a #GArray at the given index.
#NAME: sequence_move_range
#PARENT: GLib
#COMMENT: Inserts the (@begin, @end) range at the destination pointed to by ptr.
The @begin and @end iters must point into the same sequence. It is
allowed for @dest to point to a different sequence than the one pointed
into by @begin and @end.

If @dest is NULL, the range indicated by @begin and @end is
removed from the sequence. If @dest iter points to a place within
the (@begin, @end) range, the range does not move.
#NAME: get_num_threads
#PARENT: GLib.ThreadPool
#COMMENT: Returns the number of threads currently running in @pool.
#NAME: remove_all
#PARENT: GLib.SList
#COMMENT: Removes all list nodes with data equal to @data.
Returns the new head of the list. Contrast with
g_slist_remove() which removes only the first node
matching the given data.
#NAME: n_months
#PARENT: GLib.Date.add_months.none
#COMMENT: number of months to move forward
#NAME: start_position
#PARENT: GLib.Regex.replace_literal.utf8
#COMMENT: starting index of the string to match
#NAME: size
#PARENT: GLib.Variant.new_from_data.Variant
#COMMENT: the size of @data
#NAME: digit_radix
#PARENT: GLib.ErrorType
#COMMENT: digit beyond radix in a number
#NAME: PollFunc
#PARENT: GLib
#COMMENT: Specifies the type of function passed to g_main_context_set_poll_func().
The semantics of the function should match those of the poll() system call.
#NAME: StringChunk
#PARENT: GLib
#COMMENT: An opaque data structure representing String Chunks.
It should only be accessed by using the following functions.
#NAME: TIME_SPAN_HOUR
#PARENT: GLib
#COMMENT: Evaluates to a time span of one hour.
#NAME: uri
#PARENT: GLib.BookmarkFile.set_is_private.none
#COMMENT: a valid URI
#NAME: double_range
#PARENT: GLib.Rand.double_range
#COMMENT: a random number
#NAME: filename_display_name
#PARENT: GLib
#COMMENT: Converts a filename into a valid UTF-8 string. The conversion is
not necessarily reversible, so you should keep the original around
and use the return value of this function only for display purposes.
Unlike g_filename_to_utf8(), the result is guaranteed to be non-%NULL
even if the filename actually isn't in the GLib file name encoding.

If GLib cannot make sense of the encoding of @filename, as a last resort it
replaces unknown characters with U+FFFD, the Unicode replacement character.
You can search the result for the UTF-8 encoding of this character (which is
"\357\277\275" in octal notation) to find out if @filename was in an invalid
encoding.

If you know the whole pathname of the file you should use
g_filename_display_basename(), since that allows location-based
translation of filenames.
#NAME: thread_pool_get_max_idle_time
#PARENT: GLib
#COMMENT: This function will return the maximum @interval that a
thread will wait in the thread pool for new tasks before
being stopped.

If this function returns 0, threads waiting in the thread
pool for new work are not stopped.
#NAME: iter
#PARENT: GLib.SequenceIter.next.SequenceIter
#COMMENT: a #GSequenceIter
#NAME: func
#PARENT: GLib.OptionGroup.set_translate_func.none
#COMMENT: the #GTranslateFunc, or %NULL
#NAME: digest_len
#PARENT: GLib.Checksum.get_digest.none
#COMMENT: an inout parameter. The caller initializes it to the size of @buffer.
  After the call it contains the length of the digest.
#NAME: ref
#PARENT: GLib.Hook.ref
#COMMENT: the @hook that was passed in (since 2.6)
#NAME: len
#PARENT: GLib.utf8_to_ucs4.gunichar
#COMMENT: the maximum length of @str to use, in bytes. If @len < 0,
    then the string is nul-terminated.
#NAME: hook_id
#PARENT: GLib.hook_destroy.gboolean
#COMMENT: a hook ID
#NAME: chdir
#PARENT: GLib
#COMMENT: A wrapper for the POSIX chdir() function. The function changes the
current directory of the process to @path.

See your C library manual for more details about chdir().
#NAME: len
#PARENT: GLib.ascii_strup.utf8
#COMMENT: length of @str in bytes, or -1 if @str is nul-terminated
#NAME: sync_file_offset
#PARENT: GLib.Scanner
#COMMENT: Rewinds the filedescriptor to the current buffer position
and blows the file read ahead buffer. This is useful for
third party uses of the scanners filedescriptor, which hooks
onto the current scanning position.
#NAME: datetime
#PARENT: GLib.DateTime.to_unix.gint64
#COMMENT: a #GDateTime
#NAME: match_options
#PARENT: GLib.Regex.match_all.gboolean
#COMMENT: match options
#NAME: len
#PARENT: GLib.locale_to_utf8.utf8
#COMMENT: the length of the string, or -1 if the string is
                nul-terminated (Note that some encodings may allow nul
                bytes to occur inside strings. In that case, using -1
                for the @len parameter is unsafe)
#NAME: begin
#PARENT: GLib.test_rand_int_range.gint32
#COMMENT: the minimum value returned by this function
#NAME: description
#PARENT: GLib.OptionEntry
#COMMENT: the description for the option in `--help`
    output. The @description is translated using the @translate_func
    of the group, see g_option_group_set_translation_domain().
#NAME: filename_from_utf8
#PARENT: GLib.filename_from_utf8
#COMMENT: 
              The converted string, or %NULL on an error.
#NAME: format_string
#PARENT: GLib.Variant.get_child.none
#COMMENT: a #GVariant format string
#NAME: get_child
#PARENT: GLib.Variant
#COMMENT: Reads a child item out of a container #GVariant instance and
deconstructs it according to @format_string.  This call is
essentially a combination of g_variant_get_child_value() and
g_variant_get().

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed,
see the section on
[GVariant format strings][gvariant-format-strings-pointers].
#NAME: init_leave
#PARENT: GLib.Once
#COMMENT: Counterpart to g_once_init_enter(). Expects a location of a static
0-initialized initialization variable, and an initialization value
other than 0. Sets the variable to the initialization value, and
releases concurrent threads blocking in g_once_init_enter() on this
initialization variable.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.set_visited.none
#COMMENT: a #GBookmarkFile
#NAME: context
#PARENT: GLib.MarkupParseContext.get_element_stack.gpointer
#COMMENT: a #GMarkupParseContext
#NAME: hook_list
#PARENT: GLib.HookList.clear.none
#COMMENT: a #GHookList
#NAME: free
#PARENT: GLib.StringChunk
#COMMENT: Frees all memory allocated by the #GStringChunk.
After calling g_string_chunk_free() it is not safe to
access any of the strings which were contained within it.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_title.utf8
#COMMENT: a #GBookmarkFile
#NAME: handler
#PARENT: GLib.unix_signal_add.guint
#COMMENT: Callback
#NAME: push_head
#PARENT: GLib.Queue
#COMMENT: Adds a new element at the head of the queue.
#NAME: pattern
#PARENT: GLib.pattern_match_simple.gboolean
#COMMENT: the UTF-8 encoded pattern
#NAME: utf8_find_next_char
#PARENT: GLib
#COMMENT: Finds the start of the next UTF-8 character in the string after @p.

@p does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte.
#NAME: str_to_ascii
#PARENT: GLib
#COMMENT: Transliterate @str to plain ASCII.

For best results, @str should be in composed normalised form.

This function performs a reasonably good set of character
replacements.  The particular set of replacements that is done may
change by version or even by runtime environment.

If the source language of @str is known, it can used to improve the
accuracy of the translation by passing it as @from_locale.  It should
be a valid POSIX locale string (of the form
"language[_territory][.codeset][@modifier]").

If @from_locale is %NULL then the current locale is used.

If you want to do translation for no specific locale, and you want it
to be done independently of the currently locale, specify "C" for
@from_locale.
#NAME: events
#PARENT: GLib.Source.add_unix_fd.gpointer
#COMMENT: an event mask
#NAME: endptr
#PARENT: GLib.ascii_strtoll.gint64
#COMMENT: if non-%NULL, it returns the character after
          the last character used in the conversion.
#NAME: timed_pop
#PARENT: GLib.AsyncQueue
#COMMENT: Pops data from the @queue. If the queue is empty, blocks until
@end_time or until data becomes available.

If no data is received before @end_time, %NULL is returned.

To easily calculate @end_time, a combination of g_get_current_time()
and g_time_val_add() can be used.
#NAME: str
#PARENT: GLib.utf8_strdown.utf8
#COMMENT: a UTF-8 encoded string
#NAME: key
#PARENT: GLib.KeyFile.get_locale_string.utf8
#COMMENT: a key
#NAME: unterminated_character_class
#PARENT: GLib.RegexError
#COMMENT: Missing terminating "]" for
    character class. Since 2.16
#NAME: year
#PARENT: GLib.Date.valid_dmy.gboolean
#COMMENT: year
#NAME: format_size_for_display
#PARENT: GLib.format_size_for_display
#COMMENT: a newly-allocated formatted string containing a human
    readable file size
#NAME: copy_func
#PARENT: GLib.Node.copy_deep.Node
#COMMENT: the function which is called to copy the data inside each node,
  or %NULL to use the original data.
#NAME: gothic
#PARENT: GLib.UnicodeScript
#COMMENT: Gothic
#NAME: datetime
#PARENT: GLib.DateTime.get_day_of_year.gint
#COMMENT: a #GDateTime
#NAME: get_pattern
#PARENT: GLib.Regex.get_pattern
#COMMENT: the pattern of @regex
#NAME: c
#PARENT: GLib.unichar_isalnum.gboolean
#COMMENT: a Unicode character
#NAME: utf8_strreverse
#PARENT: GLib
#COMMENT: Reverses a UTF-8 string. @str must be valid UTF-8 encoded text.
(Use g_utf8_validate() on all text before trying to use UTF-8
utility functions with it.)

This function is intended for programmatic uses of reversed strings.
It pays no attention to decomposed characters, combining marks, byte
order marks, directional indicators (LRM, LRO, etc) and similar
characters which might need special handling when reversing a string
for display purposes.

Note that unlike g_strreverse(), this function returns
newly-allocated memory, which should be freed with g_free() when
no longer needed.
#NAME: sha256
#PARENT: GLib.ChecksumType
#COMMENT: Use the SHA-256 hashing algorithm
#NAME: remove_link
#PARENT: GLib.SList.remove_link
#COMMENT: the new start of the #GSList, without the element
#NAME: ref
#PARENT: GLib.Array
#COMMENT: Atomically increments the reference count of @array by one.
This function is MT-safe and may be called from any thread.
#NAME: exists
#PARENT: GLib.FileTest
#COMMENT: %TRUE if the file exists. It may or may not
    be a regular file.
#NAME: pri
#PARENT: GLib.IOCondition
#COMMENT: There is urgent data to read.
#NAME: c
#PARENT: GLib.unichar_totitle.gunichar
#COMMENT: a Unicode character
#NAME: append_printf
#PARENT: GLib.String
#COMMENT: Appends a formatted string onto the end of a #GString.
This function is similar to g_string_printf() except
that the text is appended to the #GString.
#NAME: format
#PARENT: GLib.DateTime
#COMMENT: Creates a newly allocated string representing the requested @format.

The format strings understood by this function are a subset of the
strftime() format language as specified by C99.  The \%D, \%U and \%W
conversions are not supported, nor is the 'E' modifier.  The GNU
extensions \%k, \%l, \%s and \%P are supported, however, as are the
'0', '_' and '-' modifiers.

In contrast to strftime(), this function always produces a UTF-8
string, regardless of the current locale.  Note that the rendering of
many formats is locale-dependent and may not match the strftime()
output exactly.

The following format specifiers are supported:

- \%a: the abbreviated weekday name according to the current locale
- \%A: the full weekday name according to the current locale
- \%b: the abbreviated month name according to the current locale
- \%B: the full month name according to the current locale
- \%c: the  preferred date and time rpresentation for the current locale
- \%C: the century number (year/100) as a 2-digit integer (00-99)
- \%d: the day of the month as a decimal number (range 01 to 31)
- \%e: the day of the month as a decimal number (range  1 to 31)
- \%F: equivalent to `%Y-%m-%d` (the ISO 8601 date format)
- \%g: the last two digits of the ISO 8601 week-based year as a
  decimal number (00-99). This works well with \%V and \%u.
- \%G: the ISO 8601 week-based year as a decimal number. This works
  well with \%V and \%u.
- \%h: equivalent to \%b
- \%H: the hour as a decimal number using a 24-hour clock (range 00 to 23)
- \%I: the hour as a decimal number using a 12-hour clock (range 01 to 12)
- \%j: the day of the year as a decimal number (range 001 to 366)
- \%k: the hour (24-hour clock) as a decimal number (range 0 to 23);
  single digits are preceded by a blank
- \%l: the hour (12-hour clock) as a decimal number (range 1 to 12);
  single digits are preceded by a blank
- \%m: the month as a decimal number (range 01 to 12)
- \%M: the minute as a decimal number (range 00 to 59)
- \%p: either "AM" or "PM" according to the given time value, or the
  corresponding  strings for the current locale.  Noon is treated as
  "PM" and midnight as "AM".
- \%P: like \%p but lowercase: "am" or "pm" or a corresponding string for
  the current locale
- \%r: the time in a.m. or p.m. notation
- \%R: the time in 24-hour notation (\%H:\%M)
- \%s: the number of seconds since the Epoch, that is, since 1970-01-01
  00:00:00 UTC
- \%S: the second as a decimal number (range 00 to 60)
- \%t: a tab character
- \%T: the time in 24-hour notation with seconds (\%H:\%M:\%S)
- \%u: the ISO 8601 standard day of the week as a decimal, range 1 to 7,
   Monday being 1. This works well with \%G and \%V.
- \%V: the ISO 8601 standard week number of the current year as a decimal
  number, range 01 to 53, where week 1 is the first week that has at
  least 4 days in the new year. See g_date_time_get_week_of_year().
  This works well with \%G and \%u.
- \%w: the day of the week as a decimal, range 0 to 6, Sunday being 0.
  This is not the ISO 8601 standard format -- use \%u instead.
- \%x: the preferred date representation for the current locale without
  the time
- \%X: the preferred time representation for the current locale without
  the date
- \%y: the year as a decimal number without the century
- \%Y: the year as a decimal number including the century
- \%z: the time zone as an offset from UTC (+hhmm)
- \%:z: the time zone as an offset from UTC (+hh:mm).
  This is a gnulib strftime() extension. Since: 2.38
- \%::z: the time zone as an offset from UTC (+hh:mm:ss). This is a
  gnulib strftime() extension. Since: 2.38
- \%:::z: the time zone as an offset from UTC, with : to necessary
  precision (e.g., -04, +05:30). This is a gnulib strftime() extension. Since: 2.38
- \%Z: the time zone or name or abbreviation
- \%\%: a literal \% character

Some conversion specifications can be modified by preceding the
conversion specifier by one or more modifier characters. The
following modifiers are supported for many of the numeric
conversions:

- O: Use alternative numeric symbols, if the current locale supports those.
- _: Pad a numeric result with spaces. This overrides the default padding
  for the specifier.
- -: Do not pad a numeric result. This overrides the default padding
  for the specifier.
- 0: Pad a numeric result with zeros. This overrides the default padding
  for the specifier.
#NAME: pool
#PARENT: GLib.ThreadPool.set_max_threads.gboolean
#COMMENT: a #GThreadPool
#NAME: is_ancestor
#PARENT: GLib.Node.is_ancestor
#COMMENT: %TRUE if @node is an ancestor of @descendant
#NAME: hostname_is_non_ascii
#PARENT: GLib
#COMMENT: Tests if @hostname contains Unicode characters. If this returns
%TRUE, you need to encode the hostname with g_hostname_to_ascii()
before using it in non-IDN-aware contexts.

Note that a hostname might contain a mix of encoded and unencoded
segments, and so it is possible for g_hostname_is_non_ascii() and
g_hostname_is_ascii_encoded() to both return %TRUE for a name.
#NAME: is_private
#PARENT: GLib.BookmarkFile.set_is_private.none
#COMMENT: %TRUE if the bookmark should be marked as private
#NAME: format
#PARENT: GLib.vsprintf.gint
#COMMENT: a standard printf() format string, but notice
         [string precision pitfalls][string-precision]
#NAME: takri
#PARENT: GLib.UnicodeScript
#COMMENT: Takri. Since: 2.32
#NAME: cur_line
#PARENT: GLib.Scanner
#COMMENT: Returns the current line in the input stream (counting
from 1). This is the line of the last token parsed via
g_scanner_get_next_token().
#NAME: data
#PARENT: GLib.ThreadPool.push.gboolean
#COMMENT: a new task for @pool
#NAME: shell_quote
#PARENT: GLib.shell_quote
#COMMENT: quoted string
#NAME: length
#PARENT: GLib.KeyFile.get_integer_list.gint
#COMMENT: the number of integers returned
#NAME: erase
#PARENT: GLib.String.erase
#COMMENT: @string
#NAME: iter_new
#PARENT: GLib.Variant.iter_new
#COMMENT: a new heap-allocated #GVariantIter
#NAME: key
#PARENT: GLib.KeyFile.get_double_list.gdouble
#COMMENT: a key
#NAME: firstline
#PARENT: GLib.RegexCompileFlags
#COMMENT: Limits an unanchored pattern to match before (or at) the
    first newline. Since: 2.34
#NAME: line
#PARENT: GLib.Scanner
#COMMENT: line number of the last token from g_scanner_get_next_token()
#NAME: free_func
#PARENT: GLib.Bytes.new_with_free_func.Bytes
#COMMENT: the function to call to release the data
#NAME: func
#PARENT: GLib.AsyncQueue.sort_unlocked.none
#COMMENT: the #GCompareDataFunc is used to sort @queue
#NAME: init
#PARENT: GLib.Queue
#COMMENT: A statically-allocated #GQueue must be initialized with this function
before it can be used. Alternatively you can initialize it with
#G_QUEUE_INIT. It is not necessary to initialize queues created with
g_queue_new().
#NAME: reverse
#PARENT: GLib.Queue
#COMMENT: Reverses the order of the items in @queue.
#NAME: string
#PARENT: GLib.regex_split_simple.utf8
#COMMENT: the string to scan for matches
#NAME: egyptian_hieroglyphs
#PARENT: GLib.UnicodeScript
#COMMENT: Egyptian Hieroglpyhs. Since 2.26
#NAME: key
#PARENT: GLib.KeyFile.set_boolean.none
#COMMENT: a key
#NAME: to_iso8601
#PARENT: GLib.TimeVal
#COMMENT: Converts @time_ into an RFC 3339 encoded string, relative to the
Coordinated Universal Time (UTC). This is one of the many formats
allowed by ISO 8601.

ISO 8601 allows a large number of date/time formats, with or without
punctuation and optional elements. The format returned by this function
is a complete date and time, with optional punctuation included, the
UTC time zone represented as "Z", and the @tv_usec part included if
and only if it is nonzero, i.e. either
"YYYY-MM-DDTHH:MM:SSZ" or "YYYY-MM-DDTHH:MM:SS.fffffZ".

This corresponds to the Internet date/time format defined by
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt),
and to either of the two most-precise formats defined by
the W3C Note
[Date and Time Formats](http://www.w3.org/TR/NOTE-datetime-19980827).
Both of these documents are profiles of ISO 8601.

Use g_date_time_format() or g_strdup_printf() if a different
variation of ISO 8601 format is required.
#NAME: get_language_names
#PARENT: GLib.get_language_names
#COMMENT: a %NULL-terminated array of strings owned by GLib
   that must not be modified or freed.
#NAME: sort_changed
#PARENT: GLib.Sequence
#COMMENT: Moves the data pointed to a new position as indicated by @cmp_func. This
function should be called for items in a sequence already sorted according
to @cmp_func whenever some aspect of an item changes so that @cmp_func
may return different values for that item.

@cmp_func is called with two items of the @seq and @user_data.
It should return 0 if the items are equal, a negative value if
the first item comes before the second, and a positive value if
the second item comes before the first.
#NAME: digest_type
#PARENT: GLib.compute_hmac_for_string.utf8
#COMMENT: a #GChecksumType to use for the HMAC
#NAME: get_string_list
#PARENT: GLib.KeyFile.get_string_list
#COMMENT: 
 a %NULL-terminated string array or %NULL if the specified
 key cannot be found. The array should be freed with g_strfreev().
#NAME: open_punctuation
#PARENT: GLib.UnicodeType
#COMMENT: General category "Punctuation, Open" (Ps)
#NAME: no_conversion
#PARENT: GLib.ConvertError
#COMMENT: Conversion between the requested character
    sets is not supported.
#NAME: valid_weekday
#PARENT: GLib.Date.valid_weekday
#COMMENT: %TRUE if the weekday is valid
#NAME: strcompress
#PARENT: GLib.strcompress
#COMMENT: a newly-allocated copy of @source with all escaped
    character compressed
#NAME: next
#PARENT: GLib.TrashStack
#COMMENT: pointer to the previous element of the stack,
    gets stored in the first `sizeof (gpointer)`
    bytes of the element
#NAME: test_create_suite
#PARENT: GLib.test_create_suite
#COMMENT: A newly allocated #GTestSuite instance.
#NAME: find_custom
#PARENT: GLib.Queue.find_custom
#COMMENT: the found link, or %NULL if it wasn't found
#NAME: utf8_to_ucs4
#PARENT: GLib
#COMMENT: Convert a string from UTF-8 to a 32-bit fixed width
representation as UCS-4. A trailing 0 character will be added to the
string after the converted text.
#NAME: khmer
#PARENT: GLib.UnicodeScript
#COMMENT: Khmer
#NAME: user_data
#PARENT: GLib.HashTable.foreach_remove.guint
#COMMENT: user data to pass to the function
#NAME: data
#PARENT: GLib.List.insert.gpointer
#COMMENT: the data for the new element
#NAME: items_written
#PARENT: GLib.utf8_to_ucs4.gunichar
#COMMENT: location to store number of characters
    written or %NULL. The value here stored does not include the
    trailing 0 character.
#NAME: pipe
#PARENT: GLib.IOChannelError
#COMMENT: Broken pipe.
#NAME: strsplit_set
#PARENT: GLib.strsplit_set
#COMMENT: a newly-allocated %NULL-terminated array of strings. Use
   g_strfreev() to free it.
#NAME: get_int16
#PARENT: GLib.Variant.get_int16
#COMMENT: a #gint16
#NAME: flush
#PARENT: GLib.IOChannel.flush
#COMMENT: the status of the operation: One of
  #G_IO_STATUS_NORMAL, #G_IO_STATUS_AGAIN, or
  #G_IO_STATUS_ERROR.
#NAME: datetime
#PARENT: GLib.DateTime.get_ymd.none
#COMMENT: a #GDateTime.
#NAME: get_ignore_unknown_options
#PARENT: GLib.OptionContext
#COMMENT: Returns whether unknown options are ignored or not. See
g_option_context_set_ignore_unknown_options().
#NAME: weekday
#PARENT: GLib.Date.valid_weekday.gboolean
#COMMENT: weekday
#NAME: Source
#PARENT: GLib
#COMMENT: The `GSource` struct is an opaque data type
representing an event source.
#NAME: standard_error
#PARENT: GLib.spawn_sync.gboolean
#COMMENT: return location for child error messages, or %NULL
#NAME: datetime
#PARENT: GLib.DateTime.to_utc.DateTime
#COMMENT: a #GDateTime
#NAME: context
#PARENT: GLib.MarkupParseContext.parse.gboolean
#COMMENT: a #GMarkupParseContext
#NAME: order
#PARENT: GLib.Date
#COMMENT: Checks if @date1 is less than or equal to @date2,
and swap the values if this is not the case.
#NAME: checksum
#PARENT: GLib.Checksum.copy.Checksum
#COMMENT: the #GChecksum to copy
#NAME: uint64
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is an unsigned 64 bit integer.
#NAME: new_va
#PARENT: GLib.Variant.new_va
#COMMENT: a new, usually floating, #GVariant
#NAME: SQRT2
#PARENT: GLib
#COMMENT: The square root of two.
#NAME: list
#PARENT: GLib.SList.free_1.none
#COMMENT: a #GSList element
#NAME: datetime
#PARENT: GLib.DateTime.to_timezone.DateTime
#COMMENT: a #GDateTime
#NAME: lock_bit
#PARENT: GLib.pointer_bit_lock.none
#COMMENT: a bit value between 0 and 31
#NAME: datetime
#PARENT: GLib.DateTime.get_timezone_abbreviation.utf8
#COMMENT: a #GDateTime
#NAME: argc
#PARENT: GLib.test_init.none
#COMMENT: Address of the @argc parameter of the main() function.
       Changed if any arguments were handled.
#NAME: atomic
#PARENT: GLib.atomic_pointer_compare_and_exchange.gboolean
#COMMENT: a pointer to a #gpointer-sized value
#NAME: pattern_match
#PARENT: GLib.pattern_match
#COMMENT: %TRUE if @string matches @pspec
#NAME: variant_parse
#PARENT: GLib
#COMMENT: Parses a #GVariant from a text representation.

A single #GVariant is parsed from the content of @text.

The format is described [here][gvariant-text].

The memory at @limit will never be accessed and the parser behaves as
if the character at @limit is the nul terminator.  This has the
effect of bounding @text.

If @endptr is non-%NULL then @text is permitted to contain data
following the value that this function parses and @endptr will be
updated to point to the first character past the end of the text
parsed by this function.  If @endptr is %NULL and there is extra data
then an error is returned.

If @type is non-%NULL then the value will be parsed to have that
type.  This may result in additional parse errors (in the case that
the parsed value doesn't fit the type) but may also result in fewer
errors (in the case that the type would have been ambiguous, such as
with empty arrays).

In the event that the parsing is successful, the resulting #GVariant
is returned. It is never floating, and must be freed with
g_variant_unref().

In case of any error, %NULL will be returned.  If @error is non-%NULL
then it will be set to reflect the error that occurred.

Officially, the language understood by the parser is "any string
produced by g_variant_print()".
#NAME: new_handle
#PARENT: GLib.Variant
#COMMENT: Creates a new handle #GVariant instance.

By convention, handles are indexes into an array of file descriptors
that are sent alongside a D-Bus message.  If you're not interacting
with D-Bus, you probably don't need them.
#NAME: value
#PARENT: GLib.Variant.get_int32.gint32
#COMMENT: a int32 #GVariant instance
#NAME: string
#PARENT: GLib.strdown.utf8
#COMMENT: the string to convert.
#NAME: not_supported_in_class
#PARENT: GLib.RegexError
#COMMENT: "\\N" is not supported in a class. Since: 2.34
#NAME: new_take_string
#PARENT: GLib.Variant.new_take_string
#COMMENT: a floating reference to a new string
  #GVariant instance
#NAME: prepend_unichar
#PARENT: GLib.String
#COMMENT: Converts a Unicode character into UTF-8, and prepends it
to the string.
#NAME: key_file
#PARENT: GLib.KeyFile.set_double_list.none
#COMMENT: a #GKeyFile
#NAME: array
#PARENT: GLib.PtrArray.sort.none
#COMMENT: a #GPtrArray
#NAME: buf_len
#PARENT: GLib.ascii_formatd.utf8
#COMMENT: The length of the buffer.
#NAME: strtod
#PARENT: GLib
#COMMENT: Converts a string to a #gdouble value.
It calls the standard strtod() function to handle the conversion, but
if the string is not completely converted it attempts the conversion
again with g_ascii_strtod(), and returns the best match.

This function should seldom be used. The normal situation when reading
numbers not for human consumption is to use g_ascii_strtod(). Only when
you know that you must expect both locale formatted and C formatted numbers
should you use this. Make sure that you don't pass strings such as comma
separated lists of values, since the commas may be interpreted as a decimal
point in some locales, causing unexpected results.
#NAME: callback_data
#PARENT: GLib.Source.set_callback_indirect.none
#COMMENT: pointer to callback data "object"
#NAME: new_now_utc
#PARENT: GLib.DateTime
#COMMENT: Creates a #GDateTime corresponding to this exact instant in UTC.

This is equivalent to calling g_date_time_new_now() with the time
zone returned by g_time_zone_new_utc().
#NAME: argv
#PARENT: GLib.test_init.none
#COMMENT: Address of the @argv parameter of main().
       Any parameters understood by g_test_init() stripped before return.
#NAME: inval
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `EINVAL`
#NAME: get_prgname
#PARENT: GLib.get_prgname
#COMMENT: the name of the program. The returned string belongs
    to GLib and must not be modified or freed.
#NAME: iter_cmp
#PARENT: GLib.Sequence.search_iter.SequenceIter
#COMMENT: the function used to compare iterators in the sequence
#NAME: prepend_len
#PARENT: GLib.String
#COMMENT: Prepends @len bytes of @val to @string.
Because @len is provided, @val may contain
embedded nuls and need not be nul-terminated.

Since this function does not stop at nul bytes,
it is the caller's responsibility to ensure that
@val has at least @len addressable bytes.
#NAME: new_with_free_func
#PARENT: GLib.Bytes
#COMMENT: Creates a #GBytes from @data.

When the last reference is dropped, @free_func will be called with the
@user_data argument.

@data must not be modified after this call is made until @free_func has
been called to indicate that the bytes is no longer in use.

@data may be %NULL if @size is 0.
#NAME: match_all
#PARENT: GLib.Regex.match_all
#COMMENT: %TRUE is the string matched, %FALSE otherwise
#NAME: idle_remove_by_data
#PARENT: GLib.idle_remove_by_data
#COMMENT: %TRUE if an idle source was found and removed.
#NAME: newval
#PARENT: GLib.datalist_id_replace_data.gboolean
#COMMENT: the new value to replace it with
#NAME: get_minute
#PARENT: GLib.DateTime
#COMMENT: Retrieves the minute of the hour represented by @datetime
#NAME: get_size
#PARENT: GLib.Variant
#COMMENT: Determines the number of bytes that would be required to store @value
with g_variant_store().

If @value has a fixed-sized type then this function always returned
that fixed size.

In the case that @value is already in serialised form or the size has
already been calculated (ie: this function has been called before)
then this function is O(1).  Otherwise, the size is calculated, an
operation which is approximately O(n) in the number of values
involved.
#NAME: search_iter
#PARENT: GLib.Sequence.search_iter
#COMMENT: a #GSequenceIter pointing to the position in @seq
    where @data would have been inserted according to @iter_cmp
    and @cmp_data
#NAME: str
#PARENT: GLib.compute_checksum_for_string.utf8
#COMMENT: the string to compute the checksum of
#NAME: bytes_written
#PARENT: GLib.locale_to_utf8.utf8
#COMMENT: the number of bytes stored in the output buffer (not
                including the terminating nul).
#NAME: c
#PARENT: GLib.unichar_islower.gboolean
#COMMENT: a Unicode character
#NAME: new_now_local
#PARENT: GLib.DateTime
#COMMENT: Creates a #GDateTime corresponding to this exact instant in the local
time zone.

This is equivalent to calling g_date_time_new_now() with the time
zone returned by g_time_zone_new_local().
#NAME: begin
#PARENT: GLib.sequence_move_range.none
#COMMENT: a #GSequenceIter
#NAME: hangul_t_jamo
#PARENT: GLib.UnicodeBreakType
#COMMENT: Hangul T Jamo (JT)
#NAME: is_end
#PARENT: GLib.SequenceIter.is_end
#COMMENT: Whether @iter is the end iterator
#NAME: base64_decode_inplace
#PARENT: GLib.base64_decode_inplace
#COMMENT: The binary data that @text responds. This pointer
              is the same as the input @text.
#NAME: add
#PARENT: GLib.HashTable
#COMMENT: This is a convenience function for using a #GHashTable as a set.  It
is equivalent to calling g_hash_table_replace() with @key as both the
key and the value.

When a hash table only ever contains keys that have themselves as the
corresponding value it is able to be stored more efficiently.  See
the discussion in the section description.
#NAME: hook
#PARENT: GLib.HookCheckMarshaller.gboolean
#COMMENT: a #GHook
#NAME: test_queue_free
#PARENT: GLib
#COMMENT: Enqueue a pointer to be released with g_free() during the next
teardown phase. This is equivalent to calling g_test_queue_destroy()
with a destroy callback of g_free().
#NAME: too_big
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `E2BIG`
#NAME: get_user_name
#PARENT: GLib
#COMMENT: Gets the user name of the current user. The encoding of the returned
string is system-defined. On UNIX, it might be the preferred file name
encoding, or something else, and there is no guarantee that it is even
consistent on a machine. On Windows, it is always UTF-8.
#NAME: lock_bit
#PARENT: GLib.bit_unlock.none
#COMMENT: a bit value between 0 and 31
#NAME: queue
#PARENT: GLib.Queue.delete_link.none
#COMMENT: a #GQueue
#NAME: endptr
#PARENT: GLib.Variant.get_va.none
#COMMENT: location to store the end pointer,
         or %NULL
#NAME: source
#PARENT: GLib.Source.unref.none
#COMMENT: a #GSource
#NAME: tail
#PARENT: GLib.Queue
#COMMENT: a pointer to the last element of the queue
#NAME: unknown
#PARENT: GLib.ErrorType
#COMMENT: unknown error
#NAME: array
#PARENT: GLib.ByteArray.remove_index_fast.guint8
#COMMENT: a #GByteArray
#NAME: raw
#PARENT: GLib.RegexCompileFlags
#COMMENT: Usually strings must be valid UTF-8 strings, using this
    flag they are considered as a raw sequence of bytes.
#NAME: CopyFunc
#PARENT: GLib
#COMMENT: A function of this signature is used to copy the node data
when doing a deep-copy of a tree.
#NAME: len
#PARENT: GLib.ByteArray.new_take.guint8
#COMMENT: length of @data
#NAME: filename_to_uri
#PARENT: GLib.filename_to_uri
#COMMENT: a newly-allocated string holding the resulting
              URI, or %NULL on an error.
#NAME: length
#PARENT: GLib.Checksum.update.none
#COMMENT: size of the buffer, or -1 if it is a null-terminated string.
#NAME: atomic_pointer_or
#PARENT: GLib
#COMMENT: Performs an atomic bitwise 'or' of the value of @atomic and @val,
storing the result back in @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic |= val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.
#NAME: hook
#PARENT: GLib.Hook.unref.none
#COMMENT: the #GHook to unref
#NAME: PollFunc
#PARENT: GLib.PollFunc
#COMMENT: the number of #GPollFD elements which have events or errors
    reported, or -1 if an error occurred.
#NAME: channel
#PARENT: GLib.IOChannel.read_line.IOStatus
#COMMENT: a #GIOChannel
#NAME: PollFD
#PARENT: GLib
#COMMENT: Represents a file descriptor, which events to poll for, and which events
occurred.
#NAME: test_create_case
#PARENT: GLib
#COMMENT: Create a new #GTestCase, named @test_name, this API is fairly
low level, calling g_test_add() or g_test_add_func() is preferable.
When this test is executed, a fixture structure of size @data_size
will be automatically allocated and filled with zeros. Then @data_setup is
called to initialize the fixture. After fixture setup, the actual test
function @data_test is called. Once the test run completes, the
fixture structure is torn down by calling @data_teardown and
after that the memory is automatically released by the test framework.

Splitting up a test run into fixture setup, test function and
fixture teardown is most useful if the same fixture is used for
multiple tests. In this cases, g_test_create_case() will be
called with the same fixture, but varying @test_name and
@data_test arguments.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.set_icon.none
#COMMENT: a #GBookmarkFile
#NAME: prepend
#PARENT: GLib.Sequence.prepend
#COMMENT: an iterator pointing to the new item
#NAME: user_data
#PARENT: GLib.TestDataFunc.none
#COMMENT: the data provided when registering the test
#NAME: a
#PARENT: GLib.SequenceIter.compare.gint
#COMMENT: a #GSequenceIter
#NAME: format_size_for_display
#PARENT: GLib
#COMMENT: Formats a size (for example the size of a file) into a human
readable string. Sizes are rounded to the nearest size prefix
(KB, MB, GB) and are displayed rounded to the nearest tenth.
E.g. the file size 3292528 bytes will be converted into the
string "3.1 MB".

The prefix units base is 1024 (i.e. 1 KB is 1024 bytes).

This string should be freed with g_free() when not needed any longer.
#NAME: free_1
#PARENT: GLib.List
#COMMENT: Frees one #GList element, but does not update links from the next and
previous elements in the list, so you should not call this function on an
element that is currently part of a list.

It is usually used after g_list_remove_link().
#NAME: access
#PARENT: GLib.access
#COMMENT: zero if the pathname refers to an existing file system
    object that has all the tested permissions, or -1 otherwise
    or on error.
#NAME: b
#PARENT: GLib.SequenceIter.compare.gint
#COMMENT: a #GSequenceIter
#NAME: group
#PARENT: GLib.OptionGroup.set_parse_hooks.none
#COMMENT: a #GOptionGroup
#NAME: convert_with_iconv
#PARENT: GLib.convert_with_iconv
#COMMENT: If the conversion was successful, a newly allocated
              nul-terminated string, which must be freed with
              g_free(). Otherwise %NULL and @error will be set.
#NAME: rand_
#PARENT: GLib.Rand.int_range.gint32
#COMMENT: a #GRand
#NAME: file_and_argv_zero
#PARENT: GLib.SpawnFlags
#COMMENT: the first element of `argv` is the file to
    execute, while the remaining elements are the actual argument vector
    to pass to the file. Normally g_spawn_async_with_pipes() uses `argv[0]`
    as the file to execute, and passes all of `argv` to the child.
#NAME: identifier
#PARENT: GLib.TokenType
#COMMENT: an identifier
#NAME: a
#PARENT: GLib.unichar_compose.gboolean
#COMMENT: a Unicode character
#NAME: b
#PARENT: GLib.unichar_compose.gboolean
#COMMENT: a Unicode character
#NAME: block_size
#PARENT: GLib.slice_alloc.gpointer
#COMMENT: the number of bytes to allocate
#NAME: c
#PARENT: GLib.unichar_break_type.UnicodeBreakType
#COMMENT: a Unicode character
#NAME: iter
#PARENT: GLib.SequenceIter.prev.SequenceIter
#COMMENT: a #GSequenceIter
#NAME: log_domain
#PARENT: GLib.LogFunc.none
#COMMENT: the log domain of the message
#NAME: get_uint16
#PARENT: GLib.Variant.get_uint16
#COMMENT: a #guint16
#NAME: value
#PARENT: GLib.VariantDict.insert_value.none
#COMMENT: the value to insert
#NAME: remove_index_fast
#PARENT: GLib.PtrArray
#COMMENT: Removes the pointer at the given index from the pointer array.
The last element in the array is used to fill in the space, so
this function does not preserve the order of the array. But it
is faster than g_ptr_array_remove_index(). If @array has a non-%NULL
#GDestroyNotify function it is called for the removed element.
#NAME: insert_before
#PARENT: GLib.Sequence.insert_before
#COMMENT: an iterator pointing to the new item
#NAME: get_line_term
#PARENT: GLib.IOChannel.get_line_term
#COMMENT: The line termination string. This value
  is owned by GLib and must not be freed.
#NAME: hash
#PARENT: GLib.DateTime
#COMMENT: Hashes @datetime into a #guint, suitable for use within #GHashTable.
#NAME: KEY_FILE_DESKTOP_KEY_MIME_TYPE
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list
of strings giving the MIME types supported by this desktop entry.
#NAME: scope_id
#PARENT: GLib.Scanner.scope_foreach_symbol.none
#COMMENT: the scope id
#NAME: may_be_in_call
#PARENT: GLib.Hook.first_valid.Hook
#COMMENT: %TRUE if hooks which are currently running
    (e.g. in another thread) are considered valid. If set to %FALSE,
    these are skipped
#NAME: string
#PARENT: GLib.String.down.String
#COMMENT: a #GString
#NAME: signal
#PARENT: GLib.Cond
#COMMENT: If threads are waiting for @cond, at least one of them is unblocked.
If no threads are waiting for @cond, this function has no effect.
It is good practice to hold the same lock as the waiting thread
while calling this function, though not required.
#NAME: reset
#PARENT: GLib.Checksum
#COMMENT: Resets the state of the @checksum back to its initial state.
#NAME: context
#PARENT: GLib.MainContext.wait.gboolean
#COMMENT: a #GMainContext
#NAME: log_domain
#PARENT: GLib.TestLogFatalFunc.gboolean
#COMMENT: the log domain of the message
#NAME: reserved_chars_allowed
#PARENT: GLib.uri_escape_string.utf8
#COMMENT: a string of reserved characters that
     are allowed to be used, or %NULL.
#NAME: length
#PARENT: GLib.AsyncQueue.length
#COMMENT: the length of the @queue
#NAME: remove_link
#PARENT: GLib.List
#COMMENT: Removes an element from a #GList, without freeing the element.
The removed element's prev and next links are set to %NULL, so
that it becomes a self-contained list with one element.

This function is for example used to move an element in the list
(see the example for g_list_concat()) or to remove an element in
the list before freeing its data:
|[<!-- language="C" -->
list = g_list_remove_link (list, llink);
free_some_data_that_may_access_the_list_again (llink->data);
g_list_free (llink);
]|
#NAME: array
#PARENT: GLib.PtrArray.foreach.none
#COMMENT: a #GPtrArray
#NAME: size
#PARENT: GLib.Bytes.new_with_free_func.Bytes
#COMMENT: the size of @data
#NAME: tree
#PARENT: GLib.Tree.ref.Tree
#COMMENT: a #GTree
#NAME: get_help
#PARENT: GLib.OptionContext.get_help
#COMMENT: A newly allocated string containing the help text
#NAME: interval
#PARENT: GLib.TimeZone.get_abbreviation.utf8
#COMMENT: an interval within the timezone
#NAME: length
#PARENT: GLib.SList
#COMMENT: Gets the number of elements in a #GSList.

This function iterates over the whole list to
count its elements. To check whether the list is non-empty, it is faster to
check @list against %NULL.
#NAME: uri
#PARENT: GLib.BookmarkFile.set_icon.none
#COMMENT: a valid URI
#NAME: get_string
#PARENT: GLib.Checksum
#COMMENT: Gets the digest as an hexadecimal string.

Once this function has been called the #GChecksum can no longer be
updated with g_checksum_update().

The hexadecimal characters will be lower case.
#NAME: group
#PARENT: GLib.OptionContext.add_group.none
#COMMENT: the group to add
#NAME: key_compare_func
#PARENT: GLib.Tree.new_full.Tree
#COMMENT: qsort()-style comparison function
#NAME: new
#PARENT: GLib.Queue.new
#COMMENT: a newly allocated #GQueue
#NAME: key_len
#PARENT: GLib.compute_hmac_for_data.utf8
#COMMENT: the length of the key
#NAME: random_double
#PARENT: GLib.random_double
#COMMENT: a random number
#NAME: parent
#PARENT: GLib.Node.insert.Node
#COMMENT: the #GNode to place @node under
#NAME: bookmark
#PARENT: GLib.BookmarkFile.set_modified.none
#COMMENT: a #GBookmarkFile
#NAME: cypriot
#PARENT: GLib.UnicodeScript
#COMMENT: Cypriot
#NAME: new
#PARENT: GLib.MainLoop
#COMMENT: Creates a new #GMainLoop structure.
#NAME: test_failed
#PARENT: GLib.test_failed
#COMMENT: %TRUE if the test has failed
#NAME: function
#PARENT: GLib.unix_fd_add.guint
#COMMENT: a #GPollFDFunc
#NAME: realloc
#PARENT: GLib.realloc
#COMMENT: the new address of the allocated memory
#NAME: canadian_aboriginal
#PARENT: GLib.UnicodeScript
#COMMENT: Canadian Aboriginal
#NAME: string
#PARENT: GLib.Variant.new_bytestring.Variant
#COMMENT: a normal
         nul-terminated string in no particular encoding
#NAME: user_data
#PARENT: GLib.SList.copy_deep.gpointer
#COMMENT: user data passed to the copy function @func, or #NULL
#NAME: minutes
#PARENT: GLib.DateTime.add_full.DateTime
#COMMENT: the number of minutes to add
#NAME: date_get_sunday_weeks_in_year
#PARENT: GLib
#COMMENT: Returns the number of weeks in the year, where weeks
are taken to start on Sunday. Will be 52 or 53. The
date must be valid. (Years always have 52 7-day periods,
plus 1 or 2 extra days depending on whether it's a leap
year. This function is basically telling you how many
Sundays are in the year, i.e. there are 53 Sundays if
one of the extra days happens to be a Sunday.)
#NAME: begin
#PARENT: GLib.Sequence.remove_range.none
#COMMENT: a #GSequenceIter
#NAME: tmpl
#PARENT: GLib.file_open_tmp.gint
#COMMENT: Template for file name, as in
    g_mkstemp(), basename only, or %NULL for a default template
#NAME: testpath
#PARENT: GLib.test_add_data_func.none
#COMMENT: /-separated test case path name for the test.
#NAME: old_uri
#PARENT: GLib.BookmarkFile.move_item.gboolean
#COMMENT: a valid URI
#NAME: set_double
#PARENT: GLib.KeyFile
#COMMENT: Associates a new double value with @key under @group_name.
If @key cannot be found then it is created.
#NAME: get_data_as_bytes
#PARENT: GLib.Variant.get_data_as_bytes
#COMMENT: A new #GBytes representing the variant data
#NAME: length
#PARENT: GLib.Variant.get_bytestring_array.utf8
#COMMENT: the length of the result, or %NULL
#NAME: context
#PARENT: GLib.MainContext.add_poll.none
#COMMENT: a #GMainContext (or %NULL for the default context)
#NAME: test_bug_base
#PARENT: GLib
#COMMENT: Specify the base URI for bug reports.

The base URI is used to construct bug report messages for
g_test_message() when g_test_bug() is called.
Calling this function outside of a test case sets the
default base URI for all test cases. Calling it from within
a test case changes the base URI for the scope of the test
case only.
Bug URIs are constructed by appending a bug specific URI
portion to @uri_pattern, or by replacing the special string
'\%s' within @uri_pattern if that is present.
#NAME: value
#PARENT: GLib.Variant.new_int64.Variant
#COMMENT: a #gint64 value
#NAME: add_weeks
#PARENT: GLib.DateTime.add_weeks
#COMMENT: the newly created #GDateTime which should be freed with
  g_date_time_unref().
#NAME: get_current_dir
#PARENT: GLib
#COMMENT: Gets the current directory.

The returned string should be freed when no longer needed.
The encoding of the returned string is system defined.
On Windows, it is always UTF-8.

Since GLib 2.40, this function will return the value of the "PWD"
environment variable if it is set and it happens to be the same as
the current directory.  This can make a difference in the case that
the current directory is the target of a symbolic link.
#NAME: src
#PARENT: GLib.strlcpy.gsize
#COMMENT: source buffer
#NAME: n_items
#PARENT: GLib.VariantType.n_items
#COMMENT: the number of items in @type

Since 2.24
#NAME: signum
#PARENT: GLib.unix_signal_add_full.guint
#COMMENT: Signal number
#NAME: add_poll
#PARENT: GLib.Source
#COMMENT: Adds a file descriptor to the set of file descriptors polled for
this source. This is usually combined with g_source_new() to add an
event source. The event source's check function will typically test
the @revents field in the #GPollFD struct and return %TRUE if events need
to be processed.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

Using this API forces the linear scanning of event sources on each
main loop iteration.  Newly-written event sources should try to use
g_source_add_unix_fd() instead of this API.
#NAME: year
#PARENT: GLib.DateTime.new_utc.DateTime
#COMMENT: the year component of the date
#NAME: data
#PARENT: GLib.SList.insert.gpointer
#COMMENT: the data for the new element
#NAME: trylock
#PARENT: GLib.RecMutex
#COMMENT: Tries to lock @rec_mutex. If @rec_mutex is already locked
by another thread, it immediately returns %FALSE. Otherwise
it locks @rec_mutex and returns %TRUE.
#NAME: insert
#PARENT: GLib.Tree
#COMMENT: Inserts a key/value pair into a #GTree.

If the given key already exists in the #GTree its corresponding value
is set to the new value. If you supplied a @value_destroy_func when
creating the #GTree, the old value is freed using that function. If
you supplied a @key_destroy_func when creating the #GTree, the passed
key is freed using that function.

The tree is automatically 'balanced' as new key/value pairs are added,
so that the distance from the root to every leaf is as small as possible.
#NAME: unref
#PARENT: GLib.KeyFile
#COMMENT: Decreases the reference count of @key_file by 1. If the reference count
reaches zero, frees the key file and all its allocated memory.
#NAME: link_
#PARENT: GLib.Queue.link_index.gint
#COMMENT: a #GList link
#NAME: key
#PARENT: GLib.KeyFile.get_integer_list.gint
#COMMENT: a key
#NAME: fetch_all
#PARENT: GLib.MatchInfo
#COMMENT: Bundles up pointers to each of the matching substrings from a match
and stores them in an array of gchar pointers. The first element in
the returned array is the match number 0, i.e. the entire matched
text.

If a sub pattern didn't match anything (e.g. sub pattern 1, matching
"b" against "(a)?b") then an empty string is inserted.

If the last match was obtained using the DFA algorithm, that is using
g_regex_match_all() or g_regex_match_all_full(), the retrieved
strings are not that matched by sets of parentheses but that of the
matched substring. Substrings are matched in reverse order of length,
so the first one is the longest match.

The strings are fetched from the string passed to the match function,
so you cannot call this function after freeing the string.
#NAME: free_full
#PARENT: GLib.Queue
#COMMENT: Convenience method, which frees all the memory used by a #GQueue,
and calls the specified destroy function on every element's data.
#NAME: pop_nth_link
#PARENT: GLib.Queue.pop_nth_link
#COMMENT: the @n'th link, or %NULL if @n is off the end of @queue
#NAME: printf_string_upper_bound
#PARENT: GLib.printf_string_upper_bound
#COMMENT: the maximum space needed to store the formatted string
#NAME: copy
#PARENT: GLib.Error
#COMMENT: Makes a copy of @error.
#NAME: data
#PARENT: GLib.OptionGroup.set_translate_func.none
#COMMENT: user data to pass to @func, or %NULL
#NAME: strdup
#PARENT: GLib.MarkupCollectType
#COMMENT: as with %G_MARKUP_COLLECT_STRING, but
    expects a parameter of type (char **) and g_strdup()s the
    returned pointer. The pointer must be freed with g_free()
#NAME: func
#PARENT: GLib.datalist_foreach.none
#COMMENT: the function to call for each data element.
#NAME: peek_tail_link
#PARENT: GLib.Queue.peek_tail_link
#COMMENT: the last link in @queue, or %NULL if @queue is empty
#NAME: set_size
#PARENT: GLib.Array
#COMMENT: Sets the size of the array, expanding it if necessary. If the array
was created with @clear_ set to %TRUE, the new elements are set to 0.
#NAME: january
#PARENT: GLib.DateMonth
#COMMENT: January
#NAME: unref
#PARENT: GLib.MarkupParseContext
#COMMENT: Decreases the reference count of @context.  When its reference count
drops to 0, it is freed.
#NAME: thread_yield
#PARENT: GLib
#COMMENT: Causes the calling thread to voluntarily relinquish the CPU, so
that other threads can run.

This function is often used as a method to make busy wait less evil.
#NAME: hook_unref
#PARENT: GLib
#COMMENT: Decrements the reference count of a #GHook.
If the reference count falls to 0, the #GHook is removed
from the #GHookList and g_hook_free() is called to free it.
#NAME: unrecognized_escape
#PARENT: GLib.RegexError
#COMMENT: Unrecognized character follows "\\".
    Since 2.16
#NAME: slen
#PARENT: GLib.Date.strftime.gsize
#COMMENT: buffer size
#NAME: POLLFD_FORMAT
#PARENT: GLib
#COMMENT: A format specifier that can be used in printf()-style format strings
when printing the @fd member of a #GPollFD.
#NAME: silence_stdout
#PARENT: GLib.TestTrapFlags
#COMMENT: Redirect stdout of the test child to
    `/dev/null` so it cannot be observed on the console during test
    runs. The actual output is still captured though to allow later
    tests with g_test_trap_assert_stdout().
#NAME: tree
#PARENT: GLib.Tree.steal.gboolean
#COMMENT: a #GTree
#NAME: get_home_dir
#PARENT: GLib
#COMMENT: Gets the current user's home directory.

As with most UNIX tools, this function will return the value of the
`HOME` environment variable if it is set to an existing absolute path
name, falling back to the `passwd` file in the case that it is unset.

If the path given in `HOME` is non-absolute, does not exist, or is
not a directory, the result is undefined.

Before version 2.36 this function would ignore the `HOME` environment
variable, taking the value from the `passwd` database instead. This was
changed to increase the compatibility of GLib with other programs (and
the XDG basedir specification) and to increase testability of programs
based on GLib (by making it easier to run them from test frameworks).

If your program has a strong requirement for either the new or the
old behaviour (and if you don't wish to increase your GLib
dependency to ensure that the new behaviour is in effect) then you
should either directly check the `HOME` environment variable yourself
or unset it before calling any functions in GLib.
#NAME: data
#PARENT: GLib.FreeFunc.none
#COMMENT: a data pointer
#NAME: wait_until
#PARENT: GLib.Cond.wait_until
#COMMENT: %TRUE on a signal, %FALSE on a timeout
#NAME: queue
#PARENT: GLib.Queue.sort.none
#COMMENT: a #GQueue
#NAME: get_hash_table
#PARENT: GLib.HashTableIter.get_hash_table
#COMMENT: the #GHashTable associated with @iter.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_groups.utf8
#COMMENT: a #GBookmarkFile
#NAME: main_help
#PARENT: GLib.OptionContext.get_help.utf8
#COMMENT: if %TRUE, only include the main group
#NAME: get_hour
#PARENT: GLib.DateTime.get_hour
#COMMENT: the hour of the day
#NAME: get_time
#PARENT: GLib.Source.get_time
#COMMENT: the monotonic time in microseconds
#NAME: environ_setenv
#PARENT: GLib.environ_setenv
#COMMENT: the
    updated environment list. Free it using g_strfreev().
#NAME: channel
#PARENT: GLib.IOChannel.write_unichar.IOStatus
#COMMENT: a #GIOChannel
#NAME: data
#PARENT: GLib.SList.remove_all.gpointer
#COMMENT: data to remove
#NAME: context
#PARENT: GLib.MainContext.set_poll_func.none
#COMMENT: a #GMainContext
#NAME: KEY_FILE_DESKTOP_KEY_COMMENT
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the tooltip for the desktop entry.
#NAME: orig_key
#PARENT: GLib.hash_table_lookup_extended.gboolean
#COMMENT: return location for the original key, or %NULL
#NAME: bookmark
#PARENT: GLib.BookmarkFile.move_item.gboolean
#COMMENT: a #GBookmarkFile
#NAME: iteration
#PARENT: GLib.MainContext.iteration
#COMMENT: %TRUE if events were dispatched.
#NAME: get_keys
#PARENT: GLib.HashTable
#COMMENT: Retrieves every key inside @hash_table. The returned data is valid
until changes to the hash release those keys.

This iterates over every entry in the hash table to build its return value.
To iterate over the entries in a #GHashTable more efficiently, use a
#GHashTableIter.
#NAME: dir_make_tmp
#PARENT: GLib
#COMMENT: Creates a subdirectory in the preferred directory for temporary
files (as returned by g_get_tmp_dir()).

@tmpl should be a string in the GLib file name encoding containing
a sequence of six 'X' characters, as the parameter to g_mkstemp().
However, unlike these functions, the template should only be a
basename, no directory components are allowed. If template is
%NULL, a default template is used.

Note that in contrast to g_mkdtemp() (and mkdtemp()) @tmpl is not
modified, and might thus be a read-only literal string.
#NAME: is_last_of_month
#PARENT: GLib.Date.is_last_of_month
#COMMENT: %TRUE if the date is the last day of the month
#NAME: old_turkic
#PARENT: GLib.UnicodeScript
#COMMENT: Old Turkic. Since 2.28
#NAME: utf8_strrchr
#PARENT: GLib.utf8_strrchr
#COMMENT: %NULL if the string does not contain the character,
    otherwise, a pointer to the start of the rightmost occurrence
    of the character in the string.
#NAME: length
#PARENT: GLib.Variant.dup_bytestring.guint8
#COMMENT: a pointer to a #gsize, to store
         the length (not including the nul terminator)
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_added.glong
#COMMENT: a #GBookmarkFile
#NAME: string
#PARENT: GLib.StringChunk.insert_len.utf8
#COMMENT: bytes to insert
#NAME: IConv
#PARENT: GLib.IConv
#COMMENT: Same as the standard UNIX routine iconv(), but
may be implemented via libiconv on UNIX flavors that lack
a native implementation.

GLib provides g_convert() and g_locale_to_utf8() which are likely
more convenient than the raw iconv wrappers.
#NAME: rewind
#PARENT: GLib.Dir
#COMMENT: Resets the given directory. The next call to g_dir_read_name()
will return the first entry again.
#NAME: text
#PARENT: GLib.Variant.parse.Variant
#COMMENT: a string containing a GVariant in text form
#NAME: file
#PARENT: GLib.MappedFile.get_bytes.Bytes
#COMMENT: a #GMappedFile
#NAME: OptionErrorFunc
#PARENT: GLib
#COMMENT: The type of function to be used as callback when a parse error occurs.
#NAME: loop
#PARENT: GLib.VariantIter.loop
#COMMENT: %TRUE if a value was unpacked, or %FALSE if there was no
         value
#NAME: date
#PARENT: GLib.Date.get_month.DateMonth
#COMMENT: a #GDate to get the month from
#NAME: peek_tail
#PARENT: GLib.Queue.peek_tail
#COMMENT: the data of the last element in the queue, or %NULL
    if the queue is empty
#NAME: get_environ
#PARENT: GLib
#COMMENT: Gets the list of environment variables for the current process.

The list is %NULL terminated and each item in the list is of the
form 'NAME=VALUE'.

This is equivalent to direct access to the 'environ' global variable,
except portable.

The return value is freshly allocated and it should be freed with
g_strfreev() when it is no longer needed.
#NAME: loop
#PARENT: GLib.MainLoop.quit.none
#COMMENT: a #GMainLoop
#NAME: date
#PARENT: GLib.Date.get_iso8601_week_of_year.guint
#COMMENT: a valid #GDate
#NAME: string
#PARENT: GLib.VariantType.string_scan.gboolean
#COMMENT: a pointer to any string
#NAME: begin
#PARENT: GLib.random_double_range.gdouble
#COMMENT: lower closed bound of the interval
#NAME: new
#PARENT: GLib.OptionGroup
#COMMENT: Creates a new #GOptionGroup.
#NAME: array
#PARENT: GLib.byte_array_free_to_bytes.Bytes
#COMMENT: a #GByteArray
#NAME: get_bytes
#PARENT: GLib.MappedFile
#COMMENT: Creates a new #GBytes which references the data mapped from @file.
The mapped contents of the file must not be modified after creating this
bytes object, because a #GBytes should be immutable.
#NAME: value
#PARENT: GLib.HFunc.none
#COMMENT: the value corresponding to the key
#NAME: length
#PARENT: GLib.List.length
#COMMENT: the number of elements in the #GList
#NAME: markup_vprintf_escaped
#PARENT: GLib.markup_vprintf_escaped
#COMMENT: newly allocated result from formatting
 operation. Free with g_free().
#NAME: filename
#PARENT: GLib.IOChannel.new_file.IOChannel
#COMMENT: A string containing the name of a file
#NAME: get_real_time
#PARENT: GLib
#COMMENT: Queries the system wall-clock time.

This call is functionally equivalent to g_get_current_time() except
that the return value is often more convenient than dealing with a
#GTimeVal.

You should only use this call if you are actually interested in the real
wall-clock time.  g_get_monotonic_time() is probably more useful for
measuring intervals.
#NAME: filename
#PARENT: GLib.filename_display_basename.utf8
#COMMENT: an absolute pathname in the GLib file name encoding
#NAME: assign
#PARENT: GLib.String.assign
#COMMENT: @string
#NAME: attach
#PARENT: GLib.Source.attach
#COMMENT: the ID (greater than 0) for the source within the
  #GMainContext.
#NAME: ref
#PARENT: GLib.MainContext
#COMMENT: Increases the reference count on a #GMainContext object by one.
#NAME: new_array
#PARENT: GLib.VariantType.new_array
#COMMENT: a new array #GVariantType

Since 2.24
#NAME: unescaped
#PARENT: GLib.String.append_uri_escaped.String
#COMMENT: a string
#NAME: list
#PARENT: GLib.KeyFile.set_boolean_list.none
#COMMENT: an array of boolean values
#NAME: insert_sorted_with_data
#PARENT: GLib.SList.insert_sorted_with_data
#COMMENT: the new start of the #GSList
#NAME: regex_escape_nul
#PARENT: GLib.regex_escape_nul
#COMMENT: a newly-allocated escaped string
#NAME: string
#PARENT: GLib.Regex.match_all.gboolean
#COMMENT: the string to scan for matches
#NAME: CompareDataFunc
#PARENT: GLib
#COMMENT: Specifies the type of a comparison function used to compare two
values.  The function should return a negative integer if the first
value comes before the second, 0 if they are equal, or a positive
integer if the first value comes after the second.
#NAME: strrstr_len
#PARENT: GLib
#COMMENT: Searches the string @haystack for the last occurrence
of the string @needle, limiting the length of the search
to @haystack_len.
#NAME: set_translation_domain
#PARENT: GLib.OptionContext
#COMMENT: A convenience function to use gettext() for translating
user-visible strings.
#NAME: nth
#PARENT: GLib.List
#COMMENT: Gets the element at the given position in a #GList.

This iterates over the list until it reaches the @n-th position. If you
intend to iterate over every element, it is better to use a for-loop as
described in the #GList introduction.
#NAME: data
#PARENT: GLib.AsyncQueue.push.none
#COMMENT: @data to push into the @queue
#NAME: unichar_ismark
#PARENT: GLib.unichar_ismark
#COMMENT: %TRUE if @c is a mark character
#NAME: error
#PARENT: GLib.Error.copy.Error
#COMMENT: a #GError
#NAME: iter
#PARENT: GLib.VariantIter.free.none
#COMMENT: a heap-allocated #GVariantIter
#NAME: prepend
#PARENT: GLib.SList.prepend
#COMMENT: the new start of the #GSList
#NAME: contains
#PARENT: GLib.VariantDict
#COMMENT: Checks if @key exists in @dict.
#NAME: compare
#PARENT: GLib.Variant.compare
#COMMENT: negative value if a < b;
         zero if a = b;
         positive value if a > b.
#NAME: format
#PARENT: GLib.Scanner.warn.none
#COMMENT: the message format. See the printf() documentation
#NAME: insert_c
#PARENT: GLib.String
#COMMENT: Inserts a byte into a #GString, expanding it if necessary.
#NAME: child_inherits_stdin
#PARENT: GLib.SpawnFlags
#COMMENT: the child will inherit the parent's standard
    input (by default, the child's standard input is attached to `/dev/null`).
#NAME: find
#PARENT: GLib.SList
#COMMENT: Finds the element in a #GSList which
contains the given data.
#NAME: string
#PARENT: GLib.String.append_uri_escaped.String
#COMMENT: a #GString
#NAME: KEY_FILE_DESKTOP_KEY_CATEGORIES
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list
of strings giving the categories in which the desktop entry
should be shown in a menu.
#NAME: unichar_get_script
#PARENT: GLib.unichar_get_script
#COMMENT: the #GUnicodeScript for the character.
#NAME: invalid_character
#PARENT: GLib.VariantParseError
#COMMENT: invalid character in number or unicode escape
#NAME: level_message
#PARENT: GLib.LogLevelFlags
#COMMENT: log level for messages, see g_message()
#NAME: scan_symbols
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if symbols are recognized (the default
    is %TRUE).
#NAME: locale_from_utf8
#PARENT: GLib
#COMMENT: Converts a string from UTF-8 to the encoding used for strings by
the C runtime (usually the same as that used by the operating
system) in the [current locale][setlocale]. On Windows this means
the system codepage.
#NAME: interval
#PARENT: GLib.thread_pool_set_max_idle_time.none
#COMMENT: the maximum @interval (in milliseconds)
    a thread can be idle
#NAME: type_get_length
#PARENT: GLib.Checksum.type_get_length
#COMMENT: the checksum length, or -1 if @checksum_type is
not supported.
#NAME: remove
#PARENT: GLib.VariantDict.remove
#COMMENT: %TRUE if the key was found and removed
#NAME: len
#PARENT: GLib.ucs4_to_utf8.utf8
#COMMENT: the maximum length (number of characters) of @str to use.
    If @len < 0, then the string is nul-terminated.
#NAME: add_suite
#PARENT: GLib.TestSuite
#COMMENT: Adds @nestedsuite to @suite.
#NAME: foreach_remove
#PARENT: GLib.HashTable
#COMMENT: Calls the given function for each key/value pair in the
#GHashTable. If the function returns %TRUE, then the key/value
pair is removed from the #GHashTable. If you supplied key or
value destroy functions when creating the #GHashTable, they are
used to free the memory allocated for the removed keys and values.

See #GHashTableIter for an alternative way to loop over the
key/value pairs in the hash table.
#NAME: match_options
#PARENT: GLib.Regex.split_full.utf8
#COMMENT: match time option flags
#NAME: one
#PARENT: GLib.Variant.equal.gboolean
#COMMENT: a #GVariant instance
#NAME: end
#PARENT: GLib.utf8_validate.gboolean
#COMMENT: return location for end of valid data
#NAME: stack_p
#PARENT: GLib.TrashStack.peek.gpointer
#COMMENT: a #GTrashStack
#NAME: syriac
#PARENT: GLib.UnicodeScript
#COMMENT: Syriac
#NAME: v_octal
#PARENT: GLib.TokenValue
#COMMENT: octal integer value
#NAME: source_remove_by_funcs_user_data
#PARENT: GLib.source_remove_by_funcs_user_data
#COMMENT: %TRUE if a source was found and removed.
#NAME: escape_nul
#PARENT: GLib.Regex.escape_nul
#COMMENT: a newly-allocated escaped string
#NAME: main_current_source
#PARENT: GLib
#COMMENT: Returns the currently firing source for this thread.
#NAME: key
#PARENT: GLib.KeyFile.set_integer_list.none
#COMMENT: a key
#NAME: bookmark
#PARENT: GLib.BookmarkFile.load_from_data.gboolean
#COMMENT: an empty #GBookmarkFile struct
#NAME: tag
#PARENT: GLib.Source.remove.gboolean
#COMMENT: the ID of the source to remove.
#NAME: next_value
#PARENT: GLib.VariantIter
#COMMENT: Gets the next item in the container.  If no more items remain then
%NULL is returned.

Use g_variant_unref() to drop your reference on the return value when
you no longer need it.

Here is an example for iterating with g_variant_iter_next_value():
|[<!-- language="C" -->
  // recursively iterate a container
  void
  iterate_container_recursive (GVariant *container)
  {
    GVariantIter iter;
    GVariant *child;

    g_variant_iter_init (&iter, container);
    while ((child = g_variant_iter_next_value (&iter)))
      {
        g_print ("type '%s'\n", g_variant_get_type_string (child));

        if (g_variant_is_container (child))
          iterate_container_recursive (child);

        g_variant_unref (child);
      }
  }
]|
#NAME: start_position
#PARENT: GLib.Regex.match_full.gboolean
#COMMENT: starting index of the string to match
#NAME: datalist
#PARENT: GLib.datalist_get_data.gpointer
#COMMENT: a datalist.
#NAME: uri
#PARENT: GLib.BookmarkFile.add_application.none
#COMMENT: a valid URI
#NAME: src
#PARENT: GLib.propagate_prefixed_error.none
#COMMENT: error to move into the return location
#NAME: skip_comment_multi
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if multi-line comments are skipped
    and not returned as tokens (the default is %TRUE).
#NAME: bytes
#PARENT: GLib.Bytes.ref.Bytes
#COMMENT: a #GBytes
#NAME: notify
#PARENT: GLib.child_watch_add_full.guint
#COMMENT: function to call when the idle is removed, or %NULL
#NAME: get_app_info
#PARENT: GLib.BookmarkFile
#COMMENT: Gets the registration informations of @app_name for the bookmark for
@uri.  See g_bookmark_file_set_app_info() for more informations about
the returned data.

The string returned in @app_exec must be freed.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.  In the
event that no application with name @app_name has registered a bookmark
for @uri,  %FALSE is returned and error is set to
#G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED. In the event that unquoting
the command line fails, an error of the #G_SHELL_ERROR domain is
set and %FALSE is returned.
#NAME: tag
#PARENT: GLib.Source.set_name_by_id.none
#COMMENT: a #GSource ID
#NAME: compare
#PARENT: GLib.Date
#COMMENT: qsort()-style comparison function for dates.
Both dates must be valid.
#NAME: KeyFileFlags
#PARENT: GLib
#COMMENT: Flags which influence the parsing.
#NAME: get_max_backref
#PARENT: GLib.Regex
#COMMENT: Returns the number of the highest back reference
in the pattern, or 0 if the pattern does not contain
back references.
#NAME: group_name
#PARENT: GLib.KeyFile.get_int64.gint64
#COMMENT: a non-%NULL group name
#NAME: type
#PARENT: GLib.VariantType.get_string_length.gsize
#COMMENT: a #GVariantType
#NAME: format
#PARENT: GLib.logv.none
#COMMENT: the message format. See the printf() documentation
#NAME: remove
#PARENT: GLib.List
#COMMENT: Removes an element from a #GList.
If two elements contain the same data, only the first is removed.
If none of the elements contain the data, the #GList is unchanged.
#NAME: channel
#PARENT: GLib.IOChannel.flush.IOStatus
#COMMENT: a #GIOChannel
#NAME: uri
#PARENT: GLib.BookmarkFile.get_added.glong
#COMMENT: a valid URI
#NAME: pointer_bit_trylock
#PARENT: GLib
#COMMENT: This is equivalent to g_bit_trylock, but working on pointers (or
other pointer-sized values).

For portability reasons, you may only lock on the bottom 32 bits of
the pointer.
#NAME: try_realloc_n
#PARENT: GLib
#COMMENT: This function is similar to g_try_realloc(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.
#NAME: channel
#PARENT: GLib.IOChannel.get_buffer_condition.IOCondition
#COMMENT: A #GIOChannel
#NAME: all
#PARENT: GLib.NormalizeMode
#COMMENT: beyond %G_NORMALIZE_DEFAULT also standardize the
    "compatibility" characters in Unicode, such as SUPERSCRIPT THREE
    to the standard forms (in this case DIGIT THREE). Formatting
    information may be lost but for most text operations such
    characters should be considered the same
#NAME: format
#PARENT: GLib.test_message.none
#COMMENT: the format string
#NAME: unix_signal_add_full
#PARENT: GLib
#COMMENT: A convenience function for g_unix_signal_source_new(), which
attaches to the default #GMainContext.  You can remove the watch
using g_source_remove().
#NAME: name
#PARENT: GLib.Thread.try_new.Thread
#COMMENT: an (optional) name for the new thread
#NAME: build_pathv
#PARENT: GLib.build_pathv
#COMMENT: a newly-allocated string that must be freed with g_free().
#NAME: file
#PARENT: GLib.MappedFile.unref.none
#COMMENT: a #GMappedFile
#NAME: get_variant
#PARENT: GLib.Variant
#COMMENT: Unboxes @value.  The result is the #GVariant instance that was
contained in @value.
#NAME: children
#PARENT: GLib.Variant.new_array.Variant
#COMMENT: an array of
           #GVariant pointers, the children
#NAME: user_data
#PARENT: GLib.Regex.replace_eval.utf8
#COMMENT: user data to pass to the function
#NAME: string
#PARENT: GLib.String.up.String
#COMMENT: a #GString
#NAME: value
#PARENT: GLib.Variant.take_ref.Variant
#COMMENT: a #GVariant
#NAME: failed
#PARENT: GLib.IOChannelError
#COMMENT: Some other error.
#NAME: dir_make_tmp
#PARENT: GLib.dir_make_tmp
#COMMENT: The actual name used. This string
    should be freed with g_free() when not needed any longer and is
    is in the GLib file name encoding. In case of errors, %NULL is
    returned and @error will be set.
#NAME: find
#PARENT: GLib.Queue.find
#COMMENT: the first link in @queue which contains @data
#NAME: thread
#PARENT: GLib.Thread.join.gpointer
#COMMENT: a #GThread
#NAME: val
#PARENT: GLib.String.prepend_len.String
#COMMENT: bytes to prepend
#NAME: set_comment
#PARENT: GLib.KeyFile
#COMMENT: Places a comment above @key from @group_name.
If @key is %NULL then @comment will be written above @group_name.
If both @key and @group_name  are %NULL, then @comment will be
written above the first group in the file.
#NAME: nospc
#PARENT: GLib.FileError
#COMMENT: No space left on device; write operation on a
    file failed because the disk is full.
#NAME: malformed_condition
#PARENT: GLib.RegexError
#COMMENT: Malformed number or name after "(?(".
    Since 2.16
#NAME: new_from_data
#PARENT: GLib.Variant
#COMMENT: Creates a new #GVariant instance from serialised data.

@type is the type of #GVariant instance that will be constructed.
The interpretation of @data depends on knowing the type.

@data is not modified by this function and must remain valid with an
unchanging value until such a time as @notify is called with
@user_data.  If the contents of @data change before that time then
the result is undefined.

If @data is trusted to be serialised data in normal form then
@trusted should be %TRUE.  This applies to serialised data created
within this process or read from a trusted location on the disk (such
as a file installed in /usr/lib alongside your application).  You
should set trusted to %FALSE if @data is read from the network, a
file in the user's home directory, etc.

If @data was not stored in this machine's native endianness, any multi-byte
numeric values in the returned variant will also be in non-native
endianness. g_variant_byteswap() can be used to recover the original values.

@notify will be called with @user_data when @data is no longer
needed.  The exact time of this call is unspecified and might even be
before this function returns.
#NAME: data
#PARENT: GLib.SList.index.gint
#COMMENT: the data to find
#NAME: data
#PARENT: GLib.PtrArray.remove.gboolean
#COMMENT: the pointer to remove
#NAME: log_func
#PARENT: GLib.log_set_handler.guint
#COMMENT: the log handler function
#NAME: length
#PARENT: GLib.regex_escape_string.utf8
#COMMENT: the length of @string, or -1 if @string is nul-terminated
#NAME: node
#PARENT: GLib.Node.get_root.Node
#COMMENT: a #GNode
#NAME: tree
#PARENT: GLib.Tree.foreach.none
#COMMENT: a #GTree
#NAME: stdout_to_dev_null
#PARENT: GLib.SpawnFlags
#COMMENT: the child's standard output will be discarded,
    instead of going to the same location as the parent's standard output.
#NAME: context
#PARENT: GLib.MarkupParseContext.push.none
#COMMENT: a #GMarkupParseContext
#NAME: to_struct_tm
#PARENT: GLib.Date
#COMMENT: Fills in the date-related bits of a struct tm using the @date value.
Initializes the non-date parts with something sane but meaningless.
#NAME: nth_bit
#PARENT: GLib.bit_nth_lsf.gint
#COMMENT: the index of the bit to start the search from
#NAME: user_data
#PARENT: GLib.spawn_sync.gboolean
#COMMENT: user data for @child_setup
#NAME: key
#PARENT: GLib.KeyFile.remove_comment.gboolean
#COMMENT: a key
#NAME: utf8_find_prev_char
#PARENT: GLib
#COMMENT: Given a position @p with a UTF-8 encoded string @str, find the start
of the previous UTF-8 character starting before @p. Returns %NULL if no
UTF-8 characters are present in @str before @p.

@p does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte.
#NAME: search
#PARENT: GLib.Tree.search
#COMMENT: the value corresponding to the found key, or %NULL
    if the key was not found
#NAME: data
#PARENT: GLib.Sequence.search_iter.SequenceIter
#COMMENT: data for the new item
#NAME: value
#PARENT: GLib.OptionArgFunc.gboolean
#COMMENT: The value to be parsed.
#NAME: inbytes_left
#PARENT: GLib.IConv.IConv.gsize
#COMMENT: inout parameter, bytes remaining to convert in @inbuf
#NAME: result
#PARENT: GLib.RegexEvalCallback.gboolean
#COMMENT: a #GString containing the new string
#NAME: unprocessed
#PARENT: GLib.ThreadPool
#COMMENT: Returns the number of tasks still unprocessed in @pool.
#NAME: search_path_from_envp
#PARENT: GLib.SpawnFlags
#COMMENT: if `argv[0]` is not an abolute path,
    it will be looked for in the `PATH` from the passed child environment.
    Since: 2.34
#NAME: set_description
#PARENT: GLib.BookmarkFile
#COMMENT: Sets @description as the description of the bookmark for @uri.

If @uri is %NULL, the description of @bookmark is set.

If a bookmark for @uri cannot be found then it is created.
#NAME: key
#PARENT: GLib.KeyFile.get_double.gdouble
#COMMENT: a key
#NAME: modify_unix_fd
#PARENT: GLib.Source
#COMMENT: Updates the event mask to watch for the fd identified by @tag.

@tag is the tag returned from g_source_add_unix_fd().

If you want to remove a fd, don't set its event mask to zero.
Instead, call g_source_remove_unix_fd().

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.

As the name suggests, this function is not available on Windows.
#NAME: context
#PARENT: GLib.MainContext.wakeup.none
#COMMENT: a #GMainContext
#NAME: pattern
#PARENT: GLib.regex_match_simple.gboolean
#COMMENT: the regular expression
#NAME: universal
#PARENT: GLib.TimeType
#COMMENT: the time is in UTC
#NAME: key
#PARENT: GLib.VariantDict.lookup.gboolean
#COMMENT: the key to lookup in the dictionary
#NAME: format
#PARENT: GLib.printf.gint
#COMMENT: a standard printf() format string, but notice
         [string precision pitfalls][string-precision]
#NAME: new
#PARENT: GLib.Checksum.new
#COMMENT: the newly created #GChecksum, or %NULL.
  Use g_checksum_free() to free the memory allocated by it.
#NAME: depth
#PARENT: GLib.Node.depth
#COMMENT: the depth of the #GNode
#NAME: siddham
#PARENT: GLib.UnicodeScript
#COMMENT: Siddham. Since: 2.42
#NAME: mkdtemp
#PARENT: GLib
#COMMENT: Creates a temporary directory. See the mkdtemp() documentation
on most UNIX-like systems.

The parameter is a string that should follow the rules for
mkdtemp() templates, i.e. contain the string "XXXXXX".
g_mkdtemp() is slightly more flexible than mkdtemp() in that the
sequence does not have to occur at the very end of the template
and you can pass a @mode and additional @flags. The X string will
be modified to form the name of a directory that didn't exist.
The string should be in the GLib file name encoding. Most importantly,
on Windows it should be in UTF-8.
#NAME: list1
#PARENT: GLib.SList.concat.gpointer
#COMMENT: a #GSList
#NAME: find
#PARENT: GLib.List
#COMMENT: Finds the element in a #GList which contains the given data.
#NAME: date
#PARENT: GLib.Date.get_day.DateDay
#COMMENT: a #GDate to extract the day of the month from
#NAME: list2
#PARENT: GLib.SList.concat.gpointer
#COMMENT: the #GSList to add to the end of the first #GSList
#NAME: new_from_bytes
#PARENT: GLib.Bytes.new_from_bytes
#COMMENT: a new #GBytes
#NAME: get_match_flags
#PARENT: GLib.Regex
#COMMENT: Returns the match options that @regex was created with.
#NAME: dpgettext2
#PARENT: GLib.dpgettext2
#COMMENT: The translated string
#NAME: file_type
#PARENT: GLib.test_get_filename.utf8
#COMMENT: the type of file (built vs. distributed)
#NAME: position
#PARENT: GLib.List
#COMMENT: Gets the position of the given element
in the #GList (starting from 0).
#NAME: month
#PARENT: GLib.Date.valid_month.gboolean
#COMMENT: month
#NAME: reader_trylock
#PARENT: GLib.RWLock
#COMMENT: Tries to obtain a read lock on @rw_lock and returns %TRUE if
the read lock was successfully obtained. Otherwise it
returns %FALSE.
#NAME: v_int64
#PARENT: GLib.TokenValue
#COMMENT: 64-bit integer value
#NAME: list
#PARENT: GLib.List.index.gint
#COMMENT: a #GList, this must point to the top of the list
#NAME: value
#PARENT: GLib.Private.replace.none
#COMMENT: the new value
#NAME: n_bytes
#PARENT: GLib.try_malloc.gpointer
#COMMENT: number of bytes to allocate.
#NAME: noent
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `ENOENT`
#NAME: first_valid
#PARENT: GLib.Hook
#COMMENT: Returns the first #GHook in a #GHookList which has not been destroyed.
The reference count for the #GHook is incremented, so you must call
g_hook_unref() to restore it when no longer needed. (Or call
g_hook_next_valid() if you are stepping through the #GHookList.)
#NAME: writer_trylock
#PARENT: GLib.RWLock.writer_trylock
#COMMENT: %TRUE if @rw_lock could be locked
#NAME: node
#PARENT: GLib.Node.first_sibling.Node
#COMMENT: a #GNode
#NAME: new_bytestring_array
#PARENT: GLib.Variant.new_bytestring_array
#COMMENT: a new floating #GVariant instance
#NAME: destroy
#PARENT: GLib.Node
#COMMENT: Removes @root and its children from the tree, freeing any memory
allocated.
#NAME: func
#PARENT: GLib.AsyncQueue.push_sorted.none
#COMMENT: the #GCompareDataFunc is used to sort @queue
#NAME: key_compare_data
#PARENT: GLib.Tree.new_full.Tree
#COMMENT: data to pass to comparison function
#NAME: in_main
#PARENT: GLib.OptionFlags
#COMMENT: The option appears in the main section of the
    `--help` output, even if it is defined in a group.
#NAME: next_valid
#PARENT: GLib.Hook.next_valid
#COMMENT: the next valid #GHook, or %NULL if none are valid
#NAME: get_icon
#PARENT: GLib.BookmarkFile.get_icon
#COMMENT: %TRUE if the icon for the bookmark for the URI was found.
  You should free the returned strings.
#NAME: string
#PARENT: GLib.String.append_unichar.String
#COMMENT: a #GString
#NAME: too_many_subpatterns
#PARENT: GLib.RegexError
#COMMENT: Too many named subpatterns (maximum
    10,000). Since 2.16
#NAME: search_iter
#PARENT: GLib.Sequence
#COMMENT: Like g_sequence_search(), but uses a #GSequenceIterCompareFunc
instead of a #GCompareDataFunc as the compare function.

@iter_cmp is called with two iterators pointing into @seq.
It should return 0 if the iterators are equal, a negative value
if the first iterator comes before the second, and a positive
value if the second iterator comes before the first.

If you are simply searching for an existing element of the sequence,
consider using g_sequence_lookup_iter().

This function will fail if the data contained in the sequence is
unsorted.  Use g_sequence_insert_sorted() or
g_sequence_insert_sorted_iter() to add data to your sequence or, if
you want to add a large amount of data, call g_sequence_sort() after
doing unsorted insertions.
#NAME: unterminated_string_constant
#PARENT: GLib.VariantParseError
#COMMENT: unterminated string constant
#NAME: condition
#PARENT: GLib.io_create_watch.Source
#COMMENT: conditions to watch for
#NAME: GUINT64_FORMAT
#PARENT: GLib
#COMMENT: This is the platform dependent conversion specifier for scanning
and printing values of type #guint64. See also #G_GINT16_FORMAT.

Some platforms do not support scanning and printing 64-bit integers,
even though the types are supported. On such platforms %G_GUINT64_FORMAT
is not defined.  Note that scanf() may not support 64-bit integers, even
if %G_GINT64_FORMAT is defined. Due to its weak error handling, scanf()
is not recommended for parsing anyway; consider using g_ascii_strtoull()
instead.
#NAME: byteswap
#PARENT: GLib.Variant
#COMMENT: Performs a byteswapping operation on the contents of @value.  The
result is that all multi-byte numeric data contained in @value is
byteswapped.  That includes 16, 32, and 64bit signed and unsigned
integers as well as file handles and double precision floating point
values.

This function is an identity mapping on any value that does not
contain multi-byte numeric data.  That include strings, booleans,
bytes and containers containing only these things (recursively).

The returned value is always in normal form and is marked as trusted.
#NAME: scanner
#PARENT: GLib.Scanner.peek_next_token.TokenType
#COMMENT: a #GScanner
#NAME: utf8_collate_key
#PARENT: GLib
#COMMENT: Converts a string into a collation key that can be compared
with other collation keys produced by the same function using
strcmp().

The results of comparing the collation keys of two strings
with strcmp() will always be the same as comparing the two
original keys with g_utf8_collate().

Note that this function depends on the [current locale][setlocale].
#NAME: list
#PARENT: GLib.List.append.gpointer
#COMMENT: a pointer to a #GList
#NAME: fd
#PARENT: GLib.PollFD
#COMMENT: the file descriptor to poll (or a HANDLE on Win32)
#NAME: index_
#PARENT: GLib.ByteArray.remove_range.guint8
#COMMENT: the index of the first byte to remove
#NAME: cyrillic
#PARENT: GLib.UnicodeScript
#COMMENT: Cyrillic
#NAME: is_object_path
#PARENT: GLib.Variant.is_object_path
#COMMENT: %TRUE if @string is a D-Bus object path
#NAME: year
#PARENT: GLib.DateDMY
#COMMENT: a year
#NAME: tristate
#PARENT: GLib.MarkupCollectType
#COMMENT: as with %G_MARKUP_COLLECT_BOOLEAN, but
    in the case of a missing attribute a value is set that compares
    equal to neither %FALSE nor %TRUE G_MARKUP_COLLECT_OPTIONAL is
    implied
#NAME: remove_application
#PARENT: GLib.BookmarkFile.remove_application
#COMMENT: %TRUE if the application was successfully removed.
#NAME: TimeVal
#PARENT: GLib
#COMMENT: Represents a precise time, with seconds and microseconds.
Similar to the struct timeval returned by the gettimeofday()
UNIX system call.

GLib is attempting to unify around the use of 64bit integers to
represent microsecond-precision time. As such, this type will be
removed from a future version of GLib.
#NAME: elements
#PARENT: GLib.Variant.new_fixed_array.Variant
#COMMENT: a pointer to the fixed array of contiguous elements
#NAME: open
#PARENT: GLib.IConv
#COMMENT: Same as the standard UNIX routine iconv_open(), but
may be implemented via libiconv on UNIX flavors that lack
a native implementation.

GLib provides g_convert() and g_locale_to_utf8() which are likely
more convenient than the raw iconv wrappers.
#NAME: nth_prev
#PARENT: GLib.List
#COMMENT: Gets the element @n places before @list.
#NAME: get_id
#PARENT: GLib.Source.get_id
#COMMENT: the ID (greater than 0) for the source
#NAME: dcgettext
#PARENT: GLib
#COMMENT: This is a variant of g_dgettext() that allows specifying a locale
category instead of always using `LC_MESSAGES`. See g_dgettext() for
more information about how this functions differs from calling
dcgettext() directly.
#NAME: find_source_by_funcs_user_data
#PARENT: GLib.MainContext.find_source_by_funcs_user_data
#COMMENT: the source, if one was found, otherwise %NULL
#NAME: decimal_number
#PARENT: GLib.UnicodeType
#COMMENT: General category "Number, Decimal Digit" (Nd)
#NAME: dict
#PARENT: GLib.VariantDict.contains.gboolean
#COMMENT: a #GVariantDict
#NAME: dict
#PARENT: GLib.VariantDict.clear.none
#COMMENT: a #GVariantDict
#NAME: nametoolong
#PARENT: GLib.FileError
#COMMENT: Filename too long.
#NAME: data
#PARENT: GLib.Sequence.lookup_iter.SequenceIter
#COMMENT: data to lookup
#NAME: strdup_printf
#PARENT: GLib
#COMMENT: Similar to the standard C sprintf() function but safer, since it
calculates the maximum space required and allocates memory to hold
the result. The returned string should be freed with g_free() when no
longer needed.
#NAME: inval
#PARENT: GLib.IOError
#COMMENT: an EINVAL error occurred
#NAME: compare
#PARENT: GLib.Variant
#COMMENT: Compares @one and @two.

The types of @one and @two are #gconstpointer only to allow use of
this function with #GTree, #GPtrArray, etc.  They must each be a
#GVariant.

Comparison is only defined for basic types (ie: booleans, numbers,
strings).  For booleans, %FALSE is less than %TRUE.  Numbers are
ordered in the usual way.  Strings are in ASCII lexographical order.

It is a programmer error to attempt to compare container values or
two values that have types that are not exactly equal.  For example,
you cannot compare a 32-bit signed integer with a 32-bit unsigned
integer.  Also note that this function is not particularly
well-behaved when it comes to comparison of doubles; in particular,
the handling of incomparable values (ie: NaN) is undefined.

If you only require an equality comparison, g_variant_equal() is more
general.
#NAME: data
#PARENT: GLib.KeyFile.load_from_data.gboolean
#COMMENT: key file loaded in memory
#NAME: user_data
#PARENT: GLib.MarkupParseContext.new.MarkupParseContext
#COMMENT: user data to pass to #GMarkupParser functions
#NAME: string
#PARENT: GLib.Variant.is_signature.gboolean
#COMMENT: a normal C nul-terminated string
#NAME: atomic_int_inc
#PARENT: GLib
#COMMENT: Increments the value of @atomic by 1.

Think of this operation as an atomic version of `{ *atomic += 1; }`.

This call acts as a full compiler and hardware memory barrier.
#NAME: invoke
#PARENT: GLib.HookList
#COMMENT: Calls all of the #GHook functions in a #GHookList.
#NAME: outbuf
#PARENT: GLib.iconv.gsize
#COMMENT: converted output bytes
#NAME: lycian
#PARENT: GLib.UnicodeScript
#COMMENT: Lycian. Since 2.16.3
#NAME: user_data
#PARENT: GLib.List.insert_sorted_with_data.gpointer
#COMMENT: user data to pass to comparison function
#NAME: list
#PARENT: GLib.SList.prepend.gpointer
#COMMENT: a #GSList
#NAME: intern_static_string
#PARENT: GLib
#COMMENT: Returns a canonical representation for @string. Interned strings
can be compared for equality by comparing the pointers, instead of
using strcmp(). g_intern_static_string() does not copy the string,
therefore @string must not be freed or modified.
#NAME: context
#PARENT: GLib.OptionContext.parse.gboolean
#COMMENT: a #GOptionContext
#NAME: ch
#PARENT: GLib.unichar_validate.gboolean
#COMMENT: a Unicode character
#NAME: str
#PARENT: GLib.convert_with_fallback.utf8
#COMMENT: the string to convert
#NAME: newline_cr
#PARENT: GLib.RegexCompileFlags
#COMMENT: Usually any newline character or character sequence is
    recognized. If this option is set, the only recognized newline character
    is '\r'.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.to_file.gboolean
#COMMENT: a #GBookmarkFile
#NAME: log_set_always_fatal
#PARENT: GLib.log_set_always_fatal
#COMMENT: the old fatal mask
#NAME: new_now
#PARENT: GLib.DateTime
#COMMENT: Creates a #GDateTime corresponding to this exact instant in the given
time zone @tz.  The time is as accurate as the system allows, to a
maximum accuracy of 1 microsecond.

This function will always succeed unless the system clock is set to
truly insane values (or unless GLib is still being used after the
year 9999).

You should release the return value by calling g_date_time_unref()
when you are done with it.
#NAME: double
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a double precision floating
                         point value.
#NAME: time_
#PARENT: GLib.TimeVal.to_iso8601.utf8
#COMMENT: a #GTimeVal
#NAME: pop
#PARENT: GLib.TrashStack
#COMMENT: Pops a piece of memory off a #GTrashStack.
#NAME: array
#PARENT: GLib.PtrArray.set_size.none
#COMMENT: a #GPtrArray
#NAME: keep_translations
#PARENT: GLib.KeyFileFlags
#COMMENT: Use this flag if you plan to write the
    (possibly modified) contents of the key file back to a file;
    otherwise only the translations for the current language will be
    written back.
#NAME: set_printerr_handler
#PARENT: GLib
#COMMENT: Sets the handler for printing error messages.

Any messages passed to g_printerr() will be output via
the new handler. The default handler simply outputs the
message to stderr. By providing your own handler you can
redirect the output, to a GTK+ widget or a log file for
example.
#NAME: index
#PARENT: GLib.List.index
#COMMENT: the index of the element containing the data,
    or -1 if the data is not found
#NAME: timeval
#PARENT: GLib.Date.set_time_val.none
#COMMENT: #GTimeVal value to set
#NAME: new
#PARENT: GLib.Source.new
#COMMENT: the newly-created #GSource.
#NAME: dest
#PARENT: GLib.stpcpy.utf8
#COMMENT: destination buffer.
#NAME: short_name
#PARENT: GLib.OptionEntry
#COMMENT: If an option has a short name, it can be specified
    `-short_name` in a commandline. @short_name must be  a printable
    ASCII character different from '-', or zero if the option has no
    short name.
#NAME: queue
#PARENT: GLib.Queue.pop_tail.gpointer
#COMMENT: a #GQueue
#NAME: new
#PARENT: GLib.TimeZone.new
#COMMENT: the requested timezone
#NAME: type
#PARENT: GLib.VariantType.hash.guint
#COMMENT: a #GVariantType
#NAME: lepcha
#PARENT: GLib.UnicodeScript
#COMMENT: Lepcha. Since 2.16.3
#NAME: gfree_pointer
#PARENT: GLib.test_queue_free.none
#COMMENT: the pointer to be stored.
#NAME: ascii_down
#PARENT: GLib.String
#COMMENT: Converts all uppercase ASCII letters to lowercase ASCII letters.
#NAME: after
#PARENT: GLib.UnicodeBreakType
#COMMENT: Break Opportunity After (BA)
#NAME: utf8_get_char
#PARENT: GLib
#COMMENT: Converts a sequence of bytes encoded as UTF-8 to a Unicode character.

If @p does not point to a valid UTF-8 encoded character, results
are undefined. If you are not sure that the bytes are complete
valid Unicode characters, you should use g_utf8_get_char_validated()
instead.
#NAME: key
#PARENT: GLib.hash_table_replace.gboolean
#COMMENT: a key to insert
#NAME: modifier_symbol
#PARENT: GLib.UnicodeType
#COMMENT: General category "Symbol, Modifier" (Sk)
#NAME: link_index
#PARENT: GLib.Queue.link_index
#COMMENT: the position of @link_, or -1 if the link is
    not part of @queue
#NAME: new_full
#PARENT: GLib.PtrArray
#COMMENT: Creates a new #GPtrArray with @reserved_size pointers preallocated
and a reference count of 1. This avoids frequent reallocation, if
you are going to add many pointers to the array. Note however that
the size of the array is still 0. It also set @element_free_func
for freeing each element when the array is destroyed either via
g_ptr_array_unref(), when g_ptr_array_free() is called with
@free_segment set to %TRUE or when removing elements.
#NAME: file
#PARENT: GLib.vfprintf.gint
#COMMENT: the stream to write to.
#NAME: get_description
#PARENT: GLib.OptionContext.get_description
#COMMENT: the description
#NAME: LOG_2_BASE_10
#PARENT: GLib
#COMMENT: Multiplying the base 2 exponent by this number yields the base 10 exponent.
#NAME: is_ancestor
#PARENT: GLib.Node
#COMMENT: Returns %TRUE if @node is an ancestor of @descendant.
This is true if node is the parent of @descendant,
or if node is the grandparent of @descendant etc.
#NAME: file_set_contents
#PARENT: GLib.file_set_contents
#COMMENT: %TRUE on success, %FALSE if an error occurred
#NAME: PRIORITY_DEFAULT
#PARENT: GLib
#COMMENT: Use this for default priority event sources.

In GLib this priority is used when adding timeout functions
with g_timeout_add(). In GDK this priority is used for events
from the X server.
#NAME: get_added
#PARENT: GLib.BookmarkFile.get_added
#COMMENT: a timestamp
#NAME: start_pos
#PARENT: GLib.MatchInfo.fetch_named_pos.gboolean
#COMMENT: pointer to location where to store
    the start position, or %NULL
#NAME: trylock
#PARENT: GLib.Mutex
#COMMENT: Tries to lock @mutex. If @mutex is already locked by another thread,
it immediately returns %FALSE. Otherwise it locks @mutex and returns
%TRUE.

#GMutex is neither guaranteed to be recursive nor to be
non-recursive.  As such, calling g_mutex_lock() on a #GMutex that has
already been locked by the same thread results in undefined behaviour
(including but not limited to deadlocks or arbitrary return values).
#NAME: function
#PARENT: GLib.MainContext.invoke.none
#COMMENT: function to call
#NAME: ascii_strtod
#PARENT: GLib
#COMMENT: Converts a string to a #gdouble value.

This function behaves like the standard strtod() function
does in the C locale. It does this without actually changing
the current locale, since that would not be thread-safe.
A limitation of the implementation is that this function
will still accept localized versions of infinities and NANs.

This function is typically used when reading configuration
files or other non-user input that should be locale independent.
To handle input from the user you should normally use the
locale-sensitive system strtod() function.

To convert from a #gdouble to a string in a locale-insensitive
way, use g_ascii_dtostr().

If the correct value would cause overflow, plus or minus %HUGE_VAL
is returned (according to the sign of the value), and %ERANGE is
stored in %errno. If the correct value would cause underflow,
zero is returned and %ERANGE is stored in %errno.

This function resets %errno before calling strtod() so that
you can reliably detect overflow and underflow.
#NAME: open
#PARENT: GLib.Dir
#COMMENT: Opens a directory for reading. The names of the files in the
directory can then be retrieved using g_dir_read_name().  Note
that the ordering is not defined.
#NAME: exclamation
#PARENT: GLib.UnicodeBreakType
#COMMENT: Exclamation/Interrogation (EX)
#NAME: quark_to_string
#PARENT: GLib.quark_to_string
#COMMENT: the string associated with the #GQuark
#NAME: n
#PARENT: GLib.Node.nth_child.Node
#COMMENT: the index of the desired child
#NAME: key_file
#PARENT: GLib.KeyFile.free.none
#COMMENT: a #GKeyFile
#NAME: GUINTPTR_FORMAT
#PARENT: GLib
#COMMENT: This is the platform dependent conversion specifier
for scanning and printing values of type #guintptr.
#NAME: get_is_private
#PARENT: GLib.BookmarkFile.get_is_private
#COMMENT: %TRUE if the private flag is set, %FALSE otherwise.
#NAME: key_id
#PARENT: GLib.datalist_id_dup_data.gpointer
#COMMENT: the #GQuark identifying a data element
#NAME: scan_binary
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if binary numbers are recognized (the
    default is %FALSE).
#NAME: nxio
#PARENT: GLib.IOChannelError
#COMMENT: No such device or address.
#NAME: key_destroy_func
#PARENT: GLib.Tree.new_full.Tree
#COMMENT: a function to free the memory allocated for the key
  used when removing the entry from the #GTree or %NULL if you don't
  want to supply such a function
#NAME: quark
#PARENT: GLib.quark_to_string.utf8
#COMMENT: a #GQuark.
#NAME: str
#PARENT: GLib.utf8_to_utf16.guint16
#COMMENT: a UTF-8 encoded string
#NAME: other_number
#PARENT: GLib.UnicodeType
#COMMENT: General category "Number, Other" (No)
#NAME: delta
#PARENT: GLib.SequenceIter.move.SequenceIter
#COMMENT: A positive or negative number indicating how many positions away
   from @iter the returned #GSequenceIter will be
#NAME: VariantDict
#PARENT: GLib
#COMMENT: #GVariantDict is a mutable interface to #GVariant dictionaries.

It can be used for doing a sequence of dictionary lookups in an
efficient way on an existing #GVariant dictionary or it can be used
to construct new dictionaries with a hashtable-like interface.  It
can also be used for taking existing dictionaries and modifying them
in order to create new ones.

#GVariantDict can only be used with %G_VARIANT_TYPE_VARDICT
dictionaries.

It is possible to use #GVariantDict allocated on the stack or on the
heap.  When using a stack-allocated #GVariantDict, you begin with a
call to g_variant_dict_init() and free the resources with a call to
g_variant_dict_clear().

Heap-allocated #GVariantDict follows normal refcounting rules: you
allocate it with g_variant_dict_new() and use g_variant_dict_ref()
and g_variant_dict_unref().

g_variant_dict_end() is used to convert the #GVariantDict back into a
dictionary-type #GVariant.  When used with stack-allocated instances,
this also implicitly frees all associated memory, but for
heap-allocated instances, you must still call g_variant_dict_unref()
afterwards.

You will typically want to use a heap-allocated #GVariantDict when
you expose it as part of an API.  For most other uses, the
stack-allocated form will be more convenient.

Consider the following two examples that do the same thing in each
style: take an existing dictionary and look up the "count" uint32
key, adding 1 to it if it is found, or returning an error if the
key is not found.  Each returns the new dictionary as a floating
#GVariant.

## Using a stack-allocated GVariantDict

|[<!-- language="C" -->
  GVariant *
  add_to_count (GVariant  *orig,
                GError   **error)
  {
    GVariantDict dict;
    guint32 count;

    g_variant_dict_init (&dict, orig);
    if (!g_variant_dict_lookup (&dict, "count", "u", &count))
      {
        g_set_error (...);
        g_variant_dict_clear (&dict);
        return NULL;
      }

    g_variant_dict_insert (&dict, "count", "u", count + 1);

    return g_variant_dict_end (&dict);
  }
]|

## Using heap-allocated GVariantDict

|[<!-- language="C" -->
  GVariant *
  add_to_count (GVariant  *orig,
                GError   **error)
  {
    GVariantDict *dict;
    GVariant *result;
    guint32 count;

    dict = g_variant_dict_new (orig);

    if (g_variant_dict_lookup (dict, "count", "u", &count))
      {
        g_variant_dict_insert (dict, "count", "u", count + 1);
        result = g_variant_dict_end (dict);
      }
    else
      {
        g_set_error (...);
        result = NULL;
      }

    g_variant_dict_unref (dict);

    return result;
  }
]|
#NAME: ascii_down
#PARENT: GLib.String.ascii_down
#COMMENT: passed-in @string pointer, with all the
    uppercase characters converted to lowercase in place,
    with semantics that exactly match g_ascii_tolower().
#NAME: test_failed
#PARENT: GLib
#COMMENT: Returns whether a test has already failed. This will
be the case when g_test_fail(), g_test_incomplete()
or g_test_skip() have been called, but also if an
assertion has failed.

This can be useful to return early from a test if
continuing after a failed assertion might be harmful.

The return value of this function is only meaningful
if it is called from inside a test function.
#NAME: first_type
#PARENT: GLib.markup_collect_attributes.gboolean
#COMMENT: the #GMarkupCollectType of the first attribute
#NAME: file_error_from_errno
#PARENT: GLib.file_error_from_errno
#COMMENT: #GFileError corresponding to the given @errno
#NAME: peek_string
#PARENT: GLib.VariantType
#COMMENT: Returns the type string corresponding to the given @type.  The
result is not nul-terminated; in order to determine its length you
must call g_variant_type_get_string_length().

To get a nul-terminated string, see g_variant_type_dup_string().
#NAME: link_
#PARENT: GLib.Queue.push_head_link.none
#COMMENT: a single #GList element, not a list with more than one element
#NAME: test_trap_has_passed
#PARENT: GLib
#COMMENT: Check the result of the last g_test_trap_subprocess() call.
#NAME: timeval
#PARENT: GLib.Source.get_current_time.none
#COMMENT: #GTimeVal structure in which to store current time.
#NAME: copy
#PARENT: GLib.VariantType.copy
#COMMENT: a new #GVariantType

Since 2.24
#NAME: get_string
#PARENT: GLib.KeyFile.get_string
#COMMENT: a newly allocated string or %NULL if the specified
  key cannot be found.
#NAME: DoubleIEEE754
#PARENT: GLib
#COMMENT: The #GFloatIEEE754 and #GDoubleIEEE754 unions are used to access the sign,
mantissa and exponent of IEEE floats and doubles. These unions are defined
as appropriate for a given platform. IEEE floats and doubles are supported
(used for storage) by at least Intel, PPC and Sparc.
#NAME: txtbusy
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `ETXTBUSY`
#NAME: hostname_is_ip_address
#PARENT: GLib
#COMMENT: Tests if @hostname is the string form of an IPv4 or IPv6 address.
(Eg, "192.168.0.1".)
#NAME: data
#PARENT: GLib.List.find.gpointer
#COMMENT: the element data to find
#NAME: string_scan
#PARENT: GLib.VariantType
#COMMENT: Scan for a single complete and valid GVariant type string in @string.
The memory pointed to by @limit (or bytes beyond it) is never
accessed.

If a valid type string is found, @endptr is updated to point to the
first character past the end of the string that was found and %TRUE
is returned.

If there is no valid type string starting at @string, or if the type
string does not end before @limit then %FALSE is returned.

For the simple case of checking if a string is a valid type string,
see g_variant_type_string_is_valid().
#NAME: hour
#PARENT: GLib.DateTime.new_utc.DateTime
#COMMENT: the hour component of the date
#NAME: get_string
#PARENT: GLib.KeyFile
#COMMENT: Returns the string value associated with @key under @group_name.
Unlike g_key_file_get_value(), this function handles escape sequences
like \s.

In the event the key cannot be found, %NULL is returned and
@error is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the @group_name cannot be found, %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
#NAME: err
#PARENT: GLib.IOCondition
#COMMENT: Error condition.
#NAME: datetime
#PARENT: GLib.DateTime.to_local.DateTime
#COMMENT: a #GDateTime
#NAME: len
#PARENT: GLib.locale_from_utf8.utf8
#COMMENT: the length of the string, or -1 if the string is
                nul-terminated (Note that some encodings may allow nul
                bytes to occur inside strings. In that case, using -1
                for the @len parameter is unsafe)
#NAME: matches
#PARENT: GLib.MatchInfo
#COMMENT: Returns whether the previous match operation succeeded.
#NAME: function
#PARENT: GLib.timeout_add_seconds.guint
#COMMENT: function to call
#NAME: writer_lock
#PARENT: GLib.RWLock
#COMMENT: Obtain a write lock on @rw_lock. If any thread already holds
a read or write lock on @rw_lock, the current thread will block
until all other threads have dropped their locks on @rw_lock.
#NAME: checksum_type
#PARENT: GLib.compute_checksum_for_data.utf8
#COMMENT: a #GChecksumType
#NAME: key
#PARENT: GLib.Private.replace.none
#COMMENT: a #GPrivate
#NAME: free_to_bytes
#PARENT: GLib.String
#COMMENT: Transfers ownership of the contents of @string to a newly allocated
#GBytes.  The #GString structure itself is deallocated, and it is
therefore invalid to use @string after invoking this function.

Note that while #GString ensures that its buffer always has a
trailing nul character (not reflected in its "len"), the returned
#GBytes does not include this extra nul; i.e. it has length exactly
equal to the "len" member.
#NAME: HAVE_GNUC_VISIBILITY
#PARENT: GLib
#COMMENT: Defined to 1 if gcc-style visibility handling is supported.
#NAME: match_all
#PARENT: GLib.Regex
#COMMENT: Using the standard algorithm for regular expression matching only
the longest match in the string is retrieved. This function uses
a different algorithm so it can retrieve all the possible matches.
For more documentation see g_regex_match_all_full().

A #GMatchInfo structure, used to get information on the match, is
stored in @match_info if not %NULL. Note that if @match_info is
not %NULL then it is created even if the function returns %FALSE,
i.e. you must free it regardless if regular expression actually
matched.

@string is not copied and is used in #GMatchInfo internally. If
you use any #GMatchInfo method (except g_match_info_free()) after
freeing or modifying @string then the behaviour is undefined.
#NAME: queue
#PARENT: GLib.AsyncQueue.try_pop_unlocked.gpointer
#COMMENT: a #GAsyncQueue
#NAME: p
#PARENT: GLib.utf8_prev_char.utf8
#COMMENT: a pointer to a position within a UTF-8 encoded string
#NAME: value
#PARENT: GLib.TraverseFunc.gboolean
#COMMENT: the value corresponding to the key
#NAME: uri_escape_string
#PARENT: GLib
#COMMENT: Escapes a string for use in a URI.

Normally all characters that are not "unreserved" (i.e. ASCII alphanumerical
characters plus dash, dot, underscore and tilde) are escaped.
But if you specify characters in @reserved_chars_allowed they are not
escaped. This is useful for the "reserved" characters in the URI
specification, since those are allowed unescaped in some portions of
a URI.
#NAME: get_modified
#PARENT: GLib.BookmarkFile.get_modified
#COMMENT: a timestamp
#NAME: hash_table
#PARENT: GLib.HashTable.foreach_remove.guint
#COMMENT: a #GHashTable
#NAME: make_tmp
#PARENT: GLib.Dir.make_tmp
#COMMENT: The actual name used. This string
    should be freed with g_free() when not needed any longer and is
    is in the GLib file name encoding. In case of errors, %NULL is
    returned and @error will be set.
#NAME: expected_type
#PARENT: GLib.Variant.lookup_value.Variant
#COMMENT: a #GVariantType, or %NULL
#NAME: writable
#PARENT: GLib.MappedFile.new_from_fd.MappedFile
#COMMENT: whether the mapping should be writable
#NAME: list
#PARENT: GLib.List.sort.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: get_element_stack
#PARENT: GLib.MarkupParseContext
#COMMENT: Retrieves the element stack from the internal state of the parser.

The returned #GSList is a list of strings where the first item is
the currently open tag (as would be returned by
g_markup_parse_context_get_element()) and the next item is its
immediate parent.

This function is intended to be used in the start_element and
end_element handlers where g_markup_parse_context_get_element()
would merely return the name of the element that is being
processed.
#NAME: find_source_by_funcs_user_data
#PARENT: GLib.MainContext
#COMMENT: Finds a source with the given source functions and user data.  If
multiple sources exist with the same source function and user data,
the first one found will be returned.
#NAME: compare
#PARENT: GLib.DateTime
#COMMENT: A comparison function for #GDateTimes that is suitable
as a #GCompareFunc. Both #GDateTimes must be non-%NULL.
#NAME: in_call
#PARENT: GLib.HookFlagMask
#COMMENT: set if the hook is currently being run
#NAME: key_file
#PARENT: GLib.KeyFile.get_string.utf8
#COMMENT: a #GKeyFile
#NAME: flags
#PARENT: GLib.Node.n_nodes.guint
#COMMENT: which types of children are to be counted, one of
    %G_TRAVERSE_ALL, %G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES
#NAME: remove
#PARENT: GLib.HashTableIter
#COMMENT: Removes the key/value pair currently pointed to by the iterator
from its associated #GHashTable. Can only be called after
g_hash_table_iter_next() returned %TRUE, and cannot be called
more than once for the same key/value pair.

If the #GHashTable was created using g_hash_table_new_full(),
the key and value are freed using the supplied destroy functions,
otherwise you have to make sure that any dynamically allocated
values are freed yourself.

It is safe to continue iterating the #GHashTable afterward:
|[<!-- language="C" -->
while (g_hash_table_iter_next (&iter, &key, &value))
  {
    if (condition)
      g_hash_table_iter_remove (&iter);
  }
]|
#NAME: mkdtemp_full
#PARENT: GLib
#COMMENT: Creates a temporary directory. See the mkdtemp() documentation
on most UNIX-like systems.

The parameter is a string that should follow the rules for
mkdtemp() templates, i.e. contain the string "XXXXXX".
g_mkdtemp() is slightly more flexible than mkdtemp() in that the
sequence does not have to occur at the very end of the template
and you can pass a @mode. The X string will be modified to form
the name of a directory that didn't exist. The string should be
in the GLib file name encoding. Most importantly, on Windows it
should be in UTF-8.
#NAME: match_info
#PARENT: GLib.MatchInfo.expand_references.utf8
#COMMENT: a #GMatchInfo or %NULL
#NAME: remove_range
#PARENT: GLib.ByteArray
#COMMENT: Removes the given number of bytes starting at the given index from a
#GByteArray.  The following elements are moved to close the gap.
#NAME: double
#PARENT: GLib.Rand
#COMMENT: Returns the next random #gdouble from @rand_ equally distributed over
the range [0..1).
#NAME: root
#PARENT: GLib.Node.n_nodes.guint
#COMMENT: a #GNode
#NAME: get_string
#PARENT: GLib.Variant.get_string
#COMMENT: the constant string, UTF-8 encoded
#NAME: unref
#PARENT: GLib.Hmac
#COMMENT: Atomically decrements the reference count of @hmac by one.

If the reference count drops to 0, all keys and values will be
destroyed, and all memory allocated by the hash table is released.
This function is MT-safe and may be called from any thread.
Frees the memory allocated for @hmac.
#NAME: modified
#PARENT: GLib.BookmarkFile.set_modified.none
#COMMENT: a timestamp or -1 to use the current time
#NAME: destroy_notify
#PARENT: GLib.OptionContext.set_translate_func.none
#COMMENT: a function which gets called to free @data, or %NULL
#NAME: utf8_get_char_validated
#PARENT: GLib
#COMMENT: Convert a sequence of bytes encoded as UTF-8 to a Unicode character.
This function checks for incomplete characters, for invalid characters
such as characters that are out of the range of Unicode, and for
overlong encodings of valid characters.
#NAME: size
#PARENT: GLib.Bytes.new_take.Bytes
#COMMENT: the size of @data
#NAME: size
#PARENT: GLib.format_size_for_display.utf8
#COMMENT: a size in bytes
#NAME: group_name
#PARENT: GLib.KeyFile.get_boolean.gboolean
#COMMENT: a group name
#NAME: end
#PARENT: GLib.VariantDict
#COMMENT: Returns the current value of @dict as a #GVariant of type
%G_VARIANT_TYPE_VARDICT, clearing it in the process.

It is not permissible to use @dict in any way after this call except
for reference counting operations (in the case of a heap-allocated
#GVariantDict) or by reinitialising it with g_variant_dict_init() (in
the case of stack-allocated).
#NAME: func
#PARENT: GLib.Tree.foreach.none
#COMMENT: the function to call for each node visited.
    If this function returns %TRUE, the traversal is stopped.
#NAME: shell_quote
#PARENT: GLib
#COMMENT: Quotes a string so that the shell (/bin/sh) will interpret the
quoted string to mean @unquoted_string. If you pass a filename to
the shell, for example, you should first quote it with this
function.  The return value must be freed with g_free(). The
quoting style used is undefined (single or double quotes may be
used).
#NAME: ascii_strdown
#PARENT: GLib.ascii_strdown
#COMMENT: a newly-allocated string, with all the upper case
    characters in @str converted to lower case, with semantics that
    exactly match g_ascii_tolower(). (Note that this is unlike the
    old g_strdown(), which modified the string in place.)
#NAME: get_system_data_dirs
#PARENT: GLib.get_system_data_dirs
#COMMENT: a %NULL-terminated array of strings owned by GLib that must
              not be modified or freed.
#NAME: atomic_int_exchange_and_add
#PARENT: GLib.atomic_int_exchange_and_add
#COMMENT: the value of @atomic before the add, signed
#NAME: append_len
#PARENT: GLib.String.append_len
#COMMENT: @string
#NAME: length
#PARENT: GLib.Variant.new_strv.Variant
#COMMENT: the length of @strv, or -1
#NAME: cond
#PARENT: GLib.Cond.broadcast.none
#COMMENT: a #GCond
#NAME: len
#PARENT: GLib.filename_to_utf8.utf8
#COMMENT: the length of the string, or -1 if the string is
                nul-terminated (Note that some encodings may allow nul
                bytes to occur inside strings. In that case, using -1
                for the @len parameter is unsafe)
#NAME: datalist_id_replace_data
#PARENT: GLib.datalist_id_replace_data
#COMMENT: %TRUE if the existing value for @key_id was replaced
 by @newval, %FALSE otherwise.
#NAME: fds
#PARENT: GLib.poll.gint
#COMMENT: file descriptors to poll
#NAME: contains
#PARENT: GLib.VariantDict.contains
#COMMENT: %TRUE if @key is in @dict
#NAME: c
#PARENT: GLib.unichar_isgraph.gboolean
#COMMENT: a Unicode character
#NAME: hmac
#PARENT: GLib.Hmac.unref.none
#COMMENT: a #GHmac
#NAME: str_array
#PARENT: GLib.strfreev.none
#COMMENT: a %NULL-terminated array of strings to free
#NAME: hostname_to_unicode
#PARENT: GLib
#COMMENT: Converts @hostname to its canonical presentation form; a UTF-8
string in Unicode normalization form C, containing no uppercase
letters, no forbidden characters, and no ASCII-encoded segments,
and not ending with a trailing dot.

Of course if @hostname is not an internationalized hostname, then
the canonical presentation form will be entirely ASCII.
#NAME: strftime
#PARENT: GLib.Date.strftime
#COMMENT: number of characters written to the buffer, or 0 the buffer was too small
#NAME: error_from_errno
#PARENT: GLib.IOChannel.error_from_errno
#COMMENT: a #GIOChannelError error number, e.g.
     %G_IO_CHANNEL_ERROR_INVAL.
#NAME: dngettext
#PARENT: GLib.dngettext
#COMMENT: The translated string
#NAME: lhs
#PARENT: GLib.Date.compare.gint
#COMMENT: first date to compare
#NAME: get_user_data_dir
#PARENT: GLib
#COMMENT: Returns a base directory in which to access application data such
as icons that is customized for a particular user.

On UNIX platforms this is determined using the mechanisms described
in the
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
In this case the directory retrieved will be `XDG_DATA_HOME`.

On Windows this is the folder to use for local (as opposed to
roaming) application data. See documentation for
CSIDL_LOCAL_APPDATA. Note that on Windows it thus is the same as
what g_get_user_config_dir() returns.
#NAME: key
#PARENT: GLib.HashTable.lookup.gpointer
#COMMENT: the key to look up
#NAME: string
#PARENT: GLib.String.append.String
#COMMENT: a #GString
#NAME: expected_type
#PARENT: GLib.VariantDict.lookup_value.Variant
#COMMENT: a #GVariantType, or %NULL
#NAME: max_tokens
#PARENT: GLib.strsplit_set.utf8
#COMMENT: The maximum number of tokens to split @string into.
    If this is less than 1, the string is split completely
#NAME: UserDirectory
#PARENT: GLib
#COMMENT: These are logical ids for special directories which are defined
depending on the platform used. You should use g_get_user_special_dir()
to retrieve the full path associated to the logical id.

The #GUserDirectory enumeration can be extended at later date. Not
every platform has a directory for every logical id in this
enumeration.
#NAME: to_utc
#PARENT: GLib.DateTime.to_utc
#COMMENT: the newly created #GDateTime
#NAME: list
#PARENT: GLib.SList.append.gpointer
#COMMENT: a #GSList
#NAME: string
#PARENT: GLib.String.append_c.String
#COMMENT: a #GString
#NAME: get_max_backref
#PARENT: GLib.Regex.get_max_backref
#COMMENT: the number of the highest back reference
#NAME: t
#PARENT: GLib.DateTime.new_from_unix_local.DateTime
#COMMENT: the Unix time
#NAME: invalid_format_string
#PARENT: GLib.VariantParseError
#COMMENT: not a valid #GVariant format string
#NAME: markup_escape_text
#PARENT: GLib
#COMMENT: Escapes text so that the markup parser will parse it verbatim.
Less than, greater than, ampersand, etc. are replaced with the
corresponding entities. This function would typically be used
when writing out a file to be parsed with the markup parser.

Note that this function doesn't protect whitespace and line endings
from being processed according to the XML rules for normalization
of line endings and attribute values.

Note also that this function will produce character references in
the range of &#x1; ... &#x1f; for all control sequences
except for tabstop, newline and carriage return.  The character
references in this range are not valid XML 1.0, but they are
valid XML 1.1 and will be accepted by the GMarkup parser.
#NAME: args
#PARENT: GLib.vprintf.gint
#COMMENT: the list of arguments to insert in the output.
#NAME: direct_equal
#PARENT: GLib
#COMMENT: Compares two #gpointer arguments and returns %TRUE if they are equal.
It can be passed to g_hash_table_new() as the @key_equal_func
parameter, when using opaque pointers compared by pointer value as
keys in a #GHashTable.

This equality function is also appropriate for keys that are integers
stored in pointers, such as `GINT_TO_POINTER (n)`.
#NAME: random_int
#PARENT: GLib
#COMMENT: Return a random #guint32 equally distributed over the range
[0..2^32-1].
#NAME: vprintf
#PARENT: GLib.vprintf
#COMMENT: the number of bytes printed.
#NAME: alloc
#PARENT: GLib.SList
#COMMENT: Allocates space for one #GSList element. It is called by the
g_slist_append(), g_slist_prepend(), g_slist_insert() and
g_slist_insert_sorted() functions and so is rarely used on its own.
#NAME: foreach
#PARENT: GLib.SList
#COMMENT: Calls a function for each element of a #GSList.
#NAME: string_length
#PARENT: GLib.pattern_match.gboolean
#COMMENT: the length of @string (in bytes, i.e. strlen(),
    not g_utf8_strlen())
#NAME: data
#PARENT: GLib.idle_add_full.guint
#COMMENT: data to pass to @function
#NAME: handle
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a file handle index.
#NAME: min_date
#PARENT: GLib.Date.clamp.none
#COMMENT: minimum accepted value for @date
#NAME: ref
#PARENT: GLib.TimeZone
#COMMENT: Increases the reference count on @tz.
#NAME: name
#PARENT: GLib.Source.set_name.none
#COMMENT: debug name for the source
#NAME: mode
#PARENT: GLib.access.gint
#COMMENT: as in access()
#NAME: user_data
#PARENT: GLib.AsyncQueue.push_sorted_unlocked.none
#COMMENT: user data passed to @func.
#NAME: value
#PARENT: GLib.Variant.get_data.gpointer
#COMMENT: a #GVariant instance
#NAME: unix_get_fd
#PARENT: GLib.IOChannel
#COMMENT: Returns the file descriptor of the #GIOChannel.

On Windows this function returns the file descriptor or socket of
the #GIOChannel.
#NAME: new_with_free_func
#PARENT: GLib.PtrArray.new_with_free_func
#COMMENT: A new #GPtrArray
#NAME: len
#PARENT: GLib.byte_array_new_take.guint8
#COMMENT: length of @data
#NAME: slice_copy
#PARENT: GLib
#COMMENT: Allocates a block of memory from the slice allocator
and copies @block_size bytes into it from @mem_block.
#NAME: hook_destroy
#PARENT: GLib
#COMMENT: Destroys a #GHook, given its ID.
#NAME: domain
#PARENT: GLib.Error.matches.gboolean
#COMMENT: an error domain
#NAME: c
#PARENT: GLib.unichar_isalpha.gboolean
#COMMENT: a Unicode character
#NAME: get_size
#PARENT: GLib.Variant.get_size
#COMMENT: the serialised size of @value
#NAME: test_set_nonfatal_assertions
#PARENT: GLib
#COMMENT: Changes the behaviour of g_assert_cmpstr(), g_assert_cmpint(),
g_assert_cmpuint(), g_assert_cmphex(), g_assert_cmpfloat(),
g_assert_true(), g_assert_false(), g_assert_null(), g_assert_no_error(),
g_assert_error(), g_test_assert_expected_messages() and the various
g_test_trap_assert_*() macros to not abort to program, but instead
call g_test_fail() and continue. (This also changes the behavior of
g_test_fail() so that it will not cause the test program to abort
after completing the failed test.)

Note that the g_assert_not_reached() and g_assert() are not
affected by this.

This function can only be called after g_test_init().
#NAME: sort_changed_iter
#PARENT: GLib.Sequence
#COMMENT: Like g_sequence_sort_changed(), but uses
a #GSequenceIterCompareFunc instead of a #GCompareDataFunc as
the compare function.

@iter_cmp is called with two iterators pointing into @seq. It should
return 0 if the iterators are equal, a negative value if the first
iterator comes before the second, and a positive value if the second
iterator comes before the first.
#NAME: name_used
#PARENT: GLib.file_open_tmp.gint
#COMMENT: location to store actual name used,
    or %NULL
#NAME: invalid_octal_value
#PARENT: GLib.RegexError
#COMMENT: Octal value is greater than "\\377".
    Since 2.16
#NAME: julian_days
#PARENT: GLib.Date
#COMMENT: the Julian representation of the date
#NAME: strv
#PARENT: GLib.Variant.new_objv.Variant
#COMMENT: an array of strings
#NAME: remove_application
#PARENT: GLib.BookmarkFile
#COMMENT: Removes application registered with @name from the list of applications
that have registered a bookmark for @uri inside @bookmark.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
In the event that no application with name @app_name has registered
a bookmark for @uri,  %FALSE is returned and error is set to
#G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED.
#NAME: new_full
#PARENT: GLib.HashTable.new_full
#COMMENT: a new #GHashTable
#NAME: n_bytes
#PARENT: GLib.try_malloc0.gpointer
#COMMENT: number of bytes to allocate
#NAME: test_get_filename
#PARENT: GLib.test_get_filename
#COMMENT: the path, automatically freed at the end of the testcase
#NAME: peek_nth_link
#PARENT: GLib.Queue
#COMMENT: Returns the link at the given position
#NAME: key
#PARENT: GLib.KeyFile.get_locale_string_list.utf8
#COMMENT: a key
#NAME: user_data
#PARENT: GLib.LogFunc.none
#COMMENT: user data, set in g_log_set_handler()
#NAME: hours
#PARENT: GLib.DateTime.add_hours.DateTime
#COMMENT: the number of hours to add
#NAME: string
#PARENT: GLib.Regex.split_full.utf8
#COMMENT: the string to split with the pattern
#NAME: key
#PARENT: GLib.HashTable.remove.gboolean
#COMMENT: the key to remove
#NAME: get_application_name
#PARENT: GLib.get_application_name
#COMMENT: human-readable application name. may return %NULL
#NAME: PI
#PARENT: GLib
#COMMENT: The value of pi (ratio of circle's circumference to its diameter).
#NAME: len
#PARENT: GLib.utf8_to_ucs4_fast.gunichar
#COMMENT: the maximum length of @str to use, in bytes. If @len < 0,
    then the string is nul-terminated.
#NAME: uri_unescape_segment
#PARENT: GLib.uri_unescape_segment
#COMMENT: an unescaped version of @escaped_string or %NULL on error.
The returned string should be freed when no longer needed.  As a
special case if %NULL is given for @escaped_string, this function
will return %NULL.
#NAME: hook_list
#PARENT: GLib.hook_destroy.gboolean
#COMMENT: a #GHookList
#NAME: location
#PARENT: GLib.Once.init_leave.none
#COMMENT: location of a static initializable variable containing 0
#NAME: insert_sorted_with_data
#PARENT: GLib.List.insert_sorted_with_data
#COMMENT: the (possibly changed) start of the #GList
#NAME: down
#PARENT: GLib.String.down
#COMMENT: the #GString
#NAME: get_second
#PARENT: GLib.DateTime.get_second
#COMMENT: the second represented by @datetime
#NAME: get_timezone_abbreviation
#PARENT: GLib.DateTime
#COMMENT: Determines the time zone abbreviation to be used at the time and in
the time zone of @datetime.

For example, in Toronto this is currently "EST" during the winter
months and "EDT" during the summer months when daylight savings
time is in effect.
#NAME: key
#PARENT: GLib.KeyFile.remove_key.gboolean
#COMMENT: a key name to remove
#NAME: ref
#PARENT: GLib.Variant
#COMMENT: Increases the reference count of @value.
#NAME: ref
#PARENT: GLib.IOChannel
#COMMENT: Increments the reference count of a #GIOChannel.
#NAME: cur
#PARENT: GLib.SeekType
#COMMENT: the current position in the file.
#NAME: ascii_tolower
#PARENT: GLib
#COMMENT: Convert a character to ASCII lower case.

Unlike the standard C library tolower() function, this only
recognizes standard ASCII letters and ignores the locale, returning
all non-ASCII characters unchanged, even if they are lower case
letters in a particular character set. Also unlike the standard
library function, this takes and returns a char, not an int, so
don't call it on %EOF but no need to worry about casting to #guchar
before passing a possibly non-ASCII character in.
#NAME: user_data
#PARENT: GLib.unix_signal_add_full.guint
#COMMENT: Data for @handler
#NAME: remove_range
#PARENT: GLib.PtrArray.remove_range
#COMMENT: the @array
#NAME: v
#PARENT: GLib.direct_hash.guint
#COMMENT: a #gpointer key
#NAME: foreach_range
#PARENT: GLib.Sequence
#COMMENT: Calls @func for each item in the range (@begin, @end) passing
@user_data to the function.
#NAME: source_remove
#PARENT: GLib.source_remove
#COMMENT: For historical reasons, this function always returns %TRUE
#NAME: mem
#PARENT: GLib.memdup.gpointer
#COMMENT: the memory to copy.
#NAME: new_from_timeval_local
#PARENT: GLib.DateTime.new_from_timeval_local
#COMMENT: a new #GDateTime, or %NULL
#NAME: datalist
#PARENT: GLib.datalist_set_flags.none
#COMMENT: pointer to the location that holds a list
#NAME: value
#PARENT: GLib.Variant.get_bytestring.guint8
#COMMENT: an array-of-bytes #GVariant instance
#NAME: hostname
#PARENT: GLib.hostname_to_unicode.utf8
#COMMENT: a valid UTF-8 or ASCII hostname
#NAME: cur_token
#PARENT: GLib.Scanner.cur_token
#COMMENT: the current token type
#NAME: string
#PARENT: GLib.String.assign.String
#COMMENT: the destination #GString. Its current contents
         are destroyed.
#NAME: user_data
#PARENT: GLib.MainContext.find_source_by_user_data.Source
#COMMENT: the user_data for the callback.
#NAME: Mutex
#PARENT: GLib
#COMMENT: The #GMutex struct is an opaque data structure to represent a mutex
(mutual exclusion). It can be used to protect data against shared
access.

Take for example the following function:
|[<!-- language="C" -->
  int
  give_me_next_number (void)
  {
    static int current_number = 0;

    // now do a very complicated calculation to calculate the new
    // number, this might for example be a random number generator
    current_number = calc_next_number (current_number);

    return current_number;
  }
]|
It is easy to see that this won't work in a multi-threaded
application. There current_number must be protected against shared
access. A #GMutex can be used as a solution to this problem:
|[<!-- language="C" -->
  int
  give_me_next_number (void)
  {
    static GMutex mutex;
    static int current_number = 0;
    int ret_val;

    g_mutex_lock (&mutex);
    ret_val = current_number = calc_next_number (current_number);
    g_mutex_unlock (&mutex);

    return ret_val;
  }
]|
Notice that the #GMutex is not initialised to any particular value.
Its placement in static storage ensures that it will be initialised
to all-zeros, which is appropriate.

If a #GMutex is placed in other contexts (eg: embedded in a struct)
then it must be explicitly initialised using g_mutex_init().

A #GMutex should only be accessed via g_mutex_ functions.
#NAME: set_seed_array
#PARENT: GLib.Rand
#COMMENT: Initializes the random number generator by an array of longs.
Array can be of arbitrary size, though only the first 624 values
are taken.  This function is useful if you have many low entropy
seeds, or if you require more then 32 bits of actual entropy for
your application.
#NAME: next_token
#PARENT: GLib.Scanner
#COMMENT: token parsed by the last g_scanner_peek_next_token()
#NAME: try_pop_unlocked
#PARENT: GLib.AsyncQueue
#COMMENT: Tries to pop data from the @queue. If no data is available,
%NULL is returned.

This function must be called while holding the @queue's lock.
#NAME: user_data
#PARENT: GLib.ChildWatchFunc.none
#COMMENT: user data passed to g_child_watch_add()
#NAME: inexistent_subpattern_reference
#PARENT: GLib.RegexError
#COMMENT: Reference to non-existent
    subpattern. Since 2.16
#NAME: io_channel_error_from_errno
#PARENT: GLib.io_channel_error_from_errno
#COMMENT: a #GIOChannelError error number, e.g.
     %G_IO_CHANNEL_ERROR_INVAL.
#NAME: range_get_midpoint
#PARENT: GLib.Sequence
#COMMENT: Finds an iterator somewhere in the range (@begin, @end). This
iterator will be close to the middle of the range, but is not
guaranteed to be exactly in the middle.

The @begin and @end iterators must both point to the same sequence
and @begin must come before or be equal to @end in the sequence.
#NAME: tag
#PARENT: GLib.source_remove.gboolean
#COMMENT: the ID of the source to remove.
#NAME: list
#PARENT: GLib.List.find_custom.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: strsplit_set
#PARENT: GLib
#COMMENT: Splits @string into a number of tokens not containing any of the characters
in @delimiter. A token is the (possibly empty) longest string that does not
contain any of the characters in @delimiters. If @max_tokens is reached, the
remainder is appended to the last token.

For example the result of g_strsplit_set ("abc:def/ghi", ":/", -1) is a
%NULL-terminated vector containing the three strings "abc", "def",
and "ghi".

The result of g_strsplit_set (":def/ghi:", ":/", -1) is a %NULL-terminated
vector containing the four strings "", "def", "ghi", and "".

As a special case, the result of splitting the empty string "" is an empty
vector, not a vector containing a single string. The reason for this
special case is that being able to represent a empty vector is typically
more useful than consistent handling of empty elements. If you do need
to represent empty elements, you'll need to check for the empty string
before calling g_strsplit_set().

Note that this function works on bytes not characters, so it can't be used
to delimit UTF-8 strings for anything but ASCII characters.
#NAME: value
#PARENT: GLib.HashTable.replace.gboolean
#COMMENT: the value to associate with the key
#NAME: new_maybe
#PARENT: GLib.VariantType.new_maybe
#COMMENT: a new maybe #GVariantType

Since 2.24
#NAME: hash_table
#PARENT: GLib.HashTableIter.init.none
#COMMENT: a #GHashTable
#NAME: hash_table
#PARENT: GLib.HashTable.foreach.none
#COMMENT: a #GHashTable
#NAME: vprintf
#PARENT: GLib
#COMMENT: An implementation of the standard vprintf() function which supports
positional parameters, as specified in the Single Unix Specification.
#NAME: add_hours
#PARENT: GLib.DateTime.add_hours
#COMMENT: the newly created #GDateTime which should be freed with
  g_date_time_unref().
#NAME: illegal_characters
#PARENT: GLib.uri_unescape_string.utf8
#COMMENT: a string of illegal characters not to be
     allowed, or %NULL.
#NAME: IOFlags
#PARENT: GLib
#COMMENT: Specifies properties of a #GIOChannel. Some of the flags can only be
read with g_io_channel_get_flags(), but not changed with
g_io_channel_set_flags().
#NAME: get_locale_string_list
#PARENT: GLib.KeyFile
#COMMENT: Returns the values associated with @key under @group_name
translated in the given @locale if available.  If @locale is
%NULL then the current locale is assumed.

If @key cannot be found then %NULL is returned and @error is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the values associated
with @key cannot be interpreted or no suitable translations
can be found then the untranslated values are returned. The
returned array is %NULL-terminated, so @length may optionally
be %NULL.
#NAME: hook_list
#PARENT: GLib.HookFinalizeFunc.none
#COMMENT: a #GHookList
#NAME: format
#PARENT: GLib.test_minimized_result.none
#COMMENT: the format string of the report message
#NAME: order
#PARENT: GLib.Node.find.Node
#COMMENT: the order in which nodes are visited - %G_IN_ORDER,
    %G_PRE_ORDER, %G_POST_ORDER, or %G_LEVEL_ORDER
#NAME: find_custom
#PARENT: GLib.SList
#COMMENT: Finds an element in a #GSList, using a supplied function to
find the desired element. It iterates over the list, calling
the given function which should return 0 when the desired
element is found. The function takes two #gconstpointer arguments,
the #GSList element's data as the first argument and the
given user data.
#NAME: new
#PARENT: GLib.Regex.new
#COMMENT: a #GRegex structure. Call g_regex_unref() when you
  are done with it
#NAME: marshal_check
#PARENT: GLib.HookList
#COMMENT: Calls a function on each valid #GHook and destroys it if the
function returns %FALSE.
#NAME: data
#PARENT: GLib.AsyncQueue.push_sorted.none
#COMMENT: the @data to push into the @queue
#NAME: get_year
#PARENT: GLib.Date
#COMMENT: Returns the year of a #GDate. The date must be valid.
#NAME: new
#PARENT: GLib.Date.new
#COMMENT: a newly-allocated #GDate
#NAME: queue
#PARENT: GLib.Queue.pop_tail_link.gpointer
#COMMENT: a #GQueue
#NAME: bytes
#PARENT: GLib.Bytes.get_size.gsize
#COMMENT: a #GBytes
#NAME: priority
#PARENT: GLib.Source.set_priority.none
#COMMENT: the new priority.
#NAME: 
#PARENT: GLib.test_message.none...
#COMMENT: printf-like arguments to @format
#NAME: test_run
#PARENT: GLib.test_run
#COMMENT: 0 on success, 1 on failure (assuming it returns at all),
  0 or 77 if all tests were skipped with g_test_skip()
#NAME: remove_range
#PARENT: GLib.Array.remove_range
#COMMENT: the #GArray
#NAME: value
#PARENT: GLib.Variant.get_child.none
#COMMENT: a container #GVariant
#NAME: base64_decode
#PARENT: GLib.base64_decode
#COMMENT: 
              newly allocated buffer containing the binary data
              that @text represents. The returned buffer must
              be freed with g_free().
#NAME: channel
#PARENT: GLib.IOChannel.read_line_string.IOStatus
#COMMENT: a #GIOChannel
#NAME: nosys
#PARENT: GLib.FileError
#COMMENT: Function not implemented; this indicates that
   the system is missing some functionality.
#NAME: get_has_cr_or_lf
#PARENT: GLib.Regex
#COMMENT: Checks whether the pattern contains explicit CR or LF references.
#NAME: directory_download
#PARENT: GLib.UserDirectory
#COMMENT: the user's Downloads directory
#NAME: state
#PARENT: GLib.base64_decode_step.gsize
#COMMENT: Saved state between steps, initialize to 0
#NAME: kannada
#PARENT: GLib.UnicodeScript
#COMMENT: Kannada
#NAME: get_sunday_week_of_year
#PARENT: GLib.Date.get_sunday_week_of_year
#COMMENT: week number
#NAME: str
#PARENT: GLib.Date.set_parse.none
#COMMENT: string to parse
#NAME: HookFindFunc
#PARENT: GLib.HookFindFunc
#COMMENT: %TRUE if the required #GHook has been found
#NAME: acquire
#PARENT: GLib.MainContext
#COMMENT: Tries to become the owner of the specified context.
If some other thread is the owner of the context,
returns %FALSE immediately. Ownership is properly
recursive: the owner can require ownership again
and will release ownership when g_main_context_release()
is called as many times as g_main_context_acquire().

You must be the owner of a context before you
can call g_main_context_prepare(), g_main_context_query(),
g_main_context_check(), g_main_context_dispatch().
#NAME: max_threads
#PARENT: GLib.ThreadPool.set_max_unused_threads.none
#COMMENT: maximal number of unused threads
#NAME: argcp
#PARENT: GLib.shell_parse_argv.gboolean
#COMMENT: return location for number of args, or %NULL
#NAME: log_remove_handler
#PARENT: GLib
#COMMENT: Removes the log handler.
#NAME: context
#PARENT: GLib.OptionContext.get_help_enabled.gboolean
#COMMENT: a #GOptionContext
#NAME: atomic
#PARENT: GLib.atomic_pointer_or.gsize
#COMMENT: a pointer to a #gpointer-sized value
#NAME: yield
#PARENT: GLib.Thread
#COMMENT: Causes the calling thread to voluntarily relinquish the CPU, so
that other threads can run.

This function is often used as a method to make busy wait less evil.
#NAME: source
#PARENT: GLib.Source.get_priority.gint
#COMMENT: a #GSource
#NAME: unrecognized_character
#PARENT: GLib.RegexError
#COMMENT: Unrecognized character after "(?",
    "(?&lt;" or "(?P". Since 2.16
#NAME: set_app_info
#PARENT: GLib.BookmarkFile.set_app_info
#COMMENT: %TRUE if the application's meta-data was successfully
  changed.
#NAME: delimiters
#PARENT: GLib.strdelimit.utf8
#COMMENT: a string containing the current delimiters,
    or %NULL to use the standard delimiters defined in #G_STR_DELIMITERS
#NAME: dataset_id_set_data_full
#PARENT: GLib
#COMMENT: Sets the data element associated with the given #GQuark id, and also
the function to call when the data element is destroyed. Any
previous data with the same key is removed, and its destroy function
is called.
#NAME: set_scope
#PARENT: GLib.Scanner
#COMMENT: Sets the current scope.
#NAME: pop_head_link
#PARENT: GLib.Queue
#COMMENT: Removes and returns the first element of the queue.
#NAME: filename_display_basename
#PARENT: GLib.filename_display_basename
#COMMENT: a newly allocated string containing
  a rendition of the basename of the filename in valid UTF-8
#NAME: value
#PARENT: GLib.Tree.lookup_extended.gboolean
#COMMENT: returns the value associated with the key
#NAME: new_take
#PARENT: GLib.ByteArray
#COMMENT: Create byte array containing the data. The data will be owned by the array
and will be freed with g_free(), i.e. it could be allocated using g_strdup().
#NAME: array
#PARENT: GLib.ByteArray.remove_range.guint8
#COMMENT: a @GByteArray
#NAME: bassa_vah
#PARENT: GLib.UnicodeScript
#COMMENT: Bassa. Since: 2.42
#NAME: new_take
#PARENT: GLib.ByteArray.new_take
#COMMENT: a new #GByteArray
#NAME: builder
#PARENT: GLib.VariantBuilder.add_parsed.none
#COMMENT: a #GVariantBuilder
#NAME: equal
#PARENT: GLib.VariantType
#COMMENT: Compares @type1 and @type2 for equality.

Only returns %TRUE if the types are exactly equal.  Even if one type
is an indefinite type and the other is a subtype of it, %FALSE will
be returned if they are not exactly equal.  If you want to check for
subtypes, use g_variant_type_is_subtype_of().

The argument types of @type1 and @type2 are only #gconstpointer to
allow use with #GHashTable without function pointer casting.  For
both arguments, a valid #GVariantType must be provided.
#NAME: entries
#PARENT: GLib.OptionContext.add_main_entries.none
#COMMENT: a %NULL-terminated array of #GOptionEntrys
#NAME: new
#PARENT: GLib.OptionContext
#COMMENT: Creates a new option context.

The @parameter_string can serve multiple purposes. It can be used
to add descriptions for "rest" arguments, which are not parsed by
the #GOptionContext, typically something like "FILES" or
"FILE1 FILE2...". If you are using #G_OPTION_REMAINING for
collecting "rest" arguments, GLib handles this automatically by
using the @arg_description of the corresponding #GOptionEntry in
the usage summary.

Another usage is to give a short summary of the program
functionality, like " - frob the strings", which will be displayed
in the same line as the usage. For a longer description of the
program functionality that should be displayed as a paragraph
below the usage line, use g_option_context_set_summary().

Note that the @parameter_string is translated using the
function set with g_option_context_set_translate_func(), so
it should normally be passed untranslated.
#NAME: int
#PARENT: GLib.TokenType
#COMMENT: an integer
#NAME: string
#PARENT: GLib.regex_match_simple.gboolean
#COMMENT: the string to scan for matches
#NAME: strjoin
#PARENT: GLib
#COMMENT: Joins a number of strings together to form one long string, with the
optional @separator inserted between each of them. The returned string
should be freed with g_free().
#NAME: value
#PARENT: GLib.Variant.new_uint64.Variant
#COMMENT: a #guint64 value
#NAME: VariantClass
#PARENT: GLib
#COMMENT: The range of possible top-level types of #GVariant instances.
#NAME: scanner
#PARENT: GLib.Scanner.unexp_token.none
#COMMENT: a #GScanner
#NAME: shell_parse_argv
#PARENT: GLib.shell_parse_argv
#COMMENT: %TRUE on success, %FALSE if error set
#NAME: pool
#PARENT: GLib.ThreadPool.set_sort_function.none
#COMMENT: a #GThreadPool
#NAME: nullify_pointer
#PARENT: GLib
#COMMENT: Set the pointer at the specified location to %NULL.
#NAME: user_data
#PARENT: GLib.TestLogFatalFunc.gboolean
#COMMENT: user data, set in g_test_log_set_fatal_handler()
#NAME: envp
#PARENT: GLib.environ_getenv.utf8
#COMMENT: an environment
    list (eg, as returned from g_get_environ()), or %NULL
    for an empty environment list
#NAME: perm
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `EPERM`
#NAME: remove
#PARENT: GLib.Tree.remove
#COMMENT: %TRUE if the key was found (prior to 2.8, this function
    returned nothing)
#NAME: unix_signal_add
#PARENT: GLib.unix_signal_add
#COMMENT: An ID (greater than 0) for the event source
#NAME: push_thread_default
#PARENT: GLib.MainContext
#COMMENT: Acquires @context and sets it as the thread-default context for the
current thread. This will cause certain asynchronous operations
(such as most [gio][gio]-based I/O) which are
started in this thread to run under @context and deliver their
results to its main loop, rather than running under the global
default context in the main thread. Note that calling this function
changes the context returned by g_main_context_get_thread_default(),
not the one returned by g_main_context_default(), so it does not affect
the context used by functions like g_idle_add().

Normally you would call this function shortly after creating a new
thread, passing it a #GMainContext which will be run by a
#GMainLoop in that thread, to set a new default context for all
async operations in that thread. (In this case, you don't need to
ever call g_main_context_pop_thread_default().) In some cases
however, you may want to schedule a single operation in a
non-default context, or temporarily use a non-default context in
the main thread. In that case, you can wrap the call to the
asynchronous operation inside a
g_main_context_push_thread_default() /
g_main_context_pop_thread_default() pair, but it is up to you to
ensure that no other asynchronous operations accidentally get
started while the non-default context is active.

Beware that libraries that predate this function may not correctly
handle being used from a thread with a thread-default context. Eg,
see g_file_supports_thread_contexts().
#NAME: context
#PARENT: GLib.OptionContext.free.none
#COMMENT: a #GOptionContext
#NAME: end_time
#PARENT: GLib.AsyncQueue.timed_pop.gpointer
#COMMENT: a #GTimeVal, determining the final time
#NAME: KEY_FILE_DESKTOP_KEY_VERSION
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the version of the Desktop Entry Specification used for
the desktop entry file.
#NAME: length
#PARENT: GLib.KeyFile.get_groups.utf8
#COMMENT: return location for the number of returned groups, or %NULL
#NAME: range_end
#PARENT: GLib.test_rand_double_range.gdouble
#COMMENT: the minimum value not returned by this function
#NAME: free
#PARENT: GLib.TestLogBuffer
#COMMENT: Internal function for gtester to free test log messages, no ABI guarantees provided.
#NAME: prev
#PARENT: GLib.List
#COMMENT: contains the link to the previous element in the list
#NAME: strip_context
#PARENT: GLib.strip_context
#COMMENT: @msgval, unless @msgval is identical to @msgid
    and contains a '|' character, in which case a pointer to
    the substring of msgid after the first '|' character is returned.
#NAME: strv
#PARENT: GLib.Variant.new_strv.Variant
#COMMENT: an array of strings
#NAME: max_parse_errors
#PARENT: GLib.Scanner
#COMMENT: unused
#NAME: TranslateFunc
#PARENT: GLib.TranslateFunc
#COMMENT: a translation of the string for the current locale.
 The returned string is owned by GLib and must not be freed.
#NAME: UnicodeScript
#PARENT: GLib
#COMMENT: The #GUnicodeScript enumeration identifies different writing
systems. The values correspond to the names as defined in the
Unicode standard. The enumeration has been added in GLib 2.14,
and is interchangeable with #PangoScript.

Note that new types may be added in the future. Applications
should be ready to handle unknown values.
See <ulink
url="http://www.unicode.org/reports/tr24/">Unicode Standard Annex
#24: Script names</ulink>.
#NAME: utf8_to_ucs4_fast
#PARENT: GLib.utf8_to_ucs4_fast
#COMMENT: a pointer to a newly allocated UCS-4 string.
    This value must be freed with g_free().
#NAME: priority
#PARENT: GLib.timeout_add_seconds_full.guint
#COMMENT: the priority of the timeout source. Typically this will be in
           the range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH.
#NAME: len
#PARENT: GLib.convert.utf8
#COMMENT: the length of the string in bytes, or -1 if the string is
                nul-terminated (Note that some encodings may allow nul
                bytes to occur inside strings. In that case, using -1
                for the @len parameter is unsafe)
#NAME: filename
#PARENT: GLib.file_test.gboolean
#COMMENT: a filename to test in the GLib file name encoding
#NAME: is_of_type
#PARENT: GLib.Variant.is_of_type
#COMMENT: %TRUE if the type of @value matches @type
#NAME: Variant
#PARENT: GLib
#COMMENT: #GVariant is a variant datatype; it stores a value along with
information about the type of that value.  The range of possible
values is determined by the type.  The type system used by #GVariant
is #GVariantType.

#GVariant instances always have a type and a value (which are given
at construction time).  The type and value of a #GVariant instance
can never change other than by the #GVariant itself being
destroyed.  A #GVariant cannot contain a pointer.

#GVariant is reference counted using g_variant_ref() and
g_variant_unref().  #GVariant also has floating reference counts --
see g_variant_ref_sink().

#GVariant is completely threadsafe.  A #GVariant instance can be
concurrently accessed in any way from any number of threads without
problems.

#GVariant is heavily optimised for dealing with data in serialised
form.  It works particularly well with data located in memory-mapped
files.  It can perform nearly all deserialisation operations in a
small constant time, usually touching only a single memory page.
Serialised #GVariant data can also be sent over the network.

#GVariant is largely compatible with D-Bus.  Almost all types of
#GVariant instances can be sent over D-Bus.  See #GVariantType for
exceptions.  (However, #GVariant's serialisation format is not the same
as the serialisation format of a D-Bus message body: use #GDBusMessage,
in the gio library, for those.)

For space-efficiency, the #GVariant serialisation format does not
automatically include the variant's length, type or endianness,
which must either be implied from context (such as knowledge that a
particular file format always contains a little-endian
%G_VARIANT_TYPE_VARIANT which occupies the whole length of the file)
or supplied out-of-band (for instance, a length, type and/or endianness
indicator could be placed at the beginning of a file, network message
or network stream).

A #GVariant's size is limited mainly by any lower level operating
system constraints, such as the number of bits in #gsize.  For
example, it is reasonable to have a 2GB file mapped into memory
with #GMappedFile, and call g_variant_new_from_data() on it.

For convenience to C programmers, #GVariant features powerful
varargs-based value construction and destruction.  This feature is
designed to be embedded in other libraries.

There is a Python-inspired text language for describing #GVariant
values.  #GVariant includes a printer for this language and a parser
with type inferencing.

## Memory Use

#GVariant tries to be quite efficient with respect to memory use.
This section gives a rough idea of how much memory is used by the
current implementation.  The information here is subject to change
in the future.

The memory allocated by #GVariant can be grouped into 4 broad
purposes: memory for serialised data, memory for the type
information cache, buffer management memory and memory for the
#GVariant structure itself.

## Serialised Data Memory

This is the memory that is used for storing GVariant data in
serialised form.  This is what would be sent over the network or
what would end up on disk, not counting any indicator of the
endianness, or of the length or type of the top-level variant.

The amount of memory required to store a boolean is 1 byte. 16,
32 and 64 bit integers and double precision floating point numbers
use their "natural" size.  Strings (including object path and
signature strings) are stored with a nul terminator, and as such
use the length of the string plus 1 byte.

Maybe types use no space at all to represent the null value and
use the same amount of space (sometimes plus one byte) as the
equivalent non-maybe-typed value to represent the non-null case.

Arrays use the amount of space required to store each of their
members, concatenated.  Additionally, if the items stored in an
array are not of a fixed-size (ie: strings, other arrays, etc)
then an additional framing offset is stored for each item.  The
size of this offset is either 1, 2 or 4 bytes depending on the
overall size of the container.  Additionally, extra padding bytes
are added as required for alignment of child values.

Tuples (including dictionary entries) use the amount of space
required to store each of their members, concatenated, plus one
framing offset (as per arrays) for each non-fixed-sized item in
the tuple, except for the last one.  Additionally, extra padding
bytes are added as required for alignment of child values.

Variants use the same amount of space as the item inside of the
variant, plus 1 byte, plus the length of the type string for the
item inside the variant.

As an example, consider a dictionary mapping strings to variants.
In the case that the dictionary is empty, 0 bytes are required for
the serialisation.

If we add an item "width" that maps to the int32 value of 500 then
we will use 4 byte to store the int32 (so 6 for the variant
containing it) and 6 bytes for the string.  The variant must be
aligned to 8 after the 6 bytes of the string, so that's 2 extra
bytes.  6 (string) + 2 (padding) + 6 (variant) is 14 bytes used
for the dictionary entry.  An additional 1 byte is added to the
array as a framing offset making a total of 15 bytes.

If we add another entry, "title" that maps to a nullable string
that happens to have a value of null, then we use 0 bytes for the
null value (and 3 bytes for the variant to contain it along with
its type string) plus 6 bytes for the string.  Again, we need 2
padding bytes.  That makes a total of 6 + 2 + 3 = 11 bytes.

We now require extra padding between the two items in the array.
After the 14 bytes of the first item, that's 2 bytes required.
We now require 2 framing offsets for an extra two
bytes. 14 + 2 + 11 + 2 = 29 bytes to encode the entire two-item
dictionary.

## Type Information Cache

For each GVariant type that currently exists in the program a type
information structure is kept in the type information cache.  The
type information structure is required for rapid deserialisation.

Continuing with the above example, if a #GVariant exists with the
type "a{sv}" then a type information struct will exist for
"a{sv}", "{sv}", "s", and "v".  Multiple uses of the same type
will share the same type information.  Additionally, all
single-digit types are stored in read-only static memory and do
not contribute to the writable memory footprint of a program using
#GVariant.

Aside from the type information structures stored in read-only
memory, there are two forms of type information.  One is used for
container types where there is a single element type: arrays and
maybe types.  The other is used for container types where there
are multiple element types: tuples and dictionary entries.

Array type info structures are 6 * sizeof (void *), plus the
memory required to store the type string itself.  This means that
on 32-bit systems, the cache entry for "a{sv}" would require 30
bytes of memory (plus malloc overhead).

Tuple type info structures are 6 * sizeof (void *), plus 4 *
sizeof (void *) for each item in the tuple, plus the memory
required to store the type string itself.  A 2-item tuple, for
example, would have a type information structure that consumed
writable memory in the size of 14 * sizeof (void *) (plus type
string)  This means that on 32-bit systems, the cache entry for
"{sv}" would require 61 bytes of memory (plus malloc overhead).

This means that in total, for our "a{sv}" example, 91 bytes of
type information would be allocated.

The type information cache, additionally, uses a #GHashTable to
store and lookup the cached items and stores a pointer to this
hash table in static storage.  The hash table is freed when there
are zero items in the type cache.

Although these sizes may seem large it is important to remember
that a program will probably only have a very small number of
different types of values in it and that only one type information
structure is required for many different values of the same type.

## Buffer Management Memory

#GVariant uses an internal buffer management structure to deal
with the various different possible sources of serialised data
that it uses.  The buffer is responsible for ensuring that the
correct call is made when the data is no longer in use by
#GVariant.  This may involve a g_free() or a g_slice_free() or
even g_mapped_file_unref().

One buffer management structure is used for each chunk of
serialised data.  The size of the buffer management structure
is 4 * (void *).  On 32-bit systems, that's 16 bytes.

## GVariant structure

The size of a #GVariant structure is 6 * (void *).  On 32-bit
systems, that's 24 bytes.

#GVariant structures only exist if they are explicitly created
with API calls.  For example, if a #GVariant is constructed out of
serialised data for the example given above (with the dictionary)
then although there are 9 individual values that comprise the
entire dictionary (two keys, two values, two variants containing
the values, two dictionary entries, plus the dictionary itself),
only 1 #GVariant instance exists -- the one referring to the
dictionary.

If calls are made to start accessing the other values then
#GVariant instances will exist for those values only for as long
as they are in use (ie: until you call g_variant_unref()).  The
type information is shared.  The serialised data and the buffer
management structure for that serialised data is shared by the
child.

## Summary

To put the entire example together, for our dictionary mapping
strings to variants (with two entries, as given above), we are
using 91 bytes of memory for type information, 29 byes of memory
for the serialised data, 16 bytes for buffer management and 24
bytes for the #GVariant instance, or a total of 160 bytes, plus
malloc overhead.  If we were to use g_variant_get_child_value() to
access the two dictionary entries, we would use an additional 48
bytes.  If we were to have other dictionaries of the same type, we
would use more memory for the serialised data and buffer
management for those dictionaries, but the type information would
be shared.
#NAME: y
#PARENT: GLib.Date.set_dmy.none
#COMMENT: year
#NAME: get_hash_table
#PARENT: GLib.HashTableIter
#COMMENT: Returns the #GHashTable associated with @iter.
#NAME: sort_with_data
#PARENT: GLib.PtrArray
#COMMENT: Like g_ptr_array_sort(), but the comparison function has an extra
user data argument.

Note that the comparison function for g_ptr_array_sort_with_data()
doesn't take the pointers from the array as arguments, it takes
pointers to the pointers in the array.

This is guaranteed to be a stable sort since version 2.32.
#NAME: bytes
#PARENT: GLib.Bytes.unref.none
#COMMENT: a #GBytes
#NAME: uri
#PARENT: GLib.BookmarkFile.has_application.gboolean
#COMMENT: a valid URI
#NAME: variant
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a variant.
#NAME: is_setup
#PARENT: GLib.HookList
#COMMENT: 1 if the #GHookList has been initialized
#NAME: atomic_int_or
#PARENT: GLib
#COMMENT: Performs an atomic bitwise 'or' of the value of @atomic and @val,
storing the result back in @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic |= val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.
#NAME: default
#PARENT: GLib.MainContext.default
#COMMENT: the global default main context.
#NAME: sort_with_data
#PARENT: GLib.ByteArray
#COMMENT: Like g_byte_array_sort(), but the comparison function takes an extra
user data argument.
#NAME: seed
#PARENT: GLib.Rand.new_with_seed_array.Rand
#COMMENT: an array of seeds to initialize the random number generator
#NAME: close_paranthesis
#PARENT: GLib.UnicodeBreakType
#COMMENT: Closing Parenthesis (CP). Since 2.28
#NAME: add_group
#PARENT: GLib.OptionContext
#COMMENT: Adds a #GOptionGroup to the @context, so that parsing with @context
will recognize the options in the group. Note that this will take
ownership of the @group and thus the @group should not be freed.
#NAME: move_range
#PARENT: GLib.Sequence
#COMMENT: Inserts the (@begin, @end) range at the destination pointed to by ptr.
The @begin and @end iters must point into the same sequence. It is
allowed for @dest to point to a different sequence than the one pointed
into by @begin and @end.

If @dest is NULL, the range indicated by @begin and @end is
removed from the sequence. If @dest iter points to a place within
the (@begin, @end) range, the range does not move.
#NAME: group
#PARENT: GLib.BookmarkFile.remove_group.gboolean
#COMMENT: the group name to be removed
#NAME: clear
#PARENT: GLib.HookList
#COMMENT: Removes all the #GHook elements from a #GHookList.
#NAME: warang_citi
#PARENT: GLib.UnicodeScript
#COMMENT: Warang Citi. Since: 2.42
#NAME: digest_type
#PARENT: GLib.compute_hmac_for_data.utf8
#COMMENT: a #GChecksumType to use for the HMAC
#NAME: get_added
#PARENT: GLib.BookmarkFile
#COMMENT: Gets the time the bookmark for @uri was added to @bookmark

In the event the URI cannot be found, -1 is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
#NAME: new_static
#PARENT: GLib.Bytes
#COMMENT: Creates a new #GBytes from static data.

@data must be static (ie: never modified or freed). It may be %NULL if @size
is 0.
#NAME: v1
#PARENT: GLib.int_equal.gboolean
#COMMENT: a pointer to a #gint key
#NAME: v2
#PARENT: GLib.int_equal.gboolean
#COMMENT: a pointer to a #gint key to compare with @v1
#NAME: application_name
#PARENT: GLib.set_application_name.none
#COMMENT: localized name of the application
#NAME: endptr
#PARENT: GLib.variant_parse.Variant
#COMMENT: a location to store the end pointer, or %NULL
#NAME: dict
#PARENT: GLib.VariantDict.lookup.gboolean
#COMMENT: a #GVariantDict
#NAME: func
#PARENT: GLib.Scanner.scope_foreach_symbol.none
#COMMENT: the function to call for each symbol/value pair
#NAME: marshal_data
#PARENT: GLib.HookList.marshal_check.none
#COMMENT: data to pass to @marshaller
#NAME: HookFlagMask
#PARENT: GLib
#COMMENT: Flags used internally in the #GHook implementation.
#NAME: daylight
#PARENT: GLib.TimeType
#COMMENT: the time is in local daylight time
#NAME: newline_lf
#PARENT: GLib.RegexCompileFlags
#COMMENT: Usually any newline character or character sequence is
    recognized. If this option is set, the only recognized newline character
    is '\n'.
#NAME: new_from_unix_utc
#PARENT: GLib.DateTime.new_from_unix_utc
#COMMENT: a new #GDateTime, or %NULL
#NAME: accept_alternates
#PARENT: GLib.str_match_string.gboolean
#COMMENT: %TRUE to accept ASCII alternates
#NAME: notify
#PARENT: GLib.timeout_add_seconds_full.guint
#COMMENT: function to call when the timeout is removed, or %NULL
#NAME: context
#PARENT: GLib.MainContext.get_poll_func.PollFunc
#COMMENT: a #GMainContext
#NAME: c
#PARENT: GLib.String.prepend_c.String
#COMMENT: the byte to prepend on the start of the #GString
#NAME: max_threads
#PARENT: GLib.ThreadPool.new.ThreadPool
#COMMENT: the maximal number of threads to execute concurrently
    in  the new thread pool, -1 means no limit
#NAME: pos
#PARENT: GLib.Sequence.get_iter_at_pos.SequenceIter
#COMMENT: a position in @seq, or -1 for the end
#NAME: required_minor
#PARENT: GLib.check_version.utf8
#COMMENT: the required minor version
#NAME: replace
#PARENT: GLib.HashTableIter
#COMMENT: Replaces the value currently pointed to by the iterator
from its associated #GHashTable. Can only be called after
g_hash_table_iter_next() returned %TRUE.

If you supplied a @value_destroy_func when creating the
#GHashTable, the old value is freed using that function.
#NAME: date_time_equal
#PARENT: GLib
#COMMENT: Checks to see if @dt1 and @dt2 are equal.

Equal here means that they represent the same moment after converting
them to the same time zone.
#NAME: key
#PARENT: GLib.KeyFile.set_integer.none
#COMMENT: a key
#NAME: FileError
#PARENT: GLib
#COMMENT: Values corresponding to @errno codes returned from file operations
on UNIX. Unlike @errno codes, GFileError values are available on
all systems, even Windows. The exact meaning of each code depends
on what sort of file operation you were performing; the UNIX
documentation gives more details. The following error code descriptions
come from the GNU C Library manual, and are under the copyright
of that manual.

It's not very portable to make detailed assumptions about exactly
which errors will be returned from a given operation. Some errors
don't occur on some systems, etc., sometimes there are subtle
differences in when a system will report a given error, etc.
#NAME: backtracking_control_verb_argument_forbidden
#PARENT: GLib.RegexError
#COMMENT: the backtracing
    control verb used does not allow an argument. Since: 2.34
#NAME: find
#PARENT: GLib.Node
#COMMENT: Finds a #GNode in a tree.
#NAME: append_uri_escaped
#PARENT: GLib.String
#COMMENT: Appends @unescaped to @string, escaped any characters that
are reserved in URIs using URI-style escape sequences.
#NAME: replacement
#PARENT: GLib.Regex.replace.utf8
#COMMENT: text to replace each match with
#NAME: entries
#PARENT: GLib.OptionGroup.add_entries.none
#COMMENT: a %NULL-terminated array of #GOptionEntrys
#NAME: dngettext
#PARENT: GLib
#COMMENT: This function is a wrapper of dngettext() which does not translate
the message if the default domain as set with textdomain() has no
translations for the current locale.

See g_dgettext() for details of how this differs from dngettext()
proper.
#NAME: size
#PARENT: GLib.IOChannel.set_buffer_size.none
#COMMENT: the size of the buffer, or 0 to let GLib pick a good size
#NAME: dict
#PARENT: GLib.VariantDict.remove.gboolean
#COMMENT: a #GVariantDict
#NAME: dup_bytestring_array
#PARENT: GLib.Variant.dup_bytestring_array
#COMMENT: an array of strings
#NAME: user_data
#PARENT: GLib.ByteArray.sort_with_data.none
#COMMENT: data to pass to @compare_func
#NAME: potential_hit
#PARENT: GLib.str_match_string.gboolean
#COMMENT: the text that may be a hit
#NAME: function
#PARENT: GLib.timeout_add_seconds_full.guint
#COMMENT: function to call
#NAME: strcompress
#PARENT: GLib
#COMMENT: Replaces all escaped characters with their one byte equivalent.

This function does the reverse conversion of g_strescape().
#NAME: next
#PARENT: GLib.VariantType.next
#COMMENT: the next #GVariantType after @type, or %NULL

Since 2.24
#NAME: interval
#PARENT: GLib.timeout_add_full.guint
#COMMENT: the time between calls to the function, in milliseconds
            (1/1000ths of a second)
#NAME: dest
#PARENT: GLib.sequence_move_range.none
#COMMENT: a #GSequenceIter
#NAME: insert_sorted
#PARENT: GLib.Queue
#COMMENT: Inserts @data into @queue using @func to determine the new position.
#NAME: month
#PARENT: GLib.DateTime.get_ymd.none
#COMMENT: the return location for the month of the year, or %NULL.
#NAME: new
#PARENT: GLib.MainContext.new
#COMMENT: the new #GMainContext
#NAME: channel
#PARENT: GLib.IOChannel.get_buffer_size.gsize
#COMMENT: a #GIOChannel
#NAME: date_time_compare
#PARENT: GLib.date_time_compare
#COMMENT: -1, 0 or 1 if @dt1 is less than, equal to or greater
  than @dt2.
#NAME: flags
#PARENT: GLib.datalist_set_flags.none
#COMMENT: the flags to turn on. The values of the flags are
  restricted by %G_DATALIST_FLAGS_MASK (currently
  3; giving two possible boolean flags).
  A value for @flags that doesn't fit within the mask is
  an error.
#NAME: lookup
#PARENT: GLib.HashTable.lookup
#COMMENT: the associated value, or %NULL if the key is not found
#NAME: str
#PARENT: GLib.utf8_strup.utf8
#COMMENT: a UTF-8 encoded string
#NAME: IOFuncs
#PARENT: GLib
#COMMENT: A table of functions used to handle different types of #GIOChannel
in a generic way.
#NAME: lookup_value
#PARENT: GLib.Variant
#COMMENT: Looks up a value in a dictionary #GVariant.

This function works with dictionaries of the type a{s*} (and equally
well with type a{o*}, but we only further discuss the string case
for sake of clarity).

In the event that @dictionary has the type a{sv}, the @expected_type
string specifies what type of value is expected to be inside of the
variant. If the value inside the variant has a different type then
%NULL is returned. In the event that @dictionary has a value type other
than v then @expected_type must directly match the key type and it is
used to unpack the value directly or an error occurs.

In either case, if @key is not found in @dictionary, %NULL is returned.

If the key is found and the value has the correct type, it is
returned.  If @expected_type was specified then any non-%NULL return
value will have this type.

This function is currently implemented with a linear scan.  If you
plan to do many lookups then #GVariantDict may be more efficient.
#NAME: qdata
#PARENT: GLib.Scanner
#COMMENT: quarked data
#NAME: tag
#PARENT: GLib.Source.modify_unix_fd.none
#COMMENT: the tag from g_source_add_unix_fd()
#NAME: value
#PARENT: GLib.Variant.is_container.gboolean
#COMMENT: a #GVariant instance
#NAME: set_application_name
#PARENT: GLib
#COMMENT: Sets a human-readable name for the application. This name should be
localized if possible, and is intended for display to the user.
Contrast with g_set_prgname(), which sets a non-localized name.
g_set_prgname() will be called automatically by gtk_init(),
but g_set_application_name() will not.

Note that for thread safety reasons, this function can only
be called once.

The application name will be used in contexts such as error messages,
or when displaying an application's name in the task list.
#NAME: date_get_monday_weeks_in_year
#PARENT: GLib
#COMMENT: Returns the number of weeks in the year, where weeks
are taken to start on Monday. Will be 52 or 53. The
date must be valid. (Years always have 52 7-day periods,
plus 1 or 2 extra days depending on whether it's a leap
year. This function is basically telling you how many
Mondays are in the year, i.e. there are 53 Mondays if
one of the extra days happens to be a Monday.)
#NAME: init_enter
#PARENT: GLib.Once
#COMMENT: Function to be called when starting a critical initialization
section. The argument @location must point to a static
0-initialized variable that will be set to a value other than 0 at
the end of the initialization section. In combination with
g_once_init_leave() and the unique address @value_location, it can
be ensured that an initialization section will be executed only once
during a program's life time, and that concurrent threads are
blocked until initialization completed. To be used in constructs
like this:

|[<!-- language="C" -->
  static gsize initialization_value = 0;

  if (g_once_init_enter (&initialization_value))
    {
      gsize setup_value = 42; // initialization code here

      g_once_init_leave (&initialization_value, setup_value);
    }

  // use initialization_value here
]|
#NAME: 
#PARENT: GLib.VariantDict.lookup.gboolean...
#COMMENT: the arguments to unpack the value into
#NAME: hook_id
#PARENT: GLib.Hook
#COMMENT: the id of this hook, which is unique within its list
#NAME: get_locale_variants
#PARENT: GLib
#COMMENT: Returns a list of derived variants of @locale, which can be used to
e.g. construct locale-dependent filenames or search paths. The returned
list is sorted from most desirable to least desirable.
This function handles territory, charset and extra locale modifiers.

For example, if @locale is "fr_BE", then the returned list
is "fr_BE", "fr".

If you need the list of variants for the current locale,
use g_get_language_names().
#NAME: get_type_string
#PARENT: GLib.Variant.get_type_string
#COMMENT: the type string for the type of @value
#NAME: str
#PARENT: GLib.utf8_collate_key.utf8
#COMMENT: a UTF-8 encoded string.
#NAME: type_get_length
#PARENT: GLib.Checksum
#COMMENT: Gets the length in bytes of digests of type @checksum_type
#NAME: is_object_path
#PARENT: GLib.Variant
#COMMENT: Determines if a given string is a valid D-Bus object path.  You
should ensure that a string is a valid D-Bus object path before
passing it to g_variant_new_object_path().

A valid object path starts with '/' followed by zero or more
sequences of characters separated by '/' characters.  Each sequence
must contain only the characters "[A-Z][a-z][0-9]_".  No sequence
(including the one following the final '/' character) may be empty.
#NAME: invalid_escape_in_character_class
#PARENT: GLib.RegexError
#COMMENT: Invalid escape sequence
    in character class. Since 2.16
#NAME: get_real_name
#PARENT: GLib.get_real_name
#COMMENT: the user's real name.
#NAME: n_fds
#PARENT: GLib.MainContext.check.gint
#COMMENT: return value of g_main_context_query()
#NAME: test_build_filename
#PARENT: GLib
#COMMENT: Creates the pathname to a data file that is required for a test.

This function is conceptually similar to g_build_filename() except
that the first argument has been replaced with a #GTestFileType
argument.

The data file should either have been distributed with the module
containing the test (%G_TEST_DIST) or built as part of the build
system of that module (%G_TEST_BUILT).

In order for this function to work in srcdir != builddir situations,
the G_TEST_SRCDIR and G_TEST_BUILDDIR environment variables need to
have been defined.  As of 2.38, this is done by the glib.mk
included in GLib.  Please ensure that your copy is up to date before
using this function.

In case neither variable is set, this function will fall back to
using the dirname portion of argv[0], possibly removing ".libs".
This allows for casual running of tests directly from the commandline
in the srcdir == builddir case and should also support running of
installed tests, assuming the data files have been installed in the
same relative path as the test binary.
#NAME: invalid_condition
#PARENT: GLib.RegexError
#COMMENT: Invalid condition "(?(0)". Since 2.16
#NAME: date
#PARENT: GLib.Date.clamp.none
#COMMENT: a #GDate to clamp
#NAME: next_position
#PARENT: GLib.Scanner
#COMMENT: char number of the last token from g_scanner_peek_next_token()
#NAME: match_options
#PARENT: GLib.Regex.replace_literal.utf8
#COMMENT: options for the match
#NAME: list
#PARENT: GLib.SList.reverse.gpointer
#COMMENT: a #GSList
#NAME: free_to_bytes
#PARENT: GLib.String.free_to_bytes
#COMMENT: A newly allocated #GBytes containing contents of @string; @string itself is freed
#NAME: queue
#PARENT: GLib.Queue.remove_all.guint
#COMMENT: a #GQueue
#NAME: nnodes
#PARENT: GLib.Tree
#COMMENT: Gets the number of nodes in a #GTree.
#NAME: lock_bit
#PARENT: GLib.pointer_bit_trylock.gboolean
#COMMENT: a bit value between 0 and 31
#NAME: flags
#PARENT: GLib.KeyFile.load_from_data.gboolean
#COMMENT: flags from #GKeyFileFlags
#NAME: tifinagh
#PARENT: GLib.UnicodeScript
#COMMENT: Tifinagh
#NAME: get_double_list
#PARENT: GLib.KeyFile.get_double_list
#COMMENT: 
    the values associated with the key as a list of doubles, or %NULL if the
    key was not found or could not be parsed. The returned list of doubles
    should be freed with g_free() when no longer needed.
#NAME: new_int16
#PARENT: GLib.Variant.new_int16
#COMMENT: a floating reference to a new int16 #GVariant instance
#NAME: 
#PARENT: GLib.markup_collect_attributes.gboolean...
#COMMENT: a pointer to the storage location of the first attribute
    (or %NULL), followed by more types names and pointers, ending
    with %G_MARKUP_COLLECT_INVALID
#NAME: format_string
#PARENT: GLib.VariantIter.next.gboolean
#COMMENT: a GVariant format string
#NAME: append
#PARENT: GLib.ByteArray.append
#COMMENT: the #GByteArray
#NAME: backtracking_control_verb_argument_required
#PARENT: GLib.RegexError
#COMMENT: the backtracing control
    verb requires an argument. Since: 2.34
#NAME: unichar_istitle
#PARENT: GLib
#COMMENT: Determines if a character is titlecase. Some characters in
Unicode which are composites, such as the DZ digraph
have three case variants instead of just two. The titlecase
form is used at the beginning of a word where only the
first letter is capitalized. The titlecase form of the DZ
digraph is U+01F2 LATIN CAPITAL LETTTER D WITH SMALL LETTER Z.
#NAME: line_term
#PARENT: GLib.IOChannel.set_line_term.none
#COMMENT: The line termination string. Use %NULL for
            autodetect.  Autodetection breaks on "\n", "\r\n", "\r", "\0",
            and the Unicode paragraph separator. Autodetection should not be
            used for anything other than file-based channels.
#NAME: hash_table_remove
#PARENT: GLib
#COMMENT: Removes a key and its associated value from a #GHashTable.

If the #GHashTable was created using g_hash_table_new_full(), the
key and value are freed using the supplied destroy functions, otherwise
you have to make sure that any dynamically allocated values are freed
yourself.
#NAME: KEY_FILE_DESKTOP_KEY_NO_DISPLAY
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the desktop entry should be shown in menus.
#NAME: v2
#PARENT: GLib.String.equal.gboolean
#COMMENT: another #GString
#NAME: unref
#PARENT: GLib.Bytes
#COMMENT: Releases a reference on @bytes.  This may result in the bytes being
freed.
#NAME: string
#PARENT: GLib.Regex.match_simple.gboolean
#COMMENT: the string to scan for matches
#NAME: ref
#PARENT: GLib.Tree
#COMMENT: Increments the reference count of @tree by one.

It is safe to call this function from any thread.
#NAME: E
#PARENT: GLib
#COMMENT: The base of natural logarithms.
#NAME: is_container
#PARENT: GLib.Variant.is_container
#COMMENT: %TRUE if @value is a container
#NAME: get_uris
#PARENT: GLib.BookmarkFile
#COMMENT: Returns all URIs of the bookmarks in the bookmark file @bookmark.
The array of returned URIs will be %NULL-terminated, so @length may
optionally be %NULL.
#NAME: find
#PARENT: GLib.Hook.find
#COMMENT: the found #GHook or %NULL if no matching #GHook is found
#NAME: max_height
#PARENT: GLib.Node
#COMMENT: Gets the maximum height of all branches beneath a #GNode.
This is the maximum distance from the #GNode to all leaf nodes.

If @root is %NULL, 0 is returned. If @root has no children,
1 is returned. If @root has children, 2 is returned. And so on.
#NAME: DATE_BAD_DAY
#PARENT: GLib
#COMMENT: Represents an invalid #GDateDay.
#NAME: parse
#PARENT: GLib.MarkupParseContext
#COMMENT: Feed some data to the #GMarkupParseContext.

The data need not be valid UTF-8; an error will be signaled if
it's invalid. The data need not be an entire document; you can
feed a document into the parser incrementally, via multiple calls
to this function. Typically, as you receive data from a network
connection or file, you feed each received chunk of data into this
function, aborting the process if an error occurs. Once an error
is reported, no further data may be fed to the #GMarkupParseContext;
all errors are fatal.
#NAME: left_paren
#PARENT: GLib.TokenType
#COMMENT: a '(' character
#NAME: date
#PARENT: GLib.Date.clear.none
#COMMENT: pointer to one or more dates to clear
#NAME: get_real_name
#PARENT: GLib
#COMMENT: Gets the real name of the user. This usually comes from the user's
entry in the `passwd` file. The encoding of the returned string is
system-defined. (On Windows, it is, however, always UTF-8.) If the
real user name cannot be determined, the string "Unknown" is
returned.
#NAME: inseparable
#PARENT: GLib.UnicodeBreakType
#COMMENT: Inseparable (IN)
#NAME: microseconds
#PARENT: GLib.TimeVal.add.none
#COMMENT: number of microseconds to add to @time
#NAME: get_handle
#PARENT: GLib.Variant.get_handle
#COMMENT: a #gint32
#NAME: tree
#PARENT: GLib.Tree.destroy.none
#COMMENT: a #GTree
#NAME: flags
#PARENT: GLib.Node.children_foreach.none
#COMMENT: which types of children are to be visited, one of
    %G_TRAVERSE_ALL, %G_TRAVERSE_LEAVES and %G_TRAVERSE_NON_LEAVES
#NAME: v_string
#PARENT: GLib.TokenValue
#COMMENT: string value
#NAME: insert_before
#PARENT: GLib.SList.insert_before
#COMMENT: the new head of the list.
#NAME: data
#PARENT: GLib.child_watch_add.guint
#COMMENT: data to pass to @function
#NAME: unix_set_fd_nonblocking
#PARENT: GLib
#COMMENT: Control the non-blocking state of the given file descriptor,
according to @nonblock. On most systems this uses %O_NONBLOCK, but
on some older ones may use %O_NDELAY.
#NAME: condition
#PARENT: GLib.IOFunc.gboolean
#COMMENT: the condition which has been satisfied
#NAME: is_tuple
#PARENT: GLib.VariantType
#COMMENT: Determines if the given @type is a tuple type.  This is true if the
type string for @type starts with a '(' or if @type is
%G_VARIANT_TYPE_TUPLE.

This function returns %TRUE for any indefinite type for which every
definite subtype is a tuple type -- %G_VARIANT_TYPE_TUPLE, for
example.
#NAME: n_items
#PARENT: GLib.VariantType
#COMMENT: Determines the number of items contained in a tuple or
dictionary entry type.

This function may only be used with tuple or dictionary entry types,
but must not be used with the generic tuple type
%G_VARIANT_TYPE_TUPLE.

In the case of a dictionary entry type, this function will always
return 2.
#NAME: source
#PARENT: GLib.Source.set_funcs.none
#COMMENT: a #GSource
#NAME: free
#PARENT: GLib.Hook
#COMMENT: Calls the #GHookList @finalize_hook function if it exists,
and frees the memory allocated for the #GHook.
#NAME: err
#PARENT: GLib.set_error.none
#COMMENT: a return location for a #GError, or %NULL
#NAME: interval
#PARENT: GLib.timeout_source_new.Source
#COMMENT: the timeout interval in milliseconds.
#NAME: new
#PARENT: GLib.Thread.new
#COMMENT: the new #GThread
#NAME: key_file
#PARENT: GLib.KeyFile.set_integer.none
#COMMENT: a #GKeyFile
#NAME: built
#PARENT: GLib.TestFileType
#COMMENT: a file that was built on the compiling machine
#NAME: TIME_SPAN_MILLISECOND
#PARENT: GLib
#COMMENT: Evaluates to a time span of one millisecond.
#NAME: new_int32
#PARENT: GLib.Variant.new_int32
#COMMENT: a floating reference to a new int32 #GVariant instance
#NAME: find_data
#PARENT: GLib.Hook.find_data
#COMMENT: the #GHook with the given @data or %NULL if no matching
    #GHook is found
#NAME: wc
#PARENT: GLib.String.insert_unichar.String
#COMMENT: a Unicode character
#NAME: length
#PARENT: GLib.BookmarkFile.to_data.utf8
#COMMENT: return location for the length of the returned string, or %NULL
#NAME: out
#PARENT: GLib.base64_encode_close.gsize
#COMMENT: pointer to destination buffer
#NAME: utf8_get_char
#PARENT: GLib.utf8_get_char
#COMMENT: the resulting character
#NAME: get_user_data
#PARENT: GLib.MarkupParseContext
#COMMENT: Returns the user_data associated with @context.

This will either be the user_data that was provided to
g_markup_parse_context_new() or to the most recent call
of g_markup_parse_context_push().
#NAME: mfile
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `EMFILE`
#NAME: month
#PARENT: GLib.Date.new_dmy.Date
#COMMENT: month of the year
#NAME: date
#PARENT: GLib.Date.set_julian.none
#COMMENT: a #GDate
#NAME: build_filenamev
#PARENT: GLib.build_filenamev
#COMMENT: a newly-allocated string that must be freed with g_free().
#NAME: group_name
#PARENT: GLib.KeyFile.get_boolean_list.gboolean
#COMMENT: a group name
#NAME: pahawh_hmong
#PARENT: GLib.UnicodeScript
#COMMENT: Pahawh Hmong. Since: 2.42
#NAME: double_hash
#PARENT: GLib.double_hash
#COMMENT: a hash value corresponding to the key.
#NAME: get_child_value
#PARENT: GLib.Variant
#COMMENT: Reads a child item out of a container #GVariant instance.  This
includes variants, maybes, arrays, tuples and dictionary
entries.  It is an error to call this function on any other type of
#GVariant.

It is an error if @index_ is greater than the number of child items
in the container.  See g_variant_n_children().

The returned value is never floating.  You should free it with
g_variant_unref() when you're done with it.

This function is O(1).
#NAME: len
#PARENT: GLib.String
#COMMENT: contains the length of the string, not including the
  terminating nul byte.
#NAME: ignore_unknown
#PARENT: GLib.OptionContext.set_ignore_unknown_options.none
#COMMENT: %TRUE to ignore unknown options, %FALSE to produce
   an error when unknown options are met
#NAME: SourceFuncs
#PARENT: GLib
#COMMENT: The `GSourceFuncs` struct contains a table of
functions used to handle event sources in a generic manner.

For idle sources, the prepare and check functions always return %TRUE
to indicate that the source is always ready to be processed. The prepare
function also returns a timeout value of 0 to ensure that the poll() call
doesn't block (since that would be time wasted which could have been spent
running the idle function).

For timeout sources, the prepare and check functions both return %TRUE
if the timeout interval has expired. The prepare function also returns
a timeout value to ensure that the poll() call doesn't block too long
and miss the next timeout.

For file descriptor sources, the prepare function typically returns %FALSE,
since it must wait until poll() has been called before it knows whether
any events need to be processed. It sets the returned timeout to -1 to
indicate that it doesn't mind how long the poll() call blocks. In the
check function, it tests the results of the poll() call to see if the
required condition has been met, and returns %TRUE if so.
#NAME: hash_table
#PARENT: GLib.hash_table_remove_all.none
#COMMENT: a #GHashTable
#NAME: get_tmp_dir
#PARENT: GLib.get_tmp_dir
#COMMENT: the directory to use for temporary files.
#NAME: group_name
#PARENT: GLib.KeyFile.get_locale_string.utf8
#COMMENT: a group name
#NAME: utf8_substring
#PARENT: GLib.utf8_substring
#COMMENT: a newly allocated copy of the requested
    substring. Free with g_free() when no longer needed.
#NAME: insert
#PARENT: GLib.Node.insert
#COMMENT: the inserted #GNode
#NAME: basename
#PARENT: GLib
#COMMENT: Gets the name of the file without any leading directory
components. It returns a pointer into the given file name
string.
#NAME: classify
#PARENT: GLib.Variant
#COMMENT: Classifies @value according to its top-level type.
#NAME: node
#PARENT: GLib.Node.children_foreach.none
#COMMENT: a #GNode
#NAME: datetime
#PARENT: GLib.DateTime.get_seconds.gdouble
#COMMENT: a #GDateTime
#NAME: ready
#PARENT: GLib.OnceStatus
#COMMENT: the function has been called.
#NAME: tai_le
#PARENT: GLib.UnicodeScript
#COMMENT: Tai Le
#NAME: utf8string
#PARENT: GLib.filename_from_utf8.guint8
#COMMENT: a UTF-8 encoded string.
#NAME: link_
#PARENT: GLib.List.delete_link.gpointer
#COMMENT: node to delete from @list
#NAME: iter
#PARENT: GLib.SequenceIter.get_sequence.Sequence
#COMMENT: a #GSequenceIter
#NAME: num
#PARENT: GLib.spaced_primes_closest.guint
#COMMENT: a #guint
#NAME: flag_fatal
#PARENT: GLib.LogLevelFlags
#COMMENT: internal flag
#NAME: compile_options
#PARENT: GLib.regex_split_simple.utf8
#COMMENT: compile options for the regular expression, or 0
#NAME: get_buffer_condition
#PARENT: GLib.IOChannel
#COMMENT: This function returns a #GIOCondition depending on whether there
is data to be read/space to write data in the internal buffers in
the #GIOChannel. Only the flags %G_IO_IN and %G_IO_OUT may be set.
#NAME: func
#PARENT: GLib.Source.set_callback.none
#COMMENT: a callback function
#NAME: MutexLocker
#PARENT: GLib
#COMMENT: Opaque type. See g_mutex_locker_new() for details.
#NAME: prepend_vals
#PARENT: GLib.Array.prepend_vals
#COMMENT: the #GArray
#NAME: v_binary
#PARENT: GLib.TokenValue
#COMMENT: token binary integer value
#NAME: rhs
#PARENT: GLib.Date.compare.gint
#COMMENT: second date to compare
#NAME: d
#PARENT: GLib.ascii_dtostr.utf8
#COMMENT: The #gdouble to convert
#NAME: new_maybe
#PARENT: GLib.Variant
#COMMENT: Depending on if @child is %NULL, either wraps @child inside of a
maybe container or creates a Nothing instance for the given @type.

At least one of @child_type and @child must be non-%NULL.
If @child_type is non-%NULL then it must be a definite type.
If they are both non-%NULL then @child_type must be the type
of @child.

If @child is a floating reference (see g_variant_ref_sink()), the new
instance takes ownership of @child.
#NAME: items_written
#PARENT: GLib.utf16_to_ucs4.gunichar
#COMMENT: location to store number of characters
    written, or %NULL. The value stored here does not include the trailing
    0 character.
#NAME: lock_bit
#PARENT: GLib.bit_trylock.gboolean
#COMMENT: a bit value between 0 and 31
#NAME: new
#PARENT: GLib.DateTime.new
#COMMENT: a new #GDateTime, or %NULL
#NAME: is_readable
#PARENT: GLib.IOFlags
#COMMENT: indicates that the io channel is readable.
    This flag cannot be changed.
#NAME: get_home_dir
#PARENT: GLib.get_home_dir
#COMMENT: the current user's home directory
#NAME: string
#PARENT: GLib.strreverse.utf8
#COMMENT: the string to reverse
#NAME: is_symlink
#PARENT: GLib.FileTest
#COMMENT: %TRUE if the file is a symlink.
#NAME: string
#PARENT: GLib.quark_from_string.Quark
#COMMENT: a string
#NAME: date
#PARENT: GLib.Date.valid.gboolean
#COMMENT: a #GDate to check
#NAME: name
#PARENT: GLib.BookmarkFile.set_app_info.gboolean
#COMMENT: an application's name
#NAME: unexp_eof_in_string
#PARENT: GLib.ErrorType
#COMMENT: unterminated string constant
#NAME: name
#PARENT: GLib.BookmarkFile.has_application.gboolean
#COMMENT: the name of the application
#NAME: get_int16
#PARENT: GLib.Variant
#COMMENT: Returns the 16-bit signed integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_INT16.
#NAME: group_name
#PARENT: GLib.KeyFile.set_string.none
#COMMENT: a group name
#NAME: name
#PARENT: GLib.MatchInfo.fetch_named_pos.gboolean
#COMMENT: name of the subexpression
#NAME: fault
#PARENT: GLib.FileError
#COMMENT: You passed in a pointer to bad memory.
    (GLib won't reliably return this, don't pass in pointers to bad
    memory.)
#NAME: value
#PARENT: GLib.KeyFile.set_int64.none
#COMMENT: an integer value
#NAME: data
#PARENT: GLib.SequenceIterCompareFunc.gint
#COMMENT: user data
#NAME: func
#PARENT: GLib.SList.foreach.none
#COMMENT: the function to call with each element's data
#NAME: insert
#PARENT: GLib.HashTable.insert
#COMMENT: %TRUE if the key did not exist yet
#NAME: test_get_root
#PARENT: GLib
#COMMENT: Get the toplevel test suite for the test path API.
#NAME: insert_sorted
#PARENT: GLib.Sequence.insert_sorted
#COMMENT: a #GSequenceIter pointing to the new item.
#NAME: new_parsed_va
#PARENT: GLib.Variant.new_parsed_va
#COMMENT: a new, usually floating, #GVariant
#NAME: write
#PARENT: GLib.BookmarkFileError
#COMMENT: an error occurred while writing
#NAME: state
#PARENT: GLib.base64_encode_step.gsize
#COMMENT: Saved state between steps, initialize to 0
#NAME: palmyrene
#PARENT: GLib.UnicodeScript
#COMMENT: Palmyrene. Since: 2.42
#NAME: source
#PARENT: GLib.Source.remove_unix_fd.none
#COMMENT: a #GSource
#NAME: value
#PARENT: GLib.hash_table_replace.gboolean
#COMMENT: the value to associate with the key
#NAME: link_
#PARENT: GLib.SList.delete_link.gpointer
#COMMENT: node to delete
#NAME: get_size
#PARENT: GLib.BookmarkFile
#COMMENT: Gets the number of bookmarks inside @bookmark.
#NAME: length
#PARENT: GLib.ByteArray.set_size.guint8
#COMMENT: the new size of the #GByteArray
#NAME: set_strict_posix
#PARENT: GLib.OptionContext
#COMMENT: Sets strict POSIX mode.

By default, this mode is disabled.

In strict POSIX mode, the first non-argument parameter encountered
(eg: filename) terminates argument processing.  Remaining arguments
are treated as non-options and are not attempted to be parsed.

If strict POSIX mode is disabled then parsing is done in the GNU way
where option arguments can be freely mixed with non-options.

As an example, consider "ls foo -l".  With GNU style parsing, this
will list "foo" in long mode.  In strict POSIX style, this will list
the files named "foo" and "-l".

It may be useful to force strict POSIX mode when creating "verb
style" command line tools.  For example, the "gsettings" command line
tool supports the global option "--schemadir" as well as many
subcommands ("get", "set", etc.) which each have their own set of
arguments.  Using strict POSIX mode will allow parsing the global
options up to the verb name while leaving the remaining options to be
parsed by the relevant subcommand (which can be determined by
examining the verb name, which should be present in argv[1] after
parsing).
#NAME: convert
#PARENT: GLib
#COMMENT: Converts a string from one character set to another.

Note that you should use g_iconv() for streaming conversions.
Despite the fact that @byes_read can return information about partial
characters, the g_convert_... functions are not generally suitable
for streaming. If the underlying converter maintains internal state,
then this won't be preserved across successive calls to g_convert(),
g_convert_with_iconv() or g_convert_with_fallback(). (An example of
this is the GNU C converter for CP1255 which does not emit a base
character until it knows that the next character is not a mark that
could combine with the base character.)

Using extensions such as "//TRANSLIT" may not work (or may not work
well) on many platforms.  Consider using g_str_to_ascii() instead.
#NAME: data
#PARENT: GLib.Queue.push_tail.none
#COMMENT: the data for the new element
#NAME: new_from_timeval_utc
#PARENT: GLib.DateTime
#COMMENT: Creates a #GDateTime corresponding to the given #GTimeVal @tv in UTC.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC.

This call can fail (returning %NULL) if @tv represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.
#NAME: unichar_isalpha
#PARENT: GLib.unichar_isalpha
#COMMENT: %TRUE if @c is an alphabetic character
#NAME: length
#PARENT: GLib.BookmarkFile.load_from_data.gboolean
#COMMENT: the length of @data in bytes
#NAME: free_func
#PARENT: GLib.SList.free_full.none
#COMMENT: the function to be called to free each element's data
#NAME: new_with_seed
#PARENT: GLib.Rand
#COMMENT: Creates a new random number generator initialized with @seed.
#NAME: list
#PARENT: GLib.SList.free_full.none
#COMMENT: a pointer to a #GSList
#NAME: compute_checksum_for_string
#PARENT: GLib
#COMMENT: Computes the checksum of a string.

The hexadecimal string returned will be in lower case.
#NAME: filename
#PARENT: GLib.unlink.gint
#COMMENT: a pathname in the GLib file name encoding (UTF-8 on Windows)
#NAME: string_len
#PARENT: GLib.Regex.replace_eval.utf8
#COMMENT: the length of @string, or -1 if @string is nul-terminated
#NAME: inbuf
#PARENT: GLib.IConv.IConv.gsize
#COMMENT: bytes to convert
#NAME: channel
#PARENT: GLib.IOChannel.unix_get_fd.gint
#COMMENT: a #GIOChannel, created with g_io_channel_unix_new().
#NAME: dict
#PARENT: GLib.VariantDict.lookup_value.Variant
#COMMENT: a #GVariantDict
#NAME: name
#PARENT: GLib.BookmarkFile.add_application.none
#COMMENT: the name of the application registering the bookmark
  or %NULL
#NAME: length
#PARENT: GLib.Hmac.update.none
#COMMENT: size of the buffer, or -1 if it is a nul-terminated string
#NAME: checksum_type
#PARENT: GLib.Checksum.new.Checksum
#COMMENT: the desired type of checksum
#NAME: vfprintf
#PARENT: GLib
#COMMENT: An implementation of the standard fprintf() function which supports
positional parameters, as specified in the Single Unix Specification.
#NAME: double_hash
#PARENT: GLib
#COMMENT: Converts a pointer to a #gdouble to a hash value.
It can be passed to g_hash_table_new() as the @hash_func parameter,
It can be passed to g_hash_table_new() as the @hash_func parameter,
when using non-%NULL pointers to doubles as keys in a #GHashTable.
#NAME: get_codeset
#PARENT: GLib.get_codeset
#COMMENT: a newly allocated string containing the name
    of the character set. This string must be freed with g_free().
#NAME: error_from_errno
#PARENT: GLib.IOChannel
#COMMENT: Converts an `errno` error number to a #GIOChannelError.
#NAME: notify
#PARENT: GLib.unix_fd_add_full.guint
#COMMENT: function to call when the idle is removed, or %NULL
#NAME: c
#PARENT: GLib.ascii_xdigit_value.gint
#COMMENT: an ASCII character.
#NAME: object_path
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a D-Bus object path
                              string.
#NAME: msgval
#PARENT: GLib.strip_context.utf8
#COMMENT: another string
#NAME: environ_unsetenv
#PARENT: GLib.environ_unsetenv
#COMMENT: the
    updated environment list. Free it using g_strfreev().
#NAME: get_description
#PARENT: GLib.BookmarkFile
#COMMENT: Retrieves the description of the bookmark for @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
#NAME: KEY_FILE_DESKTOP_TYPE_DIRECTORY
#PARENT: GLib
#COMMENT: The value of the #G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing directories.
#NAME: description
#PARENT: GLib.BookmarkFile.set_description.none
#COMMENT: a string
#NAME: TestFixtureFunc
#PARENT: GLib
#COMMENT: The type used for functions that operate on test fixtures.  This is
used for the fixture setup and teardown functions as well as for the
testcases themselves.

@user_data is a pointer to the data that was given when registering
the test case.

@fixture will be a pointer to the area of memory allocated by the
test framework, of the size requested.  If the requested size was
zero then @fixture will be equal to @user_data.
#NAME: arabic
#PARENT: GLib.UnicodeScript
#COMMENT: Arabic
#NAME: key
#PARENT: GLib.Variant.lookup_value.Variant
#COMMENT: the key to lookup in the dictionary
#NAME: write_chars
#PARENT: GLib.IOChannel.write_chars
#COMMENT: the status of the operation.
#NAME: n
#PARENT: GLib.Queue.push_nth.none
#COMMENT: the position to insert the new element. If @n is negative or
    larger than the number of elements in the @queue, the element is
    added to the end of the queue.
#NAME: nth_data
#PARENT: GLib.List
#COMMENT: Gets the data of the element at the given position.

This iterates over the list until it reaches the @n-th position. If you
intend to iterate over every element, it is better to use a for-loop as
described in the #GList introduction.
#NAME: location
#PARENT: GLib.once_init_enter.gboolean
#COMMENT: location of a static initializable variable containing 0
#NAME: value_expected
#PARENT: GLib.VariantParseError
#COMMENT: no value given
#NAME: set_size
#PARENT: GLib.Array.set_size
#COMMENT: the #GArray
#NAME: int_range
#PARENT: GLib.Rand
#COMMENT: Returns the next random #gint32 from @rand_ equally distributed over
the range [@begin..@end-1].
#NAME: get_close_on_unref
#PARENT: GLib.IOChannel.get_close_on_unref
#COMMENT: Whether the channel will be closed on the final unref of
              the GIOChannel data structure.
#NAME: malloc
#PARENT: GLib
#COMMENT: Allocates @n_bytes bytes of memory.
If @n_bytes is 0 it returns %NULL.
#NAME: can_recurse
#PARENT: GLib.Source.set_can_recurse.none
#COMMENT: whether recursion is allowed for this source
#NAME: match_info
#PARENT: GLib.MatchInfo.ref.MatchInfo
#COMMENT: a #GMatchInfo
#NAME: get_visited
#PARENT: GLib.BookmarkFile.get_visited
#COMMENT: a timestamp.
#NAME: new
#PARENT: GLib.PatternSpec.new
#COMMENT: a newly-allocated #GPatternSpec
#NAME: key_file
#PARENT: GLib.KeyFile.load_from_data_dirs.gboolean
#COMMENT: an empty #GKeyFile struct
#NAME: new
#PARENT: GLib.Regex
#COMMENT: Compiles the regular expression to an internal form, and does
the initial setup of the #GRegex structure.
#NAME: dict
#PARENT: GLib.VariantDict.end.Variant
#COMMENT: a #GVariantDict
#NAME: context
#PARENT: GLib.MainLoop.new.MainLoop
#COMMENT: a #GMainContext  (if %NULL, the default context will be used).
#NAME: get_int32
#PARENT: GLib.Variant
#COMMENT: Returns the 32-bit signed integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_INT32.
#NAME: value
#PARENT: GLib.VariantIter.init.gsize
#COMMENT: a container #GVariant
#NAME: file_test
#PARENT: GLib.file_test
#COMMENT: whether a test was %TRUE
#NAME: start_position
#PARENT: GLib.Regex.match_all_full.gboolean
#COMMENT: starting index of the string to match
#NAME: idle_source_new
#PARENT: GLib
#COMMENT: Creates a new idle source.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed. Note that the default priority for idle sources is
%G_PRIORITY_DEFAULT_IDLE, as compared to other sources which
have a default priority of %G_PRIORITY_DEFAULT.
#NAME: context
#PARENT: GLib.MarkupParseContext.get_position.none
#COMMENT: a #GMarkupParseContext
#NAME: str_equal
#PARENT: GLib.str_equal
#COMMENT: %TRUE if the two keys match
#NAME: bookmark
#PARENT: GLib.BookmarkFile.set_added.none
#COMMENT: a #GBookmarkFile
#NAME: malloc0_n
#PARENT: GLib
#COMMENT: This function is similar to g_malloc0(), allocating (@n_blocks * @n_block_bytes) bytes,
but care is taken to detect possible overflow during multiplication.
#NAME: value
#PARENT: GLib.Variant.new_boolean.Variant
#COMMENT: a #gboolean value
#NAME: data
#PARENT: GLib.OptionArgFunc.gboolean
#COMMENT: User data added to the #GOptionGroup containing the option when it
 was created with g_option_group_new()
#NAME: KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list of
strings identifying the environments that should not display the
desktop entry.
#NAME: variant_type_string_scan
#PARENT: GLib
#COMMENT: Scan for a single complete and valid GVariant type string in @string.
The memory pointed to by @limit (or bytes beyond it) is never
accessed.

If a valid type string is found, @endptr is updated to point to the
first character past the end of the string that was found and %TRUE
is returned.

If there is no valid type string starting at @string, or if the type
string does not end before @limit then %FALSE is returned.

For the simple case of checking if a string is a valid type string,
see g_variant_type_string_is_valid().
#NAME: length
#PARENT: GLib.AsyncQueue
#COMMENT: Returns the length of the queue.

Actually this function returns the number of data items in
the queue minus the number of waiting threads, so a negative
value means waiting threads, and a positive value means available
entries in the @queue. A return value of 0 could mean n entries
in the queue and n threads waiting. This can happen due to locking
of the queue or due to scheduling.
#NAME: missing_back_reference
#PARENT: GLib.RegexError
#COMMENT: "\\g" is not followed by a braced,
     angle-bracketed, or quoted name or number, or by a plain number. Since: 2.16
#NAME: mime_type
#PARENT: GLib.BookmarkFile.set_icon.none
#COMMENT: the MIME type of the icon for the bookmark
#NAME: dest_size
#PARENT: GLib.strlcpy.gsize
#COMMENT: length of @dest in bytes
#NAME: status
#PARENT: GLib.ChildWatchFunc.none
#COMMENT: Status information about the child process, encoded
    in a platform-specific manner
#NAME: prefix
#PARENT: GLib.str_has_prefix.gboolean
#COMMENT: the nul-terminated prefix to look for
#NAME: flags
#PARENT: GLib.datalist_unset_flags.none
#COMMENT: the flags to turn off. The values of the flags are
  restricted by %G_DATALIST_FLAGS_MASK (currently
  3: giving two possible boolean flags).
  A value for @flags that doesn't fit within the mask is
  an error.
#NAME: is_normal_form
#PARENT: GLib.Variant.is_normal_form
#COMMENT: %TRUE if @value is in normal form
#NAME: remove_group
#PARENT: GLib.KeyFile.remove_group
#COMMENT: %TRUE if the group was removed, %FALSE otherwise
#NAME: zero_width_space
#PARENT: GLib.UnicodeBreakType
#COMMENT: Zero Width Space (ZW)
#NAME: atomic_int_exchange_and_add
#PARENT: GLib
#COMMENT: This function existed before g_atomic_int_add() returned the prior
value of the integer (which it now does).  It is retained only for
compatibility reasons.  Don't use this function in new code.
#NAME: lookup_extended
#PARENT: GLib.Tree
#COMMENT: Looks up a key in the #GTree, returning the original key and the
associated value. This is useful if you need to free the memory
allocated for the original key, for example before calling
g_tree_remove().
#NAME: pop
#PARENT: GLib.AsyncQueue.pop
#COMMENT: data from the queue
#NAME: month
#PARENT: GLib.DateTime.new_local.DateTime
#COMMENT: the month component of the date
#NAME: context
#PARENT: GLib.MainContext.invoke_full.none
#COMMENT: a #GMainContext, or %NULL
#NAME: gurmukhi
#PARENT: GLib.UnicodeScript
#COMMENT: Gurmukhi
#NAME: n_children
#PARENT: GLib.VariantIter.n_children
#COMMENT: the number of children in the container
#NAME: get_double_list
#PARENT: GLib.KeyFile
#COMMENT: Returns the values associated with @key under @group_name as
doubles.

If @key cannot be found then %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with @key cannot be interpreted as doubles then %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
#NAME: main_context_default
#PARENT: GLib
#COMMENT: Returns the global default main context. This is the main context
used for main loop functions when a main loop is not explicitly
specified, and corresponds to the "main" main loop. See also
g_main_context_get_thread_default().
#NAME: source
#PARENT: GLib.Source.add_unix_fd.gpointer
#COMMENT: a #GSource
#NAME: string
#PARENT: GLib.String.truncate.String
#COMMENT: a #GString
#NAME: user_data
#PARENT: GLib.RegexEvalCallback.gboolean
#COMMENT: user data passed to g_regex_replace_eval()
#NAME: data
#PARENT: GLib.HookFunc.none
#COMMENT: the data field of the #GHook is passed to the hook function here
#NAME: reader_unlock
#PARENT: GLib.RWLock
#COMMENT: Release a read lock on @rw_lock.

Calling g_rw_lock_reader_unlock() on a lock that is not held
by the current thread leads to undefined behaviour.
#NAME: bytes_read
#PARENT: GLib.locale_to_utf8.utf8
#COMMENT: location to store the number of bytes in the
                input string that were successfully converted, or %NULL.
                Even if the conversion was successful, this may be
                less than @len if there were partial characters
                at the end of the input. If the error
                #G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
                stored will the byte offset after the last valid
                input sequence.
#NAME: expand_references
#PARENT: GLib.MatchInfo
#COMMENT: Returns a new string containing the text in @string_to_expand with
references and escape sequences expanded. References refer to the last
match done with @string against @regex and have the same syntax used by
g_regex_replace().

The @string_to_expand must be UTF-8 encoded even if #G_REGEX_RAW was
passed to g_regex_new().

The backreferences are extracted from the string passed to the match
function, so you cannot call this function after freeing the string.

@match_info may be %NULL in which case @string_to_expand must not
contain references. For instance "foo\n" does not refer to an actual
pattern and '\n' merely will be replaced with \n character,
while to expand "\0" (whole match) one needs the result of a match.
Use g_regex_check_replacement() to find out whether @string_to_expand
contains references.
#NAME: index_
#PARENT: GLib.PtrArray.remove_range.gpointer
#COMMENT: the index of the first pointer to remove
#NAME: mkdir_with_parents
#PARENT: GLib
#COMMENT: Create a directory if it doesn't already exist. Create intermediate
parent directories as needed, too.
#NAME: utf8_substring
#PARENT: GLib
#COMMENT: Copies a substring out of a UTF-8 encoded string.
The substring will contain @end_pos - @start_pos characters.
#NAME: seconds
#PARENT: GLib.DateTime.new.DateTime
#COMMENT: the number of seconds past the minute
#NAME: hook
#PARENT: GLib.Hook.free.none
#COMMENT: the #GHook to free
#NAME: 
#PARENT: GLib.snprintf.gint...
#COMMENT: the arguments to insert in the output.
#NAME: julian_date
#PARENT: GLib.Date.valid_julian.gboolean
#COMMENT: Julian day to check
#NAME: tai_tham
#PARENT: GLib.UnicodeScript
#COMMENT: Tai Tham. Since 2.26
#NAME: datalist_get_flags
#PARENT: GLib.datalist_get_flags
#COMMENT: the flags of the datalist
#NAME: llink
#PARENT: GLib.List.remove_link.gpointer
#COMMENT: an element in the #GList
#NAME: main_context_get_thread_default
#PARENT: GLib
#COMMENT: Gets the thread-default #GMainContext for this thread. Asynchronous
operations that want to be able to be run in contexts other than
the default one should call this method or
g_main_context_ref_thread_default() to get a #GMainContext to add
their #GSources to. (Note that even in single-threaded
programs applications may sometimes want to temporarily push a
non-default context, so it is not safe to assume that this will
always return %NULL if you are running in the default thread.)

If you need to hold a reference on the context, use
g_main_context_ref_thread_default() instead.
#NAME: spaced_primes_closest
#PARENT: GLib.spaced_primes_closest
#COMMENT: the smallest prime number from a built-in array of primes
    which is larger than @num
#NAME: memory_error
#PARENT: GLib.RegexError
#COMMENT: Failed to get memory. Since 2.16
#NAME: error_func
#PARENT: GLib.OptionGroup.set_error_hook.none
#COMMENT: a function to call when an error occurs
#NAME: HookCheckMarshaller
#PARENT: GLib
#COMMENT: Defines the type of function used by g_hook_list_marshal_check().
#NAME: hanunoo
#PARENT: GLib.UnicodeScript
#COMMENT: Hanunoo
#NAME: string
#PARENT: GLib.Regex.match_all_full.gboolean
#COMMENT: the string to scan for matches
#NAME: node
#PARENT: GLib.NodeTraverseFunc.gboolean
#COMMENT: a #GNode.
#NAME: envp
#PARENT: GLib.spawn_async.gboolean
#COMMENT: child's environment, or %NULL to inherit parent's
#NAME: new
#PARENT: GLib.Queue
#COMMENT: Creates a new #GQueue.
#NAME: TestDataFunc
#PARENT: GLib
#COMMENT: The type used for test case functions that take an extra pointer
argument.
#NAME: key
#PARENT: GLib.KeyFile.get_integer.gint
#COMMENT: a key
#NAME: test_trap_subprocess
#PARENT: GLib
#COMMENT: Respawns the test program to run only @test_path in a subprocess.
This can be used for a test case that might not return, or that
might abort.

If @test_path is %NULL then the same test is re-run in a subprocess.
You can use g_test_subprocess() to determine whether the test is in
a subprocess or not.

@test_path can also be the name of the parent test, followed by
"`/subprocess/`" and then a name for the specific subtest (or just
ending with "`/subprocess`" if the test only has one child test);
tests with names of this form will automatically be skipped in the
parent process.

If @usec_timeout is non-0, the test subprocess is aborted and
considered failing if its run time exceeds it.

The subprocess behavior can be configured with the
#GTestSubprocessFlags flags.

You can use methods such as g_test_trap_assert_passed(),
g_test_trap_assert_failed(), and g_test_trap_assert_stderr() to
check the results of the subprocess. (But note that
g_test_trap_assert_stdout() and g_test_trap_assert_stderr()
cannot be used if @test_flags specifies that the child should
inherit the parent stdout/stderr.)

If your `main ()` needs to behave differently in
the subprocess, you can call g_test_subprocess() (after calling
g_test_init()) to see whether you are in a subprocess.

The following example tests that calling
`my_object_new(1000000)` will abort with an error
message.

|[<!-- language="C" -->
  static void
  test_create_large_object_subprocess (void)
  {
    if (g_test_subprocess ())
      {
        my_object_new (1000000);
        return;
      }

    // Reruns this same test in a subprocess
    g_test_trap_subprocess (NULL, 0, 0);
    g_test_trap_assert_failed ();
    g_test_trap_assert_stderr ("*ERROR*too large*");
  }

  int
  main (int argc, char **argv)
  {
    g_test_init (&argc, &argv, NULL);

    g_test_add_func ("/myobject/create_large_object",
                     test_create_large_object);
    return g_test_run ();
  }
]|
#NAME: find_program_in_path
#PARENT: GLib
#COMMENT: Locates the first executable named @program in the user's path, in the
same way that execvp() would locate it. Returns an allocated string
with the absolute path name, or %NULL if the program is not found in
the path. If @program is already an absolute path, returns a copy of
@program if @program exists and is executable, and %NULL otherwise.
 
On Windows, if @program does not have a file type suffix, tries
with the suffixes .exe, .cmd, .bat and .com, and the suffixes in
the `PATHEXT` environment variable.

On Windows, it looks for the file in the same way as CreateProcess()
would. This means first in the directory where the executing
program was loaded from, then in the current directory, then in the
Windows 32-bit system directory, then in the Windows directory, and
finally in the directories in the `PATH` environment variable. If
the program is found, the return value contains the full name
including the type suffix.
#NAME: str_equal
#PARENT: GLib
#COMMENT: Compares two strings for byte-by-byte equality and returns %TRUE
if they are equal. It can be passed to g_hash_table_new() as the
@key_equal_func parameter, when using non-%NULL strings as keys in a
#GHashTable.

Note that this function is primarily meant as a hash table comparison
function. For a general-purpose, %NULL-safe string comparison function,
see g_strcmp0().
#NAME: dpgettext2
#PARENT: GLib
#COMMENT: This function is a variant of g_dgettext() which supports
a disambiguating message context. GNU gettext uses the
'\004' character to separate the message context and
message id in @msgctxtid.

This uses g_dgettext() internally. See that functions for differences
with dgettext() proper.

This function differs from C_() in that it is not a macro and
thus you may use non-string-literals as context and msgid arguments.
#NAME: new
#PARENT: GLib.Hmac.new
#COMMENT: the newly created #GHmac, or %NULL.
  Use g_hmac_unref() to free the memory allocated by it.
#NAME: years
#PARENT: GLib.DateTime.add_years.DateTime
#COMMENT: the number of years
#NAME: seq
#PARENT: GLib.Sequence.free.none
#COMMENT: a #GSequence
#NAME: str
#PARENT: GLib.strndup.utf8
#COMMENT: the string to duplicate
#NAME: children
#PARENT: GLib.Variant.new_tuple.Variant
#COMMENT: the items to make the tuple out of
#NAME: max_depth
#PARENT: GLib.Node.traverse.none
#COMMENT: the maximum depth of the traversal. Nodes below this
    depth will not be visited. If max_depth is -1 all nodes in
    the tree are visited. If depth is 1, only the root is visited.
    If depth is 2, the root and its children are visited. And so on.
#NAME: value
#PARENT: GLib.KeyFile.set_integer.none
#COMMENT: an integer value
#NAME: illegal_sequence
#PARENT: GLib.ConvertError
#COMMENT: Invalid byte sequence in conversion input.
#NAME: build_pathv
#PARENT: GLib
#COMMENT: Behaves exactly like g_build_path(), but takes the path elements
as a string array, instead of varargs. This function is mainly
meant for language bindings.
#NAME: get_num_threads
#PARENT: GLib.ThreadPool.get_num_threads
#COMMENT: the number of threads currently running
#NAME: test_flags
#PARENT: GLib.test_trap_subprocess.none
#COMMENT: Flags to modify subprocess behaviour.
#NAME: key_file
#PARENT: GLib.KeyFile.set_integer_list.none
#COMMENT: a #GKeyFile
#NAME: date
#PARENT: GLib.Date.set_dmy.none
#COMMENT: a #GDate
#NAME: standard
#PARENT: GLib.TimeType
#COMMENT: the time is in local standard time
#NAME: atomic_pointer_add
#PARENT: GLib
#COMMENT: Atomically adds @val to the value of @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic += val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.
#NAME: self
#PARENT: GLib.Thread.self
#COMMENT: the #GThread representing the current thread
#NAME: group
#PARENT: GLib.BookmarkFile.add_group.none
#COMMENT: the group name to be added
#NAME: KEY_FILE_DESKTOP_KEY_ACTIONS
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string list
giving the available application actions.
#NAME: copy
#PARENT: GLib.Hmac
#COMMENT: Copies a #GHmac. If @hmac has been closed, by calling
g_hmac_get_string() or g_hmac_get_digest(), the copied
HMAC will be closed as well.
#NAME: braille
#PARENT: GLib.UnicodeScript
#COMMENT: Braille
#NAME: sibling
#PARENT: GLib.List.insert_before.gpointer
#COMMENT: the list element before which the new element
    is inserted or %NULL to insert at the end of the list
#NAME: txtbsy
#PARENT: GLib.FileError
#COMMENT: Text file busy.
#NAME: BIG_ENDIAN
#PARENT: GLib
#COMMENT: Specifies one of the possible types of byte order.
See #G_BYTE_ORDER.
#NAME: get_name
#PARENT: GLib.Source.get_name
#COMMENT: the name of the source
#NAME: get_poll_func
#PARENT: GLib.MainContext
#COMMENT: Gets the poll function set by g_main_context_set_poll_func().
#NAME: marshaller
#PARENT: GLib.HookList.marshal_check.none
#COMMENT: the function to call for each #GHook
#NAME: thread
#PARENT: GLib.Thread.unref.none
#COMMENT: a #GThread
#NAME: func
#PARENT: GLib.atexit.none
#COMMENT: the function to call on normal program termination.
#NAME: items_read
#PARENT: GLib.utf8_to_utf16.guint16
#COMMENT: location to store number of bytes read,
    or %NULL. If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will be
    returned in case @str contains a trailing partial character. If
    an error occurs then the index of the invalid input is stored here.
#NAME: compute_checksum_for_bytes
#PARENT: GLib
#COMMENT: Computes the checksum for a binary @data. This is a
convenience wrapper for g_checksum_new(), g_checksum_get_string()
and g_checksum_free().

The hexadecimal string returned will be in lower case.
#NAME: peek_nth
#PARENT: GLib.Queue
#COMMENT: Returns the @n'th element of @queue.
#NAME: get_current_time
#PARENT: GLib.Source
#COMMENT: This function ignores @source and is otherwise the same as
g_get_current_time().
#NAME: build_filename
#PARENT: GLib
#COMMENT: Creates a filename from a series of elements using the correct
separator for filenames.

On Unix, this function behaves identically to `g_build_path
(G_DIR_SEPARATOR_S, first_element, ....)`.

On Windows, it takes into account that either the backslash
(`\` or slash (`/`) can be used as separator in filenames, but
otherwise behaves as on UNIX. When file pathname separators need
to be inserted, the one that last previously occurred in the
parameters (reading from left to right) is used.

No attempt is made to force the resulting filename to be an absolute
path. If the first element is a relative path, the result will
be a relative path.
#NAME: new_full
#PARENT: GLib.Tree.new_full
#COMMENT: a newly allocated #GTree
#NAME: new_strv
#PARENT: GLib.Variant
#COMMENT: Constructs an array of strings #GVariant from the given array of
strings.

If @length is -1 then @strv is %NULL-terminated.
#NAME: funcs
#PARENT: GLib.MainContext.find_source_by_funcs_user_data.Source
#COMMENT: the @source_funcs passed to g_source_new().
#NAME: is_daylight_savings
#PARENT: GLib.DateTime
#COMMENT: Determines if daylight savings time is in effect at the time and in
the time zone of @datetime.
#NAME: overwrite
#PARENT: GLib.environ_setenv.utf8
#COMMENT: whether to change the variable if it already exists
#NAME: strsignal
#PARENT: GLib
#COMMENT: Returns a string describing the given signal, e.g. "Segmentation fault".
You should use this function in preference to strsignal(), because it
returns a string in UTF-8 encoding, and since not all platforms support
the strsignal() function.
#NAME: set_visited
#PARENT: GLib.BookmarkFile
#COMMENT: Sets the time the bookmark for @uri was last visited.

If no bookmark for @uri is found then it is created.

The "visited" time should only be set if the bookmark was launched,
either using the command line retrieved by g_bookmark_file_get_app_info()
or by the default application for the bookmark's MIME type, retrieved
using g_bookmark_file_get_mime_type().  Changing the "visited" time
does not affect the "modified" time.
#NAME: channel
#PARENT: GLib.IOChannel.set_buffer_size.none
#COMMENT: a #GIOChannel
#NAME: n
#PARENT: GLib.Queue.push_nth_link.none
#COMMENT: the position to insert the link. If this is negative or larger than
    the number of elements in @queue, the link is added to the end of
    @queue.
#NAME: ref
#PARENT: GLib.Source.ref
#COMMENT: @source
#NAME: convert
#PARENT: GLib.convert
#COMMENT: If the conversion was successful, a newly allocated
              nul-terminated string, which must be freed with
              g_free(). Otherwise %NULL and @error will be set.
#NAME: ascii_tolower
#PARENT: GLib.ascii_tolower
#COMMENT: the result of converting @c to lower case. If @c is
    not an ASCII upper case letter, @c is returned unchanged.
#NAME: message
#PARENT: GLib.TestLogFatalFunc.gboolean
#COMMENT: the message to process
#NAME: get_length
#PARENT: GLib.MappedFile.get_length
#COMMENT: the length of the contents of @file.
#NAME: string
#PARENT: GLib.parse_debug_string.guint
#COMMENT: a list of debug options separated by colons, spaces, or
commas, or %NULL.
#NAME: TIME_SPAN_SECOND
#PARENT: GLib
#COMMENT: Evaluates to a time span of one second.
#NAME: set_max_unused_threads
#PARENT: GLib.ThreadPool
#COMMENT: Sets the maximal number of unused threads to @max_threads.
If @max_threads is -1, no limit is imposed on the number
of unused threads.

The default value is 2.
#NAME: href
#PARENT: GLib.BookmarkFile.get_icon.gboolean
#COMMENT: return location for the icon's location or %NULL
#NAME: ref
#PARENT: GLib.TimeZone.ref
#COMMENT: a new reference to @tz.
#NAME: build_path
#PARENT: GLib
#COMMENT: Creates a path from a series of elements using @separator as the
separator between elements. At the boundary between two elements,
any trailing occurrences of separator in the first element, or
leading occurrences of separator in the second element are removed
and exactly one copy of the separator is inserted.

Empty elements are ignored.

The number of leading copies of the separator on the result is
the same as the number of leading copies of the separator on
the first non-empty element.

The number of trailing copies of the separator on the result is
the same as the number of trailing copies of the separator on
the last non-empty element. (Determination of the number of
trailing copies is done without stripping leading copies, so
if the separator is `ABA`, then `ABABA` has 1 trailing copy.)

However, if there is only a single non-empty element, and there
are no characters in that element not part of the leading or
trailing separators, then the result is exactly the original value
of that element.

Other than for determination of the number of leading and trailing
copies of the separator, elements consisting only of copies
of the separator are ignored.
#NAME: get_system_config_dirs
#PARENT: GLib
#COMMENT: Returns an ordered list of base directories in which to access
system-wide configuration information.

On UNIX platforms this is determined using the mechanisms described
in the
[XDG Base Directory Specification](http://www.freedesktop.org/Standards/basedir-spec).
In this case the list of directories retrieved will be `XDG_CONFIG_DIRS`.

On Windows is the directory that contains application data for all users.
A typical path is C:\Documents and Settings\All Users\Application Data.
This folder is used for application data that is not user specific.
For example, an application can store a spell-check dictionary, a database
of clip art, or a log file in the CSIDL_COMMON_APPDATA folder.
This information will not roam and is available to anyone using the computer.
#NAME: get_int64
#PARENT: GLib.Variant
#COMMENT: Returns the 64-bit signed integer value of @value.

It is an error to call this function with a @value of any type
other than %G_VARIANT_TYPE_INT64.
#NAME: function
#PARENT: GLib.unix_fd_add_full.guint
#COMMENT: a #GUnixFDSourceFunc
#NAME: sized_new
#PARENT: GLib.Array.sized_new
#COMMENT: the new #GArray
#NAME: marshal_data
#PARENT: GLib.HookCheckMarshaller.gboolean
#COMMENT: user data
#NAME: wc
#PARENT: GLib.String.append_unichar.String
#COMMENT: a Unicode character
#NAME: is_begin
#PARENT: GLib.SequenceIter.is_begin
#COMMENT: whether @iter is the begin iterator
#NAME: iter
#PARENT: GLib.Sequence.set.none
#COMMENT: a #GSequenceIter
#NAME: FormatSizeFlags
#PARENT: GLib
#COMMENT: Flags to modify the format of the string returned by g_format_size_full().
#NAME: bookmark
#PARENT: GLib.BookmarkFile.to_data.utf8
#COMMENT: a #GBookmarkFile
#NAME: load_from_dirs
#PARENT: GLib.KeyFile.load_from_dirs
#COMMENT: %TRUE if a key file could be loaded, %FALSE otherwise
#NAME: octal
#PARENT: GLib.TokenType
#COMMENT: an octal integer
#NAME: data
#PARENT: GLib.Sequence.set.none
#COMMENT: new data for the item
#NAME: date_get_days_in_month
#PARENT: GLib
#COMMENT: Returns the number of days in a month, taking leap
years into account.
#NAME: tz
#PARENT: GLib.DateTime.new_now.DateTime
#COMMENT: a #GTimeZone
#NAME: key
#PARENT: GLib.KeyFile.set_comment.gboolean
#COMMENT: a key
#NAME: cham
#PARENT: GLib.UnicodeScript
#COMMENT: Cham. Since 2.16.3
#NAME: check_replacement
#PARENT: GLib.Regex.check_replacement
#COMMENT: whether @replacement is a valid replacement string
#NAME: seq
#PARENT: GLib.Sequence.search_iter.SequenceIter
#COMMENT: a #GSequence
#NAME: timeout
#PARENT: GLib.poll.gint
#COMMENT: amount of time to wait, in milliseconds, or -1 to wait forever
#NAME: child_source
#PARENT: GLib.Source.remove_child_source.none
#COMMENT: a #GSource previously passed to
    g_source_add_child_source().
#NAME: get_position
#PARENT: GLib.SequenceIter
#COMMENT: Returns the position of @iter
#NAME: channel
#PARENT: GLib.IOChannel.read.IOError
#COMMENT: a #GIOChannel
#NAME: date_get_monday_weeks_in_year
#PARENT: GLib.date_get_monday_weeks_in_year
#COMMENT: number of Mondays in the year
#NAME: get_bytestring
#PARENT: GLib.Variant
#COMMENT: Returns the string value of a #GVariant instance with an
array-of-bytes type.  The string has no particular encoding.

If the array does not end with a nul terminator character, the empty
string is returned.  For this reason, you can always trust that a
non-%NULL nul-terminated string will be returned by this function.

If the array contains a nul terminator character somewhere other than
the last byte then the returned string is the string, up to the first
such nul character.

It is an error to call this function with a @value that is not an
array of bytes.

The return value remains valid as long as @value exists.
#NAME: sequence_set
#PARENT: GLib
#COMMENT: Changes the data for the item pointed to by @iter to be @data. If
the sequence has a data destroy function associated with it, that
function is called on the existing data that @iter pointed to.
#NAME: string_is_valid
#PARENT: GLib.VariantType
#COMMENT: Checks if @type_string is a valid GVariant type string.  This call is
equivalent to calling g_variant_type_string_scan() and confirming
that the following character is a nul terminator.
#NAME: timeout_add_seconds
#PARENT: GLib.timeout_add_seconds
#COMMENT: the ID (greater than 0) of the event source.
#NAME: optimize
#PARENT: GLib.RegexError
#COMMENT: Optimization of the regular expression failed.
#NAME: on_error_stack_trace
#PARENT: GLib
#COMMENT: Invokes gdb, which attaches to the current process and shows a
stack trace. Called by g_on_error_query() when the "[S]tack trace"
option is selected. You can get the current process's program name
with g_get_prgname(), assuming that you have called gtk_init() or
gdk_init().

This function may cause different actions on non-UNIX platforms.
#NAME: prev
#PARENT: GLib.Node
#COMMENT: points to the node's previous sibling.
#NAME: compute_checksum_for_data
#PARENT: GLib
#COMMENT: Computes the checksum for a binary @data of @length. This is a
convenience wrapper for g_checksum_new(), g_checksum_get_string()
and g_checksum_free().

The hexadecimal string returned will be in lower case.
#NAME: size
#PARENT: GLib.StringChunk.new.StringChunk
#COMMENT: the default size of the blocks of memory which are
    allocated to store the strings. If a particular string
    is larger than this default size, a larger block of
    memory will be allocated for it.
#NAME: compat
#PARENT: GLib.unichar_fully_decompose.gsize
#COMMENT: whether perform canonical or compatibility decomposition
#NAME: key_file
#PARENT: GLib.KeyFile.ref.KeyFile
#COMMENT: a #GKeyFile
#NAME: c
#PARENT: GLib.unichar_iswide_cjk.gboolean
#COMMENT: a Unicode character
#NAME: find_interval
#PARENT: GLib.TimeZone.find_interval
#COMMENT: the interval containing @time_, or -1 in case of failure
#NAME: pos
#PARENT: GLib.String.insert_c.String
#COMMENT: the position to insert the byte
#NAME: n
#PARENT: GLib.SList.nth_data.gpointer
#COMMENT: the position of the element
#NAME: last_child
#PARENT: GLib.Node.last_child
#COMMENT: the last child of @node, or %NULL if @node has no children
#NAME: bytes_written
#PARENT: GLib.filename_to_utf8.utf8
#COMMENT: the number of bytes stored in the output buffer (not
                including the terminating nul).
#NAME: chunk
#PARENT: GLib.StringChunk.clear.none
#COMMENT: a #GStringChunk
#NAME: bookmark
#PARENT: GLib.BookmarkFile.load_from_file.gboolean
#COMMENT: an empty #GBookmarkFile struct
#NAME: string
#PARENT: GLib.String.prepend.String
#COMMENT: a #GString
#NAME: SourceCallbackFuncs
#PARENT: GLib
#COMMENT: The `GSourceCallbackFuncs` struct contains
functions for managing callback objects.
#NAME: newval
#PARENT: GLib.atomic_int_compare_and_exchange.gboolean
#COMMENT: the value to conditionally replace with
#NAME: extra_subpattern_name
#PARENT: GLib.RegexError
#COMMENT: different names for subpatterns of the
    same number are not allowed. Since: 2.34
#NAME: array
#PARENT: GLib.ByteArray.free.guint8
#COMMENT: a #GByteArray
#NAME: rofs
#PARENT: GLib.FileError
#COMMENT: The directory containing the new link can't be
    modified because it's on a read-only file system.
#NAME: reader_lock
#PARENT: GLib.RWLock
#COMMENT: Obtain a read lock on @rw_lock. If another thread currently holds
the write lock on @rw_lock or blocks waiting for it, the current
thread will block. Read locks can be taken recursively.

It is implementation-defined how many threads are allowed to
hold read locks on the same lock simultaneously.
#NAME: string
#PARENT: GLib.String.ascii_down.String
#COMMENT: a GString
#NAME: mask
#PARENT: GLib.bit_nth_msf.gint
#COMMENT: a #gulong containing flags
#NAME: get_day_of_week
#PARENT: GLib.DateTime.get_day_of_week
#COMMENT: the day of the week
#NAME: source
#PARENT: GLib.Source.add_child_source.none
#COMMENT: a #GSource
#NAME: in_order
#PARENT: GLib.TraverseType
#COMMENT: vists a node's left child first, then the node itself,
             then its right child. This is the one to use if you
             want the output sorted according to the compare
             function.
#NAME: hash_table_insert
#PARENT: GLib.hash_table_insert
#COMMENT: %TRUE if the key did not exist yet
#NAME: join
#PARENT: GLib.Thread.join
#COMMENT: the return value of the thread
#NAME: 
#PARENT: GLib.set_error.none...
#COMMENT: args for @format
#NAME: flags
#PARENT: GLib.spawn_sync.gboolean
#COMMENT: flags from #GSpawnFlags
#NAME: compare_func
#PARENT: GLib.List.sort_with_data.gpointer
#COMMENT: comparison function
#NAME: log_domain
#PARENT: GLib.log_remove_handler.none
#COMMENT: the log domain
#NAME: working_directory
#PARENT: GLib.spawn_async_with_pipes.gboolean
#COMMENT: child's current working directory, or %NULL to inherit parent's, in the GLib file name encoding
#NAME: strconcat
#PARENT: GLib.strconcat
#COMMENT: a newly-allocated string containing all the string arguments
#NAME: notify
#PARENT: GLib.Source.set_callback.none
#COMMENT: a function to call when @data is no longer in use, or %NULL.
#NAME: timeout_source_new_seconds
#PARENT: GLib.timeout_source_new_seconds
#COMMENT: the newly-created timeout source
#NAME: identifier_2_string
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if identifiers are reported as strings
    (the default is %FALSE).
#NAME: StatBuf
#PARENT: GLib
#COMMENT: A type corresponding to the appropriate struct type for the stat()
system call, depending on the platform and/or compiler being used.

See g_stat() for more information.
#NAME: queue
#PARENT: GLib.Queue.peek_head.gpointer
#COMMENT: a #GQueue
#NAME: hangul_lv_syllable
#PARENT: GLib.UnicodeBreakType
#COMMENT: Hangul LV Syllable (H2)
#NAME: test_name
#PARENT: GLib.test_create_case.TestCase
#COMMENT: the name for the test case
#NAME: data
#PARENT: GLib.SList
#COMMENT: holds the element's data, which can be a pointer to any kind
       of data, or any integer value using the
       [Type Conversion Macros][glib-Type-Conversion-Macros]
#NAME: data
#PARENT: GLib.Source.set_callback.none
#COMMENT: the data to pass to callback function
#NAME: set_seed
#PARENT: GLib.Rand
#COMMENT: Sets the seed for the random number generator #GRand to @seed.
#NAME: TrashStack
#PARENT: GLib
#COMMENT: Each piece of memory that is pushed onto the stack
is cast to a GTrashStack*.
#NAME: take_ref
#PARENT: GLib.Variant.take_ref
#COMMENT: the same @value
#NAME: key
#PARENT: GLib.Hmac.new.Hmac
#COMMENT: the key for the HMAC
#NAME: set_error_hook
#PARENT: GLib.OptionGroup
#COMMENT: Associates a function with @group which will be called
from g_option_context_parse() when an error occurs.

Note that the user data to be passed to @error_func can be
specified when constructing the group with g_option_group_new().
#NAME: variant_type_string_scan
#PARENT: GLib.variant_type_string_scan
#COMMENT: %TRUE if a valid type string was found
#NAME: datalist
#PARENT: GLib.datalist_id_replace_data.gboolean
#COMMENT: location of a datalist
#NAME: user_data
#PARENT: GLib.Variant.new_from_data.Variant
#COMMENT: data for @notify
#NAME: escaped_string
#PARENT: GLib.uri_unescape_string.utf8
#COMMENT: an escaped string to be unescaped.
#NAME: get_strv
#PARENT: GLib.Variant.get_strv
#COMMENT: an array of constant strings
#NAME: seconds
#PARENT: GLib.DateTime.new_utc.DateTime
#COMMENT: the number of seconds past the minute
#NAME: get_year
#PARENT: GLib.Date.get_year
#COMMENT: year in which the date falls
#NAME: ascii_toupper
#PARENT: GLib
#COMMENT: Convert a character to ASCII upper case.

Unlike the standard C library toupper() function, this only
recognizes standard ASCII letters and ignores the locale, returning
all non-ASCII characters unchanged, even if they are upper case
letters in a particular character set. Also unlike the standard
library function, this takes and returns a char, not an int, so
don't call it on %EOF but no need to worry about casting to #guchar
before passing a possibly non-ASCII character in.
#NAME: parse
#PARENT: GLib.Variant.parse
#COMMENT: a non-floating reference to a #GVariant, or %NULL
#NAME: new
#PARENT: GLib.ByteArray
#COMMENT: Creates a new #GByteArray with a reference count of 1.
#NAME: test_incomplete
#PARENT: GLib
#COMMENT: Indicates that a test failed because of some incomplete
functionality. This function can be called multiple times
from the same test.

Calling this function will not stop the test from running, you
need to return from the test function yourself. So you can
produce additional diagnostic messages or even continue running
the test.

If not called from inside a test, this function does nothing.
#NAME: get_microsecond
#PARENT: GLib.DateTime
#COMMENT: Retrieves the microsecond of the date represented by @datetime
#NAME: fallback
#PARENT: GLib.convert_with_fallback.utf8
#COMMENT: UTF-8 string to use in place of character not
               present in the target encoding. (The string must be
               representable in the target encoding).
                  If %NULL, characters not in the target encoding will
                  be represented as Unicode escapes \uxxxx or \Uxxxxyyyy.
#NAME: save
#PARENT: GLib.base64_decode_step.gsize
#COMMENT: Saved state between steps, initialize to 0
#NAME: bit_lock
#PARENT: GLib
#COMMENT: Sets the indicated @lock_bit in @address.  If the bit is already
set, this call will block until g_bit_unlock() unsets the
corresponding bit.

Attempting to lock on two different bits within the same integer is
not supported and will very probably cause deadlocks.

The value of the bit that is set is (1u << @bit).  If @bit is not
between 0 and 31 then the result is undefined.

This function accesses @address atomically.  All other accesses to
@address must be atomic in order for this function to work
reliably.
#NAME: key_id
#PARENT: GLib.datalist_id_remove_no_notify.gpointer
#COMMENT: the #GQuark identifying a data element.
#NAME: unquoted_string
#PARENT: GLib.shell_quote.utf8
#COMMENT: a literal string
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_size.gint
#COMMENT: a #GBookmarkFile
#NAME: new_fixed_array
#PARENT: GLib.Variant.new_fixed_array
#COMMENT: a floating reference to a new array #GVariant instance
#NAME: new_parsed_va
#PARENT: GLib.Variant
#COMMENT: Parses @format and returns the result.

This is the version of g_variant_new_parsed() intended to be used
from libraries.

The return value will be floating if it was a newly created GVariant
instance.  In the case that @format simply specified the collection
of a #GVariant pointer (eg: @format was "%*") then the collected
#GVariant pointer will be returned unmodified, without adding any
additional references.

Note that the arguments in @app must be of the correct width for their types
specified in @format when collected into the #va_list. See
the [GVariant varargs documentation][gvariant-varargs].

In order to behave correctly in all cases it is necessary for the
calling function to g_variant_ref_sink() the return result before
returning control to the user that originally provided the pointer.
At this point, the caller will have their own full reference to the
result.  This can also be done by adding the result to a container,
or by passing it to another g_variant_new() call.
#NAME: duplicate_subpattern_name
#PARENT: GLib.RegexError
#COMMENT: Two named subpatterns have
    the same name. Since 2.16
#NAME: n_bytes
#PARENT: GLib.malloc0.gpointer
#COMMENT: the number of bytes to allocate
#NAME: compare_func
#PARENT: GLib.ByteArray.sort_with_data.none
#COMMENT: comparison function
#NAME: hash_table
#PARENT: GLib.HashTable.replace.gboolean
#COMMENT: a #GHashTable
#NAME: en
#PARENT: GLib.io_channel_error_from_errno.IOChannelError
#COMMENT: an `errno` error number, e.g. `EINVAL`
#NAME: description
#PARENT: GLib.OptionGroup.new.OptionGroup
#COMMENT: a description for this group to be shown in
  `--help`. This string is translated using the translation
  domain or translation function of the group
#NAME: is_first_of_month
#PARENT: GLib.Date
#COMMENT: Returns %TRUE if the date is on the first of a month.
The date must be valid.
#NAME: msg_handler
#PARENT: GLib.Scanner
#COMMENT: handler function for _warn and _error
#NAME: hmac
#PARENT: GLib.Hmac.get_string.utf8
#COMMENT: a #GHmac
#NAME: data
#PARENT: GLib.Sequence.search.SequenceIter
#COMMENT: data for the new item
#NAME: length
#PARENT: GLib.Queue
#COMMENT: the number of elements in the queue
#NAME: ThreadFunc
#PARENT: GLib
#COMMENT: Specifies the type of the @func functions passed to g_thread_new()
or g_thread_try_new().
#NAME: peek_next_token
#PARENT: GLib.Scanner.peek_next_token
#COMMENT: the type of the token
#NAME: get
#PARENT: GLib.Variant
#COMMENT: Deconstructs a #GVariant instance.

Think of this function as an analogue to scanf().

The arguments that are expected by this function are entirely
determined by @format_string.  @format_string also restricts the
permissible types of @value.  It is an error to give a value with
an incompatible type.  See the section on
[GVariant format strings][gvariant-format-strings].
Please note that the syntax of the format string is very likely to be
extended in the future.

@format_string determines the C types that are used for unpacking
the values and also determines if the values are copied or borrowed,
see the section on
[GVariant format strings][gvariant-format-strings-pointers].
#NAME: get_offset
#PARENT: GLib.TimeZone
#COMMENT: Determines the offset to UTC in effect during a particular @interval
of time in the time zone @tz.

The offset is the number of seconds that you add to UTC time to
arrive at local time for @tz (ie: negative numbers for time zones
west of GMT, positive numbers for east).
#NAME: index_
#PARENT: GLib.Variant.get_child.none
#COMMENT: the index of the child to deconstruct
#NAME: remove_all
#PARENT: GLib.Queue
#COMMENT: Remove all elements whose data equals @data from @queue.
#NAME: source
#PARENT: GLib.strcompress.utf8
#COMMENT: a string to compress
#NAME: source
#PARENT: GLib.Source.attach.guint
#COMMENT: a #GSource
#NAME: scanner
#PARENT: GLib.Scanner.cur_line.guint
#COMMENT: a #GScanner
#NAME: get_child_value
#PARENT: GLib.Variant.get_child_value
#COMMENT: the child at the specified index
#NAME: date
#PARENT: GLib.Date.is_first_of_month.gboolean
#COMMENT: a #GDate to check
#NAME: insert_sorted
#PARENT: GLib.List
#COMMENT: Inserts a new element into the list, using the given comparison
function to determine its position.

If you are adding many new elements to a list, and the number of
new elements is much larger than the length of the list, use
g_list_prepend() to add the new items and sort the list afterwards
with g_list_sort().
#NAME: type
#PARENT: GLib.TimeZone.find_interval.gint
#COMMENT: the #GTimeType of @time_
#NAME: rec_mutex
#PARENT: GLib.RecMutex.init.none
#COMMENT: an uninitialized #GRecMutex
#NAME: time_
#PARENT: GLib.Date.set_time.none
#COMMENT: #GTime value to set.
#NAME: string_sized_new
#PARENT: GLib.string_sized_new
#COMMENT: the new #GString
#NAME: peek_tail
#PARENT: GLib.Queue
#COMMENT: Returns the last element of the queue.
#NAME: peek_head
#PARENT: GLib.Queue.peek_head
#COMMENT: the data of the first element in the queue, or %NULL
    if the queue is empty
#NAME: end
#PARENT: GLib.Sequence.move_range.none
#COMMENT: a #GSequenceIter
#NAME: child_setup
#PARENT: GLib.spawn_async.gboolean
#COMMENT: function to run in the child just before exec()
#NAME: new_now
#PARENT: GLib.DateTime.new_now
#COMMENT: a new #GDateTime, or %NULL
#NAME: add_main_entries
#PARENT: GLib.OptionContext
#COMMENT: A convenience function which creates a main group if it doesn't
exist, adds the @entries to it and sets the translation domain.
#NAME: get_end_iter
#PARENT: GLib.Sequence.get_end_iter
#COMMENT: the end iterator for @seq
#NAME: condition
#PARENT: GLib.unix_fd_source_new.Source
#COMMENT: IO conditions to watch for on @fd
#NAME: append
#PARENT: GLib.String
#COMMENT: Adds a string onto the end of a #GString, expanding
it if necessary.
#NAME: new
#PARENT: GLib.Scanner
#COMMENT: Creates a new #GScanner.

The @config_templ structure specifies the initial settings
of the scanner, which are copied into the #GScanner
@config field. If you pass %NULL then the default settings
are used.
#NAME: ch
#PARENT: GLib.unichar_fully_decompose.gsize
#COMMENT: a Unicode character.
#NAME: get_start_group
#PARENT: GLib.KeyFile
#COMMENT: Returns the name of the start group of the file.
#NAME: date
#PARENT: GLib.Date.get_julian.guint32
#COMMENT: a #GDate to extract the Julian day from
#NAME: dummy
#PARENT: GLib.HookList
#COMMENT: unused
#NAME: RegexMatchFlags
#PARENT: GLib
#COMMENT: Flags specifying match-time options.
#NAME: n
#PARENT: GLib.Queue.peek_nth_link.gpointer
#COMMENT: the position of the link
#NAME: string_len
#PARENT: GLib.Regex.match_full.gboolean
#COMMENT: the length of @string, or -1 if @string is nul-terminated
#NAME: iter
#PARENT: GLib.HashTableIter.remove.none
#COMMENT: an initialized #GHashTableIter
#NAME: parse_errors
#PARENT: GLib.Scanner
#COMMENT: g_scanner_error() increments this field
#NAME: child_index
#PARENT: GLib.Node.child_index
#COMMENT: the index of the child of @node which contains
    @data, or -1 if the data is not found
#NAME: compute_hmac_for_data
#PARENT: GLib.compute_hmac_for_data
#COMMENT: the HMAC of the binary data as a string in hexadecimal.
  The returned string should be freed with g_free() when done using it.
#NAME: tag
#PARENT: GLib.Source.query_unix_fd.IOCondition
#COMMENT: the tag from g_source_add_unix_fd()
#NAME: new
#PARENT: GLib.StringChunk.new
#COMMENT: a new #GStringChunk
#NAME: checksum
#PARENT: GLib.Checksum.get_digest.none
#COMMENT: a #GChecksum
#NAME: user_data
#PARENT: GLib.Source.remove_by_user_data.gboolean
#COMMENT: the user_data for the callback.
#NAME: datetime
#PARENT: GLib.DateTime.get_utc_offset.TimeSpan
#COMMENT: a #GDateTime
#NAME: symbol_name
#PARENT: GLib.Scanner.unexp_token.none
#COMMENT: the name of the symbol, if the scanner's current
    token is a symbol.
#NAME: build_filenamev
#PARENT: GLib
#COMMENT: Behaves exactly like g_build_filename(), but takes the path elements
as a string array, instead of varargs. This function is mainly
meant for language bindings.
#NAME: remove
#PARENT: GLib.Source.remove
#COMMENT: For historical reasons, this function always returns %TRUE
#NAME: day
#PARENT: GLib.date_valid_dmy.gboolean
#COMMENT: day
#NAME: expand_references
#PARENT: GLib.MatchInfo.expand_references
#COMMENT: the expanded string, or %NULL if an error occurred
#NAME: tagbanwa
#PARENT: GLib.UnicodeScript
#COMMENT: Tagbanwa
#NAME: atomic
#PARENT: GLib.atomic_pointer_set.none
#COMMENT: a pointer to a #gpointer-sized value
#NAME: cannot_infer_type
#PARENT: GLib.VariantParseError
#COMMENT: cannot infer the #GVariantType
#NAME: hook
#PARENT: GLib.Hook.next_valid.Hook
#COMMENT: the current #GHook
#NAME: hostname_to_ascii
#PARENT: GLib
#COMMENT: Converts @hostname to its canonical ASCII form; an ASCII-only
string containing no uppercase letters and not ending with a
trailing dot.
#NAME: data
#PARENT: GLib.List
#COMMENT: holds the element's data, which can be a pointer to any kind
       of data, or any integer value using the
       [Type Conversion Macros][glib-Type-Conversion-Macros]
#NAME: len
#PARENT: GLib.utf8_normalize.utf8
#COMMENT: length of @str, in bytes, or -1 if @str is nul-terminated.
#NAME: io
#PARENT: GLib.IOChannelError
#COMMENT: IO error.
#NAME: nth_data
#PARENT: GLib.List.nth_data
#COMMENT: the element's data, or %NULL if the position
    is off the end of the #GList
#NAME: log_set_fatal_mask
#PARENT: GLib.log_set_fatal_mask
#COMMENT: the old fatal mask for the log domain
#NAME: flush
#PARENT: GLib.IOChannel.shutdown.IOStatus
#COMMENT: if %TRUE, flush pending
#NAME: cmp_data
#PARENT: GLib.Sequence.search_iter.SequenceIter
#COMMENT: user data passed to @iter_cmp
#NAME: mro
#PARENT: GLib.UnicodeScript
#COMMENT: Mro. Since: 2.42
#NAME: t
#PARENT: GLib.DateTime.new_from_unix_utc.DateTime
#COMMENT: the Unix time
#NAME: limit
#PARENT: GLib.variant_parse.Variant
#COMMENT: a pointer to the end of @text, or %NULL
#NAME: days_between
#PARENT: GLib.Date
#COMMENT: Computes the number of days between two dates.
If @date2 is prior to @date1, the returned value is negative.
Both dates must be valid.
#NAME: mkstemp
#PARENT: GLib.mkstemp
#COMMENT: A file handle (as from open()) to the file
    opened for reading and writing. The file is opened in binary
    mode on platforms where there is a difference. The file handle
    should be closed with close(). In case of errors, -1 is
    returned and %errno will be set.
#NAME: get_day
#PARENT: GLib.Date.get_day
#COMMENT: day of the month
#NAME: flags
#PARENT: GLib.Hook
#COMMENT: flags which are set for this hook. See #GHookFlagMask for
    predefined flags
#NAME: new_signature
#PARENT: GLib.Variant
#COMMENT: Creates a D-Bus type signature #GVariant with the contents of
@string.  @string must be a valid D-Bus type signature.  Use
g_variant_is_signature() if you're not sure.
#NAME: match_num
#PARENT: GLib.MatchInfo.fetch_pos.gboolean
#COMMENT: number of the sub expression
#NAME: msgid_plural
#PARENT: GLib.dngettext.utf8
#COMMENT: plural form of the message
#NAME: len
#PARENT: GLib.ByteArray.prepend.guint8
#COMMENT: the number of bytes to add
#NAME: ref
#PARENT: GLib.Regex.ref
#COMMENT: @regex
#NAME: month
#PARENT: GLib.DateTime.new_utc.DateTime
#COMMENT: the month component of the date
#NAME: new
#PARENT: GLib.KeyFile
#COMMENT: Creates a new empty #GKeyFile object. Use
g_key_file_load_from_file(), g_key_file_load_from_data(),
g_key_file_load_from_dirs() or g_key_file_load_from_data_dirs() to
read an existing key file.
#NAME: outbuf
#PARENT: GLib.IConv.IConv.gsize
#COMMENT: converted output bytes
#NAME: key_file
#PARENT: GLib.KeyFile.load_from_data.gboolean
#COMMENT: an empty #GKeyFile struct
#NAME: unichar_validate
#PARENT: GLib
#COMMENT: Checks whether @ch is a valid Unicode character. Some possible
integer values of @ch will not be valid. 0 is considered a valid
character, though it's normally a string terminator.
#NAME: length
#PARENT: GLib.compute_hmac_for_data.utf8
#COMMENT: length of @data
#NAME: fatal_mask
#PARENT: GLib.log_set_fatal_mask.LogLevelFlags
#COMMENT: the new fatal mask
#NAME: regional_indicator
#PARENT: GLib.UnicodeBreakType
#COMMENT: Regional Indicator (RI). Since: 2.36
#NAME: load_from_data_dirs
#PARENT: GLib.BookmarkFile
#COMMENT: This function looks for a desktop bookmark file named @file in the
paths returned from g_get_user_data_dir() and g_get_system_data_dirs(),
loads the file into @bookmark and returns the file's full path in
@full_path.  If the file could not be loaded then an %error is
set to either a #GFileError or #GBookmarkFileError.
#NAME: node
#PARENT: GLib.Node.copy_deep.Node
#COMMENT: a #GNode
#NAME: last
#PARENT: GLib.SList
#COMMENT: Gets the last element in a #GSList.

This function iterates over the whole list.
#NAME: args
#PARENT: GLib.build_pathv.utf8
#COMMENT: %NULL-terminated array of strings containing the path elements.
#NAME: test_trap_fork
#PARENT: GLib
#COMMENT: Fork the current test program to execute a test case that might
not return or that might abort.

If @usec_timeout is non-0, the forked test case is aborted and
considered failing if its run time exceeds it.

The forking behavior can be configured with the #GTestTrapFlags flags.

In the following example, the test code forks, the forked child
process produces some sample output and exits successfully.
The forking parent process then asserts successful child program
termination and validates child program outputs.

|[<!-- language="C" -->
  static void
  test_fork_patterns (void)
  {
    if (g_test_trap_fork (0, G_TEST_TRAP_SILENCE_STDOUT | G_TEST_TRAP_SILENCE_STDERR))
      {
        g_print ("some stdout text: somagic17\n");
        g_printerr ("some stderr text: semagic43\n");
        exit (0); // successful test run
      }
    g_test_trap_assert_passed ();
    g_test_trap_assert_stdout ("*somagic17*");
    g_test_trap_assert_stderr ("*semagic43*");
  }
]|
#NAME: HRFunc
#PARENT: GLib.HRFunc
#COMMENT: %TRUE if the key/value pair should be removed from the
    #GHashTable
#NAME: char
#PARENT: GLib.TokenType
#COMMENT: a character
#NAME: remove
#PARENT: GLib.PtrArray.remove
#COMMENT: %TRUE if the pointer is removed, %FALSE if the pointer
    is not found in the array
#NAME: get_size
#PARENT: GLib.Bytes.get_size
#COMMENT: the size
#NAME: listenv
#PARENT: GLib
#COMMENT: Gets the names of all variables set in the environment.

Programs that want to be portable to Windows should typically use
this function and g_getenv() instead of using the environ array
from the C library directly. On Windows, the strings in the environ
array are in system codepage encoding, while in most of the typical
use cases for environment variables in GLib-using programs you want
the UTF-8 encoding that this function and g_getenv() provide.
#NAME: push
#PARENT: GLib.ThreadPool.push
#COMMENT: %TRUE on success, %FALSE if an error occurred
#NAME: hook_list
#PARENT: GLib.Hook.ref.Hook
#COMMENT: a #GHookList
#NAME: user_data
#PARENT: GLib.log_set_default_handler.LogFunc
#COMMENT: data passed to the log handler
#NAME: val
#PARENT: GLib.atomic_pointer_xor.gsize
#COMMENT: the value to 'xor'
#NAME: uri
#PARENT: GLib.BookmarkFile.has_group.gboolean
#COMMENT: a valid URI
#NAME: err
#PARENT: GLib.set_error_literal.none
#COMMENT: a return location for a #GError, or %NULL
#NAME: name
#PARENT: GLib.source_set_name_by_id.none
#COMMENT: debug name for the source
#NAME: c
#PARENT: GLib.unichar_isxdigit.gboolean
#COMMENT: a Unicode character.
#NAME: variant_type_string_is_valid
#PARENT: GLib
#COMMENT: Checks if @type_string is a valid GVariant type string.  This call is
equivalent to calling g_variant_type_string_scan() and confirming
that the following character is a nul terminator.
#NAME: 
#PARENT: GLib.markup_printf_escaped.utf8...
#COMMENT: the arguments to insert in the format string
#NAME: day
#PARENT: GLib.Date
#COMMENT: the day of the day-month-year representation of the date,
    as a number between 1 and 31
#NAME: dgettext
#PARENT: GLib
#COMMENT: This function is a wrapper of dgettext() which does not translate
the message if the default domain as set with textdomain() has no
translations for the current locale.

The advantage of using this function over dgettext() proper is that
libraries using this function (like GTK+) will not use translations
if the application using the library does not have translations for
the current locale.  This results in a consistent English-only
interface instead of one having partial translations.  For this
feature to work, the call to textdomain() and setlocale() should
precede any g_dgettext() invocations.  For GTK+, it means calling
textdomain() before gtk_init or its variants.

This function disables translations if and only if upon its first
call all the following conditions hold:

- @domain is not %NULL

- textdomain() has been called to set a default text domain

- there is no translations available for the default text domain
  and the current locale

- current locale is not "C" or any English locales (those
  starting with "en_")

Note that this behavior may not be desired for example if an application
has its untranslated messages in a language other than English. In those
cases the application should call textdomain() after initializing GTK+.

Applications should normally not use this function directly,
but use the _() macro for translations.
#NAME: atomic_int_get
#PARENT: GLib.atomic_int_get
#COMMENT: the value of the integer
#NAME: value
#PARENT: GLib.Variant.new_int32.Variant
#COMMENT: a #gint32 value
#NAME: path
#PARENT: GLib.Dir.open.Dir
#COMMENT: the path to the directory you are interested in. On Unix
        in the on-disk encoding. On Windows in UTF-8
#NAME: unichar_isspace
#PARENT: GLib
#COMMENT: Determines whether a character is a space, tab, or line separator
(newline, carriage return, etc.).  Given some UTF-8 text, obtain a
character value with g_utf8_get_char().

(Note: don't use this to do word breaking; you have to use
Pango or equivalent to get word breaking right, the algorithm
is fairly complex.)
#NAME: add_full
#PARENT: GLib.DateTime.add_full
#COMMENT: the newly created #GDateTime that should be freed with
  g_date_time_unref().
#NAME: dataset_id_remove_no_notify
#PARENT: GLib
#COMMENT: Removes an element, without calling its destroy notification
function.
#NAME: data
#PARENT: GLib.List.insert_before.gpointer
#COMMENT: the data for the new element
#NAME: llink
#PARENT: GLib.SList.position.gint
#COMMENT: an element in the #GSList
#NAME: value
#PARENT: GLib.HRFunc.gboolean
#COMMENT: the value associated with the key
#NAME: move
#PARENT: GLib.SequenceIter
#COMMENT: Returns the #GSequenceIter which is @delta positions away from @iter.
If @iter is closer than -@delta positions to the beginning of the sequence,
the begin iterator is returned. If @iter is closer than @delta positions
to the end of the sequence, the end iterator is returned.
#NAME: condition
#PARENT: GLib.unix_fd_add.guint
#COMMENT: IO conditions to watch for on @fd
#NAME: minutes
#PARENT: GLib.DateTime.add_minutes.DateTime
#COMMENT: the number of minutes to add
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_description.utf8
#COMMENT: a #GBookmarkFile
#NAME: 
#PARENT: GLib.Scanner.error.none...
#COMMENT: the parameters to insert into the format string
#NAME: compute_hmac_for_string
#PARENT: GLib.compute_hmac_for_string
#COMMENT: the HMAC as a hexadecimal string.
    The returned string should be freed with g_free()
    when done using it.
#NAME: get_num_processors
#PARENT: GLib.get_num_processors
#COMMENT: Number of schedulable threads, always greater than 0
#NAME: old_persian
#PARENT: GLib.UnicodeScript
#COMMENT: Old Persian
#NAME: group_name
#PARENT: GLib.KeyFile.set_uint64.none
#COMMENT: a group name
#NAME: get_compile_flags
#PARENT: GLib.Regex
#COMMENT: Returns the compile options that @regex was created with.
#NAME: tz
#PARENT: GLib.TimeZone.adjust_time.gint
#COMMENT: a #GTimeZone
#NAME: get_element_size
#PARENT: GLib.Array.get_element_size
#COMMENT: Size of each element, in bytes
#NAME: unref
#PARENT: GLib.Variant
#COMMENT: Decreases the reference count of @value.  When its reference count
drops to 0, the memory used by the variant is freed.
#NAME: ch
#PARENT: GLib.unichar_get_mirror_char.gboolean
#COMMENT: a Unicode character
#NAME: io_add_watch_full
#PARENT: GLib
#COMMENT: Adds the #GIOChannel into the default main loop context
with the given priority.

This internally creates a main loop source using g_io_create_watch()
and attaches it to the main loop context with g_source_attach().
You can do these steps manually if you need greater control.
#NAME: scope_0_fallback
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if a symbol is searched for in the
    default scope in addition to the current scope (the default is %FALSE).
#NAME: index_
#PARENT: GLib.Array.remove_range.gpointer
#COMMENT: the index of the first element to remove
#NAME: new_string
#PARENT: GLib.Variant
#COMMENT: Creates a string #GVariant with the contents of @string.

@string must be valid UTF-8.
#NAME: datetime
#PARENT: GLib.DateTime.get_week_numbering_year.gint
#COMMENT: a #GDateTime
#NAME: match_full
#PARENT: GLib.Regex.match_full
#COMMENT: %TRUE is the string matched, %FALSE otherwise
#NAME: rand_
#PARENT: GLib.Rand.free.none
#COMMENT: a #GRand
#NAME: str_match_string
#PARENT: GLib.str_match_string
#COMMENT: %TRUE if @potential_hit is a hit
#NAME: source
#PARENT: GLib.Source.set_can_recurse.none
#COMMENT: a #GSource
#NAME: remove_index_fast
#PARENT: GLib.ByteArray.remove_index_fast
#COMMENT: the #GByteArray
#NAME: queue
#PARENT: GLib.AsyncQueue.push.none
#COMMENT: a #GAsyncQueue
#NAME: peek_nth_link
#PARENT: GLib.Queue.peek_nth_link
#COMMENT: the link at the @n'th position, or %NULL
    if @n is off the end of the list
#NAME: HookMarshaller
#PARENT: GLib
#COMMENT: Defines the type of function used by g_hook_list_marshal().
#NAME: init
#PARENT: GLib.HashTableIter
#COMMENT: Initializes a key/value pair iterator and associates it with
@hash_table. Modifying the hash table after calling this function
invalidates the returned iterator.
|[<!-- language="C" -->
GHashTableIter iter;
gpointer key, value;

g_hash_table_iter_init (&iter, hash_table);
while (g_hash_table_iter_next (&iter, &key, &value))
  {
    // do something with key and value
  }
]|
#NAME: utf8_prev_char
#PARENT: GLib.utf8_prev_char
#COMMENT: a pointer to the found character
#NAME: type
#PARENT: GLib.VariantType.first.VariantType
#COMMENT: a tuple or dictionary entry #GVariantType
#NAME: string
#PARENT: GLib.strchomp.utf8
#COMMENT: a string to remove the trailing whitespace from
#NAME: split_simple
#PARENT: GLib.Regex.split_simple
#COMMENT: a %NULL-terminated array of strings. Free
it using g_strfreev()
#NAME: TestFileType
#PARENT: GLib
#COMMENT: The type of file to return the filename for, when used with
g_test_build_filename().

These two options correspond rather directly to the 'dist' and
'built' terminology that automake uses and are explicitly used to
distinguish between the 'srcdir' and 'builddir' being separate.  All
files in your project should either be dist (in the
`DIST_EXTRA` or `dist_schema_DATA`
sense, in which case they will always be in the srcdir) or built (in
the `BUILT_SOURCES` sense, in which case they will
always be in the builddir).

Note: as a general rule of automake, files that are generated only as
part of the build-from-git process (but then are distributed with the
tarball) always go in srcdir (even if doing a srcdir != builddir
build from git) and are considered as distributed files.
#NAME: endptr
#PARENT: GLib.variant_type_string_scan.gboolean
#COMMENT: location to store the end pointer, or %NULL
#NAME: prefix_error
#PARENT: GLib
#COMMENT: Formats a string according to @format and prefix it to an existing
error message. If @err is %NULL (ie: no error variable) then do
nothing.

If *@err is %NULL (ie: an error variable is present but there is no
error condition) then also do nothing. Whether or not it makes sense
to take advantage of this feature is up to you.
#NAME: unichar_digit_value
#PARENT: GLib.unichar_digit_value
#COMMENT: If @c is a decimal digit (according to
g_unichar_isdigit()), its numeric value. Otherwise, -1.
#NAME: value
#PARENT: GLib.Variant.dup_strv.utf8
#COMMENT: an array of strings #GVariant
#NAME: result
#PARENT: GLib.get_current_time.none
#COMMENT: #GTimeVal structure in which to store current time.
#NAME: hook_destroy
#PARENT: GLib.hook_destroy
#COMMENT: %TRUE if the #GHook was found in the #GHookList and destroyed
#NAME: scope_lookup_symbol
#PARENT: GLib.Scanner
#COMMENT: Looks up a symbol in a scope and return its value. If the
symbol is not bound in the scope, %NULL is returned.
#NAME: regex_escape_nul
#PARENT: GLib
#COMMENT: Escapes the nul characters in @string to "\x00".  It can be used
to compile a regex with embedded nul characters.

For completeness, @length can be -1 for a nul-terminated string.
In this case the output string will be of course equal to @string.
#NAME: iconv
#PARENT: GLib
#COMMENT: Same as the standard UNIX routine iconv(), but
may be implemented via libiconv on UNIX flavors that lack
a native implementation.

GLib provides g_convert() and g_locale_to_utf8() which are likely
more convenient than the raw iconv wrappers.
#NAME: new
#PARENT: GLib.Checksum
#COMMENT: Creates a new #GChecksum, using the checksum algorithm @checksum_type.
If the @checksum_type is not known, %NULL is returned.
A #GChecksum can be used to compute the checksum, or digest, of an
arbitrary binary blob, using different hashing algorithms.

A #GChecksum works by feeding a binary blob through g_checksum_update()
until there is data to be checked; the digest can then be extracted
using g_checksum_get_string(), which will return the checksum as a
hexadecimal string; or g_checksum_get_digest(), which will return a
vector of raw bytes. Once either g_checksum_get_string() or
g_checksum_get_digest() have been called on a #GChecksum, the checksum
will be closed and it won't be possible to call g_checksum_update()
on it anymore.
#NAME: args
#PARENT: GLib.String.vprintf.none
#COMMENT: the parameters to insert into the format string
#NAME: str_tokenize_and_fold
#PARENT: GLib.str_tokenize_and_fold
#COMMENT: the folded tokens
#NAME: get_capture_count
#PARENT: GLib.Regex
#COMMENT: Returns the number of capturing subpatterns in the pattern.
#NAME: array
#PARENT: GLib.Array.set_size.gpointer
#COMMENT: a #GArray
#NAME: is_running
#PARENT: GLib.MainLoop.is_running
#COMMENT: %TRUE if the mainloop is currently being run.
#NAME: find
#PARENT: GLib.HashTable.find
#COMMENT: The value of the first key/value pair is returned,
    for which @predicate evaluates to %TRUE. If no pair with the
    requested property is found, %NULL is returned.
#NAME: count
#PARENT: GLib.IOChannel.write_chars.IOStatus
#COMMENT: the size of the buffer. If -1, the buffer
        is taken to be a nul-terminated string.
#NAME: child_watch_add
#PARENT: GLib
#COMMENT: Sets a function to be called when the child indicated by @pid
exits, at a default priority, #G_PRIORITY_DEFAULT.

If you obtain @pid from g_spawn_async() or g_spawn_async_with_pipes()
you will need to pass #G_SPAWN_DO_NOT_REAP_CHILD as flag to
the spawn function for the child watching to work.

Note that on platforms where #GPid must be explicitly closed
(see g_spawn_close_pid()) @pid must not be closed while the
source is still active. Typically, you will want to call
g_spawn_close_pid() in the callback function for the source.

GLib supports only a single callback per process id.

This internally creates a main loop source using
g_child_watch_source_new() and attaches it to the main loop context
using g_source_attach(). You can do these steps manually if you
need greater control.
#NAME: value
#PARENT: GLib.Variant.get_int64.gint64
#COMMENT: a int64 #GVariant instance
#NAME: sharada
#PARENT: GLib.UnicodeScript
#COMMENT: Sharada. Since: 2.32
#NAME: status
#PARENT: GLib.Once
#COMMENT: the status of the #GOnce
#NAME: array
#PARENT: GLib.Array.prepend_vals.gpointer
#COMMENT: a #GArray
#NAME: steal
#PARENT: GLib.HashTable
#COMMENT: Removes a key and its associated value from a #GHashTable without
calling the key and value destroy functions.
#NAME: argvp
#PARENT: GLib.shell_parse_argv.gboolean
#COMMENT: return
  location for array of args, or %NULL
#NAME: user_data
#PARENT: GLib.qsort_with_data.none
#COMMENT: data to pass to @compare_func
#NAME: old_italic
#PARENT: GLib.UnicodeScript
#COMMENT: Old Italic
#NAME: SpawnFlags
#PARENT: GLib
#COMMENT: Flags passed to g_spawn_sync(), g_spawn_async() and g_spawn_async_with_pipes().
#NAME: TestTrapFlags
#PARENT: GLib
#COMMENT: Test traps are guards around forked tests.
These flags determine what traps to set.
#NAME: v
#PARENT: GLib.int_hash.guint
#COMMENT: a pointer to a #gint key
#NAME: unref
#PARENT: GLib.Source
#COMMENT: Decreases the reference count of a source by one. If the
resulting reference count is zero the source and associated
memory will be destroyed.
#NAME: dash_punctuation
#PARENT: GLib.UnicodeType
#COMMENT: General category "Punctuation, Dash" (Pd)
#NAME: insert_after
#PARENT: GLib.Node.insert_after
#COMMENT: the inserted #GNode
#NAME: carian
#PARENT: GLib.UnicodeScript
#COMMENT: Carian. Since 2.16.3
#NAME: set_scope
#PARENT: GLib.Scanner.set_scope
#COMMENT: the old scope id
#NAME: val
#PARENT: GLib.atomic_int_xor.guint
#COMMENT: the value to 'xor'
#NAME: add
#PARENT: GLib.HashTable.add
#COMMENT: %TRUE if the key did not exist yet
#NAME: reverse
#PARENT: GLib.SList.reverse
#COMMENT: the start of the reversed #GSList
#NAME: Quark
#PARENT: GLib
#COMMENT: A GQuark is a non-zero integer which uniquely identifies a
particular string. A GQuark value of zero is associated to %NULL.
#NAME: queue
#PARENT: GLib.AsyncQueue.push_sorted_unlocked.none
#COMMENT: a #GAsyncQueue
#NAME: strsignal
#PARENT: GLib.strsignal
#COMMENT: a UTF-8 string describing the signal. If the signal is unknown,
    it returns "unknown signal (<signum>)".
#NAME: read_unichar
#PARENT: GLib.IOChannel
#COMMENT: Reads a Unicode character from @channel.
This function cannot be called on a channel with %NULL encoding.
#NAME: attach
#PARENT: GLib.Source
#COMMENT: Adds a #GSource to a @context so that it will be executed within
that context. Remove it by calling g_source_destroy().
#NAME: extended
#PARENT: GLib.RegexCompileFlags
#COMMENT: Whitespace data characters in the pattern are
    totally ignored except when escaped or inside a character class.
    Whitespace does not include the VT character (code 11). In addition,
    characters between an unescaped "#" outside a character class and
    the next newline character, inclusive, are also ignored. This can
    be changed within a pattern by a "(?x)" option setting.
#NAME: replace_literal
#PARENT: GLib.Regex
#COMMENT: Replaces all occurrences of the pattern in @regex with the
replacement text. @replacement is replaced literally, to
include backreferences use g_regex_replace().

Setting @start_position differs from just passing over a
shortened string and setting #G_REGEX_MATCH_NOTBOL in the
case of a pattern that begins with any kind of lookbehind
assertion, such as "\b".
#NAME: node
#PARENT: GLib.Node.unlink.none
#COMMENT: the #GNode to unlink, which becomes the root of a new tree
#NAME: bytes
#PARENT: GLib.Bytes.new_from_bytes.Bytes
#COMMENT: a #GBytes
#NAME: month
#PARENT: GLib.Date.get_days_in_month.guint8
#COMMENT: month
#NAME: element
#PARENT: GLib.VariantType.element
#COMMENT: the element type of @type

Since 2.24
#NAME: is_subtype_of
#PARENT: GLib.VariantType.is_subtype_of
#COMMENT: %TRUE if @type is a subtype of @supertype

Since 2.24
#NAME: again
#PARENT: GLib.IOStatus
#COMMENT: Resource temporarily unavailable.
#NAME: key
#PARENT: GLib.Variant.lookup.gboolean
#COMMENT: the key to lookup in the dictionary
#NAME: ascii_strcasecmp
#PARENT: GLib.ascii_strcasecmp
#COMMENT: 0 if the strings match, a negative value if @s1 < @s2,
    or a positive value if @s1 > @s2.
#NAME: set_boolean_list
#PARENT: GLib.KeyFile
#COMMENT: Associates a list of boolean values with @key under @group_name.
If @key cannot be found then it is created.
If @group_name is %NULL, the start_group is used.
#NAME: ref
#PARENT: GLib.Hmac
#COMMENT: Atomically increments the reference count of @hmac by one.

This function is MT-safe and may be called from any thread.
#NAME: remove_group
#PARENT: GLib.BookmarkFile
#COMMENT: Removes @group from the list of groups to which the bookmark
for @uri belongs to.

In the event the URI cannot be found, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.
In the event no group was defined, %FALSE is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_INVALID_VALUE.
#NAME: left_brace
#PARENT: GLib.TokenType
#COMMENT: a '[' character
#NAME: bookmark
#PARENT: GLib.BookmarkFile.set_groups.none
#COMMENT: a #GBookmarkFile
#NAME: spacing_mark
#PARENT: GLib.UnicodeType
#COMMENT: General category "Mark, Spacing" (Mc)
#NAME: last
#PARENT: GLib.List
#COMMENT: Gets the last element in a #GList.
#NAME: strcanon
#PARENT: GLib
#COMMENT: For each character in @string, if the character is not in @valid_chars,
replaces the character with @substitutor. Modifies @string in place,
and return @string itself, not a copy. The return value is to allow
nesting such as
|[<!-- language="C" -->
  g_ascii_strup (g_strcanon (str, "abc", '?'))
]|
#NAME: need_valids
#PARENT: GLib.Hook.find_func.Hook
#COMMENT: %TRUE if #GHook elements which have been destroyed
    should be skipped
#NAME: string
#PARENT: GLib.KeyFile.set_string.none
#COMMENT: a string
#NAME: insert_sorted_with_data
#PARENT: GLib.SList
#COMMENT: Inserts a new element into the list, using the given
comparison function to determine its position.
#NAME: builder
#PARENT: GLib.VariantBuilder.ref.VariantBuilder
#COMMENT: a #GVariantBuilder allocated by g_variant_builder_new()
#NAME: ref
#PARENT: GLib.MainContext.ref
#COMMENT: the @context that was passed in (since 2.6)
#NAME: iter_cmp
#PARENT: GLib.Sequence.sort_changed_iter.none
#COMMENT: the function used to compare iterators in the sequence
#NAME: func
#PARENT: GLib.Node.children_foreach.none
#COMMENT: the function to call for each visited node
#NAME: count
#PARENT: GLib.BookmarkFile.get_app_info.gboolean
#COMMENT: return location for the registration count, or %NULL
#NAME: lisu
#PARENT: GLib.UnicodeScript
#COMMENT: Lisu. Since 2.26
#NAME: date_valid_month
#PARENT: GLib.date_valid_month
#COMMENT: %TRUE if the month is valid
#NAME: datetime
#PARENT: GLib.DateTime.get_day_of_week.gint
#COMMENT: a #GDateTime
#NAME: get_groups
#PARENT: GLib.KeyFile
#COMMENT: Returns all groups in the key file loaded with @key_file.
The array of returned groups will be %NULL-terminated, so
@length may optionally be %NULL.
#NAME: insert
#PARENT: GLib.SList.insert
#COMMENT: the new start of the #GSList
#NAME: haystack
#PARENT: GLib.strrstr_len.utf8
#COMMENT: a nul-terminated string
#NAME: variant_is_object_path
#PARENT: GLib
#COMMENT: Determines if a given string is a valid D-Bus object path.  You
should ensure that a string is a valid D-Bus object path before
passing it to g_variant_new_object_path().

A valid object path starts with '/' followed by zero or more
sequences of characters separated by '/' characters.  Each sequence
must contain only the characters "[A-Z][a-z][0-9]_".  No sequence
(including the one following the final '/' character) may be empty.
#NAME: basename
#PARENT: GLib.basename
#COMMENT: the name of the file without any leading
    directory components
#NAME: new
#PARENT: GLib.BookmarkFile
#COMMENT: Creates a new empty #GBookmarkFile object.

Use g_bookmark_file_load_from_file(), g_bookmark_file_load_from_data()
or g_bookmark_file_load_from_data_dirs() to read an existing bookmark
file.
#NAME: exclusive
#PARENT: GLib.ThreadPool
#COMMENT: are all threads exclusive to this pool
#NAME: random_int
#PARENT: GLib.random_int
#COMMENT: a random number
#NAME: atomic_pointer_and
#PARENT: GLib
#COMMENT: Performs an atomic bitwise 'and' of the value of @atomic and @val,
storing the result back in @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic &= val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.
#NAME: type
#PARENT: GLib.VariantType.is_dict_entry.gboolean
#COMMENT: a #GVariantType
#NAME: next
#PARENT: GLib.VariantType
#COMMENT: Determines the next item type of a tuple or dictionary entry
type.

@type must be the result of a previous call to
g_variant_type_first() or g_variant_type_next().

If called on the key type of a dictionary entry then this call
returns the value type.  If called on the value type of a dictionary
entry then this call returns %NULL.

For tuples, %NULL is returned when @type is the last item in a tuple.
#NAME: atomic_pointer_get
#PARENT: GLib
#COMMENT: Gets the current value of @atomic.

This call acts as a full compiler and hardware
memory barrier (before the get).
#NAME: function
#PARENT: GLib.child_watch_add_full.guint
#COMMENT: function to call
#NAME: SourceFunc
#PARENT: GLib
#COMMENT: Specifies the type of function passed to g_timeout_add(),
g_timeout_add_full(), g_idle_add(), and g_idle_add_full().
#NAME: regex
#PARENT: GLib.Regex.get_pattern.utf8
#COMMENT: a #GRegex structure
#NAME: required_micro
#PARENT: GLib.check_version.utf8
#COMMENT: the required micro version
#NAME: ascii_alternates
#PARENT: GLib.str_tokenize_and_fold.utf8
#COMMENT: a
  return location for ASCII alternates
#NAME: escaped_string_end
#PARENT: GLib.uri_unescape_segment.utf8
#COMMENT: Pointer to end of @escaped_string, may be %NULL
#NAME: n_children
#PARENT: GLib.Variant
#COMMENT: Determines the number of children in a container #GVariant instance.
This includes variants, maybes, arrays, tuples and dictionary
entries.  It is an error to call this function on any other type of
#GVariant.

For variants, the return value is always 1.  For values with maybe
types, it is always zero or one.  For arrays, it is the length of the
array.  For tuples it is the number of tuple items (which depends
only on the type).  For dictionary entries, it is always 2

This function is O(1).
#NAME: datalist
#PARENT: GLib.datalist_id_set_data_full.none
#COMMENT: a datalist.
#NAME: erase
#PARENT: GLib.String
#COMMENT: Removes @len bytes from a #GString, starting at position @pos.
The rest of the #GString is shifted down to fill the gap.
#NAME: array
#PARENT: GLib.ByteArray.append.guint8
#COMMENT: a #GByteArray
#NAME: remove_all
#PARENT: GLib.Queue.remove_all
#COMMENT: the number of elements removed from @queue
#NAME: test_trap_has_passed
#PARENT: GLib.test_trap_has_passed
#COMMENT: %TRUE if the last test subprocess terminated successfully.
#NAME: n_block_bytes
#PARENT: GLib.malloc_n.gpointer
#COMMENT: the size of each block in bytes
#NAME: missing_digit
#PARENT: GLib.RegexError
#COMMENT: Missing digit. Since 2.34
#NAME: scan_identifier_1char
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if single-character
    identifiers are recognized (the default is %FALSE).
#NAME: pop_nth
#PARENT: GLib.Queue.pop_nth
#COMMENT: the element's data, or %NULL if @n is off the end of @queue
#NAME: pspec1
#PARENT: GLib.PatternSpec.equal.gboolean
#COMMENT: a #GPatternSpec
#NAME: date
#PARENT: GLib.Date.set_time_t.none
#COMMENT: a #GDate
#NAME: pspec2
#PARENT: GLib.PatternSpec.equal.gboolean
#COMMENT: another #GPatternSpec
#NAME: prepend_c
#PARENT: GLib.String
#COMMENT: Adds a byte onto the start of a #GString,
expanding it if necessary.
#NAME: strdup
#PARENT: GLib.strdup
#COMMENT: a newly-allocated copy of @str
#NAME: mkstemp_full
#PARENT: GLib.mkstemp_full
#COMMENT: A file handle (as from open()) to the file
    opened for reading and writing. The file handle should be
    closed with close(). In case of errors, -1 is returned
    and %errno will be set.
#NAME: remove_key
#PARENT: GLib.KeyFile.remove_key
#COMMENT: %TRUE if the key was removed, %FALSE otherwise
#NAME: context
#PARENT: GLib.OptionContext.add_main_entries.none
#COMMENT: a #GOptionContext
#NAME: yi
#PARENT: GLib.UnicodeScript
#COMMENT: Yi
#NAME: list
#PARENT: GLib.List.nth_prev.gpointer
#COMMENT: a #GList
#NAME: key
#PARENT: GLib.KeyFile.get_int64.gint64
#COMMENT: a non-%NULL key
#NAME: file_type
#PARENT: GLib.test_build_filename.utf8
#COMMENT: the type of file (built vs. distributed)
#NAME: fbig
#PARENT: GLib.IOChannelError
#COMMENT: File too large.
#NAME: new_boolean
#PARENT: GLib.Variant
#COMMENT: Creates a new boolean #GVariant instance -- either %TRUE or %FALSE.
#NAME: str
#PARENT: GLib.convert_with_iconv.utf8
#COMMENT: the string to convert
#NAME: get_length
#PARENT: GLib.Sequence.get_length
#COMMENT: the length of @seq
#NAME: next
#PARENT: GLib.SequenceIter
#COMMENT: Returns an iterator pointing to the next position after @iter.
If @iter is the end iterator, the end iterator is returned.
#NAME: datetime
#PARENT: GLib.DateTime.get_year.gint
#COMMENT: A #GDateTime
#NAME: data
#PARENT: GLib.DuplicateFunc.gpointer
#COMMENT: the data to duplicate
#NAME: get_buffered
#PARENT: GLib.IOChannel.get_buffered
#COMMENT: %TRUE if the @channel is buffered.
#NAME: remove_child_source
#PARENT: GLib.Source
#COMMENT: Detaches @child_source from @source and destroys it.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.
#NAME: check_format_string
#PARENT: GLib.Variant.check_format_string
#COMMENT: %TRUE if @format_string is safe to use
#NAME: nth_data
#PARENT: GLib.SList
#COMMENT: Gets the data of the element at the given position.
#NAME: ref
#PARENT: GLib.DateTime
#COMMENT: Atomically increments the reference count of @datetime by one.
#NAME: notify
#PARENT: GLib.Variant.new_from_data.Variant
#COMMENT: function to call when @data is no longer needed
#NAME: c
#PARENT: GLib.unichar_digit_value.gint
#COMMENT: a Unicode character
#NAME: shell_parse_argv
#PARENT: GLib
#COMMENT: Parses a command line into an argument vector, in much the same way
the shell would, but without many of the expansions the shell would
perform (variable expansion, globs, operators, filename expansion,
etc. are not supported). The results are defined to be the same as
those you would get from a UNIX98 /bin/sh, as long as the input
contains none of the unsupported shell expansions. If the input
does contain such expansions, they are passed through
literally. Possible errors are those from the #G_SHELL_ERROR
domain. Free the returned vector with g_strfreev().
#NAME: utf8_strchr
#PARENT: GLib
#COMMENT: Finds the leftmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to @len bytes.
If @len is -1, allow unbounded search.
#NAME: sized_new
#PARENT: GLib.ByteArray
#COMMENT: Creates a new #GByteArray with @reserved_size bytes preallocated.
This avoids frequent reallocation, if you are going to add many
bytes to the array. Note however that the size of the array is still
0.
#NAME: ref
#PARENT: GLib.Thread.ref
#COMMENT: a new reference to @thread
#NAME: new_uint64
#PARENT: GLib.Variant.new_uint64
#COMMENT: a floating reference to a new uint64 #GVariant instance
#NAME: year
#PARENT: GLib.Date.set_year.none
#COMMENT: year to set
#NAME: equal_sign
#PARENT: GLib.TokenType
#COMMENT: a '=' character
#NAME: isdir
#PARENT: GLib.FileError
#COMMENT: File is a directory; you cannot open a directory
    for writing, or create or remove hard links to it.
#NAME: atomic
#PARENT: GLib.atomic_pointer_and.gsize
#COMMENT: a pointer to a #gpointer-sized value
#NAME: out
#PARENT: GLib.base64_decode_step.gsize
#COMMENT: output buffer
#NAME: string
#PARENT: GLib.String.insert_unichar.String
#COMMENT: a #GString
#NAME: prg_name
#PARENT: GLib.on_error_query.none
#COMMENT: the program name, needed by gdb for the "[S]tack trace"
    option. If @prg_name is %NULL, g_get_prgname() is called to get
    the program name (which will work correctly if gdk_init() or
    gtk_init() has been called)
#NAME: is_signature
#PARENT: GLib.Variant.is_signature
#COMMENT: %TRUE if @string is a D-Bus type signature
#NAME: array
#PARENT: GLib.Array.ref.gpointer
#COMMENT: A #GArray
#NAME: type
#PARENT: GLib.VariantBuilder.init.none
#COMMENT: a container type
#NAME: thread_error_again
#PARENT: GLib.ThreadError
#COMMENT: a thread couldn't be created due to resource
                       shortage. Try again later.
#NAME: str
#PARENT: GLib.str_to_ascii.utf8
#COMMENT: a string, in UTF-8
#NAME: path_is_absolute
#PARENT: GLib.path_is_absolute
#COMMENT: %TRUE if @file_name is absolute
#NAME: array
#PARENT: GLib.PtrArray.remove_index.gpointer
#COMMENT: a #GPtrArray
#NAME: get_sunday_week_of_year
#PARENT: GLib.Date
#COMMENT: Returns the week of the year during which this date falls, if weeks
are understood to being on Sunday. The date must be valid. Can return
0 if the day is before the first Sunday of the year.
#NAME: value
#PARENT: GLib.HashTable.insert.gboolean
#COMMENT: the value to associate with the key
#NAME: group
#PARENT: GLib.OptionGroup.free.none
#COMMENT: a #GOptionGroup
#NAME: unref
#PARENT: GLib.Hook
#COMMENT: Decrements the reference count of a #GHook.
If the reference count falls to 0, the #GHook is removed
from the #GHookList and g_hook_free() is called to free it.
#NAME: string
#PARENT: GLib.String.printf.none
#COMMENT: a #GString
#NAME: remove_group
#PARENT: GLib.KeyFile
#COMMENT: Removes the specified group, @group_name,
from the key file.
#NAME: copy
#PARENT: GLib.Hmac.copy
#COMMENT: the copy of the passed #GHmac. Use g_hmac_unref()
  when finished using it.
#NAME: insert_sorted
#PARENT: GLib.Hook
#COMMENT: Inserts a #GHook into a #GHookList, sorted by the given function.
#NAME: hostname_to_ascii
#PARENT: GLib.hostname_to_ascii
#COMMENT: an ASCII hostname, which must be freed, or %NULL if
@hostname is in some way invalid.
#NAME: key
#PARENT: GLib.Tree.lookup.gpointer
#COMMENT: the key to look up
#NAME: thread_pool_get_max_unused_threads
#PARENT: GLib.thread_pool_get_max_unused_threads
#COMMENT: the maximal number of unused threads
#NAME: n_blocks
#PARENT: GLib.malloc_n.gpointer
#COMMENT: the number of blocks to allocate
#NAME: SeekType
#PARENT: GLib
#COMMENT: An enumeration specifying the base position for a
g_io_channel_seek_position() operation.
#NAME: lookup_iter
#PARENT: GLib.Sequence
#COMMENT: Like g_sequence_lookup(), but uses a #GSequenceIterCompareFunc
instead of a #GCompareDataFunc as the compare function.

@iter_cmp is called with two iterators pointing into @seq.
It should return 0 if the iterators are equal, a negative value
if the first iterator comes before the second, and a positive
value if the second iterator comes before the first.

This function will fail if the data contained in the sequence is
unsorted.  Use g_sequence_insert_sorted() or
g_sequence_insert_sorted_iter() to add data to your sequence or, if
you want to add a large amount of data, call g_sequence_sort() after
doing unsorted insertions.
#NAME: ref
#PARENT: GLib.DateTime.ref
#COMMENT: the #GDateTime with the reference count increased
#NAME: nth_prev
#PARENT: GLib.List.nth_prev
#COMMENT: the element, or %NULL if the position is
    off the end of the #GList
#NAME: iter
#PARENT: GLib.VariantIter.n_children.gsize
#COMMENT: a #GVariantIter
#NAME: user_data
#PARENT: GLib.spawn_async_with_pipes.gboolean
#COMMENT: user data for @child_setup
#NAME: ucs4_to_utf8
#PARENT: GLib
#COMMENT: Convert a string from a 32-bit fixed width representation as UCS-4.
to UTF-8. The result will be terminated with a 0 byte.
#NAME: set_modified
#PARENT: GLib.BookmarkFile
#COMMENT: Sets the last time the bookmark for @uri was last modified.

If no bookmark for @uri is found then it is created.

The "modified" time should only be set when the bookmark's meta-data
was actually changed.  Every function of #GBookmarkFile that
modifies a bookmark also changes the modification time, except for
g_bookmark_file_set_visited().
#NAME: set_name
#PARENT: GLib.Source
#COMMENT: Sets a name for the source, used in debugging and profiling.
The name defaults to #NULL.

The source name should describe in a human-readable way
what the source does. For example, "X11 event queue"
or "GTK+ repaint idle handler" or whatever it is.

It is permitted to call this function multiple times, but is not
recommended due to the potential performance impact.  For example,
one could change the name in the "check" function of a #GSourceFuncs
to include details like the event type in the source name.

Use caution if changing the name while another thread may be
accessing it with g_source_get_name(); that function does not copy
the value, and changing the value will free it while the other thread
may be attempting to use it.
#NAME: length
#PARENT: GLib.IOChannel.get_line_term.utf8
#COMMENT: a location to return the length of the line terminator
#NAME: unlock
#PARENT: GLib.RecMutex
#COMMENT: Unlocks @rec_mutex. If another thread is blocked in a
g_rec_mutex_lock() call for @rec_mutex, it will become unblocked
and can lock @rec_mutex itself.

Calling g_rec_mutex_unlock() on a recursive mutex that is not
locked by the current thread leads to undefined behaviour.
#NAME: manichaean
#PARENT: GLib.UnicodeScript
#COMMENT: Manichaean. Since: 2.42
#NAME: new
#PARENT: GLib.KeyFile.new
#COMMENT: an empty #GKeyFile.
#NAME: atomic_pointer_xor
#PARENT: GLib
#COMMENT: Performs an atomic bitwise 'xor' of the value of @atomic and @val,
storing the result back in @atomic.

Think of this operation as an atomic version of
`{ tmp = *atomic; *atomic ^= val; return tmp; }`.

This call acts as a full compiler and hardware memory barrier.
#NAME: han
#PARENT: GLib.UnicodeScript
#COMMENT: Han
#NAME: match_options
#PARENT: GLib.Regex.replace_eval.utf8
#COMMENT: options for the match
#NAME: user_data
#PARENT: GLib.HashTable.foreach.none
#COMMENT: user data to pass to the function
#NAME: has_group
#PARENT: GLib.BookmarkFile.has_group
#COMMENT: %TRUE if @group was found.
#NAME: boolean
#PARENT: GLib.MarkupCollectType
#COMMENT: expects a parameter of type (gboolean *)
    and parses the attribute value as a boolean. Sets %FALSE if the
    attribute isn't present. Valid boolean values consist of
    (case-insensitive) "false", "f", "no", "n", "0" and "true", "t",
    "yes", "y", "1"
#NAME: string
#PARENT: GLib.String.overwrite.String
#COMMENT: a #GString
#NAME: hook_list
#PARENT: GLib.Hook.find.Hook
#COMMENT: a #GHookList
#NAME: get_day_of_week
#PARENT: GLib.DateTime
#COMMENT: Retrieves the ISO 8601 day of the week on which @datetime falls (1 is
Monday, 2 is Tuesday... 7 is Sunday).
#NAME: total_elems
#PARENT: GLib.qsort_with_data.none
#COMMENT: elements in the array
#NAME: TraverseFlags
#PARENT: GLib
#COMMENT: Specifies which nodes are visited during several of the tree
functions, including g_node_traverse() and g_node_find().
#NAME: is_dst
#PARENT: GLib.TimeZone.is_dst
#COMMENT: %TRUE if daylight savings time is in effect
#NAME: to_iso8601
#PARENT: GLib.TimeVal.to_iso8601
#COMMENT: a newly allocated string containing an ISO 8601 date
#NAME: scanner
#PARENT: GLib.Scanner.scope_foreach_symbol.none
#COMMENT: a #GScanner
#NAME: unichar_iswide_cjk
#PARENT: GLib
#COMMENT: Determines if a character is typically rendered in a double-width
cell under legacy East Asian locales.  If a character is wide according to
g_unichar_iswide(), then it is also reported wide with this function, but
the converse is not necessarily true. See the
[Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)
for details.

If a character passes the g_unichar_iswide() test then it will also pass
this test, but not the other way around.  Note that some characters may
pass both this test and g_unichar_iszerowidth().
#NAME: arg_data
#PARENT: GLib.OptionEntry
#COMMENT: If the @arg type is %G_OPTION_ARG_CALLBACK, then @arg_data
    must point to a #GOptionArgFunc callback function, which will be
    called to handle the extra argument. Otherwise, @arg_data is a
    pointer to a location to store the value, the required type of
    the location depends on the @arg type:
    - %G_OPTION_ARG_NONE: %gboolean
    - %G_OPTION_ARG_STRING: %gchar*
    - %G_OPTION_ARG_INT: %gint
    - %G_OPTION_ARG_FILENAME: %gchar*
    - %G_OPTION_ARG_STRING_ARRAY: %gchar**
    - %G_OPTION_ARG_FILENAME_ARRAY: %gchar**
    - %G_OPTION_ARG_DOUBLE: %gdouble
    If @arg type is %G_OPTION_ARG_STRING or %G_OPTION_ARG_FILENAME,
    the location will contain a newly allocated string if the option
    was given. That string needs to be freed by the callee using g_free().
    Likewise if @arg type is %G_OPTION_ARG_STRING_ARRAY or
    %G_OPTION_ARG_FILENAME_ARRAY, the data should be freed using g_strfreev().
#NAME: too_many_forward_references
#PARENT: GLib.RegexError
#COMMENT: too many forward references. Since: 2.34
#NAME: NodeForeachFunc
#PARENT: GLib
#COMMENT: Specifies the type of function passed to g_node_children_foreach().
The function is called with each child node, together with the user
data passed to g_node_children_foreach().
#NAME: get_locale_variants
#PARENT: GLib.get_locale_variants
#COMMENT: a newly
  allocated array of newly allocated strings with the locale variants. Free with
  g_strfreev().
#NAME: tree
#PARENT: GLib.Tree.height.gint
#COMMENT: a #GTree
#NAME: filename
#PARENT: GLib.MappedFile.new.MappedFile
#COMMENT: The path of the file to load, in the GLib filename encoding
#NAME: clear_error
#PARENT: GLib
#COMMENT: If @err is %NULL, does nothing. If @err is non-%NULL,
calls g_error_free() on *@err and sets *@err to %NULL.
#NAME: hash_table
#PARENT: GLib.hash_table_steal.gboolean
#COMMENT: a #GHashTable
#NAME: user_data
#PARENT: GLib.datalist_id_dup_data.gpointer
#COMMENT: passed as user_data to @dup_func
#NAME: is_leap_year
#PARENT: GLib.Date
#COMMENT: Returns %TRUE if the year is a leap year.

For the purposes of this function, leap year is every year
divisible by 4 unless that year is divisible by 100. If it
is divisible by 100 it would be a leap year only if that year
is also divisible by 400.
#NAME: user_data
#PARENT: GLib.datalist_foreach.none
#COMMENT: user data to pass to the function.
#NAME: value
#PARENT: GLib.Variant.iter_new.VariantIter
#COMMENT: a container #GVariant
#NAME: position
#PARENT: GLib.SList.position
#COMMENT: the position of the element in the #GSList,
    or -1 if the element is not found
#NAME: append_len
#PARENT: GLib.String
#COMMENT: Appends @len bytes of @val to @string. Because @len is
provided, @val may contain embedded nuls and need not
be nul-terminated.

Since this function does not stop at nul bytes, it is
the caller's responsibility to ensure that @val has at
least @len addressable bytes.
#NAME: atomic_pointer_add
#PARENT: GLib.atomic_pointer_add
#COMMENT: the value of @atomic before the add, signed
#NAME: file_test
#PARENT: GLib
#COMMENT: Returns %TRUE if any of the tests in the bitfield @test are
%TRUE. For example, `(G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR)`
will return %TRUE if the file exists; the check whether it's a
directory doesn't matter since the existence test is %TRUE. With
the current set of available tests, there's no point passing in
more than one test at a time.

Apart from %G_FILE_TEST_IS_SYMLINK all tests follow symbolic links,
so for a symbolic link to a regular file g_file_test() will return
%TRUE for both %G_FILE_TEST_IS_SYMLINK and %G_FILE_TEST_IS_REGULAR.

Note, that for a dangling symbolic link g_file_test() will return
%TRUE for %G_FILE_TEST_IS_SYMLINK and %FALSE for all other flags.

You should never use g_file_test() to test whether it is safe
to perform an operation, because there is always the possibility
of the condition changing before you actually perform the operation.
For example, you might think you could use %G_FILE_TEST_IS_SYMLINK
to know whether it is safe to write to a file without being
tricked into writing into a different location. It doesn't work!
|[<!-- language="C" -->
 // DON'T DO THIS
 if (!g_file_test (filename, G_FILE_TEST_IS_SYMLINK))
   {
     fd = g_open (filename, O_WRONLY);
     // write to fd
   }
]|

Another thing to note is that %G_FILE_TEST_EXISTS and
%G_FILE_TEST_IS_EXECUTABLE are implemented using the access()
system call. This usually doesn't matter, but if your program
is setuid or setgid it means that these tests will give you
the answer for the real user ID and group ID, rather than the
effective user ID and group ID.

On Windows, there are no symlinks, so testing for
%G_FILE_TEST_IS_SYMLINK will always return %FALSE. Testing for
%G_FILE_TEST_IS_EXECUTABLE will just check that the file exists and
its name indicates that it is executable, checking for well-known
extensions and those listed in the `PATHEXT` environment variable.
#NAME: uri
#PARENT: GLib.BookmarkFile.remove_item.gboolean
#COMMENT: a valid URI
#NAME: length
#PARENT: GLib.IOChannel.read_line.IOStatus
#COMMENT: location to store length of the read data, or %NULL
#NAME: unlink
#PARENT: GLib.Node
#COMMENT: Unlinks a #GNode from a tree, resulting in two separate trees.
#NAME: string
#PARENT: GLib.intern_string.utf8
#COMMENT: a string
#NAME: is_array
#PARENT: GLib.VariantType
#COMMENT: Determines if the given @type is an array type.  This is true if the
type string for @type starts with an 'a'.

This function returns %TRUE for any indefinite type for which every
definite subtype is an array type -- %G_VARIANT_TYPE_ARRAY, for
example.
#NAME: time_
#PARENT: GLib.time_val_from_iso8601.gboolean
#COMMENT: a #GTimeVal
#NAME: string
#PARENT: GLib.variant_is_signature.gboolean
#COMMENT: a normal C nul-terminated string
#NAME: push
#PARENT: GLib.TestLogBuffer
#COMMENT: Internal function for gtester to decode test log messages, no ABI guarantees provided.
#NAME: uri_parse_scheme
#PARENT: GLib.uri_parse_scheme
#COMMENT: The "Scheme" component of the URI, or %NULL on error.
The returned string should be freed when no longer needed.
#NAME: new_with_free_func
#PARENT: GLib.PtrArray
#COMMENT: Creates a new #GPtrArray with a reference count of 1 and use
@element_free_func for freeing each element when the array is destroyed
either via g_ptr_array_unref(), when g_ptr_array_free() is called with
@free_segment set to %TRUE or when removing elements.
#NAME: match_info
#PARENT: GLib.MatchInfo.get_match_count.gint
#COMMENT: a #GMatchInfo structure
#NAME: node
#PARENT: GLib.Node.reverse_children.none
#COMMENT: a #GNode.
#NAME: new
#PARENT: GLib.ByteArray.new
#COMMENT: the new #GByteArray
#NAME: month
#PARENT: GLib.Date.valid_dmy.gboolean
#COMMENT: month
#NAME: init
#PARENT: GLib.VariantIter
#COMMENT: Initialises (without allocating) a #GVariantIter.  @iter may be
completely uninitialised prior to this call; its old value is
ignored.

The iterator remains valid for as long as @value exists, and need not
be freed in any way.
#NAME: hash_table_contains
#PARENT: GLib
#COMMENT: Checks if @key is in @hash_table.
#NAME: paragraph_separator
#PARENT: GLib.UnicodeType
#COMMENT: General category "Separator, Paragraph" (Zp)
#NAME: size
#PARENT: GLib.HashTable.size
#COMMENT: the number of key/value pairs in the #GHashTable.
#NAME: child_pid
#PARENT: GLib.spawn_async_with_pipes.gboolean
#COMMENT: return location for child process ID, or %NULL
#NAME: khudawadi
#PARENT: GLib.UnicodeScript
#COMMENT: Khudawadi, Sindhi. Since: 2.42
#NAME: new_from_timeval_local
#PARENT: GLib.DateTime
#COMMENT: Creates a #GDateTime corresponding to the given #GTimeVal @tv in the
local time zone.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC, regardless of the
local time offset.

This call can fail (returning %NULL) if @tv represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.
#NAME: new_full
#PARENT: GLib.PtrArray.new_full
#COMMENT: A new #GPtrArray
#NAME: iter
#PARENT: GLib.sequence_remove.none
#COMMENT: a #GSequenceIter
#NAME: fd
#PARENT: GLib.unix_fd_add.guint
#COMMENT: a file descriptor
#NAME: hook
#PARENT: GLib.hook_destroy_link.none
#COMMENT: the #GHook to remove
#NAME: value
#PARENT: GLib.Variant.unref.none
#COMMENT: a #GVariant
#NAME: str_has_suffix
#PARENT: GLib
#COMMENT: Looks whether the string @str ends with @suffix.
#NAME: alloc
#PARENT: GLib.SList.alloc
#COMMENT: a pointer to the newly-allocated #GSList element.
#NAME: user_data
#PARENT: GLib.CompareDataFunc.gint
#COMMENT: user data
#NAME: new_byte
#PARENT: GLib.Variant.new_byte
#COMMENT: a floating reference to a new byte #GVariant instance
#NAME: fd
#PARENT: GLib.IOChannel.unix_new.IOChannel
#COMMENT: a file descriptor.
#NAME: noteol
#PARENT: GLib.RegexMatchFlags
#COMMENT: Specifies that the end of the subject string is
    not the end of a line, so the dollar metacharacter should not match
    it nor (except in multiline mode) a newline immediately before it.
    Setting this without #G_REGEX_MULTILINE (at compile time) causes
    dollar never to match. This option affects only the behaviour of
    the dollar metacharacter, it does not affect "\Z" or "\z".
#NAME: strdupv
#PARENT: GLib.strdupv
#COMMENT: a new %NULL-terminated array of strings.
#NAME: identifier
#PARENT: GLib.TimeZone.new.TimeZone
#COMMENT: a timezone identifier
#NAME: config_templ
#PARENT: GLib.Scanner.new.Scanner
#COMMENT: the initial scanner settings
#NAME: line_feed
#PARENT: GLib.UnicodeBreakType
#COMMENT: Line Feed (LF)
#NAME: scan_identifier
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if identifiers are recognized (the
    default is %TRUE).
#NAME: steal
#PARENT: GLib.Tree
#COMMENT: Removes a key and its associated value from a #GTree without calling
the key and value destroy functions.

If the key does not exist in the #GTree, the function does nothing.
#NAME: iter
#PARENT: GLib.SequenceIter.is_begin.gboolean
#COMMENT: a #GSequenceIter
#NAME: hook_list
#PARENT: GLib.Hook.destroy.gboolean
#COMMENT: a #GHookList
#NAME: try_pop
#PARENT: GLib.AsyncQueue
#COMMENT: Tries to pop data from the @queue. If no data is available,
%NULL is returned.
#NAME: rec_mutex
#PARENT: GLib.RecMutex.unlock.none
#COMMENT: a #GRecMutex
#NAME: list
#PARENT: GLib.List.free.none
#COMMENT: a #GList
#NAME: bytes_written
#PARENT: GLib.IOChannel.write.IOError
#COMMENT: the number of bytes actually written
#NAME: source
#PARENT: GLib.Source.get_name.utf8
#COMMENT: a #GSource
#NAME: GINT64_MODIFIER
#PARENT: GLib
#COMMENT: The platform dependent length modifier for conversion specifiers
for scanning and printing values of type #gint64 or #guint64.
It is a string literal.

Some platforms do not support printing 64-bit integers, even
though the types are supported. On such platforms %G_GINT64_MODIFIER
is not defined.
#NAME: pointer_bit_unlock
#PARENT: GLib
#COMMENT: This is equivalent to g_bit_unlock, but working on pointers (or other
pointer-sized values).

For portability reasons, you may only lock on the bottom 32 bits of
the pointer.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_icon.gboolean
#COMMENT: a #GBookmarkFile
#NAME: scanner
#PARENT: GLib.Scanner.error.none
#COMMENT: a #GScanner
#NAME: string
#PARENT: GLib.quark_from_static_string.Quark
#COMMENT: a string
#NAME: args
#PARENT: GLib.vsprintf.gint
#COMMENT: the list of arguments to insert in the output.
#NAME: from_codeset
#PARENT: GLib.convert_with_fallback.utf8
#COMMENT: character set of @str.
#NAME: context
#PARENT: GLib.OptionContext.set_main_group.none
#COMMENT: a #GOptionContext
#NAME: datetime
#PARENT: GLib.DateTime.ref.DateTime
#COMMENT: a #GDateTime
#NAME: 
#PARENT: GLib.Variant.get_child.none...
#COMMENT: arguments, as per @format_string
#NAME: get_normal_form
#PARENT: GLib.Variant.get_normal_form
#COMMENT: a trusted #GVariant
#NAME: func
#PARENT: GLib.HashTable.foreach.none
#COMMENT: the function to call for each key/value pair
#NAME: init
#PARENT: GLib.string_new.String
#COMMENT: the initial text to copy into the string, or %NULL to
start with an empty string.
#NAME: free
#PARENT: GLib.Array.free
#COMMENT: the element data if @free_segment is %FALSE, otherwise
    %NULL. The element data should be freed using g_free().
#NAME: channel
#PARENT: GLib.IOChannel.seek.IOError
#COMMENT: a #GIOChannel
#NAME: hostname_is_ascii_encoded
#PARENT: GLib.hostname_is_ascii_encoded
#COMMENT: %TRUE if @hostname contains any ASCII-encoded
segments.
#NAME: set_string
#PARENT: GLib.KeyFile
#COMMENT: Associates a new string value with @key under @group_name.
If @key cannot be found then it is created.
If @group_name cannot be found then it is created.
Unlike g_key_file_set_value(), this function handles characters
that need escaping, such as newlines.
#NAME: remove
#PARENT: GLib.Sequence
#COMMENT: Removes the item pointed to by @iter. It is an error to pass the
end iterator to this function.

If the sequence has a data destroy function associated with it, this
function is called on the data for the removed item.
#NAME: is_running
#PARENT: GLib.MainLoop.new.MainLoop
#COMMENT: set to %TRUE to indicate that the loop is running. This
is not very important since calling g_main_loop_run() will set this to
%TRUE anyway.
#NAME: datetime
#PARENT: GLib.DateTime.get_second.gint
#COMMENT: a #GDateTime
#NAME: ref
#PARENT: GLib.MappedFile
#COMMENT: Increments the reference count of @file by one.  It is safe to call
this function from any thread.
#NAME: opsysstring
#PARENT: GLib.locale_to_utf8.utf8
#COMMENT: a string in the encoding of the current locale. On Windows
                this means the system codepage.
#NAME: test_message
#PARENT: GLib
#COMMENT: Add a message to the test report.
#NAME: get_filename_charsets
#PARENT: GLib.get_filename_charsets
#COMMENT: %TRUE if the filename encoding is UTF-8.
#NAME: start_pos
#PARENT: GLib.utf8_substring.utf8
#COMMENT: a character offset within @str
#NAME: PtrArray
#PARENT: GLib
#COMMENT: Contains the public fields of a pointer array.
#NAME: string
#PARENT: GLib.String.free.utf8
#COMMENT: a #GString
#NAME: hash_table_size
#PARENT: GLib.hash_table_size
#COMMENT: the number of key/value pairs in the #GHashTable.
#NAME: offset
#PARENT: GLib.Bytes.new_from_bytes.Bytes
#COMMENT: offset which subsection starts at
#NAME: user_data
#PARENT: GLib.source_remove_by_user_data.gboolean
#COMMENT: the user_data for the callback.
#NAME: not_absolute_path
#PARENT: GLib.ConvertError
#COMMENT: Pathname is not an absolute path.
#NAME: remove_item
#PARENT: GLib.BookmarkFile.remove_item
#COMMENT: %TRUE if the bookmark was removed successfully.
#NAME: format_string
#PARENT: GLib.VariantDict.lookup.gboolean
#COMMENT: a GVariant format string
#NAME: regex
#PARENT: GLib.Regex.get_compile_flags.RegexCompileFlags
#COMMENT: a #GRegex
#NAME: sort_iter
#PARENT: GLib.Sequence
#COMMENT: Like g_sequence_sort(), but uses a #GSequenceIterCompareFunc instead
of a GCompareDataFunc as the compare function

@cmp_func is called with two iterators pointing into @seq. It should
return 0 if the iterators are equal, a negative value if the first
iterator comes before the second, and a positive value if the second
iterator comes before the first.
#NAME: length
#PARENT: GLib.Regex.escape_string.utf8
#COMMENT: the length of @string, or -1 if @string is nul-terminated
#NAME: notcalled
#PARENT: GLib.OnceStatus
#COMMENT: the function has not been called yet.
#NAME: source
#PARENT: GLib.strescape.utf8
#COMMENT: a string to escape
#NAME: list
#PARENT: GLib.SList.sort.gpointer
#COMMENT: a #GSList
#NAME: is_running
#PARENT: GLib.MainLoop
#COMMENT: Checks to see if the main loop is currently being run via g_main_loop_run().
#NAME: partial
#PARENT: GLib.RegexMatchFlags
#COMMENT: Turns on the partial matching feature, for more
    documentation on partial matching see g_match_info_is_partial_match().
#NAME: end_time
#PARENT: GLib.AsyncQueue.timed_pop_unlocked.gpointer
#COMMENT: a #GTimeVal, determining the final time
#NAME: timeout_source_new
#PARENT: GLib
#COMMENT: Creates a new timeout source.

The source will not initially be associated with any #GMainContext
and must be added to one with g_source_attach() before it will be
executed.

The interval given is in terms of monotonic time, not wall clock
time.  See g_get_monotonic_time().
#NAME: cloexec_pipes
#PARENT: GLib.SpawnFlags
#COMMENT: create all pipes with the `O_CLOEXEC` flag set.
    Since: 2.40
#NAME: reverse_children
#PARENT: GLib.Node
#COMMENT: Reverses the order of the children of a #GNode.
(It doesn't change the order of the grandchildren.)
#NAME: match_info
#PARENT: GLib.Regex.match_full.gboolean
#COMMENT: pointer to location where to store
    the #GMatchInfo, or %NULL if you do not need it
#NAME: cmp_func
#PARENT: GLib.Sequence.search.SequenceIter
#COMMENT: the function used to compare items in the sequence
#NAME: wakeup
#PARENT: GLib.MainContext
#COMMENT: If @context is currently blocking in g_main_context_iteration()
waiting for a source to become ready, cause it to stop blocking
and return.  Otherwise, cause the next invocation of
g_main_context_iteration() to return without blocking.

This API is useful for low-level control over #GMainContext; for
example, integrating it with main loop implementations such as
#GMainLoop.

Another related use for this function is when implementing a main
loop with a termination condition, computed from multiple threads:

|[<!-- language="C" -->
  #define NUM_TASKS 10
  static volatile gint tasks_remaining = NUM_TASKS;
  ...
 
  while (g_atomic_int_get (&tasks_remaining) != 0)
    g_main_context_iteration (NULL, TRUE);
]|
 
Then in a thread:
|[<!-- language="C" -->
  perform_work();

  if (g_atomic_int_dec_and_test (&tasks_remaining))
    g_main_context_wakeup (NULL);
]|
#NAME: user_data
#PARENT: GLib.test_log_set_fatal_handler.none
#COMMENT: data passed to the log handler.
#NAME: key
#PARENT: GLib.HashTable.add.gboolean
#COMMENT: a key to insert
#NAME: regex
#PARENT: GLib.Regex.get_max_lookbehind.gint
#COMMENT: a #GRegex structure
#NAME: unref_to_data
#PARENT: GLib.Bytes
#COMMENT: Unreferences the bytes, and returns a pointer the same byte data
contents.

As an optimization, the byte data is returned without copying if this was
the last reference to bytes and bytes was created with g_bytes_new(),
g_bytes_new_take() or g_byte_array_free_to_bytes(). In all other cases the
data is copied.
#NAME: is_signature
#PARENT: GLib.Variant
#COMMENT: Determines if a given string is a valid D-Bus type signature.  You
should ensure that a string is a valid D-Bus type signature before
passing it to g_variant_new_signature().

D-Bus type signatures consist of zero or more definite #GVariantType
strings in sequence.
#NAME: ascii_strtod
#PARENT: GLib.ascii_strtod
#COMMENT: the #gdouble value.
#NAME: insert_unichar
#PARENT: GLib.String
#COMMENT: Converts a Unicode character into UTF-8, and insert it
into the string at the given position.
#NAME: compare_func
#PARENT: GLib.SList.sort_with_data.gpointer
#COMMENT: comparison function
#NAME: default
#PARENT: GLib.SpawnFlags
#COMMENT: no flags, default behaviour
#NAME: test_get_dir
#PARENT: GLib.test_get_dir
#COMMENT: the path of the directory, owned by GLib
#NAME: new_byte
#PARENT: GLib.Variant
#COMMENT: Creates a new byte #GVariant instance.
#NAME: reverse
#PARENT: GLib.List
#COMMENT: Reverses a #GList.
It simply switches the next and prev pointers of each element.
#NAME: 
#PARENT: GLib.strdup_printf.utf8...
#COMMENT: the parameters to insert into the format string
#NAME: newline_crlf
#PARENT: GLib.RegexCompileFlags
#COMMENT: Usually any newline character or character sequence is
    recognized. If this option is set, the only recognized newline character
    sequence is '\r\n'.
#NAME: match_info
#PARENT: GLib.Regex.match_all_full.gboolean
#COMMENT: pointer to location where to store
    the #GMatchInfo, or %NULL if you do not need it
#NAME: n_blocks
#PARENT: GLib.realloc_n.gpointer
#COMMENT: the number of blocks to allocate
#NAME: clear
#PARENT: GLib.Cond
#COMMENT: Frees the resources allocated to a #GCond with g_cond_init().

This function should not be used with a #GCond that has been
statically allocated.

Calling g_cond_clear() for a #GCond on which threads are
blocking leads to undefined behaviour.
#NAME: strict_posix
#PARENT: GLib.OptionContext.set_strict_posix.none
#COMMENT: the new value
#NAME: pop_nth
#PARENT: GLib.Queue
#COMMENT: Removes the @n'th element of @queue and returns its data.
#NAME: cset_identifier_nth
#PARENT: GLib.ScannerConfig
#COMMENT: specifies the characters which can be used
    in identifiers, after the first character (the default is
    #G_CSET_a_2_z, "_0123456789", #G_CSET_A_2_Z, #G_CSET_LATINS,
    #G_CSET_LATINC).
#NAME: queue
#PARENT: GLib.Queue.push_nth_link.none
#COMMENT: a #GQueue
#NAME: init
#PARENT: GLib.Mutex
#COMMENT: Initializes a #GMutex so that it can be used.

This function is useful to initialize a mutex that has been
allocated on the stack, or as part of a larger structure.
It is not necessary to initialize a mutex that has been
statically allocated.

|[<!-- language="C" -->
  typedef struct {
    GMutex m;
    ...
  } Blob;

Blob *b;

b = g_new (Blob, 1);
g_mutex_init (&b->m);
]|

To undo the effect of g_mutex_init() when a mutex is no longer
needed, use g_mutex_clear().

Calling g_mutex_init() on an already initialized #GMutex leads
to undefined behaviour.
#NAME: error
#PARENT: GLib.ScannerMsgFunc.none
#COMMENT: %TRUE if the message signals an error,
    %FALSE if it signals a warning.
#NAME: up
#PARENT: GLib.String.up
#COMMENT: @string
#NAME: destroy
#PARENT: GLib.Hook
#COMMENT: Destroys a #GHook, given its ID.
#NAME: insert_sorted
#PARENT: GLib.SList.insert_sorted
#COMMENT: the new start of the #GSList
#NAME: list
#PARENT: GLib.List.delete_link.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: get_bytestring_array
#PARENT: GLib.Variant
#COMMENT: Gets the contents of an array of array of bytes #GVariant.  This call
makes a shallow copy; the return result should be released with
g_free(), but the individual strings must not be modified.

If @length is non-%NULL then the number of elements in the result is
stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.
#NAME: n_years
#PARENT: GLib.Date.subtract_years.none
#COMMENT: number of years to move
#NAME: get_capture_count
#PARENT: GLib.Regex.get_capture_count
#COMMENT: the number of capturing subpatterns
#NAME: date
#PARENT: GLib.Date.add_years.none
#COMMENT: a #GDate to increment
#NAME: key
#PARENT: GLib.KeyFile.get_string_list.utf8
#COMMENT: a key
#NAME: assertion_expected
#PARENT: GLib.RegexError
#COMMENT: Assertion expected after "(?(".
    Since 2.16
#NAME: get_locale_string
#PARENT: GLib.KeyFile
#COMMENT: Returns the value associated with @key under @group_name
translated in the given @locale if available.  If @locale is
%NULL then the current locale is assumed.

If @key cannot be found then %NULL is returned and @error is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the value associated
with @key cannot be interpreted or no suitable translation can
be found then the untranslated value is returned.
#NAME: end
#PARENT: GLib.VariantBuilder
#COMMENT: Ends the builder process and returns the constructed value.

It is not permissible to use @builder in any way after this call
except for reference counting operations (in the case of a
heap-allocated #GVariantBuilder) or by reinitialising it with
g_variant_builder_init() (in the case of stack-allocated).

It is an error to call this function in any way that would create an
inconsistent value to be constructed (ie: insufficient number of
items added to a container with a specific number of children
required).  It is also an error to call this function if the builder
was created with an indefinite array or maybe type and no children
have been added; in this case it is impossible to infer the type of
the empty array.
#NAME: date
#PARENT: GLib.Date.get_sunday_week_of_year.guint
#COMMENT: a #GDate
#NAME: new_from_unix_local
#PARENT: GLib.DateTime
#COMMENT: Creates a #GDateTime corresponding to the given Unix time @t in the
local time zone.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC, regardless of the local time offset.

This call can fail (returning %NULL) if @t represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.
#NAME: title
#PARENT: GLib.BookmarkFile.set_title.none
#COMMENT: a UTF-8 encoded string
#NAME: oldval
#PARENT: GLib.datalist_id_replace_data.gboolean
#COMMENT: the old value to compare against
#NAME: key
#PARENT: GLib.hash_table_insert.gboolean
#COMMENT: a key to insert
#NAME: ref
#PARENT: GLib.Hmac.ref
#COMMENT: the passed in #GHmac.
#NAME: remove_index_fast
#PARENT: GLib.Array
#COMMENT: Removes the element at the given index from a #GArray. The last
element in the array is used to fill in the space, so this function
does not preserve the order of the #GArray. But it is faster than
g_array_remove_index().
#NAME: data
#PARENT: GLib.Node
#COMMENT: contains the actual data of the node.
#NAME: bytes
#PARENT: GLib.Bytes.get_data.guint8
#COMMENT: a #GBytes
#NAME: remove_group
#PARENT: GLib.BookmarkFile.remove_group
#COMMENT: %TRUE if @group was successfully removed.
#NAME: split_full
#PARENT: GLib.Regex
#COMMENT: Breaks the string on the pattern, and returns an array of the tokens.
If the pattern contains capturing parentheses, then the text for each
of the substrings will also be returned. If the pattern does not match
anywhere in the string, then the whole string is returned as the first
token.

As a special case, the result of splitting the empty string "" is an
empty vector, not a vector containing a single string. The reason for
this special case is that being able to represent a empty vector is
typically more useful than consistent handling of empty elements. If
you do need to represent empty elements, you'll need to check for the
empty string before calling this function.

A pattern that can match empty strings splits @string into separate
characters wherever it matches the empty string between characters.
For example splitting "ab c" using as a separator "\s*", you will get
"a", "b" and "c".

Setting @start_position differs from just passing over a shortened
string and setting #G_REGEX_MATCH_NOTBOL in the case of a pattern
that begins with any kind of lookbehind assertion, such as "\b".
#NAME: funcs
#PARENT: GLib.Source.remove_by_funcs_user_data.gboolean
#COMMENT: The @source_funcs passed to g_source_new()
#NAME: meroitic_hieroglyphs
#PARENT: GLib.UnicodeScript
#COMMENT: Meroitic Hieroglyphs. Since: 2.32
#NAME: ref
#PARENT: GLib.AsyncQueue
#COMMENT: Increases the reference count of the asynchronous @queue by 1.
You do not need to hold the lock to call this function.
#NAME: uri
#PARENT: GLib.BookmarkFile.get_title.utf8
#COMMENT: a valid URI or %NULL
#NAME: signature
#PARENT: GLib.Variant.new_signature.Variant
#COMMENT: a normal C nul-terminated string
#NAME: vasprintf
#PARENT: GLib
#COMMENT: An implementation of the GNU vasprintf() function which supports
positional parameters, as specified in the Single Unix Specification.
This function is similar to g_vsprintf(), except that it allocates a
string to hold the output, instead of putting the output in a buffer
you allocate in advance.
#NAME: data
#PARENT: GLib.Node.children_foreach.none
#COMMENT: user data to pass to the function
#NAME: is_owner
#PARENT: GLib.MainContext
#COMMENT: Determines whether this thread holds the (recursive)
ownership of this #GMainContext. This is useful to
know before waiting on another thread that may be
blocking to get ownership of @context.
#NAME: bookmark
#PARENT: GLib.BookmarkFile.has_application.gboolean
#COMMENT: a #GBookmarkFile
#NAME: data
#PARENT: GLib.SList.remove.gpointer
#COMMENT: the data of the element to remove
#NAME: new_utc
#PARENT: GLib.TimeZone
#COMMENT: Creates a #GTimeZone corresponding to UTC.

This is equivalent to calling g_time_zone_new() with a value like
"Z", "UTC", "+00", etc.

You should release the return value by calling g_time_zone_unref()
when you are done with it.
#NAME: append
#PARENT: GLib.Sequence.append
#COMMENT: an iterator pointing to the new item
#NAME: strcasecmp
#PARENT: GLib
#COMMENT: A case-insensitive string comparison, corresponding to the standard
strcasecmp() function on platforms which support it.
#NAME: string
#PARENT: GLib.Regex.escape_nul.utf8
#COMMENT: the string to escape
#NAME: data
#PARENT: GLib.List.prepend.gpointer
#COMMENT: the data for the new element
#NAME: add
#PARENT: GLib.DateTime
#COMMENT: Creates a copy of @datetime and adds the specified timespan to the copy.
#NAME: prepend
#PARENT: GLib.List
#COMMENT: Prepends a new element on to the start of the list.

Note that the return value is the new start of the list,
which will have changed, so make sure you store the new value.

|[<!-- language="C" -->
// Notice that it is initialized to the empty list.
GList *list = NULL;

list = g_list_prepend (list, "last");
list = g_list_prepend (list, "first");
]|

Do not use this function to prepend a new element to a different
element than the start of the list. Use g_list_insert_before() instead.
#NAME: date_valid_dmy
#PARENT: GLib.date_valid_dmy
#COMMENT: %TRUE if the date is a valid one
#NAME: IOCondition
#PARENT: GLib
#COMMENT: A bitwise combination representing a condition to watch for on an
event source.
#NAME: domain
#PARENT: GLib.set_error_literal.none
#COMMENT: error domain
#NAME: slice_free_chain_with_offset
#PARENT: GLib
#COMMENT: Frees a linked list of memory blocks of structure type @type.

The memory blocks must be equal-sized, allocated via
g_slice_alloc() or g_slice_alloc0() and linked together by a
@next pointer (similar to #GSList). The offset of the @next
field in each block is passed as third argument.
Note that the exact release behaviour can be changed with the
[`G_DEBUG=gc-friendly`][G_DEBUG] environment variable, also see
[`G_SLICE`][G_SLICE] for related debugging options.
#NAME: strdup
#PARENT: GLib
#COMMENT: Duplicates a string. If @str is %NULL it returns %NULL.
The returned string should be freed with g_free()
when no longer needed.
#NAME: c
#PARENT: GLib.unichar_isdigit.gboolean
#COMMENT: a Unicode character
#NAME: pop_head_link
#PARENT: GLib.Queue.pop_head_link
#COMMENT: the #GList element at the head of the queue, or %NULL
    if the queue is empty
#NAME: envp
#PARENT: GLib.spawn_sync.gboolean
#COMMENT: child's environment, or %NULL to inherit parent's
#NAME: PRIORITY_DEFAULT_IDLE
#PARENT: GLib
#COMMENT: Use this for default priority idle functions.

In GLib this priority is used when adding idle functions with
g_idle_add().
#NAME: filename
#PARENT: GLib.filename_display_name.utf8
#COMMENT: a pathname hopefully in the GLib file name encoding
#NAME: unref
#PARENT: GLib.Array
#COMMENT: Atomically decrements the reference count of @array by one. If the
reference count drops to 0, all memory allocated by the array is
released. This function is MT-safe and may be called from any
thread.
#NAME: directory
#PARENT: GLib.get_user_special_dir.utf8
#COMMENT: the logical id of special directory
#NAME: non_spacing_mark
#PARENT: GLib.UnicodeType
#COMMENT: General category "Mark, Nonspacing" (Mn)
#NAME: destroy
#PARENT: GLib.datalist_id_replace_data.gboolean
#COMMENT: destroy notify for the new value
#NAME: key
#PARENT: GLib.HashTable.replace.gboolean
#COMMENT: a key to insert
#NAME: log_level
#PARENT: GLib.log.none
#COMMENT: the log level, either from #GLogLevelFlags
    or a user-defined level
#NAME: timeout_add_seconds_full
#PARENT: GLib.timeout_add_seconds_full
#COMMENT: the ID (greater than 0) of the event source.
#NAME: v1
#PARENT: GLib.int64_equal.gboolean
#COMMENT: a pointer to a #gint64 key
#NAME: get_buffer_size
#PARENT: GLib.IOChannel.get_buffer_size
#COMMENT: the size of the buffer.
#NAME: v2
#PARENT: GLib.int64_equal.gboolean
#COMMENT: a pointer to a #gint64 key to compare with @v1
#NAME: year
#PARENT: GLib.date_valid_year.gboolean
#COMMENT: year
#NAME: pop_head
#PARENT: GLib.Queue.pop_head
#COMMENT: the data of the first element in the queue, or %NULL
    if the queue is empty
#NAME: read_line_string
#PARENT: GLib.IOChannel
#COMMENT: Reads a line from a #GIOChannel, using a #GString as a buffer.
#NAME: open_punctuation
#PARENT: GLib.UnicodeBreakType
#COMMENT: Opening Punctuation (OP)
#NAME: ascii_strncasecmp
#PARENT: GLib.ascii_strncasecmp
#COMMENT: 0 if the strings match, a negative value if @s1 < @s2,
    or a positive value if @s1 > @s2.
#NAME: get_next_token
#PARENT: GLib.Scanner.get_next_token
#COMMENT: the type of the token
#NAME: destroy_func
#PARENT: GLib.dataset_id_set_data_full.none
#COMMENT: the function to call when the data element is
               removed. This function will be called with the data
               element and can be used to free any memory allocated
               for it.
#NAME: str_return
#PARENT: GLib.IOChannel.read_line.IOStatus
#COMMENT: The line read from the #GIOChannel, including the
             line terminator. This data should be freed with g_free()
             when no longer needed. This is a nul-terminated string.
             If a @length of zero is returned, this will be %NULL instead.
#NAME: IOFunc
#PARENT: GLib.IOFunc
#COMMENT: the function should return %FALSE if the event source
         should be removed
#NAME: slice_alloc0
#PARENT: GLib
#COMMENT: Allocates a block of memory via g_slice_alloc() and initializes
the returned memory to 0. Note that the underlying slice allocation
mechanism can be changed with the [`G_SLICE=always-malloc`][G_SLICE]
environment variable.
#NAME: str
#PARENT: GLib.str_has_prefix.gboolean
#COMMENT: a nul-terminated string
#NAME: dup_bytestring_array
#PARENT: GLib.Variant
#COMMENT: Gets the contents of an array of array of bytes #GVariant.  This call
makes a deep copy; the return result should be released with
g_strfreev().

If @length is non-%NULL then the number of elements in the result is
stored there.  In any case, the resulting array will be
%NULL-terminated.

For an empty array, @length will be set to 0 and a pointer to a
%NULL pointer will be returned.
#NAME: regex_check_replacement
#PARENT: GLib.regex_check_replacement
#COMMENT: whether @replacement is a valid replacement string
#NAME: on_error_query
#PARENT: GLib
#COMMENT: Prompts the user with
`[E]xit, [H]alt, show [S]tack trace or [P]roceed`.
This function is intended to be used for debugging use only.
The following example shows how it can be used together with
the g_log() functions.

|[<!-- language="C" -->
#include <glib.h>

static void
log_handler (const gchar   *log_domain,
             GLogLevelFlags log_level,
             const gchar   *message,
             gpointer       user_data)
{
  g_log_default_handler (log_domain, log_level, message, user_data);

  g_on_error_query (MY_PROGRAM_NAME);
}

int
main (int argc, char *argv[])
{
  g_log_set_handler (MY_LOG_DOMAIN,
                     G_LOG_LEVEL_WARNING |
                     G_LOG_LEVEL_ERROR |
                     G_LOG_LEVEL_CRITICAL,
                     log_handler,
                     NULL);
  ...
]|

If "[E]xit" is selected, the application terminates with a call
to _exit(0).

If "[S]tack" trace is selected, g_on_error_stack_trace() is called.
This invokes gdb, which attaches to the current process and shows
a stack trace. The prompt is then shown again.

If "[P]roceed" is selected, the function returns.

This function may cause different actions on non-UNIX platforms.
#NAME: sibling
#PARENT: GLib.Node.insert_after.Node
#COMMENT: the sibling #GNode to place @node after.
    If sibling is %NULL, the node is inserted as the first child of @parent.
#NAME: n
#PARENT: GLib.dngettext.utf8
#COMMENT: the quantity for which translation is needed
#NAME: test_log_set_fatal_handler
#PARENT: GLib
#COMMENT: Installs a non-error fatal log handler which can be
used to decide whether log messages which are counted
as fatal abort the program.

The use case here is that you are running a test case
that depends on particular libraries or circumstances
and cannot prevent certain known critical or warning
messages. So you install a handler that compares the
domain and message to precisely not abort in such a case.

Note that the handler is reset at the beginning of
any test case, so you have to set it inside each test
function which needs the special behavior.

This handler has no effect on g_error messages.
#NAME: strsplit
#PARENT: GLib.strsplit
#COMMENT: a newly-allocated %NULL-terminated array of strings. Use
   g_strfreev() to free it.
#NAME: uri_pattern
#PARENT: GLib.test_bug_base.none
#COMMENT: the base pattern for bug URIs
#NAME: from_iso8601
#PARENT: GLib.TimeVal.from_iso8601
#COMMENT: %TRUE if the conversion was successful.
#NAME: add_months
#PARENT: GLib.DateTime
#COMMENT: Creates a copy of @datetime and adds the specified number of months to the
copy. Add negative values to subtract months.
#NAME: has_application
#PARENT: GLib.BookmarkFile.has_application
#COMMENT: %TRUE if the application @name was found
#NAME: count
#PARENT: GLib.BookmarkFile.set_app_info.gboolean
#COMMENT: the number of registrations done for this application
#NAME: type
#PARENT: GLib.IOChannel.seek.IOError
#COMMENT: the position in the file, which can be %G_SEEK_CUR (the current
       position), %G_SEEK_SET (the start of the file), or %G_SEEK_END
       (the end of the file)
#NAME: hash_table_replace
#PARENT: GLib
#COMMENT: Inserts a new key and value into a #GHashTable similar to
g_hash_table_insert(). The difference is that if the key
already exists in the #GHashTable, it gets replaced by the
new key. If you supplied a @value_destroy_func when creating
the #GHashTable, the old value is freed using that function.
If you supplied a @key_destroy_func when creating the
#GHashTable, the old key is freed using that function.
#NAME: dmy
#PARENT: GLib.Date
#COMMENT: this is set if @day, @month and @year are valid
#NAME: string
#PARENT: GLib.Variant.is_object_path.gboolean
#COMMENT: a normal C nul-terminated string
#NAME: get_match_count
#PARENT: GLib.MatchInfo
#COMMENT: Retrieves the number of matched substrings (including substring 0,
that is the whole matched text), so 1 is returned if the pattern
has no substrings in it and 0 is returned if the match failed.

If the last match was obtained using the DFA algorithm, that is
using g_regex_match_all() or g_regex_match_all_full(), the retrieved
count is not that of the number of capturing parentheses but that of
the number of matched substrings.
#NAME: to_unix
#PARENT: GLib.DateTime
#COMMENT: Gives the Unix time corresponding to @datetime, rounding down to the
nearest second.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC, regardless of the time zone associated with @datetime.
#NAME: wait_
#PARENT: GLib.ThreadPool.free.none
#COMMENT: should the function wait for all tasks to be finished?
#NAME: tree
#PARENT: GLib.Tree.lookup.gpointer
#COMMENT: a #GTree
#NAME: error
#PARENT: GLib.variant_parse_error_print_context.utf8
#COMMENT: a #GError from the #GVariantParseError domain
#NAME: append_unichar
#PARENT: GLib.String.append_unichar
#COMMENT: @string
#NAME: rejang
#PARENT: GLib.UnicodeScript
#COMMENT: Rejang. Since 2.16.3
#NAME: func
#PARENT: GLib.ThreadPool
#COMMENT: the function to execute in the threads of this pool
#NAME: failed
#PARENT: GLib.ShellError
#COMMENT: Some other error.
#NAME: file_not_found
#PARENT: GLib.BookmarkFileError
#COMMENT: requested file was not found
#NAME: pdata
#PARENT: GLib.PtrArray
#COMMENT: points to the array of pointers, which may be moved when the
    array grows
#NAME: hash
#PARENT: GLib.Bytes
#COMMENT: Creates an integer hash code for the byte data in the #GBytes.

This function can be passed to g_hash_table_new() as the @key_hash_func
parameter, when using non-%NULL #GBytes pointers as keys in a #GHashTable.
#NAME: unix_fd_add_full
#PARENT: GLib.unix_fd_add_full
#COMMENT: the ID (greater than 0) of the event source
#NAME: unref
#PARENT: GLib.MappedFile
#COMMENT: Decrements the reference count of @file by one.  If the reference count
drops to 0, unmaps the buffer of @file and frees it.

It is safe to call this function from any thread.

Since 2.22
#NAME: clear
#PARENT: GLib.RecMutex
#COMMENT: Frees the resources allocated to a recursive mutex with
g_rec_mutex_init().

This function should not be used with a #GRecMutex that has been
statically allocated.

Calling g_rec_mutex_clear() on a locked recursive mutex leads
to undefined behaviour.

Sine: 2.32
#NAME: group
#PARENT: GLib.OptionParseFunc.gboolean
#COMMENT: The group to which the function belongs
#NAME: new_full
#PARENT: GLib.HashTable
#COMMENT: Creates a new #GHashTable like g_hash_table_new() with a reference
count of 1 and allows to specify functions to free the memory
allocated for the key and value that get called when removing the
entry from the #GHashTable.

Since version 2.42 it is permissible for destroy notify functions to
recursively remove further items from the hash table. This is only
permissible if the application still holds a reference to the hash table.
This means that you may need to ensure that the hash table is empty by
calling g_hash_table_remove_all before releasing the last reference using
g_hash_table_unref().
#NAME: remove_all
#PARENT: GLib.List.remove_all
#COMMENT: the (possibly changed) start of the #GList
#NAME: CSET_DIGITS
#PARENT: GLib
#COMMENT: The set of ASCII digits.
Used for specifying valid identifier characters
in #GScannerConfig.
#NAME: get_day_of_year
#PARENT: GLib.Date
#COMMENT: Returns the day of the year, where Jan 1 is the first day of the
year. The date must be valid.
#NAME: date_get_sunday_weeks_in_year
#PARENT: GLib.date_get_sunday_weeks_in_year
#COMMENT: the number of weeks in @year
#NAME: queue
#PARENT: GLib.Queue.peek_tail_link.gpointer
#COMMENT: a #GQueue
#NAME: insert_value
#PARENT: GLib.VariantDict
#COMMENT: Inserts (or replaces) a key in a #GVariantDict.

@value is consumed if it is floating.
#NAME: date_time_equal
#PARENT: GLib.date_time_equal
#COMMENT: %TRUE if @dt1 and @dt2 are equal
#NAME: strndup
#PARENT: GLib
#COMMENT: Duplicates the first @n bytes of a string, returning a newly-allocated
buffer @n + 1 bytes long which will always be nul-terminated. If @str
is less than @n bytes long the buffer is padded with nuls. If @str is
%NULL it returns %NULL. The returned value should be freed when no longer
needed.

To copy a number of characters from a UTF-8 encoded string,
use g_utf8_strncpy() instead.
#NAME: data
#PARENT: GLib.timeout_add.guint
#COMMENT: data to pass to @function
#NAME: scope_id
#PARENT: GLib.Scanner.scope_lookup_symbol.gpointer
#COMMENT: the scope id
#NAME: uri
#PARENT: GLib.BookmarkFile.get_visited.glong
#COMMENT: a valid URI
#NAME: free
#PARENT: GLib.TestLogMsg
#COMMENT: Internal function for gtester to free test log messages, no ABI guarantees provided.
#NAME: data
#PARENT: GLib.Queue.remove.gboolean
#COMMENT: the data to remove
#NAME: timespan
#PARENT: GLib.DateTime.add.DateTime
#COMMENT: a #GTimeSpan
#NAME: append
#PARENT: GLib.List.append
#COMMENT: either @list or the new start of the #GList if @list was %NULL
#NAME: is_daylight_savings
#PARENT: GLib.DateTime.is_daylight_savings
#COMMENT: %TRUE if daylight savings time is in effect
#NAME: search_term
#PARENT: GLib.str_match_string.gboolean
#COMMENT: the search term from the user
#NAME: thread_pool_get_num_unused_threads
#PARENT: GLib
#COMMENT: Returns the number of currently unused threads.
#NAME: invalid_signature
#PARENT: GLib.VariantParseError
#COMMENT: not a valid type signature
#NAME: data
#PARENT: GLib.Node.new.Node
#COMMENT: the data of the new node
#NAME: get_ymd
#PARENT: GLib.DateTime
#COMMENT: Retrieves the Gregorian day, month, and year of a given #GDateTime.
#NAME: dictionary
#PARENT: GLib.Variant.lookup.gboolean
#COMMENT: a dictionary #GVariant
#NAME: GSIZE_MODIFIER
#PARENT: GLib
#COMMENT: The platform dependent length modifier for conversion specifiers
for scanning and printing values of type #gsize. It
is a string literal.
#NAME: base
#PARENT: GLib.ascii_strtoull.guint64
#COMMENT: to be used for the conversion, 2..36 or 0
#NAME: str_has_prefix
#PARENT: GLib.str_has_prefix
#COMMENT: %TRUE if @str begins with @prefix, %FALSE otherwise.
#NAME: int16
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a signed 16 bit integer.
#NAME: clear
#PARENT: GLib.StringChunk
#COMMENT: Frees all strings contained within the #GStringChunk.
After calling g_string_chunk_clear() it is not safe to
access any of the strings which were contained within it.
#NAME: user_data
#PARENT: GLib.PtrArray.sort_with_data.none
#COMMENT: data to pass to @compare_func
#NAME: immediate
#PARENT: GLib.ThreadPool.free.none
#COMMENT: should @pool shut down immediately?
#NAME: nospc
#PARENT: GLib.IOChannelError
#COMMENT: No space left on device.
#NAME: context
#PARENT: GLib.MainContext.acquire.gboolean
#COMMENT: a #GMainContext
#NAME: ch
#PARENT: GLib.unichar_compose.gboolean
#COMMENT: return location for the composed character
#NAME: val
#PARENT: GLib.String.overwrite_len.String
#COMMENT: the string that will overwrite the @string starting at @pos
#NAME: read
#PARENT: GLib.BookmarkFileError
#COMMENT: document was ill formed
#NAME: get_maybe
#PARENT: GLib.Variant.get_maybe
#COMMENT: the contents of @value, or %NULL
#NAME: lookup_key
#PARENT: GLib.Tree.lookup_extended.gboolean
#COMMENT: the key to look up
#NAME: end_parse
#PARENT: GLib.MarkupParseContext
#COMMENT: Signals to the #GMarkupParseContext that all data has been
fed into the parse context with g_markup_parse_context_parse().

This function reports an error if the document isn't complete,
for example if elements are still open.
#NAME: get_user_data
#PARENT: GLib.MarkupParseContext.get_user_data
#COMMENT: the provided user_data. The returned data belongs to
    the markup context and will be freed when
    g_markup_parse_context_free() is called.
#NAME: hook
#PARENT: GLib.HookFindFunc.gboolean
#COMMENT: a #GHook
#NAME: push
#PARENT: GLib.TrashStack
#COMMENT: Pushes a piece of memory onto a #GTrashStack.
#NAME: regex
#PARENT: GLib.Regex.ref.Regex
#COMMENT: a #GRegex
#NAME: dict
#PARENT: GLib.VariantDict.insert.none
#COMMENT: a #GVariantDict
#NAME: year
#PARENT: GLib.Date.get_monday_weeks_in_year.guint8
#COMMENT: a year
#NAME: time_
#PARENT: GLib.TimeVal.from_iso8601.gboolean
#COMMENT: a #GTimeVal
#NAME: replace
#PARENT: GLib.Regex
#COMMENT: Replaces all occurrences of the pattern in @regex with the
replacement text. Backreferences of the form '\number' or
'\g<number>' in the replacement text are interpolated by the
number-th captured subexpression of the match, '\g<name>' refers
to the captured subexpression with the given name. '\0' refers
to the complete match, but '\0' followed by a number is the octal
representation of a character. To include a literal '\' in the
replacement, write '\\'.

There are also escapes that changes the case of the following text:

- \l: Convert to lower case the next character
- \u: Convert to upper case the next character
- \L: Convert to lower case till \E
- \U: Convert to upper case till \E
- \E: End case modification

If you do not need to use backreferences use g_regex_replace_literal().

The @replacement string must be UTF-8 encoded even if #G_REGEX_RAW was
passed to g_regex_new(). If you want to use not UTF-8 encoded stings
you can use g_regex_replace_literal().

Setting @start_position differs from just passing over a shortened
string and setting #G_REGEX_MATCH_NOTBOL in the case of a pattern that
begins with any kind of lookbehind assertion, such as "\b".
#NAME: Thread
#PARENT: GLib
#COMMENT: The #GThread struct represents a running thread. This struct
is returned by g_thread_new() or g_thread_try_new(). You can
obtain the #GThread struct representing the current thread by
calling g_thread_self().

GThread is refcounted, see g_thread_ref() and g_thread_unref().
The thread represented by it holds a reference while it is running,
and g_thread_join() consumes the reference that it is given, so
it is normally not necessary to manage GThread references
explicitly.

The structure is opaque -- none of its fields may be directly
accessed.
#NAME: hash_table_steal
#PARENT: GLib
#COMMENT: Removes a key and its associated value from a #GHashTable without
calling the key and value destroy functions.
#NAME: max_date
#PARENT: GLib.Date.clamp.none
#COMMENT: maximum accepted value for @date
#NAME: get_thread_default
#PARENT: GLib.MainContext.get_thread_default
#COMMENT: the thread-default #GMainContext, or
%NULL if the thread-default context is the global default context.
#NAME: n
#PARENT: GLib.List.nth_data.gpointer
#COMMENT: the position of the element
#NAME: string
#PARENT: GLib.vsprintf.gint
#COMMENT: the buffer to hold the output.
#NAME: data
#PARENT: GLib.datalist_id_set_data_full.none
#COMMENT: the data element or %NULL to remove any previous element
       corresponding to @key_id.
#NAME: end
#PARENT: GLib.sequence_remove_range.none
#COMMENT: a #GSequenceIter
#NAME: slice_copy
#PARENT: GLib.slice_copy
#COMMENT: a pointer to the allocated memory block
#NAME: unix_fd_source_new
#PARENT: GLib.unix_fd_source_new
#COMMENT: the newly created #GSource
#NAME: writer_trylock
#PARENT: GLib.RWLock
#COMMENT: Tries to obtain a write lock on @rw_lock. If any other thread holds
a read or write lock on @rw_lock, it immediately returns %FALSE.
Otherwise it locks @rw_lock and returns %TRUE.
#NAME: thread_self
#PARENT: GLib.thread_self
#COMMENT: the #GThread representing the current thread
#NAME: new_from_fd
#PARENT: GLib.MappedFile
#COMMENT: Maps a file into memory. On UNIX, this is using the mmap() function.

If @writable is %TRUE, the mapped buffer may be modified, otherwise
it is an error to modify the mapped buffer. Modifications to the buffer
are not visible to other processes mapping the same file, and are not
written back to the file.

Note that modifications of the underlying file might affect the contents
of the #GMappedFile. Therefore, mapping should only be used if the file
will not be modified, or if all modifications of the file are done
atomically (e.g. using g_file_set_contents()).
#NAME: steal_all
#PARENT: GLib.HashTable
#COMMENT: Removes all keys and their associated values from a #GHashTable
without calling the key and value destroy functions.
#NAME: DuplicateFunc
#PARENT: GLib.DuplicateFunc
#COMMENT: a duplicate of data
#NAME: get_has_cr_or_lf
#PARENT: GLib.Regex.get_has_cr_or_lf
#COMMENT: %TRUE if the pattern contains explicit CR or LF references
#NAME: append
#PARENT: GLib.ByteArray
#COMMENT: Adds the given bytes to the end of the #GByteArray.
The array will grow in size automatically if necessary.
#NAME: datalist_id_get_data
#PARENT: GLib.datalist_id_get_data
#COMMENT: the data element, or %NULL if it is not found.
#NAME: bamum
#PARENT: GLib.UnicodeScript
#COMMENT: Bamum. Since 2.26
#NAME: queue
#PARENT: GLib.AsyncQueue.timed_pop_unlocked.gpointer
#COMMENT: a #GAsyncQueue
#NAME: array
#PARENT: GLib.Array.set_clear_func.none
#COMMENT: A #GArray
#NAME: data
#PARENT: GLib.compute_hmac_for_data.utf8
#COMMENT: binary blob to compute the HMAC of
#NAME: LN10
#PARENT: GLib
#COMMENT: The natural logarithm of 10.
#NAME: data
#PARENT: GLib.Variant.new_from_data.Variant
#COMMENT: the serialised data
#NAME: 
#PARENT: GLib.Variant.lookup.gboolean...
#COMMENT: the arguments to unpack the value into
#NAME: bytes
#PARENT: GLib.Bytes.unref_to_data.gpointer
#COMMENT: a #GBytes
#NAME: silence_stderr
#PARENT: GLib.TestTrapFlags
#COMMENT: Redirect stderr of the test child to
    `/dev/null` so it cannot be observed on the console during test
    runs. The actual output is still captured though to allow later
    tests with g_test_trap_assert_stderr().
#NAME: match_info
#PARENT: GLib.Regex.match_all.gboolean
#COMMENT: pointer to location where to store
    the #GMatchInfo, or %NULL if you do not need it
#NAME: right_paren
#PARENT: GLib.TokenType
#COMMENT: a ')' character
#NAME: data
#PARENT: GLib.NodeTraverseFunc.gboolean
#COMMENT: user data passed to g_node_traverse().
#NAME: fill_char
#PARENT: GLib.strnfill.utf8
#COMMENT: the byte to fill the string with
#NAME: pp
#PARENT: GLib.clear_pointer.none
#COMMENT: a pointer to a variable, struct member etc. holding a pointer
#NAME: array
#PARENT: GLib.Array.unref.none
#COMMENT: A #GArray
#NAME: get_string
#PARENT: GLib.Checksum.get_string
#COMMENT: the hexadecimal representation of the checksum. The
  returned string is owned by the checksum and should not be modified
  or freed.
#NAME: user_data
#PARENT: GLib.MainContext.find_source_by_funcs_user_data.Source
#COMMENT: the user data from the callback.
#NAME: string
#PARENT: GLib.intern_static_string.utf8
#COMMENT: a static string
#NAME: value
#PARENT: GLib.Variant.get_variant.Variant
#COMMENT: a variant #GVariant instance
#NAME: compare
#PARENT: GLib.Bytes
#COMMENT: Compares the two #GBytes values.

This function can be used to sort GBytes instances in lexographical order.
#NAME: get_days_in_month
#PARENT: GLib.Date.get_days_in_month
#COMMENT: number of days in @month during the @year
#NAME: hostname
#PARENT: GLib.hostname_to_ascii.utf8
#COMMENT: a valid UTF-8 or ASCII hostname
#NAME: february
#PARENT: GLib.DateMonth
#COMMENT: February
#NAME: source
#PARENT: GLib.Source.set_callback_indirect.none
#COMMENT: the source
#NAME: grantha
#PARENT: GLib.UnicodeScript
#COMMENT: Grantha. Since: 2.42
#NAME: append_vals
#PARENT: GLib.Array.append_vals
#COMMENT: the #GArray
#NAME: byte_array_free
#PARENT: GLib
#COMMENT: Frees the memory allocated by the #GByteArray. If @free_segment is
%TRUE it frees the actual byte data. If the reference count of
@array is greater than one, the #GByteArray wrapper is preserved but
the size of @array will be set to zero.
#NAME: get_week_numbering_year
#PARENT: GLib.DateTime
#COMMENT: Returns the ISO 8601 week-numbering year in which the week containing
@datetime falls.

This function, taken together with g_date_time_get_week_of_year() and
g_date_time_get_day_of_week() can be used to determine the full ISO
week date on which @datetime falls.

This is usually equal to the normal Gregorian year (as returned by
g_date_time_get_year()), except as detailed below:

For Thursday, the week-numbering year is always equal to the usual
calendar year.  For other days, the number is such that every day
within a complete week (Monday to Sunday) is contained within the
same week-numbering year.

For Monday, Tuesday and Wednesday occurring near the end of the year,
this may mean that the week-numbering year is one greater than the
calendar year (so that these days have the same week-numbering year
as the Thursday occurring early in the next year).

For Friday, Saturday and Sunday occurring near the start of the year,
this may mean that the week-numbering year is one less than the
calendar year (so that these days have the same week-numbering year
as the Thursday occurring late in the previous year).

An equivalent description is that the week-numbering year is equal to
the calendar year containing the majority of the days in the current
week (Monday to Sunday).

Note that January 1 0001 in the proleptic Gregorian calendar is a
Monday, so this function never returns 0.
#NAME: keep_comments
#PARENT: GLib.KeyFileFlags
#COMMENT: Use this flag if you plan to write the
    (possibly modified) contents of the key file back to a file;
    otherwise all comments will be lost when the key file is
    written back.
#NAME: unichar_isprint
#PARENT: GLib.unichar_isprint
#COMMENT: %TRUE if @c is printable
#NAME: str
#PARENT: GLib.utf8_substring.utf8
#COMMENT: a UTF-8 encoded string
#NAME: key_id
#PARENT: GLib.dataset_id_remove_no_notify.gpointer
#COMMENT: the #GQuark ID identifying the data element.
#NAME: acces
#PARENT: GLib.FileError
#COMMENT: Permission denied; the file permissions do not
    allow the attempted operation.
#NAME: overwrite
#PARENT: GLib.String
#COMMENT: Overwrites part of a string, lengthening it if necessary.
#NAME: type
#PARENT: GLib.variant_parse.Variant
#COMMENT: a #GVariantType, or %NULL
#NAME: int32
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a signed 32 bit integer.
#NAME: builder
#PARENT: GLib.VariantBuilder.end.Variant
#COMMENT: a #GVariantBuilder
#NAME: format
#PARENT: GLib.snprintf.gint
#COMMENT: a standard printf() format string, but notice
         [string precision pitfalls][string-precision]
#NAME: sort
#PARENT: GLib.Sequence
#COMMENT: Sorts @seq using @cmp_func.

@cmp_func is passed two items of @seq and should
return 0 if they are equal, a negative value if the
first comes before the second, and a positive value
if the second comes before the first.
#NAME: format
#PARENT: GLib.UnicodeType
#COMMENT: General category "Other, Format" (Cf)
#NAME: new
#PARENT: GLib.PatternSpec
#COMMENT: Compiles a pattern to a #GPatternSpec.
#NAME: unichar_get_mirror_char
#PARENT: GLib.unichar_get_mirror_char
#COMMENT: %TRUE if @ch has a mirrored character, %FALSE otherwise
#NAME: bit_unlock
#PARENT: GLib
#COMMENT: Clears the indicated @lock_bit in @address.  If another thread is
currently blocked in g_bit_lock() on this same bit then it will be
woken up.

This function accesses @address atomically.  All other accesses to
@address must be atomic in order for this function to work
reliably.
#NAME: OptionArgFunc
#PARENT: GLib.OptionArgFunc
#COMMENT: %TRUE if the option was successfully parsed, %FALSE if an error
 occurred, in which case @error should be set with g_set_error()
#NAME: move_item
#PARENT: GLib.BookmarkFile.move_item
#COMMENT: %TRUE if the URI was successfully changed
#NAME: date
#PARENT: GLib.Date.free.none
#COMMENT: a #GDate to free
#NAME: get_groups
#PARENT: GLib.BookmarkFile
#COMMENT: Retrieves the list of group names of the bookmark for @uri.

In the event the URI cannot be found, %NULL is returned and
@error is set to #G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND.

The returned array is %NULL terminated, so @length may optionally
be %NULL.
#NAME: fprintf
#PARENT: GLib
#COMMENT: An implementation of the standard fprintf() function which supports
positional parameters, as specified in the Single Unix Specification.
#NAME: FloatIEEE754
#PARENT: GLib
#COMMENT: The #GFloatIEEE754 and #GDoubleIEEE754 unions are used to access the sign,
mantissa and exponent of IEEE floats and doubles. These unions are defined
as appropriate for a given platform. IEEE floats and doubles are supported
(used for storage) by at least Intel, PPC and Sparc.
#NAME: result
#PARENT: GLib.unichar_fully_decompose.gsize
#COMMENT: location to store decomposed result, or %NULL
#NAME: add_minutes
#PARENT: GLib.DateTime
#COMMENT: Creates a copy of @datetime adding the specified number of minutes.
Add negative values to subtract minutes.
#NAME: value
#PARENT: GLib.Variant.dup_bytestring_array.utf8
#COMMENT: an array of array of bytes #GVariant ('aay')
#NAME: queue
#PARENT: GLib.AsyncQueue.ref_unlocked.none
#COMMENT: a #GAsyncQueue
#NAME: str
#PARENT: GLib.utf16_to_utf8.utf8
#COMMENT: a UTF-16 encoded string
#NAME: insert
#PARENT: GLib.List.insert
#COMMENT: the (possibly changed) start of the #GList
#NAME: julian_date
#PARENT: GLib.Date.set_julian.none
#COMMENT: Julian day number (days since January 1, Year 1)
#NAME: printf_string_upper_bound
#PARENT: GLib
#COMMENT: Calculates the maximum space needed to store the output
of the sprintf() function.
#NAME: getenv
#PARENT: GLib
#COMMENT: Returns the value of an environment variable.

The name and value are in the GLib file name encoding. On UNIX,
this means the actual bytes which might or might not be in some
consistent character set and encoding. On Windows, it is in UTF-8.
On Windows, in case the environment variable's value contains
references to other environment variables, they are expanded.
#NAME: tirhuta
#PARENT: GLib.UnicodeScript
#COMMENT: Tirhuta. Since: 2.42
#NAME: scan_string_dq
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if strings can be enclosed in double
    quotes (the default is %TRUE).
#NAME: push_unlocked
#PARENT: GLib.AsyncQueue
#COMMENT: Pushes the @data into the @queue. @data must not be %NULL.

This function must be called while holding the @queue's lock.
#NAME: list
#PARENT: GLib.KeyFile.set_double_list.none
#COMMENT: an array of double values
#NAME: OptionParseFunc
#PARENT: GLib
#COMMENT: The type of function that can be called before and after parsing.
#NAME: get_flags
#PARENT: GLib.IOChannel
#COMMENT: Gets the current flags for a #GIOChannel, including read-only
flags such as %G_IO_FLAG_IS_READABLE.

The values of the flags %G_IO_FLAG_IS_READABLE and %G_IO_FLAG_IS_WRITABLE
are cached for internal use by the channel when it is created.
If they should change at some later point (e.g. partial shutdown
of a socket with the UNIX shutdown() function), the user
should immediately call g_io_channel_get_flags() to update
the internal values of these flags.
#NAME: size
#PARENT: GLib.Bytes.get_data.guint8
#COMMENT: location to return size of byte data
#NAME: get_size
#PARENT: GLib.Bytes
#COMMENT: Get the size of the byte data in the #GBytes.

This function will always return the same value for a given #GBytes.
#NAME: read_to_end
#PARENT: GLib.IOChannel.read_to_end
#COMMENT: %G_IO_STATUS_NORMAL on success.
    This function never returns %G_IO_STATUS_EOF.
#NAME: utf8_strdown
#PARENT: GLib
#COMMENT: Converts all Unicode characters in the string that have a case
to lowercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string changing.
#NAME: none
#PARENT: GLib.OptionFlags
#COMMENT: No flags. Since: 2.42.
#NAME: LOG_FATAL_MASK
#PARENT: GLib
#COMMENT: GLib log levels that are considered fatal by default.
#NAME: KEY_FILE_DESKTOP_KEY_PATH
#PARENT: GLib
#COMMENT: A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
containing the working directory to run the program in. It is only
valid for desktop entries with the `Application` type.
#NAME: july
#PARENT: GLib.DateMonth
#COMMENT: July
#NAME: new_dmy
#PARENT: GLib.Date
#COMMENT: Like g_date_new(), but also sets the value of the date. Assuming the
day-month-year triplet you pass in represents an existing day, the
returned date will be valid.
#NAME: queue
#PARENT: GLib.AsyncQueue.timeout_pop.gpointer
#COMMENT: a #GAsyncQueue
#NAME: cmp_data
#PARENT: GLib.Sequence.search.SequenceIter
#COMMENT: user data passed to @cmp_func
#NAME: leaves
#PARENT: GLib.TraverseFlags
#COMMENT: only leaf nodes should be visited. This name has
                    been introduced in 2.6, for older version use
                    %G_TRAVERSE_LEAFS.
#NAME: channel
#PARENT: GLib.IOChannel.ref.IOChannel
#COMMENT: a #GIOChannel
#NAME: nfc
#PARENT: GLib.NormalizeMode
#COMMENT: another name for %G_NORMALIZE_DEFAULT_COMPOSE
#NAME: nfd
#PARENT: GLib.NormalizeMode
#COMMENT: another name for %G_NORMALIZE_DEFAULT
#NAME: scanner
#PARENT: GLib.Scanner.scope_add_symbol.none
#COMMENT: a #GScanner
#NAME: equal
#PARENT: GLib.PatternSpec
#COMMENT: Compares two compiled pattern specs and returns whether they will
match the same set of strings.
#NAME: v1
#PARENT: GLib.double_equal.gboolean
#COMMENT: a pointer to a #gdouble key
#NAME: uri
#PARENT: GLib.BookmarkFile.has_item.gboolean
#COMMENT: a valid URI
#NAME: is_dir
#PARENT: GLib.FileTest
#COMMENT: %TRUE if the file is a directory.
#NAME: v2
#PARENT: GLib.double_equal.gboolean
#COMMENT: a pointer to a #gdouble key to compare with @v1
#NAME: pop_thread_default
#PARENT: GLib.MainContext
#COMMENT: Pops @context off the thread-default context stack (verifying that
it was on the top of the stack).
#NAME: new_from_fd
#PARENT: GLib.MappedFile.new_from_fd
#COMMENT: a newly allocated #GMappedFile which must be unref'd
   with g_mapped_file_unref(), or %NULL if the mapping failed.
#NAME: datalist
#PARENT: GLib.datalist_id_dup_data.gpointer
#COMMENT: location of a datalist
#NAME: string
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a normal string.
#NAME: list
#PARENT: GLib.KeyFile.set_locale_string_list.none
#COMMENT: a %NULL-terminated array of locale string values
#NAME: zero_terminated
#PARENT: GLib.Array.new.gpointer
#COMMENT: %TRUE if the array should have an extra element at
    the end which is set to 0
#NAME: delete_link
#PARENT: GLib.SList
#COMMENT: Removes the node link_ from the list and frees it.
Compare this to g_slist_remove_link() which removes the node
without freeing it.

Removing arbitrary nodes from a singly-linked list requires time
that is proportional to the length of the list (ie. O(n)). If you
find yourself using g_slist_delete_link() frequently, you should
consider a different data structure, such as the doubly-linked
#GList.
#NAME: newline_anycrlf
#PARENT: GLib.RegexMatchFlags
#COMMENT: Overrides the newline definition set when
    creating a new #GRegex; any '\r', '\n', or '\r\n' character sequence
    is recognized as a newline. Since: 2.34
#NAME: IConv
#PARENT: GLib
#COMMENT: The GIConv struct wraps an iconv() conversion descriptor. It contains
private data and should only be accessed using the following functions.
#NAME: insert_before
#PARENT: GLib.SList
#COMMENT: Inserts a node before @sibling containing @data.
#NAME: child_watch_add_full
#PARENT: GLib.child_watch_add_full
#COMMENT: the ID (greater than 0) of the event source.
#NAME: name
#PARENT: GLib.Thread.new.Thread
#COMMENT: an (optional) name for the new thread
#NAME: print_string
#PARENT: GLib.Variant.print_string
#COMMENT: a #GString containing the string
#NAME: new
#PARENT: GLib.HashTable
#COMMENT: Creates a new #GHashTable with a reference count of 1.

Hash values returned by @hash_func are used to determine where keys
are stored within the #GHashTable data structure. The g_direct_hash(),
g_int_hash(), g_int64_hash(), g_double_hash() and g_str_hash()
functions are provided for some common types of keys.
If @hash_func is %NULL, g_direct_hash() is used.

@key_equal_func is used when looking up keys in the #GHashTable.
The g_direct_equal(), g_int_equal(), g_int64_equal(), g_double_equal()
and g_str_equal() functions are provided for the most common types
of keys. If @key_equal_func is %NULL, keys are compared directly in
a similar fashion to g_direct_equal(), but without the overhead of
a function call.
#NAME: free_segment
#PARENT: GLib.byte_array_free.guint8
#COMMENT: if %TRUE the actual byte data is freed as well
#NAME: key_id
#PARENT: GLib.datalist_id_set_data_full.none
#COMMENT: the #GQuark to identify the data element.
#NAME: old_permic
#PARENT: GLib.UnicodeScript
#COMMENT: Old Permic. Since: 2.42
#NAME: mask
#PARENT: GLib.IOFlags
#COMMENT: the mask that specifies all the valid flags.
#NAME: list
#PARENT: GLib.SList.insert_sorted.gpointer
#COMMENT: a #GSList
#NAME: balinese
#PARENT: GLib.UnicodeScript
#COMMENT: Balinese
#NAME: spawn_command_line_sync
#PARENT: GLib.spawn_command_line_sync
#COMMENT: %TRUE on success, %FALSE if an error was set
#NAME: buffer
#PARENT: GLib.ascii_dtostr.utf8
#COMMENT: A buffer to place the resulting string in
#NAME: pop
#PARENT: GLib.MarkupParseContext
#COMMENT: Completes the process of a temporary sub-parser redirection.

This function exists to collect the user_data allocated by a
matching call to g_markup_parse_context_push(). It must be called
in the end_element handler corresponding to the start_element
handler during which g_markup_parse_context_push() was called.
You must not call this function from the error callback -- the
@user_data is provided directly to the callback in that case.

This function is not intended to be directly called by users
interested in invoking subparsers. Instead, it is intended to
be used by the subparsers themselves to implement a higher-level
interface.
#NAME: oriya
#PARENT: GLib.UnicodeScript
#COMMENT: Oriya
#NAME: get_codeset
#PARENT: GLib
#COMMENT: Gets the character set for the current locale.
#NAME: delimiters
#PARENT: GLib.strsplit_set.utf8
#COMMENT: A nul-terminated string containing bytes that are used
    to split the string.
#NAME: unichar_totitle
#PARENT: GLib
#COMMENT: Converts a character to the titlecase.
#NAME: new
#PARENT: GLib.Tree.new
#COMMENT: a newly allocated #GTree
#NAME: june
#PARENT: GLib.DateMonth
#COMMENT: June
#NAME: sinhala
#PARENT: GLib.UnicodeScript
#COMMENT: Sinhala
#NAME: len
#PARENT: GLib.String.set_size.String
#COMMENT: the new length
#NAME: get_user_name
#PARENT: GLib.get_user_name
#COMMENT: the user name of the current user.
#NAME: locale_from_utf8
#PARENT: GLib.locale_from_utf8
#COMMENT: A newly-allocated buffer containing the converted string,
              or %NULL on an error, and error will be set.
#NAME: str
#PARENT: GLib.utf8_to_ucs4.gunichar
#COMMENT: a UTF-8 encoded string
#NAME: peek_head_link
#PARENT: GLib.Queue.peek_head_link
#COMMENT: the first link in @queue, or %NULL if @queue is empty
#NAME: group_name
#PARENT: GLib.KeyFile.set_double.none
#COMMENT: a group name
#NAME: key
#PARENT: GLib.KeyFile.set_string.none
#COMMENT: a key
#NAME: str
#PARENT: GLib.ascii_strup.utf8
#COMMENT: a string
#NAME: locale
#PARENT: GLib.get_locale_variants.utf8
#COMMENT: a locale identifier
#NAME: new_now_utc
#PARENT: GLib.DateTime.new_now_utc
#COMMENT: a new #GDateTime, or %NULL
#NAME: remove_link
#PARENT: GLib.List.remove_link
#COMMENT: the (possibly changed) start of the #GList
#NAME: string
#PARENT: GLib.pattern_match_simple.gboolean
#COMMENT: the UTF-8 encoded string to match
#NAME: mutex
#PARENT: GLib.Mutex.clear.none
#COMMENT: an initialized #GMutex
#NAME: free
#PARENT: GLib.ByteArray
#COMMENT: Frees the memory allocated by the #GByteArray. If @free_segment is
%TRUE it frees the actual byte data. If the reference count of
@array is greater than one, the #GByteArray wrapper is preserved but
the size of @array will be set to zero.
#NAME: SourceDummyMarshal
#PARENT: GLib
#COMMENT: This is just a placeholder for #GClosureMarshal,
which cannot be used here for dependency reasons.
#NAME: tree
#PARENT: GLib.Tree.traverse.none
#COMMENT: a #GTree
#NAME: insert
#PARENT: GLib.StringChunk
#COMMENT: Adds a copy of @string to the #GStringChunk.
It returns a pointer to the new copy of the string
in the #GStringChunk. The characters in the string
can be changed, if necessary, though you should not
change anything after the end of the string.

Unlike g_string_chunk_insert_const(), this function
does not check for duplicates. Also strings added
with g_string_chunk_insert() will not be searched
by g_string_chunk_insert_const() when looking for
duplicates.
#NAME: seq
#PARENT: GLib.Sequence.prepend.SequenceIter
#COMMENT: a #GSequence
#NAME: int64
#PARENT: GLib.VariantClass
#COMMENT: The #GVariant is a signed 64 bit integer.
#NAME: ref_unlocked
#PARENT: GLib.AsyncQueue
#COMMENT: Increases the reference count of the asynchronous @queue by 1.
#NAME: get_data
#PARENT: GLib.Variant
#COMMENT: Returns a pointer to the serialised form of a #GVariant instance.
The returned data may not be in fully-normalised form if read from an
untrusted source.  The returned data must not be freed; it remains
valid for as long as @value exists.

If @value is a fixed-sized value that was deserialised from a
corrupted serialised container then %NULL may be returned.  In this
case, the proper thing to do is typically to use the appropriate
number of nul bytes in place of @value.  If @value is not fixed-sized
then %NULL is never returned.

In the case that @value is already in serialised form, this function
is O(1).  If the value is not already in serialised form,
serialisation occurs implicitly and is approximately O(n) in the size
of the result.

To deserialise the data returned by this function, in addition to the
serialised data, you must know the type of the #GVariant, and (if the
machine might be different) the endianness of the machine that stored
it. As a result, file formats or network messages that incorporate
serialised #GVariants must include this information either
implicitly (for instance "the file always contains a
%G_VARIANT_TYPE_VARIANT and it is always in little-endian order") or
explicitly (by storing the type and/or endianness in addition to the
serialised data).
#NAME: string
#PARENT: GLib.Regex.match.gboolean
#COMMENT: the string to scan for matches
#NAME: child_position
#PARENT: GLib.Node
#COMMENT: Gets the position of a #GNode with respect to its siblings.
@child must be a child of @node. The first child is numbered 0,
the second 1, and so on.
#NAME: year
#PARENT: GLib.date_get_sunday_weeks_in_year.guint8
#COMMENT: year to count weeks in
#NAME: insert_len
#PARENT: GLib.String.insert_len
#COMMENT: @string
#NAME: timet
#PARENT: GLib.Date.set_time_t.none
#COMMENT: time_t value to set
#NAME: date_valid_day
#PARENT: GLib
#COMMENT: Returns %TRUE if the day of the month is valid (a day is valid if it's
between 1 and 31 inclusive).
#NAME: timeout_pop_unlocked
#PARENT: GLib.AsyncQueue
#COMMENT: Pops data from the @queue. If the queue is empty, blocks for
@timeout microseconds, or until data becomes available.

If no data is received before the timeout, %NULL is returned.

This function must be called while holding the @queue's lock.
#NAME: format
#PARENT: GLib.DateTime.format
#COMMENT: a newly allocated string formatted to the requested format
    or %NULL in the case that there was an error. The string
    should be freed with g_free().
#NAME: set_parse
#PARENT: GLib.Date
#COMMENT: Parses a user-inputted string @str, and try to figure out what date it
represents, taking the [current locale][setlocale] into account. If the
string is successfully parsed, the date will be valid after the call.
Otherwise, it will be invalid. You should check using g_date_valid()
to see whether the parsing succeeded.

This function is not appropriate for file formats and the like; it
isn't very precise, and its exact behavior varies with the locale.
It's intended to be a heuristic routine that guesses what the user
means by a given string (and it does work pretty well in that
capacity).
#NAME: utf8_to_ucs4_fast
#PARENT: GLib
#COMMENT: Convert a string from UTF-8 to a 32-bit fixed width
representation as UCS-4, assuming valid UTF-8 input.
This function is roughly twice as fast as g_utf8_to_ucs4()
but does no error checking on the input. A trailing 0 character
will be added to the string after the converted text.
#NAME: 
#PARENT: GLib.VariantIter.loop.gboolean...
#COMMENT: the arguments to unpack the value into
#NAME: fd
#PARENT: GLib.MainContext.remove_poll.none
#COMMENT: a #GPollFD descriptor previously added with g_main_context_add_poll()
#NAME: timer
#PARENT: GLib.Timer.elapsed.gdouble
#COMMENT: a #GTimer.
#NAME: javanese
#PARENT: GLib.UnicodeScript
#COMMENT: Javanese. Since 2.26
#NAME: msgctxtid
#PARENT: GLib.dpgettext.utf8
#COMMENT: a combined message context and message id, separated
  by a \004 character
#NAME: intr
#PARENT: GLib.FileError
#COMMENT: Interrupted function call; an asynchronous signal
    occurred and prevented completion of the call. When this
    happens, you should try the call again.
#NAME: user_data
#PARENT: GLib.ThreadPool.set_sort_function.none
#COMMENT: user data passed to @func
#NAME: flags
#PARENT: GLib.KeyFile.load_from_file.gboolean
#COMMENT: flags from #GKeyFileFlags
#NAME: parse
#PARENT: GLib.Variant
#COMMENT: Parses a #GVariant from a text representation.

A single #GVariant is parsed from the content of @text.

The format is described [here][gvariant-text].

The memory at @limit will never be accessed and the parser behaves as
if the character at @limit is the nul terminator.  This has the
effect of bounding @text.

If @endptr is non-%NULL then @text is permitted to contain data
following the value that this function parses and @endptr will be
updated to point to the first character past the end of the text
parsed by this function.  If @endptr is %NULL and there is extra data
then an error is returned.

If @type is non-%NULL then the value will be parsed to have that
type.  This may result in additional parse errors (in the case that
the parsed value doesn't fit the type) but may also result in fewer
errors (in the case that the type would have been ambiguous, such as
with empty arrays).

In the event that the parsing is successful, the resulting #GVariant
is returned. It is never floating, and must be freed with
g_variant_unref().

In case of any error, %NULL will be returned.  If @error is non-%NULL
then it will be set to reflect the error that occurred.

Officially, the language understood by the parser is "any string
produced by g_variant_print()".
#NAME: pos
#PARENT: GLib.String.overwrite_len.String
#COMMENT: the position at which to start overwriting
#NAME: byte_array_new
#PARENT: GLib
#COMMENT: Creates a new #GByteArray with a reference count of 1.
#NAME: llink
#PARENT: GLib.List.position.gint
#COMMENT: an element in the #GList
#NAME: hmac
#PARENT: GLib.Hmac.copy.Hmac
#COMMENT: the #GHmac to copy
#NAME: group_name
#PARENT: GLib.KeyFile.get_string.utf8
#COMMENT: a group name
#NAME: test_queue_destroy
#PARENT: GLib
#COMMENT: This function enqueus a callback @destroy_func to be executed
during the next test case teardown phase. This is most useful
to auto destruct allocted test resources at the end of a test run.
Resources are released in reverse queue order, that means enqueueing
callback A before callback B will cause B() to be called before
A() during teardown.
#NAME: node
#PARENT: GLib.Node.is_ancestor.gboolean
#COMMENT: a #GNode
#NAME: group_name
#PARENT: GLib.KeyFile.get_value.utf8
#COMMENT: a group name
#NAME: get_bytestring_array
#PARENT: GLib.Variant.get_bytestring_array
#COMMENT: an array of constant strings
#NAME: vprintf
#PARENT: GLib.String
#COMMENT: Writes a formatted string into a #GString.
This function is similar to g_string_printf() except that
the arguments to the format string are passed as a va_list.
#NAME: get_position
#PARENT: GLib.SequenceIter.get_position
#COMMENT: the position of @iter
#NAME: get_buffered
#PARENT: GLib.IOChannel
#COMMENT: Returns whether @channel is buffered.
#NAME: element_size
#PARENT: GLib.Variant.new_fixed_array.Variant
#COMMENT: the size of each element
#NAME: marshal_data
#PARENT: GLib.HookMarshaller.none
#COMMENT: user data
#NAME: set_added
#PARENT: GLib.BookmarkFile
#COMMENT: Sets the time the bookmark for @uri was added into @bookmark.

If no bookmark for @uri is found then it is created.
#NAME: TestSuite
#PARENT: GLib
#COMMENT: An opaque structure representing a test suite.
#NAME: failed
#PARENT: GLib.OptionError
#COMMENT: A #GOptionArgFunc callback failed.
#NAME: old_south_arabian
#PARENT: GLib.UnicodeScript
#COMMENT: Old South Arabian. Since 2.26
#NAME: IEEE754_DOUBLE_BIAS
#PARENT: GLib
#COMMENT: The bias by which exponents in double-precision floats are offset.
#NAME: date
#PARENT: GLib.Date.to_struct_tm.none
#COMMENT: a #GDate to set the struct tm from
#NAME: queue
#PARENT: GLib.Queue.push_tail.none
#COMMENT: a #GQueue
#NAME: remove_fast
#PARENT: GLib.PtrArray
#COMMENT: Removes the first occurrence of the given pointer from the pointer
array. The last element in the array is used to fill in the space,
so this function does not preserve the order of the array. But it
is faster than g_ptr_array_remove(). If @array has a non-%NULL
#GDestroyNotify function it is called for the removed element.

It returns %TRUE if the pointer was removed, or %FALSE if the
pointer was not found.
#NAME: carriage_return
#PARENT: GLib.UnicodeBreakType
#COMMENT: Carriage Return (CR)
#NAME: unichar_istitle
#PARENT: GLib.unichar_istitle
#COMMENT: %TRUE if the character is titlecase
#NAME: tamil
#PARENT: GLib.UnicodeScript
#COMMENT: Tamil
#NAME: no_memory
#PARENT: GLib.ConvertError
#COMMENT: No memory available. Since: 2.40
#NAME: parse
#PARENT: GLib.OptionContext.parse
#COMMENT: %TRUE if the parsing was successful,
              %FALSE if an error occurred
#NAME: new_object_path
#PARENT: GLib.Variant.new_object_path
#COMMENT: a floating reference to a new object path #GVariant instance
#NAME: atomic
#PARENT: GLib.atomic_int_set.none
#COMMENT: a pointer to a #gint or #guint
#NAME: remove
#PARENT: GLib.PtrArray
#COMMENT: Removes the first occurrence of the given pointer from the pointer
array. The following elements are moved down one place. If @array
has a non-%NULL #GDestroyNotify function it is called for the
removed element.

It returns %TRUE if the pointer was removed, or %FALSE if the
pointer was not found.
#NAME: hangul
#PARENT: GLib.UnicodeScript
#COMMENT: Hangul
#NAME: key_file
#PARENT: GLib.KeyFile.set_comment.gboolean
#COMMENT: a #GKeyFile
#NAME: n_elements
#PARENT: GLib.Variant.get_fixed_array.gpointer
#COMMENT: a pointer to the location to store the number of items
#NAME: search
#PARENT: GLib.Sequence
#COMMENT: Returns an iterator pointing to the position where @data would
be inserted according to @cmp_func and @cmp_data.

@cmp_func is called with two items of the @seq and @user_data.
It should return 0 if the items are equal, a negative value if
the first item comes before the second, and a positive value if
the second item comes before the first.

If you are simply searching for an existing element of the sequence,
consider using g_sequence_lookup().

This function will fail if the data contained in the sequence is
unsorted.  Use g_sequence_insert_sorted() or
g_sequence_insert_sorted_iter() to add data to your sequence or, if
you want to add a large amount of data, call g_sequence_sort() after
doing unsorted insertions.
#NAME: first
#PARENT: GLib.List.first
#COMMENT: the first element in the #GList,
    or %NULL if the #GList has no elements
#NAME: position
#PARENT: GLib.SList.insert.gpointer
#COMMENT: the position to insert the element.
    If this is negative, or is larger than the number
    of elements in the list, the new element is added on
    to the end of the list.
#NAME: user_data
#PARENT: GLib.source_remove_by_funcs_user_data.gboolean
#COMMENT: the user data for the callback
#NAME: open
#PARENT: GLib.Dir.open
#COMMENT: a newly allocated #GDir on success, %NULL on failure.
  If non-%NULL, you must free the result with g_dir_close()
  when you are finished with it.
#NAME: tag
#PARENT: GLib.Source.remove_unix_fd.none
#COMMENT: the tag from g_source_add_unix_fd()
#NAME: new
#PARENT: GLib.Array
#COMMENT: Creates a new #GArray with a reference count of 1.
#NAME: data
#PARENT: GLib.Sequence.insert_sorted_iter.SequenceIter
#COMMENT: data for the new item
#NAME: queue
#PARENT: GLib.AsyncQueue.length_unlocked.gint
#COMMENT: a #GAsyncQueue
#NAME: link_
#PARENT: GLib.Queue.delete_link.none
#COMMENT: a #GList link that must be part of @queue
#NAME: str
#PARENT: GLib.utf8_offset_to_pointer.utf8
#COMMENT: a UTF-8 encoded string
#NAME: c
#PARENT: GLib.String.append_c.String
#COMMENT: the byte to append onto the end of @string
#NAME: tree
#PARENT: GLib.Tree.replace.none
#COMMENT: a #GTree
#NAME: bookmark
#PARENT: GLib.BookmarkFile.get_mime_type.utf8
#COMMENT: a #GBookmarkFile
#NAME: EqualFunc
#PARENT: GLib.EqualFunc
#COMMENT: %TRUE if @a = @b; %FALSE otherwise
#NAME: find_func
#PARENT: GLib.Hook
#COMMENT: Finds a #GHook in a #GHookList with the given function.
#NAME: element_free_func
#PARENT: GLib.PtrArray.new_with_free_func.gpointer
#COMMENT: A function to free elements with
    destroy @array or %NULL
#NAME: hook_list
#PARENT: GLib.hook_free.none
#COMMENT: a #GHookList
#NAME: bytes_read
#PARENT: GLib.filename_to_utf8.utf8
#COMMENT: location to store the number of bytes in the
                input string that were successfully converted, or %NULL.
                Even if the conversion was successful, this may be
                less than @len if there were partial characters
                at the end of the input. If the error
                #G_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the value
                stored will the byte offset after the last valid
                input sequence.
#NAME: int_2_float
#PARENT: GLib.ScannerConfig
#COMMENT: specifies if all numbers are reported as %G_TOKEN_FLOAT
    (the default is %FALSE).
#NAME: free
#PARENT: GLib.String
#COMMENT: Frees the memory allocated for the #GString.
If @free_segment is %TRUE it also frees the character data.  If
it's %FALSE, the caller gains ownership of the buffer and must
free it after use with g_free().
#NAME: data
#PARENT: GLib.Bytes.new_with_free_func.Bytes
#COMMENT: the data to be used for the bytes
#NAME: utf16_to_ucs4
#PARENT: GLib.utf16_to_ucs4
#COMMENT: a pointer to a newly allocated UCS-4 string.
    This value must be freed with g_free(). If an error occurs,
    %NULL will be returned and @error set.
#NAME: type
#PARENT: GLib.VariantType.key.VariantType
#COMMENT: a dictionary entry #GVariantType
#NAME: locale
#PARENT: GLib.KeyFile.set_locale_string.none
#COMMENT: a locale identifier
#NAME: log_domain
#PARENT: GLib.test_expect_message.none
#COMMENT: the log domain of the message
#NAME: atomic_pointer_set
#PARENT: GLib
#COMMENT: Sets the value of @atomic to @newval.

This call acts as a full compiler and hardware
memory barrier (after the set).
#NAME: uri_unescape_segment
#PARENT: GLib
#COMMENT: Unescapes a segment of an escaped string.

If any of the characters in @illegal_characters or the character zero appears
as an escaped character in @escaped_string then that is an error and %NULL
will be returned. This is useful it you want to avoid for instance having a
slash being expanded in an escaped path element, which might confuse pathname
handling.
#NAME: ref
#PARENT: GLib.VariantDict
#COMMENT: Increases the reference count on @dict.

Don't call this on stack-allocated #GVariantDict instances or bad
things will happen.
#NAME: set_ready_time
#PARENT: GLib.Source
#COMMENT: Sets a #GSource to be dispatched when the given monotonic time is
reached (or passed).  If the monotonic time is in the past (as it
always will be if @ready_time is 0) then the source will be
dispatched immediately.

If @ready_time is -1 then the source is never woken up on the basis
of the passage of time.

Dispatching the source does not reset the ready time.  You should do
so yourself, from the source dispatch function.

Note that if you have a pair of sources where the ready time of one
suggests that it will be delivered first but the priority for the
other suggests that it would be delivered first, and the ready time
for both sources is reached during the same main context iteration
then the order of dispatch is undefined.

This API is only intended to be used by implementations of #GSource.
Do not call this API on a #GSource that you did not create.
#NAME: fetch_named_pos
#PARENT: GLib.MatchInfo.fetch_named_pos
#COMMENT: %TRUE if the position was fetched, %FALSE otherwise.
    If the position cannot be fetched, @start_pos and @end_pos
    are left unchanged.
#NAME: len
#PARENT: GLib.Array.append_vals.gpointer
#COMMENT: the number of elements to append
#NAME: str
#PARENT: GLib.utf8_pointer_to_offset.glong
#COMMENT: a UTF-8 encoded string
#NAME: mask
#PARENT: GLib.bit_nth_lsf.gint
#COMMENT: a #gulong containing flags
#NAME: data
#PARENT: GLib.timeout_add_seconds_full.guint
#COMMENT: data to pass to @function
#NAME: lookup_extended
#PARENT: GLib.Tree.lookup_extended
#COMMENT: %TRUE if the key was found in the #GTree
#NAME: endptr
#PARENT: GLib.Variant.new_va.Variant
#COMMENT: location to store the end pointer,
         or %NULL
#NAME: bookmark
#PARENT: GLib.BookmarkFile.add_application.none
#COMMENT: a #GBookmarkFile
#NAME: value
#PARENT: GLib.Variant.dup_bytestring.guint8
#COMMENT: an array-of-bytes #GVariant instance
#NAME: count
#PARENT: GLib.IOChannel.read_chars.IOStatus
#COMMENT: the size of the buffer. Note that the buffer may not be
    complelely filled even if there is data in the buffer if the
    remaining data is not a complete character.
#NAME: error
#PARENT: GLib.Variant.parse_error_print_context.utf8
#COMMENT: a #GError from the #GVariantParseError domain
#NAME: ol_chiki
#PARENT: GLib.UnicodeScript
#COMMENT: Ol Chiki. Since 2.16.3
#NAME: bit_trylock
#PARENT: GLib.bit_trylock
#COMMENT: %TRUE if the lock was acquired
#NAME: regex
#PARENT: GLib.Regex.unref.none
#COMMENT: a #GRegex
#NAME: context
#PARENT: GLib.MainContext.pop_thread_default.none
#COMMENT: a #GMainContext object, or %NULL
#NAME: OptionError
#PARENT: GLib
#COMMENT: Error codes returned by option parsing.
#NAME: strnfill
#PARENT: GLib
#COMMENT: Creates a new string @length bytes long filled with @fill_char.
The returned string should be freed when no longer needed.
#NAME: format
#PARENT: GLib.String.append_printf.none
#COMMENT: the string format. See the printf() documentation
#NAME: invalid_code
#PARENT: GLib.UnicodeScript
#COMMENT: a value never returned from g_unichar_get_script()
#NAME: queue
#PARENT: GLib.Queue.remove.gboolean
#COMMENT: a #GQueue
#NAME: context
#PARENT: GLib.MainContext.prepare.gboolean
#COMMENT: a #GMainContext
#NAME: random_int_range
#PARENT: GLib
#COMMENT: Returns a random #gint32 equally distributed over the range
[@begin..@end-1].
#NAME: pop_head
#PARENT: GLib.Queue
#COMMENT: Removes the first element of the queue and returns its data.
#NAME: val
#PARENT: GLib.String.insert.String
#COMMENT: the string to insert
#NAME: parent
#PARENT: GLib.Node.insert_after.Node
#COMMENT: the #GNode to place @node under
#NAME: strncasecmp
#PARENT: GLib
#COMMENT: A case-insensitive string comparison, corresponding to the standard
strncasecmp() function on platforms which support it. It is similar
to g_strcasecmp() except it only compares the first @n characters of
the strings.
#NAME: quantifiers_out_of_order
#PARENT: GLib.RegexError
#COMMENT: Numbers out of order in "{}"
    quantifier. Since 2.16
#NAME: max_len
#PARENT: GLib.utf8_validate.gboolean
#COMMENT: max bytes to validate, or -1 to go until NUL
#NAME: minute
#PARENT: GLib.DateTime.new_local.DateTime
#COMMENT: the minute component of the date
#NAME: get_fixed_array
#PARENT: GLib.Variant
#COMMENT: Provides access to the serialised data for an array of fixed-sized
items.

@value must be an array with fixed-sized elements.  Numeric types are
fixed-size, as are tuples containing only other fixed-sized types.

@element_size must be the size of a single element in the array,
as given by the section on
[serialized data memory][gvariant-serialised-data-memory].

In particular, arrays of these fixed-sized types can be interpreted
as an array of the given C type, with @element_size set to the size
the appropriate type:
- %G_VARIANT_TYPE_INT16 (etc.): #gint16 (etc.)
- %G_VARIANT_TYPE_BOOLEAN: #guchar (not #gboolean!)
- %G_VARIANT_TYPE_BYTE: #guchar
- %G_VARIANT_TYPE_HANDLE: #guint32
- %G_VARIANT_TYPE_DOUBLE: #gdouble

For example, if calling this function for an array of 32-bit integers,
you might say sizeof(gint32). This value isn't used except for the purpose
of a double-check that the form of the serialised data matches the caller's
expectation.

@n_elements, which must be non-%NULL is set equal to the number of
items in the array.
#NAME: is_empty
#PARENT: GLib.Queue.is_empty
#COMMENT: %TRUE if the queue is empty
#NAME: data
#PARENT: GLib.Node.copy_deep.Node
#COMMENT: data to pass to @copy_func
#NAME: utf8_casefold
#PARENT: GLib
#COMMENT: Converts a string into a form that is independent of case. The
result will not correspond to any particular case, but can be
compared for equality or ordered with the results of calling
g_utf8_casefold() on other strings.

Note that calling g_utf8_casefold() followed by g_utf8_collate() is
only an approximation to the correct linguistic case insensitive
ordering, though it is a fairly good one. Getting this exactly
right would require a more sophisticated collation function that
takes case sensitivity into account. GLib does not currently
provide such a function.
#NAME: array
#PARENT: GLib.PtrArray.add.none
#COMMENT: a #GPtrArray
#NAME: alloc
#PARENT: GLib.Hook.alloc
#COMMENT: a new #GHook
#NAME: fetch_named
#PARENT: GLib.MatchInfo.fetch_named
#COMMENT: The matched substring, or %NULL if an error
    occurred. You have to free the string yourself
#NAME: inbytes_left
#PARENT: GLib.iconv.gsize
#COMMENT: inout parameter, bytes remaining to convert in @inbuf
#NAME: newline_cr
#PARENT: GLib.RegexMatchFlags
#COMMENT: Overrides the newline definition set when
    creating a new #GRegex, setting the '\r' character as line terminator.
#NAME: uri
#PARENT: GLib.BookmarkFile.set_app_info.gboolean
#COMMENT: a valid URI
#NAME: variable
#PARENT: GLib.unsetenv.none
#COMMENT: the environment variable to remove, must not contain '='
#NAME: type_string
#PARENT: GLib.VariantType.new.VariantType
#COMMENT: a valid GVariant type string
#NAME: n
#PARENT: GLib.List.nth_prev.gpointer
#COMMENT: the position of the element, counting from 0
#NAME: variant_is_object_path
#PARENT: GLib.variant_is_object_path
#COMMENT: %TRUE if @string is a D-Bus object path
#NAME: get_sequence
#PARENT: GLib.SequenceIter.get_sequence
#COMMENT: the #GSequence that @iter points into
#NAME: convert_with_fallback
#PARENT: GLib
#COMMENT: Converts a string from one character set to another, possibly
including fallback sequences for characters not representable
in the output. Note that it is not guaranteed that the specification
for the fallback sequences in @fallback will be honored. Some
systems may do an approximate conversion from @from_codeset
to @to_codeset in their iconv() functions,
in which case GLib will simply return that approximate conversion.

Note that you should use g_iconv() for streaming conversions.
Despite the fact that @byes_read can return information about partial
characters, the g_convert_... functions are not generally suitable
for streaming. If the underlying converter maintains internal state,
then this won't be preserved across successive calls to g_convert(),
g_convert_with_iconv() or g_convert_with_fallback(). (An example of
this is the GNU C converter for CP1255 which does not emit a base
character until it knows that the next character is not a mark that
could combine with the base character.)
#NAME: atomic_int_or
#PARENT: GLib.atomic_int_or
#COMMENT: the value of @atomic before the operation, unsigned
#NAME: args
#PARENT: GLib.vasprintf.gint
#COMMENT: the list of arguments to insert in the output.
#NAME: value_destroy_func
#PARENT: GLib.HashTable.new_full.gpointer
#COMMENT: a function to free the memory allocated for the
    value used when removing the entry from the #GHashTable, or %NULL
    if you don't want to supply such a function.
#NAME: node
#PARENT: GLib.Node.n_children.guint
#COMMENT: a #GNode
#NAME: equal
#PARENT: GLib.VariantType.equal
#COMMENT: %TRUE if @type1 and @type2 are exactly equal

Since 2.24
#NAME: get_description
#PARENT: GLib.BookmarkFile.get_description
#COMMENT: a newly allocated string or %NULL if the specified
  URI cannot be found.
#NAME: compare
#PARENT: GLib.Date.compare
#COMMENT: 0 for equal, less than zero if @lhs is less than @rhs,
    greater than zero if @lhs is greater than @rhs
#NAME: parser_get_error_quark
#PARENT: GLib.Variant
#COMMENT: Same as g_variant_error_quark().
#NAME: unichar_fully_decompose
#PARENT: GLib
#COMMENT: Computes the canonical or compatibility decomposition of a
Unicode character.  For compatibility decomposition,
pass %TRUE for @compat; for canonical decomposition
pass %FALSE for @compat.

The decomposed sequence is placed in @result.  Only up to
@result_len characters are written into @result.  The length
of the full decomposition (irrespective of @result_len) is
returned by the function.  For canonical decomposition,
currently all decompositions are of length at most 4, but
this may change in the future (very unlikely though).
At any rate, Unicode does guarantee that a buffer of length
18 is always enough for both compatibility and canonical
decompositions, so that is the size recommended. This is provided
as %G_UNICHAR_MAX_DECOMPOSITION_LENGTH.

See
[UAX#15](http://unicode.org/reports/tr15/)
for details.
#NAME: hash_table
#PARENT: GLib.hash_table_unref.none
#COMMENT: a valid #GHashTable
#NAME: split
#PARENT: GLib.Regex.split
#COMMENT: a %NULL-terminated gchar ** array. Free
it using g_strfreev()
#NAME: new_utc
#PARENT: GLib.DateTime
#COMMENT: Creates a new #GDateTime corresponding to the given date and time in
UTC.

This call is equivalent to calling g_date_time_new() with the time
zone returned by g_time_zone_new_utc().
#NAME: text
#PARENT: GLib.Scanner.input_text.none
#COMMENT: the text buffer to scan
#NAME: set_icon
#PARENT: GLib.BookmarkFile
#COMMENT: Sets the icon for the bookmark for @uri. If @href is %NULL, unsets
the currently set icon. @href can either be a full URL for the icon
file or the icon name following the Icon Naming specification.

If no bookmark for @uri is found one is created.
#NAME: get
#PARENT: GLib.Private.get
#COMMENT: the thread-local value
#NAME: get_match_count
#PARENT: GLib.MatchInfo.get_match_count
#COMMENT: Number of matched substrings, or -1 if an error occurred
#NAME: ConvertError
#PARENT: GLib
#COMMENT: Error codes returned by character set conversion routines.
#NAME: len
#PARENT: GLib.unicode_canonical_ordering.none
#COMMENT: the maximum length of @string to use.
#NAME: hash_table_add
#PARENT: GLib.hash_table_add
#COMMENT: %TRUE if the key did not exist yet
#NAME: val
#PARENT: GLib.String.overwrite.String
#COMMENT: the string that will overwrite the @string starting at @pos
#NAME: key_file
#PARENT: GLib.KeyFile.load_from_file.gboolean
#COMMENT: an empty #GKeyFile struct
#NAME: too_many_branches_in_define
#PARENT: GLib.RegexError
#COMMENT: "DEFINE" group contains more
    than one branch. Since 2.16
#NAME: get
#PARENT: GLib.Sequence
#COMMENT: Returns the data that @iter points to.
#NAME: ascii_xdigit_value
#PARENT: GLib.ascii_xdigit_value
#COMMENT: If @c is a hex digit (according to g_ascii_isxdigit()),
    its numeric value. Otherwise, -1.
#NAME: hook
#PARENT: GLib.hook_insert_before.none
#COMMENT: the #GHook to insert
#NAME: value
#PARENT: GLib.Variant.byteswap.Variant
#COMMENT: a #GVariant
#NAME: bookmark
#PARENT: GLib.BookmarkFile.set_title.none
#COMMENT: a #GBookmarkFile
#NAME: byteswap
#PARENT: GLib.Variant.byteswap
#COMMENT: the byteswapped form of @value
#NAME: src
#PARENT: GLib.CopyFunc.gpointer
#COMMENT: A pointer to the data which should be copied
#NAME: uri
#PARENT: GLib.BookmarkFile.get_icon.gboolean
#COMMENT: a valid URI
#NAME: print
#PARENT: GLib
#COMMENT: Outputs a formatted message via the print handler.
The default print handler simply outputs the message to stdout, without
appending a trailing new-line character. Typically, @format should end with
its own new-line character.

g_print() should not be used from within libraries for debugging
messages, since it may be redirected by applications to special
purpose message windows or even files. Instead, libraries should
use g_log(), or the convenience functions g_message(), g_warning()
and g_error().
#NAME: errnum
#PARENT: GLib.strerror.utf8
#COMMENT: the system error number. See the standard C %errno
    documentation
#NAME: unichar_isupper
#PARENT: GLib.unichar_isupper
#COMMENT: %TRUE if @c is an uppercase character
#NAME: group_name
#PARENT: GLib.KeyFile.get_uint64.guint64
#COMMENT: a non-%NULL group name
#NAME: list
#PARENT: GLib.List.nth.gpointer
#COMMENT: a #GList, this must point to the top of the list
#NAME: strdown
#PARENT: GLib.strdown
#COMMENT: the string
#NAME: io
#PARENT: GLib.SpawnError
#COMMENT: execv() returned `EIO`
#NAME: node
#PARENT: GLib.Node.copy.Node
#COMMENT: a #GNode
#NAME: 
#PARENT: GLib.String.printf.none...
#COMMENT: the parameters to insert into the format string
#NAME: iso15924
#PARENT: GLib.unicode_script_from_iso15924.UnicodeScript
#COMMENT: a Unicode script
#NAME: key
#PARENT: GLib.Variant.new_dict_entry.Variant
#COMMENT: a basic #GVariant, the key
#NAME: unichar_isdefined
#PARENT: GLib
#COMMENT: Determines if a given character is assigned in the Unicode
standard.
#NAME: user_data
#PARENT: GLib.AsyncQueue.push_sorted.none
#COMMENT: user data passed to @func.
#NAME: get_second
#PARENT: GLib.DateTime
#COMMENT: Retrieves the second of the minute represented by @datetime
#NAME: scanner
#PARENT: GLib.Scanner.cur_value.TokenValue
#COMMENT: a #GScanner
#NAME: log_domain
#PARENT: GLib.log_set_handler.guint
#COMMENT: the log domain, or %NULL for the default ""
    application domain
#NAME: filename_to_uri
#PARENT: GLib
#COMMENT: Converts an absolute filename to an escaped ASCII-encoded URI, with the path
component following Section 3.3. of RFC 2396.
#NAME: string_new
#PARENT: GLib.string_new
#COMMENT: the new #GString
#NAME: OptionArg
#PARENT: GLib
#COMMENT: The #GOptionArg enum values determine which type of extra argument the
options expect to find. If an option expects an extra argument, it can
be specified in several ways; with a short option: `-x arg`, with a long
option: `--name arg` or combined in a single argument: `--name=arg`.
#NAME: peek_tail_link
#PARENT: GLib.Queue
#COMMENT: Returns the last link in @queue.
#NAME: setenv
#PARENT: GLib
#COMMENT: Sets an environment variable. Both the variable's name and value
should be in the GLib file name encoding. On UNIX, this means that
they can be arbitrary byte strings. On Windows, they should be in
UTF-8.

Note that on some systems, when variables are overwritten, the memory
used for the previous variables and its value isn't reclaimed.

You should be mindful of the fact that environment variable handling
in UNIX is not thread-safe, and your program may crash if one thread
calls g_setenv() while another thread is calling getenv(). (And note
that many functions, such as gettext(), call getenv() internally.)
This function is only safe to use at the very start of your program,
before creating any other threads (or creating objects that create
worker threads of their own).

If you need to set up the environment for a child process, you can
use g_get_environ() to get an environment array, modify that with
g_environ_setenv() and g_environ_unsetenv(), and then pass that
array directly to execvpe(), g_spawn_async(), or the like.
#NAME: file_get_contents
#PARENT: GLib.file_get_contents
#COMMENT: %TRUE on success, %FALSE if an error occurred
#NAME: microseconds
#PARENT: GLib.Timer.elapsed.gdouble
#COMMENT: return location for the fractional part of seconds
               elapsed, in microseconds (that is, the total number
               of microseconds elapsed, modulo 1000000), or %NULL
#NAME: left_curly
#PARENT: GLib.TokenType
#COMMENT: a '{' character
